<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Cheminform</journal-id>
    <journal-id journal-id-type="iso-abbrev">J Cheminform</journal-id>
    <journal-title-group>
      <journal-title>Journal of Cheminformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1758-2946</issn>
    <publisher>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6102164</article-id>
    <article-id pub-id-type="publisher-id">295</article-id>
    <article-id pub-id-type="doi">10.1186/s13321-018-0295-6</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Ambit-SMIRKS: a software module for reaction representation, reaction search and structure transformation</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-6547-3675</contrib-id>
        <name>
          <surname>Kochev</surname>
          <given-names>Nikolay</given-names>
        </name>
        <address>
          <email>nick@uni-plovdiv.net</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7539-6511</contrib-id>
        <name>
          <surname>Avramova</surname>
          <given-names>Svetlana</given-names>
        </name>
        <address>
          <email>avramova@uni-plovdiv.net</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-4322-6179</contrib-id>
        <name>
          <surname>Jeliazkova</surname>
          <given-names>Nina</given-names>
        </name>
        <address>
          <email>jeliazkova.nina@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 1014 775X</institution-id><institution-id institution-id-type="GRID">grid.11187.3e</institution-id><institution>Department of Analytical Chemistry and Computer Chemistry, </institution><institution>University of Plovdiv, </institution></institution-wrap>24 Tsar Assen St., 4000 Plovdiv, Bulgaria </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.451031.2</institution-id><institution>Ideaconsult Ltd, </institution></institution-wrap>4 A. Kanchev Str., 1000 Sofia, Bulgaria </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>8</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>8</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2018</year>
    </pub-date>
    <volume>10</volume>
    <elocation-id>42</elocation-id>
    <history>
      <date date-type="received">
        <day>22</day>
        <month>12</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>11</day>
        <month>8</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Ambit-SMIRKS is an open source software, enabling structure transformation via the SMIRKS language and implemented as an extension of Ambit-SMARTS. As part of the Ambit project it builds on top of The Chemistry Development Kit (The CDK). Ambit-SMIRKS provides the following functionalities: parsing of SMIRKS linear notations into internal reaction (transformation) representations based on The CDK objects, application of the stored reactions against target (reactant) molecules for actual transformation of the target chemical objects, reaction searching, stereo information handling, product post-processing, etc. The transformations can be applied on various sites of the reactant molecule in several modes: single, non-overlapping, non-identical, non-homomorphic or externally specified list of sites utilizing efficient substructure searching algorithm. Ambit-SMIRKS handles the molecules stereo information and supports basic chemical stereo elements implemented in The CDK library. The full SMARTS logical expressions syntax for reactions specification is supported, including recursive SMARTS expressions as well as additional syntax extensions. Since its initial development for the purpose of metabolite generation within Toxtree, the Ambit-SMIRKS module was used in various chemoinformatics projects, both developed by the authors of the package and by external teams. We show several use cases of the Ambit-SMIRKS software including standardization of large chemical databases and pathway transformation database and prediction. Ambit-SMIRKS is distributed as a Java library under LGPL license. More information on use cases and applications, including download links is available at <ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/smirks">http://ambit.sourceforge.net/smirks</ext-link>.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>SMIRKS</kwd>
      <kwd>Linear notation</kwd>
      <kwd>Software library</kwd>
      <kwd>Reaction presentation</kwd>
      <kwd>Structure transformation</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100009420</institution-id>
            <institution>European Chemical Industry Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>EEM9.4</award-id>
        <principal-award-recipient>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>Nina</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>EAWAG / Swiss National Science Foundation</institution>
        </funding-source>
        <award-id>CR22I2L_149711</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010661</institution-id>
            <institution>Horizon 2020 Framework Programme</institution>
          </institution-wrap>
        </funding-source>
        <award-id>671555</award-id>
        <principal-award-recipient>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>Nina</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2018</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Background</title>
    <p id="Par22">Two major types of chemical objects are at the core of the cheminformatics—chemical structures and structure transformations (reactions). The efficiency of chemoinformatics applications is tightly coupled with the adequate representation [<xref ref-type="bibr" rid="CR1">1</xref>] of the underlying chemical objects (chemical structures and transformations).</p>
    <p id="Par23">The chemical reactions handling is more challenging compared to the chemical structures processing, due to the complexity of the problem [<xref ref-type="bibr" rid="CR1">1</xref>]. The number of computational tools for reaction modelling is less than the number of structure property prediction tools [<xref ref-type="bibr" rid="CR2">2</xref>]. In the last several decades a lot of effort has been put for advancing the software systems for reaction management. The approaches for reaction representation are based on different paradigms: (1) describing the reaction centers—atoms and bonds directly involved in the rearrangement process that can be identified when a maximum common substructure search between the product and the reactant is made; (2) bond–electron matrices coding; and (3) representation based on molecular fingerprints or vector descriptions—these codification systems use the difference between the fingerprints of the products and the reactants [<xref ref-type="bibr" rid="CR3">3</xref>]. The representation of a generic reaction (any set of reactions which undergo the same set of atom and bond changes, regardless of the underlying molecule substrates [<xref ref-type="bibr" rid="CR4">4</xref>]) requires more sophisticated approach than describing a specific reaction involving all reactant(s) and product(s) (also referred in this paper as an ordinary or simple reaction). For the latter case, the chemical reaction can be simply represented by a set of chemical structures of the reactants and products.</p>
    <p id="Par24">The reaction representation and manipulation methods are built on top of the techniques for chemical structure representation. The ordinary reactions are handled similarly to the molecule objects, while the generic reaction rules implementation follow the methods of structure patterns. The linear notations are widely used for encoding the molecular graphs (e.g. SMILES, InChI) and chemical structure transformations (e.g. SMIRKS, SLN, RInChI). One of the most popular line notation for representation of chemical reactions is SMIRKS [<xref ref-type="bibr" rid="CR4">4</xref>]—a restricted version of reaction SMARTS [<xref ref-type="bibr" rid="CR5">5</xref>] involving changes in atom-bond patterns. The SMIRKS notation is designed to represent a generic reaction: to express the reaction graph and the indirect effects of the transformation. The SYBYL line notation (SLN) [<xref ref-type="bibr" rid="CR6">6</xref>] is suitable for representing reactions and reaction queries and provides a richer syntax for database queries comparable to SMARTS. RInChI [<xref ref-type="bibr" rid="CR7">7</xref>] is a line notation, which enables a hierarchical reaction description. Its multi-layer concept allows including of information about equilibrium, unbalanced or multi-step reactions.</p>
    <p id="Par25">The most commonly used file formats for storing reactions are rxnfiles [<xref ref-type="bibr" rid="CR8">8</xref>] (contain the structural information for the reactants and products of a single reaction); RDfiles [<xref ref-type="bibr" rid="CR8">8</xref>] (a more general format than SDfiles [<xref ref-type="bibr" rid="CR8">8</xref>], that can include reactions as well as molecules, together with their associated data); XDfiles [<xref ref-type="bibr" rid="CR8">8</xref>] (XML-based data format for transferring record sets of structure or reaction information with associated data). The chemotypes [<xref ref-type="bibr" rid="CR9">9</xref>] is an innovative approach for representing molecules, chemical substructures and patterns, reaction rules, and reactions by XML-based Chemical Subgraphs and Reactions Markup Language (CSRML), and allow encoding not only the structure topology but also properties of atoms, bonds, electronic systems, or molecules.</p>
    <p id="Par26">Some of the chemical file formats have been extended with modules for managing chemical and biochemical reactions. An example is CMLReact [<xref ref-type="bibr" rid="CR10">10</xref>]—a set of components added to the Chemical Markup Language (CML) [<xref ref-type="bibr" rid="CR11">11</xref>]. These can be combined to support most of the strategies of reaction representation. Reaction-MQL [<xref ref-type="bibr" rid="CR12">12</xref>], an extension of the Molecular Query Language (MQL) [<xref ref-type="bibr" rid="CR13">13</xref>], is using functional groups to describe the transformations—after defining the functional groups in terms of substructure queries, molecular graphs of reactants are transformed by application of beginning-, end-, and reaction-matrices to obtain the product graph (without consideration of stereochemistry).</p>
    <p id="Par27">The Chemical Terms Language (CTL) [<xref ref-type="bibr" rid="CR14">14</xref>] is an approach developed by ChemAxon and uses substructure queries combined with physicochemical calculations to turn generic reaction rules to specific transformations (depending on a set of reactivity and selectivity rules). The rules written in chemical terms can describe reactive and inactive functional groups and the effect of the chemical environment on the outcome of certain reactions.</p>
    <p id="Par28">The formats for representation and storage of chemical reactions described so far are used within various chemoinformatics software systems and toolkits, enabling the transformation of input reactant structures into reaction product. The open-source cheminformatics libraries (Chemistry Development Kit [<xref ref-type="bibr" rid="CR15">15</xref>–<xref ref-type="bibr" rid="CR17">17</xref>], OpenBabel [<xref ref-type="bibr" rid="CR18">18</xref>], RDKit [<xref ref-type="bibr" rid="CR19">19</xref>]) provide data structures to represent chemical concepts along with methods to manipulate such structures. RDKit [<xref ref-type="bibr" rid="CR19">19</xref>] supports application of chemical reactions to sets of molecules by using a SMARTS-based language similar to daylight’s reaction SMILES. Most commercial cheminformatics packages provide support for reaction transformation. OpenEye [<xref ref-type="bibr" rid="CR20">20</xref>] provides reaction processing divided into two categories: unimolecular reactions and library generation. Sets of chemical transform operations are derived from reaction molecules by differences between the reactant and product patterns and in the reaction molecule. Daylight has a Reaction toolkit [<xref ref-type="bibr" rid="CR21">21</xref>] that has a set of tools which support both specific (single-step) and generic reactions. The extensive use of polymorphism for both reaction and transform objects is one of the key features making the Reaction toolkit convenient to use. CACTVS [<xref ref-type="bibr" rid="CR22">22</xref>] provides full reaction support, including reaction properties and reaction queries. Reaction transformations are possible by means of advanced SMIRKS transform capabilities. Reactor [<xref ref-type="bibr" rid="CR23">23</xref>] is the virtual reaction engine of ChemAxon’s JChem [<xref ref-type="bibr" rid="CR24">24</xref>] technology. It supports “smart” reactions (generic reaction equations combined with reaction rules) generating chemically feasible products with specified predicted properties. There is also a number of toolkits for handling chemical reactions with proprietary licenses like: MolEngine [<xref ref-type="bibr" rid="CR25">25</xref>], Molecular Operating Environment (MOE) [<xref ref-type="bibr" rid="CR26">26</xref>], Accord SDK [<xref ref-type="bibr" rid="CR27">27</xref>].</p>
    <p id="Par29">The analysis of the reviewed software packages highlights the SMIRKS as one of the popular methods for storage and application of chemical reactions. On one hand, SMIRKS can be used for encoding of specific (ordinary) reactions, which can be stored in reaction databases or in reaction libraries. SMIRKS can also be used to represent chemical reactions, as it is capable to provide the computer-readable form of the familiar two-dimensional structural diagrams. On the other hand, SMIRKS has the full functionality to encode generic reactions. Thus, by describing only the reaction centers, the reactions are coded as rules that can be applied on a target molecule in order to obtain a product (synthesis), or to obtain its precursors (retrosynthesis). SMIRKS is an extension of SMILES and SMARTS notations which are among the most widely used and efficient linear notations thus the users can easily adopt their previous experience with SMILES/SMARTS and used it for the purposes of reaction information management. SMILES provide concise and efficient way to describe the molecular structures (i.e. reactants and products) on topological level, while SMARTS expressions and SMIRKS atoms mappings allow specification of exact chemical transformation logic. Another SMIRKS advantage is that it is easy and efficient for manual coding of the chemical reactions as well as for computer handling. In this regard, an open source SMIRKS package would provide the opportunity for development of new tools for resolving various reaction-oriented chemical information problems such as organic synthesis planning, retrosynthesis, prediction of metabolism, combinatorial libraries generation etc.</p>
    <p id="Par30">The open source Ambit-SMIRKS module was initially developed in order to enable reaction transformations in the context of Toxtree [<xref ref-type="bibr" rid="CR28">28</xref>] and the first implementation was included in Toxtree 2.5.0 (2011), enabling metabolite generation with the help of the SmartCyp [<xref ref-type="bibr" rid="CR29">29</xref>]. Ambit-SMIRKS supports the full SMIRKS syntax and has already been used by several external groups and applications, demonstrating its usefulness within the chemoinformatics community. The following sections describe the software architecture and configuration, the available options and functionalities and important implementation details. We also provide recommendation for specifying SMIRKS based reactions using Ambit-SMIRKS with appropriate reaction transformation setup, examples of chemical structures and transformations illustrating the software and various use cases, highlighting the library has already been used by external projects dealing with biotransformations.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Implementation details</title>
      <p id="Par31">Ambit-SMIRKS is an extension to the Ambit-SMARTS library [<xref ref-type="bibr" rid="CR30">30</xref>] and is part of the open source software AMBIT [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR32">32</xref>]. AMBIT provides a REST web service and user friendly web interface to a chemical substance and structure database, various chemical structure search facilities and toxicity prediction models. The data model enables representation of chemical substances in real industry conditions by supporting complex compositions (including impurities, additives, UVCB). Comprehensive assessment workflows are developed for read-across and category formation based on all the data available in AMBIT [<xref ref-type="bibr" rid="CR33">33</xref>, <xref ref-type="bibr" rid="CR34">34</xref>]. The AMBIT package consists of a database and over 30 modules, implementing various cheminformatics functionalities. The Ambit-SMARTS software module [<xref ref-type="bibr" rid="CR30">30</xref>] includes substructure mapping and search tools, used by most of the chemoinformatics tasks.</p>
    </sec>
    <sec id="Sec4">
      <title>Software architecture overview. Basic workflow</title>
      <p id="Par32">The software architecture of Ambit-SMIRKS module presented in Fig. <xref rid="Fig1" ref-type="fig">1</xref> provides an overview of the main components and their links to other AMBIT modules and external software libraries. The upper architecture layer in Fig. <xref rid="Fig1" ref-type="fig">1</xref> represents The CDK [<xref ref-type="bibr" rid="CR17">17</xref>] and Ambit-SMARTS library which is described in detail in Ref. [<xref ref-type="bibr" rid="CR30">30</xref>]. Ambit-SMARTS implements:<fig id="Fig1"><label>Fig. 1</label><caption><p>Ambit-SMIRKS software architecture</p></caption><graphic xlink:href="13321_2018_295_Fig1_HTML" id="MO1"/></fig>
<list list-type="order"><list-item><p id="Par33">SMARTS linear notation parsing;</p></list-item><list-item><p id="Par34">representation of SMARTS queries as internal objects using The CDK API;</p></list-item><list-item><p id="Par35">substructure searching, given a SMARTS query (implemented by the IsomorphismTester java class).</p></list-item></list>
</p>
      <p id="Par36">Based on the main functionalities (1)–(3), additional features are implemented such as database substructure searching with two major stages screening and mapping and equivalent atoms detection (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) [<xref ref-type="bibr" rid="CR30">30</xref>]. Class SmartsManager is a functional wrapper of all Ambit-SMARTS functionalities and provides an API to most tasks that can be performed including SMARTS parsing, substructure searching in various modes, calculation of target molecule properties needed for efficient substructure searching etc. The class SmartsToChemObject provides tools to extract chemical information from complex SMARTS expressions.</p>
      <p id="Par37">The basic functionality of Ambit-SMIRKS is implemented by 3 major Java classes SMIRKSReaction, SMIRKSManager, StereoChemUtils and additional utilities for handling H atoms and reaction search (Fig. <xref rid="Fig1" ref-type="fig">1</xref>).</p>
      <p id="Par38">The class SMIRKSReaction encapsulates all information needed to describe a chemical reaction or molecule transformation: reactants, agents, products, atom mapping, component grouping (CLG—Component Level Grouping as defined by SMARTS) and the information used for reaction application: atoms, bonds and stereo transformations. The treatment of reaction stereo chemistry is implemented in a separate class StereoChemUtils. The CDK library implements a Reaction class which is only suitable to represent ordinary reactions. We developed SMIRKSReaction class especially for encoding generic reactions, though it can also represent ordinary reactions.</p>
      <p id="Par39">The class SMIRKSManager includes basic API handling all the information within a reaction application workflow. The reaction transformation workflow is configured by a set of flags which define target molecule preprocessing, product post processing, search mode, stereo transformation, H atom treatment etc. Table <xref rid="Tab1" ref-type="table">1</xref> shows a list of SMIRKSManager flags.<table-wrap id="Tab1"><label>Table 1</label><caption><p>List of all flags used to configure Ambit-SMIRKS</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">Flag and description</th><th align="left">Default value</th></tr></thead><tbody><tr><td align="left">1.</td><td align="left"><italic>FlagSSMode</italic><break/>Defines substructure searching (mapping) mode and how all found sites for reaction application in the target molecule are combined by function applyReaction(). The following modes are supported: SSM_SINGLE, SSM_NON_OVERLAPPING, SSM_NON_IDENTICAL, SSM_NON_EQUIVALENT, SSM_ALL, SSM_NON_IDENTICAL_FIRST</td><td align="left">SSM_NON_OVERLAPPING</td></tr><tr><td align="left">2.</td><td align="left"><italic>FlagCheckResultStereo</italic><break/>If true, the stereo elements within the obtained product molecules are verified and incorrect ones are removed. This flag does not define whether the stereo transformation should be applied</td><td align="left">True</td></tr><tr><td align="left">3.</td><td align="left"><italic>FlagFilterEquivalentMappings</italic><break/>Defines whether to filter topologically equivalent sites (mappings) for reaction application</td><td align="left">False</td></tr><tr><td align="left">4.</td><td align="left"><italic>FlagProcessResultStructures</italic><break/>If true, the result molecules (products) are processed according to the configurations defined by other flags below</td><td align="left">False</td></tr><tr><td align="left">5.</td><td align="left"><italic>FlagClearHybridizationBeforeResultProcess</italic><break/>If set true, the atom hybridization types are cleared in the product molecule. Typically this flag should be true in order to correctly detect the new atom types of transformed molecules</td><td align="left">True</td></tr><tr><td align="left">6.</td><td align="left"><italic>FlagClearAromaticityBeforeResultProcess</italic><break/>If true, aromaticity information for all atoms and bonds in the obtained products is cleared. Typically this flag should be true since the aromaticity should be detected for all new products due to possible changes in the aromatic systems</td><td align="left">True</td></tr><tr><td align="left">7.</td><td align="left"><italic>FlagClearImplicitHAtomsBeforeResultProcess</italic><break/>Defines whether to clear implicit H atoms before result product processing</td><td align="left">True</td></tr><tr><td align="left">8.</td><td align="left"><italic>FlagClearExcplicitHAtomsBeforeResultProcess</italic><break/>Defines whether to clear explicit H atoms before result product processing</td><td align="left">False</td></tr><tr><td align="left">9.</td><td align="left"><italic>FlagAddImplicitHAtomsOnResultProcess</italic><break/>Defines whether to add implicit H atoms on product molecule processing</td><td align="left">False</td></tr><tr><td align="left">10.</td><td align="left"><italic>FlagConvertAddedImplicitHToExplicitOnResultProcess</italic><break/>Defines whether to convert the added implicit H atoms to explicit. This flag is used only if implicit H atoms are added (see previous flag 9)</td><td align="left">False</td></tr><tr><td align="left">11.</td><td align="left"><italic>FlagCheckAromaticityOnResultProcess</italic><break/>Defines whether to apply aromaticity detection algorithm for the new products</td><td align="left">True</td></tr><tr><td align="left">12.</td><td align="left"><italic>FlagConvertExplicitHToImplicitOnResultProcess</italic><break/>Defines whether to convert explicit H atoms to implicit ones. Typically if this flag is true, it is expected that FlagAddImlicitHAtomsOnResultProcess = false</td><td align="left">False</td></tr><tr><td align="left">13.</td><td align="left"><italic>FlagApplyStereoTransformation</italic><break/>Determines whether to perform stereo transformation of the target molecules according to the defined SMIRKS. If this flag is not set, stereo elements of the molecule are preserved when possible (e.g. when they are not changed or deleted). If the flag is true, full stereo transformation is applied in accordance with the defined SMIRKS</td><td align="left">False</td></tr><tr><td align="left">14.</td><td align="left"><italic>FlagHAtomsTransformation</italic><break/>Defines whether to apply H atom transformation according to the used atom expressions in the SMIRKS</td><td align="left">False</td></tr><tr><td align="left">15.</td><td align="left"><italic>FlagHAtomsTransformationMode</italic><break/>Defines H atoms transformation mode: IMPLICIT or EXPLICIT. This flags is used only when previous one is set</td><td align="left">Implicit</td></tr><tr><td align="left">16.</td><td align="left"><italic>FlagAromaticityTransformation</italic><break/>Defines whether to apply post transformation additional aromaticity setting within obtained products based on the SMIRKS expression</td><td align="left">False</td></tr></tbody></table></table-wrap></p>
      <p id="Par40">The underlying molecule representation layer follows the CDK conventions of chemical objects processing, i.e. is composed of two steps: storage into an object of type AtomContainer, and consequently configuration of the chemical object (e.g. atom typing, aromaticity detection, H atom setting, atom and bond properties setting etc.). Most of the CDK algorithms expect that the chemical objects are properly configured. On the other hand, the files storage and other input/output CDK utilities typically do not configure the chemical objects and it is assumed that the creator/user of the chemical object is responsible for the proper configuration. The SMIRKSManager class expects properly configured chemical objects as input reactants. The post-processing of the resulting products can be performed either by the user or by the SMIRKSManager post-processing utilities, according to the options specified (see the flags listed in Table <xref rid="Tab1" ref-type="table">1</xref>). The options include the following operations (switched on/off by the corresponding flags): clearing of atom hybridization, aromaticity and H atoms before processing, atom typing and configuration, adding of implicit H atoms, aromaticity detection, conversion of implicit H atom to explicit or vice versa.</p>
      <p id="Par41">The SMIRKS parsing functionality is based on the SmartsParser class where the reaction information from the linear notation is represented as an object of the class SMIRKSReaction (see more details in next section). For a given target molecule (a reactant), all possible sites for reaction application are found by means of substructure search using the IsomorphismTester functionality [<xref ref-type="bibr" rid="CR30">30</xref>]. The application of the reaction (the actual transformation of the target molecule) is performed for some or all of the matched substructures, which are combined in accordance with the reaction application mode (see more details in following sections). The reaction application algorithm makes use of the transformation information of the atoms, bonds and stereo elements stored in class SMIRKSReaction, the stereo chemistry utilities, the HAtomManager class and the optional product post-processing.</p>
    </sec>
    <sec id="Sec5">
      <title>Chemical objects representation</title>
      <p id="Par42">Chemoinformatics treatment of a chemical reaction requires handling of three different types of chemical objects: molecules, search queries and chemical reaction specific information, such as atom mapping and chemical transformation data. The topological representation of a chemical compound (i.e. chemical graph) as implemented by the CDK class AtomContainer comprises a list of atoms, list of bonds, standard operations over these lists as well as a stereo element list (see more details on CDK in [<xref ref-type="bibr" rid="CR17">17</xref>]).</p>
      <p id="Par43">The substructure search queries are another essential type of chemical objects needed for the realization of Ambit-SMIRKS reaction management. The substructure query is represented by an extended graph, encoded by the CDK class QueryAtomContainer (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Instead of using simple IAtom list and IBond list, the components of the QueryAtomContainer are atom expressions and bond expressions implemented accordingly as descendants of the classes SMARTSAtom and SMARTSBond. Within Ambit-SMARTS package [<xref ref-type="bibr" rid="CR30">30</xref>], several specialized classes were implemented (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>) where SmartsAtomExpression and SmartsBondExpression realize the full power of SMARTS/SMIRKS syntax.<fig id="Fig2"><label>Fig. 2</label><caption><p>Substructure search query representation within Ambit-SMIRKS</p></caption><graphic xlink:href="13321_2018_295_Fig2_HTML" id="MO2"/></fig>
</p>
      <p id="Par44">The reaction information representation is implemented by the SMIRKSReaction class (Fig. <xref rid="Fig3" ref-type="fig">3</xref>) and includes two specialized graphs respectively for the reactants and the products. If the reactant or the product part contains more than one molecule or fragment, the corresponding graph is disconnected, and additional atom numbering is supported to designate which fragment the atoms belong to. The latter is needed for Component Level Grouping in SMARTS matching. The mapping information is a significant part of the reaction representation, linking the atoms from the reactant graph to the atoms of the product graph. Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the mapping for the reduction of amides:<fig id="Fig3"><label>Fig. 3</label><caption><p>Reaction representation of amide reduction by Ambit-SMIRKS</p></caption><graphic xlink:href="13321_2018_295_Fig3_HTML" id="MO3"/></fig>
<list list-type="bullet"><list-item><p id="Par45">[NX3H0,NX3H1,NX3H2:1][CX3:2]=[OX1]≫[NX3H0,NX3H1,NX3H2:1][CX3:2]([H])[H].</p></list-item></list>
</p>
      <p id="Par46">The nitrogen and carbon atoms are mapped by SMIRKS indices 1 and 2 accordingly. The reactant oxygen atom and the explicit H atoms are not mapped (unmapped atoms usage is explained in a following section). Additional mappings are used for the practical application of a reaction transformation against a target: the target reactant molecule maps to the reactant query graph and respectively the product query graph maps to the result product molecule. In Fig. <xref rid="Fig3" ref-type="fig">3</xref> example, the nitrogen query atom [NX3H0,NX3H1,NX3H2:1] matches the reactant atom 3 and the carbon query atom [CX3:2] matches the reactant atom 2. In the result product (after applying the reaction) these atoms have new indices 3 and 4 respectively.</p>
      <p id="Par47">Based on the mapping information, the reaction transformation is represented as specialized data structure describing the changes (update, deletion, creation) of molecule elements: atoms, atom properties, bonds, bond properties and stereo elements.</p>
    </sec>
    <sec id="Sec6">
      <title>Ambit-SMIRKS parser</title>
      <p id="Par48">The Ambit-SMIRKS parser is built on top of the utilities implemented in Ambit-SMARTS (see class SmartsParser [<xref ref-type="bibr" rid="CR30">30</xref>]). Initially the SMIRKS linear notation is separated to components according to the SMIRKS syntax: reactants &gt; agents &gt; products (most often in the form: reactants ≫ products). SmartsParser is invoked for each component and corresponding QueryAtomContainer is generated. Figure <xref rid="Fig4" ref-type="fig">4</xref> illustrates the parsing process for the reaction of dihydropyrrole aromatization. No agents are present in this example, and it is quite usual for SMIRKS linear notations of generic reactions to contain reactants and products only.<fig id="Fig4"><label>Fig. 4</label><caption><p>SMIRKS parsing algorithm. Reaction processing applied for reaction of dihydropyrrole aromatization</p></caption><graphic xlink:href="13321_2018_295_Fig4_HTML" id="MO4"/></fig>
</p>
      <p id="Par49">The SMIRKS parsing continues with analysis of the atom mapping. In the following examples, major types of atom mapping parser errors are shown:<list list-type="bullet"><list-item><p id="Par50">Missing atom map index on one of the SMIRKS parts (product or reactant). For example, the notation [C:1][C:2]≫[C:1]=[C] is with missing map index 2 on the product side.</p></list-item><list-item><p id="Par51">Repeating atom map index on one of the SMIRKS parts (product or reactant) e.g. [C:1][C:2]≫[C:1]=[C:1]</p></list-item><list-item><p id="Par52">Inconsistent atom elements of a pair of mapped atoms from (one atom from reactant and one from product side respectively have different atom elements) or undefined atoms elements for unmapped product atoms e.g.<list list-type="bullet"><list-item><p id="Par53">[C:1][C:2]≫[N:1]=[C:2].</p></list-item><list-item><p id="Par54">[C:1]≫[C:1][Cl,Br].</p></list-item></list>
</p></list-item></list>
</p>
      <p id="Par55">Detecting inconsistent atom elements of mapped atom pairs is a complex procedure. The atom elements of all atom expressions are “extracted” and detected when possible. The class SmartsToChemObject utilities for analyzing SMARTS atom expression are used for this purpose. Since the SMARTS syntax definining the atom expressions is quite flexible, arbitrary atom expressions are supported by SMIRKS (e.g. where an atom element is undefined). For example, the following atoms expressions contain undefined atom element: [Cl,Br,I], [!C;!N] and [CH3,NH2,OH], while expression [CH3, CH2, CH; !$(CO)] is with defined atom element ‘carbon’.</p>
      <p id="Par56">In order to obtain chemically reasonable structures, the SMIRKS notation that defines the molecule operations (such as atom/bond property changes, deletions and additions) should generate well defined chemical structures as reaction products (i.e. the atom, bonds and their properties should be exactly defined). Examples for chemically impossible operation are: “creation of a bond which has single or double order”, “creation of an atoms which is a carbon or nitrogen”, “setting atom charge to be + 1 or + 2” etc.</p>
      <p id="Par57">The Ambit-SMIRKS provides basic sanity-checks to ensure valid chemical structures on output:<list list-type="order"><list-item><p id="Par58">It is allowed that both reactant and product atoms from a mapped atom pair to contain undefined atom elements (usually it is expected both atom expressions to be the same).</p><p id="Par59">Example: [C:1][*:2]≫Cl[C:1][*:2]</p></list-item><list-item><p id="Par60">It is considered an error, if the reactant and product atoms of a mapped atom pair have clearly defined, but different atom elements.</p><p id="Par61">Example [C:1][C:2]≫[O:1][C:2]</p></list-item><list-item><p id="Par62">Unmapped product atoms with undefined atoms elements are not allowed.</p><p id="Par63">Example: [C:1]≫[C:1][Cl,Br]</p></list-item><list-item><p id="Par64">Unmapped reactant atoms with undefined atoms elements are allowed.</p><p id="Par65">Example: [C:1] [Cl,Br]≫[C:1]</p></list-item><list-item><p id="Par66">A bond expression with undefined bond order is not allowed in the product side unless it connects two mapped atoms and exactly the same expression with unknown bond order connects the corresponding reactant atoms.</p><p id="Par67">Examples: [C:1]=[C:2]≫[C:1]-,=[C:2] not allowed</p><p id="Par68">[C:1]≫[C:1]-,=C not allowed</p><p id="Par69">[C:1] -,=[C:2]≫[C:1]-,=[C:2] allowed</p></list-item><list-item><p id="Par70">A bond expression with undefined bond order is allowed in the reactant side.</p><p id="Par71">Example: [C:1]-,=[C:2]≫[C:1]-[C:2]</p></list-item></list>
</p>
      <p id="Par72">The rule (2) prevents SMIRKS that defines changing of the mapped atom element (which is not a chemical reaction any more but rather is a “nuclear process”). By the way if the user needs such a transformation (i.e. “make carbon to become oxygen”) this could be achieved by means of unmapped atoms i.e. C[C:2]≫O[C:2] will be a correct SMIRKS which actually “says” delete C atom and attach a new O atom (more on mapped and unmapped atoms see in following section).</p>
      <p id="Par73">The rule (3) prevents a chemically and technically impossible case—to create an atom of unknown element within a defined molecule (not a query molecule). On a contrary, rule (4) allows removal of atoms with unknown element. Similarly, the rule (5) prevents chemically impossible SMIRKS instruction to create a new bond with unknown bond order.</p>
      <p id="Par74">On the base of stored mappings, the transformation information is generated and stored within SMIRKSReaction class as well. Change of the atom element is not allowed, but atom property changes are allowed. Handling atoms properties and their changes for sophisticated atoms expressions is as challenging as detecting element change within SMIRKS definitions (described above). SmartsToChemObject class is used for analyzing atom expressions and consequently storing the required atom properties changes in class SMIRKSReaction. When detecting atom property changes, policies similar to the described above rules (1)–(6) are used. In this case when inconsistent property values are given for a mapped atom pair, the changes are not registered. For example: [C+,C++:1]≫[C:1] defines a change of atom charge while [C+,C++:1]≫[C+,C++:1][H] does not define an atom charge change.</p>
      <p id="Par75">So far we have described the representation and storage of full reaction information needed for the reaction transformation algorithms. Reaction application is performed in three main steps:<list list-type="order"><list-item><p id="Par76">Target molecule/molecules reaction sites identification;</p></list-item><list-item><p id="Par77">Actual transformation of all identified reaction sites (or some of them);</p></list-item><list-item><p id="Par78">Combination of the result structures from step (2) into a final set of products.</p></list-item></list>
</p>
    </sec>
    <sec id="Sec7">
      <title>Matching reaction sites by substructure search</title>
      <p id="Par79">The reactant part of the SMIRKS linear notation is used as a definition of a SMARTS substructure search query, where the mapping indices are ignored. Ambit-SMIRKS uses the substructure search implementation of Ambit-SMARTS [<xref ref-type="bibr" rid="CR30">30</xref>] to find the reaction sites.</p>
      <p id="Par80">Ambit-SMARTS module supports also fragmented queries with Component Level Grouping (CLG). The SMARTS syntax allows “zero-level” parentheses which can be used to group dot-disconnected fragments. This grouping operator is particularly important for substructure matching of reactions with multiple components in the reactant part.</p>
      <p id="Par81">The substructure searching can be performed in several modes: single, non-overlapping, non-identical, non-homomorphic or externally specified list of sites. Figure <xref rid="Fig5" ref-type="fig">5</xref> illustrates the basic substructure match modes. For the molecule of cyclohexane-1,2-diamine, substructure query defined by SMARTS notation CCN is matched at 4 possible places i.e. the fragments listed in column “All matches”: A {match atoms 3, 2, 1}, B{match atoms 7, 2, 1}, C{match atoms 6, 7, 8} and D{match atoms 2, 7, 8}.<fig id="Fig5"><label>Fig. 5</label><caption><p>Substructure search/match in various modes for the molecule of cyclohexane-1,2-diamine</p></caption><graphic xlink:href="13321_2018_295_Fig5_HTML" id="MO5"/></fig>
</p>
      <p id="Par82">All the matches in this example correspond to the non-identical mode since all found fragments (A, B, C and D) differ one to another at least with one target atom. Non-overlapping mode will give as a result fragments A and D since these have no common atoms. Fragment A is topologically equivalent to C as well B is equivalent to D. That is way, non-homomorphic mode would give as a result one of the following four combinations (couples) of fragments: {A, B}, {A, D}, {B, C} or {C, D}. EquivalenceTester class is used to find all topologically equivalent atoms and fragments respectively. The utilization of various substructure match modes is needed for the implementation of efficient and flexible algorithm for reaction application described in following sections.</p>
    </sec>
    <sec id="Sec8">
      <title>Support for recursive SMARTS expressions</title>
      <p id="Par83">Ambit-SMIRKS supports the full standard of the rich SMARTS syntax as far as it is chemically reasonable for the definition of SMIRKS reactions. Ambit-SMIRKS works with atom expressions as well as with bonds expression (the standard SMIRKS includes only atom logical expressions). The only exceptions from the SMARTS syntax are the atom and bond inconsistency rules described in previous sections. The rules do not impose restriction on the standard, but exclude chemically unreasonable cases. Additionally, the SMARTS/SMIRKS syntax is enriched in Ambit with some third party extensions [<xref ref-type="bibr" rid="CR30">30</xref>].</p>
      <p id="Par84">One of the most important features of Ambit-SMIRKS is the support of recursive atom expressions. A recursive atom expression includes within its logical atom primitives another SMARTS string, where the recursive expressions are defined by the syntax: […$(smarts)…].</p>
      <p id="Par85">For example expression [CH3;!$(C*=O);!$(C*N)] defines a methyl group that is not next to an atom with carbonyl or amine group. The support of recursive atom expression gives great flexibility of defining the complex molecular patterns logic. In this way Ambit-SMIRKS allows to precisely define the reaction centers by specifying details about the atom environments. In contrast, non-recursive SMARTS can define expressions only of the atoms themselves but not of any close or distant environment of the atoms.</p>
      <p id="Par86">The difference in the course of reactions with and without recursive expressions explicitly defines the environment around the reaction site atoms is shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref>. In this example, the reaction of hydrolysis can occur on two sites—the ester functional group (a linear ester) and the lactone (a cyclic ester). In the first case, without recursive expression, it is possible hydrolysis of the lactone to take place—the ring opens and only one product is obtained. In the second case, a recursive expression indicates that the hydrolysis reaction will occur to an ester which is not a lactone. Thus, the lactone functional group does not match the reaction and the hydrolysis proceeds with the linear ester.<fig id="Fig6"><label>Fig. 6</label><caption><p>Specification of reaction center via recursive SMARTS for the reaction of ester hydrolysis</p></caption><graphic xlink:href="13321_2018_295_Fig6_HTML" id="MO6"/></fig>
</p>
    </sec>
    <sec id="Sec9">
      <title>Structure transformations</title>
      <p id="Par87">A SMIRKS transformation of a given target molecule can be applied directly on the target molecule by transforming its AtomContainer object. In this case, the target molecule is the reactant at the start of the transformation, and the same AtomContainer holds the reaction products after the transformation. If more than one product is obtained, the resulting AtomContainer will be fragmented and fragment extraction procedure may be required. Another feature supported in Ambit-SMIRKS is generation of molecule copies, corresponding to particular products, obtained by applying the reaction transformation at particular sites. In both cases the structure transformations are based on the substructure search modes described above. When transformation is performed without molecule copying, the input target molecule is modified as the transformation is applied in all found reaction places combined according to the used reaction mode. For example in mode SINGLE one of the products 1, 2, 3 or 4 will be obtained (see Fig. <xref rid="Fig7" ref-type="fig">7</xref>). In mode NON_HOMOMORHIC one of the products 10 or 11 will be obtained. The application of reaction transformation directly on the input molecule in one of the modes ALL or NON_IDENTICAL will produce chemically incorrect structure 9 since all four possible rings are transformed thus producing 5 valent carbons. The user is expected to check the chemical correctness of obtained reaction products. Incorrect structure obtained in NON_IDENTICAL mode could be avoided if reaction transformations are applied in a cascading style i.e. the transformations are applied in several single steps (one single transformation for each reaction site) while remaining sites are checked whether they are still valid instances for the next reaction steps. The direct transformation of the target molecule without copying does not generate all possible product combinations, but the reaction is applied simultaneously over all sites comprising one possible combination per mode (ALL, NON_IDENTICAL, NON_OVERLAPPING, NON_HOMOMORPHIC or SINGLE). For example, in mode NON_OVERLAPPING only one of the structures 5, 6, 7 or 8 will be obtained.<fig id="Fig7"><label>Fig. 7</label><caption><p>Reaction transformation according to the substructure match modes</p></caption><graphic xlink:href="13321_2018_295_Fig7_HTML" id="MO7"/></fig>
</p>
      <p id="Par88">In order to obtain all possible products in single mode (e.g. structures 1, 2, 3 and 4, see Fig. <xref rid="Fig7" ref-type="fig">7</xref>), reaction transformation with a single copy for each product should be applied. Thus for each molecule copy, the reaction will be performed in different location and all possible products will be obtained. If needed, Ambit-SMIRKS provides an option to generate all possible non-overlapping combination e.g. structures 5, 6, 7 and 8. Instead of obtaining the reaction sites by the standard search modes, user defined sites for reaction application could be specified by IAcceptable interface. This option is especially helpful when additional information of reaction occurrence sites is available from external sources (e.g. quantum chemical calculations, other molecular modeling method, expert/user selection etc.). In the result products shown in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, there are several pairs of topologically equivalent structures: 1 is equivalent to 4, 2 is equivalent to 3, 5 is equivalent to 8 and 10 is equivalent to 11. In order to remove the redundant result products, flag <italic>FlagFilterEquivalentMappings</italic> should be set to TRUE.</p>
      <p id="Par89">By elaborating the details of the SMIRKS processing logic, we hope to provide to Ambit-SMIRKS users insight into its use and assist with obtaining correct results from chemical point of view. One foundational technical aspect of the SMIRKS usage is that linear notation SMIRKS should be considered as a small “chemical program” or macros that “says” which parts of the target molecule to be transformed and how the identified parts to be transformed. Ambit-SMIRKS library will do exactly what it can infer from the changes discerned across the SMIRKS reaction sides which include detailed information about the manipulations of atoms and bonds, their properties, H atoms, stereo etc. Knowing the SMIRKS syntax and semantics well, and complying with the good practices concerning its usage are keys for the efficient usage. Failing to describe correctly the intended chemical transformation will lead to undesirable results or some side effects. In “<xref rid="Sec11" ref-type="sec">Results and discussion</xref>” section we discuss topics which are important for working efficiently with Ambit-SMIRKS as well as issues we have observed through several years of feedback and interaction with external users of the library that can be avoided by following the good practices of composing correct SMIRKS and using appropriate chemical object processing.</p>
    </sec>
    <sec id="Sec10">
      <title>SMIRKS searching</title>
      <p id="Par90">Reaction search utilities are implemented by several dedicated classes: SmartsIsomorphismTester, SmartsMatch and ReactionSearch (see Fig. <xref rid="Fig8" ref-type="fig">8</xref>). Reaction search is considered in three basic scenarios:<fig id="Fig8"><label>Fig. 8</label><caption><p>Reaction search strategies</p></caption><graphic xlink:href="13321_2018_295_Fig8_HTML" id="MO8"/></fig>
<list list-type="order"><list-item><p id="Par91">Match an ordinary reaction against another ordinary reaction (i.e. reaction identification);</p></list-item><list-item><p id="Par92">Match a generic query SMIRKS reaction against ordinary reaction represented in a simple manner as a set of products and a set of reactants;</p></list-item><list-item><p id="Par93">Match a generic query SMIRKS reaction against another generic target SMIRKS reaction.</p></list-item></list>
</p>
      <p id="Par94">The first scenario does not need special reaction utilities since it is executed by means of structure identity search for the reactants and products (e.g. on the base of InChI keys or other unique structure representation).</p>
      <p id="Par95">In the second scenario, the target reaction is represented via usual chemical objects such as CDK AtomContainer. This simple reaction representation is handled by means of existing substructure searching implementations. Bearing in mind that the SMIRKS could be considered as two separate SMARTS notations (one for the reactants and one for the target), the reaction searching is performed by means of standard SMARTS matching against the target reactants and products respectively. This operation is performed using the IsomorphismTester class implemented in Ambit-SMARTS (see also Fig. <xref rid="Fig1" ref-type="fig">1</xref>).</p>
      <p id="Par96">The third scenario is the most challenging case of reaction searching. Usually the reactions from a reaction database (or reaction set) are represented via SMIRKS notation or similar reaction representation in a more generic fashion (i.e. a set of many ordinary reactions described by means of a more general notation or rule). The reaction search in this case requires an algorithm to match a query SMIRKS against another reaction represented also with SMIRKS. In this scenario, the reaction matching also will include the two major steps: matching the reactants and matching the products. However, the standard Ambit-SMARTS matching tools (i.e. IsomorphismTester) will not be applicable, since the target objects are not standard chemical objects (e.g. AtomContainer objects) but are “query” objects. The CDK QueryAtomContainer is based on IQueryAtom and IQueryBond interfaces that can match only IAtom and IBond objects. For this purpose we have developed a specialized class SmartsMatch which provides functionality for matching IQueryAtom against another IQueryAtom and respectively IQueryBond against another IQueryBond. A new isomorphism class called SmartsIsomorphismTester was developed (as an extension of the SmartsMatch class), which can be used for matching one SMARTS object (i.e. QueryAtomContainer) against another SMARTS object. The latter is the case for matching the reactants/products from one SMIRKS reaction against reactants/products of another SMIRKS. SmartsMatch utilities are tricky since instead of ordinary atom, an atom expression is used (the same holds for the bond handling). The SmartsMatch class implements matching of one atom/bond expression against another atom/bonds expression. The matching can be performed in various modes. In EXACT mode both expression must be exactly the same in order to have a match e.g. atom expression [Cl,F,Br] matches [Cl,F,Br] but does not match [Cl,F] expression. In mode SPECIFIC_MATCHES_GENERIC [Cl,F,Br] will not match [Cl,F] but it will match [Cl,F,Br,I] or * expressions. Mode GENERIC_MATCHES_SPECIFIC is applied with reverse logic to the previous one i.e. [Cl,F,Br] will not match [Cl,F] but it will match [Cl,F,Br,I] expression. The reaction matching modes can be used for various searching needs. When one wants to find a reaction which is a particular case of a more generic reaction SPECIFIC_MATCHES_GENERIC mode will be utilized. If one searches a set of concrete realizations of a generic reaction, mode GENERIC_MATCHES_SPECIFIC would be required or scenario (2) can applied as well. We should mention that applying search scenario (3) for more complex or "obscure” cases (e.g. expression of the type [!CX4;!NX3]) is very challenging and might not work properly. We plan to continue our work on improving the handling of more complex cases.</p>
    </sec>
  </sec>
  <sec id="Sec11">
    <title>Results and discussions</title>
    <p id="Par97">Ambit-SMIRKS functionalities have been developed, improved and tested for several years in various use cases and chemoinformatics tasks. In this section we present specific Ambit-SMIRKS usage details concerning chemoinformatics routines such as treating of H atoms, aromatic systems and stereo elements as well as suggestions for power usage of SMIRKS syntax, to achieve maximal benefits, based on numerous user feedbacks and use cases.</p>
    <sec id="Sec12">
      <title>Mapped versus unmapped atoms</title>
      <p id="Par98">The SMIRKS linear notation supports atom mapping definition with following syntax:<list list-type="bullet"><list-item><p id="Par99">[&lt;atom expression&gt;:&lt;n&gt;]</p></list-item></list>
</p>
      <p id="Par100">The atom mapping index, <bold>&lt;n&gt;,</bold> is specified after the atom expression that defines the chemical logic, within the square brackets. For example the notation <bold>[C;R:3]</bold> defines an aliphatic carbon which is part of a ring system and has a reaction mapping index 3. Typically, atom mapping is used to map the product atoms versus reactant atoms e.g. when several atoms of particular element are present on both sides of the reaction, the atom mapping index distinguishes between the atoms (recall the atom definitions in SMIRKS are not unique).</p>
      <p id="Par101">Figure <xref rid="Fig4" ref-type="fig">4</xref> shows another example, where the four carbon atoms from the five member ring are distinguished on the base of atom mapping (SMIRKS notation: [N:1]1[C:2][C:3]=[C:4][C:5]1≫[N:1]1[C:2]=[C:3][C:4]=[C:5]1). The SMIRKS syntax also supports unmapped atoms e.g. a transformation could be defined as C=C≫CC. Ambit-SMIRKS software supports both mapped and unmapped atom definitions.</p>
      <p id="Par102">The logic behind unmapped atoms is the following:<list list-type="order"><list-item><p id="Par103">Unmapped atoms on the reactant (left) side of the SMIRKS, as well as all bonds incident to unmapped atoms are removed from the resulting products;</p></list-item><list-item><p id="Par104">Unmapped atoms on the product (right) side of SMIRKS are created and added to the resulting products, the corresponding new bonds (from the unmapped atom to other atoms) are created as well.</p></list-item></list>
</p>
      <p id="Par105">The above points describe the actual cases, where unmapped atoms are to be used within SMIRKS: deleting atoms or adding atoms. In all other cases where atoms are “rearranged” by changing, adding or removing bonds, obligatory usage of mapped atoms is considered a good practice. An incorrect usage of unmapped atoms leads to side effects and “strange” or incorrect application of the reactions SMIRKS. Even if specifying syntactically correct SMIRKS, the chemical logic when using unmapped atoms is different and Ambit-SMIRKS will follow exactly the transformation logic. Figure <xref rid="Fig9" ref-type="fig">9</xref> illustrates the difference between using mapped and unmapped atoms within the same simple SMIRKS transformation: changing double bond to a single one. The major side effect obtained by the incorrect usage of unmapped atoms (e.g. C=C≫CC) is fragmentation of the resulting products (most often undesired). The latter is due to the fact that the unmapped atoms are deleted at the reactant side and then added again on the product side. In this process the bonds incident to the deleted unmapped atoms are removed thus result products are fragmented for example propene transformation gives ethane and methane instead of propane. Similarly, cyclohexene is not correctly transformed to cyclohexane, but instead two fragments are obtained. In Fig. <xref rid="Fig9" ref-type="fig">9</xref> correct double bond transformation is obtained only for the case of SMIRKS with fully mapped atoms [C:1]=[C:2]≫[C:1][C:2]. The mixed SMIRKS case ([C:1]=C≫[C:1]C) with one mapped and one unmapped atom also produces fragmentation. Typically for normal chemical transformations, SMIRKS atom mapping is needed and within the Ambit-SMIRKS module it is considered as a good practice. Although a notation like C=C≫CC is very simple and attractive, it only works by coincidence for the molecule of ethane and generates fragmented products for all other cases (see Fig. <xref rid="Fig9" ref-type="fig">9</xref>) unless of course this side effect is desired. Another exception of the recommended practice for fully using mapped atoms is the case of explicit H atoms. When H atoms are defined explicitly within the SMIRKS they may be mapped or unmapped since are treated as the other heavy atoms. For both variants of explicit H atom definition, the final result is the same because H atoms are topologically connected only to one atom and thus removing and adding them again (which is the case of unmapped H atoms) does not influence other topological connections. For example, the following SMIRKS variants are equivalent from the point of view of the chemical products obtained:<fig id="Fig9"><label>Fig. 9</label><caption><p>Processing unmapped atoms in SMIRKS notation</p></caption><graphic xlink:href="13321_2018_295_Fig9_HTML" id="MO9"/></fig>
<list list-type="bullet"><list-item><p id="Par106">[C:1]=[C:2][O:3][H]≫[C:1][C:2] [O:3][H]</p></list-item><list-item><p id="Par107">[C:1]=[C:2][O:3][H:4]≫[C:1][C:2] [O:3][H:4]</p></list-item></list>
</p>
      <p id="Par108">A minor speed decrease could be expected for the first case since extra H atom deletion and H atom creation is executed. In some occasions using unmapped explicit H atoms is preferred due to the simplicity of the SMIRKS.</p>
    </sec>
    <sec id="Sec13">
      <title>Hydrogen atoms handling</title>
      <p id="Par109">The majority of chemoinformatics software systems, as well as Ambit-SMIRKS handle the hydrogen atoms in two basic manners: (1) as implicit H atoms described as attributes to other heavy atoms and (2) explicit H atoms which are treated as normal heavy atoms. Usually, the implicit hydrogen atoms approach is preferred, as the connection tables are larger when using explicit hydrogens (up to three times large since about 2/3 of the atoms in organic molecules are hydrogens). However using explicit H atoms in SMIRKS transformations, allows robust and more precise description of the chemical reaction logic. Figure <xref rid="Fig10" ref-type="fig">10</xref> shows three main scenarios of H atom treatment within Ambit-SMIRKS software.<fig id="Fig10"><label>Fig. 10</label><caption><p>Handling H atoms for aliphatic hydroxylation SMIRKS reaction</p></caption><graphic xlink:href="13321_2018_295_Fig10_HTML" id="MO10"/></fig>
</p>
      <p id="Par110">The first scenario of handling aromatic hydroxylation reaction is based on explicit description of all atoms including explicit H atoms as well. We recommend this approach as the best practice for describing chemical reactions, since it defines the changes of all chemical bonds including those attached to H atoms. This approach requires strict description of all changes within the molecule, due to the chemical reaction specified. This way the chances for obtaining chemically correct products will be higher. Chemically correct products are not guaranteed by the SMIRKS standard itself—the SMIRKS syntax just gives means to describe the desired molecule transformation, regardless of its correctness. The first scenario on Fig. <xref rid="Fig10" ref-type="fig">10</xref> requires explicit H atoms representation of the target molecule, otherwise the reaction will not be applied.</p>
      <p id="Par111">The second scenario on Fig. <xref rid="Fig10" ref-type="fig">10</xref> is based on Ambit-SMIRKS option, activated by setting <italic>FlagHAtomsTransformation </italic>=<italic> true</italic>. This way the implicit H atoms defined by the SMIRKS notation are used as instructions to apply changes to the H atoms. By default, this flag is false, i.e. the SMIRKS atoms expressions containing specification of H atoms (implicitly in fact) will be used only to match the target atoms by substructure search, (e.g. [CH3] will match a carbon with 3 H atoms). When <italic>FlagHAtomsTransformation </italic>=<italic> true</italic>, the H atom information is used to match the reaction sites, as well as to define H atoms changes e.g. [CH3:1]≫[CH2:1][OH] defines a primary carbon with 3 H atom neighbors that is hydroxylated and the transformed carbon atom will be with two H neighbors. Accordingly, the newly created oxygen atom on the product side is with one H neighbor. The <italic>FlagHAtomsTransformation</italic> option works on molecules with implicit and explicit atoms where <italic>FlagHAtomsTransformationMode</italic> is used to define how to perform the transformation of the H atoms. When <italic>FlagHAtomsTransformation </italic>=<italic> false</italic>, the H atom info within atoms expressions will not have any effect on the transformation (only for matching). Another aspect of the second scenario example is that the SMIRKS notation [CH3:1]≫[CH2:1][OH] defines hydroxylation only for primary carbons while [C:1][H:2]≫[C:1]O[H:2] defines hydroxylation for all types of hydrogens: primary, secondary and tertiary (the last SMIRKS notation works only for molecules with explicit H atoms). If it is needed to define the reaction only for primary carbons it is possible in the first scenario by SMIRKS like this [CH3:1][H:2]≫[C:1]O[H:2] (should not confuse the implicit [CH3], that defines the primary carbon atom with the explicit [H:2] which defines how reaction transformation is applied). Complications and problems with the H atom transformation option can be observed when complex SMIRKS atom expressions are used e.g. [CH3,CH2:1]≫[CH2,CH1:1][OH] will not work; that is why we recommend the explicit H atom approach.</p>
      <p id="Par112">The third scenario is called “automatic” and it relies on post transformation cleaning of incorrect H atoms (if obtained) and setting automatically anew the implicit H atoms (e.g. by CDK hydrogen atoms adding utility). The SMIRKS used in this case is quite simple [C:1]≫[C:1]O. This approach looks attractive with its simplicity (and could be called also a “lazy” approach) but it can result in chemically incorrect structures, where the usage of post-processing cleanup is mandatory. Apart from the need of product molecules cleanup, another disadvantage of this approach is the fact that the reaction transformation result depends not only on the SMIRKS transformation rules, but also on the cleanup procedure.</p>
    </sec>
    <sec id="Sec14">
      <title>Handling aromatic systems</title>
      <p id="Par113">The chemoinformatics systems handle aromaticity in two major ways: by Kekule resonance structure representations and by delocalized aromatic systems, typically represented by aromaticity flags of atoms and bonds. Both approaches have pros and cons, depending on the use cases and the underlying chemistry models. The aromaticity information within SMIRKS is primarily used to define the substructure searching queries for the reaction transformation sites identification, e.g. [c:1][H]≫[c:1]O[H] defines aromatic hydroxylation. Making use of such information (particularly within the product side of the SMIRKS) to define aromatic system transformations is quite challenging. For example, the SMIRKS transformation of the type [C:1][C:2]≫[c:1]:[c:2] is tricky and in most of the cases chemically incorrect results will be obtained. The transformation above is interpreted as instruction to “make this single bond to be an aromatic one”. However, the aromaticity of the bond depends on a larger system of atoms, which is not known beforehand. Hence, this transformation rule may be applicable in some occasions as an exception, but generally such SMIRKS “statement” is not chemically correct. More elaborated SMIRKS of the type:<list list-type="bullet"><list-item><p id="Par114">[C:1]1[C:2]=[C:3][C:4][C:5][C:6]1≫[c:1]1:[c:2][c:3]:[c:4][c:5]:[c:6]:1</p></list-item></list>
provides more precise transformation rule, since the entire aromatic ring is specified on the product side. However, in making the ring on the product side aromatic, there is also possibility for potentially incorrect result products, in case of e.g. fused rings to this ring, etc. Within Ambit-SMIRKS (see Fig. <xref rid="Fig11" ref-type="fig">11</xref>) we consider a good practice handling aromatic transformation as Kekule structures, since in this way all bonds orders are defined explicitly and the SMIRKS transformation of the bonds is clearly defined as well. After applying a reaction rule, Ambit-SMIRKS performs post-processing aromaticity detection algorithm and if aromatic system are formed due to the bonds changes, the aromatic atom and bond flags are assigned accordingly. The result molecules could be represented in aromatic form or stay in a Kekule form. Some may consider the need to rely on particular aromaticity detection algorithm a disadvantage for this approach. This is only a reasonable point when the chemoinformatics system lacks a good aromaticity detector. Ambit-SMIRKS relies on The CDK aromaticity detector which has been significantly improved in the latest releases of CDK [<xref ref-type="bibr" rid="CR17">17</xref>]. When the user prefers own aromaticity detector the following option is required <italic>FlagCheckAromaticityOnResultProcess </italic>=<italic> false</italic>.<fig id="Fig11"><label>Fig. 11</label><caption><p>Handling aromatic systems by Ambit-SMIRKS</p></caption><graphic xlink:href="13321_2018_295_Fig11_HTML" id="MO11"/></fig>
</p>
    </sec>
    <sec id="Sec15">
      <title>Stereochemistry support</title>
      <p id="Par116">The stereochemistry in chemoinformatics systems [<xref ref-type="bibr" rid="CR1">1</xref>] is represented in two main ways (see Fig. <xref rid="Fig12" ref-type="fig">12</xref>). The absolute stereochemistry approach describes the elements of the stereo group by prioritizing (ordering) the stereo elements on the base of absolute chemical logic that does not depend on the atom numbering (the latter typically depends on the graph walk algorithm). For example famous Cahn, Ingold, Prelog (CIP) priority rules [<xref ref-type="bibr" rid="CR35">35</xref>] are the basic approach used by chemists to describe chiral atoms or groups. CIP rules approach is used in some cases of computer representation and handling of molecular stereo information e.g. direct representation of the stereo by means of 3D coordinates or stereo designations (R/S) in 2D structure diagrams. The widely used approach for stereo handling on topological level is the so called relative stereo representation. In Fig. <xref rid="Fig12" ref-type="fig">12</xref>, the relative stereo approach is used for the CDK based internal stereo representation of 2-hydroxypropanoic acid, as well as for the molecule SMILES.<fig id="Fig12"><label>Fig. 12</label><caption><p>Stereo representation approaches for the molecule of 2-hydroxypropanoic acid</p></caption><graphic xlink:href="13321_2018_295_Fig12_HTML" id="MO12"/></fig>
</p>
      <p id="Par117">The SMILES linear notation and respectively SMARTS and SMIRKS notations (regarded as extensions of SMILES) are based on the relative stereo approach, which is used to describe the stereo configurations in molecules, search queries and reactions accordingly. The stereo element priorities within relative approaches depend on the atom numbering and thus influence the algorithms of atom iteration, used to define the sets of stereo elements. The priority of the stereo elements, in the case of SMIRKS, SMARTS or SMILES, is defined by the order of appearance in the linear notation which is equivalent to usage of random atom numbering. For the molecule of 2-hydroxypropanoic acid (see Fig. <xref rid="Fig12" ref-type="fig">12</xref>), the relative groups priorities within the SMILES are 1-OH, 2-H, 3-CH<sub>3</sub>, 4-COOH. It should be noted that stereo information represented in a relative fashion is still the same (the molecule is in R configuration), just the technical means for representation, interpretation and usage are different. The conversion from relative to absolute stereo and vice versa is needed. The user should not mismatch the R/S designation with @/@@ trying to make direct correspondence between both notations (for more details see the SMILES standard documentation [<xref ref-type="bibr" rid="CR36">36</xref>]). For example, the R configuration of molecule of 2-hydroxypropanoic acid can be represented by different SMILES notations i.e. several relative descriptions of the same stereo information:<def-list><def-item><term>O[C@H](C)C(O)=O</term><def><p id="Par118">O[C@@H](C(O)=O)C</p></def></def-item><def-item><term>C[C@@H](O)C(O)=O</term><def><p id="Par119">C[C@H](C(O)=O)O</p></def></def-item><def-item><term>C(O)(=O)[C@H](O)C</term><def><p id="Par120">C(O)(=O)[C@@H](C)O</p></def></def-item></def-list>
</p>
      <p id="Par121">Ambit-SMIRKS stereo handling is based on the relative approach for stereo information representation, as both the SMIRKS linear notation and the internal CDK objects are based on it. The major types of stereo elements supported by CDK library are: tetrahedral chiral atoms, cis/trans double bond configuration and allene atom chirality.</p>
      <p id="Par122">Ambit-SMIRKS supports stereo transformation cases that can be summarized in two major groups:<list list-type="order"><list-item><p id="Par123">stereo transformation not directly specified by SMIRKS (3 cases, see Fig. <xref rid="Fig13" ref-type="fig">13</xref>)<fig id="Fig13"><label>Fig. 13</label><caption><p>Stereo transformation cases without stereo specification within SMIRKS notation. <bold>a</bold> Stereo element preservation, <bold>b</bold> stereo element change of ligand, <bold>c</bold> stereo element removal</p></caption><graphic xlink:href="13321_2018_295_Fig13_HTML" id="MO13"/></fig>
</p></list-item><list-item><p id="Par124">stereo transformation specified by SMIRKS (3 cases, see Fig. <xref rid="Fig14" ref-type="fig">14</xref>)<fig id="Fig14"><label>Fig. 14</label><caption><p>Stereo transformation cases defined by SMIRKS notation. <bold>a</bold> Create new stereo element, <bold>b </bold>stereo element update/change, <bold>c</bold> stereo element removal</p></caption><graphic xlink:href="13321_2018_295_Fig14_HTML" id="MO14"/></fig>
</p></list-item></list>
</p>
      <p id="Par125">In order to use the full capability of Ambit-SMIRKS stereo transformation utilities, <italic>FlagApplyStereoTransformation</italic> should be set to <italic>true</italic>. If this flag is not set, stereo transformation is supported only for the trivial cases shown in Fig. <xref rid="Fig13" ref-type="fig">13</xref>a, c.</p>
      <p id="Par126">Figure <xref rid="Fig13" ref-type="fig">13</xref> illustrates three major cases of Ambit-SMIRKS stereo transformation that are not directly defined by SMIRKS, but are implied by chemists. The stereo chemistry element preservation is the most trivial one—if particular transformation does not influence a given stereo element, the stereo element is preserved e.g. the chiral atom from Fig. <xref rid="Fig13" ref-type="fig">13</xref>a remains chiral. The transformation depicted in Fig. <xref rid="Fig13" ref-type="fig">13</xref>b replaces the OH group with NH2 group. The initial OH group is a ligand to the chiral center (C atom) and as such, O atom is registered in the tetrahedral chiral atom stereo element. Ambit-SMIRKS specially treats the cases where the applied reaction transformation updates the corresponding stereo elements. Case b of Fig. <xref rid="Fig13" ref-type="fig">13</xref> is not trivial although it is logically expected by the chemist. If <italic>FlagApplyStereoTransformation</italic> is not set, such stereo elements will not be updated accordingly and after finishing the SMIRKS transformation, the corresponding stereo element will be invalidated and removed i.e. for the option <italic>FlagApplyStereoTransformation </italic>= <italic>false,</italic> chiral elements that are directly influenced by the SMIRKS reaction will be removed. Case b has other interesting subcases:<list list-type="bullet"><list-item><p id="Par127">if the SMIRKS transformation adds a new ligand to the stereo element that is chemically or topologically equivalent to some other ligand, practically the atom center will be no longer chiral.</p></list-item><list-item><p id="Par128">if more than two ligands are replaced then stereo is tried to be preserved but some side effects are possible. For such cases, if strict stereo handling is needed, it is recommended to define the stereo chemistry transformation within the SMIRKS if possible.</p></list-item></list></p>
      <p id="Par129">Figure <xref rid="Fig13" ref-type="fig">13</xref>c shows a case where the stereo element is invalidated by the reaction and hence the chiral atom center is removed.</p>
      <p id="Par130">Apart from the indirect stereo transformation cases, Ambit-SMIRKS supports cases of stereo transformation defined directly by the SMIRKS notation summarized in Fig. <xref rid="Fig14" ref-type="fig">14</xref>. Three major scenarios are possible. In the first case (Fig. <xref rid="Fig14" ref-type="fig">14</xref>a), a new stereo element is created where the product part of the linear notation SMIRKS defines the new stereo configuration. Existing stereo element can be updated (for example S configuration is changed to R, see Fig. <xref rid="Fig14" ref-type="fig">14</xref>b) where stereo information is defined both in reagent and product part of the SMIRKS for the same stereo group. Also it is possible to define removal of a stereo element (Fig. <xref rid="Fig14" ref-type="fig">14</xref>c) where the stereo element is defined in the reagent part of SMIRKS but not in the product part. The latter case is supported by SMIRKS syntax and although it is a rarer one from practical point of view, it could be useful for describing transformation from chiral to racemic compounds or cleaning the stereo elements from the molecule when needed.</p>
    </sec>
    <sec id="Sec16">
      <title>Comparison between Ambit-SMIRKS and other open-source chemoinformatics tools</title>
      <p id="Par131">We present comparison between Ambit-SMIRKS and two popular open source chemoinformatics packages, supporting chemical transformations based on SMARTS/SMIRKS.</p>
      <p id="Par132"><italic>Open Babel</italic> is an open source chemical toolbox designed to handle chemical information in many languages of chemical data (over 110 chemical file formats) and includes ready-to-use programs and a reach chemoinformatics platform allowing anyone to search, convert, analyze, or store data from molecular modeling, chemistry, biochemistry etc. [<xref ref-type="bibr" rid="CR18">18</xref>]. Chemical transformations analogous to the SMIRKS based reactions are not directly available in the ready-to-use Open Babel programs but can be performed via programmatic API in C++ as well as available wrappers in Python and Java. Open Babel (up to version 2.3) library does not support direct handling of SMIRKS however it has a specialized class OBChemTsfm which is capable of performing SMARTS based structural modification (chemical transformation). Two SMARTS notations (one for the reactants and one for products) are expected to be submitted as input into OBChemTsfm, which practically makes this approach equivalent to the usage of SMIRKS. The class OBChemTsfm has very simple interface and the user cannot configure the chemical transformation itself but should rely solely on the linear notations provided on input and the implemented algorithms in OpenBablel. In contrast, Ambit-SMIRKS allows detailed fine-tuning and configuration of the reaction application and chemical processing. We consider Ambit approach useful and needed in many use cases since the chemical logic and the comprehensive SMIRKS notations require differentiation in various scenarios. On the other hand, the more complex Ambit configuration implies slower learning curve which can be considered as a disadvantage but at the end the user has more flexibility.</p>
      <p id="Par133"><italic>RDKit</italic> is a rich open source toolkit for cheminformatics [<xref ref-type="bibr" rid="CR19">19</xref>] which includes input/output to basic chemical formats, substructure searching, chemical transformations (based on removing matched substructures), chemical reactions, molecular serialization, 2D depiction, fingerprinting and many other chemoinformatics features. The core RDKit functionalities are written in C++, while typically the library is used via Python API. RDKit (as of release 2018.03) has a full support of SMIRKS based chemical transformations and the programmatic approach (API) is quite similar to the one used in Ambit-SMIRKS which includes two major components: (1) creation of a chemical reaction object by means of class ReactionFromSmarts which takes as an input a SMIRKS notation and (2) reaction application to the target chemical objects (reactants). As a result, a matrix with molecules is obtained which includes all products (the elements of a particular row) for each site the reaction takes place at (each row corresponds to the particular reaction site). Similarly, Ambit-SMIRKS returns a list of atom containers for each reaction site where each atom container may be fragmented consisting of one or more chemical reaction products. RDKit applies the reaction against all possible sites regardless of topological equivalence or site overlapping and applies the transformations only in single mode. Ambit-SMIRKS supports this functionality as mode ALL which is one of the several modes discussed in section Structure Transformation. Additionally, Ambit-SMIRKS offers selectivity of the reaction sites by means other reaction modes such as NON_IDENTICAL, NON_OVERLAPPING, NON_HOMOMORPHIC. The latter ones can be achieved in RDKit by additional post-processing of the resulting matrix (the user has to implement appropriate procedures). Another feature available in Ambit-SMIRKS but missing in RDKit is the possibility to apply reactions simultaneously at more than one site (RDKit runs the reaction only in single mode).</p>
      <p id="Par134">We have performed benchmark tests of Ambit-SMIRKS and RDKit SMIRKS transformation algorithms. For this purpose we used a set of 545 compounds including normal constituents of the body and common components of food, provided by Munro et al. [<xref ref-type="bibr" rid="CR37">37</xref>] and a set of 84 reactions from RetroTransformDB [<xref ref-type="bibr" rid="CR38">38</xref>, <xref ref-type="bibr" rid="CR39">39</xref>] represented as SMIRKS linear notations. In both software tools (RDKit and Ambit-SMIRKS), each reaction was applied for all compounds at all possible sites thus performing more than 46,000 SMIRKS transformation. For the purpose of comparison, Ambit-SMIRKS was applied in mode ALL with a single copy of the products for each reaction sites. The tests were performed on a PC computer (Intel/Core i5-8250U, 1.6 GHz/12 GB RAM). The calculations took 30 s by RDKit and 40 s by Ambit-SMIRKS. The computational time for both software includes the SMIRKS parsing and reaction application as well as molecule preprocessing and file operations. Ambit-SMIRKS was a little slower (however execution time was in the same range) than RDKit but having in mind that Ambit-SMIRKS is a Java application (compared to the RDKit C++ based core) its algorithm performance should be considered as very good. Out of 46,410 tests, 6096 test reactions were successfully applied for at least one site in Ambit-SMIRKS and 5729 reactions were successfully applied for at least one site in RDKit accordingly. The obtained total number of reacted sites for Ambit-SMIRKS and RDKit is 41,453 and 40,782 respectively. We have performed statistics of the number of reacted sites for both software packages and some differences were observed for 436 reaction tests. From our analysis we may infer that the observed differences are mainly due to different treatment of equivalent molecules sites and some small differences of the internal presentation of the molecules and the chemical reactions on both software packages. Detailed information from the benchmark test between RDKit and Ambit-SMIRKS is available at 10.5281/zenodo.1322631. Summarizing the benchmark results and functional comparison, we may conclude that performance, API logic and efficiency of Ambit-SMIRKS and RDKit are quite similar with a more detailed level of reaction application configuration in Ambit-SMIRKS.</p>
    </sec>
    <sec id="Sec17">
      <title>Ambit-SMIRKS applications</title>
      <p id="Par135">We present an overview of several applications where the Ambit-SMIRKS library is already integrated into chemoinformatics software (Toxtree [<xref ref-type="bibr" rid="CR28">28</xref>, <xref ref-type="bibr" rid="CR40">40</xref>], enviPath [<xref ref-type="bibr" rid="CR41">41</xref>], BioTransformer [<xref ref-type="bibr" rid="CR42">42</xref>, <xref ref-type="bibr" rid="CR43">43</xref>], Ambit Reactor and Ambit structure standardisation).<list list-type="order"><list-item><p id="Par136">Toxtree</p></list-item></list>
</p>
      <p id="Par137">Toxtree [<xref ref-type="bibr" rid="CR28">28</xref>, <xref ref-type="bibr" rid="CR40">40</xref>] is a full-featured and flexible user-friendly open source application, widely used to estimate toxic hazard by a decision tree approach. Toxtree consists of multiple modules, implementing decision trees for various endpoints (e.g. Cramer rules for TTC, Verhaar scheme for aquatic toxicity mode of action, Skin and Eye irritation prediction, skin sensitization reactivity domains, START biodegradation and persistence, Benigni/Bossa rulebase for mutagenicity and carcinogenicity, Ames test alerts by ISS etc.). In order to estimate bioavailability, activity and toxicity profile, metabolic biotransformations of the target compound must be considered and several of these modules include rules involving chemical structure transformation; most notable are hydrolysis and metabolic transformations. Thus, the Toxtree user may notice after certain rule is applied, the following processing continues not with the original molecule, but with set of reaction products. These transformations are implemented as SMIRKS transformation, using Ambit-SMIRKS.</p>
      <p id="Par138">An explicit generation of metabolites is provided by the Toxtree SmartCYP module, which enhances the SMARTCyp (Cytochrome P450-Mediated Drug Metabolism) model developed by Rydberg et al. [<xref ref-type="bibr" rid="CR29">29</xref>] with reaction transformation, based on predicted site of metabolism in phase I cytochromes P450-mediated reactions. Each predicted SOM corresponds to a SMIRKS reaction, which is applied with the help of Ambit-SMIRKS. This functionality is included as Toxtree module since Toxtree 2.1.0 (2011). Ambit-SMIRKS transformations are applied on the predicted molecule sites (see Fig. <xref rid="Fig15" ref-type="fig">15</xref>).<fig id="Fig15"><label>Fig. 15</label><caption><p>Application of Ambit-SMIRKS for obtaining <italic>Stepronin</italic> metabolites</p></caption><graphic xlink:href="13321_2018_295_Fig15_HTML" id="MO15"/></fig>
<list list-type="simple"><list-item><label>2.</label><p id="Par139">enviPath</p></list-item></list>
</p>
      <p id="Par140">Ambit-SMIRKS is used within enviPath (Fig. <xref rid="Fig16" ref-type="fig">16</xref>) system for the application of chemical reactions represented as SMIRKS notations. enviPath [<xref ref-type="bibr" rid="CR41">41</xref>] is a database and prediction system for the microbial biotransformation of organic environmental contaminants. The database provides the possibility to store and view experimentally observed biotransformation pathways. The pathway prediction system provides different relative reasoning models to predict likely biotransformation pathways and products.<fig id="Fig16"><label>Fig. 16</label><caption><p>Screenshot from enviPath web system. Reaction transformations of a biochemical pathway for the molecule of 1,2 dichclorethane; Ambit-SMIRKS is used in each pathway step molecule transformation</p></caption><graphic xlink:href="13321_2018_295_Fig16_HTML" id="MO16"/></fig>
<list list-type="simple"><list-item><label>3.</label><p id="Par141">AmbitCLI—standardization tool</p></list-item></list>
</p>
      <p id="Par142">AmbitCLI is a console application [<xref ref-type="bibr" rid="CR44">44</xref>], part of AMBIT cheminformatics platform. It includes a number of chemical structure processing options such as fragments splitting, isotopes removal, handling implicit hydrogens, stereochemistry, InChI generation, SMILES generation, structure normalisation via SMIRKS, tautomers generation, neutralization etc. All the implemented standardisation rules were defined to reflect industry standards [<xref ref-type="bibr" rid="CR45">45</xref>], but it is possible to optionally provide a custom set of SMIRKS rules. An example structure standardization protocol is shown in Fig. <xref rid="Fig17" ref-type="fig">17</xref> (the elements of the standardization workflow are configurable).<fig id="Fig17"><label>Fig. 17</label><caption><p>Application of Ambit-SMIRKS for the implementation of a standardization protocol within ExCAPE project database</p></caption><graphic xlink:href="13321_2018_295_Fig17_HTML" id="MO17"/></fig>
</p>
      <p id="Par143">AmbitCLI works with various structure representation techniques (MOL, SMILES, InChI) and supports *.SDF file format and tabular TXT format. AmbitCLI application was used for the standardization of ChEMBL, PubChem and other public databases (downloaded as a SDF files) using following command line options:<graphic position="anchor" xlink:href="13321_2018_295_Figa_HTML" id="MO18"/>
</p>
      <p id="Par144">The standardized structures are compiled into ExCAPE-DB [<xref ref-type="bibr" rid="CR45">45</xref>]—an integrated large scale dataset facilitating Big Data analysis in chemogenomics. The standardization tool is also used for processing proprietary datasets in industry.<list list-type="simple"><list-item><label>4.</label><p id="Par145">Ambit-SMIRKS Web Page and AmbitSmirksGUI application</p></list-item></list>
</p>
      <p id="Par146">Links to the Ambit-SMIRKS web demo and a GUI application (see Fig. <xref rid="Fig18" ref-type="fig">18</xref>) are available at <ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/smirks.html">http://ambit.sourceforge.net/smirks.html</ext-link>. AmbitSmirksGUI facilitates the options described in this paper (see list of flags in Table <xref rid="Tab1" ref-type="table">1</xref>).<fig id="Fig18"><label>Fig. 18</label><caption><p>Ambit-SMIRKS GUI: application of aromatic hydroxylation reaction at four possible sites of the molecule of 3-ethylpyridine</p></caption><graphic xlink:href="13321_2018_295_Fig18_HTML" id="MO19"/></fig>
</p>
      <p id="Par147">Figure <xref rid="Fig18" ref-type="fig">18</xref> illustrates the application of aromatic hydroxylation reaction for the molecule 3-ethylpyridine where four possible products are generated and shown in the figure. The reaction is applied with default Ambit-SMIRKS flags setting shown as checkboxes of the GUI.</p>
      <p id="Par148">Also Ambit-SMIRKS example usage code is available at: <ext-link ext-link-type="uri" xlink:href="https://github.com/ideaconsult/examples-ambit/tree/master/smirks-example">https://github.com/ideaconsult/examples-ambit/tree/master/smirks-example</ext-link><list list-type="simple"><list-item><label>5.</label><p id="Par149">Ambit-Reactor</p></list-item></list>
</p>
      <p id="Par150">Ambit-Reactor [<xref ref-type="bibr" rid="CR46">46</xref>] is a software module for simulation of sequences of chemical reactions and is part of open source chemoinformatics platform Ambit. For a given set of initial reactants, Ambit-Reactor applies exhaustively all transformations based on generic chemical reaction rules described in a predefined set of reactions. For each molecule from the result products, all possible transformations are applied to obtain new products and so on. In order to control the combinatorial explosion, the process stops when conditions defined by the user are reached. Ambit-Reactor is configured via JSON files that specify the reaction strategy, reaction rules, allowed and forbidden products, set of parameters and logical conditions for reaction application and definition of sites where reactions occurs. The reactor strategy is defined by logical expressions of molecular descriptors’ values. Ambit-Reactor can be used for generation of virtual compound libraries, retrosynthetic analysis and combinatorial generation of metabolites (Fig. <xref rid="Fig19" ref-type="fig">19</xref>) as far as appropriate reactor strategy is defined. Currently, Ambit-Reactor provides a framework and the creation of efficient reactor strategies is subject of future research.<fig id="Fig19"><label>Fig. 19</label><caption><p>Example reaction transformations within Ambit-Reactor application</p></caption><graphic xlink:href="13321_2018_295_Fig19_HTML" id="MO20"/></fig></p>
      <p id="Par151">Ambit-Reactor module can be used as a software library by means of Java API access (<ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/">http://ambit.sourceforge.net/</ext-link>) or as a command-line standalone application available at the following address <ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/reactor.html">http://ambit.sourceforge.net/reactor.html</ext-link>.<list list-type="simple"><list-item><label>6.</label><p id="Par152">Cheminformatics Tools for Enabling Metabolomics</p></list-item></list>
</p>
      <p id="Par153">Ambit-SMIRKS library is used for the application of biotransformation rules and structure generation within BioTransformer [<xref ref-type="bibr" rid="CR42">42</xref>, <xref ref-type="bibr" rid="CR43">43</xref>]. BioTransformer is a command-line software tool that predicts small molecule metabolism in mammals, their gut microbiota, as well as the soil/aquatic microbiota. BioTransformer is a freely accessible software package which also includes manually curated database called BioTransformerDB. The input structure is subjected to chemical validation and standardization. Subsequently, BioTransformer predicts biotransformations and the resulting metabolites for the query molecules. The prediction involves various transforms (CYP450, EC-based, phase II, gut microbial, or environmental microbial) and covers a number of different reaction types. BioTransformer builds a metabolic tree by associating each metabolite with its parent molecules.</p>
    </sec>
    <sec id="Sec18">
      <title>Future development</title>
      <p id="Par154">We plan Ambit-SMIRKS functionality extension by including support for new stereo elements as implemented in the most recent CDK 2.1.0 release, as well as improvements of reaction search and application to metabolite generation tools.</p>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="conclusion">
    <title>Conclusions</title>
    <p id="Par155">Ambit-SMIRKS open source software provides efficient chemoinformatics tools for chemical reactions handling via linear notation SMIRKS. Powerful recursive SMARTS expressions, stereo handling and third party syntax extensions give a great flexibility to the user for defining the desired chemical logic in the form of generic chemical reactions. All key aspects of the structure information handling are covered by the software. The user can fine tune the reactant pre-processing, reaction transformation, products post-processing, H atom, stereo and aromaticity handling. The software performance has been improved on the base of numerous user feedbacks of several years of development and usage. Recommendations for specifying optimal SMIRKS notations and best software use practices are defined to make the most of Ambit-SMIRKS. Ambit-SMIRKS package have already been integrated in several scientific projects as core structure transformation functionality, proving its usefulness to the open source cheminformatics community. By elaborating the details of the SMIRKS processing logic in this publication, we hope to provide to Ambit-SMIRKS users insight into its use and assist with obtaining correct results from chemical point of view.</p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>SMARTS</term>
        <def>
          <p id="Par2">Smiles Arbitrary Target Specification</p>
        </def>
      </def-item>
      <def-item>
        <term>SMILES</term>
        <def>
          <p id="Par3">Simplified Molecular Input Line Entry System</p>
        </def>
      </def-item>
      <def-item>
        <term>SMIRKS</term>
        <def>
          <p id="Par4">A Reaction Transform Language (SMILES reaktion specification)</p>
        </def>
      </def-item>
      <def-item>
        <term>CDK</term>
        <def>
          <p id="Par5">The Chemistry Development Kit</p>
        </def>
      </def-item>
      <def-item>
        <term>LGPL</term>
        <def>
          <p id="Par6">Lesser General Public License</p>
        </def>
      </def-item>
      <def-item>
        <term>InChI</term>
        <def>
          <p id="Par7">International Chemical Identifier</p>
        </def>
      </def-item>
      <def-item>
        <term>RInChI</term>
        <def>
          <p id="Par8">The International Chemical Identifier for Reactions</p>
        </def>
      </def-item>
      <def-item>
        <term>SLN</term>
        <def>
          <p id="Par9">SYBYL line notation</p>
        </def>
      </def-item>
      <def-item>
        <term>CSRML</term>
        <def>
          <p id="Par10">Chemical Subgraphs and Reactions Markup Language</p>
        </def>
      </def-item>
      <def-item>
        <term>XML</term>
        <def>
          <p id="Par11">eXtensible Markup Language</p>
        </def>
      </def-item>
      <def-item>
        <term>CML</term>
        <def>
          <p id="Par12">Chemical Markup Language</p>
        </def>
      </def-item>
      <def-item>
        <term>MQL</term>
        <def>
          <p id="Par13">Molecular Query Language</p>
        </def>
      </def-item>
      <def-item>
        <term>CTL</term>
        <def>
          <p id="Par14">Chemical Terms Language</p>
        </def>
      </def-item>
      <def-item>
        <term>MOE</term>
        <def>
          <p id="Par15">Molecular Operating Environment</p>
        </def>
      </def-item>
      <def-item>
        <term>SDK</term>
        <def>
          <p id="Par16">Software Development Kit</p>
        </def>
      </def-item>
      <def-item>
        <term>REST</term>
        <def>
          <p id="Par17">Representational State Transfer</p>
        </def>
      </def-item>
      <def-item>
        <term>API</term>
        <def>
          <p id="Par18">Application Programming Interface</p>
        </def>
      </def-item>
      <def-item>
        <term>GUI</term>
        <def>
          <p id="Par19">graphical user interface</p>
        </def>
      </def-item>
      <def-item>
        <term>CLG</term>
        <def>
          <p id="Par20">Component Level Grouping</p>
        </def>
      </def-item>
      <def-item>
        <term>CIP</term>
        <def>
          <p id="Par21">Cahn, Ingold, Prelog</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <ack>
    <title>Authors’ contributions</title>
    <p>The manuscript was written through contributions of all authors. These authors contributed equally. All authors read and approved the final manuscript.</p>
    <sec id="FPar1">
      <title>Acknowledgements</title>
      <p id="Par156">We acknowledge feedback, testing and suggestions for improvements received by numerous colleagues and users of Ambit SMIRKS library.</p>
    </sec>
    <sec id="FPar2">
      <title>Competing interests</title>
      <p id="Par157">The authors declare that they have no competing interests.</p>
    </sec>
    <sec id="FPar3">
      <title>Availability of data and materials</title>
      <p id="Par158">Ambit-SMIRKS is available as a software module with LGPL license as part of the Ambit cheminformatics platform [<xref ref-type="bibr" rid="CR32">32</xref>]. Download links of command-line example applications, GUI application and web demo application are available at <ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/smirks.html">http://ambit.sourceforge.net/smirks.html</ext-link>.</p>
    </sec>
    <sec id="FPar4">
      <title>Funding</title>
      <p id="Par159">This project has received funding from the CEFIC-LRI EEM9.3-IC/EEM9.4: Linking LRI Ambit chemoinformatics system with the IUCLID Substance database to support read across of substance endpoint data and category formation. For implementation and improvements relevant to the chemical structure standardization use case, the project has received funding from the European Union’s Horizon 2020 Research and Innovation programme under Grant Agreement No. 671555. For implementation of stereo information handling, we acknowledge a financial contribution from Eawag (Switzerland) through a grant from the Swiss National Science Foundation (Project No. CR22I2L_149711).</p>
    </sec>
    <sec id="FPar5">
      <title>Publisher’s Note</title>
      <p id="Par160">Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Engel T, Gasteiger J (2018) Chemoinformatics: basic concepts and methods, chap 4. Wiley-VCH Verlag GmbH</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Karthikeyan</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Vyas</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Practical chemoinformatics, chap 6</source>
        <year>2014</year>
        <publisher-loc>New Delhi</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Faulon J-L, Bender A (2010) Handbook of chemoinformatics algorithms, chap 11. CRC Press</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Daylight. SMIRKS: A Reaction Transform Language [Internet] [cited 2017 Dec 20]. <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smirks.html">http://www.daylight.com/dayhtml/doc/theory/theory.smirks.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Daylight. SMARTS: a language for describing molecular patterns [Internet] [cited 2017 Sep 19]. <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html">http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Homer</surname>
            <given-names>RW</given-names>
          </name>
          <name>
            <surname>Swanson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Jilek</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Hurst</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>RD</given-names>
          </name>
        </person-group>
        <article-title>SYBYL line notation (SLN): a single notation to represent chemical structures, queries, reactions, and virtual libraries</article-title>
        <source>J Chem Inf Model</source>
        <year>2008</year>
        <volume>48</volume>
        <issue>12</issue>
        <fpage>2294</fpage>
        <lpage>2307</lpage>
        <pub-id pub-id-type="doi">10.1021/ci7004687</pub-id>
        <pub-id pub-id-type="pmid">18998666</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grethe</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Goodman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Allen</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>International chemical identifier for chemical reactions</article-title>
        <source>J Cheminform</source>
        <year>2013</year>
        <volume>O5</volume>
        <issue>1</issue>
        <fpage>16</fpage>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Elsevier MDL. CTFile formats. Mdl. 2005 (June)</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Tarkhov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Marusczyk</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bienfait</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Gasteiger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kleinoeder</surname>
            <given-names>T</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>New publicly available chemical query language, CSRML, to support chemotype representations for application to data mining and modeling</article-title>
        <source>J Chem Inf Model</source>
        <year>2015</year>
        <volume>55</volume>
        <fpage>510</fpage>
        <lpage>528</lpage>
        <pub-id pub-id-type="doi">10.1021/ci500667v</pub-id>
        <pub-id pub-id-type="pmid">25647539</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holliday</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Murray-Rust</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Rzepa</surname>
            <given-names>HS</given-names>
          </name>
        </person-group>
        <article-title>Chemical markup, XML, and the world wide web. 6. CMLReact, an XML vocabulary for chemical reactions</article-title>
        <source>J Chem Inf Model</source>
        <year>2006</year>
        <volume>46</volume>
        <fpage>145</fpage>
        <lpage>157</lpage>
        <pub-id pub-id-type="doi">10.1021/ci0502698</pub-id>
        <pub-id pub-id-type="pmid">16426051</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Chemical Markup Language|CML [Internet] [cited 2017 Dec 18]. <ext-link ext-link-type="uri" xlink:href="http://www.xml-cml.org/">http://www.xml-cml.org/</ext-link></mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Reisen</surname>
            <given-names>FH</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Proschak</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Reaction-MQL: line notation for functional transformation</article-title>
        <source>J Chem Inf Model</source>
        <year>2009</year>
        <volume>49</volume>
        <issue>1</issue>
        <fpage>6</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1021/ci800215t</pub-id>
        <pub-id pub-id-type="pmid">19090785</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Proschak</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Wegner</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Schüller</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Fechner</surname>
            <given-names>U</given-names>
          </name>
        </person-group>
        <article-title>Molecular Query Language (MQL)—a context-free grammar for substructure matching</article-title>
        <source>J Chem Inf Model</source>
        <year>2007</year>
        <volume>47</volume>
        <issue>2</issue>
        <fpage>295</fpage>
        <lpage>301</lpage>
        <pub-id pub-id-type="doi">10.1021/ci600305h</pub-id>
        <pub-id pub-id-type="pmid">17381167</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Pirok G, Máté N, Dóránt S, Vargyas M, Csizmadia F (2004) How can generic reactions be specific? Virtual synthesis with “smart” reactions ChemAxon [Internet]. <ext-link ext-link-type="uri" xlink:href="https://chemaxon.com/poster">https://chemaxon.com/poster</ext-link></mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinbeck</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Han</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Kuhn</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Horlacher</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Luttmann</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Willighagen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>The Chemistry Development Kit (CDK): an open-source Java library for chemo- and bioinformatics</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2003</year>
        <volume>43</volume>
        <issue>2</issue>
        <fpage>493</fpage>
        <lpage>500</lpage>
        <pub-id pub-id-type="doi">10.1021/ci025584y</pub-id>
        <pub-id pub-id-type="pmid">12653513</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinbeck</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hoppe</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kuhn</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Floris</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Guha</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Willighagen</surname>
            <given-names>EL</given-names>
          </name>
        </person-group>
        <article-title>Recent developments of the chemistry development kit (CDK)—an open-source java library for chemo- and bioinformatics</article-title>
        <source>Curr Pharm Des</source>
        <year>2006</year>
        <volume>12</volume>
        <issue>17</issue>
        <fpage>2111</fpage>
        <lpage>2120</lpage>
        <pub-id pub-id-type="doi">10.2174/138161206777585274</pub-id>
        <pub-id pub-id-type="pmid">16796559</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Willighagen</surname>
            <given-names>EL</given-names>
          </name>
          <name>
            <surname>Mayfield</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Alvarsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Berg</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Carlsson</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The chemistry development kit (CDK) v2.0: atom typing, depiction, molecular formulas, and substructure searching</article-title>
        <source>J Cheminform</source>
        <year>2017</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>19</lpage>
        <pub-id pub-id-type="doi">10.1186/s13321-016-0187-6</pub-id>
        <pub-id pub-id-type="pmid">28316652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O’Boyle</surname>
            <given-names>NM</given-names>
          </name>
          <name>
            <surname>Banck</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>James</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Morley</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Vandermeersch</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hutchison</surname>
            <given-names>GR</given-names>
          </name>
        </person-group>
        <article-title>Open babel: an open chemical toolbox</article-title>
        <source>J Cheminform</source>
        <year>2011</year>
        <volume>3</volume>
        <issue>10</issue>
        <fpage>1</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="pmid">21214931</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Landrum G (2017) RDKit documentation [Internet]. <ext-link ext-link-type="uri" xlink:href="http://www.rdkit.org/RDKit_Docs.current.pdf">http://www.rdkit.org/RDKit_Docs.current.pdf</ext-link></mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">OEChem Toolkit: Reactions [Internet]. OpenEye Scientific. [cited 2017 Sep 12]. <ext-link ext-link-type="uri" xlink:href="https://docs.eyesopen.com/toolkits/python/oechemtk/reactions.html">https://docs.eyesopen.com/toolkits/python/oechemtk/reactions.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Daylight. Reaction toolkit [Internet] [cited 2017 Sep 12]. <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/products/reaction_kit.html">http://www.daylight.com/products/reaction_kit.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ihlenfeldt</surname>
            <given-names>WD</given-names>
          </name>
          <name>
            <surname>Takahashi</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Abe</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Sasaki</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Computation and management of chemical properties in CACTVS: an extensible networked approach toward modularity and compatibility</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1994</year>
        <volume>34</volume>
        <issue>1</issue>
        <fpage>109</fpage>
        <lpage>116</lpage>
        <pub-id pub-id-type="doi">10.1021/ci00017a013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Reactor: a high performance virtual synthesis engine [Internet]. ChemAxon. [cited 2017 Sep 12]. <ext-link ext-link-type="uri" xlink:href="https://www.chemaxon.com/products/reactor/">https://www.chemaxon.com/products/reactor/</ext-link></mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">JChem for Office [Internet]. ChemAxon. [cited 2017 Sep 19]. <ext-link ext-link-type="uri" xlink:href="https://www.chemaxon.com/products/jchem-for-office/">https://www.chemaxon.com/products/jchem-for-office/</ext-link></mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">MolEngine: .NET Cheminformatics toolkit [Internet] [cited 2017 Sep 19]. <ext-link ext-link-type="uri" xlink:href="http://www2.scilligence.com/web/molengine.aspx">http://www2.scilligence.com/web/molengine.aspx</ext-link></mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">MOE: Molecular Operating Environment [Internet]. Chemical Computing Group. [cited 2017 Sep 19]. <ext-link ext-link-type="uri" xlink:href="https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm">https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm</ext-link></mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Accord Software Development Kit [Internet]. Accelrys. [cited 2017 Dec 20]. <ext-link ext-link-type="uri" xlink:href="http://accelrys.com/resource-center/downloads/updates/accord/sdk/sdk615/sdk615.html">http://accelrys.com/resource-center/downloads/updates/accord/sdk/sdk615/sdk615.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patlewicz</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Safford</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Worth</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Aleksiev</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>An evaluation of the implementation of the Cramer classification scheme in the Toxtree software</article-title>
        <source>SAR QSAR Environ Res</source>
        <year>2008</year>
        <volume>19</volume>
        <issue>5–6</issue>
        <fpage>495</fpage>
        <lpage>524</lpage>
        <pub-id pub-id-type="doi">10.1080/10629360802083871</pub-id>
        <pub-id pub-id-type="pmid">18853299</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rydberg</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gloriam</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Zaretzki</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Breneman</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Olsen</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>SMARTCyp: a 2D method for prediction of cytochrome P450-mediated drug metabolism</article-title>
        <source>ACS Med Chem Lett</source>
        <year>2010</year>
        <volume>1</volume>
        <issue>3</issue>
        <fpage>96</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1021/ml100016x</pub-id>
        <pub-id pub-id-type="pmid">24936230</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Kochev</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>AMBIT-SMARTS: efficient searching of chemical structures and fragments</article-title>
        <source>Mol Inform</source>
        <year>2011</year>
        <volume>30</volume>
        <issue>8</issue>
        <fpage>707</fpage>
        <lpage>720</lpage>
        <pub-id pub-id-type="pmid">27467262</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Jeliazkov</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>AMBIT RESTful web services: an implementation of the OpenTox Application Programming Interface</article-title>
        <source>J Cheminform</source>
        <year>2011</year>
        <volume>3</volume>
        <issue>1</issue>
        <fpage>18</fpage>
        <pub-id pub-id-type="doi">10.1186/1758-2946-3-18</pub-id>
        <pub-id pub-id-type="pmid">21575202</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Ideaconsult Ltd. AMBIT [Internet]. <ext-link ext-link-type="uri" xlink:href="http://ambit.sourceforge.net/">http://ambit.sourceforge.net/</ext-link></mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Koch</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Jensch</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Reigl</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Kreiling</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Linking LRI AMBIT chemoinformatic system with the IUCLID substance database to support read-across of substance endpoint data and category formation</article-title>
        <source>Toxicol Lett</source>
        <year>2016</year>
        <volume>258</volume>
        <fpage>S114</fpage>
        <lpage>S115</lpage>
        <pub-id pub-id-type="doi">10.1016/j.toxlet.2016.06.1469</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Ideaconsult Ltd. LRI AMBIT tool for read across [Internet]. <ext-link ext-link-type="uri" xlink:href="https://ambitlri.ideaconsult.net/">https://ambitlri.ideaconsult.net/</ext-link></mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Smith M, March J (2007) March’s advanced organic chemistry: reactions, mechanisms and structure, chap 4, 6th edn. Wiley</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">SMILES—a simplified chemical language [Internet]. Daylight theory. 2008 [cited 2017 Sep 19]. <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html">http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html</ext-link></mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Munro</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Ford</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Kennepohl</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sprenger</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Correlation of structural class with no-observed-effect-levels: a proposal for establishing a threshold of concern</article-title>
        <source>Food Chem Toxicol</source>
        <year>1996</year>
        <volume>34</volume>
        <fpage>829</fpage>
        <lpage>867</lpage>
        <pub-id pub-id-type="doi">10.1016/S0278-6915(96)00049-X</pub-id>
        <pub-id pub-id-type="pmid">8972878</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Avramova S, Kochev N, Angelov P. RetroTransformDB: a dataset of generic transforms for retrosynthetic analysis. Data [Internet]. 2018 Apr 21 [cited 2018 Jul 28]; 3(2):14. <ext-link ext-link-type="uri" xlink:href="http://www.mdpi.com/2306-5729/3/2/14">http://www.mdpi.com/2306-5729/3/2/14</ext-link></mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">Avramova S, Kochev N, Angelov P. RetroTransformDB—a dataset of transforms (retrosynthetic reactions). 2018 Mar 28 [cited 2018 Jul 28]. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/1209313#.W1xo4MJdLIU">https://zenodo.org/record/1209313#.W1xo4MJdLIU</ext-link></mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <mixed-citation publication-type="other">Toxtree—Toxic hazard estimation by decision tree approach [Internet]. <ext-link ext-link-type="uri" xlink:href="http://toxtree.sourceforge.net/">http://toxtree.sourceforge.net/</ext-link></mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wicker</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lorsbach</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gütlein</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schmid</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Latino</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kramer</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>enviPath—the environmental contaminant biotransformation pathway resource</article-title>
        <source>Nucleic Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D502</fpage>
        <lpage>D508</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1229</pub-id>
        <pub-id pub-id-type="pmid">26582924</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Wishart DS, Feunang YD, Marcu A, Guo AC, Liang K, Vázquez-Fresno R et al. HMDB 4.0: the human metabolome database for 2018. Nucleic Acids Res [Internet]. 2017 Nov 11. <ext-link ext-link-type="uri" xlink:href="http://academic.oup.com/nar/article/doi/10.1093/nar/gkx1089/4616873">http://academic.oup.com/nar/article/doi/10.1093/nar/gkx1089/4616873</ext-link></mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <mixed-citation publication-type="other">Feunang YD. Cheminformatics tools for enabling metabolomics [Internet]. <ext-link ext-link-type="uri" xlink:href="https://era.library.ualberta.ca/files/crf55z804r/DjoumbouFeunang_Yannick_201709_PhD.pdf">https://era.library.ualberta.ca/files/crf55z804r/DjoumbouFeunang_Yannick_201709_PhD.pdf</ext-link></mixed-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Jeliazkova N, Kochev N, Jeliazkov V. ambitcli-3.0.2 [Internet]. 2016 [cited 2017 Dec 19]. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/173560#.WjlcRyvfHVq">https://zenodo.org/record/173560#.WjlcRyvfHVq</ext-link></mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sun</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chupakhin</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Golib-Dzib</surname>
            <given-names>J-F</given-names>
          </name>
          <name>
            <surname>Engkvist</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Carlsson</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ExCAPE-DB: an integrated large scale dataset facilitating big data analysis in chemogenomics</article-title>
        <source>J Cheminform</source>
        <year>2017</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>17</fpage>
        <pub-id pub-id-type="doi">10.1186/s13321-017-0203-5</pub-id>
        <pub-id pub-id-type="pmid">28316655</pub-id>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kochev</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Avramova</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Jeliazkova</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Combinatorial generation of molecules by virtual software reactor</article-title>
        <source>Sci Work Union Sci Bulg Plovdiv</source>
        <year>2017</year>
        <volume>11</volume>
        <fpage>214</fpage>
        <lpage>219</lpage>
      </element-citation>
    </ref>
  </ref-list>
</back>
