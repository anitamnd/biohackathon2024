<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10726511</article-id>
    <article-id pub-id-type="publisher-id">5606</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-023-05606-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PEPMatch: a tool to identify short peptide sequence matches in large sets of proteins</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Marrama</surname>
          <given-names>Daniel</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chronister</surname>
          <given-names>William D.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Westernberg</surname>
          <given-names>Luise</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vita</surname>
          <given-names>Randi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Koşaloğlu-Yalçın</surname>
          <given-names>Zeynep</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sette</surname>
          <given-names>Alessandro</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Nielsen</surname>
          <given-names>Morten</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Greenbaum</surname>
          <given-names>Jason A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Peters</surname>
          <given-names>Bjoern</given-names>
        </name>
        <address>
          <email>bpeters@lji.org</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.185006.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0461 3162</institution-id><institution>Division of Vaccine Discovery, </institution><institution>La Jolla Institute for Immunology, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.266100.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2107 4242</institution-id><institution>University of California San Diego School of Medicine, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/04qtj9h94</institution-id><institution-id institution-id-type="GRID">grid.5170.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2181 8870</institution-id><institution>Department of Health Technology, </institution><institution>Technical University of Denmark, </institution></institution-wrap>Lyngby, Denmark </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>24</volume>
    <elocation-id>485</elocation-id>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>9</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Numerous tools exist for biological sequence comparisons and search. One case of particular interest for immunologists is finding matches for linear peptide T cell epitopes, typically between 8 and 15 residues in length, in a large set of protein sequences. Both to find exact matches or matches that account for residue substitutions. The utility of such tools is critical in applications ranging from identifying conservation across viral epitopes, identifying putative epitope targets for allergens, and finding matches for cancer-associated neoepitopes to examine the role of tolerance in tumor recognition.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We defined a set of benchmarks that reflect the different practical applications of short peptide sequence matching. We evaluated a suite of existing methods for speed and recall and developed a new tool, PEPMatch. The tool uses a deterministic <italic>k</italic>-mer mapping algorithm that preprocesses proteomes before searching, achieving a 50-fold increase in speed over methods such as the Basic Local Alignment Search Tool (BLAST) without compromising recall. PEPMatch’s code and benchmark datasets are publicly available.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">PEPMatch offers significant speed and recall advantages for peptide sequence matching. While it is of immediate utility for immunologists, the developed benchmarking framework also provides a standard against which future tools can be evaluated for improvements. The tool is available at <ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>, and the source code can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-023-05606-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Peptide matching</kwd>
      <kwd>T-cell epitopes</kwd>
      <kwd>Sequence searching</kwd>
      <kwd>K-mer mapping</kwd>
      <kwd>BLAST comparison</kwd>
      <kwd>Benchmarking</kwd>
      <kwd>Immunology</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000002</institution-id>
            <institution>National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <principal-award-recipient>
          <name>
            <surname>Marrama</surname>
            <given-names>Daniel</given-names>
          </name>
          <name>
            <surname>Chronister</surname>
            <given-names>William D.</given-names>
          </name>
          <name>
            <surname>Westernberg</surname>
            <given-names>Luise</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>Randi</given-names>
          </name>
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Zeynep</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>Alessandro</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>Morten</given-names>
          </name>
          <name>
            <surname>Greenbaum</surname>
            <given-names>Jason A.</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>Bjoern</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par10">Tools to compare nucleotide or amino-acid sequences, such as BLAST, are some of the most used bioinformatic methods [<xref ref-type="bibr" rid="CR1">1</xref>]. Performing sequence alignments can lead to functional and evolutionary insights at the level of whole genes and proteins. Tools such as MUSCLE [<xref ref-type="bibr" rid="CR2">2</xref>], DIAMOND [<xref ref-type="bibr" rid="CR3">3</xref>], and MMSeqs2 [<xref ref-type="bibr" rid="CR4">4</xref>] were created to speed up the alignment process beyond BLAST, increase recall, and address specific challenges in alignments.</p>
    <p id="Par11">Immunology researchers who study T-cell epitopes often apply general-purpose alignment tools. Such epitopes are typically linear peptides bound to major histocompatibility complex (MHC) molecules that are presented on the surface of host cells. These complexes enable T cells of the immune system to test them for binding to their T cell receptors. For MHC Class I, epitopes are typically 8–11 residues in length [<xref ref-type="bibr" rid="CR5">5</xref>]. For MHC class II, epitopes are typically 13–17 residues in length [<xref ref-type="bibr" rid="CR6">6</xref>], though shorter and longer peptides can be bound. A common research question is whether MHC-presented peptides are found within the proteins expressed by a given organism (its proteome), such as a pathogen, an allergen, or the host itself. We have compiled four real-life use cases from our own work as examples of the types of questions typically asked.<list list-type="order"><list-item><p id="Par12">The Immune Epitope Database (IEDB) has curators combing the scientific literature to catalog epitopes and the experiments characterizing them [<xref ref-type="bibr" rid="CR7">7</xref>]. If there is no literature information on the specific protein that an epitope is derived from, such source proteins are assigned by searching proteomes for exact matches.</p></list-item><list-item><p id="Par13">The emergence of the novel coronavirus (SARS-CoV-2) in late 2019 led to an ongoing pandemic, causing global health, social, and economic disturbance. Researchers attempted to understand the nature of this virus, including exploring the possibility of immune cross-reactivity with other endemic viruses. Peptides from SARS-CoV-2 were found to share similarities with peptides from the four of the most common human coronaviruses (HCoV-229E, HCoV-HKU1, HCoV-NL63, and HCoV-OC43) [<xref ref-type="bibr" rid="CR8">8</xref>], using a similarity metric based on the number of mismatches between peptides.</p></list-item><list-item><p id="Par14">T lymphocytes of the immune system can recognize cancer cells expressing mutated proteins through their presentation of “neoepitopes.” Such neoepitopes have amino acid substitutions compared to their unmutated sequence, allowing them to be recognized as non-self. Comparing neoepitope sequences against the host-proteome can aid in determining if the same sequence is found elsewhere and might thus be tolerated.</p></list-item><list-item><p id="Par15">Cow’s milk allergy is the most common pediatric food allergy, affecting nearly 2% of all children in the United States [<xref ref-type="bibr" rid="CR9">9</xref>]. Reactions to cow milk allergens can be severe and makeup 8–15% of fatal or near-fatal food-induced anaphylaxis [<xref ref-type="bibr" rid="CR10">10</xref>]. Researchers have postulated that the conservation of cow’s milk peptides in the human host may affect their allergenicity, with the less conserved peptides being more likely to cause allergic responses. In a recently published study [<xref ref-type="bibr" rid="CR11">11</xref>], we examined a set of Cow’s milk peptides screened for allergic responses and found the best match in the human proteome for each. Of the peptides conserved at 100% homology, every single one was non-reactive, and the majority of the reactive peptides were poorly conserved in comparison.</p></list-item></list></p>
    <p id="Par16">As the examples above show, the matches of interest are identical peptides or allow for minimal mismatches. The currently available tools, such as BLAST, were not created for this particular task. They were developed and optimized to align longer sequences and lower sequence similarity. While they allow users to set parameters to tweak the methods for shorter sequence matches, such as the epitope use cases we describe above, our work demonstrates that they are not ideal and are not guaranteed to find every possible match.</p>
    <p id="Par17">We used several common sequence alignment tools and real data from the applications mentioned above as tests to establish benchmarks for speed and recall. We also developed our own tool, PEPMatch, which is publicly available and is hosted on the Immune Epitope Database (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>). PEPMatch uses a non-alignment, deterministic <italic>k</italic>-mer mapping algorithm, which first preprocesses the proteome desired to search against and achieves a significant search speed increase compared with the other sequence alignment tools while still guaranteeing high recall. We have published the code used to benchmark these tools to facilitate collaborations with external users who may be incentivized to improve performance with better tools.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Collection of relevant tools and algorithms</title>
      <p id="Par18">Four string searching algorithms and five additional tools, including the newly developed PEPMatch tool, were used to find epitope matches against a reference proteome. The four string searching algorithms are also deterministic; they can only find exact matches, and thus, they are only tested on the first dataset. The names of these algorithms are Boyer-Moore, Horspool, Knuth-Morris-Pratt (KMP), and the Z algorithm [<xref ref-type="bibr" rid="CR13">13</xref>–<xref ref-type="bibr" rid="CR16">16</xref>]. These algorithms were re-implemented in Python version 3.9 using previously published literature as references. We used the five other tools that could perform both exact matching and finding matches with substitutions as standalone binaries with Python version 3.9 wrappers written to standardize metrics for benchmarking. We downloaded the BLAST bin files from the NCBI website, version 2.10.0. The Biopython library, version 1.78, was used to run the BLAST algorithm locally. To allow maximum capture of true positives, we set the E-value threshold to 100 for exact match searching and 10,000 for mismatch searching. Both the DIAMOND and MMseqs2 tools have downloadable standalone binaries hosted on GitHub that were used for benchmarking, and their parameters were also set to allow for the capture of true positives for short sequences. For DIAMOND, the E-value was set to 10,000, k (the number of alignments to report per query) to 100, and the “ultra-sensitive” flag was passed. Lastly, for Mmseqs2, we used an E-value of 10,000 and set the tool’s sensitivity to 7, which is the highest possible. Another tool, NmerMatch (unpublished; <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/NmerMatch">https://github.com/IEDB/NmerMatch</ext-link>), is a peptide-searching tool written in the Perl programming language. A Linux machine was used to run the benchmarking code with a 16-core Intel i9-9900 K CPU @ 3.60 GHz, 32 GiB of RAM, and a Samsung 970 EVO Plus 1 TB SSD.</p>
    </sec>
    <sec id="Sec4">
      <title>Application datasets</title>
      <p id="Par19">We compiled four separate datasets to test these tools. There were three main peptide searching objectives associated with these datasets: finding exact matches, finding matches with mismatches (residue substitutions), and finding the best match (match with the least substitutions). Each of these datasets represents a unique application within immunology research. All method implementations, Python wrappers for benchmarking, and datasets are available within the GitHub codebase and the benchmarking framework at github.com/IEDB/PEPMatch.</p>
      <sec id="Sec5">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par20">To compare the performance of the tools for exact match epitope searching within a reference proteome, we randomly selected 1000 9-mer HLA ligands from a recent paper [<xref ref-type="bibr" rid="CR12">12</xref>], and we also shuffled these 1000 peptides into random sequences (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1) to make sure the methods don’t incorrectly match these. We downloaded the human reference proteome from UniProt to search these epitopes within (UniProt Proteome ID: UP000005640). The four string searching algorithms can only be benchmarked for this dataset as they only perform exact matching.</p>
      </sec>
      <sec id="Sec6">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par21">To test the ability of these tools and algorithms to find peptides with limited mismatches (amino acid substitutions), we used two separate datasets with applications in infectious disease research and cancer research. A dataset containing 628 SARS-CoV-2 peptides (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2) of varying lengths [<xref ref-type="bibr" rid="CR8">8</xref>] was used to search against the entirety of the betacoronavirus genus proteins found in the NCBI RefSeq database [<xref ref-type="bibr" rid="CR17">17</xref>]. We searched these peptides against this enormous set of proteins for up to and including two mismatches. Next, we used a dataset of 620 neoepitopes, all 15-mers (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Table S3), taken from the Cancer Epitope Database and Analysis Resource (CEDAR) [<xref ref-type="bibr" rid="CR18">18</xref>], a freely accessible resource for cancer epitopes, to search against the human reference proteome taken from UniProt (UniProt Proteome ID: UP000005640). We searched these neoepitopes for up to and including three mismatches.</p>
      </sec>
      <sec id="Sec7">
        <title>Best match: milk allergen dataset</title>
        <p id="Par22">The best match is defined as the peptide within the given proteome with the least number of amino acid substitutions. We used 677 15-mers (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Table S4) from a recent study [<xref ref-type="bibr" rid="CR11">11</xref>] derived from cow milk proteins and screened across donors who had severe milk allergies. All of these peptides were searched in the human proteome (UniProt Proteome ID: UP000005640) to find the best match, the same way that was done in the study.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>PEPMatch: <italic>k</italic>-mer mapping algorithm</title>
      <p id="Par23">We developed PEPMatch to ensure all short peptide matches at a given mismatch frequency would be found. Our algorithm is based on matching shorter <italic>k</italic>-mers by breaking up the given proteome into all possible <italic>k</italic>-mers. We store all <italic>k</italic>-mers mapped to their index positions within the proteome as a key-value database. This preprocessing step is performed only once per proteome and per given <italic>k</italic> value. The hash table data structure allows for extremely fast lookup times when the preprocessed data is read into memory. Both exact matching of a peptide and searching for a peptide with mismatches can capitalize on hash table lookups and are explained separately below.</p>
      <p id="Par24">We store the <italic>k</italic>-mer to index mapping in a SQLite database or a serialized pickle format, depending on the matching task, either exact matching or matching with mismatches. The peptides queried for searching are passed and broken up into <italic>k</italic>-mers of the same size <italic>k</italic> as the preprocessed proteome. They can be broken up as <italic>k</italic>-mers using a rolling window of one amino acid. Alternatively, the peptides can be generated such that the total coverage of the peptide is obtained using the least number of <italic>k</italic>-mers, even if there is some overlap with the last two <italic>k</italic>-mers. Lookups are performed, and depending on the type of search (exact matching versus mismatching), specific calculations are executed to find matches; this is explained below.</p>
      <sec id="Sec9">
        <title>Exact matching</title>
        <p id="Par25">For exact matching, each query peptide is broken up into the appropriate <italic>k</italic>-mers based on the preprocessing carried out on the reference proteome, and each <italic>k</italic>-mer is assigned a sequential index. For example, given a proteome preprocessed with <italic>k</italic> = 5, the peptide YLLDLHSYL can be split into overlapping 5-mers: (0) YLLDL, (1) LLDLH, (2) LDLHS, (3) DLHSY, (4) LHSYL (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). For an exact match to be found, all of the <italic>k</italic>-mers must be found in the proteome in consecutive order. The PEPMatch algorithm checks that these conditions are met by subtracting each <italic>k</italic>-mer index (in the first example, 0 through 4) from the corresponding proteome index where the <italic>k</italic>-mer match was found (the example <italic>k</italic>-mers were found in indices 237,000,561 through 237,000,565) and recording the result. Thus, in the case of an exact match, the start index (in the example, 237,000,561) is recorded for each <italic>k</italic>-mer (5 times), which indicates that all <italic>k</italic>-mers are aligned consecutively. Alternatively, to maximize performance, this peptide can be split into two overlapping 5-mers: (0) YLLDL and (1) LHSYL, and only these two would need to be checked for consecutive alignment. We then use the start index location to map back to the protein within which the query peptide is found. Ideally, the optimal <italic>k</italic> would be the length of the peptide; however, since multiple peptides of different lengths can be searched and we want to minimize preprocessing, using a smaller <italic>k</italic> can cover more use cases without sacrificing much performance. If a given peptide contains multiple exact matches within a proteome, all are guaranteed to be found by PEPMatch.<fig id="Fig1"><label>Fig. 1</label><caption><p>Exact matching search protocol. The query peptide is split into overlapping 5-mers since <italic>k</italic> = 5 for the preprocessed proteome in this example. Each 5-mer is searched in the preprocessed proteome using hash table lookups. The indexes where the 5-mers are found minus the position within the query peptide are recorded. Lastly, the frequencies of the index locations are counted, and if there are index counts equal to the number of 5-mers from the query peptide (five 5-mers in this example), then a match is found</p></caption><graphic xlink:href="12859_2023_5606_Fig1_HTML" id="MO1"/></fig></p>
      </sec>
      <sec id="Sec10">
        <title>Mismatch searching</title>
        <p id="Par26">Mismatching is done slightly differently but has similar steps involved. Given a query peptide and a number of allowed mismatches within it, we utilize the pigeonhole principle [<xref ref-type="bibr" rid="CR19">19</xref>] to find the optimal <italic>k</italic> for the preprocessing step and use it to search for matches. The pigeonhole principle states that if <italic>n</italic> objects are put into <italic>m</italic> locations, where <italic>n</italic> &lt; <italic>m</italic>, then at least one location must be empty. We apply this to sequence searching: given a number of mismatches, a peptide can be split up into <italic>k</italic>-mers such that, if a match exists, at least one <italic>k</italic>-mer would be exactly matched. This means we can vary either <italic>k</italic> or the number of mismatches to guarantee finding every match within the given proteome. The optimal <italic>k</italic> for a given peptide length, <italic>l</italic>, and the number of mismatches, <italic>m</italic>, is determined by the following equation:<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k = \left[ {\frac{l}{m + 1}} \right]$$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mfrac><mml:mi>l</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par27">We can also find the maximum number of mismatches given <italic>k</italic> and <italic>l</italic>:<disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m = \left[ {\frac{l}{k} - 1} \right]$$\end{document}</tex-math><mml:math id="M4" display="block"><mml:mrow><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mrow><mml:mfrac><mml:mi>l</mml:mi><mml:mi>k</mml:mi></mml:mfrac><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par28">Note that each equation takes the floor function if <italic>k</italic> or <italic>m</italic> is not an integer. Equation (<xref rid="Equ1" ref-type="disp-formula">1</xref>) will be used most often as the user is more likely to have a query peptide of a given length and would like to specify the mismatch allowance.</p>
        <p id="Par29">After <italic>k</italic> is determined, given the number of mismatches and length, we split the query peptide into the appropriate <italic>k</italic>-mers. The hash table lookups are performed within the preprocessed proteome in the same way as exact matching. Once a <italic>k</italic>-mer is found, the neighboring <italic>k</italic>-mers of the query peptide are compared to the neighboring <italic>k</italic>-mers within the preprocessed proteome. The Hamming distance of equal-length strings is the number of different letters at the same position (mismatches). We check these corresponding neighbors for their Hamming distance and combine the total number of mismatches for the query peptide. If there are less than or equal to the number of mismatches than the given allowance, it is a match (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). We then record these corresponding <italic>k</italic>-mers and combine them to determine the matched sequence.<fig id="Fig2"><label>Fig. 2</label><caption><p>Mismatch search protocol. Given the query peptide of length 9 and the specified number of mismatches equal to 2, we determine that <italic>k</italic> needs to be 3, using Eq. (<xref rid="Equ1" ref-type="disp-formula">1</xref>). The peptide can also be split evenly since 9 is divisible by 3, so the <italic>k</italic>-mers are non-overlapping. The 3-mers are searched through the preprocessed proteome using hash table lookups. DLH is found at index 1,414,500,458, and the neighboring indexes are checked for Hamming distance. The left neighbor has 0 mismatches, and the right neighbor has 2 mismatches compared with the preprocessed proteome locations. In this case, the total number of mismatches is 2, which is equal to our threshold value, which means a match is found here</p></caption><graphic xlink:href="12859_2023_5606_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
      <sec id="Sec11">
        <title>Best match searching</title>
        <p id="Par30">A valuable feature of peptide searching is finding the best match within a given proteome, defined as the match within a proteome with the lowest number of mismatches. Our solution for this problem is to perform the preprocessing step multiple times on a proteome for different <italic>k</italic> values. After this, we perform the exact match search once and mismatching search protocol multiple times using the different preprocessed data while increasing the mismatch threshold. If the query contains multiple peptides, those finding a match in earlier searches are removed from the next mismatching search until every query peptide has been matched.</p>
        <p id="Par31">We first preprocess the proteome using <italic>k</italic> equal to the length of the query peptide (<italic>l</italic>), searching for exact matches only. Then, we preprocess using <italic>k</italic> = <italic>l</italic>/2, rounding down if <italic>l</italic>/2 is not an integer. We then continue halving and preprocessing until we reach <italic>k</italic> = 2. A preprocessed proteome of <italic>k</italic> = 1 is the same as brute force searching, so we do not go further. After all preprocessing is complete, we search the proteome starting with the highest <italic>k</italic> and work down until a match is found (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Using Eq. (<xref rid="Equ2" ref-type="disp-formula">2</xref>), we determine the maximum number of mismatches for the <italic>k</italic> value utilized and use that as our threshold for each search.<fig id="Fig3"><label>Fig. 3</label><caption><p>Best match searching feature. The proteome is preprocessed multiple times, starting with 15 (length of the query peptide) and halving <italic>k</italic> until we reach 2. We preprocessed the proteome four times using 15-mers, 7-mers, 3-mers, and 2-mers. The mismatching protocol uses the calculated maximum number of mismatches for each search. This is done until a match is found; we found a match with six mismatches in this case. If we had found a match in an earlier search, the subsequent searches would not have been performed</p></caption><graphic xlink:href="12859_2023_5606_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Results</title>
    <sec id="Sec13">
      <title>Establishing benchmark</title>
      <p id="Par32">To compare the performance of different tools for peptide searching, we established benchmark datasets and metrics to evaluate the performance of different tools and algorithms. We developed a framework that provides a set of query peptides, a reference proteome, a mismatch frequency threshold, and a file of expected output. A tool that accepts these inputs can then be plugged into this framework to test itself against the methods available. The framework tracks the time it takes to preprocess the proteome, preprocess the query (if a tool performs such a task), perform the search, and then evaluate the output’s recall. In the evaluation of method performance, recall and search time are taken into consideration. Recall is defined as the percentage of actual positive matches the method correctly identifies. All the methods report the query peptide, the matched sequence, the match’s protein ID, and the match’s index position within the protein. We used this framework to run the datasets with the abovementioned methods and generated the results below.</p>
      <p id="Par33">Since building a framework to test these many methods was necessary, we have attempted to make it easier for users to test other possible methods with our codebase. The framework we created to establish these benchmarks can allow an individual to write a Python wrapper around their tool, which can be written in any language, and “plug” it into our benchmarking code. The wrapper must accept standardized inputs and give standardized outputs established by this benchmark. Instructions for testing a new tool can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch/tree/master/benchmarking">https://github.com/IEDB/PEPMatch/tree/master/benchmarking</ext-link>.</p>
    </sec>
    <sec id="Sec14">
      <title>Benchmark results</title>
      <sec id="Sec15">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par34">We compared the methods as explained above by the total time for the task, which is composed of the time it took to preprocess the proteome, preprocess the query, and search the peptides (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). First, we tested the performance of all methods in finding exact matches in the human proteome for a dataset containing 2000 9-mers (Table <xref rid="Tab1" ref-type="table">1</xref>). Proteome preprocessing was relevant for five methods: PEPMatch, NmerMatch, BLAST, DIAMOND, and MMseqs2. PEPMatch and NmerMatch used a significant fraction of the total time preprocessing the proteome (39.6 s and 53.7 s, respectively). BLAST, DIAMOND, and MMseqs2 preprocessed the proteome much quicker, taking between 0.25 and 2.65 s. The other exact matching methods do not perform any preprocessing step. Only one of the methods, NmerMatch, performed preprocessing on the query peptides, which took only 0.006 s. Search time varied from 0.08 s (PEPMatch) to 113 min (Z algorithm). Six out of the nine methods found every match with 100% recall. BLAST found 98.3% of all true matches, while DIAMOND and MMseqs2 found &lt; 2% of the true matches. None of the methods matched the 1000 shuffled peptides anywhere in the human proteome. Overall, PEPMatch was the second slowest method for proteome preprocessing. However, it was several orders of magnitude faster in search time than the other methods. Total time was the shortest for MMseqs2, DIAMOND, and BLAST, followed by NmerMatch, PEPMatch, and the remaining string-searching algorithms.<fig id="Fig4"><label>Fig. 4</label><caption><p>Search times and for the benchmarks. The methods tested for each benchmark with their time to complete their search (blue bars) and the recall as a percentage of matches found (red dots). The search times (in seconds) are shown on the left y-axis, with their respective accuracies on the right y-axis. The search time for the MHC ligands benchmark is on a logarithmic scale due to the major differences between the methods. PEPMatch is many orders of magnitude faster for the exact matching benchmark (MHC ligands) and can achieve 100% recall in finding matches for all the benchmarks. It is only outperformed in the coronavirus epitope benchmark by NmerMatch when factoring for recall</p></caption><graphic xlink:href="12859_2023_5606_Fig4_HTML" id="MO4"/></fig><table-wrap id="Tab1"><label>Table 1</label><caption><p>Results from the MHC class I dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">39.6</td><td align="left">N/A</td><td align="left">0.08</td><td align="left">39.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">53.7</td><td align="left">0.006</td><td align="left">12.3</td><td align="left">66.0</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">1.27</td><td align="left">N/A</td><td align="left">11.3</td><td align="left">12.6</td><td align="left">98.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.25</td><td align="left">N/A</td><td align="left">5.01</td><td align="left">5.26</td><td align="left">1.5</td></tr><tr><td align="left">MMseqs2</td><td align="left">2.65</td><td align="left">N/A</td><td align="left">0.50</td><td align="left">3.15</td><td align="left">0.0</td></tr><tr><td align="left">Horspool</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">1,310</td><td align="left">1,310</td><td align="left">100</td></tr><tr><td align="left">Boyer-Moore</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">5,424</td><td align="left">5,424</td><td align="left">100</td></tr><tr><td align="left">KMP</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">3,807</td><td align="left">3,807</td><td align="left">100</td></tr><tr><td align="left">Z</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">6,782</td><td align="left">6,782</td><td align="left">100</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec16">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par35">Next, we tested the performance of the methods that calculate mismatching (this excludes the string searching algorithms: Horspool, Boyer-Moore, KMP, and Z). We aimed to find all matches in the entire betacoronavirus genus for a SARS-CoV-2 dataset containing 628 peptides of varying lengths (8–15) up to and including 2 mismatches (Table <xref rid="Tab2" ref-type="table">2</xref>). Proteome preprocessing time varied from 0.15 s (DIAMOND) to 214 s (NmerMatch). This step increased significantly for NmerMatch because it performs this step for each length of the query peptides. Query preprocessing is only done by NmerMatch, and this took 0.003 s. Search time varied from 0.77 s (MMSeqs2) to 115.9 s (BLAST). Recall was 100% for PEPMatch and NmerMatch but was considerably lower for the other methods. BLAST found 73.3% of the matches, whereas DIAMOND and MMSeqs2 only found 6.4% and 7.4%, respectively. The total time for the task was shortest for MMseqs2 and DIAMOND, followed by PEPMatch, BLAST, and then NmerMatch.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Results from the SARS-CoV-2 dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">34.1</td><td align="left">N/A</td><td char="." align="char">32.6</td><td char="." align="char">66.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">214</td><td align="left">0.003</td><td char="." align="char">21.3</td><td char="." align="char">235.9</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">0.51</td><td align="left">N/A</td><td char="." align="char">115.9</td><td char="." align="char">116.4</td><td align="left">73.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.15</td><td align="left">N/A</td><td char="." align="char">3.45</td><td char="." align="char">3.60</td><td align="left">6.4</td></tr><tr><td align="left">MMseqs2</td><td align="left">1.83</td><td align="left">N/A</td><td char="." align="char">0.77</td><td char="." align="char">2.60</td><td align="left">7.4</td></tr></tbody></table></table-wrap></p>
        <p id="Par36">We also tested the methods on a neoepitope dataset composed of 620 15-mers (Table <xref rid="Tab3" ref-type="table">3</xref>). We wanted to find all matches in the human proteome with up to and including 3 mismatches. The time it took to preprocess the proteome varied from 0.24 s (DIAMOND) to 50.4 s (NmerMatch), and again, query preprocessing was only done by NmerMatch, which took 0.002 s. Search time was significantly faster for MMseqs2 and DIAMOND at 0.59 and 4.93 s, respectively, whereas BLAST took the longest at 119.2 s. PEPMatch took 18.4 s to search, and NmerMatch took 40.1 s. Recall was higher on this dataset for the alignment tools BLAST, DIAMOND, and MMseqs2 at 58.1%, 34.0%, and 24.6%, respectively. PEPMatch and NmerMatch were able to find all matches with 100% recall. Total time was longest for BLAST and shortest for MMseqs2.<table-wrap id="Tab3"><label>Table 3</label><caption><p>Results from the neoepitopes dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">13.3</td><td align="left">N/A</td><td char="." align="char">18.4</td><td char="." align="char">31.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">50.4</td><td align="left">0.002</td><td char="." align="char">40.1</td><td char="." align="char">90.5</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.28</td><td align="left">N/A</td><td char="." align="char">119.2</td><td char="." align="char">120.5</td><td align="left">58.1</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.24</td><td align="left">N/A</td><td char="." align="char">4.93</td><td char="." align="char">5.17</td><td align="left">34.0</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.28</td><td align="left">N/A</td><td char="." align="char">0.59</td><td char="." align="char">2.87</td><td align="left">24.6</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec17">
        <title>Best match: milk allergen dataset</title>
        <p id="Par37">Finally, we wanted to test the task of finding the best match within a proteome. Here, we ran the methods on a dataset of 677 15-mers from milk allergens to find the best match in the human proteome (Table <xref rid="Tab4" ref-type="table">4</xref>). Only PEPMatch and NmerMatch have best match features; however, we also searched using BLAST, DIAMOND, and MMseqs2 to observe how they would perform. Preprocessing the proteome varied from 0.25 s (DIAMOND) to 203.7 s (NmerMatch), and search time varied from 0.48 s (MMseqs2) to 19.5 min (NmerMatch). Again, PEPMatch and NmerMatch found all the best matches at 100% recall, whereas BLAST, DIAMOND, and MMseqs2 found ~ 75 to 85% of all matches. Total time was shortest for MMseqs2 and longest for NmerMatch.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Results from the milk peptides dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">45.5</td><td align="left">N/A</td><td align="left">600.3</td><td align="left">645.8</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">203.7</td><td align="left">0.005</td><td align="left">1,168</td><td align="left">1,372</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.30</td><td align="left">N/A</td><td align="left">105.3</td><td align="left">106.6</td><td align="left">84.2</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.25</td><td align="left">N/A</td><td align="left">5.24</td><td align="left">5.49</td><td align="left">75.3</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.25</td><td align="left">N/A</td><td align="left">0.48</td><td align="left">2.73</td><td align="left">75.6</td></tr></tbody></table></table-wrap></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <p id="Par38">In this paper, we present a benchmark for finding short peptide sequences in large sets of proteins. Unbiased benchmarking is important when comparing any in silico methods since certain parameters can be tweaked to show an advantage when overall there may not be. This benchmark is intended to be unbiased by running all methods on the same machine, comparing their speed and recall without the concern of gaining an unfair advantage by parameter manipulation. We also present a new tool, PEPMatch, that performs well in these benchmark tasks.</p>
    <p id="Par39">Overall, we show that the tools utilizing hash table lookups (PEPMatch and NmerMatch) were able to perform speedy exact matching and mismatching searches with 100% recall. The common string-searching algorithms (Horspool, Boyer-Moore, KMP, and Z) used in many other string-searching applications are too slow for this task despite finding every match. The development of alignment tools over many decades, including BLAST, DIAMOND, and MMseqs2, was foundational for allowing search with residue substitutions, insertions, and deletions taken into account. These tools, while often faster for the task of finding matches with residue substitutions, their accuracies are lower when compared to deterministic algorithms such as PEPMatch for short sequences. This is likely because the alignment tools use k-mers for gapped and ungapped seeding and extending to find alignments of long sequences. Finding shorter sequences in large datasets is a different problem, and this is the conceptual advantage of PEPMatch. This is one possible explanation for the low recall of the alignment tools, as they are optimized for longer sequence alignments and are not easily amenable to account for the short peptide sequences. Since they also consider insertions and deletions when doing their alignments, and since we only tested for substitutions, they had more difficulty finding every match. This is supported by the fact that their accuracies were higher with the neoepitopes and milk allergen datasets, which were all 15-mers, as opposed to the SARS-CoV-2 dataset, which ranged from 8 to 15 residues. MMseqs2 and DIAMOND also had extremely low recall for the MHC class I dataset, all 9-mers. In addition, given that the benchmark code and method implementation is hosted on GitHub, it is easy to rerun and change parameters for potentially better results.</p>
    <p id="Par40">Preprocessing a proteome before searching dramatically increases the search time speed. If multiple runs are expected to be done subsequently with similar datasets, the preprocessing step only needs to be performed once, and the preprocessed data can be stored. This dramatically reduces the total time. For example, in the MHC class I dataset, PEPMatch searches all 2000 9-mers in 0.08 s, which is only 0.2% of the total time for the task. BLAST performs the fastest in total time for this dataset and has a high recall (98.3%), though its searching time was over 100 times slower than PEPMatch. It is also worth noting that we set up the benchmark to check for the matched sequence, protein ID, and index position of the match, which ensures that a false positive would be excluded, hence the use of the recall metric. Lastly, the alignment tools do not have a best match feature, whereas PEPMatch and NmerMatch do. For this reason, they can find every best match despite their search and total time being much longer.</p>
    <p id="Par41">Progress must still be made towards speedier search times as proteomics involves big data, and researchers may need to perform searches on enormous datasets. For example, one may want to search within the entire bacteria domain, which contains &gt; 164,000,000 proteins (queried on UniProt [<xref ref-type="bibr" rid="CR20">20</xref>]). Speed improvements while maintaining 100% match recall are likely possible. The utilization of GPU programming and parallelization may significantly improve performance. Since peptide searching is a prevalent task in research, pipelines to and from PEPMatch can be established with other tools to facilitate the research process. In fact, on the IEDB Next Gen Tools site (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>), PEPMatch is already piped to the IEDB peptide clustering and the MHC Class I prediction tools. Another potential extension for the tool might be ranking matches based on an amino acid substitution score. Certain amino acid substitutions are more frequent than others, which could be considered in the final output. It is also worth noting that peptides will often map to multiple proteins, especially when accounting for residue substitutions, which is important in immunology. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows an example output of the PEPMatch tool from the Next-Generation IEDB Tools website, which features a peptide that maps to multiple proteins.<fig id="Fig5"><label>Fig. 5</label><caption><p>Example PEPMatch output from Next-Generation IEDB tools site. Using the peptide from the implementation description, searching up to 2 mismatches, this peptide maps to multiple proteins. The output includes the original sequence, the matched sequence, the UniProt protein ID, the protein name, the gene symbol, the number of mismatches, and the residue positions where those mismatches occur. The user has the option to also include the species or organism name for the proteome, the taxon ID for that organism, the start and end index positions within the protein that the peptide is found in, and the protein existence level, which is a value curated by UniProt providing the level of evidence which the protein exists</p></caption><graphic xlink:href="12859_2023_5606_Fig5_HTML" id="MO5"/></fig></p>
  </sec>
  <sec id="Sec19">
    <title>Conclusion</title>
    <p id="Par42">Our study introduces PEPMatch, a specialized tool for speedy and accurate short peptide sequence matching. Built on a k-mer mapping algorithm that preprocesses proteomes, the tool dramatically outpaces existing methods (such as BLAST) in speed without compromising recall. The study also presents an unbiased benchmarking framework that serves as a standard for evaluating future tools and methods for this task. The applications mentioned are only a few areas within immunology where such a tool could be utilized. This type of small sequence searching is vital for researchers working with T-cell epitopes, as described in the introduction. Ultimately, we believe PEPMatch, along with this benchmark, will help progress immunological research by providing highly accurate and speedy peptide searching.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec20">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2023_5606_MOESM1_ESM.csv">
            <caption>
              <p><bold>Additional file 1:</bold> 1000 MHC ligand peptides and 1000 shuffled peptides, all 9-mers, for the exact matching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2023_5606_MOESM2_ESM.csv">
            <caption>
              <p><bold>Additional file 2:</bold> 628 SARS-CoV-2 peptides of varying lengths for the 1st mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2023_5606_MOESM3_ESM.csv">
            <caption>
              <p><bold>Additional file 3:</bold> 620 neoepitopes, all 15-mers, for the 2nd mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2023_5606_MOESM4_ESM.csv">
            <caption>
              <p><bold>Additional file 4:</bold> 677 milk allergen peptides, all 15-mers, for the best match benchmark, annotated with their reactivity (True/False) from donor screening.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>MHC </term>
        <def>
          <p id="Par4">Major histocompatibility complex</p>
        </def>
      </def-item>
      <def-item>
        <term>IEDB</term>
        <def>
          <p id="Par5">Immune epitope database</p>
        </def>
      </def-item>
      <def-item>
        <term>SARS-CoV-2</term>
        <def>
          <p id="Par6">Severe acute respiratory syndrome coronavirus 2</p>
        </def>
      </def-item>
      <def-item>
        <term>KMP</term>
        <def>
          <p id="Par7">Knuth–Morris–Pratt</p>
        </def>
      </def-item>
      <def-item>
        <term>HLA</term>
        <def>
          <p id="Par8">Human leukocyte antigen</p>
        </def>
      </def-item>
      <def-item>
        <term>CEDAR</term>
        <def>
          <p id="Par9">Cancer epitope database and analysis resource</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors wish to acknowledge the work of the Immune Epitope Database and Analysis Resource (IEDB) and the Cancer Epitope Database and Analysis Resource (CEDAR) teams.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>DM, JAG, and BP developed the underlying algorithm for the tool. DM developed and maintains the Python package. DM and JG created the benchmarking framework to test other tools. RV, LW, ZK, and AS provided the datasets and insights to the applications for the benchmarking. WDC, AS, MN, JAG, and BP provided insights into the analysis and applications of the tool. DM wrote the main manuscript text, generated the benchmarking data in the tables, and created the figures for the manuscript. All authors read, edited, and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by 75N93019C00001 and U24CA248138 from the National Institutes of Health.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Project name: PEPMatch. Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>. Operating system(s): Platform independent. Programming language: Python. Other requirements: Python 3.7 + , pandas, NumPy, and Biopython. License: Non-Profit Open Software License 3.0 (NPOSL-3.0). Any restrictions to use by non-academics: None. All data and code for this work are available on the PEPMatch GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>)</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethical approval and consent to participate</title>
      <p id="Par43">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par44">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par45">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>MUSCLE: a multiple sequence alignment method with reduced time and space complexity</article-title>
        <source>BMC Bioinform</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>113</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-5-113</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using diamond</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
        <?supplied-pmid 25402007?>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
        <?supplied-pmid 29035372?>
        <pub-id pub-id-type="pmid">29035372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trolle</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>McMurtrey</surname>
            <given-names>CP</given-names>
          </name>
          <name>
            <surname>Sidney</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bardet</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Osborn</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Kaever</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hildebrand</surname>
            <given-names>WH</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The length distribution of class I restricted T cell epitopes is determined by both peptide supply and MHC allele specific binding preference</article-title>
        <source>J Immunol Baltim Md</source>
        <year>1950</year>
        <volume>2016</volume>
        <issue>196</issue>
        <fpage>1480</fpage>
        <lpage>1487</lpage>
        <pub-id pub-id-type="doi">10.4049/jimmunol.1501721</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chang</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Ghosh</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kirschner</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Linderman</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <article-title>Peptide length-based prediction of peptide-MHC class II binding</article-title>
        <source>Bioinforma Oxf Engl</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>2761</fpage>
        <lpage>2767</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mahajan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Overton</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Dhanda</surname>
            <given-names>SK</given-names>
          </name>
          <name>
            <surname>Martini</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cantrell</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Wheeler</surname>
            <given-names>DK</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The immune epitope database (IEDB): 2018 update</article-title>
        <source>Nucl Acids Res</source>
        <year>2019</year>
        <volume>47</volume>
        <fpage>D339</fpage>
        <lpage>D343</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1006</pub-id>
        <?supplied-pmid 30357391?>
        <pub-id pub-id-type="pmid">30357391</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grifoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Weiskopf</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ramirez</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Mateus</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dan</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Moderbacher</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Rawlings</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Premkumar</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jadi</surname>
            <given-names>RS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Targets of T cell responses to SARS-CoV-2 coronavirus in humans with COVID-19 disease and unexposed individuals</article-title>
        <source>Cell</source>
        <year>2020</year>
        <volume>181</volume>
        <fpage>1489</fpage>
        <lpage>1501.e15</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2020.05.015</pub-id>
        <?supplied-pmid 32473127?>
        <pub-id pub-id-type="pmid">32473127</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Savage</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Johns</surname>
            <given-names>CB</given-names>
          </name>
        </person-group>
        <article-title>Food allergy: epidemiology and natural history</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2015</year>
        <volume>35</volume>
        <fpage>45</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2014.09.004</pub-id>
        <?supplied-pmid 25459576?>
        <pub-id pub-id-type="pmid">25459576</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cianferoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Muraro</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Food-Induced Anaphylaxis</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2012</year>
        <volume>32</volume>
        <fpage>165</fpage>
        <lpage>195</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2011.10.002</pub-id>
        <?supplied-pmid 22244239?>
        <pub-id pub-id-type="pmid">22244239</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lewis</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Soldevila</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Identification of cow milk epitopes to characterize and quantify disease-specific T cells in allergic children</article-title>
        <source>J Allergy Clin Immunol</source>
        <year>2023</year>
        <volume>152</volume>
        <issue>5</issue>
        <fpage>1196</fpage>
        <lpage>1209</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jaci.2023.07.020</pub-id>
        <?supplied-pmid 37604312?>
        <pub-id pub-id-type="pmid">37604312</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sarkizova</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Klaeger</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Le</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>LW</given-names>
          </name>
          <name>
            <surname>Oliveira</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Keshishian</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Hartigan</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Braun</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Ligon</surname>
            <given-names>KL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A large peptidome dataset improves HLA class I epitope prediction across most of the human population</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <fpage>199</fpage>
        <lpage>209</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0322-9</pub-id>
        <?supplied-pmid 31844290?>
        <pub-id pub-id-type="pmid">31844290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boyer</surname>
            <given-names>RS</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>JS</given-names>
          </name>
        </person-group>
        <article-title>A fast string searching algorithm</article-title>
        <source>Commun ACM</source>
        <year>1977</year>
        <volume>20</volume>
        <fpage>762</fpage>
        <lpage>772</lpage>
        <pub-id pub-id-type="doi">10.1145/359842.359859</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Horspool</surname>
            <given-names>RN</given-names>
          </name>
        </person-group>
        <article-title>Practical fast searching in strings</article-title>
        <source>Softw Pract Exp</source>
        <year>1980</year>
        <volume>10</volume>
        <fpage>501</fpage>
        <lpage>506</lpage>
        <pub-id pub-id-type="doi">10.1002/spe.4380100608</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knuth</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Morris</surname>
            <given-names>JH</given-names>
            <suffix>Jr</suffix>
          </name>
          <name>
            <surname>Pratt</surname>
            <given-names>VR</given-names>
          </name>
        </person-group>
        <article-title>Fast pattern matching in strings</article-title>
        <source>SIAM J Comput</source>
        <year>1977</year>
        <volume>6</volume>
        <fpage>323</fpage>
        <lpage>350</lpage>
        <pub-id pub-id-type="doi">10.1137/0206024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gusfield</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <source>Algorithms on strings, trees, and sequences: computer science and computational biology</source>
        <year>1997</year>
        <edition>1</edition>
        <publisher-loc>Cambridge England</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O'Leary</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Brister</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation</article-title>
        <source>Nucl Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D733</fpage>
        <lpage>D745</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id>
        <?supplied-pmid 26553804?>
        <pub-id pub-id-type="pmid">26553804</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Blazeska</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The cancer epitope database and analysis resource (CEDAR)</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D845</fpage>
        <lpage>D852</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac902</pub-id>
        <?supplied-pmid 36250634?>
        <pub-id pub-id-type="pmid">36250634</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Trybulec, W.A. Pigeon Hole Principle. J Formaliz Math. 1990; 2: 0.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>The UniProt Consortium</collab>
        </person-group>
        <article-title>UniProt: the Universal Protein Knowledgebase in 2023</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D523</fpage>
        <lpage>D531</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac1052</pub-id>
        <pub-id pub-id-type="pmid">36408920</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10726511</article-id>
    <article-id pub-id-type="publisher-id">5606</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-023-05606-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PEPMatch: a tool to identify short peptide sequence matches in large sets of proteins</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Marrama</surname>
          <given-names>Daniel</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chronister</surname>
          <given-names>William D.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Westernberg</surname>
          <given-names>Luise</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vita</surname>
          <given-names>Randi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Koşaloğlu-Yalçın</surname>
          <given-names>Zeynep</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sette</surname>
          <given-names>Alessandro</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Nielsen</surname>
          <given-names>Morten</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Greenbaum</surname>
          <given-names>Jason A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Peters</surname>
          <given-names>Bjoern</given-names>
        </name>
        <address>
          <email>bpeters@lji.org</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.185006.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0461 3162</institution-id><institution>Division of Vaccine Discovery, </institution><institution>La Jolla Institute for Immunology, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.266100.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2107 4242</institution-id><institution>University of California San Diego School of Medicine, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/04qtj9h94</institution-id><institution-id institution-id-type="GRID">grid.5170.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2181 8870</institution-id><institution>Department of Health Technology, </institution><institution>Technical University of Denmark, </institution></institution-wrap>Lyngby, Denmark </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>24</volume>
    <elocation-id>485</elocation-id>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>9</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Numerous tools exist for biological sequence comparisons and search. One case of particular interest for immunologists is finding matches for linear peptide T cell epitopes, typically between 8 and 15 residues in length, in a large set of protein sequences. Both to find exact matches or matches that account for residue substitutions. The utility of such tools is critical in applications ranging from identifying conservation across viral epitopes, identifying putative epitope targets for allergens, and finding matches for cancer-associated neoepitopes to examine the role of tolerance in tumor recognition.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We defined a set of benchmarks that reflect the different practical applications of short peptide sequence matching. We evaluated a suite of existing methods for speed and recall and developed a new tool, PEPMatch. The tool uses a deterministic <italic>k</italic>-mer mapping algorithm that preprocesses proteomes before searching, achieving a 50-fold increase in speed over methods such as the Basic Local Alignment Search Tool (BLAST) without compromising recall. PEPMatch’s code and benchmark datasets are publicly available.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">PEPMatch offers significant speed and recall advantages for peptide sequence matching. While it is of immediate utility for immunologists, the developed benchmarking framework also provides a standard against which future tools can be evaluated for improvements. The tool is available at <ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>, and the source code can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-023-05606-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Peptide matching</kwd>
      <kwd>T-cell epitopes</kwd>
      <kwd>Sequence searching</kwd>
      <kwd>K-mer mapping</kwd>
      <kwd>BLAST comparison</kwd>
      <kwd>Benchmarking</kwd>
      <kwd>Immunology</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000002</institution-id>
            <institution>National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <principal-award-recipient>
          <name>
            <surname>Marrama</surname>
            <given-names>Daniel</given-names>
          </name>
          <name>
            <surname>Chronister</surname>
            <given-names>William D.</given-names>
          </name>
          <name>
            <surname>Westernberg</surname>
            <given-names>Luise</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>Randi</given-names>
          </name>
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Zeynep</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>Alessandro</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>Morten</given-names>
          </name>
          <name>
            <surname>Greenbaum</surname>
            <given-names>Jason A.</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>Bjoern</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par10">Tools to compare nucleotide or amino-acid sequences, such as BLAST, are some of the most used bioinformatic methods [<xref ref-type="bibr" rid="CR1">1</xref>]. Performing sequence alignments can lead to functional and evolutionary insights at the level of whole genes and proteins. Tools such as MUSCLE [<xref ref-type="bibr" rid="CR2">2</xref>], DIAMOND [<xref ref-type="bibr" rid="CR3">3</xref>], and MMSeqs2 [<xref ref-type="bibr" rid="CR4">4</xref>] were created to speed up the alignment process beyond BLAST, increase recall, and address specific challenges in alignments.</p>
    <p id="Par11">Immunology researchers who study T-cell epitopes often apply general-purpose alignment tools. Such epitopes are typically linear peptides bound to major histocompatibility complex (MHC) molecules that are presented on the surface of host cells. These complexes enable T cells of the immune system to test them for binding to their T cell receptors. For MHC Class I, epitopes are typically 8–11 residues in length [<xref ref-type="bibr" rid="CR5">5</xref>]. For MHC class II, epitopes are typically 13–17 residues in length [<xref ref-type="bibr" rid="CR6">6</xref>], though shorter and longer peptides can be bound. A common research question is whether MHC-presented peptides are found within the proteins expressed by a given organism (its proteome), such as a pathogen, an allergen, or the host itself. We have compiled four real-life use cases from our own work as examples of the types of questions typically asked.<list list-type="order"><list-item><p id="Par12">The Immune Epitope Database (IEDB) has curators combing the scientific literature to catalog epitopes and the experiments characterizing them [<xref ref-type="bibr" rid="CR7">7</xref>]. If there is no literature information on the specific protein that an epitope is derived from, such source proteins are assigned by searching proteomes for exact matches.</p></list-item><list-item><p id="Par13">The emergence of the novel coronavirus (SARS-CoV-2) in late 2019 led to an ongoing pandemic, causing global health, social, and economic disturbance. Researchers attempted to understand the nature of this virus, including exploring the possibility of immune cross-reactivity with other endemic viruses. Peptides from SARS-CoV-2 were found to share similarities with peptides from the four of the most common human coronaviruses (HCoV-229E, HCoV-HKU1, HCoV-NL63, and HCoV-OC43) [<xref ref-type="bibr" rid="CR8">8</xref>], using a similarity metric based on the number of mismatches between peptides.</p></list-item><list-item><p id="Par14">T lymphocytes of the immune system can recognize cancer cells expressing mutated proteins through their presentation of “neoepitopes.” Such neoepitopes have amino acid substitutions compared to their unmutated sequence, allowing them to be recognized as non-self. Comparing neoepitope sequences against the host-proteome can aid in determining if the same sequence is found elsewhere and might thus be tolerated.</p></list-item><list-item><p id="Par15">Cow’s milk allergy is the most common pediatric food allergy, affecting nearly 2% of all children in the United States [<xref ref-type="bibr" rid="CR9">9</xref>]. Reactions to cow milk allergens can be severe and makeup 8–15% of fatal or near-fatal food-induced anaphylaxis [<xref ref-type="bibr" rid="CR10">10</xref>]. Researchers have postulated that the conservation of cow’s milk peptides in the human host may affect their allergenicity, with the less conserved peptides being more likely to cause allergic responses. In a recently published study [<xref ref-type="bibr" rid="CR11">11</xref>], we examined a set of Cow’s milk peptides screened for allergic responses and found the best match in the human proteome for each. Of the peptides conserved at 100% homology, every single one was non-reactive, and the majority of the reactive peptides were poorly conserved in comparison.</p></list-item></list></p>
    <p id="Par16">As the examples above show, the matches of interest are identical peptides or allow for minimal mismatches. The currently available tools, such as BLAST, were not created for this particular task. They were developed and optimized to align longer sequences and lower sequence similarity. While they allow users to set parameters to tweak the methods for shorter sequence matches, such as the epitope use cases we describe above, our work demonstrates that they are not ideal and are not guaranteed to find every possible match.</p>
    <p id="Par17">We used several common sequence alignment tools and real data from the applications mentioned above as tests to establish benchmarks for speed and recall. We also developed our own tool, PEPMatch, which is publicly available and is hosted on the Immune Epitope Database (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>). PEPMatch uses a non-alignment, deterministic <italic>k</italic>-mer mapping algorithm, which first preprocesses the proteome desired to search against and achieves a significant search speed increase compared with the other sequence alignment tools while still guaranteeing high recall. We have published the code used to benchmark these tools to facilitate collaborations with external users who may be incentivized to improve performance with better tools.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Collection of relevant tools and algorithms</title>
      <p id="Par18">Four string searching algorithms and five additional tools, including the newly developed PEPMatch tool, were used to find epitope matches against a reference proteome. The four string searching algorithms are also deterministic; they can only find exact matches, and thus, they are only tested on the first dataset. The names of these algorithms are Boyer-Moore, Horspool, Knuth-Morris-Pratt (KMP), and the Z algorithm [<xref ref-type="bibr" rid="CR13">13</xref>–<xref ref-type="bibr" rid="CR16">16</xref>]. These algorithms were re-implemented in Python version 3.9 using previously published literature as references. We used the five other tools that could perform both exact matching and finding matches with substitutions as standalone binaries with Python version 3.9 wrappers written to standardize metrics for benchmarking. We downloaded the BLAST bin files from the NCBI website, version 2.10.0. The Biopython library, version 1.78, was used to run the BLAST algorithm locally. To allow maximum capture of true positives, we set the E-value threshold to 100 for exact match searching and 10,000 for mismatch searching. Both the DIAMOND and MMseqs2 tools have downloadable standalone binaries hosted on GitHub that were used for benchmarking, and their parameters were also set to allow for the capture of true positives for short sequences. For DIAMOND, the E-value was set to 10,000, k (the number of alignments to report per query) to 100, and the “ultra-sensitive” flag was passed. Lastly, for Mmseqs2, we used an E-value of 10,000 and set the tool’s sensitivity to 7, which is the highest possible. Another tool, NmerMatch (unpublished; <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/NmerMatch">https://github.com/IEDB/NmerMatch</ext-link>), is a peptide-searching tool written in the Perl programming language. A Linux machine was used to run the benchmarking code with a 16-core Intel i9-9900 K CPU @ 3.60 GHz, 32 GiB of RAM, and a Samsung 970 EVO Plus 1 TB SSD.</p>
    </sec>
    <sec id="Sec4">
      <title>Application datasets</title>
      <p id="Par19">We compiled four separate datasets to test these tools. There were three main peptide searching objectives associated with these datasets: finding exact matches, finding matches with mismatches (residue substitutions), and finding the best match (match with the least substitutions). Each of these datasets represents a unique application within immunology research. All method implementations, Python wrappers for benchmarking, and datasets are available within the GitHub codebase and the benchmarking framework at github.com/IEDB/PEPMatch.</p>
      <sec id="Sec5">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par20">To compare the performance of the tools for exact match epitope searching within a reference proteome, we randomly selected 1000 9-mer HLA ligands from a recent paper [<xref ref-type="bibr" rid="CR12">12</xref>], and we also shuffled these 1000 peptides into random sequences (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1) to make sure the methods don’t incorrectly match these. We downloaded the human reference proteome from UniProt to search these epitopes within (UniProt Proteome ID: UP000005640). The four string searching algorithms can only be benchmarked for this dataset as they only perform exact matching.</p>
      </sec>
      <sec id="Sec6">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par21">To test the ability of these tools and algorithms to find peptides with limited mismatches (amino acid substitutions), we used two separate datasets with applications in infectious disease research and cancer research. A dataset containing 628 SARS-CoV-2 peptides (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2) of varying lengths [<xref ref-type="bibr" rid="CR8">8</xref>] was used to search against the entirety of the betacoronavirus genus proteins found in the NCBI RefSeq database [<xref ref-type="bibr" rid="CR17">17</xref>]. We searched these peptides against this enormous set of proteins for up to and including two mismatches. Next, we used a dataset of 620 neoepitopes, all 15-mers (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Table S3), taken from the Cancer Epitope Database and Analysis Resource (CEDAR) [<xref ref-type="bibr" rid="CR18">18</xref>], a freely accessible resource for cancer epitopes, to search against the human reference proteome taken from UniProt (UniProt Proteome ID: UP000005640). We searched these neoepitopes for up to and including three mismatches.</p>
      </sec>
      <sec id="Sec7">
        <title>Best match: milk allergen dataset</title>
        <p id="Par22">The best match is defined as the peptide within the given proteome with the least number of amino acid substitutions. We used 677 15-mers (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Table S4) from a recent study [<xref ref-type="bibr" rid="CR11">11</xref>] derived from cow milk proteins and screened across donors who had severe milk allergies. All of these peptides were searched in the human proteome (UniProt Proteome ID: UP000005640) to find the best match, the same way that was done in the study.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>PEPMatch: <italic>k</italic>-mer mapping algorithm</title>
      <p id="Par23">We developed PEPMatch to ensure all short peptide matches at a given mismatch frequency would be found. Our algorithm is based on matching shorter <italic>k</italic>-mers by breaking up the given proteome into all possible <italic>k</italic>-mers. We store all <italic>k</italic>-mers mapped to their index positions within the proteome as a key-value database. This preprocessing step is performed only once per proteome and per given <italic>k</italic> value. The hash table data structure allows for extremely fast lookup times when the preprocessed data is read into memory. Both exact matching of a peptide and searching for a peptide with mismatches can capitalize on hash table lookups and are explained separately below.</p>
      <p id="Par24">We store the <italic>k</italic>-mer to index mapping in a SQLite database or a serialized pickle format, depending on the matching task, either exact matching or matching with mismatches. The peptides queried for searching are passed and broken up into <italic>k</italic>-mers of the same size <italic>k</italic> as the preprocessed proteome. They can be broken up as <italic>k</italic>-mers using a rolling window of one amino acid. Alternatively, the peptides can be generated such that the total coverage of the peptide is obtained using the least number of <italic>k</italic>-mers, even if there is some overlap with the last two <italic>k</italic>-mers. Lookups are performed, and depending on the type of search (exact matching versus mismatching), specific calculations are executed to find matches; this is explained below.</p>
      <sec id="Sec9">
        <title>Exact matching</title>
        <p id="Par25">For exact matching, each query peptide is broken up into the appropriate <italic>k</italic>-mers based on the preprocessing carried out on the reference proteome, and each <italic>k</italic>-mer is assigned a sequential index. For example, given a proteome preprocessed with <italic>k</italic> = 5, the peptide YLLDLHSYL can be split into overlapping 5-mers: (0) YLLDL, (1) LLDLH, (2) LDLHS, (3) DLHSY, (4) LHSYL (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). For an exact match to be found, all of the <italic>k</italic>-mers must be found in the proteome in consecutive order. The PEPMatch algorithm checks that these conditions are met by subtracting each <italic>k</italic>-mer index (in the first example, 0 through 4) from the corresponding proteome index where the <italic>k</italic>-mer match was found (the example <italic>k</italic>-mers were found in indices 237,000,561 through 237,000,565) and recording the result. Thus, in the case of an exact match, the start index (in the example, 237,000,561) is recorded for each <italic>k</italic>-mer (5 times), which indicates that all <italic>k</italic>-mers are aligned consecutively. Alternatively, to maximize performance, this peptide can be split into two overlapping 5-mers: (0) YLLDL and (1) LHSYL, and only these two would need to be checked for consecutive alignment. We then use the start index location to map back to the protein within which the query peptide is found. Ideally, the optimal <italic>k</italic> would be the length of the peptide; however, since multiple peptides of different lengths can be searched and we want to minimize preprocessing, using a smaller <italic>k</italic> can cover more use cases without sacrificing much performance. If a given peptide contains multiple exact matches within a proteome, all are guaranteed to be found by PEPMatch.<fig id="Fig1"><label>Fig. 1</label><caption><p>Exact matching search protocol. The query peptide is split into overlapping 5-mers since <italic>k</italic> = 5 for the preprocessed proteome in this example. Each 5-mer is searched in the preprocessed proteome using hash table lookups. The indexes where the 5-mers are found minus the position within the query peptide are recorded. Lastly, the frequencies of the index locations are counted, and if there are index counts equal to the number of 5-mers from the query peptide (five 5-mers in this example), then a match is found</p></caption><graphic xlink:href="12859_2023_5606_Fig1_HTML" id="MO1"/></fig></p>
      </sec>
      <sec id="Sec10">
        <title>Mismatch searching</title>
        <p id="Par26">Mismatching is done slightly differently but has similar steps involved. Given a query peptide and a number of allowed mismatches within it, we utilize the pigeonhole principle [<xref ref-type="bibr" rid="CR19">19</xref>] to find the optimal <italic>k</italic> for the preprocessing step and use it to search for matches. The pigeonhole principle states that if <italic>n</italic> objects are put into <italic>m</italic> locations, where <italic>n</italic> &lt; <italic>m</italic>, then at least one location must be empty. We apply this to sequence searching: given a number of mismatches, a peptide can be split up into <italic>k</italic>-mers such that, if a match exists, at least one <italic>k</italic>-mer would be exactly matched. This means we can vary either <italic>k</italic> or the number of mismatches to guarantee finding every match within the given proteome. The optimal <italic>k</italic> for a given peptide length, <italic>l</italic>, and the number of mismatches, <italic>m</italic>, is determined by the following equation:<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k = \left[ {\frac{l}{m + 1}} \right]$$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mfrac><mml:mi>l</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par27">We can also find the maximum number of mismatches given <italic>k</italic> and <italic>l</italic>:<disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m = \left[ {\frac{l}{k} - 1} \right]$$\end{document}</tex-math><mml:math id="M4" display="block"><mml:mrow><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mrow><mml:mfrac><mml:mi>l</mml:mi><mml:mi>k</mml:mi></mml:mfrac><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par28">Note that each equation takes the floor function if <italic>k</italic> or <italic>m</italic> is not an integer. Equation (<xref rid="Equ1" ref-type="disp-formula">1</xref>) will be used most often as the user is more likely to have a query peptide of a given length and would like to specify the mismatch allowance.</p>
        <p id="Par29">After <italic>k</italic> is determined, given the number of mismatches and length, we split the query peptide into the appropriate <italic>k</italic>-mers. The hash table lookups are performed within the preprocessed proteome in the same way as exact matching. Once a <italic>k</italic>-mer is found, the neighboring <italic>k</italic>-mers of the query peptide are compared to the neighboring <italic>k</italic>-mers within the preprocessed proteome. The Hamming distance of equal-length strings is the number of different letters at the same position (mismatches). We check these corresponding neighbors for their Hamming distance and combine the total number of mismatches for the query peptide. If there are less than or equal to the number of mismatches than the given allowance, it is a match (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). We then record these corresponding <italic>k</italic>-mers and combine them to determine the matched sequence.<fig id="Fig2"><label>Fig. 2</label><caption><p>Mismatch search protocol. Given the query peptide of length 9 and the specified number of mismatches equal to 2, we determine that <italic>k</italic> needs to be 3, using Eq. (<xref rid="Equ1" ref-type="disp-formula">1</xref>). The peptide can also be split evenly since 9 is divisible by 3, so the <italic>k</italic>-mers are non-overlapping. The 3-mers are searched through the preprocessed proteome using hash table lookups. DLH is found at index 1,414,500,458, and the neighboring indexes are checked for Hamming distance. The left neighbor has 0 mismatches, and the right neighbor has 2 mismatches compared with the preprocessed proteome locations. In this case, the total number of mismatches is 2, which is equal to our threshold value, which means a match is found here</p></caption><graphic xlink:href="12859_2023_5606_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
      <sec id="Sec11">
        <title>Best match searching</title>
        <p id="Par30">A valuable feature of peptide searching is finding the best match within a given proteome, defined as the match within a proteome with the lowest number of mismatches. Our solution for this problem is to perform the preprocessing step multiple times on a proteome for different <italic>k</italic> values. After this, we perform the exact match search once and mismatching search protocol multiple times using the different preprocessed data while increasing the mismatch threshold. If the query contains multiple peptides, those finding a match in earlier searches are removed from the next mismatching search until every query peptide has been matched.</p>
        <p id="Par31">We first preprocess the proteome using <italic>k</italic> equal to the length of the query peptide (<italic>l</italic>), searching for exact matches only. Then, we preprocess using <italic>k</italic> = <italic>l</italic>/2, rounding down if <italic>l</italic>/2 is not an integer. We then continue halving and preprocessing until we reach <italic>k</italic> = 2. A preprocessed proteome of <italic>k</italic> = 1 is the same as brute force searching, so we do not go further. After all preprocessing is complete, we search the proteome starting with the highest <italic>k</italic> and work down until a match is found (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Using Eq. (<xref rid="Equ2" ref-type="disp-formula">2</xref>), we determine the maximum number of mismatches for the <italic>k</italic> value utilized and use that as our threshold for each search.<fig id="Fig3"><label>Fig. 3</label><caption><p>Best match searching feature. The proteome is preprocessed multiple times, starting with 15 (length of the query peptide) and halving <italic>k</italic> until we reach 2. We preprocessed the proteome four times using 15-mers, 7-mers, 3-mers, and 2-mers. The mismatching protocol uses the calculated maximum number of mismatches for each search. This is done until a match is found; we found a match with six mismatches in this case. If we had found a match in an earlier search, the subsequent searches would not have been performed</p></caption><graphic xlink:href="12859_2023_5606_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Results</title>
    <sec id="Sec13">
      <title>Establishing benchmark</title>
      <p id="Par32">To compare the performance of different tools for peptide searching, we established benchmark datasets and metrics to evaluate the performance of different tools and algorithms. We developed a framework that provides a set of query peptides, a reference proteome, a mismatch frequency threshold, and a file of expected output. A tool that accepts these inputs can then be plugged into this framework to test itself against the methods available. The framework tracks the time it takes to preprocess the proteome, preprocess the query (if a tool performs such a task), perform the search, and then evaluate the output’s recall. In the evaluation of method performance, recall and search time are taken into consideration. Recall is defined as the percentage of actual positive matches the method correctly identifies. All the methods report the query peptide, the matched sequence, the match’s protein ID, and the match’s index position within the protein. We used this framework to run the datasets with the abovementioned methods and generated the results below.</p>
      <p id="Par33">Since building a framework to test these many methods was necessary, we have attempted to make it easier for users to test other possible methods with our codebase. The framework we created to establish these benchmarks can allow an individual to write a Python wrapper around their tool, which can be written in any language, and “plug” it into our benchmarking code. The wrapper must accept standardized inputs and give standardized outputs established by this benchmark. Instructions for testing a new tool can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch/tree/master/benchmarking">https://github.com/IEDB/PEPMatch/tree/master/benchmarking</ext-link>.</p>
    </sec>
    <sec id="Sec14">
      <title>Benchmark results</title>
      <sec id="Sec15">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par34">We compared the methods as explained above by the total time for the task, which is composed of the time it took to preprocess the proteome, preprocess the query, and search the peptides (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). First, we tested the performance of all methods in finding exact matches in the human proteome for a dataset containing 2000 9-mers (Table <xref rid="Tab1" ref-type="table">1</xref>). Proteome preprocessing was relevant for five methods: PEPMatch, NmerMatch, BLAST, DIAMOND, and MMseqs2. PEPMatch and NmerMatch used a significant fraction of the total time preprocessing the proteome (39.6 s and 53.7 s, respectively). BLAST, DIAMOND, and MMseqs2 preprocessed the proteome much quicker, taking between 0.25 and 2.65 s. The other exact matching methods do not perform any preprocessing step. Only one of the methods, NmerMatch, performed preprocessing on the query peptides, which took only 0.006 s. Search time varied from 0.08 s (PEPMatch) to 113 min (Z algorithm). Six out of the nine methods found every match with 100% recall. BLAST found 98.3% of all true matches, while DIAMOND and MMseqs2 found &lt; 2% of the true matches. None of the methods matched the 1000 shuffled peptides anywhere in the human proteome. Overall, PEPMatch was the second slowest method for proteome preprocessing. However, it was several orders of magnitude faster in search time than the other methods. Total time was the shortest for MMseqs2, DIAMOND, and BLAST, followed by NmerMatch, PEPMatch, and the remaining string-searching algorithms.<fig id="Fig4"><label>Fig. 4</label><caption><p>Search times and for the benchmarks. The methods tested for each benchmark with their time to complete their search (blue bars) and the recall as a percentage of matches found (red dots). The search times (in seconds) are shown on the left y-axis, with their respective accuracies on the right y-axis. The search time for the MHC ligands benchmark is on a logarithmic scale due to the major differences between the methods. PEPMatch is many orders of magnitude faster for the exact matching benchmark (MHC ligands) and can achieve 100% recall in finding matches for all the benchmarks. It is only outperformed in the coronavirus epitope benchmark by NmerMatch when factoring for recall</p></caption><graphic xlink:href="12859_2023_5606_Fig4_HTML" id="MO4"/></fig><table-wrap id="Tab1"><label>Table 1</label><caption><p>Results from the MHC class I dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">39.6</td><td align="left">N/A</td><td align="left">0.08</td><td align="left">39.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">53.7</td><td align="left">0.006</td><td align="left">12.3</td><td align="left">66.0</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">1.27</td><td align="left">N/A</td><td align="left">11.3</td><td align="left">12.6</td><td align="left">98.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.25</td><td align="left">N/A</td><td align="left">5.01</td><td align="left">5.26</td><td align="left">1.5</td></tr><tr><td align="left">MMseqs2</td><td align="left">2.65</td><td align="left">N/A</td><td align="left">0.50</td><td align="left">3.15</td><td align="left">0.0</td></tr><tr><td align="left">Horspool</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">1,310</td><td align="left">1,310</td><td align="left">100</td></tr><tr><td align="left">Boyer-Moore</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">5,424</td><td align="left">5,424</td><td align="left">100</td></tr><tr><td align="left">KMP</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">3,807</td><td align="left">3,807</td><td align="left">100</td></tr><tr><td align="left">Z</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">6,782</td><td align="left">6,782</td><td align="left">100</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec16">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par35">Next, we tested the performance of the methods that calculate mismatching (this excludes the string searching algorithms: Horspool, Boyer-Moore, KMP, and Z). We aimed to find all matches in the entire betacoronavirus genus for a SARS-CoV-2 dataset containing 628 peptides of varying lengths (8–15) up to and including 2 mismatches (Table <xref rid="Tab2" ref-type="table">2</xref>). Proteome preprocessing time varied from 0.15 s (DIAMOND) to 214 s (NmerMatch). This step increased significantly for NmerMatch because it performs this step for each length of the query peptides. Query preprocessing is only done by NmerMatch, and this took 0.003 s. Search time varied from 0.77 s (MMSeqs2) to 115.9 s (BLAST). Recall was 100% for PEPMatch and NmerMatch but was considerably lower for the other methods. BLAST found 73.3% of the matches, whereas DIAMOND and MMSeqs2 only found 6.4% and 7.4%, respectively. The total time for the task was shortest for MMseqs2 and DIAMOND, followed by PEPMatch, BLAST, and then NmerMatch.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Results from the SARS-CoV-2 dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">34.1</td><td align="left">N/A</td><td char="." align="char">32.6</td><td char="." align="char">66.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">214</td><td align="left">0.003</td><td char="." align="char">21.3</td><td char="." align="char">235.9</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">0.51</td><td align="left">N/A</td><td char="." align="char">115.9</td><td char="." align="char">116.4</td><td align="left">73.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.15</td><td align="left">N/A</td><td char="." align="char">3.45</td><td char="." align="char">3.60</td><td align="left">6.4</td></tr><tr><td align="left">MMseqs2</td><td align="left">1.83</td><td align="left">N/A</td><td char="." align="char">0.77</td><td char="." align="char">2.60</td><td align="left">7.4</td></tr></tbody></table></table-wrap></p>
        <p id="Par36">We also tested the methods on a neoepitope dataset composed of 620 15-mers (Table <xref rid="Tab3" ref-type="table">3</xref>). We wanted to find all matches in the human proteome with up to and including 3 mismatches. The time it took to preprocess the proteome varied from 0.24 s (DIAMOND) to 50.4 s (NmerMatch), and again, query preprocessing was only done by NmerMatch, which took 0.002 s. Search time was significantly faster for MMseqs2 and DIAMOND at 0.59 and 4.93 s, respectively, whereas BLAST took the longest at 119.2 s. PEPMatch took 18.4 s to search, and NmerMatch took 40.1 s. Recall was higher on this dataset for the alignment tools BLAST, DIAMOND, and MMseqs2 at 58.1%, 34.0%, and 24.6%, respectively. PEPMatch and NmerMatch were able to find all matches with 100% recall. Total time was longest for BLAST and shortest for MMseqs2.<table-wrap id="Tab3"><label>Table 3</label><caption><p>Results from the neoepitopes dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">13.3</td><td align="left">N/A</td><td char="." align="char">18.4</td><td char="." align="char">31.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">50.4</td><td align="left">0.002</td><td char="." align="char">40.1</td><td char="." align="char">90.5</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.28</td><td align="left">N/A</td><td char="." align="char">119.2</td><td char="." align="char">120.5</td><td align="left">58.1</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.24</td><td align="left">N/A</td><td char="." align="char">4.93</td><td char="." align="char">5.17</td><td align="left">34.0</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.28</td><td align="left">N/A</td><td char="." align="char">0.59</td><td char="." align="char">2.87</td><td align="left">24.6</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec17">
        <title>Best match: milk allergen dataset</title>
        <p id="Par37">Finally, we wanted to test the task of finding the best match within a proteome. Here, we ran the methods on a dataset of 677 15-mers from milk allergens to find the best match in the human proteome (Table <xref rid="Tab4" ref-type="table">4</xref>). Only PEPMatch and NmerMatch have best match features; however, we also searched using BLAST, DIAMOND, and MMseqs2 to observe how they would perform. Preprocessing the proteome varied from 0.25 s (DIAMOND) to 203.7 s (NmerMatch), and search time varied from 0.48 s (MMseqs2) to 19.5 min (NmerMatch). Again, PEPMatch and NmerMatch found all the best matches at 100% recall, whereas BLAST, DIAMOND, and MMseqs2 found ~ 75 to 85% of all matches. Total time was shortest for MMseqs2 and longest for NmerMatch.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Results from the milk peptides dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">45.5</td><td align="left">N/A</td><td align="left">600.3</td><td align="left">645.8</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">203.7</td><td align="left">0.005</td><td align="left">1,168</td><td align="left">1,372</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.30</td><td align="left">N/A</td><td align="left">105.3</td><td align="left">106.6</td><td align="left">84.2</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.25</td><td align="left">N/A</td><td align="left">5.24</td><td align="left">5.49</td><td align="left">75.3</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.25</td><td align="left">N/A</td><td align="left">0.48</td><td align="left">2.73</td><td align="left">75.6</td></tr></tbody></table></table-wrap></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <p id="Par38">In this paper, we present a benchmark for finding short peptide sequences in large sets of proteins. Unbiased benchmarking is important when comparing any in silico methods since certain parameters can be tweaked to show an advantage when overall there may not be. This benchmark is intended to be unbiased by running all methods on the same machine, comparing their speed and recall without the concern of gaining an unfair advantage by parameter manipulation. We also present a new tool, PEPMatch, that performs well in these benchmark tasks.</p>
    <p id="Par39">Overall, we show that the tools utilizing hash table lookups (PEPMatch and NmerMatch) were able to perform speedy exact matching and mismatching searches with 100% recall. The common string-searching algorithms (Horspool, Boyer-Moore, KMP, and Z) used in many other string-searching applications are too slow for this task despite finding every match. The development of alignment tools over many decades, including BLAST, DIAMOND, and MMseqs2, was foundational for allowing search with residue substitutions, insertions, and deletions taken into account. These tools, while often faster for the task of finding matches with residue substitutions, their accuracies are lower when compared to deterministic algorithms such as PEPMatch for short sequences. This is likely because the alignment tools use k-mers for gapped and ungapped seeding and extending to find alignments of long sequences. Finding shorter sequences in large datasets is a different problem, and this is the conceptual advantage of PEPMatch. This is one possible explanation for the low recall of the alignment tools, as they are optimized for longer sequence alignments and are not easily amenable to account for the short peptide sequences. Since they also consider insertions and deletions when doing their alignments, and since we only tested for substitutions, they had more difficulty finding every match. This is supported by the fact that their accuracies were higher with the neoepitopes and milk allergen datasets, which were all 15-mers, as opposed to the SARS-CoV-2 dataset, which ranged from 8 to 15 residues. MMseqs2 and DIAMOND also had extremely low recall for the MHC class I dataset, all 9-mers. In addition, given that the benchmark code and method implementation is hosted on GitHub, it is easy to rerun and change parameters for potentially better results.</p>
    <p id="Par40">Preprocessing a proteome before searching dramatically increases the search time speed. If multiple runs are expected to be done subsequently with similar datasets, the preprocessing step only needs to be performed once, and the preprocessed data can be stored. This dramatically reduces the total time. For example, in the MHC class I dataset, PEPMatch searches all 2000 9-mers in 0.08 s, which is only 0.2% of the total time for the task. BLAST performs the fastest in total time for this dataset and has a high recall (98.3%), though its searching time was over 100 times slower than PEPMatch. It is also worth noting that we set up the benchmark to check for the matched sequence, protein ID, and index position of the match, which ensures that a false positive would be excluded, hence the use of the recall metric. Lastly, the alignment tools do not have a best match feature, whereas PEPMatch and NmerMatch do. For this reason, they can find every best match despite their search and total time being much longer.</p>
    <p id="Par41">Progress must still be made towards speedier search times as proteomics involves big data, and researchers may need to perform searches on enormous datasets. For example, one may want to search within the entire bacteria domain, which contains &gt; 164,000,000 proteins (queried on UniProt [<xref ref-type="bibr" rid="CR20">20</xref>]). Speed improvements while maintaining 100% match recall are likely possible. The utilization of GPU programming and parallelization may significantly improve performance. Since peptide searching is a prevalent task in research, pipelines to and from PEPMatch can be established with other tools to facilitate the research process. In fact, on the IEDB Next Gen Tools site (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>), PEPMatch is already piped to the IEDB peptide clustering and the MHC Class I prediction tools. Another potential extension for the tool might be ranking matches based on an amino acid substitution score. Certain amino acid substitutions are more frequent than others, which could be considered in the final output. It is also worth noting that peptides will often map to multiple proteins, especially when accounting for residue substitutions, which is important in immunology. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows an example output of the PEPMatch tool from the Next-Generation IEDB Tools website, which features a peptide that maps to multiple proteins.<fig id="Fig5"><label>Fig. 5</label><caption><p>Example PEPMatch output from Next-Generation IEDB tools site. Using the peptide from the implementation description, searching up to 2 mismatches, this peptide maps to multiple proteins. The output includes the original sequence, the matched sequence, the UniProt protein ID, the protein name, the gene symbol, the number of mismatches, and the residue positions where those mismatches occur. The user has the option to also include the species or organism name for the proteome, the taxon ID for that organism, the start and end index positions within the protein that the peptide is found in, and the protein existence level, which is a value curated by UniProt providing the level of evidence which the protein exists</p></caption><graphic xlink:href="12859_2023_5606_Fig5_HTML" id="MO5"/></fig></p>
  </sec>
  <sec id="Sec19">
    <title>Conclusion</title>
    <p id="Par42">Our study introduces PEPMatch, a specialized tool for speedy and accurate short peptide sequence matching. Built on a k-mer mapping algorithm that preprocesses proteomes, the tool dramatically outpaces existing methods (such as BLAST) in speed without compromising recall. The study also presents an unbiased benchmarking framework that serves as a standard for evaluating future tools and methods for this task. The applications mentioned are only a few areas within immunology where such a tool could be utilized. This type of small sequence searching is vital for researchers working with T-cell epitopes, as described in the introduction. Ultimately, we believe PEPMatch, along with this benchmark, will help progress immunological research by providing highly accurate and speedy peptide searching.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec20">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2023_5606_MOESM1_ESM.csv">
            <caption>
              <p><bold>Additional file 1:</bold> 1000 MHC ligand peptides and 1000 shuffled peptides, all 9-mers, for the exact matching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2023_5606_MOESM2_ESM.csv">
            <caption>
              <p><bold>Additional file 2:</bold> 628 SARS-CoV-2 peptides of varying lengths for the 1st mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2023_5606_MOESM3_ESM.csv">
            <caption>
              <p><bold>Additional file 3:</bold> 620 neoepitopes, all 15-mers, for the 2nd mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2023_5606_MOESM4_ESM.csv">
            <caption>
              <p><bold>Additional file 4:</bold> 677 milk allergen peptides, all 15-mers, for the best match benchmark, annotated with their reactivity (True/False) from donor screening.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>MHC </term>
        <def>
          <p id="Par4">Major histocompatibility complex</p>
        </def>
      </def-item>
      <def-item>
        <term>IEDB</term>
        <def>
          <p id="Par5">Immune epitope database</p>
        </def>
      </def-item>
      <def-item>
        <term>SARS-CoV-2</term>
        <def>
          <p id="Par6">Severe acute respiratory syndrome coronavirus 2</p>
        </def>
      </def-item>
      <def-item>
        <term>KMP</term>
        <def>
          <p id="Par7">Knuth–Morris–Pratt</p>
        </def>
      </def-item>
      <def-item>
        <term>HLA</term>
        <def>
          <p id="Par8">Human leukocyte antigen</p>
        </def>
      </def-item>
      <def-item>
        <term>CEDAR</term>
        <def>
          <p id="Par9">Cancer epitope database and analysis resource</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors wish to acknowledge the work of the Immune Epitope Database and Analysis Resource (IEDB) and the Cancer Epitope Database and Analysis Resource (CEDAR) teams.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>DM, JAG, and BP developed the underlying algorithm for the tool. DM developed and maintains the Python package. DM and JG created the benchmarking framework to test other tools. RV, LW, ZK, and AS provided the datasets and insights to the applications for the benchmarking. WDC, AS, MN, JAG, and BP provided insights into the analysis and applications of the tool. DM wrote the main manuscript text, generated the benchmarking data in the tables, and created the figures for the manuscript. All authors read, edited, and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by 75N93019C00001 and U24CA248138 from the National Institutes of Health.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Project name: PEPMatch. Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>. Operating system(s): Platform independent. Programming language: Python. Other requirements: Python 3.7 + , pandas, NumPy, and Biopython. License: Non-Profit Open Software License 3.0 (NPOSL-3.0). Any restrictions to use by non-academics: None. All data and code for this work are available on the PEPMatch GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>)</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethical approval and consent to participate</title>
      <p id="Par43">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par44">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par45">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>MUSCLE: a multiple sequence alignment method with reduced time and space complexity</article-title>
        <source>BMC Bioinform</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>113</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-5-113</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using diamond</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
        <?supplied-pmid 25402007?>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
        <?supplied-pmid 29035372?>
        <pub-id pub-id-type="pmid">29035372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trolle</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>McMurtrey</surname>
            <given-names>CP</given-names>
          </name>
          <name>
            <surname>Sidney</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bardet</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Osborn</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Kaever</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hildebrand</surname>
            <given-names>WH</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The length distribution of class I restricted T cell epitopes is determined by both peptide supply and MHC allele specific binding preference</article-title>
        <source>J Immunol Baltim Md</source>
        <year>1950</year>
        <volume>2016</volume>
        <issue>196</issue>
        <fpage>1480</fpage>
        <lpage>1487</lpage>
        <pub-id pub-id-type="doi">10.4049/jimmunol.1501721</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chang</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Ghosh</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kirschner</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Linderman</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <article-title>Peptide length-based prediction of peptide-MHC class II binding</article-title>
        <source>Bioinforma Oxf Engl</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>2761</fpage>
        <lpage>2767</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mahajan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Overton</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Dhanda</surname>
            <given-names>SK</given-names>
          </name>
          <name>
            <surname>Martini</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cantrell</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Wheeler</surname>
            <given-names>DK</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The immune epitope database (IEDB): 2018 update</article-title>
        <source>Nucl Acids Res</source>
        <year>2019</year>
        <volume>47</volume>
        <fpage>D339</fpage>
        <lpage>D343</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1006</pub-id>
        <?supplied-pmid 30357391?>
        <pub-id pub-id-type="pmid">30357391</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grifoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Weiskopf</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ramirez</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Mateus</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dan</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Moderbacher</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Rawlings</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Premkumar</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jadi</surname>
            <given-names>RS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Targets of T cell responses to SARS-CoV-2 coronavirus in humans with COVID-19 disease and unexposed individuals</article-title>
        <source>Cell</source>
        <year>2020</year>
        <volume>181</volume>
        <fpage>1489</fpage>
        <lpage>1501.e15</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2020.05.015</pub-id>
        <?supplied-pmid 32473127?>
        <pub-id pub-id-type="pmid">32473127</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Savage</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Johns</surname>
            <given-names>CB</given-names>
          </name>
        </person-group>
        <article-title>Food allergy: epidemiology and natural history</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2015</year>
        <volume>35</volume>
        <fpage>45</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2014.09.004</pub-id>
        <?supplied-pmid 25459576?>
        <pub-id pub-id-type="pmid">25459576</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cianferoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Muraro</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Food-Induced Anaphylaxis</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2012</year>
        <volume>32</volume>
        <fpage>165</fpage>
        <lpage>195</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2011.10.002</pub-id>
        <?supplied-pmid 22244239?>
        <pub-id pub-id-type="pmid">22244239</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lewis</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Soldevila</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Identification of cow milk epitopes to characterize and quantify disease-specific T cells in allergic children</article-title>
        <source>J Allergy Clin Immunol</source>
        <year>2023</year>
        <volume>152</volume>
        <issue>5</issue>
        <fpage>1196</fpage>
        <lpage>1209</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jaci.2023.07.020</pub-id>
        <?supplied-pmid 37604312?>
        <pub-id pub-id-type="pmid">37604312</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sarkizova</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Klaeger</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Le</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>LW</given-names>
          </name>
          <name>
            <surname>Oliveira</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Keshishian</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Hartigan</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Braun</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Ligon</surname>
            <given-names>KL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A large peptidome dataset improves HLA class I epitope prediction across most of the human population</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <fpage>199</fpage>
        <lpage>209</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0322-9</pub-id>
        <?supplied-pmid 31844290?>
        <pub-id pub-id-type="pmid">31844290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boyer</surname>
            <given-names>RS</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>JS</given-names>
          </name>
        </person-group>
        <article-title>A fast string searching algorithm</article-title>
        <source>Commun ACM</source>
        <year>1977</year>
        <volume>20</volume>
        <fpage>762</fpage>
        <lpage>772</lpage>
        <pub-id pub-id-type="doi">10.1145/359842.359859</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Horspool</surname>
            <given-names>RN</given-names>
          </name>
        </person-group>
        <article-title>Practical fast searching in strings</article-title>
        <source>Softw Pract Exp</source>
        <year>1980</year>
        <volume>10</volume>
        <fpage>501</fpage>
        <lpage>506</lpage>
        <pub-id pub-id-type="doi">10.1002/spe.4380100608</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knuth</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Morris</surname>
            <given-names>JH</given-names>
            <suffix>Jr</suffix>
          </name>
          <name>
            <surname>Pratt</surname>
            <given-names>VR</given-names>
          </name>
        </person-group>
        <article-title>Fast pattern matching in strings</article-title>
        <source>SIAM J Comput</source>
        <year>1977</year>
        <volume>6</volume>
        <fpage>323</fpage>
        <lpage>350</lpage>
        <pub-id pub-id-type="doi">10.1137/0206024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gusfield</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <source>Algorithms on strings, trees, and sequences: computer science and computational biology</source>
        <year>1997</year>
        <edition>1</edition>
        <publisher-loc>Cambridge England</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O'Leary</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Brister</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation</article-title>
        <source>Nucl Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D733</fpage>
        <lpage>D745</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id>
        <?supplied-pmid 26553804?>
        <pub-id pub-id-type="pmid">26553804</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Blazeska</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The cancer epitope database and analysis resource (CEDAR)</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D845</fpage>
        <lpage>D852</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac902</pub-id>
        <?supplied-pmid 36250634?>
        <pub-id pub-id-type="pmid">36250634</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Trybulec, W.A. Pigeon Hole Principle. J Formaliz Math. 1990; 2: 0.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>The UniProt Consortium</collab>
        </person-group>
        <article-title>UniProt: the Universal Protein Knowledgebase in 2023</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D523</fpage>
        <lpage>D531</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac1052</pub-id>
        <pub-id pub-id-type="pmid">36408920</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10726511</article-id>
    <article-id pub-id-type="publisher-id">5606</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-023-05606-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PEPMatch: a tool to identify short peptide sequence matches in large sets of proteins</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Marrama</surname>
          <given-names>Daniel</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chronister</surname>
          <given-names>William D.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Westernberg</surname>
          <given-names>Luise</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vita</surname>
          <given-names>Randi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Koşaloğlu-Yalçın</surname>
          <given-names>Zeynep</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sette</surname>
          <given-names>Alessandro</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Nielsen</surname>
          <given-names>Morten</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Greenbaum</surname>
          <given-names>Jason A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Peters</surname>
          <given-names>Bjoern</given-names>
        </name>
        <address>
          <email>bpeters@lji.org</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.185006.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0461 3162</institution-id><institution>Division of Vaccine Discovery, </institution><institution>La Jolla Institute for Immunology, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.266100.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2107 4242</institution-id><institution>University of California San Diego School of Medicine, </institution></institution-wrap>La Jolla, San Diego, CA USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/04qtj9h94</institution-id><institution-id institution-id-type="GRID">grid.5170.3</institution-id><institution-id institution-id-type="ISNI">0000 0001 2181 8870</institution-id><institution>Department of Health Technology, </institution><institution>Technical University of Denmark, </institution></institution-wrap>Lyngby, Denmark </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>18</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>24</volume>
    <elocation-id>485</elocation-id>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>9</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Numerous tools exist for biological sequence comparisons and search. One case of particular interest for immunologists is finding matches for linear peptide T cell epitopes, typically between 8 and 15 residues in length, in a large set of protein sequences. Both to find exact matches or matches that account for residue substitutions. The utility of such tools is critical in applications ranging from identifying conservation across viral epitopes, identifying putative epitope targets for allergens, and finding matches for cancer-associated neoepitopes to examine the role of tolerance in tumor recognition.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We defined a set of benchmarks that reflect the different practical applications of short peptide sequence matching. We evaluated a suite of existing methods for speed and recall and developed a new tool, PEPMatch. The tool uses a deterministic <italic>k</italic>-mer mapping algorithm that preprocesses proteomes before searching, achieving a 50-fold increase in speed over methods such as the Basic Local Alignment Search Tool (BLAST) without compromising recall. PEPMatch’s code and benchmark datasets are publicly available.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">PEPMatch offers significant speed and recall advantages for peptide sequence matching. While it is of immediate utility for immunologists, the developed benchmarking framework also provides a standard against which future tools can be evaluated for improvements. The tool is available at <ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>, and the source code can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-023-05606-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Peptide matching</kwd>
      <kwd>T-cell epitopes</kwd>
      <kwd>Sequence searching</kwd>
      <kwd>K-mer mapping</kwd>
      <kwd>BLAST comparison</kwd>
      <kwd>Benchmarking</kwd>
      <kwd>Immunology</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000002</institution-id>
            <institution>National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <award-id>U24CA248138</award-id>
        <principal-award-recipient>
          <name>
            <surname>Marrama</surname>
            <given-names>Daniel</given-names>
          </name>
          <name>
            <surname>Chronister</surname>
            <given-names>William D.</given-names>
          </name>
          <name>
            <surname>Westernberg</surname>
            <given-names>Luise</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>Randi</given-names>
          </name>
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Zeynep</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>Alessandro</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>Morten</given-names>
          </name>
          <name>
            <surname>Greenbaum</surname>
            <given-names>Jason A.</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>Bjoern</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par10">Tools to compare nucleotide or amino-acid sequences, such as BLAST, are some of the most used bioinformatic methods [<xref ref-type="bibr" rid="CR1">1</xref>]. Performing sequence alignments can lead to functional and evolutionary insights at the level of whole genes and proteins. Tools such as MUSCLE [<xref ref-type="bibr" rid="CR2">2</xref>], DIAMOND [<xref ref-type="bibr" rid="CR3">3</xref>], and MMSeqs2 [<xref ref-type="bibr" rid="CR4">4</xref>] were created to speed up the alignment process beyond BLAST, increase recall, and address specific challenges in alignments.</p>
    <p id="Par11">Immunology researchers who study T-cell epitopes often apply general-purpose alignment tools. Such epitopes are typically linear peptides bound to major histocompatibility complex (MHC) molecules that are presented on the surface of host cells. These complexes enable T cells of the immune system to test them for binding to their T cell receptors. For MHC Class I, epitopes are typically 8–11 residues in length [<xref ref-type="bibr" rid="CR5">5</xref>]. For MHC class II, epitopes are typically 13–17 residues in length [<xref ref-type="bibr" rid="CR6">6</xref>], though shorter and longer peptides can be bound. A common research question is whether MHC-presented peptides are found within the proteins expressed by a given organism (its proteome), such as a pathogen, an allergen, or the host itself. We have compiled four real-life use cases from our own work as examples of the types of questions typically asked.<list list-type="order"><list-item><p id="Par12">The Immune Epitope Database (IEDB) has curators combing the scientific literature to catalog epitopes and the experiments characterizing them [<xref ref-type="bibr" rid="CR7">7</xref>]. If there is no literature information on the specific protein that an epitope is derived from, such source proteins are assigned by searching proteomes for exact matches.</p></list-item><list-item><p id="Par13">The emergence of the novel coronavirus (SARS-CoV-2) in late 2019 led to an ongoing pandemic, causing global health, social, and economic disturbance. Researchers attempted to understand the nature of this virus, including exploring the possibility of immune cross-reactivity with other endemic viruses. Peptides from SARS-CoV-2 were found to share similarities with peptides from the four of the most common human coronaviruses (HCoV-229E, HCoV-HKU1, HCoV-NL63, and HCoV-OC43) [<xref ref-type="bibr" rid="CR8">8</xref>], using a similarity metric based on the number of mismatches between peptides.</p></list-item><list-item><p id="Par14">T lymphocytes of the immune system can recognize cancer cells expressing mutated proteins through their presentation of “neoepitopes.” Such neoepitopes have amino acid substitutions compared to their unmutated sequence, allowing them to be recognized as non-self. Comparing neoepitope sequences against the host-proteome can aid in determining if the same sequence is found elsewhere and might thus be tolerated.</p></list-item><list-item><p id="Par15">Cow’s milk allergy is the most common pediatric food allergy, affecting nearly 2% of all children in the United States [<xref ref-type="bibr" rid="CR9">9</xref>]. Reactions to cow milk allergens can be severe and makeup 8–15% of fatal or near-fatal food-induced anaphylaxis [<xref ref-type="bibr" rid="CR10">10</xref>]. Researchers have postulated that the conservation of cow’s milk peptides in the human host may affect their allergenicity, with the less conserved peptides being more likely to cause allergic responses. In a recently published study [<xref ref-type="bibr" rid="CR11">11</xref>], we examined a set of Cow’s milk peptides screened for allergic responses and found the best match in the human proteome for each. Of the peptides conserved at 100% homology, every single one was non-reactive, and the majority of the reactive peptides were poorly conserved in comparison.</p></list-item></list></p>
    <p id="Par16">As the examples above show, the matches of interest are identical peptides or allow for minimal mismatches. The currently available tools, such as BLAST, were not created for this particular task. They were developed and optimized to align longer sequences and lower sequence similarity. While they allow users to set parameters to tweak the methods for shorter sequence matches, such as the epitope use cases we describe above, our work demonstrates that they are not ideal and are not guaranteed to find every possible match.</p>
    <p id="Par17">We used several common sequence alignment tools and real data from the applications mentioned above as tests to establish benchmarks for speed and recall. We also developed our own tool, PEPMatch, which is publicly available and is hosted on the Immune Epitope Database (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>). PEPMatch uses a non-alignment, deterministic <italic>k</italic>-mer mapping algorithm, which first preprocesses the proteome desired to search against and achieves a significant search speed increase compared with the other sequence alignment tools while still guaranteeing high recall. We have published the code used to benchmark these tools to facilitate collaborations with external users who may be incentivized to improve performance with better tools.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Collection of relevant tools and algorithms</title>
      <p id="Par18">Four string searching algorithms and five additional tools, including the newly developed PEPMatch tool, were used to find epitope matches against a reference proteome. The four string searching algorithms are also deterministic; they can only find exact matches, and thus, they are only tested on the first dataset. The names of these algorithms are Boyer-Moore, Horspool, Knuth-Morris-Pratt (KMP), and the Z algorithm [<xref ref-type="bibr" rid="CR13">13</xref>–<xref ref-type="bibr" rid="CR16">16</xref>]. These algorithms were re-implemented in Python version 3.9 using previously published literature as references. We used the five other tools that could perform both exact matching and finding matches with substitutions as standalone binaries with Python version 3.9 wrappers written to standardize metrics for benchmarking. We downloaded the BLAST bin files from the NCBI website, version 2.10.0. The Biopython library, version 1.78, was used to run the BLAST algorithm locally. To allow maximum capture of true positives, we set the E-value threshold to 100 for exact match searching and 10,000 for mismatch searching. Both the DIAMOND and MMseqs2 tools have downloadable standalone binaries hosted on GitHub that were used for benchmarking, and their parameters were also set to allow for the capture of true positives for short sequences. For DIAMOND, the E-value was set to 10,000, k (the number of alignments to report per query) to 100, and the “ultra-sensitive” flag was passed. Lastly, for Mmseqs2, we used an E-value of 10,000 and set the tool’s sensitivity to 7, which is the highest possible. Another tool, NmerMatch (unpublished; <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/NmerMatch">https://github.com/IEDB/NmerMatch</ext-link>), is a peptide-searching tool written in the Perl programming language. A Linux machine was used to run the benchmarking code with a 16-core Intel i9-9900 K CPU @ 3.60 GHz, 32 GiB of RAM, and a Samsung 970 EVO Plus 1 TB SSD.</p>
    </sec>
    <sec id="Sec4">
      <title>Application datasets</title>
      <p id="Par19">We compiled four separate datasets to test these tools. There were three main peptide searching objectives associated with these datasets: finding exact matches, finding matches with mismatches (residue substitutions), and finding the best match (match with the least substitutions). Each of these datasets represents a unique application within immunology research. All method implementations, Python wrappers for benchmarking, and datasets are available within the GitHub codebase and the benchmarking framework at github.com/IEDB/PEPMatch.</p>
      <sec id="Sec5">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par20">To compare the performance of the tools for exact match epitope searching within a reference proteome, we randomly selected 1000 9-mer HLA ligands from a recent paper [<xref ref-type="bibr" rid="CR12">12</xref>], and we also shuffled these 1000 peptides into random sequences (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1) to make sure the methods don’t incorrectly match these. We downloaded the human reference proteome from UniProt to search these epitopes within (UniProt Proteome ID: UP000005640). The four string searching algorithms can only be benchmarked for this dataset as they only perform exact matching.</p>
      </sec>
      <sec id="Sec6">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par21">To test the ability of these tools and algorithms to find peptides with limited mismatches (amino acid substitutions), we used two separate datasets with applications in infectious disease research and cancer research. A dataset containing 628 SARS-CoV-2 peptides (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2) of varying lengths [<xref ref-type="bibr" rid="CR8">8</xref>] was used to search against the entirety of the betacoronavirus genus proteins found in the NCBI RefSeq database [<xref ref-type="bibr" rid="CR17">17</xref>]. We searched these peptides against this enormous set of proteins for up to and including two mismatches. Next, we used a dataset of 620 neoepitopes, all 15-mers (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Table S3), taken from the Cancer Epitope Database and Analysis Resource (CEDAR) [<xref ref-type="bibr" rid="CR18">18</xref>], a freely accessible resource for cancer epitopes, to search against the human reference proteome taken from UniProt (UniProt Proteome ID: UP000005640). We searched these neoepitopes for up to and including three mismatches.</p>
      </sec>
      <sec id="Sec7">
        <title>Best match: milk allergen dataset</title>
        <p id="Par22">The best match is defined as the peptide within the given proteome with the least number of amino acid substitutions. We used 677 15-mers (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Table S4) from a recent study [<xref ref-type="bibr" rid="CR11">11</xref>] derived from cow milk proteins and screened across donors who had severe milk allergies. All of these peptides were searched in the human proteome (UniProt Proteome ID: UP000005640) to find the best match, the same way that was done in the study.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>PEPMatch: <italic>k</italic>-mer mapping algorithm</title>
      <p id="Par23">We developed PEPMatch to ensure all short peptide matches at a given mismatch frequency would be found. Our algorithm is based on matching shorter <italic>k</italic>-mers by breaking up the given proteome into all possible <italic>k</italic>-mers. We store all <italic>k</italic>-mers mapped to their index positions within the proteome as a key-value database. This preprocessing step is performed only once per proteome and per given <italic>k</italic> value. The hash table data structure allows for extremely fast lookup times when the preprocessed data is read into memory. Both exact matching of a peptide and searching for a peptide with mismatches can capitalize on hash table lookups and are explained separately below.</p>
      <p id="Par24">We store the <italic>k</italic>-mer to index mapping in a SQLite database or a serialized pickle format, depending on the matching task, either exact matching or matching with mismatches. The peptides queried for searching are passed and broken up into <italic>k</italic>-mers of the same size <italic>k</italic> as the preprocessed proteome. They can be broken up as <italic>k</italic>-mers using a rolling window of one amino acid. Alternatively, the peptides can be generated such that the total coverage of the peptide is obtained using the least number of <italic>k</italic>-mers, even if there is some overlap with the last two <italic>k</italic>-mers. Lookups are performed, and depending on the type of search (exact matching versus mismatching), specific calculations are executed to find matches; this is explained below.</p>
      <sec id="Sec9">
        <title>Exact matching</title>
        <p id="Par25">For exact matching, each query peptide is broken up into the appropriate <italic>k</italic>-mers based on the preprocessing carried out on the reference proteome, and each <italic>k</italic>-mer is assigned a sequential index. For example, given a proteome preprocessed with <italic>k</italic> = 5, the peptide YLLDLHSYL can be split into overlapping 5-mers: (0) YLLDL, (1) LLDLH, (2) LDLHS, (3) DLHSY, (4) LHSYL (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). For an exact match to be found, all of the <italic>k</italic>-mers must be found in the proteome in consecutive order. The PEPMatch algorithm checks that these conditions are met by subtracting each <italic>k</italic>-mer index (in the first example, 0 through 4) from the corresponding proteome index where the <italic>k</italic>-mer match was found (the example <italic>k</italic>-mers were found in indices 237,000,561 through 237,000,565) and recording the result. Thus, in the case of an exact match, the start index (in the example, 237,000,561) is recorded for each <italic>k</italic>-mer (5 times), which indicates that all <italic>k</italic>-mers are aligned consecutively. Alternatively, to maximize performance, this peptide can be split into two overlapping 5-mers: (0) YLLDL and (1) LHSYL, and only these two would need to be checked for consecutive alignment. We then use the start index location to map back to the protein within which the query peptide is found. Ideally, the optimal <italic>k</italic> would be the length of the peptide; however, since multiple peptides of different lengths can be searched and we want to minimize preprocessing, using a smaller <italic>k</italic> can cover more use cases without sacrificing much performance. If a given peptide contains multiple exact matches within a proteome, all are guaranteed to be found by PEPMatch.<fig id="Fig1"><label>Fig. 1</label><caption><p>Exact matching search protocol. The query peptide is split into overlapping 5-mers since <italic>k</italic> = 5 for the preprocessed proteome in this example. Each 5-mer is searched in the preprocessed proteome using hash table lookups. The indexes where the 5-mers are found minus the position within the query peptide are recorded. Lastly, the frequencies of the index locations are counted, and if there are index counts equal to the number of 5-mers from the query peptide (five 5-mers in this example), then a match is found</p></caption><graphic xlink:href="12859_2023_5606_Fig1_HTML" id="MO1"/></fig></p>
      </sec>
      <sec id="Sec10">
        <title>Mismatch searching</title>
        <p id="Par26">Mismatching is done slightly differently but has similar steps involved. Given a query peptide and a number of allowed mismatches within it, we utilize the pigeonhole principle [<xref ref-type="bibr" rid="CR19">19</xref>] to find the optimal <italic>k</italic> for the preprocessing step and use it to search for matches. The pigeonhole principle states that if <italic>n</italic> objects are put into <italic>m</italic> locations, where <italic>n</italic> &lt; <italic>m</italic>, then at least one location must be empty. We apply this to sequence searching: given a number of mismatches, a peptide can be split up into <italic>k</italic>-mers such that, if a match exists, at least one <italic>k</italic>-mer would be exactly matched. This means we can vary either <italic>k</italic> or the number of mismatches to guarantee finding every match within the given proteome. The optimal <italic>k</italic> for a given peptide length, <italic>l</italic>, and the number of mismatches, <italic>m</italic>, is determined by the following equation:<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k = \left[ {\frac{l}{m + 1}} \right]$$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mfrac><mml:mi>l</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par27">We can also find the maximum number of mismatches given <italic>k</italic> and <italic>l</italic>:<disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m = \left[ {\frac{l}{k} - 1} \right]$$\end{document}</tex-math><mml:math id="M4" display="block"><mml:mrow><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="]" open="["><mml:mrow><mml:mfrac><mml:mi>l</mml:mi><mml:mi>k</mml:mi></mml:mfrac><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2023_5606_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par28">Note that each equation takes the floor function if <italic>k</italic> or <italic>m</italic> is not an integer. Equation (<xref rid="Equ1" ref-type="disp-formula">1</xref>) will be used most often as the user is more likely to have a query peptide of a given length and would like to specify the mismatch allowance.</p>
        <p id="Par29">After <italic>k</italic> is determined, given the number of mismatches and length, we split the query peptide into the appropriate <italic>k</italic>-mers. The hash table lookups are performed within the preprocessed proteome in the same way as exact matching. Once a <italic>k</italic>-mer is found, the neighboring <italic>k</italic>-mers of the query peptide are compared to the neighboring <italic>k</italic>-mers within the preprocessed proteome. The Hamming distance of equal-length strings is the number of different letters at the same position (mismatches). We check these corresponding neighbors for their Hamming distance and combine the total number of mismatches for the query peptide. If there are less than or equal to the number of mismatches than the given allowance, it is a match (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). We then record these corresponding <italic>k</italic>-mers and combine them to determine the matched sequence.<fig id="Fig2"><label>Fig. 2</label><caption><p>Mismatch search protocol. Given the query peptide of length 9 and the specified number of mismatches equal to 2, we determine that <italic>k</italic> needs to be 3, using Eq. (<xref rid="Equ1" ref-type="disp-formula">1</xref>). The peptide can also be split evenly since 9 is divisible by 3, so the <italic>k</italic>-mers are non-overlapping. The 3-mers are searched through the preprocessed proteome using hash table lookups. DLH is found at index 1,414,500,458, and the neighboring indexes are checked for Hamming distance. The left neighbor has 0 mismatches, and the right neighbor has 2 mismatches compared with the preprocessed proteome locations. In this case, the total number of mismatches is 2, which is equal to our threshold value, which means a match is found here</p></caption><graphic xlink:href="12859_2023_5606_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
      <sec id="Sec11">
        <title>Best match searching</title>
        <p id="Par30">A valuable feature of peptide searching is finding the best match within a given proteome, defined as the match within a proteome with the lowest number of mismatches. Our solution for this problem is to perform the preprocessing step multiple times on a proteome for different <italic>k</italic> values. After this, we perform the exact match search once and mismatching search protocol multiple times using the different preprocessed data while increasing the mismatch threshold. If the query contains multiple peptides, those finding a match in earlier searches are removed from the next mismatching search until every query peptide has been matched.</p>
        <p id="Par31">We first preprocess the proteome using <italic>k</italic> equal to the length of the query peptide (<italic>l</italic>), searching for exact matches only. Then, we preprocess using <italic>k</italic> = <italic>l</italic>/2, rounding down if <italic>l</italic>/2 is not an integer. We then continue halving and preprocessing until we reach <italic>k</italic> = 2. A preprocessed proteome of <italic>k</italic> = 1 is the same as brute force searching, so we do not go further. After all preprocessing is complete, we search the proteome starting with the highest <italic>k</italic> and work down until a match is found (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Using Eq. (<xref rid="Equ2" ref-type="disp-formula">2</xref>), we determine the maximum number of mismatches for the <italic>k</italic> value utilized and use that as our threshold for each search.<fig id="Fig3"><label>Fig. 3</label><caption><p>Best match searching feature. The proteome is preprocessed multiple times, starting with 15 (length of the query peptide) and halving <italic>k</italic> until we reach 2. We preprocessed the proteome four times using 15-mers, 7-mers, 3-mers, and 2-mers. The mismatching protocol uses the calculated maximum number of mismatches for each search. This is done until a match is found; we found a match with six mismatches in this case. If we had found a match in an earlier search, the subsequent searches would not have been performed</p></caption><graphic xlink:href="12859_2023_5606_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Results</title>
    <sec id="Sec13">
      <title>Establishing benchmark</title>
      <p id="Par32">To compare the performance of different tools for peptide searching, we established benchmark datasets and metrics to evaluate the performance of different tools and algorithms. We developed a framework that provides a set of query peptides, a reference proteome, a mismatch frequency threshold, and a file of expected output. A tool that accepts these inputs can then be plugged into this framework to test itself against the methods available. The framework tracks the time it takes to preprocess the proteome, preprocess the query (if a tool performs such a task), perform the search, and then evaluate the output’s recall. In the evaluation of method performance, recall and search time are taken into consideration. Recall is defined as the percentage of actual positive matches the method correctly identifies. All the methods report the query peptide, the matched sequence, the match’s protein ID, and the match’s index position within the protein. We used this framework to run the datasets with the abovementioned methods and generated the results below.</p>
      <p id="Par33">Since building a framework to test these many methods was necessary, we have attempted to make it easier for users to test other possible methods with our codebase. The framework we created to establish these benchmarks can allow an individual to write a Python wrapper around their tool, which can be written in any language, and “plug” it into our benchmarking code. The wrapper must accept standardized inputs and give standardized outputs established by this benchmark. Instructions for testing a new tool can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch/tree/master/benchmarking">https://github.com/IEDB/PEPMatch/tree/master/benchmarking</ext-link>.</p>
    </sec>
    <sec id="Sec14">
      <title>Benchmark results</title>
      <sec id="Sec15">
        <title>Exact matching: MHC class I eluted ligands dataset</title>
        <p id="Par34">We compared the methods as explained above by the total time for the task, which is composed of the time it took to preprocess the proteome, preprocess the query, and search the peptides (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). First, we tested the performance of all methods in finding exact matches in the human proteome for a dataset containing 2000 9-mers (Table <xref rid="Tab1" ref-type="table">1</xref>). Proteome preprocessing was relevant for five methods: PEPMatch, NmerMatch, BLAST, DIAMOND, and MMseqs2. PEPMatch and NmerMatch used a significant fraction of the total time preprocessing the proteome (39.6 s and 53.7 s, respectively). BLAST, DIAMOND, and MMseqs2 preprocessed the proteome much quicker, taking between 0.25 and 2.65 s. The other exact matching methods do not perform any preprocessing step. Only one of the methods, NmerMatch, performed preprocessing on the query peptides, which took only 0.006 s. Search time varied from 0.08 s (PEPMatch) to 113 min (Z algorithm). Six out of the nine methods found every match with 100% recall. BLAST found 98.3% of all true matches, while DIAMOND and MMseqs2 found &lt; 2% of the true matches. None of the methods matched the 1000 shuffled peptides anywhere in the human proteome. Overall, PEPMatch was the second slowest method for proteome preprocessing. However, it was several orders of magnitude faster in search time than the other methods. Total time was the shortest for MMseqs2, DIAMOND, and BLAST, followed by NmerMatch, PEPMatch, and the remaining string-searching algorithms.<fig id="Fig4"><label>Fig. 4</label><caption><p>Search times and for the benchmarks. The methods tested for each benchmark with their time to complete their search (blue bars) and the recall as a percentage of matches found (red dots). The search times (in seconds) are shown on the left y-axis, with their respective accuracies on the right y-axis. The search time for the MHC ligands benchmark is on a logarithmic scale due to the major differences between the methods. PEPMatch is many orders of magnitude faster for the exact matching benchmark (MHC ligands) and can achieve 100% recall in finding matches for all the benchmarks. It is only outperformed in the coronavirus epitope benchmark by NmerMatch when factoring for recall</p></caption><graphic xlink:href="12859_2023_5606_Fig4_HTML" id="MO4"/></fig><table-wrap id="Tab1"><label>Table 1</label><caption><p>Results from the MHC class I dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">39.6</td><td align="left">N/A</td><td align="left">0.08</td><td align="left">39.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">53.7</td><td align="left">0.006</td><td align="left">12.3</td><td align="left">66.0</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">1.27</td><td align="left">N/A</td><td align="left">11.3</td><td align="left">12.6</td><td align="left">98.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.25</td><td align="left">N/A</td><td align="left">5.01</td><td align="left">5.26</td><td align="left">1.5</td></tr><tr><td align="left">MMseqs2</td><td align="left">2.65</td><td align="left">N/A</td><td align="left">0.50</td><td align="left">3.15</td><td align="left">0.0</td></tr><tr><td align="left">Horspool</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">1,310</td><td align="left">1,310</td><td align="left">100</td></tr><tr><td align="left">Boyer-Moore</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">5,424</td><td align="left">5,424</td><td align="left">100</td></tr><tr><td align="left">KMP</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">3,807</td><td align="left">3,807</td><td align="left">100</td></tr><tr><td align="left">Z</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">6,782</td><td align="left">6,782</td><td align="left">100</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec16">
        <title>Mismatching: SARS-CoV-2 and neoepitope datasets</title>
        <p id="Par35">Next, we tested the performance of the methods that calculate mismatching (this excludes the string searching algorithms: Horspool, Boyer-Moore, KMP, and Z). We aimed to find all matches in the entire betacoronavirus genus for a SARS-CoV-2 dataset containing 628 peptides of varying lengths (8–15) up to and including 2 mismatches (Table <xref rid="Tab2" ref-type="table">2</xref>). Proteome preprocessing time varied from 0.15 s (DIAMOND) to 214 s (NmerMatch). This step increased significantly for NmerMatch because it performs this step for each length of the query peptides. Query preprocessing is only done by NmerMatch, and this took 0.003 s. Search time varied from 0.77 s (MMSeqs2) to 115.9 s (BLAST). Recall was 100% for PEPMatch and NmerMatch but was considerably lower for the other methods. BLAST found 73.3% of the matches, whereas DIAMOND and MMSeqs2 only found 6.4% and 7.4%, respectively. The total time for the task was shortest for MMseqs2 and DIAMOND, followed by PEPMatch, BLAST, and then NmerMatch.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Results from the SARS-CoV-2 dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td align="left">34.1</td><td align="left">N/A</td><td char="." align="char">32.6</td><td char="." align="char">66.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td align="left">214</td><td align="left">0.003</td><td char="." align="char">21.3</td><td char="." align="char">235.9</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td align="left">0.51</td><td align="left">N/A</td><td char="." align="char">115.9</td><td char="." align="char">116.4</td><td align="left">73.3</td></tr><tr><td align="left">DIAMOND</td><td align="left">0.15</td><td align="left">N/A</td><td char="." align="char">3.45</td><td char="." align="char">3.60</td><td align="left">6.4</td></tr><tr><td align="left">MMseqs2</td><td align="left">1.83</td><td align="left">N/A</td><td char="." align="char">0.77</td><td char="." align="char">2.60</td><td align="left">7.4</td></tr></tbody></table></table-wrap></p>
        <p id="Par36">We also tested the methods on a neoepitope dataset composed of 620 15-mers (Table <xref rid="Tab3" ref-type="table">3</xref>). We wanted to find all matches in the human proteome with up to and including 3 mismatches. The time it took to preprocess the proteome varied from 0.24 s (DIAMOND) to 50.4 s (NmerMatch), and again, query preprocessing was only done by NmerMatch, which took 0.002 s. Search time was significantly faster for MMseqs2 and DIAMOND at 0.59 and 4.93 s, respectively, whereas BLAST took the longest at 119.2 s. PEPMatch took 18.4 s to search, and NmerMatch took 40.1 s. Recall was higher on this dataset for the alignment tools BLAST, DIAMOND, and MMseqs2 at 58.1%, 34.0%, and 24.6%, respectively. PEPMatch and NmerMatch were able to find all matches with 100% recall. Total time was longest for BLAST and shortest for MMseqs2.<table-wrap id="Tab3"><label>Table 3</label><caption><p>Results from the neoepitopes dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">13.3</td><td align="left">N/A</td><td char="." align="char">18.4</td><td char="." align="char">31.7</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">50.4</td><td align="left">0.002</td><td char="." align="char">40.1</td><td char="." align="char">90.5</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.28</td><td align="left">N/A</td><td char="." align="char">119.2</td><td char="." align="char">120.5</td><td align="left">58.1</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.24</td><td align="left">N/A</td><td char="." align="char">4.93</td><td char="." align="char">5.17</td><td align="left">34.0</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.28</td><td align="left">N/A</td><td char="." align="char">0.59</td><td char="." align="char">2.87</td><td align="left">24.6</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec17">
        <title>Best match: milk allergen dataset</title>
        <p id="Par37">Finally, we wanted to test the task of finding the best match within a proteome. Here, we ran the methods on a dataset of 677 15-mers from milk allergens to find the best match in the human proteome (Table <xref rid="Tab4" ref-type="table">4</xref>). Only PEPMatch and NmerMatch have best match features; however, we also searched using BLAST, DIAMOND, and MMseqs2 to observe how they would perform. Preprocessing the proteome varied from 0.25 s (DIAMOND) to 203.7 s (NmerMatch), and search time varied from 0.48 s (MMseqs2) to 19.5 min (NmerMatch). Again, PEPMatch and NmerMatch found all the best matches at 100% recall, whereas BLAST, DIAMOND, and MMseqs2 found ~ 75 to 85% of all matches. Total time was shortest for MMseqs2 and longest for NmerMatch.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Results from the milk peptides dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left">Proteome preprocessing time (s)</th><th align="left">Query preprocessing time (s)</th><th align="left">Searching time (s)</th><th align="left">Total time (s)</th><th align="left">Recall (%)</th></tr></thead><tbody><tr><td align="left">PEPMatch</td><td char="." align="char">45.5</td><td align="left">N/A</td><td align="left">600.3</td><td align="left">645.8</td><td align="left">100</td></tr><tr><td align="left">NmerMatch</td><td char="." align="char">203.7</td><td align="left">0.005</td><td align="left">1,168</td><td align="left">1,372</td><td align="left">100</td></tr><tr><td align="left">BLAST</td><td char="." align="char">1.30</td><td align="left">N/A</td><td align="left">105.3</td><td align="left">106.6</td><td align="left">84.2</td></tr><tr><td align="left">DIAMOND</td><td char="." align="char">0.25</td><td align="left">N/A</td><td align="left">5.24</td><td align="left">5.49</td><td align="left">75.3</td></tr><tr><td align="left">MMseqs2</td><td char="." align="char">2.25</td><td align="left">N/A</td><td align="left">0.48</td><td align="left">2.73</td><td align="left">75.6</td></tr></tbody></table></table-wrap></p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <p id="Par38">In this paper, we present a benchmark for finding short peptide sequences in large sets of proteins. Unbiased benchmarking is important when comparing any in silico methods since certain parameters can be tweaked to show an advantage when overall there may not be. This benchmark is intended to be unbiased by running all methods on the same machine, comparing their speed and recall without the concern of gaining an unfair advantage by parameter manipulation. We also present a new tool, PEPMatch, that performs well in these benchmark tasks.</p>
    <p id="Par39">Overall, we show that the tools utilizing hash table lookups (PEPMatch and NmerMatch) were able to perform speedy exact matching and mismatching searches with 100% recall. The common string-searching algorithms (Horspool, Boyer-Moore, KMP, and Z) used in many other string-searching applications are too slow for this task despite finding every match. The development of alignment tools over many decades, including BLAST, DIAMOND, and MMseqs2, was foundational for allowing search with residue substitutions, insertions, and deletions taken into account. These tools, while often faster for the task of finding matches with residue substitutions, their accuracies are lower when compared to deterministic algorithms such as PEPMatch for short sequences. This is likely because the alignment tools use k-mers for gapped and ungapped seeding and extending to find alignments of long sequences. Finding shorter sequences in large datasets is a different problem, and this is the conceptual advantage of PEPMatch. This is one possible explanation for the low recall of the alignment tools, as they are optimized for longer sequence alignments and are not easily amenable to account for the short peptide sequences. Since they also consider insertions and deletions when doing their alignments, and since we only tested for substitutions, they had more difficulty finding every match. This is supported by the fact that their accuracies were higher with the neoepitopes and milk allergen datasets, which were all 15-mers, as opposed to the SARS-CoV-2 dataset, which ranged from 8 to 15 residues. MMseqs2 and DIAMOND also had extremely low recall for the MHC class I dataset, all 9-mers. In addition, given that the benchmark code and method implementation is hosted on GitHub, it is easy to rerun and change parameters for potentially better results.</p>
    <p id="Par40">Preprocessing a proteome before searching dramatically increases the search time speed. If multiple runs are expected to be done subsequently with similar datasets, the preprocessing step only needs to be performed once, and the preprocessed data can be stored. This dramatically reduces the total time. For example, in the MHC class I dataset, PEPMatch searches all 2000 9-mers in 0.08 s, which is only 0.2% of the total time for the task. BLAST performs the fastest in total time for this dataset and has a high recall (98.3%), though its searching time was over 100 times slower than PEPMatch. It is also worth noting that we set up the benchmark to check for the matched sequence, protein ID, and index position of the match, which ensures that a false positive would be excluded, hence the use of the recall metric. Lastly, the alignment tools do not have a best match feature, whereas PEPMatch and NmerMatch do. For this reason, they can find every best match despite their search and total time being much longer.</p>
    <p id="Par41">Progress must still be made towards speedier search times as proteomics involves big data, and researchers may need to perform searches on enormous datasets. For example, one may want to search within the entire bacteria domain, which contains &gt; 164,000,000 proteins (queried on UniProt [<xref ref-type="bibr" rid="CR20">20</xref>]). Speed improvements while maintaining 100% match recall are likely possible. The utilization of GPU programming and parallelization may significantly improve performance. Since peptide searching is a prevalent task in research, pipelines to and from PEPMatch can be established with other tools to facilitate the research process. In fact, on the IEDB Next Gen Tools site (<ext-link ext-link-type="uri" xlink:href="https://nextgen-tools.iedb.org">https://nextgen-tools.iedb.org</ext-link>), PEPMatch is already piped to the IEDB peptide clustering and the MHC Class I prediction tools. Another potential extension for the tool might be ranking matches based on an amino acid substitution score. Certain amino acid substitutions are more frequent than others, which could be considered in the final output. It is also worth noting that peptides will often map to multiple proteins, especially when accounting for residue substitutions, which is important in immunology. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows an example output of the PEPMatch tool from the Next-Generation IEDB Tools website, which features a peptide that maps to multiple proteins.<fig id="Fig5"><label>Fig. 5</label><caption><p>Example PEPMatch output from Next-Generation IEDB tools site. Using the peptide from the implementation description, searching up to 2 mismatches, this peptide maps to multiple proteins. The output includes the original sequence, the matched sequence, the UniProt protein ID, the protein name, the gene symbol, the number of mismatches, and the residue positions where those mismatches occur. The user has the option to also include the species or organism name for the proteome, the taxon ID for that organism, the start and end index positions within the protein that the peptide is found in, and the protein existence level, which is a value curated by UniProt providing the level of evidence which the protein exists</p></caption><graphic xlink:href="12859_2023_5606_Fig5_HTML" id="MO5"/></fig></p>
  </sec>
  <sec id="Sec19">
    <title>Conclusion</title>
    <p id="Par42">Our study introduces PEPMatch, a specialized tool for speedy and accurate short peptide sequence matching. Built on a k-mer mapping algorithm that preprocesses proteomes, the tool dramatically outpaces existing methods (such as BLAST) in speed without compromising recall. The study also presents an unbiased benchmarking framework that serves as a standard for evaluating future tools and methods for this task. The applications mentioned are only a few areas within immunology where such a tool could be utilized. This type of small sequence searching is vital for researchers working with T-cell epitopes, as described in the introduction. Ultimately, we believe PEPMatch, along with this benchmark, will help progress immunological research by providing highly accurate and speedy peptide searching.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec20">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2023_5606_MOESM1_ESM.csv">
            <caption>
              <p><bold>Additional file 1:</bold> 1000 MHC ligand peptides and 1000 shuffled peptides, all 9-mers, for the exact matching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2023_5606_MOESM2_ESM.csv">
            <caption>
              <p><bold>Additional file 2:</bold> 628 SARS-CoV-2 peptides of varying lengths for the 1st mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2023_5606_MOESM3_ESM.csv">
            <caption>
              <p><bold>Additional file 3:</bold> 620 neoepitopes, all 15-mers, for the 2nd mismatching benchmark.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2023_5606_MOESM4_ESM.csv">
            <caption>
              <p><bold>Additional file 4:</bold> 677 milk allergen peptides, all 15-mers, for the best match benchmark, annotated with their reactivity (True/False) from donor screening.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>MHC </term>
        <def>
          <p id="Par4">Major histocompatibility complex</p>
        </def>
      </def-item>
      <def-item>
        <term>IEDB</term>
        <def>
          <p id="Par5">Immune epitope database</p>
        </def>
      </def-item>
      <def-item>
        <term>SARS-CoV-2</term>
        <def>
          <p id="Par6">Severe acute respiratory syndrome coronavirus 2</p>
        </def>
      </def-item>
      <def-item>
        <term>KMP</term>
        <def>
          <p id="Par7">Knuth–Morris–Pratt</p>
        </def>
      </def-item>
      <def-item>
        <term>HLA</term>
        <def>
          <p id="Par8">Human leukocyte antigen</p>
        </def>
      </def-item>
      <def-item>
        <term>CEDAR</term>
        <def>
          <p id="Par9">Cancer epitope database and analysis resource</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors wish to acknowledge the work of the Immune Epitope Database and Analysis Resource (IEDB) and the Cancer Epitope Database and Analysis Resource (CEDAR) teams.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>DM, JAG, and BP developed the underlying algorithm for the tool. DM developed and maintains the Python package. DM and JG created the benchmarking framework to test other tools. RV, LW, ZK, and AS provided the datasets and insights to the applications for the benchmarking. WDC, AS, MN, JAG, and BP provided insights into the analysis and applications of the tool. DM wrote the main manuscript text, generated the benchmarking data in the tables, and created the figures for the manuscript. All authors read, edited, and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by 75N93019C00001 and U24CA248138 from the National Institutes of Health.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Project name: PEPMatch. Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>. Operating system(s): Platform independent. Programming language: Python. Other requirements: Python 3.7 + , pandas, NumPy, and Biopython. License: Non-Profit Open Software License 3.0 (NPOSL-3.0). Any restrictions to use by non-academics: None. All data and code for this work are available on the PEPMatch GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/IEDB/PEPMatch">https://github.com/IEDB/PEPMatch</ext-link>)</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethical approval and consent to participate</title>
      <p id="Par43">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par44">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par45">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>MUSCLE: a multiple sequence alignment method with reduced time and space complexity</article-title>
        <source>BMC Bioinform</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>113</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-5-113</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using diamond</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
        <?supplied-pmid 25402007?>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
        <?supplied-pmid 29035372?>
        <pub-id pub-id-type="pmid">29035372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trolle</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>McMurtrey</surname>
            <given-names>CP</given-names>
          </name>
          <name>
            <surname>Sidney</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bardet</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Osborn</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Kaever</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hildebrand</surname>
            <given-names>WH</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The length distribution of class I restricted T cell epitopes is determined by both peptide supply and MHC allele specific binding preference</article-title>
        <source>J Immunol Baltim Md</source>
        <year>1950</year>
        <volume>2016</volume>
        <issue>196</issue>
        <fpage>1480</fpage>
        <lpage>1487</lpage>
        <pub-id pub-id-type="doi">10.4049/jimmunol.1501721</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chang</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Ghosh</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kirschner</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Linderman</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <article-title>Peptide length-based prediction of peptide-MHC class II binding</article-title>
        <source>Bioinforma Oxf Engl</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>2761</fpage>
        <lpage>2767</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mahajan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Overton</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Dhanda</surname>
            <given-names>SK</given-names>
          </name>
          <name>
            <surname>Martini</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cantrell</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Wheeler</surname>
            <given-names>DK</given-names>
          </name>
          <name>
            <surname>Sette</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The immune epitope database (IEDB): 2018 update</article-title>
        <source>Nucl Acids Res</source>
        <year>2019</year>
        <volume>47</volume>
        <fpage>D339</fpage>
        <lpage>D343</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1006</pub-id>
        <?supplied-pmid 30357391?>
        <pub-id pub-id-type="pmid">30357391</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grifoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Weiskopf</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ramirez</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Mateus</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dan</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Moderbacher</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Rawlings</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Premkumar</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jadi</surname>
            <given-names>RS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Targets of T cell responses to SARS-CoV-2 coronavirus in humans with COVID-19 disease and unexposed individuals</article-title>
        <source>Cell</source>
        <year>2020</year>
        <volume>181</volume>
        <fpage>1489</fpage>
        <lpage>1501.e15</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2020.05.015</pub-id>
        <?supplied-pmid 32473127?>
        <pub-id pub-id-type="pmid">32473127</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Savage</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Johns</surname>
            <given-names>CB</given-names>
          </name>
        </person-group>
        <article-title>Food allergy: epidemiology and natural history</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2015</year>
        <volume>35</volume>
        <fpage>45</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2014.09.004</pub-id>
        <?supplied-pmid 25459576?>
        <pub-id pub-id-type="pmid">25459576</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cianferoni</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Muraro</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Food-Induced Anaphylaxis</article-title>
        <source>Immunol Allergy Clin North Am</source>
        <year>2012</year>
        <volume>32</volume>
        <fpage>165</fpage>
        <lpage>195</lpage>
        <pub-id pub-id-type="doi">10.1016/j.iac.2011.10.002</pub-id>
        <?supplied-pmid 22244239?>
        <pub-id pub-id-type="pmid">22244239</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lewis</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Sutherland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Soldevila</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Identification of cow milk epitopes to characterize and quantify disease-specific T cells in allergic children</article-title>
        <source>J Allergy Clin Immunol</source>
        <year>2023</year>
        <volume>152</volume>
        <issue>5</issue>
        <fpage>1196</fpage>
        <lpage>1209</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jaci.2023.07.020</pub-id>
        <?supplied-pmid 37604312?>
        <pub-id pub-id-type="pmid">37604312</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sarkizova</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Klaeger</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Le</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>LW</given-names>
          </name>
          <name>
            <surname>Oliveira</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Keshishian</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Hartigan</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Braun</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Ligon</surname>
            <given-names>KL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A large peptidome dataset improves HLA class I epitope prediction across most of the human population</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <fpage>199</fpage>
        <lpage>209</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0322-9</pub-id>
        <?supplied-pmid 31844290?>
        <pub-id pub-id-type="pmid">31844290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boyer</surname>
            <given-names>RS</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>JS</given-names>
          </name>
        </person-group>
        <article-title>A fast string searching algorithm</article-title>
        <source>Commun ACM</source>
        <year>1977</year>
        <volume>20</volume>
        <fpage>762</fpage>
        <lpage>772</lpage>
        <pub-id pub-id-type="doi">10.1145/359842.359859</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Horspool</surname>
            <given-names>RN</given-names>
          </name>
        </person-group>
        <article-title>Practical fast searching in strings</article-title>
        <source>Softw Pract Exp</source>
        <year>1980</year>
        <volume>10</volume>
        <fpage>501</fpage>
        <lpage>506</lpage>
        <pub-id pub-id-type="doi">10.1002/spe.4380100608</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knuth</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Morris</surname>
            <given-names>JH</given-names>
            <suffix>Jr</suffix>
          </name>
          <name>
            <surname>Pratt</surname>
            <given-names>VR</given-names>
          </name>
        </person-group>
        <article-title>Fast pattern matching in strings</article-title>
        <source>SIAM J Comput</source>
        <year>1977</year>
        <volume>6</volume>
        <fpage>323</fpage>
        <lpage>350</lpage>
        <pub-id pub-id-type="doi">10.1137/0206024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gusfield</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <source>Algorithms on strings, trees, and sequences: computer science and computational biology</source>
        <year>1997</year>
        <edition>1</edition>
        <publisher-loc>Cambridge England</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O'Leary</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Brister</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation</article-title>
        <source>Nucl Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D733</fpage>
        <lpage>D745</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id>
        <?supplied-pmid 26553804?>
        <pub-id pub-id-type="pmid">26553804</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koşaloğlu-Yalçın</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Blazeska</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Vita</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The cancer epitope database and analysis resource (CEDAR)</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D845</fpage>
        <lpage>D852</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac902</pub-id>
        <?supplied-pmid 36250634?>
        <pub-id pub-id-type="pmid">36250634</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Trybulec, W.A. Pigeon Hole Principle. J Formaliz Math. 1990; 2: 0.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>The UniProt Consortium</collab>
        </person-group>
        <article-title>UniProt: the Universal Protein Knowledgebase in 2023</article-title>
        <source>Nucl Acids Res</source>
        <year>2023</year>
        <volume>51</volume>
        <issue>D1</issue>
        <fpage>D523</fpage>
        <lpage>D531</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkac1052</pub-id>
        <pub-id pub-id-type="pmid">36408920</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
