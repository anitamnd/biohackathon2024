<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD with OASIS Tables v1.0 20120330//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing-oasis-article1.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName jats-oasis2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Biomed Opt</journal-id>
    <journal-id journal-id-type="iso-abbrev">J Biomed Opt</journal-id>
    <journal-id journal-id-type="coden">JBOPFO</journal-id>
    <journal-id journal-id-type="publisher-id">JBO</journal-id>
    <journal-title-group>
      <journal-title>Journal of Biomedical Optics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1083-3668</issn>
    <issn pub-type="epub">1560-2281</issn>
    <publisher>
      <publisher-name>Society of Photo-Optical Instrumentation Engineers</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8728956</article-id>
    <article-id pub-id-type="pmid">34989198</article-id>
    <article-id pub-id-type="doi">10.1117/1.JBO.27.8.083008</article-id>
    <article-id pub-id-type="publisher-manuscript">JBO-210206SSR</article-id>
    <article-id pub-id-type="publisher-id">210206SSR</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Special Section Celebrating 30 Years of Open Source Monte Carlo Codes in Biomedical Optics</subject>
      </subj-group>
      <subj-group subj-group-type="SPIE-art-type">
        <subject>Paper</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>MCX Cloud—a modern, scalable, high-performance and in-browser Monte Carlo simulation platform with cloud computing</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0805-935X</contrib-id>
        <name>
          <surname>Fang</surname>
          <given-names>Qianqian</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">a</xref>
        <xref rid="aff2" ref-type="aff">b</xref>
        <xref rid="cor1" ref-type="corresp">*</xref>
        <xref rid="b1" ref-type="bio"/>
        <email>q.fang@neu.edu</email>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1983-4625</contrib-id>
        <name>
          <surname>Yan</surname>
          <given-names>Shijie</given-names>
        </name>
        <xref rid="aff2" ref-type="aff">b</xref>
        <xref rid="b2" ref-type="bio"/>
        <email>yan.shiji@northeastern.edu</email>
      </contrib>
      <aff id="aff1"><label>a</label><institution>Northeastern University</institution>, Department of Bioengineering, Boston, Massachusetts, <country>United States</country></aff>
      <aff id="aff2"><label>b</label><institution>Northeastern University</institution>, Department of Electrical and Computer Engineering, Boston, Massachusetts, <country>United States</country></aff>
    </contrib-group>
    <author-notes>
      <corresp id="cor1"><label>*</label>Address all correspondence to Qianqian Fang, <email>q.fang@neu.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>5</day>
      <month>1</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="ppub">
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>5</day>
      <month>1</month>
      <year>2022</year>
    </pub-date>
    <!--PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>.-->
    <volume>27</volume>
    <issue>8</issue>
    <elocation-id>083008</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>6</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>17</day>
        <month>11</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2022 The Authors</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>The Authors</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>Published by SPIE under a Creative Commons Attribution 4.0 International License. Distribution or reproduction of this work in whole or in part requires full attribution of the original publication, including its DOI.</license-p>
      </license>
    </permissions>
    <self-uri xlink:title="pdf" xlink:href="JBO_27_8_083008.pdf"/>
    <abstract>
      <title>Abstract.</title>
      <sec>
        <title>Significance</title>
        <p>Despite the ample progress made toward faster and more accurate Monte Carlo (MC) simulation tools over the past decade, the limited usability and accessibility of these advanced modeling tools remain key barriers to widespread use among the broad user community.</p>
      </sec>
      <sec>
        <title>Aim</title>
        <p>An open-source, high-performance, web-based MC simulator that builds upon modern cloud computing architectures is highly desirable to deliver state-of-the-art MC simulations and hardware acceleration to general users without the need for special hardware installation and optimization.</p>
      </sec>
      <sec>
        <title>Approach</title>
        <p>We have developed a configuration-free, in-browser 3D MC simulation platform—Monte Carlo eXtreme (MCX) Cloud—built upon an array of robust and modern technologies, including a Docker Swarm-based cloud-computing backend and a web-based graphical user interface (GUI) that supports in-browser 3D visualization, asynchronous data communication, and automatic data validation via JavaScript Object Notation (JSON) schemas.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>The front-end of the MCX Cloud platform offers an intuitive simulation design, fast 3D data rendering, and convenient simulation sharing. The Docker Swarm container orchestration backend is highly scalable and can support high-demand GPU MC simulations using MCX over a dynamically expandable virtual cluster.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>MCX Cloud makes fast, scalable, and feature-rich MC simulations readily available to all biophotonics researchers without overhead. It is fully open-source and can be freely accessed at <ext-link xlink:href="http://mcx.space/cloud" ext-link-type="uri">http://mcx.space/cloud</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group>
      <title>Keywords:</title>
      <kwd>Monte Carlo method</kwd>
      <kwd>light transport</kwd>
      <kwd>cloud computing</kwd>
      <kwd>optical imaging</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="sp1">
        <funding-source>National Institutes of Health</funding-source>
        <award-id>R01-GM114365</award-id>
        <award-id>R01-EB026998</award-id>
        <award-id>U24-NS124027</award-id>
      </award-group>
    </funding-group>
    <counts>
      <fig-count count="6"/>
      <table-count count="0"/>
      <ref-count count="40"/>
      <page-count count="14"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>running-head</meta-name>
        <meta-value>Fang and Yan: MCX Cloud—a modern, scalable, high-performance and in-browser Monte Carlo simulation…</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <label>1</label>
    <title>Introduction</title>
    <p>Since the initial release of the first open-source Monte Carlo (MC) light transport simulator—MCML<xref rid="r1" ref-type="bibr"><sup>1</sup></xref>—nearly 30 years ago, MC-based photon simulations have been playing important roles amongst the biophotonics research community to facilitate the design and optimization of novel imaging instrumentation and image reconstruction, as well as providing gold-standard solutions for validating novel algorithms and data analysis pipelines. Notably, in the last decade, a list of free and open-source MC simulators have been published and further improved upon by their respective authors. The proliferation of open-source MC tools provides the community with abundant options to meet diverse needs arising in biophotonics research.</p>
    <p>Many of the emerging MC simulators have placed strong emphases toward addressing two of the top limitations facing traditional MC algorithms. First, the adoption of massively parallel computing and graphics processing units (GPUs) have greatly improved the computational efficiency of conventional MC simulations, shortening the simulation run-time by tens to hundreds fold on a modern GPU.<xref rid="r2" ref-type="bibr"><sup>2</sup></xref><named-content content-type="online"><xref rid="r3" ref-type="bibr"/><xref rid="r4" ref-type="bibr"/><xref rid="r5" ref-type="bibr"/><xref rid="r6" ref-type="bibr"/></named-content><named-content content-type="print"><sup>–</sup></named-content><xref rid="r7" ref-type="bibr"><sup>7</sup></xref> In parallel, a list of new MC algorithms were proposed to handle more complex and accurate tissue anatomical boundaries.<xref rid="r8" ref-type="bibr"><sup>8</sup></xref><named-content content-type="online"><xref rid="r9" ref-type="bibr"/><xref rid="r10" ref-type="bibr"/></named-content><named-content content-type="print"><sup>–</sup></named-content><xref rid="r11" ref-type="bibr"><sup>11</sup></xref> Among these algorithms, mesh-based Monte Carlo (MMC) offers the capability to accurately model a curved tissue boundary with tetrahedral meshes while performing ray-tracing computation significantly more efficiently than surface-based MC techniques.<xref rid="r8" ref-type="bibr"><sup>8</sup></xref> More recently, hybrid approaches that combine shape representations offer further computational efficiency and accuracy.<xref rid="r12" ref-type="bibr"><sup>12</sup></xref><named-content content-type="online"><xref rid="r13" ref-type="bibr"/><xref rid="r14" ref-type="bibr"/></named-content><named-content content-type="print"><sup>–</sup></named-content><xref rid="r15" ref-type="bibr"><sup>15</sup></xref> These hybrid approaches include (1) dual-grid MMC (DMMC)<xref rid="r12" ref-type="bibr"><sup>12</sup></xref> that combines a coarse tetrahedral mesh with a dense voxelated output volume, (2) split-voxel MC (SVMC)<xref rid="r14" ref-type="bibr"><sup>14</sup></xref> that combines curved surface meshes within a compact voxel data structure, and (3) implicit MMC (iMMC)<xref rid="r15" ref-type="bibr"><sup>15</sup></xref> that combines a skeletal tetrahedral mesh with implicitly defined shapes such as tubes, spheres and thin membranes. These enhancements in modeling geometry have resulted in significantly improved accuracy, which can be directly translated to further speed enhancement while achieving the same output accuracy as conventional approaches.</p>
    <p>Compared to many published traditional research codes that were developed as single-release static software, an increasing number of new MC software packages have started tackling the challenges of usability and long-term maintainability. Many of these projects openly embrace state-of-the-art software engineering best practices and offer the software as a vibrantly growing platform via continuous enhancements, timely bug fixes, and active user support via flexible feedback channels. Ease-of-use has also become the focus of a number of recently published MC toolkits, where MATLAB-based dynamic library (MEX) interfaces and graphical user interfaces (GUIs) have been reported.<xref rid="r16" ref-type="bibr"><sup>16</sup></xref><sup>,</sup><xref rid="r17" ref-type="bibr"><sup>17</sup></xref></p>
    <p>With the exciting progress in developing open-source MC simulators with increasing speed, functionality, accuracy, and user-friendliness, we would like to tackle here the next major challenge in high-performance, general-purpose MC photon simulation software, namely scalability and availability. A number of previous publications, including several from our group, have addressed the challenges in creating scalable simulations that can utilize more than one GPU or run simulations across CPUs/GPUs of multiple vendors. In particular, a number of previous papers reported OpenCL-based MC implementations<xref rid="r5" ref-type="bibr"><sup>5</sup></xref><sup>,</sup><xref rid="r18" ref-type="bibr"><sup>18</sup></xref> that are readily scalable across heterogeneous computing environments including multi-vendor hardware. Several NVIDIA CUDA-based GPU MC simulators also offer support to multiple GPU architecture generations and multi-GPU simulations. Regarding availability, most MC software tools are disseminated via the conventional download-installation-execution approach. Software dissemination via Docker-based container images has also become increasingly popular and is found in several notable open-source MC tools, including MCX,<xref rid="r3" ref-type="bibr"><sup>3</sup></xref> MMC<xref rid="r10" ref-type="bibr"><sup>10</sup></xref> and FullMonte.<xref rid="r19" ref-type="bibr"><sup>19</sup></xref> Nevertheless, a majority of these software dissemination methods require users to have a pre-configured GPU to be able to execute their desired simulations. Purchasing and configuring high-performance GPUs may still present a barrier for beginner and less-experienced computer users. Online-based MC modeling tools that do not require local GPU installation are extremely limited. In 2011, a proprietary web-based MC simulator, MCOnline,<xref rid="r20" ref-type="bibr"><sup>20</sup></xref> was reported by Doronin and Meglinski using Microsoft Silverlight and ASP.NET technologies as the front-end and a GPU MC simulator on the server-side. Although this tool is still being actively maintained, the proprietary nature of the tool and the limited scalability of the underlying technologies necessitate a re-investigation using up-to-date cloud-computing technologies. In 2020, another proprietary web-based MC simulation platform, Multi-Scattering, was published by Jönsson and Berrocal,<xref rid="r21" ref-type="bibr"><sup>21</sup></xref> featuring a modern and user-friendly web GUI design, versatile scattering phase function support, and a proprietary voxel-based MC simulator in the backend. While this tool offers intuitive interfaces to attract a broad userbase, the maximum simulation domain is limited to <inline-formula><mml:math id="math1" display="inline" overflow="scroll"><mml:mrow><mml:mn>20</mml:mn><mml:mo>×</mml:mo><mml:mn>20</mml:mn><mml:mo>×</mml:mo><mml:mn>20</mml:mn><mml:mtext>  voxels</mml:mtext></mml:mrow></mml:math></inline-formula>,<xref rid="r21" ref-type="bibr"><sup>21</sup></xref> making it quite limited for solving practical problems.</p>
    <p>In this work, we report a modern, scalable, high-performance, and fully open-source in-browser MC simulation platform—MCX Cloud—to bring state-of-the-art GPU hardware and our extensively optimized and feature-rich MCX simulator software to the rapidly growing biophotonics research community. Our MCX Cloud platform embraces an array of modern and standardized cloud-computing techniques. In the backend, it utilizes Docker<xref rid="r22" ref-type="bibr"><sup>22</sup></xref> and Docker Swarm-based container orchestration technology to create a highly scalable, dynamically expandable, fault-tolerant, and distributed GPU virtual cluster with built-in “ingress load-balancing” capabilities. In the front-end, we have developed a modern web GUI based upon a list of open-source web technologies, such as HTML5 markup language,<xref rid="r23" ref-type="bibr"><sup>23</sup></xref> cascading style sheets (CSS), JavaScript, and JQuery<xref rid="r24" ref-type="bibr"><sup>24</sup></xref> for GUI development, and WebGL<xref rid="r25" ref-type="bibr"><sup>25</sup></xref> for in-browser 3D data rendering.</p>
    <p>A key advancement that enables us to develop such a compact, scalable and portable software/hardware platform is the adoption of JavaScript Object Notation (JSON<xref rid="r26" ref-type="bibr"><sup>26</sup></xref>) and JData—an open-specification for scientific data annotation using JSON<xref rid="r27" ref-type="bibr"><sup>27</sup></xref>—as the input and output data formats for MCX. JSON is a lightweight, human-readable, and ubiquitously supported data format that is capable of storing complex hierarchical data. It has rapidly replaced XML (extensible markup language) and become one of the most widely used data exchange formats among web applications. Since 2012, we have migrated MCX’s input file format to JSON and subsequently completed the migration of all output data files to JSON in 2020. In this work, we use JSON Schema<xref rid="r28" ref-type="bibr"><sup>28</sup></xref>—an open-standard for defining JSON-based data files—and JSON Editor—a lightweight JavaScript library for editing arbitrary JSON files inside a browser—to create a compact and easy-to-maintain in-browser MCX input editor and data visualization platform that is intuitive to use for users without any programming experience. Both the front-end and backend designs in MCX Cloud are highly flexible and require only minimal changes to support additional input/output fields and hardware extensions. In contrast with previously published online MC simulators, both the front-end (user interface) and the backend (server-side scripts) of MCX Cloud are open-source so that a user may easily configure a private cloud-computing virtual cluster to run MCX-based simulations from a browser.</p>
    <p>In the following sections, we will first discuss the key technology components that have enabled this scalable cloud-computing based MC simulator, including a brief discussion on the latest MCX light transport simulator, backend design, front-end design, and input/output data formats. We then show a number of example simulations and a benchmark demonstrating scalability for high-performance, distributed GPU-based simulations using MCX Cloud. Finally, we discuss our plans for further improvement of this platform.</p>
  </sec>
  <sec id="sec2">
    <label>2</label>
    <title>Methods</title>
    <p>A diagram showing the overall design of the MCX Cloud simulation platform is shown in <xref rid="f1" ref-type="fig">Fig. 1</xref>. This highly portable and scalable platform can be divided into a front-end (web-based user interface) and a backend (a distributed GPU cluster managed by Docker Swarm services), communicating asynchronously via lightweight and versatile JSON/JData data packets. The key technologies used in this platform are highlighted in gray-shaded boxes, and open-source software/libraries used are highlighted in orange colored text. The MCX Docker image (bottom-left)—a lightweight package that contains the MCX simulator software along with all dependencies—is publicly hosted on Dockerhub. In the following subsections, we will discuss each key component and the overall simulation workflow.</p>
    <fig position="float" id="f1">
      <label>Fig. 1</label>
      <caption>
        <p>Diagram showing the overall design of the MCX Cloud simulation platform. Gray-shaded boxes indicate key technologies utilized in this platform; boxes shaded in light-blue indicate key functionalities.</p>
      </caption>
      <graphic xlink:href="JBO-027-083008-g001" position="float"/>
    </fig>
    <sec id="sec2.1">
      <label>2.1</label>
      <title>MCX Photon Transport Simulator and Containerization</title>
      <p>At the heart of this cloud computing platform is a Docker container image of our latest MCX photon simulator. A container is simply a lightweight package that allows users to reliably reproduce the virtual environment, including dependencies and libraries, of a given application and conveniently execute it consistently across various platforms. A containerized application automatically downloads all dependencies necessary to run the program, greatly simplifying the installation and configuration process of new software. In this work, our MCX container image is built using the “base image” cuda-9.0 provided by NVIDIA and is publicly accessible via Dockerhub—one of the largest repositories of container images.</p>
      <p>The current release of the MCX photon simulator contains numerous algorithmic improvements over the original version published in 2009.<xref rid="r3" ref-type="bibr"><sup>3</sup></xref> Briefly, MCX is a GPU-accelerated, parallel MC photon transport simulator that supports 3D heterogeneous media defined in a voxelated space. We want to particularly highlight several key improvements over the original MCX algorithm described in Fang et al.<xref rid="r3" ref-type="bibr"><sup>3</sup></xref> First, we have implemented precise ray-tracing in MCX releases since 2016. Photon trajectories are precisely broken into segments bounded by voxel boundaries; in comparison, the original MCX accumulates photon energy at a fixed 1-mm spacing along the trajectory. This update has led to significant accuracy improvements in simulation results. Secondly, all MCX releases since 2013 have supported over a dozen complex source types, including pencil beam, isotropic source, planar and disk sources, Gaussian beam, Fourier patterns (for spatial-frequency domain imaging, or SFDI), line and slit sources, user-defined 2D and 3D pattern sources, etc. For all area-sources, a focal-length parameter is also added to enable convergent and divergent beams. Thirdly, four new boundary conditions (BCs) are supported on the bounding box of the voxelated domain, including a total absorption BC, a Fresnel reflection BC, a total reflection/mirror BC, and a cyclic BC (photons exiting from a bounding box face re-enters from the opposite face to simulate infinite medium). Fourthly, MCX outputs a variety of detected photon data outputs, including partial-pathlengths, partial-scattering-event-count, exit position and direction, momentum transfer, initial photon weight etc. Moreover, MCX not only supports label-based segmented volume, but also continuously varying medium. Furthermore, MCX has incorporated state-of-the-art MC algorithm advances, including photon replay,<xref rid="r29" ref-type="bibr"><sup>29</sup></xref> photon sharing,<xref rid="r12" ref-type="bibr"><sup>12</sup></xref> and our latest hybrid algorithm split-voxel MC (SVMC).<xref rid="r14" ref-type="bibr"><sup>14</sup></xref> Lastly, we have extensively optimized the MCX GPU computing implementation and dramatically improved its simulation speed across multiple generations of NVIDIA GPU architectures. We want to highlight that MCX is an actively maintained platform funded by the National Institutes of Health (NIH). New features are constantly being added; recently added key features include user-defined scattering phase functions and modeling of polarized light in 3D heterogeneous media.</p>
    </sec>
    <sec id="sec2.2">
      <label>2.2</label>
      <title>Docker Swarm Based Cloud Computing Backend</title>
      <p>Docker Swarm is a lightweight container “orchestration” framework that is built-in to the Docker toolkit. Docker Swarm allows users to create a virtual cluster made of a single or multiple Docker service “nodes”, dispatch executions across such distributed computing environments, and perform job distribution and job queue management. In our current MCX Cloud configuration, we have included several rack-mount servers as Docker service nodes and also enumerated each GPU hosted on each server as a named resource. As a result, any simulation dispatched by the Docker service to the Swarm can be automatically assigned to one of the vacant GPU cards among all participating nodes, determined automatically by the Docker Swarm manager node. Utilizing the Docker Swarm framework to manage the computing hardware backend offers a number of notable benefits. First, a Docker Swarm can be dynamically expanded and shrunk without interrupting current jobs. Therefore, system administrators can grow the number of GPUs to accommodate the job loads or shutdown some of the nodes for maintenance without interrupting the simulation queue. Secondly, the latest Docker Swarm release offers fine-grained GPU-based resource allocation and job distribution capability. With a simple configuration, one can let Docker Swarm assign each simulation to a single GPU or to a single host, utilizing all GPUs on the host in parallel. The Docker Swarm platform also provides high fault-tolerance: when a hardware failure is detected on a host or a GPU, incomplete jobs can be automatically relaunched by the Docker service manager.</p>
      <p>We would like to emphasize that the Docker platform is a vastly rich ecosystem for cloud computing; numerous free tools are available for container creation, sharing, management, and orchestration. In this initial release of MCX Cloud, we chose Docker Swarm as the orchestration framework largely because of its simplicity, but our platform can be further adapted to support other orchestration platforms such as Kubernetes or Apache Mesos.</p>
    </sec>
    <sec id="sec2.3">
      <label>2.3</label>
      <title>JSON/JData Based Data Exchange Format and JSON Schema</title>
      <p>As we mentioned previously, JSON is an internationally standardized (also known as ISO21778:2017) data exchange format, and is at the core of most today’s web-based applications. Compared to XML, JSON is extremely lightweight and fast to parse, yet it is capable of storing complex hierarchical data. Numerous free and lightweight JSON parsers are available today for nearly all existing programming languages, permitting plug-and-play implementation of JSON data support in most applications.</p>
      <p>Despite these aforementioned advantages, adoption of JSON in storing scientific data is largely limited to handling lightweight metadata. This is because JSON does not have explicit rules on how to serialize common scientific data structures such as N-dimensional (N-D) arrays, complex and sparse arrays, tables, graphs, trees, etc. Additionally, JSON does not directly support storage of strong-typed binary data. To bridge this gap, our group published an open-standard—the JData Specification<xref rid="r27" ref-type="bibr"><sup>27</sup></xref>—to systematically serialize common data structures used in scientific research, enabling storage of binary strongly-typed data using 100% JSON-compatible annotation tags. In addition, the JData specification also provides a binary data interface utilizing the Universal Binary JSON (UBJSON<xref rid="r30" ref-type="bibr"><sup>30</sup></xref>) format to offer additional space efficiency and processing speed. In <xref rid="f2" ref-type="fig">Fig. 2(a)</xref>, we show an input data file snippet that MCX uses to define an MCX simulation. In the “Shapes” section, an example defining a 3D volume using the JData annotations<xref rid="r27" ref-type="bibr"><sup>27</sup></xref> is shown.</p>
      <fig position="float" id="f2">
        <label>Fig. 2</label>
        <caption>
          <p>Samples of (a) JSON-based MCX input file, and the corresponding (b) JSON schema snippet.</p>
        </caption>
        <graphic xlink:href="JBO-027-083008-g002" position="float"/>
      </fig>
      <p>In addition to using JSON to encode input data, we have also completed the migration of MCX volumetric output data as of 2020, converting from the NIfTI data format<xref rid="r31" ref-type="bibr"><sup>31</sup></xref> to JSON/JData-based JNIfTI<xref rid="r32" ref-type="bibr"><sup>32</sup></xref> data files. Additional output data associated with detected photon data, including partial pathlengths and exit position, are also stored in a JSON/JData<xref rid="r27" ref-type="bibr"><sup>27</sup></xref> file that is readily readable by any existing JSON parser. The migration from an opaque and rigid binary conventional format to the human-readable and easily extensible JSON/JData file sets the foundation for migrating MCX from a local application to the cloud and web environments.</p>
      <p>A key benefit of adopting JSON based data formats is to enable machine-automatable data validation. This can be readily achieved using the JSON Schema framework. JSON Schema is a systematic approach to defining data types, formats, and properties for each data entry in a JSON data structure, and is currently a proposed Internet standard by the Internet Engineering Task Force (IETF).<xref rid="r28" ref-type="bibr"><sup>28</sup></xref> It has received widespread adoption for automating and creating JSON based data files. In this work, we have rigorously defined the JSON-based MCX input file format using JSON Schema syntax (which is fully JSON-compatible). A snippet of MCX input file JSON schema is shown in <xref rid="f2" ref-type="fig">Fig. 2(b)</xref>.</p>
    </sec>
    <sec id="sec2.4">
      <label>2.4</label>
      <title>Web-Based JSON Editor and Graphical User Interface Design</title>
      <p>The front-end, i.e., the web GUI, of MCX Cloud consists of two major components—an in-browser JSON data editor to create JSON-formatted input data for MCX simulations and a 3D data rendering module based on WebGL (see below section). The web-based MCX JSON input editor was derived by combining an open-source general-purpose JSON editor developed by Jeremy Dorn et al. with our JSON-schema of MCX input JSON data format. The JSON editor module is a lightweight (73 kB in size) JavaScript library that enables the creation and editing of arbitrary JSON-formatted data using a user-defined schema. It also simultaneously supports a number of popular web GUI frameworks and icon libraries to improve customizability.</p>
      <p>A minimalistic design style is used to provide users with a clean and streamlined environment to create, preview, execute, render, and easily share MCX simulations. All front-end functionalities are achieved using a combination of HTML5 and JavaScript programming. Notably, the use of the JQuery library makes the front-end compact (less than 1,500 lines of JavaScript code) and easy-to-maintain.</p>
    </sec>
    <sec id="sec2.5">
      <label>2.5</label>
      <title>In-Browser Rendering of 3D Shapes and Volumetric Data Using WebGL</title>
      <p>In the front-end of MCX Cloud, we have developed fully featured 3D shape and volumetric data rendering and download functionalities. In comparison, the web GUI of MCOnline only provides rendering and data downloading for a particular <inline-formula><mml:math id="math2" display="inline" overflow="scroll"><mml:mrow><mml:mi>x</mml:mi><mml:mo>/</mml:mo><mml:mi>y</mml:mi><mml:mo>/</mml:mo><mml:mi>z</mml:mi></mml:mrow></mml:math></inline-formula> slice of the volume. The in-browser 3D data rendering feature is enabled by the WebGL technology,<xref rid="r25" ref-type="bibr"><sup>25</sup></xref> conveniently provided via utilizing the open-source Three.js JavaScript rendering library<xref rid="r33" ref-type="bibr"><sup>33</sup></xref> application programming interfaces (APIs).</p>
      <p>Our MCX JSON input file accepts two methods for defining a heterogeneous simulation domain: (1) a constructive solid geometry (CSG) approach using a list of shape primitive constructs such as spheres, boxes, cylinders, <inline-formula><mml:math id="math3" display="inline" overflow="scroll"><mml:mrow><mml:mi>x</mml:mi><mml:mo>/</mml:mo><mml:mi>y</mml:mi><mml:mo>/</mml:mo><mml:mi>z</mml:mi></mml:mrow></mml:math></inline-formula> layered structures etc, and (2) a JData-formatted<xref rid="r27" ref-type="bibr"><sup>27</sup></xref> 3D array that defines the tissue-types or per-voxel absorption/scattering values of a voxelated space. As a result, in our web GUI, we support rendering of both shape-based domain configurations as well as 3D array based rendering. An OpenGL 3D texture is created if a 3D array-based volume is provided; the voxelated input domain is rendered in either maximum-intensity-projection (MIP) or isosurfaces. In either case, convenient controls of 3D rotation and zooming are supported. Because Three.js is highly optimized on modern browsers such as Chrome and Firefox, rendering a typically sized volume only slightly increase the CPU/GPU loads of the browsers on most of our tested computers.</p>
    </sec>
    <sec id="sec2.6">
      <label>2.6</label>
      <title>Asynchronous Data Communication and Optimization</title>
      <p>The client (i.e., web GUI) and the server (i.e., a web service running on the manager node of the Docker Swarm) communicate via asynchronous data communication, known as AJAX (asynchronous JavaScript And XML). Despite the name, JSON, instead of XML, has been predominantly used in today’s web applications data exchange. User inputs are encoded as lightweight JSONP (JSON with Padding) data packets and sent to the server; the server sends back the response, also encoded as JSON packets, and informs the JavaScript on the web GUI to update the web page content dynamically without needing to reload the entire web page.</p>
      <p>To facilitate the processing of user submissions and management of Docker Swarm jobs, we developed an ultra-compact common gateway interface (CGI) script, named “mcxserver,” written in the Perl programming language to handle user-submitted job requests. These submitted simulation data are stored in a database using Sqlite<xref rid="r34" ref-type="bibr"><sup>34</sup></xref> for fast query and update. The mcxserver server script also handles status queries from the client once a job is submitted, and returns the simulation output data once the simulation is completed. In addition, another Perl script named “mcxcloudd” (MCX Cloud Daemon, see <xref rid="f1" ref-type="fig">Fig. 1</xref>) is repeatedly executed at a fixed time interval (currently set to run every 20 s) and checks (1) if the Docker Swarm has a vacant GPU device, and (2) if there exist unprocessed user-submitted job requests in the Sqlite database. If both are confirmed, a docker service command is then submitted to launch the user-submitted job to the Docker Swarm. The web server database and simulation input/output files are shared among all Docker Swarm nodes via the network file-system (NFS), as depicted in <xref rid="f1" ref-type="fig">Fig. 1</xref>.</p>
      <p>To optimize server disk usage, we define a job expiration time window (currently set to 1 h) and configure another recurrent process (known as a cron-job) to automatically clean the expired job folders to save space. If a simulation is frequently executed by users, such as the default simulation or built-in examples, we keep the simulation output folder in a cache folder to avoid repeated computation.</p>
    </sec>
    <sec id="sec2.7">
      <label>2.7</label>
      <title>Reusable and Community-Driven Simulation Repository</title>
      <p>Guided by the FAIR principle<xref rid="r35" ref-type="bibr"><sup>35</sup></xref> (i.e., making data findable, accessible, interoperable and reusable), our MCX Cloud platform provides convenient mechanisms to allow a user to share their simulations with the community or reuse simulations contributed by other users. In MCX Cloud’s “share” tab, a user can fill out a simple form to give permission for others to use his/her designed MCX simulation JSON data. A dedicated server database is used to store these shared simulation settings. When a user opens the “browse” tab in the web GUI, the GUI retrieves a list of community-contributed simulations, including the JSON input data as well as a domain preview thumbnail. If a user clicks on any one of the previously defined simulations, the JSON data corresponding to the selected simulation will be loaded and ready for modification by the user. Over time, we anticipate that this feature will eventually build a rich simulation repository, not only helping new users quickly create new and more advanced simulations, but also establishing a set of standardized benchmarks that facilitate cross-validation between diverse light simulation tools.</p>
    </sec>
  </sec>
  <sec id="sec3">
    <label>3</label>
    <title>Results</title>
    <p>Following the methodologies discussed above, we have created a preview version of the MCX Cloud simulation platform. In this initial configuration of the MCX Cloud backend, we have currently included <inline-formula><mml:math id="math4" display="inline" overflow="scroll"><mml:mrow><mml:mn>6</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> Docker service nodes using six Linux servers running Ubuntu 16.04 and 20.04 and Docker version 20.10.3. To balance the server loads, one of the servers is configured as the “manager” node and is dedicated to running the web service (Apache 2.4.18), the CGI script (mcxserver) and the mcxcloudd cron-job to process the user-submitted job queue, as shown in <xref rid="f1" ref-type="fig">Fig. 1</xref>. The remaining servers host a total of <inline-formula><mml:math id="math5" display="inline" overflow="scroll"><mml:mrow><mml:mn>5</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> NVIDIA RTX 2080 SUPER (Turing) GPUs, <inline-formula><mml:math id="math6" display="inline" overflow="scroll"><mml:mrow><mml:mn>4</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> GTX 1080 (Pascal) GPUs, and <inline-formula><mml:math id="math7" display="inline" overflow="scroll"><mml:mrow><mml:mn>1</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> GTX 980Ti (Maxwell) GPU. This preview Docker Swarm backend is capable of simultaneously executing 10 parallel simulations. With only a few simple commands, we can effortlessly expand this Docker Swarm to include more nodes and GPUs without interrupting the service. Docker provides command-line tools to enable easy administration of the Docker Swarm and the jobs running on it. Graphical management tools are also freely available, including Portainer and Shipyard.</p>
    <p>To demonstrate the GUI design in MCX Cloud’s front-end, in <xref rid="f3" ref-type="fig">Fig. 3</xref>, we include four screenshots showing (a) the main menu screen, (b) the browse tab for loading built-in or community-contributed simulation library, (c) the “create” tab for MCX input JSON data in-browser editing, and (d) the “run” tab for job submission and management. The initial loading of the front-end web GUI only needs to download a total of 570 kB of resources, including nine open-source JavaScript libraries, two cascade style-sheets (CSS), three web-fonts, and a single HTML file. This small software footprint enables smooth access to this cloud service even for users with low-bandwidth networks. All subsequent data exchange with the server is achieved via AJAX with lightweight JSON data packets; no web page reloading is needed.</p>
    <fig position="float" id="f3">
      <label>Fig. 3</label>
      <caption>
        <p>Sample screenshots of MCX Cloud GUI in a web browser, including (a) the main menu; (b) the browse tab to download user-contributed simulations; (c) the create tab for editing JSON-based input data validated by built-in schema; and (d) the run tab to launch jobs to the cloud and monitor progress.</p>
      </caption>
      <graphic xlink:href="JBO-027-083008-g003" position="float"/>
    </fig>
    <p>To show the 3D domain rendering functions in the web GUI, in <xref rid="f4" ref-type="fig">Fig. 4</xref>, we provide two screenshots showing both the shape-based and 3D-volume-based in-browser rendering via WebGL and Three.js APIs. The first rendering in <xref rid="f4" ref-type="fig">Fig. 4(a)</xref> shows MCX’s built-in benchmark, “skinvessel”, which was derived from the benchmark used by mcxyz.<xref rid="r36" ref-type="bibr"><sup>36</sup></xref> The domain is described by JSON-based shape descriptors, consisting of 3 layers in the <inline-formula><mml:math id="math8" display="inline" overflow="scroll"><mml:mrow><mml:mi>z</mml:mi></mml:mrow></mml:math></inline-formula> axis, a cylindrical object, and a disk-shaped source. In this screenshot, our front-end calls Three.js APIs to parse the shape descriptors and render each domain component in a canvas object. To give an example for rendering 3D voxelated domain inputs, in <xref rid="f4" ref-type="fig">Fig. 4(b)</xref>, we show the web GUI rendering of the “digimouse” benchmark provided by MCX. The simulation domain is the segmented Digimouse atlas,<xref rid="r37" ref-type="bibr"><sup>37</sup></xref> described by a <inline-formula><mml:math id="math9" display="inline" overflow="scroll"><mml:mrow><mml:mn>190</mml:mn><mml:mo>×</mml:mo><mml:mn>496</mml:mn><mml:mo>×</mml:mo><mml:mn>104</mml:mn></mml:mrow></mml:math></inline-formula> unsigned-integer array with 21 tissue types. This 3D segmented digital atlas is encoded in the JData N-D array format along with Zlib data compression<xref rid="r38" ref-type="bibr"><sup>38</sup></xref> and Base64 encoding. The self-contained JSON input file is 188 kB in size. Using a WebGL rendering speed benchmark library, we have observed a speed of 180 to 300 frame-per-second (fps) for the digimouse on a range of desktop and laptop computers with dedicated NVIDIA GPUs; such speed drops to 20 to 60 fps when using this GUI on a laptop with Intel’s integrated GPUs.</p>
    <fig position="float" id="f4">
      <label>Fig. 4</label>
      <caption>
        <p>In-browser 3D rendering samples of complex simulation domains, showing (a) the skinvessel benchmark and (b) the digimouse benchmark, using WebGL.</p>
      </caption>
      <graphic xlink:href="JBO-027-083008-g004" position="float"/>
    </fig>
    <p>Our 3D in-browser rendering tool also automatically renders MCX-computed fluence maps, also encoded in the JSON/JNIfTI format, returned by the server after the computation is completed. In <xref rid="f5" ref-type="fig">Figs. 5(a)</xref> and <xref rid="f5" ref-type="fig">5(b)</xref>, we show the 3D views of the volumetric fluence rate (as MIP) obtained from the above two simulations. One can click on the “download” button at the bottom of the rendering tab to download the entire 3D output data file, encoded in the JSON/JNIfTI format, to the local disk for further analysis. Similarly, one can also click on the download button in the “JSON” tab to download the web GUI generated JSON input file to his/her disk to locally run MCX on the user’s own computer.</p>
    <fig position="float" id="f5">
      <label>Fig. 5</label>
      <caption>
        <p>Volumetric rendering of the computed fluence-rate output from (a) the skinvessel benchmark and (b) the digimouse benchmark.</p>
      </caption>
      <graphic xlink:href="JBO-027-083008-g005" position="float"/>
    </fig>
    <p>To demonstrate that one can use MCX Cloud to distribute a large simulation across multiple GPU devices installed in the Docker Swarm, we launch the digimouse benchmark simultaneously to 10 GPUs installed on the backend, each running <inline-formula><mml:math id="math10" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>9</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula> photons, and record the elapsed time shown in a chart in <xref rid="f6" ref-type="fig">Fig. 6</xref>. The overall simulation speed is <inline-formula><mml:math id="math11" display="inline" overflow="scroll"><mml:mrow><mml:mn>20</mml:mn><mml:mo>,</mml:mo><mml:mn>704</mml:mn><mml:mtext>  photon</mml:mtext><mml:mo>/</mml:mo><mml:mi>ms</mml:mi></mml:mrow></mml:math></inline-formula> if counting from the job submission time, or <inline-formula><mml:math id="math12" display="inline" overflow="scroll"><mml:mrow><mml:mn>21</mml:mn><mml:mo>,</mml:mo><mml:mn>834</mml:mn><mml:mtext> </mml:mtext><mml:mi>photon</mml:mi><mml:mo>/</mml:mo><mml:mi>ms</mml:mi></mml:mrow></mml:math></inline-formula> if counting from the start of the first job. This is about <inline-formula><mml:math id="math13" display="inline" overflow="scroll"><mml:mrow><mml:mn>3</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> of the average speed on all RTX 2080S nodes (<inline-formula><mml:math id="math14" display="inline" overflow="scroll"><mml:mrow><mml:mn>6775</mml:mn><mml:mtext>  photon</mml:mtext><mml:mo>/</mml:mo><mml:mi>ms</mml:mi></mml:mrow></mml:math></inline-formula>), and <inline-formula><mml:math id="math15" display="inline" overflow="scroll"><mml:mrow><mml:mn>9</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> of that on the GTX 1080 GPUs (<inline-formula><mml:math id="math16" display="inline" overflow="scroll"><mml:mrow><mml:mn>2374</mml:mn><mml:mtext>  photon</mml:mtext><mml:mo>/</mml:mo><mml:mi>ms</mml:mi></mml:mrow></mml:math></inline-formula>). We want to highlight that this sample simulation is designed to show the versatility of the platform without making any attempt to optimize to achieve maximum speed. The simulation speed can be easily improved by adjusting backend settings to increase the frequency of running the mcxcloudd server script and perform GPU-based load-balancing.</p>
    <fig position="float" id="f6">
      <label>Fig. 6</label>
      <caption>
        <p>Elapsed time analysis for running the digimouse benchmark with a total of <inline-formula><mml:math id="math17" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula> photons using <inline-formula><mml:math id="math18" display="inline" overflow="scroll"><mml:mrow><mml:mn>10</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> NVIDIA GPU devices via MCX Cloud. In this example, we used <inline-formula><mml:math id="math19" display="inline" overflow="scroll"><mml:mrow><mml:mn>5</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> RTX 2080SUPER, <inline-formula><mml:math id="math20" display="inline" overflow="scroll"><mml:mrow><mml:mn>4</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> GTX 1080 and <inline-formula><mml:math id="math21" display="inline" overflow="scroll"><mml:mrow><mml:mn>1</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> GTX 980Ti.</p>
      </caption>
      <graphic xlink:href="JBO-027-083008-g006" position="float"/>
    </fig>
    <sec id="sec3.1">
      <label>3.1</label>
      <title>Discussion and Conclusion</title>
      <p>Over the past decade, MC-based photon transport simulation has gained ample progress in terms of speed and accuracy in modeling increasingly complex anatomical structures. A list of free and open-source MC simulators with various levels of functionalities have been developed, published, and actively maintained by a number of research groups. While some of these open-source toolkits have successfully attracted a sizable user community, most of these tools were disseminated using a conventional download-and-install approach. In addition, many high-performance MC simulators require purchasing and installing high-end graphics cards on users’ own computers to maximize efficiency. For less-experienced users, properly configuring and using these specialized simulation tools can be key barriers.</p>
      <p>This work specifically addresses challenges regarding the usability and availability of MC simulators as mentioned above. Particularly, we described an in-browser GPU-accelerated MC simulator and cloud-based service that can be launched anywhere a browser is available, including mobile devices such as a smartphone or a tablet. This system combines our decade-long, continual development in MCX light transport simulation software with state-of-the-art cloud-computing platforms, and offers a robust, scalable and forward-looking framework for a standardized, high-demand, high-throughput and community-focused MC modeling platform. Compared to the previously published online MC simulator, this new platform embraces the latest technologies in microservices, cloud-computing (containerization and orchestration), and web-based GUI design (AJAX, JSON, JSON Schema, jQuery, WebGL, and Three.js), and demonstrates high flexibility and scalability that were not previously available.</p>
      <p>We can not emphasize enough how adopting a standardized and web-friendly input/output data format in JSON/JData greatly simplified or even directly enabled the implementation of this lightweight yet highly versatile web-based platform. To be more specific, utilizing JSON to encode MCX’s input/output data allowed us to seamlessly integrate them with JavaScript and a web environment. Also, defining MCX’s input data using JSON schema allows the JSON Editor library to automatically create the JSON editing interface in our front-end. This in-browser JSON editor is not only intuitive to use, but also generates JSON data that automatically satisfies the specified schema. Similarly, adopting JSON and JData data annotations also allow MCX to store complex output data records, including volumetric fluence rate, partial-pathlengths, and various lightweight metadata in a unified, easy-to-read JSON format that can be readily transmitted, parsed and rendered inside a browser.</p>
      <p>Although we use MCX at the backend to perform the underlying MC computation, our cloud computing system can be readily adapted to use any other MC simulators, as long as the alternative simulator also supports JSON/JData as the input/output data format and provides the corresponding JSON schema of the desired input JSON data structure (can be entirely different from those of MCX). For the same reason, our current web GUI can be directly used in combination with MCX-CL<xref rid="r5" ref-type="bibr"><sup>5</sup></xref> as the simulator in the backend if AMD or Intel GPUs are configured in Docker Swarm. This is because MCX-CL and MCX share nearly identical input/output formats. We are currently working on creating similar JSON/JData support for our MMC simulator,<xref rid="r10" ref-type="bibr"><sup>10</sup></xref> and anticipate that running MMC simulations on this cloud-computing platform will be supported in the near future.</p>
      <p>From the benchmark results shown in <xref rid="f6" ref-type="fig">Fig. 6</xref>, it is clear that this cloud computing platform can function not only as a parallel processor for simultaneously submitted jobs from multiple remote users, but also as a distributed high-performance computing platform to allow the running of a single simulation using all GPUs available. With more nodes and GPU devices added to the Docker Swarm, one should anticipate a nearly linear increase in the simulation speed when running large simulation loads.</p>
      <p>Moving forward, we aim to complete the migration of our MMC simulator<xref rid="r10" ref-type="bibr"><sup>10</sup></xref> to the JSON input/output data format, and make our web GUI readily usable for executing mesh-based MC simulations online. We will also focus on curating a comprehensive and reusable community-contributed MC simulation library and creating standardized benchmarks to facilitate easy cross-validation between existing and emerging MC and diffusion solvers. In addition, we will monitor the utility of our GPU cloud and expand the capacity when necessary. We are also interested in upgrading the current Turing-/Pascal-based NVIDIA GPUs to the newer and more powerful generations as they become available to help users run their simulations in less time. We will release detailed tutorials and documentations on our MCX web site to guide users to configure and optimize their “private MCX cloud” when such guidance is necessary. In addition, containerization of MC simulators, such as MCX, is only the beginning of building more sophisticated and automated biophotonic data analysis pipelines. With more optical data analysis tools disseminated in a container environment, and more tools accepting the use of a standardized format, such as JSON/JData, as the input/output file format, the developers in our community will be able to create more sophisticated and automated data analysis processes using Docker compose, a standard tool to invoke multiple containerized applications.</p>
      <p>The next step of our project also includes further solidification and dissemination of the JData specification<xref rid="r39" ref-type="bibr"><sup>39</sup></xref> for portable scientific data exchange, which has recently been funded by the NIH, including the exchange of volumetric data via the JNIfTI format,<xref rid="r32" ref-type="bibr"><sup>32</sup></xref> unstructured mesh data via the JMesh format<xref rid="r40" ref-type="bibr"><sup>40</sup></xref> etc. All of these JData-based data formats are fully JSON compatible and can be readily parsed by all existing JSON parsers and libraries. We strongly believe that providing such a universal data exchange platform permits all optical data analysis tools, and other scientific software in general, to efficiently share, exchange, integrate and automate hierarchical data records that are essential to scientific research. The convergence to a JSON-based data exchange platform also enables the research community to benefit from the latest NoSQL hierarchical database technology for large-volume and scalable scientific data storage and integration. Using MCX Cloud as a showcase, we sincerely invite all open-source MC simulator developers to consider supporting JSON-/JData-based data formats in their software to take advantage of these major benefits.</p>
      <p>In summary, we report a highly scalable, easy-to-use, and cloud-computing-based in-browser MC simulation platform—MCX Cloud. This platform was built upon an array of modern open-source technologies, including the use of Docker containers and container orchestration to run GPU-based MC simulations across a robust, elastic, scalable, and distributed virtual GPU cluster. It also leverages the latest web-based technologies, such as JSON, JSON schema, AJAX, and WebGL, to create an intuitive, easily expandable, and responsive web GUI. At the core of this cloud computing platform is our significantly improved MCX photon transport simulator, packaging numerous enhancements in GPU optimization and algorithmic features that we have developed and integrated over the past decade. We want to particularly highlight that this platform is fully open-source—we not only provide the source codes for the MCX simulator, but also those for the web GUI and server-side scripts—so that anyone can build a private cloud for internal use or modify these scripts to accommodate other similar solvers. In the meantime, we have built an initial GPU cloud containing <inline-formula><mml:math id="math22" display="inline" overflow="scroll"><mml:mrow><mml:mn>10</mml:mn><mml:mo form="postfix">×</mml:mo></mml:mrow></mml:math></inline-formula> NVIDIA GPUs to help users execute MCX simulations without needing to purchase or maintain GPU hardware. Our online MCX simulation service is freely available at <ext-link xlink:href="http://mcx.space/cloud" ext-link-type="uri" specific-use="print">http://mcx.space/cloud</ext-link>.</p>
    </sec>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>This research is supported by the National Institutes of Health (NIH grants R01-GM114365, R01-EB026998, and U24-NS124027). We would like to thank Leiming Yu and Yuhui Bao for their inputs and help in creating MCX Docker images.</p>
  </ack>
  <bio id="b1">
    <p><bold>Qianqian Fang</bold> is currently an associate professor in the Bioengineering Department at Northeastern University, Boston. He received his PhD from Thayer School of Engineering, Dartmouth College, in 2005. He then joined Massachusetts General Hospital and became an instructor of radiology in 2009 and assistant professor of radiology in 2012, before he joined Northeastern University in 2015. His research interests include translational medical imaging devices, multi-modal imaging, image reconstruction algorithms, and high performance computing tools to facilitate the development of next-generation imaging platforms.</p>
  </bio>
  <bio id="b2">
    <p><bold>Shijie Yan</bold> is a doctoral candidate at Northeastern University. He received his BE degree from Southeast University, China, in 2013 and MS from Northeastern University in 2017. His research interests include Monte Carlo photon transport simulation algorithms, parallel computing, GPU programming and optimization.</p>
  </bio>
  <notes notes-type="conflict-of-interest">
    <title>Disclosures</title>
    <p>No conflicts of interest, financial or otherwise, are declared by the authors.</p>
  </notes>
  <ref-list>
    <title>References</title>
    <ref id="r1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>L. V.</given-names></name><name><surname>Jacques</surname><given-names>S. L.</given-names></name><name><surname>Zheng</surname><given-names>L.</given-names></name></person-group>, “<article-title>MCML-Monte Carlo modeling of light transport in multi-layered tissues</article-title>,” <source>Comput. Methods Prog. Biomed.</source>
<volume>47</volume>(<issue>2</issue>), <fpage>131</fpage>–<lpage>146</lpage> (<year>1995</year>).<pub-id pub-id-type="doi">10.1016/0169-2607(95)01640-F</pub-id></mixed-citation>
    </ref>
    <ref id="r2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alerstam</surname><given-names>E.</given-names></name><name><surname>Svensson</surname><given-names>T.</given-names></name><name><surname>Andersson-Engels</surname><given-names>S.</given-names></name></person-group>, “<article-title>Parallel computing with graphics processing units for high-speed Monte Carlo simulation of photon migration</article-title>,” <source>J. Biomed. Opt.</source>
<volume>13</volume>(<issue>6</issue>), <fpage>060504</fpage> (<year>2008</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.3041496</pub-id><pub-id pub-id-type="pmid">19123645</pub-id></mixed-citation>
    </ref>
    <ref id="r3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name><name><surname>Boas</surname><given-names>D. A.</given-names></name></person-group>, “<article-title>Monte Carlo simulation of photon migration in 3D turbid media accelerated by graphics processing units</article-title>,” <source>Opt. Express</source>
<volume>17</volume>(<issue>22</issue>), <fpage>20178</fpage>–<lpage>20190</lpage> (<year>2009</year>).<pub-id pub-id-type="coden">OPEXFF</pub-id><issn>1094-4087</issn><pub-id pub-id-type="doi">10.1364/OE.17.020178</pub-id><pub-id pub-id-type="pmid">19997242</pub-id></mixed-citation>
    </ref>
    <ref id="r4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ren</surname><given-names>N.</given-names></name><etal>et al.</etal></person-group>, “<article-title>GPU-based Monte Carlo simulation for light propagation in complex heterogeneous tissues</article-title>,” <source>Opt. Express</source>
<volume>18</volume>(<issue>7</issue>), <fpage>6811</fpage>–<lpage>6823</lpage> (<year>2010</year>).<pub-id pub-id-type="coden">OPEXFF</pub-id><issn>1094-4087</issn><pub-id pub-id-type="doi">10.1364/OE.18.006811</pub-id><pub-id pub-id-type="pmid">20389700</pub-id></mixed-citation>
    </ref>
    <ref id="r5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yu</surname><given-names>L.</given-names></name><etal>et al.</etal></person-group>, “<article-title>Scalable and massively parallel Monte Carlo photon transport simulations for heterogeneous computing platforms</article-title>,” <source>J. Biomed. Opt.</source>
<volume>23</volume>(<issue>1</issue>), <fpage>010504</fpage> (<year>2018</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.23.1.010504</pub-id></mixed-citation>
    </ref>
    <ref id="r6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zoller</surname><given-names>C. J.</given-names></name><etal>et al.</etal></person-group>, “<article-title>Parallelized Monte Carlo software to efficiently simulate the light propagation in arbitrarily shaped objects and aligned scattering media</article-title>,” <source>J. Biomed. Opt.</source>
<volume>23</volume>(<issue>6</issue>), <fpage>1</fpage>–<lpage>12</lpage> (<year>2018</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.23.6.065004</pub-id></mixed-citation>
    </ref>
    <ref id="r7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Young-Schultz</surname><given-names>T.</given-names></name><etal>et al.</etal></person-group>, “<article-title>FullMonteCUDA: a fast, flexible, and accurate GPU-accelerated Monte Carlo simulator for light propagation in turbid media</article-title>,” <source>Biomed. Opt. Express</source>
<volume>10</volume>, <fpage>4711</fpage>–<lpage>4726</lpage> (<year>2019</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.10.004711</pub-id><pub-id pub-id-type="pmid">31565520</pub-id></mixed-citation>
    </ref>
    <ref id="r8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Margallo-Balbás</surname><given-names>E.</given-names></name><name><surname>French</surname><given-names>P. J.</given-names></name></person-group>, “<article-title>Shape based Monte Carlo code for light transport in complex heterogeneous tissues</article-title>,” <source>Opt. Express</source>
<volume>15</volume>(<issue>21</issue>), <fpage>14086</fpage>–<lpage>14098</lpage> (<year>2007</year>).<pub-id pub-id-type="coden">OPEXFF</pub-id><issn>1094-4087</issn><pub-id pub-id-type="doi">10.1364/OE.15.014086</pub-id><pub-id pub-id-type="pmid">19550681</pub-id></mixed-citation>
    </ref>
    <ref id="r9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shen</surname><given-names>H.</given-names></name><name><surname>Wang</surname><given-names>G.</given-names></name></person-group>, “<article-title>A tetrahedron-based inhomogeneous Monte Carlo optical simulator</article-title>,” <source>Phys. Med. Biol.</source>
<volume>55</volume>(<issue>4</issue>), <fpage>947</fpage>–<lpage>962</lpage> (<year>2010</year>).<pub-id pub-id-type="coden">PHMBA7</pub-id><issn>0031-9155</issn><pub-id pub-id-type="doi">10.1088/0031-9155/55/4/003</pub-id><pub-id pub-id-type="pmid">20090182</pub-id></mixed-citation>
    </ref>
    <ref id="r10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>Mesh-based Monte Carlo method using fast ray-tracing in Plücker coordinates</article-title>,” <source>Biomed. Opt. Express</source>
<volume>1</volume>(<issue>1</issue>), <fpage>165</fpage>–<lpage>175</lpage> (<year>2010</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.1.000165</pub-id><pub-id pub-id-type="pmid">21170299</pub-id></mixed-citation>
    </ref>
    <ref id="r11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Periyasamy</surname><given-names>V.</given-names></name><name><surname>Pramanik</surname><given-names>M.</given-names></name></person-group>, “<article-title>Monte Carlo simulation of light transport in turbid medium with embedded object-spherical, cylindrical, ellipsoidal, or cuboidal objects embedded within multilayered tissues</article-title>,” <source>J. Biomed. Opt.</source>
<volume>19</volume>(<issue>4</issue>), <fpage>045003</fpage> (<year>2014</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.19.4.045003</pub-id><pub-id pub-id-type="pmid">24727908</pub-id></mixed-citation>
    </ref>
    <ref id="r12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yan</surname><given-names>S.</given-names></name><name><surname>Tran</surname><given-names>A. P.</given-names></name><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>Dual-grid mesh-based Monte Carlo algorithm for efficient photon transport simulations in complex three-dimensional media</article-title>,” <source>J. Biomed. Opt.</source>
<volume>24</volume>(<issue>2</issue>), <fpage>020503</fpage> (<year>2019</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.24.2.020503</pub-id></mixed-citation>
    </ref>
    <ref id="r13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tran</surname><given-names>A. P.</given-names></name><name><surname>Jacques</surname><given-names>S. L.</given-names></name></person-group>, “<article-title>Modeling voxel-based Monte Carlo light transport with curved and oblique boundary surfaces</article-title>,” <source>J. Biomed. Opt.</source>
<volume>25</volume>(<issue>2</issue>), <fpage>025001</fpage> (<year>2020</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.25.2.025001</pub-id></mixed-citation>
    </ref>
    <ref id="r14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yan</surname><given-names>S.</given-names></name><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>Hybrid mesh and voxel based Monte Carlo algorithm for accurate and efficient photon transport modeling in complex bio-tissues</article-title>,” <source>Biomed. Opt. Express</source>
<volume>11</volume>, <fpage>6262</fpage>–<lpage>6270</lpage> (<year>2020</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.409468</pub-id><pub-id pub-id-type="pmid">33282488</pub-id></mixed-citation>
    </ref>
    <ref id="r15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yuan</surname><given-names>Y.</given-names></name><name><surname>Yan</surname><given-names>S.</given-names></name><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>Light transport modeling in highly complex tissues using the implicit mesh-based Monte Carlo algorithm</article-title>,” <source>Biomed. Opt. Express</source>
<volume>12</volume>, <fpage>147</fpage>–<lpage>161</lpage> (<year>2021</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.411898</pub-id><pub-id pub-id-type="pmid">33520382</pub-id></mixed-citation>
    </ref>
    <ref id="r16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marti</surname><given-names>D.</given-names></name><etal>et al.</etal></person-group>, “<article-title>MCmatlab: an open-source, user-friendly, MATLAB-integrated three-dimensional Monte Carlo light transport solver with heat diffusion and tissue damage</article-title>,” <source>J. Biomed. Opt.</source>
<volume>23</volume>(<issue>12</issue>), <fpage>121622</fpage> (<year>2018</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.23.12.121622</pub-id></mixed-citation>
    </ref>
    <ref id="r17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Leino</surname><given-names>A. A.</given-names></name><name><surname>Pulkkinen</surname><given-names>A.</given-names></name><name><surname>Tarvainen</surname><given-names>T.</given-names></name></person-group>, “<article-title>ValoMC: a Monte Carlo software and MATLAB toolbox for simulating light transport in biological tissue</article-title>,” <source>OSA Continuum</source>
<volume>2</volume>, <fpage>957</fpage>–<lpage>972</lpage> (<year>2019</year>).<pub-id pub-id-type="doi">10.1364/OSAC.2.000957</pub-id></mixed-citation>
    </ref>
    <ref id="r18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name><name><surname>Yan</surname><given-names>S.</given-names></name></person-group>, “<article-title>Graphics processing unit-accelerated mesh-based Monte Carlo photon transport simulations</article-title>,” <source>J. Biomed. Opt.</source>
<volume>24</volume>(<issue>11</issue>), <fpage>115002</fpage> (<year>2019</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.24.11.115002</pub-id></mixed-citation>
    </ref>
    <ref id="r19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cassidy</surname><given-names>J.</given-names></name><etal>et al.</etal></person-group>, “<article-title>High-performance, robustly verified Monte Carlo simulation with FullMonte</article-title>,” <source>J. Biomed. Opt.</source>
<volume>23</volume>(<issue>8</issue>), <fpage>085001</fpage> (<year>2018</year>).<pub-id pub-id-type="coden">JBOPFO</pub-id><issn>1083-3668</issn><pub-id pub-id-type="doi">10.1117/1.JBO.23.8.085001</pub-id></mixed-citation>
    </ref>
    <ref id="r20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Doronin</surname><given-names>A.</given-names></name><name><surname>Meglinski</surname><given-names>I.</given-names></name></person-group>, “<article-title>Online object oriented Monte Carlo computational tool for the needs of biomedical optics</article-title>,” <source>Biomed. Opt. Express</source>
<volume>2</volume>(<issue>9</issue>), <fpage>2461</fpage>–<lpage>2469</lpage> (<year>2011</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.2.002461</pub-id><pub-id pub-id-type="pmid">21991540</pub-id></mixed-citation>
    </ref>
    <ref id="r21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jönsson</surname><given-names>J.</given-names></name><name><surname>Berrocal</surname><given-names>E.</given-names></name></person-group>, “<article-title>Multi-Scattering software: part I: online accelerated Monte Carlo simulation of light transport through scattering media</article-title>,” <source>Opt. Express</source>
<volume>28</volume>, <fpage>37612</fpage>–<lpage>37638</lpage> (<year>2020</year>).<pub-id pub-id-type="coden">OPEXFF</pub-id><issn>1094-4087</issn><pub-id pub-id-type="doi">10.1364/OE.404005</pub-id><pub-id pub-id-type="pmid">33379594</pub-id></mixed-citation>
    </ref>
    <ref id="r22">
      <label>22.</label>
      <mixed-citation publication-type="webpage"><collab>Docker Project Contributors</collab>, “<article-title>Docker software, version 20.10.3</article-title>,” <ext-link xlink:href="https://docker.com/" ext-link-type="uri">https://docker.com/</ext-link>.</mixed-citation>
    </ref>
    <ref id="r23">
      <label>23.</label>
      <mixed-citation publication-type="webpage"><collab>W3C Working Group</collab>, “<article-title>HTML 5 – a vocabulary and associated APIs for HTML and XHTML</article-title>,” <year>2008</year>, <ext-link xlink:href="https://www.w3.org/TR/2008/WD-html5-20080122/" ext-link-type="uri">https://www.w3.org/TR/2008/WD-html5-20080122/</ext-link>.</mixed-citation>
    </ref>
    <ref id="r24">
      <label>24.</label>
      <mixed-citation publication-type="webpage"><collab>JQuery Project Contributors</collab>, “<article-title>JQuery JavaScript Library, version 3.3.1</article-title>,” <ext-link xlink:href="https://jquery.com/" ext-link-type="uri">https://jquery.com/</ext-link>.</mixed-citation>
    </ref>
    <ref id="r25">
      <label>25.</label>
      <mixed-citation publication-type="webpage"><collab>Khronos WebGL Working Group</collab>, “<article-title>WebGL 2.0 specification</article-title>,” <year>2017</year>, <ext-link xlink:href="https://www.khronos.org/registry/webgl/specs/latest/2.0/" ext-link-type="uri">https://www.khronos.org/registry/webgl/specs/latest/2.0/</ext-link>.</mixed-citation>
    </ref>
    <ref id="r26">
      <label>26.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Bray</surname><given-names>T.</given-names></name></person-group>, “<article-title>The JavaScript object notation (JSON) data interchange format</article-title>,” <ext-link xlink:href="https://json.com" ext-link-type="uri">https://json.com</ext-link> (<year>2014</year>).</mixed-citation>
    </ref>
    <ref id="r27">
      <label>27.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>JData: a general-purpose data annotation and interchange format, Version 1</article-title>,” <year>2020</year>, <ext-link xlink:href="https://github.com/NeuroJSON/jdata" ext-link-type="uri">https://github.com/NeuroJSON/jdata</ext-link>.</mixed-citation>
    </ref>
    <ref id="r28">
      <label>28.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Wright</surname><given-names>A.</given-names></name><name><surname>Andrews</surname><given-names>H.</given-names></name><name><surname>Hutton</surname><given-names>B.</given-names></name></person-group>, “<article-title>JSON schema: a media type for describing JSON documents</article-title>,” <year>2020</year>, <ext-link xlink:href="https://json-schema.org/specification.html" ext-link-type="uri">https://json-schema.org/specification.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="r29">
      <label>29.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yao</surname><given-names>R.</given-names></name><name><surname>Intes</surname><given-names>X.</given-names></name><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>Direct approach to compute Jacobians for diffuse optical tomography using perturbation Monte Carlo-based photon ‘replay’</article-title>,” <source>Biomed. Opt. Express</source>
<volume>9</volume>, <fpage>4588</fpage>–<lpage>4603</lpage> (<year>2018</year>).<pub-id pub-id-type="coden">BOEICL</pub-id><issn>2156-7085</issn><pub-id pub-id-type="doi">10.1364/BOE.9.004588</pub-id><pub-id pub-id-type="pmid">30319888</pub-id></mixed-citation>
    </ref>
    <ref id="r30">
      <label>30.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Kalla</surname><given-names>R.</given-names></name></person-group>, “<article-title>Universal binary JSON specification - draft 12</article-title>,” <ext-link xlink:href="https://ubjson.com" ext-link-type="uri">https://ubjson.com</ext-link> (<year>2016</year>).</mixed-citation>
    </ref>
    <ref id="r31">
      <label>31.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Cox</surname><given-names>R.</given-names></name></person-group>, “<article-title>Official definition of the NIFTI1 header</article-title>,” <year>2007</year>, <ext-link xlink:href="https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h" ext-link-type="uri">https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h</ext-link>.</mixed-citation>
    </ref>
    <ref id="r32">
      <label>32.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>JNIfTI: an extensible file format for storage and interchange of neuroimaging data, Version 1</article-title>,” <year>2020</year>, <ext-link xlink:href="https://github.com/NeuroJSON/jnifti" ext-link-type="uri">https://github.com/NeuroJSON/jnifti</ext-link>.</mixed-citation>
    </ref>
    <ref id="r33">
      <label>33.</label>
      <mixed-citation publication-type="webpage"><collab>ThreeJS Project Contributors</collab>, “<article-title>Three.js JavaScript Library, version R135</article-title>,” <ext-link xlink:href="https://threejs.org" ext-link-type="uri">https://threejs.org</ext-link> (<year>2021</year>).</mixed-citation>
    </ref>
    <ref id="r34">
      <label>34.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Hipp</surname><given-names>R. D.</given-names></name></person-group>, “<article-title>SQLite, version 3.31.1</article-title>,” <ext-link xlink:href="https://sqlite.org" ext-link-type="uri">https://sqlite.org</ext-link> (<year>2020</year>).</mixed-citation>
    </ref>
    <ref id="r35">
      <label>35.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wilkinson</surname><given-names>M.</given-names></name><etal>et al.</etal></person-group>, “<article-title>The FAIR guiding principles for scientific data management and stewardship</article-title>,” <source>Sci. Data</source>
<volume>3</volume>, <fpage>160018</fpage> (<year>2016</year>).<pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id><pub-id pub-id-type="pmid">26978244</pub-id></mixed-citation>
    </ref>
    <ref id="r36">
      <label>36.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Jacques</surname><given-names>S.</given-names></name></person-group>, “<article-title>mcxyz software</article-title>,” <ext-link xlink:href="https://omlc.org/software/mc/mcxyz/" ext-link-type="uri">https://omlc.org/software/mc/mcxyz/</ext-link>.</mixed-citation>
    </ref>
    <ref id="r37">
      <label>37.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dogdas</surname><given-names>B.</given-names></name><etal>et al.</etal></person-group>, “<article-title>Digimouse: a 3D whole body mouse atlas from CT and cryosection data</article-title>,” <source>Phys. Med. Biol.</source>
<volume>52</volume>, <fpage>577</fpage>–<lpage>587</lpage> (<year>2007</year>).<pub-id pub-id-type="coden">PHMBA7</pub-id><issn>0031-9155</issn><pub-id pub-id-type="doi">10.1088/0031-9155/52/3/003</pub-id><pub-id pub-id-type="pmid">17228106</pub-id></mixed-citation>
    </ref>
    <ref id="r38">
      <label>38.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Gailly</surname><given-names>J.</given-names></name><name><surname>Adler</surname><given-names>M.</given-names></name></person-group>, “<article-title>zlib compression library</article-title>,” <ext-link xlink:href="https://zlib.org" ext-link-type="uri">https://zlib.org</ext-link> (<year>2004</year>).</mixed-citation>
    </ref>
    <ref id="r39">
      <label>39.</label>
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>OpenJData - “Source code” format for scientific data</article-title>,” <ext-link xlink:href="http://openjdata.org" ext-link-type="uri">http://openjdata.org</ext-link> (<year>2021</year>).</mixed-citation>
    </ref>
    <ref id="r40">
      <label>40.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Fang</surname><given-names>Q.</given-names></name></person-group>, “<article-title>JMesh—a versatile data format for unstructured meshes and geometries, Version 1</article-title>,” <year>2020</year>, <ext-link xlink:href="https://github.com/NeuroJSON/jmesh" ext-link-type="uri">https://github.com/NeuroJSON/jmesh</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
