<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Genomics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Genomics</journal-id>
    <journal-title-group>
      <journal-title>BMC Genomics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2164</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10161511</article-id>
    <article-id pub-id-type="pmid">37142970</article-id>
    <article-id pub-id-type="publisher-id">9340</article-id>
    <article-id pub-id-type="doi">10.1186/s12864-023-09340-2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>pandasGWAS: a Python package for easy retrieval of GWAS catalog data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Cao</surname>
          <given-names>Tianze</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Li</surname>
          <given-names>Anshui</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-9298-5342</contrib-id>
        <name>
          <surname>Huang</surname>
          <given-names>Yuexia</given-names>
        </name>
        <address>
          <email>yxhuang@hznu.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.410595.c</institution-id><institution-id institution-id-type="ISNI">0000 0001 2230 9154</institution-id><institution>School of Mathematics, </institution><institution>Hangzhou Normal University, </institution></institution-wrap>Hangzhou, 311121 China </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.412551.6</institution-id><institution-id institution-id-type="ISNI">0000 0000 9055 7865</institution-id><institution>Department of Statistics, </institution><institution>Shaoxing University, </institution></institution-wrap>Shaoxing, 312000 China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>4</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>4</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>24</volume>
    <elocation-id>238</elocation-id>
    <history>
      <date date-type="received">
        <day>25</day>
        <month>7</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>4</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Since the NHGRI-EBI Catalog of human genome-wide association studies was established by NHGRI in 2008, research on it has attracted more and more researchers as the amount of data has grown rapidly. Easy-to-use, open-source, general-purpose programs for accessing the NHGRI-EBI Catalog of human genome-wide association studies are in great demand for current Python data analysis pipeline.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">In this work we present pandasGWAS, a Python package that provides programmatic access to the NHGRI-EBI Catalog of human genome-wide association studies. Instead of downloading all data locally, pandasGWAS queries data based on input criteria and handles paginated data gracefully. The data is then transformed into multiple associated pandas.DataFrame objects according to its hierarchical relationships, which makes it easy to integrate into current Python-based data analysis toolkits.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">pandasGWAS is an open-source Python package that provides the first Python client interface to the GWAS Catalog REST API. Compared with existing tools, the data structure of pandasGWAS is more consistent with the design specification of GWAS Catalog REST API, and provides many easy-to-use mathematical symbol operations.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Database</kwd>
      <kwd>Repository</kwd>
      <kwd>RESTful</kwd>
      <kwd>Python</kwd>
      <kwd>GWAS</kwd>
      <kwd>Pandas</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100001809</institution-id>
            <institution>National Natural Science Foundation of China</institution>
          </institution-wrap>
        </funding-source>
        <award-id>11901145</award-id>
        <principal-award-recipient>
          <name>
            <surname>Li</surname>
            <given-names>Anshui</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par14">The GWAS Catalog was founded by the NHGRI in 2008, which is a consistent, searchable, visualized and freely available database of all published genome-wide association studies [<xref ref-type="bibr" rid="CR1">1</xref>]. Currently, there are three ways to access this data: (i) via the graphical search interface supported by official website, (ii) via downloading the offline data dump provided by the official website, (iii) via GWAS Catalog REST API hosted by official website. The first way is the most friendly to beginners, and can obtain the latest data, but it can only be operated manually, which is not convenient for automation based on programming. The second method can obtain all data locally, but cannot guarantee that the data is up-to-date at the time of research. The third method combines the advantages of the previous methods, but the steps of acquiring and parsing the data are tedious. Firstly, there are many URL parameters for requesting data, and beginners must read the documentation deeply to understand how to assemble the correct parameters. Secondly, the structure of the response data is also complex. Based on different request parameters, response will be in normal JSON format or JSON + HAL format [<xref ref-type="bibr" rid="CR2">2</xref>]. At the same time, the format of data may also be paginated or not, or it may be in the form of Array or not.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Retrieving data from server</title>
      <p id="Par15">pandasGWAS allows programmatic access to the GWAS Catalog data which leverages GWAS Catalog REST API [<xref ref-type="bibr" rid="CR3">3</xref>]. HTTP response of GWAS Catalog REST API are categorized into Study, Association, Variant and EFO Trait. pandasGWAS provides various functions for the above 4 data types in the module get_associations, get_variants, get_traits, and get_studies, respectively. pandasGWAS assembles the requested URL based on the specific called function and the parameters passed in. If the raw data of response is in the form of JSON + HAL, pandasGWAS will automatically extract valid data from the "_embedded" property. If the data is paginated, pandasGWAS will in turn request data from other pages and aggregate all the data. For friendly interactive features, pandasGWAS uses the progressbar2 module to visualize this progress [<xref ref-type="bibr" rid="CR4">4</xref>]. The processed response data is converted into an instance of the pandasGWAS custom class based on the called function (Fig. <xref rid="Fig1" ref-type="fig">1</xref>).<fig id="Fig1"><label>Fig. 1</label><caption><p>Architecture of pandasGWAS</p></caption><graphic xlink:href="12864_2023_9340_Fig1_HTML" id="MO1"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>Convenient set operations</title>
      <p id="Par16">In the module set_operation, pandasGWAS provides a variety of set operation methods for analysis between objects of the same type: bind(), union(), intersect(), set_diff(), set_xor() and set_equal(). pandasGWAS also supports set operations based on mathematical symbol operations: + (bind), &amp;(intersect), -(set_diff), ^(set_xor), |(union), =  = (set_equal).</p>
    </sec>
    <sec id="Sec5">
      <title>Helper functions for accessing web links</title>
      <p id="Par17">In the module Browser, pandasGWAS provides a set of helper functions for accessing web links, such as PubMed(open_in_pubmed()), dbSNP(open_in_dbsnp()), GTEx project(open_in_gtex()) and the GWAS Catalog Web interface itself(open_study_in_gwas_catalog(), open_variant_in_gwas_catalog(), open_trait_in_gwas_catalog(), open_gene_in_gwas_catalog(), open_region_in_gwas_catalog() and open_publication_in_gwas_catalog()).</p>
    </sec>
    <sec id="Sec6">
      <title>Class structure of data entities</title>
      <p id="Par18">The class Study contains 7 properties: studies, platforms, ancestries, genotyping_technologies, ancestral_groups, country_of_origin and country_of _recruitment. The types of these properties are pandas.DataFrame [<xref ref-type="bibr" rid="CR5">5</xref>]. When the processed data is passed into constructor of Study, constructor parses data into the property studies of which columns correspond one-to-one with properties of Study in GWAS Catalog REST API. The column accessionId is an identifier in the Study, which can be used to find a unique Study on the official website. Because platforms, ancestries, and genotypingTechnologies listed in studies are of type Array, they are flattened and assigned to properties with the same name to facilitate future data analysis. The value in the corresponding column accessionId is also assigned to the property platforms, which acts as a foreign key of relational database between the property platforms and the property studies, and also applies to the property ancestries and the property genotyping_technologies. Based on the same design principle, pandasGWAS creates the column ancestryId as the primary key of property ancestries, and extracts the corresponding values and assigns them to properties ancestral_groups, countries_of_origin and countries_of_recruitment respectively (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). The properties of Classes Association (Fig. <xref rid="Fig3" ref-type="fig">3</xref>), Variant (Fig. <xref rid="Fig4" ref-type="fig">4</xref>A-E) and Trait (Fig. <xref rid="Fig4" ref-type="fig">4</xref>F) are designed with the same philosophy as the Class Study.<fig id="Fig2"><label>Fig. 2</label><caption><p>Class structure of Study. <bold>a</bold> columns of the property studies in class Study; <bold>b</bold> columns of the property platforms in class Study; <bold>c</bold> columns of the property ancestries in class Study; <bold>d</bold> columns of the property genotyping_technologies in class Study; <bold>e</bold> columns of the property ancestral_groups in class Study; <bold>f</bold> columns of the property country_of_origin in class Study; <bold>g</bold> columns of the property country_of_recruitment in class Study</p></caption><graphic xlink:href="12864_2023_9340_Fig2_HTML" id="MO2"/></fig><fig id="Fig3"><label>Fig. 3</label><caption><p>Class structure of Association. <bold>a</bold> columns of the property associations in class Association; <bold>b</bold> columns of the property loci in class Association; <bold>c</bold> columns of the property strongest_risk_alleles in class Association; <bold>d</bold> columns of the property author_reported_genes in class Association; <bold>e</bold> columns of the property ensembl_gene_ids in class Association; <bold>f</bold> columns of the property entrez_gene_ids in class Association</p></caption><graphic xlink:href="12864_2023_9340_Fig3_HTML" id="MO3"/></fig><fig id="Fig4"><label>Fig. 4</label><caption><p>Class structure of Variant and Trait. <bold>a</bold> columns of the property variants in class Variant; <bold>b</bold> columns of the property locations in class Variant; <bold>c</bold> columns of the property genomic_contexts in class Variant; <bold>d</bold> columns of the property ensembl_gene_ids in class Variant; <bold>e</bold> columns of the property entrez_gene_ids in class Variant; <bold>f</bold> columns of the property efo_traits in class Trait</p></caption><graphic xlink:href="12864_2023_9340_Fig4_HTML" id="MO4"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec7">
    <title>Results and discussion</title>
    <sec id="Sec8">
      <title>Example 1: a real world use case</title>
      <p id="Par19">To demonstrate the utility of pandasGWAS, we use the work of Light et al. as an example [<xref ref-type="bibr" rid="CR6">6</xref>]. In this work, the authors started by selecting variants previously reported in the GWAS Catalog for autoimmune disease. It can be easily implemented using pandasGWAS. Firstly, we load the required modules in the Python console.</p>
      <p id="Par20"> &gt;  &gt;  &gt; from pandasgwas.get_studies import get_studies</p>
      <p id="Par21"> &gt;  &gt;  &gt; from pandasgwas.Browser import open_in_pubmed</p>
      <p id="Par22"> &gt;  &gt;  &gt; from pandasgwas.get_associations import get_associations</p>
      <p id="Par23">Then we can get studies in the GWAS Catalog by autoimmune disease.</p>
      <p id="Par24"> &gt;  &gt;  &gt; my_studies = get_studies(efo_trait = 'autoimmune disease')</p>
      <p id="Par25">We can use the function len () to confirm how many studies were retrieved.</p>
      <p id="Par26"> &gt;  &gt;  &gt; len(my_studies)</p>
      <p id="Par27">We can know the Study identifier easily.</p>
      <p id="Par28"> &gt;  &gt;  &gt; my_studies.studies ['accessionId']</p>
      <p id="Par29">To browse related study directly on PubMed, we can use the helper function open_in_pubmed ().</p>
      <p id="Par30"> &gt;  &gt;  &gt; my_studies.studies ['publicationInfo.pubmedId'].apply(lambda x:open_in_pubmed(x))</p>
      <p id="Par31">To get the variants previously associated with autoimmune disease.</p>
      <p id="Par32"> &gt;  &gt;  &gt; my_associations = get_associations(efo_trait = 'autoimmune disease')</p>
      <p id="Par33">To filter associations by <italic>P</italic> value &lt; 1 × 10<sup>−6</sup>.</p>
      <p id="Par34"> &gt;  &gt;  &gt; association_ids = my_associations.associations [my_associations.associations ['pvalue'] &lt; 1e-6] ['associationId'].tolist()</p>
      <p id="Par35"> &gt;  &gt;  &gt; my_associations2 = my_associations [association_ids]</p>
      <p id="Par36">To check risk alleles and risk frequency.</p>
      <p id="Par37"> &gt;  &gt;  &gt; my_associations2.strongest_risk_alleles [ ['riskAlleleName', 'riskFrequency']]</p>
    </sec>
    <sec id="Sec9">
      <title>Example 2: in conjunction with other Python tools</title>
      <p id="Par38">The data type of pandasGWAS is pandas.DataFrame, which is the foundation of data analysis in python. It can be easily combined with other analysis and visualization tools. This example will be used in conjunction with plotnine [<xref ref-type="bibr" rid="CR7">7</xref>] to visualize data. plotnine is an Python implementation of ggplot2 [<xref ref-type="bibr" rid="CR8">8</xref>], which is a grammar of graphics in R.</p>
      <p id="Par39">Firstly, we load the required modules in the Python console.</p>
      <p id="Par40"> &gt;  &gt;  &gt; from pandasgwas.get_studies import get_studies</p>
      <p id="Par41"> &gt;  &gt;  &gt; from plotnine import ggplot,geom_bar,aes</p>
      <p id="Par42">Secondly, we search Study based on different disease Trait. We can use the plus sign( +) to aggregate all results.</p>
      <p id="Par43"> &gt;  &gt;  &gt; study1 = get_studies(reported_trait = 'Suicide risk')</p>
      <p id="Par44"> &gt;  &gt;  &gt; study2 = get_studies(reported_trait = "Dupuytren's disease")</p>
      <p id="Par45"> &gt;  &gt;  &gt; study3 = get_studies(reported_trait = "Triglycerides")</p>
      <p id="Par46"> &gt;  &gt;  &gt; study4 = get_studies(reported_trait = "Retinal vascular caliber")</p>
      <p id="Par47"> &gt;  &gt;  &gt; study5 = get_studies(reported_trait = "Non-small cell lung cancer (survival)")</p>
      <p id="Par48"> &gt;  &gt;  &gt; all_studies = study1 + study2 + study3 + study4 + study5</p>
      <p id="Par49">In order to analyze the results of the query, we can also use the math symbol ( +) to complete the data visualization. From the graph, we know that the count of research related to "Triglycerides" is the most highest (Fig. <xref rid="Fig5" ref-type="fig">5</xref>).<fig id="Fig5"><label>Fig. 5</label><caption><p>Analyze study by disease trait</p></caption><graphic xlink:href="12864_2023_9340_Fig5_HTML" id="MO5"/></fig></p>
      <p id="Par50"> &gt;  &gt;  &gt; ggplot(all_studies.studies) + geom_bar(aes(x = 'diseaseTrait.trait'))</p>
    </sec>
    <sec id="Sec10">
      <title>pandasGWAS vs gwasrappidd</title>
      <p id="Par51">Among the existing tools, gwasrappidd [<xref ref-type="bibr" rid="CR9">9</xref>] which is implemented based on the R programming language is the only one with similar functionality to pandasGWAS. Users familiar with gwasrapidd can easily use pandasGWAS in Python. First, use "from pandasgwas import *" instead of "library(gwasrapidd)" in R to import the functions into current namespace. Second, the names of the functions starting with "get" and their main arguments in pandasGWAS are the same as in gwasrapidd. Users need to pay attention to the differences of types between R and Python when using parameters. For more detailed information about the types of functions in pandasGWAS, one can refer to the definitions and examples given in the GITHUB.IO documentations.</p>
      <p id="Par52">Compared with gwasrapidd, pandasGWAS has several advantages and we just list some of them below. The function set_xor() is not supported by gwasrapidd and it does not support mathematical symbol operations to simplify set operations on the requested data (Table <xref rid="Tab1" ref-type="table">1</xref>). The mapping between the columns of the table and the keys of JSON in the GWAS Catalog REST API is weak. Firstly, some data are missing, such as: locations of Variant in API. Secondly, when some data is flattened and assigned to child DataFrames, gwasrappidd does not create primary and foreign keys to indicate the relationship between them, such as: variants.ensemble_ids in gwasrappidd. When researchers used gwasrappidd for the first time, confusions between the official website's REST API and the results returned by the function may be caused by the weak mapping. However, pandasGWAS can solve most of the problems mentioned above in gwasrappidd.<table-wrap id="Tab1"><label>Table 1</label><caption><p>pandasGWAS vs gwasrappidd</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">pandasGWAS</th><th align="left">gwasrappidd</th></tr></thead><tbody><tr><td align="left">Programming Language</td><td align="left">python</td><td align="left">R</td></tr><tr><td align="left">Type of Property</td><td align="left">pandas.DataFrame</td><td align="left">tidyverse.tibble</td></tr><tr><td align="left">Set Operations</td><td align="left">set_xor, bind, union, intersect, set_diff, set_equal</td><td align="left">bind, union, intersect, set_diff, set_equal</td></tr><tr><td align="left">Set Operations Based on Mathematical Symbol</td><td align="left"> + (bind), &amp;(intersect), -(set_diff), ^(set_xor), |(union), =  = (set_equal)</td><td align="left">Unsupported</td></tr><tr><td align="left">The Mapping Between The Columns of The Table and The Key of JSON in The GWAS Catalog REST API</td><td align="left">Strong</td><td align="left">Weak</td></tr></tbody></table></table-wrap></p>
    </sec>
  </sec>
  <sec id="Sec11">
    <title>Conclusions</title>
    <p id="Par53">pandasGWAS definitely fills a major gap in the Python community for programmatic access to the GWAS Catalog data. Compared to existing tools, pandaGWAS is easier to get started. pandasGWAS is tested and documented, which has been uploaded to PyPI and can be easily installed by typing "pip install pandasgwas" at the command line.</p>
  </sec>
  <sec id="Sec12">
    <title>Availability and requirements</title>
    <p id="Par54">Project name: pandasGWAS.</p>
    <p id="Par55">Project home page: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/pandasgwas">https://pypi.org/project/pandasgwas</ext-link></p>
    <p id="Par56">Operating system(s): any supporting Python &gt;  = 3.8 (tested on Windows 10).</p>
    <p id="Par57">Programming language: Python.</p>
    <p id="Par58">Other requirements: pandas &gt;  = 1.4.3, requests &gt;  = 2.28.1, progressbar2 &gt;  = 4.0.0.</p>
    <p id="Par59">License: MIT License.</p>
    <p id="Par60">Any restrictions to use by non-academics: The NHGRI-EBI GWAS Catalog and all its contents are available under the general terms of use for EMBL-EBI services.</p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>GWAS</term>
        <def>
          <p id="Par4">Genome-wide association studies</p>
        </def>
      </def-item>
      <def-item>
        <term>NHGRI</term>
        <def>
          <p id="Par5">National Human Genome Research Institute</p>
        </def>
      </def-item>
      <def-item>
        <term>EBI</term>
        <def>
          <p id="Par6">European Bioinformatics Institute</p>
        </def>
      </def-item>
      <def-item>
        <term>REST</term>
        <def>
          <p id="Par7">Representational State Transfer</p>
        </def>
      </def-item>
      <def-item>
        <term>API</term>
        <def>
          <p id="Par8">Application Programming Interface</p>
        </def>
      </def-item>
      <def-item>
        <term>JSON</term>
        <def>
          <p id="Par9">JavaScript Object Notation</p>
        </def>
      </def-item>
      <def-item>
        <term>HAL</term>
        <def>
          <p id="Par10">Hypertext Application Language</p>
        </def>
      </def-item>
      <def-item>
        <term>HTTP</term>
        <def>
          <p id="Par11">Hyper Text Transfer Protocol</p>
        </def>
      </def-item>
      <def-item>
        <term>URL</term>
        <def>
          <p id="Par12">Uniform Resource Locator</p>
        </def>
      </def-item>
      <def-item>
        <term>EFO</term>
        <def>
          <p id="Par13">Experimental Factor Ontology</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>Tianze Cao and Anshui Li contributed equally to this work.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>TC designed the tool and implemented the code. YH and AL tested the tool. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by 11901145 from the National Natural Science Foundation of China to AL. The funding body did not play any role in the design of the study or in the collection, analysis and interpretation of data or in writing the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Source code is available in <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/pandasgwas">https://pypi.org/project/pandasgwas</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://github.com/caotianze/pandasgwas">https://github.com/caotianze/pandasgwas</ext-link>. Documentation and tutorials can be found at <ext-link ext-link-type="uri" xlink:href="https://caotianze.github.io/pandasgwas/">https://caotianze.github.io/pandasgwas/</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par61">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par62">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par63">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buniello</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>MacArthur</surname>
            <given-names>JAL</given-names>
          </name>
          <name>
            <surname>Cerezo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>LW</given-names>
          </name>
          <name>
            <surname>Hayhurst</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Malangone</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>McMahon</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Morales</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mountjoy</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sollis</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Suveges</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Vrousgou</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Whetzel</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Amode</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Guillen</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Riat</surname>
            <given-names>HS</given-names>
          </name>
          <name>
            <surname>Trevanion</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Junkins</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Burdett</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hindorff</surname>
            <given-names>LA</given-names>
          </name>
          <name>
            <surname>Cunningham</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Parkinson</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>The NHGRI-EBI GWAS Catalog of published genome-wide association studies, targeted arrays and summary statistics 2019</article-title>
        <source>Nucleic Acids Res</source>
        <year>2019</year>
        <volume>4</volume>
        <fpage>D1005</fpage>
        <lpage>D1012</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1120</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">HAL - Hypertext Application Language. <ext-link ext-link-type="uri" xlink:href="https://stateless.group/hal_specification.html">https://stateless.group/hal_specification.html</ext-link>. Accessed 20 July 2022.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">GWAS CATALOG API Guide. <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/gwas/rest/docs/api">https://www.ebi.ac.uk/gwas/rest/docs/api</ext-link>. Accessed 20 July 2022.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">progressbar2. <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/progressbar2/">https://pypi.org/project/progressbar2/</ext-link>. Accessed 20 July 2022.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">pandas. <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/pandas/">https://pypi.org/project/pandas/</ext-link>. Accessed 20 July 2022.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nicholas</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Véronique</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Bing</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Shu-Huang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Tony</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Tomi</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Interrogation of allelic chromatin states in human cells by high-density ChIP-genotyping</article-title>
        <source>Epigenetics</source>
        <year>2014</year>
        <volume>9</volume>
        <fpage>1238</fpage>
        <lpage>1251</lpage>
        <pub-id pub-id-type="doi">10.4161/epi.29920</pub-id>
        <pub-id pub-id-type="pmid">25055051</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">plotnine. <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/plotnine/">https://pypi.org/project/plotnine/</ext-link>. Accessed 21 July 2022.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Wickham H, Grolemund G. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st ed. O’Reilly Media; 2017</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Magno</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Maia</surname>
            <given-names>AT</given-names>
          </name>
        </person-group>
        <article-title>gwasrapidd: an r package to query, download and wrangle GWAS catalog data</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>36</volume>
        <fpage>649</fpage>
        <lpage>650</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz605</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
