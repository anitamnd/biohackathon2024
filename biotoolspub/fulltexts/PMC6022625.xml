<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6022625</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/bty269</article-id>
    <article-id pub-id-type="publisher-id">bty269</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Ismb 2018–Intelligent Systems for Molecular Biology Proceedings</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Privacy and Security</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>AnoniMME: bringing anonymity to the Matchmaker Exchange platform for rare disease gene discovery</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Oprisanu</surname>
          <given-names>Bristena</given-names>
        </name>
        <xref ref-type="aff" rid="bty269-aff1"/>
        <xref ref-type="corresp" rid="bty269-cor1"/>
        <!--<email>bristena.oprisanu.10@ucl.ac.uk</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>De Cristofaro</surname>
          <given-names>Emiliano</given-names>
        </name>
        <xref ref-type="aff" rid="bty269-aff1"/>
      </contrib>
    </contrib-group>
    <aff id="bty269-aff1">Department of Computer Science, University College London, London, UK</aff>
    <author-notes>
      <corresp id="bty269-cor1">To whom correspondence should be addressed. <email>bristena.oprisanu.10@ucl.ac.uk</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>7</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2018-06-27">
      <day>27</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>34</volume>
    <issue>13</issue>
    <issue-title>ISMB 2018 Proceedings July 6 to July 10, 2018, Chicago, IL, United States</issue-title>
    <fpage>i160</fpage>
    <lpage>i168</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2018. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="bty269.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>Advances in genome sequencing and genomics research are bringing us closer to a new era of personalized medicine, where healthcare can be tailored to the individual’s genetic makeup and to more effective diagnosis and treatment of rare genetic diseases. Much of this progress depends on collaborations and access to data, thus, a number of initiatives have been introduced to support seamless data sharing. Among these, the Global Alliance for Genomics and Health has developed and operates a platform, called Matchmaker Exchange (MME), which allows researchers to perform queries for rare genetic disease discovery over multiple federated databases. Queries include gene variations which are linked to rare diseases, and the ability to find other researchers that have seen or have interest in those variations is extremely valuable. Nonetheless, in some cases, researchers may be reluctant to use the platform since the queries they make (thus, what they are working on) are revealed to other researchers, and this creates concerns with respect to privacy and competitive advantage.</p>
        <p>In this paper, we present AnoniMME, a framework geared to enable anonymous queries within the MME platform. The framework, building on a cryptographic primitive called Reverse Private Information Retrieval, let researchers anonymously query the federated platform, in a multi-server setting—specifically, they write their query, along with a public encryption key, anonymously in a public database. Responses are also supported, so that other researchers can respond to queries by providing their encrypted contact details.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>
          <ext-link ext-link-type="uri" xlink:href="https://github.com/bristena-op/AnoniMME">https://github.com/bristena-op/AnoniMME</ext-link>
        </p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Google Faculty Award</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Enabling Progress in Genomic Research</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Privacy-Preserving Data Sharing</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Advances in genome sequencing and genomics are enabling tremendous progress in medicine and healthcare, paving the way to making the prevention, diagnosis and treatment of diseases tailored to the individual’s specific genetic makeup, thus becoming cheaper and more effective. Researchers are also gaining a better understanding, and developing more successful treatments of rare genetic diseases. However, even though sequencing costs have plummeted from billions to thousands of dollars over the past 15 years (<ext-link ext-link-type="uri" xlink:href="https://www.genome.gov/sequencingcosts/">https://www.genome.gov/sequencingcosts/</ext-link>), it is still hard for researchers to gain access to genomic data, especially those pertaining to rare conditions.</p>
    <p>Therefore, seamless progress in genomics research hinges on the ability to collaborate and share data among different institutions. Indeed, funding agencies often require that data sharing is considered in grant applications, and a number of initiatives have been announced to gather and share genomic data. For instance, the All Of Us Research Program (formerly known as the Precision Medicine initiative) was launched in the US in 2015, aiming to collect health and genetic data from one million citizens. Similar projects exist elsewhere, e.g. in the UK, Genomics England is sequencing the genomes of 100 000 patients, focusing on rare diseases and cancer. There are also initiatives specifically targeting data sharing, such as the NIH’s Genomic Data Commons (GDC), which provides the cancer research community with a unified data repository across cancer genomic studies (<ext-link ext-link-type="uri" xlink:href="https://gdc.cancer.gov/">https://gdc.cancer.gov/</ext-link>).</p>
    <p>Aiming to foster collaborations, the Global Alliance for Genomics and Health (GA4GH) [<ext-link ext-link-type="uri" xlink:href="https://www.ga4gh.org">https://www.ga4gh.org</ext-link>] was established, with core funding from NIH, Wellcome and Canada’s CanShare, with the explicit goal of making data sharing between institutes simple and effective. The GA4GH has developed several platforms, e.g. the Beacon Project (<xref rid="bty269-B4" ref-type="bibr">Global Alliance for Genomics and Health, 2016</xref>), allowing researchers to search if a certain allele exists in a database of genomic data, as well as the Matchmaker Exchange (MME; <xref rid="bty269-B8" ref-type="bibr">Philippakis <italic>et al.</italic>, 2015</xref>), which facilitates rare disease discovery.</p>
    <p>In this paper, we focus on the latter; The MME platform connects multiple distributed databases through an Application Programming Interface (API) and allows researchers to query for genetic variants in other databases in the network. That is, MME acts as a portal supporting simultaneous querying over multiple databases that are members of the exchange. More specifically, MME allows a researcher to query a specific gene, e.g. ‘AP3B2’ (a gene where rare mutations have been linked to early-onset epileptic encephalopathy). If a match is found, the researcher is notified of all matches within all databases in the MME, and can get in touch with the user that submitted the case on which a match is generated. Note that, querying a gene really implies querying a known rare variation of that gene.</p>
    <p>However, researchers might be reluctant to use the platform since the queries they make are revealed to other researchers, and this exposes what they are working on and what kinds of patients they might have, ultimately resulting in loss of privacy and competitive advantage. Indeed, MME currently requires researchers to submit a registration application to be given access to the platform, with the goal of preventing misuse of the system, thus, queries made on this platform are not anonymous and are revealed to all other researchers with an interest in the same gene.</p>
    <sec>
      <title>1.1 Problem statement</title>
      <p>This motivates the need to support <italic>anonymous querying</italic> on MME, so that a researcher’s interest a gene is not broadcast, but only communicated to relevant contacts, i.e. researchers with same interests or willing to collaborate. To this end, we present AnoniMME, a framework letting researchers anonymously query a gene within the MME, without violating any of MME’s current functionalities and requirements. We build AnoniMME using a cryptographic primitive called Reverse Private Information Retrieval (Reverse PIR), using a model similar to that presented by the anonymous messaging system Riposte (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>), while creating queries and implementing the same functionalities as in MME. In other words, researchers can perform anonymous queries to the federated platform, in a multi-server setting, by writing their query, along with a public encryption key, anonymously, in a public database. AnoniMME also supports responses, so that other researchers can respond to queries by providing their encrypted contact details.</p>
    </sec>
    <sec>
      <title>1.2 Solution intuition</title>
      <p>We build queries in regular epochs, where the length of each epoch is based on the number of write requests. In order to anonymously write to the database, the user selects a random row of the the database and splits the query, containing the gene and her public key, into shares, one for each server (which we denote as <italic>node</italic> servers). This way, the node servers cannot learn anything about the write request, if at least one of them is honest. Then, a <italic>master</italic> server can gather queries that have been collected during an epoch from the node servers and collate them together to recover and publish the actual queries. The MME matching system can then be used in order to generate matches for the queries, in the usual manner and contact details of other researchers/clinicians can be exchanged, encrypted using the public key, and published in the same row as the queried gene, in an adjacent column.</p>
      <p>To demonstrate the practicality of AnoniMME, we implement and evaluate our prototype experimentally. We do so in two different settings, one involving two node servers and a master server, and another involving six node servers (and a master server). In both settings, the nodes collect write requests during an epoch, and then forward them to the master server which collates them and publishes the final database.</p>
    </sec>
    <sec>
      <title>1.3 Contributions</title>
      <p>In summary, our paper makes several contributions:
<list list-type="roman-lower"><list-item><p>We present AnoniMME, a framework enabling anonymous queries within MME, without breaking any of its current security and functionality requirements.</p></list-item><list-item><p>We build AnoniMME from Reverse PIR (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>), using an information-theoretic approach, extending queries to support public key encryption of contact details and adding a response phase so that users can also anonymously reply to queries.</p></list-item><list-item><p>We show, experimentally, that AnoniMME is efficient and scalable, and can bring anonymity to MME with low overhead. Therefore, we are confident that it can be deployed in the wild and further encouraging researchers to share genomic data.</p></list-item></list></p>
    </sec>
    <sec>
      <title>1.4 Paper organization</title>
      <p>The rest of the paper is organized as follows. In the next section, we introduce our approach; specifically, after reviewing the MME platform, we define entities, operations and threat model of our system and present a first attempt at designing a anonymous-query mechanism for MME. In Section 3, we then describe the methods used for collision handling and collision recovery, present the <italic>n</italic>-server protocol and evaluate the performance of the proposed protocol on the client side. Next, in Section 4, we discuss the results from our experimental evaluation and place our protocol in the context of related work. Finally, the paper concludes in Section 5.</p>
    </sec>
  </sec>
  <sec>
    <title>2 Approach</title>
    <sec>
      <title>2.1 Matchmaker Exchange</title>
      <p>As mentioned, GA4GH was established, in 2013, aiming to support simple mechanisms for sharing data between institutes. The GA4GH has developed and deployed various systems, including MME (<xref rid="bty269-B8" ref-type="bibr">Philippakis <italic>et al.</italic>, 2015</xref>), which facilitates rare disease gene discovery and constitutes the main focus of our work. MME is a federated platform that facilitates the identification of cases with similar phenotypic and genotypic profiles through a standardized API. Essentially, it enables searches in multiple databases, without having to query all of them separately or deposit data in each of them. As of March 2018, it involves seven organizations with full member status (AGHA Patient Archive, DECIPHER, GeneMatcher, Matchbox, Monarch Initiative, MyGene2 and PhenomeCentral) and eight additional participant organizations.</p>
      <p>The Matchmaker Exchange Application Programming Interface (MME API; <xref rid="bty269-B1" ref-type="bibr">Buske <italic>et al.</italic>, 2015</xref>) fully specifies the data format and the protocol for querying databases to identify individuals with similar phenotypic profiles and genetic variations. To ensure the accuracy of the patient comparison, similar phenotypes are determined by matching identical or ontologically similar with the Human Phenotype Ontology (HPO). The MME API also specifies the format of both the query, which is sent to participating databases (called ‘matchmaking service’) and the response, which contains information about matching individuals in the remote database. It is implemented under a query-by-example methodology: a user can query a specific gene, e.g. ‘AP3B2’, and she will be notified of all matches within all databases in the MME. Note that querying a gene really implies querying a known rare variation of that gene. If a match is found, the user receives a Case ID for the match, information about the user that submitted the case on which a match is generated, such as name, institution and email address, as well as the corresponding candidate gene or phenotype. In order to query the platform, users must be registered with one of the member databases and have a clinician/researcher account. Some of the member databases allow for patient/family registrations as well, however, the submissions made by these types of users are excluded from matching via MME, due to the current MME rules.</p>
      <p>The query protocol is illustrated in <xref ref-type="fig" rid="bty269-F1">Figure 1</xref>. A user, Bob, sends the metadata (i.e. Case ID, submitter information) as well as the patient data (gene and/or phenotype) to Database B. Another user, Alice, submits a similar case to Database A; Database A then sends an MME API match request to Database B, which performs the match and returns a list of scored patients, along with relevant metadata, to Database A. After receiving the match results, Database A informs Alice, providing contact information for Bob. The result of querying MME yields a list of matches, where each match has a <italic>patient</italic> object, i.e. the information on the matched patient, consisting of the same information as described in the query and a <italic>score</italic> object. The scoring of the patients is done according to how well the results patient matches the query patient, i.e. it is a numerical value in the range <inline-formula id="IE1"><mml:math id="IM1"><mml:mrow><mml:mo stretchy="true">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula>, where 0.0 is a poor match and 1.0 a perfect match.
</p>
      <fig id="bty269-F1" orientation="portrait" position="float">
        <label>Fig. 1.</label>
        <caption>
          <p>Visual representation of a MME query sequence</p>
        </caption>
        <graphic xlink:href="bty269f1"/>
      </fig>
    </sec>
    <sec>
      <title>2.2 Entities and operations</title>
      <p>As discussed in Section 1, this paper presents AnoniMME, a framework geared to enable anonymous queries within the MME platform, i.e. anonymously querying the federated platform to find patients with similar gene mutations or phenotypes. It involves the following entities:
<list list-type="simple"><list-item><p><italic>Querying Users:</italic> Researchers/clinicians who query the system to find other users that have patients with a rare mutation or an interest in the same gene. As discussed later, they generate a write request specifying the row at which their query, i.e. the gene of interest and their public key, will be processed.</p></list-item><list-item><p><italic>Responding Users:</italic> Researchers/clinicians replying to an existing query. They use the public key of a querying user to encrypt their contact details and generate a write request for the same row as the gene of interest including their (encrypted) contact details.</p></list-item><list-item><p><italic>Nodes:</italic> The servers collecting write requests from the users. These are aggregated until the end of an epoch, based on the maximum number of write requests. Each node server can be run by one of the current MME members.</p></list-item><list-item><p><italic>Master Server:</italic> A server that gathers the databases from each node at the end of an epoch, and publishes the database with all the write requests revealed. The master server role can also be assigned to one of the existing MME members, and can be re-assigned to another member at the end of each epoch.</p></list-item></list></p>
      <p>Overall, AnoniMME implements the following operations:
<list list-type="bullet"><list-item><p><italic>Query Write Request:</italic> On input row <italic>i</italic>, query gene <italic>X</italic>, and public key PK, a querying user generates <italic>n</italic> write requests, one for each node. Each write request is generated by encoding the gene and the public key into <italic>n</italic> vectors, so that all of them combined will write the gene/public key at index <italic>i</italic>.</p></list-item><list-item><p><italic>Query Response Request:</italic> On input row <italic>i</italic>, encrypted contact details <italic>c</italic>, a responding user generates <italic>n</italic> write requests, one for each node. Write requests are generated, once again, by encoding the encrypted contact details into <italic>n</italic> vectors.</p></list-item><list-item><p><italic>Database Collation:</italic> On input <italic>n</italic> databases, the master server collates them into one final database and publishes it.</p></list-item></list></p>
    </sec>
    <sec>
      <title>2.3 Security model</title>
      <p>AnoniMME aims to guarantee the following three security goals:
<list list-type="roman-lower"><list-item><p><italic>Correctness.</italic> When all nodes execute the protocols correctly and send data to the master server at the end of an epoch, the resulting database contains all the write requests processed as if the requests were directly applied to the final database.</p></list-item><list-item><p><italic>Anonymous write.</italic> The probability that an adversary guesses at which particular row a user has written is only negligibly better than random guessing.</p></list-item><list-item><p><italic>Disruption resistance.</italic> An adversary controlling <italic>n</italic> users can make at most <italic>n</italic> write requests (i.e. there is a limit to the number of write requests each user can make during an epoch).</p></list-item></list></p>
      <sec>
        <title>2.3.1 Threat model</title>
        <p>We assume that the users of the system are untrusted, and may collude with the nodes, the master server, or other users in order to violate the security properties of the system. Both the master server and the nodes are trusted for availability and to follow the protocol correctly, under the assumption that at least one of the nodes is honest (i.e. does not collude with other nodes). We do not consider external adversaries, since their actions can be mitigated via standard network security techniques (i.e. using a secure and authenticated communication channel). Finally, note that the security model of AnoniMME mirrors that of Riposte (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>).</p>
      </sec>
    </sec>
    <sec>
      <title>2.4 A first attempt</title>
      <p>We now present a first attempt at instantiating AnoniMME, and discuss its limitations, which we address in the actual construction of AnoniMME presented in Section 3.2.</p>
      <sec>
        <title>2.4.1 Intuition</title>
        <p>We start by attempting to build from a simple extension of Reverse PIR (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>). More specifically, we implement the query phase using the same mechanism of Riposte, i.e. we let users anonymously submit the gene of interest, along with their public key, with a ‘write request.’ We then add a response phase, allowing users with an interest in the same gene to respond—specifically, by encrypting their contact information using the public key contained in the query and adding it to another write request.</p>
        <p>In the following, we present a construction assuming the presence of two servers (<italic>S</italic><sub>1</sub> and <italic>S</italic><sub>2</sub>) and a database with <italic>l</italic> rows.</p>
      </sec>
      <sec>
        <title>2.4.2 Query phase</title>
        <p>Assume user A wants to anonymously query gene <italic>X<sub>A</sub></italic>. She builds a write request, consisting of (<italic>X<sub>A</sub></italic>, PK<sub><italic>A</italic></sub>), where PK<sub><italic>A</italic></sub> is her public key and writes this at row <italic>i</italic> in the database. More specifically, she picks 2 <italic>l</italic> random numbers, <inline-formula id="IE2"><mml:math id="IM2"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>l</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE3"><mml:math id="IM3"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>l</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where <italic>l</italic> is the size of the database. The query write request vectors are constructed as follows:
<disp-formula id="E1"><mml:math id="M1"><mml:mtable><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msubsup><mml:mi>v</mml:mi><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mtext>PK</mml:mtext><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msubsup><mml:mi>v</mml:mi><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
Note that <inline-formula id="IE4"><mml:math id="IM4"><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>A</mml:mi></mml:msub><mml:mo>·</mml:mo><mml:msub><mml:mi mathvariant="normal">e</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, and <inline-formula id="IE5"><mml:math id="IM5"><mml:mrow><mml:msubsup><mml:mi>v</mml:mi><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>v</mml:mi><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext>PK</mml:mtext></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>·</mml:mo><mml:msub><mml:mi mathvariant="normal">e</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where e<sub><italic>i</italic></sub> denotes the unit vector with 0’s at all positions except at position <italic>i</italic>, where it is equal to 1 and thus the construction is correct. Then, <italic>A</italic> sends <inline-formula id="IE6"><mml:math id="IM6"><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi>v</mml:mi><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> to <italic>S</italic><sub>1</sub>, and <inline-formula id="IE7"><mml:math id="IM7"><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi>v</mml:mi><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> to <italic>S</italic><sub>2</sub>.</p>
        <p>Write requests are collected until the end of an epoch, when the servers combine their local states and publish the database with the queries. As long as the two servers do not collude, none of them can re-construct what any given user has written, i.e. none of the servers can recover the gene or public key of the user sent in the write request. Also, in order to achieve disruption resistance, one can limit the number of queries to one per user for each phase of the epoch.</p>
      </sec>
      <sec>
        <title>2.4.3 Response phase</title>
        <p>After the database with the queries is published, the response phase begins. Here, we can rely on MME’s algorithm to generate matches on existing MME data, and simply extend it to encrypt the contact details of the relevant users with an interest in the same gene. This would be inline with the current privacy policy of the MME, as contact details of researchers with an interest in the same gene are already shared.</p>
        <p>Users can also be given an option to voluntarily provide their contact details as follows. If user B notices that another researcher (user A) has an interest in the same gene X, say at row <italic>i</italic> of the database, she gets A’s public key PK<sub><italic>A</italic></sub> and encrypt her contact information (<italic>C<sub>B</sub></italic>) under PK<sub><italic>A</italic></sub> and generates a write request as a share of <inline-formula id="IE8"><mml:math id="IM8"><mml:mrow><mml:mi>E</mml:mi><mml:mi>n</mml:mi><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:msub><mml:mrow><mml:mtext>PK</mml:mtext></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula>, in a similar manner to the first epoch. More specifically, she chooses random <inline-formula id="IE9"><mml:math id="IM9"><mml:mrow><mml:mi>r</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mi>l</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> and forms the following vectors:
<disp-formula id="E2"><mml:math id="M2"><mml:mtable><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mi>r</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:mi>E</mml:mi><mml:mi>n</mml:mi><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:msub><mml:mrow><mml:mtext>PK</mml:mtext></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:msup><mml:mi>i</mml:mi><mml:mo>′</mml:mo></mml:msup></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mi>l</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
User <italic>B</italic> then sends <italic>u</italic><sub>1</sub> to server <italic>S</italic><sub>1</sub> and <italic>u</italic><sub>2</sub> to <italic>S</italic><sub>2</sub>. At the end of this epoch, the results are being published in a column adjacent to the queried gene and the public encryption key. The querying users can use the database to find the row of interest (in this case <italic>i</italic>), decrypt the contact details and get in touch with the responding users.</p>
      </sec>
      <sec>
        <title>2.4.4 Correctness and security</title>
        <p>It is straightforward to see that the construction is correct, since, if all nodes execute the protocols correctly the result of combining all their local database states at the end of an epoch by the master server will result in revealing all the write requests processed. An adversary’s advantage of guessing at which a certain user has written in the final database is the same as random guessing, hence, the construction guarantees anonymous writes. Disruption resistance can be also achieved in a straightforward manner since MME requires users to register on one of the databases, so they can allow maximum one write request per registered user per epoch.</p>
      </sec>
      <sec>
        <title>2.4.5 Limitations</title>
        <p>Alas, this construction has the following limitations:
<list list-type="roman-lower"><list-item><p><italic>Collisions:</italic> They might occur for writes generated by honest users, which all want to write at the same row.</p></list-item><list-item><p><italic>Maliciously-formed write requests:</italic> A malicious user can easily send a malformed request to the servers, making all the data within the database non-recoverable.</p></list-item></list></p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>3 Materials and methods</title>
    <p>In this section, we provide methods for collision handling for our first attempt and use it to provide a description of the <italic>n</italic>-server protocol. We also evaluate the proposed method in terms of time and bandwidth required in order to asses the feasibility of the proposed construction.</p>
    <sec>
      <title>3.1 Handling collisions</title>
      <p>As discussed previously, collisions might occur whenever multiple users want to write at the same row. Aiming to address them, we set the database size to be large enough to accommodate write requests at a 95% non-collision rate. In other words, 5% of the queries will likely fail due to collisions and will need to be re-submitted.</p>
      <sec>
        <label>3.1.1</label>
        <title>Minimizing collisions</title>
        <p>Our intuition is to follow a ‘balls and bins’ approach, i.e. if we throw <italic>m</italic> balls uniformly and randomly into the <italic>l</italic> bins, we can estimate how many bins will contain exactly one ball. In our model, we can associate write requests to the <italic>m</italic> balls and the rows of the database to the <italic>l</italic> bins. Let <italic>B<sub>ij</sub></italic> be the event that ball <italic>i</italic> falls into bin <italic>j</italic>: for all <italic>i</italic> and <italic>j</italic>, we have <inline-formula id="IE10"><mml:math id="IM10"><mml:mrow><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msub><mml:mi>B</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>l</mml:mi></mml:mfrac></mml:mrow></mml:math></inline-formula>. Then, let <inline-formula id="IE11"><mml:math id="IM11"><mml:mrow><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:math></inline-formula> be the event that exactly one ball falls in bin <italic>j</italic>. We have that:
<disp-formula id="E3"><mml:math id="M3"><mml:mrow><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo>≈</mml:mo><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac><mml:mo>−</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mn>3</mml:mn></mml:msup></mml:mrow></mml:math></disp-formula>
using the binomial theorem and ignoring low order terms. Then, <inline-formula id="IE12"><mml:math id="IM12"><mml:mrow><mml:mi>l</mml:mi><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> is the expected number of bins with exactly one ball, i.e. the expected number of messages successfully received. Dividing by <italic>m</italic>, we get the expected success rate as
<disp-formula id="E4"><mml:math id="M4"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccesRate</mml:mtext><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>≈</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:math></disp-formula>
Thus, for a 95% expected success rate, we need <inline-formula id="IE13"><mml:math id="IM13"><mml:mrow><mml:mi>l</mml:mi><mml:mo>≈</mml:mo><mml:mn>19.5</mml:mn><mml:mi>m</mml:mi></mml:mrow></mml:math></inline-formula>.</p>
        <p>In AnoniMME, in order to set the size of the database, we need to estimate the expected number of write requests for each epoch. Looking at the three MME members which show statistics on the number of users, we find that GeneMatcher has 4066 registered users, MyGene2 345 registered families and Decipher 247 registered projects (users have to be part of a project in order to join Decipher) as of November 2017. This yields an average of approximately 1550 users per database. Assuming that this is representative of the number of users for all MME databases, we can approximate the total number of users to be in the order 10 000. We also need to estimate how many users make queries in each epoch: assuming 5% of users do so at each epoch, each epoch can run for 500 queries, yielding a database of size <inline-formula id="IE14"><mml:math id="IM14"><mml:mrow><mml:mi>l</mml:mi><mml:mo>≈</mml:mo></mml:mrow></mml:math></inline-formula> 10 000. Further, note that we design AnoniMME’s write request so that the row number at which we write is determined at random, given the number of write requests in the epoch as well as the database size, in order to avoid biases in choosing rows. This method, however, does not provide any way to recover in the case where a collision occurs, in that case the queries are irrecoverable and the users would need to re-submit their queries in a future epoch.</p>
      </sec>
      <sec>
        <label>3.1.2</label>
        <title>Recovering from collisions</title>
        <p>We also use a simple technique for recovering from collisions if/when these occur. Assume <italic>α</italic> messages have been written at row <italic>i</italic>, i.e. we have <inline-formula id="IE15"><mml:math id="IM15"><mml:mrow><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>m</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>m</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mo>⋯</mml:mo><mml:mo>+</mml:mo><mml:msub><mml:mi>m</mml:mi><mml:mo>α</mml:mo></mml:msub></mml:mrow></mml:math></inline-formula>. Inspired by (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>), we can modify the way in which the queries are built to recover each of the individual message <italic>m<sub>j</sub></italic>, for <inline-formula id="IE16"><mml:math id="IM16"><mml:mrow><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>j</mml:mi><mml:mo>≤</mml:mo><mml:mo>α</mml:mo></mml:mrow></mml:math></inline-formula>; specifically, we can use a system of <italic>α</italic> equations, which allows us to solve for each of the colliding messages. Without loss of generality, we consider the case <italic>α</italic> = 2 and explain how to recover from collisions occurring for the gene name, but similar methods can be used for <inline-formula id="IE17"><mml:math id="IM17"><mml:mrow><mml:mo>α</mml:mo><mml:mo>&gt;</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula> and to recover public key and/or encrypted contact details. When a collision occurs at row <italic>i</italic>, we have an entry <inline-formula id="IE18"><mml:math id="IM18"><mml:mrow><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>A</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where <italic>X<sub>A</sub></italic> is the gene sent by user <italic>A</italic>, and <italic>X<sub>B</sub></italic> is the gene sent by user <italic>B</italic>. If, rather than just sending the queried gene <italic>X</italic>, users send <inline-formula id="IE19"><mml:math id="IM19"><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>X</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula>, we can recover <italic>X<sub>A</sub></italic> and <italic>X<sub>B</sub></italic> by solving a system of two equations with two variables.</p>
        <p>In this case, we also compute the size of the database needed for an expected success rate as follows:
<disp-formula id="E5"><mml:math id="M5"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccessRate</mml:mtext><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula>
where <inline-formula id="IE20"><mml:math id="IM20"><mml:mrow><mml:mi>l</mml:mi><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> is the expected number of rows with exactly one write request applied to them, computed as before and <inline-formula id="IE21"><mml:math id="IM21"><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> is the expected number of rows with exactly two write requests applied to them. Computing <inline-formula id="IE22"><mml:math id="IM22"><mml:mrow><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mtable><mml:mtr><mml:mtd><mml:mi>m</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>2</mml:mn></mml:mtd></mml:mtr></mml:mtable><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:msup><mml:mi>l</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo>−</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>, we obtain the value of the expected success rate as:
<disp-formula id="E6"><mml:math id="M6"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccessRate</mml:mtext><mml:mo stretchy="true">]</mml:mo><mml:mo>≈</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mrow><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac></mml:mrow><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:mrow><mml:mn>3</mml:mn></mml:msup><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula>
In this case, for an epoch of <italic>m</italic> write requests, with a 95% expected success rate, we need a database with <inline-formula id="IE23"><mml:math id="IM23"><mml:mrow><mml:mi>l</mml:mi><mml:mo>′</mml:mo><mml:mo>≈</mml:mo><mml:mn>2.7</mml:mn><mml:mo> </mml:mo><mml:mi>m</mml:mi></mml:mrow></mml:math></inline-formula> cells (two columns and <inline-formula id="IE24"><mml:math id="IM24"><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>l</mml:mi><mml:mo>′</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:mfrac></mml:mrow></mml:math></inline-formula> rows). This implies that with 500 write requests per epoch, the database needs <inline-formula id="IE25"><mml:math id="IM25"><mml:mrow><mml:mi>l</mml:mi><mml:mo>′</mml:mo><mml:mo>≈</mml:mo><mml:mn>2.7</mml:mn><mml:mo>·</mml:mo></mml:mrow></mml:math></inline-formula> 500 <inline-formula id="IE26"><mml:math id="IM26"><mml:mo>=</mml:mo></mml:math></inline-formula> 1350 cells for each vector.</p>
        <p>We now generalize for any value of <italic>α</italic>. Users submit <inline-formula id="IE27"><mml:math id="IM27"><mml:mrow><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>X</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msup><mml:mi>X</mml:mi><mml:mo>α</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> for any gene <italic>X</italic> to be queried. This allows us to recover from an <italic>α</italic>-way collision as, in that case we obtain a system of <italic>α</italic> equations with <italic>α</italic> variables. The expected success rate is:
<disp-formula id="E7"><mml:math id="M7"><mml:mtable><mml:mtr><mml:mtd><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccessRate</mml:mtext><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msub><mml:mi>O</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">]</mml:mo><mml:mo>+</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>+</mml:mo><mml:mo>⋯</mml:mo><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mo>α</mml:mo><mml:mi>l</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:mfrac><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mo>α</mml:mo></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where <inline-formula id="IE28"><mml:math id="IM28"><mml:mrow><mml:mi>l</mml:mi><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> is the expected number of rows with exactly <italic>k</italic> write requests applied to them. Each <inline-formula id="IE29"><mml:math id="IM29"><mml:mrow><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> is computed as <inline-formula id="IE30"><mml:math id="IM30"><mml:mrow><mml:mi>Pr</mml:mi><mml:mo>⁡</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:msubsup><mml:mi>O</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="true">]</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mtable><mml:mtr><mml:mtd><mml:mi>m</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>k</mml:mi></mml:mtd></mml:mtr></mml:mtable><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:msup><mml:mi>l</mml:mi><mml:mi>k</mml:mi></mml:msup></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo>−</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>. Hence, we obtain:
<disp-formula id="E8"><mml:math id="M8"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccessRate</mml:mtext><mml:mo stretchy="true">]</mml:mo><mml:mo>≈</mml:mo><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mo>α</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo>α</mml:mo><mml:mo>!</mml:mo></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo>α</mml:mo></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mo>α</mml:mo><mml:mo>+</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mo>α</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>!</mml:mo></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mfrac><mml:mi>m</mml:mi><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mo>α</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></disp-formula>
We solve this equation for <italic>l</italic>, given the expected success rate <inline-formula id="IE31"><mml:math id="IM31"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="true">[</mml:mo><mml:mtext>SuccessRate</mml:mtext><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula>, the collision recovery factor <italic>α</italic> and <italic>m</italic> the number of write requests to be written in a certain epoch. If this method is used throughout both epochs, colliding requests from the query phase will have to be recovered before the response phase can begin.</p>
        <p>Due to the nature of our query/response model, we can expect collisions to occur more often in the response phase. Hence, we will can build the system using different collision recovery factors <italic>α<sub>q</sub></italic> for the query phase and <italic>α<sub>r</sub></italic> for the response phase, with <inline-formula id="IE32"><mml:math id="IM32"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>≥</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>.</p>
      </sec>
    </sec>
    <sec>
      <title>3.2 <italic>N</italic>-server construction</title>
      <p>We now present the generalized model for the case with <italic>n</italic> servers and a database with <italic>l</italic> rows. We use collision parameters <italic>α<sub>q</sub></italic> and <italic>α<sub>r</sub></italic> for the query and response phase, respectively. The various steps of the construction are illustrated in <xref ref-type="fig" rid="bty269-F2">Figure 2</xref>.
</p>
      <fig id="bty269-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p><italic>n</italic>-server write request processing. At the end of the epoch the Master Server publishes the database with all the write requests and the nodes will be reset to hold an empty database</p>
        </caption>
        <graphic xlink:href="bty269f2"/>
      </fig>
      <sec>
        <title>3.2.1 Query phase</title>
        <p>Assume user <italic>A</italic> wants to query gene <italic>X<sub>A</sub></italic>, but does not want to reveal that she is the person querying it. As in the construction presented in Section 2.4, <italic>A</italic> builds her write request, consisting of (<italic>X<sub>A</sub></italic>, PK<sub><italic>A</italic></sub>), where PK<sub><italic>A</italic></sub> is her public key, aiming to write at row <italic>i</italic> in the database. She picks random numbers <inline-formula id="IE33"><mml:math id="IM33"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE34"><mml:math id="IM34"><mml:mrow><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, where <italic>l</italic> is the size of the database, <italic>n</italic> the number of nodes the write request will be sent to, and <italic>α<sub>q</sub></italic> the number of allowed collisions. The query write request vectors are then constructed as follows:
<disp-formula id="E9"><mml:math id="M9"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>11</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mtext>PK</mml:mtext><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mi>X</mml:mi><mml:mi>A</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mtext>PK</mml:mtext><mml:mi>A</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mi>X</mml:mi><mml:mi>A</mml:mi><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mtext>PK</mml:mtext><mml:mi>A</mml:mi><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>11</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>r</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
        <p>The querying user A ends <inline-formula id="IE35"><mml:math id="IM35"><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:msub><mml:mo>′</mml:mo><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> to server <italic>j</italic> for each <italic>j</italic>, <inline-formula id="IE36"><mml:math id="IM36"><mml:mrow><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>j</mml:mi><mml:mo>≤</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE37"><mml:math id="IM37"><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE38"><mml:math id="IM38"><mml:mrow><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mi>j</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:msup><mml:mi>v</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula>. We also consider the special case of <inline-formula id="IE39"><mml:math id="IM39"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula>, when there is no recovery for collisions, but, instead, we adjust the database size according to the minimizing collisions case. The servers collect write requests until the end of the epoch and then send their local databases to the master server, which will combine them to reveal the database.</p>
      </sec>
      <sec>
        <title>3.2.2 Response phase</title>
        <p>As the database with the queries is published, the response phase begins. As discussed in Section 2.4, we can rely on MME’s algorithm to generate matches on existing data from the platform, encrypt the contact details of the relevant users with an interest in the same gene and extend it to allow for voluntary responses. More specifically, user <italic>B</italic> can add their contact details <italic>C<sub>B</sub></italic> by sending a write request as a share of <inline-formula id="IE40"><mml:math id="IM40"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mi>E</mml:mi><mml:mi>n</mml:mi><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:msub><mml:mrow><mml:mtext>PK</mml:mtext></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula>, in a similar manner to the first epoch. That is, first, she picks random <inline-formula id="IE41"><mml:math id="IM41"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and forms the following vectors:
<disp-formula id="E10"><mml:math id="M10"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msup><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msup><mml:mi>c</mml:mi><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow><mml:mo>′</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo> </mml:mo><mml:mo>⋮</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>+</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
        <p>User <italic>B</italic> then sends <inline-formula id="IE42"><mml:math id="IM42"><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>…</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> to server <italic>S<sub>j</sub></italic>. At the end of this epoch, the results are being published in a column adjacent to the queried gene and the public encryption key. In case of collisions, the individual ciphertexts can be recovered up to <italic>α<sub>r</sub></italic> collisions. Finally, the querying users can use the database to find the row of interest (in this case <italic>i</italic>) and decrypt the contact details received and contact the person.</p>
      </sec>
    </sec>
    <sec>
      <title>3.3 Experimental evaluation</title>
      <p>We now present an experimental evaluation of AnoniMME, aiming to demonstrate its practicality for real-world deployment.</p>
      <p>We have implemented the <italic>n</italic>-server construction (Section 3.2) using Python 3.6 and evaluated our prototype on a Macbook Pro running MacOS Sierra 10.12.6 and equipped with a 2.7 GHz Intel i5 processor, and 16GB of RAM. Experiments are performed in two different settings, with two and six node servers, respectively, and always averaged over 1000 executions. We also use three different epoch sizes, namely, 100, 500 and 1000 write requests per epoch during the query phase. For the response phase, we keep the database size fixed from the query phase. Overall, we evaluate running times needed to generate the write requests and the bandwidth overhead supporting the recovery of 2, 5 and 10 colliding messages, all on the client side (i.e. one request per epoch).</p>
      <p>The servers run Flask with RESTful interface, so we use HTTP requests to send the messages and the payload is built in JSON, therefore, we measure, in bytes, the size of the JSON payload (plus HTTP headers) to estimate the total bandwidth required for sending write requests.</p>
      <p>On the client side, the cryptographic layer includes generating public/private keys (done only once) and building the vectors to be sent to the <italic>n</italic> servers as part of the write request, which incurs O(<italic>n</italic>) complexity. Gene name and contact details are assumed to be no longer than 64 characters, while random numbers used for vector generation during query phase are up to 1 024 bits long, for <inline-formula id="IE43"><mml:math id="IM43"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE44"><mml:math id="IM44"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>. For the response phase, the length of the random values varies according to the collision recovery factor <italic>α<sub>r</sub></italic>. For <inline-formula id="IE45"><mml:math id="IM45"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>5</mml:mn></mml:mrow></mml:math></inline-formula>, their length is 2560 bits, while for <inline-formula id="IE46"><mml:math id="IM46"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula> it is 5120.</p>
      <p>Finally, note that plausible gene queries are generated using the set of gene symbols (e.g. ‘BRCA2’) from <ext-link ext-link-type="uri" xlink:href="http://gfuncpathdb.ucdenver.edu/iddrc/iddrc/data/officialGeneSymbol.html">http://gfuncpathdb.ucdenver.edu/iddrc/iddrc/data/officialGeneSymbol.html</ext-link>.</p>
      <sec>
        <label>3.3.1</label>
        <title>Two node servers</title>
        <p>We start with the setting involving two node servers and a master server, considering epochs of size 100, 500 and 1000. As mentioned above, we evaluate bandwidth overhead and running times required for query and response write requests.</p>
        <p>The database size required for each of the three test cases is calculated according to the method presented in Section 3.1 for minimizing collisions, thus, <inline-formula id="IE47"><mml:math id="IM47"><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mn>19.5</mml:mn><mml:mi>m</mml:mi></mml:mrow></mml:math></inline-formula>, where <italic>l</italic> denotes the number of rows required and <italic>m</italic> is the number of write requests for the epoch. It follows that the <italic>l</italic> amounts to 2000, 10 000 and 20 000 rows for <italic>m</italic> equal to 100, 500 and 1000, respectively.</p>
        <p>Running times for both the query write and the response (considering <inline-formula id="IE48"><mml:math id="IM48"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo>,</mml:mo><mml:mn>10</mml:mn><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>) are shown in <xref ref-type="fig" rid="bty269-F3">Figure 3</xref>. Overall, we find that, during the query phase, with a database size of 2000 rows, it takes approximately 0.014 s to generate vectors in our testbed. Running times scale linearly, i.e. it takes 0.062 s with 10 000 rows and 0.126 s with 20 000 rows. The bandwidth overhead, shown in <xref ref-type="fig" rid="bty269-F4">Figure 4</xref>, ranges from 2.5 MB for the smallest database size to 25 MB for the largest case considered in our test cases, which can be considered an acceptable amount of traffic expected from the client side.
</p>
        <fig id="bty269-F3" orientation="portrait" position="float">
          <label>Fig. 3.</label>
          <caption>
            <p>Two nodes running times for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions</p>
          </caption>
          <graphic xlink:href="bty269f3"/>
        </fig>
        <fig id="bty269-F4" orientation="portrait" position="float">
          <label>Fig. 4.</label>
          <caption>
            <p>Two nodes bandwidth averages for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions</p>
          </caption>
          <graphic xlink:href="bty269f4"/>
        </fig>
        <p>For the response phase, we find that, when <inline-formula id="IE49"><mml:math id="IM49"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>, the results are similar to the query phase since responding users need to generate two vectors in order to allow collision recovery, same as for the querying user. When <italic>α<sub>r</sub></italic> equals 5 or 10, we notice an increase in both running times and bandwidth. Nonetheless, computational complexity is still acceptable, since, even with the largest database size, write request generation takes less than 0.5 s for <inline-formula id="IE50"><mml:math id="IM50"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>5</mml:mn></mml:mrow></mml:math></inline-formula> and less than 1.5 s for <inline-formula id="IE51"><mml:math id="IM51"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>. Communication overhead, on the other hand, increases to 160 MB and 617 MB, respectively, with the largest database size.</p>
        <p>However, one can adjust the collision minimization parameter so that 10-way collision recovery is not needed.</p>
      </sec>
      <sec>
        <label>3.3.2</label>
        <title>Six node servers</title>
        <p>We also experiment with an instantiation of AnoniMME using six node servers, thus mirroring the current MME setting, which involves seven members. Once again, we consider three settings (100, 500 and 1000 write requests per epoch), and obtain the resulting database size based on the recovery from collisions method discussed in Section 3.1. We support recovery from two colliding messages for the query phase, i.e. <inline-formula id="IE52"><mml:math id="IM52"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>q</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>. Therefore, the number of rows required is <inline-formula id="IE53"><mml:math id="IM53"><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>2.7</mml:mn><mml:mi>m</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:mfrac></mml:mrow></mml:math></inline-formula>, where <italic>m</italic> is the number of write requests for the epoch, thus, <italic>l</italic> equals 135 675 and 1350 for <italic>m</italic> = 100, 500 and 1000, respectively. As per the response phase, we run tests with different values <inline-formula id="IE54"><mml:math id="IM54"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo>,</mml:mo><mml:mn>10</mml:mn><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>, considering the database size fixed as for the query phase.</p>
        <p>Once again, we estimate running times (<xref ref-type="fig" rid="bty269-F5">Fig. 5</xref>) and the bandwidth overhead (<xref ref-type="fig" rid="bty269-F6">Fig. 6</xref>). Even though this requires more vectors to be generated by the users compared to the two-node setting (Section 3.3.1), we observe a considerable decrease in both running times and bandwidth overhead for the same epoch sizes due to the decreased number of rows in the database. Specifically, computational complexity is again linear over all test cases, but the write request generation taking less than half the time. There is also a big improvement in terms of communication complexity: even in the most bandwidth-heavy case (i.e. <inline-formula id="IE55"><mml:math id="IM55"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>), with 1000 write requests per epoch, we observe a 5-fold improvement, with bandwidth decreasing from 617 MB to 125 MB.
</p>
        <fig id="bty269-F5" orientation="portrait" position="float">
          <label>Fig. 5.</label>
          <caption>
            <p>Six nodes running times for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions</p>
          </caption>
          <graphic xlink:href="bty269f5"/>
        </fig>
        <fig id="bty269-F6" orientation="portrait" position="float">
          <label>Fig. 6.</label>
          <caption>
            <p>Six nodes bandwidth averages for query write request, response write request with recovery from 2 collisions, response write request with recovery from 5 collisions, response write request with recovery from 10 collisions </p>
          </caption>
          <graphic xlink:href="bty269f6"/>
        </fig>
        <p>On the other hand, the query phase is less efficient than the response phase (with <inline-formula id="IE56"><mml:math id="IM56"><mml:mrow><mml:msub><mml:mo>α</mml:mo><mml:mi>r</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>), compared to the two-node setting, since the querying user now has to generate two vectors for each gene so that collision recovery is possible, hence, four vectors in total; whereas, the responding user only generates two vectors.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>In this section, we discuss the experimental data, as well as provide an overview of related work.</p>
    <sec>
      <title>4.1 Remarks</title>
      <p>Our experimental evaluation attests to the practicality of using AnoniMME to bring anonymity to the MME. Overall, using the method proposed in Section 3.3.1 to recover write requests in case of collisions yields better running times and bandwidth complexities, even when the number of nodes increases.</p>
      <p>Since AnoniMME is based on Riposte (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>), one might want to compare the two systems; however, Riposte focuses on experimental results from the server’s perspective, while we evaluate performance from a user perspective.</p>
      <p>Also note that the bandwidth overhead in our <italic>n</italic>-server construction is non-negligible, especially with a high collision recovery factor and increasing database sizes (as discussed in Section 3.3.1). A possible solution would be to use distributed point functions to reduce bandwidth complexity, similar to Riposte. However, we leave this to future work.</p>
      <p>As the anonymity set size in AnoniMME corresponds to the number of users querying in a given epoch, one could increase it by requiring users to send empty queries to the system, following a certain probability distribution. The write requests would be formed as discussed in Section 3.2, although, instead of inputting a gene, the public key, or the contact details, the users just send an empty query. This is also used in Riposte, to minimize statistical disclosure attacks on their platform.</p>
      <p>Finally, note that our implementation currently allows for 64 character messages, thus, queries can also include phenotypes from the HPO (as currently supported by MME), although, to ease of presentation we have discussed our experiments by only considering gene names. In future work, we plan to conduct a user study simulating a real-world deployment of AnoniMME with users of the MME, aiming to evaluate its usability with respect to anonymity protection, delays introduced by epochs, etc.</p>
    </sec>
    <sec>
      <title>4.2 Related work</title>
      <p>Rapid and effective progress in genomics and personalized medicine is often promoted as being dependent on the ability to share sequenced genomes, and make them accessible to researchers for different research purposes. However, it is often hard to share data due to privacy, ethical, legal and informed consent hurdles. To address these issues, a few privacy-preserving methods have been presented to facilitate genomic data sharing. <xref rid="bty269-B7" ref-type="bibr">Kamm <italic>et al.</italic> (2013)</xref> use secret sharing for distributing data among several entities. Using secure multi-party computations on the data, computations can be done across multiple independent entities, without violating the privacy of individual donors or leaking the data to third parties. Then, <xref rid="bty269-B12" ref-type="bibr">Wang <italic>et al.</italic> (2015)</xref> allow clinicians to find similar patients in bio-repositories, with similarity being defined as the edit distance. Their construction is based on a combination of a novel genomic edit distance approximation algorithm and new construction of private set difference size protocols. <xref rid="bty269-B2" ref-type="bibr">Chen <italic>et al.</italic> (2017)</xref> introduce a framework using Intel’s Software Guard Extension and hardware for trustworthy computations. This way, secure and distributed computation over encrypted data is performed, respecting institutional policies and regulations for protected health information.</p>
      <p>Another initiative developed by GA4GH, besides MME, is the Beacon Project (<xref rid="bty269-B4" ref-type="bibr">Global Alliance for Genomics and Health, 2016</xref>); a beacon is a service that any institution can implement to share genetic data. Users can query the system through a federated search engine, the Beacon Network. The queries are of the form ‘<italic>Do you have any genomes with an ‘A’ at position 100 735 on chromosome 3?’</italic>, and the beacon responds with either ‘Yes’ or ‘No’, keeping all other sequence data concealed. This kind of queries can be used to either search all beacons or specific databases. The result is then shown as a list of databases where the allele has been previously observed, including the institution that holds that database. <xref rid="bty269-B10" ref-type="bibr">Shringarpure and Bustamante (2015)</xref> present an attack on beacons, showing that re-identification is possible using a likelihood-ratio test. Mitigations for this attack are presented by <xref rid="bty269-B9" ref-type="bibr">Raisaro <italic>et al.</italic> (2017)</xref>, however these mitigations comes with a diminished utility of the beacon. The original attack has been improved by <xref rid="bty269-B11" ref-type="bibr">Thenen <italic>et al.</italic> (2017)</xref> in terms of number of queries needed to determine the presence of an individual in a beacon. Note that these attacks do not apply to MME, since no genotype information or aggregate data is released publicly and the querying is done only on specific genes, with no genotype information.</p>
      <p>Overall, a number of attacks to anonymized/de-identified genomic data have been presented. <xref rid="bty269-B6" ref-type="bibr">Homer <italic>et al.</italic> (2008)</xref> show how to detect the presence of an individual genotype in a mixture of pooled DNA, while <xref rid="bty269-B5" ref-type="bibr">Gymrek <italic>et al.</italic> (2013)</xref> recover the surnames of individuals from a genomic data repository by profiling short tandem repeats on the Y chromosome, querying recreational genealogy databases and relying on metadata like age and state to recover the identity of the target.</p>
      <p>As already mentioned, our construction is similar in nature to Riposte (<xref rid="bty269-B3" ref-type="bibr">Corrigan-Gibbs <italic>et al.</italic>, 2015</xref>), an anonymous broadcast messaging system, which also built using Reverse PIR. Riposte allows a large number of clients to post messages anonymously on a ‘bulletin board’ maintained at a small set of servers. The main goal of the system is to provide a platform for whistleblowers, allowing them to anonymously post 160 byte length messages. Besides using Reverse PIR in a different setting, and thus addressing different challenges in scalability, also note that our AnoniMME framework also allows replies to messages.</p>
    </sec>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>This paper presented AnoniMME, a framework geared to bring anonymity to the MME platform. Specifically, AnoniMME supports anonymous queries, by relying on Reverse PIR, while mirroring the functionalities of MME. Queries include the gene name as in MME, but also the querying user’s public key and are collected during epochs whose length is based on the number of write requests. By taking advantage of the underlying MME matching protocol, these queries can be seamlessly responded to, without publicly revealing the contact details of other researchers/clinicians which generated a match, by using the public key provided to encrypt the match. Also, other users can provide their (encrypted) contact details if they so wish.</p>
    <p>The proposed protocol is compatible with the functionalities and the requirements of MME, but adds anonymous queries with a low overhead, as we demonstrated empirically. Thus, we are confident that AnoniMME can eventually be deployed in the wild and further encouraging researchers to share genomic data, by minimizing the possibility of exposing confidential research when using MME.</p>
    <p>As part of future work, we plan to include and experimentally evaluate an extension to malicious users in our prototype, support the execution of the response phase over multiple query epochs, further reduce bandwidth complexity and perform a user study to evaluate its usability.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgement</title>
    <p>The authors thank Christophe Dessimoz for valuable feedback provided, as well as insights from users of the platform.</p>
    <sec>
      <title>Funding</title>
      <p>This work was supported by a Google Faculty Award on Enabling Progress in Genomic Research via Privacy-Preserving Data Sharing.</p>
      <p><italic>Conflict of Interest</italic>: none declared.</p>
    </sec>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="bty269-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Buske</surname><given-names>O.J.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>The Matchmaker Exchange API: automating patient matching through the exchange of structured phenotypic and genotypic profiles</article-title>. <source>Human Mutat</source>., <volume>36</volume>, <fpage>922</fpage>–<lpage>927</lpage>.</mixed-citation>
    </ref>
    <ref id="bty269-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Chen</surname><given-names>F.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>PRINCESS: privacy-protecting Rare disease International Network Collaboration via Encryption through Software guard extensionS</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>871</fpage>–<lpage>878</lpage>.<pub-id pub-id-type="pmid">28065902</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Corrigan-Gibbs</surname><given-names>H.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) Riposte: an anonymous messaging system handling millions of users. In: <italic>Proceedings of the 2015 IEEE Symposium on Security and Privacy</italic>, IEEE Computer Security, pp. 321–338.</mixed-citation>
    </ref>
    <ref id="bty269-B4">
      <mixed-citation publication-type="journal"><collab>Global Alliance for Genomics and Health</collab>. (<year>2016</year>) 
<article-title>A federated ecosystem for sharing genomic, clinical data</article-title>. <source>Science</source>, <volume>352</volume>, <fpage>1278</fpage>–<lpage>1280</lpage>.<pub-id pub-id-type="pmid">27284183</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gymrek</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>Identifying personal genomes by surname inference</article-title>. <source>Science (New York, N.Y.)</source>, <volume>339</volume>, <fpage>321</fpage>–<lpage>324</lpage>.</mixed-citation>
    </ref>
    <ref id="bty269-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Homer</surname><given-names>N.</given-names></name></person-group><etal>et al</etal> (<year>2008</year>) 
<article-title>Resolving individuals contributing trace amounts of DNA to highly complex mixtures using high-density SNP genotyping microarrays</article-title>. <source>PLOS Genet</source>., <volume>4</volume>, <fpage>e1000167</fpage>.<pub-id pub-id-type="pmid">18769715</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kamm</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>A new way to protect privacy in large-scale genome-wide association studies</article-title>. <source>Bioinformatics</source>, <volume>29</volume>, <fpage>886</fpage>–<lpage>893</lpage>.<pub-id pub-id-type="pmid">23413435</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Philippakis</surname><given-names>A.A.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>The Matchmaker Exchange: a platform for rare disease gene discovery</article-title>. <source>Human Mutat</source>., <volume>36</volume>, <fpage>915</fpage>–<lpage>921</lpage>.</mixed-citation>
    </ref>
    <ref id="bty269-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Raisaro</surname><given-names>J.L.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Addressing Beacon re-identification attacks: quantification and mitigation of privacy risks</article-title>. <source>J. Am. Med. Inform. Assoc</source>., <volume>24</volume>, <fpage>799</fpage>–<lpage>805</lpage>.<pub-id pub-id-type="pmid">28339683</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Shringarpure</surname><given-names>S.S.</given-names></name>, <name name-style="western"><surname>Bustamante</surname><given-names>C.D.</given-names></name></person-group> (<year>2015</year>) 
<article-title>Privacy risks from genomic data-sharing Beacons</article-title>. <source>Am. J. Human Genet</source>., <volume>97</volume>, <fpage>631</fpage>–<lpage>646</lpage>.<pub-id pub-id-type="pmid">26522470</pub-id></mixed-citation>
    </ref>
    <ref id="bty269-B11">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Thenen</surname><given-names>N.v.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) Re-identification of individuals in genomic data-sharing Beacons via allele inference. <italic>bioRxiv</italic>.</mixed-citation>
    </ref>
    <ref id="bty269-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Wang</surname><given-names>X.S.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) Efficient genome-wide, privacy-preserving similar patient query based on private edit distance. In: <italic>Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security</italic>, ACM. pp. 492–503.</mixed-citation>
    </ref>
  </ref-list>
</back>
