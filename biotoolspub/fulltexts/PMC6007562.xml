<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Gigascience</journal-id>
    <journal-id journal-id-type="iso-abbrev">Gigascience</journal-id>
    <journal-id journal-id-type="publisher-id">gigascience</journal-id>
    <journal-title-group>
      <journal-title>GigaScience</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2047-217X</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6007562</article-id>
    <article-id pub-id-type="doi">10.1093/gigascience/giy016</article-id>
    <article-id pub-id-type="publisher-id">giy016</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technical Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Boutiques: a flexible framework to integrate command-line applications in computing platforms</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Glatard</surname>
          <given-names>Tristan</given-names>
        </name>
        <!--<email>tristan.glatard@concordia.ca</email>-->
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="corresp" rid="cor1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kiar</surname>
          <given-names>Gregory</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Aumentado-Armstrong</surname>
          <given-names>Tristan</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Beck</surname>
          <given-names>Natacha</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bellec</surname>
          <given-names>Pierre</given-names>
        </name>
        <xref ref-type="aff" rid="aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bernard</surname>
          <given-names>Rémi</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bonnet</surname>
          <given-names>Axel</given-names>
        </name>
        <xref ref-type="aff" rid="aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Brown</surname>
          <given-names>Shawn T</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Camarasu-Pop</surname>
          <given-names>Sorina</given-names>
        </name>
        <xref ref-type="aff" rid="aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Cervenansky</surname>
          <given-names>Frédéric</given-names>
        </name>
        <xref ref-type="aff" rid="aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Das</surname>
          <given-names>Samir</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ferreira da Silva</surname>
          <given-names>Rafael</given-names>
        </name>
        <xref ref-type="aff" rid="aff6">6</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Flandin</surname>
          <given-names>Guillaume</given-names>
        </name>
        <xref ref-type="aff" rid="aff7">7</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Girard</surname>
          <given-names>Pascal</given-names>
        </name>
        <xref ref-type="aff" rid="aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Gorgolewski</surname>
          <given-names>Krzysztof J</given-names>
        </name>
        <xref ref-type="aff" rid="aff8">8</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Guttmann</surname>
          <given-names>Charles R G</given-names>
        </name>
        <xref ref-type="aff" rid="aff9">9</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hayot-Sasson</surname>
          <given-names>Valérie</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Quirion</surname>
          <given-names>Pierre-Olivier</given-names>
        </name>
        <xref ref-type="aff" rid="aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Rioux</surname>
          <given-names>Pierre</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Rousseau</surname>
          <given-names>Marc-Étienne</given-names>
        </name>
        <xref ref-type="aff" rid="aff10">10</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Evans</surname>
          <given-names>Alan C</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
    </contrib-group>
    <aff id="aff1"><label>1</label>Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada</aff>
    <aff id="aff2"><label>2</label>McGill University, Montreal, Canada</aff>
    <aff id="aff3"><label>3</label>Montreal Neurological Institute, Montreal, Canada</aff>
    <aff id="aff4"><label>4</label>Centre de Recherche de l’Institut de Gériatrie de Montréal CRIUGM, Montréal, QC, Canada</aff>
    <aff id="aff5"><label>5</label>University of Lyon, CNRS, INSERM, CREATIS, Villeurbanne, France</aff>
    <aff id="aff6"><label>6</label>University of Southern California, Information Sciences Institute, Marina del Rey, CA, USA</aff>
    <aff id="aff7"><label>7</label>Wellcome Trust Centre for Neuroimaging, London, UK</aff>
    <aff id="aff8"><label>8</label>Department of Psychology, Stanford University, Stanford, California, USA</aff>
    <aff id="aff9"><label>9</label>Center for Neurological Imaging, Department of Radiology, Brigham and Women's Hospital,, Boston, Massachusetts, USA</aff>
    <aff id="aff10"><label>10</label>Compute Canada, 155 University Ave, Suite 302, Toronto, ON M5H 3B7, Canada</aff>
    <author-notes>
      <corresp id="cor1"><bold>Correspondence address</bold>. Tristan Glatard, Department of Computer Science and Software Engineering, Concordia University, 1455 De Maisonneuve Blvd. W., EV 3.139, Montreal, Quebec, Canada H3G 1M8. E-mail: <email>tristan.glatard@concordia.ca</email></corresp>
    </author-notes>
    <pub-date pub-type="epub" iso-8601-date="2018-03-23">
      <day>23</day>
      <month>3</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>5</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>23</day>
      <month>3</month>
      <year>2018</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>7</volume>
    <issue>5</issue>
    <elocation-id>giy016</elocation-id>
    <history>
      <date date-type="accepted">
        <day>20</day>
        <month>2</month>
        <year>2018</year>
      </date>
      <date date-type="received">
        <day>07</day>
        <month>11</month>
        <year>2017</year>
      </date>
      <date date-type="rev-recd">
        <day>01</day>
        <month>2</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="giy016.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>We present Boutiques, a system to automatically publish, integrate, and execute command-line applications across computational platforms. Boutiques applications are installed through software containers described in a rich and flexible JSON language. A set of core tools facilitates the construction, validation, import, execution, and publishing of applications. Boutiques is currently supported by several distinct virtual research platforms, and it has been used to describe dozens of applications in the neuroinformatics domain. We expect Boutiques to improve the quality of application integration in computational platforms, to reduce redundancy of effort, to contribute to computational reproducibility, and to foster Open Science.</p>
    </abstract>
    <kwd-group kwd-group-type="keywords">
      <kwd>application integration</kwd>
      <kwd>containers</kwd>
      <kwd>neuroinformatics</kwd>
    </kwd-group>
    <counts>
      <page-count count="11"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="sec1">
    <title>Introduction</title>
    <p>Computational platforms such as web services, portals, science gateways, workflow engines, and virtual research environments commonly integrate third-party applications to enable various types of data processing. Applications, however, are often manually and repeatedly integrated in such platforms, whereas automating and sharing this effort would improve computational reproducibility [<xref rid="bib1" ref-type="bibr">1</xref>, <xref rid="bib2" ref-type="bibr">2</xref>] and contribute to Open Science. Meanwhile, container systems such as Docker<xref ref-type="fn" rid="fn1"><sup>1</sup></xref> and Singularity [<xref rid="bib3" ref-type="bibr">3</xref>] have emerged to facilitate the sharing and migration of software by defining immutable, reusable execution environments.</p>
    <p>We present Boutiques, a system to publish, integrate, and execute command-line applications across platforms (see Fig. <xref ref-type="fig" rid="fig1">1</xref>). In Boutiques, a command line is described using a flexible template comprising the inputs it requires and the outputs it produces. Inputs may be passed directly on the command line or through configuration files. They may also be interdependent, for instance, mutually exclusive. Such formal descriptions, simply referred to as <italic>descriptors</italic>, can be parsed in any programming language, describe command lines regardless of their implementation, and link to a container image where the application is installed. Boutiques descriptors allow for automatic application integration in platforms and advanced validation of input values to prevent errors. Boutiques descriptors are intended to be produced by application developers, stored alongside their application, indexed by common repositories, and consumed by execution platforms. A set of core tools facilitates the construction, validation, import, execution, and publishing of Boutiques descriptors.</p>
    <fig id="fig1" orientation="portrait" position="float">
      <label>Figure 1.</label>
      <caption>
        <p>Publication, integration, and execution of applications with Boutiques.</p>
      </caption>
      <graphic xlink:href="giy016fig1"/>
    </fig>
    <p>The remainder of this article describes the Boutiques system and reports on its adoption by platforms and applications in the neuroinformatics domain, our primary field of interest. It closes on a discussion and comparison with related systems.</p>
  </sec>
  <sec id="sec2">
    <title>System description</title>
    <p>In Boutiques, applications are described with a JSON descriptor that specifies the command-line template, inputs, and outputs. The descriptor may point to a container where the application and all its dependencies are installed. It may also contain an invocation schema used for input validation (this will be created at runtime if it is not found). At runtime, the execution platform builds the command line from the descriptor and the values entered by the user. The platform runs the command line on the execution infrastructure, e.g., a server, a cluster, or a cloud, within a container whenever available. To build and run the command line, the platform may rely on the Boutiques core tools, in particular, the validator and executor, packaged through the <monospace>bosh</monospace> command-line utility.</p>
    <sec id="sec2-1">
      <title>Command-line description</title>
      <p>The core component of the descriptor is a command-line template complying to the syntax of the <monospace>sh</monospace> UNIX shell, the default shell on most of the Linux distributions and on OS X. The command-line template is a single string that may contain placeholders for input and output values, called value keys. It may also encompass several commands separated by <monospace>sh</monospace> constructs such as semicolons, pipes (<monospace>|</monospace>), or ampersands (<monospace>&amp;</monospace>), to facilitate the embedding of basic operations on the command line, for instance, directory creation, input decompression, or output archival.</p>
      <p>Here is an example of a typical command-line template:</p>
      <p><monospace>exampleTool_1</monospace> [<monospace>CONFIG_FILE</monospace>] [<monospace>STRING_INPUT</monospace>] [<monospace>FILE_INPUT</monospace>] |</p>
      <p><monospace>exampleTool_2</monospace> [<monospace>FLAG_INPUT</monospace>] [<monospace>NUMBER_INPUT</monospace>] &gt;&gt; [<monospace>LOG</monospace>].<monospace>txt</monospace></p>
      <p>The template contains five value keys, identified by square brackets, that will be replaced by values and file names according to the user input when the application is executed. Flags will also be added wherever appropriate, with customizable separators. Value keys have to be unique but do not have to comply to any particular syntax. Note the use of the <monospace>|</monospace> operator to chain applications and of the <monospace>&gt;&gt;</monospace> operator to redirect the standard output to a file.</p>
    </sec>
    <sec id="sec2-2">
      <title>Input description</title>
      <p><italic>General properties</italic> Inputs must have a name, a unique identifier, and a type. They may be optional, have a description, a value key, a flag and flag separator, and a default value. Inputs may also be ordered lists; in this case, value keys are substituted by the space-separated list of input values.</p>
      <p><italic>Types</italic> Inputs may be of type <monospace>String</monospace>, <monospace>Number</monospace>, <monospace>Flag</monospace>, or <monospace>File</monospace>. <monospace>File</monospace> may also represent a directory. Types can be restricted to a specific set of values or to a specific range.</p>
      <p><italic>Groups and dependencies</italic> Groups of inputs may be defined with an identifier, name, and list of input identifiers. Groups may be used to improve the presentation in a graphical user interface and to specify the following constraints among inputs: (1) <monospace>mutually-exclusive</monospace>: only one member in the group may have a value; (2) <monospace>one-is-required</monospace>: at least one member in the group must have a value; (3) <monospace>all-or-none</monospace>: if any of the members have a value, then all members must have a value. Dependencies among inputs may also be defined regardless of a particular group: an input may (1) require a list of inputs and (2) disable a list of inputs.</p>
      <p>Listing <xref ref-type="fig" rid="lig1">1</xref> shows the definition of an input in the command line exemplified above. According to this definition and assuming that the input value entered by the user is 0.3, the string <monospace>[NUMBER_INPUT]</monospace> will be replaced by <monospace>-n=0.3</monospace> on the command line.</p>
      <fig id="lig1" orientation="portrait" position="float">
        <label>Listing 1.</label>
        <caption>
          <p>Example of a <monospace>Number</monospace>-type input.</p>
        </caption>
        <graphic xlink:href="giy016l1"/>
      </fig>
    </sec>
    <sec id="sec2-3">
      <title>Output</title>
      <p>Application outputs are files and directories that need to be delivered to the user once the execution is complete. Outputs need to be specified so that computing platforms can identify the files that must be saved after the execution and raise errors if they are not present.</p>
      <p>In Boutiques, output files must have a unique identifier, a name, and a path template that specifies the file or directory name. Path templates may include input value keys in case output files are named after the input values. In this case, input values may be stripped from specific strings, e.g., file extensions, before being substituted in the path template. Output files may also have a description, a command-line flag, a flag separator, and a value key in case they appear on the command line. They may be optional in case the file is not always produced by the application, for instance, when it is produced only when a particular flag is activated. They may also be lists; in this case, the path template must contain a wildcard (<monospace>*</monospace>) matching any string of characters and defining the pattern used to match the output files in the list.</p>
      <p>Listing <xref ref-type="fig" rid="lig2">2</xref> shows the definition of an output file in the command line exemplified before. According to this definition and assuming that the string input value entered by the user is <monospace>foo.csv</monospace>, the string <monospace>[LOG]</monospace> will be replaced by <monospace>log-foo</monospace> on the command line.</p>
      <fig id="lig2" orientation="portrait" position="float">
        <label>Listing 2.</label>
        <caption>
          <p>Example of an output leveraging <monospace>path-template</monospace> search-and-replacement.</p>
        </caption>
        <graphic xlink:href="giy016l2"/>
      </fig>
    </sec>
    <sec id="sec2-4">
      <title>Configuration files</title>
      <p>A large number of applications rely on configuration files rather than command-line options to define their input and output parameters. As the number of parameters increases, command lines rapidly become long and cumbersome, whereas configuration files allow for better structure and documentation.</p>
      <p>Configuration files may be complex though and specified in any language. For this reason, Boutiques allows application developers to specify their own template containing input and output value keys. Configuration files are specific types of output files that must have a file template that defines how they will be named and where they will be written. They may also have a value key and a flag in case they need to be passed on the command line. Listing <xref ref-type="fig" rid="lig3">3</xref> shows an example.</p>
      <fig id="lig3" orientation="portrait" position="float">
        <label>Listing 3.</label>
        <caption>
          <p>Example of a configuration input file. The file template is defined as an array of strings to allow for multi-line strings in JSON.</p>
        </caption>
        <graphic xlink:href="giy016l3"/>
      </fig>
    </sec>
    <sec id="sec2-5">
      <title>Command-line construction</title>
      <p>At runtime, a value is assigned to all the mandatory and some of the optional inputs. Algorithm <xref ref-type="fig" rid="alog1">1</xref> shows how the command line is constructed from the descriptor and the values entered. It substitutes all the value keys in the command line, output path templates, and configuration files and writes the configuration files.</p>
      <fig id="alog1" orientation="portrait" position="float">
        <label>Algorithm 1</label>
        <caption>
          <p>Command-line construction</p>
        </caption>
        <graphic xlink:href="giy016alog1"/>
      </fig>
    </sec>
    <sec id="sec2-6">
      <title>Invocation schema</title>
      <p>Rigorous input validation is an important motivation for Boutiques. For this purpose, Boutiques relies on an application-specific JSON schema, called <italic>invocation schema</italic>, to specify the input values accepted by an application. Platforms can rely on invocation schemas to validate inputs using any JSON validator, without having to develop specific code.</p>
      <p>Invocation schemas, however, are complex JSON objects. Basically, they must represent the properties described above in a formal way, including dependencies between inputs. Listing <xref ref-type="fig" rid="lig4">4</xref> shows an example of how dependencies between mutually exclusive parameters are defined in the invocation schema. To relieve application developers from the burden of having to write JSON schemas, invocation schemas can be generated automatically by the <monospace>bosh</monospace> command-line utility. The invocation schema is stored as an optional property of the Boutiques descriptor.</p>
      <fig id="lig4" orientation="portrait" position="float">
        <label>Listing 4.</label>
        <caption>
          <p>Excerpt from invocation schema showing dependencies between two mutually exclusive parameters <monospace>num_input</monospace> and <monospace>str_input</monospace>.</p>
        </caption>
        <graphic xlink:href="giy016l4"/>
      </fig>
    </sec>
    <sec id="sec2-7">
      <title>Workflow support</title>
      <p>Boutiques does not specify a particular language to build workflows from descriptors, due to the large amount of specialized frameworks to do so. However, workflows can be both composed from and described as Boutiques descriptors; workflow engines can leverage the <monospace>bosh</monospace> tools to call Boutiques applications from their descriptors; in turn, workflows can be described as Boutiques descriptors. Such a “task encapsulation” model allows for a scalable and reliable execution of workflows expressed in a variety of languages, as detailed in [<xref rid="bib4" ref-type="bibr">4</xref>].</p>
    </sec>
    <sec id="sec2-8">
      <title>Containers</title>
      <p>Applications may be installed in a container image complying to the Docker, Singularity, or rootfs format. We intentionally support multiple container formats as we anticipate that they will be used for different purposes. For instance, Docker is well suited for developers and users who manipulate applications on their local workstations or the cloud. It is well documented well maintained and has a rich ecosystem of tools to build and run containers on most operating systems. Singularity is more suited for users and platforms that need to run applications on shared computing clusters. Bridges exist among these container formats to convert container images across frameworks. For instance, a platform dedicated to high-performance computing may accept descriptors referring to Docker containers to facilitate application integration by developers and run these images on clusters using Singularity.</p>
      <p>Container images are defined from their URL (rootfs) or image name in a Docker or Singularity index. Descriptors may specify a working directory where the application has to be run, they may indicate if the image has an entry point, and they may also report a hash to accurately identify container images and detect updates.</p>
      <p>Containers were adopted because they allow for an automated and lightweight integration of application implementations in platforms. They are extremely useful to improve the reproducibility of analyses, as variations in the software environment may have an important impact on the computed results. They also have limitations, in particular, they do not specify the hardware architecture required to execute an application, which can be an issue in some cases.</p>
    </sec>
    <sec id="sec2-9">
      <title>Resource requirements</title>
      <p>Boutiques descriptors may contain requirements regarding the number of CPU cores or nodes, the amount of RAM or disk storage, and the total walltime expected for a typical execution of the application. Such properties are called “suggested resources” as we are well aware that the actual resource requirements usually depend on the input data, parameters, and hardware infrastructure.</p>
    </sec>
    <sec id="sec2-10">
      <title>Custom properties</title>
      <p>Custom properties may be added to the Boutiques specification without restriction. Custom properties are grouped together in a specific JSON object to facilitate validation. They may be useful to implement platform-specific features, but they should be used with care to avoid making applications dependent on a particular platform or replacing existing functionality already represented in the Boutiques schema.</p>
    </sec>
    <sec id="sec2-11">
      <title>Core tools</title>
      <p>Boutiques is available on Python through the PyPi package repository as “<monospace>boutiques</monospace>.” The Boutiques package exposes a command-line utility to the user, <monospace>bosh</monospace>, which contains entry points for all core functions within Boutiques. The core tools provided by Boutiques are the validator, executor (for both launch and simulation), invocation schema handler, importer, and publisher. The tools exposed through the command-line interface are also available consistently through a Python API by importing the Boutiques package. Though not a component of the Boutiques tool chain, a Jupyter Notebook tutorial exists to facilitate new users getting started with Boutiques.</p>
      <p><italic>Validator</italic> The Boutiques validator checks conformance of JSON descriptors to the Boutiques schema using a basic JSON validator. It also performs the following checks that cannot be easily implemented in JSON schema: value keys are unique among inputs, input and output identifiers are unique, input and output value keys are all included in the command line, identifiers with the same value key are mutually exclusive, value keys are not contained within each other (which would puzzle substitution), output path templates are unique (to avoid results to overwrite each other), inputs of type Flag have a command-line flag, are optional and are not lists, the default value of restricted types is part of the restriction, an input cannot both require and disable another input, required inputs cannot require or disable other parameters, group member identifiers must correspond to existing inputs and cannot appear in different groups, mutually exclusive groups cannot have members requiring other members, one-is-required groups should never have required members, and all-or-none group members must not be required.</p>
      <p><italic>Executor</italic> The executor has two modes of operation: <italic>simulate</italic> and <italic>launch</italic>. The simulate mode can generate hypothetical command lines from random values given the descriptor (and corresponding invocation schema) for debugging purposes or display the command that would be executed given a provided valid invocation. The launch mode can execute command line from a Boutiques descriptor and a set of input values represented in JSON file complying with the invocation schema. It runs the command in a container provided that the required framework (e.g., Docker) is installed. The executor can be used by application users to run applications locally or by platforms to generate command lines to be run on the execution infrastructure.</p>
      <p><italic>Invocation Schema Handler</italic> The invocation schema handler can create an invocation schema from a Boutiques descriptor and validate input data against it using a regular JSON validator. It can be used to add invocation schemas to existing descriptors. It is used by the executor if no invocation schema is present in the Boutiques descriptor being deployed.</p>
      <p><italic>Importer</italic> The importer takes Boutiques descriptors from older versions and updates them to be compliant with the most recent version of the schema. This tool can also create descriptors from selected application collections, such as BIDS apps [<xref rid="bib5" ref-type="bibr">5</xref>].</p>
      <p><italic>Publisher</italic> As Boutiques has primarily been adopted in the neuroinformatics community, the publisher gets more information about the described application (such as author, website) and adds an index to it on NeuroLinks<xref ref-type="fn" rid="fn2"><sup>2</sup></xref>, a repository containing links to neuroinformatics resources and tools. We intentionally opted for publishing descriptors to an index such as NeuroLinks rather than to a common Boutiques repository so that descriptors remain in the tool repositories and can be maintained by the tool developers directly. We are currently extending <monospace>bosh</monospace> to enable users to search for Boutiques tools in NeuroLinks using the command-line or Python API. The publishing functionality could be extended to new repositories for other domains, such as Bioconductor for bioinformatics [<xref rid="bib6" ref-type="bibr">6</xref>].</p>
    </sec>
  </sec>
  <sec sec-type="results" id="sec3">
    <title>Results</title>
    <sec id="sec3-1">
      <title>Supported platforms</title>
      <p>The import and execution of Boutiques applications are currently supported in the platforms enumerated below.</p>
      <sec id="sec3-1-1">
        <title>CBRAIN</title>
        <p>CBRAIN (<ext-link ext-link-type="uri" xlink:href="http://github.com/aces/cbrain">http://github.com/aces/cbrain</ext-link>) [<xref rid="bib7" ref-type="bibr">7</xref>] is a web platform to process data distributed into multiple storage locations on computing clusters and clouds. CBRAIN offers transparent access to remote data sources, distributed computing sites, and an array of processing and visualization tools within a controlled, secure environment. The CBRAIN service deployed at the Montreal Neurological Institute relies on the infrastructure provided by Compute Canada [<xref rid="bib8" ref-type="bibr">8</xref>]. It currently provides 500+ collaborators in 22 countries with web access to several systems, including six clusters of the Compute Canada high-performance computing infrastructure (totaling more than 100,000 computing cores and 40 PB of disk storage) and Amazon EC2. CBRAIN transiently stores about 10 million files representing more than 50 TB distributed in 42 servers. Also, 51 public data processing applications are integrated and more than 340,000 processing batches have been submitted since 2010.</p>
        <p>Applications in CBRAIN are integrated as Ruby classes that create web forms, validate parameters, and run command lines on computing resources. Boutiques is supported through a set of templates that generate such classes from the application descriptor. Two application integration modes are available:
<list list-type="bullet"><list-item><p>The descriptor is stored in a CBRAIN plugin and the Ruby classes are generated on-the-fly when CBRAIN starts. This mode allows CBRAIN developers to update all Boutiques applications at once by editing the templates. However, it does not allow for customization beyond the Boutiques schema. To provide more flexibility, we added a custom property (<monospace>cbrain:inherits-from-class</monospace>) to the Boutiques descriptor to define the Ruby class that should be used as the parent class for the application.</p></list-item><list-item><p>Ruby classes are generated from descriptors through an offline process and integrated in CBRAIN as any other application. This mode allows developers to customize applications by editing the generated Ruby classes, but the resulting applications are difficult to maintain in the long term, in particular, when the descriptors are updated.</p></list-item></list></p>
        <p>We also extended CBRAIN to enable the parallelization of workflows wrapped as Boutiques descriptors. Applications with the <monospace>cbrain:can-submit-new-tasks</monospace> custom property may submit subtasks by creating Boutiques invocations in their working directory. CBRAIN periodically scans working directories, submits the requested subtasks, and writes back an invocation identifier in the same directory. This parallelization model is simple; the application only needs to write Boutiques invocations and communication happens through the file system, and it is also powerful as it enables the parallelization of complex workflows such as the Niak ones described later.</p>
        <p>We also introduced a new list mechanism in CBRAIN to facilitate the iteration of Boutiques applications on large sets of files. CBRAIN lists are specific files that contain references to other CBRAIN files. When a list is passed to a Boutiques application, the elements in the list are either concatenated in a single command line (when the corresponding Boutiques input is a list) or a new command line is generated for every element in the list (when the input is not a list). Supporting lists as a specific CBRAIN file type allows for improved validation. For instance, lists that contain references to nonexistent or deleted files can be detected. It also allows users to edit lists using their own tools such as scripts or spreadsheet applications.</p>
      </sec>
      <sec id="sec3-1-2">
        <title>Nipype</title>
        <p>Nipype (<ext-link ext-link-type="uri" xlink:href="http://nipype.readthedocs.io/en/latest">http://nipype.readthedocs.io/en/latest</ext-link>) [<xref rid="bib9" ref-type="bibr">9</xref>] is a workflow engine widely used in neuroinformatics. Nipype workflows can be composed from Boutiques applications using the Python API. As an example, we implemented NipBIDS<xref ref-type="fn" rid="fn3"><sup>3</sup></xref>, a Nipype workflow, to process BIDS datasets using BIDS apps imported as Boutiques applications. NipBIDS iterates participant analyses on all the subjects found in a BIDS dataset and runs a group analysis if requested.</p>
      </sec>
      <sec id="sec3-1-3">
        <title>SPINE</title>
        <p>SPINE (<ext-link ext-link-type="uri" xlink:href="http://spinevirtuallab.org">http://spinevirtuallab.org</ext-link>), which stands for Structured Planning and Implementation of New Explorations, is a web-based, collaborative platform (virtual laboratory) designed to support the design and execution of experiments centered on specific scientific questions. SPINE enables distributed data collection and management, as well as experiment design, execution, and review. Boutiques will serve as SPINE's algorithm and workflow repository and enables unequivocal referencing of specific workflows applied to specified datasets within an experiment, thereby describing the provenance and facilitating the reproducibility of image-derived measurements. Workflows in SPINE may combine human image annotation with automated image processing algorithms. Future development will focus on extending Boutiques workflow descriptors to include the identification and characterization of human operators and their specific historic performance on the required tasks. SPINE is currently hosted at Brigham &amp; Women's Hospital in Boston, and supports several international projects.</p>
      </sec>
      <sec id="sec3-1-4">
        <title>VIP</title>
        <p>The Virtual Imaging Platform (VIP) [<xref rid="bib10" ref-type="bibr">10</xref>] is a web portal for medical simulation and image data analysis. VIP makes applications available as services and connects them to the biomed Virtual Organization (VO) in the European Grid Infrastructure<xref ref-type="fn" rid="fn4"><sup>4</sup></xref>. The biomed VO interconnects approximately 65 computing sites world-wide and provides access to 130 computing clusters and 5 PB of storage. The VIP service is deployed at the Creatis Laboratory<xref ref-type="fn" rid="fn5"><sup>5</sup></xref> in Lyon France, and it uses the DIRAC French national service<xref ref-type="fn" rid="fn6"><sup>6</sup></xref> to execute jobs on EGI grid and cloud resources. As of October 2017, VIP counts more than 1,000 registered users and a growing number of available applications.</p>
        <p>Until recently, applications were manually integrated in VIP as workflows written in the Gwendia [<xref rid="bib11" ref-type="bibr">11</xref>] language and executed with the MOTEUR [<xref rid="bib12" ref-type="bibr">12</xref>] engine. As of today, Boutiques is supported through an importer tool that parses the JSON descriptor and automatically generates the corresponding application workflow and the wrapper script that handles, among other things, the execution of the command line. In VIP, application workflows enable (1) iterations on input lists, (2) the generation of parallel tasks, and (3) the concatenation of multiple applications. For example, the applications used in the MICCAI challenges described below required workflows to evaluate results using the metrics defined by the challenge. Application concatenation is handled at the importer level based on predefined workflow templates.</p>
      </sec>
    </sec>
    <sec id="sec3-2">
      <title>Integrated applications</title>
      <p>Dozens of neuroinformatics applications were integrated in CBRAIN or VIP using Boutiques. The main ones are described below. Several Boutiques descriptors were published in Neurolinks through the <monospace>bosh</monospace> publisher.</p>
      <sec id="sec3-2-1">
        <title>Anatomical imaging</title>
        <p><italic>FSL</italic> Several MRI analysis applications from the FMRIB Software Library (FSL [<xref rid="bib13" ref-type="bibr">13</xref>]) were integrated in CBRAIN using Boutiques: BET, fsl_anat, FAST, and FIRST. Descriptors are on Neurolinks.</p>
        <p><italic>Anima.</italic><monospace>animaN4BiasCorrection</monospace>, an ITK-based bias field correction application from the Anima<xref ref-type="fn" rid="fn7"><sup>7</sup></xref> project was made available in VIP through Boutiques.</p>
      </sec>
      <sec id="sec3-2-2">
        <title>Functional MRI (fMRI)</title>
        <p><italic>Niak.</italic> The Niak fMRI preprocessing pipeline [<xref rid="bib14" ref-type="bibr">14</xref>], executed with the Pipeline System for Octave and Matlab (PSOM) [<xref rid="bib15" ref-type="bibr">15</xref>], was integrated in CBRAIN through Boutiques. The integration uses the CBRAIN subtasking mechanism described earlier so that even the invocations processing a single subject can be parallelized. It also allows CBRAIN to leverage the efficient agent model used in PSOM, as described in [<xref rid="bib16" ref-type="bibr">16</xref>]. The integration required some work in PSOM to facilitate its invocation as a noninteractive command-line application. The resulting CBRAIN plugin is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/SIMEXP/cbrain-plugins-psom">https://github.com/SIMEXP/cbrain-plugins-psom</ext-link>. Descriptors are on Neurolinks.</p>
        <p><italic>GinFizz</italic>. We integrated the GinFizz<xref ref-type="fn" rid="fn8"><sup>8</sup></xref> Nipype-based fMRI preprocessing pipeline in VIP with Boutiques. A few technical issues coming from the management of users in Docker containers had to be addressed. To enable the execution in Boutiques, we had to override the permissions of files and folders in the GinFizz container. We also had to install all the GinFizz pipeline components in a single container while multiple ones were used by the application initially.</p>
      </sec>
      <sec id="sec3-2-3">
        <title>Diffusion imaging</title>
        <p><italic>MRTrix3</italic> A few applications from the MRtrix3 package [<xref rid="bib17" ref-type="bibr">17</xref>]<xref ref-type="fn" rid="fn9"><sup>9</sup></xref> for diffusion MRI processing were also made available in VIP, as well as a pipeline developed at Creatis, that combines MRtrix3 and FSL applications.</p>
        <p><italic>ndmg</italic>. The NeuroData MRI to Graphs one-click connectome estimation pipeline [<xref rid="bib18" ref-type="bibr">18</xref>], developed in Python and leveraging FSL, was exported to Boutiques and is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/neurodata/boutiques-tools">https://github.com/neurodata/boutiques-tools</ext-link>. The ndmg pipeline is deployed in CBRAIN via its Boutiques descriptor and is available both through Docker and Singularity container environments.</p>
      </sec>
      <sec id="sec3-2-4">
        <title>Image simulation</title>
        <p><italic>CreaPhase</italic> The CreaPhase phase-contrast simulator, developed at Creatis, was integrated in VIP through Boutiques. The inputs had certain particularities (some needed to be enclosed in simple quotes, others were vectors of variable size enclosed in brackets) that required the post-processing of the wrapper script generated by the Boutiques importer.</p>
        <p><italic>ODIN</italic>. The Odin MRI simulator [<xref rid="bib19" ref-type="bibr">19</xref>]<xref ref-type="fn" rid="fn10"><sup>10</sup></xref> was integrated in VIP through Boutiques. Since Odin requires important amounts of computing resources, it is executed by VIP on the EGI grid that currently does not support Docker. The Docker image was used just for compilation and testing; the Odin executable was extracted from the Docker image, and the Odin wrapper script was modified accordingly.</p>
      </sec>
      <sec id="sec3-2-5">
        <title>BIDS apps</title>
        <p>BIDS apps [<xref rid="bib5" ref-type="bibr">5</xref>], an effort for the adoption of the Brain Imaging Data Structure (BIDS) in common neuroimaging pipelines, require a standardized set of input and output parameters. We developed a tool as part of the Boutiques importer to generate a descriptor for any such BIDS app. We validated this tool by importing BIDS apps containing the Statistical Parametric Mapping toolbox (SPM) [<xref rid="bib20" ref-type="bibr">20</xref>] and the ndmg pipeline mentioned above. Descriptors are on Neurolinks.</p>
      </sec>
      <sec id="sec3-2-6">
        <title>2016 MICCAI challenges</title>
        <p>We used Boutiques to integrate 23 pipelines in the VIP platform in the context of two challenges organized by the MICCAI Conference in 2016, related to the segmentation of multiple-sclerosis lesions in MR images (MSSEG challenge<xref ref-type="fn" rid="fn11"><sup>11</sup></xref>) and of tumor volumes in PET images (PETSEG challenge [<xref rid="bib21" ref-type="bibr">21</xref>]). The pipelines were integrated in VIP and executed on 205 patients in a few weeks only. Some pipelines had to be adjusted manually once integrated in the platform for the following reasons:
<list list-type="bullet"><list-item><p>A pipeline required a GPU, which we enabled through the <monospace>nvidia-docker</monospace><xref ref-type="fn" rid="fn12"><sup>12</sup></xref> tool not supported in Boutiques, although it could be a possible extension.</p></list-item><list-item><p>A pipeline required more than 10 GB of data dependencies (atlas data), which exceeded the maximum size allowed for Docker containers in our setup. We solved the issue by installing the data in a directory of the host server that we mounted in the container.</p></list-item><list-item><p>A pipeline wrote more than 10 GB of intermediate data in a temporary directory of the container located on a 2 GB partition. We solved the issue by mounting a host directory in the temporary directory.</p></list-item></list></p>
        <p>Two custom properties (<monospace>vip:miccai-challenger-email</monospace> and <monospace>vip:miccai-challenge-team-name</monospace>) were also added to the Boutiques descriptor to help post-process results in the specific context of MICCAI challenges.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="discussion" id="sec4">
    <title>Discussion</title>
    <p>With Boutiques, developers can integrate their applications once and execute them in several platforms. Boutiques removes the technological dependency to a particular platform and facilitates application migration. Although the motivating use cases were taken from neuroinformatics, our primary field of interest, nothing prevents the system from being used in other domains.</p>
    <sec id="sec4-1">
      <title>Boutiques descriptor</title>
      <p>The Boutiques descriptor specification allows the description of a wide range of applications, but it is also getting increasingly complex through additions such as invocation schemas and dependencies among inputs. Extending the Boutiques descriptor has two main goals: (1) validation: incorrect input values and execution results are more precisely detected when the application descriptor is comprehensive; (2) automation: a rich descriptor schema reduces the need for custom application wrappers, which is particularly useful for containerized applications.</p>
      <p>Nonetheless, a complex descriptor schema has a cost for application developers and platforms, which we address as follows. For developers, we maintain the set of mandatory descriptor properties as small as possible so that simple applications can be described in a few lines only (see Listing <xref ref-type="fig" rid="lig5">5</xref>). For platforms, we aim at supporting as many features as possible in the <monospace>bosh</monospace> executor so that only the following steps need to be implemented in a platform, regardless of the complexity of the descriptor:
<list list-type="order"><list-item><p>Input entry: generate the interface to enter inputs.</p></list-item><list-item><p>Input validation: create a JSON invocation from the interface, validate it against the invocation schema.</p></list-item><list-item><p>Input delivery: transfer the input files to the application execution location.</p></list-item><list-item><p>Execution: pass the invocation to the <monospace>bosh</monospace> executor to run the application.</p></list-item><list-item><p>Output delivery: from the descriptor, identify the output files and deliver them to the user.</p></list-item></list></p>
      <fig id="lig5" orientation="portrait" position="float">
        <label>Listing 5.</label>
        <caption>
          <p>A minimal Boutiques descriptor.</p>
        </caption>
        <graphic xlink:href="giy016l5"/>
      </fig>
      <p>In particular, command-line generation and advanced validation features such as dependencies between inputs are embedded in <monospace>bosh</monospace>, without requiring the platform to support the related descriptor properties.</p>
    </sec>
    <sec id="sec4-2">
      <title>Workflow support</title>
      <p>Boutiques intentionally does not provide a workflow language to compose applications, as this is already possible with numerous workflow engines. Workflows can be either composed from Boutiques applications, as we illustrated with the Nipype and MOTEUR engines, or described as Boutiques applications, as we demonstrated with the Niak fMRI preprocessing pipeline. Furthermore, the CBRAIN platform has a subtasking mechanism that allows Boutiques applications to submit tasks, which is used to parallelize workflows wrapped as Boutiques applications. Based on the CBRAIN experience, we may specify the subtasking mechanism in Boutiques so that other platforms can benefit from it. This model is powerful because it shields the Boutiques specification from specific workflow constructs and it allows a wide range of workflow engines to be described and used uniformly.</p>
    </sec>
    <sec id="sec4-3">
      <title>Reproducibility</title>
      <p>Boutiques helps computational reproducibility through containers and formal command-line descriptions. With Boutiques, complete sets of applications could be easily migrated across execution platforms, including high-performance computing clusters and individual laptops, to reproduce analyses. The Boutiques descriptor describes the parameters and implementation of the application, and the invocation schema describes the parameter values.</p>
      <p>However, reproducibility is a large problem that Boutiques only partially addresses. At the command-line execution level, containers help freeze a large fraction of the software ecosystem but they do not shield against discrepancies arising from different Linux kernel versions or hardware platforms. For instance, containers may not execute consistently on different CPUs that comply with the x86_64 architecture (e.g., Intel and AMD) when the application is compiled with architecture-specific flags such as GCC's <monospace>-march</monospace>.</p>
      <p>In addition, important runtime parameters, for instance, related to multi-threading or available resources (storage, RAM), may be set by the execution platform without being specified in the Boutiques descriptor. Such runtime parameters may impact reproducibility in some cases. To properly cover this issue, Boutiques descriptors should be complemented by a provenance framework that captures a detailed trace of the execution. We plan to leverage the provenance format being defined by the NeuroImaging Data Model-Workflow [<xref rid="bib22" ref-type="bibr">22</xref>] initiative for this purpose.</p>
    </sec>
    <sec id="sec4-4">
      <title>Application types</title>
      <p>So far, Boutiques has focused on the description of noninteractive command-line applications. While such applications cover a large fraction of the applications involved in scientific data processing, other types of programs exist such as web services, interactive applications, and applications with a graphical user interface (GUI). Such application classes could be described in Boutiques through a command-line mapping. For instance, web services may be wrapped as command-line applications using tools such as <monospace>curl</monospace> or <monospace>wget</monospace>. Interactive applications may also be transformed to noninteractive ones through configuration files. Finally, nothing prevents a Boutiques application from popping up a window for a user to provide input through a GUI. This should, however, be specified as an extension to the descriptor since most platforms would not support this feature by default. Graphical output produced by applications executed in containers should also be treated specifically.</p>
    </sec>
    <sec id="sec4-5">
      <title>Limitations</title>
      <p>A few limitations remain that should be addressed in the future. First, Boutiques moves the application integration bottleneck from integration to validation. Using Boutiques, functions can be automatically exported from frameworks such as Nipype and SPM, creating hundreds of richly described applications potentially usable by end users. However, the automated validation of such applications remains challenging. A Boutiques-specific testing framework could be designed and potentially fed by existing frameworks to address this issue.</p>
      <p>Another limitation is related to the security of containerized applications. Since containers are usually controlled by application developers rather than platforms, which is a good thing to reduce application integration bottlenecks, nothing prevents developers from embedding malicious code in their container at any stage of the process, possibly after a platform administrator inspected the container. Containers are bulky file archives that are cumbersome to inspect. Tools need to be developed to allow for an easier characterization of container contents, for instance, through comparison digests with respect to validated base images. Singularity containers have reduced security risks as compared to Docker containers, but the issue of content transparency is still not avoided.</p>
    </sec>
  </sec>
  <sec id="sec5">
    <title>Related work</title>
    <p>Several frameworks have been developed to describe and integrate applications in various types of platforms. Boutiques focuses on (1) fullyautomatic integration of applications, including deployment on heterogeneous computing resources through containers, (2) comprehensive input validation through a strict JSON schema, and (3) flexible application description through a rich JSON schema.</p>
    <sec id="sec5-1">
      <title>Common Workflow Language</title>
      <p>The Common Workflow Language (CWL<xref ref-type="fn" rid="fn13"><sup>13</sup></xref>) is the work most closely related to Boutiques as it provides a formal way to describe containerized applications. In particular, CWL's Command Line Tool Description overlaps with the Boutiques descriptor. This section highlights the main differences between CWL and Boutiques, based on version 1.0 of the CWL Command Line Tool Description<xref ref-type="fn" rid="fn14"><sup>14</sup></xref>. According to GitHub, CWL started 6 months before Boutiques (September 2014 vs. May 2015).</p>
      <sec id="sec5-1-1">
        <title>Conceptual differences</title>
        <p>The following differences are conceptual in the sense that they may not be easily addressed in CWL or Boutiques without deeply refactoring the frameworks.</p>
        <p>First, CWL has a workflow language whereas Boutiques does not. In Boutiques, workflows are integrated as any other applications, except that they may submit other invocations to enable workflow parallelism. This fundamental difference has consequences on the complexity of CWL application descriptions and on the possibility to reuse existing workflows in Boutiques. The adoption of ontologies in CWL may also be another consequence (see below).</p>
        <p>CWL imposes a strict command-line format, while Boutiques is more flexible. CWL specifies command lines using an array containing an executable and a set of arguments, whereas Boutiques only uses a string template. Boutiques’ template approach may create issues in some cases, but it also allows developers to add simple operations to an application without having to write a specific wrapper. For instance, a Boutiques command line may easily include input decompression using the <monospace>tar</monospace> command in addition to the main application command. Importantly, Boutiques’ template system allows supporting configuration files.</p>
        <p>CWL uses ontologies, while Boutiques does not. Ontologies allow for richer definitions but they also have an overhead. The main consequences are the following:
<list list-type="bullet"><list-item><p>CWL uses a specific framework for validation, called SALAD (Semantic Annotations for Linked Avro Data), whereas Boutiques uses plain JSON schema. The main goal of SALAD is to allow “working with complex data structures and document formats, such as schemas, object references, and namespaces.” Boutiques only relies on the basic types required to describe and validate a command line syntactically. While the use of SALAD certainly allows for higher-level validation and may simplify the composition and validation of complex workflows, it also introduces a substantial overhead in the specification, and platforms have to use the validator provided by CWL. On the contrary, a regular JSON validator can be used in Boutiques.</p></list-item><list-item><p>CWL has a rich set of types, whereas Boutiques only has simple types. This may again be seen as a feature or as an overhead depending on the context. Boutiques tries to limit the complexity of the specification to facilitate its support by platforms where applications will be integrated.</p></list-item></list></p>
      </sec>
      <sec id="sec5-1-2">
        <title>Major differences</title>
        <p>The following differences are major but they may be addressed by the CWL and Boutiques developers as they do not undermine the application description model:
<list list-type="bullet"><list-item><p>CWL applications have to write in a specific set of directories called “designated output directory,” “designated temporary directory,” and “system temporary directory.” Applications are informed of the location of such directories through environment variables. Having to write in specific directories is problematic because applications have to be modified to enable that. In Boutiques, the path of output files is defined using a dedicated property.</p></list-item><list-item><p>CWL types are richer, not only semantically but also syntactically. For instance, files have properties for basename, dirname, location, path, checksum, etc.</p></list-item><list-item><p>Boutiques supports various types of containers (Docker, Singularity, rootfs), while CWL supports only Docker. Both tools have rich requirements: for instance, they may include RAM, disk usage, and walltime estimate. CWL has hints, i.e., recommendations that only lead to warnings when not respected.</p></list-item><list-item><p>In Boutiques, dependencies can be defined among inputs, e.g., to specify that an input may be used only when a particular flag is activated. This is a very useful feature to improve validation, in particular for  applications with a lot of options.</p></list-item><list-item><p>In Boutiques, named groups of inputs can be defined, which improves the presentation of long parameter lists for the user and enables the definition of more constraints within groups (e.g., mutually exclusive inputs).</p></list-item></list></p>
      </sec>
    </sec>
    <sec id="sec5-2">
      <title>BIDS apps</title>
      <p>BIDS apps [<xref rid="bib5" ref-type="bibr">5</xref>] specify a framework for neuroimaging applications to process datasets complying to the Brain Imaging Data Structure (BIDS). They share common goals with Boutiques, in particular, reusability across platforms through containerization. Conceptually, however, BIDS apps and Boutiques are different since BIDS apps intend to standardize application interfaces, while Boutiques intends to describe them as flexibly as possible. BIDS apps have a specific set of inputs and outputs, for instance, the input dataset, that have to be present in a specific order on the command line for the application to be valid. The specification adopted by BIDS apps simplifies the integration of applications in platforms as they all comply to the same interface. However, it is also limited to the subset of neuroimaging applications that process BIDS datasets and it does not formally describe application-specific inputs. All in all, BIDS apps and Boutiques complement each other. BIDS apps provide a practical way to integrate neuroimaging applications, while Boutiques offers a formal description of their specific parameters. Boutiques descriptors can be generated from BIDS apps using the <monospace>bosh</monospace> importer.</p>
    </sec>
    <sec id="sec5-3">
      <title>Other frameworks</title>
      <p>Several other frameworks have been created to facilitate the integration of command-line applications in platforms. In neuroinformatics, many platforms define a formal interface to embed command-line applications. Among them, the Common Toolkit<xref ref-type="fn" rid="fn15"><sup>15</sup></xref> interoperates with several platforms such as 3D Slicer [<xref rid="bib23" ref-type="bibr">23</xref>], NiftyView [<xref rid="bib24" ref-type="bibr">24</xref>], GIMIAS [<xref rid="bib25" ref-type="bibr">25</xref>], MedInria [<xref rid="bib25" ref-type="bibr">25</xref>], MeVisLab [<xref rid="bib26" ref-type="bibr">26</xref>], and MITK workbench [<xref rid="bib27" ref-type="bibr">27</xref>]. The framework, however, remains tightly bound to the Common Toolkit's C++ implementation, which limits its adoption, e.g., in web platforms.</p>
      <p>In the distributed computing community, systems were also proposed to facilitate the embedding of applications in platforms. The Grid Execution Management for Legacy Code Architecture [<xref rid="bib28" ref-type="bibr">28</xref>] was used to wrap applications in grid computing systems. Interestingly, it has been used to embed workflow engines in the SHIWA platform [<xref rid="bib29" ref-type="bibr">29</xref>], in a similar but different way than proposed by Boutiques.</p>
      <p>The recent advent of software containers requires a new generation of application description frameworks that are independent from any programming language and that expose a rich set of properties to describe command lines, as intended by Boutiques.</p>
    </sec>
  </sec>
  <sec sec-type="conclusion" id="sec6">
    <title>Conclusion</title>
    <p>Boutiques is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/boutiques">https://github.com/boutiques</ext-link>. We welcome feedback, issue reporting, and pull requests. Boutiques adopts a bottom-up approach where new features are progressively added based on feedback from applications and platforms. Beyond the technicalities discussed here, the availability of a solid core of applications and platforms in the framework is key to its success, which we plan to continuously enhance.</p>
  </sec>
  <sec id="sec7">
    <title>Availability of supporting source code and requirements</title>
    <list list-type="bullet">
      <list-item>
        <p>Project name: Boutiques</p>
      </list-item>
      <list-item>
        <p>Project RRID: SCR_016073</p>
      </list-item>
      <list-item>
        <p>Project home page: <ext-link ext-link-type="uri" xlink:href="http://boutiques.github.io">http://boutiques.github.io</ext-link></p>
      </list-item>
      <list-item>
        <p>Operating system(s): Platform independent</p>
      </list-item>
      <list-item>
        <p>Programming language: Python and JSON schema</p>
      </list-item>
      <list-item>
        <p>Other requirements: None</p>
      </list-item>
      <list-item>
        <p>License: MIT</p>
      </list-item>
    </list>
  </sec>
  <sec id="sec8">
    <title>Availability of supporting data</title>
    <p>Boutiques is available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/boutiques/boutiques">https://github.com/boutiques/boutiques</ext-link>) and Zenodo [<xref rid="bib30" ref-type="bibr">30</xref>]. This article is based on release 0.5.5.</p>
  </sec>
  <sec id="sec9">
    <title>Abbreviations</title>
    <p>BIDS: Brain Imaging Data Structure; CWL: common workflow language; FSL: FMRIB Software Library; GUI: graphical user interface; SALAD: Semantic Annotations for Linked Avro Data; SPM: Statistical Parametric Mapping.</p>
  </sec>
  <sec id="sec10">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>GIGA-D-17-00304_Original_Submission.pdf</label>
      <media xlink:href="giy016_giga-d-17-00304_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup2">
      <label>GIGA-D-17-00304_Revision_1.pdf</label>
      <media xlink:href="giy016_giga-d-17-00304_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup3">
      <label>GIGA-D-17-00304_Revision_2.pdf</label>
      <media xlink:href="giy016_giga-d-17-00304_revision_2.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup4">
      <label>Response_to_Reviewer_Comments_Original_Submission.pdf</label>
      <media xlink:href="giy016_response_to_reviewer_comments_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup5">
      <label>Response_to_Reviewer_Comments_Revision_1.pdf</label>
      <media xlink:href="giy016_response_to_reviewer_comments_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup6">
      <label>Reviewer_1_Report_(Original_Submission) -- Andrew P Davison, PhD</label>
      <caption>
        <p>04 Dec 2017 Reviewed</p>
      </caption>
      <media xlink:href="giy016_reviewer_1_report_(original_submission).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup7">
      <label>Reviewer_2_Report_(Original_Submission) -- Jakub Kaczmarzyk</label>
      <caption>
        <p>04 Dec 2017 Reviewed</p>
      </caption>
      <media xlink:href="giy016_reviewer_2_report_(original_submission).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>Pipeline integration for the MICCAI 2016 challenge was funded by the French National Agency for Research through “France Life-Imaging.” We also thank Compute Canada and Calcul Québec for providing a computing infrastructure supporting Docker and Singularity containers. This research was undertaken thanks in part to funding from the Canada First Research Excellence Fund, awarded to McGill University for the Healthy Brains for Healthy Lives initiative. We also thank the developers of all the applications described with Boutiques.</p>
  </ack>
  <fn-group>
    <title>Footnotes</title>
    <fn id="fn1">
      <label>1</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://www.docker.com">https://www.docker.com</ext-link>
      </p>
    </fn>
    <fn id="fn2">
      <label>2</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://brainhack101.github.io/neurolinks">https://brainhack101.github.io/neurolinks</ext-link>
      </p>
    </fn>
    <fn id="fn3">
      <label>3</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://github.com/big-data-lab-team/sim/tree/master/sim/other_wf_examples/nipype">https://github.com/big-data-lab-team/sim/tree/master/sim/other_wf_examples/nipype</ext-link>
      </p>
    </fn>
    <fn id="fn4">
      <label>4</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://www.egi.eu">https://www.egi.eu</ext-link>
      </p>
    </fn>
    <fn id="fn5">
      <label>5</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://www.creatis.insa-lyon.fr">https://www.creatis.insa-lyon.fr</ext-link>
      </p>
    </fn>
    <fn id="fn6">
      <label>6</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://dirac.france-grilles.fr">https://dirac.france-grilles.fr</ext-link>
      </p>
    </fn>
    <fn id="fn7">
      <label>7</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://github.com/Inria-Visages/Anima-Public/wiki">https://github.com/Inria-Visages/Anima-Public/wiki</ext-link>
      </p>
    </fn>
    <fn id="fn8">
      <label>8</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://github.com/thomashirsch/ginfizz">https://github.com/thomashirsch/ginfizz</ext-link>
      </p>
    </fn>
    <fn id="fn9">
      <label>9</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="http://www.mrtrix.org/">http://www.mrtrix.org/</ext-link>
      </p>
    </fn>
    <fn id="fn10">
      <label>10</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="http://od1n.sourceforge.net">http://od1n.sourceforge.net</ext-link>
      </p>
    </fn>
    <fn id="fn11">
      <label>11</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://portal.fli-iam.irisa.fr/msseg-challenge/overview">https://portal.fli-iam.irisa.fr/msseg-challenge/overview</ext-link>
      </p>
    </fn>
    <fn id="fn12">
      <label>12</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</ext-link>
      </p>
    </fn>
    <fn id="fn13">
      <label>13</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="http://www.commonwl.org">http://www.commonwl.org</ext-link>
      </p>
    </fn>
    <fn id="fn14">
      <label>14</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="http://www.commonwl.org/v1.0/CommandLineTool.html">http://www.commonwl.org/v1.0/CommandLineTool.html</ext-link>
      </p>
    </fn>
    <fn id="fn15">
      <label>15</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="http://www.commontk.org">http://www.commontk.org</ext-link>
      </p>
    </fn>
  </fn-group>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="bib1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Peng</surname><given-names>RD</given-names></name></person-group><article-title>Reproducible research in computational science</article-title>. <source>Science</source><year>2011</year>; <volume>334</volume>(<issue>6060</issue>):<fpage>1226</fpage>–<lpage>7</lpage>.<pub-id pub-id-type="pmid">22144613</pub-id></mixed-citation>
    </ref>
    <ref id="bib2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Stodden</surname><given-names>V</given-names></name>, <name name-style="western"><surname>McNutt</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Bailey</surname><given-names>DH</given-names></name><etal/></person-group><article-title>Enhancing reproducibility for computational methods</article-title>. <source>Science</source><year>2016</year>; <volume>354</volume>(<issue>6317</issue>):<fpage>1240</fpage>–<lpage>1</lpage>.<pub-id pub-id-type="pmid">27940837</pub-id></mixed-citation>
    </ref>
    <ref id="bib3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kurtzer</surname><given-names>GM</given-names></name>, <name name-style="western"><surname>Sochat</surname><given-names>V</given-names></name>, <name name-style="western"><surname>Bauer</surname><given-names>MW</given-names></name></person-group><article-title>Singularity: scientific containers for mobility of compute</article-title>. <source>PloS One</source><year>2017</year>; <volume>12</volume>(<issue>5</issue>):<fpage>e0177459</fpage>.<pub-id pub-id-type="pmid">28494014</pub-id></mixed-citation>
    </ref>
    <ref id="bib4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Étienne Rousseau</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Camarasu-Pop</surname><given-names>S</given-names></name><etal/></person-group> Software architectures to integrate workflow engines in science gateways. Future Generation Computer Systems <year>2017</year>; <volume>75</volume>(<issue>Supplement C</issue>):<fpage>239</fpage>–<lpage>55</lpage>.</mixed-citation>
    </ref>
    <ref id="bib5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gorgolewski</surname><given-names>KJ</given-names></name>, <name name-style="western"><surname>Alfaro-Almagro</surname><given-names>F</given-names></name>, <name name-style="western"><surname>Auer</surname><given-names>T</given-names></name><etal/></person-group><article-title>BIDS apps: improving ease of use, accessibility, and reproducibility of neuroimaging data analysis methods</article-title>. <source>PLoS computational biology</source><year>2017</year>; <volume>13</volume>(<issue>3</issue>):<fpage>e1005209</fpage>.<pub-id pub-id-type="pmid">28278228</pub-id></mixed-citation>
    </ref>
    <ref id="bib6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gentleman</surname><given-names>RC</given-names></name>, <name name-style="western"><surname>Carey</surname><given-names>VJ</given-names></name>, <name name-style="western"><surname>Bates</surname><given-names>DM</given-names></name><etal/></person-group><article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>. <source>Genome biology</source><year>2004</year>; <volume>5</volume>(<issue>10</issue>):<fpage>R80</fpage>.<pub-id pub-id-type="pmid">15461798</pub-id></mixed-citation>
    </ref>
    <ref id="bib7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sherif</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Rioux</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Rousseau</surname><given-names>ME</given-names></name><etal/></person-group><article-title>CBRAIN: a web-based, distributed computing platform for collaborative neuroimaging research</article-title>. <source>Frontiers in Neuroinformatics</source><year>2014</year>; <volume>8</volume>(<issue>54</issue>).</mixed-citation>
    </ref>
    <ref id="bib8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Das</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>MacIntyre</surname><given-names>LC</given-names></name><etal/></person-group><article-title>The MNI data-sharing and processing ecosystem</article-title>. <source>NeuroImage</source><year>2016</year>; <volume>124</volume>:<fpage>1188</fpage>–<lpage>95</lpage>.<pub-id pub-id-type="pmid">26364860</pub-id></mixed-citation>
    </ref>
    <ref id="bib9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gorgolewski</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Burns</surname><given-names>CD</given-names></name>, <name name-style="western"><surname>Madison</surname><given-names>C</given-names></name><etal/></person-group><article-title>Nipype: a flexible, lightweight and extensible neuroimaging data processing framework in python</article-title>. <source>Frontiers in neuroinformatics</source><year>2011</year>;<volume>5</volume>.</mixed-citation>
    </ref>
    <ref id="bib10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Lartizien</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Gibaud</surname><given-names>B</given-names></name><etal/></person-group><article-title>A virtual imaging platform for multi-modality medical image simulation</article-title>. <source>IEEE Transactions on Medical Imaging</source><year>2013</year>; <volume>32</volume>(<issue>1</issue>):<fpage>110</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">23014715</pub-id></mixed-citation>
    </ref>
    <ref id="bib11">
      <label>11.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Montagnat</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Isnard</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name><etal/></person-group><article-title>A data-driven workflow language for grids based on array programming principles</article-title>. In: <source>Workshop on Workflows in Support of Large-Scale Science (WORKS’09)</source>; <year>2009</year>.</mixed-citation>
    </ref>
    <ref id="bib12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Montagnat</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Lingrand</surname><given-names>D</given-names></name><etal/></person-group><article-title>Flexible and efficient workflow deployment of data-intensive applications on grids with MOTEUR</article-title>. <source>Journal of High Performance Computing and Applications</source><year>2008</year>; <volume>22</volume>(<issue>3</issue>):<fpage>347</fpage>–<lpage>60</lpage>.</mixed-citation>
    </ref>
    <ref id="bib13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jenkinson</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Beckmann</surname><given-names>CF</given-names></name>, <name name-style="western"><surname>Behrens</surname><given-names>TE</given-names></name><etal/></person-group> Fsl. Neuroimage <year>2012</year>; <volume>62</volume>(<issue>2</issue>):<fpage>782</fpage>–<lpage>90</lpage>.</mixed-citation>
    </ref>
    <ref id="bib14">
      <label>14.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Bellec</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Carbonell</surname><given-names>F</given-names></name>, <name name-style="western"><surname>Perlbarg</surname><given-names>V</given-names></name><etal/></person-group><article-title>A neuroimaging analysis kit for Matlab and Octave</article-title>. In: <source>Proceedings of the 17th International Conference on Functional Mapping of the Human Brain</source>; <year>2011</year> p. <fpage>2735</fpage>–<lpage>2746</lpage>.</mixed-citation>
    </ref>
    <ref id="bib15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bellec</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Lavoie-Courchesne</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Dickinson</surname><given-names>P</given-names></name><etal/></person-group><article-title>The Pipeline System for Octave and Matlab (PSOM): a lightweight scripting framework and execution engine for scientific workflows</article-title>. <source>Frontiers in neuroinformatics</source><year>2012</year>; <volume>6</volume>(<issue>7</issue>).</mixed-citation>
    </ref>
    <ref id="bib16">
      <label>16.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Quirion</surname><given-names>PO</given-names></name>, <name name-style="western"><surname>Adalat</surname><given-names>R</given-names></name><etal/></person-group><article-title>Integration between PSOM and CBRAIN for distributed execution of neuroimaging pipelines</article-title>. In: <source>Meeting of the Organization for Human Brain Mapping Geneva</source>, <publisher-loc>Switzerlad</publisher-loc>; <year>2016</year>.</mixed-citation>
    </ref>
    <ref id="bib17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Tournier</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Calamante</surname><given-names>F</given-names></name>, <name name-style="western"><surname>Connelly</surname><given-names>A</given-names></name><etal/></person-group><article-title>MRtrix: diffusion tractography in crossing fiber regions</article-title>. <source>International Journal of Imaging Systems and Technology</source><year>2012</year>; <volume>22</volume>(<issue>1</issue>):<fpage>53</fpage>–<lpage>66</lpage>.</mixed-citation>
    </ref>
    <ref id="bib18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kiar</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Bridgeford</surname><given-names>E</given-names></name>, <name name-style="western"><surname>Chandrashekhar</surname><given-names>V</given-names></name><etal/></person-group><article-title>A comprehensive cloud framework for accurate and reliable human connectome estimation and meganalysis</article-title>. <source>bioRxiv</source><year>2017</year>;p. <fpage>188706</fpage>.</mixed-citation>
    </ref>
    <ref id="bib19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jochimsen</surname><given-names>TH</given-names></name>, <name name-style="western"><surname>Von Mengershausen</surname><given-names>M</given-names></name></person-group><article-title>ODIN-object-oriented development interface for NMR</article-title>. <source>Journal of Magnetic Resonance</source><year>2004</year>; <volume>170</volume>(<issue>1</issue>):<fpage>67</fpage>–<lpage>78</lpage>.<pub-id pub-id-type="pmid">15324759</pub-id></mixed-citation>
    </ref>
    <ref id="bib20">
      <label>20.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Penny</surname><given-names>WD</given-names></name>, <name name-style="western"><surname>Friston</surname><given-names>KJ</given-names></name>, <name name-style="western"><surname>Ashburner</surname><given-names>JT</given-names></name><etal/></person-group><source>Statistical parametric mapping: the analysis of functional brain images</source>. <publisher-name>Academic press</publisher-name>; <year>2007</year>.</mixed-citation>
    </ref>
    <ref id="bib21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hatt</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Laurent</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Ouahabi</surname><given-names>A</given-names></name><etal/></person-group><article-title>The first MICCAI challenge on PET tumor segmentation</article-title>. <source>Medical Image Analysis</source><year>2018</year>;<comment>Under minor revision</comment>.</mixed-citation>
    </ref>
    <ref id="bib22">
      <label>22.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ghosh</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Auer</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Flandin</surname><given-names>G</given-names></name><etal/></person-group><article-title>Capturing and reusing computation details with the Neuroimaging Data Model (NIDM)</article-title>. In: <source>Annual Meeting of the Organisation of Human Brain Mapping (OHBM 2017)</source>; <year>2017</year>.</mixed-citation>
    </ref>
    <ref id="bib23">
      <label>23.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Pieper</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Halle</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Kikinis</surname><given-names>R</given-names></name></person-group><article-title>3D Slicer</article-title>. In: <source>IEEE International Symposium on Biomedical Imaging: Nano to Macro IEEE</source>; <year>2004</year> p. <fpage>632</fpage>–<lpage>635</lpage>.</mixed-citation>
    </ref>
    <ref id="bib24">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Craddock</surname><given-names>RC</given-names></name>, <name name-style="western"><surname>Bellec</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Margules</surname><given-names>DS</given-names></name><etal/></person-group><article-title>2015 Brainhack Proceedings</article-title>. <source>GigaScience</source><year>2016</year>; <volume>5</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>26</lpage>.</mixed-citation>
    </ref>
    <ref id="bib25">
      <label>25.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Larrabide</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Omedas</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Martelli</surname><given-names>Y</given-names></name><etal/></person-group><article-title>GIMIAS: an open source framework for efficient development of research tools and clinical prototypes</article-title>. In: <source>International Conference on Functional Imaging and Modeling of the Heart</source><publisher-name>Springer</publisher-name>; <year>2009</year> p. <fpage>417</fpage>–<lpage>426</lpage>.</mixed-citation>
    </ref>
    <ref id="bib26">
      <label>26.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Heckel</surname><given-names>F</given-names></name>, <name name-style="western"><surname>Schwier</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Peitgen</surname><given-names>HO</given-names></name></person-group><article-title>Object-oriented application development with MeVisLab and Python</article-title>. In: <source>GI Jahrestagung</source>; <year>2009</year> p. <fpage>1338</fpage>–<lpage>1351</lpage>.</mixed-citation>
    </ref>
    <ref id="bib27">
      <label>27.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Nolden</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Zelzer</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Seitel</surname><given-names>A</given-names></name><etal/></person-group><article-title>The medical imaging interaction toolkit: challenges and advances</article-title>. <source>International journal of computer assisted radiology and surgery</source><year>2013</year>; <volume>8</volume>(<issue>4</issue>):<fpage>607</fpage>–<lpage>620</lpage>.<pub-id pub-id-type="pmid">23588509</pub-id></mixed-citation>
    </ref>
    <ref id="bib28">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Delaitre</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Kiss</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Goyeneche</surname><given-names>A</given-names></name><etal/></person-group><article-title>GEMLCA: Running legacy code applications as grid services</article-title>. <source>Journal of Grid Computing</source><year>2005</year>; <volume>3</volume>(<issue>1-2</issue>):<fpage>75</fpage>–<lpage>90</lpage>.</mixed-citation>
    </ref>
    <ref id="bib29">
      <label>29.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Terstyanszky</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Kukla</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Kiss</surname><given-names>T</given-names></name><etal/></person-group><article-title>Enabling scientific workflow sharing through coarse-grained interoperability</article-title>. <source>Future Generation Computer Systems</source><year>2014</year>; <volume>37</volume>:<fpage>46</fpage>–<lpage>59</lpage>.</mixed-citation>
    </ref>
    <ref id="bib30">
      <label>30.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Kiar</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Aumentado-Armstrong</surname><given-names>T</given-names></name><etal/></person-group>, <source>Boutiques: Release 0.5.5</source>; <year>2018</year><comment><ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.1164290">https://doi.org/10.5281/zenodo.1164290</ext-link></comment>.</mixed-citation>
    </ref>
  </ref-list>
</back>
