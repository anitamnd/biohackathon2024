<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Archiving and Interchange DTD v3.0 20080202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName archivearticle3.dtd?>
<?SourceDTD.Version 3.0?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Appl Plant Sci</journal-id>
    <journal-id journal-id-type="iso-abbrev">Appl Plant Sci</journal-id>
    <journal-id journal-id-type="doi">10.1002/(ISSN)2168-0450</journal-id>
    <journal-id journal-id-type="publisher-id">APS3</journal-id>
    <journal-title-group>
      <journal-title>Applications in Plant Sciences</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2168-0450</issn>
    <publisher>
      <publisher-name>John Wiley and Sons Inc.</publisher-name>
      <publisher-loc>Hoboken</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6711351</article-id>
    <article-id pub-id-type="doi">10.1002/aps3.11280</article-id>
    <article-id pub-id-type="publisher-id">APS311280</article-id>
    <article-categories>
      <subj-group subj-group-type="overline">
        <subject>Protocol Note</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Protocol Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Affordable remote monitoring of plant growth in facilities using Raspberry Pi computers</article-title>
      <alt-title alt-title-type="right-running-head">GMpi for remote monitoring of plant growth</alt-title>
      <alt-title alt-title-type="left-running-head">Grindstaff et al.</alt-title>
    </title-group>
    <contrib-group>
      <contrib id="aps311280-cr-0001" contrib-type="author">
        <name>
          <surname>Grindstaff</surname>
          <given-names>Brandin</given-names>
        </name>
        <xref ref-type="aff" rid="aps311280-aff-0001">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib id="aps311280-cr-0002" contrib-type="author" corresp="yes">
        <name>
          <surname>Mabry</surname>
          <given-names>Makenzie E.</given-names>
        </name>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6139-9559</contrib-id>
        <address>
          <email>MMabry44@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="aps311280-aff-0001">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib id="aps311280-cr-0003" contrib-type="author">
        <name>
          <surname>Blischak</surname>
          <given-names>Paul D.</given-names>
        </name>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9177-8958</contrib-id>
        <xref ref-type="aff" rid="aps311280-aff-0002">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib id="aps311280-cr-0004" contrib-type="author">
        <name>
          <surname>Quinn</surname>
          <given-names>Micheal</given-names>
        </name>
        <xref ref-type="aff" rid="aps311280-aff-0003">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib id="aps311280-cr-0005" contrib-type="author">
        <name>
          <surname>Chris Pires</surname>
          <given-names>J.</given-names>
        </name>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9682-2639</contrib-id>
        <xref ref-type="aff" rid="aps311280-aff-0001">
          <sup>1</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aps311280-aff-0001">
      <label>
        <sup>1</sup>
      </label>
      <named-content content-type="organisation-division">Division of Biological Sciences and Bond Life Sciences Center</named-content>
      <institution>University of Missouri</institution>
      <named-content content-type="city">Columbia</named-content>
      <named-content content-type="country-part">Missouri</named-content>
      <named-content content-type="post-code">65211</named-content>
      <country country="US">USA</country>
    </aff>
    <aff id="aps311280-aff-0002">
      <label>
        <sup>2</sup>
      </label>
      <named-content content-type="organisation-division">Department of Ecology and Evolutionary Biology</named-content>
      <institution>University of Arizona</institution>
      <named-content content-type="city">Tucson</named-content>
      <named-content content-type="country-part">Arizona</named-content>
      <named-content content-type="post-code">85721</named-content>
      <country country="US">USA</country>
    </aff>
    <aff id="aps311280-aff-0003">
      <label>
        <sup>3</sup>
      </label>
      <named-content content-type="organisation-division">Division of Information Technology</named-content>
      <institution>University of Missouri</institution>
      <named-content content-type="city">Columbia</named-content>
      <named-content content-type="country-part">Missouri</named-content>
      <named-content content-type="post-code">65211</named-content>
      <country country="US">USA</country>
    </aff>
    <author-notes>
      <corresp id="correspondenceTo"><label>*</label>Author for correspondence: <email>MMabry44@gmail.com</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>8</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>8</month>
      <year>2019</year>
    </pub-date>
    <volume>7</volume>
    <issue>8</issue>
    <issue-id pub-id-type="doi">10.1002/aps3.v7.8</issue-id>
    <elocation-id>e11280</elocation-id>
    <history>
      <date date-type="received">
        <day>22</day>
        <month>3</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>03</day>
        <month>7</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <!--<copyright-statement content-type="issue-copyright"> &#x000a9; 2019 Botanical Society of America <copyright-statement>-->
      <copyright-statement content-type="article-copyright">© 2019 Grindstaff et al. <italic>Applications in Plant Sciences</italic> is published by Wiley Periodicals, Inc. on behalf of the Botanical Society of America</copyright-statement>
      <license license-type="creativeCommonsBy">
        <license-p>This is an open access article under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link> License, which permits use, distribution and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:type="simple" xlink:href="file:APS3-7-e11280.pdf"/>
    <abstract id="aps311280-abs-0001">
      <sec id="aps311280-sec-0001">
        <title>Premise</title>
        <p>Environmentally controlled facilities, such as growth chambers, are essential tools for experimental research. Automated, low‐cost, remote‐monitoring hardware can greatly improve both reproducibility and maintenance.</p>
      </sec>
      <sec id="aps311280-sec-0002">
        <title>Methods and Results</title>
        <p>Using a Raspberry Pi computer, open‐source software, environmental sensors, and a camera, we developed Growth Monitor pi (<styled-content style="fixed-case">GM</styled-content>pi), a cost‐effective system for monitoring growth chamber conditions. Coupled with our software, <italic>GMPi_Pack</italic>, our setup automates sensor readings, photography, and alerts when conditions fall out of range.</p>
      </sec>
      <sec id="aps311280-sec-0003">
        <title>Conclusions</title>
        <p><styled-content style="fixed-case">GM</styled-content>pi offers access to environmental data logging, improving reproducibility of experiments and reinforcing the stability of controlled environmental facilities. The device is also flexible and scalable, allowing researchers the ability to customize and expand <styled-content style="fixed-case">GM</styled-content>pi for their own needs.</p>
      </sec>
    </abstract>
    <kwd-group kwd-group-type="author-generated">
      <kwd id="aps311280-kwd-0001">environmental sensing</kwd>
      <kwd id="aps311280-kwd-0002">growth chamber</kwd>
      <kwd id="aps311280-kwd-0003">Growth Monitor pi (<styled-content style="fixed-case">GM</styled-content>pi)</kwd>
      <kwd id="aps311280-kwd-0004">humidity</kwd>
      <kwd id="aps311280-kwd-0005">light</kwd>
      <kwd id="aps311280-kwd-0006">Raspberry Pi</kwd>
      <kwd id="aps311280-kwd-0007">temperature</kwd>
    </kwd-group>
    <counts>
      <fig-count count="3"/>
      <table-count count="0"/>
      <page-count count="8"/>
      <word-count count="5678"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>source-schema-version-number</meta-name>
        <meta-value>2.0</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>component-id</meta-name>
        <meta-value>aps311280</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>cover-date</meta-name>
        <meta-value>August 2019</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>details-of-publishers-convertor</meta-name>
        <meta-value>Converter:WILEY_ML3GV2_TO_NLMPMC version:5.6.7 mode:remove_FC converted:27.08.2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <p content-type="self-citation">
      <mixed-citation publication-type="journal" id="aps311280-cit-1001"><string-name><surname>Grindstaff</surname>, <given-names>B.</given-names></string-name>, <string-name><given-names>M. E.</given-names><surname>Mabry</surname></string-name>, <string-name><given-names>P. D.</given-names><surname>Blischak</surname></string-name>, <string-name><given-names>M.</given-names><surname>Quinn</surname></string-name>, and <string-name><given-names>J. C.</given-names><surname>Pires</surname></string-name>. <year>2019</year><article-title>Affordable remote monitoring of plant growth in facilities using Raspberry Pi computers</article-title>. <source xml:lang="en">Applications in Plant Sciences</source><volume>7</volume>(<issue>8</issue>): <elocation-id>e11280</elocation-id>.</mixed-citation>
    </p>
  </notes>
</front>
<body>
  <p>Growth chambers play an important role in plant science and agronomics by providing and maintaining constant growing conditions in order to reduce variables that could bias experimental data. However, the environmental parameters of growth chambers can fluctuate, which can impede reproducibility in future experiments (Lee and Rawlings, <xref rid="aps311280-bib-0011" ref-type="ref">1982</xref>; Potvin and Tardif, <xref rid="aps311280-bib-0012" ref-type="ref">1988</xref>). In order to compensate for issues of reproducibility, researchers typically randomize the placement of plants in the growth chamber and perform replications of the experiment (Hammer and Hopper, <xref rid="aps311280-bib-0010" ref-type="ref">1997</xref>). To make certain that the environmental parameters inside a growth chamber are within the required parameters, the best solution is to monitor and record them. Monitoring and recording the environmental variables inside a growth chamber can be used to increase repeatability for future experiments and provide researchers with real‐time information about the conditions their plants are experiencing.</p>
  <p>Single‐board computers (e.g., Raspberry Pi [<ext-link ext-link-type="uri" xlink:href="http://www.raspberrypi.org">www.raspberrypi.org</ext-link>], Orange Pi [<ext-link ext-link-type="uri" xlink:href="http://www.orangepi.org">www.orangepi.org</ext-link>], Beagle Board [<ext-link ext-link-type="uri" xlink:href="http://www.BeagleBoard.org">www.BeagleBoard.org</ext-link>], Arduino [<ext-link ext-link-type="uri" xlink:href="http://www.arduino.cc">www.arduino.cc</ext-link>]) paired with open‐source software provide the opportunity to develop such a system of growth chamber monitoring. The variety of different sensors (e.g., light, temperature, humidity, pH, motion) and single‐board computers afford a high degree of flexibility and can be used in many different applications, such as the internet of things (IoT) and otherwise. IoT devices are internet‐connected objects that are capable of collecting data and sending it through the internet. These devices can also be integrated to build scalable networks of reconfigurable computers capable of environmental monitoring (Ferdoush and Li, <xref rid="aps311280-bib-0005" ref-type="ref">2014</xref>) or used for other tasks (e.g., plant phenotyping; Tovar et al., <xref rid="aps311280-bib-0014" ref-type="ref">2018</xref>) that can be invaluable in our data‐driven field.</p>
  <p>Monitoring systems developed using this technology are most prevalent in agriculture. Two of the most popular applications are selective irrigation and predictive analytics, both of which can improve productivity and efficiency of water management. For example, Shah and Bhatt (<xref rid="aps311280-bib-0013" ref-type="ref">2017</xref>) used Raspberry Pi computers to monitor the conditions of a greenhouse using temperature, humidity, and soil moisture sensors that autonomously logged data to a cloud server. Raspberry Pi computers can also be used to automate irrigation. Cabaccan et al. (<xref rid="aps311280-bib-0003" ref-type="ref">2017</xref>) used a network of Raspberry Pi computers equipped with sensors for light, temperature, and humidity, as well as a real‐time clock and external battery, to monitor lettuce plants (<italic>Lactuca sativa</italic> L.). The applications of Shah and Bhatt (<xref rid="aps311280-bib-0013" ref-type="ref">2017</xref>) and Cabaccan et al. (<xref rid="aps311280-bib-0003" ref-type="ref">2017</xref>) show the scalability of this technology as well as the ability to run on an independent power source for a period of time, giving needed flexibility for use in places with limited access to electricity. In other cases, Raspberry Pi computers have been used to detect system failures that would otherwise have gone unnoticed (Gurdita et al., <xref rid="aps311280-bib-0008" ref-type="ref">2016</xref>). This technology not only enables new means and methods of data collection and plant care, it also offers a cost‐effective way to improve existing monitoring systems through redundancy or improved precision depending on the system.</p>
  <p>Using Raspberry Pi as a platform (Halfacree and Upton, <xref rid="aps311280-bib-0009" ref-type="ref">2012</xref>; Gay, <xref rid="aps311280-bib-0006" ref-type="ref">2014</xref>), we have developed the Growth Monitor pi (GMpi; Fig. <xref rid="aps311280-fig-0001" ref-type="fig">1</xref>A–C) to be an affordable way to monitor plants in growth chambers and greenhouses. GMpi stands out from other devices described above because our <italic>GMPi_Pack</italic> software combines multiple features, such as sensing (temperature, humidity, and light intensity), cloud storage, image capture, and alerts, onto a single platform. It relies heavily on software already available from the open‐source community and is meant to illustrate how this technology can be developed and used by researchers who may not be as familiar with software engineering. With the detailed protocol below, we hope that this type of monitoring and sensing can now be made accessible to anyone.</p>
  <fig fig-type="Figure" xml:lang="en" id="aps311280-fig-0001" orientation="portrait" position="float">
    <label>Figure 1</label>
    <caption>
      <p><styled-content style="fixed-case">GM</styled-content>pi, sensors, and Slack alert. (A) Photograph of the complete <styled-content style="fixed-case">GM</styled-content>pi setup with all peripheries attached. (B, C) Close‐up photos of the temperature and humidity sensor (<styled-content style="fixed-case">DHT</styled-content>22) and light intensity sensor (<styled-content style="fixed-case">TSL</styled-content>2591). (D) A snapshot of what an incoming alert from the <styled-content style="fixed-case">GM</styled-content>pi looks like on Slack. This will alert all members of this workspace that the growth chamber has fallen out of the specified range for both light and humidity.</p>
    </caption>
    <graphic id="nlm-graphic-1" xlink:href="APS3-7-e11280-g001"/>
  </fig>
  <sec id="aps311280-sec-0005">
    <title>METHODS AND RESULTS</title>
    <sec id="aps311280-sec-0006">
      <title>Raspberry Pi and peripheries</title>
      <p>The GMpi system was developed using a Raspberry Pi Model B+ single‐board computer installed with the Raspbian Stretch 4.14.50‐v7+ operating system (Raspberry Pi Foundation, Cambridge, United Kingdom). A temperature and humidity sensor (DHT22; Adafruit Industries LLC, New York, New York, USA) was used to collect data about the humidity and temperature inside the growth chamber. DHT sensors are useful as they are equipped with a capacitive humidity sensor and a thermal resistor. The accuracy of the DHT22 sensor was determined by testing its readouts against the thermostat and analog hygrometer that are installed in the growth chamber being used. To collect data about light intensity in both full spectrum and infrared wavelengths, the TSL2591 (Adafruit Industries LLC) sensor was used. This sensor is capable of detecting light between 0.000118 and 88,000 lux (lumens per square meter), allowing us to detect minute changes in light intensity in both the visible and infrared spectra. Output of common fluorescent bulbs are described in lumens rather than photosynthetically active radiation (PAR); therefore, lux was chosen to log lumens in a given area to detect a change in output from fluorescent tubes in our growth chamber, such as light bulbs going out and needing replacement. Finally, a camera was connected to relay visual information to the end user over the internet, allowing for remote observation of plant growth. The GMpi can be assembled and configured for approximately US$200. Compared to other popular commercial solutions for environmental data logging in a large growth facility, such as Argus (Argus Control Systems Ltd., Surrey, British Columbia, Canada; <ext-link ext-link-type="uri" xlink:href="http://www.arguscontrols.com">www.arguscontrols.com</ext-link>), which ranges from US$10,000 to more than US$1,000,000, the GMpi is a much more cost‐effective alternative.</p>
    </sec>
    <sec id="aps311280-sec-0007">
      <title>Connecting sensors</title>
      <p>To connect the different sensors to the Raspberry Pi, expertise in soldering is required. We enlisted help from our department's shop to achieve this. To connect the temperature and humidity sensor (DHT22), the first pin from the right was connected to a 3.3‐V general purpose input/output (GPIO) pin. The second pin was then connected to a data pin, the third was not used, and the fourth was connected to a ground (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>). A 10‐KΩ resistor was soldered between the power wire and data wire to allow data output (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>). For the light sensor (TSL2591), the first pin labeled “Vin” was connected to a 3.3‐V GPIO pin, then the pin labeled “GND” was connected to a ground pin (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>). This device uses an inter‐integrated circuit (I2C) serial protocol in order to communicate with devices by connecting the pins labeled “SDA” (serial data) and “SCL” (serial clock) to pins 3 and 5 of the Raspberry Pi. Finally, the camera was connected to the camera serial interface (CSI‐2) port behind the ethernet port via a ribbon cable. The ribbon cable provides additional flexibility in the placement of the camera for optimal viewing of plants.</p>
      <fig fig-type="Figure" xml:lang="en" id="aps311280-fig-0002" orientation="portrait" position="float">
        <label>Figure 2</label>
        <caption>
          <p>A diagram showing the connections between the Raspberry Pi and the attached peripheries and the Raspberry Pi <styled-content style="fixed-case">GPIO</styled-content> pinout. Illustrated are the connections for the light intensity sensor (<styled-content style="fixed-case">TSL</styled-content>2591) to the <styled-content style="fixed-case">GPIO</styled-content> pins: pin 3 for <styled-content style="fixed-case">SDA</styled-content> (serial data), pin 5 for <styled-content style="fixed-case">SCL</styled-content> (serial clock), pin 9 for ground, and pin 17 for 3.3‐V power. The diagram also illustrates the connection of the temperature and humidity sensor (<styled-content style="fixed-case">DHT</styled-content>22) to the <styled-content style="fixed-case">GPIO</styled-content> pins: pin 1 supplying 3.3‐V power, pin 6 for ground, and pin 11 for data. In addition, the figure shows where the resistor should be soldered between the power and data wire for the temperature and humidity sensor (<styled-content style="fixed-case">DHT</styled-content>22). Finally, it shows where the ribbon cable from the camera board is connected to the Raspberry Pi.</p>
        </caption>
        <graphic id="nlm-graphic-3" xlink:href="APS3-7-e11280-g002"/>
      </fig>
    </sec>
    <sec id="aps311280-sec-0008">
      <title>Uploading to a cloud drive service</title>
      <p>In order to upload the resulting sensor data to a cloud service, we used a third‐party, open‐source application called Rclone (<ext-link ext-link-type="uri" xlink:href="https://github.com/pageauc/rclone4pi">https://github.com/pageauc/rclone4pi</ext-link>). Rclone can be configured to connect to several popular cloud storage services such as Google Drive, Box, and Dropbox. We elected to use Google Drive because it is a free service. After adjusting the Rclone configuration settings, a link is provided that allows for a connection to the cloud service of choice. Uploading the collected data and images is handled by the <italic>UploadFile()</italic> and <italic>UploadFile2()</italic> functions in <italic>GMPi_Pack.py</italic> library (discussed below). These scripts are called in <italic>packageTest.py</italic>,<italic> picSnap.py</italic>, and <italic>upload.py</italic> files and can be run automatically using the Unix tool cron.</p>
    </sec>
    <sec id="aps311280-sec-0009">
      <title>Remote monitoring</title>
      <p>A unique addition to the GMpi is its ability to notify users if a growth chamber or greenhouse falls out of a specified range for temperature, humidity, or light. We took advantage of the popular platform Slack (<ext-link ext-link-type="uri" xlink:href="https://slack.com/">https://slack.com/</ext-link>), using the incoming webhooks function to set up remote notifications (Fig. <xref rid="aps311280-fig-0001" ref-type="fig">1</xref>D). This allows notifications to be sent to a configured Slack channel when thresholds are hit. As the use of Slack to communicate with research groups increases, it makes sense to have equipment be able to communicate via Slack as well. Using Slack incoming webhooks allows for end‐users to configure what messages will generate a notification being sent from Slack to their device(s) that access Slack. It is also possible to “mention” users directly in the Slack webhook message so that specific users get a notification in the channel.</p>
    </sec>
    <sec id="aps311280-sec-0010">
      <title>GMpi software dependencies</title>
      <p>The scripts used by the GMpi for the two sensors, temperature and humidity (DHT22) and light (TSL2591), are dependent on the open‐source Python libraries <italic>Adafruit_DHT</italic> (<ext-link ext-link-type="uri" xlink:href="https://github.com/adafruit/Adafruit_Python_DHT">https://github.com/adafruit/Adafruit_Python_DHT</ext-link>) and <italic>python‐tsl2591</italic> (<ext-link ext-link-type="uri" xlink:href="https://github.com/maxlklaxl/python-tsl2591">https://github.com/maxlklaxl/python-tsl2591</ext-link>). These libraries enable the device to read and process output from the sensors. The camera uses software that is already packaged with the Raspbian Stretch operating system (I2C). To combine automation, remote monitoring, and data collection, we developed our own software package, <italic>GMPi_Pack</italic>, which is freely available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/BrandinGrindstaff/GMpi">https://github.com/BrandinGrindstaff/GMpi</ext-link>) under a GNU General Public License (v3). <italic>GMPi_Pack</italic> is composed of seven scripts: <italic>GMPi_Pack.py</italic> (the main library), <italic>configuration.py</italic>,<italic> packageTest.py</italic>,<italic> picSnap.py</italic>,<italic> sense.py</italic>,<italic> upload.py</italic>, and <italic>install.sh</italic>. After getting the software from GitHub, users should run the <italic>install.sh</italic> script. This script will attempt to download and install all software dependencies for <italic>GMPi_Pack</italic> automatically. Next, users should run the <italic>configuration.py</italic> script, which sets the minimum and maximum thresholds for light intensity and creates a configuration file allowing the end‐user to easily modify important information needed for the GMpi to operate. The <italic>packageTest.py</italic> script is included for troubleshooting and gives the user a chance to test the device to confirm that the GMpi is running correctly. Three scripts, <italic>sense.py</italic>,<italic> picSnap.py</italic>, and <italic>upload.py</italic>, call functions from the main <italic>GMPi_Pack.py</italic> library to carry out sensor readings, capture images, and upload data to a cloud service, respectively. These scripts are intentionally independent to allow for modularity when scheduling “cron jobs” to automate these processes. Cron jobs are set up using the Unix cron utility, a time‐based job scheduler that comes packaged with Raspbian Stretch and other Unix‐like operating systems. This allows the user to run shell commands on a time‐based schedule, making it possible to run scripts automatically at user‐set intervals.</p>
    </sec>
    <sec id="aps311280-sec-0011">
      <title>Protocol feasibility</title>
      <p>The protocol in Appendices <xref rid="aps311280-app-0001" ref-type="app">Raspberry Pi hardware setup.</xref>, <xref rid="aps311280-app-0002" ref-type="app">Raspberry Pi initial setup.</xref>, <xref rid="aps311280-app-0003" ref-type="app">Rclone and GMpi software installation protocol.</xref> provides detailed instructions for setting up the GMpi and <italic>GMPi_Pack</italic>, including networking, connecting the hardware, and installing the software. Networking will vary greatly between institutions, and it is advisable to work with an information technology department to work around firewalls that make remote monitoring and secure shell (SSH) access difficult. Both sensors utilized by the GMpi also require soldering before use. The light sensor (TSL2591) requires that the pin headers be soldered onto its printed circuit board, and the temperature and humidity sensor (DHT22) requires a 10‐KΩ resistor be soldered between the power pin and data pin. The software we developed for the Raspberry Pi is dependent on open‐source tools that are available from GitHub and Adafruit, as well as other online sources. Our software, and all of its dependencies, can be downloaded from GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/BrandinGrindstaff/GMpi">https://github.com/BrandinGrindstaff/GMpi</ext-link>) and set up using the scripts we have provided.</p>
      <p>To remotely alert users if the chamber or greenhouse falls below desired thresholds, the GMpi uses webhooks to enable it to send alerts through the Slack application. As many groups are now communicating through Slack, we think this will provide a quick way for all members of a research program to be informed that a system is failing. We also provide an example script that will plot output sensor data so users can visually assess the conditions of the environment they are monitoring (Fig. <xref rid="aps311280-fig-0003" ref-type="fig">3</xref>). The camera on the GMpi can be coupled with open‐source software, such as plantCV (Fahlgren et al., <xref rid="aps311280-bib-0004" ref-type="ref">2015</xref>; Abbasi and Fahlgren, <xref rid="aps311280-bib-0001" ref-type="ref">2016</xref>; Gehan et al., <xref rid="aps311280-bib-0007" ref-type="ref">2017</xref>; Berry et al., <xref rid="aps311280-bib-0002" ref-type="ref">2018</xref>), to allow for plant phenotyping similar to the Bellwether phenotyping platform developed by Fahlgren et al. (<xref rid="aps311280-bib-0004" ref-type="ref">2015</xref>) or the Raspberry Pi–based system by Tovar et al. (<xref rid="aps311280-bib-0014" ref-type="ref">2018</xref>). Using the camera in combination with image uploading to cloud storage can also enable the user to diagnose disease or other issues with specimens in the growth chamber remotely from anywhere with internet access. Scalability of the GMpi can also be easily achieved by collecting and storing data across multiple, independent Raspberry Pi devices using unique identifiers for each one. These data can then be accessed through a common cloud storage folder and integrated to generate a more comprehensive view of growing conditions within a facility.</p>
      <fig fig-type="Figure" xml:lang="en" id="aps311280-fig-0003" orientation="portrait" position="float">
        <label>Figure 3</label>
        <caption>
          <p>Plot of sensing data, showing approximately one month of data captured with the <styled-content style="fixed-case">GM</styled-content>pi. The graph displays light intensity (yellow, top graph), temperature (red, middle graph), and humidity (blue, bottom graph) in box plot format.</p>
        </caption>
        <graphic id="nlm-graphic-5" xlink:href="APS3-7-e11280-g003"/>
      </fig>
    </sec>
  </sec>
  <sec id="aps311280-sec-0012">
    <title>CONCLUSIONS</title>
    <p>The GMpi gives researchers access to a low‐cost option for environmental data monitoring and logging that can improve reproducibility of experiments and reliability of growth chamber conditions, as well as build large data sets that can be employed as phenotypic or environmental data in future studies. With a wealth of free, cost‐effective, and open‐source resources at hand, researchers are in an excellent position to leverage these tools to revolutionize plant science and improve reproducibility in experimentation with little impact on their budgets.</p>
  </sec>
</body>
<back>
  <ack id="aps311280-sec-0013">
    <title>ACKNOWLEDGMENTS</title>
    <p>The authors thank the Bond Life Science shop employees, Wayne Shoemaker, Danny Patterson, and Leon Toebben, for their help in soldering the sensors and Raspberry Pi computer together. We also thank Nick Valentine, Alan Marshall, and Jake Gotburg for their assistance and advice in working around and within the University of Missouri firewalls.</p>
  </ack>
  <sec sec-type="data-availability" id="aps311282-sec-0008">
    <title>DATA ACCESSIBILITY</title>
    <p>All script source codes for installing and setting up the GMpi can be downloaded from GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/BrandinGrindstaff/GMpi">https://github.com/BrandinGrindstaff/GMpi</ext-link>).</p>
  </sec>
  <ref-list content-type="cited-references" id="aps311280-bibl-0001">
    <title>LITERATURE CITED</title>
    <ref id="aps311280-bib-0001">
      <mixed-citation publication-type="book" id="aps311280-cit-0001"><string-name><surname>Abbasi</surname>, <given-names>A.</given-names></string-name>, and <string-name><given-names>N.</given-names><surname>Fahlgren</surname></string-name>. <year>2016</year><chapter-title>Naive Bayes pixel‐level plant segmentation</chapter-title><italic>In</italic><source xml:lang="en">2016 IEEE Western New York Image and Signal Processing Workshop</source>, pp. <fpage>1</fpage>–<lpage>4</lpage>. <publisher-name>Institute of Electrical and Electronics Engineers, New York</publisher-name>, <publisher-loc>New York, USA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0002">
      <mixed-citation publication-type="journal" id="aps311280-cit-0002"><string-name><surname>Berry</surname>, <given-names>J. C.</given-names></string-name>, <string-name><given-names>N.</given-names><surname>Fahlgren</surname></string-name>, <string-name><given-names>A. A.</given-names><surname>Pokorny</surname></string-name>, <string-name><given-names>R. S.</given-names><surname>Bart</surname></string-name>, and <string-name><given-names>K. M.</given-names><surname>Veley</surname></string-name>. <year>2018</year><article-title>An automated, high‐throughput method for standardizing image color profiles to improve image‐based plant phenotyping</article-title>. <source xml:lang="en">PeerJ</source><volume>6</volume>: <fpage>e5727</fpage>.<pub-id pub-id-type="pmid">30310752</pub-id></mixed-citation>
    </ref>
    <ref id="aps311280-bib-0003">
      <mixed-citation publication-type="book" id="aps311280-cit-0003"><string-name><surname>Cabaccan</surname>, <given-names>C. N.</given-names></string-name>, <string-name><given-names>F. R. G.</given-names><surname>Cruz</surname></string-name>, and <string-name><given-names>I. C.</given-names><surname>Agulto</surname></string-name>. <year>2017</year><chapter-title>Wireless sensor network for agricultural environment using Raspberry Pi‐based sensor nodes</chapter-title><italic>In</italic><source xml:lang="en">2017 IEEE 9th International Conference on Humanoid, Nanotechnology, Information Technology, Communication and Control, Environment and Management</source>, pp. <fpage>1</fpage>–<lpage>5</lpage>. <publisher-name>Institute of Electrical and Electronics Engineers, New York</publisher-name>, <publisher-loc>New York, USA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0004">
      <mixed-citation publication-type="journal" id="aps311280-cit-0004"><string-name><surname>Fahlgren</surname>, <given-names>N.</given-names></string-name>, <string-name><given-names>M.</given-names><surname>Feldman</surname></string-name>, <string-name><given-names>M. A.</given-names><surname>Gehan</surname></string-name>, <string-name><given-names>M. S.</given-names><surname>Wilson</surname></string-name>, <string-name><given-names>C.</given-names><surname>Shyu</surname></string-name>, <string-name><given-names>D. W.</given-names><surname>Bryant</surname></string-name>, <string-name><given-names>S. T.</given-names><surname>Hill</surname></string-name>, et al. <year>2015</year><article-title>A versatile phenotyping system and analytics platform reveals diverse temporal responses to water availability in <italic>Setaria</italic>
</article-title>. <source xml:lang="en">Molecular Plant</source><volume>8</volume>(<issue>10</issue>): <fpage>1520</fpage>–<lpage>1535</lpage>.<pub-id pub-id-type="pmid">26099924</pub-id></mixed-citation>
    </ref>
    <ref id="aps311280-bib-0005">
      <mixed-citation publication-type="journal" id="aps311280-cit-0005"><string-name><surname>Ferdoush</surname>, <given-names>S.</given-names></string-name>, and <string-name><given-names>X.</given-names><surname>Li</surname></string-name>. <year>2014</year><article-title>Wireless sensor network system design using Raspberry Pi and Arduino for environmental monitoring applications</article-title>. <source xml:lang="en">Procedia Computer Science</source><volume>34</volume>: <fpage>103</fpage>–<lpage>110</lpage>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0006">
      <mixed-citation publication-type="book" id="aps311280-cit-0006"><string-name><surname>Gay</surname>, <given-names>W.</given-names></string-name><year>2014</year><source xml:lang="en">Raspberry Pi hardware reference</source>. <publisher-name>Apress</publisher-name>, <publisher-loc>Berkley, California, USA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0007">
      <mixed-citation publication-type="journal" id="aps311280-cit-0007"><string-name><surname>Gehan</surname>, <given-names>M. A.</given-names></string-name>, <string-name><given-names>N.</given-names><surname>Fahlgren</surname></string-name>, <string-name><given-names>A.</given-names><surname>Abbasi</surname></string-name>, <string-name><given-names>J. C.</given-names><surname>Berry</surname></string-name>, <string-name><given-names>S. T.</given-names><surname>Callen</surname></string-name>, <string-name><given-names>L.</given-names><surname>Chavez</surname></string-name>, <string-name><given-names>A. N.</given-names><surname>Doust</surname></string-name>, et al. <year>2017</year><article-title>PlantCV v2: Image analysis software for high‐throughput plant phenotyping</article-title>. <source xml:lang="en">PeerJ</source><volume>5</volume>: <fpage>e4088</fpage>.<pub-id pub-id-type="pmid">29209576</pub-id></mixed-citation>
    </ref>
    <ref id="aps311280-bib-0008">
      <mixed-citation publication-type="journal" id="aps311280-cit-0008"><string-name><surname>Gurdita</surname>, <given-names>A.</given-names></string-name>, <string-name><given-names>H.</given-names><surname>Vovko</surname></string-name>, and <string-name><given-names>M.</given-names><surname>Ungrin</surname></string-name>. <year>2016</year><article-title>A simple and low‐cost monitoring system to investigate environmental conditions in a biological research laboratory</article-title>. <source xml:lang="en">PLoS ONE</source><volume>11</volume>(<issue>1</issue>): <fpage>e0147140</fpage>.<pub-id pub-id-type="pmid">26771659</pub-id></mixed-citation>
    </ref>
    <ref id="aps311280-bib-0009">
      <mixed-citation publication-type="book" id="aps311280-cit-0009"><string-name><surname>Halfacree</surname>, <given-names>G.</given-names></string-name>, and <string-name><given-names>E.</given-names><surname>Upton</surname></string-name>. <year>2012</year><source xml:lang="en">Raspberry Pi user guide</source>. <publisher-name>John Wiley &amp; Sons</publisher-name>, <publisher-loc>Hoboken, New Jersey, USA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0010">
      <mixed-citation publication-type="book" id="aps311280-cit-0010"><string-name><surname>Hammer</surname>, <given-names>P. A.</given-names></string-name>, and <string-name><given-names>D. A.</given-names><surname>Hopper</surname></string-name>. <year>1997</year><chapter-title>Experimental design</chapter-title><italic>In</italic><person-group person-group-type="editor"><name><surname>Langhans</surname><given-names>R. W.</given-names></name></person-group> and <person-group person-group-type="editor"><name><surname>Tibbitts</surname><given-names>T. W.</given-names></name></person-group> [eds.], <source xml:lang="en">Plant growth chamber handbook</source>, <fpage>177</fpage>–<lpage>187</lpage>. <publisher-name>Iowa Agricultural and Home Economics Experiment Station</publisher-name>, <publisher-loc>Ames, Iowa, USA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0011">
      <mixed-citation publication-type="journal" id="aps311280-cit-0011"><string-name><surname>Lee</surname>, <given-names>C. S.</given-names></string-name>, and <string-name><given-names>J. O.</given-names><surname>Rawlings</surname></string-name>. <year>1982</year><article-title>Design of experiments in growth chambers—Uniformity trials in the North Carolina State University Phytotron 1</article-title>. <source xml:lang="en">Crop Science</source><volume>22</volume>(<issue>3</issue>): <fpage>551</fpage>–<lpage>558</lpage>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0012">
      <mixed-citation publication-type="journal" id="aps311280-cit-0012"><string-name><surname>Potvin</surname>, <given-names>C.</given-names></string-name>, and <string-name><given-names>S.</given-names><surname>Tardif</surname></string-name>. <year>1988</year><article-title>Sources of variability and experimental designs in growth chambers</article-title>. <source xml:lang="en">Functional Ecology</source><volume>2</volume>(<issue>1</issue>): <fpage>123</fpage>–<lpage>130</lpage>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0013">
      <mixed-citation publication-type="journal" id="aps311280-cit-0013"><string-name><surname>Shah</surname>, <given-names>N. P.</given-names></string-name>, and <string-name><given-names>P.</given-names><surname>Bhatt</surname></string-name>. <year>2017</year><article-title>Greenhouse automation and monitoring system design and implementation</article-title>. <source xml:lang="en">International Journal of Advanced Research in Computer Science</source><volume>8</volume>(<issue>9</issue>): <fpage>468</fpage>–<lpage>471</lpage>.</mixed-citation>
    </ref>
    <ref id="aps311280-bib-0014">
      <mixed-citation publication-type="journal" id="aps311280-cit-0014"><string-name><surname>Tovar</surname>, <given-names>J. C.</given-names></string-name>, <string-name><given-names>J. S.</given-names><surname>Hoyer</surname></string-name>, <string-name><given-names>A.</given-names><surname>Lin</surname></string-name>, <string-name><given-names>A.</given-names><surname>Tielking</surname></string-name>, <string-name><given-names>S. T.</given-names><surname>Callen</surname></string-name>, <string-name><given-names>S.</given-names><surname>Elizabeth Castillo</surname></string-name>, <string-name><given-names>M.</given-names><surname>Miller</surname></string-name>, et al. <year>2018</year><article-title>Raspberry Pi–powered imaging for plant phenotyping</article-title>. <source xml:lang="en">Applications in Plant Sciences</source><volume>6</volume>(<issue>3</issue>): <fpage>e1031</fpage>.<pub-id pub-id-type="pmid">29732261</pub-id></mixed-citation>
    </ref>
  </ref-list>
  <app-group>
    <app id="aps311280-app-0001" content-type="APPENDIX">
      <title>Raspberry Pi hardware setup.</title>
      <sec id="aps311280-sec-0015">
        <p>The information provided here covers the physical setup of the Raspberry Pi and its peripheries, including the physical connection of the peripheries. With the exception of connecting the Raspberry Pi to a monitor, the device should be powered off during every step of hardware setup.</p>
        <p>
          <bold>Equipment needed:</bold>
        </p>
        <p>Components ordered from Adafruit Industries LLC (New York, New York, USA; <ext-link ext-link-type="uri" xlink:href="http://www.adafruit.com">www.adafruit.com</ext-link>):</p>
        <p>
          <list list-type="bullet" id="aps311280-list-0001">
            <list-item>
              <p>Raspberry Pi computer
</p>
              <list list-type="simple" id="aps311280-list-0002">
                <list-item>
                  <label>°</label>
                  <p>Raspberry Pi Model 3B+ (1.4‐GHz cortex, A53 with 1 GB RAM; product ID: 3775)</p>
                </list-item>
                <list-item>
                  <label>°</label>
                  <p>Adafruit Raspberry Pi B+ /Pi 2/Pi 3 case, smoke base (product ID: 2258)</p>
                </list-item>
                <list-item>
                  <label>°</label>
                  <p>16 GB SD, MicroSD memory card (16 GB Class 10; product ID: 2693)</p>
                </list-item>
                <list-item>
                  <label>°</label>
                  <p>5‐V 2.4‐A switching power supply with 20 AWG MicroUSB cable (product ID: 1995)</p>
                </list-item>
              </list>
            </list-item>
            <list-item>
              <p>Temperature and humidity sensor
</p>
              <list list-type="simple" id="aps311280-list-0003">
                <list-item>
                  <label>°</label>
                  <p>DHT22 temperature–humidity sensor (product ID: 385)</p>
                </list-item>
              </list>
            </list-item>
            <list-item>
              <p>Light sensor
</p>
              <list list-type="simple" id="aps311280-list-0004">
                <list-item>
                  <label>°</label>
                  <p>Adafruit TSL2591 High Dynamic Range Digital Light Sensor (product ID: 1980)</p>
                </list-item>
              </list>
            </list-item>
            <list-item>
              <p>Camera
</p>
              <list list-type="simple" id="aps311280-list-0005">
                <list-item>
                  <label>°</label>
                  <p>Raspberry Pi Camera Board v2 (8 Megapixels; product ID: 3099)</p>
                </list-item>
                <list-item>
                  <label>°</label>
                  <p>Adafruit Raspberry Pi Camera Board Case with 1/4″ Tripod Mount (product ID: 3253)</p>
                </list-item>
                <list-item>
                  <label>°</label>
                  <p>Flex Cable for Raspberry Pi Camera (2 meters [if longer cable is desired]) (product ID: 2144)</p>
                </list-item>
              </list>
            </list-item>
          </list>
        </p>
        <p>Other important components that can be purchased elsewhere:</p>
        <p>
          <list list-type="bullet" id="aps311280-list-0006">
            <list-item>
              <p>Female–female 2.54–2.0‐mm multi‐colored jumper wires</p>
            </list-item>
            <list-item>
              <p>A computer with an SD card reader and internet access</p>
            </list-item>
            <list-item>
              <p>A monitor with an HDMI port for initial setup</p>
            </list-item>
            <list-item>
              <p>A keyboard and mouse that use a USB port to interface with the Raspberry Pi during initial setup</p>
            </list-item>
            <list-item>
              <p>An HDMI cable</p>
            </list-item>
            <list-item>
              <p>An antistatic wrist strap to protect your circuit boards from static discharge while handling</p>
            </list-item>
            <list-item>
              <p>Soldering iron</p>
            </list-item>
            <list-item>
              <p>Heat shrink tubing or electrical tape</p>
            </list-item>
          </list>
        </p>
        <sec id="aps311280-sec-0016">
          <title>Connecting sensors and other peripheries to the Raspberry Pi</title>
          <p>The light intensity sensor (TSL2591) and the temperature and humidity sensor (DHT22) can be interfaced with the Raspberry Pi via generalized purpose input/output (GPIO) pins. The GPIO pins are the 40 pins that run along the upper part of the single‐board computer. The GPIO pins can deliver 3.3 V or 5.0 V of electricity, ground, and data transfer. The data transfer pins include both inter‐integrated circuit (I2C) and universal asynchronous receiver‐transmitter (UART) protocols, although the latter is not used on the GMpi.</p>
          <p>
            <italic>TSL2591 light intensity sensor</italic>
          </p>
          <p>
            <list list-type="order" id="aps311280-list-0007">
              <list-item>
                <p>Requires the included 6‐pin header to be soldered to the device.</p>
              </list-item>
              <list-item>
                <p>Connect female–female jumper wires to pins labeled on sensor “Vin,” “GND,” “SDA,” and “SCL” using a different color for each to distinguish between them easily when connected to the Raspberry Pi. We suggest using white or red for “Vin,” the power‐in connector, and black or brown for “GND,” the ground. This coloring scheme is standard convention, like the battery connectors of a motor vehicle.
</p>
                <list list-type="alpha-lower" id="aps311280-list-0008">
                  <list-item>
                    <p>Connect the serial data (SDA) wire to GPIO pin 3 on the Raspberry Pi (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>) and connect the serial clock (SCL) wire to GPIO pin 5. These two pins facilitate data transfer for this sensor which uses I2C serial protocol.</p>
                  </list-item>
                  <list-item>
                    <p>Connect the ground wire (“GND”) to GPIO pin 9 and the power wire to GPIO pin 17, giving 3.3 V of power to the sensor and grounding it.</p>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
          <p>
            <italic>DHT22 temperature–humidity sensor</italic>
          </p>
          <p>
            <list list-type="order" id="aps311280-list-0009">
              <list-item>
                <p>Connect jumper wires to the power, data, and ground pin, using a different color for each (same as above; adhering to the convention for power and ground if desired). Facing the grid upward (front‐up), the pins are, from left to right, power, data, an unused pin, and ground.</p>
              </list-item>
              <list-item>
                <p>A 10‐kΩ resistor must be soldered between the power jumper wire and the data jumper wire in order to transmit data from the temperature and humidity sensor (DHT22) to the Raspberry Pi. Burn a small area of the wire casing off both jumper wires using a lighter. Solder the 10‐kΩ resistor between the power and data wire (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>).</p>
              </list-item>
              <list-item>
                <p>Cover the resistor and exposed wire with heat shrink wire sheathing. Heat the wire sheathing with a wire until it fits snugly. Alternatively, it is also acceptable to use electrical tape as long as the circuit is insulated to prevent shorting.</p>
              </list-item>
              <list-item>
                <p>Connect the power wire of the temperature and humidity sensor (DHT22) to GPIO pin 1, the ground wire to pin 6, and the data wire to pin 11 of the Raspberry Pi (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>).</p>
              </list-item>
            </list>
          </p>
          <p>
            <italic>Camera and camera circuit board</italic>
          </p>
          <p>
            <list list-type="order" id="aps311280-list-0010">
              <list-item>
                <p>Connect the camera circuit board to the CSI‐2 port in the lower middle of the Raspberry Pi (Fig. <xref rid="aps311280-fig-0002" ref-type="fig">2</xref>). Pull up the black tab on the port to insert the ribbon cable. Close the tab by pressing down on it.</p>
              </list-item>
              <list-item>
                <p>The camera listed above has a key to manually focus the camera. We suggest to wait to focus the lens of your camera until your GMpi is completely set up and your camera is in its final fixed position.</p>
              </list-item>
            </list>
          </p>
          <p>
            <italic>MicroSD card</italic>
          </p>
          <p>
            <list list-type="order" id="aps311280-list-0011">
              <list-item>
                <p>The microSD card can be inserted into the slot on the bottom left of the Raspberry Pi. However, be sure to install the Raspbian Stretch operating system following the steps outlined in Appendix <xref rid="aps311280-app-0002" ref-type="app">2</xref> before inserting the microSD.</p>
              </list-item>
            </list>
          </p>
          <p>
            <italic>HDMI</italic>
          </p>
          <p>
            <list list-type="order" id="aps311280-list-0012">
              <list-item>
                <p>Connect the HDMI cable between the Raspberry Pi and an HDMI‐compatible monitor for the initial setup. After the initial setup of the GMpi is complete, it can be accessed without a physical connection using the secure shell (SSH) protocol.</p>
              </list-item>
            </list>
          </p>
        </sec>
      </sec>
    </app>
    <app id="aps311280-app-0002" content-type="APPENDIX">
      <title>Raspberry Pi initial setup.</title>
      <sec id="aps311280-sec-0017">
        <p>The information provided here covers how to install the Raspbian Stretch operating system onto the Raspberry Pi as well as how to configure the device to use the <italic>GMPi_Pack</italic> software. This section also describes how to connect the Raspberry Pi to a network, which will be different for every user depending on the network being used.</p>
        <sec id="aps311280-sec-0018">
          <title>Raspberry Pi Operating System installation</title>
          <p>(Version 4.14 of Raspbian Stretch was used.)</p>
          <p>
            <list list-type="simple" id="aps311280-list-0013">
              <list-item>
                <label>1</label>
                <p>Download “Raspbian Stretch with Desktop” from <ext-link ext-link-type="uri" xlink:href="https://www.raspberrypi.org/downloads/raspbian/">https://www.raspberrypi.org/downloads/raspbian/</ext-link> (note: downloads as a .zip file).</p>
              </list-item>
              <list-item>
                <label>2</label>
                <p>Download “etcher” from <ext-link ext-link-type="uri" xlink:href="https://etcher.io">https://etcher.io</ext-link>. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0014">
                  <list-item>
                    <p>Select “Download for Windowsx64” (otherwise download the version compatible with your operating system).</p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>3</label>
                <p>Set up Etcher software. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0015">
                  <list-item>
                    <p>Accept license agreement and install.</p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>4</label>
                <p>Run etcher software; select “year‐month‐day‐raspian‐stretch.zip” (the date will be the date this version was released). 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0016">
                  <list-item>
                    <p>Select the SD card you plan to use.</p>
                  </list-item>
                  <list-item>
                    <p>Select the flash action and wait for the process to finish.</p>
                  </list-item>
                  <list-item>
                    <p>Safely remove the SD card from your computer.</p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>5</label>
                <p>Plug in microSD card into your Raspberry Pi. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0017">
                  <list-item>
                    <p>Boot up (external monitor required for this step).</p>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="aps311280-sec-0019">
          <title>Configuring Raspberry Pi</title>
          <p>(Instructions assume the Raspberry Pi is connected to a monitor, not accessed via SSH.)</p>
          <p>
            <list list-type="simple" id="aps311280-list-0018">
              <list-item>
                <label>1</label>
                <p>Select raspberry symbol in the top left of the screen.</p>
              </list-item>
              <list-item>
                <label>2</label>
                <p>Scroll down to preferences.</p>
              </list-item>
              <list-item>
                <label>3</label>
                <p>Select “Raspberry Pi Configuration.”</p>
              </list-item>
              <list-item>
                <label>4</label>
                <p>Click the interfaces tab, and enable:
</p>
                <list list-type="alpha-lower" id="aps311280-list-0019">
                  <list-item>
                    <p>SSH, to connect wirelessly.</p>
                  </list-item>
                  <list-item>
                    <p>I2C, for the light sensor.</p>
                  </list-item>
                  <list-item>
                    <p>Camera, to use the camera.</p>
                  </list-item>
                  <list-item>
                    <p>Remote GPIO, to use our sensors over the internet.</p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>5</label>
                <p>Click Localization tab.</p>
              </list-item>
              <list-item>
                <label>6</label>
                <p>Select “Set WiFi Country” and scroll down to select the appropriate country.</p>
              </list-item>
              <list-item>
                <label>7</label>
                <p>Select “Set Time Zone” and select the appropriate time zone.</p>
              </list-item>
              <list-item>
                <label>8</label>
                <p>Select “Keyboard” and select the corresponding locality/language that matches the appropriate keyboard configuration.</p>
              </list-item>
              <list-item>
                <label>9</label>
                <p>Click “OK” and reboot the Raspberry Pi.</p>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="aps311280-sec-0020">
          <title>Networking</title>
          <p>In order to connect to the GMpi device remotely, use an HDMI compatible monitor, a mouse, and a keyboard for the initial configuration to enable SSH access as outlined in the “Configuring Raspberry Pi” section of Appendix <xref rid="aps311280-app-0002" ref-type="app">2</xref>. With the device configured to use SSH, open a terminal window, and enter the following command:<disp-quote content-type="quotation" id="aps311280-blkfxd-0001"><p><monospace>ifconfig</monospace></p></disp-quote>
</p>
          <p>This command will display your network information in the terminal window. In the ‘wlan0’ section (the third block of text), look for the local IP address labeled ‘inet.’ If your network has dynamic internet protocol (IP) addresses, the address will change on a regular basis, requiring you to repeat this process with the new IP address. Therefore, setting up a static IP address is highly recommended. Universities also tend to have advanced network security protocols. Configuring the device may therefore also require advanced configuration changes to connect to the device wirelessly. For these reasons, it is recommended to contact your institution's information technology department and request a static IP address, or other additional assistance with this step.</p>
        </sec>
      </sec>
    </app>
    <app id="aps311280-app-0003" content-type="APPENDIX">
      <title>Rclone and GMpi software installation protocol.</title>
      <sec id="aps311280-sec-0021">
        <p>This section covers installation of the Rclone software that gives the GMpi the ability to upload collected data to a cloud storage server as well as the installation of the <italic>GMPi_Pack</italic> software. It also covers the use of cron, a time‐based job scheduling software included with the Raspbian Stretch operating system.</p>
        <sec id="aps311280-sec-0022">
          <title>Installing and configuring Rclone for file uploading</title>
          <p>For detailed installation information, access the Rclone developer's GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/pageauc/rclone4pi">https://github.com/pageauc/rclone4pi</ext-link>). The installation protocol is based on the instructions provided by the developer.</p>
          <p>
            <list list-type="order" id="aps311280-list-0020">
              <list-item>
                <p>Open the terminal and install Rclone. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0021">
                  <list-item>
                    <p>
                      <monospace>curl ‐L</monospace>
                      <ext-link ext-link-type="uri" xlink:href="https://raw.github.com/pageauc/rclone4pi/master/rclone-install.sh">https://raw.github.com/pageauc/rclone4pi/master/rclone-install.sh</ext-link>
                      <monospace>| bash</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <p>Upgrade to the most recent version.
</p>
                <list list-type="alpha-lower" id="aps311280-list-0022">
                  <list-item>
                    <p>
                      <monospace>cd ˜/rpi‐sync</monospace>
                    </p>
                  </list-item>
                  <list-item>
                    <p>
                      <monospace>./rclone‐install.sh upgrade</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <p>Configure Rclone. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0023">
                  <list-item>
                    <p>
                      <monospace>rclone config</monospace>
                    </p>
                  </list-item>
                  <list-item>
                    <p>A list of options will be given. Select ‘new remote’ by entering “<monospace>n</monospace>”.</p>
                  </list-item>
                  <list-item>
                    <p>Provide a name for the newly created remote sync location. It is important to remember this name because it is required information for configuring the <italic>GMPi_Pack</italic> software.</p>
                  </list-item>
                  <list-item>
                    <p>A list of file sharing services will then be given (e.g., Google Drive, Box, Dropbox). Select the desired service. We decided to use the Google Drive service.</p>
                  </list-item>
                  <list-item>
                    <p>&lt;press enter&gt; #this field is for locking program locally to a user name.</p>
                  </list-item>
                  <list-item>
                    <p>&lt;press enter&gt; #this field is for setting a password to use this program locally.</p>
                  </list-item>
                  <list-item>
                    <p>Select the desired level of access given to the selected cloud account. Full access is recommended, which can be selected by entering “<monospace>1</monospace>”.</p>
                  </list-item>
                  <list-item>
                    <p>A list host of options will then be given. Pressing “Enter” without any other inputs will accept the default options. 
</p>
                    <list list-type="roman-lower" id="aps311280-list-0024">
                      <list-item>
                        <p><monospace>y</monospace> #use autoconfig</p>
                      </list-item>
                    </list>
                  </list-item>
                  <list-item>
                    <p>&lt;press enter&gt;</p>
                  </list-item>
                  <list-item>
                    <p>The last input will make the program open a browser and requires the user to login to the chosen cloud service. 
</p>
                    <list list-type="roman-lower" id="aps311280-list-0025">
                      <list-item>
                        <p>Log in and select “allow” for Rclone to run. It will ask you if a team drive is being used. Select “y” or “n”.</p>
                      </list-item>
                    </list>
                  </list-item>
                  <list-item>
                    <p>Finally, the program will give an overview of the selected choices. Be sure to look for any errors. If everything looks correct, type “y”.</p>
                  </list-item>
                  <list-item>
                    <p>Exit the Rclone configuration by typing “q”.</p>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="aps311280-sec-0023">
          <title><italic>GMPi_Pack</italic> automatic software setup (recommended)</title>
          <p>Using the <italic>install.sh</italic> script, the user is able to automatically download all libraries and software for the GMpi. If the user chooses to manually download the <italic>GMPi_Pack</italic> software and its dependencies, follow the steps in the “<italic>GMPi_Pack</italic> manual software setup” section. Otherwise, skip to the section titled “Scheduling sensor readings with cron” after completing the steps below.</p>
          <p>
            <list list-type="order" id="aps311280-list-0026">
              <list-item>
                <p>
                  <monospace>git clone</monospace>
                  <ext-link ext-link-type="uri" xlink:href="https://github.com/BrandinGrindstaff/GMpi.git">https://github.com/BrandinGrindstaff/GMpi.git</ext-link>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd GMpi/</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>bash install.sh</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>python3 configuration.py &lt;dht&gt; &lt;data‐pin&gt;</monospace>
                </p>
              </list-item>
            </list>
          </p>
          <p>The &lt;dht&gt; and &lt;data‐pin&gt; options for the <italic>configuration.py</italic> script should be substituted with the DHT model (i.e., 22) and pin number where the data sensor is attached to the Raspberry Pi.</p>
          <p>After running the <italic>configuration.py</italic> script, a new file named ‘config.txt’ will be generated. Open this configuration file and replace all values listed as ‘&lt;REPLACE&gt;‘ with the desired values used for monitoring (e.g., times for when lights are on/off). The ranges specified here will also be used for alerting the user when growth chambers or greenhouses fall out of desired ranges for sensing.</p>
        </sec>
        <sec id="aps311280-sec-0024">
          <title><italic>GMPi_Pack</italic> manual software setup</title>
          <p>The <italic>install.sh</italic> script included with GMpi will install all software automatically. However, if users wish to install the dependencies separately, the necessary steps to accomplish this are provided below. Use the following commands to download the <italic>GMPi_Pack</italic> software from GitHub and create the configuration file ‘config.txt’.</p>
          <p>
            <list list-type="order" id="aps311280-list-0027">
              <list-item>
                <p>
                  <monospace>git clone</monospace>
                  <ext-link ext-link-type="uri" xlink:href="https://github.com/BrandinGrindstaff/GMpi.git">https://github.com/BrandinGrindstaff/GMpi.git</ext-link>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd GMpi/</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>python3 configuration.py &lt;dht&gt; &lt;data‐pin&gt;</monospace>
                </p>
              </list-item>
            </list>
          </p>
          <p>Follow the next two sets of instructions to manually install dependencies.</p>
          <p>
            <italic>Humidity and temperature software setup</italic>
          </p>
          <p>For more information, go to <ext-link ext-link-type="uri" xlink:href="https://github.com/adafruit/Adafruit_Python_DHT">https://github.com/adafruit/Adafruit_Python_DHT</ext-link>.</p>
          <p>
            <list list-type="order" id="aps311280-list-0028">
              <list-item>
                <p>Download/install <italic>Adafruit_Python_DHT</italic> library for the humidity and temperature sensor.
</p>
                <list list-type="alpha-lower" id="aps311280-list-0029">
                  <list-item>
                    <p>Open the terminal and download file. 
</p>
                    <list list-type="roman-lower" id="aps311280-list-0030">
                      <list-item>
                        <p>
                          <monospace>git clone</monospace>
                          <ext-link ext-link-type="uri" xlink:href="https://github.com/adafruit/Adafruit_Python_DHT.git">https://github.com/adafruit/Adafruit_Python_DHT.git</ext-link>
                        </p>
                      </list-item>
                    </list>
                  </list-item>
                  <list-item>
                    <p>Move to the software folder. 
</p>
                    <list list-type="roman-lower" id="aps311280-list-0031">
                      <list-item>
                        <p>
                          <monospace>cd Adafruit_Python_DHT/</monospace>
                        </p>
                      </list-item>
                    </list>
                  </list-item>
                  <list-item>
                    <p>Install the software. 
</p>
                    <list list-type="roman-lower" id="aps311280-list-0032">
                      <list-item>
                        <p>
                          <monospace>sudo</monospace>
                          <monospace>python3 setup.py install</monospace>
                        </p>
                      </list-item>
                    </list>
                  </list-item>
                  <list-item>
                    <p>If errors are encountered, try updating the system.
</p>
                    <list list-type="roman-lower" id="aps311280-list-0033">
                      <list-item>
                        <p>
                          <monospace>sudo apt‐get update</monospace>
                        </p>
                      </list-item>
                      <list-item>
                        <p>
                          <monospace>sudo apt‐get upgrade</monospace>
                        </p>
                      </list-item>
                    </list>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <p>Reboot the Raspberry Pi to allow the update to be recognized. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0034">
                  <list-item>
                    <p>
                      <monospace>sudo reboot</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <p>If Python v3 is not installed, install it using the following command. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0035">
                  <list-item>
                    <p>
                      <monospace>sudo apt‐get install build‐essential python‐dev python ‐open ssl</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
          <p>
            <italic>Light sensor software setup</italic>
          </p>
          <p>For more information on installation and setup, see <ext-link ext-link-type="uri" xlink:href="https://github.com/maxlklaxl/python-tsl2591">https://github.com/maxlklaxl/python-tsl2591</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c">https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c</ext-link> for configuring I2C.</p>
          <p>
            <list list-type="simple" id="aps311280-list-0036">
              <list-item>
                <label>1</label>
                <p>Install dependency <italic>libffi</italic> to resolve compatibility issues with Python 3. 
</p>
                <list list-type="alpha-lower" id="aps311280-list-0037">
                  <list-item>
                    <p>
                      <monospace>sudo apt‐get install libffi‐dev</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>2</label>
                <p>Configure I2C (for light sensor).
</p>
                <list list-type="alpha-lower" id="aps311280-list-0038">
                  <list-item>
                    <p>
                      <monospace>sudo apt‐get install ‐y python‐smbus</monospace>
                    </p>
                  </list-item>
                  <list-item>
                    <p>
                      <monospace>sudo apt‐get install ‐y i2c‐tools</monospace>
                    </p>
                  </list-item>
                  <list-item>
                    <p>
                      <monospace>sudo reboot</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
              <list-item>
                <label>3</label>
                <p>Download/install python‐tsl2951 library for light sensor.
</p>
                <list list-type="alpha-lower" id="aps311280-list-0039">
                  <list-item>
                    <p>
                      <monospace>git clone</monospace>
                      <ext-link ext-link-type="uri" xlink:href="https://github.com/maxlklaxl/python-tsl2591.git">https://github.com/maxlklaxl/python-tsl2591.git</ext-link>
                    </p>
                  </list-item>
                  <list-item>
                    <p>
                      <monospace>cd python‐tsl2591/</monospace>
                    </p>
                  </list-item>
                  <list-item>
                    <p>
                      <monospace>sudo python3 setup.py install</monospace>
                    </p>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="aps311280-sec-0025">
          <title>Scheduling sensor readings with cron</title>
          <p>The cron utility is a job scheduling software included in most distributions of Unix‐like operating systems that is included with Raspbian Stretch. It uses the time that is set on the Raspbian Stretch operating system (displayed in the bottom right of the screen, at the far‐right end of the task bar) to determine when to run a program. Cron can be extremely useful for automating processes to run on a set time interval. The GMpi uses cron to execute sensor reads, capture images, and upload data at set time intervals without manual execution by the user.</p>
          <p>
            <list list-type="roman-lower" id="aps311280-list-0040">
              <list-item>
                <p>To create a crontab file, execute the following commands in a terminal window.
</p>
                <list list-type="alpha-lower" id="aps311280-list-0041">
                  <list-item>
                    <p>
                      <monospace>crontab ‐e</monospace>
                    </p>
                    <list list-type="roman-lower" id="aps311280-list-0042">
                      <list-item>
                        <p>This will give a set of options for selecting a text editor to make changes to the crontab file. Select the desired text editor (we chose nano) and begin editing your crontab file.</p>
                      </list-item>
                      <list-item>
                        <p>A crontab entry accepts six fields separated by spaces. 
</p>
                        <list list-type="order" id="aps311280-list-0043">
                          <list-item>
                            <p>From left to right: minute, hour, day of the month, month, day of the week, and the command to be executed.</p>
                          </list-item>
                        </list>
                      </list-item>
                      <list-item>
                        <p>There are also a number of functions that can be done with integers in any of those first five fields, as long as they are within the specified range of the field described in the text at the top of the file. 
</p>
                        <list list-type="order" id="aps311280-list-0044">
                          <list-item>
                            <p>To denote “first through last” in one of the first five fields use an asterisk.</p>
                          </list-item>
                        </list>
                      </list-item>
                      <list-item>
                        <p>Crontabs invokes the command from the user's HOME directory, so it is important to include the correct file path in your command.
</p>
                        <list list-type="order" id="aps311280-list-0045">
                          <list-item>
                            <p>For example:
</p>
                            <list list-type="alpha-lower" id="aps311280-list-0046">
                              <list-item>
                                <p>
                                  <monospace>*/2 * * * * cd ˜/GMpi &amp;&amp; python3 sense.py</monospace>
                                </p>
                                <list list-type="roman-lower" id="aps311280-list-0047">
                                  <list-item>
                                    <p>This tells crontabs that every other minute (<monospace>*/2</monospace>), of every hour (<monospace>*</monospace>), of every day of the month (<monospace>*</monospace>), of every month (<monospace>*</monospace>), and every day of the week (<monospace>*</monospace>), to change directory (<monospace>cd</monospace>) from user's HOME folder to the GMpi (<monospace>˜/GMpi</monospace>) folder and (<monospace>&amp;&amp;</monospace>) to use python3 to run “<monospace>sense.py</monospace>” and collect sensor readings.</p>
                                  </list-item>
                                </list>
                              </list-item>
                            </list>
                          </list-item>
                          <list-item>
                            <p>For more information on setting up cron jobs, read the text at the top of the created crontab file and/or read the manual to crontab or cron included with the Raspbian Stretch operating system.</p>
                          </list-item>
                        </list>
                      </list-item>
                    </list>
                  </list-item>
                </list>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="aps311280-sec-0026">
          <title>Remote notifications</title>
          <p>To create an incoming webhook for Slack notifications, first choose the desired workspace for receiving alerts. It is recommended that users create a separate GMpi channel to facilitate communication. Once a workspace has been chosen, install a new app to the workspace by selecting “+ add apps” at the bottom of the left‐most column. Search for the “Incoming Webhooks” option and click “Install.” Once installed, users can modify the settings to choose which channel GMpi should post to, add descriptive labels, and customize names and icons. The webhook URL link included in the settings section is what needs to be added to the configuration file for alerts to be sent successfully.</p>
        </sec>
      </sec>
    </app>
  </app-group>
</back>
