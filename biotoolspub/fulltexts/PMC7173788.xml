<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">plosone</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7173788</article-id>
    <article-id pub-id-type="publisher-id">PONE-D-19-34336</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0231714</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Mathematics</subject>
          <subj-group>
            <subject>Applied Mathematics</subject>
            <subj-group>
              <subject>Algorithms</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Research and Analysis Methods</subject>
        <subj-group>
          <subject>Simulation and Modeling</subject>
          <subj-group>
            <subject>Algorithms</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Software</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Data Visualization</subject>
          <subj-group>
            <subject>Infographics</subject>
            <subj-group>
              <subject>Graphs</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Programming Languages</subject>
          <subj-group>
            <subject>Fortran</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Chemistry</subject>
          <subj-group>
            <subject>Chemical Compounds</subject>
            <subj-group>
              <subject>Hydrates</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Design</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Design</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Data Visualization</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Dataflow programming for the analysis of molecular dynamics with AViS, an analysis and visualization software application</article-title>
      <alt-title alt-title-type="running-head">Dataflow programming for the analysis of molecular dynamics with the AViS software application</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1856-5259</contrib-id>
        <name>
          <surname>Pua</surname>
          <given-names>Kai</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Visualization</role>
        <role content-type="http://credit.casrai.org/">Writing – original draft</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001"/>
        <xref ref-type="author-notes" rid="currentaff001">
          <sup>¤</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Yuhara</surname>
          <given-names>Daisuke</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Data curation</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ayuba</surname>
          <given-names>Sho</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Data curation</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Yasuoka</surname>
          <given-names>Kenji</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Project administration</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <role content-type="http://credit.casrai.org/">Supervision</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001"/>
        <xref ref-type="corresp" rid="cor001">*</xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <addr-line>Department of Mechanical Engineering, Keio University, Yokohama, Kanagawa, Japan</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Salahub</surname>
          <given-names>Dennis</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>University of Calgary, CANADA</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
      </fn>
      <fn fn-type="current-aff" id="currentaff001">
        <label>¤</label>
        <p>Current address: Department of Computer Science, Graduate School of Information Science and Technology, The University of Tokyo, Tokyo, Japan</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>yasuoka@mech.keio.ac.jp</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>21</day>
      <month>4</month>
      <year>2020</year>
    </pub-date>
    <volume>15</volume>
    <issue>4</issue>
    <elocation-id>e0231714</elocation-id>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>12</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>30</day>
        <month>3</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2020 Pua et al</copyright-statement>
      <copyright-year>2020</copyright-year>
      <copyright-holder>Pua et al</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pone.0231714.pdf"/>
    <abstract>
      <p>The study of molecular dynamics simulations is largely facilitated by analysis and visualization toolsets. However, these toolsets are often designed for specific use cases and those only, while scripting extensions to such toolsets is often exceedingly complicated. To overcome this problem, we designed a software application called AViS which focuses on the extensibility of analysis. By utilizing the dataflow programming (DFP) paradigm, algorithms can be defined by execution graphs, and arbitrary data can be transferred between nodes using visual connectors. Extension nodes can be implemented in either Python, C++, and Fortran, and combined in the same algorithm. AViS offers a comprehensive collection of nodes for sophisticated visualization state modifications, thus greatly simplifying the rules for writing extensions. Input files can also be read from the server automatically, and data is fetched automatically to improve memory usage. In addition, the visualization system of AViS uses physically-based rendering techniques, improving the 3D perception of molecular structures for interactive visualization. By performing two case studies on complex molecular systems, we show that the DFP workflow offers a much higher level of flexibility and extensibility when compared to legacy workflows. The software source code and binaries for Windows, MacOS, and Linux are freely available at <ext-link ext-link-type="uri" xlink:href="https://avis-md.github.io/">https://avis-md.github.io/</ext-link>.</p>
    </abstract>
    <funding-group>
      <funding-statement>The author(s) received no specific funding for this work.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="8"/>
      <table-count count="0"/>
      <page-count count="13"/>
    </counts>
    <custom-meta-group>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>All relevant data are within the manuscript and its Supporting Information files. The source code and binaries for the software are hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/avis-md/avis">https://github.com/avis-md/avis</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>All relevant data are within the manuscript and its Supporting Information files. The source code and binaries for the software are hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/avis-md/avis">https://github.com/avis-md/avis</ext-link>.</p>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>The study of molecular behaviour through analysis and visualization of Molecular Dynamics (MD) simulations is becoming more widely adopted with the increasing processing power of modern computers. A large number of software was developed for this purpose, each with a give-and-take balance between analysis and visualization flexibility. For example, analysis-focused libraries such as MDAnalysis [<xref rid="pone.0231714.ref001" ref-type="bibr">1</xref>] [<xref rid="pone.0231714.ref002" ref-type="bibr">2</xref>], MDTraj [<xref rid="pone.0231714.ref003" ref-type="bibr">3</xref>], and cpptraj [<xref rid="pone.0231714.ref004" ref-type="bibr">4</xref>] provide the necessary toolsets to analyze complex molecular systems to extract relevant information, while some analysis software such as VMD [<xref rid="pone.0231714.ref005" ref-type="bibr">5</xref>], AVOGADRO [<xref rid="pone.0231714.ref006" ref-type="bibr">6</xref>], PyMOL [<xref rid="pone.0231714.ref007" ref-type="bibr">7</xref>], and VESTA [<xref rid="pone.0231714.ref008" ref-type="bibr">8</xref>], apart from their analysis capabilities, also provide tools to visualize the results. While most analysis software offer very extensive analysis capabilities, and they allow complex modifications and extensions to the framework, a deep knowledge of their respective scripting interfaces are required, and hard constraints applied to valid scripts are a hurdle for novice users, even those well versed in bare-bone analysis programming. Therefore, common analysis methods such as hydrogen bonds or Common Neighbor Analysis are often provided in most applications and new algorithms are seldom implemented for integration with the software, except for advanced users. Other software such as OVITO [<xref rid="pone.0231714.ref009" ref-type="bibr">9</xref>] uses a combined visual workflow of analysis and visualization, and enabling complicated techniques to be separated and applied in steps. However, a large dependency on the API is still required when writing custom modules, and the flexibility of data transfer between functions is somewhat limited. In this paper, we seek to improve these limitations by proposing an Analysis and Visualization Software (AViS) application from scratch which utilizes the dataflow programming (DFP) paradigm and allows for graphical designing and debugging of algorithms. This study also demonstrates the flexibility and API simplicity of AViS and DFP in the analysis and visualization of MD data. By using AViS, we are able to simplify and accelerate various analysis and visualization tasks, as described in the sections that follow.</p>
  </sec>
  <sec sec-type="materials|methods" id="sec002">
    <title>Methods</title>
    <sec id="sec003">
      <title>Software overview</title>
      <p>AViS is an OpenGL-based application written in C++. The software is portable and runs natively on various Microsoft Windows / macOS / Linux versions. As an integrated software application, AViS provides a unified environment for analysis and visualization. The user interface of AViS is shown in <xref ref-type="fig" rid="pone.0231714.g001">Fig 1</xref>.</p>
      <fig id="pone.0231714.g001" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g001</object-id>
        <label>Fig 1</label>
        <caption>
          <title>Application screenshot.</title>
          <p>A screenshot of AViS, with its analysis and visualization modes. (a) Analysis mode of AViS. The graphical algorithm to compute the hydrogen bonds and density profile of carbon nanotubes are set up. (b) Visualization mode of AViS. The system as well as the results of the analysis is visualized. Various realtime effects such as Bloom, Ambient Occlusion, and Depth of Field are also applied to the 3D view.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g001"/>
      </fig>
    </sec>
    <sec id="sec004">
      <title>Analysis</title>
      <sec id="sec005">
        <title>Application of dataflow programming</title>
        <p>As existing analysis paradigms lack flexibility, we designed AViS with the DFP paradigm in its analysis framework, implemented as execution graphs. An execution graph contains multiple nodes, which are evaluated in order and their outputs are passed on to other nodes. Due to the black-box nature of DFP, users do not need to control data conversion and copying, and thus a combination of nodes implemented in different languages in the same graph is allowed. Therefore, new nodes can be created by the user using either Fortran, Python, or C++. Each node exposes its input/output variables in the user interface (UI), which can then be connected to any counterpart with a compatible type. In addition to integer and floating-point values, AViS also supports the data transfer of multi-dimensional variable-length arrays. A list of internal nodes provided by AViS is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s001">S1 Table</xref>. Various examples of analyses using this software can be found in the documentation pages.</p>
      </sec>
      <sec id="sec006">
        <title>Scripting</title>
        <p>Due to the multi-language compatibility, a generic and easy-to-understand format must be enforced for analysis scripts. In this case, we specifically designed the software with no API whatsoever; all relevant code is appended by the internal pre-processor. This makes writing scripts for AViS extremely easy as the user does not have to learn about any application-specific function calls or data structures. As a replacement, we require that all variables that the user wishes to expose to other nodes be preceded with a short comment. An example of valid analysis scripts written in Fortran, Python, and C++ is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s002">S1</xref>, <xref ref-type="supplementary-material" rid="pone.0231714.s003">S2</xref> and <xref ref-type="supplementary-material" rid="pone.0231714.s004">S3</xref> Appendices, respectively, and they can be used together, as shown in <xref ref-type="supplementary-material" rid="pone.0231714.s009">S1 Fig</xref>. Compilers available in the system are used for compilations, with support for gcc, clang, MSBuild and Python 3.7. AViS can still work with other languages even if certain compilers are not available. A summary of comment syntax for each language is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s005">S4 Appendix</xref> through <xref ref-type="supplementary-material" rid="pone.0231714.s007">S6 Appendix</xref>.</p>
        <p>To allow for interoperability between languages, C++ and Fortran scripts are edited internally before being compiled and loaded as dynamic libraries. Additional code is inserted in place of the comments, so the line numbers in the error messages will still match the original file. For Fortran scripts, subroutines that expose the shape and contents of arrays to AViS are automatically generated and appended. This allows AViS to interact with multi-dimensional variable-length arrays in Fortran scripts, with no effort on the user’s part. For Python, all variables are accessed directly using the Python C API, and arrays use the Numpy [<xref rid="pone.0231714.ref010" ref-type="bibr">10</xref>] C API.</p>
      </sec>
      <sec id="sec007">
        <title>Attributes</title>
        <p>Compared to classic data processing pipelines and single-file analysis workflows, the graph workflow provides a higher level of freedom for data transfer. As data flow is defined solely in the UI, very generic scripts and algorithms may be written, without special consideration of the data source. To ease the analysis of values assigned to each atom, such as order parameter values, AViS also allows for the definition of an arbitrary number of “attributes” in the UI. The values can be read from, and written to, at any point in the execution. Operations with attributes are defined in the graph UI, so complicated algorithms involving the reuse of multiple variables can be achieved easily. Attributes are also useful for algorithm debugging purposes as they allow for the visualization of intermediate outputs.</p>
      </sec>
    </sec>
    <sec id="sec008">
      <title>Data input</title>
      <p>As many different types of simulation software give rise to a variety of file formats, it is vital that AViS supports as many formats as possible. AViS natively supports the importing of configuration and trajectory files from popular formats such as GROMACS [<xref rid="pone.0231714.ref011" ref-type="bibr">11</xref>], LAMMPS [<xref rid="pone.0231714.ref012" ref-type="bibr">12</xref>], and Protein Data-Bank [<xref rid="pone.0231714.ref013" ref-type="bibr">13</xref>] files. Other formats can also be expanded for AViS by writing a C plugin and putting the compiled library in the designated folder. Data from the trajectories can then be accessed from scripts using the input nodes, as shown in <xref ref-type="supplementary-material" rid="pone.0231714.s010">S2 Fig</xref>. A generic Space-Separated Values (SSV) format is also available for loading trajectories containing arbitrary attributes without writing a plugin. An example file is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s008">S7 Appendix</xref>. By importing attributes, users can perform analysis on complex molecules without being constrained by the existing attribute list of the software or the file formats. An example of this usage for a system of liquid crystals as shown in <xref ref-type="supplementary-material" rid="pone.0231714.s011">S3 Fig</xref>, where the orientation vectors are imported as the rotx, roty, and rotz, attributes and may be analyzed and visualized without the need for software extensions. The data import and analysis frameworks are entirely seperated, so different files written in different formats can be easily analysed using the same analysis graph.</p>
    </sec>
    <sec id="sec009">
      <title>Visualization</title>
      <p>As graphics cards become more powerful, visualization programs should exploit the capabilities of the hardware with the newest methods and APIs. AViS uses the OpenGL 3.3 standard, which is the most recent version that is also supported on most computers. All atoms and bonds are drawn as sprites using ray-tracing methods, and all polygon meshes, such as protein strips, are generated on-the-fly using shaders. The lighting model is physically-based and uses pre-processed radiance maps and a Fresnel term [<xref rid="pone.0231714.ref014" ref-type="bibr">14</xref>], improving the 3D perception of molecules. The deferred rendering method is adopted for the rendering path to allow for sophisticated lighting techniques and improved performance of the UI. Details of the rendering procedure are shown in <xref ref-type="supplementary-material" rid="pone.0231714.s012">S4 Fig</xref>. By combining these methods, we are able to achieve interactive to real-time frame-rates on typical computers, even for systems with millions of atoms. As the deferred rendering path saves intermediate results, we further improve performance of the interface by only redrawing the parts of the rendering path that are required. For example, when the user changes the lighting intensity, the geometry buffer is retained and only the lighting buffer is recalculated. The intermediate buffers also allow for sophisticated lighting effects such as Depth-of-Field and Screen-Space Ambient Occlusion.</p>
      <p>In the place of a scripting interface, AViS provides a comprehensive collection of operation nodes. These nodes allow arbitrary script inputs/outputs to interact with the loaded data and visualization state. For example, the following non-exhaustive operations can be performed using nodes:
<list list-type="bullet"><list-item><p>Querying all positions of current atoms that are visible or in a certain region</p></list-item><list-item><p>Modifying the color/radius/visibility of atoms</p></list-item><list-item><p>Creating bonds between atoms</p></list-item></list></p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec010">
    <title>Results and discussion</title>
    <p>Two case studies are used to demonstrate the flexibility and extensibility of AViS. Here, we look at the formation of Lennard-Jones (LJ) droplets and clathrate hydrates. We choose these systems as their analysis process is complex enough to show the capabilities of AViS. As the total file sizes of the two simulations considered are about 7 and 14 Gigabytes, respectively, the data for both simulations are prepared on a remote file storage system. However, we show that analysis and visualization can still be performed on them by utilizing the remote file handling capability of AViS. All scripts used in these studies are provided as supplementary information, implemented in C++. Some scripts are also translated to Python and Fortran for reference. The analysis results remain consistent when replacing nodes with one generated from a different language. We encourage the reader to refer to the comments in each script detailing the implementation for each analysis step.</p>
    <sec id="sec011">
      <title>Analysis flexibility</title>
      <p>For the first case study, we performed the tracking of nucleated clusters in a LJ droplet system [<xref rid="pone.0231714.ref015" ref-type="bibr">15</xref>]. As the tracking of clusters requires the implementation of complex recurrent algorithms and extensive use of temporary variables, this case study is intended to test the flexibility of the analysis framework of AViS. For this study, we performed a simulation of 10976 LJ atoms using FDPS [<xref rid="pone.0231714.ref016" ref-type="bibr">16</xref>], and recorded a total of 10,000 snapshots over a simulation time of 21.5 ns.</p>
      <p>First, we identified the largest nucleated cluster in the final snapshot. The flexibility of DFP allows us to split up the algorithm into different generic functions, as shown in <xref ref-type="fig" rid="pone.0231714.g002">Fig 2(a)</xref>. We used three different functions written in C++. Their contents are listed as follows:
<list list-type="bullet"><list-item><p><italic>list_neighbors</italic>: Create a neighbor-list for each molecule with a user-defined cutoff.</p></list-item><list-item><p><italic>group_list</italic>: Apply a unique ID to each group of connected molecules.</p></list-item><list-item><p><italic>mode_mask</italic>: Label the molecules with the ID that appears most often.</p></list-item></list></p>
      <fig id="pone.0231714.g002" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g002</object-id>
        <label>Fig 2</label>
        <caption>
          <title>The analysis setup for LJ droplets.</title>
          <p>(a) The largest cluster identification algorithm setup. (b) The cluster tracking algorithm setup. (c) The color graduation algorithm setup.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g002"/>
      </fig>
      <p>The results of each step are saved as a different attribute for debugging, with their visualization results shown in <xref ref-type="fig" rid="pone.0231714.g003">Fig 3</xref>. By splitting the algorithm into separate nodes, we are able to visually debug the results of each step. This is considerably easier than implementing the whole algorithm in one function.</p>
      <fig id="pone.0231714.g003" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g003</object-id>
        <label>Fig 3</label>
        <caption>
          <title>Visualization of the attribute results of the largest cluster identification algorithm.</title>
          <p>(a) The number of neighbors of each molecule. The color shifts from blue to red with an increasing number of neighbors. (b) The cluster index of each molecule. Each color corresponds to an unique cluster index. (c) The label mask for the largest cluster. The largest cluster is colored red.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g003"/>
      </fig>
      <p>Next, we tracked the formation of the identified cluster by devising a recurrent algorithm that updates the cluster label based on the next snapshot. The visual representation of the algorithm is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s013">S5 Fig</xref>. First, the cluster IDs for the current frame are computed. Next, the number of molecules in each cluster that is labeled as a cluster in the previous frame are counted. Finally, the cluster with the largest number of counted molecules is identified as the main cluster, and the labels are updated accordingly. If the count is 0, the cluster has dissipated, and so the labels are cleared. This algorithm is implemented in a new node:
<list list-type="bullet"><list-item><p><italic>track_cluster</italic>: Update the labels based on current cluster groups.</p></list-item></list></p>
      <p>As this algorithm still requires the grouping of clusters in each snapshot, we exploit the flexibility of the graph system by reusing the grouping functions in the previous step. The complete setup is shown in <xref ref-type="fig" rid="pone.0231714.g002">Fig 2(b)</xref>. To make the algorithm recurrent, the same attribute (<italic>current_label</italic>) is set as both the input and output target of the <italic>track_cluster</italic> node, which is allowed in AViS. An additional attribute is also used to save the output for the whole trajectory, whose results are shown in <xref ref-type="fig" rid="pone.0231714.g004">Fig 4</xref>.</p>
      <fig id="pone.0231714.g004" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g004</object-id>
        <label>Fig 4</label>
        <caption>
          <title>Visualization of the results of the tracking algorithm.</title>
          <p>In this algorithm, the main cluster is tracked backwards through time and colored red. (a) The final snapshot. The largest cluster is labeled. (b) The snapshot during the instant two clusters have combined. The clusters still share a common label. (c) The snapshot before the two clusters combined. The largest of the two is tracked and labeled.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g004"/>
      </fig>
      <p>Finally, we applied a gradient to each molecule based on its formation time, where atoms would fade to red as they join the cluster, and fade to blue when they leave. This is achieved by using a second recurrent function centered on a new node:
<list list-type="bullet"><list-item><p><italic>labels2colors</italic>: Update the color of atoms based on their label.</p></list-item></list></p>
      <p>By running the setup forward through time, as shown in <xref ref-type="fig" rid="pone.0231714.g002">Fig 2(c)</xref>, atoms fade into red or blue as they join or leave the cluster. However, we also require that atoms that are about to join a cluster fade from blue and vice versa. This is easily achieved in AViS by running the exact same algorithm backwards by setting the appropriate option. This shows the advantage of exposing the algorithm as nodes, in that it allows for changes in the execution flow without modifying the code. The attributes created from both loops are then combined, resulting in the output as shown in <xref ref-type="fig" rid="pone.0231714.g005">Fig 5</xref>.</p>
      <fig id="pone.0231714.g005" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g005</object-id>
        <label>Fig 5</label>
        <caption>
          <title>The results of the color graduation algorithm.</title>
          <p>A color gradient is applied so that atoms are colored blue to red based on how near they are to being a part of the main cluster. The same snapshots from <xref ref-type="fig" rid="pone.0231714.g004">Fig 4</xref> is used. (a) A subcluster turns green right before merging with the tracked cluster (b). (c) A small green cloud surrounds the tracked cluster, indicating the constant flux of particles.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g005"/>
      </fig>
      <p>Other common processes in cluster analysis include finding the largest cluster at every point in time. As we already have all the components, we simply plug the <italic>group_ids</italic> into the <italic>mode_mask</italic> node. We can also offset the camera to point to the labeled cluster by calculating its center with a self-evident script and passing the result to the <italic>Set Camera Center</italic> node.</p>
      <p>To conclude, this case study showed that by using AViS’ graph system, algorithms that involve loops over multiple modules that are otherwise difficult to achieve can be easily implemented. As the module implementations are completely isolated, each function can also be written with little to no reference to others, thus speeding up the analysis procedure.</p>
    </sec>
    <sec id="sec012">
      <title>Visualization flexibility</title>
      <p>The Mutually Coordinated Guest (MCG-1) algorithm for the study of the growth of methane clathrate hydrates was presented by Barnes <italic>et al</italic>. [<xref rid="pone.0231714.ref017" ref-type="bibr">17</xref>]. For effective analysis of the results, we would like to change the appearance of atoms based on the results, as well as create bonds forming the hydrate-like structures. Therefore, high interoperability between analysis and visualization modules is required. In this study, we used a portion of the same data created by the authors of the MCG-1 algorithm [<xref rid="pone.0231714.ref018" ref-type="bibr">18</xref>], which contains a mixture of 2944 water atoms and 512 methane atoms, over 8000 frames.</p>
      <p>The MCG algorithm looks for the structure shown in <xref ref-type="supplementary-material" rid="pone.0231714.s014">S6 Fig</xref>. The algorithm is split into separate modules for ease of debugging, with each module explained below. The completed analysis graph is shown in <xref ref-type="fig" rid="pone.0231714.g006">Fig 6</xref>.</p>
      <fig id="pone.0231714.g006" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g006</object-id>
        <label>Fig 6</label>
        <caption>
          <title>The complete setup for the second case study.</title>
          <p>The analysis setup for the hydrate formation case study, namely the MCG-1 algorithm.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g006"/>
      </fig>
      <p>Several nodes are created for this case study, one for each step of the algorithm:
<list list-type="bullet"><list-item><p><italic>filter_guests</italic>: Find pairs of guests within 9Åof each other.</p></list-item><list-item><p><italic>filter_waters</italic>: Find water molecules that are 45° between each guest pair.</p></list-item><list-item><p><italic>hbonds_filtered</italic>: Find hydrogen bonds between selected water molecules.</p></list-item><list-item><p><italic>reconnect_water</italic>: Change O-H bonds to O-O bonds.</p></list-item><list-item><p><italic>find_links</italic>: Look for bonds making up a <italic>n</italic>-chain polygon. In this study, <italic>n</italic> is set to 5.</p></list-item><list-item><p><italic>register_hydrate</italic>: Assign a unique label for caged guests and their oxygen atom structures.</p></list-item></list></p>
      <p>Additionally, the following operational nodes provided in AViS are used for modifications on the visualization state:
<list list-type="bullet"><list-item><p><italic>Extra Bonds</italic>: Create additional bonds between atoms.</p></list-item><list-item><p><italic>Show Range</italic>: Hide atoms with an attribute value outside of a specified range.</p></list-item><list-item><p><italic>Set Radius Scale</italic>: Modify the radius of atoms.</p></list-item></list></p>
      <p>As with the first case study, splitting the algorithm into parts allowed us to visually debug the validity of each step. As with the previous case study, all atom properties such as masks are saved as attributes, one of which can be seen in <xref ref-type="fig" rid="pone.0231714.g007">Fig 7(a)</xref>. Also, the bonds created can be easily switched between O-H (<xref ref-type="fig" rid="pone.0231714.g007">Fig 7(b)</xref>) and O-O (<xref ref-type="fig" rid="pone.0231714.g007">Fig 7(c)</xref>) by simply changing the input source of the <italic>Extra Bonds</italic> node. This further shows the advantage of exposing critical functions in the UI instead of as an API.</p>
      <fig id="pone.0231714.g007" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g007</object-id>
        <label>Fig 7</label>
        <caption>
          <title>The intermediate results of the hydrate analysis.</title>
          <p>Large spheres are methane molecules, while small connected spheres are O and H atoms of water molecules. (a) Water molecules identified by the MCG-1 algorithm are colored red. (b) Cage bonds are drawn in yellow in the form of O-H bonds. (c) Cage bonds are drawn in yellow in the form of O-O bonds. AViS is able to change between (b) and (c) by simply switching the connection of nodes.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g007"/>
      </fig>
      <p>By running the algorithm across the whole trajectory, the progression of the formation of hydrates can be visualized as shown in <xref ref-type="fig" rid="pone.0231714.g008">Fig 8</xref>. AViS automatically caches the result for each step, so when the calculation is finished, all results can be visualized in the window directly, including dynamic bonds, visibility, and size changes.</p>
      <fig id="pone.0231714.g008" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0231714.g008</object-id>
        <label>Fig 8</label>
        <caption>
          <title>The progression of hydrate formation in the trajectory.</title>
          <p>Unidentified and identified methane molecules are colored blue and green respectively, and unindentified water molecules are not visualized. Snapshots (a), (b), and (c), are taken at arbitrary frames throughout the trajectory. AViS caches the results of each analysis frame, so modifications including radius, color, and additional bonds can be animated.</p>
        </caption>
        <graphic xlink:href="pone.0231714.g008"/>
      </fig>
      <p>Additionally, a crucial step in hydrate nucleation analysis is identifying the formation time of the initial cluster by plotting the value of the order parameter through time. This can be achieved in AViS by using the <italic>Plot Data</italic> node set to the <italic>Lines (Accumulate)</italic> mode, taking the order parameter value as input. The output of the node is shown in <xref ref-type="supplementary-material" rid="pone.0231714.s015">S7 Fig</xref>, which shows the point of hydrate formation at approximately frame 2000.</p>
      <p>To conclude, this case study showed that by exposing essential functions in the UI, changes to the visualization state can be made instantly, with no need for recompilations or API lookups. As a result, visual debugging of algorithms can be performed easily, without extensive and potentially complex changes to the code.</p>
      <p>From our case studies, we can say that our software is useful for students or researchers who would like to visually inspect their algorithm’s results easily, or when designing and tweaking the algorithm itself, as changing and debugging parameters are very easily acheived, and the independance between functions make it very easy to rearrange, reuse, and understand snippets of code. However, such frameworks do suffer from a lower execution speed compared to raw analysis code, and the optimization of DFP code is a research topic we are currently tackling. We do think though that by using AViS to design analysis code, a lower performance in exchange for a much faster debugging time is acceptable for non-expert researchers.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec013">
    <title>Conclusions</title>
    <p>We have introduced Dataflow Programming for the analysis of MD data by creating AViS and demonstrated its flexibility in two complex case studies. We also showed that by abstracting the analysis scripts, we are able to substantially reduce the complexity of user code, while retaining the ability to interact with the visualization system. We believe that the DFP method has great potential, and while manual parallelization of single nodes using OpenMP is possible, we expect future work on parallelization of graph executions to further improve analysis performance. The source code, binaries for Windows, Linux, and MacOS, as well as documentation of AViS, are hosted on Github at <ext-link ext-link-type="uri" xlink:href="https://avis-md.github.io">https://avis-md.github.io</ext-link>.</p>
  </sec>
  <sec sec-type="supplementary-material" id="sec014">
    <title>Supporting information</title>
    <supplementary-material content-type="local-data" id="pone.0231714.s001">
      <label>S1 Table</label>
      <caption>
        <title>Examples of in-built nodes provided by AViS.</title>
        <p>Custom nodes can be implemented by the user to interact with internal nodes, regardless of language.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s001.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s002">
      <label>S1 Appendix</label>
      <caption>
        <title>A valid fortran analysis script that generates a sine wave.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s002.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s003">
      <label>S2 Appendix</label>
      <caption>
        <title>A valid Python analysis script that differentiates an array.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s003.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s004">
      <label>S3 Appendix</label>
      <caption>
        <title>A valid C++ analysis script that applies an exponential decay to a signal.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s004.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s005">
      <label>S4 Appendix</label>
      <caption>
        <title>Comment syntax for Fortran scripts.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s005.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s006">
      <label>S5 Appendix</label>
      <caption>
        <title>Comment syntax for Python scripts.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s006.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s007">
      <label>S6 Appendix</label>
      <caption>
        <title>Comment syntax for C++ scripts.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s007.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s008">
      <label>S7 Appendix</label>
      <caption>
        <title>An example of a SSV file with rotational and potential attributes.</title>
        <p>Each entry in the first line represents the type of data in each column.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s008.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s009">
      <label>S1 Fig</label>
      <caption>
        <title>Multi-language support for analysis.</title>
        <p>AViS handles data transfer between Fortran, Python, and C++ scripts automatically, including arrays as seen here.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s009.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s010">
      <label>S2 Fig</label>
      <caption>
        <title>Accessing molecular data from scripts.</title>
        <p>The molecular data of the loaded configuration and trajectory can be accessed using the input nodes. The positions and velocities of the current visible frame, as well as of the whole trajectory can be accessed, as well as additional attributes that are imported, if available. The input values update to the data for each frame over the trajectory when the graph is executed for all frames.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s010.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s011">
      <label>S3 Fig</label>
      <caption>
        <title>Visualization and analysis of molecules with attribute data.</title>
        <p>(a) By importing the orientation data as attributes with the Generic SSV format, liquid crystal molecules can be visualized without the need to write a custom plugin or importer. In this figure, a color gradient is also applied based on the <italic>roty</italic> attribute. (b) Individual attributes can be used in analysis by utilizing the <italic>Get Attribute</italic> node.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s011.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s012">
      <label>S4 Fig</label>
      <caption>
        <title>The rendering pipeline.</title>
        <p>(a) Bounding quads are generated using a vertex shader. (b)(c) Surface information channels are generated using ray-tracing in a fragment shader. (d) A Physically-based Rendering (PBR) shader combines the channels into the final image. (e) By utilizing deferred shading, UI overlays and image effects can be added without re-drawing the whole scene, thus improving performance.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s012.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s013">
      <label>S5 Fig</label>
      <caption>
        <title>The visual representation of the tracking algorithm.</title>
        <p>(a) The current frame. (b) The next frame. (c) The number of particles belonging to the previous cluster is counted. (d) The labels are updated for the cluster with the largest count.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s013.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s014">
      <label>S6 Fig</label>
      <caption>
        <title>MCG-1 algorithm representation.</title>
        <p>A visual representation of the mutually coordinated guest order parameter used in the case study on clathrate hydrates. The algorithm is presented by Barnes <italic>et al</italic>. [<xref rid="pone.0231714.ref017" ref-type="bibr">17</xref>]).</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s014.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s015">
      <label>S7 Fig</label>
      <caption>
        <title>The value of the order parameter across the whole trajectory.</title>
        <p>By recording the number of classified molecules every step, we can identify the point of hydrate formation at about frame 2000.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0231714.s015.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0231714.s016">
      <label>S1 File</label>
      <caption>
        <p>(ZIP)</p>
      </caption>
      <media xlink:href="pone.0231714.s016.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>The authors would like to thank Y. Ono for generously providing us with the carbon nanotubes data for the creation of <xref ref-type="fig" rid="pone.0231714.g001">Fig 1</xref>, as well as Dr. T. Nozawa for the Liquid Crystal data for the creation of <xref ref-type="supplementary-material" rid="pone.0231714.s010">S2 Fig</xref>. Thanks are also given to Dr. M. Nakayama for his invaluable input on visualization techniques in OpenGL. We would also like to thank Prof. A. K. Sum for allowing us to use the data in the second case study on methane hydrates. Finally, we would like to thank all members of the Yasuoka Laboratory for trying out the software and giving invaluable suggestions and bug reports.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="pone.0231714.ref001">
      <label>1</label>
      <mixed-citation publication-type="journal"><name><surname>Michaud-Agrawal</surname><given-names>N</given-names></name>, <name><surname>Denning</surname><given-names>EJ</given-names></name>, <name><surname>Woolf</surname><given-names>TB</given-names></name>, <name><surname>Beckstein</surname><given-names>O</given-names></name>. <article-title>MDAnalysis: a toolkit for the analysis of molecular dynamics simulations</article-title>. <source>J Comput Chem</source>. <year>2011</year>;<volume>32</volume>(<issue>10</issue>):<fpage>2319</fpage>–<lpage>2327</lpage>. <pub-id pub-id-type="doi">10.1002/jcc.21787</pub-id><?supplied-pmid 21500218?><pub-id pub-id-type="pmid">21500218</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref002">
      <label>2</label>
      <mixed-citation publication-type="other">Gowers RJ, Linke M, Barnoud J, Reddy TJ, Melo MN, Seyler SL, et al. MDAnalysis: a Python package for the rapid analysis of molecular dynamics simulations. In: Proceedings of the 15th Python in Science Conference. SciPy; 2016. p. 98–105.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>McGibbon</surname><given-names>RT</given-names></name>, <name><surname>Beauchamp</surname><given-names>KA</given-names></name>, <name><surname>Harrigan</surname><given-names>MP</given-names></name>, <name><surname>Klein</surname><given-names>C</given-names></name>, <name><surname>Swails</surname><given-names>JM</given-names></name>, <name><surname>Hernández</surname><given-names>CX</given-names></name>, <etal>et al</etal><article-title>MDTraj: a modern open library for the analysis of molecular dynamics trajectories</article-title>. <source>Biophys J</source>. <year>2015</year>;<volume>109</volume>(<issue>8</issue>):<fpage>1528</fpage>–<lpage>1532</lpage>. <pub-id pub-id-type="doi">10.1016/j.bpj.2015.08.015</pub-id><?supplied-pmid 26488642?><pub-id pub-id-type="pmid">26488642</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref004">
      <label>4</label>
      <mixed-citation publication-type="journal"><name><surname>Roe</surname><given-names>DR</given-names></name>, <name><surname>Cheatham</surname><given-names>TE</given-names></name>. <article-title>PTRAJ and CPPTRAJ: Software for Processing and Analysis of Molecular Dynamics Trajectory Data</article-title>. <source>Journal of Chemical Theory and Computation</source>. <year>2013</year>;<volume>9</volume>(<issue>7</issue>):<fpage>3084</fpage>–<lpage>3095</lpage>. <pub-id pub-id-type="doi">10.1021/ct400341p</pub-id><?supplied-pmid 26583988?><pub-id pub-id-type="pmid">26583988</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref005">
      <label>5</label>
      <mixed-citation publication-type="journal"><name><surname>Humphrey</surname><given-names>W</given-names></name>, <name><surname>Dalke</surname><given-names>A</given-names></name>, <name><surname>Schulten</surname><given-names>K</given-names></name>. <article-title>VMD: visual molecular dynamics</article-title>. <source>J Mol Graph</source>. <year>1996</year>;<volume>14</volume>(<issue>1</issue>):<fpage>33</fpage>–<lpage>38</lpage>. <pub-id pub-id-type="doi">10.1016/0263-7855(96)00018-5</pub-id><?supplied-pmid 8744570?><pub-id pub-id-type="pmid">8744570</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref006">
      <label>6</label>
      <mixed-citation publication-type="journal"><name><surname>Hanwell</surname><given-names>MD</given-names></name>, <name><surname>Curtis</surname><given-names>DE</given-names></name>, <name><surname>Lonie</surname><given-names>DC</given-names></name>, <name><surname>Vandermeersch</surname><given-names>T</given-names></name>, <name><surname>Zurek</surname><given-names>E</given-names></name>, <name><surname>Hutchison</surname><given-names>GR</given-names></name>. <article-title>Avogadro: an advanced semantic chemical editor, visualization, and analysis platform</article-title>. <source>J Cheminf</source>. <year>2012</year>;<volume>4</volume>(<issue>1</issue>):<fpage>17</fpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref007">
      <label>7</label>
      <mixed-citation publication-type="other">DeLano WL. The PyMOL molecular graphics system. <ext-link ext-link-type="uri" xlink:href="http://wwwpymolorg">http://wwwpymolorg</ext-link>. 2002.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref008">
      <label>8</label>
      <mixed-citation publication-type="journal"><name><surname>Momma</surname><given-names>K</given-names></name>, <name><surname>Izumi</surname><given-names>F</given-names></name>. <article-title>VESTA 3 for three-dimensional visualization of crystal, volumetric and morphology data</article-title>. <source>J Appl Crystallogr</source>. <year>2011</year>;<volume>44</volume>(<issue>6</issue>):<fpage>1272</fpage>–<lpage>1276</lpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref009">
      <label>9</label>
      <mixed-citation publication-type="journal"><name><surname>Stukowski</surname><given-names>A</given-names></name>. <article-title>Visualization and analysis of atomistic simulation data with OVITO–the Open Visualization Tool</article-title>. <source>Modell Simul Mater Sci Eng</source>. <year>2009</year>;<volume>18</volume>(<issue>1</issue>):<fpage>015012</fpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref010">
      <label>10</label>
      <mixed-citation publication-type="other">Travis E O. A guide to NumPy. USA: Trelgol Publishing. 2006.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref011">
      <label>11</label>
      <mixed-citation publication-type="journal"><name><surname>Hess</surname><given-names>B</given-names></name>, <name><surname>Kutzner</surname><given-names>C</given-names></name>, <name><surname>Van Der Spoel</surname><given-names>D</given-names></name>, <name><surname>Lindahl</surname><given-names>E</given-names></name>. <article-title>GROMACS 4: algorithms for highly efficient, load-balanced, and scalable molecular simulation</article-title>. <source>J Chem Theory Comput</source>. <year>2008</year>;<volume>4</volume>(<issue>3</issue>):<fpage>435</fpage>–<lpage>447</lpage>. <pub-id pub-id-type="doi">10.1021/ct700301q</pub-id><?supplied-pmid 26620784?><pub-id pub-id-type="pmid">26620784</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref012">
      <label>12</label>
      <mixed-citation publication-type="journal"><name><surname>Plimpton</surname><given-names>S</given-names></name>, <name><surname>Crozier</surname><given-names>P</given-names></name>, <name><surname>Thompson</surname><given-names>A</given-names></name>. <article-title>LAMMPS-large-scale atomic/molecular massively parallel simulator</article-title>. <source>Sandia Natl Lab</source>. <year>2007</year>;<volume>18</volume>:<fpage>43</fpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref013">
      <label>13</label>
      <mixed-citation publication-type="book"><name><surname>Berman</surname><given-names>HM</given-names></name>, <name><surname>Westbrook</surname><given-names>J</given-names></name>, <name><surname>Feng</surname><given-names>Z</given-names></name>, <name><surname>Gilliland</surname><given-names>G</given-names></name>, <name><surname>Bhat</surname><given-names>TN</given-names></name>, <name><surname>Weissig</surname><given-names>H</given-names></name>, <etal>et al</etal><chapter-title>The protein data bank, 1999–</chapter-title> In: <source>International Tables for Crystallography Volume F: Crystallography of biological macromolecules</source>. <publisher-name>Springer</publisher-name>; <year>2006</year> p. <fpage>675</fpage>–<lpage>684</lpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref014">
      <label>14</label>
      <mixed-citation publication-type="journal"><name><surname>Schlick</surname><given-names>C</given-names></name>. <article-title>An Inexpensive BRDF Model for Physically-based Rendering</article-title>. <source>Comput Graph Forum</source>. <year>1994</year>;<volume>13</volume>(<issue>3</issue>):<fpage>233</fpage>–<lpage>246</lpage>.</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref015">
      <label>15</label>
      <mixed-citation publication-type="journal"><name><surname>Ayuba</surname><given-names>S</given-names></name>, <name><surname>Suh</surname><given-names>D</given-names></name>, <name><surname>Nomura</surname><given-names>K</given-names></name>, <name><surname>Ebisuzaki</surname><given-names>T</given-names></name>, <name><surname>Yasuoka</surname><given-names>K</given-names></name>. <article-title>Kinetic analysis of homogeneous droplet nucleation using large-scale molecular dynamics simulations</article-title>. <source>J Chem Phys</source>. <year>2018</year>;<volume>149</volume>(<issue>4</issue>):<fpage>044504</fpage><pub-id pub-id-type="doi">10.1063/1.5037647</pub-id><?supplied-pmid 30068205?><pub-id pub-id-type="pmid">30068205</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref016">
      <label>16</label>
      <mixed-citation publication-type="journal"><name><surname>Iwasawa</surname><given-names>M</given-names></name>, <name><surname>Tanikawa</surname><given-names>A</given-names></name>, <name><surname>Hosono</surname><given-names>N</given-names></name>, <name><surname>Nitadori</surname><given-names>K</given-names></name>, <name><surname>Muranushi</surname><given-names>T</given-names></name>, <name><surname>Makino</surname><given-names>J</given-names></name>. <article-title>Implementation and performance of FDPS: a framework for developing parallel particle simulation codes</article-title>. <source>Publications of the Astronomical Society of Japan</source>. <year>2016</year>;<volume>68</volume>(<issue>4</issue>).</mixed-citation>
    </ref>
    <ref id="pone.0231714.ref017">
      <label>17</label>
      <mixed-citation publication-type="journal"><name><surname>Barnes</surname><given-names>BC</given-names></name>, <name><surname>Beckham</surname><given-names>GT</given-names></name>, <name><surname>Wu</surname><given-names>DT</given-names></name>, <name><surname>Sum</surname><given-names>AK</given-names></name>. <article-title>Two-component order parameter for quantifying clathrate hydrate nucleation and growth</article-title>. <source>J Chem Phys</source>. <year>2014</year>;<volume>140</volume>(<issue>16</issue>):<fpage>164506</fpage><pub-id pub-id-type="doi">10.1063/1.4871898</pub-id><?supplied-pmid 24784286?><pub-id pub-id-type="pmid">24784286</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0231714.ref018">
      <label>18</label>
      <mixed-citation publication-type="journal"><name><surname>Barnes</surname><given-names>BC</given-names></name>, <name><surname>Knott</surname><given-names>B</given-names></name>, <name><surname>Beckham</surname><given-names>GT</given-names></name>, <name><surname>Wu</surname><given-names>DT</given-names></name>, <name><surname>Sum</surname><given-names>AK</given-names></name>. <article-title>Reaction Coordinate of Incipient Methane Clathrate Hydrate Nucleation</article-title>. <source>J Phys Chem B</source>. <year>2014</year>;<volume>118</volume><pub-id pub-id-type="doi">10.1021/jp507959q</pub-id><?supplied-pmid 25347748?><pub-id pub-id-type="pmid">25347748</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
