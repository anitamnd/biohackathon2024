<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3434447</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-13-S4-S16</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-13-S4-S16</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Intuitive representation of surface properties of biomolecules using BioBlender</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Andrei</surname>
          <given-names>Raluca Mihaela</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>r.andrei@ifc.cnr.it</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Callieri</surname>
          <given-names>Marco</given-names>
        </name>
        <xref ref-type="aff" rid="I3">3</xref>
        <email>callieri@isti.cnr.it</email>
      </contrib>
      <contrib contrib-type="author" id="A3">
        <name>
          <surname>Zini</surname>
          <given-names>Maria Francesca</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I5">5</xref>
        <email>myrtil@gmail.com</email>
      </contrib>
      <contrib contrib-type="author" id="A4">
        <name>
          <surname>Loni</surname>
          <given-names>Tiziana</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>tialo@tiscali.it</email>
      </contrib>
      <contrib contrib-type="author" id="A5">
        <name>
          <surname>Maraziti</surname>
          <given-names>Giuseppe</given-names>
        </name>
        <xref ref-type="aff" rid="I4">4</xref>
        <email>giuseppe.maraziti@libero.it</email>
      </contrib>
      <contrib contrib-type="author" id="A6">
        <name>
          <surname>Pan</surname>
          <given-names>Mike Chen</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I6">6</xref>
        <email>mike.c.pan@gmail.com</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A7">
        <name>
          <surname>Zoppè</surname>
          <given-names>Monica</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>mzoppe@ifc.cnr.it</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Scientific Visualization Unit, Institute of Clinical Physiology, CNR of Italy, Area della Ricerca, Pisa, 56124, Italy</aff>
    <aff id="I2"><label>2</label>Scuola Normale Superiore, Pisa, 56125, Italy</aff>
    <aff id="I3"><label>3</label>Visual Computing Lab, ISTI, CNR of Italy, Area della Ricerca, Pisa, 56124, Italy</aff>
    <aff id="I4"><label>4</label>Big Bang Solutions, Navacchio (Pisa), 56023, Italy</aff>
    <aff id="I5"><label>5</label>University of Pisa, Pisa, 56125, Italy</aff>
    <aff id="I6"><label>6</label>Harvard Medical School, Boston, MA 02115. USA</aff>
    <pub-date pub-type="collection">
      <year>2012</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>3</month>
      <year>2012</year>
    </pub-date>
    <volume>13</volume>
    <issue>Suppl 4</issue>
    <supplement>
      <named-content content-type="supplement-title">Italian Society of Bioinformatics (BITS): Annual Meeting 2011</named-content>
      <named-content content-type="supplement-editor">Paolo Romano and Manuela Helmer-Citterich</named-content>
    </supplement>
    <fpage>S16</fpage>
    <lpage>S16</lpage>
    <permissions>
      <copyright-statement>Copyright ©2012 Andrei et al.; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2012</copyright-year>
      <copyright-holder>Andrei et al.; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1471-2105/13/S4/S16"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>In living cells, proteins are in continuous motion and interaction with the surrounding medium and/or other proteins and ligands. These interactions are mediated by protein features such as electrostatic and lipophilic potentials. The availability of protein structures enables the study of their surfaces and surface characteristics, based on atomic contribution. Traditionally, these properties are calculated by physico-chemical programs and visualized as range of colors that vary according to the tool used and imposes the necessity of a legend to decrypt it. The use of color to encode both characteristics makes the simultaneous visualization almost impossible, requiring these features to be visualized in different images. In this work, we describe a novel and intuitive code for the simultaneous visualization of these properties.</p>
      </sec>
      <sec>
        <title>Methods</title>
        <p>Recent advances in 3D animation and rendering software have not yet been exploited for the representation of biomolecules in an intuitive, animated form. For our purpose we use Blender, an open-source, free, cross-platform application used professionally for 3D work.</p>
        <p>On the basis Blender, we developed BioBlender, dedicated to biological work: elaboration of protein motion with simultaneous visualization of their chemical and physical features.</p>
        <p>Electrostatic and lipophilic potentials are calculated using physico-chemical software and scripts, organized and accessed through BioBlender interface.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>A new visual code is introduced for molecular lipophilic potential: a range of optical features going from smooth-shiny for hydrophobic regions to rough-dull for hydrophilic ones. Electrostatic potential is represented as animated line particles that flow along field lines, proportional to the total charge of the protein.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>Our system permits visualization of molecular features and, in the case of moving proteins, their continuous perception, calculated for each conformation during motion. Using real world tactile/sight feelings, the nanoscale world of proteins becomes more understandable, familiar to our everyday life, making it easier to introduce "un-seen" phenomena (concepts) such as hydropathy or charges. Moreover, this representation contributes to gain insight into molecular functions by drawing viewer's attention to the most active regions of the protein. The program, available for Windows, Linux and MacOS, can be downloaded freely from the dedicated website <ext-link ext-link-type="uri" xlink:href="http://www.bioblender.eu">http://www.bioblender.eu</ext-link></p>
      </sec>
    </abstract>
    <conference>
      <conf-date>20-22 June 2011</conf-date>
      <conf-name>Eighth Annual Meeting of the Italian Society of Bioinformatics (BITS)</conf-name>
      <conf-loc>Pisa, Italy</conf-loc>
    </conference>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The fact that we humans are very good at extracting information through visual observation is well synthesized in the old adage "a picture is worth a thousand words". The solution of the 3D structure of myoglobin in 1958 by Kendrew [<xref ref-type="bibr" rid="B1">1</xref>] marked the beginning of the new era of structural biology. Since then, a wealth of protein structures has been solved and today the Protein Data Bank (PDB) counts over 67.000 protein structures [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>].</p>
    <p>With the availability of all these data, and with the advance of computer graphics (CG) technologies, tools for the visualization of 3D structures were created such as VMD [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B5">5</xref>], SPDBViewer [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B7">7</xref>], Chimera [<xref ref-type="bibr" rid="B8">8</xref>,<xref ref-type="bibr" rid="B9">9</xref>], PyMOL [<xref ref-type="bibr" rid="B10">10</xref>,<xref ref-type="bibr" rid="B11">11</xref>] and others. Balls and sticks for atoms and bonds, ribbons for the secondary structures, and molecular surfaces are some of the possible representations of proteins. Most programs can also calculate surface features such as electrostatic potential (calculated with APBS [<xref ref-type="bibr" rid="B12">12</xref>] or DelPhi [<xref ref-type="bibr" rid="B13">13</xref>]) and hydropathy (Kyte-Doolittle [<xref ref-type="bibr" rid="B14">14</xref>]). When present, these features are represented as field lines and/or as ranges of colors.</p>
    <p>Since the late '90s, the development of CG techniques has advanced at spectacular pace. Among the most widely used tools, is the art and science of 3D animation. This technique consists in the creation and animation of 3D objects (complete with surfaces, skeletons, and simulated physical properties) in a virtual world, which can be 'filmed' using virtual cameras and lights. Several programs are available for this, including the commercial packages Maya/Autodesk, 3D Studio Max and Softimage XSI (all from Autodesk, [<xref ref-type="bibr" rid="B15">15</xref>]), Cinema 4D (from MAXON Computer GmbH [<xref ref-type="bibr" rid="B16">16</xref>]) and the open-source Blender [<xref ref-type="bibr" rid="B17">17</xref>].</p>
    <p>Not surprising, all of these have been used for the study and representation of biological molecules and processes. Some examples are collected and visible on dedicated websites [<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B19">19</xref>]. The films range from the simple representation of the mechanical functioning of a single protein, to complex events involving many subjects such as DNA replication and RNA processing, to views of major cellular processes, such as apoptosis, <italic>etc</italic>.. These latter ones are important scientific efforts and add to their educational value the bonus of rising interest in the general public to approach biology.</p>
    <p>For our purpose we use Blender, an open-source, free, cross-platform 3D application. Blender is a powerful instrument for 3D modeling, animation, gaming and rendering, that provides a complete workbench for producing still images, simple animations or very complex scenes with thousand of objects in motion, all textured, lighted and filmed for proper view.</p>
    <p>Traditionally, the process of creating a 3D animation film consists of a number of steps roughly grouped in modeling, animation, rendering, special effects and compositing. Blender offers a platform to elaborate and integrate all of these steps. Objects are created in the virtual world by modeling them in the 3D scene starting from primitives or by importing them from other programs. A <italic>time line </italic>holding key frames (points in time in which objects have defined configuration set-ups) is used to animate the objects in the scene in various ways: by direct rotations/translations of the object, by mesh deformation obtained moving its components (vertices, edges, faces), via skeleton (inverse or forward kinematics) or by using the Game Engine (GE), typically deployed in video games. Additionally, physics-based animations can be achieved by simulated forces such as gravity, magnetic, vortex, wind <italic>etc</italic>. Objects are given a surface appearance by the use of material shaders and textures. These two elements define the behavior of the surface when illuminated, by specifying local information like color, reflectance (dull or shiny) and microstructure (roughness or smoothness).</p>
    <p>Once the animation and texturing is defined, the scene is equipped with other assets such as a background, lights and cameras and the process concludes with the 'filming' (rendering of all frames which are assembled to generate a video).</p>
    <p>In this article, we illustrate a step forward in the direction of using bio-animation both as a divulgation and as a discovery tool. Our aim is to visualize molecules in a directly informative way, also showing their motion obtained from structural data (Figure <xref ref-type="fig" rid="F1">1</xref>). This task is done using BioBlender [<xref ref-type="bibr" rid="B20">20</xref>], in which Blender is used to access several scientific programs. BioBlender is an engine built in Blender with an interface for biological visualization (Figure <xref ref-type="fig" rid="F2">2</xref>).</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p><bold>Example of BioBlender representation</bold>. The protein (Calmodulin) is shown with its chemical and physical features represented according to the proposed code, as described in the present article. The image is a single frame from an animated sequence, showing EP and MLP. For a 3D interactive example, please visit <ext-link ext-link-type="uri" xlink:href="http://www.scivis.ifc.cnr.it/images/stories/3d_interactive/VIS_CaCaM/VIS_CaCaM.html">http://www.scivis.ifc.cnr.it/images/stories/3d_interactive/VIS_CaCaM/VIS_CaCaM.html</ext-link>.</p>
      </caption>
      <graphic xlink:href="1471-2105-13-S4-S16-1"/>
    </fig>
    <fig id="F2" position="float">
      <label>Figure 2</label>
      <caption>
        <p><bold>BioBlender interface</bold>. The interface is structured in 9 panels: <italic>amino acids list </italic>- to select and highlight amino acids in the 3D viewport, <italic>chains list </italic>- to select different protein chains, <italic>proteins list </italic>- to select different proteins; <italic>select .pdb file </italic>- upload from user defined path, or access directly from PDB.org specifying the 4 letter code; <italic>import </italic>- at the import phase, it is possible to select various parameters, including covalent/Van der Waals radius, include/exclude Hydrogens and others; <italic>view </italic>- visualization in 3D working space, activation of Game Engine; <italic>MLP visualization </italic>- Parameters for MLP; <italic>EP visualization </italic>- parameters for EP; <italic>output </italic>- export of .pdb files and rendered frames. a: choice of formula and grid spacing; b: contrast and brightness control; c and d: calculation and representation, respectively.</p>
      </caption>
      <graphic xlink:href="1471-2105-13-S4-S16-2"/>
    </fig>
    <p>The use of Blender GE to elaborate the movement of proteins, starting from 2 or more conformations is described in Zini <italic>et al</italic>. (BioBlender: Fast and Efficient All Atom Morphing of Proteins Using Blender Game Engine, manuscript submitted). Briefly, starting from data from NMR collections or X-rays of the same protein crystallized in different conditions, we use Blender GE, equipped with special rules approximately simulating atomic behavior, to interpolate between known conformations and obtain a physically plausible sequence of intermediate conformations. This sequence is output as a list of pseudo .pdb file (list of atoms with their x, y, z coordinates) which are the basis for the visual elaboration described here.</p>
    <p>As the result of this study, we propose a new visual code for the representation of two important surface properties: electrostatic potential (EP) and molecular lipophilic potential (MLP). Using features different from color permits their simultaneous delivery in photo-realistic images leaving the utilization of color space for the description of other biochemical information. Here we describe the details of this process.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <sec>
      <title>Programs and scripts</title>
      <p><bold>BioBlender</bold> is an extension of Blender, in which custom Python scripts have been implemented for building the interface, importing the meshes and the curves, converting MLP values into vertex colors and managing various scientific programs (<ext-link ext-link-type="uri" xlink:href="http://www.bioblender.eu">http://www.bioblender.eu</ext-link>).</p>
      <p>In the construction of BioBlender, we have made ample use of several existing programs, listed here.</p>
      <p><bold>Blender 2.5</bold> is a free, open source, cross platform suite of tools for 3D creation [<xref ref-type="bibr" rid="B17">17</xref>].</p>
      <p><bold>PyMOL 1.2r3pre</bold> is a Python-enhanced molecular graphics tool [<xref ref-type="bibr" rid="B10">10</xref>], used for visualization of .pdb files. It calculates the electrostatic potential through APBS plugin. This tool is also used to generate the 3D mesh of the molecular surface for the molecule. The obtained geometry is exported in .wrl format, easily read by 3D software tools.</p>
      <p><bold>PDB2PQR-1.6.0 </bold>[<xref ref-type="bibr" rid="B21">21</xref>,<xref ref-type="bibr" rid="B22">22</xref>] is a software package that automates many of the common tasks of preparing structures for continuum electrostatics calculations, providing a platform-independent utility for converting protein files from PDB format to PQR format. It assigns partial atomic charge to every atom according to different force fields (AMBER 94, CHARMM 27 or PARSE) and saves a .pqr file in which the occupancy and temperature columns are replaced by atomic charge and radius, respectively. It also adds missing hydrogens, calculates pKa values and generates an input (.in) for APBS calculations. The .in file stores information on the 3D dimension of the protein, the ionic concentration of solvent, biomolecular and solvent dielectric constants. Ionic concentration of 0.150 mol/l NaCl, biomolecular dielectric constant of 2 and solvent dielectric constant of 78.54 (water) were used for our calculation.</p>
      <p><bold>APBS-1.2.1 (Adaptive Poisson-Boltzmann Solver) </bold>[<xref ref-type="bibr" rid="B12">12</xref>] is a software for evaluating the electrostatic properties of nanoscale biomolecular systems, through solution of the Poisson-Boltzmann equation. APBS takes as inputs a .pqr and an .in file and calculates the electrostatic potential in every point of a grid in the protein space, which is output as a .dx file.</p>
      <p><bold>scivis.exe</bold> is a custom software written in C++ used to calculate the field lines and to export them in a ASCII file to be imported in Blender. This tool imports the 3D surface (.obj) and the EP grid (.dx) calculated by APBS. The computation of the field lines is a multi-step process: EP values are mapped on the 3D surface, a gradient field is calculated in the volume containing the molecule, an automatic selection of areas with high values of EP is done and the corresponding field lines are computed for these areas using the gradient field. When used as primary application, in addition to the described features, scivis.exe provides visual feedback for all its processing steps. It is possible to visualize the molecular surface, the EP grid, the gradient grid and the field lines.</p>
      <p><bold>Python 2.6</bold> is an interpreted, interactive, object-oriented, extensible programming language [<xref ref-type="bibr" rid="B23">23</xref>]. In this project, Python has been used in different stages, both as a scripting component of various software tools (like Blender and PyMOL) and as a stand-alone scripting language.</p>
      <p><bold>pyMLP.py</bold> is a Python script written and kindly provided by Julien Lefeuvre (available from [<xref ref-type="bibr" rid="B24">24</xref>]); it contains a library of atomic lipophilic potential for all atoms present in proteins (we added the values for some mono-saccharides and nucleic acids) and it calculates the MLP in every point of a grid in the protein space according to various formulae such as Fauchere, Dubost, Brasseur, etc. (we introduced Testa formula). The grid step can be changed by the user to cope with the protein size and computer performances (in terms of memory occupancy and calculation time).</p>
    </sec>
  </sec>
  <sec>
    <title>Results</title>
    <p>We present here a software/method to produce the simultaneous visualization of EP and MLP on proteins. In the case of moving proteins, the program produces a rendered animation, in which every second of the resulting movie contains 25 images (24-30 frames per second is the standard video speed), and at every frame the shape, EP and MLP of the molecule are automatically recalculated.</p>
    <p>In the elaboration of each frame representing proteins, still or in motion, the steps of object (mesh) creation, surface calculation and data manipulation for EP and MLP are elaborated independently using both scientific and CG programs to obtain the series of frames compositing the animation (Figures <xref ref-type="fig" rid="F3">3</xref> and <xref ref-type="fig" rid="F4">4</xref>).</p>
    <fig id="F3" position="float">
      <label>Figure 3</label>
      <caption>
        <p><bold>Procedure for MLP calculus and representation</bold>. For each .pdb file, PyMOL and pyMLP.py calculate the surface and the MLP values, respectively; then, MLP (stored in a .dx file) is mapped on the surface and both are saved as an .obj file; MLP values are converted into vertex colours, and texture images are saved. These are finally mapped on the material of the mesh, and rendered as bump and specularity effects.</p>
      </caption>
      <graphic xlink:href="1471-2105-13-S4-S16-3"/>
    </fig>
    <fig id="F4" position="float">
      <label>Figure 4</label>
      <caption>
        <p><bold>Procedure for EP calculus and representation</bold>. Starting from the same .pdb file used for MLP calculation, PDB2PQR adds atomic charge to each atom, then APBS calculates the EP values and stores them in a .dx file; Scivis uses the information about the mesh (previously calculated for MLP - blue squares) and the .dx file to calculate the field lines; these are imported in Blender as curves along which travel particles, emitted from their positive end.</p>
      </caption>
      <graphic xlink:href="1471-2105-13-S4-S16-4"/>
    </fig>
    <sec>
      <title>Protein surfaces</title>
      <p>The molecular surface of proteins [<xref ref-type="bibr" rid="B25">25</xref>] is calculated in PyMOL starting from the .pdb file, as shown in Figure <xref ref-type="fig" rid="F3">3</xref>, upper left. For series of conformations (obtained with Game Engine or derived from molecular dynamics), the procedure is reiterated. PyMOL was chosen because the surfaces created by this software have a regular triangulation even at low polygon resolution and it is only marginally afflicted by the problem of internal disjoint surfaces. In the 3D mesh used in the example reported in Figure <xref ref-type="fig" rid="F5">5A</xref> and in other tests with wider range of dimensions (number of polygons between 4.5 and 50 thousands), all the triangles have similar areas. The mesh is exported by PyMOL as a .wrl, a file which contains information about the position of the vertices, edges, characteristics of the material of the polygon <italic>etc</italic>.</p>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>MLP mapping on the surface of Calmodulin</bold>. Steps in the creation of an image of Calmodulin are shown. <bold>A </bold>Panel of the 3D scene of Blender with a wireframe view, showing the fine triangulation (average edge size 1Å) of the mesh. <bold>B </bold>MLP representation as levels of grey. <bold>C </bold>Final image at high resolution showing the variation of MLP distribution over the molecular surface.</p>
        </caption>
        <graphic xlink:href="1471-2105-13-S4-S16-5"/>
      </fig>
    </sec>
    <sec>
      <title>MLP calculus</title>
      <p>The MLP calculus (Figure <xref ref-type="fig" rid="F3">3</xref> upper right) is done using pyMLP.py [<xref ref-type="bibr" rid="B26">26</xref>,<xref ref-type="bibr" rid="B27">27</xref>]. This script calculates the lipophilic potential in every point of a grid in the space of the protein and exports the values in a .dx file. The script contains a library of atomic lipophilic potential values for every atom based on its chemistry, and several formulae for MLP calculation. However it does not support the Testa formula [<xref ref-type="bibr" rid="B28">28</xref>],</p>
      <p>
        <disp-formula>
          <mml:math id="M1" name="1471-2105-13-S4-S16-i1" overflow="scroll">
            <mml:mrow>
              <mml:mi>M</mml:mi>
              <mml:mi>L</mml:mi>
              <mml:mi>P</mml:mi>
              <mml:mrow>
                <mml:mo class="MathClass-open">(</mml:mo>
                <mml:mrow>
                  <mml:mi>r</mml:mi>
                </mml:mrow>
                <mml:mo class="MathClass-close">)</mml:mo>
              </mml:mrow>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:munder class="msub">
                <mml:mrow>
                  <mml:mo>∑</mml:mo>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>i</mml:mi>
                </mml:mrow>
              </mml:munder>
              <mml:msub>
                <mml:mrow>
                  <mml:mi>f</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>i</mml:mi>
                </mml:mrow>
              </mml:msub>
              <mml:msup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mfrac>
                    <mml:mrow>
                      <mml:mo class="MathClass-bin">-</mml:mo>
                      <mml:mo class="MathClass-rel">|</mml:mo>
                      <mml:mi>r</mml:mi>
                      <mml:mo class="MathClass-bin">-</mml:mo>
                      <mml:msub>
                        <mml:mi>r</mml:mi>
                        <mml:mrow>
                          <mml:mi>i</mml:mi>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mo class="MathClass-rel">|</mml:mo>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mn>2</mml:mn>
                    </mml:mrow>
                  </mml:mfrac>
                </mml:mrow>
              </mml:msup>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>where r is a point in the protein space, <italic>f<sub>i </sub></italic>is the atomic lipophilic potential for atom i, and r<sub>i </sub>is the position of atom i.</p>
      <p>The Testa formula is an atom-based function that uses the Broto [<xref ref-type="bibr" rid="B26">26</xref>] fragment scheme and an exponential distance function, appropriate for protein calculations; therefore we modified pyMLP.py to include Testa formula. The MLP accuracy depends on the grid spacing (a in Figure <xref ref-type="fig" rid="F2">2</xref>); in BioBlender the default is set at 1Å, a dimension comparable to the mean size of the triangle edge of the 3D mesh; this parameter is a good compromise between MLP data, mesh triangulation, computer memory and time for calculation (see below).</p>
      <p>pyMLP outputs a .dx file in which the header defines the grid origin, the grid step and the number of points on each axis.</p>
    </sec>
    <sec>
      <title>MLP rendering</title>
      <p>The code for the representation of hydropathy that we propose is a range of optical features that go from smooth-shiny surface (hydrophobic) to rough-dull (hydrophilic), as shown in Figure <xref ref-type="fig" rid="F5">5C</xref>.</p>
      <p>Data elaboration for rendering is done in a series of steps (Figure <xref ref-type="fig" rid="F3">3</xref>, lower part):</p>
      <p><italic>1. MLP values mapping on the mesh</italic>. The MLP values (typically between -3 and 1 for soluble, membrane-embedded and cytoplasmic proteins) are mapped on the surface of the molecule by assigning values of MLP to the mesh. The algorithm (included in a custom program, OBJCreator) is simple: for every vertex of the mesh, the correspondent grid-cell, in the MLP grid, is identified and the value of potential is calculated using trilinear interpolation and assigned to the vertex.</p>
      <p>This process is very fast (about 2 seconds on a personal computer for calmodulin) and the mesh vertex density is high enough to represent smoothly the potential spatial transition. The information about the MLP values corresponding to every vertex are stored in the V field of an .obj file as texture coordinates (U and V).</p>
      <p><italic>2. MLP values conversion into vertex colors</italic>. MLP values (previously assigned to the vertices of the mesh) are converted into vertex colors, assigning the same value for each RGB channel, to obtain levels of gray). For the conversion we normalize the range of the MLP values ([-3,1]) to the range of gray scale ([0,1]), and set value 0 of MLP to correspond to the value 0.5 of the gray scale. In this way the hydropathy of the protein is visualized in Blender as levels of gray: bright areas representing hydrophobicity and dark areas hydrophilicity (Figure <xref ref-type="fig" rid="F5">5B</xref>). The use of the default conversion scale provides a coherent representation for all proteins; however, at this step, to enhance MLP features for any particular protein under study, the user can modify contrast and brightness using sliders (b in Figure <xref ref-type="fig" rid="F2">2</xref>).</p>
      <p><italic>3. Creation of the first image texture</italic>. The mesh is unwrapped to generate a texture parametrization and the per-vertex color values are saved ('baked') in a texture image. UV unwrapping is a procedure that consists in flattening a 3D object (e.g. the world globe) on a 2D plane (e.g. the world map), so that each vertex of the 3D mesh is assigned a correspondent 2D texture coordinate [<xref ref-type="bibr" rid="B29">29</xref>]. The 2D image is also called image texture or UV map, where U and V are the texture axes.</p>
      <p><italic>4. Creation of the second image texture</italic>. In order to make the more hydrophilic areas rough the procedure involves the addition of a noise pattern of amplitude proportional to the degree of gray of the texture. This is achieved using the Node Editor of Blender, adding a Gaussian noise to the texture image, which produces an image with a strong noise over the black regions, gradually reduced on gray regions to reach a level of no noise on white. In the rendering process this noise is converted to bump, as explained below.</p>
      <p><italic>5. Addition of specularity and roughness</italic>. In the final rendering step, the image obtained in the first step (gray scale) is finally mapped on specularity from dull to shiny, and the second image is mapped on bump. Bump mapping is a rendering technique generally used to represent very small scale geometry like scratches, roughness or graininess. This technique does not affect the geometry of the object: the perceived local geometry is only an optical effect obtained by light reflection modifications. In the final image hydrophobic areas are represented as reflective and smooth, while the more hydrophilic ones as duller and rougher (Figure <xref ref-type="fig" rid="F5">5C</xref>). By avoiding the use of color, as well as of gray scale, the differences in color are only due to the effect of light interacting with the surface, i.e. the darker areas are the least illuminated.</p>
    </sec>
    <sec>
      <title>EP calculus</title>
      <p>While the use of movies is mostly intended to show transition between conformations of a protein, it also allows the introduction of special effects of CG to convey other information. We have elaborated the following procedure using both BioBlender and external programs to display the EP associated with molecular (partial) charges (see Figure <xref ref-type="fig" rid="F4">4</xref>, right side). All programs are accessed through BioBlender interface, also used to set specific parameters.</p>
      <p>The .pdb file used for mesh creation and MLP calculus is submitted to PDB2PQR program [<xref ref-type="bibr" rid="B21">21</xref>,<xref ref-type="bibr" rid="B22">22</xref>] which outputs 2 files: .pqr and .in. These files store information on the size and charge of every atom, and on the dimensions of the protein, the ionic concentration, biomolecular and solvent dielectric constant, respectively. Both .pqr and .in are input files for APBS program [<xref ref-type="bibr" rid="B12">12</xref>], that calculates the electrostatic potential in every point of a grid in the space of the protein and exports the values in a .dx file, analogous to the one seen above for MLP. The force field, the ion concentration and the grid spacing can be set by the user (c in Figure <xref ref-type="fig" rid="F2">2</xref>).</p>
      <p>EP is redrawn as field lines calculated by a custom software, scivis.exe, that combines information from the mesh file (.obj) with EP values (see below). This computation comprises different steps:</p>
      <p>1. Mapping EP on the surface mesh</p>
      <p>2. Transformation of the grid of EP values into a grid of gradients</p>
      <p>3. Selection of more active surface areas by weighted Monte Carlo sampling</p>
      <p>4. Drawing of field lines that are stored in a .txt file</p>
      <p>The EP values are mapped on the surface of the protein by assigning a value of EP to every vertex of the mesh, as seen above for MLP, i.e. trilinear interpolation.</p>
      <p>A grid of gradient vectors is built starting from the scalar field of EP values: for each point the gradient is calculated according to the values in neighbor points, finding the direction and slope of EP change.</p>
      <p>The gradient data are used to generate the field lines in the space surrounding the protein. From the infinite possible lines, we are interested in generating a 'meaningful' subset comprising the lines associated with areas of the mesh with high value of EP, obtaining a distribution of lines that is proportional to the surface EP value: more lines will rise in the more electrically active areas, and the total number of lines will be proportional to the global level of potential of the molecule. This selection is done by Monte Carlo sampling weighted with respect to the potential value of the surface in each area.</p>
      <p>For the selection of this subset, the user has two controls (d in Figure <xref ref-type="fig" rid="F2">2</xref>): the absolute EP value on the surface from which the creation of the field lines starts (lines are generated only in areas with an EP higher than a threshold - Minimum potential) and a parameter that represents the general line density (expressed as Number of lines × eV/Å<sup>2</sup>). By modulating this parameter users can select the most appropriate value for a group of proteins, obtaining a concentration of field lines which is coherent across the various proteins.</p>
      <p>Once the 'interesting' locations (points) are selected, the lines are calculated by following the gradient in both directions, iteratively moving with small steps according to the gradient (small-step integration). Line points are added until one of the following three conditions is met: 1. the limit of the calculated grid is reached, 2. the line intersects the mesh or 3. the field is too low (the gradient is approximately 0 or equal to the value set by the user). The lines are saved as sequences of points in an ASCII file (.txt).</p>
      <p>Thanks to the random nature of the selection procedure, lines do change every time the procedure is run but the more electrically active areas (where more lines are present) are readily identifiable. This property proves to be particularly effective when represented in animation, since it gives the idea of fuzziness, useful for electricity representation, while conveying the information about EP distribution on the surface.</p>
      <p>In the case of Calmodulin, depicted in Figure <xref ref-type="fig" rid="F1">1</xref>, and even more evident in the WebGL animated representation, most lines are directed towards the surface, due to the fact that the protein is slightly acidic, with an isoelectric point of 4.09.</p>
    </sec>
    <sec>
      <title>EP representation</title>
      <p>Field lines are imported into Blender as NURBS curves which are not rendered (they are invisible in the final image), but instead are used to guide a particle effect. Every curve starts at its most positive end which is associated with a particle emitter. The particles, drawn as short segments, flow along the curves from positive to negative, respecting the field lines convention in physics. During animation, the particles are generated every 5 frames (0.2 sec) and have a life-time of 20 frames (0.8 sec). This means that the system is in steady state after the sixteenth frame (see the scheme in Figure <xref ref-type="fig" rid="F6">6</xref>). Representation of EP as moving particles on a trajectory, played in time, is interpreted easily and transmits the idea of polarity of the charged areas of a biomolecule.</p>
      <fig id="F6" position="float">
        <label>Figure 6</label>
        <caption>
          <p><bold>Particles generation and representation for moving proteins</bold>. Field lines are imported as curves every 5 frames (0.2 seconds). Particles have a life-time of 20 frames (0.8 seconds). After the sixteenth frame (0.6 seconds) the system is in ready-state (square).</p>
        </caption>
        <graphic xlink:href="1471-2105-13-S4-S16-6"/>
      </fig>
      <p>If the user is interested in visualization of only one conformation, the animated particles are displayed/played in loop (they are emitted for 250 frames and have a lifetime of 20 frames).</p>
    </sec>
    <sec>
      <title>Moving proteins</title>
      <p>In the visualization of proteins in motion, every frame is elaborated as a single .pdb file. Because at every frame the atomic coordinates change, also the surface features (shape itself, EP and MLP, calculated by integrating the atomic values) change accordingly, and must be recalculated. Due to extremely high-level modifications (topology changes, merging/separation of surface parts) it is not possible to use a single geometry and animate it through conventional tools. It is instead necessary to rebuild the surface geometry, importing a new set of mesh coordinates at each frame. This implies a very large amount of calculations, but allows the elaboration of a sequence of images that is coherent from frame to frame, thus giving the impression of continuity.</p>
      <p>In summary, for each frame (conformation) we visualize MLP as textured mesh and EP as curves and animated particles. The result is a sequence of frames showing the moving protein with its properties, EP and MLP, represented together: MLP as a range of visual and tactile characteristics and EP as flow of particles that move from positive to negative along invisible field lines (as shown in the movie Protein Expressions - Study N. 3 [<xref ref-type="bibr" rid="B30">30</xref>]).</p>
    </sec>
  </sec>
  <sec>
    <title>Discussion</title>
    <p>The description of biological phenomena has always made use of graphical presentation, starting from the early botanical and zoological drawings, including famous anatomical folios, that greatly help viewers, professionals and not, to understand and learn about nature.</p>
    <p>Since the early times, an artistic component has been included, often unnoticed by viewers, but greatly exploited by the scientists/artists. Even today, the clearest graphical descriptions of natural and artificial subjects are hand-or CG-drawn rather than photographic images. The 'artistic' dimension allows for a better interpretation of the subject, the choice of illumination, and the removal of irrelevant details and disturbing effects.</p>
    <p>The same attitude has motivated a number of scientists to use various graphical tricks when showing data related to structural features of macromolecules. Although most structural information contained in a .pdb file (a list of atoms and their 3D coordinates) is actually 'readable', biologists typically use graphical programs to explore protein structures; indeed the literature has an abundance of such programs, including some very popular. These programs can transfer the structural information from a linear list of atoms to a 3D virtual space and display it on 2D surface; positional information is interpreted with the aid of chemical information stored in libraries (of amino acids, nucleotides and other molecules), that introduce chemical bonds, electric charges, hydrophobicity scales and so on. In this way the user is enabled to observe features of the molecules of interest according to her/his needs. Recent years have seen the development of 3D computer graphics techniques that have culminated in the recent success of the blockbuster movie Avatar, in which an entire world has been created in CG, including 'floating mountains' and forest with thousands of (CG built!) plants, animals, insects <italic>etc</italic>.</p>
    <p>Similar techniques can be used to show the nanoscopic world of cells, populated with all sorts of environments, proteins, nucleic acids, membranes, small molecules and complexes. Indeed, there are several remarkable examples of efforts in this new discipline of Bio-Animation, some of which have reached a large public. Beside the beauty and the educational value of these animations, we consider that the very process of creating such movies includes a heuristic importance both in the development of the graphical instruments and in the studies implied in the elaboration of the subjects' (proteins) movements and interactions. In fact, when a researcher is induced to take a different point of view, such as needed for the visual elaboration, s/he will be exposed to possible new insight, facilitating better understanding of the process under study. In this way a novel spatial reasoning can complement the classical biochemical reasoning typically employed in molecular research.</p>
    <p>Our group is among those involved in the development of animated biology, and in this paper we report one aspect of such effort, namely the elaboration, using Blender, of a code capable of showing two of the most critical features that determine the behavior of macromolecules: their electrostatic and lipophilic potentials.</p>
    <sec>
      <title>Choice of Blender</title>
      <p>Among the professional packages developed for CG, one only has the double advantage of being open source and available free of charge: Blender.</p>
      <p>Blender is the result of a world-wide, concerted effort to put tools of the highest standard for CG creations at the reach of any artist (or scientist) regardless of her/his capability of paying for such tools. The project is guided by the non-profit Blender Foundation, and animated by countless developers that voluntarily devote time and effort to constantly introduce the most up to date techniques into the package, equipping users with any instrument they need. Blender 2.5, the latest major release, introduced a new design of the user interface, new physics engine for smoke (volumetric), particles and soft bodies, and, importantly, the possibility to achieve all Blender's functions from scripting, through APIs.</p>
    </sec>
    <sec>
      <title>BioBlender</title>
      <p>On the framework of Blender 2.5, we built BioBlender, which includes a section specifically built for biological work. Inside BioBlender, for the analysis of proteins structures, various types of visualization are available: alpha carbon, main chain, main chain and side chains, all atoms (including hydrogens) and molecular surface. The elaboration of proteins' motions and the simultaneous representation of surface physico-chemical properties of proteins in motion are the innovations that BioBlender introduces in macromolecular visualization.</p>
    </sec>
    <sec>
      <title>Elaboration of protein motion</title>
      <p>We use Blender Game Engine to elaborate the movement of proteins, when more than one conformational state is known. Starting from data from NMR collections or X-ray of the same protein crystallized in different conditions, we use Blender GE, equipped with special rules approximately simulating atomic behavior, to interpolate between known conformations and obtain a physically plausible sequence of intermediate conformations. This sequence can be explored within Blender or can be output as a list of pseudo .pdb file (list of atoms and x, y, z coordinates) which are the basis for the visual elaboration.</p>
      <p>It is important to notice that this procedure can be applied to any .pdb or (better) sequence of .pdb files representing a continuous series describing a conformational transition, obtained by Blender or by any other means, e.g. Molecular Dynamics simulation.</p>
    </sec>
    <sec>
      <title>Visualization of moving proteins, and of their molecular surface features</title>
      <p>The development of structural biology that made available tens of thousands of structures, not only improved our knowledge on structural features such as the richness of protein folds (secondary and tertiary structure), and of their association in groups (quaternary structure). It also increased knowledge associated with protein motion: in fact most proteins exert their function through some kind of motion. This is best understood by observing the movement in an animated film. The role of side chains, which are the determinants of such motions, is at present difficult to appreciate by using present visualization tools that either provide a fixed all-atom structure, or show dynamically only a limited number of atoms.</p>
      <p>We present here a procedure that allows the direct observation of moving proteins focusing on their surface features, rather than on their structure. In particular, we have focused on hydropathy and electrical fields as they appear on and around the molecular surface.</p>
      <p>These features can be calculated and visualized by a number of programs, which typically display them with a color code. We reasoned that for these properties a more 'photo-realistic' display would help viewers in the de-codification of their meaning, and elaborated the system here reported. Example of the use of these codes can be seen for a single protein in the Proteopedia page [<xref ref-type="bibr" rid="B31">31</xref>] (see also Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>) and for a complex in our movie Protein Expressions - Study N3 [<xref ref-type="bibr" rid="B30">30</xref>].</p>
      <p>The main idea of the proposed visual mapping is to exploit perceptual associations between the values to be mapped and visual characterization of real-world objects. Ideally, by using already established perceptual association, the viewer will be able to understand the provided information more naturally, without the use of explicit legends. For MLP mapping, two opposite surface characterizations able to convey a sense of affinity to water or to oil were selected. In our real-world experience, a very smooth, hard surface (like porcelain or wax) is completely impervious to water but can be easily coated by oil. The opposite visual feedback is associated to grainy, crumbly, dull surfaces (like clay bricks or biscuits) which can be easily imagined being soaked in water. These considerations led to the 'painting' of highly hydrophobic areas as shiny, smooth material and of highly hydrophilic areas as dull and rough.</p>
      <p>While the MLP value is only observable on the surface itself, electrical phenomena are associated to the idea of an effect projected in the volume surrounding a charged object, and able to affect other objects (like the high school favorite amber rod attracting paper bits). Field lines are a common way to describe the effect of the electrical field. EP value is therefore represented by showing small particles, moving along the path defined by field lines, visualizing a high concentration of particles in areas where the electrical field is stronger.</p>
      <p>The representation of both features in black and white allows the viewer to grasp their values, without distracting with arbitrary information which is not interpretable if not associated with a de-coding legend, making it easier to interpret.</p>
      <p>For MLP elaboration we considered that none of the available programs are accurate enough to provide useful information: most molecular displaying packages simply attribute a fixed value of MLP to every atom of a given amino acid, using the Kyte-Doolittle scale [<xref ref-type="bibr" rid="B14">14</xref>]. This scale was elaborated almost 30 years ago with the aim of identifying structural features of proteins, namely the interior portions of globular proteins and membrane spanning segments in membrane associated proteins, but is not indicated for the evaluation of the distribution of MLP on the molecular surface. Indeed, some other programs include a more appropriate method of calculation, such as VASCo [<xref ref-type="bibr" rid="B32">32</xref>] which employs the Brickman [<xref ref-type="bibr" rid="B33">33</xref>] formula on an atom based library and a Fermi-type distance function. We have implemented a calculation with the Testa formula, which uses an atom-based fragment scheme and an exponential function. The values thus obtained are plotted on the vertices of the molecular surface. This procedure results in a very smooth distribution of MLP values which is then displayed with a scale of 'tactile' textures, ranging from dull-rough to shiny-smooth. The advantage of such calculation and representation is mostly noticeable in animated movies showing the transition between different conformation of proteins, when patches of hydrophobic areas are gradually exposed on the surface of proteins which will facilitate docking onto other macromolecules.</p>
      <p>For EP, we developed a visual code based on a flow of particles (small lines) flowing towards the negative pole: this is particularly useful for the observation of interacting molecules and for molecules whose field is changing when the conformation changes. To elaborate EP we made use of several programs and integrated them in a flow whose final result is the continuous display of the EP and its development during protein conformational transitions.</p>
    </sec>
    <sec>
      <title>Time considerations</title>
      <p>The entire process is very fast: a protein of 2262 atoms is imported in 7 sec, while MLP and EP computation with grid spacing 1 Å take 70 and 19 seconds, respectively, on a standard personal PC equipped with WindowsXP, Intel Core 2Duo CPU, 2.33 GHz, 3.25 GB RAM.</p>
      <p>Our example is Calmodulin: after activation due to the binding of 4 Calcium ions, the protein undergoes a major conformational transition in which both its EP and its MLP change considerably: the Ca ions introduced in the 4 EF hand domains affect the EP by virtue of their own charge and the MLP by inducing the opening of each globular domain to expose two major hydrophobic patches which enable the protein to interact with its partners and push the calcium signal downstream in the biochemical pathway.</p>
      <p>Proteins and their surface properties can also be visualized in a 3D interactive way on web platform exploiting the new WebGL component of HTML5. Using this API, it is possible to display 3D content in a web page without the use of external plug-ins, by writing an appropriate visualization program using the OpenGL syntax. Using a javascript support library, SpiderGL [<xref ref-type="bibr" rid="B34">34</xref>], we built an interactive visualization scheme [<xref ref-type="bibr" rid="B35">35</xref>] which accepts as input the same data (meshes, field lines and the MLP texture) calculated by BioBlender.</p>
    </sec>
  </sec>
  <sec>
    <title>Conclusions</title>
    <p>In conclusion, we have developed a computational instrument that allows the display of molecular surfaces of moving (or still) proteins, putting special emphasis on their electrical and lipophilic properties. We consider that this representation allows better (or at least more immediate and intuitive) understanding of the dynamical forces governing intermolecular interactions and thus facilitate new insights and discoveries.</p>
  </sec>
  <sec>
    <title>Abbreviations</title>
    <p>EP: Electrostatic Potential; MLP: Molecular Lipophilic Potential; GE: Game Engine; CG: Computer Graphics; 3D: three-dimensional.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>RMA performed research, wrote and tested software; MC, MFZ, GM contributed programming; MC, MCP contributed scivis.exe and BioBlender interface, respectively; TL, MZ contributed visual elaboration with Blender; MZ conceived research; RMA, MZ wrote paper.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>Calmodulin in motion</bold>. The movie (in .avi format) shows several transitions of calmodulin in the Apo form (without Calcium) and the major conformational change induced by the binding of 4 Ca ions. The movie can also be seen online at <ext-link ext-link-type="uri" xlink:href="http://proteopedia.org/wiki/index.php/Calmodulin#Calmodulin_in_Motion">http://proteopedia.org/wiki/index.php/Calmodulin#Calmodulin_in_Motion</ext-link>.</p>
      </caption>
      <media xlink:href="1471-2105-13-S4-S16-S1.AVI" mimetype="video" mime-subtype="x-msvideo">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>We thank the PDB2PQR, APBS, PyMol teams, late Warren DeLano and the Blender users and developers community for kind answers to our many questions. Work funded by Regione Toscana grant 'Animazione 3D' to MZ.</p>
    <p>This article has been published as part of <italic>BMC Bioinformatics </italic>Volume 13 Supplement 4, 2012: Italian Bioinformatics Society (BITS): Annual Meeting 2011. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/13/S4">http://www.biomedcentral.com/1471-2105/13/S4</ext-link>.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kendrew</surname>
          <given-names>JC</given-names>
        </name>
        <name>
          <surname>Bodo</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Dintzis</surname>
          <given-names>HM</given-names>
        </name>
        <name>
          <surname>Parrish</surname>
          <given-names>RG</given-names>
        </name>
        <name>
          <surname>Wyckoff</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Phillips</surname>
          <given-names>DC</given-names>
        </name>
        <article-title>A three-dimensional model of the myoglobin molecule obtained by x-ray analysis.</article-title>
        <source>Nature</source>
        <year>1958</year>
        <volume>181</volume>
        <fpage>662</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1038/181662a0</pub-id>
        <pub-id pub-id-type="pmid">13517261</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Berman</surname>
          <given-names>HM</given-names>
        </name>
        <name>
          <surname>Westbrook</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Feng</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Gilliland</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Bhat</surname>
          <given-names>TN</given-names>
        </name>
        <name>
          <surname>Weissig</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Shindyalov</surname>
          <given-names>IN</given-names>
        </name>
        <name>
          <surname>Bourne</surname>
          <given-names>PE</given-names>
        </name>
        <article-title>The Protein Data Bank.</article-title>
        <source>Nucleic Acids Res</source>
        <year>2000</year>
        <volume>28</volume>
        <fpage>235</fpage>
        <lpage>42</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/28.1.235</pub-id>
        <pub-id pub-id-type="pmid">10592235</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="other">
        <article-title>Protein Data Bank</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.pdb.org">http://www.pdb.org</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Humphrey</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Dalke</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Schulten</surname>
          <given-names>K</given-names>
        </name>
        <article-title>VMD: visual molecular dynamics</article-title>
        <source>J Mol Graph</source>
        <year>1996</year>
        <volume>14</volume>
        <fpage>33</fpage>
        <lpage>8</lpage>
        <comment>27-8</comment>
        <pub-id pub-id-type="doi">10.1016/0263-7855(96)00018-5</pub-id>
        <pub-id pub-id-type="pmid">8744570</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="other">
        <article-title>Visual Molecular Dynamics</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.ks.uiuc.edu/Research/vmd/">http://www.ks.uiuc.edu/Research/vmd/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Guex</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Peitsch</surname>
          <given-names>MC</given-names>
        </name>
        <article-title>SWISS-MODEL and the Swiss-PdbViewer: an environment for comparative protein modeling.</article-title>
        <source>Electrophoresis</source>
        <year>1997</year>
        <volume>18</volume>
        <fpage>2714</fpage>
        <lpage>23</lpage>
        <pub-id pub-id-type="doi">10.1002/elps.1150181505</pub-id>
        <pub-id pub-id-type="pmid">9504803</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="other">
        <article-title>Swiss-PdbViewer</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.expasy.org/spdbv/">http://www.expasy.org/spdbv/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pettersen</surname>
          <given-names>EF</given-names>
        </name>
        <name>
          <surname>Goddard</surname>
          <given-names>TD</given-names>
        </name>
        <name>
          <surname>Huang</surname>
          <given-names>CC</given-names>
        </name>
        <name>
          <surname>Couch</surname>
          <given-names>GS</given-names>
        </name>
        <name>
          <surname>Greenblatt</surname>
          <given-names>DM</given-names>
        </name>
        <name>
          <surname>Meng</surname>
          <given-names>EC</given-names>
        </name>
        <name>
          <surname>Ferrin</surname>
          <given-names>TE</given-names>
        </name>
        <article-title>UCSF Chimera--a visualization system for exploratory research and analysis.</article-title>
        <source>J Comput Chem</source>
        <year>2004</year>
        <volume>25</volume>
        <fpage>1605</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.20084</pub-id>
        <pub-id pub-id-type="pmid">15264254</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="other">
        <article-title>UCSF Chimera</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.cgl.ucsf.edu/chimera/">http://www.cgl.ucsf.edu/chimera/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="book">
        <name>
          <surname>DeLano</surname>
          <given-names>WL</given-names>
        </name>
        <source>The PyMOL Molecular Graphics System</source>
        <year>2002</year>
        <publisher-name>DeLano Scientific, San Carlos, CA, USA</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="other">
        <article-title>The PyMOL Molecular Graphics System</article-title>
        <source>Version 1.2r3pre, Schrödinger, LLC</source>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Baker</surname>
          <given-names>NA</given-names>
        </name>
        <name>
          <surname>Sept</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Joseph</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Holst</surname>
          <given-names>MJ</given-names>
        </name>
        <name>
          <surname>McCammon</surname>
          <given-names>JA</given-names>
        </name>
        <article-title>Electrostatics of nanosystems: application to microtubules and the ribosome.</article-title>
        <source>Proc Natl Acad Sci USA</source>
        <year>2001</year>
        <volume>98</volume>
        <fpage>10037</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.181342398</pub-id>
        <pub-id pub-id-type="pmid">11517324</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Rocchia</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Sridharan</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Nicholls</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Alexov</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Chiabrera</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Honig</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Rapid grid-based construction of the molecular surface and the use of induced surface charge to calculate reaction field energies: applications to the molecular systems and geometric objects.</article-title>
        <source>J Comput Chem</source>
        <year>2002</year>
        <volume>23</volume>
        <fpage>128</fpage>
        <lpage>37</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.1161</pub-id>
        <pub-id pub-id-type="pmid">11913378</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kyte</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Doolittle</surname>
          <given-names>RF</given-names>
        </name>
        <article-title>A simple method for displaying the hydropathic character of a protein.</article-title>
        <source>J Mol Biol</source>
        <year>1982</year>
        <volume>157</volume>
        <fpage>105</fpage>
        <lpage>32</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(82)90515-0</pub-id>
        <pub-id pub-id-type="pmid">7108955</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="other">
        <article-title>Autodesk</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.autodesk.com">http://www.autodesk.com</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="other">
        <article-title>Maxon</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.maxon.net">http://www.maxon.net</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="other">
        <article-title>Blender</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.blender.org">http://www.blender.org</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="other">
        <article-title>Molecular Movies</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.molecularmovies.com">http://www.molecularmovies.com</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="other">
        <article-title>SciVis Unit</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.scivis.ifc.cnr.it">http://www.scivis.ifc.cnr.it</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Andrei</surname>
          <given-names>RM</given-names>
        </name>
        <name>
          <surname>Pan</surname>
          <given-names>CM</given-names>
        </name>
        <name>
          <surname>Zoppè</surname>
          <given-names>M</given-names>
        </name>
        <article-title>BioBlender: Blender for Biologists</article-title>
        <source>BlenderArt Magazine</source>
        <year>2010</year>
        <volume>31</volume>
        <fpage>27</fpage>
        <lpage>32</lpage>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dolinsky</surname>
          <given-names>TJ</given-names>
        </name>
        <name>
          <surname>Nielsen</surname>
          <given-names>JE</given-names>
        </name>
        <name>
          <surname>McCammon</surname>
          <given-names>JA</given-names>
        </name>
        <name>
          <surname>Baker</surname>
          <given-names>NA</given-names>
        </name>
        <article-title>PDB2PQR: an automated pipeline for the setup of Poisson-Boltzmann electrostatics calculations.</article-title>
        <source>Nucleic Acids Res</source>
        <year>2004</year>
        <volume>32</volume>
        <fpage>W665</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkh381</pub-id>
        <pub-id pub-id-type="pmid">15215472</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dolinsky</surname>
          <given-names>TJ</given-names>
        </name>
        <name>
          <surname>Czodrowski</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Nielsen</surname>
          <given-names>JE</given-names>
        </name>
        <name>
          <surname>Jensen</surname>
          <given-names>JH</given-names>
        </name>
        <name>
          <surname>Klebe</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Baker</surname>
          <given-names>NA</given-names>
        </name>
        <article-title>PDB2PQR: expanding and upgrading automated preparation of biomolecular structures for molecular simulations.</article-title>
        <source>Nucleic Acids Res</source>
        <year>2007</year>
        <volume>35</volume>
        <fpage>W522</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkm276</pub-id>
        <pub-id pub-id-type="pmid">17488841</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="other">
        <article-title>Python Programming Language</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.python.org">http://www.python.org</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="other">
        <article-title>pyMLP.py</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://code.google.com/p/pymlp/source/browse/trunk/pyMLP.py">http://code.google.com/p/pymlp/source/browse/trunk/pyMLP.py</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Connolly</surname>
          <given-names>ML</given-names>
        </name>
        <article-title>Solvent-accessible surfaces of proteins and nucleic acids</article-title>
        <source>Science</source>
        <year>1983</year>
        <volume>221</volume>
        <fpage>709</fpage>
        <lpage>13</lpage>
        <pub-id pub-id-type="doi">10.1126/science.6879170</pub-id>
        <pub-id pub-id-type="pmid">6879170</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Broto</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Moreau</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Vandycke</surname>
          <given-names>C</given-names>
        </name>
        <article-title>Molecular structures: Perception, autocorrelation descriptor and sar studies. System of atomic contributions for the calculation of the n-octanol/water partition coefficients.</article-title>
        <source>Eu J Med Chem</source>
        <year>1984</year>
        <volume>19.1</volume>
        <fpage>71</fpage>
        <lpage>78</lpage>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Laguerre</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Saux</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Dubost</surname>
          <given-names>JP</given-names>
        </name>
        <name>
          <surname>Carpy</surname>
          <given-names>A</given-names>
        </name>
        <article-title>MLPP: A program for the calculation of molecular lipophilicity potential in proteins.</article-title>
        <source>Pharm</source>
        <year>1997</year>
        <volume>3.5-6</volume>
        <fpage>217</fpage>
        <lpage>222</lpage>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Testa</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Carrupt</surname>
          <given-names>PA</given-names>
        </name>
        <name>
          <surname>Gaillard</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Billois</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Weber</surname>
          <given-names>P</given-names>
        </name>
        <article-title>Lipophilicity in molecular modeling.</article-title>
        <source>Pharm Res</source>
        <year>1996</year>
        <volume>13</volume>
        <fpage>335</fpage>
        <lpage>43</lpage>
        <pub-id pub-id-type="doi">10.1023/A:1016024005429</pub-id>
        <pub-id pub-id-type="pmid">8692723</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="book">
        <name>
          <surname>Catmull</surname>
          <given-names>E</given-names>
        </name>
        <article-title>A subdivision algorithm for computer display of curved surfaces</article-title>
        <source>PhD thesis</source>
        <year>1974</year>
        <publisher-name>University of Utah</publisher-name>
        <comment>(available at <ext-link ext-link-type="uri" xlink:href="www.pixartouchbook.com/storage/catmull_thesis.pdf">www.pixartouchbook.com/storage/catmull_thesis.pdf</ext-link>)</comment>
      </mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="other">
        <article-title>SciVis videos</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.scivis.ifc.cnr.it/index.php/videos">http://www.scivis.ifc.cnr.it/index.php/videos</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="other">
        <article-title>Calmodulin motion on Proteopedia</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://proteopedia.org/wiki/index.php/Calmodulin#Calmodulin_in_Motion">http://proteopedia.org/wiki/index.php/Calmodulin#Calmodulin_in_Motion</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Steinkellner</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Rader</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Thallinger</surname>
          <given-names>GG</given-names>
        </name>
        <name>
          <surname>Kratky</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Gruber</surname>
          <given-names>K </given-names>
        </name>
        <article-title>VASCo: computation and visualization of annotated protein surface contacts.</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>32</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-32</pub-id>
        <pub-id pub-id-type="pmid">19166624</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Heiden</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Moeckel</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Brickmann</surname>
          <given-names>J</given-names>
        </name>
        <article-title>A new approach to analysis and display of local lipophilicity/hydrophilicity mapped on molecular surfaces.</article-title>
        <source>J Comput Aided Mol Des</source>
        <year>1993</year>
        <volume>7</volume>
        <fpage>503</fpage>
        <lpage>514</lpage>
        <pub-id pub-id-type="doi">10.1007/BF00124359</pub-id>
        <pub-id pub-id-type="pmid">8294943</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="book">
        <name>
          <surname>Di Benedetto</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Ponchio</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Ganovelli</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Scopigno</surname>
          <given-names>R</given-names>
        </name>
        <person-group person-group-type="editor">Spencer SN</person-group>
        <article-title>SpiderGL: a JavaScript 3D graphics library for next-generation WWW</article-title>
        <source>Proceedings of the 15th International Conference on Web 3D Technology: 22 - 24 July 2010; Los Angeles, California</source>
        <year>2010</year>
        <publisher-name>ACM: New York, NY, USA</publisher-name>
        <fpage>165</fpage>
        <lpage>174</lpage>
      </mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="book">
        <name>
          <surname>Callieri</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Andrei</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Di Benedetto</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Zoppè</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Scopigno</surname>
          <given-names>R</given-names>
        </name>
        <person-group person-group-type="editor">Spencer SN</person-group>
        <article-title>Visualization methods for molecular studies on the web platform</article-title>
        <source>Proceedings of the 15th International Conference on Web 3D Technology: 22 - 24 July 2010; Los Angeles, California</source>
        <year>2010</year>
        <publisher-name>ACM: New York, NY, USA</publisher-name>
        <fpage>117</fpage>
        <lpage>126</lpage>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
