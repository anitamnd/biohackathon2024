<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?covid-19-tdm?>
<?noissn?>
<front>
  <journal-meta>
    <journal-id journal-id-type="publisher-id">978-3-030-45237-7</journal-id>
    <journal-id journal-id-type="doi">10.1007/978-3-030-45237-7</journal-id>
    <journal-id journal-id-type="nlm-ta">Tools and Algorithms for the Construction and Analysis of Systems</journal-id>
    <journal-title-group>
      <journal-title>Tools and Algorithms for the Construction and Analysis of Systems</journal-title>
      <journal-subtitle>26th International Conference, TACAS 2020, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020, Dublin, Ireland, April 25–30, 2020, Proceedings, Part II</journal-subtitle>
    </journal-title-group>
    <isbn publication-format="print">978-3-030-45236-0</isbn>
    <isbn publication-format="electronic">978-3-030-45237-7</isbn>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7480700</article-id>
    <article-id pub-id-type="publisher-id">15</article-id>
    <article-id pub-id-type="doi">10.1007/978-3-030-45237-7_15</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Endicheck: Dynamic Analysis for Detecting Endianness Bugs</article-title>
    </title-group>
    <contrib-group content-type="book editors">
      <contrib contrib-type="editor">
        <name>
          <surname>Biere</surname>
          <given-names>Armin</given-names>
        </name>
        <address>
          <email>biere@jku.at</email>
        </address>
        <xref ref-type="aff" rid="Aff8">8</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Parker</surname>
          <given-names>David</given-names>
        </name>
        <address>
          <email>d.a.parker@cs.bham.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff9">9</xref>
      </contrib>
      <aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.9970.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 1941 5140</institution-id><institution>Johannes Kepler University, </institution></institution-wrap>Linz, Austria </aff>
      <aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.6572.6</institution-id><institution-id institution-id-type="ISNI">0000 0004 1936 7486</institution-id><institution>University of Birmingham, </institution></institution-wrap>Birmingham, UK </aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Kápl</surname>
          <given-names>Roman</given-names>
        </name>
        <xref ref-type="aff" rid="Aff10"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Parízek</surname>
          <given-names>Pavel</given-names>
        </name>
        <address>
          <email>parizek@d3s.mff.cuni.cz</email>
        </address>
        <xref ref-type="aff" rid="Aff10"/>
      </contrib>
      <aff id="Aff10"><institution-wrap><institution-id institution-id-type="GRID">grid.4491.8</institution-id><institution-id institution-id-type="ISNI">0000 0004 1937 116X</institution-id><institution>Department of Distributed and Dependable Systems, Faculty of Mathematics and Physics, </institution><institution>Charles University, </institution></institution-wrap>Prague, Czech Republic </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>13</day>
      <month>03</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>13</day>
      <month>03</month>
      <year>2020</year>
    </pub-date>
    <volume>12079</volume>
    <fpage>254</fpage>
    <lpage>270</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This chapter is licensed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made.</license-p>
        <license-p>The images or other third party material in this chapter are included in the chapter's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the chapter's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Computers store numbers in two mutually incompatible ways: little-endian or big-endian. They differ in the order of bytes within representation of numbers. This ordering is called endianness. When two computer systems, programs or devices communicate, they must agree on which endianness to use, in order to avoid misinterpretation of numeric data values.</p>
      <p id="Par2">We present Endicheck, a dynamic analysis tool for detecting endianness bugs, which is based on the popular Valgrind framework. It helps developers to find those code locations in their program where they forgot to swap bytes properly. Endicheck requires less source code annotations than existing tools, such as Sparse used by Linux kernel developers, and it can also detect potential bugs that would only manifest if the given program was run on computer with an opposite endianness. Our approach has been evaluated and validated on the Radeon SI Linux OpenGL driver, which is known to contain endianness-related bugs, and on several open-source programs. Results of experiments show that Endicheck can successfully identify many endianness-related bugs and provide useful diagnostic messages together with the source code locations of respective bugs.</p>
    </abstract>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Editor(s) (if applicable) and The Author(s) 2020</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>issue license</meta-name>
        <meta-value><bold>Open Access</bold> This book is licensed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made.
The images or other third party material in this book are included in the book's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the book's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<back>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Bond, M.D., Nethercote, N., Kent, S.W., Guyer, S.Z., McKinley, K.S.: Tracking Bad Apples: Reporting the Origin of Null and Undefined Value Errors. In: Proceedings of OOPSLA 2007. ACM (2007)</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Burrows, M., Freund, S.N., Wiener, J.L.: Run-Time Type Checking for Binary Programs. In: Proceedings of CC 2003. LNCS, vol. 2622. Springer (2003)</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Kapl, R.: Dynamic Analysis for Finding Endianity Bugs. Master thesis, Charles University, Prague, June 2018</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Liu, Y., Milanova, A.: Static Analysis for Inference of Explicit Information Flow. In: Proceedings of PASTE 2008. ACM (2008)</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Seward, J., Nethercote, N.: Using Valgrind to Detect Undefined Value Errors with Bit-Precision. In: Proceedings of USENIX 2005 Annual Technical Conference. USENIX Association (2005)</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Nethercote, N., Seward, J.: Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In: Proceedings of PLDI 2007. ACM (2007)</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Nethercote, N., Seward, J.: How to Shadow Every Byte of Memory Used by a Program. In: Proceedings of VEE 2007. ACM (2007)</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Newsome, J., Song, D.: Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In: Proceedings of NDSS 2005. The Internet Society (2005)</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Serebryany, K., Bruening, D., Potapenko, A., Vyukov, D.: AddressSanitizer: A Fast Address Sanity Checker. In: Proceedings of USENIX 2012 Annual Technical Conference. USENIX Association (2012)</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Clang 8 documentation / DataFlowSanitizer. <ext-link ext-link-type="uri" xlink:href="https://clang.llvm.org/docs/DataFlowSanitizer.html">https://clang.llvm.org/docs/DataFlowSanitizer.html</ext-link> (accessed in October 2019)</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Sparse: a semantic parser for C programs. <ext-link ext-link-type="uri" xlink:href="https://lwn.net/Articles/689907/">https://lwn.net/Articles/689907/</ext-link> (accessed in October 2019)</mixed-citation>
    </ref>
  </ref-list>
</back>
