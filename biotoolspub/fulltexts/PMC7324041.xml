<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?covid-19-tdm?>
<?noissn?>
<front>
  <journal-meta>
    <journal-id journal-id-type="publisher-id">978-3-030-51054-1</journal-id>
    <journal-id journal-id-type="doi">10.1007/978-3-030-51054-1</journal-id>
    <journal-id journal-id-type="nlm-ta">Automated Reasoning</journal-id>
    <journal-title-group>
      <journal-title>Automated Reasoning</journal-title>
      <journal-subtitle>10th International Joint Conference, IJCAR 2020, Paris, France, July 1–4, 2020, Proceedings, Part II</journal-subtitle>
    </journal-title-group>
    <isbn publication-format="print">978-3-030-51053-4</isbn>
    <isbn publication-format="electronic">978-3-030-51054-1</isbn>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7324041</article-id>
    <article-id pub-id-type="publisher-id">32</article-id>
    <article-id pub-id-type="doi">10.1007/978-3-030-51054-1_32</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Sequoia: A Playground for Logicians</article-title>
      <subtitle xml:lang="en">(System Description)</subtitle>
    </title-group>
    <contrib-group content-type="book editors">
      <contrib contrib-type="editor">
        <name>
          <surname>Peltier</surname>
          <given-names>Nicolas</given-names>
        </name>
        <address>
          <email>nicolas.peltier@univ-grenoble-alpes.fr</email>
        </address>
        <xref ref-type="aff" rid="Aff8">8</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Sofronie-Stokkermans</surname>
          <given-names>Viorica</given-names>
        </name>
        <address>
          <email>sofronie@uni-koblenz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff9">9</xref>
      </contrib>
      <aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.4444.0</institution-id><institution-id institution-id-type="ISNI">0000 0001 2112 9282</institution-id><institution>CNRS, LIG, Université Grenoble Alpes, </institution></institution-wrap>Saint Martin d’Hères, France </aff>
      <aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.5892.6</institution-id><institution-id institution-id-type="ISNI">0000 0001 0087 7257</institution-id><institution>University Koblenz-Landau, </institution></institution-wrap>Koblenz, Germany </aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-5145-9829</contrib-id>
        <name>
          <surname>Reis</surname>
          <given-names>Giselle</given-names>
        </name>
        <address>
          <email>giselle@cmu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff10"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Naeem</surname>
          <given-names>Zan</given-names>
        </name>
        <address>
          <email>znaeem@andrew.cmu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff10"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hashim</surname>
          <given-names>Mohammed</given-names>
        </name>
        <address>
          <email>mqh@andrew.cmu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff10"/>
      </contrib>
      <aff id="Aff10">Carnegie Mellon University, Doha, Qatar </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>06</day>
      <month>06</month>
      <year>2020</year>
    </pub-date>
    <volume>12167</volume>
    <fpage>480</fpage>
    <lpage>488</lpage>
    <permissions>
      <copyright-statement>© Springer Nature Switzerland AG 2020</copyright-statement>
      <license>
        <license-p>This article is made available via the PMC Open Access Subset for unrestricted research re-use and secondary analysis in any form or by any means with acknowledgement of the original source. These permissions are granted for the duration of the World Health Organization (WHO) declaration of COVID-19 as a global pandemic.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Sequent calculus is a pervasive technique for studying logics and their properties due to the regularity of rules, proofs, and meta-property proofs across logics. However, even simple proofs can be large, and writing them by hand is often messy. Moreover, the combinatorial nature of the calculus makes it easy for humans to make mistakes or miss cases. Sequoia aims to alleviate these problems. Sequoia is a web-based application for specifying sequent calculi and performing basic reasoning about them. The goal is to be a user-friendly program, where logicians can specify and “play” with their calculi. For that purpose, we provide an intuitive interface where inference rules can be input in
<inline-graphic xlink:href="501052_1_En_32_Figa_HTML.gif" id="d30e415"/>
and are immediately rendered with the corresponding symbols. Users can then build proof trees in a streamlined and minimal-effort way, in whichever calculus they defined. In addition to that, we provide checks for some of the most important meta-theoretical properties, such as weakening admissibility and identity expansion, given that they proceed by the usual structural induction. In this sense, the logician is only left with the tricky and most interesting cases of each analysis.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Sequent calculus</kwd>
      <kwd>Meta-properties</kwd>
      <kwd>Web-based app</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Switzerland AG 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Proof (and derivation) trees are a central structure for sequent calculus. They are used to check validity of formulas and sequents, as well as for checking meta-properties of the calculus (such as rule permutability, invertibility, and cut-elimination). In the latter, trees are generally <italic>schematic</italic>, using context variables to represent a family of trees with that shape.</p>
    <p id="Par3">When checking the validity of sequents, the required proof trees can become quite large (both in depth and breadth) to be written on paper. At the same time, the proofs of meta-properties may involve several (often small) proof trees to cover all the cases. Many times they are slight variations of each other, or largely the same across logics. Building and then verifying these proof trees is often a tedious task. Several tiresome issues arise: symbols can easily be misplaced, look unclear, or be confused by mistake; trees may have to be adjusted or re-sized to fit the writing space; and the proofs themselves may not look as elegant as their typeset counterpart. However, a glance towards creating proof trees in a digital environment shows a separate set of issues. Currently there are very few tools for creating proof trees intuitively. The most common method is to write the proofs in
<inline-graphic xlink:href="501052_1_En_32_Figb_HTML.gif" id="d30e438"/>
, or a program that produces such proofs. Even then, the process can easily become too long and cumbersome.</p>
    <p id="Par4">Sequoia is a web application that makes sequent calculus tree building, whether schematic or not, simple and intuitive. Sequoia is aimed at students and academics who find the traditional methods too cumbersome, and provides a user-friendly means to create multiple calculi specified from user-defined symbols and inference rules, as well as a way to correctly build proof trees with their defined calculi. We use a sound and complete algorithm that computes all valid applications of a rule to a sequent. In addition, Sequoia features meta-theoretical property checking for weakening admissibility, identity expansion, and permutability. It provides all the straightforward cases needed for the complete proofs of these properties, alleviating the user from the monotonous part, and allowing them to focus on the interesting cases. All these features are ready to be used now, and we are still improving Sequoia by adding more properties to check and more proof tree building tools.</p>
    <p id="Par5">Sequoia can be accessed at: <ext-link ext-link-type="uri" xlink:href="https://logic.qatar.cmu.edu/sequoia/">https://logic.qatar.cmu.edu/sequoia/</ext-link>, and the source code is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/meta-logic/sequoia">https://github.com/meta-logic/sequoia</ext-link>.</p>
  </sec>
  <sec id="Sec2">
    <title>System Description</title>
    <p id="Par6">Sequoia consists of a front-end built in JavaScript and HTML, and a back-end built in MongoDB and Standard ML New Jersey. The application runs in a Node.js environment. The front-end is responsible for displaying the user defined rules and symbols, rendering the interactive proof tree, and presenting possible proof tree transformations for property testing, among other things. Aside from running the server, the back-end stores the user’s defined calculi (including rules and symbols), computes all the possible valid proof trees when a rule is applied to a tree sequent, and constructs all possible tree derivations for a particular meta-property. The following sections will progressively describe the design of our system by first providing the basic representations for the datatypes in SML, then describing the schematic tree building, and explaining our approach to automating the meta-property tests.</p>
    <sec id="Sec3">
      <title>Datatypes</title>
      <p id="Par7">Currently, Sequoia supports sequent calculi with multiple contexts on the left and right. We restrict the rules in a calculus to operate on one connective at a time. We also require that rules have no restrictions on their contexts, such as: <graphic position="anchor" xlink:href="501052_1_En_32_Figc_HTML" id="MO3"/>
</p>
      <p id="Par8">Note that such rules can often be rewritten using multiple contexts.</p>
      <p id="Par9">Our datatypes are defined as: <graphic position="anchor" xlink:href="501052_1_En_32_Figd_HTML" id="MO4"/>
</p>
      <p id="Par10">Where <italic>p</italic>, <italic>q</italic>, ... are atom variables, <italic>A</italic>, <italic>B</italic>, ... are formula variables, <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\bullet _1,\bullet _2,...$$\end{document}</tex-math><mml:math id="M2"><mml:mrow><mml:msub><mml:mo>∙</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mo>∙</mml:mo><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq1.gif"/></alternatives></inline-formula> are connectives with arities <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$r_1,r_2,...$$\end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq2.gif"/></alternatives></inline-formula> respectively, <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varTheta _1,\varTheta _2,...$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:msub><mml:mi>Θ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>Θ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq3.gif"/></alternatives></inline-formula> are context variables, <inline-formula id="IEq4"><inline-graphic xlink:href="501052_1_En_32_IEq4_HTML.gif"/></inline-formula> is a context separator and <inline-formula id="IEq5"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vdash $$\end{document}</tex-math><mml:math id="M8"><mml:mo>⊢</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq5.gif"/></alternatives></inline-formula> is a sequent sign. Context separators are symbols used to separate different contexts on either the left or right sides the sequent. For example, in the focused system for linear logic [<xref ref-type="bibr" rid="CR3">3</xref>], three symbols (“;”, “<inline-formula id="IEq6"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\Downarrow $$\end{document}</tex-math><mml:math id="M10"><mml:mo stretchy="false">⇓</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq6.gif"/></alternatives></inline-formula>”, “<inline-formula id="IEq7"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\Uparrow $$\end{document}</tex-math><mml:math id="M12"><mml:mo stretchy="false">⇑</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq7.gif"/></alternatives></inline-formula>”) are used to separate different parts of the right context. Note that all the mentioned symbols must be declared by the user and cannot contain superscripts.</p>
      <p id="Par11">Proof trees are recursive structures made up of a sequent, the rule name (if any) and a set of proof trees above the sequent; rules consist of a conclusion sequent and a set of premise sequents.</p>
    </sec>
    <sec id="Sec4">
      <title>Core Operations</title>
      <p id="Par12">Rule application is the most important operation of Sequoia. It relies on three core operations: unification, substitution, and variable renaming. Rule application is a function applied to a rule and a sequent. We will use the following rule and sequent as our running example (assuming all the symbols have been declared by the user): <graphic position="anchor" xlink:href="501052_1_En_32_Fige_HTML" id="MO5"/>
</p>
      <p id="Par13"><bold>Unification.</bold> The first step for rule application is obtaining the valid unifiers between the sequent and the conclusion sequent of the rule. The reason we are not using pattern matching is because we may have to substitute context variables in the sequent as well as in the inference rule. For example, if the context is <inline-formula id="IEq8"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma , r, p \wedge q$$\end{document}</tex-math><mml:math id="M14"><mml:mrow><mml:mi>Γ</mml:mi><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>∧</mml:mo><mml:mi>q</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq8.gif"/></alternatives></inline-formula> and the conclusion of the rule is <inline-formula id="IEq9"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _1, \varGamma _2, A \wedge B$$\end{document}</tex-math><mml:math id="M16"><mml:mrow><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>Γ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo>∧</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq9.gif"/></alternatives></inline-formula>, then we need: one of <inline-formula id="IEq10"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _i$$\end{document}</tex-math><mml:math id="M18"><mml:msub><mml:mi>Γ</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq10.gif"/></alternatives></inline-formula> substituted by a context variable and <italic>r</italic>, and <inline-formula id="IEq11"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma $$\end{document}</tex-math><mml:math id="M20"><mml:mi>Γ</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq11.gif"/></alternatives></inline-formula> substituted by two new context variables. Unification of sequents and contexts is defined as:<graphic position="anchor" xlink:href="501052_1_En_32_Figf_HTML" id="MO6"/>
</p>
      <p id="Par14">Note that the symbols between contexts and the sequent sign must match for the unification to succeed, and that contexts are ordered. The unification of individual contexts is done through multiset unification using constraints [<xref ref-type="bibr" rid="CR6">6</xref>].</p>
      <p id="Par15">Suppose that we want to apply the rule <inline-formula id="IEq12"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M22"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq12.gif"/></alternatives></inline-formula> to the sequent in the example above. Then, we need to get the unifiers between <inline-formula id="IEq13"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _1, \varGamma _2 \vdash A \wedge B$$\end{document}</tex-math><mml:math id="M24"><mml:mrow><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>Γ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>⊢</mml:mo><mml:mi>A</mml:mi><mml:mo>∧</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq13.gif"/></alternatives></inline-formula> (<inline-formula id="IEq14"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M26"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq14.gif"/></alternatives></inline-formula> conclusion) and <inline-formula id="IEq15"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varDelta , F \vee G, H \vdash X \wedge Y$$\end{document}</tex-math><mml:math id="M28"><mml:mrow><mml:mi>Δ</mml:mi><mml:mo>,</mml:mo><mml:mi>F</mml:mi><mml:mo>∨</mml:mo><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mi>H</mml:mi><mml:mo>⊢</mml:mo><mml:mi>X</mml:mi><mml:mo>∧</mml:mo><mml:mi>Y</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq15.gif"/></alternatives></inline-formula>. This will produce a number of valid unifiers and a constraint theory alongside each unifier, one of them being:<graphic position="anchor" xlink:href="501052_1_En_32_Figg_HTML" id="MO7"/>
</p>
      <p id="Par16">Constraint theories are used to maintain consistency between a conclusion and its premises in a proof tree. Its importance is discussed later in Sect. <xref rid="Sec5" ref-type="sec">2.3</xref>.</p>
      <p id="Par17"><bold>Substitution.</bold> Once unification is done, every valid unifier represents one possible way of applying the inference rule to the sequent. The premises are determined by applying the resulting unifier to the rule’s premises. For example, the unifier above can be applied to the premises of <inline-formula id="IEq16"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq16.gif"/></alternatives></inline-formula>, resulting in: <graphic position="anchor" xlink:href="501052_1_En_32_Figh_HTML" id="MO8"/>
</p>
      <p id="Par18">Which is a correct set of premises when applying <inline-formula id="IEq17"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M32"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq17.gif"/></alternatives></inline-formula> to <inline-formula id="IEq18"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varDelta , F \vee G,H \vdash X \wedge Y$$\end{document}</tex-math><mml:math id="M34"><mml:mrow><mml:mi>Δ</mml:mi><mml:mo>,</mml:mo><mml:mi>F</mml:mi><mml:mo>∨</mml:mo><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mi>H</mml:mi><mml:mo>⊢</mml:mo><mml:mi>X</mml:mi><mml:mo>∧</mml:mo><mml:mi>Y</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq18.gif"/></alternatives></inline-formula>, given the constraint <inline-formula id="IEq19"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varDelta = \varGamma _1', \varGamma _2'$$\end{document}</tex-math><mml:math id="M36"><mml:mrow><mml:mi>Δ</mml:mi><mml:mo>=</mml:mo><mml:msubsup><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi>Γ</mml:mi><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq19.gif"/></alternatives></inline-formula>: <graphic position="anchor" xlink:href="501052_1_En_32_Figi_HTML" id="MO9"/>
</p>
      <p id="Par19"><bold>Variable Renaming.</bold> When applying a rule, we can assume that the sequent and the conclusion sequent of the rule have different variable names because of the symbol restrictions in the symbols tables. However, after applying a rule some problems might arise. For example, applying the <inline-formula id="IEq20"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M38"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq20.gif"/></alternatives></inline-formula> rule on <inline-formula id="IEq21"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma \vdash (a \wedge b) \wedge c$$\end{document}</tex-math><mml:math id="M40"><mml:mrow><mml:mi>Γ</mml:mi><mml:mo>⊢</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>a</mml:mi><mml:mo>∧</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∧</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq21.gif"/></alternatives></inline-formula> would yield the premises <inline-formula id="IEq22"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _1 \vdash a \wedge b$$\end{document}</tex-math><mml:math id="M42"><mml:mrow><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⊢</mml:mo><mml:mi>a</mml:mi><mml:mo>∧</mml:mo><mml:mi>b</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq22.gif"/></alternatives></inline-formula> and <inline-formula id="IEq23"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _2 \vdash c$$\end{document}</tex-math><mml:math id="M44"><mml:mrow><mml:msub><mml:mi>Γ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>⊢</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq23.gif"/></alternatives></inline-formula> and the constraint <inline-formula id="IEq24"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma = \varGamma _1,\varGamma _2$$\end{document}</tex-math><mml:math id="M46"><mml:mrow><mml:mi>Γ</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>Γ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq24.gif"/></alternatives></inline-formula>. However, applying <inline-formula id="IEq25"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge _r$$\end{document}</tex-math><mml:math id="M48"><mml:msub><mml:mo>∧</mml:mo><mml:mi>r</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq25.gif"/></alternatives></inline-formula> again on <inline-formula id="IEq26"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _1 \vdash a \wedge b$$\end{document}</tex-math><mml:math id="M50"><mml:mrow><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⊢</mml:mo><mml:mi>a</mml:mi><mml:mo>∧</mml:mo><mml:mi>b</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq26.gif"/></alternatives></inline-formula> would cause problems in unification as <inline-formula id="IEq27"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma _1$$\end{document}</tex-math><mml:math id="M52"><mml:msub><mml:mi>Γ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq27.gif"/></alternatives></inline-formula> is used in both the rule and the sequent. To avoid this problem, all context variables are renamed after unification. To rename a context variable, we simply add a fresh superscript to the name of the variable, or update it if the name has one already.</p>
    </sec>
    <sec id="Sec5">
      <title>Functionalities</title>
      <p id="Par20">The key features of Sequoia are that it allows the user to build ground and schematic proof trees, and to automate the process of testing for certain meta-properties. Currently, Sequoia is able to check rule permutability, weakening admissibility (for each context), and identity expansion.</p>
      <p id="Par21"><bold>Tree Building.</bold> Sequoia’s tree building relies entirely on rule application. Given a tree, a constraint list, and a set of rules, a selected rule can be applied to an open sequent in the tree to produce a new tree and constraints with the appropriate updates. To do this, we first compute all possible unifiers of an open sequent and a rule. Then for each unifier, the empty premise set of the open sequent is replaced by the new premises obtained as explained above. The unifier is applied to each sequent in the tree, including the open sequent, and the constraint list is updated with the unifier’s accompanying constraint theory. The constraint list is bound to the tree and accounts for the context variables changing at different levels in the tree as a result of multiple rule applications. The user can undo rule applications, as well as export the proof tree to
<inline-graphic xlink:href="501052_1_En_32_Figj_HTML.gif" id="d30e1084"/>
.</p>
      <p id="Par22"><bold>Proof Transformations.</bold> In some cases (such as checking for permutability), we need to decide whether a tree <inline-formula id="IEq28"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_1$$\end{document}</tex-math><mml:math id="M54"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq28.gif"/></alternatives></inline-formula> with end sequent <italic>S</italic> can be transformed into another tree <inline-formula id="IEq29"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_2$$\end{document}</tex-math><mml:math id="M56"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq29.gif"/></alternatives></inline-formula> with the same end sequent. For that, we assume that <inline-formula id="IEq30"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_1$$\end{document}</tex-math><mml:math id="M58"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq30.gif"/></alternatives></inline-formula> is a closed tree, i.e., each premise <inline-formula id="IEq31"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{1,i}$$\end{document}</tex-math><mml:math id="M60"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq31.gif"/></alternatives></inline-formula> in <inline-formula id="IEq32"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_1$$\end{document}</tex-math><mml:math id="M62"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq32.gif"/></alternatives></inline-formula> has a proof <inline-formula id="IEq33"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {D}_{1,i}$$\end{document}</tex-math><mml:math id="M64"><mml:msub><mml:mi mathvariant="script">D</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq33.gif"/></alternatives></inline-formula>. Checking if <inline-formula id="IEq34"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_1$$\end{document}</tex-math><mml:math id="M66"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq34.gif"/></alternatives></inline-formula> can be transformed into <inline-formula id="IEq35"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_2$$\end{document}</tex-math><mml:math id="M68"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq35.gif"/></alternatives></inline-formula>, amounts to checking that each open premise <inline-formula id="IEq36"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{2,j}$$\end{document}</tex-math><mml:math id="M70"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq36.gif"/></alternatives></inline-formula> in <inline-formula id="IEq37"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_2$$\end{document}</tex-math><mml:math id="M72"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq37.gif"/></alternatives></inline-formula> can be proved using some <inline-formula id="IEq38"><alternatives><tex-math id="M73">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {D}_{1,i}$$\end{document}</tex-math><mml:math id="M74"><mml:msub><mml:mi mathvariant="script">D</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq38.gif"/></alternatives></inline-formula>. The proof <inline-formula id="IEq39"><alternatives><tex-math id="M75">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {D}_{1,i}$$\end{document}</tex-math><mml:math id="M76"><mml:msub><mml:mi mathvariant="script">D</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq39.gif"/></alternatives></inline-formula> for <inline-formula id="IEq40"><alternatives><tex-math id="M77">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{1,i}$$\end{document}</tex-math><mml:math id="M78"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq40.gif"/></alternatives></inline-formula> can be used to prove <inline-formula id="IEq41"><alternatives><tex-math id="M79">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{2,j}$$\end{document}</tex-math><mml:math id="M80"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq41.gif"/></alternatives></inline-formula> if: (1) the two sequents are the same (modulo context variables), or (2) if weakening is admissible in some contexts, that <inline-formula id="IEq42"><alternatives><tex-math id="M81">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{1,i}$$\end{document}</tex-math><mml:math id="M82"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq42.gif"/></alternatives></inline-formula> can be obtained by weakening <inline-formula id="IEq43"><alternatives><tex-math id="M83">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{2,j}$$\end{document}</tex-math><mml:math id="M84"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq43.gif"/></alternatives></inline-formula>. If the proof can be used, we add constraints specifying which multiset of context variables in <inline-formula id="IEq44"><alternatives><tex-math id="M85">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{2,j}$$\end{document}</tex-math><mml:math id="M86"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq44.gif"/></alternatives></inline-formula> is equal to the multiset of context variables in <inline-formula id="IEq45"><alternatives><tex-math id="M87">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{1,i}$$\end{document}</tex-math><mml:math id="M88"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq45.gif"/></alternatives></inline-formula>. Given this set of constraints and the ones obtained from unification when applying the rules, which are equalities between multisets, we try to find an AC1<xref ref-type="fn" rid="Fn1">1</xref> unifier [<xref ref-type="bibr" rid="CR1">1</xref>, section 10.3] such that it does not map context variables of <inline-formula id="IEq46"><alternatives><tex-math id="M89">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}_{1}$$\end{document}</tex-math><mml:math id="M90"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq46.gif"/></alternatives></inline-formula> to empty or a multiset which contains more than one copy of each context. This approach to proof transformations has its limitations, since we do not take into consideration cases that succeed because of a rule’s invertibility or the use of cut rules. Thus, the check is always sound, but not complete. The user needs to check by hand the cases that Sequoia cannot infer.</p>
      <p id="Par24"><bold>Permutability.</bold> Given two rules <inline-formula id="IEq47"><alternatives><tex-math id="M91">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M92"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq47.gif"/></alternatives></inline-formula> and <inline-formula id="IEq48"><alternatives><tex-math id="M93">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M94"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq48.gif"/></alternatives></inline-formula>, the initial rules, and the weakening properties of the calculus, we say that <inline-formula id="IEq49"><alternatives><tex-math id="M95">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M96"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq49.gif"/></alternatives></inline-formula>
<italic>permutes up</italic>
<inline-formula id="IEq50"><alternatives><tex-math id="M97">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M98"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq50.gif"/></alternatives></inline-formula> if a proof tree <inline-formula id="IEq51"><alternatives><tex-math id="M99">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}$$\end{document}</tex-math><mml:math id="M100"><mml:mi mathvariant="script">T</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq51.gif"/></alternatives></inline-formula> ending with the rule <inline-formula id="IEq52"><alternatives><tex-math id="M101">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M102"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq52.gif"/></alternatives></inline-formula> applied over <inline-formula id="IEq53"><alternatives><tex-math id="M103">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M104"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq53.gif"/></alternatives></inline-formula> can be transformed into a proof tree <inline-formula id="IEq54"><alternatives><tex-math id="M105">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}'$$\end{document}</tex-math><mml:math id="M106"><mml:msup><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mo>′</mml:mo></mml:msup></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq54.gif"/></alternatives></inline-formula> ending with <inline-formula id="IEq55"><alternatives><tex-math id="M107">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M108"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq55.gif"/></alternatives></inline-formula> applied over <inline-formula id="IEq56"><alternatives><tex-math id="M109">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M110"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq56.gif"/></alternatives></inline-formula>. Sequoia performs this check by first generating all derivations <inline-formula id="IEq57"><alternatives><tex-math id="M111">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}$$\end{document}</tex-math><mml:math id="M112"><mml:mi mathvariant="script">T</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq57.gif"/></alternatives></inline-formula> where <inline-formula id="IEq58"><alternatives><tex-math id="M113">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M114"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq58.gif"/></alternatives></inline-formula> is applied over <inline-formula id="IEq59"><alternatives><tex-math id="M115">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M116"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq59.gif"/></alternatives></inline-formula>, and all derivations <inline-formula id="IEq60"><alternatives><tex-math id="M117">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}'$$\end{document}</tex-math><mml:math id="M118"><mml:msup><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mo>′</mml:mo></mml:msup></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq60.gif"/></alternatives></inline-formula> where <inline-formula id="IEq61"><alternatives><tex-math id="M119">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M120"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq61.gif"/></alternatives></inline-formula> is applied over <inline-formula id="IEq62"><alternatives><tex-math id="M121">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M122"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq62.gif"/></alternatives></inline-formula>. Then, for each tree <inline-formula id="IEq63"><alternatives><tex-math id="M123">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}$$\end{document}</tex-math><mml:math id="M124"><mml:mi mathvariant="script">T</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq63.gif"/></alternatives></inline-formula>, we try to find a tree <inline-formula id="IEq64"><alternatives><tex-math id="M125">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}'$$\end{document}</tex-math><mml:math id="M126"><mml:msup><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mo>′</mml:mo></mml:msup></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq64.gif"/></alternatives></inline-formula> such that <inline-formula id="IEq65"><alternatives><tex-math id="M127">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}$$\end{document}</tex-math><mml:math id="M128"><mml:mi mathvariant="script">T</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq65.gif"/></alternatives></inline-formula> can be transformed into <inline-formula id="IEq66"><alternatives><tex-math id="M129">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {T}'$$\end{document}</tex-math><mml:math id="M130"><mml:msup><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mo>′</mml:mo></mml:msup></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq66.gif"/></alternatives></inline-formula>.</p>
      <p id="Par25"><bold>Weakening Admissibility.</bold> The admissibility of weakening for a calculus is checked for each context separately. Given a context <inline-formula id="IEq67"><alternatives><tex-math id="M131">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\varGamma $$\end{document}</tex-math><mml:math id="M132"><mml:mi>Γ</mml:mi></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq67.gif"/></alternatives></inline-formula> in a sequent <italic>S</italic>, the theorem states: if a sequent <inline-formula id="IEq68"><alternatives><tex-math id="M133">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S[\varGamma ]$$\end{document}</tex-math><mml:math id="M134"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>Γ</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq68.gif"/></alternatives></inline-formula> is provable, then so is <inline-formula id="IEq69"><alternatives><tex-math id="M135">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S[\varGamma ,F]$$\end{document}</tex-math><mml:math id="M136"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>Γ</mml:mi><mml:mo>,</mml:mo><mml:mi>F</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq69.gif"/></alternatives></inline-formula>. The usual proof proceeds by structural induction on the derivation of <inline-formula id="IEq70"><alternatives><tex-math id="M137">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S[\varGamma ]$$\end{document}</tex-math><mml:math id="M138"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>Γ</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq70.gif"/></alternatives></inline-formula>. Sequoia is able to check all “trivial” cases, i.e. the ones that require only the inductive hypothesis.</p>
      <p id="Par26"><bold>Identity Expansion.</bold> Identity expansion is the property that all identity rules can be applied on atoms. The usual proof proceeds by induction on the formula structure. Let <inline-formula id="IEq71"><alternatives><tex-math id="M139">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\bullet (F_1,...,F_n)$$\end{document}</tex-math><mml:math id="M140"><mml:mrow><mml:mo>∙</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq71.gif"/></alternatives></inline-formula> be a formula with main connective <inline-formula id="IEq72"><alternatives><tex-math id="M141">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\bullet $$\end{document}</tex-math><mml:math id="M142"><mml:mo>∙</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq72.gif"/></alternatives></inline-formula>, <inline-formula id="IEq73"><alternatives><tex-math id="M143">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$[\bullet _1],...,[\bullet _k]$$\end{document}</tex-math><mml:math id="M144"><mml:mrow><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mo>∙</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mo>∙</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq73.gif"/></alternatives></inline-formula> be the rules for decomposing <inline-formula id="IEq74"><alternatives><tex-math id="M145">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\bullet $$\end{document}</tex-math><mml:math id="M146"><mml:mo>∙</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq74.gif"/></alternatives></inline-formula>, and [<italic>id</italic>] one identity rule. Sequoia checks if a proof ending with [<italic>id</italic>] on <inline-formula id="IEq75"><alternatives><tex-math id="M147">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\bullet (F_1,...,F_n)$$\end{document}</tex-math><mml:math id="M148"><mml:mrow><mml:mo>∙</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq75.gif"/></alternatives></inline-formula> can be transformed into a proof using some of the rules <inline-formula id="IEq76"><alternatives><tex-math id="M149">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$[\bullet _1],...,[\bullet _k]$$\end{document}</tex-math><mml:math id="M150"><mml:mrow><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mo>∙</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mo>∙</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq76.gif"/></alternatives></inline-formula> and [<italic>id</italic>] only on <inline-formula id="IEq77"><alternatives><tex-math id="M151">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_1,...,F_n$$\end{document}</tex-math><mml:math id="M152"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq77.gif"/></alternatives></inline-formula>. This is done by applying left and right pairs of rules and trying to close the proof.</p>
      <p id="Par27">Once again, this check is sound, but not complete. For example, take the LJ calculus for intuitionistic logic with the following rules for conjunction left: <graphic position="anchor" xlink:href="501052_1_En_32_Figk_HTML" id="MO11"/>
</p>
      <p id="Par28">Sequoia is not able to infer identity expansion because it will not apply contraction arbitrarily. Instead, if the following rule is used: <graphic position="anchor" xlink:href="501052_1_En_32_Figl_HTML" id="MO12"/>
</p>
      <p id="Par29">Then Sequoia succeeds in showing identity expansion for the case of <inline-formula id="IEq78"><alternatives><tex-math id="M153">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\wedge $$\end{document}</tex-math><mml:math id="M154"><mml:mo>∧</mml:mo></mml:math><inline-graphic xlink:href="501052_1_En_32_Chapter_IEq78.gif"/></alternatives></inline-formula>.</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Usage</title>
    <p id="Par30">Sequoia was made with the goal in mind that a calculus construction and tree building tool should have a nice design and an intuitive interface for students and academics. All input is compiled in
<inline-graphic xlink:href="501052_1_En_32_Figm_HTML.gif" id="d30e1980"/>
, as it is a familiar typesetting language with a vast access to symbols.</p>
    <p id="Par31"><bold>Symbols Table.</bold> Before creating rules and building trees, users must declare the symbols to be used and their types. A symbols table consists of the symbol (input in
<inline-graphic xlink:href="501052_1_En_32_Fign_HTML.gif" id="d30e1987"/>
) and its type (chosen from a drop-down menu). Symbols can be updated by changing their type or simply deleted. There are two symbols tables: a rule one (symbols used for the rules in a calculus) and an end-sequent one (symbols used on the end-sequent of a proof tree). The following restrictions apply to both tables: the same symbol cannot be assigned different types (per calculus), and symbols cannot contain superscripts. Moreover, the symbols used for context variables and formulas in rules and end-sequents must be disjoint.</p>
    <p id="Par32"><bold>Calculus Specification.</bold> The homepage displays a user’s defined calculi, a form to create new calculi, and buttons to add sample calculi that are available by default. Each calculus will have a card. Clicking on a calculus card will direct the user to the main page for that calculus, which contains all its rules and the rule symbols table. “Add Rule” directs the user to the rule creation page, where they see the input fields for a rule: name, main connective, conclusion, and premise(s). There is also a drop-down menu for indicating on which side of the sequent the rule operates (left, right, or none). After filling in the information, clicking on “Preview” will show a rendering of the rule compiled in
<inline-graphic xlink:href="501052_1_En_32_Figo_HTML.gif" id="d30e1994"/>
and the rule symbols table from the calculus page. When all symbols in the premises and conclusion are in the table, the new rules can be added to the calculus.</p>
    <p id="Par33"><bold>Tree Building.</bold> Clicking on “Proof Tree” (upper right corner) takes the user to a page where they can build proof trees using the calculus rules they have defined (listed on the right). After entering an end-sequent and clicking on “Preview”, they will see a rendering of the sequent in
<inline-graphic xlink:href="501052_1_En_32_Figp_HTML.gif" id="d30e2001"/>
and the end-sequent symbols table. Once all the context variable and formula symbols are declared in the table, the user can begin building the tree. The constraint list (initially empty) is shown on the left. To build on a proof tree, the user selects a leaf premise in the tree and a rule to apply on it. If the rule is not applicable, the user will be informed. Otherwise, the user is prompted with a selection of all the possible premise sets that result from applying the rule. Selecting a premise set renders the appropriate tree with these premises and the constraint list is updated with the associated constraint. In case the selected rule is <italic>cut</italic>, the user is prompted for the substitution to be used. They must type the cut-formula variable (used in the rule), and the cut-formula to be used for that variable.</p>
    <p id="Par34"><bold>Properties Testing.</bold> The properties page allows the user to test certain meta-properties for a sequent calculus system. Currently, the implemented meta-properties are: weakening admissibility, identity expansion, and permutability.</p>
    <p id="Par35">By clicking on “Weakening Admissibility” or “Identity Expansion”, the user is presented with several cards representing contexts or connectives, respectively. Clicking on a card will show all its proof tree transformations for that property. By clicking on “Permutability”, the user is shown all rules and must select two to perform the check. After clicking on “Permute Rules”, Sequoia shows all the successful and failed proof transformations for permutability between them.</p>
  </sec>
  <sec id="Sec7">
    <title>Related Work</title>
    <p id="Par36">There are several other tools for constructing and visualizing proofs. We will focus on the ones that are interactive and offer support for sequent calculi.</p>
    <p id="Par37">Closest to our approach is Carnap.io [<xref ref-type="bibr" rid="CR5">5</xref>], a web-based tool built using proofJS and Haskell. Carnap supports different deductive systems and allows users to add their logic by implementing it in Haskell with the help of Carnap’s type classes. Proof tree construction is done by typing the proof, while Carnap checks each step. The sequent calculus calculator [<xref ref-type="bibr" rid="CR4">4</xref>] has an interface similar to Sequoia, and also allows the user to build proof trees in four different logics. The user needs to instantiate the rules before applying them. Axolotl [<xref ref-type="bibr" rid="CR2">2</xref>] is a Java applet and mobile app for constructing proofs. It can handle proofs in sequent calculus, natural deduction, or Hilbert systems. Sequent calculus rules are displayed on a one-dimensional notation, and proof goals may not contain context variables.</p>
    <p id="Par38">Both Carnap.io and the sequent calculus calculator require manual input from the user when building proofs, which are checked. Sequoia instead computes all possibilities for a <italic>correct</italic> rule application, and prompts the user to choose one. This is less tedious for experienced users, and more user friendly for those not versed in sequent calculus. This is also the approach used in Axolotl.</p>
    <p id="Par39">Concerning different logics, while Carnap.io allows the user to add more calculi, this requires expertise with Haskell and type classes, which most undergraduate students lack. We believe that the approach of inputting sequent calculus via
<inline-graphic xlink:href="501052_1_En_32_Figq_HTML.gif" id="d30e2036"/>
will be more appealing for those users. The other systems only work on a pre-determined set of calculi.</p>
    <p id="Par40">Different from all the aforementioned systems, Sequoia allows users to build <italic>schematic</italic> proofs, using context variables. The reason for including this feature is that, most of the time, logicians “play” with proofs using schemas as opposed to concrete formulas since they are trying to see patterns or investigate proof transformations regardless of concrete terms.</p>
    <p id="Par41">Tatu [<xref ref-type="bibr" rid="CR7">7</xref>] and Quati [<xref ref-type="bibr" rid="CR8">8</xref>] are web-based tools that allow users to check for certain meta-properties of sequent calculus systems. Tatu allows the user to check for identity expansion and cut admissibility, while Quati allows the user to check if rules permute over each other and shows the proof tree transformations rendered from
<inline-graphic xlink:href="501052_1_En_32_Figr_HTML.gif" id="d30e2052"/>
. To use those tools, users have to define their sequent calculus system in linear logic with subexponentials, a non-trivial task that cannot be easily automated. Another approach for checking meta-properties is using rewrite logic. In [<xref ref-type="bibr" rid="CR9">9</xref>] the authors used Maude to automate the checking of permutability, admissibility and invertibility of rules. Although there is no user interface, the technique seems powerful and could be used in Sequoia for other checks.</p>
    <p id="Par42">Sequoia improves on Tatu and Quati by facilitating considerably the input of systems. The main difference between Sequoia and the tool based on Maude is that Sequoia displays the proof transformations that were found, thus showing the user how they work and increasing the trust in the system.</p>
  </sec>
  <sec id="Sec8">
    <title>Future Work</title>
    <p id="Par43">There are a number of features and improvements we plan to add to Sequoia.</p>
    <p id="Par44">We have recently finished the implementation of two new features: checking cut admissibility (using Gentzen-style proofs), and supporting rules with context restrictions (such as the one mentioned in Sect. <xref rid="Sec3" ref-type="sec">2.1</xref>). These will be added to the website soon. The next meta-property we would like to add support for is rule invertibility. It should not be hard to check the simplest cases, which use a short derivation with cut. Most, if not all, of the operations needed are already implemented. We also plan to add support for first-order systems, but this will be more challenging, since it requires changes to some of the core operations. It will also result in more prompts to the user.</p>
    <p id="Par45">To improve usability, we are investigating the possibility of inputting sequent calculi or proofs by taking pictures of hand-written objects. We believe this feature will make the system much more appealing, specially to undergrads who do their work by hand, and need to type it in
<inline-graphic xlink:href="501052_1_En_32_Figs_HTML.gif" id="d30e2072"/>
afterwards. A simpler addition that increases usability is allowing that rules be reused between calculi.</p>
    <p id="Par46">Concerning the meta-property proofs, we want to give the user the ability to export (incomplete) proofs to
<inline-graphic xlink:href="501052_1_En_32_Figt_HTML.gif" id="d30e2077"/>
. Given a stable framework for formalizing meta-properties, one could also think of exporting these proofs into partial proof scripts to be completed by the user.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par23">Associative, commutative, with neutral element (the properties of multiset union).</p>
    </fn>
  </fn-group>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Baader</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Nipkow</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <source>Term Rewriting and All That</source>
        <year>1998</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Cerna, D.M., Kiesel, R.P., Dzhiganskaya, A.: A mobile application for self-guided study of formal reasoning. In: Quaresma, P., Neuper, W., Marcos, J. (eds.) Proceedings of the 8th International Workshop on Theorem Proving Components for Educational Software. Electronic Proceedings in Theoretical Computer Science, vol. 313, pp. 35–53. Open Publishing Association (2020). 10.4204/EPTCS.313.3</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Di Cosmo, R., Miller, D.: Linear logic. In: Zalta, E.N. (ed.) The Stanford Encyclopedia of Philosophy. Metaphysics Research Lab, Stanford University (2019)</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Hauser, F.: Sequent Calculus Calculator. <ext-link ext-link-type="uri" xlink:href="https://seqcalc.io/">https://seqcalc.io/</ext-link>. Accessed Jan 2020</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Leach-Krouse, G.: Carnap: an open framework for formal reasoning in the browser. In: Quaresma, P., Neuper, W. (eds.) Proceedings 6th International Workshop on Theorem proving components for Educational software. Electronic Proceedings in Theoretical Computer Science, vol. 267, pp. 70–88. Open Publishing Association (2018). 10.4204/EPTCS.267.5</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Naeem, Z., Reis, G.: Unification of multisets with multiple labelled multiset variables. In: 33rd International Workshop on Unification (UNIF) (2019)</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nigam</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Reis</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>An extended framework for specifying and reasoning about proof systems</article-title>
        <source>J. Logic Comput.</source>
        <year>2016</year>
        <volume>26</volume>
        <issue>2</issue>
        <fpage>539</fpage>
        <lpage>576</lpage>
        <pub-id pub-id-type="doi">10.1093/logcom/exu029</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Nigam, V., Reis, G., Lima, L.: Quati: an automated tool for proving permutation lemmas. In: 7th International Joint Conference on Automated Reasoning (IJCAR 2014), pp. 255–261 (2014). 10.1007/978-3-319-08587-6_18</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Olarte</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Rocha</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Rusu</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Proving structural properties of sequent systems in rewriting logic</article-title>
        <source>Rewriting Logic and Its Applications</source>
        <year>2018</year>
        <publisher-loc>Cham</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>115</fpage>
        <lpage>135</lpage>
      </element-citation>
    </ref>
  </ref-list>
</back>
