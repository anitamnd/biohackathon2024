<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Genomics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Genomics</journal-id>
    <journal-title-group>
      <journal-title>BMC Genomics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2164</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7677819</article-id>
    <article-id pub-id-type="pmid">33208101</article-id>
    <article-id pub-id-type="publisher-id">7013</article-id>
    <article-id pub-id-type="doi">10.1186/s12864-020-07013-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Optimizing performance of GATK workflows using Apache Arrow In-Memory data framework</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Ahmad</surname>
          <given-names>Tanveer</given-names>
        </name>
        <address>
          <email>t.ahmad@tudelft.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ahmed</surname>
          <given-names>Nauman</given-names>
        </name>
        <address>
          <email>n.ahmed@tudelft.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Al-Ars</surname>
          <given-names>Zaid</given-names>
        </name>
        <address>
          <email>z.al-ars@tudelft.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hofstee</surname>
          <given-names>H. Peter</given-names>
        </name>
        <address>
          <email>z.al-ars@tudelft.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.5292.c</institution-id><institution-id institution-id-type="ISNI">0000 0001 2097 4740</institution-id><institution>Accelerated Big Data Systems Group, Quantum &amp; Computer Engineering Department, Delft University of Technology, </institution></institution-wrap>Delft, The Netherlands </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.481552.f</institution-id><institution>IBM Research Austin, </institution></institution-wrap>Texas, USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>11</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>18</day>
      <month>11</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <issue>Suppl 10</issue>
    <issue-sponsor>Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. The articles have undergone the journal's standard peer review process for supplements. The Supplement Editors declare that they have no competing interests.</issue-sponsor>
    <elocation-id>683</elocation-id>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Immense improvements in sequencing technologies enable producing large amounts of high throughput and cost effective next-generation sequencing (NGS) data. This data needs to be processed efficiently for further downstream analyses. Computing systems need this large amounts of data closer to the processor (with low latency) for fast and efficient processing. However, existing workflows depend heavily on disk storage and access, to process this data incurs huge disk I/O overheads. Previously, due to the cost, volatility and other physical constraints of DRAM memory, it was not feasible to place large amounts of working data sets in memory. However, recent developments in storage-class memory and non-volatile memory technologies have enabled computing systems to place huge data in memory to process it directly from memory to avoid disk I/O bottlenecks. To exploit the benefits of such memory systems efficiently, proper formatted data placement in memory and its high throughput access is necessary by avoiding (de)-serialization and copy overheads in between processes. For this purpose, we use the newly developed Apache Arrow, a cross-language development framework that provides language-independent columnar in-memory data format for efficient in-memory big data analytics. This allows genomics applications developed in different programming languages to communicate in-memory without having to access disk storage and avoiding (de)-serialization and copy overheads.</p>
      </sec>
      <sec>
        <title>Implementation</title>
        <p id="Par2">We integrate Apache Arrow in-memory based Sequence Alignment/Map (SAM) format and its shared memory objects store library in widely used genomics high throughput data processing applications like BWA-MEM, Picard and GATK to allow in-memory communication between these applications. In addition, this also allows us to exploit the cache locality of tabular data and parallel processing capabilities through shared memory objects.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par3">Our implementation shows that adopting in-memory SAM representation in genomics high throughput data processing applications results in better system resource utilization, low number of memory accesses due to high cache locality exploitation and parallel scalability due to shared memory objects. Our implementation focuses on the GATK best practices recommended workflows for germline analysis on whole genome sequencing (WGS) and whole exome sequencing (WES) data sets. We compare a number of existing in-memory data placing and sharing techniques like ramDisk and Unix pipes to show how columnar in-memory data representation outperforms both. We achieve a speedup of 4.85x and 4.76x for WGS and WES data, respectively, in overall execution time of variant calling workflows. Similarly, a speedup of 1.45x and 1.27x for these data sets, respectively, is achieved, as compared to the second fastest workflow. In some individual tools, particularly in sorting, duplicates removal and base quality score recalibration the speedup is even more promising.</p>
      </sec>
      <sec>
        <title>Availability</title>
        <p id="Par4">The code and scripts used in our experiments are available in both container and repository form at: <ext-link ext-link-type="uri" xlink:href="https://github.com/abs-tudelft/ArrowSAM">https://github.com/abs-tudelft/ArrowSAM</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genomics</kwd>
      <kwd>Whole Genome/Exome Sequencing</kwd>
      <kwd>Big Data</kwd>
      <kwd>Apache Arrow</kwd>
      <kwd>In-Memory Data</kwd>
      <kwd>GATK Best Practices</kwd>
    </kwd-group>
    <conference xlink:href="http://epigenomics.snu.ac.kr/APBC2020/">
      <conf-name>The 18th Asia Pacific Bioinformatics Conference</conf-name>
      <conf-acronym>APBC 2020</conf-acronym>
      <conf-loc>Seoul, Korea</conf-loc>
      <conf-date>18-20 August 2020</conf-date>
    </conference>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p>The <bold>genome</bold> of an organism is the complete set of its genetic material represented by its DNA sequence. Each cell in a human body contains a complete replication of the approximately 3 billion base pairs (bps) of DNA. The <bold>genomics</bold> field emphasizes on the understanding of structure, mapping and function of individuals genes (the genome) to get insights into their interaction and evolution with respect to one’s environment. In <bold>comparative genomics</bold>, complete genome features of different spices are extensively compared (for example with a reference genome) using computational tools. These comparisons can lead to fully characterize the resemblances and differences in one’s genomic features, trace down their origin or lineage, how the change or loss emerges throughout the evolutionary lineages and discover ways to cure diseases caused by genetic variations and developing personalized medicine and improving environmental health [<xref ref-type="bibr" rid="CR1">1</xref>].</p>
    <p><bold>Variant calling</bold> is indispensable for comparative genomics as it reveals deep insights into nucleotide-level organismal differences in some specific traits among populations from an individual genome sequence data. Variant calling discerns genetic variations in three categories like, single nucleotide polymorphisms (SNPs), insertions and deletions (indels), and/or structural variants (SVs, may also include Copy Number Variants (CNVs), duplication, translocation, etc). An <bold>SNP</bold> reports a single base change in two genomes while the DNA around that base remains unchanged. <bold>Indels</bold> are single bases which have been inserted, or deleted in a genome when aligning to another reference genome. <bold>Structural variants</bold> are observed in organism’s chromosome structures. Generally defined as a region of DNA approximately 1 kbp or larger in size having variations in the form of inversions, translocations or deletions, insertions and CNVs (also called duplications). DNA sequencing reveals that CNVs are commonly observed in various organisms, particularly in human, which vary from individual to individual. Approximately two third of whole human genome is composed of such repeats.</p>
    <p>DNA can mutate in any of the somatic cells or in germinal cells (germ cells); such variations are referred as somatic and germinal mutations, respectively. <bold>Somatic analysis</bold> identifies the variations in normal and tumor affected tissues. Somatic mutations/variations can cause cancer or other diseases. In <bold>germline analysis</bold> the variations in an individual’s DNA inherited from parents are analyzed to identify presence of inherited disease.</p>
    <p>In <bold>whole-genome sequencing (WGS)</bold> the complete set of DNA sequences (both the entire protein coding and the non-coding regions of the genome) of an organism are determined. This gives a comprehensive and precise fingerprint of the whole DNA. <bold>Whole-exome sequencing (WES)</bold> instead just focuses on collecting DNA sequences of some specific regions (like protein coding). WES samples are typically sequenced at 100X or 30X coverage which focuses on less than ∼5% of the complete genome. Both techniques have their own benefits. WES saves costs and also gives more DNA coverage resulting in higher accuracy. WGS covers the complete genome which is good for fully characterizing and understanding the genome.</p>
    <sec id="Sec2">
      <title>Genome/Exome pre-processing</title>
      <p>The pre-processed genomics data can be used for timely identification of gene mutation, diagnosis of disease as well as the development of targeted therapies. Generally pre-processing steps include alignment, sorting and duplicate reads removal from target genome sequence data. Many tools have been developed for analysis of high throughput sequencing data, from local alignment database search tools like BLAST [<xref ref-type="bibr" rid="CR2">2</xref>], FASTA [<xref ref-type="bibr" rid="CR3">3</xref>] to pairwise alignment tools like MALIGN [<xref ref-type="bibr" rid="CR4">4</xref>], EMBOSS [<xref ref-type="bibr" rid="CR5">5</xref>], tools like BLAT [<xref ref-type="bibr" rid="CR6">6</xref>] Bowtie2 [<xref ref-type="bibr" rid="CR7">7</xref>] and BWA [<xref ref-type="bibr" rid="CR8">8</xref>] for short read sequence alignments and Minimap and Miniasm [<xref ref-type="bibr" rid="CR9">9</xref>], DALIGNER [<xref ref-type="bibr" rid="CR10">10</xref>] and DARWIN [<xref ref-type="bibr" rid="CR11">11</xref>] tools for long reads alignment and mapping. Tools like SAMTools [<xref ref-type="bibr" rid="CR12">12</xref>], Picard [<xref ref-type="bibr" rid="CR13">13</xref>], Sambamba [<xref ref-type="bibr" rid="CR14">14</xref>] and samblaster [<xref ref-type="bibr" rid="CR15">15</xref>] are developed for alignment post-processing stages like indexing, sorting, duplicates removal in SAM/BAM (Binary Alignment/Map) files.</p>
    </sec>
    <sec id="Sec3">
      <title>Variant callers</title>
      <p>GATK and Freebayes are commonly used open-source tools for germline variant calling analysis. Tools like VarScan [<xref ref-type="bibr" rid="CR16">16</xref>], VarDict [<xref ref-type="bibr" rid="CR17">17</xref>], MuTect2 [<xref ref-type="bibr" rid="CR18">18</xref>] are used for somatic variant calling analysis. FreeBays [<xref ref-type="bibr" rid="CR19">19</xref>], SNVer [<xref ref-type="bibr" rid="CR20">20</xref>] and LoFreq [<xref ref-type="bibr" rid="CR21">21</xref>] are also used for both germline and somatic variant calling analysis. Pisces [<xref ref-type="bibr" rid="CR22">22</xref>] and Strelka2 [<xref ref-type="bibr" rid="CR23">23</xref>] are recently developed open source tools by Illumnia for short variant calling to analyze both germline and somatic variations. DeepVariant [<xref ref-type="bibr" rid="CR24">24</xref>] is deep convolutional neural network based variant caller. Both Strelka2 and DeepVariant variant callers outperform GATK, FreeBays and samtools in PrecisionFDA (pFDA) Challenges for precision and accuracy on indels and SNVs for different data sets. The output of these tools is generated in the variant calling format (VCF) to visualize and further analyze the detected variations.</p>
    </sec>
    <sec id="Sec4">
      <title>Challenges in genomics data processing</title>
      <p>Comparative genomics is a young field. To process and analyze genomics data, the research community is actively working to develop new, efficient and optimized algorithms, techniques and tools, usually programmed in a variety of languages, such as C, Java or Python. As we have mentioned earlier, in order to construct a whole workflow for complete genome analysis, one has to use a combination of different open-source tools. These tools share the following common characteristics that impose limitations on the performance achievable by the genomics workflow.
<list list-type="bullet"><list-item><p>These tools are developed to use traditional I/O file systems, which incur a huge I/O bottleneck in computation due to disk bandwidth [<xref ref-type="bibr" rid="CR25">25</xref>]. Each tool reads from the I/O disks, computes and writes back to disk.</p></list-item><list-item><p>Due to the virtualized nature of some popular languages used to develop genomics tools (such as Java and Python), these tools cannot exploit modern hardware features like multi-core parallelization, Single instruction, multiple data (SIMD) vectorization and accelerators (like GPU or FPGAs) performance very well.</p></list-item><list-item><p>In between processes data communication developed in different languages, a huge (de)-serialization and copy overheads incur.</p></list-item></list></p>
    </sec>
    <sec id="Sec5">
      <title>Motivation</title>
      <p>New storage-class memory (SCM) technologies will soon replace the existing long latency and block-based data transfer HDDs/SSDs storage. Intel’s phase-change memory (PCM) based Optane DC (Data Center) Persistent Memory is one of the first candidates in this paradigm to accelerate big data workloads for in-memory analytics and provide fast startup-times for legacy applications/virtual machines in cloud environments [<xref ref-type="bibr" rid="CR26">26</xref>–<xref ref-type="bibr" rid="CR28">28</xref>]. Using these memories to store SAM data in columnar format and shared memory objects can provide benefit in many aspects to improve overall system throughout:
<list list-type="bullet"><list-item><p>One is related to the tabular nature of genomics data (SAM) in-memory.</p></list-item><list-item><p>Second is related to underlying hardware technology to exploit the maximum cache spatial locality and SIMD vectorization capabilities of modern multi-core systems.</p></list-item><list-item><p>Third is to avoid (de)serialization of data when processing in different languages. Shared memory objects of SAM data can be processed in parallel.</p></list-item></list></p>
      <p>We use DRAM as an alternative to such memory technologies for evaluation purpose because of its same characteristics of byte-addressability (load/store access to memory) and lower latency.</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Background</title>
    <p>This section provides a short description of widely-adopted GATK variant calling workflow, NGS technologies and the amount of data they produce and the challenges in processing this data. A brief introduction to the Apache Arrow framework and its Plasma shared memory API is also given.</p>
    <sec id="Sec7">
      <title>Genome Analysis Toolkit (GATK)</title>
      <p>GATK [<xref ref-type="bibr" rid="CR29">29</xref>] from the Broad Institute is considered as a benchmark for variant calling discovery. As the SAM [<xref ref-type="bibr" rid="CR30">30</xref>] is a de-facto format for storing NGS data, its compressed and indexed BAM [<xref ref-type="bibr" rid="CR30">30</xref>] version is used in GATK tools as input file(s). GATK tools produce variant calling outputs in many different formats like VCF, GVCF and different useful statistics in text format. GATK internal architecture is based on the philosophy of MapReduce [<xref ref-type="bibr" rid="CR31">31</xref>] functional programming paradigm to achieve maximum parallel efficiency by distributing data among processes. In MapReduce programming, the computations are accomplished in two steps; first the problem is divided into many discrete independent tasks which are fed to the map function. After completion of tasks their respective outputs are merged into a reduce function to generate a final output product. GATK reads/writes data files through htsjdk library, divides and prepares data in traversals then processes in walker modules. The walker modules provide the map and reduce functions for data consumption [<xref ref-type="bibr" rid="CR32">32</xref>].</p>
    </sec>
    <sec id="Sec8">
      <title>GATK best practices workflows</title>
      <p>For the analysis and interpretation of NGS data to be used in clinical settings, different tools and workflows have been created. GATK recommended best practices for variant calling proposes BWA-MEM for mapping reads, while Picard or Sambamba can be used for sorting and mark duplicates removal in the reads. Base Quality Score Recalibration (BQSR) in GATK adjusts the quality score of reads by employing machine learning algorithm. The following common GATK workflows [<xref ref-type="bibr" rid="CR33">33</xref>, <xref ref-type="bibr" rid="CR34">34</xref>] are available in GATK4 for different types of variant calling. 1. For identifying germline short variants (SNPs and indels) in one or more individuals the Haplotypecaller algorithm is used to generate a joint callset in VCF format. 2. Similarly Mutect2 is used for somatic short variants (SNVs and indels) identification in one or more tumor samples in a single individual, with or without a matched normal sample. 3. For germline short variants (SNPs and indels) discovery in human exome sequencing data the workflow uses intervals file in BED format while the Haplotypecaller algorithm is used to generate a joint callset in VCF format.</p>
    </sec>
    <sec id="Sec9">
      <title>Next-generation sequencing: technologies and data</title>
      <p>The first ever Human Genome Project [1990—2003] concluded an initial sequence draft of human genome consisting of approximately 2.85 billion nucleotides [<xref ref-type="bibr" rid="CR35">35</xref>]. Since then, genomics data has been increasing rapidly due to the innovations in genome sequencing technologies and analysis methods. Second Generation Sequencing (NGS) technologies like Illumina’s HiSeqX and NextSeq produce whole genome, high throughput and high quality short read data at a total cost of &lt;DOLLAR/&gt;1K per genome, which is expected to drop down below &lt;DOLLAR/&gt;100 for more advanced sequencing technologies. Third generation sequencing technologies are now capable of sequencing reads of more than 10 kilo-base-pairs (kbp) in length, such as Oxford Nanopore, Single Molecule Real-Time and Pacific BioSciences sequencing technologies. The ongoing pace of these technologies promises even more longer reads of ∼100 kbp on average. Long reads produced by third generation sequencing technologies provide the prospect to fully characterize genomes at high resolution for precision medicine [<xref ref-type="bibr" rid="CR36">36</xref>].</p>
    </sec>
    <sec id="Sec10">
      <title>Apache Arrow</title>
      <p>The Apache Arrow [<xref ref-type="bibr" rid="CR37">37</xref>] project was initiated by the Apache Foundation in 2016. This framework provides an open and a common standardized format for different programming languages for reading/writing tabular data in-memory. Through language-specific libraries, multiple languages can share data without any copying or serialization. This in-memory access of data through Apache Arrow is illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref>. At the time of writing, Apache Arrow supports the following languages: Go, C, C++, C#, Java, JavaScript, R, Rust, MATLAB, Ruby and Python. Interfaces exist for GPGPU programming, through Arrow CUDA interfaces. External tools to support FPGA accelerators also exist through the Fletcher project [<xref ref-type="bibr" rid="CR38">38</xref>]. In the Arrow format, data entries (records) are stored in a table called a RecordBatch. Each record field is stored in a separate column of the RecordBatch table in a manner that is as contiguous as possible in memory. This is called an Arrow Array which can store data of different types—i.e., int, float, strings, binary, timestamps and lists, but also nested types (such as lists of lists, etc.). Arrays may have different types of physical buffers to store data. This layout provides higher spatial locality when iterating over column contiguous data entries for better CPU cache performance. SIMD (Single instruction, multiple data) vector operations can also benefit from such a layout as vector elements are already aligned properly in memory.
<fig id="Fig1"><label>Fig. 1</label><caption><p><bold>Left:</bold> An example where (de)serialization and copy takes place when data is exchanged between different languages and platforms. <bold>Right:</bold> Apache Arrow provides a unified in-memory format for data placement which can be used in many languages and platforms avoiding the (de)serialization and copy overhead</p></caption><graphic xlink:href="12864_2020_7013_Fig1_HTML" id="MO1"/></fig></p>
    </sec>
    <sec id="Sec11">
      <title>Plasma in-memory object store</title>
      <p>Plasma is an inter-process communication (IPC) component of Arrow, that handles shared memory pools across different heterogeneous systems [<xref ref-type="bibr" rid="CR39">39</xref>]. To perform IPC, processes can create Plasma objects inside the shared memory pool, that are typically data buffers underlying an Arrow RecordBatch. Through the shared memory pool, Plasma enables zero-copy data sharing between processes.</p>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Implementation</title>
    <p>In order to enable genome pre-processing applications and GATK (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) to use in-memory SAM data, two main optimization are required. First, we need to define an in-memory Arrow representation of the SAM data. Second, the applications need to be adapted to access the new in-memory SAM data. These applications access, update and create new data fields as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. In the following, these two optimizations are discussed.
<fig id="Fig2"><label>Fig. 2</label><caption><p>In-memory architecture of GATK best practices recommended workflow using Arrow in-memory SAM representation for all intermediate steps</p></caption><graphic xlink:href="12864_2020_7013_Fig2_HTML" id="MO2"/></fig><fig id="Fig3"><label>Fig. 3</label><caption><p>In-memory SAM data placement for all chromosomes (1-22, X, Y and M) in GATK best practices workflow. Applications access it through shared memory plasma objects. For higher sequencing coverage data i.e, WGS data, each chromosomes with size more than 2GB are further divided for scalability</p></caption><graphic xlink:href="12864_2020_7013_Fig3_HTML" id="MO3"/></fig></p>
    <sec id="Sec13">
      <title>In-memory SAM format</title>
      <p>The SAM file format is an ASCII based, tab delimited text format to represent DNA sequence data. We create an in-memory SAM representation using the Apache Arrow columnar format that consists of the same fields (columns) used in SAM to store the corresponding data, this format is also explicitly explained in our previous work [<xref ref-type="bibr" rid="CR40">40</xref>]. We call this the ArrowSAM format, this stores the data in RecordBatches. Each RecordBatch is a combination of a schema, which specifies the types of data fields of ArrowSAM and the data itself, more details of in-memory Arrow data representation can be found in [<xref ref-type="bibr" rid="CR40">40</xref>].</p>
      <p>Genomics applications can use ArrowSAM to create RecordBatches of genomics data in-memory.</p>
      <p>RecordBatch columnar data can be deleted/updated in the same application but to make data usable in other applications we have to use shared memory flat buffers.</p>
    </sec>
    <sec id="Sec14">
      <title>BWA-MEM integration</title>
      <p>BWA-MEM is the most popular alignment algorithms in the bioinformatics community due to its efficient and accurate alignment of raw FASTQ data against a large reference genome. After performing alignment of each read, it creates a SAM record of twelve data fields as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. Instead of writing these records in a SAM file, we modified BWA-MEM to use the ArrowSAM format and Arrow libraries to store these records in Arrow Buffers. We have created as many such buffers as number of chromosomes. So we check the reference name (RNAME) of each record and insert to its respective buffer. At the end of the alignment process, all the buffers are converted to RecordBatches which are inserted into shared memory pool.</p>
    </sec>
    <sec id="Sec15">
      <title>Sorting through pandas dataframes</title>
      <p>Randomly generated SAM reads need to be sorted by their respective chromosome and individual coordinates (begin positions) within a chromosome. Pandas is a powerful and easy to use python library, which provides data structures, data cleaning and analysis tools. Dataframes is an in-memory data library that provides structures to store different types of data in tabular format to perform operations on the data in columns/rows. Any row in a dataframe can be accessed with its index, while a column can be accessed by its name. A column can also be a series in pandas. Using dataframes with python arrow bindings (PyArrow) illustrates the powerful capabilities of in-memory data representation. Tools like Picard, Samtools and Sambamba are used to sort the reads in a SAM file according to the chromosome name and start positions of each read. This type of sorting becomes computationally intensive when the whole SAM file needs to be parsed and sorted based on these two fields. In contrast, our implementation uses pandas dataframes to sort each individual chromosome based on the start position of reads in that particular chromosome. This reduces the computational effort needed to sort the reads since we already assign them to the RecordBatch that belongs to their own chromosome. Therefore, we only need to sort them based on their position. We create new RecordBatches for each chromosome with sorted data as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>.</p>
      <p>All shared memory objects of chromosomes are fed to pandas dataframes to sort in parallel. After sorting, the new sorted chromosomes RecordBatches are stored in shared memory by deleting previous shared memory objects, to be used by subsequent applications.</p>
    </sec>
    <sec id="Sec16">
      <title>Picard MarkDuplicate integration</title>
      <p>After sorting the reads by their coordinates, the duplicate reads with low quality should be removed. The MarkDuplicate tool in the Picard package is considered as a standard algorithm for duplicate reads removal. This tool reads the SAM files two times, first when building the sorted read end lists and second when removing marked duplicates from those lists by comparing each individual read in the file. This tool has two main limitations: first it reads SAM data sequentially from the input file, second it converts all input file reads data into their corresponding SAM records. SAM files are usually stored in disk in compressed format (called BAM) that has a compression ratio of about 30%. This means every time we read and write these files to disk, we have to incur a the overhead of compression and decompression. To overcome these overheads, we just read the data as ArrowSAM format in-memory once, accessing only five fields (QNAME, FLAG, RNAME, POS, CIGAR and RNEXT) as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, which are actually needed to perform the MarkDuplicate operation. For this purpose, We have modified the htsjdk (a java API used in Picard, GATK and many other tools for managing I/O access of high-throughput sequencing data files) to access shared memory stored plasma objects, and parse them to their respective RecordBatch. Each SAM read with the above mentioned five fields is accessed via index. Each shared memory object contains one chromosome SAM data. To take advantage of this, our implementation processes all chromosomes in parallel by initiating as many Picard instances as number of chromosomes. After processing reads, MarkDuplicate sets the duplicate bit in the FLAG field, so only the FLAG field is updated in this process which is written in a separate shared memory object for each chromosome. After completion of the MarkDuplicate stage, the sorted and updated duplicate flag data is available in shared memory objects for further analysis.</p>
    </sec>
    <sec id="Sec17">
      <title>GATK BaseRecalibration integration</title>
      <p>Variant calling heavily relies on the assigned base quality scores per base in individual reads. These scores are estimates of sequencing machine errors in producing bases. However, these scores are also affected due to systematic errors in the sequencing machines. BaseRecalibration finds systematic error patterns by analyzing how these errors vary over all bases. Only seven fields are accessed: six fields (RNAME, POS, MAPQ, CIGAR, SEQ and QUAL) from ArrowSAM records of shared memory objects created in the ’Sorting’ process, and one (FLAG) field created in MarkDuplicate process as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. We have also modified the access to the htsjdk library for this application similar to the MarkDuplicate application. All shared memory objects of individual chromosomes are processed in parallel by initiating as many as BaseRecalibration instances as number of chromosomes. All relevant information generated by this tool is recorded in tables.</p>
    </sec>
    <sec id="Sec18">
      <title>GATK ApplyBQSR integration</title>
      <p>ApplyBQSR applies numerical corrections to each individual basecall based on the patterns identified in BaseRecalibration tables. This application generates new QUAL and INDEX fields which are written in a separate shared memory object. In this application, the same seven fields are accessed: six fields (RNAME, POS, MAPQ, CIGAR, SEQ and QUAL) from in-memory SAM records of shared memory objects created in ’Sorting’ process and one (FLAG) field created in MarkDuplicate process as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. We have also modified htsjdk library for this process similar to previous processes except in generating output. Because we limit our processing to specific parts of the genome by filtering out unused intervals as provided in a special filtering file (called bed file), only those reads which fall in these specific intervals are forwarded for further processing. To properly map the newly created QUAL field output with that of original in-memory ArrowSAM data of the sorting process (to be used in the next application), we have appended an additional field ’index’. This field stores the index of the original read. All shared memory objects of individual chromosomes are processed in parallel by initiating as many as ApplyBQSR instances as the number of chromosomes.</p>
    </sec>
    <sec id="Sec19">
      <title>GATK HaplotypeCaller integration</title>
      <p>HaplotypeCaller calls SNPs and Indels through local de-novo assembly in active regions. Active regions are those which have some sufficient probability of variation. Here eight fields are accessed: five fields (RNAME, POS, MAPQ, CIGAR and SEQ) from ArrowSAM records of shared memory objects created in the ’Sorting’ application, one (FLAG) field created in the MarkDuplicate application and two (QUAL and INDEX) field created in the ApplyBQSR application as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. We have also modified access to the htsjdk library for this process similar to previous processes like ApplyBQSR. First, the INDEX field is checked as an alternative to intervals, so that particular index in the original ArrowSAM object created in the ’Sorting’ process is accessed. This indexing technique has one benefit and also one drawback. In terms of benefit, using the index field, we access only those fields which fall in given bed file intervals for exome analysis. Drawback is related to cache performance. Due to repeatedly changing the index during reads access, the cache spatial locality cannot be exploited efficiently. The output of this process is generated in VCF file format. Because we are processing all the shared memory objects of individual chromosomes in parallel, separate chromosome files are generated which need to be merged for further variants analysis.</p>
    </sec>
  </sec>
  <sec id="Sec20">
    <title>Methods</title>
    <p>We compare our ArrowSAM-based workflow to a number of popular workflows used in the field. For alignment we use BWA-MEM for all workflows due to its high accuracy and efficiency. For sorting and duplicate removal, Picard, Sambamba and elPrep (sfm) have been used. GATK and elPrep are used for the base recalibration and variant discovery stages. The reason behind selecting elPrep for performance comparison is the fact that it uses in-memory, and multi-threading techniques for pre-processing and variant discovery, while reporting to produce the same accuracy as that of GATK [<xref ref-type="bibr" rid="CR41">41</xref>]. In contrast, our implementation also facilitates in-memory and multi-threading features while using the exact same Picard and GATK applications. The reason for selecting Sambamba for the comparison is its multi-threaded nature and for being more efficient than other open source tools available for sorting and mark duplicate operations with the same accuracy as Picard.</p>
    <p>In the following subsections, we discuss the workflows used in comparison to ArrowSAM based implementation.</p>
    <sec id="Sec21">
      <title>Storage (BWA-MEM - Picard - GATK)</title>
      <p>This combination of tools is used in almost all GATK recommended best practices workflows for both whole genome and whole exome sequencing analysis. Both reference and query raw data sets are placed in local storage and all applications access data through local disk I/O. All the immediate results of each application are also written in local disk in standard SAM/BAM files.</p>
    </sec>
    <sec id="Sec22">
      <title>Storage (BWA-MEM - Sambamba - GATK)</title>
      <p>Sambamba is used here as an alternative to Picard for sorting and mark duplicates operations. Sambamba as mentioned earlier is faster than Picard for both of these applications because of multi-threading. But unfortunately parallel performance of Sambamba is limited and not scalable due to I/O saturation. All data sets and immediate results of each application are using local storage for I/O.</p>
    </sec>
    <sec id="Sec23">
      <title>ramDisk (BWA-MEM - Sambamba - GATK)</title>
      <p>In this workflow, we use ramDisk (memory-mapped disk) instead of local storage, since we can improve performance of these applications by placing data closer to the processor. This way, all data sets and immediate results of each application are kept in ramDisk in standard SAM/BAM files.</p>
    </sec>
    <sec id="Sec24">
      <title>ramDisk (BWA-MEM - Sambamba - GATK (Parallel))</title>
      <p>We can use some sort of naive parallelism for performance improvement in some GATK applications. For example in whole exome sequencing, BaseRecalibration application uses an interval file with -L option. If we split the interval file for each chromosome and pass the individual interval files to multiple instances of the BaseRecalibration application each executed for an individual chromosome in parallel, it will generate output ‘tables’ separate for each chromosome. Then, ApplyBQSR can also use the individual chromosomes interval files and ‘tables’. So running the ApplyBQSR instances in parallel will generate new BAM files for each individual chromosome separately. These individual chromosome BAMs and interval files can be passed to parallel instances of HaplotypeCaller, which will generate separate VCF files for individual chromosomes. These VCF files can then be merged in GATK.</p>
    </sec>
    <sec id="Sec25">
      <title>ramDisk (BWA-MEM - Sambamba (Pipes) - GATK (Parallel))</title>
      <p>We can use Unix pipes in some intermediate applications to redirect their standard output to other application in the workflow as their input to save the I/O time and disk resources of local storage. Using Unix pipes, the output of an application is not stored in disk, but is buffered in memory temporarily until it is consumed by the next application in the pipe. We also naive parallelism for performance improvement in some GATK applications as mentioned in above method.</p>
    </sec>
    <sec id="Sec26">
      <title>ArrowSAM</title>
      <p>This is our implementation proposed by this paper which uses in-memory ArrowSAM format and shared memory plasma objects to exploit cache spatial locality and multi-core efficiency. 1) Alignment is done in BWA-MEM which has already multi-threading support and output ArrowSAM data is placed in shared memory objects in respective chromosomes boundaries, 2) followed by coordinates based sorting using Plasma dataframes on all chromosomes (chromosomes greater than 2GB in WGS data sets are further divided with zero-copy overhead) to run sorting algorithm in parallel. 3) Picard MarkDuplicate is then run on resulting shared memory data chunks in parallel creating new FLAG field in-memory. 4) GATK BaseRecalibration generates tables for all ArrowSAM data chunks in parallel, 5) ApplyBQSR creates QUAL field by running parallel on all ArrowSAM data chunks and finally HaplotypeCaller generates separate VCF files for each chromosome/chunk (in case chromosome greater than 2GB). These files are merged to generate a final VCF using GTAK for futher analysis.</p>
    </sec>
    <sec id="Sec27">
      <title>elPrep</title>
      <p>As discussed earlier, elPrep [<xref ref-type="bibr" rid="CR41">41</xref>] is a multi-threaded pre-processing tool to operate on SAM/BAM data in-memory. In this tool, sorting, duplicate marking and base quality score recalibration algorithms are optimized for parallel execution. This tool has two runtime options, one is sfm, which uses less memory as compare to the other one called filter, which uses a large memory pool for in-memory processing. As reported in the paper, this tool has the same accuracy for pre-processing of SAM/BAM data as that of the GATK recommended best practices workflow. Therefore, we included this workflow for speedup comparison with all other workflows as this tool is more closely related to our implementation in the context of multi-threading and in-memory data placement and execution. Finally, GATK HaplotypeCaller is used for variant calling.</p>
    </sec>
  </sec>
  <sec id="Sec28" sec-type="results">
    <title>Results</title>
    <p>For evaluation of our in-memory SAM format and Apache Arrow integration into BWA-MEM, Picard and GATK tools, we have created a number of different workflows using state-of-the-art tools and techniques in accordance with GATK best practices workflow for whole genome and exome sequencing. We have run all these workflows with their recommended settings. In the “<xref rid="Sec29" ref-type="sec">Performance evaluation</xref>” section below we describe the measured performance, while we discuss the results in the “<xref rid="Sec41" ref-type="sec">Discussion</xref>” section.</p>
    <p>The individual applications execution times of the various workflows for WES are shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref> while Fig. <xref rid="Fig5" ref-type="fig">5</xref> shows the execution times for individual application for WGS. Similarly, the total execution times of the workflows are shown in Figs. <xref rid="Fig6" ref-type="fig">6</xref> and <xref rid="Fig7" ref-type="fig">7</xref> for WES and WGS data sets, respectively.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Runtimes (in seconds) of individual variant calling applications on whole exome data set using different workflow options (i.e, ramDisk, Pipes for Sambamba and chromosome wise parallelism in GATK)</p></caption><graphic xlink:href="12864_2020_7013_Fig4_HTML" id="MO4"/></fig><fig id="Fig5"><label>Fig. 5</label><caption><p>Runtimes (in minutes) of individual variant calling applications on whole genome data set using different workflow options (i.e, ramDisk, Pipes for Sambamba and chromosome wise parallelism in GATK)</p></caption><graphic xlink:href="12864_2020_7013_Fig5_HTML" id="MO5"/></fig><fig id="Fig6"><label>Fig. 6</label><caption><p>Total execution-times (in seconds) for complete variant calling workflows using different efficient options (i.e, ramDisk, Pipes for Sambamba and chromosome wise parallelism in GATK) on whole exome data set</p></caption><graphic xlink:href="12864_2020_7013_Fig6_HTML" id="MO6"/></fig><fig id="Fig7"><label>Fig. 7</label><caption><p>Total execution-times (in minutes) for complete variant calling workflows using different efficient options (i.e, ramDisk, Pipes for Sambamba and chromosome wise parallelism in GATK) on whole genome data set</p></caption><graphic xlink:href="12864_2020_7013_Fig7_HTML" id="MO7"/></fig></p>
    <sec id="Sec29">
      <title>Performance evaluation</title>
      <p>In this section, we compare execution time of our GATK recommended best practices variant calling workflow using ArrowSAM with other state-of-the-art workflows as discussed in the “<xref rid="Sec20" ref-type="sec">Methods</xref>” section on high throughput genome and exome data sets.</p>
    </sec>
    <sec id="Sec30">
      <title>Storage (BWA-MEM - Picard - GATK)</title>
      <p>This represents the <italic>baseline</italic> workflow. The main performance bottleneck in this workflow is single-threaded disk I/O access of SAM/BAM file(s) by the htsjdk library which is used in Picard and GATK tools. This workflow takes highest runtime from pre-processing to variant calling among all workflows.</p>
    </sec>
    <sec id="Sec31">
      <title>Storage (BWA-MEM - Sambamba - GATK)</title>
      <p>Replacing Picard with Sambamba for sorting and duplicate removal gives significant speedup in overall workflow execution as shown in Figs. <xref rid="Fig4" ref-type="fig">4</xref> and <xref rid="Fig5" ref-type="fig">5</xref>. But Sambamba’s performance does not scale very well since increasing the number of threads above 12 for sorting and mark duplicate gives no performance improvement. Still, the individual time of sorting and mark duplicate is significantly less than the baseline with 12 threads resulting in an overall execution time speedup of 1.5x as compared to the baseline for whole workflow.</p>
    </sec>
    <sec id="Sec32">
      <title>ramDisk (BWA-MEM - Sambamba - GATK)</title>
      <p>ramDisk is frequently suggested as an alternative for fast processing. We have observed that for GATK, only a small performance improvement is achieved. In the case of using ramDisk with Sambamba, there is even a reduction in performance for WES.</p>
    </sec>
    <sec id="Sec33">
      <title>ramDisk (BWA-MEM - Sambamba - GATK (Parallel))</title>
      <p>Using ramDisk for Sambamba while running GATK in parallel for all chromosomes is able to achieve a better performance improvement as compared to all previous workflows. The speedup is 3.5x and 3x for WES and WGS data as compared to the baseline workflow, respectively.</p>
    </sec>
    <sec id="Sec34">
      <title>ramDisk (BWA-MEM - Sambamba (Pipes) - GATK (Parallel))</title>
      <p>Redirecting output of BWA-MEM to Sambamba using Unix pipes slightly improves the performance of ramDisk. This is the best possible scenario of performance improvement as compared to previous workflows. It gives an overall speedup of 3.7x and 3.1x for WES and WGS data over the baseline workflow, respectively.</p>
    </sec>
    <sec id="Sec35">
      <title>ArrowSAM</title>
      <p>ArrowSAM based workflow is the fastest among all workflows. This workflow is made as scalable as possible by employing widely used pre-processing and variant calling algorithms of Picard and GATK. We achieve a speedup of 4.76x and 4.85x for WES and WGS data in overall execution time as compared to baseline workflow, respectively. Compared to the fastest parallelized workflow (ramDisk (BWA-MEM - Sambamba (Pipes) - GATK (Parallel))), our ArrowSAM workflow achieves a speedup of 1.27x and 1.45x with WES and WGS data, respectively.</p>
    </sec>
    <sec id="Sec36">
      <title>elPrep</title>
      <p>elPrep is a single application that can be used as a plug-in replacement for all pre-processing tools. That is the reason individual applications runtime is not shown in Figs. <xref rid="Fig4" ref-type="fig">4</xref> and <xref rid="Fig5" ref-type="fig">5</xref>. When using the sfm option, elPrep gives a speedup of 2.49x and 3.26x over the baseline for WES and WGS data, respectively. However, it is 1.91x and 1.45x slower than ArrowSAM for WES and WGS data, respectively. This tool also has a filter option, which gives 4.7x speedup over the baseline and is only slightly slower than ArrowSAM for WES data at the expense of using 4x more memory than ArrowSAM. We are not able to run the filter option on WGS data due to large memory requirement. In the elPrep paper [<xref ref-type="bibr" rid="CR41">41</xref>], the authors also do not show the results with the filter option for WGS data.</p>
    </sec>
    <sec id="Sec37">
      <title>Evaluation system</title>
      <p>All experiments and comparisons are performed on a dual socket Intel Xeon Server with E5-2680 v4 CPU running at 2.40GHz. Each processor has 14 physical cores with support of 28 hyper-threading jobs. Both processors are connected through Intel QuickPath Interconnect and share memory through non-uniform memory access architecture. A total of 192-GBytes of DDR4 DRAM with a maximum of 76.8 GB/s bandwidth is available for the whole system. A local storage of 1-TBytes and the same amount of network attached storage is available on the system. CentOS 7.3 Minimal Server operating system is installed. All workflows are executed through bash scripts.</p>
    </sec>
    <sec id="Sec38">
      <title>Tools</title>
      <p>The Apache Arrow framework and all its related libraries (like cglib, pyarrow and arrow-java) are installed in a Singularity container for ease of use to external users. The installed tools are listed in Table <xref rid="Tab1" ref-type="table">1</xref> with their versions for future reference.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Tools and libraries used in the experimental setup</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Tools/APIs</th><th align="left">Version</th></tr></thead><tbody><tr><td align="left">BWA-MEM [<xref ref-type="bibr" rid="CR8">8</xref>]</td><td align="left">0.7.17</td></tr><tr><td align="left">Picard [<xref ref-type="bibr" rid="CR13">13</xref>]</td><td align="left">2.18.14</td></tr><tr><td align="left">GATK [<xref ref-type="bibr" rid="CR29">29</xref>]</td><td align="left">4.0.12.0</td></tr><tr><td align="left">Sambamba [<xref ref-type="bibr" rid="CR14">14</xref>]</td><td align="left">0.6.8</td></tr><tr><td align="left">elPrep [<xref ref-type="bibr" rid="CR41">41</xref>]</td><td align="left">4.1.5</td></tr><tr><td align="left">Arrow C/C++/Java [<xref ref-type="bibr" rid="CR37">37</xref>]</td><td align="left">0.11.0</td></tr><tr><td align="left">PyArrow [<xref ref-type="bibr" rid="CR50">50</xref>]</td><td align="left">0.11.0</td></tr><tr><td align="left">Plasma Object Store [<xref ref-type="bibr" rid="CR39">39</xref>]</td><td align="left">0.11.0</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec39">
      <title>Datasets</title>
      <p>We use Illumina HiSeq generated NA12878 dataset [<xref ref-type="bibr" rid="CR42">42</xref>] with paired-end reads of WES of human with 30x sequencing coverage. Similarly for WGS, we use Illumina HiSeq generated NA12878 dataset sample SRR622461 with paired-end reads with sequencing coverage of 6x (we further lower the coverage to 2x due to memory limit on our evaluation system). Read length of 100 base-pairs is used for all data. Genome Human Genome Reference, Build 37 (GRCh37/hg19) is used as a reference genome. All workflows in our experiments use this data set for both WES and WGS.</p>
    </sec>
    <sec id="Sec40">
      <title>Memory footprint</title>
      <p>Our implementation is solely memory based, so all the data between BWA-MEM and HaplotypeCaller applications remains in memory. We only compare runtime peak memory utilization of elPrep and ArrowSAM since in-memory resource requirements vary for intermediate operations. Table <xref rid="Tab2" ref-type="table">2</xref> lists the memory usage for both tools. elPrep uses almost the same memory as ArrowSAM on WES data with the sfm option enabled and uses 4x more memory with the filter option. For WGS data elPrep (sfm) and ArrowSAM have the same memory footprint but elPrep (filter) memory footprint is not available due to the large memory requirements beyond available system memory resources. This use case is also not covered in the original elPrep paper. The results show that ArrowSAM only uses memory that is comparable to the size of the SAM file for both WES and WGS data sets.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Peak memory usage for in-memory processing tools</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Tool</th><th align="left">Exome</th><th align="left">Genome</th></tr></thead><tbody><tr><td align="left">elPrep (sfm)</td><td align="left">6.8GB</td><td align="left">68GB</td></tr><tr><td align="left">elPrep (filter)</td><td align="left">26GB</td><td align="left">X</td></tr><tr><td align="left">ArrowSAM</td><td align="left">7.2GB</td><td align="left">69GB</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec41">
      <title>Discussion</title>
      <p>Here we discuss some characteristics and limitations of our implementation in context of future perspective of in-memory data formats and processing for variant calling applications.</p>
      <sec id="Sec42">
        <title>Parallelization and scalability</title>
        <p>In ArrowSAM, all applications are capable to process data in parallel. The chunks of SAM data can be based on chromosomes or on the required data size. So that the memory plasma objects can be shared between different applications, which results in a large speedup in the overall runtime of individual applications.</p>
      </sec>
      <sec id="Sec43">
        <title>CPU utilization</title>
        <p>Depending on data partition in ArrowSAM, the maximum number of CPUs can be used for processing data in individual applications.</p>
      </sec>
      <sec id="Sec44">
        <title>Cache locality</title>
        <p>Due to the in-memory columnar data format, our implementation is able to exploit cache locality efficiently. All levels of cache accesses decrease in the sorting and mark duplicate applications, particularly due to the fewer number of in-memory fields (mostly integer type) access as discussed in [<xref ref-type="bibr" rid="CR40">40</xref>]. Cache miss rate also decreases in all cache levels and particularly in level-1 cache. In BaseRecalibration, ApplyBQSR and HaplotypeCaller applications we also exploit cache locality but it is not much significant as compared to previous applications because of two reasons, 1. algorithms for these tools are not developed in such a way to exploit cache locality efficiently, and 2. base sequences (SEQ) and qualities (QUAL) fields are also being accessed which pollute cache lines early in these applications.</p>
      </sec>
      <sec id="Sec45">
        <title>Accuracy</title>
        <p>We did not change any part of actual algorithms in all Picard and GATK applications. Therefore, our results are exactly the same as in the original implementation of both tools.</p>
      </sec>
    </sec>
    <sec id="Sec46">
      <title>Code and scripts availability</title>
      <p>The code for the in-memory ArrowSAM representation, all related Apache Arrow libraries for C, Java and Python languages and plasma shared memory process are installed on a singularity container which is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/abs-tudelft/ArrowSAM">https://github.com/abs-tudelft/ArrowSAM</ext-link>. The scripts for running all workflows are also available in the same root directory.</p>
    </sec>
  </sec>
  <sec id="Sec47">
    <title>Related work</title>
    <p>Many in-memory workflows have been presented in the literature. Many of these implementations are cluster scaled and do not exploit single node performance taking advantage of the Apache Spark framework [<xref ref-type="bibr" rid="CR43">43</xref>] for in-memory data management like SparkGA [<xref ref-type="bibr" rid="CR44">44</xref>] and ADAM [<xref ref-type="bibr" rid="CR45">45</xref>]. These implementations are not discussed in this paper. Our focus is to exploit the performance of single node systems.</p>
    <p>Aginome IMP Platform [<xref ref-type="bibr" rid="CR46">46</xref>], a GPU based sequence analysis tool set which uses in-memory database to store intermediate results for further analysis. To use in-memory database, the IMP Platform modifies FreeBayes [<xref ref-type="bibr" rid="CR19">19</xref>] and GATK for use in variant calling. IMP with GATK speeds up the variant detection workflow by 30x, while IMP with FreeBayes improves the performance by 100x as compared to the BWA-GATK workflow. However, this tool is not open-sourced. The Sentieon Genomics Tools [<xref ref-type="bibr" rid="CR47">47</xref>], report 10x performance improvement over GATK, MuTect and MuTect2 workflows by eliminating intermediate files merging. This tool also reports improving the performance of BWA-MEM by 1.9x times. However, this tool is also not available publicly and the paper does not discuss the details of the implementation.</p>
    <p>elPrep [<xref ref-type="bibr" rid="CR48">48</xref>], is a set of tools for pre-processing SAM/BAM files for variant calling. It is a multi-threaded, single command plug-in replacement tool which processes the data in-memory instead of reading and writing to I/O for each operation. In elPrep 4 [<xref ref-type="bibr" rid="CR41">41</xref>], the authors reported 13x speedup over GATK best practices workflow for whole-exome and 7.4x speedup for whole-genome data using maximum memory and storage footprints, at the expense of excessive memory utilization. They also compare the results for a cluster deployment to show the scalability for high performance computing infrastructure. In memory-driven computing, a large pool of different types of memories are created and connected to the processing resources through the Gen-Z communication protocol. The memory is shared across the processes being executed to avoid intermediate I/O operations. This systems also allows byte-addressability and load/store instructions to access memory. [<xref ref-type="bibr" rid="CR49">49</xref>] used a Gen-Z enabled platform for genomics and reported 5.9x speedup over the SAMtools baseline implementation for a number of DNA assembly algorithms. The source code is not available.</p>
    <p>Some researchers use high-performance hardware accelerators such as GPUs [<xref ref-type="bibr" rid="CR51">51</xref>] and FPGAs [<xref ref-type="bibr" rid="CR52">52</xref>] to accelerate computationally intensive parts of genomics pipelines, but availability of such accelerators in the field remains limited.</p>
  </sec>
  <sec id="Sec48" sec-type="conclusion">
    <title>Conclusion</title>
    <p>In this work, we integrate our Apache Arrow in-memory SAM representation (ArrowSAM) into genomics pre-processing and variant calling applications.</p>
    <p>Our implementation shows that adopting in-memory SAM representation in genomics high throughput data processing applications results in better system resource utilization, low number of memory accesses due to high cache locality exploitation and parallel scalability due to shared memory objects. We compare a number of existing in-memory data placing and sharing techniques like ramDisk and Unix pipes to show how columnar in-memory data representation outperforms both. We achieve a speedup of 4.85x and 4.76x for WGS and WES data sets in overall execution time of variant calling workflows, respectively. Similarly, a speedup of 1.45x and 1.27x for these data sets is achieved, as compared to the second fastest workflow.</p>
    <p>In future work, to feed processor fast and properly formatted data, in-memory data management techniques will be explored more rigorously to leverage the benefits of modern hardware features like multi-cores, vector units and to exploit caches locality in the presence of persistent memory technologies. We also plan to use ArrowSAM in big data frameworks like Spark for cluster level scalability of genomics applications.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Thanks to Peter van’t Hof from Leiden University Medical Center (LUMC), Netherlands for fruitful discussions which motivated us to adopt the Apache Arrow Framework for genomics in-memory data representation and processing.</p>
    <sec id="d30e1142">
      <title>About this supplement</title>
      <p>This article has been published as part of <italic>BMC Genomics Volume 21 Supplement 10, 2020: Selected articles from the 18th Asia Pacific Bioinformatics Conference (APBC 2020): genomics</italic>. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="https://bmcgenomics.biomedcentral.com/articles/supplements/volume-21-supplement-10">https://bmcgenomics.biomedcentral.com/articles/supplements/volume-21-supplement-10</ext-link>.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>The PhD research of Tanveer Ahmad and publication of this article is generously funded by Punjab Educational Endowment Fund (PEEF), Pakistan.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>All the codes and scripts are publicly available at: <ext-link ext-link-type="uri" xlink:href="https://github.com/abs-tudelft/ArrowSAM">https://github.com/abs-tudelft/ArrowSAM</ext-link>.</p>
  </notes>
  <notes id="FPar1" notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">Xia X. Comparative Genomics; 2013. <pub-id pub-id-type="doi">10.1007/978-3-642-37146-2</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <issue>3</issue>
        <fpage>403</fpage>
        <lpage>10</lpage>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>J Lipman</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pearson</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Rapid and sensitive protein similarity searches</article-title>
        <source>Science (New York, N.Y.)</source>
        <year>1985</year>
        <volume>227</volume>
        <fpage>1435</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1126/science.2983426</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <mixed-citation publication-type="other">Wheeler WC, S. Gladstein D. Malign: A multiple sequence alignment program. J Hered. 1994; 85. <pub-id pub-id-type="doi">10.1093/oxfordjournals.jhered.a111492</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rice</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Longden</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Bleasby</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Emboss: The european molecular biology open software suite</article-title>
        <source>Trends Genet TIG</source>
        <year>2000</year>
        <volume>16</volume>
        <fpage>276</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1016/S0168-9525(00)02024-2</pub-id>
        <pub-id pub-id-type="pmid">10827456</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>James Kent</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Blat - the blast-like alignment tool</article-title>
        <source>Genome Res</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>656</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.229202</pub-id>
        <pub-id pub-id-type="pmid">11932250</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows–Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>14</issue>
        <fpage>1754</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>14</issue>
        <fpage>2103</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id>
        <pub-id pub-id-type="pmid">27153593</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Brown</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Morgenstern</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Efficient local alignment discovery amongst noisy long reads</article-title>
        <source>Algorithms in Bioinformatics</source>
        <year>2014</year>
        <publisher-loc>Berlin, Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Turakhia</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Bejerano</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Dally</surname>
            <given-names>WJ</given-names>
          </name>
        </person-group>
        <article-title>Darwin: A genomics co-processor provides up to 15,000x acceleration on long read assembly</article-title>
        <source>SIGPLAN Not</source>
        <year>2018</year>
        <volume>53</volume>
        <issue>2</issue>
        <fpage>199</fpage>
        <lpage>213</lpage>
        <pub-id pub-id-type="doi">10.1145/3296957.3173193</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>The sequence alignment/map format and samtools</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>2078</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">Picard toolkit. Broad Institute, GitHub repository. 2019. <ext-link ext-link-type="uri" xlink:href="http://broadinstitute.github.io/picard/">http://broadinstitute.github.io/picard/</ext-link>. Accessed 11 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tarasov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Vilella</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Cuppen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Nijman</surname>
            <given-names>IJ</given-names>
          </name>
          <name>
            <surname>Prins</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Sambamba: fast processing of ngs alignment formats</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>12</issue>
        <fpage>2032</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv098</pub-id>
        <pub-id pub-id-type="pmid">25697820</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Faust</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>IM</given-names>
          </name>
        </person-group>
        <article-title>Samblaster: fast duplicate marking and structural variant read extraction</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>17</issue>
        <fpage>2503</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu314</pub-id>
        <pub-id pub-id-type="pmid">24812344</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koboldt</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Shen</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>McLellan</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Mardis</surname>
            <given-names>ER</given-names>
          </name>
          <name>
            <surname>Ding</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>RK</given-names>
          </name>
        </person-group>
        <article-title>VarScan 2: Somatic mutation and copy number alteration discovery in cancer by exome sequencing</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>3</issue>
        <fpage>568</fpage>
        <lpage>76</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.129684.111</pub-id>
        <pub-id pub-id-type="pmid">22300766</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lai</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Markovets</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ahdesmaki</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hofmann</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>McEwen</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dougherty</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Barrett</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Dry</surname>
            <given-names>JR</given-names>
          </name>
        </person-group>
        <article-title>VarDict: a novel and versatile variant caller for next-generation sequencing in cancer research</article-title>
        <source>Nucleic Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>11</issue>
        <fpage>108</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw227</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cibulskis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lawrence</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Carter</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Sivachenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jaffe</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Sougnez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Gabriel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Meyerson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lander</surname>
            <given-names>ES</given-names>
          </name>
          <name>
            <surname>Getz</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Sensitive detection of somatic point mutations in impure and heterogeneous cancer samples</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <fpage>213</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2514</pub-id>
        <pub-id pub-id-type="pmid">23396013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <mixed-citation publication-type="other">Garrison E, Marth G. Haplotype-based variant detection from short-read sequencing. 2012. http://arxiv.org/abs/arXiv:1207.3907. Accessed 11 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wei</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Lyon</surname>
            <given-names>GJ</given-names>
          </name>
          <name>
            <surname>Hakonarson</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>SNVer: a statistical tool for variant calling in analysis of pooled or individual next-generation sequencing data</article-title>
        <source>Nucleic Acids Res</source>
        <year>2011</year>
        <volume>39</volume>
        <issue>19</issue>
        <fpage>132</fpage>
        <lpage>132</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkr599</pub-id>
        <pub-id pub-id-type="pmid">20813759</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilm</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Aw</surname>
            <given-names>PPK</given-names>
          </name>
          <name>
            <surname>Bertrand</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Yeo</surname>
            <given-names>GHT</given-names>
          </name>
          <name>
            <surname>Ong</surname>
            <given-names>SH</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>CH</given-names>
          </name>
          <name>
            <surname>Khor</surname>
            <given-names>CC</given-names>
          </name>
          <name>
            <surname>Petric</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Hibberd</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>LoFreq: a sequence-quality aware, ultra-sensitive variant caller for uncovering cell-population heterogeneity from high-throughput sequencing datasets</article-title>
        <source>Nucleic Acids Res</source>
        <year>2012</year>
        <volume>40</volume>
        <issue>22</issue>
        <fpage>11189</fpage>
        <lpage>201</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gks918</pub-id>
        <pub-id pub-id-type="pmid">23066108</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dunn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Berry</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Emig-Agius</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Lei</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Iyer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Udar</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chuang</surname>
            <given-names>H-Y</given-names>
          </name>
          <name>
            <surname>Hegarty</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dickover</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Klotzle</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Robbins</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bibikova</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Peeters</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Strömberg</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Pisces: an accurate and versatile variant caller for somatic and germline next-generation sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>35</volume>
        <issue>9</issue>
        <fpage>1579</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty849</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kim</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Scheffler</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Halpern</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Bekritsky</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Noh</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Källberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Beyter</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Krusche</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Saunders</surname>
            <given-names>CT</given-names>
          </name>
        </person-group>
        <article-title>Strelka2: fast and accurate calling of germline and somatic variants</article-title>
        <source>Nat Methods</source>
        <year>2018</year>
        <volume>15</volume>
        <issue>8</issue>
        <fpage>591</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-018-0051-x</pub-id>
        <pub-id pub-id-type="pmid">30013048</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Poplin</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>P-C</given-names>
          </name>
          <name>
            <surname>Alexander</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Colthurst</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Ku</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Newburger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Dijamco</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nguyen</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Afshar</surname>
            <given-names>PT</given-names>
          </name>
          <name>
            <surname>Gross</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Dorfman</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>McLean</surname>
            <given-names>CY</given-names>
          </name>
          <name>
            <surname>DePristo</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>A universal snp and small-indel variant caller using deep neural networks</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <fpage>983</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4235</pub-id>
        <pub-id pub-id-type="pmid">30247488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <mixed-citation publication-type="other">Diao Y, Roy A, Bloom T. Building Highly-Optimized, Low-Latency Pipelines for Genomic Data Analysis. In: CIDR: 2015.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wong</surname>
            <given-names>H-P</given-names>
          </name>
          <name>
            <surname>Raoux</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Liang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Reifenberg</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Rajendran</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Asheghi</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Goodson</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Phase change memory</article-title>
        <source>Proc IEEE</source>
        <year>2010</year>
        <volume>98</volume>
        <issue>12</issue>
        <fpage>2201</fpage>
        <lpage>27</lpage>
        <pub-id pub-id-type="doi">10.1109/JPROC.2010.2070050</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <mixed-citation publication-type="other">Burr G, J. Breitwisch M, Franceschini M, Garetto D, Gopalakrishnan K, Jackson B, Kurdi B, Lam C, A. Lastras L, Padilla A, Rajendran B, Raoux S, S. Shenoy R. Phase change memory technology. J Vac Sci Technol B Microelectron Nanometer Struct Process Meas Phenom Off J Am Vac Soc. 2010; 28. <pub-id pub-id-type="doi">10.1116/1.3301579</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Condit</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nightingale</surname>
            <given-names>EB</given-names>
          </name>
          <name>
            <surname>Frost</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Ipek</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Burger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Coetzee</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Better i/o through byte-addressable, persistent memory</article-title>
        <source>Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles. SOSP ’09</source>
        <year>2009</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <mixed-citation publication-type="other">Broad Institute. Genome Analysis Toolkit. 2010. <ext-link ext-link-type="uri" xlink:href="https://software.broadinstitute.org/gatk/">https://software.broadinstitute.org/gatk/</ext-link>. Accessed 11 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <mixed-citation publication-type="other">The SAM/BAM Format Specification Working Group. Sequence Alignment/Map Format Specification. 2010. <ext-link ext-link-type="uri" xlink:href="https://samtools.github.io/hts-specs/SAMv1.pdf">https://samtools.github.io/hts-specs/SAMv1.pdf</ext-link>. Accessed 11 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dean</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ghemawat</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Mapreduce: Simplified data processing on large clusters</article-title>
        <source>Commun ACM</source>
        <year>2008</year>
        <volume>51</volume>
        <issue>1</issue>
        <fpage>107</fpage>
        <lpage>13</lpage>
        <pub-id pub-id-type="doi">10.1145/1327452.1327492</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <mixed-citation publication-type="other">McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA. The genome analysis toolkit: a mapreduce framework for analyzing next-generation dna sequencing data. Genome Res. 2010. <pub-id pub-id-type="doi">10.1101/gr.107524.110</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <mixed-citation publication-type="other">Broad Institute. GATK Best Practices Workflows. 2010. <ext-link ext-link-type="uri" xlink:href="https://github.com/gatk-workflows">https://github.com/gatk-workflows</ext-link>. Accessed 11 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34</label>
      <mixed-citation publication-type="other">Institute B. GATK Variant Calling Pipelines. <ext-link ext-link-type="uri" xlink:href="https://software.broadinstitute.org/gatk/best-practices/">https://software.broadinstitute.org/gatk/best-practices/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Consortium</surname>
            <given-names>IHGS</given-names>
          </name>
        </person-group>
        <article-title>Finishing the euchromatic sequence of the human genome</article-title>
        <source>Nature</source>
        <year>2004</year>
        <volume>431</volume>
        <issue>7011</issue>
        <fpage>931</fpage>
        <lpage>45</lpage>
        <pub-id pub-id-type="doi">10.1038/nature03001</pub-id>
        <pub-id pub-id-type="pmid">15496913</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gurdasani</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Sandhu</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Porter</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Pollard</surname>
            <given-names>MO</given-names>
          </name>
          <name>
            <surname>Mentzer</surname>
            <given-names>AJ</given-names>
          </name>
        </person-group>
        <article-title>Long reads: their purpose and place</article-title>
        <source>Hum Mol Genet</source>
        <year>2018</year>
        <volume>27</volume>
        <issue>R2</issue>
        <fpage>234</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1093/hmg/ddy177</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37</label>
      <mixed-citation publication-type="other">Apache. Apache Arrow: A Cross-language Development Platform for In-memory Data. 2019. <ext-link ext-link-type="uri" xlink:href="https://arrow.apache.org/">https://arrow.apache.org/</ext-link>. Accessed 29 Dec 2019.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Peltenburg</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>van Straten</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brobbel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hofstee</surname>
            <given-names>HP</given-names>
          </name>
          <name>
            <surname>Al-Ars</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Hochberger</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Koch</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Woods</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Diniz</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Supporting columnar in-memory formats on fpga: The hardware design of fletcher for apache arrow</article-title>
        <source>Applied Reconfigurable Computing</source>
        <year>2019</year>
        <publisher-loc>Cham</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39</label>
      <mixed-citation publication-type="other">Apache. Plasma In-Memory Object Store. 2019. <ext-link ext-link-type="uri" xlink:href="https://arrow.apache.org/blog/2017/08/08/plasma-in-memory-object-store/">https://arrow.apache.org/blog/2017/08/08/plasma-in-memory-object-store/</ext-link>. Accessed 29 Dec 2019.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40</label>
      <mixed-citation publication-type="other">Ahmad T, Peltenburg J, Ahmed N, Al Ars Z. Arrowsam: In-memory genomics data processing through apache arrow framework. 2019. <pub-id pub-id-type="doi">10.1101/741843</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Herzeel</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Costanza</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Decap</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Fostier</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Verachtert</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>elPrep 4: A multithreaded framework for sequence analysis</article-title>
        <source>PLOS ONE</source>
        <year>2019</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>0209523</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0209523</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42</label>
      <mixed-citation publication-type="other">Illumina. Illumina Cambridge Ltd. 2012. <ext-link ext-link-type="uri" xlink:href="http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/">http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/</ext-link>. Accessed 24 May 2019.</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43</label>
      <mixed-citation publication-type="other">Apache. Apache Spark: Lightning-fast Unified Analytics Engine. 2019. <ext-link ext-link-type="uri" xlink:href="https://spark.apache.org/">https://spark.apache.org/</ext-link>. Accessed 2 Apr 2019.</mixed-citation>
    </ref>
    <ref id="CR44">
      <label>44</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Mushtaq</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Costa</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Hofstee</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Al-Ars</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>Sparkga: A spark framework for cost effective, fast and accurate dna analysis at scale</article-title>
        <source>Proceedings of the 8th ACM International Conference on Bioinformatics, Computational Biology,and Health Informatics. ACM-BCB ’17</source>
        <year>2017</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45</label>
      <mixed-citation publication-type="other">Massie M, Nothaft F, Hartl C, Kozanitis C, Schumacher A, Joseph AD, Patterson DA. ADAM: Genomics formats and processing patterns for cloud scale computing. Technical report, UCB/EECS-2013-207, EECS Department, University of California, Berkeley. 2013.</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46</label>
      <mixed-citation publication-type="other">Wang S, Yang W, Zhang X, Yu R. Performance evaluation of imp: A rapid secondary analysis pipeline for ngs data: 2018. p. 1170–6. <pub-id pub-id-type="doi">10.1109/BIBM.2018.8621573</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR47">
      <label>47</label>
      <mixed-citation publication-type="other">Freed DN, Aldana R, Weber JA, Edwards JS. The sentieon genomics tools - a fast and accurate solution to variant calling from next-generation sequence data. 2017. <pub-id pub-id-type="doi">10.1101/115717</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Herzeel</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Costanza</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Decap</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Fostier</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Reumers</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>elPrep: High-performance preparation of sequence alignment/map files for variant calling</article-title>
        <source>PLOS ONE</source>
        <year>2015</year>
        <volume>10</volume>
        <issue>7</issue>
        <fpage>0132868</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0132868</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49</label>
      <mixed-citation publication-type="other">Becker M, Chabbi M, Warnat-Herresthal S, Klee K, Schulte-Schrepping J, Biernat P, Guenther P, Bassler K, Craig R, Schultze H, Singhal S, Ulas T, Schultze JL. Memory-driven computing accelerates genomic data processing. 2019. <pub-id pub-id-type="doi">10.1101/519579</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR50">
      <label>50</label>
      <mixed-citation publication-type="other">ApacheFoundation. Python library for Apache Arrow. 2019. <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/pyarrow/">https://pypi.org/project/pyarrow/</ext-link>. Accessed 29 Dec 2019.</mixed-citation>
    </ref>
    <ref id="CR51">
      <label>51</label>
      <mixed-citation publication-type="other">Shanshan R, Koen B, Zaid Al-Ars. Efficient Acceleration of the Pair-HMMs Forward Algorithm for GATK HaplotypeCaller on Graphics Processing Units. Evol Bioinforma. 2018; 14. <pub-id pub-id-type="doi">10.1177/1176934318760543</pub-id>.</mixed-citation>
    </ref>
    <ref id="CR52">
      <label>52</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ernst</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Vlad-Mihai</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Koen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Zaid</surname>
            <given-names>Al-Ars</given-names>
          </name>
        </person-group>
        <article-title>Hardware acceleration of BWA-MEM genomic short read mapping for longer read lengths</article-title>
        <source>Computa Biol Chem</source>
        <year>2018</year>
        <volume>75</volume>
        <fpage>54</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1016/j.compbiolchem.2018.03.024</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
