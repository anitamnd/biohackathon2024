<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4504443</article-id>
    <article-id pub-id-type="pmid">26017195</article-id>
    <article-id pub-id-type="publisher-id">569</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-015-0569-1</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Ambivalent covariance models</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Janssen</surname>
          <given-names>Stefan</given-names>
        </name>
        <address>
          <email>sjanssen@techfak.uni-bielefeld.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Giegerich</surname>
          <given-names>Robert</given-names>
        </name>
        <address>
          <email>robert@techfak.uni-bielefeld.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0944 9128</institution-id><institution-id institution-id-type="GRID">grid.7491.b</institution-id><institution>Practical Computer Science, </institution><institution>Faculty of Technology, Bielefeld University, </institution></institution-wrap>Universitätsstraße 25, Bielefeld, 33615 Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>5</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>16</volume>
    <elocation-id>178</elocation-id>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>11</month>
        <year>2014</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>4</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Janssen and Giegerich; licensee BioMed Central. 2015</copyright-statement>
      <license license-type="open-access">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly credited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Evolutionary variations let us define a set of similar nucleic acid sequences as a family if these different molecules execute a common function. Capturing their sequence variation by using e. g. position specific scoring matrices significantly improves sensitivity of detection tools. Members of a functional (non‐coding) RNA family are affected by these variations not only on the sequence, but also on the structural level. For example, some transfer‐RNAs exhibit a fifth helix in addition to the typical cloverleaf structure. Current covariance models – the unrivaled homology search approach for structured RNA – do not benefit from structural variation within a family, but rather penalize it. This leads to artificial subdivision of families and loss of information in the <sc>Rfam</sc> database.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We propose an extension to the fundamental architecture of covariance models to allow for several, compatible consensus structures. The resulting models are called <italic>ambivalent</italic> covariance models. Evaluation on several <sc>Rfam</sc> families shows that coalescence of structural variation within a family by using ambivalent consensus models is superior to subdividing the family into multiple classical covariance models.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>A prototype and source code is available at <ext-link ext-link-type="uri" xlink:href="http://bibiserv.cebitec.uni-bielefeld.de/acms">http://bibiserv.cebitec.uni‐bielefeld.de/acms</ext-link>.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12859-015-0569-1) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>RNA homology search</kwd>
      <kwd>Covariance model</kwd>
      <kwd>Consensus structure</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <sec id="Sec2">
      <title>RNA family modeling in <sc>RFAM</sc></title>
      <p>The dominating source of information on non‐coding RNA families is the <sc>RFAM</sc> database [<xref ref-type="bibr" rid="CR1">1</xref>]. The grouping criterion of <sc>RFAM</sc> is a follows [<xref ref-type="bibr" rid="CR2">2</xref>]:
<disp-quote><p>The ideal basis for a new family is an RNA element that has some known functional classification, is evolutionary conserved, and has evidence for a secondary structure.</p></disp-quote>
</p>
      <p>For many RNA families, this secondary structure is conserved and varies only to a limited degree, such as insertion of unstructured sequence or loss of some base pairs present in the secondary structure. For these families, present‐day modeling techniques work well.</p>
      <p>But note that by the above definition, <sc>RFAM</sc> does not strictly insist on a single common structure, strongly conserved in the above sense. There are well known examples with larger structural variations within a family. The most prominent example is probably the tRNA family (RF00005, <sc>RFAM</sc> release 10.1). It is known that a minority of the tRNA molecules form a stabilizing “variable loop” in addition to the classical cloverleaf structure. The <sc>WIKIPEDIA</sc> article on tRNA, which <sc>RFAM</sc> uses to explain the family, does not fail to point to this fact. The tRNA family comprises 967 members in total, of which a minority of 147 members hold the variable loop. But this “loop” is not just inserted, unstructured sequence, which could be accommodated by present‐day techniques. In contrast to its name, nucleotides of the variable loop form base‐pairs, creating an extra helix which adds stability. A plausible consensus structure for the 147 variable loop members can be constructed by aligning those individual predictions, e. g. with <sc>RNAFORESTER</sc> [<xref ref-type="bibr" rid="CR3">3</xref>]. The extra helix is a <italic>bona fide</italic> feature of the tRNA family.</p>
    </sec>
    <sec id="Sec3">
      <title>Limitations of present family modeling</title>
      <p>In the presence of structural variation like the one described above, present‐day techniques reach a limit. Family models in <sc>RFAM</sc> are implemented as covariance models (CMs), constructed by the tool <sc>INFERNAL</sc> [<xref ref-type="bibr" rid="CR4">4</xref>]. <sc>RFAM</sc> constitutes the most important use‐case for covariance models, and in fact, curators of <sc>RFAM</sc> and developers of <sc>INFERNAL</sc> do closely cooperate. By construction, <sc>INFERNAL</sc>’s CMs require all family member sequences to fold into a single, shared secondary consensus structure (<italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>) with only small deviations such as indels.</p>
      <p>An optional structural feature such as the “variable loop” cannot be accommodated. Replacing in our tRNA example the original <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> with the variable loop enriched version will have no effect on the CM actually built, because the majority of 820 members has gaps at the variable loop positions and therefore <sc>INFERNAL</sc> will model those positions as insertions. In effect, the introduced variable loop sub‐structure is taken out off <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>, and informative covariance from base‐pairs of this extra helix (where present) cannot be captured.</p>
      <p>One might also consider enforcing a five‐helix <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> by increasing the allowed gap ratio. Base pairs in the minority structures could now contribute. But this idea would impose large deletion costs on the 820 majority members when aligning to the new model. In either case, an improvement can not be reached by providing an alternative alignment and a single <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>.</p>
    </sec>
    <sec id="Sec4">
      <title>Allowing for structural variation in RNA families</title>
      <p>The architecture of CMs has been remarkably stable for 20 years, serving its purpose very effectively. But for accommodating multiple structures, as shown above, one must extend the classical definition and construction of CMs. With the introduction of <italic>ambivalent</italic> Covariance Models (aCMs), we provide such a generalization.</p>
      <p>An aCM is a CM constructed from several consensus structures, allowing sequences to fold into a set of predefined alternatives without penalty, and exploiting sequence conservation and covariance at all points.</p>
      <p>The organization of this contribution is as follows: We briefly recapitulate the technical background of CMs and their <sc>INFERNAL</sc> implementation in Section ‘<xref rid="Sec6" ref-type="sec">Introduction:classical covariance models</xref>’. The classical architecture is hard‐wired in <sc>INFERNAL</sc>’s CMs. To be able to modify it, we first re‐create classical CMs in a rapid prototyping framework in Section ‘<xref rid="Sec10" ref-type="sec">Recreating the core of <sc>INFERNAL</sc></xref>’, where the model generation process can be described on the abstraction level of context‐free grammars. Extending these grammars by extra rules that branch between alternative consensus structures, we arrive at aCMs in Section ‘<xref rid="Sec16" ref-type="sec">Ambivalent covariance models</xref>’. Section ‘<xref rid="Sec24" ref-type="sec">Evaluation</xref>’ is devoted to their evaluation, comparing ambivalent models to classical models in the presence of structural variation.</p>
    </sec>
    <sec id="Sec5">
      <title>Recent alternative approaches to structural variability in RNA</title>
      <p>While our work is firmly based on the classical work on CMs, there are other interesting approaches, not based on CMs, which address structural variation in related RNA sequences. Both approaches are very recent and have appeared while this manuscript was in preparation.</p>
      <p>Saffarian <italic>et al.</italic> suggest a combinatorial approach to search for a predefined set of alternative structures, called <italic>multi‐structures</italic>, in RNA sequences [<xref ref-type="bibr" rid="CR5">5</xref>]. They describe this set as a formal grammar, on the granularity of a predefined set of stable helices. This can be used to describe RNA families with structural variation, but also interesting suboptimal structures from the search space of the same type of RNA. We will refer to an aspect of this work in Section ‘<xref rid="Sec16" ref-type="sec">Ambivalent covariance models</xref>’.</p>
      <p>Reinkensmeier and Giegerich elaborate the approach of <italic>thermodynamic machters</italic> to define the “cuckoo” RNA family [<xref ref-type="bibr" rid="CR6">6</xref>]. The characteristic cuckoo motif consists of 2 ‐ 4 hairpins with no sequence conservation in the helices, but exhibiting a conserved loop motif. Their approach is based on the theromodynamic energy model, but in principle, the energy rules can be replaced by stochastic scoring, taking the approach closer to (extended) CMs. Although also based on formal grammars, the approach is semi‐automatic, allowing the model designer careful tuning of the generated matchers, which can be considered a blessing as well as a burden.</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Introduction: classical covariance models</title>
    <p>A <italic>covariance model</italic> (CM) is a stochastic approach to quantify homology of an RNA sequence to a <italic>family</italic> of sequences. The family consists of an aligned set of RNA sequences (<italic>MSA</italic>), which are believed to share the same functionality, shape or other grouping properties, together with one (pseudoknot free) consensus secondary structure (<italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>). The machinery follows the Bayesian interpretation of probabilities, by updating family independent expert knowledge (priors) with those frequencies observed in the given family (posteriors). Amalgamation of priors and posteriors is called “training” and has to be done just once. Result of the training is a <italic>stochastic context free grammar</italic> (SCFG), whose production rules are augmented with transition and emission‐probabilities. The <italic>architecture</italic> of CMs can be described by an <italic>architecture grammar</italic>, which is a grammar that can parse any RNA secondary structure. The family model grammar is generated from the architecture grammar by specializing it to <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> (for a tutorial exposition of this view see [<xref ref-type="bibr" rid="CR7">7</xref>]), and its parameters are trained from the multiple alignment.</p>
    <p>Covariance models follow the principles of <italic>Hidden Markov Models</italic> (HMMs) [<xref ref-type="bibr" rid="CR8">8</xref>], but are more powerful in order to account for distant but coupled positions, which represent the base‐pairs of <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>. While an HMM runs through a linear sequence of states, the transition graph of the CM “automaton” has a tree‐like branching structure that mimics <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>. For historical reasons, the classical description of this technique [<xref ref-type="bibr" rid="CR4">4</xref>] uses a mixture of HMM (“state transition”) and grammar terminology (“bifurcation rule”); here we try to stick to the latter, providing translation of terminology where appropriate.</p>
    <p>The parses constructed by the family model grammar for any sequence are very similar. Abstracting away insertions and deletions, they all indicate the same structure, namely the given <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>. This unique abstract parse tree is called a “guide tree” in <sc>INFERNAL</sc> terminology. When we apply the CM to an RNA sequence, we can obtain the probability of the most likely parse of the given sequence. Since this probability tends to be very small, it is scaled to a background model. This is done in terms of a log odds ratio, which provides a bit‐score, which finally expresses homology between sequence and family. It is up to the user to decide if the bit‐score suffices to accept the input sequence as a new family member.</p>
    <sec id="Sec7">
      <title>The <sc>INFERNAL</sc> software suite</title>
      <sec id="Sec8">
        <title>Reference implementation</title>
        <p>The <sc>INFERNAL</sc> software package [<xref ref-type="bibr" rid="CR9">9</xref>], a product of 20 years of careful software engineering, is <italic>the</italic> reference implementation of CMs. It does not only provide programs for the above described tasks of training (<sc>CMBUILD</sc>) and searching (<sc>CMSEARCH</sc>), but e. g. also tools to “calibrate” the CM – basically to provide E‐ and P‐values for the bit‐scores – or to align the new member to the existing family.</p>
        <p>Scoring a sequence <italic>s</italic> of length <italic>n</italic> to a family model of length <italic>m</italic> takes <italic>O</italic>(<italic>n</italic>∗<italic>m</italic>
<sup>3</sup>) time and <italic>O</italic>(<italic>n</italic>∗<italic>m</italic>
<sup>2</sup>) space. Such high computational cost arises from parsing with a context free grammar which itself has a size proportional to the length of the input. Much of the efforts spent in the past twenty years aimed to lower these high computational demands. In 2002, Eddy introduced a memory‐efficient divide‐and‐conquer variant of the CYK (Cocke‐Younger‐Kasami) algorithm [<xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR10">10</xref>]. An HMM pre‐filtering strategy was pioneered by Weinberg and Ruzzo in 2006 [<xref ref-type="bibr" rid="CR11">11</xref>]. Since 2007, remaining candidate sequences of <italic>s</italic> are scored with a heuristics, called “query dependent banding” [<xref ref-type="bibr" rid="CR12">12</xref>], which tightly restricts the search space while hopefully retaining the most likely candidate. Wherever possible, <sc>INFERNAL</sc> uses parallelization to further speed up the run‐time. For all these improvements, the basic architecture of CMs remained untouched. Furthermore, statistics are enhanced for training by sequence weighting and expectation maximization. Sequence weighting is to adjust for potential sub‐grouping of the family members. Expectation maximization should compensate for over‐fitting, by finding a suitable trade‐off between priors and posteriors. <sc>CMSEARCH</sc> can be run in glocal (aka “small in large” or “free shift”) or local mode. The reported bit‐score might be either the probability of the most likely state‐path (the CYK algorithm, which is the analogue to the “Viterbi” algorithm in HMMs), or probability sum of all possible state paths (“inside” algorithm; HMM analogue is called “forward”) [<xref ref-type="bibr" rid="CR8">8</xref>].</p>
      </sec>
      <sec id="Sec9">
        <title>Model construction</title>
        <p>We review the model construction process in some detail, as we are going to re‐implement it from scratch before extending it.</p>
        <p>Before a query RNA sequence can be assessed for homology to a family of interest, a covariance model (CM) must first be built from the given family information, namely the multiple sequence alignment (<italic>MSA</italic> of <italic>k</italic> sequences) and the single consensus secondary structure (<italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>). This construction task is carried out by the program <sc>CMBUILD</sc> of the <sc>INFERNAL</sc> package (see the reddish box in Figure <xref rid="Fig1" ref-type="fig">1</xref>). <sc>CMBUILD</sc> takes <italic>MSA</italic> and <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> as its inputs and finally produces a CM encoded as a table in a flat‐file. This table encodes the parser for the family model grammar, while the underlying family model grammar is not constructed explicitly. (However, it can be extracted from the file by upward compilation [<xref ref-type="bibr" rid="CR13">13</xref>]).
<fig id="Fig1"><label>Figure 1</label><caption><p>Flowgrams of <sc>INFERNAL</sc> (red, discussed here), our <sc>ADP</sc> re‐implementation <sc>ALTERNAL</sc> (blue, explained in Section ‘<xref rid="Sec10" ref-type="sec">Recreating the core of <sc>INFERNAL</sc></xref>’) and the extension to ambivalent consensus structures aCM (green, introduced in Section ‘<xref rid="Sec16" ref-type="sec">Ambivalent covariance models</xref>’). Input is the multiple sequence alignment(s) <italic>MSA</italic> and consensus structure(s) <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> for the construction of a model and <italic>RNA</italic> for homology search. Blue colored items are <sc>ADP</sc> components like grammars or algebras. The white box in aCM shall indicate that those operations are performed for each sub‐family.</p></caption><graphic xlink:href="12859_2015_569_Fig1_HTML" id="MO1"/></fig>
</p>
        <p>The complete procedure can be divided into the following seven sub‐processes:
<list list-type="order"><list-item><p><bold>Break pseudoknots</bold>: CMs cannot cope with pseudoknots due to the restriction to context free grammars. However, some <sc>Rfam</sc> families (89 of 2,208 in release 11.0) contain annotations for crossing base‐pairs. One of the crossing pairs is annotated by standard brackets in <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>, the other with upper‐ and lower‐ case letters for the opening and closing partner, respectively. All bracket annotated pairs must either be nested or adjacent to all other bracket annotated pairs. To obtain a pseudoknot free structure, all letters are simply converted into unpaired bases.</p></list-item><list-item><p><bold>Gap column masking</bold>: Integrating a further sequence into a <italic>MSA</italic> with an insertion inevitably causes new columns which hold gaps for the majority of sequences. To counteract this effect, <sc>Infernal</sc> tells apart “matching”‐columns with a gap‐ratio below a certain threshold (50% by default) and “insertion”‐columns above this threshold. Only the first column‐type is reflected in the final architecture of the CM. The structure <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> is <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>, where “insertion”‐positions are removed. If both columns of a base‐pair fall into different column‐types, the pair must be broken and only the partner below the threshold appears in <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> as an unpaired base.</p></list-item><list-item><p><inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\boldsymbol{\mathcal {G}}_{1}$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mrow><mml:mi mathvariant="bold-script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq1.gif"/></alternatives></inline-formula><bold>‐parsing</bold>: To generate the family model SCFG, <italic>S</italic><italic>S</italic><sub><italic>match</italic></sub> is parsed with the architecture grammar <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq2.gif"/></alternatives></inline-formula> to gain a guide‐tree (<italic>gt</italic>) as an intermediate step. In grammar terminology, this guide tree is the only parse tree which the family model grammar can generate without using rules for insertion or deletion. The architecture grammar <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M6"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq3.gif"/></alternatives></inline-formula> is shown in Figure <xref rid="Fig2" ref-type="fig">2</xref>. (Since the architecture grammar <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M8"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq4.gif"/></alternatives></inline-formula> to parse the structure is syntactically ambiguous [<xref ref-type="bibr" rid="CR14">14</xref>], the result is not unique. One of the parses must be chosen as the guide tree according to a specific set of objectives. The online Additional file <xref rid="MOESM1" ref-type="media">1</xref> informs about these objectives in detail.)
<fig id="Fig2"><label>Figure 2</label><caption><p>Architecture grammar <inline-formula id="IEq6"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M10"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq6.gif"/></alternatives></inline-formula> to parse <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> to generate <sc>INFERNAL</sc> style CMs. The axiom is A. Terminal symbols are colored blue, algebra functions green and filters magenta. Terminal <italic>ε</italic> is the empty word; &lt; and &gt; denotes the opening and closing bases of a pair and * is the unpaired base. The magenta subscript ≥1 requires the affected non‐terminals to parse at least one character from the input, i. e. the branches of a bifurcation cannot be empty.</p></caption><graphic xlink:href="12859_2015_569_Fig2_HTML" id="MO2"/></fig>
</p></list-item><list-item><p><bold>Construction</bold>: The family model grammar is now extended with productions providing for insertions in the query sequence. These are always considered unpaired bases. And it is extended by productions providing for deletions from <italic>S</italic><italic>S</italic><sub><italic>cons</italic></sub>, where unpaired bases as well as paired bases can disappear.</p></list-item></list>
</p>
        <p>The result of at this point is a the family model grammar, which reflects the unknotted, “insertion”‐column masked consensus structure <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub>. To turn this grammar into a CM, all transitions and emissions must be associated with probabilities, which are inferred from the <italic>MSA</italic> via the following processes:
<list list-type="simple"><list-item><label>5.</label><p><bold>Sequence weighting</bold>: The <italic>MSA</italic> might be subdivided into several sub‐groups. Due to different biological interests, different levels of experimental difficulties or other reasons, the <italic>MSA</italic> might have many representatives for one sub‐group, but only a few for the other. Since the CM should be able to detect both sub‐groups with equal strength, <sc>Infernal</sc> uses different weights for training with the <italic>MSA</italic> sequences of both sub‐groups. Version 1.0.2 of <sc>Infernal</sc> uses the “Gerstein / Sonnhammer / Chothia tree weights” [<xref ref-type="bibr" rid="CR15">15</xref>] to turn a <italic>MSA</italic> into a weighted alignment (<italic>wMSA</italic>).</p></list-item><list-item><label>6.</label><p><bold>Expectation maximization</bold>: In order to avoid overfitting, <sc>Infernal</sc> uses a rudimentary expectation maximization process to balance the influence of priors and posteriors. The theoretical background is given in [<xref ref-type="bibr" rid="CR16">16</xref>] and its application in <sc>Infernal</sc> in [<xref ref-type="bibr" rid="CR17">17</xref>]. Taking only the “matching”‐columns of <italic>wMSA</italic> into account, given by <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub>, sequence weights are re‐<bold>n</bold>ormalized to a value <italic>k</italic>
<sub><italic>eff</italic></sub>≤<italic>k</italic> to form <italic>nwMSA</italic>. The value <italic>k</italic>
<sub><italic>eff</italic></sub> is the result of an optimization problem, where the alignment entropy shall approximate a pre‐defined “target” value.</p></list-item><list-item><label>7.</label><p><bold>Training</bold>: Finally, the <italic>MSA</italic> is used to count how often which production rules of the family model grammar are used in parsing the data and which nucleotide are produced by the terminal symbols in the grammar. The occurrences do not contribute equally, but are weighted according to <italic>nwMSA</italic>. Priors for emissions <italic>p</italic>
<sub><italic>emit</italic></sub> and transitions in a <inline-formula id="IEq7"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M12"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq7.gif"/></alternatives></inline-formula> model <inline-formula id="IEq8"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$p_{{trans}_{\mathcal {G}_{1}}}$\end{document}</tex-math><mml:math id="M14"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">trans</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq8.gif"/></alternatives></inline-formula> are added to the counts before probabilities are computed. Furthermore, emission probabilities are contrasted with a simple background model <italic>b</italic>
<italic>g</italic>
<sub>0</sub>, where unpaired and paired emissions are equally distributed. There is no background model for the transitions. The resulting <italic>SCFG</italic> is saved in a CM‐file, which encodes the parser for the stochastic family model grammar in a tabular form.</p></list-item></list>
</p>
        <p>The program <sc>CMSEARCH</sc> of <sc>INFERNAL</sc> reads the model from the CM‐file, takes a query RNA sequence as second input and computes the CYK bit‐score for matching the sequence against the model: Process <bold>matching CYK</bold> in Figure <xref rid="Fig1" ref-type="fig">1</xref>.</p>
        <p>Our generalization of CMs to aCMs touches the core aspects of this construction process. In particular, we will have to change model architecture and family model grammar. Presently, they are concepts which explain the approach, but are not constituents of the <sc>INFERNAL</sc> software or its output that we can get our hands on, take out and change. Hence, we re‐create <sc>INFERNAL</sc> in a more flexible framework, in order to venture on to our extension.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec10">
    <title>Recreating the core of <sc>INFERNAL</sc></title>
    <sec id="Sec11">
      <title>Overview</title>
      <p>As the first step to our extension towards aCMs, we will produce a software named <sc>ALTERNAL</sc>, which re‐implements the <sc>INFERNAL</sc> approach, but with a different architecture and an explicit construction of the family model grammars. As the construction of the family model grammar entails parsing <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> with the architecture grammar, and running the family model means dynamic programming, a programming system that combines both techniques on a high level of abstraction is highly useful for our effort.</p>
      <p>In this section, we first review the technique of algebraic dynamic programming, and use it to reconstruct <sc>INFERNAL</sc> in a way that we can extend towards aCMs in Section ‘<xref rid="Sec16" ref-type="sec">Ambivalent covariance models</xref>’. Asymptotic run‐times in <sc>ALTERNAL</sc> remain the same as reported for Infernal, e.g. scoring a sequence <italic>s</italic> of length <italic>n</italic> to a family model of length <italic>m</italic> takes <italic>O</italic>(<italic>n</italic>∗<italic>m</italic>
<sup>3</sup>) time and <italic>O</italic>(<italic>n</italic>∗<italic>m</italic>
<sup>2</sup>) space. The speed‐up techniques provided with <sc>INFERNAL</sc> are not re‐implemented. Please keep in mind that the software <sc>ALTERNAL</sc> serves as an intermediate step; it is not intended to go out and compete with <sc>INFERNAL</sc>.</p>
    </sec>
    <sec id="Sec12">
      <title><sc>ADP</sc> and the <sc>BELLMAN’S GAP</sc> system</title>
      <p>Algebraic Dynamic Programming (<sc>ADP</sc>) [<xref ref-type="bibr" rid="CR18">18</xref>] is a discipline to formulate algorithms for sequential problems. Its high level of abstraction allows for a clear separation of concerns. (i) A combinatorial search space is generated by a <italic>regular tree grammar</italic>
<inline-graphic xlink:href="12859_2015_569_Figa_HTML.gif" id="d30e1246"/>. (ii) Each candidate of the search space is evaluated by an <italic>evaluation algebra</italic>
<inline-graphic xlink:href="12859_2015_569_Figb_HTML.gif" id="d30e1253"/>. (iii) The “best” candidate is determined by an <italic>objective function</italic>.</p>
      <p>Evaluating a search space described by grammar <inline-graphic xlink:href="12859_2015_569_Figc_HTML.gif" id="d30e1261"/> and input sequence <italic>x</italic>, using evaluation algebra <inline-graphic xlink:href="12859_2015_569_Figd_HTML.gif" id="d30e1267"/>, is simply denoted by
<disp-formula id="Equa"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\mathcal{G}(\mathcal{A}, x). $$ \end{document}</tex-math><mml:math id="M16"><mml:mrow><mml:mi mathvariant="script">G</mml:mi><mml:mo>(</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12859_2015_569_Equa.gif" position="anchor"/></alternatives></disp-formula>
</p>
      <p>Normally, this will return the optimal candidate in the search space. When <inline-graphic xlink:href="12859_2015_569_Fige_HTML.gif" id="d30e1295"/> is the family model grammar, <inline-graphic xlink:href="12859_2015_569_Figf_HTML.gif" id="d30e1298"/> the stochastic scoring algebra, and <italic>x</italic> the query sequence, we obtain the best alignment of the query to the model. But the search space may be small and the “score” need not be a number: When <inline-graphic xlink:href="12859_2015_569_Figg_HTML.gif" id="d30e1304"/> is the <italic>architecture grammar</italic>, <italic>x</italic> is some <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub>, and the scoring functions in <inline-graphic xlink:href="12859_2015_569_Figh_HTML.gif" id="d30e1324"/> compute grammar rules, the resulting “score” will be the family model grammar. Wait and see.</p>
      <p>In <sc>ADP</sc>, components of a problem specification can be easily replaced or even combined in algebra products [<xref ref-type="bibr" rid="CR19">19</xref>] to tackle new challenges without low‐level reprogramming. For a detailed exposition of the formal concepts of <sc>ADP</sc> see [<xref ref-type="bibr" rid="CR18">18</xref>]. In our experience, when one has to modify a nontrivial dynamic programming algorithm, it is often easier to re‐implement it in <sc>ADP</sc> rather than to tinker with the existing source code.</p>
      <p>The <sc>BELLMAN’S GAP</sc> system is a recent implementation of <sc>ADP</sc>, which we rely on for the present project [<xref ref-type="bibr" rid="CR20">20</xref>]. Covariance model generation as well as application are formulated in the language GAP‐L, and translated into C++ code by the GAP‐C compiler.</p>
      <p>The software <sc>ALTERNAL</sc> (blue box in Figure <xref rid="Fig1" ref-type="fig">1</xref>) is our re‐implementation of <sc>INFERNAL</sc> with <sc>BELLMAN’S GAP</sc>, where many processes are replaced by <sc>ADP</sc> versions (blue font/borders). It mimics <sc>INFERNAL</sc> as described in Section ‘<xref rid="Sec9" ref-type="sec">Model construction</xref>’, but comes with two fundamental modifications: First, the replacement of the architecture grammar and second the way to obtain the counts for training. Notably, the search spaces of CMs, either created by <sc>INFERNAL</sc> or by <sc>ALTERNAL</sc>, are identical. Both implementations will consider the same possible alignments of a query sequence to the model. In principle, this should be true for the bit‐scores of the search process as well. The processes <italic>break pseudoknots</italic>, <italic>gap column masking</italic>, <italic>sequence weighting</italic> and <italic>expectation maximization</italic> remain untouched for the moment.</p>
    </sec>
    <sec id="Sec13">
      <title>Change 1: replacing the architecture grammar</title>
      <p>The architecture grammar of <sc>INFERNAL</sc> is <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M18"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq9.gif"/></alternatives></inline-formula>, depicted in Figure <xref rid="Fig2" ref-type="fig">2</xref>. For <sc>ALTERNAL</sc>, we replace the architecture grammar by <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M20"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq10.gif"/></alternatives></inline-formula>, see Figure <xref rid="Fig3" ref-type="fig">3</xref>. The advantage is three fold: First, it is guaranteed that the <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M22"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq11.gif"/></alternatives></inline-formula>‐parsing process of <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> will exactly yield one parse (guide tree in <sc>INFERNAL</sc> terminology). Selecting a specific one from several alternatives by <italic>ad‐hoc</italic> criteria is avoided. Second, the <italic>construction</italic>‐process in <sc>ALTERNAL</sc> can be described by evaluating <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> with the evaluation algebra <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CFG}}$\end{document}</tex-math><mml:math id="M24"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq12.gif"/></alternatives></inline-formula> (see Figure <xref rid="Fig4" ref-type="fig">4</xref>). The “scoring” functions of this algebra <inline-formula id="IEq13"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CFG}}$\end{document}</tex-math><mml:math id="M26"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq13.gif"/></alternatives></inline-formula> do not compute scores. Rather, they compute the productions that make up the family model grammar. And third, compared to a <inline-formula id="IEq14"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M28"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq14.gif"/></alternatives></inline-formula> architecture CM, the number of production rules is roughly reduced four‐fold in a <inline-formula id="IEq15"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq15.gif"/></alternatives></inline-formula> architecture (see Additional file <xref rid="MOESM1" ref-type="media">1</xref> for details), while exactly keeping the same search space. Thus, the training has to infer fewer parameters. The result of the <italic>A</italic>
<sub><italic>CFG</italic></sub>‐<italic>evaluation</italic> is another grammar — the family model grammar <inline-formula id="IEq16"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}$\end{document}</tex-math><mml:math id="M32"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq16.gif"/></alternatives></inline-formula> which captures the family specific architecture of the CFG:
<disp-formula id="Equb"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\mathcal{G}_{CM} = \mathcal{G}_{5}(\mathcal{A}_{CFG}, {SS}_{match}). $$ \end{document}</tex-math><mml:math id="M34"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CFG</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12859_2015_569_Equb.gif" position="anchor"/></alternatives></disp-formula>
<fig id="Fig3"><label>Figure 3</label><caption><p>Architecture grammar <inline-formula id="IEq18"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M36"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq18.gif"/></alternatives></inline-formula> to parse <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> to generate <sc>ALTERNAL</sc> style CMs. Here, the <italic>ϵ</italic> terminal parser in ADP returns the input position where the empty word was recognized, for eventual use in other evaluation functions.</p></caption><graphic xlink:href="12859_2015_569_Fig3_HTML" id="MO3"/></fig>
<fig id="Fig4"><label>Figure 4</label><caption><p>Evaluation algebras <inline-formula id="IEq21"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CFG}}$\end{document}</tex-math><mml:math id="M38"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq21.gif"/></alternatives></inline-formula> and <inline-formula id="IEq22"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {train}}$\end{document}</tex-math><mml:math id="M40"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq22.gif"/></alternatives></inline-formula> to generate family specific grammars for homology search and model training. Non‐terminals and algebra functions of the generated grammars must be indexed by their position in <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub>. The position is provided by the special terminal parser of nil and propagated to all other algebra functions via the first component of the return type. The second component holds a string representation of the generated grammar rules.</p></caption><graphic xlink:href="12859_2015_569_Fig4_HTML" id="MO4"/></fig>
</p>
      <p>An example is given in Figure <xref rid="Fig5" ref-type="fig">5</xref>. Panel A) shows the <italic>MSA</italic> with <italic>k</italic>=5 sequences. The consensus structure <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> is given as the top row. The third column is shaded, because it holds more gaps than bases and will be modeled as an insertion. Due to this gap, <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> is &lt;&lt;∗&gt;&lt;&gt;&gt;, which is different from the initial <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>. The single guide‐tree which results from parsing <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> with the architecture grammar <inline-formula id="IEq23"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M42"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq23.gif"/></alternatives></inline-formula> is given in Panel B) of Figure <xref rid="Fig5" ref-type="fig">5</xref>. Panel C) presents the final CM grammar, which is the result of evaluating the guide‐tree with <inline-formula id="IEq24"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CFG}}$\end{document}</tex-math><mml:math id="M44"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq24.gif"/></alternatives></inline-formula>. See the online Additional file <xref rid="MOESM1" ref-type="media">1</xref> for further details.
<fig id="Fig5"><label>Figure 5</label><caption><p>Example for <sc>ALTERNAL</sc> CMs: Input <italic>MSA</italic> and <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> is given in <bold>A</bold>. The guide‐tree for <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> is shown in <bold>B</bold>. The <inline-formula id="IEq25"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M46"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq25.gif"/></alternatives></inline-formula>‐style CFG of the model is shown in <bold>C</bold>. Terminal parser b reads one base from the input sequence, while r0 consumes a potentially empty region of consecutive bases. The first rule facilitates a glocal alignment.</p></caption><graphic xlink:href="12859_2015_569_Fig5_HTML" id="MO5"/></fig>
</p>
    </sec>
    <sec id="Sec14">
      <title>Change 2: gaining posteriors</title>
      <p>Once the architecture of a CM is fixed, posteriors from the <italic>MSA</italic> can be inferred. Aligning a query sequence to a model becomes an optimization problem over many different derivations, because we do not know the best situation relative to the consensus structure for each nucleotide in advance (This is the best scoring parse, called <italic>state path</italic> in HMM terminology). But we do know the single correct derivation for training, because the training sequences are already aligned. And thus, we have only one candidate in the search space if we force a (training) sequence into a concrete derivation. We can do so by providing this derivation as a second input, besides the nucleotide sequence itself. We need a third, family specific <sc>ADP</sc> grammar <inline-formula id="IEq26"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {train}}$\end{document}</tex-math><mml:math id="M48"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq26.gif"/></alternatives></inline-formula> to simultaneously parse one <italic>MSA</italic> row and a secondary structure. This grammar is created by evaluating <italic>gt</italic> again, but this time with the evaluation algebra <inline-formula id="IEq27"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {train}}$\end{document}</tex-math><mml:math id="M50"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq27.gif"/></alternatives></inline-formula> (see Figure <xref rid="Fig4" ref-type="fig">4</xref>):
<disp-formula id="Equc"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\mathcal{G}_{train} = \mathcal{G}_{5}(A_{train}, {SS}_{match}). $$ \end{document}</tex-math><mml:math id="M52"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12859_2015_569_Equc.gif" position="anchor"/></alternatives></disp-formula>
</p>
      <p>To gain the desired counts in the training process, every <italic>MSA</italic> row must be parsed together with <inline-formula id="IEq28"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{{train}_{k}}\phantom {\dot {i}\!}$\end{document}</tex-math><mml:math id="M54"><mml:msub><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq28.gif"/></alternatives></inline-formula> which is a slightly modified version of <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub>: If according columns are marked as “insertion‐columns”, unpaired positions become gaps, and partnering positions become unpaired bases. Mapping a single row of <italic>MSA</italic> to <inline-formula id="IEq29"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{{train}_{k}}\phantom {\dot {i}\!}$\end{document}</tex-math><mml:math id="M56"><mml:msub><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq29.gif"/></alternatives></inline-formula> might produce columns consisting of a gap in sequence <italic>and</italic> model: <inline-formula id="IEq30"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\langle {\dot {\text {{\tt {-}}}}}\rangle $\end{document}</tex-math><mml:math id="M58"><mml:mo>〈</mml:mo><mml:mover accent="true"><mml:mrow><mml:mtext>-</mml:mtext></mml:mrow><mml:mo>˙</mml:mo></mml:mover><mml:mo>〉</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq30.gif"/></alternatives></inline-formula>. These columns must be removed from both inputs. This mapping shall be indicated by the ⊕‐operator in Figure <xref rid="Fig1" ref-type="fig">1</xref>.</p>
      <p>An enumeration algebra <inline-formula id="IEq31"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {enum}}$\end{document}</tex-math><mml:math id="M60"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">enum</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq31.gif"/></alternatives></inline-formula> is a generic representation of candidates of the search space, which can automatically be produced by the <sc>BELLMAN’S GAP</sc> compiler. It records which algebra functions were called with which parts of the inputs, but gives no hint about the used non‐terminals, i. e. the grammar production rules. The trace of the algebra functions is exactly what we need for training, because they give rise to the derivation through the CM and the sub‐words of the nucleotide input, i. e. single bases inform us about the concrete emissions. By creating enum‐representations for all training pairs, consisting of the <italic>MSA</italic> rows and <inline-formula id="IEq32"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{{train}_{k}}\phantom {\dot {i}\!}$\end{document}</tex-math><mml:math id="M62"><mml:msub><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">train</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq32.gif"/></alternatives></inline-formula>, and accumulating the occurrence count of each algebra function, we simply get the desired counts. As in <sc>INFERNAL</sc>, counts do not equally contribute, but are weighted according to <italic>nwMSA</italic>. The resulting probabilities of this training process will be used to generate a family specific CYK algebra <inline-formula id="IEq33"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CYK}}$\end{document}</tex-math><mml:math id="M64"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq33.gif"/></alternatives></inline-formula>.</p>
      <p>Due to our shift to a <inline-formula id="IEq34"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M66"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq34.gif"/></alternatives></inline-formula> architecture in <sc>ALTERNAL</sc>, we cannot re‐use the priors of <sc>INFERNAL</sc> for the <inline-formula id="IEq35"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M68"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq35.gif"/></alternatives></inline-formula> transitions <inline-formula id="IEq36"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$p_{{trans}_{\mathcal {G}_{1}}}$\end{document}</tex-math><mml:math id="M70"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">trans</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq36.gif"/></alternatives></inline-formula>. Instead, we once need to derive a set of transition priors <inline-formula id="IEq37"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$p_{{trans}_{\mathcal {G}_{5}}}$\end{document}</tex-math><mml:math id="M72"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mtext mathvariant="italic">trans</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq37.gif"/></alternatives></inline-formula> from a trusted set of families. We do so with the same set as used for <sc>INFERNAL</sc>, which is described in [<xref ref-type="bibr" rid="CR12">12</xref>].</p>
      <p>Finally, for the search process, a query RNA sequence <italic>x</italic> can now be parsed by <inline-formula id="IEq38"><alternatives><tex-math id="M73">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}$\end{document}</tex-math><mml:math id="M74"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq38.gif"/></alternatives></inline-formula>. With <inline-formula id="IEq39"><alternatives><tex-math id="M75">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}$\end{document}</tex-math><mml:math id="M76"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq39.gif"/></alternatives></inline-formula> and <inline-formula id="IEq40"><alternatives><tex-math id="M77">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CYK}}$\end{document}</tex-math><mml:math id="M78"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq40.gif"/></alternatives></inline-formula> coded in GAP‐L, <sc>BELLMAN’S GAP</sc> will compile this into a program instance for the call of <inline-formula id="IEq41"><alternatives><tex-math id="M79">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}(\mathcal {A}_{\textit {CYK}}, x)$\end{document}</tex-math><mml:math id="M80"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq41.gif"/></alternatives></inline-formula> for any <italic>x</italic>. All candidates of the search space will be evaluated by <inline-formula id="IEq42"><alternatives><tex-math id="M81">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {CYK}}$\end{document}</tex-math><mml:math id="M82"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq42.gif"/></alternatives></inline-formula> and the maximal score will be reported.</p>
    </sec>
    <sec id="Sec15">
      <title>Approving faithful re‐implementation</title>
      <p>To approve that <sc>ALTERNAL</sc> is a faithful remake of <sc>INFERNAL</sc>, we must show that it considers the same search space and scores candidates in a similar way.</p>
      <p>To verify our statement that the search spaces of <sc>INFERNAL</sc> and <sc>ALTERNAL</sc> are identical, we performed the following experiment: The CM flat files, as the product of <sc>CMBUILD</sc> from the <sc>INFERNAL</sc> package, contain the models <inline-formula id="IEq43"><alternatives><tex-math id="M83">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M84"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq43.gif"/></alternatives></inline-formula>‐architecture as well as all transition and emission probabilities. The upward compiler described in [<xref ref-type="bibr" rid="CR13">13</xref>] can parse these files and construct an equivalent <sc>ADP</sc> grammar. We use the same idea to produce grammars <inline-formula id="IEq44"><alternatives><tex-math id="M85">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}^{\mathcal {G}_{1}}$\end{document}</tex-math><mml:math id="M86"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq44.gif"/></alternatives></inline-formula> coded in GAP‐L. Again, a counting algebra <inline-formula id="IEq45"><alternatives><tex-math id="M87">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {count}}$\end{document}</tex-math><mml:math id="M88"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">count</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq45.gif"/></alternatives></inline-formula> can automatically be generated by <sc>BELLMAN’S GAP</sc>. Thus, we can easily determine and compare the search spaces sizes of <inline-formula id="IEq46"><alternatives><tex-math id="M89">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}^{\mathcal {G}_{1}}(\mathcal {A}_{\textit {count}}, r)$\end{document}</tex-math><mml:math id="M90"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msubsup><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">count</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq46.gif"/></alternatives></inline-formula> and <inline-formula id="IEq47"><alternatives><tex-math id="M91">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}(\mathcal {A}_{\textit {count}}, r)$\end{document}</tex-math><mml:math id="M92"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">count</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq47.gif"/></alternatives></inline-formula>. In fact, they are in all test cases identical (data not shown). To proof that the upward compiled versions are identical to <sc>INFERNAL</sc>, we measured a shift of bitscores and found that the median shift is 0.000 for “original” and “shuffled” sequences.</p>
      <p>To access the capability of <sc>ALTERNAL</sc> to reproduce the scoring results of <sc>INFERNAL</sc>, we set‐up the following experiment for each of the 2,208 families in the <sc>RFAM</sc> 11.0 release: First, a traditional CM is generated from the <sc>RFAM</sc> seed alignment <italic>MSA</italic> which includes the consensus structure <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> with the <sc>CMBUILD</sc> software (version 1.0.2) using default parameters. Next, a single “original” row from <italic>MSA</italic> is randomly chosen, gaps are removed and the thus gap‐freed sequence is globally aligned to the previously built CM with the program <sc>CMALIGN</sc> (version 1.0.2) from the <sc>INFERNAL</sc> package with parameters set to –no-null3 -1 –cyk –nonbanded. The resulting bit‐score constitutes our base‐line. We prefer <sc>CMALIGN</sc> over <sc>CMSEARCH</sc> at this step, because only the first one is able to compute global alignments. Another base‐line score for negative test cases is computed by aligning a di‐nucleotide “shuffled” (by the program <sc>USHUFFLE</sc> [<xref ref-type="bibr" rid="CR21">21</xref>]) version of the previously used sequence to the same CM. Second, we compile a <inline-formula id="IEq48"><alternatives><tex-math id="M93">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}(\mathcal {A}_{\textit {CYK}}, r)$\end{document}</tex-math><mml:math id="M94"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq48.gif"/></alternatives></inline-formula> instance with <sc>ALTERNAL</sc> for the family and run this instance with the exact same two sequences <italic>r</italic> (original and shuffled) as used before. By subtracting the base‐line value from the bit‐score computed by <inline-formula id="IEq49"><alternatives><tex-math id="M95">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {CM}}(\mathcal {A}_{\textit {CYK}}, r)$\end{document}</tex-math><mml:math id="M96"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CM</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">CYK</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2015_569_IEq49.gif"/></alternatives></inline-formula> we obtain the bit‐shift between <sc>INFERNAL</sc> and <sc>ALTERNAL</sc>. The bit‐shifts for all 2,208 families are depicted as boxplots in Figure <xref rid="Fig6" ref-type="fig">6</xref>. Except for those seven families where <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> exceeds 750 bases which causes memory overflows.
<fig id="Fig6"><label>Figure 6</label><caption><p>Bit‐shift of global CYK scores between <sc>INFERNAL</sc> and <sc>ALTERNAL</sc> for positive (original) and negative (shuffled) test cases in terms of absolute difference of CYK bit‐scores. For example, a sequence scoring 40 bits with <sc>INFERNAL</sc> and 44 bits with <sc>ALTERNAL</sc> would have a bit‐shift of +4.</p></caption><graphic xlink:href="12859_2015_569_Fig6_HTML" id="MO6"/></fig>
</p>
      <p>We observe small but significant shifts of bit‐scores between the two programs, which cannot be explained by rounding errors. Positive test cases show a median shift of −2.2 bits, negative ones a shift of −9.4 bits. If we force both programs to separately report bit‐scores originating from emissions and transitions, we see that these differences only stem from shifts in the transitions and not from emissions (data not shown). The reason is the change of the underlying architecture from <inline-formula id="IEq50"><alternatives><tex-math id="M97">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M98"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq50.gif"/></alternatives></inline-formula> to <inline-formula id="IEq51"><alternatives><tex-math id="M99">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M100"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq51.gif"/></alternatives></inline-formula>. In consequence, building two CMs from the same family leads to two fundamentally different grammars, which still have the same semantic meaning. Emissions are not affected by this change, they are only associated at different non‐terminals. But there is no possible mapping for the transitions between those two models, which causes divergent posteriors at training and different numbers and values of single transitions for parses of those models at the alignment step.</p>
      <p>Figure <xref rid="Fig7" ref-type="fig">7</xref> shows an illustrative example. The same tiny family with three sequences in a four‐column alignment and a simple hairpin as consensus structure is translated into a <inline-formula id="IEq52"><alternatives><tex-math id="M101">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M102"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq52.gif"/></alternatives></inline-formula> model (on the left) and a <inline-formula id="IEq53"><alternatives><tex-math id="M103">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M104"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq53.gif"/></alternatives></inline-formula> model (on the right). Let us assume that the highest scoring alignment for both models would be <inline-formula id="IEq54"><alternatives><tex-math id="M105">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{ll}{\text {\tt {UaAA}}}\\\text {\tt {{&lt;}{-}}}\!*\!\text {\tt {&gt;}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M106"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>UaAA</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>&lt;-</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq54.gif"/></alternatives></inline-formula>. The corresponding parses are coloured blue in both models. While <inline-formula id="IEq55"><alternatives><tex-math id="M107">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M108"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq55.gif"/></alternatives></inline-formula> requires only four transitions, the parse of <inline-formula id="IEq56"><alternatives><tex-math id="M109">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M110"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq56.gif"/></alternatives></inline-formula> needs twice as many, also with different values. Thus, the alignment with the exact same meaning gains −1.585 bits from <inline-formula id="IEq57"><alternatives><tex-math id="M111">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M112"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq57.gif"/></alternatives></inline-formula> and only −2.415 bits from <inline-formula id="IEq58"><alternatives><tex-math id="M113">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M114"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq58.gif"/></alternatives></inline-formula>.
<fig id="Fig7"><label>Figure 7</label><caption><p>Impact of different model architectures on transition caused bit‐scores. The family is translated into CMs of the <inline-formula id="IEq59"><alternatives><tex-math id="M115">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{1}$\end{document}</tex-math><mml:math id="M116"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq59.gif"/></alternatives></inline-formula> type (left) and <inline-formula id="IEq60"><alternatives><tex-math id="M117">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M118"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq60.gif"/></alternatives></inline-formula> (right). Aligning the same sequence results in different scores even if the alignment have the same semantic meaning, e. g. the outer bases U and A match the pair, a is an insertion relative to the model and the second to last A matches the unpaired position.</p></caption><graphic xlink:href="12859_2015_569_Fig7_HTML" id="MO7"/></fig>
</p>
      <p>The tendency of <inline-formula id="IEq61"><alternatives><tex-math id="M119">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M120"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq61.gif"/></alternatives></inline-formula> for more single transitions results in lower bit‐scores as shown in Figure <xref rid="Fig6" ref-type="fig">6</xref>. Fortunately, this trend hits negative cases harder than positive ones, which means that <inline-formula id="IEq62"><alternatives><tex-math id="M121">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M122"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq62.gif"/></alternatives></inline-formula> models have a stronger discriminative power.</p>
      <p>Thus, we conclude that <sc>ALTERNAL</sc> is a faithful re‐implementation of <sc>INFERNAL</sc>, close enough such that the improvements achieved by our pending generalization can also be expected from analog extensions to <sc>INFERNAL</sc>.</p>
    </sec>
  </sec>
  <sec id="Sec16">
    <title>Ambivalent covariance models</title>
    <p>We must define aCMs, specify the input for aCM construction, and describe the generation process. The evaluation of the new approach will be given in Section ‘<xref rid="Sec24" ref-type="sec">Evaluation</xref>’.</p>
    <sec id="Sec17">
      <title>Problem definition and input format</title>
      <p>aCMs extend classical CMs by modeling for RNA sequence families that fold into a predefined set of consensus structures. Mathematically, aCMs are stochastic context free grammars, generated from a <inline-formula id="IEq63"><alternatives><tex-math id="M123">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M124"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq63.gif"/></alternatives></inline-formula> architecture grammar, and with parameters trained as with classical CMs.</p>
      <p>The input to aCM construction is a multiple RNA sequence alignment in Stockholm format, which indicates several consensus structures. The creator arranges the alignment rows according to different structural features and supplies one consensus structure for each sub‐family. To distinguish the <italic>n</italic> different sub‐families in the input file, one must prefix the sequence names and the multiple SS_cons lines for the consensus structures with an arbitrary sub‐family name, followed by an “@” delimiter character. Here, for the purpose of exposition, we use colours instead.</p>
      <p>Let us re‐use the previous example alignment of Figure <xref rid="Fig5" ref-type="fig">5</xref>, which is here sub‐divided into the red sub‐family of the first two sequences and a purple sub‐family holding the remaining three sequences (<italic>n</italic>=2), see Panel A) in Figure <xref rid="Fig8" ref-type="fig">8</xref>. The consensus structure for the red sub‐family <inline-formula id="IEq64"><alternatives><tex-math id="M125">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {cons}}^{red}$\end{document}</tex-math><mml:math id="M126"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">cons</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">red</mml:mtext></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq64.gif"/></alternatives></inline-formula> remains unchanged. To honor the mutations in column 7 for the purple sub‐family, the consensus structure <inline-formula id="IEq65"><alternatives><tex-math id="M127">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {cons}}^{purple}$\end{document}</tex-math><mml:math id="M128"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">cons</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">purple</mml:mtext></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq65.gif"/></alternatives></inline-formula> is slightly different, i. e. the base‐pair is converted into two unpaired bases.
<fig id="Fig8"><label>Figure 8</label><caption><p>Example for aCMs: Input <italic>MSA</italic> is split into red and purple sub‐families. Their consensus structures are given as first and last row in <bold>A</bold>. The individual guide trees for red and purple and their ambivalent guide forest are shown in <bold>B</bold>. For simplicity, we omit terminal symbols for bases and skip‐nodes – described below – in the trees. That is why subscript 3, pointing to the “insertion”‐column, does not appear in the guide trees. The <inline-formula id="IEq66"><alternatives><tex-math id="M129">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M130"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq66.gif"/></alternatives></inline-formula>‐style CFG of the ambivalent model is shown in <bold>C</bold>.</p></caption><graphic xlink:href="12859_2015_569_Fig8_HTML" id="MO8"/></fig>
</p>
      <p>The <italic>S</italic>
<italic>S</italic>
<sub><italic>cons</italic></sub> rows in the alignment must represent a correct multiple <italic>structure</italic> alignment. This condition is not easily checked by a human curator, and our approach applies such a check to the input.</p>
    </sec>
    <sec id="Sec18">
      <title>Overview of the aCM generation process</title>
      <p>The construction of an aCM (greenish box in Figure <xref rid="Fig1" ref-type="fig">1</xref>) follows the ideas of constructing a classical CM with <sc>ALTERNAL</sc>. The task becomes more difficult, because we not only have to deal with several consensus structures <inline-formula id="IEq67"><alternatives><tex-math id="M131">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {cons}}^{i}$\end{document}</tex-math><mml:math id="M132"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">cons</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq67.gif"/></alternatives></inline-formula> yielding different guide trees <italic>g</italic>
<italic>t</italic>
<sub><italic>i</italic></sub> (indicated by the white box in Figure <xref rid="Fig1" ref-type="fig">1</xref>), but we also have to combine all <italic>n</italic> of them into one ambivalent guide forest <italic>F</italic>. Once <italic>F</italic> is found, generation of the topology defining grammar is done by evaluating <italic>F</italic> with a corresponding generating algebra <inline-formula id="IEq68"><alternatives><tex-math id="M133">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {A}_{\textit {aCFG}}$\end{document}</tex-math><mml:math id="M134"><mml:msub><mml:mrow><mml:mi mathvariant="script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">aCFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq68.gif"/></alternatives></inline-formula>. In the following sections, we give explanations about processes in aCM that have to be modified compared to <sc>ALTERNAL</sc>:
<list list-type="order"><list-item><p><bold>Compatibility check</bold>: Check for compatibility (defined below) of the consensus structures.</p></list-item><list-item><p><inline-formula id="IEq69"><alternatives><tex-math id="M135">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\boldsymbol{\mathcal {G}}_{5s}$\end{document}</tex-math><mml:math id="M136"><mml:msub><mml:mrow><mml:mi mathvariant="bold-script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq69.gif"/></alternatives></inline-formula><bold>‐parsing</bold>: Parsing each consensus structure with <inline-formula id="IEq70"><alternatives><tex-math id="M137">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5s}$\end{document}</tex-math><mml:math id="M138"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq70.gif"/></alternatives></inline-formula> to gain individual guide trees.</p></list-item><list-item><p><bold>Merge</bold>: Combine all guide trees into one ambivalent guide forest.</p></list-item><list-item><p><bold>Index</bold>: Distribute non‐terminal indices in a depth‐first manner in the ambivalent guide forest.</p></list-item><list-item><p><inline-formula id="IEq71"><alternatives><tex-math id="M139">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\boldsymbol{\mathcal {A}}_{\textit {aCFG}}$\end{document}</tex-math><mml:math id="M140"><mml:msub><mml:mrow><mml:mi mathvariant="bold-script">A</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">aCFG</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq71.gif"/></alternatives></inline-formula><bold>‐evaluation</bold>: Generate grammar rules for the aCM by parsing the indexed ambivalent guide forest in a top‐down fashion.</p></list-item></list>
</p>
    </sec>
    <sec id="Sec19">
      <title>Check for compatibility of consensus structures</title>
      <p>Two requirements are imposed on the structures in the input alignment: a) base‐pair persistence and b) global nesting. Taking the two requirements together, we call this compatibility of consensus structures.</p>
      <p>The <italic>base‐pair persistence</italic> property demands that if <italic>MSA</italic> columns <italic>k</italic> and <italic>l</italic> are paired in consensus structure <italic>i</italic> those two positions must either be paired with each other in all other consensus structures, or may be unpaired, or maybe deleted. But neither <italic>k</italic> nor <italic>l</italic> are allowed to form pairs with other alignment columns than each other. For example, we think that the two consensus structures <inline-formula id="IEq72"><alternatives><tex-math id="M141">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}\text {\tt {{&lt;}\!{&lt;}{-}}}*\text {\tt {&gt;}}*\!*\text {\tt {&gt;}}\\\text {\tt {{&lt;}\!{&lt;}{-}}}*\text {\tt {{&gt;}{-}{-}{&gt;}}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M142"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>&lt;&lt;-</mml:mtext><mml:mo>∗</mml:mo><mml:mtext>&gt;</mml:mtext><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mtext>&gt;</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>&lt;&lt;-</mml:mtext><mml:mo>∗</mml:mo><mml:mtext>&gt;--&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq72.gif"/></alternatives></inline-formula>can explain a common evolution up to the point where two additional unpaired bases are inserted into the upper consensus. The double gapped column <inline-formula id="IEq73"><alternatives><tex-math id="M143">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\!\begin {array}{cc}\text {\tt {-}}\\\text {\tt {-}}\end {array}\!}\right \rangle $\end{document}</tex-math><mml:math id="M144"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mspace width="0.3em"/><mml:mtable><mml:mtr><mml:mtd><mml:mtext>-</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>-</mml:mtext></mml:mtd></mml:mtr></mml:mtable><mml:mspace width="0.3em"/></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq73.gif"/></alternatives></inline-formula> isallowed to enable inclusion of rare sequences into <italic>MSA</italic>, which holds insertions relative to both consensus structures. But we disallow alternative base‐pair partners, like <inline-formula id="IEq74"><alternatives><tex-math id="M145">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}\text {\tt {{&lt;}\!{&lt;}}}\!*\!*\text {\tt {{&gt;}\!{&gt;}}}\\\text {\tt {&lt;}}\!*\!\text {\tt {&lt;}}\!*\!\text {\tt {&gt;}\!{&gt;}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M146"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>&lt;&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mtext>&gt;&gt;</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&gt;&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq74.gif"/></alternatives></inline-formula>. Base‐pair slippage in this example must be modeled via insertions.</p>
      <p>The <italic>global nesting</italic> property ensures that the multiple consensus structures do not exhibit crossing base pairs. To exclude pseudoknots in a singe secondary structure, every two base‐pairs of the structure must either be adjacent to each other or be nested within each other. With several structures, it is not sufficient that each structure satisfies this criterion. We transfer this property as <italic>global nesting</italic> to the alignment of <italic>n</italic> consensus structures by demanding that the union of all base‐pairs from all <italic>n</italic> consensus structures must be either adjacent or nested.</p>
      <p>To check if all <italic>n</italic> consensus structures satisfy base‐pair persistence and global nesting, we parse every <inline-formula id="IEq75"><alternatives><tex-math id="M147">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\binom {n}{2}$\end{document}</tex-math><mml:math id="M148"><mml:mfenced close=")" open="(" separators=""><mml:mfrac linethickness="0.0pt"><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq75.gif"/></alternatives></inline-formula> pairs of two consensus structures with the two‐track <sc>ADP</sc> grammar <inline-formula id="IEq76"><alternatives><tex-math id="M149">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {ali\_SS}}$\end{document}</tex-math><mml:math id="M150"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ali_SS</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq76.gif"/></alternatives></inline-formula>, see Figure <xref rid="Fig9" ref-type="fig">9</xref>. Parsing one pair of consensus structures of length <italic>m</italic> with <inline-formula id="IEq77"><alternatives><tex-math id="M151">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {ali\_SS}}$\end{document}</tex-math><mml:math id="M152"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ali_SS</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq77.gif"/></alternatives></inline-formula> requires a run‐time of <italic>O</italic>(<italic>m</italic>
<sup>3</sup>). Thus, checking all <inline-formula id="IEq78"><alternatives><tex-math id="M153">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\binom {n}{2}$\end{document}</tex-math><mml:math id="M154"><mml:mfenced close=")" open="(" separators=""><mml:mfrac linethickness="0.0pt"><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq78.gif"/></alternatives></inline-formula> pairs needs <italic>O</italic>(<italic>m</italic>
<sup>3</sup>·<italic>n</italic>
<sup>2</sup>) time. Should one consensus structure pair be un‐parsable by <inline-formula id="IEq79"><alternatives><tex-math id="M155">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {ali\_SS}}$\end{document}</tex-math><mml:math id="M156"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ali_SS</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq79.gif"/></alternatives></inline-formula>, an error message is issued and the construction task is aborted.
<fig id="Fig9"><label>Figure 9</label><caption><p>Two‐track <sc>ADP</sc> grammar <inline-formula id="IEq81"><alternatives><tex-math id="M157">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{\textit {ali\_SS}}$\end{document}</tex-math><mml:math id="M158"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ali_SS</mml:mtext></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq81.gif"/></alternatives></inline-formula> to align two consensus structures. Please note that non‐terminal <italic>x</italic> is composed of two tracks, <italic>x</italic>
<sup>1</sup> and <italic>x</italic>
<sup>2</sup>.</p></caption><graphic xlink:href="12859_2015_569_Fig9_HTML" id="MO9"/></fig>
</p>
    </sec>
    <sec id="Sec20">
      <title>Parsing individual guide trees</title>
      <p>As in classical CMs, a guide tree rules the topology of the aCM to be built. For aCMs, we individually infer one guide tree for each consensus structures. First, columns containing a majority of gaps are removed. This insertion masking process operates individually on each subfamily, the resulting <inline-formula id="IEq82"><alternatives><tex-math id="M159">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {match}}^{i}$\end{document}</tex-math><mml:math id="M160"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq82.gif"/></alternatives></inline-formula> can have different lengths. For example, <inline-formula id="IEq83"><alternatives><tex-math id="M161">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {match}}^{purple}$\end{document}</tex-math><mml:math id="M162"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">purple</mml:mtext></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq83.gif"/></alternatives></inline-formula> is one position shorter than <inline-formula id="IEq84"><alternatives><tex-math id="M163">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {match}}^{red}$\end{document}</tex-math><mml:math id="M164"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">red</mml:mtext></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq84.gif"/></alternatives></inline-formula>, due to a majority of gaps in column 7 for the three purple sequences. The remedy to remain the same alignment coordinates in the different consensus structures is the introduction of gaps in <inline-formula id="IEq85"><alternatives><tex-math id="M165">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {match}}^{i}$\end{document}</tex-math><mml:math id="M166"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq85.gif"/></alternatives></inline-formula>. This is accomplished by parsing <inline-formula id="IEq86"><alternatives><tex-math id="M167">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}${SS}_{\textit {match}}^{i}$\end{document}</tex-math><mml:math id="M168"><mml:msubsup><mml:mrow><mml:mtext mathvariant="italic">SS</mml:mtext></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">match</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2015_569_IEq86.gif"/></alternatives></inline-formula> with a gapped version of <inline-formula id="IEq87"><alternatives><tex-math id="M169">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5s}$\end{document}</tex-math><mml:math id="M170"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq87.gif"/></alternatives></inline-formula>, see Figure <xref rid="Fig10" ref-type="fig">10</xref>. The resulting guide trees for both consensus structures of the example are depicted in Panel B) of Figure <xref rid="Fig8" ref-type="fig">8</xref>.
<fig id="Fig10"><label>Figure 10</label><caption><p>Grammar <inline-formula id="IEq89"><alternatives><tex-math id="M171">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5s}$\end{document}</tex-math><mml:math id="M172"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq89.gif"/></alternatives></inline-formula> to parse a gapped consensus structure. It is identical to <inline-formula id="IEq90"><alternatives><tex-math id="M173">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5}$\end{document}</tex-math><mml:math id="M174"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq90.gif"/></alternatives></inline-formula> (Figure <xref rid="Fig3" ref-type="fig">3</xref>), but has a forth alternative production rule to parse gap characters _.</p></caption><graphic xlink:href="12859_2015_569_Fig10_HTML" id="MO10"/></fig>
</p>
    </sec>
    <sec id="Sec21">
      <title>Ambivalent guide forest</title>
      <p>The <italic>ambivalent guide forest</italic> is a tree that encodes several guide trees. Common parts of the guide trees are shared. Where the guide trees diverge, the ambivalent guide forest contains an extra fork node, which has the diverging substructures from different guide trees as its subtrees. We need to merge all individual guide trees <italic>g</italic>
<italic>t</italic>
<sub><italic>i</italic></sub> from the <inline-formula id="IEq91"><alternatives><tex-math id="M175">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {G}_{5s}$\end{document}</tex-math><mml:math id="M176"><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2015_569_IEq91.gif"/></alternatives></inline-formula>‐<italic>parsing</italic> process in a progressive fashion into one ambivalent guide forest <italic>F</italic>. The progressive merge process operates top‐town.</p>
      <p>Two guide trees for compatible consensus structures like <inline-formula id="IEq92"><alternatives><tex-math id="M177">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}\text {\tt {{&lt;}{&gt;}}}\\ **\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M178"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>&lt;&gt;</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>∗</mml:mo><mml:mo>∗</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq92.gif"/></alternatives></inline-formula>can differ directly at their root nodes, immediately requiring a fork node. In general, the ambivalent guide forest places the fork nodes as low as possible, to keep the aCM – and thus run‐time of the aCM – as small as possible. During construction, we also have to make sure that no unseen combinations become possible, e. g. <inline-formula id="IEq93"><alternatives><tex-math id="M179">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}\text {\tt {{&lt;}\!{&lt;}}}\!*\!\text {\tt {&gt;}}\!*\!\text {\tt {{-}{-}{&gt;}}}\\ \text {\tt {{&lt;}{-}{-}{-}}}\!*\!\text {\tt {{&lt;}{&gt;}\!{&gt;}}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M180"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>&lt;&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&gt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>--&gt;</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>&lt;---</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&lt;&gt;&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq93.gif"/></alternatives></inline-formula>shall not not allow for model structure &lt;--- ∗ --&gt;.</p>
      <p>The overall idea when merging two guide trees is to overlay them and identify identical parts. When both guide trees start to diverge, a fork for both alternatives is be introduced in <italic>F</italic>. Identical parts are identified by simultaneously traversing both guide trees top‐down. The coupled traversal starts at both root nodes, e. g. at the red <italic>p</italic>
<italic>a</italic>
<italic>i</italic>
<italic>r</italic>
<sub>1</sub> and the purple <italic>p</italic>
<italic>a</italic>
<italic>i</italic>
<italic>r</italic>
<sub>1</sub> of Panel B in Figure <xref rid="Fig8" ref-type="fig">8</xref>. If the current nodes of both guide trees are of the same type (<italic>nil</italic>, <italic>pair</italic>, <italic>open</italic> or <italic>skip</italic>) and refer to the same alignment positions, a new node of this type is introduced in <italic>F</italic> (right hand side <italic>p</italic>
<italic>a</italic>
<italic>i</italic>
<italic>r</italic>
<sub>1</sub> in Figure <xref rid="Fig8" ref-type="fig">8</xref>) and the coupled traversal is simultaneously applied to all children. If either the types or the alignment positions of the nodes under consideration differ (e. g. red <italic>p</italic>
<italic>a</italic>
<italic>i</italic>
<italic>r</italic>
<sub>6</sub> and purple <italic>o</italic>
<italic>p</italic>
<italic>e</italic>
<italic>n</italic>
<sub>6</sub>), the complete sub‐trees, which are rooted by these nodes, are added to <italic>F</italic> under a fork node.</p>
      <p>An aCM should be able to hold more than two consensus structures. Thus, it is necessary to progressively add further guide trees to <italic>F</italic>. The coupled traversal must be modified in the sense that a node of the guide tree is compared not to a single node in <italic>F</italic>, but to all guide trees already encoded in <italic>F</italic>, only inducing a fork if it brings in a new subtree.</p>
      <p>The ambivalent guide forest for the red and purple guide trees of the example is depicted on the right hand side of Panel B) in Figure <xref rid="Fig8" ref-type="fig">8</xref>. Nodes shared by both guide trees are colored in black. The right child of <italic>p</italic>
<italic>a</italic>
<italic>i</italic>
<italic>r</italic>
<sub>2</sub> is not a single tree, but a forest for the divergent red and purple sub‐trees.</p>
      <p>The more similar a set of guide trees are, the larger are those parts of the trees that can be jointly represented in the <italic>F</italic>. In the worst case, there are no common parts in all <italic>gt</italic> at all. This means that <italic>n</italic> individual guide trees, each with a number of leaves that is linearly proportional to <italic>m</italic>, will cause a <italic>F</italic> with <italic>n</italic>·<italic>m</italic> nodes. Depth‐first traversal of such <italic>F</italic> requires <italic>O</italic>(<italic>n</italic>·<italic>m</italic>) time and has to be repeated during the progressive construction of <italic>F</italic> itself <italic>n</italic>‐times. Thus, the worst‐case overall run‐time for merging <italic>n</italic> guide trees into one ambivalent guide forest is <italic>O</italic>(<italic>n</italic>
<sup>2</sup>·<italic>m</italic>).</p>
      <p>The construction of the ambivalent guide forest leaves room for improvement by recognizing shared substructures. The multi‐structure parsing of Saffarian <italic>et al.</italic> [<xref ref-type="bibr" rid="CR5">5</xref>] makes use of shared subgrammars for shared substructures. This keeps the grammar smaller and avoids extra tables in the CYK‐type parser. Such sharing works for combinatorial matching as well as for energy minimization, as all instances of a shared subgrammar undergo the same scoring. At first glance, it appears not to be applicable with stochastic models, because shared subgrammars have their parameters trained from different sub‐families. Scoring shared substructures in different ways, of course, requires separate dynamic programming tables. However, in practice parameters may be tied together in the training phase anyway, or may come out of the training quite similar. In this situation, subgrammar sharing may be a good pragmatic decision. We leave this topic for future research.</p>
    </sec>
    <sec id="Sec22">
      <title>Provide indices in the ambivalent guide forest</title>
      <p>We have two objectives for the design of aCM topologies: On the one hand, we want to enable alternative parses through the aCM, reflecting the ambivalent consensus structures. We have to take care that transitions are forbidden that are not indicated by the set of consensus structures: <inline-formula id="IEq94"><alternatives><tex-math id="M181">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}\text {\tt {{&lt;}\!{&lt;}}}\!*\!\text {\tt {&gt;}}\!*\!\text {\tt {{-}{-}{&gt;}}}\\ \text {\tt {{&lt;}{-}{-}{-}}}\!*\!\text {\tt {{&lt;}{&gt;}\!{&gt;}}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M182"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mtext>&lt;&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&gt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>--&gt;</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>&lt;---</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&lt;&gt;&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq94.gif"/></alternatives></inline-formula>shall not impose model structure &lt;--- ∗ --&gt;. We do so by using ambivalent guide forests, which introduce branches as soon as two sub‐trees differ. This effects the allowed transitions within the model, i. e. the grammar. On the other hand, an aCM should capture as much shared alignment parts as possible: The ambivalent guide forest for <inline-formula id="IEq95"><alternatives><tex-math id="M183">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left \langle {\begin {array}{cc}*\!*\!\text {\tt {{&lt;}{-}{&gt;}}}*\\ *\text {\tt {{&lt;}\!{&lt;}}}\!*\!\text {\tt {{&gt;}\!{&gt;}}}\end {array}}\right \rangle $\end{document}</tex-math><mml:math id="M184"><mml:mfenced close="〉" open="〈" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&lt;-&gt;</mml:mtext><mml:mo>∗</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>∗</mml:mo><mml:mtext>&lt;&lt;</mml:mtext><mml:mspace width="0.3em"/><mml:mo>∗</mml:mo><mml:mspace width="0.3em"/><mml:mtext>&gt;&gt;</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_569_IEq95.gif"/></alternatives></inline-formula>branches into two independent sub‐trees for ∗&lt;-&gt;∗ and &lt;&lt; ∗ &gt;&gt;. However, the base‐pair from position 3 to 5 is shared between both consensus structures. Counting the emitted nucleotides should be in a sub‐family combined fashion for those positions, which are torn apart by the ambivalent guide forest. To combine both objectives, we use two types of indices: One for the non‐terminals of the grammar, affirming correct transitions and another one for the CYK algebra to share common emission probabilities. The grammar indices are given as superscripts left of the nodes for the example in Panel B) for Figure <xref rid="Fig8" ref-type="fig">8</xref>, while algebra indices are subscripts right of the nodes. Please note that grammar indices are unique. Algebra indices can be shared, e. g. <italic>O</italic>
<sub>6</sub> and <italic>P</italic>
<sub>6</sub>. By construction and using common alignment coordinates the algebra index is directly inherited from the individual guide trees. To obtain grammar indices, we need to distribute a new set of successive numbers to the ambivalent guide forest in a depth‐first like strategy. The indexing of a list of ambivalent guide forests starts with depth‐first indexing of the complete first tree and then continues with the rest of the list.</p>
    </sec>
    <sec id="Sec23">
      <title>Generate aCM grammar</title>
      <p>The final step to obtain the aCM grammar is to evaluate the ambivalent guide forest with the function <italic>gen</italic>, given in Figure <xref rid="Fig11" ref-type="fig">11</xref>. A simple structural recursion on <italic>F</italic> performs this evaluation and returns the family model grammar. An example grammar is illustrated in Panel C) of Figure <xref rid="Fig8" ref-type="fig">8</xref>.
<fig id="Fig11"><label>Figure 11</label><caption><p>Algebra like function <italic>gen</italic> that evaluates a list of ambivalent guide forests into a set of grammar rules. Rules with identical indexed non‐terminals will be combined as alternative right hand sides. The function <italic>g</italic>(<italic>x</italic>) returns the grammar index of the root node of an ambivalent guide forest <italic>x</italic>. Index tuple (<italic>a</italic>,<italic>g</italic>) holds algebra and grammar index, respectively. Remember that <italic>xs</italic> and <italic>ys</italic> are <italic>lists</italic> of ambivalent guide forests.</p></caption><graphic xlink:href="12859_2015_569_Fig11_HTML" id="MO11"/></fig>
</p>
    </sec>
  </sec>
  <sec id="Sec24">
    <title>Evaluation</title>
    <p>We now evaluate aCMs by considering several RNA families whose structural variation can only be expressed unsatisfactorily in <sc>RFAM</sc>. We take a look at the tRNA, U5 spliceosomal RNA, RNAse‐P, and IRES families. The tRNA application is discussed in detail, where we also compare to implementing families as two separate models with classical CMs. For the others, we mainly report the results.</p>
    <sec id="Sec25">
      <title>The tRNA family as an aCM</title>
      <p>Let us come back to the initial example of the tRNA family from <sc>RFAM</sc> (ID: RF00005, release 10.1). We sub‐divide the 967 sequences of the seed alignment with respect to the presence or absence of the variable fifth helix. Thus, we obtain the “cloverleaf” sub‐family with 820 members and the famous cloverleaf as its consensus structure <italic>S</italic>
<italic>S</italic>
<sub><italic>cloverleaf</italic></sub>, as stored in <sc>RFAM</sc>, as well as the sub‐family “varloop”, which holds the remaining 147 sequences. The consensus structure of “varloop” is better described by <italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub>, which contains the additional helix. The consensus <italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub> is constructed by aligning individual structure predictions from <sc>TRNASCAN-SE</sc> [<xref ref-type="bibr" rid="CR22">22</xref>] with <sc>RNAFORESTER</sc> [<xref ref-type="bibr" rid="CR3">3</xref>].</p>
      <p>We create four different classical CMs with <sc>ALTERNAL</sc>:
<list list-type="order"><list-item><p><bold>all cloverleaf</bold>: <italic>MSA</italic> contains all 967 sequences; consensus structure is <italic>S</italic>
<italic>S</italic>
<sub><italic>cloverleaf</italic></sub>. This is the original model.</p></list-item><list-item><p><bold>all varloop</bold>: <italic>MSA</italic> contains all 967 sequences; consensus structure is <italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub>.</p></list-item><list-item><p><bold>only cloverleaf</bold>: <italic>MSA</italic> contains 820 “cloverleaf” sequences; consensus structure is <italic>S</italic>
<italic>S</italic>
<sub><italic>cloverleaf</italic></sub>.</p></list-item><list-item><p><bold>only varloop</bold>: <italic>MSA</italic> contains 147 “varloop” sequences; consensus structure is <italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub>.</p></list-item></list>
</p>
      <p>The performance of these models is shown in Figure <xref rid="Fig12" ref-type="fig">12</xref>. The four blue shaded columns present the results when matching all 967 members of the family to the four different CMs via the CYK algorithm. The lower part of the figure informs about the input for the model creation. The box depicts the input alignment, the curve represents the consensus structure. “cloverleaf” sequences or consensus structures are addressed in green. “varloop” components are red. There are three box‐plots in each column: The green box‐plot corresponds to those bit‐scores that stem from sequences of the sub‐family “cloverleaf” and the red box‐plot is exclusively for the “varloop” sequences. The blue box‐plot is the union of the two sub‐families and represents all bit‐scores.
<fig id="Fig12"><label>Figure 12</label><caption><p>Evaluation of different ways to construct individual CMs for sub‐families for the tRNA family, compared with one aCM for both sub‐families. Detailed explanations are in the main text.</p></caption><graphic xlink:href="12859_2015_569_Fig12_HTML" id="MO12"/></fig>
</p>
      <p>The median bit‐score (brown horizontal line) for all tRNAs with the original model (leftmost blue shaded column: “all cloverleaf”) is ≈52.0. When we differentiate between both sub‐families, we see that in fact the “varloop” sequences (red box‐plot) get penalized for the additional bases of the variable loop. Their median (≈40.1) is significantly lower than the median of the green “cloverleaf” group (≈55.2). Our second CM (“all varloop”) was constructed from a different consensus structure input (<italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub> instead of <italic>S</italic>
<italic>S</italic>
<sub><italic>cloverleaf</italic></sub>), but due to the <italic>gap column masking</italic> process it gives an identical guide‐tree when compared to the original “all cloverleaf” model. And indeed, we do not observe any changes in the bit‐scores.</p>
      <p>Different <italic>S</italic>
<italic>S</italic>
<sub><italic>match</italic></sub> and guide‐trees can only be achieved by also using different parts of the <italic>MSA</italic>, as done for the last two models “only cloverleaf” and “only varloop”. Training only with the cloverleaf sub‐family results in no significant shift of the overall bit‐scores (blue box‐plot); median is reduced by ≈0.3 bits. A closer look reveals that the “varloop” sequences, which are now left out for training, perform even worse (median decreases by ≈4.3 bits), while the “cloverleaf” sequences get a tiny bonus of ≈0.2 bits for their median. Good scores for “varloop” sequences can be obtained if we use the “only varloop” model. Their median is now at ≈53.3 bits. As to be expected, performance for the “cloverleaf” majority of the sequences nosedives (median at ≈17.0 bits).</p>
      <p>Should we be able to a priori use the correct sub‐model for each sequence, or run both models in every case and cherry‐picking the better score, we would gain the theoretical median score of ≈55.0 bits (magenta horizontal line), which is ≈3.0 bits better than the original model. Splitting the family into two separate sub‐families seems to be worth it. This summarizes what can be achieved with tRNA by using classical CMs.</p>
      <p>Applying our aCM approach relieves the creator to artificially decompose her data into two or more sub‐families in order to suit the underlying scoring algorithm. The relationship of all sequences can be kept in one alignment, now enriched by sub‐family annotations and additional consensus structures. With this evaluation setup, we expect a properly built aCM at best to return the same bit‐scores for the sequences of the various sub‐families as a cherry picking of the results from several sub‐family specific CMs would do.</p>
      <p>The right green shaded column in Figure <xref rid="Fig12" ref-type="fig">12</xref> shows the results for such an aCM for the tRNA example. It is built from both consensus structures (<italic>S</italic>
<italic>S</italic>
<sub><italic>cloverleaf</italic></sub> and <italic>S</italic>
<italic>S</italic>
<sub><italic>varloop</italic></sub>) and trained with the total alignment (all 967 sequences). A rough inspection attests the targeted effect: A single model can both lift the “varloop” sequences to a niveau close to the overall median and simultaneously keep the good scores for the “cloverleaf” group.</p>
      <p>Surprisingly, the aCM is doing even better than the theoretical cherry picking. As one can see by examination of the red and green box‐plots in the green shaded column of Figure <xref rid="Fig1" ref-type="fig">1</xref>, not only the scores for the “varloop” sequences are lifted to a reasonable amount, also the “cloverleaf” sequences benefit from this information enrichment. The median score of the aCM is ≈55.9 bits (purple horizontal line) and thus ≈0.9 bits better than the theoretical optimum. The explanation is that aCMs contain more information than a set of sub‐family specific CMs. Common sub‐structures stronger deviate from the background model and predetermined sub‐structures do not get penalized. The median score of negative sequences between the original CM and the aCM raises by +1.7 bits (data not shown). Thus, the discriminatory power (as the difference between median bit score of positive and negative test cases) can be increased by 2.1 bits, which means that even those true candidates can get positive scores, which fall below the threshold of an individual CM.</p>
    </sec>
    <sec id="Sec26">
      <title>U5 spliceosomal RNA as an aCM</title>
      <p>An aCM can also be constructed for more than two sub‐families: The U5 spliceosomal RNA is a widespread family. Its concrete secondary structure changes over the different taxa. We used the original alignment from [<xref ref-type="bibr" rid="CR23">23</xref>,<xref ref-type="bibr" rid="CR24">24</xref>] identified six taxa, grouped the sequences, and defined according consensus structures. Figure <xref rid="Fig13" ref-type="fig">13</xref> is the result of the same kind of analysis as shown in Figure <xref rid="Fig12" ref-type="fig">12</xref>; negative, i. e. di‐nucleotide shuffled sequences, are included here. In conclusion, the mean bit‐score could be increased by 27<italic>%</italic>, compared to the original CM, while bit‐scores for negative sequences remain low, thus improving discriminatory power.
<fig id="Fig13"><label>Figure 13</label><caption><p>Evaluation of different ways to construct individual CMs for sub‐families for the U5 family, compared with one aCM for all six sub‐families.</p></caption><graphic xlink:href="12859_2015_569_Fig13_HTML" id="MO13"/></fig>
</p>
      <p>The tRNA and U5 RNA families illustrate that the concept of aCMs can protect real families of being artificially torn apart and thus preserve existing relations. We might even render already conducted break‐ups unnecessary and merge separate families of an <sc>RFAM</sc> clan.</p>
    </sec>
    <sec id="Sec27">
      <title>Merging RNAse‐P RNA families</title>
      <p>RNAse‐P RNA is a difficult family. Despite sharing a significant structural core, some RNAs may differ locally to such a degree that their representation as one multiple sequence alignment would lead to an unmanageable “horizontal expansion”, i. e. a large proportion of gaps, as reported in [<xref ref-type="bibr" rid="CR25">25</xref>]), and has led the curators of <sc>RFAM</sc> to construct sub‐alignments, organized in <italic>clans</italic>. One example is the RNAse‐P clan, which is represented in <sc>RFAM</sc> by six individual families. The success of a joint aCM for RNAse‐P heavily depends on the quality of an unifying alignment, which must capture similar regions and allowing for local structural alternatives. For a preliminary evaluation, we resort to the expertise of the authors of [<xref ref-type="bibr" rid="CR26">26</xref>], who provide an semi‐automatically generated RNAse‐P alignment for a subset of current <sc>RFAM</sc> sequences in the clan. The sequences are organized in four sub‐groups, each with its own consensus structure. From this alignment, the aCM is generated. The results are shown in Figure <xref rid="Fig14" ref-type="fig">14</xref>.
<fig id="Fig14"><label>Figure 14</label><caption><p>Evaluation of the effect of merging all four separate families of RNAseP.</p></caption><graphic xlink:href="12859_2015_569_Fig14_HTML" id="MO14"/></fig>
</p>
      <p>While the median bit‐score of aCMs is below the theoretical optimum for cherry‐picking from individual CMs, it is much better than median bit‐scores for any combined traditional CM. The discriminatory power is improved by ≈58 bits.</p>
      <p>There is much space for further improvement for RNAse‐P, since the used alignment has large horizontal expansions. Of the 1,669 alignment columns in total, 979 columns are masked as gap‐columns in all four sub‐groups and there are only 91 positions where all sub‐groups agree in having a match‐column.</p>
    </sec>
    <sec id="Sec28">
      <title>Merging IRES families</title>
      <p>A second use‐case for the merging capabilities of aCM can be the 27 internal ribosome entry site (IRES) families of <sc>RFAM</sc>. We determined RF00061 and RF00209 as the two closest IRES families, by computing their link‐score with <sc>CMCOMPARE</sc> [<xref ref-type="bibr" rid="CR27">27</xref>]. We then structurally aligned their consensus structure and sequence with <sc>RNAFORESTER</sc> and finally mapped the individual alignment columns to a unifying alignment with two sub‐groups. The results of our evaluation setup are given in Figure <xref rid="Fig15" ref-type="fig">15</xref>. Despite the poor quality of the completely automatically created alignment, the according aCM performs as well as a theoretical cherry picking of both single families.
<fig id="Fig15"><label>Figure 15</label><caption><p>Evaluation of the effect of merging the two individual IRES families RF00061 (“Hepatitis C virus internal ribosome entry site”) and RF00209 (“Pestivirus internal ribosome entry site”) of <sc>RFAM</sc> via one aCM.</p></caption><graphic xlink:href="12859_2015_569_Fig15_HTML" id="MO15"/></fig>
</p>
    </sec>
  </sec>
  <sec id="Sec29" sec-type="conclusion">
    <title>Conclusion</title>
    <p>The <sc>RFAM</sc> database contains several families that cross the limitations of a single consensus structure. The new concept of an <sc>RFAM</sc> “clan” is a set of closely related families. It seems to be a workaround to cope with several consensus structures within one former family, which is now torn apart. Our evaluation shows that a segmentation of a family impedes homology analysis. Based on our implementatio and evaluation of aCMs, we suggest to extend present practice of RNA family modeling to hold multiple consensus structures to keep up with biologically motivated family definitions.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional file</title>
    <sec id="Sec30">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2015_569_MOESM1_ESM.pdf">
            <label>Additional file 1</label>
            <caption>
              <p>
                <bold>Supplementary material.</bold>
              </p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>SJ conceived of the aCM idea, implemented the prototype, performed all evaluations and prepared the projects website under the guidance of RG. Both authors drafted, read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors thank Elena Rivas and Eric Westhof for organizing the Benasque RNA 2012 workshop, where initial ideas of this work were discussed in a stimulating environment. Furthermore, we thank Benedikt Loewes for proofreading the manuscript. We acknowledge support of the publication fee by Deutsche Forschungsgemeinschaft and the Open Access Publication Funds of Bielefeld University. No further external funding is involved. We also thank the anonymous reviewers, whose comments helped to significantly improve the manuscript.</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">Burge SW, Daub J, Eberhardt R, Tate J, Barquist L, Nawrocki EP, et al. Rfam 11.0: 10 years of RNA families. Nucleic Acids Res. 2012. doi:10.1093/nar/gks1005. <ext-link ext-link-type="uri" xlink:href="http://nar.oxfordjournals.org/content/early/2012/11/02/nar.gks1005.full.pdf+html">http://nar.oxfordjournals.org/content/early/2012/11/02/nar.gks1005.full.pdf+html</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <mixed-citation publication-type="other">Rfam Help. <ext-link ext-link-type="uri" xlink:href="http://rfam.sanger.ac.uk/help">http://rfam.sanger.ac.uk/help</ext-link>, seen on March 7th, 2014.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Höchsmann</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Voß</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Pure multiple RNA secondary structure alignments: a progressive profile approach</article-title>
        <source>IEEE/ACM Trans Comput Biol Bioinform</source>
        <year>2004</year>
        <volume>1</volume>
        <issue>1</issue>
        <fpage>53</fpage>
        <lpage>62</lpage>
        <pub-id pub-id-type="doi">10.1109/TCBB.2004.11</pub-id>
        <pub-id pub-id-type="pmid">17048408</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>RNA sequence analysis using covariance models</article-title>
        <source>Nucleic Acids Res</source>
        <year>1994</year>
        <volume>22</volume>
        <issue>11</issue>
        <fpage>2079</fpage>
        <lpage>88</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/22.11.2079</pub-id>
        <pub-id pub-id-type="pmid">8029015</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <mixed-citation publication-type="other">Saffarian A, Giraud M, Touzet H. Proceedings of 1st Workshop on Computational Methods for Structural RNAs (CMSR’14) In: Jossinet F, Ponty Y, Waldispühl J, editors. Strasbourg, France: 2014. p. 13–24. doi:10.15455/CMSR.2014.0002. <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.15455/CMSR.2014.0002">http://dx.doi.org/10.15455/CMSR.2014.0002</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <mixed-citation publication-type="other">Reinkensmeier J, Giegerich R. Thermodynamic matchers for the construction of the cuckoo RNA family. RNA Biology 2015;12:197–207. In print http://www.tandfonline.com/doi/abs/10.1080/15476286.2015.1017206.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <mixed-citation publication-type="other">Giegerich R. Introduction to stochastic context free grammars In: Gorodkin J, Ruzzo WL, editors. RNA Sequence, structure, and function: computational and Bioinformatic methods. Methods in Molecular Biology, Humana Press: 2014. p. 85–106. doi:10.1007/978‐1‐62703‐709‐9_5. <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-1-62703-709-9_5">http://dx.doi.org/10.1007/978‐1‐62703‐709‐9_5</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <mixed-citation publication-type="other">Durbin R, Eddy SR, Krogh A, Mitchison G. Biological sequence analysis: probabilistic models of proteins and nucleic acids: Cambridge University Press; 2002. http://www.worldcat.org/isbn/0521629713.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nawrocki</surname>
            <given-names>EP</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>Infernal 1.1: 100‐fold faster RNA homology searches</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>22</issue>
        <fpage>2933</fpage>
        <lpage>35</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt509</pub-id>
        <pub-id pub-id-type="pmid">24008419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddy</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>A memory‐efficient dynamic programming algorithm for optimal alignment of a sequence to an RNA secondary structure</article-title>
        <source>BMC Bioinformatics</source>
        <year>2002</year>
        <volume>3</volume>
        <issue>1</issue>
        <fpage>18</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-3-18</pub-id>
        <pub-id pub-id-type="pmid">12095421</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weinberg</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Ruzzo</surname>
            <given-names>WL</given-names>
          </name>
        </person-group>
        <article-title>Sequence‐based heuristics for faster annotation of non‐coding RNA families</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>35</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti743</pub-id>
        <pub-id pub-id-type="pmid">16267089</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nawrocki</surname>
            <given-names>EP</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>Query‐Dependent Banding (QDB) for faster RNA similarity searches</article-title>
        <source>PLoS Comput Biol</source>
        <year>2007</year>
        <volume>3</volume>
        <issue>3</issue>
        <fpage>56</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.0030056</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Höner zu Siederdissen</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Semantics and ambiguity of stochastic RNA family models</article-title>
        <source>EEE/ACM Trans Comput Biol Bioinform</source>
        <year>2011</year>
        <volume>8</volume>
        <fpage>499</fpage>
        <lpage>516</lpage>
        <pub-id pub-id-type="doi">10.1109/TCBB.2010.12</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dowell</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Evaluation of several lightweight stochastic context‐free grammars for RNA secondary structure prediction</article-title>
        <source>BMC Bioinformatics</source>
        <year>2004</year>
        <volume>5</volume>
        <issue>1</issue>
        <fpage>71</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-5-71</pub-id>
        <pub-id pub-id-type="pmid">15180907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gerstein</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sonnhammer</surname>
            <given-names>ELL</given-names>
          </name>
          <name>
            <surname>Chothia</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Volume changes in protein evolution</article-title>
        <source>J Mol Biol</source>
        <year>1994</year>
        <volume>236</volume>
        <issue>4</issue>
        <fpage>1067</fpage>
        <lpage>78</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(94)90012-4</pub-id>
        <pub-id pub-id-type="pmid">8120887</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krogh</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Mitchison</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Maximum entropy weighting of aligned sequences of proteins or DNA,</article-title>
        <source>Proc Int Conf Intell Syst Mol Biol ISMB</source>
        <year>1995</year>
        <volume>3</volume>
        <fpage>215</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="pmid">7584440</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <mixed-citation publication-type="other">Johnson S. Remote protein homology detection using hidden markov models. PhD dissertation, Graduate School of Arts and Sciences of Washington University, Saint Louis, Missouri (December 2006).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>A discipline of dynamic programming over sequence data,</article-title>
        <source>Sci Comput Program</source>
        <year>2004</year>
        <volume>51</volume>
        <issue>3</issue>
        <fpage>215</fpage>
        <lpage>63</lpage>
        <pub-id pub-id-type="doi">10.1016/j.scico.2003.12.005</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steffen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Versatile and declarative dynamic programming using pair algebras</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <issue>1</issue>
        <fpage>224</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-224</pub-id>
        <pub-id pub-id-type="pmid">16156887</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sauthoff</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Möhl</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Janssen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Bellman’s GAP–a language and compiler for dynamic programming in sequence analysis</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>5</issue>
        <fpage>551</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt022</pub-id>
        <pub-id pub-id-type="pmid">23355290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jiang</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gillespie</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mayne</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>uShuffle: A useful tool for shuffling biological sequences while preserving the k‐let counts</article-title>
        <source>BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>192</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-192</pub-id>
        <pub-id pub-id-type="pmid">18405375</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lowe</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>tRNAscan‐SE: a program for improved detection of transfer RNA genes in genomic sequence</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <issue>5</issue>
        <fpage>0955</fpage>
        <lpage>964</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/25.5.0955</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Marz</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kirsten</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Stadler</surname>
            <given-names>PF</given-names>
          </name>
        </person-group>
        <article-title>Evolution of Spliceosomal snRNA genes in Metazoan animals</article-title>
        <source>J Mol Evol</source>
        <year>2008</year>
        <volume>67</volume>
        <issue>6</issue>
        <fpage>594</fpage>
        <lpage>607</lpage>
        <pub-id pub-id-type="doi">10.1007/s00239-008-9149-6</pub-id>
        <pub-id pub-id-type="pmid">19030770</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <mixed-citation publication-type="other">Supplemental material of Reference 23: Evolution of Spliceosomal snRNA Genes in Metazoan Animals. www.bioinf.uni‐leipzig.de/Publications/SUPPLEMENTS/08‐001/ALIGNMENTS/ALL.U5.stk.</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brown</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Birmingham</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Griffiths</surname>
            <given-names>PE</given-names>
          </name>
          <name>
            <surname>Jossinet</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Kachouri‐Lafond</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Knight</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The RNA structure alignment ontology</article-title>
        <source>RNA</source>
        <year>2009</year>
        <volume>15</volume>
        <issue>9</issue>
        <fpage>1623</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1261/rna.1601409</pub-id>
        <pub-id pub-id-type="pmid">19622678</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zwieb</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Nakao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Nakashima</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Takagi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Goda</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Andersen</surname>
            <given-names>ES</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Structural modeling of RNase p RNA of the hyperthermophilic archaeon pyrococcus horikoshii {OT3}</article-title>
        <source>Biochem Biophy Res Commun</source>
        <year>2011</year>
        <volume>414</volume>
        <issue>3</issue>
        <fpage>517</fpage>
        <lpage>22</lpage>
        <pub-id pub-id-type="doi">10.1016/j.bbrc.2011.09.098</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Siederdissen</surname>
            <given-names>CHz</given-names>
          </name>
          <name>
            <surname>Hofacker</surname>
            <given-names>IL</given-names>
          </name>
        </person-group>
        <article-title>Discriminatory power of RNA family models</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>18</issue>
        <fpage>453</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq370</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
