<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title>BMC Bioinformatics</journal-title>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">406494</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-5-40</article-id>
    <article-id pub-id-type="pmid">15096276</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-5-40</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Pegasys: software for executing and integrating analyses of biological sequences</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" contrib-type="author">
        <name>
          <surname>Shah</surname>
          <given-names>Sohrab P</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>sohrab@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A2" contrib-type="author">
        <name>
          <surname>He</surname>
          <given-names>David YM</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>david@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A3" contrib-type="author">
        <name>
          <surname>Sawkins</surname>
          <given-names>Jessica N</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>jessica@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A4" contrib-type="author">
        <name>
          <surname>Druce</surname>
          <given-names>Jeffrey C</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>jdruce@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A5" contrib-type="author">
        <name>
          <surname>Quon</surname>
          <given-names>Gerald</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>gtquon@uwaterloo.ca</email>
      </contrib>
      <contrib id="A6" contrib-type="author">
        <name>
          <surname>Lett</surname>
          <given-names>Drew</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>drewlett@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A7" contrib-type="author">
        <name>
          <surname>Zheng</surname>
          <given-names>Grace XY</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>gxz@interchange.ubc.ca</email>
      </contrib>
      <contrib id="A8" contrib-type="author">
        <name>
          <surname>Xu</surname>
          <given-names>Tao</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>taoxu@bioinformatics.ubc.ca</email>
      </contrib>
      <contrib id="A9" corresp="yes" contrib-type="author">
        <name>
          <surname>Ouellette</surname>
          <given-names>BF Francis</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>francis@bioinformatics.ubc.ca</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>UBC Bioinformatics Centre, University of British Columbia, Vancouver, British Columbia, Canada</aff>
    <pub-date pub-type="collection">
      <year>2004</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>19</day>
      <month>4</month>
      <year>2004</year>
    </pub-date>
    <volume>5</volume>
    <fpage>40</fpage>
    <lpage>40</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/40"/>
    <history>
      <date date-type="received">
        <day>27</day>
        <month>2</month>
        <year>2004</year>
      </date>
      <date date-type="accepted">
        <day>19</day>
        <month>4</month>
        <year>2004</year>
      </date>
    </history>
    <copyright-statement>Copyright © 2004 Shah et al; licensee BioMed Central Ltd. This is an Open Access article: verbatim copying and redistribution of this article are permitted in all media for any purpose, provided this notice is preserved along with the article's original URL.</copyright-statement>
    <abstract>
      <sec>
        <title>Background</title>
        <p>We present Pegasys – a flexible, modular and customizable software system that facilitates the execution and data integration from heterogeneous biological sequence analysis tools.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>The Pegasys system includes numerous tools for pair-wise and multiple sequence alignment, <italic>ab initio </italic>gene prediction, RNA gene detection, masking repetitive sequences in genomic DNA as well as filters for database formatting and processing raw output from various analysis tools. We introduce a novel data structure for creating workflows of sequence analyses and a unified data model to store its results. The software allows users to dynamically create analysis workflows at run-time by manipulating a graphical user interface. All non-serial dependent analyses are executed in parallel on a compute cluster for efficiency of data generation. The uniform data model and backend relational database management system of Pegasys allow for results of heterogeneous programs included in the workflow to be integrated and exported into General Feature Format for further analyses in GFF-dependent tools, or GAME XML for import into the Apollo genome editor. The modularity of the design allows for new tools to be added to the system with little programmer overhead. The database application programming interface allows programmatic access to the data stored in the backend through SQL queries.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>The Pegasys system enables biologists and bioinformaticians to create and manage sequence analysis workflows. The software is released under the Open Source GNU General Public License. All source code and documentation is available for download at <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.ubc.ca/pegasys/"/>.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <sec>
      <title>Pipelines for biological sequence analysis</title>
      <p>Large scale sequence analysis is a complex task that involves the integration of results from numerous computational tools. For high-throughput data analysis, these tools must be tied together in a coordinated system that can automate the execution of a set of analyses in sequence or in parallel. To this end, a diverse array of software systems for biological sequence analysis have emerged in recent years. For example, the Ensembl pipeline [<xref ref-type="bibr" rid="B1">1</xref>] automates the annotation of several eukaryotic genomes, Mungall <italic>et al </italic>[<xref ref-type="bibr" rid="B2">2</xref>] have created a robust pipeline for annotation and analysis of the Drosophila genome, GenDB [<xref ref-type="bibr" rid="B3">3</xref>] is used as an annotation system for several prokaryotic genomes and Yuan <italic>et al </italic>[<xref ref-type="bibr" rid="B4">4</xref>] have published resources for annotating the rice and other plant genomes. These pipelines are extensive in their scope, are well-designed and meet their objectives. In surveying these and other systems, we have identified three critical areas that are essential for building on the design of existing biological sequence analysis pipelines:</p>
      <p>• There is a need for flexible architecture so that one software system can be used to analyse different data sets that may require different analysis tools.</p>
      <p>• A system needs to allow for the inclusion of new tools in a modular fashion so the software architecture does not have to change with the addition of new tools.</p>
      <p>• A system should provide the framework to facilitate data integration of analysis results from different tools that were computed on the same input.</p>
      <sec>
        <title>The need for flexible architecture</title>
        <p>The systems outlined above differ substantially from each other in their design and application, but share common attributes. The diversity is naturally reflective of the varied computational tasks that biologists working on different projects need to perform in order to analyse their data. A researcher working on bacteria will need different tools for her analyses than someone working on mouse. The specificity driven by the needs of a research project makes it impossible to use a pipeline designed for a particular data set for analysis of another data set that has inherent differences such as the organism from which it was generated. As a result, numerous software pipelines have been created, many of which perform similar analyses (such as genome annotation) but on different data. For example, the concept of constructing a pipeline or 'workflows' of data processing are common to nearly all high-throughput sequence analysis projects. This shared concept provides an opportunity to harness the commonality in software so that a new system need not be designed for every new project.</p>
      </sec>
      <sec>
        <title>Incorporating new tools into existing frameworks</title>
        <p>The bioinformatics community is faced with a challenging and dynamic environment where new computational tools and data sets for sequence analysis are constantly being generated. Capitalizing on algorithmic and computational advances is critical to discovering more about the data being analysed. For a system that has a rigid pipeline that is 'hard coded', it may require a significant programming investment to incorporate a new tool. This may discourage biologists from integrating a new tool on the basis of logistics, rather than on the basis of scientific applicability. Therefore, a system should provide a framework that is designed for flexibility and extensibility.</p>
      </sec>
      <sec>
        <title>Facilitating data integration</title>
        <p>Genome annotation requires data integration. For example <italic>ab initio </italic>prediction of gene structures on genomic sequence can be greatly enhanced by using supporting sequence similarity searches [<xref ref-type="bibr" rid="B5">5</xref>-<xref ref-type="bibr" rid="B7">7</xref>]. Concordance between different methodologies lends stronger support and gives more compelling evidence to an algorithm or a person trying to infer true biological features from computationally derived features [<xref ref-type="bibr" rid="B8">8</xref>]. It follows that any analysis pipeline or system should provide a design that facilitates integration of heterogeneous sources of data.</p>
      </sec>
      <sec>
        <title>The Pegasys biological sequence analysis system</title>
        <p>To meet the challenges outlined above we have designed and implemented Pegasys: a flexible, modular and customizable framework for biological sequence analysis. The software is implemented in the Java programming language and is Open Source, released under the GNU General Public License. The features of Pegasys allow it to be used on a wide variety of tasks and data. Analysis modules for pair-wise and multiple sequence alignment, <italic>ab initio </italic>gene prediction, masking of repetitive elements, prediction of RNA sequences and eukaryotic splice site predictors have been developed. A new set of analyses is performed by first creating a new 'workflow'. We define a workflow as a set of analyses a biologist wishes to perform on a single sequence or set of sequences. Each workflow has the following qualities: a) the analyses can be linked together such that output from one analysis can be used as input to a subsequent analysis, b) analyses can accept outputs from more than one analysis as input, and c) analyses that are not serially dependent can be executed in parallel.</p>
        <p>Analysis tools in the Pegasys system are wrapped in modules that can easily be plugged into the system. The backend database system provides a data model that abstracts the concept of a computational feature and captures data from all the different analysis tools in the same framework. We have implemented data adaptors that can export computational results in General Feature Format [<xref ref-type="bibr" rid="B9">9</xref>] and Genome Annotation Markup Elements (GAME) XML [<xref ref-type="bibr" rid="B10">10</xref>] for import into the Apollo genome editor [<xref ref-type="bibr" rid="B11">11</xref>]. For simple workflows where data integration is not applicable, for example one analysis on an input sequence, raw, untransformed output from the analysis can also be retrieved.</p>
        <p>The system is fronted by a graphical user interface that allows users to create workflows at run-time and have them executed on the Pegasys server. The GUI also allows users to save their workflows for repeat execution on different input, or using different reagents.</p>
        <p>To demonstrate the utility of Pegasys in widely different bioinformatics tasks, we present three use cases of the system: a single application workflow, a workflow designed for formatting a database for BLAST [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>] and searching the newly formatted database, and finally a workflow designed for genome annotation of eukaryotic genomic sequence.</p>
        <p>We are releasing this work with the intention that a wide variety of sequence analyses in the bioinformatics research community will be enabled. Full details of the availability, support and documentation of Pegasys can be found at <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.ubc.ca/pegasys/"/>.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Implementation</title>
    <p>The design of the Pegasys system is guided by three main principles: modularity, flexibility and data integration. With these principles in mind, we designed Pegasys with the following architecture.</p>
    <sec>
      <title>Architecture and data flow</title>
      <p>The architecture of the system has a layered topology that uses a client/server model. The client has a graphical user interface (see Figure <xref ref-type="fig" rid="F4">4</xref>) for the creation of workflows. Once a workflow is created, it is sent to the server where it is executed. The server is made up of separate layers for job scheduling, execution, database interaction, and adaptors. The connectivity between layers is shown in Figure <xref ref-type="fig" rid="F1">1</xref>. The application layer converts the work flow rendered in XML into a directed acyclic graph (DAG) of analyses in memory. While traversing the DAG, the application schedules all of the analyses on a distributed compute cluster and facilitates the flow of data so that a particular node's program is only executed once all of its inputs are ready (i.e. all of the 'parent' analyses are complete). As each analysis completes, the results are inserted into the backend database layer. Complete reports and computational features of a sequence are inserted into relational tables. Sophisticated queries on the data, in which results from selected programs can be integrated together over a portion or all of the input sequence, can then be run to compile data for output. The data is exported from the system via the adaptor layer in various formats (currently GFF, GAME XML and raw output from each analysis tool are supported) for human interpretation or for import into other applications such as viewing tools (DAS [<xref ref-type="bibr" rid="B14">14</xref>]), editing tools (Apollo [<xref ref-type="bibr" rid="B11">11</xref>]) or statistical analysis tools such as R [<xref ref-type="bibr" rid="B15">15</xref>].</p>
    </sec>
    <sec>
      <title>The Pegasys data structure</title>
      <p>The core data structure of the Pegasys system is a DAG <italic>G(V, E)</italic>, consisting of a set of nodes <italic>V </italic>and a set of edges connecting the nodes <italic>E </italic>(see Figure <xref ref-type="fig" rid="F2">2</xref>). The DAG data structure models a workflow created by a user of the Pegasys system. A node can take one of three forms: a) an input sequence or b) an individual run of a program in the system or c) an output node. An edge (<italic>v</italic>1, <italic>v</italic>2) where <italic>v</italic>1 and <italic>v</italic>2 are nodes in <italic>V </italic>links data flow between <italic>v</italic>1 and <italic>v</italic>2. An edge represents a serial dependency, indicating that the input of <italic>v</italic>2 is tied to the output of <italic>v</italic>1. We refer to this relationship as a parent-child relationship: node <italic>v</italic>2 is a child of node <italic>v</italic>1 and node <italic>v</italic>1 is the parent of node <italic>v</italic>2. The edge ensures that the output format from <italic>v</italic>1 is consistent with the input format of <italic>v</italic>2. A node in the DAG can have more than one parent and therefore can have heterogeneous input from multiple sources. The edges in the graph are directional and can only connect two nodes that are executed one after another. The graph therefore has a chronological axis: the child nodes are executed after their parent nodes have completed.</p>
      <p>The DAG is created dynamically at run time as the user manipulates the GUI (see The Graphical User Interface section). The user can create workflows using any combination of the available programs in Pegasys by dragging/dropping and linking graphical icons that represent sequence analysis tools on a canvas together with edges in much the same way that one would use drawing tool software to create a flow diagram. Each program icon can be clicked to open a dialogue box that can take inputs for parameters that are supported by that particular program. Once all of the parameters for all the nodes have been filled in, the information for each node and their relationships to each other are compiled into a structured XML file. This file is then used as input to the Pegasys server that executes the analyses in parallel (described in the Architecture and Data Flow section) or can be saved for later editing or distribution. During the execution of the DAG, the data structure can adjust itself to accommodate outputs generated from the nodes. Consider the edge (<italic>v</italic>3, <italic>v</italic>5) depicted in Figure <xref ref-type="fig" rid="F2">2</xref> that connects an <italic>ab initio </italic>gene prediction program <italic>v</italic>3 with a sequence alignment program <italic>v</italic>5. In <italic>v</italic>5, the user wishes to search the coding regions from the output of <italic>v</italic>3 against a protein database. <italic>v</italic>5 cannot know how many genes will be predicted from <italic>v</italic>3 before <italic>v</italic>3 has terminated. Once <italic>v</italic>3 has terminated however, <italic>v</italic>5 will replicate itself for each 'output unit' generated from <italic>v</italic>3 (see Figure <xref ref-type="fig" rid="F2">2B</xref>). In this case, <italic>v</italic>5 replicates itself for each of the coding regions and the DAG executes each 'copy' of <italic>v</italic>5 in parallel. This built-in elasticity confers maximum parallel execution of analyses and therefore more efficient execution of the computations in the DAG.</p>
    </sec>
    <sec>
      <title>The Program module</title>
      <p>The <bold>Program </bold>module is the fundamental unit of the nodes of the aforementioned DAG in the application layer of the server and is a real instance of a node <italic>v </italic>∈ <italic>V</italic>. <bold>'Program' </bold>is an object oriented class that abstracts the concept of a Unix program that is natively compiled. Unix programs generally have a set of input command line parameters and output that is sent to the standard output, standard error or an output file. The <bold>Program </bold>class has a data structure to store a program's command line arguments and parameters. It contains methods for setting the path to the program's location on the system, executing the program and capturing its output from a file, standard error and standard output streams. To abstract a sequence analysis program, we created a <bold>PegasysProgram </bold>class that extends <bold>Program </bold>by adding an input sequence attribute and a <bold>PegasysResultSet </bold>to store the results of the analysis. The <bold>ProgramResultSet </bold>is a hierarchical, recursive data structure that allows storage of nested analysis results. For example a BLAST output has a list of similar sequences that each in turn has a list of high scoring pairs. Similarly Genscan produces output that contains a list of predicted genes, each of which could have a promoter, a list of exons and a poly-A signal. <bold>PegasysResultSet </bold>captures the hierarchical nature of these results.</p>
      <p>For each sequence specific analysis tool in Pegasys, we created a class that extends <bold>PegasysProgram</bold>. Each of these classes implement their own methods that load the particular output of the program and parse it into their <bold>PegasysResultSet</bold>. For example, the locations of computational evidences such as predicted exons from a gene finding tool, or a high scoring pair from an alignment algorithm are parsed along with a statistic and/or score when available. This architecture generalises a computational feature so that programmatically, results from different analysis programs can be treated equally. As mentioned earlier, this allows the user to output results from different programs in a unified format such as GFF, or GAME XML. In addition, it facilitates querying for all computational evidence computed on a segment of sequence that may be of interest to the biologist.</p>
      <p>Creating a new <bold>PegasysProgram </bold>derivative involves writing a parser for the particular application that can extract data that is amenable to being loaded into a <bold>PegasysResultSet</bold>. The system, at the time of this writing has <bold>PegasysPrograms </bold>for RepeatMasker [<xref ref-type="bibr" rid="B16">16</xref>], BLAST (blastn, blastp, blastx, tblastn, tblastx) [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>], WU BLAST [<xref ref-type="bibr" rid="B17">17</xref>], the EMBOSS [<xref ref-type="bibr" rid="B18">18</xref>] implementation of Smith-Waterman [<xref ref-type="bibr" rid="B19">19</xref>], Genscan [<xref ref-type="bibr" rid="B20">20</xref>], HMMgene [<xref ref-type="bibr" rid="B21">21</xref>], Mlagan [<xref ref-type="bibr" rid="B22">22</xref>], Sim4 [<xref ref-type="bibr" rid="B23">23</xref>], TrnaScan-SE [<xref ref-type="bibr" rid="B24">24</xref>] and GeneSplicer [<xref ref-type="bibr" rid="B25">25</xref>].</p>
    </sec>
    <sec>
      <title>The database</title>
      <p>The backend database of the Pegasys system was created with the goal of maximizing information capture during execution of a workflow. The database tracks all parameters used for the invocations of analysis programs, all input sequences, and all output generated by computation.</p>
      <sec>
        <title>The Pegasys schema</title>
        <p>The Pegasys schema has three main tables: 'sequence' which stores the input sequences, 'program_run' which stores the information about an individual program's process on the system and 'pegasys_result' which stores the locations of computational features on the input sequence. Peripheral to the three core tables are seventeen meta tables that store information about the data in the core tables. The full schema is presented in Figure <xref ref-type="fig" rid="F3">3</xref>.</p>
        <p>The 'program_run' table is designed to store all information on an invocation of an analysis tool in order to facilitate reprocessing of results without having to recompute an analysis and can also aid in diagnosing problems that are bound to occur in the system. 'program_run' stores the class that invoked the process, the raw unprocessed output of the program, the start and end time of the process and the exit status of the process. In addition, all command line arguments used to invoke the program are stored in support tables to 'program_run' in the structured tables 'argument', 'parameter', and 'flag'. Entries into 'program_run' can be grouped into batches for selective retrieval of analysis results.</p>
        <p>The 'sequence' table stores the raw sequence string itself, a unique hash code for the sequence string generated by the java.lang.String.hashCode() function, an identifier for the sequence (by default the GenBank accession.version number) and a description of the sequence (by default the NCBI definition line of the FASTA file). This table does not store meta data about the sequence, rather it is meant to store unique sequences used for computation. The system assumes additional information on the sequence is stored elsewhere. The uniqueness is enforced by ensuring all sequences have distinct hash codes, description and identifiers.Support tables for sequence have been created to enable the analysis of sub-sequences of a larger input sequence. The subsequence relationship to the sequence is stored in the 'subseq' and 'seq_has_subseq' relations. These tables are useful for 'sliding window' analyses or when focusing in on small regions of interest of a larger input sequence.</p>
        <p>The 'pegasys_result' table stores the results of the computations. It has attributes for a computational evidence type, a database reagent (if the result is from similarity searches or uses a particular model in <italic>ab initio </italic>predictions), the strand, start and end positions of the computational feature, a score and a statistic for the computational feature and a free-text description of the feature. If available, the strand, start and end position on the target sequence of an alignment are also recorded. To support hierarchical computational evidences, the table has a 'parent_id' that is a self-referential foreign key. This enables relating a particular row entry in the table to another row in the table. Theoretically, the table supports infinite nesting of hierarchical data types, although in practice results are no more than 2 levels deep.</p>
        <p>The support tables for 'pegasys_result' allow cross-referencing of ids. For example, the system models the concept of linking out an identifier from the result of a database search so that the full sequence and meta data of that sequence can be easily retrieved. This cross-referencing of a 'pegasys_result' to an identifier is stored in the 'result_has_xref' relation. The type of identifier is labeled by a controlled vocabulary so that one can query on a particular type of cross-reference (such as accession number) as well as add a new type of cross-reference to the system. Additional support tables to 'pegasys_result' are: 'database-format', 'database_reagent' and 'evidence-type'. Each of these tables stores controlled nomenclature that is referenced by 'pegasys_result'. The 'database-format' contains values such as blast, fasta, and genscan for BLAST formatted, FASTA formatted and Genscan training model respectively. The 'database_reagent' table stores the names and descriptions of sequence databases and statistical models that are used in the analysis, so that a user can query the Pegasys database for results from a particular database reagent. This structure also allows adding new database reagents into the system seamlessly. The 'evidence-type' table stores an ontology of computational evidence types, for example 'blastn_hit' or 'genscan_exon'. For each program that is part of the Pegasys system, the computational evidence(s) that it outputs must be recorded in the 'evidence-type' table prior to its use.</p>
      </sec>
      <sec>
        <title>Database API</title>
        <p>To communicate programmatically with the database, we have created a modular application programming interface (API). The <bold>PegasysDB </bold>class contains public methods for insertion and retrieval of sequences, analysis results and sets of results (from different programs) on a particular sequence. Application developers that wish to access data from a Pegasys database can use these high-level methods to rapidly store and access data in a straightforward manner without having to study the underlying schema of the database. The database API uses the PostgreSQL JDBC driver and so is backend relational database management system (RDBMS) independent.</p>
      </sec>
    </sec>
    <sec>
      <title>Adaptors</title>
      <p>We have implemented several adaptors for exporting data from a <bold>PegasysProgram </bold>or set of <bold>PegasysPrograms </bold>that contain analysis results. The derived <bold>PegasysAdaptor </bold>classes all implement a print method to output data in a specific format. We currently have derived PegasysAdaptor classes for GAME XML for import into Apollo [<xref ref-type="bibr" rid="B11">11</xref>] and GFF [<xref ref-type="bibr" rid="B9">9</xref>] which can be imported into numerous tools and servers such as the Distributed Annotation System [<xref ref-type="bibr" rid="B14">14</xref>] (DAS) and Gbrowse [<xref ref-type="bibr" rid="B26">26</xref>]. The adaptor architecture is extensible and easily allows the development and inclusion of new adaptors for additional formats. The <bold>PegasysAdaptor </bold>classes serve as an important bridge from the Pegasys data structure to other well-used standards and permits interoperability between data computed using Pegasys and many other bioinformatics tools and databases.</p>
    </sec>
    <sec>
      <title>Parallelism</title>
      <p>Our local installation of Pegasys runs on a 28 CPU distributed memory compute cluster that runs the OpenPBS parallel batch server [<xref ref-type="bibr" rid="B27">27</xref>]. We have implemented 'serial' parallelism into the system meaning that each application is a serial process, but many serial processes can be run in parallel. It is important to note that this is distinct from parallelism where a single application is itself implemented using a message passing library that can use many distributed processors in a compute cluster environment. To enable serial parallelism, we implemented a Runnable thread class in the Pegasys application layer that can navigate a command line argument of a <bold>PegasysProgram</bold>, and create a script at runtime that is used to submit a job to a PBS job queue. To monitor job progress, we implemented a Java server called <bold>QstatServer</bold>, that registers each job sent to the PBS job queue. The <bold>QstatServer </bold>maintains a hash table of jobs in the queue and informs the Pegasys application layer when a particular job has terminated. This architecture enables the Pegasys application server to execute jobs in sequence or in parallel according to the structure of the DAG that was sent by the client.</p>
    </sec>
    <sec>
      <title>Pegasys and Java</title>
      <p>The Pegasys system is implemented in the Java programming language. Java offers robust data typing that facilitates object-oriented programming in its truest form. The principles and advantages of object-oriented design are well documented in the software engineering literature (see [<xref ref-type="bibr" rid="B28">28</xref>]). Java is becoming widely adopted in the bioinformatics software domain. For example, the Ensembl database has a Java API to programmatically access genome annotations [<xref ref-type="bibr" rid="B29">29</xref>]. The Biojava toolkit [<xref ref-type="bibr" rid="B30">30</xref>] is an extensive set of packages written in Java for sequence manipulation, analysis and processing. The Apollo genome editor [<xref ref-type="bibr" rid="B11">11</xref>], that we use with Pegasys, allows biologists and bioinformaticians to edit and create annotations in a sophisticated GUI and is written in Java. We have integrated the Biojava toolkit into Pegasys for manipulation of sequence files as well as parsing of BLAST output. Using Java also allows us to make use of the JDBC library for database connectivity that facilitates standard database interactions independent of the RDBMS engine. To enable parallelism, we made use of the robust Thread and Runnable classes that allow development of multi-threaded programs.</p>
      <p>We have designed Pegasys in a layered architecture that consists of independent Java packages that can easily be imported into any external Java application that wishes to make use of them. These packages are well described in the Pegasys user manual, available at: <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.ubc.ca/pegasys/"/>. Implementing Pegasys in Java has brought the system strength and robustness that would not have been attainable with using a scripting language. Pegasys provides a Java alternative to existing Perl-based sequence analysis systems such as GenDB [<xref ref-type="bibr" rid="B3">3</xref>] and BioPipe [<xref ref-type="bibr" rid="B31">31</xref>].</p>
    </sec>
    <sec>
      <title>The Graphical User Interface</title>
      <p>The Pegasys graphical user interface (GUI) is designed for ease of use while maximizing functionality. When the client is started, the user sees a simple three pane design (see Figure <xref ref-type="fig" rid="F4">4</xref>). On left of the screen is a list of programs (the 'Tool Box') available to the user. The list is retrieved from the server as an XML configuration file when the client starts, ensuring all the programs that are available to the user from the client are available on the server. The canvas for drawing the workflow is on the upper right side of the screen, and on the bottom of the screen there is a console to view feedback from the client program.</p>
      <p>The structure of the workflow the user creates on the canvas mirrors the structure of the DAG (see The Pegasys data structure section). The nodes of this DAG can either be input files, output files, or a program, while the edges that connect the nodes manage the flow of input and output information. For example, the Genscan program node can produce many types of outputs, a list of nucleotide FASTAs of predicted transcripts, or a list of amino acid FASTAs of the protein products. If a user connects a BLASTP node to this Genscan node, then the edge between these two nodes can be used to get the list of amino acid FASTAs from the Genscan node as input for the BLASTP node.</p>
      <p>During the creation of the workflow, the user can modify the parameters of the analysis programs by double-clicking a node. This opens a Node Properties dialogue. An example for BLAST is pictured in Figure <xref ref-type="fig" rid="F5">5</xref>. The input/output types for each edge must be set during the creation of the workflow. This is done through the Edge Properties dialogue (see Figure <xref ref-type="fig" rid="F6">6</xref>).</p>
      <p>When the user has finished creating the workflow, it can be saved as an XML file representing the DAG. This XML file stores all the parameters for the nodes and edges that have been set by the user during the creation of the DAG. This file can be kept on the local hard drive and retrieved for later modification or distribution, or sent to the server to be executed on the compute cluster. The saved DAG can also be sent to the server using the command-line Java client for high-throughput, or automated processing. When the processing is complete, the results are sent back to the GUI client to be saved as text files.</p>
      <p>To ensure that the user's workflow is syntactically correct, the Pegasys client validates the workflow in real time. As the user draw nodes and edges, they are validated for correctness based on their requirements. For example, if a Program Node has a required parameter that is not filled in, the Pegasys client will display that node with a red 'X' beside it. Once this required parameter is filled in, the red 'X' will turn into a green tick mark, indicating the correctness of this node. Invalid edges are displayed in red, while correct ones are displayed in black. Typically, edges will be invalid if the 'output' and 'input' values of the edges are not set or do not match. If the workflow has a red edge or a node marked with a red 'X', the Pegasys client will not allow the user to send the workflow to the server and will output a warning to the 'Console' area.</p>
      <p>The GUI component of the Pegasys system is implemented in C++, using QT graphical libraries [<xref ref-type="bibr" rid="B32">32</xref>]. The QT libraries offer a "write once compile anywhere" approach. Because the QT components are natively compiled for its target operating system, GUI components written in C++/QT have a more native look and feel and give fast response times to the user. In addition, C++/QT can be compiled on all the major operating systems, giving it nearly the same level of portability as Java and facilitating the distribution of the Pegasys GUI client for most platforms.</p>
      <sec>
        <title>XML configuration files</title>
        <p>Communication between the client and server is mediated through XML files. There are three key XML files in the Pegasys client. The first XML file, the Pegasys configuration file (PegasysConfig.xml), keeps track of the system settings for default output directories on the server, queuing time for the scheduler, location of Pegasys Java jar files, and database information. This file also contains the path to the second XML file – the program list file which list all of the programs and their associated parameters that are currently available on the Pegasys server (ProgramList.xml). This file needs to be updated whenever a new module is added to the server, or the parameters of an existing module are changed. It is kept on the server and is transmitted to the client every time it starts up to inform the users of the available programs on the server and their associated parameters.</p>
        <p>The third XML file is the textual representation of the workflow. This file is generated by saving the workflow using the client. It can be sent to the server where it is parsed and then executed, or it can be re-opened at a later time for further modification. For each node on the canvas, its parameters, flags, and coordinates on the canvas are recorded in the DAG XML file. Edges have their start and end nodes recorded.</p>
        <p>Communication via XML is one of the standard ways of disseminating information on the Internet. Both Java for the backend and QT for the client have ready-made parsers for XML. This allowed us to rapidly build the software components that exchange information between the client and the server.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>To illustrate the flexibility of Pegasys for diverse analyses, we chose three workflows to demonstrate as use cases for the system. The simplest workflow takes an input sequence, runs a single analysis on this sequence and saves the unprocessed results.</p>
    <p>Figure <xref ref-type="fig" rid="F4">4</xref> shows an example of detecting repeats in a genomic sequence using RepeatMasker. In this example, the unprocessed results are written to a text file. This example is almost as if RepeatMasker were run locally on the command line, except that all information about the parameters used, the input sequence and the results are logged to the Pegasys database.</p>
    <p>Figure <xref ref-type="fig" rid="F7">7</xref> shows a workflow that has two inputs. The first is a FASTA-formatted nucleotide sequence file. This file is used as input to 'formatdb' – an application that transforms FASTA-formatted databases into a format that can be used by BLAST. The second input is a query sequence that will be used to search the newly formatted database using BLAST. The results of the search are outputted in a GFF-formatted text file.</p>
    <p>Figure <xref ref-type="fig" rid="F8">8</xref> shows a workflow that would be suitable for annotation of eukaryotic genomic sequence. The output of this workflow would serve as the input for an annotation tool like Apollo. The DAG branches after the input sequence File node into a sub-DAG of analyses that work on the input as is and a sub-DAG that analyzes the input sequence that is masked for repeats with RepeatMasker. The unmasked sequence is analysed for tRNAs using tRNAscan-SE, and for protein coding genes using <italic>ab initio </italic>gene predictors Genscan and HmmGene. The masked sequence is searched against a database of curated proteins using BLASTX and against a database compiled from ESTs, full-length cDNAs and mRNA sequences (dbTranscript). The results from the latter search are further processed by an application (bt2fasta) that filters all hits based on taxonomy (in this case the user-inputted NCBI taxonid of the source organism of the input sequence) and retrieves their full sequences. This results in an organism-specific database of FASTA formatted sequences consisting of the BLASTN against dbTranscript hits. The unmasked input sequence is then used as input to Sim4, which in turn aligns the input sequence to the entries in the organism specific database. Results for all analyses are then integrated into a GAME XML file for further interpretation using Apollo. The Pegasys XML DAG file that includes the parameters for all programs is available for download at <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.ubc.ca/pegasys/"/>.</p>
    <p>These use cases provide good examples of how Pegasys can be used in sequence-based bioinformatics analyses. The system itself is by no means limited to these examples. In theory any Unix program or script can be incorporated into the system and Pegasys could be used for workflows for systems administration, or other high-level scripting.</p>
    <sec>
      <title>Comparison with other systems</title>
      <p>As mentioned above, there are other systems that are similar to Pegasys in philosophy and approach. The DiscoveryNet platform [<xref ref-type="bibr" rid="B33">33</xref>] is a system that integrates bioinformatics tools based on Grid computing technologies. This system is a 'middleware' system that can be used to create workflows of annotation tools. Pegasys differs from the DiscoveryNet approach in two major ways. First, Pegasys provides a rigorously defined data model for storing computational features that is mapped by a relational backend database. The use case for DiscoveryNet describes output in the form of text-based flat files. Storing the data in a database allows it to be mined using SQL for selective sub-sets of computational evidence and gives the user more control over what they are interpreting. Second, the Pegasys system is designed to create workflows on the fly using the GUI and XML. The DiscoveryNet genome annotation workflow was programmed and any new workflow would also require programming investment. DiscoveryNet uses the concept of web-services and distributed computing. The architecture of Pegasys is extensible to web service based analyses. We plan on adding the capability of making remote calls to application servers and being able to integrate their analysis results into the Pegasys framework. This would give Pegasys the utmost flexibility and extensibility by combining the power of locally installed applications with remote web services.</p>
      <p>The Biopipe framework [<xref ref-type="bibr" rid="B31">31</xref>] describes a framework for protocol-based bioinformatics. The protocols are developed with the goal of creating reproducibility of results from computational analyses. This idea complements Pegasys quite well and we envisage using Pegasys to encode protocols by creating workflow standards generated from the Pegasys GUI for specific types of analyses (e.g. genome annotation or mass spectrometry peptide fragment identification) that we can distribute to the Pegasys user community. This will facilitate cross-comparison of results from similar bioinformatics experiments performed on data sources in different research labs, or by colleagues working in the same lab. In addition, Pegasys can be used to compare results of different protocols designed to address similar scientific problems.</p>
    </sec>
    <sec>
      <title>Future directions</title>
      <p>The work described in this paper has led us to consider many new challenges for future work on Pegasys. While the specifications, the data model and the software are mature enough to be used in a research setting, there remain many features and enhancements to the system that we are implementing in on-going work. We are adding new modules to Pegasys for distribution to the community. We are implementing Pegasys modules for the Infernal package that is driving the Rfam repository of families of functional RNAs [<xref ref-type="bibr" rid="B34">34</xref>]. Our genome annotation work to date has focused largely on eukaryotic systems, and we have therefore devoted most of our development time to applications tuned for eukaryotic animal analysis. We are adding modules for prokaryotic analysis (e.g. Glimmer [<xref ref-type="bibr" rid="B35">35</xref>,<xref ref-type="bibr" rid="B36">36</xref>]) and plants (Eugene [<xref ref-type="bibr" rid="B37">37</xref>]) to complement the current tools in Pegasys.</p>
      <p>From a software perspective, we hope to make Pegasys inter-operable and compliant with additional existing Open Source bioinformatics standards and specifications, namely BioSQL and Chado to allow data computed with Pegasys to be used in other systems that employ and interact with these specifications.</p>
    </sec>
  </sec>
  <sec>
    <title>Conclusions</title>
    <p>We have created a robust, modular, flexible software system for the execution and integration of heterogeneous biological sequence analyses. Pegasys can execute and integrate results from <italic>ab initio </italic>gene prediction, pair-wise and multiple sequence alignments, RNA gene detection and masking of repetitive sequences to greatly enhance and automate several levels of the biological sequence analysis process. The GUI allows users to create workflows of analyses by dragging and dropping icons on a canvas and joining processes together by connecting them with graphical 'edges'. Each analysis is highly configurable and users are presented with the option to change all parameters that are supported by the underlying program. Data integration is facilitated through the creation of a data model to represent computational evidence which is in turn implemented in a robust backend relational database management system. The database API provides programmatic access to the results through high-level methods that implement SQL queries on the data. The Pegasys system is currently driving numerous diverse sequence analysis projects and can be easily configured for others.</p>
    <p>Implemented in Java, the backend of Pegasys is inter-operable with a growing number of bioinformatics tools developed in Java. Pegasys can output text files in standard formats that can then be imported into other tools for subsequent analysis or viewing. We are continually adding to Pegasys through the development of additional modules and methods of data integration. The flexibility, customization, modularity and data integration capabilities of Pegasys make it an attractive system to use in any high throughput sequence analysis endeavour. We are releasing the source code of Pegasys under the GNU General Public License with the hope that the bioinformatics community worldwide will make use of our efforts and in turn contribute improvements in the spirit of Open Source.</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p>Pegasys is available at <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.ubc.ca/pegasys/"/> and is distributed under the GNU General Public License. Pegasys is designed to run on Unix based systems. Please consult the user manual (available with the distribution) for detailed installation and configuration instructions. The Pegasys server is written in Java and has the following dependencies: Java 1.3.1 or higher, PostgreSQL 7.3.*, JDBC driver for PostgreSQL 7.3.* and BioJava 1.2*. We have tested Pegasys on a distributed memory cluster (recommended) running OpenPBS 2.3.16 to administer the job scheduling. In theory an SMP system running OpenPBS should work, but this has not been tested. The system's analysis programs include the following: NCBI BLAST 2.2.3, WU BLAST 2.0, EMBOSS 2.7.1 (for Smith-Waterman implementation only), tRNAscan-SE 1.23, the LAGAN toolkit 1.2, Sim4, Genscan 1.0, HMMgene 1.1, MaskerAid (2001-11-08) and GeneSplicer. All of the analysis tools are freely available to academics. For details please consult the Pegasys manual available with the distribution. The server has successfully been deployed and tested on a 28 CPU Linux cluster running RedHat 7.3.</p>
    <p>The client is written in C++ and requires the QT libraries version 3.11, and gcc version 3.2.2. The client has been tested on Linux Mandrake9.x, Solaris 8, Mac OSX, Windows98/NT/ME/XP.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>SS was the lead architect of the system and contributed to the design and implementation and wrote most of this manuscript. DH was the principal developer and contributed to the design and implementation of the server and the GUI. JS contributed to the design of the project and provided requirements to the developers who were designing the system. GQ, GZ, JD, DL and TX all participated in the implementation of various components of the system. BFFO conceived of the project, guided its development, and edited this manuscript.</p>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgments</title>
      <p>BFFO would like to acknowledge GenomeBC for funding this project. DL is supported by the CIHR/MSFHR Strategic Training Program in Bioinformatics <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.bcgsc.ca"/>. TX is supported by CIHR grant #MOP-53259. We wish to thank Stefanie Butland, Joanne Fox and Yong Huang for critical reviews of this manuscript. We also thank Miroslav Hatas and Graeme Campbell for systems and software installation and maintenance for the Pegasys server.</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hubbard</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Barker</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Cameron</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Cuff</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Curwen</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Down</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Eyras</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Gilbert</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hammond</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Huminiecki</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Kasprzyk</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lehvaslaiho</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lijnzaad</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Melsopp</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Mongin</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Pettett</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Pocock</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Potter</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rust</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Searle</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Slater</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Spooner</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Stabenau</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stalker</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Stupka</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ureta-Vidal</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Vastrik</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Clamp</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>The Ensembl genome database project</article-title>
        <source>Nucleic Acids Res</source>
        <year>2002</year>
        <volume>30</volume>
        <fpage>38</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="pmid">11752248</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/30.1.38</pub-id>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mungall</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Misra</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Berman</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Frise</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Marshall</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Shu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kaminker</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Prochnik</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>CD</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Tupy</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Wiel</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Rubin</surname>
            <given-names>GM</given-names>
          </name>
          <name>
            <surname>Lewis</surname>
            <given-names>SE</given-names>
          </name>
        </person-group>
        <article-title>An integrated computational pipeline and database to support whole-genome sequence annotation</article-title>
        <source>Genome Biol</source>
        <year>2002</year>
        <volume>3</volume>
        <comment>RESEARCH0081. Epub 2002 Dec 23. Review</comment>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meyer</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Goesmann</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>McHardy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Bartels</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bekel</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Clausen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kalinowski</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Linke</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Rupp</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Pühler</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>GenDB – an open source genome annotation system for prokaryote genomes</article-title>
        <source>Nucleic Acids Res</source>
        <year>2003</year>
        <volume>31</volume>
        <fpage>2187</fpage>
        <lpage>2195</lpage>
        <pub-id pub-id-type="pmid">12682369</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gkg312</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yuan</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Ouyang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Suh</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Cheung</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Sultana</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Quackenbush</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Buell</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>The TIGR rice genome annotation resource: annotating the rice genome and creating resources for plant biologists</article-title>
        <source>Nucleic Acids Res</source>
        <year>2003</year>
        <volume>31</volume>
        <fpage>229</fpage>
        <lpage>233</lpage>
        <pub-id pub-id-type="pmid">12519988</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gkg059</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Korf</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Duan</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Brent</surname>
            <given-names>MR</given-names>
          </name>
        </person-group>
        <article-title>Integrating genomic homology into gene structure prediction</article-title>
        <source>Bioinformatics</source>
        <year>2001</year>
        <volume>17</volume>
        <fpage>S140</fpage>
        <lpage>S148</lpage>
        <comment>Suppl 1</comment>
        <pub-id pub-id-type="pmid">11473003</pub-id>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mathé</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Déhais</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pavy</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Rombauts</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Van Montagu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rouzé</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Gene prediction and gene classes in Arabidopsis thaliana</article-title>
        <source>J Biotechnol</source>
        <year>2000</year>
        <volume>78</volume>
        <fpage>293</fpage>
        <lpage>299</lpage>
        <pub-id pub-id-type="pmid">10751690</pub-id>
        <pub-id pub-id-type="doi">10.1016/S0168-1656(00)00196-6</pub-id>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yeh</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Lim</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Burge</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Computational inference of homologous gene structures in the human genome</article-title>
        <source>Genome Res</source>
        <year>2001</year>
        <volume>11</volume>
        <fpage>803</fpage>
        <lpage>816</lpage>
        <pub-id pub-id-type="pmid">11337476</pub-id>
        <pub-id pub-id-type="doi">10.1101/gr.175701</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rogic</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ouellette</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Mackworth</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Improving gene recognition accuracy by combining predictions from two gene-finding programs</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>1034</fpage>
        <lpage>1045</lpage>
        <pub-id pub-id-type="pmid">12176826</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.8.1034</pub-id>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="other">
        <article-title>General Feature Format</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.sanger.ac.uk/Software/formats/GFF/index.shtml"/>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="other">
        <article-title>GAME XML DTD</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://flybase.bio.indiana.edu/annot/gamexml.dtd.txt"/>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lewis</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Searle</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Gibson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lyer</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Richter</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wiel</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bayraktaroglir</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Crosby</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Kaminker</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Matthews</surname>
            <given-names>BB</given-names>
          </name>
          <name>
            <surname>Prochnik</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Smithy</surname>
            <given-names>CD</given-names>
          </name>
          <name>
            <surname>Tupy</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Rubin</surname>
            <given-names>GM</given-names>
          </name>
          <name>
            <surname>Misra</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mungall</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Clamp</surname>
            <given-names>ME</given-names>
          </name>
        </person-group>
        <article-title>Apollo: a sequence annotation editor</article-title>
        <source>Genome Biol</source>
        <year>2002</year>
        <volume>3</volume>
        <comment>RESEARCH0082. Epub 2002 Dec 23. Review.</comment>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="pmid">2231712</pub-id>
        <pub-id pub-id-type="doi">10.1006/jmbi.1990.9999</pub-id>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Schäffer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <fpage>3389</fpage>
        <lpage>3402</lpage>
        <pub-id pub-id-type="pmid">9254694</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dowell</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Jokerst</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Day</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Stein</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>The distributed annotation system</article-title>
        <source>BMC Bioinformatics</source>
        <year>2001</year>
        <volume>2</volume>
        <fpage>7</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="pmid">11667947</pub-id>
        <pub-id pub-id-type="doi">10.1186/1471-2105-2-7</pub-id>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>R Development Core Team</collab>
        </person-group>
        <article-title>R: A language and environment for statistical computing</article-title>
        <source>R Foundation for Statistical Computing, Vienna, Austria</source>
        <year>2003</year>
        <ext-link ext-link-type="uri" xlink:href="http://www.R-project.org"/>
        <comment>[ISBN 3-900051-00-3]</comment>
      </citation>
    </ref>
    <ref id="B16">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bedell</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Korf</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Masker Aid: a performance enhancement to RepeatMasker</article-title>
        <source>Bioinformatics</source>
        <year>2000</year>
        <volume>16</volume>
        <fpage>1040</fpage>
        <lpage>1041</lpage>
        <pub-id pub-id-type="pmid">11159316</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/16.11.1040</pub-id>
      </citation>
    </ref>
    <ref id="B17">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>WU BLAST 2.0</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://blast.wustl.edu/blast/README.html"/>
      </citation>
    </ref>
    <ref id="B18">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rice</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Longden</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Bleasby</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>EMBOSS: the European Molecular Biology Open Software Suite</article-title>
        <source>Trends Genet</source>
        <year>2000</year>
        <volume>16</volume>
        <fpage>276</fpage>
        <lpage>277</lpage>
        <pub-id pub-id-type="pmid">10827456</pub-id>
        <pub-id pub-id-type="doi">10.1016/S0168-9525(00)02024-2</pub-id>
      </citation>
    </ref>
    <ref id="B19">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Identification of common molecular subsequences</article-title>
        <source>J Mol Biol</source>
        <year>1981</year>
        <volume>147</volume>
        <fpage>195</fpage>
        <lpage>197</lpage>
        <pub-id pub-id-type="pmid">7265238</pub-id>
      </citation>
    </ref>
    <ref id="B20">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Burge</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Karlin</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Prediction of complete gene structures in human genomic DNA</article-title>
        <source>J Mol Biol</source>
        <year>1997</year>
        <volume>268</volume>
        <fpage>78</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="pmid">9149143</pub-id>
        <pub-id pub-id-type="doi">10.1006/jmbi.1997.0951</pub-id>
      </citation>
    </ref>
    <ref id="B21">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krogh</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Two methods for improving performance of an HMM and their application for gene finding</article-title>
        <source>Proc Int Conf Intell Syst Mol Biol</source>
        <year>1997</year>
        <volume>5</volume>
        <fpage>179</fpage>
        <lpage>186</lpage>
        <pub-id pub-id-type="pmid">9322033</pub-id>
      </citation>
    </ref>
    <ref id="B22">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brudno</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Do</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Cooper</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Davydov</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sidow</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Batzoglou</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>LAGAN and Multi-LAGAN: efficient tools for large-scale multiple alignment of genomic DNA</article-title>
        <source>Genome Res</source>
        <year>2003</year>
        <volume>13</volume>
        <fpage>721</fpage>
        <lpage>731</lpage>
        <pub-id pub-id-type="pmid">12654723</pub-id>
        <pub-id pub-id-type="doi">10.1101/gr.926603</pub-id>
      </citation>
    </ref>
    <ref id="B23">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Florea</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Hartzell</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Rubin</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>A computer program for aligning a cDNA sequence with a genomic DNA sequence</article-title>
        <source>Genome Res</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>967</fpage>
        <lpage>974</lpage>
        <pub-id pub-id-type="pmid">9750195</pub-id>
      </citation>
    </ref>
    <ref id="B24">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lowe</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>tRNAscan-SE: a program for improved detection of transfer RNA genes in genomic sequence</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <fpage>955</fpage>
        <lpage>964</lpage>
        <pub-id pub-id-type="pmid">9023104</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/25.5.955</pub-id>
      </citation>
    </ref>
    <ref id="B25">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pertea</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>GeneSplicer: a new computational method for splice site prediction</article-title>
        <source>Nucleic Acids Res</source>
        <year>2001</year>
        <volume>29</volume>
        <fpage>1185</fpage>
        <lpage>1190</lpage>
        <pub-id pub-id-type="pmid">11222768</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/29.5.1185</pub-id>
      </citation>
    </ref>
    <ref id="B26">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stein</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Mungall</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Shu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gaudy</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Mangone</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Day</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nickerson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Stajich</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Arva</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lewis</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>The generic genome browser: a building block for a model organism system database</article-title>
        <source>Genome Res</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>1599</fpage>
        <lpage>1610</lpage>
        <pub-id pub-id-type="pmid">12368253</pub-id>
        <pub-id pub-id-type="doi">10.1101/gr.403602</pub-id>
      </citation>
    </ref>
    <ref id="B27">
      <citation citation-type="other">
        <article-title>OpenPBS</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.openpbs.org"/>
      </citation>
    </ref>
    <ref id="B28">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Booch</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <source>Object-oriented Analysis and Design with Applications</source>
        <year>1994</year>
        <publisher-name>The Benjamin/Cummings Publishing Company</publisher-name>
      </citation>
    </ref>
    <ref id="B29">
      <citation citation-type="other">
        <article-title>Ensj</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.ensembl.org/java/"/>
      </citation>
    </ref>
    <ref id="B30">
      <citation citation-type="other">
        <article-title>BioJava.org</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.biojava.org"/>
      </citation>
    </ref>
    <ref id="B31">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hoon</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ratnapu</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Chia</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kumarasamy</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Juguang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Clamp</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Stabenau</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Potter</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Clarke</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Stupka</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Biopipe: a flexible framework for protocol-based bioinformatics analysis</article-title>
        <source>Genome Res</source>
        <year>2003</year>
        <volume>13</volume>
        <fpage>1904</fpage>
        <lpage>1915</lpage>
        <pub-id pub-id-type="pmid">12869579</pub-id>
      </citation>
    </ref>
    <ref id="B32">
      <citation citation-type="other">
        <article-title>Trolltech – Qt Overview</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.trolltech.com/products/qt/index.html"/>
      </citation>
    </ref>
    <ref id="B33">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rowe</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kalaitzopoulos</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Osmond</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ghanem</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>The discovery net system for high throughput bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>225</fpage>
        <lpage>225</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg1031</pub-id>
      </citation>
    </ref>
    <ref id="B34">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Griffiths-Jones</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bateman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Marshall</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Khanna</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Rfam: an RNA family database</article-title>
        <source>Nucleic Acids Res</source>
        <year>2003</year>
        <volume>31</volume>
        <fpage>439</fpage>
        <lpage>441</lpage>
        <pub-id pub-id-type="pmid">12520045</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gkg006</pub-id>
      </citation>
    </ref>
    <ref id="B35">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Delcher</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Harmon</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kasif</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Improved microbial gene identification with GLIMMER</article-title>
        <source>Nucleic Acids Res</source>
        <year>1999</year>
        <volume>27</volume>
        <fpage>4636</fpage>
        <lpage>4641</lpage>
        <pub-id pub-id-type="pmid">10556321</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/27.23.4636</pub-id>
      </citation>
    </ref>
    <ref id="B36">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kasif</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>Microbial gene identification using interpolated Markov models</article-title>
        <source>Nucleic Acids Res</source>
        <year>1998</year>
        <volume>26</volume>
        <fpage>544</fpage>
        <lpage>548</lpage>
        <pub-id pub-id-type="pmid">9421513</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/26.2.544</pub-id>
      </citation>
    </ref>
    <ref id="B37">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Schiex</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>A</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>P</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>EUGENE: An Eukaryotic Gene Finder That Combines Several Sources of Evidence</article-title>
        <source>In JOBIM</source>
        <year>2000</year>
        <fpage>111</fpage>
        <lpage>125</lpage>
      </citation>
    </ref>
  </ref-list>
  <sec sec-type="display-objects">
    <title>Figures and Tables</title>
    <fig position="float" id="F1">
      <label>Figure 1</label>
      <caption>
        <p><bold>Diagram showing the client/server model and layering of the Pegasys architecture. </bold>Arrows between the layers indicate a transfer of data. The workflow created by manipulating the GUI in the client is sent as a Pegasys DAG XML file to the server. The application layer then processes the XML file, and sends jobs to the job scheduling layer. The analyses are then executed and the results are stored in the database. The adaptor layer takes results stored in the <bold>PegasysResultSet </bold>data structure in memory in the application layer and can create output in GFF or GAME XML format. This file is then returned to the GUI where it can be digested by the user or input into a visualization tool.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-1"/>
    </fig>
    <fig position="float" id="F2">
      <label>Figure 2</label>
      <caption>
        <p><bold>Diagram showing an abstract representation of a Pegasys DAG. </bold>A): Consider <italic>v</italic>1: this could be an input sequence that is used by two sequence analysis programs <italic>v</italic>2 and <italic>v</italic>3. <italic>v</italic>4 is dependent on the output of both <italic>v</italic>2 and <italic>v</italic>3 and therefore cannot execute until <italic>v</italic>2 and <italic>v</italic>3 have completed. In this diagram, <italic>v</italic>2 and <italic>v</italic>3 will be executed in parallel as will <italic>v</italic>4 and <italic>v</italic>5. B): DAG in the case where <italic>v</italic>3 produces two instances of the expected output to <italic>v</italic>5. The sub-DAG rooted at <italic>v</italic>5 replicates itself (<italic>v</italic>5<italic>a </italic>and <italic>v</italic>5<italic>b</italic>) for each instance of its input. All of the new sub-DAGs are executed in parallel.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-2"/>
    </fig>
    <fig position="float" id="F3">
      <label>Figure 3</label>
      <caption>
        <p><bold>Diagram showing the relations of the Pegasys database model. </bold>There are three core tables to the database: sequence (shown in blue), program_run (shown in orange) and pegasys_result (shown in yellow). The meta tables for each of the three core tables are colour coded to match the corresponding core table. Foreign keys are indicated with 'FK' and indexed fields are marked with T.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-3"/>
    </fig>
    <fig position="float" id="F4">
      <label>Figure 4</label>
      <caption>
        <p><bold>Screenshot of the Pegasys GUI showing the three pane design. </bold>The visible pane is the canvas pane which allows the user to create a workflow by clicking and dragging icons corresponding to the programs available to the system. The icons can be connected to each other through edges. The parameters used for the execution of each program can be set by double clicking the icon and filling in the dialogue box that appears (see Figure <xref ref-type="fig" rid="F5">5</xref>). Expected inputs and outputs for the edge can be set by double clicking the edge and filling in the dialogue (see Figure <xref ref-type="fig" rid="F6">6</xref>). This workflow will run RepeatMasker on the sequence specified in the File node and write the results to a text file whose path is specified in the text output node. The RepeatMasker analysis itself is run on the compute server and the results are communicated back to the client.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-4"/>
    </fig>
    <fig position="float" id="F5">
      <label>Figure 5</label>
      <caption>
        <p><bold>Screenshot of the Node Properties dialogue window where users can input parameters for the analysis programs. </bold>There are three columns – the name of the parameter, its current value and a check box to indicate if this parameter is enabled. Disabled parameters will be excluded from the DAG XML, and consequently from the actual command that is executed on the server. All default values are set in the ProgramList.xml file that the server reads on startup.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-5"/>
    </fig>
    <fig position="float" id="F6">
      <label>Figure 6</label>
      <caption>
        <p><bold>Screenshot of the Edge Properties dialogue window where users set the inputs and outputs of an edge. </bold>The input/output values are selected with drop-down select bars so users can only select input/output types that are available to the two nodes. Incompatible input/output types for an edge are not allowed by the GUI and the user is alerted to the error. The input/output lists for each node are set in the ProgramList.xml file that the server reads on startup.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-6"/>
    </fig>
    <fig position="float" id="F7">
      <label>Figure 7</label>
      <caption>
        <p><bold>Workflow showing a BLAST pipeline. </bold>A FASTA formatted database is to be formatted for BLAST using 'formatdb'. A query sequence is then searched against this new database using BLAST. The results are written to a text file in GFF format.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-7"/>
    </fig>
    <fig position="float" id="F8">
      <label>Figure 8</label>
      <caption>
        <p><bold>Workflow for genome annotation. </bold>This workflow executes <italic>ab initio </italic>gene prediction, tRNA detection, repeat detection, sequence similarity searching against protein and transcript databases and alignments of transcripts to genomic sequence. Results for all of these analyses are integrated into a single GAME XML output file that can be inputted into Apollo, where a user can create annotations on the original input sequence.</p>
      </caption>
      <graphic xlink:href="1471-2105-5-40-8"/>
    </fig>
  </sec>
</back>
