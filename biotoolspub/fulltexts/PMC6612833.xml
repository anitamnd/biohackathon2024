<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6612833</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btz351</article-id>
    <article-id pub-id-type="publisher-id">btz351</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Ismb/Eccb 2019 Conference Proceedings</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Comparative and Functional Genomics</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>Minnow</italic>: a principled framework for rapid simulation of dscRNA-seq data at the read level</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Sarkar</surname>
          <given-names>Hirak</given-names>
        </name>
        <xref ref-type="aff" rid="btz351-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Srivastava</surname>
          <given-names>Avi</given-names>
        </name>
        <xref ref-type="aff" rid="btz351-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Patro</surname>
          <given-names>Rob</given-names>
        </name>
        <xref ref-type="corresp" rid="btz351-cor1"/>
        <!--<email>rob.patro@cs.stonybrook.edu</email>-->
        <xref ref-type="aff" rid="btz351-aff1"/>
      </contrib>
    </contrib-group>
    <aff id="btz351-aff1">Department of Computer Science, Stony Brook University, Stony Brook, NY, USA</aff>
    <author-notes>
      <corresp id="btz351-cor1">To whom correspondence should be addressed. <email>rob.patro@cs.stonybrook.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2019-07-05">
      <day>05</day>
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>05</day>
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>35</volume>
    <issue>14</issue>
    <fpage>i136</fpage>
    <lpage>i144</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2019. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2019</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btz351.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>With the advancements of high-throughput single-cell RNA-sequencing protocols, there has been a rapid increase in the tools available to perform an array of analyses on the gene expression data that results from such studies. For example, there exist methods for pseudo-time series analysis, differential cell usage, cell-type detection RNA-velocity in single cells, etc. Most analysis pipelines validate their results using known marker genes (which are not widely available for all types of analysis) and by using simulated data from gene-count-level simulators. Typically, the impact of using different read-alignment or unique molecular identifier (UMI) deduplication methods has not been widely explored. Assessments based on simulation tend to start at the level of assuming a simulated count matrix, ignoring the effect that different approaches for resolving UMI counts from the raw read data may produce. Here, we present <italic>minnow</italic>, a comprehensive sequence-level droplet-based single-cell RNA-sequencing (dscRNA-seq) experiment simulation framework. <italic>Minnow</italic> accounts for important sequence-level characteristics of experimental scRNA-seq datasets and models effects such as polymerase chain reaction amplification, cellular barcodes (CB) and UMI selection and sequence fragmentation and sequencing. It also closely matches the gene-level ambiguity characteristics that are observed in real scRNA-seq experiments. Using <italic>minnow</italic>, we explore the performance of some common processing pipelines to produce gene-by-cell count matrices from droplet-bases scRNA-seq data, demonstrate the effect that realistic levels of gene-level sequence ambiguity can have on accurate quantification and show a typical use-case of <italic>minnow</italic> in assessing the output generated by different quantification pipelines on the simulated experiment.</p>
      </sec>
      <sec id="s2">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">NSF</named-content>
          <named-content content-type="funder-identifier">10.13039/100000001</named-content>
        </funding-source>
        <award-id>CCF-1750472</award-id>
        <award-id>2018-182752</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">NSF</named-content>
          <named-content content-type="funder-identifier">10.13039/100000001</named-content>
        </funding-source>
        <award-id>1531492</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Over the past few years, advancement in massively parallel sequencing technologies has enabled analysis of genomes and transcriptomes at unprecedented accuracy and scale by dramatically reducing the cost of sequencing and assaying more properties of cells. These new technologies are rapidly evolving, and new assays are constantly being introduced. One of the most exciting and popular recent developments has been the creation of experimental protocols for assaying gene expression in thousands of individual cells (<xref rid="btz351-B11" ref-type="bibr">Hashimshony <italic>et al.</italic>, 2012</xref>), allowing scientists to capture a snapshot of the dynamic and complex biological systems at work.</p>
    <p>Individual cells are fundamental units of biological structures and functions, and understanding the dynamics of gene expression patterns is essential for understanding cell types, cell states and lineages. Single-cell gene expression studies have proven useful for unveiling rare cell types (<xref rid="btz351-B10" ref-type="bibr">Grün <italic>et al.</italic>, 2015</xref>), abnormal cell states in the development of disease (<xref rid="btz351-B30" ref-type="bibr">Trapnell, 2015</xref>) and transcriptional stochasticity (<xref rid="btz351-B4" ref-type="bibr">Buganim <italic>et al.</italic>, 2012</xref>), by giving unprecedented insights into the dynamics of gene expression. Specifically, the accuracy, sensitivity and throughput of droplet-based single-cell RNA-sequencing (dscRNA-seq) (<xref rid="btz351-B14" ref-type="bibr">Klein <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B18" ref-type="bibr">Macosko <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B38" ref-type="bibr">Zheng <italic>et al.</italic>, 2017</xref>) has been particularly useful to scientists for understanding cellular dynamics through pseudo-time inference (<xref rid="btz351-B25" ref-type="bibr">Qiu <italic>et al.</italic>, 2017</xref>), estimation of splicing dynamics [i.e. RNA-velocity (<xref rid="btz351-B15" ref-type="bibr">La Manno <italic>et al.</italic>, 2018</xref>)], population balance analysis (<xref rid="btz351-B14" ref-type="bibr">Klein <italic>et al.</italic>, 2015</xref>), spatial reconstruction to identify marker gene (<xref rid="btz351-B13" ref-type="bibr">Kiselev <italic>et al.</italic>, 2017</xref>; <xref rid="btz351-B27" ref-type="bibr">Satija <italic>et al.</italic>, 2015</xref>) and numerous other analyses.</p>
    <p>Most computational dscRNA-seq analyses pipelines work in multiple phases, the first of which is the generation of a gene-by-cell count matrix from raw sequencing data. This process includes identifying and correcting cellular barcodes (CBs) (to determine properly captured cells), mapping and alignment of the sequencing reads to the reference genome or transcriptome, and the resolution of unique molecular identifiers (UMIs) to determine the number of distinct pre-polymerase chain reaction (PCR) molecules sequenced from each gene within each cell. Subsequent downstream analysis of the count matrix is then used for a variety of different purposes, such as lineage estimation, clustering and cell-type identification, identifying marker genes, estimating splicing rates, etc. Traditionally, gene-count matrices have been used as a fundamental unit of measurement for these analyses, and most research has been focused on developing new tools and improving methods for higher-level analyses [e.g. &gt;90% of the tools described by <xref rid="btz351-B36" ref-type="bibr">Zappia <italic>et al.</italic> (2018)</xref> deal with post-quantification analyses]. Implicitly, these methods assume reliable and accurate input from the quantification phase.</p>
    <p>Considerable research has been conducted into developing generative models of the gene-count matrices for a single-cell experiment, and producing synthetic count data with known true phenotypes or labels. Many models have been proposed to capture various characteristics of single-cell experiments; e.g. modeling zero inflation (<xref rid="btz351-B24" ref-type="bibr">Pierson and Yau, 2015</xref>; <xref rid="btz351-B26" ref-type="bibr">Risso <italic>et al.</italic>, 2017</xref>), characterizing heterogeneity (<xref rid="btz351-B7" ref-type="bibr">Finak <italic>et al.</italic>, 2015</xref>) and inferring dropout rates (<xref rid="btz351-B33" ref-type="bibr">Wei and Jingyi, 2018</xref>). Building upon this modeling work, a number of different simulation tools for single-cell RNA-seq data have been introduced. Count-level simulation tools such as Splatter (<xref rid="btz351-B35" ref-type="bibr">Zappia <italic>et al.</italic>, 2017</xref>) and powersimR (<xref rid="btz351-B31" ref-type="bibr">Vieth <italic>et al.</italic>, 2017</xref>) use these generative models to directly simulate the gene-by-cell count matrices, and these simulators have been useful in developing and evaluating new methods for analyzing scRNA-seq data. However, that work has focused on simulating the gene-by-cell count matrices, rather than the raw sequencing reads that, when processed, give rise to this matrix. As such, these tools implicitly assume that the problem of estimating gene counts accurately from the raw sequencing data is relatively well-addressed. However, no principled tool is currently available for simulating the raw cell barcoded and UMI-tagged read sequences for validating and assessing the initial processing phases of dscRNA-seq analysis. In contrast, numerous tools and methods have been proposed (<xref rid="btz351-B8" ref-type="bibr">Frazee <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B9" ref-type="bibr">Griebel <italic>et al.</italic>, 2012</xref>; <xref rid="btz351-B16" ref-type="bibr">Li and Dewey, 2011</xref>) for read-level simulation of bulk-RNA-seq experiments. Although no simulation tool can perfectly recapitulate all of the characteristics and complexities of experimental data, these tools have been crucial in helping to drive the development of ever-more-accurate approaches for gene and transcript-level quantification from bulk-RNA-seq data.</p>
    <p>In this paper, we present <italic>minnow</italic>, a comprehensive framework to generate read-level simulated data for dscRNA-seq experiments. <italic>Minnow</italic> accounts for many important aspects of tagged-end single-cell experiments, and models these effects at the sequence level. It models the process of UMI and CB tagging, molecular PCR amplification (including PCR errors and deviations from perfect efficiency), molecular fragmentation and sequencing. <italic>Minnow</italic> can generate synthetic sequencing reads that mimic other important aspects of experimental data, such as realistic degrees of gene-ambiguous sequencing fragments. Using the <italic>minnow</italic> simulation framework, we demonstrate how various dscRNA-seq quantification pipelines perform in generating gene-by-cell count matrices when validated on synthetic data with known ground truth. We describe and analyze the effect of modeling important characteristics of real experimental dscRNA-seq data, and show how sequence-level ambiguities like those present in real experimental dscRNA-seq data pose quantification challenges to existing pipelines.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <sec>
      <title>2.1 The <italic>minnow</italic> framework</title>
      <p>For droplet-based protocols (<xref rid="btz351-B14" ref-type="bibr">Klein <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B18" ref-type="bibr">Macosko <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B38" ref-type="bibr">Zheng <italic>et al.</italic>, 2017</xref>), mRNA molecules are attached to a CB and an UMI. After reverse transcription within a droplet, the barcoded, tagged-end complementary DNA (cDNA) undergoes amplification and fragmentation, followed by sequencing in a short read sequencing machine (illumina). Due to the small amount of biological material in each cell, such protocols typically undergo many cycles of PCR, making PCR sampling effects considerable and necessitating the use of UMIs to discard reads sequenced from duplicate molecules (those that derive from the same pre-PCR transcript). The sequence files generated by such protocols result in paired-end reads and have two core components. One end (typically read 1) of each read pair contains the concatenated nucleotide sequence of the CB and UMI, while the other end (typically read 2) is the cDNA representation of the mRNA molecule, usually as sequenced from the <inline-formula id="IE1"><mml:math id="IM1"><mml:mrow><mml:mn>3</mml:mn><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> end (<xref rid="btz351-B38" ref-type="bibr">Zheng <italic>et al.</italic>, 2017</xref>). In essence, the scRNA-seq experiment is actually much like a single end RNA-seq protocol, where the CB contains the cell specific information and the UMI is used to identify PCR duplicates.</p>
      <p>The core of <italic>minnow</italic> can be described as a composition of three steps; (i) selection of transcript, concordant with the target count matrix and properties of experimental data, for the initial pool of simulated molecules, (ii) simulation of CB and UMI tagging and (iii) simulation of PCR, fragmentation and sequencing. <italic>Minnow</italic> starts by consuming a gene-count matrix as input that provides the estimated number of distinct molecules within the sample corresponding to each gene within each cell. Then, based on a carefully chosen distribution of transcript isoforms, <italic>minnow</italic> distributes simulated molecules (transcripts) to each gene within each cell. Taking these as the initial biological pool of molecules to be sequenced, <italic>minnow</italic> then tags these molecules with cell barcodes and UMIs. Finally, it simulates the PCR, fragmentation and sequencing process. In general, since PCR is an exponential stochastic branching process, it generates more amplified molecules than reads obtained in a real experiment. We simulate the sequencing process by subsampling from the final amplified pool of PCR generated molecules to a sequencing depth specified by the user. During this generation process, we have tried to capture core attributes of single-cell RNA-seq at different levels, such as preserving the proportion of ambiguously mapped reads, simulating the PCR amplification bias, introducing sequence error using different error models, etc. It is important to note that <italic>minnow</italic> does not contain a generative model in itself, and depends on the matrix given as input. Therefore if a count matrix produced from a simple generative model is used, <italic>minnow</italic> will produce read sequences consistent with those counts while if an experimental count matrix is provided as input, artifacts such as doublets, empty droplets, etc. are likely to be reflected in the generated reads. While the development of a generative model that accounts for all of the nuances of experimental droplet-based scRNA-seq data are still an active area of research, <italic>minnow</italic> focuses, principally, on how to generate a realistic set of sequencing reads consistent with the provided count matrix. To the best of our knowledge at the time of writing this tool, <italic>minnow</italic> is the only comprehensive framework that simulates droplet-based scRNA-seq dataset at read level.</p>
      <p>Presently, <italic>minnow</italic> focuses only on droplet-based single-cell protocols. So, for the rest of the paper, we refer to such datasets as scRNA-seq data. Following the general principle of common bulk-RNA-seq simulators (<xref rid="btz351-B8" ref-type="bibr">Frazee <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B16" ref-type="bibr">Li and Dewey, 2011</xref>), <italic>minnow</italic> follows a two-step process of simulation. If the experimental data (the raw <monospace><monospace>FASTQ</monospace></monospace> files) is provided, then we use <italic>alevin</italic> (<xref rid="btz351-B22" ref-type="bibr">Patro <italic>et al.</italic>, 2017</xref>; <xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>) to obtain mapping and quantification results, and to learn a number of other auxiliary parameters that we use to generate a realistic simulation. To be specific, <italic>alevin</italic> generates a gene-by-cell count matrix, and other parameters, that <italic>minnow</italic> (invoked in <monospace>alevin-mode</monospace>) can directly consume. In the absence of a specific experimental dataset, <italic>minnow</italic> makes use of the <italic>Splatter</italic> (<xref rid="btz351-B35" ref-type="bibr">Zappia <italic>et al.</italic>, 2017</xref>) tool to generate a gene-by-cell count matrix (when invoked in <monospace>splatter-mode</monospace>). While in the present manuscript, we have considered the results related to <italic>Splatter</italic>, we note that <italic>minnow</italic> can be paired with any such method (<xref rid="btz351-B32" ref-type="bibr">Wang <italic>et al.</italic>, 2018</xref>) that realistically generates cell to gene-count matrix. Additionally, <italic>minnow</italic> accepts other attributes of a scRNA-seq experiment, starting from a set of pre-specified cell barcodes, UMIs, the number of per-cell molecules and cell-level cluster information. Subsequently, <italic>minnow</italic> generates the paired-end <monospace>FASTQ</monospace> files, along with the ‘true’ gene-count matrix, cell names and gene names. The <monospace>FASTQ</monospace> files follow the common 10×-chromium (<xref rid="btz351-B38" ref-type="bibr">Zheng <italic>et al.</italic>, 2017</xref>) (compatible with both versions 2 and 3) format, and can be consumed by any downstream tool capable of processing such files.</p>
      <sec>
        <title>2.1.1 Sampling from gene-count matrix</title>
        <p>The main input to <italic>minnow</italic> is the gene-count matrix <inline-formula id="IE2"><mml:math id="IM2"><mml:mi mathvariant="script">M</mml:mi></mml:math></inline-formula>, where each element <italic>m<sub>ij</sub></italic> denotes the number of UMIs (either estimated or simulated by a count-level simulator) for gene <italic>g<sub>j</sub></italic> in cell <italic>i</italic>. How the gene-count matrix is used to select transcripts depends upon whether the provided input is estimated empirically from an experimental dataset or is a simulated count matrix.</p>
        <p><italic>Minnow</italic> takes the complete expression of a particular cell as a vector, and treats the normalized values as the parameters <inline-formula id="IE3"><mml:math id="IM3"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold-italic">α</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mo>α</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mo>α</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="italic">iM</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> of a multinomial distribution <italic>f<sub>i</sub></italic>. The probability <italic>α<sub>ij</sub></italic> denotes the total probability of selecting some pre-PCR transcript to derive from gene <italic>g<sub>j</sub></italic> in this simulated cell. Then, <italic>minnow</italic> samples <italic>c<sub>i</sub></italic> such molecules from the distribution <italic>f<sub>i</sub></italic>, where <inline-formula id="IE4"><mml:math id="IM4"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mi>j</mml:mi></mml:munder><mml:mrow><mml:msub><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>. This characterization allows the input matrix to have either integral or non-integral abundances—the former is important in the case that the count matrix is derived from a tool such as <italic>alevin</italic>, that may yield non-integral gene counts when attempting to account for gene multimapping reads. After this sampling step, <italic>minnow</italic> ends up with a <italic>ground truth</italic> gene-count matrix of integral counts that we denote as <inline-formula id="IE5"><mml:math id="IM5"><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
        <p><italic>A major challenge</italic> for generating simulated sequences from gene counts is the lack of information about the transcript-level expression for a particular gene. Simulating the amplification and fragmentation of molecules and sequencing of fragments requires selecting which specific molecules (i.e. transcripts) contribute to the expression of each gene. Since most genes have multiple isoforms, which can share exons and vary widely in their sequence composition, there is no such thing as the canonical sequence at the level of a gene. However, the molecules selected for amplification, fragmentation and sequencing can have a tremendous impact on the specific characteristics of the simulated dataset (e.g. how many reads map ambiguously back to the genome, and the resulting difficulty of quantification). Full-length scRNA-seq protocols [such as SMART-seq (<xref rid="btz351-B23" ref-type="bibr">Picelli <italic>et al.</italic>, 2013</xref>)], aim to achieve uniform coverage over transcripts, meaning that numerous reads covering distinctive splice junctions are often sequenced, and transcript-level abundances can often be assessed (<xref rid="btz351-B1" ref-type="bibr">Arzalluz-Luque and Conesa, 2018</xref>). This means that bulk-RNA-seq simulators (<xref rid="btz351-B8" ref-type="bibr">Frazee <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B16" ref-type="bibr">Li and Dewey, 2011</xref>), though by no means a perfect match for such protocols, can plausibly be used for generating read-level simulated data. On the contrary, for tagged-end protocols, such frameworks do not seem to replicate the fundamental properties of real data (<xref rid="btz351-B34" ref-type="bibr">Westoby <italic>et al.</italic>, 2018</xref>).</p>
        <p><italic>Minnow</italic> addresses this challenging problem in one of two ways, depending upon whether <inline-formula id="IE6"><mml:math id="IM6"><mml:mi mathvariant="script">M</mml:mi></mml:math></inline-formula> is an empirical estimate or a simulated count matrix. When the relevant parameters are trained from an experimental dataset, <italic>minnow</italic> follows an empirical estimation method to determine individual counts for candidate isoforms as described in Section 2.1.4. On the other hand, when the experimental data are not present (e.g. when using <italic>Splatter</italic> to generate <inline-formula id="IE7"><mml:math id="IM7"><mml:mi mathvariant="script">M</mml:mi></mml:math></inline-formula>), it uses previously estimated measures of sequence-level ambiguity from similar experiments in the same species. Alternatively, when neither of the above cases apply, <italic>minnow</italic> can optionally use a Weibull distribution, with a pre-specified shape parameter 0.44 and scale parameter 0.6 to determine the individual dominance of candidate isoforms [motivated by <xref rid="btz351-B12" ref-type="bibr">Hu <italic>et al.</italic> (2017)</xref>].</p>
      </sec>
      <sec>
        <title>2.1.2 Indexing inherent sequence ambiguity using read-length de Bruijn graphs</title>
        <p>To replicate the gene-level ambiguity present in real scRNA-seq datasets (<xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>), <italic>minnow</italic> constructs an index that maps segments of the underlying transcriptome to the number of distinct transcripts (and genes) in which they occur. This allows selecting transcripts for amplification and fragmentation in a manner that will lead to realistic levels of ambiguity in the resulting simulated reads.</p>
        <p>Specifically, <italic>minnow</italic> starts with a pre-constructed de Bruijn graph (<xref rid="btz351-B37" ref-type="bibr">Zerbino and Birney, 2008</xref>), with a <italic>k</italic>-mer size set to the read length, built over the reference transcriptome. The de Bruijn graph is commonly specified as a graph <inline-formula id="IE8"><mml:math id="IM8"><mml:mrow><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, built over the collection of <italic>k</italic>-mers (strings of length <italic>k</italic>) from an underlying set of sequences <italic>S</italic> (in the case of <italic>minnow</italic>, the set of transcripts), with an assumption that all members of <italic>S</italic> are at least of length <italic>k</italic>. Given a specified <italic>k</italic>, the set of vertices of <italic>G</italic> are <italic>k</italic>-mers from the members of <italic>S</italic>. An edge exists between two nodes of <italic>G</italic> if and only if there exists a <inline-formula id="IE9"><mml:math id="IM9"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>-mer in any of the underlying sequences of <italic>S</italic> containing both of these <italic>k</italic>-mers. Given such a representation, any sequence in <italic>S</italic> can be spelled out as a <italic>path</italic> in <italic>G</italic>.</p>
        <p>Rather than the de Bruijn graph, <italic>minnow</italic> makes use of the compacted de Bruijn graph. In a compacted de Bruijn graph <italic>G<sub>c</sub></italic>, unlike in the de Bruijn graph, an edge can be of length greater than <inline-formula id="IE10"><mml:math id="IM10"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, and is obtained by compressing or compacting non-branching paths in <italic>G</italic> to form unitigs [for detail, see Minkin <italic>et al.</italic> (2016)). We adopted TwoPaCo (<xref rid="btz351-B20" ref-type="bibr">Minkin <italic>et al.</italic>, 2016</xref>) to efficiently construct the compacted colored de Bruijn graph, which can be directly converted to a graphical fragment assembly (GFA) file. The color in the compacted de Bruijn graph also captures the label of the reference sequence (transcript) as an attribute (color) of the <italic>k</italic>-mer, and only paths having the same color are compacted into unitigs. The GFA file represents the compacted edges as a set of unitigs <inline-formula id="IE17a"><mml:math id="IM11"><mml:mrow><mml:mo> </mml:mo><mml:mi mathvariant="script">U</mml:mi><mml:mo> </mml:mo></mml:mrow></mml:math></inline-formula>, and stores the relation between the set of transcript sequences <italic>T</italic> and <inline-formula id="IE17b"><mml:math id="IM12"><mml:mrow><mml:mo> </mml:mo><mml:mi mathvariant="script">U</mml:mi><mml:mo> </mml:mo></mml:mrow></mml:math></inline-formula> by describing how each transcript is spelled out by a path of the enumerated unitigs. Specifically <italic>t<sub>i</sub></italic> can be represented by an ordered list (i.e. path) of unitigs: <inline-formula id="IE11"><mml:math id="IM13"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:msub><mml:mo>〉</mml:mo><mml:mo>,</mml:mo><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub><mml:mo>〉</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>〉</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE12"><mml:math id="IM14"><mml:mrow><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:mi mathvariant="script">U</mml:mi></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE13"><mml:math id="IM15"><mml:mrow><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mo>+</mml:mo><mml:mo>,</mml:mo><mml:mo>−</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>. The ‘+’ and ‘–’, respectively, specify the orientation of the unitig as traversed in the path, with ‘+’ meaning the unitig appears unchanged and the ‘–’ meaning the unitig appears in the reverse-complement orientation within the path. When concatenated with proper strandedness (and accounting for the length <italic>k</italic> overlap between successive unitigs), the series of unitigs in <inline-formula id="IE14"><mml:math id="IM16"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> reconstructs the sequence of <italic>t<sub>i</sub></italic> exactly. Given any ordered list <inline-formula id="IE15"><mml:math id="IM17"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, we observe that the locations of occurrence and orientation of a unitig within <inline-formula id="IE16"><mml:math id="IM18"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> can be trivially extracted.</p>
        <p>With respect to <italic>minnow</italic>, the relevant information from the GFA file is a combination of the two sets; the set of unitigs <inline-formula id="IE17"><mml:math id="IM19"><mml:mrow><mml:mo> </mml:mo><mml:mi mathvariant="script">U</mml:mi><mml:mo> </mml:mo></mml:mrow></mml:math></inline-formula> and the set of transcript sequences <italic>T</italic> (stored as paths of unitigs). Given the set of unitigs <inline-formula id="IE17c"><mml:math id="IM20"><mml:mrow><mml:mo> </mml:mo><mml:mi mathvariant="script">U</mml:mi><mml:mo> </mml:mo></mml:mrow></mml:math></inline-formula>, <italic>minnow</italic> only considers the unitigs that occur within a <monospace>MAX_FRAGLEN</monospace> base pair distance (1000 bp by default) from the <inline-formula id="IE18"><mml:math id="IM21"><mml:mrow><mml:mn>3</mml:mn><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> end of at least one transcript. This imposes a primary constraint of the tagged-end scRNA-seq protocol, and restricts <italic>minnow</italic> to generate fragments no longer than <monospace>MAX_FRAGLEN</monospace>. The intuition behind fixing an <monospace>MAX_FRAGLEN</monospace> arises from the fragment length limit of a real illumina sequencer (<xref rid="btz351-B3" ref-type="bibr">Bronner <italic>et al.</italic>, 2013</xref>).</p>
        <p><italic>Minnow</italic> uses <inline-formula id="IE19"><mml:math id="IM22"><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula> and <inline-formula id="IE17d"><mml:math id="IM23"><mml:mrow><mml:mo> </mml:mo><mml:mi mathvariant="script">U</mml:mi><mml:mo> </mml:mo></mml:mrow></mml:math></inline-formula> to construct a unitig-level mapping, describing which transcripts contain each unitig, and how the unitig covers the transcript in terms of its position and orientation. Recall that for the de Bruijn graph construction we select the size of each <italic>k</italic> – <italic>mer</italic> to be the read length. This implies that each unitig is at least as long as a read and therefore, capable of generating a sequencing read that could then align back to all the transcripts containing that unitig. The mapping for a particular unitig <inline-formula id="IE20"><mml:math id="IM24"><mml:mrow><mml:mi>u</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">U</mml:mi></mml:mrow></mml:math></inline-formula> is given as <inline-formula id="IE21"><mml:math id="IM25"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">t</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE22"><mml:math id="IM26"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">t</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> is set of triplets of the form <inline-formula id="IE23"><mml:math id="IM27"><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE24"><mml:math id="IM28"><mml:mrow><mml:mo>∀</mml:mo><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">t</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, we observe <inline-formula id="IE25"><mml:math id="IM29"><mml:mrow><mml:mo>〈</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo><mml:mo>∈</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Then <inline-formula id="IE26"><mml:math id="IM30"><mml:mrow><mml:mo>∀</mml:mo><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold-italic">t</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> we have that <inline-formula id="IE27"><mml:math id="IM31"><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:mtext>len</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE28"><mml:math id="IM32"><mml:mrow><mml:msup><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>o</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula> is simply the sequence of unitig <italic>u</italic> when written in orientation <italic>o<sub>i</sub></italic>. In other words, the mapping contains the information about the set of transcripts that contain the unitig <italic>u</italic> at least once and how the unitig <italic>u appears</italic> within those transcripts. We refer to the set of mappings for all unitigs as <inline-formula id="IE29"><mml:math id="IM33"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. This representation of <inline-formula id="IE30"><mml:math id="IM34"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is helpful for two reasons. First, it is independent of any particular experiment and can be prepared just with the reference annotation and a specified read length. Second, it naturally implies the positional intervals that are globally shared between reference sequences, allowing the selection of intervals that give rise to the desired degree of sequence multimapping. Moreover, the structure of <inline-formula id="IE31"><mml:math id="IM35"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is gene oblivious, but can be readily induced for the set of genes given the known transcript to gene mapping.</p>
      </sec>
      <sec>
        <title>2.1.3 Learning realistic sequence-level ambiguity</title>
        <p>While gene-by-cell count matrices are broadly used for almost all analyses downstream of scRNA-seq quantification, we recognize that they fail to capture many important characteristics of a real experiment, e.g. the UMI level ambiguity, potential UMI collisions, transcript and further gene-level multimapping, etc. On the other hand, the raw <monospace>FASTQ</monospace> files obviously encode all of the subtle characteristics of an experiment, but are often enormous in size and are also massively redundant. As shown in the recently introduced tool <italic>alevin</italic> (<xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>), accounting for gene-level ambiguity in the sequencing data can have important implications for the resulting quantification estimates. UMI graphs (<xref rid="btz351-B28" ref-type="bibr">Smith <italic>et al.</italic>, 2017</xref>) or <bold>p</bold>arsimonious <bold>U</bold>MI <bold>g</bold>raphs (referring to the graphs as constructed by <italic>alevin</italic>, and which we denote as PUGs, details presented in Supplementary Section 1) (<xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>), succinctly encode most of the relevant characteristics of the experiment, while being much more concise than the set of raw reads. The construction of PUGs in <italic>alevin</italic> depends upon the structure of equivalence classes of transcripts and UMIs, which themselves depend upon the manner in which the UMI-tagged sequencing reads within a cell map to the underlying transcriptome [detail can be found in <xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic> (2019)</xref>].</p>
        <p>We use this intermediate structure to estimate the level of sequence ambiguity that is present in a particular experiment. We extract gene-level ambiguity information from the structure, and use it to help simulate fragments that simultaneously match the observed gene count and also display a realistic level of gene-level sequence ambiguity. Specifically, given a particular gene, we only look for equivalence classes from <italic>all</italic> cells that contain at least one transcript from that gene. As depicted in <xref ref-type="fig" rid="btz351-F1">Figure 1b</xref>, we are interested in two quantities from such equivalence classes: (i) the equivalence class cardinality, i.e. the length of the set of transcripts and (ii) the equivalence class frequency, i.e. the number of reads that belong to that class. For an equivalence class <inline-formula id="IE32"><mml:math id="IM36"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, these are termed as <italic>label count</italic> [<inline-formula id="IE33"><mml:math id="IM37"><mml:mrow><mml:mtext>len</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>] and <italic>read count</italic> [<inline-formula id="IE34"><mml:math id="IM38"><mml:mrow><mml:mtext>freq</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi>u</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>], respectively, in <xref ref-type="fig" rid="btz351-F1">Figure 1b</xref>. The label count signifies the degree of multimapping, and the read count captures the frequency of such multimapping. We note that both of these pieces of information are specific to a particular experiment. This transcript equivalence class level information about <italic>label count</italic> and <italic>read count</italic> can be transferred directly to the gene level. Given the gene <italic>g<sub>i</sub></italic>, we first single out the equivalence classes such that at least one of the transcripts in the equivalence class label belongs to <italic>g<sub>i</sub></italic>. Then, we produce a probability vector <inline-formula id="IE35"><mml:math id="IM39"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> defined from these equivalence classes, where the random variables are the <italic>label counts</italic> and the probabilities are normalized <italic>read counts</italic> corresponding to them. This provides a representation that allows us to select specific transcripts for amplification and sequencing that simultaneously match both the <italic>gene-level</italic> counts in the input count matrix as well as the degree of sequence-level gene ambiguity that we observe in experimental data.
</p>
        <fig id="btz351-F1" orientation="portrait" position="float">
          <label>Fig. 1.</label>
          <caption>
            <p>Overview of the <italic>minnow</italic> pipeline: On the right-hand side (<bold>a</bold>), the construction of unitig-based equivalence classes is depicted based on the compacted de Bruijn graph constructed from reference sequences. Unitigs <italic>u</italic><sub>1</sub> and <italic>u</italic><sub>2</sub> are discounted as they are more than <monospace>MAX_FRAGLEN</monospace> bp away from <inline-formula id="IE36"><mml:math id="IM40"><mml:mrow><mml:mn>3</mml:mn><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> end of transcripts <italic>t</italic><sub>1</sub> and <italic>t</italic><sub>2</sub>. Further the equivalence class is constructed as discussed in Section 2.1.3. On the right-hand side (<bold>b</bold>), the transcript-level equivalence class structure obtained from <italic>alevin</italic> is used to derive a per-gene probability vector. Finally, the probabilities are mapped directly to the unitig labels</p>
          </caption>
          <graphic xlink:href="btz351f1"/>
        </fig>
        <p>Alternatively, instead of defining the label count probability vector <inline-formula id="IE37"><mml:math id="IM41"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> for a gene globally over an entire experiment, <italic>minnow</italic> also supports defining cluster-local probability vectors when such information is given. Specifically, instead of normalizing over all cells, we normalize over all cells within a cluster (e.g. predicted cell type), deriving a probability vector <inline-formula id="IE38"><mml:math id="IM42"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">C</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, for each expressed gene <italic>g<sub>i</sub></italic> in a cluster <inline-formula id="IE39"><mml:math id="IM43"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">C</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>. This allows accounting for the fact that, due to changes in the underlying transcript expression that vary between clusters, the probability of observing (and hence generating) gene-ambiguous fragments may also change.</p>
      </sec>
      <sec>
        <title>2.1.4 Assigning probabilities to <inline-formula id="IE40"><mml:math id="IM44"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula></title>
        <p>Given the <inline-formula id="IE41"><mml:math id="IM45"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> as defined in Section 2.1.2, and <inline-formula id="IE42"><mml:math id="IM46"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">C</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> or <inline-formula id="IE43"><mml:math id="IM47"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> as defined in Section 2.1.3, we finally map the probability for each unitig from <inline-formula id="IE44"><mml:math id="IM48"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Formally, we define a function <inline-formula id="IE45"><mml:math id="IM49"><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>ξ</mml:mo><mml:mo>→</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow></mml:math></inline-formula>, for all unitigs within gene <italic>g<sub>i</sub></italic>, as
<disp-formula id="E1"><mml:math id="M1"><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:mrow><mml:mtable><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>ℓ</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo> </mml:mo><mml:mtext>if</mml:mtext><mml:mo> </mml:mo><mml:mtext>len</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="normal">u</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>ℓ</mml:mi></mml:mrow><mml:mi mathvariant="normal">i</mml:mi></mml:msub><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mtext>and</mml:mtext><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">g</mml:mi></mml:mrow><mml:mi mathvariant="normal">i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>ℓ</mml:mi></mml:mrow><mml:mi mathvariant="normal">i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mo>=</mml:mo><mml:mi>p</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>ℓ</mml:mi></mml:mrow><mml:mi mathvariant="normal">i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mn>0</mml:mn></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo> </mml:mo><mml:mtext>otherwise</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:math></disp-formula></p>
        <p>Qualitatively, <inline-formula id="IE46"><mml:math id="IM50"><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> represents the probability of sampling unitig <italic>u</italic> from gene <italic>g<sub>i</sub></italic> to be equal to the empirically observed probability <inline-formula id="IE47"><mml:math id="IM51"><mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> of equivalence classes containing <italic>g<sub>i</sub></italic> that share <italic>u’</italic>s label count <italic>l<sub>i</sub></italic>. When provided, the cluster specific information can also be used here to derive an analogous function <inline-formula id="IE48"><mml:math id="IM52"><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">C</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> based on the cluster specific gene-level probability vector <inline-formula id="IE49"><mml:math id="IM53"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">C</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>.</p>
        <p>Both <inline-formula id="IE50"><mml:math id="IM54"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and <italic>f<sub>i</sub></italic>, when used in conjunction with each other, give <italic>minnow</italic> the ability to sample the reads from references in a realistic manner. Given a gene <italic>g</italic> with count <italic>x</italic>, the selection process of candidate transcripts and underlying unitigs is as follows. <italic>Minnow</italic> first selects the set of unitigs that are part of the candidate transcripts. When there are multiple unitigs that can be potentially used, <italic>minnow</italic> initializes a multinomial distribution with parameters according to <italic>f<sub>g</sub></italic>, where the random variable is the unitig to be selected next. Under this distribution, after <italic>x</italic> such random draws, <italic>x</italic> unitigs are selected (with replacement). For each such unitig, <italic>minnow</italic> randomly assigns the unitig to a corresponding transcript within that gene by scanning <inline-formula id="IE51"><mml:math id="IM55"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. In this composite selection process, while <inline-formula id="IE52"><mml:math id="IM56"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE53"><mml:math id="IM57"><mml:mi mathvariant="script">U</mml:mi></mml:math></inline-formula> determine the possible reference interval from which to sample, <italic>f<sub>i</sub></italic> determines the probability of such sampling and, finally, <inline-formula id="IE54"><mml:math id="IM58"><mml:mrow><mml:msub><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> dictates the sample size.</p>
      </sec>
    </sec>
    <sec>
      <title>2.2 Generating RNA-seq sequences</title>
      <sec>
        <title>2.2.1 Generation of cell barcodes and UMIs</title>
        <p>Generating reads that match empirical degrees of gene-level ambiguity is one part of realistic single-cell RNA-seq data generation. Another main component is the generation of CB and UMI sequences, properly affected by amplification and sequencing errors. In <italic>minnow</italic> we concentrated on mimicking the process as it occurs in 10× data, though the modular nature of the tool makes designing modules for other droplet-based protocols straightforward. The length of the CB and UMI sequences can be provided by the user, by default we follow 10× v2 protocol for generating the CB and UMI sequences. Given the number of unique molecules (present in the experiment) provided in terms of the gene-count matrix, and the randomly generated UMI sequences, we perform a random assignment between UMIs and molecules. Once generated, a complete unit of sequence that undergoes PCR consists of a concatenated string of CB, UMI and the corresponding reference molecule (i.e. transcript) as sampled from <inline-formula id="IE55"><mml:math id="IM59"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      </sec>
      <sec>
        <title>2.2.2 PCR amplification and imputing sequence error</title>
        <p>Once the set unique molecules are prepared, we simulate amplifying the molecules through multiple PCR cycles to generate a realistic distribution of PCR duplicates. We follow the standard protocol for PCR simulation (<xref rid="btz351-B2" ref-type="bibr">Best <italic>et al.</italic>, 2015</xref>; <xref rid="btz351-B21" ref-type="bibr">Orabi <italic>et al.</italic>, 2018</xref>). The PCR model in <italic>minnow</italic> can be described as a set of unbalanced probabilistic binary trees. The stochasticity of the model is determined by the probability of capture efficiency <italic>p</italic><sub>eff</sub> that can be externally set (default <italic>p</italic><sub>eff</sub> = 0.98). At each cycle, with probability <italic>p</italic><sub>eff,</sub> molecules are chosen for duplication. In each duplication step, a nucleotide in the molecule is mutated with probability <italic>p</italic><sub>error</sub> (default <italic>p</italic><sub>error</sub> = 0.01). At the end of simulating the PCR cycles, <italic>minnow</italic> randomly samples an appropriate number of molecules from the (duplicated) pool of molecules. Apart from providing this simple model, <italic>minnow</italic> also allows an optional flag to mimic the empirically supported model of PCR [described as Model 6 in Best <italic>et al.</italic> (2015)], where the efficiency of individual molecules is allowed to vary and is sampled from a normal distribution <inline-formula id="IE56"><mml:math id="IM60"><mml:mrow><mml:mi>N</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo>μ</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> (default values <inline-formula id="IE57"><mml:math id="IM61"><mml:mrow><mml:mo>μ</mml:mo><mml:mo>=</mml:mo><mml:mn>0.45</mml:mn><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>σ</mml:mo><mml:mo>=</mml:mo><mml:mn>0.2</mml:mn></mml:mrow></mml:math></inline-formula>), and subsequently all the duplicated molecules inherit the efficiency from their parent. This step is highly stochastic, and can be customized to simulate PCR amplification given the uneven distribution of capture efficiency for individual molecules. We have implemented several optimizations, described in Supplementary Section 2, to reduce the computational burden associated with simulating PCR sequence duplication.</p>
      </sec>
      <sec>
        <title>2.2.3 Start position sampling</title>
        <p>Given the set of sampled duplicated PCR-ed molecules, <italic>minnow</italic> simulated the sequencing process of actual reads. As discussed in Section 2.1.4, <italic>minnow</italic> utilizes the precise location of the unitig on the transcript from which the read is drawn. The unitig acts as a seed for sampling read sequences from the reference. Given a unitig <italic>u</italic>, with offset position <italic>p</italic> and length <italic>l</italic> on a transcript <italic>t</italic>, we resort to two different mechanisms for determining start position. If the user chooses to use the empirical distribution <inline-formula id="IE58"><mml:math id="IM62"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mtext>fld</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> of fragment lengths, then we randomly sample a fragment from a closed interval <inline-formula id="IE59"><mml:math id="IM63"><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mi>p</mml:mi><mml:mo>−</mml:mo><mml:mi mathvariant="italic">slack</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="italic">slack</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> where probability of each fragment length is dictated by <inline-formula id="IE60"><mml:math id="IM64"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mtext>fld</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, and <italic>slack</italic> variable is set with proportional to the <inline-formula id="IE61"><mml:math id="IM65"><mml:mrow><mml:mi mathvariant="italic">read</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="italic">len</mml:mi></mml:mrow></mml:math></inline-formula>. While it is highly recommended to use an empirically derived read start position distribution (which comes packaged with <italic>minnow</italic>), in absence of such quantity, <italic>minnow</italic> samples from a truncated normal distribution <inline-formula id="IE62"><mml:math id="IM66"><mml:mrow><mml:mi>N</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo>μ</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> with <inline-formula id="IE63"><mml:math id="IM67"><mml:mrow><mml:mo>μ</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>L</mml:mi><mml:mo>−</mml:mo><mml:mi>l</mml:mi><mml:mo>/</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and a user defined <italic>σ</italic> (default set to 10). The intuition behind using such a distribution is to simultaneously use the ambiguity information while avoiding sampling reads from the same exact region again and again. This variance in sampling is important, since fragmentation occurs after the majority of amplification in the protocols we are simulating, and so ‘duplicate’ reads (reads from the same pre-PCR molecule) will tend to arise from different positions. Moreover, this framework creates an option for user to tune the <italic>σ</italic> in order to move away from unitig dependent sampling. Upon selecting the sequence <italic>minnow</italic> can be instructed to impute sequencing error in the sampled sequence. <italic>Minnow</italic> can accept a variety of error model for substituting nucleotides, and follows the same format of error model as used in Frazee <italic>et al.</italic> (2015).</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <sec>
      <title>3.1 Assessing quantification tools using <italic>minnow</italic></title>
      <p>As its output, <italic>minnow</italic> produces the true abundance matrix <inline-formula id="IE64"><mml:math id="IM68"><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, along with the raw <monospace>FASTQ</monospace> files containing the simulated reads. This enables rigorous testing of different quantification tools such as Cell-Ranger (<xref rid="btz351-B38" ref-type="bibr">Zheng <italic>et al.</italic>, 2017</xref>), UMI-tools (<xref rid="btz351-B28" ref-type="bibr">Smith <italic>et al.</italic>, 2017</xref>), etc. Hence, it is important to validate if the simulated reads generated by <italic>minnow</italic> are able to reproduce some of the challenges faced by these tools while consuming experimental data. One such factor that contributes to the performance of these tools is the mechanism by which they deduplicate UMI sequences (<xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>). We observe that when we stratify the genes with respect to their gene uniqueness, the divergence between different tools start to emerge. As a proof of concept, we have run the popular quantification tools Cell-Ranger (2.1.0 and 3.0.0) and UMI-tools on <italic>minnow</italic>-simulated data. The UMI-tools-based pipeline we used is a custom one, which uses STAR (<xref rid="btz351-B6" ref-type="bibr">Dobin <italic>et al.</italic>, 2013</xref>) for alignment, UMI-tools (<xref rid="btz351-B28" ref-type="bibr">Smith <italic>et al.</italic>, 2017</xref>) for UMI resolution and featureCounts (<xref rid="btz351-B17" ref-type="bibr">Liao <italic>et al.</italic>, 2014</xref>) for deduplicated UMI counting—we refer to this as the <italic>naïve</italic> pipeline.</p>
      <p>The estimated abundances are correlated (Spearman and Pearson) with the true gene count provided by <italic>minnow</italic>. We note that number of cells detected by a downstream tool varies from what is initially present in the raw <monospace>FASTQ</monospace> files. Therefore, while calculating a cell specific local correlations, we consider only the subset of the cells that are predicted by all tools.</p>
      <p><italic>Minnow</italic> accepts a host of different input parameters, such as PCR-related mutation error, sequencing error, predefined custom error model for substitution, UMI pool size, number of PCR cycles, etc. As Cell-Ranger takes considerable time to finish (4–6 h for 4000 cells), we have limited ourselves to one run of 4 K cells of all tools, demonstrating the variance of different tools in the data. We observe that <italic>minnow</italic> scales efficiently with increasing numbers of cells. That is, the bottleneck in our assessments was the time required by the quantification tools, as <italic>minnow</italic> can simulate millions of reads in a few minutes. Thus, for demonstrating other effects (e.g. how the choice of different degrees of sequence ambiguity in mapping Splatter-generated counts to specific genes affects quantification accuracy), we have limited our assessment to smaller simulated datasets consisting of 100 cells each. An assessment of the computational performance of <italic>minnow</italic> is provided in <xref rid="btz351-T2" ref-type="table">Table 2</xref>.</p>
    </sec>
    <sec>
      <title>3.2 Datasets</title>
      <p>We have used two different datasets for benchmarking. For a global analysis, in terms of downstream quantification accuracy, we have used the publicly available peripheral blood mononuclear cells dataset, referred to as pbmc 4k dataset (<xref rid="btz351-B38" ref-type="bibr"><italic>Zheng et al.</italic>, 2017</xref>), obtained from the 10× website. As discussed in Section 2.1, we first used <italic>alevin</italic> to estimate the gene-count matrix and the relevant auxiliary parameters, such as the equivalence classes. The gene-count matrix along with the auxiliary files are then used as an input to <italic>minnow</italic>. <italic>Minnow</italic> is run with two different configurations. First, we consider the ‘basic’ configuration, where no information other than the gene-count matrix from <italic>alevin</italic> is used. In the other configuration, referred to as ‘realistic’, we have made use of the equivalence classes produced by <italic>alevin</italic>, in addition to the compacted de Bruijn graph built on the transcript by TwoPaCo. The ‘realistic’ configuration also used the empirical fragment length distribution. In both the cases, we have used normal mode for PCR with fixed capture efficiency.</p>
      <p>The other datasets we used are generated by <italic>Splatter</italic> (<xref rid="btz351-B35" ref-type="bibr">Zappia <italic>et al.</italic>, 2017</xref>). <italic>Splatter</italic> accepts multiple parameters as input, including the generative model to use, the number of cells, the number of genes to express, etc. We used the splat model from <italic>Splatter</italic> to generate the gene-count matrix with default parameters. To manage the time consuming tools (Cell-Ranger-2 and 3), the analysis is restricted to 100 cells and 50 000 genes.</p>
    </sec>
    <sec>
      <title>3.3 The presence of gene-level ambiguity drives the difficulty of UMI resolution and shapes the accuracy of downstream tools</title>
      <p>With moderate numbers of fragments being sequenced per-cell and realistic diversity in the UMIs available to tag the initial molecules, existing pipelines appear to do a reasonable job of estimating the number of distinct molecules sampled from each gene within a cell. Yet, one major factor that appears to affect the accuracy of these different approaches is the level of sequence (specifically gene-level) ambiguity present in the simulated data. This is not particularly surprising, as neither Cell-Ranger (either version) nor the <italic>naïve</italic> pipeline are capable of appropriately handling such situations (i.e. to where should an UMI be assigned if its corresponding read maps equally well between multiple genes?). However, understanding this effect seems important, as the degree of gene-ambiguous reads in a typical scRNA-seq ranges from <inline-formula id="IE65"><mml:math id="IM69"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>13</mml:mn><mml:mo>%</mml:mo><mml:mo> </mml:mo><mml:mtext>to</mml:mtext><mml:mo> </mml:mo><mml:mn>23</mml:mn><mml:mo>%</mml:mo></mml:mrow></mml:math></inline-formula> of the total reads (<xref rid="btz351-B29" ref-type="bibr">Srivastava <italic>et al.</italic>, 2019</xref>).</p>
      <p>To study the effect of gene-level ambiguity on quantification pipelines, we have stratified the global correlation plot with respect to the <italic>uniqueness</italic> score of a gene. The uniqueness score is specified by the ratio of two quantities: number of <italic>k</italic>-mers unique to a gene (i.e. only appearing within transcripts of this gene) to the total number of distinct <italic>k</italic>-mers present in the gene. According to this metric, the most-unique gene will have a score of 1 and the least a score of 0. The stratified plots (<xref ref-type="fig" rid="btz351-F2">Figs 2 and 3</xref>) demonstrates that in the ‘basic’ simulation, the performance of all three tools are globally high. Interestingly, we note that Cell-Ranger-3 does slightly better than Cell-Ranger-2 (which in turn performs better than the <italic>naïve</italic> pipeline) for non-unique genes, despite the fact that it does not have a specific mechanism for resolving such cases. On the other hand, in the ‘realistic’ simulation, where gene-level sequence ambiguity was sampled to match the degree observed in <italic>even the most unique</italic> experimental data (this dataset exhibits <inline-formula id="IE66"><mml:math id="IM70"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>10</mml:mn><mml:mo>%</mml:mo></mml:mrow></mml:math></inline-formula> gene-level multimapping meaning over 10% sequencing reads map to multiple genomic loci), the global performance decreased. One possible interpretation of such a considerable performance gap between different tools can be the specific method each method uses to categorize alignments [though all pipelines use STAR (<xref rid="btz351-B6" ref-type="bibr">Dobin <italic>et al.</italic>, 2013</xref>) as their aligner], as well as differences in the algorithms they use to resolve UMIs. It is clear, however, that failing to resolve the multimapped reads can have a detrimental effect the accuracy of all of the quantification pipelines. The performance gap is magnified when we increase the fraction of reads sampled from less-unique gene sequences. Thus, it should be noted that failing to model empirically observed levels of sequence ambiguity can result in the simulation of unrealistic sequenced fragments, that fail to capture important characteristics of real data, and where the variability of different tools are hard to spot. Thus, to create more realistic and representative simulated data, it appears to be important to carefully match the degree of gene-level multimapping observed in experimental data.
</p>
      <fig id="btz351-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>Performance of quantification tools, stratified by gene uniqueness, under a ‘basic’ configuration (based on pbmc 4k dataset)</p>
        </caption>
        <graphic xlink:href="btz351f2"/>
      </fig>
      <fig id="btz351-F3" orientation="portrait" position="float">
        <label>Fig. 3.</label>
        <caption>
          <p>Performance of quantification tools, stratified by gene uniqueness, under a ‘realistic’ configuration (based on pbmc 4k dataset).</p>
        </caption>
        <graphic xlink:href="btz351f3"/>
      </fig>
      <p>In the <italic>Splatter</italic>-based simulations, we have explored the performance of quantification pipelines on data representing a spectrum of degrees of sequence-level ambiguity. <italic>Splatter</italic> uses generative models to produce the gene-count matrix. Therefore, while the distributional characteristics of the simulated counts are designed to accord with experimental data, there is no specific relationship between the generated counts and specific gene present in an organism. While this presents a challenge—different mappings of simulated counts to different genes will result in different quantification performance—it also presents a degree of freedom to explore how the performance of tools changes as we hold the counts fixed, but alter the mappings between counts and specific genes. We use this freedom to model extreme situations, and to explore the sensitivity of different quantification pipelines as we alter how counts are mapped to specific genes. Specifically, we considered three different scenarios. First, we use the gene uniqueness scores defined above to sort the set of genes in increasing order (from least to most unique). Then, we assign the gene with lowest uniqueness score to the highest expressed gene label (aggregated over all cells) from the <italic>Splatter</italic>-obtained matrix and so on. This biased allocation purposefully increases the challenge of resolution for downstream tools. We call this configuration ‘adversarial’. In the second configuration, we have selected a random set of genes and followed the ‘realistic’ configuration by using the reference-based compacted de Bruijn graph and learned gene-level ambiguity distribution (as discussed in Section 2.1.2), following the same convention. We call this simulation ‘realistic’. Finally, the third configuration repeats the process of ‘adversarial’ but in reverse order, i.e. assigning the most-unique gene to the most abundant gene label. This final configuration is a situation where we expect to see minimum level of ambiguously mapped reads, thereby making the quantification challenge relatively easy for all downstream tools. We call this configuration ‘favorable’.</p>
      <p><xref rid="btz351-T1" ref-type="table">Table 1</xref> shows the global correlation between three tools for all the above scenarios. We have also plotted (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1</xref>) the distribution of these metrics for all 100 cells in the simulation, to show the shift in global mean in both spearman correlation and mean absolute relative differences (MARD). In <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure S1</xref>, we observe that for the ‘adversarial’ data, the performance of all pipelines is considerably depressed. Conversely, for the ‘favorable’ dataset (bottom row), the performance of all pipelines is considerably improved—and the gap between the different versions of Cell-Ranger and the <italic>naïve</italic> pipeline is reduced. The ‘realistic’ simulation falls nicely between these two extremes, suggesting that, while not as pronounced as one observes in the ‘adversarial’ scenario, the discarding of gene-ambiguous reads can have a considerable effect on quantification accuracy, even under realistic degrees of gene-level sequence ambiguity.</p>
      <table-wrap id="btz351-T1" orientation="portrait" position="float">
        <label>Table 1.</label>
        <caption>
          <p>Spearman correlation and MARD are calculated with respect to ground truth under three different configurations based on the same gene-count matrix produced by <italic>Splatter</italic></p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Configuration</th>
              <th colspan="3" rowspan="1">Correlation (Spearman)<hr/></th>
              <th colspan="3" rowspan="1">MARD<hr/></th>
            </tr>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">CR2</th>
              <th rowspan="1" colspan="1">CR3</th>
              <th rowspan="1" colspan="1">
                <italic>naïve</italic>
              </th>
              <th rowspan="1" colspan="1">CR2</th>
              <th rowspan="1" colspan="1">CR3</th>
              <th rowspan="1" colspan="1">
                <italic>naïve</italic>
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Adversarial</td>
              <td rowspan="1" colspan="1">0.811</td>
              <td rowspan="1" colspan="1">0.809</td>
              <td rowspan="1" colspan="1">0.723</td>
              <td rowspan="1" colspan="1">0.075</td>
              <td rowspan="1" colspan="1">0.076</td>
              <td rowspan="1" colspan="1">0.107</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Realistic</td>
              <td rowspan="1" colspan="1">0.920</td>
              <td rowspan="1" colspan="1">0.915</td>
              <td rowspan="1" colspan="1">0.880</td>
              <td rowspan="1" colspan="1">0.043</td>
              <td rowspan="1" colspan="1">0.046</td>
              <td rowspan="1" colspan="1">0.076</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Favorable</td>
              <td rowspan="1" colspan="1">0.957</td>
              <td rowspan="1" colspan="1">0.952</td>
              <td rowspan="1" colspan="1">0.936</td>
              <td rowspan="1" colspan="1">0.031</td>
              <td rowspan="1" colspan="1">0.035</td>
              <td rowspan="1" colspan="1">0.047</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <p><italic>Note:</italic> CR2 and CR3 stand for Cell-Ranger-2 and Cell-Ranger-3, respectively.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <sec>
        <title>3.3.1 <italic>Minnow</italic> maintains global structure in the simulated data</title>
        <p>To compare the internal structure of the <italic>minnow</italic> generated data, we have compared the data matrices that are given to and produced by <italic>minnow</italic>. As shown in Supplementary Figures S2 and S3, we can see the number of clusters remains the same while some of the clusters are perturbed. This indicates that the minnow produced data can be effectively used for cell type specific analysis. Additionally, we have calculated <italic>variation of information</italic> (VI) (<xref rid="btz351-B19" ref-type="bibr">Meilă, 2007</xref>) as a metric to measure the distances between the clusters obtained by running Seurat’s clustering (<xref rid="btz351-B5" ref-type="bibr">Butler <italic>et al.</italic>, 2018</xref>) algorithm on the count matrices produced by different methods, with respect to the clustering produced on the true count matrix, as output by <italic>minnow</italic>. The VI distances are 0.589, 0.613 and 0.632 for clusterings on the matrices produced by Cell-Ranger-3, Cell-Ranger-2 and <italic>naïve</italic>, respectively. While all of the tools do reasonably well, as expected, Cell-Ranger-3-derived clusters are closer to the truth than the other methods. The t-SNE plots shown in Supplementary Section 4 are plotted with the same seed after processing with Seurat.</p>
      </sec>
      <sec>
        <title>3.3.2 Speed and memory of simulated sequence generation</title>
        <p>The execution of <italic>minnow</italic> proceeds in two phases. First, it loads the gene-count matrix (as either a compressed binary or plain-text file) in a single thread. Then, it spawns multiple parallel threads (as many as specified by the user) to simulate reads deriving from different cells. This mechanism enables the most computationally intensive process (simulating PCR and generating read sequences) to happen independently and in parallel for each cell. This enables <italic>minnow</italic> to scale well with the number of threads when writing millions of reads to the disc. In <xref rid="btz351-T2" ref-type="table">Table 2</xref>, we have varied a number of parameters to test the computational requirements of <italic>minnow</italic> for generating simulated datasets of various sizes. Namely, we have varied the number of PCR cycles, the total number of cells simulated and number of threads used. The total wall clock time and peak resident memory reported using <monospace>/usr/bin/time</monospace>. We have limited the highest number of reads (default is 100 000) to be sampled and written to <monospace>FASTQ</monospace> file by <italic>minnow</italic> for each cell. This results in the approximate number of reads shown in the first column of <xref rid="btz351-T2" ref-type="table">Table 2</xref>. It should be noted that experiments containing more than <inline-formula id="IE67"><mml:math id="IM71"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>10</mml:mn><mml:mo> </mml:mo><mml:mn>000</mml:mn></mml:mrow></mml:math></inline-formula> cells are often generated from two or more separate experiments, concatenating the resulting count matrices after analyzing the samples in an independent manner. This can be achieved by running multiple instances of <italic>minnow</italic>. The performance is such cases would scale in a linear fashion as expected.</p>
        <table-wrap id="btz351-T2" orientation="portrait" position="float">
          <label>Table 2.</label>
          <caption>
            <p>Timing and memory required by <italic>minnow</italic> to simulate data with various parameters</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="char" char="." span="1"/>
              <col valign="top" align="char" char="." span="1"/>
              <col valign="top" align="char" char="." span="1"/>
              <col valign="top" align="char" char="." span="1"/>
              <col valign="top" align="char" char="." span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th rowspan="1" colspan="1">Reads</th>
                <th rowspan="1" colspan="1">Cells</th>
                <th rowspan="1" colspan="1">PCR cycles</th>
                <th rowspan="1" colspan="1">Threads</th>
                <th rowspan="1" colspan="1">Time (hh: mm: ss)</th>
                <th rowspan="1" colspan="1">mem. (KB)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">100M</td>
                <td rowspan="1" colspan="1">1000</td>
                <td rowspan="1" colspan="1">4</td>
                <td rowspan="1" colspan="1">8</td>
                <td rowspan="1" colspan="1">0: 10: 44</td>
                <td rowspan="1" colspan="1">7 556 108</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">100M</td>
                <td rowspan="1" colspan="1">1000</td>
                <td rowspan="1" colspan="1">4</td>
                <td rowspan="1" colspan="1">16</td>
                <td rowspan="1" colspan="1">0: 5: 39</td>
                <td rowspan="1" colspan="1">11 163 216</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">100M</td>
                <td rowspan="1" colspan="1">1000</td>
                <td rowspan="1" colspan="1">7</td>
                <td rowspan="1" colspan="1">8</td>
                <td rowspan="1" colspan="1">0: 16: 56</td>
                <td rowspan="1" colspan="1">8 723 320</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">100M</td>
                <td rowspan="1" colspan="1">1000</td>
                <td rowspan="1" colspan="1">7</td>
                <td rowspan="1" colspan="1">16</td>
                <td rowspan="1" colspan="1">0: 9: 01</td>
                <td rowspan="1" colspan="1">13 449 888</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">800M</td>
                <td rowspan="1" colspan="1">8000</td>
                <td rowspan="1" colspan="1">4</td>
                <td rowspan="1" colspan="1">8</td>
                <td rowspan="1" colspan="1">0: 56: 28</td>
                <td rowspan="1" colspan="1">28 249 676</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">800M</td>
                <td rowspan="1" colspan="1">8000</td>
                <td rowspan="1" colspan="1">4</td>
                <td rowspan="1" colspan="1">16</td>
                <td rowspan="1" colspan="1">0: 31: 18</td>
                <td rowspan="1" colspan="1">31 855 624</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">800M</td>
                <td rowspan="1" colspan="1">8000</td>
                <td rowspan="1" colspan="1">7</td>
                <td rowspan="1" colspan="1">8</td>
                <td rowspan="1" colspan="1">1: 43: 32</td>
                <td rowspan="1" colspan="1">29 246 148</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">800M</td>
                <td rowspan="1" colspan="1">8000</td>
                <td rowspan="1" colspan="1">7</td>
                <td rowspan="1" colspan="1">16</td>
                <td rowspan="1" colspan="1">0: 53: 15</td>
                <td rowspan="1" colspan="1">34 217 500</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
        <p>Simulated reads were generated on a server running ubuntu 16.10 with an Intel(R) Xeon(R) CPU (E5-2699 v4 @2.20 GHz with 44 cores), 512 GB RAM and a 4 TB TOSHIBA MG03ACA4 ATA HDD.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>4 Conclusion</title>
    <p>Single-cell sequencing has enabled scientists to gain a better understanding of complex and dynamic biological systems, and single-cell RNA-seq has been one of the pioneering biotechnologies in the field. Droplet-based assays, in particular, have proven very useful because of their high-throughput and ability to assay many cells. Driven by these exciting biotechnology developments, hosts of different methods have been developed in a relatively small time-frame to analyze the gene-by-cell count matrices that result from the initial quantification of these single-cell assay. Previously, various models have been proposed for simulating realistic count matrices (<xref rid="btz351-B35" ref-type="bibr">Zappia <italic>et al.</italic>, 2017</xref>). These approaches implicitly assume that, apart from some fundamental limitations due to the biotechnology (e.g. cell capture, molecule sampling from small finite populations, etc.), the problem of ascertaining accurate gene counts from raw sequencing data by aligning reads and deduplicating UMIs is essentially solved. Consequently, the effect of the failures of these quantification pipelines to produce accurate gene expression estimates is not accounted for in the assessment of downstream analysis methods using this simulated data.</p>
    <p>In this paper, we introduced <italic>minnow</italic>, which covers an important gap in existing methods for single-cell RNA-seq simulation (<xref rid="btz351-B34" ref-type="bibr">Westoby <italic>et al.</italic>, 2018</xref>)—the read-level simulation of sequencing data for droplet-based scRNA-seq assays. We demonstrate the use of <italic>minnow</italic> to assess the accuracy of the single-cell quantification methods under different configurations of sequence-level characteristics, ranging from adversarial, to realistic, to favorable. We propose a framework for the simulation of synthetic dscRNA-seq data, which simulates the CB, UMI and read sequences, while accounting for the considerable effects of PCR and realistic sequence ambiguity in generated reads. Further as a flexible framework <italic>minnow</italic> can be easily used to create a variety of possible configurations, such as changing fragment length distribution, sequencing error, collision rate, etc., to do robust testing of computational tools. We believe <italic>minnow</italic> will help the community to develop the next generation of quantification tools for droplet-based scRNA-seq data. It provides the first comprehensive framework to simulate such data at the sequence level, allowing users to validate the accuracy of different methods and providing useful feedback to determine future directions for improving quantification algorithms. <italic>Minnow</italic> is an open-source tool, developed in C++14, and is licensed under a BSD license. It is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/COMBINE-lab/minnow">https://github.com/COMBINE-lab/minnow</ext-link>.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btz351_Supplementary_Data</label>
      <media xlink:href="btz351_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We would like to thank Charlotte Soneson for insightful conversations and for providing valuable feedback during the creation of <italic>minnow</italic>.</p>
    <sec>
      <title>Funding</title>
      <p>This work was supported by NSF award CCF-1750472 and by grant 2018-182752 from the Chan Zuckerberg Initiative DAF, an advised fund of Silicon Valley Community Foundation. The authors thank Stony Brook Research Computing and Cyberinfrastructure and the Institute for Advanced Computational Science at Stony Brook University for access to the SeaWulf computing system, which was made possible by NSF grant 1531492.</p>
      <p><italic>Conflict of Interest</italic>: R.P. is a co-founder of Ocean Genomics. H.S. and A.S. declare no conflicts.</p>
    </sec>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btz351-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Arzalluz-Luque</surname><given-names>Á.</given-names></name>, <name name-style="western"><surname>Conesa</surname><given-names>A.</given-names></name></person-group> (<year>2018</year>) 
<article-title>Single-cell RNAseq for the study of isoforms—how is that possible?</article-title><source>Genome Biol</source>., <volume>19</volume>, <fpage>110.</fpage><pub-id pub-id-type="pmid">30097058</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Best</surname><given-names>K.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Computational analysis of stochastic heterogeneity in PCR amplification efficiency revealed by single molecule barcoding</article-title>. <source>Sci. Rep</source>., <volume>5</volume>, <fpage>14629</fpage>.<pub-id pub-id-type="pmid">26459131</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bronner</surname><given-names>I.F.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>Improved protocols for illumina sequencing</article-title>. <source>Curr. Protoc. Hum. Genet</source>., <volume>79</volume>, <fpage>18</fpage>–<lpage>12</lpage>.</mixed-citation>
    </ref>
    <ref id="btz351-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Buganim</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Single-cell expression analyses during cellular reprogramming reveal an early stochastic and a late hierarchic phase</article-title>. <source>Cell</source>, <volume>150</volume>, <fpage>1209</fpage>–<lpage>1222</lpage>.<pub-id pub-id-type="pmid">22980981</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Butler</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Integrating single-cell transcriptomic data across different conditions, technologies, and species</article-title>. <source>Nat. Biotechnol</source>., <volume>36</volume>, <fpage>411.</fpage><pub-id pub-id-type="pmid">29608179</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Dobin</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>STAR: ultrafast universal RNA-seq aligner</article-title>. <source>Bioinformatics</source>, <volume>29</volume>, <fpage>15</fpage>–<lpage>21</lpage>.<pub-id pub-id-type="pmid">23104886</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Finak</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Mast: a flexible statistical framework for assessing transcriptional changes and characterizing heterogeneity in single-cell RNA sequencing data</article-title>. <source>Genome Biol</source>., <volume>16</volume>, <fpage>278.</fpage><pub-id pub-id-type="pmid">26653891</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Frazee</surname><given-names>A. C.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Polyester: simulating RNA-seq datasets with differential transcript expression</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>2778</fpage>–<lpage>2784</lpage>.<pub-id pub-id-type="pmid">25926345</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Griebel</surname><given-names>T.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Modelling and simulating generic RNA-seq experiments with the flux simulator</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>10073</fpage>–<lpage>10083</lpage>.<pub-id pub-id-type="pmid">22962361</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Grün</surname><given-names>D.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Single-cell messenger RNA sequencing reveals rare intestinal cell types</article-title>. <source>Nature</source>, <volume>525</volume>, <fpage>251.</fpage><pub-id pub-id-type="pmid">26287467</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hashimshony</surname><given-names>T.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Cel-seq: single-cell RNA-seq by multiplexed linear amplification</article-title>. <source>Cell Rep</source>., <volume>2</volume>, <fpage>666</fpage>–<lpage>673</lpage>.<pub-id pub-id-type="pmid">22939981</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hu</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Stochastic principles governing alternative splicing of RNA</article-title>. <source>PLoS Comput. Biol</source>., <volume>13</volume>, <fpage>e1005761.</fpage><pub-id pub-id-type="pmid">28910283</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kiselev</surname><given-names>V.Y.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Sc3: consensus clustering of single-cell RNA-seq data</article-title>. <source>Nat. Methods</source>, <volume>14</volume>, <fpage>483.</fpage><pub-id pub-id-type="pmid">28346451</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Klein</surname><given-names>A.M.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Droplet barcoding for single-cell transcriptomics applied to embryonic stem cells</article-title>. <source>Cell</source>, <volume>161</volume>, <fpage>1187</fpage>–<lpage>1201</lpage>.<pub-id pub-id-type="pmid">26000487</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>La Manno</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>RNA velocity of single cells</article-title>. <source>Nature</source>, <volume>560</volume>, <fpage>494.</fpage><pub-id pub-id-type="pmid">30089906</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>B.</given-names></name>, <name name-style="western"><surname>Dewey</surname><given-names>C.N.</given-names></name></person-group> (<year>2011</year>) 
<article-title>Rsem: accurate transcript quantification from RNA-seq data with or without a reference genome</article-title>. <source>BMC Bioinform</source>., <volume>12</volume>, <fpage>323.</fpage></mixed-citation>
    </ref>
    <ref id="btz351-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Liao</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>featureCounts: an efficient general-purpose read summarization program</article-title>. <source>Bioinformatics</source>, <volume>30</volume>, <fpage>923</fpage>–<lpage>930</lpage>.<pub-id pub-id-type="pmid">24227677</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Macosko</surname><given-names>E.Z.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Highly parallel genome-wide expression profiling of individual cells using nanoliter droplets</article-title>. <source>Cell</source>, <volume>161</volume>, <fpage>1202</fpage>–<lpage>1214</lpage>.<pub-id pub-id-type="pmid">26000488</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Meilă</surname><given-names>M.</given-names></name></person-group> (<year>2007</year>) 
<article-title>Comparing clusterings? An information based distance</article-title>. <source>J. Multivariate Anal</source>., <volume>98</volume>, <fpage>873</fpage>–<lpage>895</lpage>.</mixed-citation>
    </ref>
    <ref id="btz351-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Minkin</surname><given-names>I.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>TwoPaCo: an efficient algorithm to build the compacted de Bruijn graph from many complete genomes</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>4024</fpage>–<lpage>4032</lpage>.</mixed-citation>
    </ref>
    <ref id="btz351-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Orabi</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Alignment-free clustering of UMI tagged DNA molecules</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, 1829–1836.</mixed-citation>
    </ref>
    <ref id="btz351-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Patro</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Salmon provides fast and bias-aware quantification of transcript expression</article-title>. <source>Nat. Methods</source>, <volume>14</volume>, <fpage>417.</fpage><pub-id pub-id-type="pmid">28263959</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Picelli</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>Smart-seq2 for sensitive full-length transcriptome profiling in single cells</article-title>. <source>Nat. Methods</source>, <volume>10</volume>, <fpage>1096.</fpage><pub-id pub-id-type="pmid">24056875</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Pierson</surname><given-names>E.</given-names></name>, <name name-style="western"><surname>Yau</surname><given-names>C.</given-names></name></person-group> (<year>2015</year>) 
<article-title>ZIFA: dimensionality reduction for zero-inflated single-cell gene expression analysis</article-title>. <source>Genome Biol</source>., <volume>16</volume>, <fpage>241.</fpage><pub-id pub-id-type="pmid">26527291</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Qiu</surname><given-names>X.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Reversed graph embedding resolves complex single-cell trajectories</article-title>. <source>Nat. Methods</source>, <volume>14</volume>, <fpage>979.</fpage><pub-id pub-id-type="pmid">28825705</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B26">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Risso</surname><given-names>D.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) <source>Zinb-wave: A General and Flexible Method for Signal Extraction from Single-Cell RNA-seq Data</source>. Cold Spring Harbor Laboratory.</mixed-citation>
    </ref>
    <ref id="btz351-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Satija</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Spatial reconstruction of single-cell gene expression data</article-title>. <source>Nat. Biotechnol</source>., <volume>33</volume>, <fpage>495.</fpage><pub-id pub-id-type="pmid">25867923</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Smith</surname><given-names>T.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>UMI-tools: modeling sequencing errors in unique molecular identifiers to improve quantification accuracy</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>491</fpage>–<lpage>499</lpage>.<pub-id pub-id-type="pmid">28100584</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Srivastava</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) <source>Alevin Efficiently Estimates Accurate Gene Abundances from Dscrna-Seq Data</source>. <source>Genome Biol.</source>, <volume>20</volume>, <fpage>65</fpage>.</mixed-citation>
    </ref>
    <ref id="btz351-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Trapnell</surname><given-names>C.</given-names></name></person-group> (<year>2015</year>) 
<article-title>Defining cell types and states with single-cell genomics</article-title>. <source>Genome Res</source>., <volume>25</volume>, <fpage>1491</fpage>–<lpage>1498</lpage>.<pub-id pub-id-type="pmid">26430159</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Vieth</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>powsimR: power analysis for bulk and single cell RNA-seq experiments</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>3486</fpage>–<lpage>3488</lpage>.<pub-id pub-id-type="pmid">29036287</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wang</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Gene expression distribution deconvolution in single-cell RNA sequencing</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>115</volume>, <fpage>E6437</fpage>–<lpage>E6446</lpage>.<pub-id pub-id-type="pmid">29946020</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wei</surname><given-names>V.L.</given-names></name>, <name name-style="western"><surname>Jingyi</surname><given-names>J.L.</given-names></name></person-group> (<year>2018</year>) 
<article-title>An accurate and robust imputation method scImpute for single-cell RNA-seq data</article-title>. <source>Nat. Commun</source>., <volume>9</volume>, <fpage>997.</fpage><pub-id pub-id-type="pmid">29520097</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Westoby</surname><given-names>J.H.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Simulation-based benchmarking of isoform quantification in single-cell RNA-seq</article-title>. <source>Genome Biol</source>., <volume>19</volume>, <fpage>191.</fpage><pub-id pub-id-type="pmid">30404663</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zappia</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Splatter: simulation of single-cell RNA sequencing data</article-title>. <source>Genome Biol</source>., <volume>18</volume>, <fpage>174.</fpage><pub-id pub-id-type="pmid">28899397</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zappia</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Exploring the single-cell RNA-seq analysis landscape with the scRNA-tools database</article-title>. <source>PLoS Comput. Biol</source>., <volume>14</volume>, <fpage>e1006245.</fpage><pub-id pub-id-type="pmid">29939984</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zerbino</surname><given-names>D.</given-names></name>, <name name-style="western"><surname>Birney</surname><given-names>E.</given-names></name></person-group> (<year>2008</year>) 
<article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source>., <volume>18</volume>, <fpage>821</fpage>–<lpage>829</lpage>.<pub-id pub-id-type="pmid">18349386</pub-id></mixed-citation>
    </ref>
    <ref id="btz351-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zheng</surname><given-names>G.X.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Massively parallel digital transcriptional profiling of single cells</article-title>. <source>Nat. Commun</source>., <volume>8</volume>, <fpage>14049.</fpage><pub-id pub-id-type="pmid">28091601</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
