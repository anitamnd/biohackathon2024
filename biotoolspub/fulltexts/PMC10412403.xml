<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10412403</article-id>
    <article-id pub-id-type="pmid">37498562</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad463</article-id>
    <article-id pub-id-type="publisher-id">btad463</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>quickBAM: a parallelized BAM file access API for high-throughput sequence analysis informatics</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Pitman</surname>
          <given-names>Anders</given-names>
        </name>
        <aff><institution>UTAH Center for Genetic Discovery, Department of Human Genetics, University of Utah School of Medicine</institution>, <addr-line>15 N 2030 E</addr-line>, Salt Lake City, UT 84112, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Huang</surname>
          <given-names>Xiaomeng</given-names>
        </name>
        <aff><institution>UTAH Center for Genetic Discovery, Department of Human Genetics, University of Utah School of Medicine</institution>, <addr-line>15 N 2030 E</addr-line>, Salt Lake City, UT 84112, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Marth</surname>
          <given-names>Gabor T</given-names>
        </name>
        <aff><institution>UTAH Center for Genetic Discovery, Department of Human Genetics, University of Utah School of Medicine</institution>, <addr-line>15 N 2030 E</addr-line>, Salt Lake City, UT 84112, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-8612-9598</contrib-id>
        <name>
          <surname>Qiao</surname>
          <given-names>Yi</given-names>
        </name>
        <aff><institution>UTAH Center for Genetic Discovery, Department of Human Genetics, University of Utah School of Medicine</institution>, <addr-line>15 N 2030 E</addr-line>, Salt Lake City, UT 84112, <country country="US">United States</country></aff>
        <xref rid="btad463-cor1" ref-type="corresp"/>
        <!--yi.qiao@genetics.utah.edu-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Kelso</surname>
          <given-names>Janet</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad463-cor1">Corresponding author. UTAH Center for Genetic Discovery, Department of Human Genetics, University of Utah School of Medicine, 15 N 2030 E Rm 7150, Salt Lake City, UT 84112, United States. E-mail: <email>yi.qiao@genetics.utah.edu</email> (Y.Q.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>8</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-07-27">
      <day>27</day>
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>8</issue>
    <elocation-id>btad463</elocation-id>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>4</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>31</day>
        <month>5</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>20</day>
        <month>7</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>7</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>09</day>
        <month>8</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad463.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>In time-critical clinical settings, such as precision medicine, genomic data needs to be processed as fast as possible to arrive at data-informed treatment decisions in a timely fashion. While sequencing throughput has dramatically increased over the past decade, bioinformatics analysis throughput has not been able to keep up with the pace of computer hardware improvement, and consequently has now turned into the primary bottleneck. Modern computer hardware today is capable of much higher performance than current genomic informatics algorithms can typically utilize, therefore presenting opportunities for significant improvement of performance. Accessing the raw sequencing data from BAM files, e.g. is a necessary and time-consuming step in nearly all sequence analysis tools, however existing programming libraries for BAM access do not take full advantage of the parallel input/output capabilities of storage devices.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>In an effort to stimulate the development of a new generation of faster sequence analysis tools, we developed quickBAM, a software library to accelerate sequencing data access by exploiting the parallelism in commodity storage hardware currently widely available. We demonstrate that analysis software ported to quickBAM consistently outperforms their current versions, in some cases finishing an analysis in under 3 min while the original version took 1.5 h, using the same storage solution.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Open source and freely available at <ext-link xlink:href="https://gitlab.com/yiq/quickbam/" ext-link-type="uri">https://gitlab.com/yiq/quickbam/</ext-link>, we envision that quickBAM will enable a new generation of high-performance informatics tools, either directly boosting their performance if they are currently data-access bottlenecked, or allow data-access to keep up with further optimizations in algorithms and compute techniques.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Institute of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>U24CA209999</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>High-throughput, genome wide next-generation sequencing (NGS) has revolutionized precision medicine. As an example, NGS has now been implemented as a routine diagnostic modality in many pediatric subspecialty clinics for critically ill children admitted into the neonatal intensive care unit or pediatric intensive care unit (<xref rid="btad463-B8" ref-type="bibr">Petrikin <italic toggle="yes">et al.</italic> 2015</xref>, <xref rid="btad463-B4" ref-type="bibr">Elliott <italic toggle="yes">et al.</italic> 2019</xref>). And increasingly, genomics-guided precision medicine is helping advanced cancer patients who have exhausted standard-of-care options (<xref rid="btad463-B9" ref-type="bibr">Schwartzberg <italic toggle="yes">et al.</italic> 2017</xref>). In these settings, the amount of data analyzed is small compared to large cohort studies, involving usually one to a few tumor samples and a paired normal sample from the same patient. However, fast analysis turnaround is of critical importance. Furthermore, after the optimal treatment is identified, it still takes significant time to coordinate treatment access due to e.g. drug acquisition, compassionate care approval, clinical trial enrollment, or insurance authorization. It is therefore significant that the informatics analysis tasks, which have surpassed sequencing as the primary bottleneck, are to be as fast as current computer hardware can make possible.</p>
    <p>The BAM file format (<xref rid="btad463-B7" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>) is the current <italic toggle="yes">de facto</italic> standard for storing sequencing data generated from NGS experiments. BAM files are the most common starting place for various downstream analyses. The BAM format is the compressed, binary version of the SAM format, which we designed as part of the 1000 Genomes Project (<xref rid="btad463-B1" ref-type="bibr">1000 Genomes Project Consortium <italic toggle="yes">et al.</italic> 2015</xref>) to reconcile the once many different formats of storing sequencing data. Subsequently, software libraries are created to provide APIs to access the sequencing reads contained in a BAM file. HTSLIB (<xref rid="btad463-B3" ref-type="bibr">Bonfield <italic toggle="yes">et al.</italic> 2021</xref>) is the file access layer from Samtools (<xref rid="btad463-B7" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>), the software developed to perform many SAM/BAM file related operations. The main focus of HTSLIB is to provide high level abstractions so that the programming interfaces stay the same regardless of the underlying file format (be it SAM, BAM, or CRAM) or storage and transport media (local files, HTTP URLs, or cloud storage). BamTools (<xref rid="btad463-B2" ref-type="bibr">Barnett <italic toggle="yes">et al.</italic> 2011</xref>) and SeqLib (<xref rid="btad463-B12" ref-type="bibr">Wala and Beroukhim 2017</xref>) focus on modern C++ API designs for ease of programming. While BamTools implements its own BAM parsing logic, SeqLib integrates HTSLIB as the access layer. These libraries perform file access in a single-threaded manner (HTSLIB does support multi-threaded decompression, but not file reading), which is a reasonable design choice when (i) informatics analysis is compute bottlenecked, and therefore cannot benefit from faster data access; or (ii) the file storage and transport media are incapable of high performance, e.g. when the files are served over low-bandwidth network attached storages. However, these tools cannot take advantage of storage technologies that are capable of much higher levels of file I/O parallelization and data bus bandwidth.</p>
    <p>Specifically, we are concerned with two generally available storage technologies. On premise, the Lustre distributed file system is capable of achieving very high aggregated bandwidth by striping files onto different computer nodes and hard drives. And on the cloud such as the commercial Amazon Web Services (AWS), it is already commonplace to instantiate nonvolatile memory express solid state drives (NVMe SSDs) as the primary storage media. These two types of storage solutions cover the majority of high-performance computing facilities, and both provide enough parallelism to support much higher analysis throughput than currently utilized.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>We developed quickBAM (<xref rid="btad463-F1" ref-type="fig">Fig. 1</xref>), which uses two strategies to parallelize BAM file access. First, when the bam file index (BAI) is available, we utilize the “fixed-bin” indices which contain the starting file offset of each 16-kb genomic window. Second, when the BAI is not available (unsorted/unindexed BAMs or the unmapped region in indexed BAMs), we use a heuristic scanner (see <xref rid="sup1" ref-type="supplementary-material">Supplementary Methods</xref>) to directly locate multiple starting locations for parallel parsing. Since the majority of sequence analysis tasks (e.g. quality control, various types of mutation calling) involve reading BAM files, quickBAM has the potential to significantly shorten end-to-end analysis turnaround. quickBAM is freely available at <ext-link xlink:href="https://gitlab.com/yiq/quickbam/" ext-link-type="uri">https://gitlab.com/yiq/quickbam/</ext-link> with extensive accompanying documentation available at <ext-link xlink:href="https://yiq.gitlab.io/quickbam/" ext-link-type="uri">https://yiq.gitlab.io/quickbam/</ext-link>.</p>
    <fig position="float" id="btad463-F1">
      <label>Figure 1.</label>
      <caption>
        <p>Parallel processing architecture using quickBAM. quickBAM utilizes the scatter/gather paradigm to parallelize data access and computation tasks across many genomic regions before combining the regional results to produce global results.</p>
      </caption>
      <graphic xlink:href="btad463f1" position="float"/>
    </fig>
  </sec>
  <sec>
    <title>3 Results</title>
    <sec>
      <title>3.1 Benchmarking of operating system I/O APIs</title>
      <p>Since our work is focused on extracting the maximum I/O performance, we start with benchmarking various operating system I/O APIs. While the POSIX synchronous I/O APIs like <italic toggle="yes">fread()</italic> have been the long-standing standard, newer APIs such as <italic toggle="yes">libaio</italic> and <italic toggle="yes">io_uring</italic> now exist with promises to deliver better performance. Using the <italic toggle="yes">fio</italic> benchmarking utility, we carried out parallel read bandwidth benchmarking on both a Lustre distributed system available locally in our facility, as well as a 4-way NVMe SSD raid0 array available via AWS. We evaluated four APIs on AWS: POSIX synchronous, memory map, <italic toggle="yes">libaio</italic>, and <italic toggle="yes">io_uring</italic>; while dropping <italic toggle="yes">io_uring</italic> on our local Lustre because it is not yet supported by the Linux kernel deployed at our high-performance compute cluster. As shown in <xref rid="btad463-F2" ref-type="fig">Fig. 2</xref> (raw data available in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>), the POSIX synchronous APIs consistently outperform other APIs on both Lustre and SSD arrays. Therefore, we chose to use POSIX synchronous APIs for our work.</p>
      <fig position="float" id="btad463-F2">
        <label>Figure 2.</label>
        <caption>
          <p>Benchmarking results of various operating system IO APIs. Sequential reads of 4k blocks were carried out using POSIX, memory map (mmap), and libaio on both NVME SSD available on AWS and a Lustre distributed file system available to our local compute cluster. We in addition benchmarked <italic toggle="yes">io_uring</italic> but only on AWS as it is supported by only recent Linux kernels not yet available at our local facility.</p>
        </caption>
        <graphic xlink:href="btad463f2" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>3.2 Performance evaluation strategies</title>
      <p>In the next two sections, we describe performance improvements with example algorithms reimplemented using quickBAM. Briefly we describe the benchmarking strategies here with details available in <xref rid="sup1" ref-type="supplementary-material">Supplementary Methods</xref>. For each algorithm, we benchmarked its performance using two whole genome datasets: Genome In A Bottle (<xref rid="btad463-B13" ref-type="bibr">Zook <italic toggle="yes">et al.</italic> 2016</xref>) Illumina 2x250 bam files (HG002 and HG004) with a nominal coverage of 75X; and a tumor normal pair 60x Illumina sequencing bam files (Bn2 and Germ1) from a published study (<xref rid="btad463-B6" ref-type="bibr">Huang <italic toggle="yes">et al.</italic> 2021</xref>). The former dataset is to facilitate result reproduction since it is openly accessible; whereas the latter is to provide a more appropriate tumor context, whose genomes can be highly aberrant. The same tests are carried out separately on Lustre storage at our local cluster and NVMe SSDs on AWS. There are 80 and 96 hyper-threaded cores on our local and AWS servers respectively. Therefore, our Lustre benchmarks contain run configurations of 80, 60, 40, 20, 10, and 1 threads; and NVMe SSD benchmarks contain 96, 72, 48, 24, 12, and 1 threads. For each test, an effective throughput is calculated as total input file size divided by measured total time-till-completion. Each test is repeated three times to account for uncontrollable variabilities.</p>
    </sec>
    <sec>
      <title>3.3 Proof-of-concept implementation of samtools flagstats and performance evaluation</title>
      <p>The first sample program we ported to quickBAM is the utility in samtools called flagstats. Flagstats iterates over the entire BAM file, updating statistics (e.g. number of reads failed QC) with the flags field of each read, and finally printing the statistics when all reads are processed. It is a simple algorithm, however it serves the purpose of demonstrating performance gain via parallelization. Using quickBAM, it is possible to compute separate statistics for each 16-kb window across the entire genome. This 16-kb window is chosen because it directly maps to the linear indices in the bam index file. Reads that overlap window boundaries are partitioned into the earlier window to avoid double counting. Since the data structure of flagstats consists of only integer counters, the “gather” stage is a simple summation of these counters from all windows. With a single thread, quickBAM based flagstats and samtools show similar performances (<xref rid="btad463-F3" ref-type="fig">Fig. 3</xref>). However, while samtools benefits little from more than 10 threads, quickBAM allows for a much better scaling. Full timing observations are listed in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>. The quickBAM version of flagstats produces identical results compared to the samtools version. Other algorithms that can potentially be implemented in a similar fashion include, but are not limited to, read counting per fixed genome windows for CNV detection and transcript abundance counting per gene in RNAseq data analysis.</p>
      <fig position="float" id="btad463-F3">
        <label>Figure 3.</label>
        <caption>
          <p>Performance benchmark results of reimplemented flagstats versus stock version. (A) Results using the GIAB HG002 Illumina 2x250 BAM file with an NVMe SSD array available on AWS. (B) Results using the rapid autopsy Bn2 sample BAM file with an NVMe SSD array available on AWS. (C) Results using the GIAB HG002 Illumina 2x250 BAM file with a Lustre distributed file system. (D) Results using the rapid autopsy Bn2 sample BAM file with a Lustre distributed file system.</p>
        </caption>
        <graphic xlink:href="btad463f3" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>3.4 Reimplementation of a real-world, widely used program and performance evaluation</title>
      <p>The second sample program we ported to quickBAM is a utility found in the somatic copy number variant detection algorithm FACETS (<xref rid="btad463-B10" ref-type="bibr">Shen and Seshan 2016</xref>) called “<italic toggle="yes">snp-pileup</italic>.” <italic toggle="yes">Snp-pileup</italic> takes as input a set of BAM files and a VCF file [commonly the dbSNP published human common polymorphic sites (<xref rid="btad463-B11" ref-type="bibr">Sherry <italic toggle="yes">et al.</italic> 1999</xref>)], and iterates over positions in the VCF file. At each position, it pulls all the reads from the BAM files overlapping with the position, and extracts the sequencing coverage and variant allele fraction information. Different from the <italic toggle="yes">flagstats</italic> example which parallelizes over multiple, nonoverlapping genomic windows, we ported <italic toggle="yes">snp-pileup</italic> to parallelize over groups of consecutive variant positions. As shown in <xref rid="btad463-F4" ref-type="fig">Fig. 4</xref>, quickBAM <italic toggle="yes">snp-pileup</italic> achieved over 1.5 GiB/s data processing throughput with quickBAM’s built-in multiple input pileup engine, more than 38 times faster than the original implementation which does not support multithreading (HG002 &amp; HG004 on AWS, 1744.51 MiB/s quickBAM versus 46.38 MiB/s stock). Consequently, using the Genome In A Bottle (<xref rid="btad463-B13" ref-type="bibr">Zook <italic toggle="yes">et al.</italic> 2016</xref>) HG002 and HG004 Illumina 2x250bp BAM files (242 GiB of data combined), a two samples joint <italic toggle="yes">snp-pileup</italic> can be finished in 2 min 20 s (quickBAM), compared to 1 h 29 min (original version). A similar speedup is observed with the tumor normal dataset. Full timing observations are listed in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S3</xref>. We note that the quickBAM version of <italic toggle="yes">snp-pileup</italic> produces nearly identical results compared to the original version, differing at 217 out of 28.6 million positions (GIAB) and 1879 out of 28.2 million positions (tumor normal). We discuss this in detail below. Other algorithms that can potentially be implemented in a similar fashion include single cell sequencing data genotyping and variant calling.</p>
      <fig position="float" id="btad463-F4">
        <label>Figure 4.</label>
        <caption>
          <p>Performance benchmark results of reimplemented <italic toggle="yes">snp-pileup</italic> versus stock version. Note that the stock implementation of <italic toggle="yes">snp-pileup</italic> does not support multi-threading. (A) Results using the GIAB HG002 and HG004 Illumina 2x250 BAM files with an NVMe SSD array available on AWS. (B) Results using the rapid autopsy Bn2 and Germ1 BAM files with an NVMe SSD array available on AWS. (C) Results using the GIAB HG002 and HG004 Illumina 2x250 BAM file with a Lustre distributed file system. (D) Results using the rapid autopsy Bn2 and Germ1 BAM file with a Lustre distributed file system.</p>
        </caption>
        <graphic xlink:href="btad463f4" position="float"/>
      </fig>
      <p>We traced the small differences between the original and quickBAM <italic toggle="yes">snp-pileup</italic> to three types of edge cases. The first, which accounts for 10% of the differences, is due to a bug in the stock <italic toggle="yes">snp-pileup</italic> program that would erroneously skip over a location when the input VCF file contains duplicate genomic coordinates, and the first occurrence is not a bi-allelic SNP site. The second, which accounts for 75% of the differences, is due to the difference between how the multiple pileup engines in HTSLIB and quickBAM enforce limits in extremely high coverage regions. HTSLIB uses a “pileup iterator” to which reads are added until the limit is reached, and no more reads will be added until one is removed from the iterator. The pileup engine in quickBAM, however, tries to use every read to update the pileup information at each genomic location. The limit is built into the per-location data structure instead. This generally results in quickBAM counting more even coverage. If there is a demand from the community, we will update the quickBAM multiple pileup engine to behave exactly as HTSLIB in high coverage regions. For the third type of edge case (15% of the differences), we verified that quickBAM produced the same results as a third pileup program: <italic toggle="yes">samtools mpileup</italic>. Since the stock <italic toggle="yes">snp-pileup</italic> uses the same HTSLIB multiple pileup engine as <italic toggle="yes">samtools mpileup</italic> does, the exact reason for these differences cannot be determined without putting significant debugging efforts into the original <italic toggle="yes">snp-pileup</italic> program. We thus conclude that these differences are unlikely due to mistakes in quickBAM.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>In this manuscript, we present quickBAM, a software library for accessing sequence alignments in BAM files with a high degree of parallelization and performance. We achieve this by taking advantage of parallel file access supported by modern storage hardware. As a demonstration of quickBAM’s utility, we ported various types of sequence analysis algorithms, which have shown consistently higher performance than their original implementations. Performance gain is observed with both common on-premise storage solutions such as Lustre, and with new storage hardware such as NVMe SSDs available commonly on the cloud. Porting algorithms to quickBAM offers significant analysis time reduction. As demonstrated by the <italic toggle="yes">snp-pileup</italic> benchmark results, a tumor-normal pair 60X WGS dataset, which took 1.5 h to process using the original version, can be finished in just under 2.5 min with a quickBAM implementation on the same hardware. While not being the primary focus of this manuscript, we further benchmarked quickBAM’s performance on slow storage media (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S4</xref>). While quickBAM and samtools can both easily saturate the storage bandwidth with a moderate number of threads, quickBAM showed a performance advantage with as few as two threads.</p>
    <p>Interestingly, our results show that, while quickBAM allows much higher performance scalability with respect to increasing parallelism, the performance eventually starts to decline as the number of threads approaches the total number of hyperthreaded cores (with the exception of flagstats on Lustre). This is likely due to oversubscribing system resources, and resulting in software and hardware scheduling overhead exceeding the benefit of increased parallelism. Therefore, it suggests that “sweet-spots” exist for specific hardware/software combinations, and should be determined with trial runs. We should point out that our benchmarking results are focused on high-quality human sequencing data. In other situations, such as highly fragmented plant genomes or low mean coverage sequencing technologies like ChIP-seq, the observed performance gain may or may not generalize. Special care on how work tasks are partitioned are likely needed to maximize parallel efficiency.</p>
    <p>Our framework encourages “internal parallelism” i.e. one copy of the analysis program is launched which performs job division and coordinates multi-threading, as opposed to “external parallelism” i.e. many copies of the same analysis programs are launched with each one configured to perform a subset of the total work. There are two benefits of internal parallelism we recognize. First, it is generally easier to program the job division/results gathering processes within the same program space as the actual work routines. We took advantage of this in <italic toggle="yes">snp-pileup</italic> to partition jobs roughly according to the size of data each job spans using the BAM index. And second, since the number of jobs created is independent of the number of threads (with the help of thread pools), it is easier to avoid hardware oversubscription while at the same time benefit from load balancing via job stealing i.e. an idling thread can take jobs from a busy thread to maximize hardware utilization. The trade-off, however, is that internal parallel programs are great at scaling up, but not at scaling out. In future work, we plan to incorporate external parallelism mechanisms such as the OpenMPI software library (<xref rid="btad463-B5" ref-type="bibr">Gabriel <italic toggle="yes">et al.</italic> 2004</xref>) to make quickBAM even more scalable. Other features planned for future updates after our initial release are CRAM support and remote URL access support.</p>
    <p>Our work enables many types of sequence analysis software to be accelerated significantly, which in turn benefit time sensitive clinical/research applications such as precision medicine. Our code is open source and publicly available with extensive documentation and sample programs. We plan to actively maintain the project, incorporating further improvements and developing new features according to feedback from the user community.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad463_Supplementary_Data</label>
      <media xlink:href="btad463_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The support and resources from the Center for High Performance Computing at the University of Utah are gratefully acknowledged.</p>
  </ack>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>The authors declare no conflicts of interest.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by National Institute of Health [U24CA209999 to A.P., X.H., G.T.M., and Y.Q., 1R21CA271098-01A1 to A.P., G.T.M., and Y.Q.]; an internal grant from the Center for Genomic Medicine for the development of computational pipelines supporting precision oncology (to A.P., X.H., G.T.M., and Y.Q.). The computational resources used were partially funded by the National Institute of Health Shared Instrumentation [1S10OD021644-01A1].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>GIAB Ashkenazim Trio HG002 and HG004 Illumina 2x250bp novoalign GRCh38 BAM files are available at</p>
    <list list-type="bullet">
      <list-item>
        <p><ext-link xlink:href="https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/NIST_Illumina_2x250bps/novoalign_bams/" ext-link-type="uri">https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/NIST_Illumina_2x250bps/novoalign_bams/</ext-link>.</p>
      </list-item>
      <list-item>
        <p><ext-link xlink:href="https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG004_NA24143_mother/NIST_Illumina_2x250bps/novoalign_bams/" ext-link-type="uri">https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG004_NA24143_mother/NIST_Illumina_2x250bps/novoalign_bams/</ext-link>.</p>
      </list-item>
    </list>
    <p>The rapid autopsy tumor normal sample dataset was from a published study (<xref rid="btad463-B6" ref-type="bibr">Huang et al., 2021</xref>).</p>
    <p>Known polymorphism sites VCF used for the snp-pileup benchmark experiments are available at</p>
    <list list-type="bullet">
      <list-item>
        <p><ext-link xlink:href="https://ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/VCF/00-common_all.vcf.gz" ext-link-type="uri">ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/VCF/00-common_all.vcf.gz</ext-link>.</p>
      </list-item>
    </list>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad463-B1">
      <mixed-citation publication-type="journal"><collab>1000 Genomes Project Consortium</collab>. <article-title>A global reference for human genetic variation</article-title>. <source>Nature</source>  <year>2015</year>;<volume>526</volume>:<fpage>68</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">26432245</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Barnett</surname><given-names>DW</given-names></string-name>, <string-name><surname>Garrison</surname><given-names>EK</given-names></string-name>, <string-name><surname>Quinlan</surname><given-names>AR</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>BamTools: a C++ API and toolkit for analyzing and managing BAM files</article-title>. <source>Bioinformatics</source>  <year>2011</year>;<volume>27</volume>:<fpage>1691</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">21493652</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bonfield</surname><given-names>JK</given-names></string-name>, <string-name><surname>Marshall</surname><given-names>J</given-names></string-name>, <string-name><surname>Danecek</surname><given-names>P</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>HTSlib: C library for reading/writing high-throughput sequencing data</article-title>. <source>Gigascience</source>  <year>2021</year>;<volume>10</volume>:<fpage>giab007</fpage>.<pub-id pub-id-type="pmid">33594436</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Elliott</surname><given-names>AM</given-names></string-name>, <string-name><surname>Du Souich</surname><given-names>C</given-names></string-name>, <string-name><surname>Lehman</surname><given-names>A</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>RAPIDOMICS: rapid genome-wide sequencing in a neonatal intensive care unit-successes and challenges</article-title>. <source>Eur J Pediatr</source>  <year>2019</year>;<volume>178</volume>:<fpage>1207</fpage>–<lpage>18</lpage>.<pub-id pub-id-type="pmid">31172278</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B5">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Gabriel</surname><given-names>E</given-names></string-name>, <string-name><surname>Fagg</surname><given-names>GE</given-names></string-name>, <string-name><surname>Bosilca</surname><given-names>G</given-names></string-name></person-group>  <etal>et al</etal>  <part-title>Open MPI: goals, concept, and design of a next generation MPI implementation</part-title>. In: Kranzlmüller D, Kacsuk P. and Dongarra J (eds) <source>Recent Advances in Parallel Virtual Machine and Message Passing Interface</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer</publisher-name>, <year>2004</year>, <fpage>97</fpage>–<lpage>104</lpage>.</mixed-citation>
    </ref>
    <ref id="btad463-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Huang</surname><given-names>X</given-names></string-name>, <string-name><surname>Qiao</surname><given-names>Y</given-names></string-name>, <string-name><surname>Brady</surname><given-names>SW</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Novel temporal and spatial patterns of metastatic colonization from breast cancer rapid-autopsy tumor biopsies</article-title>. <source>Genome Med</source>  <year>2021</year>;<volume>13</volume>:<fpage>170</fpage>.<pub-id pub-id-type="pmid">34711268</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H</given-names></string-name>, <string-name><surname>Handsaker</surname><given-names>B</given-names></string-name>, <string-name><surname>Wysoker</surname><given-names>A</given-names></string-name></person-group>  <etal>et al</etal>; <collab>1000 Genome Project Data Processing Subgroup</collab>. <article-title>The sequence alignment/map format and SAMtools</article-title>. <source>Bioinformatics</source>  <year>2009</year>;<volume>25</volume>:<fpage>2078</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Petrikin</surname><given-names>JE</given-names></string-name>, <string-name><surname>Willig</surname><given-names>LK</given-names></string-name>, <string-name><surname>Smith</surname><given-names>LD</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Rapid whole genome sequencing and precision neonatology</article-title>. <source>Semin Perinatol</source>  <year>2015</year>;<volume>39</volume>:<fpage>623</fpage>–<lpage>31</lpage>.<pub-id pub-id-type="pmid">26521050</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schwartzberg</surname><given-names>L</given-names></string-name>, <string-name><surname>Kim</surname><given-names>ES</given-names></string-name>, <string-name><surname>Liu</surname><given-names>D</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Precision oncology: who, how, what, when, and when not?</article-title>  <source>Am Soc Clin Oncol Educ Book</source>  <year>2017</year>;<volume>37</volume>:<fpage>160</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">28561651</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shen</surname><given-names>R</given-names></string-name>, <string-name><surname>Seshan</surname><given-names>VE.</given-names></string-name></person-group>  <article-title>FACETS: allele-specific copy number and clonal heterogeneity analysis tool for high-throughput DNA sequencing</article-title>. <source>Nucleic Acids Res</source>  <year>2016</year>;<volume>44</volume>:<fpage>e131</fpage>.<pub-id pub-id-type="pmid">27270079</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sherry</surname><given-names>ST</given-names></string-name>, <string-name><surname>Ward</surname><given-names>M</given-names></string-name>, <string-name><surname>Sirotkin</surname><given-names>K</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>dbSNP-database for single nucleotide polymorphisms and other classes of minor genetic variation</article-title>. <source>Genome Res</source>  <year>1999</year>;<volume>9</volume>:<fpage>677</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">10447503</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wala</surname><given-names>J</given-names></string-name>, <string-name><surname>Beroukhim</surname><given-names>R.</given-names></string-name></person-group>  <article-title>SeqLib: a C ++ API for rapid BAM manipulation, sequence alignment and sequence assembly</article-title>. <source>Bioinformatics</source>  <year>2017</year>;<volume>33</volume>:<fpage>751</fpage>–<lpage>3</lpage>.<pub-id pub-id-type="pmid">28011768</pub-id></mixed-citation>
    </ref>
    <ref id="btad463-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zook</surname><given-names>JM</given-names></string-name>, <string-name><surname>Catoe</surname><given-names>D</given-names></string-name>, <string-name><surname>McDaniel</surname><given-names>J</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Extensive sequencing of seven human genomes to characterize benchmark reference materials</article-title>. <source>Sci Data</source>  <year>2016</year>;<volume>3</volume>:<fpage>160025</fpage>.<pub-id pub-id-type="pmid">27271295</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
