<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5731503</article-id>
    <article-id pub-id-type="publisher-id">1919</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-017-1919-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>CAMSA: a tool for comparative analysis and merging of scaffold assemblies</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Aganezov</surname>
          <given-names>Sergey S.</given-names>
        </name>
        <address>
          <email>aganezov@cs.princeton.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Alekseyev</surname>
          <given-names>Max A.</given-names>
        </name>
        <address>
          <email>maxal@gwu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2097 5006</institution-id><institution-id institution-id-type="GRID">grid.16750.35</institution-id><institution>Princeton University, </institution></institution-wrap>35 Olden St., Princeton, 08450 NJ USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0413 4629</institution-id><institution-id institution-id-type="GRID">grid.35915.3b</institution-id><institution>ITMO University, </institution></institution-wrap>49 Kronverksky Pr., St. Petersburg, 197101 Russia </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 9510</institution-id><institution-id institution-id-type="GRID">grid.253615.6</institution-id><institution>The George Washington University, </institution></institution-wrap>45085 University Dr., Suite 305, Ashburn, 20147 VA USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>6</day>
      <month>12</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>6</day>
      <month>12</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2017</year>
    </pub-date>
    <volume>18</volume>
    <issue>Suppl 15</issue>
    <issue-sponsor>Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. The articles have undergone the journal's standard peer review process for supplements. The Supplement Editors declare that they have no competing interests.</issue-sponsor>
    <elocation-id>496</elocation-id>
    <permissions>
      <copyright-statement>© The Author(s) 2017</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Despite the recent progress in genome sequencing and assembly, many of the currently available assembled genomes come in a draft form. Such draft genomes consist of a large number of genomic fragments (<italic>scaffolds</italic>), whose positions and orientations along the genome are unknown. While there exists a number of methods for reconstruction of the genome from its scaffolds, utilizing various computational and wet-lab techniques, they often can produce only partial error-prone scaffold assemblies. It therefore becomes important to compare and merge scaffold assemblies produced by different methods, thus combining their advantages and highlighting present conflicts for further investigation. These tasks may be labor intensive if performed manually.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We present CAMSA—a tool for comparative analysis and merging of two or more given scaffold assemblies. The tool (i) creates an extensive report with several comparative quality metrics; (ii) constructs the most confident merged scaffold assembly; and (iii) provides an interactive framework for a visual comparative analysis of the given assemblies. Among the CAMSA features, only scaffold merging can be evaluated in comparison to existing methods. Namely, it resembles the functionality of assembly reconciliation tools, although their primary targets are somewhat different. Our evaluations show that CAMSA produces merged assemblies of comparable or better quality than existing assembly reconciliation tools while being the fastest in terms of the total running time.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>
CAMSA addresses the current deficiency of tools for automated comparison and analysis of multiple assemblies of the same set scaffolds. Since there exist numerous methods and techniques for scaffold assembly, identifying similarities and dissimilarities across assemblies produced by different methods is beneficial both for the developers of scaffold assembly algorithms and for the researchers focused on improving draft assemblies of specific organisms.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12859-017-1919-y) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Assembly reconciliation</kwd>
      <kwd>Scaffolding</kwd>
      <kwd>Visualization</kwd>
      <kwd>Breakpoint graph</kwd>
      <kwd>Genome finishing</kwd>
    </kwd-group>
    <conference xlink:href="http://www.iccabs.org/2016/">
      <conf-name>6th IEEE International Conference on Computational Advances in Bio and Medical Sciences (ICCABS)</conf-name>
      <conf-loc>Atlanta, GA, USA</conf-loc>
      <conf-date>13-15 October 2016</conf-date>
    </conference>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2017</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>While genome sequencing technologies are constantly evolving, researchers are still unable to read complete genomic sequences at once from organisms of interest. So, genome reading is usually done in multiple steps, which involve both in vitro and <italic>in silico</italic> methods. It starts with reading small genomic fragments, called <italic>reads</italic>, originating from unknown locations in the genome. Modern shotgun sequencing technologies can easily produce millions of reads. The problem then becomes to assemble them into the complete genome. Existing de novo genome assembly algorithms can usually assemble reads into longer genomic fragments, called <italic>contigs</italic>, that are typically interweaved in the genome with highly polymorphic and/or repetitive regions. The next step is to construct <italic>scaffolds</italic>, i.e., sequences of (oriented) contigs along the genome interspaced with gaps. The last but not least step is genome finishing that recovers genomic sequences inside the gaps within the scaffolds.</p>
    <p>Unfortunately, the quality of scaffolds (e.g., exposing severe fragmentation) for many genomes makes the finishing step infeasible. As a result, the majority of currently available genomes come in a <italic>draft</italic> form represented by a large number of scaffolds rather than complete chromosomes [<xref ref-type="bibr" rid="CR1">1</xref>]. This emphasizes the need for improving the assembly quality of genomes by constructing longer scaffolds from the given ones,<sup>1</sup> which we refer to as the <italic>scaffold assembly problem</italic>. In other words, the scaffold assembly problem asks for reconstruction of the order of input scaffolds along the genome chromosomes.</p>
    <p>A number of methods have been recently proposed to address the scaffold assembly problem by utilizing various types of additional information and/or in vitro experiments. These methods are based on jumping libraries [<xref ref-type="bibr" rid="CR2">2</xref>–<xref ref-type="bibr" rid="CR8">8</xref>], long error-prone reads (such as PacBio or MinION reads) [<xref ref-type="bibr" rid="CR9">9</xref>–<xref ref-type="bibr" rid="CR13">13</xref>], homology relationship between multiple genomes [<xref ref-type="bibr" rid="CR14">14</xref>–<xref ref-type="bibr" rid="CR16">16</xref>], wet-lab experiments such as the fluorescence <italic>in situ</italic> hybridization (FISH) [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR18">18</xref>], genome maps [<xref ref-type="bibr" rid="CR19">19</xref>–<xref ref-type="bibr" rid="CR21">21</xref>], higher order chromatin interactions [<xref ref-type="bibr" rid="CR22">22</xref>], and so on. Depending on the nature and accuracy of utilized information and techniques, assemblies produced by different methods may still be incomplete and contain errors, thus deviating from each other. Moreover, some scaffolding methods (e.g., based on FISH or HiC data) can produce assemblies, where the (strand-based) orientation of some assembled scaffolds is yet to be determined.</p>
    <p>It therefore becomes crucial to determine what parts of different assemblies are consistent with and/or complement each other, and what parts are conflicting with other assemblies (or even within the same assembly). Furthermore, some scaffold assemblies may utilize only a fraction of the input scaffolds (e.g., homology-based assembly methods do not take into account unannotated scaffolds), thus posing a problem of analyzing and comparing assemblies of varying subsets of scaffolds. Comparative analysis of scaffold assemblies produced by different methods can help the researchers to combine their advantages, and highlight potential conflicts for further investigation. These tasks may be labor-intensive if performed manually.</p>
    <p>While there exists a number of methods [<xref ref-type="bibr" rid="CR23">23</xref>–<xref ref-type="bibr" rid="CR29">29</xref>] for reconciling multiple assemblies of the same organism, they all are limited only to oriented scaffolds and thus are inapplicable to scaffold assemblies that include unoriented scaffolds. Furthermore, some of these methods require a reference genome sequence, which is often unavailable for non-model organisms. On the other hand, reconciliation methods that operate in de-novo fashion often process the input assemblies progressively, which makes such methods sensitive to the order of the input assemblies and affects the quality of the reconciled assembly.</p>
    <p>We present CAMSA, a tool for comparative analysis and de-novo merging of scaffold assemblies. CAMSA takes as an input two or more assemblies of the same set of scaffolds and generates a comprehensive comparative report for them. Input assemblies can include both oriented and unoriented scaffolds, which enables CAMSA to process assemblies from the full range of scaffolding techniques (both <italic>in silico</italic> and in vitro). The generated comparative report not only contains multiple numerical characteristics for the input assemblies, but also provides an interactive framework, allowing one to visually analyze and compare the input scaffold assemblies at regions of interest. CAMSA also computes a <italic>merged assembly</italic>, combining the input assemblies into a more comprehensive one that resolves conflicts and determines orientation of unoriented scaffolds in the most confident way. The non-progressive nature of merging in CAMSA eliminates the dependency on the order of input scaffold assemblies. We remark that CAMSA can be utilized at different stages of the genome assembly process and be applied to assemblies of various genomic fragments, ranging from contigs to superscaffolds. In particular, CAMSA input can include results of other assembly reconciliation methods.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <sec id="Sec3">
      <title>Assembly analysis and visualization</title>
      <p>For the purpose of comparative analysis and visualization of the input scaffold assemblies, CAMSA utilizes the <italic>breakpoint graphs</italic>, the data structure traditionally used for analysis of gene orders across multiple species [<xref ref-type="bibr" rid="CR30">30</xref>]. We will refer to the breakpoint graph constructed on a set of scaffold assemblies as the <italic>scaffold assembly graph</italic> (SAG).</p>
      <p>We start with the case of assemblies with no unoriented scaffolds. Then each assembly <italic>A</italic> can be viewed as a set of sequences of oriented scaffolds. We represent <italic>A</italic> as an individual <italic>scaffold assembly graph</italic>
<italic>SAG</italic>(<italic>A</italic>) with two types of edges: directed edges (<italic>scaffold edges</italic>) encoding scaffolds in <italic>A</italic>, and undirected edges (<italic>assembly edges</italic>) representing scaffold adjacencies and connecting extremities (tails/heads) of the corresponding scaffold edges (Fig. <xref rid="Fig1" ref-type="fig">1</xref>
<xref rid="Fig1" ref-type="fig">a</xref>, <xref rid="Fig1" ref-type="fig">b</xref>, <xref rid="Fig1" ref-type="fig">c</xref>).
<fig id="Fig1"><label>Fig. 1</label><caption><p>Individual scaffold assembly graphs for assemblies <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$A_{1} = \left \{\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{3}}, \protect \overleftarrow {s_{4}}\right), (s_{2})\right \}$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfenced close="}" open="{" separators=""><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq1.gif"/></alternatives></inline-formula> (red edges), <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$A_{2} = \left \{\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}, \protect \overrightarrow {s_{3}}, s_{4}\right)\right \}$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfenced close="}" open="{" separators=""><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq2.gif"/></alternatives></inline-formula> (blue edges), and <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$A_{3} = \left \{\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}, s_{3}\right), (s_{4})\right \}$\end{document}</tex-math><mml:math id="M6"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfenced close="}" open="{" separators=""><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq3.gif"/></alternatives></inline-formula> (green edges), and their scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,<italic>A</italic>
<sub>2</sub>,<italic>A</italic>
<sub>3</sub>). Scaffold edges are colored black. Actual assembly edges are shown as solid, while candidate assembly edges are shown as dashed. <bold>a</bold> Individual scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>). <bold>b</bold> Individual scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>2</sub>). <bold>c</bold> Individual scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>3</sub>). <bold>d</bold> Scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,<italic>A</italic>
<sub>2</sub>,<italic>A</italic>
<sub>3</sub>)</p></caption><graphic xlink:href="12859_2017_1919_Fig1_HTML" id="MO1"/></fig>
</p>
      <p>We find it convenient to refer to each assembly edge as an <italic>assembly point</italic>. Equivalently, an assembly point in <italic>A</italic> can be represented by an ordered pair of oriented scaffolds. We specify the orientation of a scaffold <italic>s</italic>, either by a sign (+<italic>s</italic> or −<italic>s</italic>) or by an overhead arrow (<inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\protect \overrightarrow {s}$\end{document}</tex-math><mml:math id="M8"><mml:mover class="overrightarrow"><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq4.gif"/></alternatives></inline-formula> or <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\protect \overleftarrow {s}$\end{document}</tex-math><mml:math id="M10"><mml:mover class="overleftarrow"><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mo>⃖</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq5.gif"/></alternatives></inline-formula>). For example, <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$(\protect \overrightarrow {s_{1}}, \protect \overleftarrow {s_{2}})$\end{document}</tex-math><mml:math id="M12"><mml:mo>(</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq6.gif"/></alternatives></inline-formula> and <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$(\protect \overrightarrow {s_{2}}, \protect \overleftarrow {s_{1}})$\end{document}</tex-math><mml:math id="M14"><mml:mo>(</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq7.gif"/></alternatives></inline-formula> represent the same assembly point between scaffolds <italic>s</italic>
<sub>1</sub> and <italic>s</italic>
<sub>2</sub> following each other head-to-head. Clearly, any assembly is completely defined by the set of its assembly points.</p>
      <p>To construct the scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) of input assemblies <italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>, we represent them as individual graphs <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>),…,SAG(<italic>A</italic>
<sub><italic>k</italic></sub>), where the undirected edges in each <italic>SAG</italic>(<italic>A</italic>
<sub><italic>i</italic></sub>) are colored into unique color. Then the graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) can be viewed as the superposition of individual graphs <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>),…,SAG(<italic>A</italic>
<sub><italic>k</italic></sub>) and can be obtained by gluing the identically labeled directed edges. So the graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) consists of (directed, labeled) scaffold edges encoding scaffolds and (undirected, unlabeled) assembly edges of <italic>k</italic> colors encoding assembly points in different input assemblies (Fig. <xref rid="Fig1" ref-type="fig">1</xref>
<xref rid="Fig1" ref-type="fig">d</xref>). We will refer to edges of color <italic>A</italic>
<sub><italic>i</italic></sub> (i.e., coming from <italic>SAG</italic>(<italic>A</italic>
<sub><italic>i</italic></sub>)) as <italic>A</italic>
<sub><italic>i</italic></sub>-edges. The assembly edges connecting the same two vertices <italic>x</italic> and <italic>y</italic> form the <italic>multiedge</italic> {<italic>x,y</italic>} in <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>). The <italic>multicolor</italic> of {<italic>x,y</italic>} is defined as the union of the colors of individual edges connecting <italic>x</italic> and <italic>y</italic>.</p>
      <p>We define the (ordinary) <italic>degree</italic> odeg(<italic>x</italic>) of a vertex <italic>x</italic> in <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) as the number of assembly edges incident to <italic>x</italic>. We distinguish it from the <italic>multidegree</italic> mdeg(<italic>x</italic>) defined as the number of adjacent vertices that are connected to <italic>x</italic> with assembly edges.</p>
      <p>When all assemblies <italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub> agree on a particular assembly point {<italic>x,y</italic>}, the graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) contains a multi-edge {<italic>x,y</italic>} composed of edges of all <italic>k</italic> different colors. In other words, both vertices <italic>x</italic> and <italic>y</italic> in this case have degree <italic>k</italic> and multidegree 1. For a vertex <italic>z</italic> in <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>), odeg(<italic>z</italic>)≠<italic>k</italic> or mdeg(<italic>z</italic>)≠1 indicate some type of inconsistency between the assemblies.</p>
      <p>For given scaffold assemblies <italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>n</italic></sub>, we classify an individual assembly point <italic>p</italic>∈<italic>A</italic>
<sub><italic>i</italic></sub> representing an <italic>A</italic>
<sub><italic>i</italic></sub>-edge {<italic>x,y</italic>} in <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) as follows: 
<list list-type="bullet"><list-item><p><bold>unique</bold> if the multicolor of {<italic>x,y</italic>} is {<italic>A</italic>
<sub><italic>i</italic></sub>}, i.e., the assembly point <italic>p</italic> is present only in a single assembly;</p></list-item><list-item><p><bold>conflicting</bold> with an assembly point <italic>c</italic>∈<italic>A</italic>
<sub><italic>j</italic></sub> if <italic>c</italic> represents an assembly edge {<italic>x,z</italic>} with <italic>z</italic>≠<italic>y</italic> (i.e., mdeg(<italic>x</italic>)&gt;1), or an assembly edge {<italic>y,z</italic>} with <italic>z</italic>≠<italic>x</italic> (i.e., mdeg(<italic>y</italic>)&gt;1). In particular, <italic>p</italic> is 
<list list-type="bullet"><list-item><p><bold>in-conflicting</bold> with <italic>c</italic> if <italic>i</italic>=<italic>j</italic> (Fig. <xref rid="Fig2" ref-type="fig">2</xref>
<xref rid="Fig2" ref-type="fig">c</xref>);
</p></list-item><list-item><p><bold>out-conflicting</bold> with <italic>c</italic> if <italic>i</italic>≠<italic>j</italic> (Fig. <xref rid="Fig2" ref-type="fig">2</xref>
<xref rid="Fig2" ref-type="fig">a</xref>).<sup>2</sup>
</p></list-item></list>
</p></list-item><list-item><p><bold>non-conflicting</bold> if <italic>p</italic> is not conflicting with any other assembly points.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Illustration of various conflicts between assembly points of assemblies <italic>A</italic>
<sub>1</sub> (red edges) and <italic>A</italic>
<sub>2</sub> (blue edges). <bold>a</bold> Assembly points <inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M16"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq8.gif"/></alternatives></inline-formula> from assembly <italic>A</italic>
<sub>1</sub> and <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{3}}\right)$\end{document}</tex-math><mml:math id="M18"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq9.gif"/></alternatives></inline-formula> from assembly <italic>A</italic>
<sub>2</sub> are <italic>out-conflicting</italic>. <bold>b</bold> Assembly points <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (s_{1}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M20"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq10.gif"/></alternatives></inline-formula> from <italic>A</italic>
<sub>1</sub> and <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M22"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq11.gif"/></alternatives></inline-formula> from <italic>A</italic>
<sub>2</sub> are <italic>out-semiconflicting</italic>. <bold>c</bold> Assembly points <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M24"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq12.gif"/></alternatives></inline-formula> and <inline-formula id="IEq13"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{2}}, \protect \overrightarrow {s_{3}}\right)$\end{document}</tex-math><mml:math id="M26"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq13.gif"/></alternatives></inline-formula> both from <italic>A</italic>
<sub>1</sub> are <italic>in-conflicting</italic>. <bold>d</bold> assembly points <inline-formula id="IEq14"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (s_{1}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M28"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq14.gif"/></alternatives></inline-formula> and <inline-formula id="IEq15"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\left (\protect \overrightarrow {s_{1}}, \protect \overrightarrow {s_{2}}\right)$\end{document}</tex-math><mml:math id="M30"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq15.gif"/></alternatives></inline-formula> both from <italic>A</italic>
<sub>1</sub> are <italic>in-semiconflicting</italic>
</p></caption><graphic xlink:href="12859_2017_1919_Fig2_HTML" id="MO2"/></fig>
</p></list-item></list>
</p>
      <p>We say that an assembly point is in-/out- conflicting if it is in-/out- conflicting with at least one other assembly point.</p>
    </sec>
    <sec id="Sec4">
      <title>Dealing with Unoriented scaffolds</title>
      <p>While conventional multiple breakpoint graphs are constructed for sequences of oriented genes, in CAMSA we extend scaffold assembly graphs to support assemblies that may include oriented as well as unoriented scaffolds.</p>
      <p>In addition to (oriented) assembly points formed by pairs of oriented scaffolds, we now consider semi-oriented and unoriented assembly points.</p>
      <p>A <italic>semi-oriented</italic> assembly point represents an adjacency between an oriented scaffold and an unoriented one. For example, <inline-formula id="IEq16"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$(\protect \overleftarrow {s_{1}},s_{2})$\end{document}</tex-math><mml:math id="M32"><mml:mo>(</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq16.gif"/></alternatives></inline-formula> and <inline-formula id="IEq17"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$(s_{2},\protect \overrightarrow {s_{1}})$\end{document}</tex-math><mml:math id="M34"><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq17.gif"/></alternatives></inline-formula> denote the same semi-oriented assembly point, where scaffold <italic>s</italic>
<sub>1</sub> is oriented and <italic>s</italic>
<sub>2</sub> is not (as emphasized by a missing overhead arrow). Similarly, an <italic>unoriented</italic> assembly point represents an adjacency between two unoriented scaffolds. For example, (<italic>s</italic>
<sub>1</sub>,<italic>s</italic>
<sub>2</sub>) and (<italic>s</italic>
<sub>2</sub>,<italic>s</italic>
<sub>1</sub>) denote the same unoriented assembly point between unoriented scaffolds <italic>s</italic>
<sub>1</sub> and <italic>s</italic>
<sub>2</sub>.</p>
      <p>We define a <italic>realization</italic> of an assembly point <italic>p</italic> as any oriented assembly point that can be obtained from <italic>p</italic> by orienting unoriented scaffolds. We denote the set of realizations of <italic>p</italic> as <italic>R</italic>(<italic>p</italic>). If <italic>p</italic> is oriented, then it has a single realization equal to <italic>p</italic> itself (i.e., <italic>R</italic>(<italic>p</italic>)={<italic>p</italic>}); if <italic>p</italic> is semi-oriented, then it has two realizations (i.e., |<italic>R</italic>(<italic>p</italic>)|=2); and if <italic>p</italic> is unoriented, then it has four realizations (i.e., |<italic>R</italic>(<italic>p</italic>)|=4). For example, 
<disp-formula id="Equa"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$R\left((s_{1},s_{2})\right) = \left\{ (\protect\overleftarrow{s_{1}},\protect\overleftarrow{s_{2}}), (\protect\overleftarrow{s_{1}},\protect\overrightarrow{s_{2}}), (\protect\overrightarrow{s_{1}},\protect\overleftarrow{s_{2}}), (\protect\overrightarrow{s_{1}},\protect\overrightarrow{s_{2}}) \right\}. $$ \end{document}</tex-math><mml:math id="M36"><mml:mrow><mml:mi>R</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mfenced close="}" open="{" separators=""><mml:mrow><mml:mo>(</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>)</mml:mo><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>)</mml:mo><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overleftarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃖</mml:mo></mml:mover><mml:mo>)</mml:mo><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mfenced><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12859_2017_1919_Article_Equa.gif" position="anchor"/></alternatives></disp-formula>
</p>
      <p>In the scaffold assembly graph, we add assembly edges encoding all realizations of semi-/un- oriented assembly points and refer to such edges as <italic>candidate</italic>, in contrast to <italic>actual</italic> assembly edges encoding oriented assembly points.</p>
      <p>We extend the conflictedness classification to semi-oriented and unoriented assembly points as follows. An assembly point <italic>p</italic> is <italic>in-conflicting</italic> (<italic>out-confliciting</italic>) with an assembly point <italic>c</italic> if all pairs of their realizations {<italic>p</italic>
<sup>′</sup>,<italic>c</italic>
<sup>′</sup>}∈<italic>R</italic>(<italic>p</italic>)×<italic>R</italic>(<italic>c</italic>) are in-conflicting (out-confliciting). Similarly, an assembly point <italic>p</italic> is <italic>in-semiconflicting</italic> (<italic>out-semiconfliciting</italic>) with an assembly point <italic>c</italic> if some but not all pairs of their realizations are in-conflicting (out-confliciting) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>
<xref rid="Fig2" ref-type="fig">b</xref>, <xref rid="Fig2" ref-type="fig">d</xref>). It is easy to see that for the case of all assembly points being oriented, this definition is consistent with the one given in the previous section.</p>
    </sec>
    <sec id="Sec5">
      <title>Merging assemblies</title>
      <p>
CAMSA can resolve conflicts in the input assemblies by merging them into a single (not self-confliciting) <italic>merged assembly</italic> that is most consistent with the input ones. The merged assembly is also used to determine orientation of (some) unoriented scaffolds in one input assemblies that is most confident and/or consistent with other input assemblies. In other words, the merged assembly helps to identify realizations of (some) semi-/un- oriented assembly points that are most consistent with other assemblies. Namely, for each semi-/un- oriented assembly point, the merged assembly contains either only one or none of its realizations; and in the former case, the included realization defines the most confident orientation of the corresponding unoriented scaffolds.</p>
      <p>Assembly merging performed by CAMSA is based on how often each assembly point appears in the input assemblies as well as on the (optional) confidence of each such appearance. Namely, for each assembly point <italic>p</italic> in an input assembly <italic>A</italic>, CAMSA allows to specify the <italic>confidence weight</italic>
<sc>CW</sc>
<sub><italic>A</italic></sub>(<italic>p</italic>) from the interval [ 0,1], which is then assigned to the corresponding assembly edge(s) (Fig. <xref rid="Fig3" ref-type="fig">3</xref>
<xref rid="Fig3" ref-type="fig">a</xref>). The confidence weights are expected to reflect the confidence level of the assembly methods in what they report as scaffold adjacencies (e.g., heuristic methods should probably have smaller confidence as compared to more reliable wet-lab techniques). By default, all actual assembly edges have the confidence weight equal 1, and all candidate assembly edges have weight 0.75 (these default values can be overwritten by the user).
<fig id="Fig3"><label>Fig. 3</label><caption><p><bold>a</bold> Scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,<italic>A</italic>
<sub>2</sub>,<italic>A</italic>
<sub>3</sub>), where assemblies <italic>A</italic>
<sub>1</sub>, <italic>A</italic>
<sub>2</sub>, and <italic>A</italic>
<sub>3</sub> are represented as red, blue, and green assembly edges, respectively, labeled with the corresponding confidence weights. <bold>b</bold> Merged scaffold assembly graph <italic>MSAG</italic>(<italic>A</italic>
<sub>1</sub>,<italic>A</italic>
<sub>2</sub>,<italic>A</italic>
<sub>3</sub>) obtained from <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,<italic>A</italic>
<sub>2</sub>,<italic>A</italic>
<sub>3</sub>) by replacing each assembly multi-edge with an ordinary edge of combined weight. The bold assembly edges represent the merged assembly computed by CAMSA
</p></caption><graphic xlink:href="12859_2017_1919_Fig3_HTML" id="MO3"/></fig>
</p>
      <p>For any oriented assembly <italic>B</italic> (viewed as a set of oriented assembly points), we define the <italic>consistency score</italic>
<sc>CS</sc>
<sub><italic>B</italic></sub>(<italic>A</italic>) of an input assembly <italic>A</italic> with respect to <italic>B</italic> as <sc>CS</sc>
<sub><italic>B</italic></sub>(<italic>A</italic>)<inline-formula id="IEq18"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$ = \sum _{p\in B} \overline {\textsc {cw}}_{A}(p)$\end{document}</tex-math><mml:math id="M38"><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mover accent="false"><mml:mrow><mml:mtext mathvariant="normal">CW</mml:mtext></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>A</mml:mi></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq18.gif"/></alternatives></inline-formula>, where 
<disp-formula id="Equb"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\overline{\textsc{cw}}_{A}(p) = \left\{\begin{array}{ll} 0,&amp;\ \text{if}\ \forall\ x\in A\ :\ p\not\in R(x); \\ \textsc{cw}_{A}(x),&amp;\ \text{if}\ \exists\ x\in A\ :\ p\in R(x). \end{array}\right. $$ \end{document}</tex-math><mml:math id="M40"><mml:mrow><mml:msub><mml:mrow><mml:mover accent="false"><mml:mrow><mml:mtext mathvariant="normal">CW</mml:mtext></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>A</mml:mi></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn><mml:mo>,</mml:mo></mml:mtd><mml:mtd><mml:mspace width="1em"/><mml:mtext>if</mml:mtext><mml:mspace width="1em"/><mml:mo>∀</mml:mo><mml:mspace width="1em"/><mml:mi>x</mml:mi><mml:mo>∈</mml:mo><mml:mi>A</mml:mi><mml:mspace width="1em"/><mml:mo>:</mml:mo><mml:mspace width="1em"/><mml:mi>p</mml:mi><mml:mo>∉</mml:mo><mml:mi>R</mml:mi><mml:mo>(</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo><mml:mo>;</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mtext mathvariant="normal">CW</mml:mtext></mml:mrow><mml:mrow><mml:mi>A</mml:mi></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo><mml:mo>,</mml:mo></mml:mtd><mml:mtd><mml:mspace width="1em"/><mml:mtext>if</mml:mtext><mml:mspace width="1em"/><mml:mo>∃</mml:mo><mml:mspace width="1em"/><mml:mi>x</mml:mi><mml:mo>∈</mml:mo><mml:mi>A</mml:mi><mml:mspace width="1em"/><mml:mo>:</mml:mo><mml:mspace width="1em"/><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>R</mml:mi><mml:mo>(</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo><mml:mi>.</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12859_2017_1919_Article_Equb.gif" position="anchor"/></alternatives></disp-formula> We pose the <italic>assembly merging problem</italic> (AMP) as follows.</p>
      <sec id="d29e2522">
        <title>
          <bold>Problem 1</bold>
        </title>
        <p>(Assembly Merging Problem, AMP) Given assemblies <italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub> of the same set of scaffolds <italic>S</italic>, find an assembly <italic>M</italic> of <italic>S</italic> containing only oriented assembly points such that (i) <italic>M</italic> is not self-conflicting (i.e., does not contain any in-conflicting assembly points); (ii) <inline-formula id="IEq19"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\sum _{i=1}^{k} \textsc {cs}_{M}(A_{i})$\end{document}</tex-math><mml:math id="M42"><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mrow><mml:mtext mathvariant="normal">CS</mml:mtext></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq19.gif"/></alternatives></inline-formula> is maximized; (iii) for every assembly point <italic>p</italic>∈<italic>A</italic>
<sub>1</sub>∪⋯∪<italic>A</italic>
<sub><italic>k</italic></sub>, at most one of its realizations is present in <italic>M</italic> (i.e., |<italic>M</italic>∩<italic>R</italic>(<italic>p</italic>)|≤1).</p>
        <p>For a solution <italic>M</italic> to the AMP, the condition (i) implies that the assembly edges in <italic>SAG</italic>(<italic>M</italic>) form a matching. Furthermore, <italic>M</italic> is assumed to correspond to the genome, which may be subject to additional constraints such as having all chromosomes linear (e.g., for vertebrate genomes) or having a single chromosome (e.g., for bacterial genomes). These constraints are translated for <italic>M</italic> as the absence in <italic>SAG</italic>(<italic>M</italic>) of cycles formed by alternating assembly and scaffold edges (for a unichromosomal circular genome, such a cycle can be present in <italic>SAG</italic>(<italic>M</italic>) only if it includes all scaffold edges).</p>
        <p>To address the AMP, we start with construction of the (weighted) <italic>merged scaffold assembly graph</italic>
<italic>MSAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) from <italic>SAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) by replacing each assembly multi-edge with an ordinary assembly edge of the weight equal the total weight of the corresponding multi-edge (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). So, <italic>MSAG</italic>(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>) is the graph with two types of edges: unweighted directed scaffolds edges and weighted undirected assembly edges. The AMP is then can be reformulated as the following <italic>restricted maximum matching problem</italic> (RMMP) on the graph <italic>G</italic>=MSAG(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>):</p>
      </sec>
      <sec id="d29e2732">
        <title>
          <bold>Problem 2</bold>
        </title>
        <p>(Restricted Maximum Matching Problem, RMMP) Given a merged scaffold assembly graph <italic>G</italic>, find a subset <italic>M</italic> of assembly edges in <italic>G</italic> such that (i) <italic>M</italic> is a matching; (ii) <italic>M</italic> has maximum weight; (iii) there are no cycles in <italic>SAG</italic>(<italic>M</italic>).</p>
        <p>Let <italic>M</italic> be a solution to the RMMP. Then the graph <italic>SAG</italic>(<italic>M</italic>) consists of scaffold edges forming a perfect matching and assembly edges from <italic>M</italic> forming a (possibly non-perfect) matching by the condition (i). Thus <italic>SAG</italic>(<italic>M</italic>) is formed by collection of paths and cycles, whose edges alternate between scaffold and assembly edges. Furthermore, by the condition (iii), <italic>SAG</italic>(<italic>M</italic>) consists entirely of alternating paths. A similar optimization problem, where the number of paths and the number cycles in the resulting <italic>SAG</italic>(<italic>M</italic>) are fixed, is known to be NP-complete [<xref ref-type="bibr" rid="CR31">31</xref>], leaving a little hope for the RMMP to have a polynomial-time solution. Instead, CAMSA employs two merging heuristic solutions building upon the previously proposed algorithms [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR32">32</xref>] as described below in this section.</p>
        <p><bold>Greedy merging heuristics.</bold> For a given merged scaffold assembly graph <italic>G</italic>, this strategy starts with the graph <italic>H</italic> consisting of scaffold edges from <italic>G</italic> and then iteratively enriches <italic>H</italic> with assembly edges so that no cycles are created in <italic>H</italic>. At any stage of this process, <italic>H</italic> is considered as a collection of alternating paths, some of which are merged into a longer path by adding a corresponding assembly edge. The paths to merge are selected based on the confidence weight of their linking assembly edge. The final graph <italic>H</italic> constructed this way defines <italic>M</italic> as the set of assembly edges in <italic>H</italic> (and so <italic>SAG</italic>(<italic>M</italic>)=<italic>H</italic>).</p>
        <p><bold>Maximum matching heuristics.</bold> For a given merged scaffold assembly graph <italic>G</italic>, this first computes the maximum weighted matching <italic>M</italic>
<sup>′</sup> formed by assembly edges of <italic>G</italic>. Namely, CAMSA employs the NetworkX library [<xref ref-type="bibr" rid="CR33">33</xref>] implementation of the blossom algorithm [<xref ref-type="bibr" rid="CR34">34</xref>] for computing <italic>M</italic>
<sup>′</sup>.<sup>3</sup> For the maximum weighted matching <italic>M</italic>
<sup>′</sup>, CAMSA looks for cycles in <italic>SAG</italic>(<italic>M</italic>
<sup>′</sup>) (notice that all cycles in <italic>SAG</italic>(<italic>M</italic>
<sup>′</sup>) are vertex-disjoint) and removes an assembly edge of the lowest confidence weight from each such cycle. These edges are also removed from <italic>M</italic>
<sup>′</sup> to form <italic>M</italic> so that <italic>SAG</italic>(<italic>M</italic>) consists entirely of alternating paths.</p>
        <p>We remark that before solving the RMMP for <italic>G</italic>=MSAG(<italic>A</italic>
<sub>1</sub>,…,<italic>A</italic>
<sub><italic>k</italic></sub>), CAMSA allows to remove assembly edges from <italic>G</italic> that have weight smaller than the <italic>weight threshold</italic> specified by the user (by default, this threshold is set to 0, i.e., no edges are removed). The removal of small-weighted assembly edges may be desirable if one wants to restrict attention only to assembly points of certain confidence level (e.g., assembly points coming either from individual highly-reliable assemblies or as a consensus from multiple assemblies). When such removal of low-confidence edges is performed, it is important to do so before (not after) solving the RMMP, since otherwise these edges may introduce a bias for an inclusion of high-confidence edges into the merged assembly <italic>M</italic>.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec6" sec-type="results">
    <title>Results</title>
    <sec id="Sec7">
      <title>Structure of CAMSA report</title>
      <p>The results of comparative analysis and assembly merging performed by CAMSA are presented to the user in the form of an interactive <italic>report</italic>. The report is generated in a form of a JavaScript-powered HTML file, readily accessible for viewing/working in any modern Internet browser (for locally generated reports, Internet connection is not required). Many of the report sections are also available in the form of text files, making them accessible for machine processing. All tables in the report are powered by the DataTables JavaScript library [<xref ref-type="bibr" rid="CR35">35</xref>], which provides flexible and dynamic filtering, sorting, and searching capabilities.</p>
      <p>The first section of the CAMSA report presents aggregated characteristics of each input assemblies as compared to the others: 
<list list-type="bullet"><list-item><p>the number of oriented, semi-oriented, and unoriented assembly points;</p></list-item><list-item><p>the number of in-/out- conflicting assembly points;</p></list-item><list-item><p>the number of in-/out- semiconflicting assembly points;</p></list-item><list-item><p>the number of nonconflicting assembly points;</p></list-item><list-item><p>the number of assembly points that participate in the merged assembly.</p></list-item></list>
</p>
      <p>The second section of the CAMSA report focuses on consistency across various subsets of input assemblies. For each subset, it gives characteristics similar to the ones in the first section, but the values here are aggregated over all assemblies in the subset. The subsets are listed as a bar diagram in the descending order of the number of unique assembly points they contain (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). Such statistics eliminates the need of running CAMSA separately on any assemblies subsets and allows the user to easily identify groups of assemblies that agree/conflict among themselves the most. We remark that each assembly point is counted only once: for the set of assemblies that contains this assembly point (but not for any of its smaller subset). Since the the number of all subsets of input assemblies can be large, CAMSA allows the user to specify the number of top subsets to be displayed.
<fig id="Fig4"><label>Fig. 4</label><caption><p>The second section of the CAMSA report for the scaffold assemblies of <italic>H. sapiens Chr14</italic> produced by ScaffMatch (<italic>A</italic>1), SGA (<italic>A</italic>2), SOAPdenovo2 (<italic>A</italic>3), and SSPACE (<italic>A</italic>4). For each subset of the assemblies <italic>A</italic>1, <italic>A</italic>2, <italic>A</italic>3, and <italic>A</italic>4, it gives the number of assembly points that are unique to this subset; participate in the merged assembly; are in-conflicting; and are in-semiconflicting</p></caption><graphic xlink:href="12859_2017_1919_Fig4_HTML" id="MO4"/></fig>
</p>
      <p>The third section of the CAMSA report provides statistics for each assembly point within each assembly. Extensive interactive filtering allows the user to select assembly points of interest, as well as to export the filtered results, creating problem- / region- / fragment- focused analysis pipelines. We remark that statistical characteristics (e.g., whether an assembly point is in-/out- conflicting or in-/out- semiconflicting) are computed with respect to all of the assembly points in all input assemblies.</p>
      <p>The fourth section of the CAMSA report provides statistics for each assembly point aggregated over all of the input assemblies (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). In contrast to the third section, here each assembly point is shown exactly once, and the <italic>sources</italic> column shows the set of assemblies where this assembly point is present (e.g., in Fig. <xref rid="Fig5" ref-type="fig">5</xref> the assembly point <inline-formula id="IEq20"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$(\protect \overrightarrow {\texttt {contig\_16}}, \protect \overrightarrow {\texttt {contig\_17}})$\end{document}</tex-math><mml:math id="M44"><mml:mo>(</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:mtext mathvariant="monospace">contig_16</mml:mtext></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mover class="overrightarrow"><mml:mrow><mml:mtext mathvariant="monospace">contig_17</mml:mtext></mml:mrow><mml:mo>⃗</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2017_1919_Article_IEq20.gif"/></alternatives></inline-formula> is present in <italic>A</italic>1, <italic>A</italic>2, and <italic>A</italic>3). Again, CAMSA provides extensive filtering to enable a focused analysis of assembly points of interest. The result of assembly points filtration can further be exported in the same format, which is utilized for CAMSA input files (i.e., list of assembly points in a tab-separated format).
<fig id="Fig5"><label>Fig. 5</label><caption><p>The fourth section of the CAMSA report for the scaffold assemblies of <italic>S. aureus</italic> produced by ScaffMatch (<italic>A</italic>1), SGA (<italic>A</italic>2), SOAPdenovo2 (<italic>A</italic>3), and SSPACE (<italic>A</italic>4). <bold>a</bold> Table resulting from filtration and containing only assembly points involving scaffold contig_17. <bold>b</bold> A subgraph of the scaffold assembly graph <italic>SAG</italic>(<italic>A</italic>1,<italic>A</italic>2,<italic>A</italic>3,<italic>A</italic>4) induced by the assembly points involving scaffold contig_17
</p></caption><graphic xlink:href="12859_2017_1919_Fig5_HTML" id="MO5"/></fig>
</p>
      <p>Besides the text-based representation and export, the CAMSA report also provides an interactive visualization and further graphical export of assembly points in the form of the scaffold assembly graph. A vector-based interactive graph visualization is created using the Cytoscape.js library [<xref ref-type="bibr" rid="CR36">36</xref>]. This visualization has a dynamic graph layout and supports filtration of graph components. We allow the user to choose from several Cytoscape.js graph layouts; the default layout comes from [<xref ref-type="bibr" rid="CR37">37</xref>]. At any point the current image of the scaffold assembly graph can be exported from the report into a PNG file.</p>
      <p>The time required for graph visualization heavily depends on the chosen layout and the underlying graph complexity. In cases when visualization inside the report takes too much time, we provide the following workarounds. The assembly points can be exported in a text file and then converted into a DOT file describing the corresponding scaffold assembly graph, whose visualization then can be constructed with GraphViz [<xref ref-type="bibr" rid="CR38">38</xref>]. Alternatively, one can choose to export the SAG subgraph induced by the filtered assembly points into a JSON file, which can further be processed with the desktop Cytoscape software [<xref ref-type="bibr" rid="CR39">39</xref>].</p>
    </sec>
    <sec id="Sec8">
      <title>Evaluation</title>
      <p>While merging of multiple input scaffold assemblies is just one of the features of the CAMSA framework, it is the only one that resembles existing tools, namely those performing assembly reconciliation. We therefore feel obliged to compare its performance to such tools, even though we pose CAMSA as a meta-tool that can take as an input the results of various scaffolding methods, including assembly reconciliation tools.</p>
      <p>We evaluated the assembly merging in CAMSA by running it on multiple scaffold assemblies of genomes of different sizes from the GAGE project [<xref ref-type="bibr" rid="CR40">40</xref>]. While CAMSA can be used at any stage of genome scaffolding, in this evaluation we applied it to the results of initial scaffolding of contigs based on jumping libraries. We chose the following four scaffolders for performing such task: ScaffMatch [<xref ref-type="bibr" rid="CR41">41</xref>], SOAPdenovo2 [<xref ref-type="bibr" rid="CR6">6</xref>], SGA [<xref ref-type="bibr" rid="CR42">42</xref>], and SSPACE [<xref ref-type="bibr" rid="CR8">8</xref>]. The input to these scaffolders was formed by contigs and jumping libraries assembled and corrected by Allpaths-LG [<xref ref-type="bibr" rid="CR43">43</xref>], which are provided by GAGE. The scaffold assemblies produced by these scaffolders were used as an input to CAMSA as well as to Metassembler [<xref ref-type="bibr" rid="CR28">28</xref>] and GAM-NGS [<xref ref-type="bibr" rid="CR29">29</xref>] assembly reconciliation tools.<sup>4</sup> To demonstrate the advantages of CAMSA as a meta-tool, we also run it on the four aforementioned scaffold assemblies combined with the two reconciled assemblies produced by Metassembler and GAM-NGS, and denoted as CAMSA(+GM) in the evaluation results.</p>
      <p>All tools were run on the same computer system with dual Intel Xeon E5-2670 2.6GHz 8-core processors and 64GB of RAM. First, we measured the running time of each tool. Then we assessed the quality of the resulting scaffold assemblies (formed by <italic>merged scaffolds</italic>) with the number of metrics computed by QUAST [<xref ref-type="bibr" rid="CR44">44</xref>] with --scaffolds flag. Below we present most important metrics, while the complete QUAST reports for both input (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S6, S7, S8) and resulting scaffold assemblies (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S9, S10, S11) are provided in Additional file <xref rid="MOESM1" ref-type="media">1</xref>. Namely, we mostly consider the following QUAST metrics: 
<list list-type="bullet"><list-item><p># contigs: in our evaluation, the contigs counted by QUAST correspond the merged scaffolds; so their number measures the contiguity of the resulting scaffold assemblies.</p></list-item><list-item><p># misassemblies (<italic>miss.</italic>): number of breakpoints in the merged scaffolds, for which the left and right flanking sequences align in the reference genome to different strands / chromosomes (inversions / translocations), or on the same stand and chromosome with a gap of ≥ 1000bp between each other (relocations).</p></list-item><list-item><p># local misassemblies (<italic>local miss.</italic>): number of relocations with a gap in the range from 85bp to 1000bp.</p></list-item><list-item><p>NA50: the maximum length <italic>L</italic> such that the fragments of length ≥<italic>L</italic> obtained from the merged scaffolds by breaking them at misassembly sites cover at least 50% of assembly.</p></list-item><list-item><p>NA75: similar to NA50, but with 75% coverage of the assembly.</p></list-item></list>
</p>
      <p>Table <xref rid="Tab1" ref-type="table">1</xref> demonstrates that CAMSA is the fastest among the tools in comparison. We separately benchmarked the data preparation and processing. We remark that depending on the format of input scaffold assemblies as well as the overall assembly pipeline, the data preparation step may be not required or take significantly different time. For CAMSA in this evaluation data preparation involves the conversion of scaffold assemblies from FASTA format into the set of assembly points,<sup>5</sup> using a utility script based on NUCmer software [<xref ref-type="bibr" rid="CR45">45</xref>] ran in parallel for each of the input assemblies. For GAM-NGS, one needs to align the jumping libraries onto the input scaffold assemblies as well as onto the intermediate reconciled assemblies (progressively generated from the input assemblies). The former alignments were treated as data preparation (since they may be readily available from the assembly pipeline), while the latter alignments are generally unavailable and thus were treated as data processing. For Metassembler, no data preparation was required since all alignments are performed internally.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Running time of GAM-NGS, Metassembler, and CAMSA on scaffold assemblies produced by ScaffMatch, SOAPdenovo2, SGA, and SSPACE on three GAGE datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"><italic>S. aureus</italic></th><th align="left"><italic>R. sphaeroides</italic></th><th align="left"><italic>H. sapiens Chr14</italic></th></tr></thead><tbody><tr><td align="left">GAM-NGS</td><td align="left">4m25s (+2m3s)</td><td align="left">8m47s (+4m14s)</td><td align="left">1h29m (+43m)</td></tr><tr><td align="left">Metassembler</td><td align="left">59m16s (+0s)</td><td align="left">1h48m53s (+0s)</td><td align="left">8h19m10s (+0s)</td></tr><tr><td align="left">
CAMSA
</td><td align="left"><bold>2s (+3s)</bold></td><td align="left"><bold>2s (+10s)</bold></td><td align="left"><bold>48s (+59m)</bold></td></tr><tr><td align="left">
CAMSA(+GM)</td><td align="left"><bold>2s (+3s)</bold></td><td align="left"><bold>2s (+10s)</bold></td><td align="left">54s (+1h10m)</td></tr></tbody></table><table-wrap-foot><p>Time in parentheses is additional and corresponds to the data preparation. Best results are shown in bold</p></table-wrap-foot></table-wrap>
</p>
      <p>Table <xref rid="Tab2" ref-type="table">2</xref> shows the quality of the scaffold assemblies produced by different tools. In all datasets, the assembly produced by CAMSA was either the best or very close to the best in each of the metrics. We remark that in some cases CAMSA(+GM) takes advantage of the reconciled assemblies and demonstrates better results than CAMSA. In other cases, however, having the reconciled assemblies turns out to be disadvantageous due to the elevated presence of misassemblies in them. This emphasizes the fact that assembly reconciliation/merging is sensitive to the quality of input assemblies and should be interpreted with caution. The comparative report in CAMSA can greatly help in identification of conflicting assembly points (indicating potential misassemblies), enabling their targeted analysis.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Quality of the reconciled/merged scaffold assemblies constructed by GAM-NGS, Metassembler, and CAMSA from the scaffold assemblies produced by ScaffMatch, SOAPdenovo2, SGA, and SSPACE on three GAGE datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"># contigs</th><th align="left"># miss.</th><th align="left"># local miss.</th><th align="left">NA50</th><th align="left">NA75</th></tr></thead><tbody><tr><td align="left" colspan="4"><italic>S. aureus</italic></td><td align="left" colspan="2"/></tr><tr><td align="left">  GAM-NGS</td><td align="left"><bold>6</bold></td><td align="left"><bold>0</bold></td><td align="left">6</td><td align="left">1082860</td><td align="left">1082860</td></tr><tr><td align="left">  Metassembler</td><td align="left"><bold>6</bold></td><td align="left"><bold>0</bold></td><td align="left">3</td><td align="left">1083010</td><td align="left">1083010</td></tr><tr><td align="left">
  CAMSA
</td><td align="left"><bold>6</bold></td><td align="left"><bold>0</bold></td><td align="left">3</td><td align="left"><bold>1083448</bold></td><td align="left"><bold>1083448</bold></td></tr><tr><td align="left">
  CAMSA(+GM)</td><td align="left"><bold>6</bold></td><td align="left"><bold>0</bold></td><td align="left"><bold>2</bold></td><td align="left">1083436</td><td align="left">1083436</td></tr><tr><td align="left" colspan="4"><italic>R. sphaeroides</italic></td><td align="left" colspan="2"/></tr><tr><td align="left">  GAM-NGS</td><td align="left">16</td><td align="left"><bold>6</bold></td><td align="left">17</td><td align="left">3080645</td><td align="left">3080645</td></tr><tr><td align="left">  Metassembler</td><td align="left"><bold>9</bold></td><td align="left"><bold>6</bold></td><td align="left">17</td><td align="left"><bold>3080845</bold></td><td align="left"><bold>3080845</bold></td></tr><tr><td align="left"> 
CAMSA
</td><td align="left"><bold>9</bold></td><td align="left"><bold>6</bold></td><td align="left"><bold>9</bold></td><td align="left">2965313</td><td align="left">2965313</td></tr><tr><td align="left"> 
CAMSA(+GM)</td><td align="left">10</td><td align="left"><bold>6</bold></td><td align="left"><bold>9</bold></td><td align="left">2964450</td><td align="left">2964450</td></tr><tr><td align="left" colspan="4"><italic>H. sapiens Chr14</italic></td><td align="left" colspan="2"/></tr><tr><td align="left">  GAM-NGS</td><td align="left">128</td><td align="left"><bold>83</bold></td><td align="left">543</td><td align="left">2941846</td><td align="left">1235019</td></tr><tr><td align="left">  Metassembler</td><td align="left"><bold>93</bold></td><td align="left">94</td><td align="left">528</td><td align="left">2494911</td><td align="left">1235460</td></tr><tr><td align="left"> 
CAMSA
</td><td align="left">109</td><td align="left">91</td><td align="left"><bold>485</bold></td><td align="left">2624904</td><td align="left"><bold>1235471</bold></td></tr><tr><td align="left"> 
CAMSA(+GM)</td><td align="left">94</td><td align="left">84</td><td align="left">511</td><td align="left"><bold>2979834</bold></td><td align="left">1235464</td></tr></tbody></table><table-wrap-foot><p>Best results are shown in bold</p></table-wrap-foot></table-wrap>
</p>
    </sec>
  </sec>
  <sec id="Sec9" sec-type="discussion">
    <title>Discussion</title>
    <p>We remark that CAMSA expects as an input a list of assembly points, which differs from the output produced by some conventional scaffolding tools. This inspired us to develop a set of utility scripts that automate the input/output conversion process for CAMSA (e.g., from/to formats like FASTA,<sup>6</sup> AGPv2, or GRIMM), and include them in the CAMSA package. We remark that our current model treats scaffolds that are present more than once in the input assembly as conflicts, thus limiting the ability to work with scaffolds coming from repetitive DNA regions. However, this issue may rarely appear for long scaffolds, and in fact we did not encounter it in our evaluations. Still, we have plans to expand the model and add support for repetitive scaffolds in future CAMSA releases.</p>
    <p>We further plan to enrich the graph-based analysis in CAMSA with various pattern matching techniques, enabling a better classification of assembly conflicts based on their origin (e.g., conflicting scaffold orders, wrong orientation of scaffolds, or different resolution of assemblies). We also plan on adding a <italic>reference</italic> mode, so that classification of assembly points in the input assemblies can be done with respect to a known reference genome, rather than just with respect to each other.</p>
  </sec>
  <sec id="Sec10" sec-type="conclusion">
    <title>Conclusion</title>
    <p>CAMSA addresses the current deficiency of tools for automated comparison and analysis of multiple assemblies of the same set scaffolds. Since there exist numerous methods and techniques for scaffold assembly, identifying similarities and dissimilarities across assemblies produced by different methods is beneficial both for the developers of scaffold assembly algorithms and for the researchers focused on improving draft assemblies of specific organisms.</p>
    <p>CAMSA is currently utilized in the study of Anopheles mosquito genomes [<xref ref-type="bibr" rid="CR46">46</xref>], where multiple research laboratories work on improving the existing assemblies for a set of mosquito species.</p>
  </sec>
  <sec id="Sec11">
    <title>Endnotes</title>
    <p><sup>1</sup> We remark that contigs can be viewed as scaffolds with no gaps. So, under scaffolds we understand both contigs and scaffolds.</p>
    <p><sup>2</sup> We remark that an assembly point can be in/out-conflicting with multiple different assembly points at the same time.</p>
    <p><sup>3</sup> The blossom algorithm computes a maximal weighted matching in a graph in <italic>O</italic>(<italic>V</italic>
<sup>3</sup>) time, where <italic>V</italic> is the number of vertices.</p>
    <p><sup>4</sup> We also considered GARM [<xref ref-type="bibr" rid="CR27">27</xref>], but were unable to run it on any GAGE dataset, facing issues similar to those reported in [<xref ref-type="bibr" rid="CR28">28</xref>].</p>
    <p><sup>5</sup> We remark that conversion, for example, from NCBI AGPv2 format (rather than FASTA) would be much faster.</p>
    <p><sup>6</sup> We support FASTA files that may or may not contain gap filling.</p>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec12">
        <title>Additional file</title>
        <p>
          <media position="anchor" xlink:href="12859_2017_1919_MOESM1_ESM.pdf" id="MOESM1">
            <label>Additional file 1</label>
            <caption>
              <p>
CAMSA: Evaluation Details. (PDF 192 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <fn-group>
    <fn>
      <p>
        <bold>Electronic supplementary material</bold>
      </p>
      <p>The online version of this article (doi:10.1186/s12859-017-1919-y) contains supplementary material, which is available to authorized users.</p>
    </fn>
  </fn-group>
  <ack>
    <sec id="d29e3937">
      <title>Funding</title>
      <p>The work and publication costs are funded by the National Science Foundation under the grant No. IIS-1462107.</p>
    </sec>
    <sec id="d29e3942">
      <title>Availability of data and materials</title>
      <p>
CAMSA is distributed under the MIT license and is available at <ext-link ext-link-type="uri" xlink:href="http://cblab.org/camsa/">http://cblab.org/camsa/</ext-link>. All utilized datasets are publicly available as specified in Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
    </sec>
    <sec id="d29e3958">
      <title>About this supplement</title>
      <p>This article has been published as part of <italic>BMC Bioinformatics</italic> Volume 18 Supplement 15, 2017: Selected articles from the 6th IEEE International Conference on Computational Advances in Bio and Medical Sciences (ICCABS): bioinformatics. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="https://bmcbioinformatics.biomedcentral.com/articles/supplements/volume-18-supplement-15">https://bmcbioinformatics.biomedcentral.com/articles/supplements/volume-18-supplement-15</ext-link>.</p>
    </sec>
    <sec id="d29e3971">
      <title>Authors’ contributions</title>
      <p>The authors have contributed equally to preparation of the present manuscript.</p>
    </sec>
    <sec id="d29e3976">
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="d29e3981">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="d29e3986">
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec id="d29e3991">
      <title>Publisher’s Note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Reddy</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Stamatis</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bertsch</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Isbandi</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Jansson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mallajosyula</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Pagani</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Lobos</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Kyrpides</surname>
            <given-names>NC</given-names>
          </name>
        </person-group>
        <article-title>The Genomes OnLine Database (GOLD) v.5: a metadata management system based on a four level (meta)genome project classification</article-title>
        <source>Nucleic Acids Res</source>
        <year>2015</year>
        <volume>43</volume>
        <issue>D1</issue>
        <fpage>1099</fpage>
        <lpage>106</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gku950</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>A comprehensive evaluation of assembly scaffolding tools</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <issue>3</issue>
        <fpage>1</fpage>
        <lpage>15</lpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-3-r42</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ABySS: a parallel assembler for short read sequence data</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>6</issue>
        <fpage>1117</fpage>
        <lpage>23</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.089532.108</pub-id>
        <?supplied-pmid 19251739?>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Bambus 2: scaffolding metagenomes</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>21</issue>
        <fpage>2964</fpage>
        <lpage>71</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr520</pub-id>
        <?supplied-pmid 21926123?>
        <pub-id pub-id-type="pmid">21926123</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gritsenko</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Nijkamp</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Reinders</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>de Ridder</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>GRASS: a generic algorithm for scaffolding next-generation sequencing assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>11</issue>
        <fpage>1429</fpage>
        <lpage>37</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts175</pub-id>
        <?supplied-pmid 22492642?>
        <pub-id pub-id-type="pmid">22492642</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Luo</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>He</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pan</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SOAPdenovo2: an empirically improved memory-efficient short-read de novo assembler</article-title>
        <source>GigaScience</source>
        <year>2012</year>
        <volume>1</volume>
        <fpage>18</fpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-1-18</pub-id>
        <?supplied-pmid 23587118?>
        <pub-id pub-id-type="pmid">23587118</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dayarian</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Michael</surname>
            <given-names>TP</given-names>
          </name>
          <name>
            <surname>Sengupta</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>SOPRA: Scaffolding algorithm for paired reads via statistical optimization</article-title>
        <source>BMC Bioinformatics</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>345</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-345</pub-id>
        <?supplied-pmid 20576136?>
        <pub-id pub-id-type="pmid">20576136</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Henkel</surname>
            <given-names>CV</given-names>
          </name>
          <name>
            <surname>Jansen</surname>
            <given-names>HJ</given-names>
          </name>
          <name>
            <surname>Butler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Scaffolding pre-assembled contigs using SSPACE</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>4</issue>
        <fpage>578</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq683</pub-id>
        <?supplied-pmid 21149342?>
        <pub-id pub-id-type="pmid">21149342</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Behsaz</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lagman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>LINKS: Scalable, alignment-free scaffolding of draft genomes with long reads</article-title>
        <source>GigaScience</source>
        <year>2015</year>
        <volume>4</volume>
        <fpage>35</fpage>
        <pub-id pub-id-type="doi">10.1186/s13742-015-0076-3</pub-id>
        <?supplied-pmid 26244089?>
        <pub-id pub-id-type="pmid">26244089</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>Lesin</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Nikolenko</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Pham</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>AD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <issue>5</issue>
        <fpage>455</fpage>
        <lpage>77</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bashir</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Klammer</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Robins</surname>
            <given-names>WP</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>CS</given-names>
          </name>
          <name>
            <surname>Webster</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Paxinos</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Hsu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ashby</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Peluso</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A hybrid approach for the automated finishing of bacterial genomes</article-title>
        <source>Nat Biotechnol</source>
        <year>2012</year>
        <volume>30</volume>
        <issue>7</issue>
        <fpage>701</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2288</pub-id>
        <?supplied-pmid 22750883?>
        <pub-id pub-id-type="pmid">22750883</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>SSPACE-LongRead: scaffolding bacterial draft genomes using long read sequence information</article-title>
        <source>BMC Bioinformatics</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>211</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-15-211</pub-id>
        <?supplied-pmid 24950923?>
        <pub-id pub-id-type="pmid">24950923</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lam</surname>
            <given-names>KK</given-names>
          </name>
          <name>
            <surname>LaButti</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Khalak</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tse</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>FinisherSC: a repeat-aware tool for upgrading de novo assembly using long reads</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>19</issue>
        <fpage>3207</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv280</pub-id>
        <?supplied-pmid 26040454?>
        <pub-id pub-id-type="pmid">26040454</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Assour</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Emrich</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Multi-genome synteny for assembly improvement</article-title>
        <source>Proceedings of 7th International Conference on Bioinformatics and Computational Biology</source>
        <year>2015</year>
        <publisher-loc>Honolulu</publisher-loc>
        <publisher-name>International Society for Computers and their Applications (ISCA)</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <mixed-citation publication-type="other">Aganezov S, Alekseyev MA. Multi-Genome Scaffold Co-Assembly Based on the Analysis of Gene Orders and Genomic Repeats In: Bourgeois A, et al, editors. Proceedings of the 12th International Symposium on Bioinformatics Research and Applications (ISBRA). Lecture Notes in Computer Science: 2016. p. 237–49. doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-3-319-38782-6_20">10.1007/978-3-319-38782-6_20</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Anselmetti</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Berry</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Chauve</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chateau</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tannier</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Bérard</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Ancestral gene synteny reconstruction improves extant species scaffolding</article-title>
        <source>BMC Genomics</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>1</fpage>
        <lpage>13</lpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-16-S10-S11</pub-id>
        <pub-id pub-id-type="pmid">25553907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rudkin</surname>
            <given-names>GT</given-names>
          </name>
          <name>
            <surname>Stollar</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>High resolution detection of DNA–RNA hybrids in situ by indirect immunofluorescence</article-title>
        <source>Nature</source>
        <year>1977</year>
        <volume>265</volume>
        <fpage>472</fpage>
        <pub-id pub-id-type="doi">10.1038/265472a0</pub-id>
        <?supplied-pmid 401954?>
        <pub-id pub-id-type="pmid">401954</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Speicher</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Carter</surname>
            <given-names>NP</given-names>
          </name>
        </person-group>
        <article-title>The new cytogenetics: blurring the boundaries with molecular biology</article-title>
        <source>Nat Rev Genet</source>
        <year>2005</year>
        <volume>6</volume>
        <issue>10</issue>
        <fpage>782</fpage>
        <lpage>92</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg1692</pub-id>
        <?supplied-pmid 16145555?>
        <pub-id pub-id-type="pmid">16145555</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Read</surname>
            <given-names>TD</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Scaffolding and validation of bacterial genome assemblies using optical restriction maps</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <issue>10</issue>
        <fpage>1229</fpage>
        <lpage>35</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn102</pub-id>
        <?supplied-pmid 18356192?>
        <pub-id pub-id-type="pmid">18356192</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tang</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Miao</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ming</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Schnable</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Schnable</surname>
            <given-names>PS</given-names>
          </name>
          <name>
            <surname>Lyons</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>ALLMAPS: robust scaffold ordering based on multiple maps</article-title>
        <source>Genome Biol</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>3</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-014-0573-1</pub-id>
        <?supplied-pmid 25583564?>
        <pub-id pub-id-type="pmid">25583564</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Madoui</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Dossat</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>d’Agata</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>van Oeveren</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>van der Vossen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Aury</surname>
            <given-names>JM</given-names>
          </name>
        </person-group>
        <article-title>MaGuS: a tool for quality assessment and scaffolding of genome assemblies with Whole Genome Profiling™Data</article-title>
        <source>BMC Bioinformatics</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>115</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-016-0969-x</pub-id>
        <?supplied-pmid 26936254?>
        <pub-id pub-id-type="pmid">26936254</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Burton</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Adey</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Patwardhan</surname>
            <given-names>RP</given-names>
          </name>
          <name>
            <surname>Qiu</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kitzman</surname>
            <given-names>JO</given-names>
          </name>
          <name>
            <surname>Shendure</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Chromosome-scale scaffolding of de novo genome assemblies based on chromatin interactions</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>12</issue>
        <fpage>1119</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2727</pub-id>
        <?supplied-pmid 24185095?>
        <pub-id pub-id-type="pmid">24185095</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yao</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Gao</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Minx</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>WC</given-names>
          </name>
          <name>
            <surname>Weinstock</surname>
            <given-names>GM</given-names>
          </name>
        </person-group>
        <article-title>Graph accordance of next-generation sequence assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>1</issue>
        <fpage>13</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr588</pub-id>
        <?supplied-pmid 22025481?>
        <pub-id pub-id-type="pmid">22025481</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zimin</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Sutton</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Yorke</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>Assembly reconciliation</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <issue>1</issue>
        <fpage>42</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm542</pub-id>
        <?supplied-pmid 18057021?>
        <pub-id pub-id-type="pmid">18057021</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nijkamp</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Winterbach</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Van den Broek</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Daran</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Reinders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>De Ridder</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Integrating genome assemblies with MAIA</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>18</issue>
        <fpage>433</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq366</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vezzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Cattonaro</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Policriti</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>e-RGA: enhanced reference guided assembly of complex genomes</article-title>
        <source>EMBnet.J</source>
        <year>2011</year>
        <volume>17</volume>
        <issue>1</issue>
        <fpage>46</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.14806/ej.17.1.208</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mayela Soto-Jimenez</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Estrada</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sanchez-Flores</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>GARM: genome assembly, reconciliation and merging pipeline</article-title>
        <source>Curr Top Med Chem</source>
        <year>2014</year>
        <volume>14</volume>
        <issue>3</issue>
        <fpage>418</fpage>
        <lpage>24</lpage>
        <pub-id pub-id-type="doi">10.2174/1568026613666131204110628</pub-id>
        <pub-id pub-id-type="pmid">24304318</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wences</surname>
            <given-names>AH</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
        </person-group>
        <article-title>Metassembler: merging and optimizing de novo genome assemblies</article-title>
        <source>Genome Biol</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>207</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-015-0764-4</pub-id>
        <?supplied-pmid 26403281?>
        <pub-id pub-id-type="pmid">26403281</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vicedomini</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Vezzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Scalabrin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Arvestad</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Policriti</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>GAM-NGS: genomic assemblies merger for next generation sequencing</article-title>
        <source>BMC Bioinformatics</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>Suppl 7</issue>
        <fpage>6</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-14-S7-S6</pub-id>
        <pub-id pub-id-type="pmid">23323795</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Avdeyev</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Aganezov</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Alekseyev</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>Reconstruction of ancestral genomes in presence of gene gain and loss</article-title>
        <source>J Comput Biol</source>
        <year>2016</year>
        <volume>23</volume>
        <issue>3</issue>
        <fpage>1</fpage>
        <lpage>15</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2015.0160</pub-id>
        <pub-id pub-id-type="pmid">26484655</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chateau</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Giroudeau</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>A complexity and approximation framework for the maximization scaffolding problem</article-title>
        <source>Theor Comput Sci</source>
        <year>2015</year>
        <volume>595</volume>
        <fpage>92</fpage>
        <lpage>106</lpage>
        <pub-id pub-id-type="doi">10.1016/j.tcs.2015.06.023</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moran</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Newman</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Wolfstahl</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Approximation algorithms for covering a graph by vertex-disjoint paths of maximum total weight</article-title>
        <source>Networks</source>
        <year>1990</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>55</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1002/net.3230200106</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hagberg</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Schult</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Swart</surname>
            <given-names>PJ</given-names>
          </name>
        </person-group>
        <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
        <source>Proceedings of the 7th Python in Science Conference (SciPy2008)</source>
        <year>2008</year>
        <publisher-loc>Pasadena</publisher-loc>
        <publisher-name>Los Alamos National Laboratory (LANL)</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Galil</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>Efficient algorithms for finding maximum matching in graphs</article-title>
        <source>ACM Comput Surv (CSUR)</source>
        <year>1986</year>
        <volume>18</volume>
        <issue>1</issue>
        <fpage>23</fpage>
        <lpage>38</lpage>
        <pub-id pub-id-type="doi">10.1145/6462.6502</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35</label>
      <mixed-citation publication-type="other">Jardine A. DataTables JavaScript / JQuery library. 2011. <ext-link ext-link-type="uri" xlink:href="https://datatables.net">https://datatables.net</ext-link>. Accessed 13 Jun 2016.</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Franz</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lopes</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Huck</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Sumer</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Bader</surname>
            <given-names>GD</given-names>
          </name>
        </person-group>
        <article-title>Cytoscape.js: a graph theory library for visualisation and analysis</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>2</issue>
        <fpage>309</fpage>
        <lpage>11</lpage>
        <?supplied-pmid 26415722?>
        <pub-id pub-id-type="pmid">26415722</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dogrusoz</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Giral</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Cetintas</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Civril</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Demir</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>A layout algorithm for undirected compound graphs</article-title>
        <source>Inf Sci</source>
        <year>2009</year>
        <volume>179</volume>
        <issue>7</issue>
        <fpage>980</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ins.2008.11.017</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gansner</surname>
            <given-names>ER</given-names>
          </name>
          <name>
            <surname>North</surname>
            <given-names>SC</given-names>
          </name>
        </person-group>
        <article-title>An open graph visualization system and its applications to software engineering</article-title>
        <source>Softw Pract Experience</source>
        <year>2000</year>
        <volume>30</volume>
        <issue>11</issue>
        <fpage>1203</fpage>
        <lpage>33</lpage>
        <pub-id pub-id-type="doi">10.1002/1097-024X(200009)30:11&lt;1203::AID-SPE338&gt;3.0.CO;2-N</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shannon</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Markiel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ozier</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Baliga</surname>
            <given-names>NS</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Ramage</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Amin</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Schwikowski</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ideker</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Cytoscape: a software environment for integrated models of biomolecular interaction networks</article-title>
        <source>Genome Res</source>
        <year>2003</year>
        <volume>13</volume>
        <issue>11</issue>
        <fpage>2498</fpage>
        <lpage>504</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.1239303</pub-id>
        <?supplied-pmid 14597658?>
        <pub-id pub-id-type="pmid">14597658</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Roberts</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>3</issue>
        <fpage>557</fpage>
        <lpage>67</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mandric</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Zelikovsky</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>ScaffMatch: scaffolding algorithm based on maximum weight matching</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>16</issue>
        <fpage>2632</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv211</pub-id>
        <?supplied-pmid 25890305?>
        <pub-id pub-id-type="pmid">25890305</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Efficient de novo assembly of large genomes using compressed data structures</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>3</issue>
        <fpage>549</fpage>
        <lpage>56</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.126953.111</pub-id>
        <?supplied-pmid 22156294?>
        <pub-id pub-id-type="pmid">22156294</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gnerre</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>MacCallum</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Przybylski</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ribeiro</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Burton</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Sharpe</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Shea</surname>
            <given-names>TP</given-names>
          </name>
          <name>
            <surname>Sykes</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>High-quality draft assemblies of mammalian genomes from massively parallel sequence data</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2011</year>
        <volume>108</volume>
        <issue>4</issue>
        <fpage>1513</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1017351108</pub-id>
        <?supplied-pmid 21187386?>
        <pub-id pub-id-type="pmid">21187386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Vyahhi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>QUAST: quality assessment tool for genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>8</issue>
        <fpage>1072</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>
        <?supplied-pmid 23422339?>
        <pub-id pub-id-type="pmid">23422339</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kurtz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Smoot</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Antonescu</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <issue>2</issue>
        <fpage>12</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neafsey</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Abai</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Aganezov</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Alekseyev</surname>
            <given-names>MA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Highly evolvable malaria vectors: the genomes of 16 Anopheles mosquitoes</article-title>
        <source>Science</source>
        <year>2015</year>
        <volume>347</volume>
        <issue>6217</issue>
        <fpage>1258522</fpage>
        <pub-id pub-id-type="doi">10.1126/science.1258522</pub-id>
        <?supplied-pmid 25554792?>
        <pub-id pub-id-type="pmid">25554792</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
