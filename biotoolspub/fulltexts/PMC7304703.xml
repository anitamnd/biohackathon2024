<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?covid-19-tdm?>
<?noissn?>
<front>
  <journal-meta>
    <journal-id journal-id-type="publisher-id">978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="doi">10.1007/978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="nlm-ta">Computational Science – ICCS 2020</journal-id>
    <journal-title-group>
      <journal-title>Computational Science – ICCS 2020</journal-title>
      <journal-subtitle>20th International Conference, Amsterdam, The Netherlands, June 3–5, 2020, Proceedings, Part VII</journal-subtitle>
    </journal-title-group>
    <isbn publication-format="print">978-3-030-50435-9</isbn>
    <isbn publication-format="electronic">978-3-030-50436-6</isbn>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7304703</article-id>
    <article-id pub-id-type="publisher-id">34</article-id>
    <article-id pub-id-type="doi">10.1007/978-3-030-50436-6_34</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>APE: A Command-Line Tool and API for Automated Workflow Composition</article-title>
    </title-group>
    <contrib-group content-type="book editors">
      <contrib contrib-type="editor">
        <name>
          <surname>Krzhizhanovskaya</surname>
          <given-names>Valeria V.</given-names>
        </name>
        <address>
          <email>V.Krzhizhanovskaya@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff8">8</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Závodszky</surname>
          <given-names>Gábor</given-names>
        </name>
        <address>
          <email>G.Zavodszky@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff9">9</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Lees</surname>
          <given-names>Michael H.</given-names>
        </name>
        <address>
          <email>m.h.lees@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff10">10</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Dongarra</surname>
          <given-names>Jack J.</given-names>
        </name>
        <address>
          <email>dongarra@icl.utk.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff11">11</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Sloot</surname>
          <given-names>Peter M. A.</given-names>
        </name>
        <address>
          <email>p.m.a.sloot@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff12">12</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Brissos</surname>
          <given-names>Sérgio</given-names>
        </name>
        <address>
          <email>sergio.brissos@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff13">13</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Teixeira</surname>
          <given-names>João</given-names>
        </name>
        <address>
          <email>joao.teixeira@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff14">14</xref>
      </contrib>
      <aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff10"><label>10</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff11"><label>11</label><institution-wrap><institution-id institution-id-type="GRID">grid.411461.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2315 1184</institution-id><institution>University of Tennessee, </institution></institution-wrap>Knoxville, TN USA </aff>
      <aff id="Aff12"><label>12</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff13"><label>13</label>Intellegibilis, Setúbal, Portugal </aff>
      <aff id="Aff14"><label>14</label>Intellegibilis, Setúbal, Portugal </aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0097-1056</contrib-id>
        <name>
          <surname>Kasalica</surname>
          <given-names>Vedran</given-names>
        </name>
        <address>
          <email>v.kasalica@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1953-5606</contrib-id>
        <name>
          <surname>Lamprecht</surname>
          <given-names>Anna-Lena</given-names>
        </name>
        <address>
          <email>a.l.lamprecht@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <aff id="Aff15"><institution-wrap><institution-id institution-id-type="GRID">grid.5477.1</institution-id><institution-id institution-id-type="ISNI">0000000120346234</institution-id><institution>Department of Information and Computing Sciences, </institution><institution>Utrecht University, </institution></institution-wrap>3584 CC Utrecht, The Netherlands </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <volume>12143</volume>
    <fpage>464</fpage>
    <lpage>476</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open
Access</bold> This chapter is licensed under the terms of the
Creative Commons Attribution 4.0 International License
(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>),
which permits use, sharing,
adaptation, distribution and reproduction in any medium or format, as long as
you give appropriate credit to the original author(s) and the source, provide a
link to the Creative Commons license and indicate if changes were
made.</license-p>
        <license-p>The
images or other third party material
in this chapter are included in the chapter's Creative Commons license, unless
indicated otherwise in a credit line to the material. If material is not
included in the chapter's Creative Commons license and your intended use is not
permitted by statutory regulation or exceeds the permitted use, you will need
to obtain permission directly from the copyright holder.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">
Automated workflow composition is bound to take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. However, functionality for automated workflow composition tends to be integrated with one of the many available workflow management systems, and is thus difficult or impossible to apply in other environments. Therefore we have developed APE (the Automated Pipeline Explorer) as a command-line tool and API for automated composition of scientific workflows. APE is easily configured to a new application domain by providing it with a domain ontology and semantically annotated tools. It can then be used to synthesize purpose-specific workflows based on a specification of the available workflow inputs, desired outputs and possibly additional constraints. The workflows can further be transformed into executable implementations and/or exported into standard workflow formats. In this paper we describe APE v1.0 and discuss lessons learned from applications in bioinformatics and geosciences.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Scientific workflows</kwd>
      <kwd>Computational pipelines</kwd>
      <kwd>Workflow management systems</kwd>
      <kwd>Automated workflow composition</kwd>
      <kwd>Workflow exploration</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Switzerland AG 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Computational pipelines, or workflows, are central to contemporary computational science [<xref ref-type="bibr" rid="CR5">5</xref>]. The international eScience community has created a comprehensive infrastructure of tools, services and platforms that support the work with scientific workflows. Numerous scientific workflow management systems exist [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR29">29</xref>], some of the currently most popular being Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>], KNIME [<xref ref-type="bibr" rid="CR6">6</xref>] and Nextflow [<xref ref-type="bibr" rid="CR7">7</xref>]. While these systems free their users from many technicalities that they would have to deal with when conventionally programming workflows, the identification of suitable computational components and their composition into executable workflows remains a manual task.</p>
    <p id="Par3">The idea of <italic>automated workflow composition</italic> is to let an algorithm perform this process. Based on a loose specification of the intended workflow (for example in terms of available workflow inputs and desired outputs, or principal steps to take), it would automatically generate suitable, executable workflows. It has been shown that program synthesis [<xref ref-type="bibr" rid="CR11">11</xref>] and AI planning techniques [<xref ref-type="bibr" rid="CR8">8</xref>] can be used to implement such functionality [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>]. Some workflow management systems, such as jORCA/Magallanes [<xref ref-type="bibr" rid="CR15">15</xref>], jABC/PROPHETS [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR24">24</xref>] and WINGS [<xref ref-type="bibr" rid="CR9">9</xref>], provide automated workflow composition functionality based on such techniques. However, the tight integration with the respective workflow systems makes it difficult or even impossible to use this functionality in other environments.</p>
    <p id="Par4">Therefore we have developed APE<xref ref-type="fn" rid="Fn1">1</xref> (the Automated Pipeline Explorer) as a command-line tool and API for automated workflow composition. It is designed to be independent from any concrete workflow system, and thus ready to be used in other workflow management systems, tool repositories or workflow sharing platforms as needed. Internally, APE uses a SAT-based implementation of a temporal-logic process synthesis method, inspired by the approach behind the PROPHETS framework [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] and described in detail [<xref ref-type="bibr" rid="CR17">17</xref>]. In a nutshell, the framework uses an extension of the well known Linear Temporal Logic (LTL) to encode the workflow specification. This specification is translated into a propositional logic formula that can be processed by an off-the-shelf SAT solver, with the resulting solutions representing possible workflows for the specification.</p>
    <p id="Par6">In this paper, we introduce APE v1.0 from an application point of view. Section <xref rid="Sec2" ref-type="sec">2</xref> describes how to set it up for use by providing a semantic domain model. Section <xref rid="Sec3" ref-type="sec">3</xref> focuses on the automated composition of workflows based on the domain model and custom workflow specifications. Section <xref rid="Sec6" ref-type="sec">4</xref> describes how APE-composed workflows can further be transformed into executable implementations and/or exported into standard workflow formats. Section <xref rid="Sec9" ref-type="sec">5</xref> discusses lessons learned from applications of APE in bioinformatics and geosciences. Section <xref rid="Sec10" ref-type="sec">6</xref> concludes the paper.</p>
  </sec>
  <sec id="Sec2">
    <title>Domain Model</title>
    <p id="Par7">The semantic domain model constitutes the knowledge base on which APE relies for the automated composition of workflows. It comprises a domain ontology and a collection of semantically annotated tools. The domain ontology provides taxonomic classifications of the data types and operations in the application domain, as a controlled vocabulary of technical terms. Tools in the domain model are semantically annotated with their inputs, outputs and operations, using terms from the ontology. Additionally, the domain model might include (temporal-logic) constraints to express further domain knowledge or rules.<fig id="Fig1"><label>Fig. 1.</label><caption><p>Fragment of a bioinformatics domain ontology.</p></caption><graphic xlink:href="500810_1_En_34_Fig1_HTML" id="MO1"/></fig>
<table-wrap id="Tab1"><label>Table 1.</label><caption><p>Fragment of an annotated set of bioinformatics tools [<xref ref-type="bibr" rid="CR14">14</xref>].</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Name</th><th align="left">Operation</th><th align="left">Data input (type/format)</th><th align="left">Data output (type/format)</th></tr></thead><tbody><tr><td align="left" rowspan="2">Comet</td><td align="left" rowspan="2">Peptide database search</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzML</bold> or <bold>mzXML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">msconvert</td><td align="left" rowspan="2">Formatting Filtering</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Mass spectrum</bold></td></tr><tr><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td></tr><tr><td align="left" rowspan="2">Peptide Prophet</td><td align="left" rowspan="2">Peptide identification Statistical modelling</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>pepXML</bold> or <bold>mzIdentML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">rt4</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>TSV</bold> or <bold>pepXML</bold></td><td align="left"><bold>TSV </bold>or <bold>XML</bold></td></tr><tr><td align="left" rowspan="2">xml2tsv</td><td align="left" rowspan="2">Conversion</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzIdentML</bold></td><td align="left"><bold>TSV</bold></td></tr><tr><td align="left" rowspan="2">SSRCalc</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>Textual format</bold> or <bold>TSV</bold></td><td align="left"><bold>Textual format</bold></td></tr><tr><td align="left" colspan="4"><bold>...</bold></td></tr></tbody></table></table-wrap>
</p>
    <p id="Par8">For example, Fig. <xref rid="Fig1" ref-type="fig">1</xref> and Table <xref rid="Tab1" ref-type="table">1</xref> show fragments of a bioinformatics domain model from a recent case study on automated workflow composition in proteomics [<xref ref-type="bibr" rid="CR25">25</xref>]. The domain ontology (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) was directly derived from the popular bioinformatics data and methods ontology EDAM [<xref ref-type="bibr" rid="CR12">12</xref>]. Table <xref rid="Tab1" ref-type="table">1</xref> shows a few tool annotations from the same case study. Each tool is semantically annotated with the operation(s) it performs and its input and output data types and formats, using terms from the respective taxonomies. These annotations were directly derived from the bio.tools registry [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>], a large collection of EDAM-annotated bioinformatics tools. Note that in this example, two dimensions (type and format) are used for the annotation of the input and output data. Other applications need only one (e.g. format), and yet others have more than two required dimensions. Hence, APE supports the use of multiple disjoint taxonomy trees to represent the required dimensions of data characterization.</p>
    <p id="Par9">Technically, we rely on existing and (de facto) standard formalisms for the representation of the domain model. APE loads the domain ontology from a file in Web Ontology Language (OWL) format. The tool annotations are represented in JavaScript Object Notation (JSON) format, following the schema that is used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
  </sec>
  <sec id="Sec3">
    <title>Automated Workflow Composition</title>
    <p id="Par10">Once the domain model has been configured, APE is ready to be used for automated workflow composition. Therefor the user specifies the workflow inputs, intended outputs and additional constraints that the workflow has to fulfill. Internally the constraints are expressed in a formal (temporal) logic, but the APE interfaces expose them in the form of intuitive natural-language templates. For example (as illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>), one workflow specification from the proteomics case study consists of “Mass spectrum” type in “Thermo RAW format” as input, “Amino acid index (hydropathy)” (in any format) as output, and constraints specifying to use tools that perform the operations “peptide identification”, “validation of peptide spectrum matches” and “retention time prediction” (constraint template “Use operation <italic>X</italic>”). These operations are abstract terms from the ontology, known to scientists from the domain. This shows that formulating such constraints does not require knowledge of all available tools that fit the description. Based on the given specification APE synthesizes workflows that fulfill the specification by construction. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows two of many possible workflow solutions for the example specification.</p>
    <p id="Par11">Automated workflow composition with APE can be performed through its command line interface (CLI) or its application programming interface (API). While the CLI provides a simple means to interact and experiment with the system, the API provides more flexibility and control over the synthesis process. It can also be used to integrate APE’s functionality into other systems.<fig id="Fig2"><label>Fig. 2.</label><caption><p>Automated composition of a proteomics workflow.</p></caption><graphic xlink:href="500810_1_En_34_Fig2_HTML" id="MO2"/></fig>
</p>
    <sec id="Sec4">
      <title>Command Line Interface (CLI)</title>
      <p id="Par12">When running APE-&lt;version&gt;.jar from the command line, it requires a configuration file as a parameter and executes the complete automated workflow composition process accordingly. This JSON-based configuration file provides references to all therefor required information: <list list-type="order"><list-item><p id="Par13">The domain model (as described in Sect. <xref rid="Sec2" ref-type="sec">2</xref>), provided as a pair of a well-formatted OWL and JSON files,</p></list-item><list-item><p id="Par14">the workflow specification, provided as a list of workflow inputs/outputs and template-based workflow constraints, and</p></list-item><list-item><p id="Par15">parameters for the synthesis execution, such as the number of desired solutions, output directory, system configurations, etc.</p></list-item></list>
</p>
      <p id="Par16">APE then writes the synthesized workflows into the defined output directory. Each solution consists of a text file that describes the steps of the workflow, a graphical representation, and a shell script that implements the workflow (depending on the availability of suitable shell commands in the tool annotations).</p>
    </sec>
    <sec id="Sec5">
      <title>Application Programming Interface (API)</title>
      <p id="Par17">Like the CLI, the APE API relies on a configuration file that references the domain ontology, tool annotations, workflow specification and execution parameters. However, the API allows to edit this file programmatically, and thus for instance add constraints or change execution parameters dynamically. This is useful, for instance, for providing more interactive user interfaces or for systematically exploring and evaluating workflow synthesis results for varying specifications and execution parameters.<graphic position="anchor" xlink:href="500810_1_En_34_Figa_HTML" id="MO3"/>
</p>
      <p id="Par18">Listing 1.1 shows a small example of using the APE API for synthesizing a set of workflows similar to the example in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. First, the paths to the domain ontology and tool annotation files are added to the APE configuration object. Then a new instance of the APE framework is created based on the configuration, and the workflow synthesis algorithm is executed with the provided run configuration. The result of the synthesis run is a list of solutions obtained from the SAT solver, which are written into the output directory in textual and graphical (data-flow) format.<fig id="Fig3"><label>Fig. 3.</label><caption><p>Fragment of the APE API.</p></caption><graphic xlink:href="500810_1_En_34_Fig3_HTML" id="MO4"/></fig>
</p>
      <p id="Par19">The APE API provides further functionality, allowing for a more fine-grained interaction with the APE framework. Figure <xref rid="Fig3" ref-type="fig">3</xref> outlines the API, for brevity focusing on the most relevant fields and functions. The <italic>ConstraintFactory</italic> and <italic>Constraint</italic> classes allow for the retrieval of constraint templates and for adding new or removing existing constraints, thus further constraining or loosening the specification, respectively. As shown in the example code above, the <italic>APE</italic> class constitutes the main interface for interaction with the framework. It is used to define the execution parameters as well as the output formats. Once the library has generated the solutions, they are provided as a list of <italic>SolutionWorkflows</italic>. Each solution is represented as a directed graph that comprises type and tool nodes (internally named modules). The interface for working with the workflow solutions (further elaborated in the next section) is provided by the classes <italic>SolutionWorkflow</italic>, <italic>TypeNode</italic> (representing type instances) and <italic>ModuleNode</italic> (representing tool instances).</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Workflow Implementation</title>
    <p id="Par20">As mentioned above, APE provides functionality for exporting the synthesized workflows as textual representations, in the form of (data-flow and control-flow) graphs and as executable shell scripts. In practice it is often desirable to implement workflows in one of the languages used by popular workflow management systems, in order to be able to execute them with the respective workflow engines. Given the large number of existing workflow languages, it is however not feasible for APE to provide ready-to-use export functionality for all of them. Instead, the information contained in APE’s own workflow representation can be used to create workflows in other languages. In the following we describe the APE workflow format and demonstrate how the contained information can be used to create corresponding workflows in the Common Workflow Language (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>]. This feature is going to be integrated to the APE API in the near future. The mapping process described in this paper can furthermore serve as a template for the translation of APE results to other workflow formats, such as NextFlow [<xref ref-type="bibr" rid="CR7">7</xref>], SnakeMake [<xref ref-type="bibr" rid="CR19">19</xref>] or the Workflow Description Language (WDL) [<xref ref-type="bibr" rid="CR3">3</xref>].<fig id="Fig4"><label>Fig. 4.</label><caption><p>Workflow in APE’s native format (left) and corresponding CWL (right).</p></caption><graphic xlink:href="500810_1_En_34_Fig4_HTML" id="MO5"/></fig>
</p>
    <sec id="Sec7">
      <title>APE Workflow Format</title>
      <p id="Par21">APE represents the workflow solutions in the form of directed graphs. The left-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows an example. Nodes in the graph represent instances of data (depicted as ellipses) and executions of operations (rectangles), while the edges represent inputs and outputs of these tools, shown as green and red arrows, respectively. In addition, labels on the edges represent the order in which they are given as arguments to the tools. This graph provides the trace information that is needed to create the workflow in another language.</p>
      <p id="Par22">The APE API provides a set of functions to aid the interaction with the graph structure (see class <italic>SolutionWorkflow</italic> in Fig. <xref rid="Fig3" ref-type="fig">3</xref>). The workflow inputs can simply be retrieved using the corresponding function of the <italic>SolutionWorkflow</italic> class, which returns it as a list of <italic>TypeNodes</italic>. Generally, each <italic>TypeNode</italic> comprises a (possibly empty) tool node that generated it as an output, a (possibly empty) list of tools that used it as an input, and a concrete data <italic>Type</italic> that identifies it. Further, the <italic>SolutionWorkflow</italic> class provides a function for retrieving the tools used in the workflow as list of <italic>ModuleNodes</italic> (sorted according to their order of execution), making it easy to iterate over all tools used in the workflow. Each <italic>ModuleNode</italic> provides information about the next and the previous <italic>ModuleNode</italic> in the sequence, the <italic>TypeNodes</italic> used as inputs and generated as outputs by the tool, as well as information about the actual tool (executable script, see class <italic>Module</italic>) that provides the information needed for its execution. Finally, the workflow outputs are provided in the same format as the initial inputs. Note that for this example the first proposed solution from Fig. <xref rid="Sec3" ref-type="sec">3</xref> was artificially extended with additional inputs and outputs (depicted as gray ellipses) for illustrative purposes.</p>
    </sec>
    <sec id="Sec8">
      <title>Translation to CWL</title>
      <p id="Par23">The Common Workflow Language<xref ref-type="fn" rid="Fn2">2</xref> (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>] has recently emerged as an open standard for describing scientific workflows across platforms. It is increasingly adopted by the scientific community, with CWL support being added to popular scientific workflow management systems like, for example, Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>] and Toil [<xref ref-type="bibr" rid="CR28">28</xref>]. CWL is a declarative language that focuses on workflows composed from command line tools. Basically, it describes a set of steps and dependencies between those steps. CWL has its roots in “make” and similar tools, and like them it determines the order of execution based on these dependencies between tasks, i.e. if there is a required order of the operations or if they can even be executed concurrently. Conveniently, the main CWL structure is quite similar to the APE workflow structure. A basic workflow (see right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref>) comprises a configuration header, a list of workflow inputs, steps to be performed and workflow outputs. The input/output dependencies have to be explicitly defined, again in line with our data trace workflow representation. The tools in CWL usually include a command field, explicitly defining the corresponding command line operation. In addition, they can be configured to run tools from Docker containers automatically, allowing for more flexible and scalable workflow implementations.</p>
      <p id="Par25">However, as the fully automatic configuration for execution is not always feasible, the upcoming CWL version 1.2 will introduce <italic>abstract workflows</italic>. These workflows use descriptive containers instead of directly executable operations, and require additional (manual) configuration to become executable. The abstract containers are represented using the <italic>intent</italic> label (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>). Given that functional description of tools is sufficient for workflow discovery with APE, the abstract CWL workflows match well with APE’s own workflow representation. Furthermore, the bio.tools registry used as source for the tool annotations in the aforementioned bioinformatics case study is a typical example of such a set of tools. The repository contains the semantic annotations of the tools, but still might require some additional work from the user in order to execute the tool itself. Hence APE discovers workflows composed of tools that are not necessarily available on the local system, potentially requiring the installation and configuration of the tools on the execution system first.</p>
      <p id="Par26">To translate and APE workflow into CWL format, it is sufficient to 1) describe the original inputs, 2) iterate through the tools in the workflow sequence and specify the inputs used and outputs generated, and finally 3) specify the workflow output list. The right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows the CWL representation of the APE workflow on the left. To create it, first, the list of input objects is translated into a list of inputs that are annotated using their formats (see Label <bold>workflow_in</bold>). This means that some information about the data get lost in the translation (specifically the type description). However, as at runtime the format is sufficient to perform the execution, this is not a problem. Second, each tool in the sequence is described. The description involves a definition of the inputs, outputs and tool execution specification (mappings are annotated using labels <bold>tool_in</bold>, <bold>tool_out</bold> and <bold>tool_info</bold>, respectively). The most important part of the step is to keep track of the exact source of the tool inputs as well as to provide sufficient tool description that would allow for its execution. The input information is already part of the formalism, as APE keeps track of data flow traces for each data instance. The only requirement is to properly use the identifiers provided when creating the mappings to CWL. Regarding the tool descriptions, as long as the provided tool annotation file contains sufficient information, it can be translated into CWL. Third, the final workflow outputs need to be specified based on the given solution description (see Label <bold>workflow_out</bold>).</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Applications and Lessons Learned</title>
    <p id="Par27">The development of APE was accompanied by three concrete application scenarios for automated workflow composition: 1) The proteomics case study mentioned earlier in this paper [<xref ref-type="bibr" rid="CR25">25</xref>], 2) a case study on cartographic map generation [<xref ref-type="bibr" rid="CR16">16</xref>], and 3) geospatial data transformations in the QuAnGIS project [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR26">26</xref>]. The experiences from these applications, in particular the feedback from the involved domain experts, influenced the design decisions that we took during the development of the APE CLI and API. While initial versions of all three application scenarios have been created with PROPHETS, they have meanwhile been migrated to APE completely and are publicly available<xref ref-type="fn" rid="Fn3">3</xref>.</p>
    <p id="Par29">Naturally, the quality of the workflows obtained through APE essentially depends on the quality of the semantic domain model (ontologies and functional tool annotations). Hence it is crucial to involve domain experts in the domain modeling process, or to rely on sources that have been created by expert communities, such as the EDAM ontology and bio.tools registry that we use in bioinformatics applications of APE. Essentially, the idea is that the domain model is provided and maintained by a small group of domain experts, and used by a larger and broader audience to automatically compose workflows. As a positive side effect on domain modeling, using APE for the systematic generation and evaluation of workflows from varying specifications proved to be helpful to revise and improve ontologies and annotations.</p>
    <p id="Par30">Initially we used a tabular format for the tool annotations, like the one shown in Table <xref rid="Tab1" ref-type="table">1</xref>, because spreadsheets are easy to discuss with collaborators, and the corresponding CSV files easy to process programmatically. However, this approach quickly turned out to be insufficient to adequately capture non-trivial tool annotations. In the proteomics case study, we annotated tools’ inputs and outputs with both data type and format terms from EDAM. As the tools have varying numbers of inputs and outputs, however, they could not be properly annotated in the tabular format with a fixed number of columns. To increase the expressiveness of APE’s tool annotation template, but at the same time reuse an existing formalism, we decided to adopt the JSON-based tool annotation schema used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>], which includes a well-defined and flexible mechanism for functional tool annotation. This has of course extremely simplified the setup of bioinformatics domain models based on bio.tools, but it has also shown to be easy to use in the other application domains.</p>
    <p id="Par31">The APE CLI and API aim to be easy-to-use, but clearly target a tech-savvy audience with a certain level coding and/or scripting confidence. To reach a broader audience, an intuitive interface that can be used without technical experience or specific training is required. As a proof of principle, we recently developed Burke (a Bio-tools and edam User interface foR automated worKflow Exploration<xref ref-type="fn" rid="Fn4">4</xref>). Preconfigured to the domain model of the proteomics case study, it provides the automated workflow composition functionality of APE through a browser-based graphical interface. Users can select input and output data types and formats, as well as constraint templates and their instantiations, from drop-down menus that are filled with the relevant EDAM terms. They can configure and run APE’s synthesizer from the interface, and subsequently inspect the results, which are presented in a convenient tabular format. Feedback on Burke by APE novices has been very positive, hence we plan to develop a more sophisticated web interface for APE in the scope of future work on the framework.</p>
    <p id="Par33">A graphical interface has also the potential to overcome another limitation of the framework: Currently it is a tedious process to compare the different possible workflows generated by APE. This is however needed to make an informed decision about which of the potentially many possible workflows to select for implementation and execution. A graphical interface provides more possibilities for dynamically filtering, aggregating and displaying workflow candidates according to different criteria. Which criteria would actually provide meaningful information for workflow selection is currently an open question. This is another challenge that we are going to work on in the future.</p>
  </sec>
  <sec id="Sec10">
    <title>Conclusion</title>
    <p id="Par34">We believe that automated workflow composition will take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. In this paper we introduced APE v1.0 (the Automatic Pipeline Explorer), a command line tool and API that automates the exploration of scientific workflows. APE is under active development and continuously improving through the experiences and feedback from applications.</p>
    <p id="Par35">Future work on the APE framework will address different remaining challenges of usability and scalability. We are going to work on more end user-oriented interfaces that support better the whole life cycle of specifying, synthesizing, comparing, selecting, implementing and benchmarking computational pipelines. With growing domain models, the runtime performance of the underlying synthesis algorithm is likely to become a bottleneck. We have started to work on domain-specific search heuristics to improve synthesis performance and allow the approach to scale.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par5"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/ape">https://github.com/sanctuuary/ape</ext-link>.</p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p id="Par24"><ext-link ext-link-type="uri" xlink:href="https://www.commonwl.org/">https://www.commonwl.org/</ext-link>.</p>
    </fn>
    <fn id="Fn3">
      <label>3</label>
      <p id="Par28"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/APE_UseCases">https://github.com/sanctuuary/APE_UseCases</ext-link>.</p>
    </fn>
    <fn id="Fn4">
      <label>4</label>
      <p id="Par32"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/Burke_Docker">https://github.com/sanctuuary/Burke_Docker</ext-link>.</p>
    </fn>
  </fn-group>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Existing Workflow systems. <ext-link ext-link-type="uri" xlink:href="https://s.apache.org/existing-workflow-systems">https://s.apache.org/existing-workflow-systems</ext-link></mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">bio-tools/biotoolsSchema, December 2019. <ext-link ext-link-type="uri" xlink:href="https://github.com/bio-tools/biotoolsSchema">https://github.com/bio-tools/biotoolsSchema</ext-link>, original-date: 2015-05-05T15:52:46Z</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Workflow Description Language (WDL), April 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/openwdl/wdl">https://github.com/openwdl/wdl</ext-link>, original-date: 2012–08-01T03:12:48Z</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Amstutz, P., Crusoe, M.R., Tijanić, N., et al.: Common Workflow Language, v1.0, July 2016</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Atkinson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gesing</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montagnat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Scientific workflows: past, present and future</article-title>
        <source>Future Gener. Comput. Syst.</source>
        <year>2017</year>
        <volume>75</volume>
        <fpage>216</fpage>
        <lpage>227</lpage>
        <pub-id pub-id-type="doi">10.1016/j.future.2017.05.041</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berthold</surname>
            <given-names>MR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Knime-the konstanz information miner: version 2.0 and beyond</article-title>
        <source>AcM SIGKDD Explor. Newslett.</source>
        <year>2009</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>26</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1145/1656274.1656280</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chatzou</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Floden</surname>
            <given-names>EW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>316</fpage>
        <lpage>319</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Ghallab</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Nau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Traverso</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <source>Automated Planning and Acting</source>
        <year>2016</year>
        <edition>1</edition>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gil</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Ratnakar</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Wings: intelligent workflow-based design of computational experiments</article-title>
        <source>IEEE Intell. Syst.</source>
        <year>2011</year>
        <volume>26</volume>
        <issue>1</issue>
        <fpage>62</fpage>
        <lpage>72</lpage>
        <pub-id pub-id-type="doi">10.1109/MIS.2010.9</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goecks</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nekrutenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>
        <source>Genome Biol.</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>8</issue>
        <fpage>R86</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id>
        <pub-id pub-id-type="pmid">20738864</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gulwani</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Polozov</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Singh</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Program Synthesis, Foundations and Trends in Programming Languages</source>
        <year>2017</year>
        <publisher-loc>Hanover</publisher-loc>
        <publisher-name>now</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Ison, J., Kalaš, M., Jonassen, I., et al.: EDAM: an ontology of bioinformatics operations, types of data and identifiers, topics and formats. Bioinformatics <bold>29</bold>, 1325–1332 (2013). 10.1093/bioinformatics/btt113</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Ison, J., et al.: Community curation of bioinformatics software and data resources. Brief. Bioinform. bbz075, October 2019. 10.1093/bib/bbz075</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rapacki</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ménager</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tools and data services registry: a community effort to document bioinformatics resources</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D38</fpage>
        <lpage>47</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1116</pub-id>
        <pub-id pub-id-type="pmid">26538599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Karlsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Martín-Requena</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ríos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Trelles</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Workflow composition and enactment using jORCA</article-title>
        <source>Leveraging Applications of Formal Methods, Verification, and Validation</source>
        <year>2010</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>328</fpage>
        <lpage>339</lpage>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Kasalica</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <etal/>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Misra</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Workflow discovery through semantic constraints: a geovisualization case study</article-title>
        <source>Computational Science and Its Applications – ICCSA 2019</source>
        <year>2019</year>
        <publisher-loc>Cham</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>473</fpage>
        <lpage>488</lpage>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Kasalica, V., Lamprecht, A.L.: Workflow Discovery with Semantic Constraints: A SAT-Based Implementation (2020). 10.14279/tuj.eceasst.78.1092</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Kruiger, H., Kasalica, V., Meerlo, R., Lamprecht, A.L., Scheider, S.: Loose programming of GIS workflows with geo-analytical concepts. Transactions in GIS (2020, under review)</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>19</issue>
        <fpage>2520</fpage>
        <lpage>2522</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">22908215</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="editor">
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
        </person-group>
        <source>User-Level Workflow Design - A Bioinformatics Perspective</source>
        <year>2013</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Margaria, T., Steffen, B.: Synthesis-based loose programming. In: QUATIC 2010, Porto, Portugal, pp. 262–267. IEEE, September 2010</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Semantics-based composition of EMBOSS services</article-title>
        <source>J. Biomed. Seman.</source>
        <year>2011</year>
        <volume>2</volume>
        <issue>Suppl 1</issue>
        <fpage>S5</fpage>
        <pub-id pub-id-type="doi">10.1186/2041-1480-2-S1-S5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Steffen, B., Margaria, T.: Constraint-guided workflow composition based on the EDAM ontology. In: Burger, A., Marshall, M.S., Romano, P., Paschke, A., Splendiani, A. (eds.) Proceedings of the 3rd International Workshop on Semantic Web Applications and Tools for Life Sciences (SWAT4LS 2010), vol. 698. CEUR Workshop Proceedings, December 2010</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>de Lara</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zisman</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Loose programming with PROPHETS</article-title>
        <source>Fundamental Approaches to Software Engineering</source>
        <year>2012</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>94</fpage>
        <lpage>98</lpage>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Palmblad</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schwämmle</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Automated workflow composition in mass spectrometry-based proteomics</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>35</volume>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty646</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Scheider, S., Meerlo, R., Kasalica, V., Lamprecht, A.L.: Ontology of core concept data types for answering geo-analytical questions. JOSIS (2020, in press). <ext-link ext-link-type="uri" xlink:href="https://www.josis.org/index.php/josis/article/view/555">https://www.josis.org/index.php/josis/article/view/555</ext-link></mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Steffen, B., Margaria, T., Freitag, B.: Module configuration by minimal model construction. Fakultät für Mathematik und Informatik, Universität Passau, Technical report (1993)</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vivian</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Toil enables reproducible, open source, big biomedical data analyses</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <fpage>314</fpage>
        <lpage>316</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3772</pub-id>
        <pub-id pub-id-type="pmid">28398314</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wikipedia contributors: scientific workflow system – Wikipedia, the free encyclopedia (2019). <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704">https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704</ext-link>. Accessed 3 Feb 2020</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?covid-19-tdm?>
<?noissn?>
<front>
  <journal-meta>
    <journal-id journal-id-type="publisher-id">978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="doi">10.1007/978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="nlm-ta">Computational Science – ICCS 2020</journal-id>
    <journal-title-group>
      <journal-title>Computational Science – ICCS 2020</journal-title>
      <journal-subtitle>20th International Conference, Amsterdam, The Netherlands, June 3–5, 2020, Proceedings, Part VII</journal-subtitle>
    </journal-title-group>
    <isbn publication-format="print">978-3-030-50435-9</isbn>
    <isbn publication-format="electronic">978-3-030-50436-6</isbn>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7304703</article-id>
    <article-id pub-id-type="publisher-id">34</article-id>
    <article-id pub-id-type="doi">10.1007/978-3-030-50436-6_34</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>APE: A Command-Line Tool and API for Automated Workflow Composition</article-title>
    </title-group>
    <contrib-group content-type="book editors">
      <contrib contrib-type="editor">
        <name>
          <surname>Krzhizhanovskaya</surname>
          <given-names>Valeria V.</given-names>
        </name>
        <address>
          <email>V.Krzhizhanovskaya@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff8">8</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Závodszky</surname>
          <given-names>Gábor</given-names>
        </name>
        <address>
          <email>G.Zavodszky@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff9">9</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Lees</surname>
          <given-names>Michael H.</given-names>
        </name>
        <address>
          <email>m.h.lees@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff10">10</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Dongarra</surname>
          <given-names>Jack J.</given-names>
        </name>
        <address>
          <email>dongarra@icl.utk.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff11">11</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Sloot</surname>
          <given-names>Peter M. A.</given-names>
        </name>
        <address>
          <email>p.m.a.sloot@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff12">12</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Brissos</surname>
          <given-names>Sérgio</given-names>
        </name>
        <address>
          <email>sergio.brissos@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff13">13</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Teixeira</surname>
          <given-names>João</given-names>
        </name>
        <address>
          <email>joao.teixeira@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff14">14</xref>
      </contrib>
      <aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff10"><label>10</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff11"><label>11</label><institution-wrap><institution-id institution-id-type="GRID">grid.411461.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2315 1184</institution-id><institution>University of Tennessee, </institution></institution-wrap>Knoxville, TN USA </aff>
      <aff id="Aff12"><label>12</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff13"><label>13</label>Intellegibilis, Setúbal, Portugal </aff>
      <aff id="Aff14"><label>14</label>Intellegibilis, Setúbal, Portugal </aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0097-1056</contrib-id>
        <name>
          <surname>Kasalica</surname>
          <given-names>Vedran</given-names>
        </name>
        <address>
          <email>v.kasalica@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1953-5606</contrib-id>
        <name>
          <surname>Lamprecht</surname>
          <given-names>Anna-Lena</given-names>
        </name>
        <address>
          <email>a.l.lamprecht@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <aff id="Aff15"><institution-wrap><institution-id institution-id-type="GRID">grid.5477.1</institution-id><institution-id institution-id-type="ISNI">0000000120346234</institution-id><institution>Department of Information and Computing Sciences, </institution><institution>Utrecht University, </institution></institution-wrap>3584 CC Utrecht, The Netherlands </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <volume>12143</volume>
    <fpage>464</fpage>
    <lpage>476</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open
Access</bold> This chapter is licensed under the terms of the
Creative Commons Attribution 4.0 International License
(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>),
which permits use, sharing,
adaptation, distribution and reproduction in any medium or format, as long as
you give appropriate credit to the original author(s) and the source, provide a
link to the Creative Commons license and indicate if changes were
made.</license-p>
        <license-p>The
images or other third party material
in this chapter are included in the chapter's Creative Commons license, unless
indicated otherwise in a credit line to the material. If material is not
included in the chapter's Creative Commons license and your intended use is not
permitted by statutory regulation or exceeds the permitted use, you will need
to obtain permission directly from the copyright holder.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">
Automated workflow composition is bound to take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. However, functionality for automated workflow composition tends to be integrated with one of the many available workflow management systems, and is thus difficult or impossible to apply in other environments. Therefore we have developed APE (the Automated Pipeline Explorer) as a command-line tool and API for automated composition of scientific workflows. APE is easily configured to a new application domain by providing it with a domain ontology and semantically annotated tools. It can then be used to synthesize purpose-specific workflows based on a specification of the available workflow inputs, desired outputs and possibly additional constraints. The workflows can further be transformed into executable implementations and/or exported into standard workflow formats. In this paper we describe APE v1.0 and discuss lessons learned from applications in bioinformatics and geosciences.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Scientific workflows</kwd>
      <kwd>Computational pipelines</kwd>
      <kwd>Workflow management systems</kwd>
      <kwd>Automated workflow composition</kwd>
      <kwd>Workflow exploration</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Switzerland AG 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Computational pipelines, or workflows, are central to contemporary computational science [<xref ref-type="bibr" rid="CR5">5</xref>]. The international eScience community has created a comprehensive infrastructure of tools, services and platforms that support the work with scientific workflows. Numerous scientific workflow management systems exist [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR29">29</xref>], some of the currently most popular being Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>], KNIME [<xref ref-type="bibr" rid="CR6">6</xref>] and Nextflow [<xref ref-type="bibr" rid="CR7">7</xref>]. While these systems free their users from many technicalities that they would have to deal with when conventionally programming workflows, the identification of suitable computational components and their composition into executable workflows remains a manual task.</p>
    <p id="Par3">The idea of <italic>automated workflow composition</italic> is to let an algorithm perform this process. Based on a loose specification of the intended workflow (for example in terms of available workflow inputs and desired outputs, or principal steps to take), it would automatically generate suitable, executable workflows. It has been shown that program synthesis [<xref ref-type="bibr" rid="CR11">11</xref>] and AI planning techniques [<xref ref-type="bibr" rid="CR8">8</xref>] can be used to implement such functionality [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>]. Some workflow management systems, such as jORCA/Magallanes [<xref ref-type="bibr" rid="CR15">15</xref>], jABC/PROPHETS [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR24">24</xref>] and WINGS [<xref ref-type="bibr" rid="CR9">9</xref>], provide automated workflow composition functionality based on such techniques. However, the tight integration with the respective workflow systems makes it difficult or even impossible to use this functionality in other environments.</p>
    <p id="Par4">Therefore we have developed APE<xref ref-type="fn" rid="Fn1">1</xref> (the Automated Pipeline Explorer) as a command-line tool and API for automated workflow composition. It is designed to be independent from any concrete workflow system, and thus ready to be used in other workflow management systems, tool repositories or workflow sharing platforms as needed. Internally, APE uses a SAT-based implementation of a temporal-logic process synthesis method, inspired by the approach behind the PROPHETS framework [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] and described in detail [<xref ref-type="bibr" rid="CR17">17</xref>]. In a nutshell, the framework uses an extension of the well known Linear Temporal Logic (LTL) to encode the workflow specification. This specification is translated into a propositional logic formula that can be processed by an off-the-shelf SAT solver, with the resulting solutions representing possible workflows for the specification.</p>
    <p id="Par6">In this paper, we introduce APE v1.0 from an application point of view. Section <xref rid="Sec2" ref-type="sec">2</xref> describes how to set it up for use by providing a semantic domain model. Section <xref rid="Sec3" ref-type="sec">3</xref> focuses on the automated composition of workflows based on the domain model and custom workflow specifications. Section <xref rid="Sec6" ref-type="sec">4</xref> describes how APE-composed workflows can further be transformed into executable implementations and/or exported into standard workflow formats. Section <xref rid="Sec9" ref-type="sec">5</xref> discusses lessons learned from applications of APE in bioinformatics and geosciences. Section <xref rid="Sec10" ref-type="sec">6</xref> concludes the paper.</p>
  </sec>
  <sec id="Sec2">
    <title>Domain Model</title>
    <p id="Par7">The semantic domain model constitutes the knowledge base on which APE relies for the automated composition of workflows. It comprises a domain ontology and a collection of semantically annotated tools. The domain ontology provides taxonomic classifications of the data types and operations in the application domain, as a controlled vocabulary of technical terms. Tools in the domain model are semantically annotated with their inputs, outputs and operations, using terms from the ontology. Additionally, the domain model might include (temporal-logic) constraints to express further domain knowledge or rules.<fig id="Fig1"><label>Fig. 1.</label><caption><p>Fragment of a bioinformatics domain ontology.</p></caption><graphic xlink:href="500810_1_En_34_Fig1_HTML" id="MO1"/></fig>
<table-wrap id="Tab1"><label>Table 1.</label><caption><p>Fragment of an annotated set of bioinformatics tools [<xref ref-type="bibr" rid="CR14">14</xref>].</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Name</th><th align="left">Operation</th><th align="left">Data input (type/format)</th><th align="left">Data output (type/format)</th></tr></thead><tbody><tr><td align="left" rowspan="2">Comet</td><td align="left" rowspan="2">Peptide database search</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzML</bold> or <bold>mzXML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">msconvert</td><td align="left" rowspan="2">Formatting Filtering</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Mass spectrum</bold></td></tr><tr><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td></tr><tr><td align="left" rowspan="2">Peptide Prophet</td><td align="left" rowspan="2">Peptide identification Statistical modelling</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>pepXML</bold> or <bold>mzIdentML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">rt4</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>TSV</bold> or <bold>pepXML</bold></td><td align="left"><bold>TSV </bold>or <bold>XML</bold></td></tr><tr><td align="left" rowspan="2">xml2tsv</td><td align="left" rowspan="2">Conversion</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzIdentML</bold></td><td align="left"><bold>TSV</bold></td></tr><tr><td align="left" rowspan="2">SSRCalc</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>Textual format</bold> or <bold>TSV</bold></td><td align="left"><bold>Textual format</bold></td></tr><tr><td align="left" colspan="4"><bold>...</bold></td></tr></tbody></table></table-wrap>
</p>
    <p id="Par8">For example, Fig. <xref rid="Fig1" ref-type="fig">1</xref> and Table <xref rid="Tab1" ref-type="table">1</xref> show fragments of a bioinformatics domain model from a recent case study on automated workflow composition in proteomics [<xref ref-type="bibr" rid="CR25">25</xref>]. The domain ontology (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) was directly derived from the popular bioinformatics data and methods ontology EDAM [<xref ref-type="bibr" rid="CR12">12</xref>]. Table <xref rid="Tab1" ref-type="table">1</xref> shows a few tool annotations from the same case study. Each tool is semantically annotated with the operation(s) it performs and its input and output data types and formats, using terms from the respective taxonomies. These annotations were directly derived from the bio.tools registry [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>], a large collection of EDAM-annotated bioinformatics tools. Note that in this example, two dimensions (type and format) are used for the annotation of the input and output data. Other applications need only one (e.g. format), and yet others have more than two required dimensions. Hence, APE supports the use of multiple disjoint taxonomy trees to represent the required dimensions of data characterization.</p>
    <p id="Par9">Technically, we rely on existing and (de facto) standard formalisms for the representation of the domain model. APE loads the domain ontology from a file in Web Ontology Language (OWL) format. The tool annotations are represented in JavaScript Object Notation (JSON) format, following the schema that is used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
  </sec>
  <sec id="Sec3">
    <title>Automated Workflow Composition</title>
    <p id="Par10">Once the domain model has been configured, APE is ready to be used for automated workflow composition. Therefor the user specifies the workflow inputs, intended outputs and additional constraints that the workflow has to fulfill. Internally the constraints are expressed in a formal (temporal) logic, but the APE interfaces expose them in the form of intuitive natural-language templates. For example (as illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>), one workflow specification from the proteomics case study consists of “Mass spectrum” type in “Thermo RAW format” as input, “Amino acid index (hydropathy)” (in any format) as output, and constraints specifying to use tools that perform the operations “peptide identification”, “validation of peptide spectrum matches” and “retention time prediction” (constraint template “Use operation <italic>X</italic>”). These operations are abstract terms from the ontology, known to scientists from the domain. This shows that formulating such constraints does not require knowledge of all available tools that fit the description. Based on the given specification APE synthesizes workflows that fulfill the specification by construction. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows two of many possible workflow solutions for the example specification.</p>
    <p id="Par11">Automated workflow composition with APE can be performed through its command line interface (CLI) or its application programming interface (API). While the CLI provides a simple means to interact and experiment with the system, the API provides more flexibility and control over the synthesis process. It can also be used to integrate APE’s functionality into other systems.<fig id="Fig2"><label>Fig. 2.</label><caption><p>Automated composition of a proteomics workflow.</p></caption><graphic xlink:href="500810_1_En_34_Fig2_HTML" id="MO2"/></fig>
</p>
    <sec id="Sec4">
      <title>Command Line Interface (CLI)</title>
      <p id="Par12">When running APE-&lt;version&gt;.jar from the command line, it requires a configuration file as a parameter and executes the complete automated workflow composition process accordingly. This JSON-based configuration file provides references to all therefor required information: <list list-type="order"><list-item><p id="Par13">The domain model (as described in Sect. <xref rid="Sec2" ref-type="sec">2</xref>), provided as a pair of a well-formatted OWL and JSON files,</p></list-item><list-item><p id="Par14">the workflow specification, provided as a list of workflow inputs/outputs and template-based workflow constraints, and</p></list-item><list-item><p id="Par15">parameters for the synthesis execution, such as the number of desired solutions, output directory, system configurations, etc.</p></list-item></list>
</p>
      <p id="Par16">APE then writes the synthesized workflows into the defined output directory. Each solution consists of a text file that describes the steps of the workflow, a graphical representation, and a shell script that implements the workflow (depending on the availability of suitable shell commands in the tool annotations).</p>
    </sec>
    <sec id="Sec5">
      <title>Application Programming Interface (API)</title>
      <p id="Par17">Like the CLI, the APE API relies on a configuration file that references the domain ontology, tool annotations, workflow specification and execution parameters. However, the API allows to edit this file programmatically, and thus for instance add constraints or change execution parameters dynamically. This is useful, for instance, for providing more interactive user interfaces or for systematically exploring and evaluating workflow synthesis results for varying specifications and execution parameters.<graphic position="anchor" xlink:href="500810_1_En_34_Figa_HTML" id="MO3"/>
</p>
      <p id="Par18">Listing 1.1 shows a small example of using the APE API for synthesizing a set of workflows similar to the example in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. First, the paths to the domain ontology and tool annotation files are added to the APE configuration object. Then a new instance of the APE framework is created based on the configuration, and the workflow synthesis algorithm is executed with the provided run configuration. The result of the synthesis run is a list of solutions obtained from the SAT solver, which are written into the output directory in textual and graphical (data-flow) format.<fig id="Fig3"><label>Fig. 3.</label><caption><p>Fragment of the APE API.</p></caption><graphic xlink:href="500810_1_En_34_Fig3_HTML" id="MO4"/></fig>
</p>
      <p id="Par19">The APE API provides further functionality, allowing for a more fine-grained interaction with the APE framework. Figure <xref rid="Fig3" ref-type="fig">3</xref> outlines the API, for brevity focusing on the most relevant fields and functions. The <italic>ConstraintFactory</italic> and <italic>Constraint</italic> classes allow for the retrieval of constraint templates and for adding new or removing existing constraints, thus further constraining or loosening the specification, respectively. As shown in the example code above, the <italic>APE</italic> class constitutes the main interface for interaction with the framework. It is used to define the execution parameters as well as the output formats. Once the library has generated the solutions, they are provided as a list of <italic>SolutionWorkflows</italic>. Each solution is represented as a directed graph that comprises type and tool nodes (internally named modules). The interface for working with the workflow solutions (further elaborated in the next section) is provided by the classes <italic>SolutionWorkflow</italic>, <italic>TypeNode</italic> (representing type instances) and <italic>ModuleNode</italic> (representing tool instances).</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Workflow Implementation</title>
    <p id="Par20">As mentioned above, APE provides functionality for exporting the synthesized workflows as textual representations, in the form of (data-flow and control-flow) graphs and as executable shell scripts. In practice it is often desirable to implement workflows in one of the languages used by popular workflow management systems, in order to be able to execute them with the respective workflow engines. Given the large number of existing workflow languages, it is however not feasible for APE to provide ready-to-use export functionality for all of them. Instead, the information contained in APE’s own workflow representation can be used to create workflows in other languages. In the following we describe the APE workflow format and demonstrate how the contained information can be used to create corresponding workflows in the Common Workflow Language (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>]. This feature is going to be integrated to the APE API in the near future. The mapping process described in this paper can furthermore serve as a template for the translation of APE results to other workflow formats, such as NextFlow [<xref ref-type="bibr" rid="CR7">7</xref>], SnakeMake [<xref ref-type="bibr" rid="CR19">19</xref>] or the Workflow Description Language (WDL) [<xref ref-type="bibr" rid="CR3">3</xref>].<fig id="Fig4"><label>Fig. 4.</label><caption><p>Workflow in APE’s native format (left) and corresponding CWL (right).</p></caption><graphic xlink:href="500810_1_En_34_Fig4_HTML" id="MO5"/></fig>
</p>
    <sec id="Sec7">
      <title>APE Workflow Format</title>
      <p id="Par21">APE represents the workflow solutions in the form of directed graphs. The left-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows an example. Nodes in the graph represent instances of data (depicted as ellipses) and executions of operations (rectangles), while the edges represent inputs and outputs of these tools, shown as green and red arrows, respectively. In addition, labels on the edges represent the order in which they are given as arguments to the tools. This graph provides the trace information that is needed to create the workflow in another language.</p>
      <p id="Par22">The APE API provides a set of functions to aid the interaction with the graph structure (see class <italic>SolutionWorkflow</italic> in Fig. <xref rid="Fig3" ref-type="fig">3</xref>). The workflow inputs can simply be retrieved using the corresponding function of the <italic>SolutionWorkflow</italic> class, which returns it as a list of <italic>TypeNodes</italic>. Generally, each <italic>TypeNode</italic> comprises a (possibly empty) tool node that generated it as an output, a (possibly empty) list of tools that used it as an input, and a concrete data <italic>Type</italic> that identifies it. Further, the <italic>SolutionWorkflow</italic> class provides a function for retrieving the tools used in the workflow as list of <italic>ModuleNodes</italic> (sorted according to their order of execution), making it easy to iterate over all tools used in the workflow. Each <italic>ModuleNode</italic> provides information about the next and the previous <italic>ModuleNode</italic> in the sequence, the <italic>TypeNodes</italic> used as inputs and generated as outputs by the tool, as well as information about the actual tool (executable script, see class <italic>Module</italic>) that provides the information needed for its execution. Finally, the workflow outputs are provided in the same format as the initial inputs. Note that for this example the first proposed solution from Fig. <xref rid="Sec3" ref-type="sec">3</xref> was artificially extended with additional inputs and outputs (depicted as gray ellipses) for illustrative purposes.</p>
    </sec>
    <sec id="Sec8">
      <title>Translation to CWL</title>
      <p id="Par23">The Common Workflow Language<xref ref-type="fn" rid="Fn2">2</xref> (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>] has recently emerged as an open standard for describing scientific workflows across platforms. It is increasingly adopted by the scientific community, with CWL support being added to popular scientific workflow management systems like, for example, Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>] and Toil [<xref ref-type="bibr" rid="CR28">28</xref>]. CWL is a declarative language that focuses on workflows composed from command line tools. Basically, it describes a set of steps and dependencies between those steps. CWL has its roots in “make” and similar tools, and like them it determines the order of execution based on these dependencies between tasks, i.e. if there is a required order of the operations or if they can even be executed concurrently. Conveniently, the main CWL structure is quite similar to the APE workflow structure. A basic workflow (see right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref>) comprises a configuration header, a list of workflow inputs, steps to be performed and workflow outputs. The input/output dependencies have to be explicitly defined, again in line with our data trace workflow representation. The tools in CWL usually include a command field, explicitly defining the corresponding command line operation. In addition, they can be configured to run tools from Docker containers automatically, allowing for more flexible and scalable workflow implementations.</p>
      <p id="Par25">However, as the fully automatic configuration for execution is not always feasible, the upcoming CWL version 1.2 will introduce <italic>abstract workflows</italic>. These workflows use descriptive containers instead of directly executable operations, and require additional (manual) configuration to become executable. The abstract containers are represented using the <italic>intent</italic> label (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>). Given that functional description of tools is sufficient for workflow discovery with APE, the abstract CWL workflows match well with APE’s own workflow representation. Furthermore, the bio.tools registry used as source for the tool annotations in the aforementioned bioinformatics case study is a typical example of such a set of tools. The repository contains the semantic annotations of the tools, but still might require some additional work from the user in order to execute the tool itself. Hence APE discovers workflows composed of tools that are not necessarily available on the local system, potentially requiring the installation and configuration of the tools on the execution system first.</p>
      <p id="Par26">To translate and APE workflow into CWL format, it is sufficient to 1) describe the original inputs, 2) iterate through the tools in the workflow sequence and specify the inputs used and outputs generated, and finally 3) specify the workflow output list. The right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows the CWL representation of the APE workflow on the left. To create it, first, the list of input objects is translated into a list of inputs that are annotated using their formats (see Label <bold>workflow_in</bold>). This means that some information about the data get lost in the translation (specifically the type description). However, as at runtime the format is sufficient to perform the execution, this is not a problem. Second, each tool in the sequence is described. The description involves a definition of the inputs, outputs and tool execution specification (mappings are annotated using labels <bold>tool_in</bold>, <bold>tool_out</bold> and <bold>tool_info</bold>, respectively). The most important part of the step is to keep track of the exact source of the tool inputs as well as to provide sufficient tool description that would allow for its execution. The input information is already part of the formalism, as APE keeps track of data flow traces for each data instance. The only requirement is to properly use the identifiers provided when creating the mappings to CWL. Regarding the tool descriptions, as long as the provided tool annotation file contains sufficient information, it can be translated into CWL. Third, the final workflow outputs need to be specified based on the given solution description (see Label <bold>workflow_out</bold>).</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Applications and Lessons Learned</title>
    <p id="Par27">The development of APE was accompanied by three concrete application scenarios for automated workflow composition: 1) The proteomics case study mentioned earlier in this paper [<xref ref-type="bibr" rid="CR25">25</xref>], 2) a case study on cartographic map generation [<xref ref-type="bibr" rid="CR16">16</xref>], and 3) geospatial data transformations in the QuAnGIS project [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR26">26</xref>]. The experiences from these applications, in particular the feedback from the involved domain experts, influenced the design decisions that we took during the development of the APE CLI and API. While initial versions of all three application scenarios have been created with PROPHETS, they have meanwhile been migrated to APE completely and are publicly available<xref ref-type="fn" rid="Fn3">3</xref>.</p>
    <p id="Par29">Naturally, the quality of the workflows obtained through APE essentially depends on the quality of the semantic domain model (ontologies and functional tool annotations). Hence it is crucial to involve domain experts in the domain modeling process, or to rely on sources that have been created by expert communities, such as the EDAM ontology and bio.tools registry that we use in bioinformatics applications of APE. Essentially, the idea is that the domain model is provided and maintained by a small group of domain experts, and used by a larger and broader audience to automatically compose workflows. As a positive side effect on domain modeling, using APE for the systematic generation and evaluation of workflows from varying specifications proved to be helpful to revise and improve ontologies and annotations.</p>
    <p id="Par30">Initially we used a tabular format for the tool annotations, like the one shown in Table <xref rid="Tab1" ref-type="table">1</xref>, because spreadsheets are easy to discuss with collaborators, and the corresponding CSV files easy to process programmatically. However, this approach quickly turned out to be insufficient to adequately capture non-trivial tool annotations. In the proteomics case study, we annotated tools’ inputs and outputs with both data type and format terms from EDAM. As the tools have varying numbers of inputs and outputs, however, they could not be properly annotated in the tabular format with a fixed number of columns. To increase the expressiveness of APE’s tool annotation template, but at the same time reuse an existing formalism, we decided to adopt the JSON-based tool annotation schema used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>], which includes a well-defined and flexible mechanism for functional tool annotation. This has of course extremely simplified the setup of bioinformatics domain models based on bio.tools, but it has also shown to be easy to use in the other application domains.</p>
    <p id="Par31">The APE CLI and API aim to be easy-to-use, but clearly target a tech-savvy audience with a certain level coding and/or scripting confidence. To reach a broader audience, an intuitive interface that can be used without technical experience or specific training is required. As a proof of principle, we recently developed Burke (a Bio-tools and edam User interface foR automated worKflow Exploration<xref ref-type="fn" rid="Fn4">4</xref>). Preconfigured to the domain model of the proteomics case study, it provides the automated workflow composition functionality of APE through a browser-based graphical interface. Users can select input and output data types and formats, as well as constraint templates and their instantiations, from drop-down menus that are filled with the relevant EDAM terms. They can configure and run APE’s synthesizer from the interface, and subsequently inspect the results, which are presented in a convenient tabular format. Feedback on Burke by APE novices has been very positive, hence we plan to develop a more sophisticated web interface for APE in the scope of future work on the framework.</p>
    <p id="Par33">A graphical interface has also the potential to overcome another limitation of the framework: Currently it is a tedious process to compare the different possible workflows generated by APE. This is however needed to make an informed decision about which of the potentially many possible workflows to select for implementation and execution. A graphical interface provides more possibilities for dynamically filtering, aggregating and displaying workflow candidates according to different criteria. Which criteria would actually provide meaningful information for workflow selection is currently an open question. This is another challenge that we are going to work on in the future.</p>
  </sec>
  <sec id="Sec10">
    <title>Conclusion</title>
    <p id="Par34">We believe that automated workflow composition will take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. In this paper we introduced APE v1.0 (the Automatic Pipeline Explorer), a command line tool and API that automates the exploration of scientific workflows. APE is under active development and continuously improving through the experiences and feedback from applications.</p>
    <p id="Par35">Future work on the APE framework will address different remaining challenges of usability and scalability. We are going to work on more end user-oriented interfaces that support better the whole life cycle of specifying, synthesizing, comparing, selecting, implementing and benchmarking computational pipelines. With growing domain models, the runtime performance of the underlying synthesis algorithm is likely to become a bottleneck. We have started to work on domain-specific search heuristics to improve synthesis performance and allow the approach to scale.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par5"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/ape">https://github.com/sanctuuary/ape</ext-link>.</p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p id="Par24"><ext-link ext-link-type="uri" xlink:href="https://www.commonwl.org/">https://www.commonwl.org/</ext-link>.</p>
    </fn>
    <fn id="Fn3">
      <label>3</label>
      <p id="Par28"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/APE_UseCases">https://github.com/sanctuuary/APE_UseCases</ext-link>.</p>
    </fn>
    <fn id="Fn4">
      <label>4</label>
      <p id="Par32"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/Burke_Docker">https://github.com/sanctuuary/Burke_Docker</ext-link>.</p>
    </fn>
  </fn-group>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Existing Workflow systems. <ext-link ext-link-type="uri" xlink:href="https://s.apache.org/existing-workflow-systems">https://s.apache.org/existing-workflow-systems</ext-link></mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">bio-tools/biotoolsSchema, December 2019. <ext-link ext-link-type="uri" xlink:href="https://github.com/bio-tools/biotoolsSchema">https://github.com/bio-tools/biotoolsSchema</ext-link>, original-date: 2015-05-05T15:52:46Z</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Workflow Description Language (WDL), April 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/openwdl/wdl">https://github.com/openwdl/wdl</ext-link>, original-date: 2012–08-01T03:12:48Z</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Amstutz, P., Crusoe, M.R., Tijanić, N., et al.: Common Workflow Language, v1.0, July 2016</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Atkinson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gesing</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montagnat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Scientific workflows: past, present and future</article-title>
        <source>Future Gener. Comput. Syst.</source>
        <year>2017</year>
        <volume>75</volume>
        <fpage>216</fpage>
        <lpage>227</lpage>
        <pub-id pub-id-type="doi">10.1016/j.future.2017.05.041</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berthold</surname>
            <given-names>MR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Knime-the konstanz information miner: version 2.0 and beyond</article-title>
        <source>AcM SIGKDD Explor. Newslett.</source>
        <year>2009</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>26</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1145/1656274.1656280</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chatzou</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Floden</surname>
            <given-names>EW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>316</fpage>
        <lpage>319</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Ghallab</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Nau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Traverso</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <source>Automated Planning and Acting</source>
        <year>2016</year>
        <edition>1</edition>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gil</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Ratnakar</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Wings: intelligent workflow-based design of computational experiments</article-title>
        <source>IEEE Intell. Syst.</source>
        <year>2011</year>
        <volume>26</volume>
        <issue>1</issue>
        <fpage>62</fpage>
        <lpage>72</lpage>
        <pub-id pub-id-type="doi">10.1109/MIS.2010.9</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goecks</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nekrutenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>
        <source>Genome Biol.</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>8</issue>
        <fpage>R86</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id>
        <pub-id pub-id-type="pmid">20738864</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gulwani</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Polozov</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Singh</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Program Synthesis, Foundations and Trends in Programming Languages</source>
        <year>2017</year>
        <publisher-loc>Hanover</publisher-loc>
        <publisher-name>now</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Ison, J., Kalaš, M., Jonassen, I., et al.: EDAM: an ontology of bioinformatics operations, types of data and identifiers, topics and formats. Bioinformatics <bold>29</bold>, 1325–1332 (2013). 10.1093/bioinformatics/btt113</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Ison, J., et al.: Community curation of bioinformatics software and data resources. Brief. Bioinform. bbz075, October 2019. 10.1093/bib/bbz075</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rapacki</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ménager</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tools and data services registry: a community effort to document bioinformatics resources</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D38</fpage>
        <lpage>47</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1116</pub-id>
        <pub-id pub-id-type="pmid">26538599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Karlsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Martín-Requena</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ríos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Trelles</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Workflow composition and enactment using jORCA</article-title>
        <source>Leveraging Applications of Formal Methods, Verification, and Validation</source>
        <year>2010</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>328</fpage>
        <lpage>339</lpage>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Kasalica</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <etal/>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Misra</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Workflow discovery through semantic constraints: a geovisualization case study</article-title>
        <source>Computational Science and Its Applications – ICCSA 2019</source>
        <year>2019</year>
        <publisher-loc>Cham</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>473</fpage>
        <lpage>488</lpage>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Kasalica, V., Lamprecht, A.L.: Workflow Discovery with Semantic Constraints: A SAT-Based Implementation (2020). 10.14279/tuj.eceasst.78.1092</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Kruiger, H., Kasalica, V., Meerlo, R., Lamprecht, A.L., Scheider, S.: Loose programming of GIS workflows with geo-analytical concepts. Transactions in GIS (2020, under review)</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>19</issue>
        <fpage>2520</fpage>
        <lpage>2522</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">22908215</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="editor">
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
        </person-group>
        <source>User-Level Workflow Design - A Bioinformatics Perspective</source>
        <year>2013</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Margaria, T., Steffen, B.: Synthesis-based loose programming. In: QUATIC 2010, Porto, Portugal, pp. 262–267. IEEE, September 2010</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Semantics-based composition of EMBOSS services</article-title>
        <source>J. Biomed. Seman.</source>
        <year>2011</year>
        <volume>2</volume>
        <issue>Suppl 1</issue>
        <fpage>S5</fpage>
        <pub-id pub-id-type="doi">10.1186/2041-1480-2-S1-S5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Steffen, B., Margaria, T.: Constraint-guided workflow composition based on the EDAM ontology. In: Burger, A., Marshall, M.S., Romano, P., Paschke, A., Splendiani, A. (eds.) Proceedings of the 3rd International Workshop on Semantic Web Applications and Tools for Life Sciences (SWAT4LS 2010), vol. 698. CEUR Workshop Proceedings, December 2010</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>de Lara</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zisman</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Loose programming with PROPHETS</article-title>
        <source>Fundamental Approaches to Software Engineering</source>
        <year>2012</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>94</fpage>
        <lpage>98</lpage>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Palmblad</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schwämmle</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Automated workflow composition in mass spectrometry-based proteomics</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>35</volume>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty646</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Scheider, S., Meerlo, R., Kasalica, V., Lamprecht, A.L.: Ontology of core concept data types for answering geo-analytical questions. JOSIS (2020, in press). <ext-link ext-link-type="uri" xlink:href="https://www.josis.org/index.php/josis/article/view/555">https://www.josis.org/index.php/josis/article/view/555</ext-link></mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Steffen, B., Margaria, T., Freitag, B.: Module configuration by minimal model construction. Fakultät für Mathematik und Informatik, Universität Passau, Technical report (1993)</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vivian</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Toil enables reproducible, open source, big biomedical data analyses</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <fpage>314</fpage>
        <lpage>316</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3772</pub-id>
        <pub-id pub-id-type="pmid">28398314</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wikipedia contributors: scientific workflow system – Wikipedia, the free encyclopedia (2019). <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704">https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704</ext-link>. Accessed 3 Feb 2020</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?covid-19-tdm?>
<?noissn?>
<front>
  <journal-meta>
    <journal-id journal-id-type="publisher-id">978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="doi">10.1007/978-3-030-50436-6</journal-id>
    <journal-id journal-id-type="nlm-ta">Computational Science – ICCS 2020</journal-id>
    <journal-title-group>
      <journal-title>Computational Science – ICCS 2020</journal-title>
      <journal-subtitle>20th International Conference, Amsterdam, The Netherlands, June 3–5, 2020, Proceedings, Part VII</journal-subtitle>
    </journal-title-group>
    <isbn publication-format="print">978-3-030-50435-9</isbn>
    <isbn publication-format="electronic">978-3-030-50436-6</isbn>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7304703</article-id>
    <article-id pub-id-type="publisher-id">34</article-id>
    <article-id pub-id-type="doi">10.1007/978-3-030-50436-6_34</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>APE: A Command-Line Tool and API for Automated Workflow Composition</article-title>
    </title-group>
    <contrib-group content-type="book editors">
      <contrib contrib-type="editor">
        <name>
          <surname>Krzhizhanovskaya</surname>
          <given-names>Valeria V.</given-names>
        </name>
        <address>
          <email>V.Krzhizhanovskaya@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff8">8</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Závodszky</surname>
          <given-names>Gábor</given-names>
        </name>
        <address>
          <email>G.Zavodszky@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff9">9</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Lees</surname>
          <given-names>Michael H.</given-names>
        </name>
        <address>
          <email>m.h.lees@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff10">10</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Dongarra</surname>
          <given-names>Jack J.</given-names>
        </name>
        <address>
          <email>dongarra@icl.utk.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff11">11</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Sloot</surname>
          <given-names>Peter M. A.</given-names>
        </name>
        <address>
          <email>p.m.a.sloot@uva.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff12">12</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Brissos</surname>
          <given-names>Sérgio</given-names>
        </name>
        <address>
          <email>sergio.brissos@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff13">13</xref>
      </contrib>
      <contrib contrib-type="editor">
        <name>
          <surname>Teixeira</surname>
          <given-names>João</given-names>
        </name>
        <address>
          <email>joao.teixeira@intellegibilis.com</email>
        </address>
        <xref ref-type="aff" rid="Aff14">14</xref>
      </contrib>
      <aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff10"><label>10</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff11"><label>11</label><institution-wrap><institution-id institution-id-type="GRID">grid.411461.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2315 1184</institution-id><institution>University of Tennessee, </institution></institution-wrap>Knoxville, TN USA </aff>
      <aff id="Aff12"><label>12</label><institution-wrap><institution-id institution-id-type="GRID">grid.7177.6</institution-id><institution-id institution-id-type="ISNI">0000000084992262</institution-id><institution>University of Amsterdam, </institution></institution-wrap>Amsterdam, The Netherlands </aff>
      <aff id="Aff13"><label>13</label>Intellegibilis, Setúbal, Portugal </aff>
      <aff id="Aff14"><label>14</label>Intellegibilis, Setúbal, Portugal </aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0097-1056</contrib-id>
        <name>
          <surname>Kasalica</surname>
          <given-names>Vedran</given-names>
        </name>
        <address>
          <email>v.kasalica@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1953-5606</contrib-id>
        <name>
          <surname>Lamprecht</surname>
          <given-names>Anna-Lena</given-names>
        </name>
        <address>
          <email>a.l.lamprecht@uu.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff15"/>
      </contrib>
      <aff id="Aff15"><institution-wrap><institution-id institution-id-type="GRID">grid.5477.1</institution-id><institution-id institution-id-type="ISNI">0000000120346234</institution-id><institution>Department of Information and Computing Sciences, </institution><institution>Utrecht University, </institution></institution-wrap>3584 CC Utrecht, The Netherlands </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>25</day>
      <month>05</month>
      <year>2020</year>
    </pub-date>
    <volume>12143</volume>
    <fpage>464</fpage>
    <lpage>476</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open
Access</bold> This chapter is licensed under the terms of the
Creative Commons Attribution 4.0 International License
(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>),
which permits use, sharing,
adaptation, distribution and reproduction in any medium or format, as long as
you give appropriate credit to the original author(s) and the source, provide a
link to the Creative Commons license and indicate if changes were
made.</license-p>
        <license-p>The
images or other third party material
in this chapter are included in the chapter's Creative Commons license, unless
indicated otherwise in a credit line to the material. If material is not
included in the chapter's Creative Commons license and your intended use is not
permitted by statutory regulation or exceeds the permitted use, you will need
to obtain permission directly from the copyright holder.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">
Automated workflow composition is bound to take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. However, functionality for automated workflow composition tends to be integrated with one of the many available workflow management systems, and is thus difficult or impossible to apply in other environments. Therefore we have developed APE (the Automated Pipeline Explorer) as a command-line tool and API for automated composition of scientific workflows. APE is easily configured to a new application domain by providing it with a domain ontology and semantically annotated tools. It can then be used to synthesize purpose-specific workflows based on a specification of the available workflow inputs, desired outputs and possibly additional constraints. The workflows can further be transformed into executable implementations and/or exported into standard workflow formats. In this paper we describe APE v1.0 and discuss lessons learned from applications in bioinformatics and geosciences.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Scientific workflows</kwd>
      <kwd>Computational pipelines</kwd>
      <kwd>Workflow management systems</kwd>
      <kwd>Automated workflow composition</kwd>
      <kwd>Workflow exploration</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Switzerland AG 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Computational pipelines, or workflows, are central to contemporary computational science [<xref ref-type="bibr" rid="CR5">5</xref>]. The international eScience community has created a comprehensive infrastructure of tools, services and platforms that support the work with scientific workflows. Numerous scientific workflow management systems exist [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR29">29</xref>], some of the currently most popular being Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>], KNIME [<xref ref-type="bibr" rid="CR6">6</xref>] and Nextflow [<xref ref-type="bibr" rid="CR7">7</xref>]. While these systems free their users from many technicalities that they would have to deal with when conventionally programming workflows, the identification of suitable computational components and their composition into executable workflows remains a manual task.</p>
    <p id="Par3">The idea of <italic>automated workflow composition</italic> is to let an algorithm perform this process. Based on a loose specification of the intended workflow (for example in terms of available workflow inputs and desired outputs, or principal steps to take), it would automatically generate suitable, executable workflows. It has been shown that program synthesis [<xref ref-type="bibr" rid="CR11">11</xref>] and AI planning techniques [<xref ref-type="bibr" rid="CR8">8</xref>] can be used to implement such functionality [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>]. Some workflow management systems, such as jORCA/Magallanes [<xref ref-type="bibr" rid="CR15">15</xref>], jABC/PROPHETS [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR24">24</xref>] and WINGS [<xref ref-type="bibr" rid="CR9">9</xref>], provide automated workflow composition functionality based on such techniques. However, the tight integration with the respective workflow systems makes it difficult or even impossible to use this functionality in other environments.</p>
    <p id="Par4">Therefore we have developed APE<xref ref-type="fn" rid="Fn1">1</xref> (the Automated Pipeline Explorer) as a command-line tool and API for automated workflow composition. It is designed to be independent from any concrete workflow system, and thus ready to be used in other workflow management systems, tool repositories or workflow sharing platforms as needed. Internally, APE uses a SAT-based implementation of a temporal-logic process synthesis method, inspired by the approach behind the PROPHETS framework [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] and described in detail [<xref ref-type="bibr" rid="CR17">17</xref>]. In a nutshell, the framework uses an extension of the well known Linear Temporal Logic (LTL) to encode the workflow specification. This specification is translated into a propositional logic formula that can be processed by an off-the-shelf SAT solver, with the resulting solutions representing possible workflows for the specification.</p>
    <p id="Par6">In this paper, we introduce APE v1.0 from an application point of view. Section <xref rid="Sec2" ref-type="sec">2</xref> describes how to set it up for use by providing a semantic domain model. Section <xref rid="Sec3" ref-type="sec">3</xref> focuses on the automated composition of workflows based on the domain model and custom workflow specifications. Section <xref rid="Sec6" ref-type="sec">4</xref> describes how APE-composed workflows can further be transformed into executable implementations and/or exported into standard workflow formats. Section <xref rid="Sec9" ref-type="sec">5</xref> discusses lessons learned from applications of APE in bioinformatics and geosciences. Section <xref rid="Sec10" ref-type="sec">6</xref> concludes the paper.</p>
  </sec>
  <sec id="Sec2">
    <title>Domain Model</title>
    <p id="Par7">The semantic domain model constitutes the knowledge base on which APE relies for the automated composition of workflows. It comprises a domain ontology and a collection of semantically annotated tools. The domain ontology provides taxonomic classifications of the data types and operations in the application domain, as a controlled vocabulary of technical terms. Tools in the domain model are semantically annotated with their inputs, outputs and operations, using terms from the ontology. Additionally, the domain model might include (temporal-logic) constraints to express further domain knowledge or rules.<fig id="Fig1"><label>Fig. 1.</label><caption><p>Fragment of a bioinformatics domain ontology.</p></caption><graphic xlink:href="500810_1_En_34_Fig1_HTML" id="MO1"/></fig>
<table-wrap id="Tab1"><label>Table 1.</label><caption><p>Fragment of an annotated set of bioinformatics tools [<xref ref-type="bibr" rid="CR14">14</xref>].</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Name</th><th align="left">Operation</th><th align="left">Data input (type/format)</th><th align="left">Data output (type/format)</th></tr></thead><tbody><tr><td align="left" rowspan="2">Comet</td><td align="left" rowspan="2">Peptide database search</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzML</bold> or <bold>mzXML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">msconvert</td><td align="left" rowspan="2">Formatting Filtering</td><td align="left"><bold>Mass spectrum</bold></td><td align="left"><bold>Mass spectrum</bold></td></tr><tr><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td><td align="left"><bold>MGF</bold> or <bold>mzXML</bold> or <bold>mzML</bold></td></tr><tr><td align="left" rowspan="2">Peptide Prophet</td><td align="left" rowspan="2">Peptide identification Statistical modelling</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>pepXML</bold> or <bold>mzIdentML</bold></td><td align="left"><bold>pepXML</bold></td></tr><tr><td align="left" rowspan="2">rt4</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>TSV</bold> or <bold>pepXML</bold></td><td align="left"><bold>TSV </bold>or <bold>XML</bold></td></tr><tr><td align="left" rowspan="2">xml2tsv</td><td align="left" rowspan="2">Conversion</td><td align="left"><bold>Peptide identification</bold></td><td align="left"><bold>Peptide identification</bold></td></tr><tr><td align="left"><bold>mzIdentML</bold></td><td align="left"><bold>TSV</bold></td></tr><tr><td align="left" rowspan="2">SSRCalc</td><td align="left" rowspan="2">Retention time prediction</td><td align="left"><bold>Peptide property</bold></td><td align="left"><bold>Amino acid index (hydropathy)</bold></td></tr><tr><td align="left"><bold>Textual format</bold> or <bold>TSV</bold></td><td align="left"><bold>Textual format</bold></td></tr><tr><td align="left" colspan="4"><bold>...</bold></td></tr></tbody></table></table-wrap>
</p>
    <p id="Par8">For example, Fig. <xref rid="Fig1" ref-type="fig">1</xref> and Table <xref rid="Tab1" ref-type="table">1</xref> show fragments of a bioinformatics domain model from a recent case study on automated workflow composition in proteomics [<xref ref-type="bibr" rid="CR25">25</xref>]. The domain ontology (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) was directly derived from the popular bioinformatics data and methods ontology EDAM [<xref ref-type="bibr" rid="CR12">12</xref>]. Table <xref rid="Tab1" ref-type="table">1</xref> shows a few tool annotations from the same case study. Each tool is semantically annotated with the operation(s) it performs and its input and output data types and formats, using terms from the respective taxonomies. These annotations were directly derived from the bio.tools registry [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>], a large collection of EDAM-annotated bioinformatics tools. Note that in this example, two dimensions (type and format) are used for the annotation of the input and output data. Other applications need only one (e.g. format), and yet others have more than two required dimensions. Hence, APE supports the use of multiple disjoint taxonomy trees to represent the required dimensions of data characterization.</p>
    <p id="Par9">Technically, we rely on existing and (de facto) standard formalisms for the representation of the domain model. APE loads the domain ontology from a file in Web Ontology Language (OWL) format. The tool annotations are represented in JavaScript Object Notation (JSON) format, following the schema that is used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
  </sec>
  <sec id="Sec3">
    <title>Automated Workflow Composition</title>
    <p id="Par10">Once the domain model has been configured, APE is ready to be used for automated workflow composition. Therefor the user specifies the workflow inputs, intended outputs and additional constraints that the workflow has to fulfill. Internally the constraints are expressed in a formal (temporal) logic, but the APE interfaces expose them in the form of intuitive natural-language templates. For example (as illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>), one workflow specification from the proteomics case study consists of “Mass spectrum” type in “Thermo RAW format” as input, “Amino acid index (hydropathy)” (in any format) as output, and constraints specifying to use tools that perform the operations “peptide identification”, “validation of peptide spectrum matches” and “retention time prediction” (constraint template “Use operation <italic>X</italic>”). These operations are abstract terms from the ontology, known to scientists from the domain. This shows that formulating such constraints does not require knowledge of all available tools that fit the description. Based on the given specification APE synthesizes workflows that fulfill the specification by construction. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows two of many possible workflow solutions for the example specification.</p>
    <p id="Par11">Automated workflow composition with APE can be performed through its command line interface (CLI) or its application programming interface (API). While the CLI provides a simple means to interact and experiment with the system, the API provides more flexibility and control over the synthesis process. It can also be used to integrate APE’s functionality into other systems.<fig id="Fig2"><label>Fig. 2.</label><caption><p>Automated composition of a proteomics workflow.</p></caption><graphic xlink:href="500810_1_En_34_Fig2_HTML" id="MO2"/></fig>
</p>
    <sec id="Sec4">
      <title>Command Line Interface (CLI)</title>
      <p id="Par12">When running APE-&lt;version&gt;.jar from the command line, it requires a configuration file as a parameter and executes the complete automated workflow composition process accordingly. This JSON-based configuration file provides references to all therefor required information: <list list-type="order"><list-item><p id="Par13">The domain model (as described in Sect. <xref rid="Sec2" ref-type="sec">2</xref>), provided as a pair of a well-formatted OWL and JSON files,</p></list-item><list-item><p id="Par14">the workflow specification, provided as a list of workflow inputs/outputs and template-based workflow constraints, and</p></list-item><list-item><p id="Par15">parameters for the synthesis execution, such as the number of desired solutions, output directory, system configurations, etc.</p></list-item></list>
</p>
      <p id="Par16">APE then writes the synthesized workflows into the defined output directory. Each solution consists of a text file that describes the steps of the workflow, a graphical representation, and a shell script that implements the workflow (depending on the availability of suitable shell commands in the tool annotations).</p>
    </sec>
    <sec id="Sec5">
      <title>Application Programming Interface (API)</title>
      <p id="Par17">Like the CLI, the APE API relies on a configuration file that references the domain ontology, tool annotations, workflow specification and execution parameters. However, the API allows to edit this file programmatically, and thus for instance add constraints or change execution parameters dynamically. This is useful, for instance, for providing more interactive user interfaces or for systematically exploring and evaluating workflow synthesis results for varying specifications and execution parameters.<graphic position="anchor" xlink:href="500810_1_En_34_Figa_HTML" id="MO3"/>
</p>
      <p id="Par18">Listing 1.1 shows a small example of using the APE API for synthesizing a set of workflows similar to the example in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. First, the paths to the domain ontology and tool annotation files are added to the APE configuration object. Then a new instance of the APE framework is created based on the configuration, and the workflow synthesis algorithm is executed with the provided run configuration. The result of the synthesis run is a list of solutions obtained from the SAT solver, which are written into the output directory in textual and graphical (data-flow) format.<fig id="Fig3"><label>Fig. 3.</label><caption><p>Fragment of the APE API.</p></caption><graphic xlink:href="500810_1_En_34_Fig3_HTML" id="MO4"/></fig>
</p>
      <p id="Par19">The APE API provides further functionality, allowing for a more fine-grained interaction with the APE framework. Figure <xref rid="Fig3" ref-type="fig">3</xref> outlines the API, for brevity focusing on the most relevant fields and functions. The <italic>ConstraintFactory</italic> and <italic>Constraint</italic> classes allow for the retrieval of constraint templates and for adding new or removing existing constraints, thus further constraining or loosening the specification, respectively. As shown in the example code above, the <italic>APE</italic> class constitutes the main interface for interaction with the framework. It is used to define the execution parameters as well as the output formats. Once the library has generated the solutions, they are provided as a list of <italic>SolutionWorkflows</italic>. Each solution is represented as a directed graph that comprises type and tool nodes (internally named modules). The interface for working with the workflow solutions (further elaborated in the next section) is provided by the classes <italic>SolutionWorkflow</italic>, <italic>TypeNode</italic> (representing type instances) and <italic>ModuleNode</italic> (representing tool instances).</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Workflow Implementation</title>
    <p id="Par20">As mentioned above, APE provides functionality for exporting the synthesized workflows as textual representations, in the form of (data-flow and control-flow) graphs and as executable shell scripts. In practice it is often desirable to implement workflows in one of the languages used by popular workflow management systems, in order to be able to execute them with the respective workflow engines. Given the large number of existing workflow languages, it is however not feasible for APE to provide ready-to-use export functionality for all of them. Instead, the information contained in APE’s own workflow representation can be used to create workflows in other languages. In the following we describe the APE workflow format and demonstrate how the contained information can be used to create corresponding workflows in the Common Workflow Language (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>]. This feature is going to be integrated to the APE API in the near future. The mapping process described in this paper can furthermore serve as a template for the translation of APE results to other workflow formats, such as NextFlow [<xref ref-type="bibr" rid="CR7">7</xref>], SnakeMake [<xref ref-type="bibr" rid="CR19">19</xref>] or the Workflow Description Language (WDL) [<xref ref-type="bibr" rid="CR3">3</xref>].<fig id="Fig4"><label>Fig. 4.</label><caption><p>Workflow in APE’s native format (left) and corresponding CWL (right).</p></caption><graphic xlink:href="500810_1_En_34_Fig4_HTML" id="MO5"/></fig>
</p>
    <sec id="Sec7">
      <title>APE Workflow Format</title>
      <p id="Par21">APE represents the workflow solutions in the form of directed graphs. The left-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows an example. Nodes in the graph represent instances of data (depicted as ellipses) and executions of operations (rectangles), while the edges represent inputs and outputs of these tools, shown as green and red arrows, respectively. In addition, labels on the edges represent the order in which they are given as arguments to the tools. This graph provides the trace information that is needed to create the workflow in another language.</p>
      <p id="Par22">The APE API provides a set of functions to aid the interaction with the graph structure (see class <italic>SolutionWorkflow</italic> in Fig. <xref rid="Fig3" ref-type="fig">3</xref>). The workflow inputs can simply be retrieved using the corresponding function of the <italic>SolutionWorkflow</italic> class, which returns it as a list of <italic>TypeNodes</italic>. Generally, each <italic>TypeNode</italic> comprises a (possibly empty) tool node that generated it as an output, a (possibly empty) list of tools that used it as an input, and a concrete data <italic>Type</italic> that identifies it. Further, the <italic>SolutionWorkflow</italic> class provides a function for retrieving the tools used in the workflow as list of <italic>ModuleNodes</italic> (sorted according to their order of execution), making it easy to iterate over all tools used in the workflow. Each <italic>ModuleNode</italic> provides information about the next and the previous <italic>ModuleNode</italic> in the sequence, the <italic>TypeNodes</italic> used as inputs and generated as outputs by the tool, as well as information about the actual tool (executable script, see class <italic>Module</italic>) that provides the information needed for its execution. Finally, the workflow outputs are provided in the same format as the initial inputs. Note that for this example the first proposed solution from Fig. <xref rid="Sec3" ref-type="sec">3</xref> was artificially extended with additional inputs and outputs (depicted as gray ellipses) for illustrative purposes.</p>
    </sec>
    <sec id="Sec8">
      <title>Translation to CWL</title>
      <p id="Par23">The Common Workflow Language<xref ref-type="fn" rid="Fn2">2</xref> (CWL) [<xref ref-type="bibr" rid="CR4">4</xref>] has recently emerged as an open standard for describing scientific workflows across platforms. It is increasingly adopted by the scientific community, with CWL support being added to popular scientific workflow management systems like, for example, Galaxy [<xref ref-type="bibr" rid="CR10">10</xref>] and Toil [<xref ref-type="bibr" rid="CR28">28</xref>]. CWL is a declarative language that focuses on workflows composed from command line tools. Basically, it describes a set of steps and dependencies between those steps. CWL has its roots in “make” and similar tools, and like them it determines the order of execution based on these dependencies between tasks, i.e. if there is a required order of the operations or if they can even be executed concurrently. Conveniently, the main CWL structure is quite similar to the APE workflow structure. A basic workflow (see right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref>) comprises a configuration header, a list of workflow inputs, steps to be performed and workflow outputs. The input/output dependencies have to be explicitly defined, again in line with our data trace workflow representation. The tools in CWL usually include a command field, explicitly defining the corresponding command line operation. In addition, they can be configured to run tools from Docker containers automatically, allowing for more flexible and scalable workflow implementations.</p>
      <p id="Par25">However, as the fully automatic configuration for execution is not always feasible, the upcoming CWL version 1.2 will introduce <italic>abstract workflows</italic>. These workflows use descriptive containers instead of directly executable operations, and require additional (manual) configuration to become executable. The abstract containers are represented using the <italic>intent</italic> label (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>). Given that functional description of tools is sufficient for workflow discovery with APE, the abstract CWL workflows match well with APE’s own workflow representation. Furthermore, the bio.tools registry used as source for the tool annotations in the aforementioned bioinformatics case study is a typical example of such a set of tools. The repository contains the semantic annotations of the tools, but still might require some additional work from the user in order to execute the tool itself. Hence APE discovers workflows composed of tools that are not necessarily available on the local system, potentially requiring the installation and configuration of the tools on the execution system first.</p>
      <p id="Par26">To translate and APE workflow into CWL format, it is sufficient to 1) describe the original inputs, 2) iterate through the tools in the workflow sequence and specify the inputs used and outputs generated, and finally 3) specify the workflow output list. The right-hand side of Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows the CWL representation of the APE workflow on the left. To create it, first, the list of input objects is translated into a list of inputs that are annotated using their formats (see Label <bold>workflow_in</bold>). This means that some information about the data get lost in the translation (specifically the type description). However, as at runtime the format is sufficient to perform the execution, this is not a problem. Second, each tool in the sequence is described. The description involves a definition of the inputs, outputs and tool execution specification (mappings are annotated using labels <bold>tool_in</bold>, <bold>tool_out</bold> and <bold>tool_info</bold>, respectively). The most important part of the step is to keep track of the exact source of the tool inputs as well as to provide sufficient tool description that would allow for its execution. The input information is already part of the formalism, as APE keeps track of data flow traces for each data instance. The only requirement is to properly use the identifiers provided when creating the mappings to CWL. Regarding the tool descriptions, as long as the provided tool annotation file contains sufficient information, it can be translated into CWL. Third, the final workflow outputs need to be specified based on the given solution description (see Label <bold>workflow_out</bold>).</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Applications and Lessons Learned</title>
    <p id="Par27">The development of APE was accompanied by three concrete application scenarios for automated workflow composition: 1) The proteomics case study mentioned earlier in this paper [<xref ref-type="bibr" rid="CR25">25</xref>], 2) a case study on cartographic map generation [<xref ref-type="bibr" rid="CR16">16</xref>], and 3) geospatial data transformations in the QuAnGIS project [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR26">26</xref>]. The experiences from these applications, in particular the feedback from the involved domain experts, influenced the design decisions that we took during the development of the APE CLI and API. While initial versions of all three application scenarios have been created with PROPHETS, they have meanwhile been migrated to APE completely and are publicly available<xref ref-type="fn" rid="Fn3">3</xref>.</p>
    <p id="Par29">Naturally, the quality of the workflows obtained through APE essentially depends on the quality of the semantic domain model (ontologies and functional tool annotations). Hence it is crucial to involve domain experts in the domain modeling process, or to rely on sources that have been created by expert communities, such as the EDAM ontology and bio.tools registry that we use in bioinformatics applications of APE. Essentially, the idea is that the domain model is provided and maintained by a small group of domain experts, and used by a larger and broader audience to automatically compose workflows. As a positive side effect on domain modeling, using APE for the systematic generation and evaluation of workflows from varying specifications proved to be helpful to revise and improve ontologies and annotations.</p>
    <p id="Par30">Initially we used a tabular format for the tool annotations, like the one shown in Table <xref rid="Tab1" ref-type="table">1</xref>, because spreadsheets are easy to discuss with collaborators, and the corresponding CSV files easy to process programmatically. However, this approach quickly turned out to be insufficient to adequately capture non-trivial tool annotations. In the proteomics case study, we annotated tools’ inputs and outputs with both data type and format terms from EDAM. As the tools have varying numbers of inputs and outputs, however, they could not be properly annotated in the tabular format with a fixed number of columns. To increase the expressiveness of APE’s tool annotation template, but at the same time reuse an existing formalism, we decided to adopt the JSON-based tool annotation schema used in the bio.tools registry [<xref ref-type="bibr" rid="CR2">2</xref>], which includes a well-defined and flexible mechanism for functional tool annotation. This has of course extremely simplified the setup of bioinformatics domain models based on bio.tools, but it has also shown to be easy to use in the other application domains.</p>
    <p id="Par31">The APE CLI and API aim to be easy-to-use, but clearly target a tech-savvy audience with a certain level coding and/or scripting confidence. To reach a broader audience, an intuitive interface that can be used without technical experience or specific training is required. As a proof of principle, we recently developed Burke (a Bio-tools and edam User interface foR automated worKflow Exploration<xref ref-type="fn" rid="Fn4">4</xref>). Preconfigured to the domain model of the proteomics case study, it provides the automated workflow composition functionality of APE through a browser-based graphical interface. Users can select input and output data types and formats, as well as constraint templates and their instantiations, from drop-down menus that are filled with the relevant EDAM terms. They can configure and run APE’s synthesizer from the interface, and subsequently inspect the results, which are presented in a convenient tabular format. Feedback on Burke by APE novices has been very positive, hence we plan to develop a more sophisticated web interface for APE in the scope of future work on the framework.</p>
    <p id="Par33">A graphical interface has also the potential to overcome another limitation of the framework: Currently it is a tedious process to compare the different possible workflows generated by APE. This is however needed to make an informed decision about which of the potentially many possible workflows to select for implementation and execution. A graphical interface provides more possibilities for dynamically filtering, aggregating and displaying workflow candidates according to different criteria. Which criteria would actually provide meaningful information for workflow selection is currently an open question. This is another challenge that we are going to work on in the future.</p>
  </sec>
  <sec id="Sec10">
    <title>Conclusion</title>
    <p id="Par34">We believe that automated workflow composition will take the work with scientific workflows to the next level. On top of today’s comprehensive eScience infrastructure, it enables the automated generation of possible workflows for a given specification. In this paper we introduced APE v1.0 (the Automatic Pipeline Explorer), a command line tool and API that automates the exploration of scientific workflows. APE is under active development and continuously improving through the experiences and feedback from applications.</p>
    <p id="Par35">Future work on the APE framework will address different remaining challenges of usability and scalability. We are going to work on more end user-oriented interfaces that support better the whole life cycle of specifying, synthesizing, comparing, selecting, implementing and benchmarking computational pipelines. With growing domain models, the runtime performance of the underlying synthesis algorithm is likely to become a bottleneck. We have started to work on domain-specific search heuristics to improve synthesis performance and allow the approach to scale.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par5"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/ape">https://github.com/sanctuuary/ape</ext-link>.</p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p id="Par24"><ext-link ext-link-type="uri" xlink:href="https://www.commonwl.org/">https://www.commonwl.org/</ext-link>.</p>
    </fn>
    <fn id="Fn3">
      <label>3</label>
      <p id="Par28"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/APE_UseCases">https://github.com/sanctuuary/APE_UseCases</ext-link>.</p>
    </fn>
    <fn id="Fn4">
      <label>4</label>
      <p id="Par32"><ext-link ext-link-type="uri" xlink:href="https://github.com/sanctuuary/Burke_Docker">https://github.com/sanctuuary/Burke_Docker</ext-link>.</p>
    </fn>
  </fn-group>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Existing Workflow systems. <ext-link ext-link-type="uri" xlink:href="https://s.apache.org/existing-workflow-systems">https://s.apache.org/existing-workflow-systems</ext-link></mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">bio-tools/biotoolsSchema, December 2019. <ext-link ext-link-type="uri" xlink:href="https://github.com/bio-tools/biotoolsSchema">https://github.com/bio-tools/biotoolsSchema</ext-link>, original-date: 2015-05-05T15:52:46Z</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Workflow Description Language (WDL), April 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/openwdl/wdl">https://github.com/openwdl/wdl</ext-link>, original-date: 2012–08-01T03:12:48Z</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Amstutz, P., Crusoe, M.R., Tijanić, N., et al.: Common Workflow Language, v1.0, July 2016</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Atkinson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gesing</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montagnat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Scientific workflows: past, present and future</article-title>
        <source>Future Gener. Comput. Syst.</source>
        <year>2017</year>
        <volume>75</volume>
        <fpage>216</fpage>
        <lpage>227</lpage>
        <pub-id pub-id-type="doi">10.1016/j.future.2017.05.041</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berthold</surname>
            <given-names>MR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Knime-the konstanz information miner: version 2.0 and beyond</article-title>
        <source>AcM SIGKDD Explor. Newslett.</source>
        <year>2009</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>26</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1145/1656274.1656280</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chatzou</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Floden</surname>
            <given-names>EW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>316</fpage>
        <lpage>319</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Ghallab</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Nau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Traverso</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <source>Automated Planning and Acting</source>
        <year>2016</year>
        <edition>1</edition>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gil</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Ratnakar</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Wings: intelligent workflow-based design of computational experiments</article-title>
        <source>IEEE Intell. Syst.</source>
        <year>2011</year>
        <volume>26</volume>
        <issue>1</issue>
        <fpage>62</fpage>
        <lpage>72</lpage>
        <pub-id pub-id-type="doi">10.1109/MIS.2010.9</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goecks</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nekrutenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>
        <source>Genome Biol.</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>8</issue>
        <fpage>R86</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id>
        <pub-id pub-id-type="pmid">20738864</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gulwani</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Polozov</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Singh</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Program Synthesis, Foundations and Trends in Programming Languages</source>
        <year>2017</year>
        <publisher-loc>Hanover</publisher-loc>
        <publisher-name>now</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Ison, J., Kalaš, M., Jonassen, I., et al.: EDAM: an ontology of bioinformatics operations, types of data and identifiers, topics and formats. Bioinformatics <bold>29</bold>, 1325–1332 (2013). 10.1093/bioinformatics/btt113</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Ison, J., et al.: Community curation of bioinformatics software and data resources. Brief. Bioinform. bbz075, October 2019. 10.1093/bib/bbz075</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rapacki</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ménager</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tools and data services registry: a community effort to document bioinformatics resources</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>D38</fpage>
        <lpage>47</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1116</pub-id>
        <pub-id pub-id-type="pmid">26538599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Karlsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Martín-Requena</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ríos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Trelles</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Workflow composition and enactment using jORCA</article-title>
        <source>Leveraging Applications of Formal Methods, Verification, and Validation</source>
        <year>2010</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>328</fpage>
        <lpage>339</lpage>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Kasalica</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <etal/>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Misra</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Workflow discovery through semantic constraints: a geovisualization case study</article-title>
        <source>Computational Science and Its Applications – ICCSA 2019</source>
        <year>2019</year>
        <publisher-loc>Cham</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>473</fpage>
        <lpage>488</lpage>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Kasalica, V., Lamprecht, A.L.: Workflow Discovery with Semantic Constraints: A SAT-Based Implementation (2020). 10.14279/tuj.eceasst.78.1092</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Kruiger, H., Kasalica, V., Meerlo, R., Lamprecht, A.L., Scheider, S.: Loose programming of GIS workflows with geo-analytical concepts. Transactions in GIS (2020, under review)</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>19</issue>
        <fpage>2520</fpage>
        <lpage>2522</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">22908215</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="editor">
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
        </person-group>
        <source>User-Level Workflow Design - A Bioinformatics Perspective</source>
        <year>2013</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Margaria, T., Steffen, B.: Synthesis-based loose programming. In: QUATIC 2010, Porto, Portugal, pp. 262–267. IEEE, September 2010</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Semantics-based composition of EMBOSS services</article-title>
        <source>J. Biomed. Seman.</source>
        <year>2011</year>
        <volume>2</volume>
        <issue>Suppl 1</issue>
        <fpage>S5</fpage>
        <pub-id pub-id-type="doi">10.1186/2041-1480-2-S1-S5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Lamprecht, A.L., Naujokat, S., Steffen, B., Margaria, T.: Constraint-guided workflow composition based on the EDAM ontology. In: Burger, A., Marshall, M.S., Romano, P., Paschke, A., Splendiani, A. (eds.) Proceedings of the 3rd International Workshop on Semantic Web Applications and Tools for Life Sciences (SWAT4LS 2010), vol. 698. CEUR Workshop Proceedings, December 2010</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>A-L</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>de Lara</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zisman</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Loose programming with PROPHETS</article-title>
        <source>Fundamental Approaches to Software Engineering</source>
        <year>2012</year>
        <publisher-loc>Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>94</fpage>
        <lpage>98</lpage>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Palmblad</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lamprecht</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Ison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schwämmle</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Automated workflow composition in mass spectrometry-based proteomics</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>35</volume>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty646</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Scheider, S., Meerlo, R., Kasalica, V., Lamprecht, A.L.: Ontology of core concept data types for answering geo-analytical questions. JOSIS (2020, in press). <ext-link ext-link-type="uri" xlink:href="https://www.josis.org/index.php/josis/article/view/555">https://www.josis.org/index.php/josis/article/view/555</ext-link></mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Steffen, B., Margaria, T., Freitag, B.: Module configuration by minimal model construction. Fakultät für Mathematik und Informatik, Universität Passau, Technical report (1993)</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vivian</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Toil enables reproducible, open source, big biomedical data analyses</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <fpage>314</fpage>
        <lpage>316</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3772</pub-id>
        <pub-id pub-id-type="pmid">28398314</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wikipedia contributors: scientific workflow system – Wikipedia, the free encyclopedia (2019). <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704">https://en.wikipedia.org/w/index.php?title=Scientific_workflow_system&amp;oldid=928001704</ext-link>. Accessed 3 Feb 2020</mixed-citation>
    </ref>
  </ref-list>
</back>
