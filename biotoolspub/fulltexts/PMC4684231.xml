<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-archivearticle1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">plosone</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4684231</article-id>
    <article-id pub-id-type="pmid">26656740</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0144578</article-id>
    <article-id pub-id-type="publisher-id">PONE-D-15-31298</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Property Graph vs RDF Triple Store: A Comparison on Glycan Substructure Search</article-title>
      <alt-title alt-title-type="running-head">Property Graph and RDF Triple Store Comparison</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Alocci</surname>
          <given-names>Davide</given-names>
        </name>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mariethoz</surname>
          <given-names>Julien</given-names>
        </name>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Horlacher</surname>
          <given-names>Oliver</given-names>
        </name>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bolleman</surname>
          <given-names>Jerven T.</given-names>
        </name>
        <xref ref-type="aff" rid="aff003">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Campbell</surname>
          <given-names>Matthew P.</given-names>
        </name>
        <xref ref-type="aff" rid="aff004">
          <sup>4</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lisacek</surname>
          <given-names>Frederique</given-names>
        </name>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
        <xref rid="cor001" ref-type="corresp">*</xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <label>1</label>
      <addr-line>Proteome Informatics Group, SIB Swiss Institute of Bioinformatics, Geneva, 1211, Switzerland</addr-line>
    </aff>
    <aff id="aff002">
      <label>2</label>
      <addr-line>Computer Science Department, University of Geneva, Geneva, 1227, Switzerland</addr-line>
    </aff>
    <aff id="aff003">
      <label>3</label>
      <addr-line>Swiss-Prot Group, SIB Swiss Institute of Bioinformatics, Geneva, 1211, Switzerland</addr-line>
    </aff>
    <aff id="aff004">
      <label>4</label>
      <addr-line>Department of Chemistry and Biomolecular Sciences, Macquarie University, Sydney, Australia</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Helmer-Citterich</surname>
          <given-names>Manuela</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>University of Rome Tor Vergata, ITALY</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
      </fn>
      <fn fn-type="con" id="contrib001">
        <p>Wrote the paper: DA FL MPC JTB JM OH. Designed the RDF model with the advice of MPC and JTB: DA. Conceived the property graph implementation: DA OH. Performed the calculations with the assistance of JM: DA. Analysed the data with the advice of FL: DA. Drafted the manuscript: DA FL. Corrected the manuscript: MPC JTB JM OH.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>Frederique.lisacek@isb-sib.ch</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>14</day>
      <month>12</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>10</volume>
    <issue>12</issue>
    <elocation-id>e0144578</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>7</month>
        <year>2015</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>11</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2015 Alocci et al</copyright-statement>
      <copyright-year>2015</copyright-year>
      <copyright-holder>Alocci et al</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are properly credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:type="simple" xlink:href="pone.0144578.pdf"/>
    <abstract>
      <p>Resource description framework (RDF) and Property Graph databases are emerging technologies that are used for storing graph-structured data. We compare these technologies through a molecular biology use case: glycan substructure search. Glycans are branched tree-like molecules composed of building blocks linked together by chemical bonds. The molecular structure of a glycan can be encoded into a direct acyclic graph where each node represents a building block and each edge serves as a chemical linkage between two building blocks. In this context, Graph databases are possible software solutions for storing glycan structures and Graph query languages, such as SPARQL and Cypher, can be used to perform a substructure search. Glycan substructure searching is an important feature for querying structure and experimental glycan databases and retrieving biologically meaningful data. This applies for example to identifying a region of the glycan recognised by a glycan binding protein (GBP). In this study, 19,404 glycan structures were selected from GlycomeDB (<ext-link ext-link-type="uri" xlink:href="http://www.glycome-db.org">www.glycome-db.org</ext-link>) and modelled for being stored into a RDF triple store and a Property Graph. We then performed two different sets of searches and compared the query response times and the results from both technologies to assess performance and accuracy. The two implementations produced the same results, but interestingly we noted a difference in the query response times. Qualitative measures such as portability were also used to define further criteria for choosing the technology adapted to solving glycan substructure search and other comparable issues.</p>
    </abstract>
    <funding-group>
      <funding-statement>This work is supported by the Seventh Framework Programme - Initial Training Network N° 316929 (<ext-link ext-link-type="uri" xlink:href="http://ec.europa.eu/research/fp7/index_en.cfm">http://ec.europa.eu/research/fp7/index_en.cfm</ext-link>). The grant recipient is FL. This activity at SIB is supported by the Swiss Federal Government through the State Secretariat for Education, Research and Innovation SERI. DA is supported by EU-ITN (FP7-PEOPLE-2012-ITN # 316929). MPC acknowledges funding support from the Australian National eResearch Collaboration Tools and Resources project (NeCTAR).</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="5"/>
      <table-count count="1"/>
      <page-count count="17"/>
    </counts>
    <custom-meta-group>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>All relevant data are within the paper and its Supporting Information files.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>All relevant data are within the paper and its Supporting Information files.</p>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>Nowadays the use of high throughput technologies and optimized pipelines allows life scientists to generate terabytes of data in a reduced amount of time and subsequently feed quickly and comprehensively online bioinformatics databases. In this scenario, the interoperability between data resources has become a fundamental challenge. Issues are gradually being solved in applications involving genome (DNA) or transcriptome (RNA) analyses but problems remain for less documented molecules such as lipids, glycans (also referred to as “carbohydrate”, “oligosaccharide” or “polysaccharide” to designate this type of molecule) or metabolites.</p>
    <p>Glycosylation is the addition of glycan molecules to proteins and/or lipids. It is an important post-translational modification that enhances the functional diversity of proteins and influences their biological activities and circulatory half-life. A glycan is a branched tree-like molecule that naturally lends itself to graph encoding. However, glycans have long been described in the IUPAC linear format [<xref rid="pone.0144578.ref001" ref-type="bibr">1</xref>], that is, as regular expressions delineating branching structures with different bracket types. Such encoding can generate directional/linkage/topology ambiguity and is not sufficient in the handling of incomplete or repeated units. More recently, several encoding formats for glycans have developed based on sets of nodes and edges, e.g., GlycoCT [<xref rid="pone.0144578.ref002" ref-type="bibr">2</xref>], Glyde-II [<xref rid="pone.0144578.ref003" ref-type="bibr">3</xref>,<xref rid="pone.0144578.ref004" ref-type="bibr">4</xref>], IUPAC condensed [<xref rid="pone.0144578.ref005" ref-type="bibr">5</xref>], KCAM/KCF [<xref rid="pone.0144578.ref006" ref-type="bibr">6</xref>,<xref rid="pone.0144578.ref007" ref-type="bibr">7</xref>] or more recently WURCS [<xref rid="pone.0144578.ref008" ref-type="bibr">8</xref>]. To date the GlycoCT format is acknowledged as the default format for data sharing between databases [<xref rid="pone.0144578.ref009" ref-type="bibr">9</xref>] and consequently the most commonly used format for storing structural data. Glycans are composed of monosaccharides (8 common building blocks and dozens of less frequent ones as described in MonosaccharideDB (<ext-link ext-link-type="uri" xlink:href="http://www.monosaccharidedb.org">http://www.monosaccharidedb.org</ext-link>) that are cyclic molecules. These monosaccharides are linked together in different ways depending on carbon attachment positions in the cycle as detailed further.</p>
    <p>In a graph representation of a glycan, each monosaccharide residue is a node possibly associated with a list of properties and each linkage is an edge also potentially associated with a list of properties. In fact, chemical bonds between building blocks, called glycosidic linkages, are transformed into edges in the acyclic graph structure. An example is shown in <xref rid="pone.0144578.g001" ref-type="fig">Fig 1</xref>, where the simplified graphic representation popularised by the Consortium for Functional Glycomics (CFG) [<xref rid="pone.0144578.ref010" ref-type="bibr">10</xref>] (originally proposed by the authors of Essentials in Glycobiology [<xref rid="pone.0144578.ref011" ref-type="bibr">11</xref>]) is matched to a graph. This notation assigns each monosaccharide to a coloured shape (e.g., yellow circle for galactose, shortened as Gal). Shared colours or shapes express structural similarity among monosaccharides. For example, N-Acetylgalactosamine (yellow square) differs from galactose (yellow circle) through a so-called substituent (removal of an OH group and addition of an amino-acetyl group). “Substituent” as a property is precisely the type that qualifies a node.</p>
    <fig id="pone.0144578.g001" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0144578.g001</object-id>
      <label>Fig 1</label>
      <caption>
        <title>Glycan CFG encoding and graph encoding.</title>
        <p>On the left hand side a glycan structure encoded with CFG nomenclature is presented, while the right hand side shows the same structure translated into a graph. Each monosaccharide or substituent becomes a node and each glycosidic bond becomes an edge in the graph. Avoiding any loss of information all the properties of each monosaccharide or substituent are converted in node properties whereas glycosidic bond properties are translated in edge properties. To be more clear the colour code associate with the monosaccharide type is preserved among the images.</p>
      </caption>
      <graphic xlink:href="pone.0144578.g001"/>
    </fig>
    <p>Starting with the CarbBank project in 1987 [<xref rid="pone.0144578.ref012" ref-type="bibr">12</xref>], a range of glycoinformatics resources containing glycan-related information has been developed thereby creating a variety of reference databases [<xref rid="pone.0144578.ref013" ref-type="bibr">13</xref>–<xref rid="pone.0144578.ref015" ref-type="bibr">15</xref>]. In the last two years, two articles [<xref rid="pone.0144578.ref016" ref-type="bibr">16</xref>,<xref rid="pone.0144578.ref017" ref-type="bibr">17</xref>] have been published proposing mechanisms for connecting glycan-related (or glycomics) databases. The respective authors suggested moving towards new technologies designed for semantic web, which are adapted to aggregating information from different sources. The outcome for these proposals was a common standard ontology called GlycoRDF [<xref rid="pone.0144578.ref016" ref-type="bibr">16</xref>] that is now being widely adopted by the community to develop glycomics resources that cooperate and share standard formats enabling federated queries [<xref rid="pone.0144578.ref009" ref-type="bibr">9</xref>]. Nonetheless, in an effort to confirm the relevance of RDF as the technology of choice for glycomics data representation and integration, comparison with other graph-based technologies such as Property Graph is necessary. In this paper we discuss methods for interconnecting different databases through addressing the question of glycan substructure (motif or pattern) searching. This report should be considered as a preliminary study of feasibility and a comparison between different software implementations. Our main goal is to compare the performance of these two technologies (RDF and Property Graph) for glycan substructure search. In this study, Neo4j was chosen as a representative option for Property Graphs and multiple RDF triple stores were tested mainly due to the shared graph query language. Specifically, we have used for the latter: Virtuoso Open-Source Edition [<xref rid="pone.0144578.ref018" ref-type="bibr">18</xref>], Sesame [<xref rid="pone.0144578.ref019" ref-type="bibr">19</xref>], Jena Fuseki [<xref rid="pone.0144578.ref020" ref-type="bibr">20</xref>] and Blazegraph [<xref rid="pone.0144578.ref021" ref-type="bibr">21</xref>].</p>
    <p>Searching (sub)structures is meaningful in glycomics. It matches the concept of glycan epitope or glycan determinant associated with the part of the whole structure that is recognized by glycan-binding proteins, which include lectins, receptors, toxins, adhesins, antibodies and enzymes [<xref rid="pone.0144578.ref022" ref-type="bibr">22</xref>]. Several substructure search solutions have been developed including for instance, regular expression matching [<xref rid="pone.0144578.ref023" ref-type="bibr">23</xref>] as applied to processing glycans in linear format (IUPAC) [<xref rid="pone.0144578.ref005" ref-type="bibr">5</xref>]. Although these approaches have showed reasonable robustness, they also have intrinsic limitations especially in handling structural ambiguities. Frequently, experimental data is insufficient to assign a precise monosaccharide (e.g., Galactose) to a position in the structure so that it is characterised only by its carbon content (e.g., Hexose). Regular expressions do not account for dependencies while a graph description handles inheritance of properties (e.g., Hexose -&gt; Galactose). Emerging technologies capable of storing graph models can be used, namely, Resource Description Framework (RDF) [<xref rid="pone.0144578.ref024" ref-type="bibr">24</xref>] and Property Graph databases [<xref rid="pone.0144578.ref025" ref-type="bibr">25</xref>]. Even though RDF and Property Graph databases can be used to reach the same goal, these two approaches are not synonymous and can be distinguished. RDF is designed for storing statements in the form of subject–predicate–object called triples, whereas a Property Graph is designed to implement different types of graphs such as hypergraphs, undirected graphs, weighted graphs, etc. Nonetheless, all possible types of graphs can be built with triples and stored in an RDF triple store [<xref rid="pone.0144578.ref026" ref-type="bibr">26</xref>]. Furthermore, Property Graphs are node-centric whereas RDF triple stores are edge-centric. For this reason, RDF triple stores use a list of edges, many of which are properties of a node and not critical to the graph structure itself. Moreover, Property Graph databases tend to be optimized for graph traversals where only one big graph is present. With RDF triple stores, the cost of traversing an edge tends to be logarithmic [<xref rid="pone.0144578.ref027" ref-type="bibr">27</xref>]. Finally, the query language is another key point in the comparison: RDF triple stores support SPARQL [<xref rid="pone.0144578.ref028" ref-type="bibr">28</xref>] as a native query language whereas Property Graphs have mainly proprietary languages. Even though Neo4J has a plugin for SPARQL, it relies essentially on its own proprietary language called Cypher [<xref rid="pone.0144578.ref029" ref-type="bibr">29</xref>]. In either case, a substructure search can be defined with the query language provided by these new technologies. To reach our benchmarking goal in this application, we first describe the main steps of building substructure search software using alternatively an RDF triple store or a Property Graph databases. We then provide a selection of quantitative and qualitative measures investigated during the study such as portability. Finally, we summarise the main achievements and draw some conclusions on the expected characteristics of a web application for glycan substructure search.</p>
  </sec>
  <sec id="sec002">
    <title>Material and Methods</title>
    <p>The development of a software solution to perform glycan substructure searching involves two main tasks 1) the storage of glycan structures and 2) translation of a query into a specific query language for pulling out all the glycan structures that match the query pattern.</p>
    <p>The glycan encoding and the data storage sections provide details regarding these tasks using native graph stores. The substructure search query shows how specific languages provided by RDF and Property Graph databases can be used.</p>
    <sec id="sec003">
      <title>Data structure</title>
      <p>As previously described most dedicated glycan databases store structures using string encoding standards. This multiplicity led to create a new layer between the data store and the glycan encoding formats to decouple the glycan structure information from any string-encoding format.</p>
      <p>A comprehensive framework was developed within the EUROCarbDB project for parsing multiple glycan encoding formats [<xref rid="pone.0144578.ref030" ref-type="bibr">30</xref>]. Even though this framework is still used and includes parsers for each glycan encoding format, for pragmatic reasons we have relied on an in-house library, called MzJava [<xref rid="pone.0144578.ref031" ref-type="bibr">31</xref>]. It is an open source library that provides a data structure and specific readers for multiple glycan encoding formats that are not limited to processing mass spectrometry data. The MzJava data structure organizes the information from a glycan structure into a directed acyclic graph, which can be directly stored into a graph storage solution. Monosaccharides, the basic units, which compose the glycan structures, are treated as graph nodes and all the biological properties of these building blocks are stored as separate node properties. Substituents—particular building blocks, which can be combined with basic units—are handled separately from monosaccharides and are represented as extra nodes in the data structure.</p>
      <p>All glycosidic linkages are transformed into edges in the acyclic graph structure. Other edges are introduced for every linkage between monosaccharides and substituents, so-called substituent linkages. Each edge carries a list of properties, which identify different chemical aspects of the bond itself. Each glycan is represented by a set of nodes selected between available monosaccharides and substituents and a set of edges, which connect the nodes (<xref rid="pone.0144578.g001" ref-type="fig">Fig 1</xref>). The direct acyclic graph used by the Mzjava data structure can be directly loaded into a native graph store.</p>
    </sec>
    <sec id="sec004">
      <title>Data Storage</title>
      <p>The data store interacts with the data structure layer that was introduced in the previous section. Native storage of the direct acyclic graphs used by the data structure layer was the first main requirement for the data store. Because both RDF and Property Graph technologies fulfil this requirement, we have developed two different data stores using each of these technologies.</p>
      <p>For populating the data stores, a collection of known glycan structures was extracted from GlycomeDB [<xref rid="pone.0144578.ref013" ref-type="bibr">13</xref>], the largest repository of known glycan structures publicly available. It contains more than 34,000 structures collected from different online resources. The GlycoCT version of GlycomeDB [<xref rid="pone.0144578.ref013" ref-type="bibr">13</xref>] was used in this study to compare the performance of RDF versus Property Graph and the MzJava reader used to translate all structures into the supported data structure, which were then stored into both RDF triple store and Property Graph data stores (see “Glycan encoding” section). All the structures with repeats, underdetermined regions or containing not fully characterised monosaccharides were omitted from this study in order to produce consistent results with each query and ease comparison between the two implementations. In the end, the data store contained 19404 possibly redundant glycan structures (redundancy comes for instance for the same structure identified in two different species since at this stage, we do not account for taxonomy). Each structure was treated as a single graph, meaning that both implementations contain 19,404 disconnected graphs. In the end, the dataset contained 233,633 distinct nodes divided in 19,404 different graphs, with an average of 12 nodes for each graph. Here, the largest is composed of 63 nodes other details about the distribution of nodes among the structures are provided in <xref rid="pone.0144578.s011" ref-type="supplementary-material">S10 Table</xref>.</p>
      <p>Details about the development of the two data storage implementations are illustrated in the following sections.</p>
    </sec>
    <sec id="sec005">
      <title>RDF implementation</title>
      <p>RDF can only deal with triples, statements in the form subject-predicate-object. For this reason, it is necessary to develop a model that translates a glycan structure with all potential biological properties into a list of triples. <xref rid="pone.0144578.g002" ref-type="fig">Fig 2</xref> shows how this model can be used for a simple structure with a monosaccharide and a substituent.</p>
      <fig id="pone.0144578.g002" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0144578.g002</object-id>
        <label>Fig 2</label>
        <caption>
          <title>Ontology overview.</title>
          <p>Overview of the ontology developed for translating glycan structures into RDF/semantic triples. The figure shows all the predicates and the entities used for defining a glycan structures into the RDF triple store.</p>
        </caption>
        <graphic xlink:href="pone.0144578.g002"/>
      </fig>
      <p>The proposed model is based on the GlycoCT standard where the structure is encoded in a residue list and a connectivity list. All monosaccharides and substituents are treated as separate components and annotated in the residue list with a specific ID. The connectivity list contains the linkages between the components annotated in the residue list. Our model follows the same principle: all substituents are treated as separate components as opposed to merging them with their associated monosaccharides in order to avoid contaminating the model with biological assumptions.</p>
      <p>“Glycan” is the first entity in the model and it has two predicates associated: “closematch” taken from the SKOS ontology and “has_residue”. The “closematch” predicate connects the “Glycan” entity with URLs that identify the specific glycan in other databases. In this way, references to external databases can be kept in our model for refining the search. The user can always add alternative references using the same predicate. The “Glycan” entity links each monosaccharide and substituent to the “has_residue” predicate, grouping together all the building blocks that belong to the same glycan structure.</p>
      <p>Every “Residue” entity represents a particular monosaccharide or substituent, so the number of components for each structure is equal to the sum of monosaccharides and substituents. Chemical properties related to the components can be stored using RDF:property. In this model we provide “residue:monosaccharide” and “residue:substituent” as RDF:type for specifying the type of components and properties like “monosaccharide:Gal” or “substituent:NAcetyl” can be used for defining the actual molecule.</p>
      <p>All predicates available are shown in <xref rid="pone.0144578.g002" ref-type="fig">Fig 2</xref> whereas the list of all monosaccharides and substituents already defined in the ontology can be found in <xref rid="pone.0144578.s012" ref-type="supplementary-material">S11 Table</xref>. The user can extend the ontology adding new predicates or property to encode supplementary information regarding nodes.</p>
      <p>Component entities are connected to each other following the actual pattern of the glycan structure. In other words, a triple with a “links_To” predicate is added to the triple store for each linkage between two different components. In this ontology no entity represents linkages, we rely on multiple triples for storing the specifications of a linkage. Each time a piece of information about a specific edge is added, a new triple with the parent node as subject and the child node as object is inserted in the triple store. The information is encapsulated in the predicate itself. The ontology provides the user with several predicates for describing each piece of information related to the linkage.</p>
      <p>Starting from the root node every linkage between a parent component and a child is added to the triple store following a breadth first search algorithm. Thus we prevent any possible edge duplication in the graph.</p>
      <p>In the end, each glycan structure stored in the RDF triple store is composed of at least a “Glycan” entity associated with many different “Residue” entities.</p>
      <p>By introducing a predicate for each linkage and component property, we allow the stratification of information. The potential loss of performance due to spreading information on different layers is justified by our wish to preserve approximate search options (e.g. search with missing information or tolerating mismatches). Indeed, merging all properties within a predicate lacks the flexibility that is crucial for glycan substructure search tolerating fuzzy matches.</p>
    </sec>
    <sec id="sec006">
      <title>Neo4j implementation</title>
      <p>The Java API provided by Neo4j was used for storing glycan structures into a Property Graph. Each structure has been added to the same graph and the glycan structure ID has been stored in all the nodes related to a particular structure. The final result is a disconnected graph where structures can be grouped by ID. Spreading the glycan ID, as opposed to keeping it in the root node, is useful to quickly retrieve the identifier when the substructure does not include the root node. In finer details, each monosaccharide or substituent has been added to the graph database as a node whereas each linkage is encoded as a relationship between two nodes. To encode biological properties of components or linkages we have used respectively node and relationship properties. Property Graphs can directly store graphs including nodes and edges properties.</p>
    </sec>
    <sec id="sec007">
      <title>Substructure Search Query</title>
      <p>Starting from a substructure query, each data store implementation is queried in order to retrieve all glycan structures that contain the query pattern. In fact, there is no difference between a complete structure and a substructure in terms of encoding format. Consequently, the workflow presented in the Glycan encoding section can be used for extrapolating and organizing the substructure information into a common data structure. Then the direct acyclic graph is translated into a technology specific language for performing a graph pattern search among the structures contained in the data store. The languages provided by RDF and Property Graph databases describe a graph pattern and find all the graphs which contain it, and support our software solution for the retrieval of all the structures in the data store that contain a query substructure.</p>
      <p>The following illustrates the process of translating the data structure graph into specific RDF and Property Graph databases query languages.</p>
    </sec>
    <sec id="sec008">
      <title>RDF SPARQL Query</title>
      <p>Following the ontology described in <xref rid="pone.0144578.g002" ref-type="fig">Fig 2</xref>, glycan substructures can be translated into a SPARQL query. A native support to this query language is provided by each RDF triple store, thereby not tying our solution to any particular product, however, the queries support SPARQL 1.1 [<xref rid="pone.0144578.ref032" ref-type="bibr">32</xref>]. <xref rid="pone.0144578.g003" ref-type="fig">Fig 3A</xref> shows the translation process on a substructure where a galactose residue is connected to a glucose with an alpha 1,3 linkage. Every monosaccharide or substituent becomes an entity and each property is encoded in one of the predicates or the properties described in the model. Sesame API [<xref rid="pone.0144578.ref019" ref-type="bibr">19</xref>] together with the appropriate JDBC driver has been used for querying Virtuoso Openlink, Blazegraph, Sesame and Jena Fuseki. Detailed examples of larger structures are provided in the <xref rid="pone.0144578.s001" ref-type="supplementary-material">S1 File</xref>.</p>
      <fig id="pone.0144578.g003" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0144578.g003</object-id>
        <label>Fig 3</label>
        <caption>
          <title>Query building example.</title>
          <p>A. Example of use of the RDF model to build a SPARQL query from a glycan substructure focussing on the translation process. The prefix part of the query is omitted but further detailed examples are provided in the <xref rid="pone.0144578.s001" ref-type="supplementary-material">S1 File</xref>. B. The same example is shown with building a Cypher query, the native language in Neo4J. Similarly, additional examples are provided in the <xref rid="pone.0144578.s001" ref-type="supplementary-material">S1 File</xref>.</p>
        </caption>
        <graphic xlink:href="pone.0144578.g003"/>
      </fig>
    </sec>
    <sec id="sec009">
      <title>Neo4j Cypher Query</title>
      <p>In order to interact with the database, Neo4j provides a native query language called Cypher. The translation process of a glycan substructure into a Cypher query is shown in <xref rid="pone.0144578.g003" ref-type="fig">Fig 3B</xref>. Two main parts are present in the query: the graph pattern and the property specification. The first part delineates the shape of the substructure while the second specifies the properties of each node or edge. In addition to Cypher, Neo4j provides a native object access Java API to interact with the database. Cypher is known to be slower than the native object access [<xref rid="pone.0144578.ref033" ref-type="bibr">33</xref>], however version 2.2 has improved performance and comes with a new cost-based query optimizer.</p>
    </sec>
    <sec id="sec010">
      <title>Setup</title>
      <p>All tests were performed using a Dell Precision T7400 with the following hardware features:</p>
      <list list-type="bullet">
        <list-item>
          <p>CPU: Intel(R) Xeon(R) X5482</p>
        </list-item>
        <list-item>
          <p>RAM: 56 GB DDR2 ECC</p>
        </list-item>
        <list-item>
          <p>Hard disk capacity: 500 GB</p>
        </list-item>
        <list-item>
          <p>Operating system: Linux Cent OS version 6.6 64-bit</p>
        </list-item>
        <list-item>
          <p>Java JDK version: 8</p>
        </list-item>
        <list-item>
          <p>RDF triple store: Virtuoso Open-Source Edition version 7.2, Sesame 4.0, Jena Fuseki v2, Blazegraph 1.5.3</p>
        </list-item>
        <list-item>
          <p>Property Graph: Neo4j Community version 2.2</p>
        </list-item>
      </list>
      <p>For Virtuoso, NumberOfBuffers and MaxDirtyBuffers were changed to 170,000 and 130,000 respectively. Moreover, the MaxCheckpointRemap was adjusted according to the size of our database. A further increase of the buffers reported the same performance. Neo4j embedded version was preferred over the REST implementation. The embedded version has the advantage of removing any latency introduced by the REST communication between the service and the server. Moreover, it can be accessed directly from the java application with a specific API provided by Neo4j.</p>
      <p>For building the Neo4j instance, Node_auto_indexing and Relationship_auto_indexing have been activated. In addition, we have set the cache_type option to “strong” in order to keep the whole database in RAM.</p>
      <p>We have used Java JDK version 8 to run Neo4j, Blazegraph, Jena Fuseki and Sesame setting the heap size to 8 GB.</p>
    </sec>
  </sec>
  <sec id="sec011">
    <title>Results and Discussion</title>
    <p>In an effort to compare the usage of Property Graph vs. RDF triple store to address the substructure search problem, we built a dataset with 19,404 glycan structures extracted from the glycan structure repository GlycomeDB and compared the average query time of two data sets described in <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8</xref> and <xref rid="pone.0144578.s010" ref-type="supplementary-material">S9</xref> Tables. The size of the queries have been divided into five groups:</p>
    <list list-type="bullet">
      <list-item>
        <p>Very short: less than 5 residues</p>
      </list-item>
      <list-item>
        <p>Short: between 5 and 15 residues</p>
      </list-item>
      <list-item>
        <p>Middle: between 15 and 25 residues</p>
      </list-item>
      <list-item>
        <p>Large: between 25 and 35 residues</p>
      </list-item>
      <list-item>
        <p>Very large: more than 35 residues</p>
      </list-item>
    </list>
    <p>The first set contains 128 queries (<xref rid="pone.0144578.s009" ref-type="supplementary-material">S8 Table</xref>) that represent biologically relevant use-cases and have been identified as glycoepitopes, that is, parts of glycans recognised by glycan-binding proteins. This list was obtained from the GlycoEpitope database [<xref rid="pone.0144578.ref034" ref-type="bibr">34</xref>] and further substantiated by information reviewed in [<xref rid="pone.0144578.ref022" ref-type="bibr">22</xref>]. Glycoepitopes are limited in size, i.e. between 2 and 13 residues but approximately 70% of these substructures contain between four and seven residues. This reference set is important for the future implementation of a web application that will perform substructure search for glycobiologist users. It contains mainly short and very short queries.</p>
    <p>The second set (<xref rid="pone.0144578.s010" ref-type="supplementary-material">S9 Table</xref>) contains 60 queries. The structures were randomly picked in GlycomeDB, with the prerequisite of spanning between 25 and 60 residues. This set was exclusively created for benchmark purposes and contains only large and very large queries. There is no biologically relevant relation in these substructures, but this data set pushes the software to its limits and tests the reliability of different implementations of RDF triple stores and Property Graphs.</p>
    <sec id="sec012">
      <title>Quantitative Measures</title>
      <p>At first an empty query was performed to initiate the test environment and then each query structure, present in S8 (first set) and S9 (second set) was run 10 times and the average query time was calculated for the last nine queries. All time is measured in seconds (s).</p>
      <p>The results (<xref rid="pone.0144578.s002" ref-type="supplementary-material">S1 Table</xref>) for the first set of queries show that the Virtuoso RDF triple store and Blazegraph have a better query response in 95% of the queries, the other 5% is cover by Sesame. Neo4j, as the only representative of Property Graph, only performed faster than Virtuoso for 12 queries (Ids 49 to 52 in <xref rid="pone.0144578.s002" ref-type="supplementary-material">S1 Table</xref>) and never exceeded the performance of Blazegraph. The average query time through the whole set of queries shows that Neo4j performance is comparable with Sesame but is still 0.8 s slower than Blazegraph.</p>
      <p><xref rid="pone.0144578.s003" ref-type="supplementary-material">S2 Table</xref> shows the results for the second query set that were technically more instructive. Virtuoso Triple store column is empty because we could not run the benchmark with this RDF triple store. Using the machine described in the setup, we have tested both the development and stable versions of Virtuoso and none of them produced an output result. However, we observed two different behaviours: using the stable version, the machine froze after submitting the query until Virtuoso crashed. With the development version, we were not able to get any query results after hours of computation. We attempted to solve this problem while setting to 5 the swappiness of the operating system, to no avail. In the end, we contacted the Openlink support but have not yet received an answer. RDF technology is relatively new and some implementations still need debugging or meet scaling issues.</p>
      <p>When compared to the RDF triple stores, Neo4j slowed down as the size of the queries increased. In this case, the difference between Neo4j and Blazegraph, calculated on the average query time in the whole set, is close to 4 seconds. Surprisingly Jena Fuseki, the slowest database in the first benchmark, is almost 2 second faster than Neo4j. The average response time was calculated for each query in both datasets and the results are summarised in <xref rid="pone.0144578.g004" ref-type="fig">Fig 4</xref>. The average query response time of three glycan determinants shown in <xref rid="pone.0144578.g005" ref-type="fig">Fig 5</xref> is detailed in <xref rid="pone.0144578.t001" ref-type="table">Table 1</xref>. Complete information regarding the results obtained with the two sets is provided in the <xref rid="pone.0144578.s005" ref-type="supplementary-material">S4</xref> and <xref rid="pone.0144578.s006" ref-type="supplementary-material">S5</xref> Tables.</p>
      <fig id="pone.0144578.g004" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0144578.g004</object-id>
        <label>Fig 4</label>
        <caption>
          <title>Average query time.</title>
          <p>The mean value calculated on the response times of each query in both sets is shown in two bar charts. Panel (A) shows the mean query times for the first set and panel (B) contains the values for the second set. The column assign to Virtuoso in the second set of query is empty because we could not record any data due to a problem in running large and very large queries.</p>
        </caption>
        <graphic xlink:href="pone.0144578.g004"/>
      </fig>
      <fig id="pone.0144578.g005" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0144578.g005</object-id>
        <label>Fig 5</label>
        <caption>
          <title>2D structure of query glycoepitopes.</title>
          <p>The 2-dimensional structure of three well-known glycoepitopes listed in <xref rid="pone.0144578.t001" ref-type="table">Table 1</xref>, namely (A) Lactosamine Type One. (B) Blood Group A. (C) Sialyl Lewis X is shown. Response time for each is shown in <xref rid="pone.0144578.t001" ref-type="table">Table 1</xref>.</p>
        </caption>
        <graphic xlink:href="pone.0144578.g005"/>
      </fig>
      <table-wrap id="pone.0144578.t001" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0144578.t001</object-id>
        <label>Table 1</label>
        <caption>
          <title>Comparison of average response query time for 3 glycoepitopes (see <xref rid="pone.0144578.g005" ref-type="fig">Fig 5</xref>).</title>
          <p>A comparison of the average query time of Property Graph and RDF triple store databases tested in this study (columns) for three well known epitopes (rows). SPARQL and Cypher queries for these glycoepitopes are provided in the <xref rid="pone.0144578.s001" ref-type="supplementary-material">S1 File</xref>.</p>
        </caption>
        <alternatives>
          <graphic id="pone.0144578.t001g" xlink:href="pone.0144578.t001"/>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" rowspan="1" colspan="1"/>
                <th align="left" rowspan="1" colspan="1">Virtuoso</th>
                <th align="left" rowspan="1" colspan="1">Neo4j</th>
                <th align="left" rowspan="1" colspan="1">Sesame</th>
                <th align="left" rowspan="1" colspan="1">Jena Fuseki</th>
                <th align="left" rowspan="1" colspan="1">Blazegraph</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <bold>Lactosamine Type One</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">0.114 s</td>
                <td align="left" rowspan="1" colspan="1">0.827 s</td>
                <td align="left" rowspan="1" colspan="1">0.814s</td>
                <td align="left" rowspan="1" colspan="1">0.941 s</td>
                <td align="left" rowspan="1" colspan="1">0.495 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <bold>Blood Group A</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">0.104 s</td>
                <td align="left" rowspan="1" colspan="1">0.945 s</td>
                <td align="left" rowspan="1" colspan="1">0.817 s</td>
                <td align="left" rowspan="1" colspan="1">0.869 s</td>
                <td align="left" rowspan="1" colspan="1">0.225 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <bold>Sialyl Lewis X</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">0.469 s</td>
                <td align="left" rowspan="1" colspan="1">1.012 s</td>
                <td align="left" rowspan="1" colspan="1">0.706 s</td>
                <td align="left" rowspan="1" colspan="1">1.970 s</td>
                <td align="left" rowspan="1" colspan="1">0.120 s</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
      </table-wrap>
      <p>Contrary to our initial intention, we have not fully tested Neo4j with SPARQL since the supporting third-party plugin runs approximately 2.4 to 27 times slower than Jena Fuseki [<xref rid="pone.0144578.ref035" ref-type="bibr">35</xref>], which is already the slowest RDF triple store in our benchmark. Dealing with a large disconnected graph is the key point of the discussion. Property Graphs are in general optimised for storing large connected graphs, for example friend-of-a-friend networks. The data structure is designed to efficiently perform a graph traversal that computes the shortest path between two nodes or retrieves all the friends of a friend. These conditions are not satisfied in our substructure search problem where the graph is a collection of small and disconnected graphs. For each query, the Property Graph database performs a full scan of the collection searching for a specific pattern. In other words the software engine has to search the root of each structure and start the traversal. This matches the use case guiding Neo4j’s implementation and design but not the specificity of glycan substructure search.</p>
      <p>In contrast, RDF is an information representation with different technological implementations. In most RDF triple stores, a single table of four columns holds one quad, i.e. triple plus graph identifier, per row. When a specific pattern is searched in the structure collection, the engine retrieves all the glycan entities and runs a traversal on each one. The process is sped up by the use of entity indices that allows the RDF engine to find the next structure more efficiently than a Property Graph database.</p>
      <p>In the end, graph pattern searching as implemented by RDF databases appears to match more closely the glycan substructure use case, which (in the absence of bugs) explains why this type of graph database performs well on our benchmark.</p>
      <p>All the results divided by specific methods can be found in supporting materials <xref rid="pone.0144578.s004" ref-type="supplementary-material">S3</xref>–<xref rid="pone.0144578.s008" ref-type="supplementary-material">S7</xref> Tables.</p>
    </sec>
    <sec id="sec013">
      <title>Qualitative Measures</title>
      <p>We provide qualitative measures concerning the query language, the ease of usage and the level of support. Although difficult to evaluate, these criteria are significant for choosing which type of technology to use. In the last part we underline some cross-platform issues related to the Virtuoso triple store.</p>
      <sec id="sec014">
        <title>Query language</title>
        <p>As described above RDF triple stores support the World Wide Web Consortium (W3C) endorsed SPARQL standard as the common query language. Consequently, the proposed (sub)structure search can be used by different RDF implementations without changing the application. In comparison, Property Graphs are language specific relying on proprietary languages such as Cypher (Neo4j), which potentially limits application portability and requires drastic change in the software when moving to alternative implementations.</p>
        <p>The W3C promotes the development of high-quality standards, making SPARQL a good choice for production software. In the case of Neo4j, there are add-on components that allow this Property Graph to be accessed as a triple store and potentially queried with SPARQL. As mentioned earlier, third-party contributors implemented these plugins and there is no guarantee of future development and support. In this study, we have not tested these plugins mainly because they have poor performance [<xref rid="pone.0144578.ref035" ref-type="bibr">35</xref>]. SPARQL is translated into a native object access API introducing latency in the query process and negatively impacting performance.</p>
        <p>Finally, providing a standardised query language gives RDF an important advantage, especially when the stability of the software technology used is crucial.</p>
      </sec>
      <sec id="sec015">
        <title>Level of support</title>
        <p>Although RDF and Property Graph databases were recently introduced, they have lively communities behind them showing the need for natively storing graph data. RDF and SPARQL standards have extensive support both from the W3C and the triple store vendor websites. Google groups and user groups are available for supporting the development and discussing issues for both technologies.</p>
        <p>The Property Graph community compared to that of RDF is fragmented due to the lack of standards in query language and API. Most of the support for Neo4j and Cypher comes from the online manual available on the company website. With each new release, the manual is updated and explains how to get the maximum performance out of this database. Despite a detailed documentation and multiple tutorials provided by the Neo4j site, the query language lacks support from other industry partners. Three different query languages were proposed for Neo4j in the past 11 years and the current Cypher may not be the last.</p>
        <p>The RDF community instead is led by the W3C that periodically updates the standard following community suggestions. All implementations of RDF triple store have to follow the W3C recommendations. The actual availability of multiple triple store implementations gives the RDF community more stability compared to Neo4J. Moreover, Open Data [<xref rid="pone.0144578.ref036" ref-type="bibr">36</xref>] and Linked Data movements are pushing the usage on RDF and SPARQL as a way of interconnecting online resources. In bioinformatics, some online resources such as UniProt [<xref rid="pone.0144578.ref037" ref-type="bibr">37</xref>] are already accessible through SPARQL. Regarding the four RDF triple stores tested in this study, each vendor website provides useful information about setting up the environment and tweak the settings.</p>
        <p>In the end, the possibility of connecting multiple online resources and the stability shown by the RDF community place RDF in a favourable position compared to Property Graph.</p>
      </sec>
      <sec id="sec016">
        <title>Ease of usage</title>
        <p>The embedded version of Neo4j databases can be easily added to a java project through a jar or a dependency. The API for building the graph is simple and intuitive. A great advantage is provided by the option of directly adding properties to nodes and edges.</p>
        <p>Theoretically speaking Neo4j and Property Graph databases fit our problem better than RDF, nevertheless they are not designed for multiple disconnected graphs in one instance. For this reason, the structure identifier had to be spread in all the nodes that belong to the same glycan. The duplication of information in the database implies an increased use of memory, which can be a problem for large datasets. This problem can be addressed but any corresponding solution requires extra nodes or properties leading to the same issue.</p>
        <p>RDF shows more flexibility in terms of provided API. Different java libraries like Jena or Sesame are available for connecting a java application with every triple store. Moreover, both libraries provide an in memory triple store that can be used for testing purposes. In our study we have used both libraries and there are well documented and easy to use. Virtuoso, like Blazegraph and Jena Fuseki, runs as a standalone server with a useful web interface for managing configuration parameters.</p>
        <p>The main obstacle to design substructure search software with RDF has been the ontology definition. Building up ontology for converting glycan structures into triples has been the most time consuming part. It involves reflecting on how to spread the information through different triples in a way that each piece is easy to retrieve and every software requirement is fulfilled. In contrast, defining a specific ontology for substructure search allows storing multiple disconnected graphs in the same database without losing performance.</p>
        <p>The shared API and SPARQL, the common query language, made it possible to run four different RDF triple stores without changing our application code but only choosing the right connection driver.</p>
        <p>In conclusion, Property Graph databases provide a ready to use solution for substructure search whereas RDF needs a specific ontology for tackling the problem. The development of an ontology can be challenging and time consuming but provides a more flexible solution.</p>
      </sec>
      <sec id="sec017">
        <title>Cross Platform Issues</title>
        <p>We tested both substructure search implementations under Linux and Windows environments with the same dataset of glycan structures.</p>
        <p>Using the Neo4j implementation hardly any difference in terms of query speed and size of results was observed. As Neo4j is implemented in Java, it behaves in the same way on all the systems that can run a Java Virtual Machine, the same situation for Sesame, Jena Fuseki and Blazegraph. However, the Virtuoso implementation produces different query results in different environments. The structures retrieved in the Windows environment were often a subset of the ones retrieved under Linux. In order to establish which answer was correct all results were checked manually notably all the structures retrieved in the Linux environment were correct and in agreement with the Neo4J results. This may mean that Virtuoso triple store possibly contains inconsistencies between the Windows and the Linux version.</p>
        <p>We have found a second obstacle during the test with the second query set. In this case, Linux and Windows implementations either crashed after query submission or they caused a crash or a freeze of the machine itself. We could not test the second query set despite several attempts to fix the problem. The novelty of RDF and Property Graph databases technologies can easily explain the presence of issues in the code. Only a large community of users over several years of development will help resolve this type of problems.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec018">
    <title>Conclusion</title>
    <p>In this paper, we delineated two strategies for substructure searching using new technologies like Property Graph and RDF triple store databases. Using two specific sets of substructures we document that in all the cases RDF has been faster than Property Graph and the gap is increasing with the size of the query. This led us to conclude that our model with Blazegraph RDF Triple Store reduces the query response time that remains close to one second in all the queries of both tested sets. Qualitative measures were discussed to provide the reader with additional criteria for selecting the appropriate technology. Overall, even though both technologies show advantages and disadvantages related to specific qualitative measures, the general lack of standards related to Property Graphs can play a key role in choosing between RDF triple stores and Property Graph databases. In the specific case of substructure search, Property Graphs were seen as a ready-to-use solution for prototyping software. However, when performance and interoperability between different resources is considered, an RDF triple store appears as a more efficient technology.</p>
    <p>This study lays the foundation to a possible web application for substructure search. The proposed model is destined to evolve and include a wider set of biological properties in future versions.</p>
  </sec>
  <sec sec-type="supplementary-material" id="sec019">
    <title>Supporting Information</title>
    <supplementary-material content-type="local-data" id="pone.0144578.s001">
      <label>S1 File</label>
      <caption>
        <title>Epitope queries.</title>
        <p>The file contains the SPARQL and Cypher queries for the epitopes of <xref rid="pone.0144578.t001" ref-type="table">Table 1</xref>.</p>
        <p>(TXT)</p>
      </caption>
      <media xlink:href="pone.0144578.s001.txt">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s002">
      <label>S1 Table</label>
      <caption>
        <title>Comparison results on the first set of query.</title>
        <p>Summary of the results obtained using RDF and Property Graph implementations.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s002.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s003">
      <label>S2 Table</label>
      <caption>
        <title>Comparison results on the second set of query.</title>
        <p>Summary of the results obtained using RDF and Property Graph implementations.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s003.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s004">
      <label>S3 Table</label>
      <caption>
        <title>Blazegraph results.</title>
        <p>Query response times obtain using the Blazegraph implementation. The query structure IDs refer to <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8</xref> and <xref rid="pone.0144578.s008" ref-type="supplementary-material">S7</xref> Tables.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s004.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s005">
      <label>S4 Table</label>
      <caption>
        <title>Jena Fuseki results.</title>
        <p>Query response times obtain using the Jena Fuseki implementation. The query structure IDs refer to <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8</xref> and <xref rid="pone.0144578.s008" ref-type="supplementary-material">S7</xref> Tables.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s005.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s006">
      <label>S5 Table</label>
      <caption>
        <title>Neo4j results.</title>
        <p>Query response times obtain using the Neo4j implementation. The query structure IDs refer to <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8</xref> and <xref rid="pone.0144578.s008" ref-type="supplementary-material">S7</xref> Tables.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s006.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s007">
      <label>S6 Table</label>
      <caption>
        <title>Sesame results.</title>
        <p>Query response times obtain using the Sesame implementation. The query structure IDs refer to <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8</xref> and <xref rid="pone.0144578.s008" ref-type="supplementary-material">S7</xref> Tables.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s007.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s008">
      <label>S7 Table</label>
      <caption>
        <title>Openlink Virtuso results.</title>
        <p>Query response times obtain using the Openlink Virtuoso implementation. The query structure IDs refer to <xref rid="pone.0144578.s009" ref-type="supplementary-material">S8 Table</xref> and S7 Table.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s008.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s009">
      <label>S8 Table</label>
      <caption>
        <title>First set of query structures.</title>
        <p>List of 128 query relevant biological epitopes used in this study. For completeness, we provide here the GlycoCT encoded structure, the 2d image (cfg format) and the size, in terms of residues, of each epitope. These structures are mainly very short and short according to the partition explained in the paper.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s009.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s010">
      <label>S9 Table</label>
      <caption>
        <title>Second set of query structures.</title>
        <p>List of 60 query epitopes randomly picked up from GlycomeDB. For completeness, we provide here the GlycoCT encoded structure and the size, in terms of residues, of each epitope. These structures are mainly large and very large according to the partition explained in the paper. For limiting the size of the file, 2d images are not provided for this specific dataset.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s010.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s011">
      <label>S10 Table</label>
      <caption>
        <title>Dataset composition.</title>
        <p>Further information about the size of the structures contained in the dataset.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s011.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0144578.s012">
      <label>S11 Table</label>
      <caption>
        <title>Monosaccharide and substituent.</title>
        <p>A complete list of all the monosaccharides and substituents used during the study.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0144578.s012.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>We thank Kiyoko Aoki-Kinoshita, Nobuyuki Aoki and Catherine A. Hayes for fruitful discussions and valuable advice.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="pone.0144578.ref001">
      <label>1</label>
      <mixed-citation publication-type="journal"><name><surname>Sharon</surname><given-names>N</given-names></name>. <article-title>IUPAC-IUB Joint Commission on Biochemical Nomenclature (JCBN). Nomenclature of glycoproteins, glycopeptides and peptidoglycans</article-title>. <source>Glycoconj J</source>. <year>1986</year>;<volume>3</volume>: <fpage>123</fpage>–<lpage>133</lpage>. <pub-id pub-id-type="doi">10.1007/BF01049370</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref002">
      <label>2</label>
      <mixed-citation publication-type="journal"><name><surname>Herget</surname><given-names>S</given-names></name>, <name><surname>Ranzinger</surname><given-names>R</given-names></name>, <name><surname>Maass</surname><given-names>K</given-names></name>, <name><surname>Lieth</surname><given-names>C-W</given-names></name> v. d. <article-title>GlycoCT—a unifying sequence format for carbohydrates</article-title>. <source>Carbohydr Res</source>. <year>2008</year>;<volume>343</volume>: <fpage>2162</fpage>–<lpage>2171</lpage>. <pub-id pub-id-type="doi">10.1016/j.carres.2008.03.011</pub-id>
<?supplied-pmid 18436199?><pub-id pub-id-type="pmid">18436199</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>Sahoo</surname><given-names>SS</given-names></name>, <name><surname>Thomas</surname><given-names>C</given-names></name>, <name><surname>Sheth</surname><given-names>A</given-names></name>, <name><surname>Henson</surname><given-names>C</given-names></name>, <name><surname>York</surname><given-names>WS</given-names></name>. <article-title>GLYDE-an expressive XML standard for the representation of glycan structure</article-title>. <source>Carbohydr Res</source>. <year>2005</year>;<volume>340</volume>: <fpage>2802</fpage>–<lpage>2807</lpage>.
<?supplied-pmid 16242678?><pub-id pub-id-type="pmid">16242678</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref004">
      <label>4</label>
      <mixed-citation publication-type="book"><name><surname>York</surname><given-names>William S.</given-names></name>, <name><surname>Kochut</surname><given-names>Krzysztof J.</given-names></name>, <name><surname>Miller</surname><given-names>John A.</given-names></name>, <name><surname>Sahoo</surname><given-names>Satya</given-names></name>, <name><surname>Thomas</surname><given-names>Christopher</given-names></name>, <name><surname>Henson</surname><given-names>Cory</given-names></name>. <source>GLYDE-II—GLYcan structural Data Exchange using Connection Tables</source>. Available: <ext-link ext-link-type="uri" xlink:href="http://glycomics.ccrc.uga.edu/GLYDE-II/GLYDE-description_v0.7.pdf">http://glycomics.ccrc.uga.edu/GLYDE-II/GLYDE-description_v0.7.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref005">
      <label>5</label>
      <mixed-citation publication-type="journal"><name><surname>McNaught</surname><given-names>AD</given-names></name>. <article-title>International Union of Pure and Applied Chemistry and International Union of Biochemistry and Molecular Biology. Joint Commission on Biochemical Nomenclature. Nomenclature of carbohydrates</article-title>. <source>Carbohydr Res</source>. <year>1997</year>;<volume>297</volume>: <fpage>1</fpage>–<lpage>92</lpage>.
<?supplied-pmid 9042704?><pub-id pub-id-type="pmid">9042704</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref006">
      <label>6</label>
      <mixed-citation publication-type="journal"><name><surname>Aoki</surname><given-names>KF</given-names></name>, <name><surname>Yamaguchi</surname><given-names>A</given-names></name>, <name><surname>Ueda</surname><given-names>N</given-names></name>, <name><surname>Akutsu</surname><given-names>T</given-names></name>, <name><surname>Mamitsuka</surname><given-names>H</given-names></name>, <name><surname>Goto</surname><given-names>S</given-names></name>, <etal>et al</etal><article-title>KCaM (KEGG Carbohydrate Matcher): a software tool for analyzing the structures of carbohydrate sugar chains</article-title>. <source>Nucleic Acids Res</source>. <year>2004</year>;<volume>32</volume>: <fpage>W267</fpage>–<lpage>272</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkh473</pub-id><?supplied-pmid 15215393?><pub-id pub-id-type="pmid">15215393</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref007">
      <label>7</label>
      <mixed-citation publication-type="journal"><name><surname>Kotera</surname><given-names>M</given-names></name>, <name><surname>Tabei</surname><given-names>Y</given-names></name>, <name><surname>Yamanishi</surname><given-names>Y</given-names></name>, <name><surname>Moriya</surname><given-names>Y</given-names></name>, <name><surname>Tokimatsu</surname><given-names>T</given-names></name>, <name><surname>Kanehisa</surname><given-names>M</given-names></name>, <etal>et al</etal><article-title>KCF-S: KEGG Chemical Function and Substructure for improved interpretability and prediction in chemical bioinformatics</article-title>. <source>BMC Syst Biol</source>. <year>2013</year>;<volume>7</volume>: <fpage>S2</fpage><pub-id pub-id-type="doi">10.1186/1752-0509-7-S6-S2</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref008">
      <label>8</label>
      <mixed-citation publication-type="journal"><name><surname>Tanaka</surname><given-names>K</given-names></name>, <name><surname>Aoki-Kinoshita</surname><given-names>KF</given-names></name>, <name><surname>Kotera</surname><given-names>M</given-names></name>, <name><surname>Sawaki</surname><given-names>H</given-names></name>, <name><surname>Tsuchiya</surname><given-names>S</given-names></name>, <name><surname>Fujita</surname><given-names>N</given-names></name>, <etal>et al</etal><article-title>WURCS: The Web3 Unique Representation of Carbohydrate Structures</article-title>. <source>J Chem Inf Model</source>. <year>2014</year>;<volume>54</volume>: <fpage>1558</fpage>–<lpage>1566</lpage>. <pub-id pub-id-type="doi">10.1021/ci400571e</pub-id><?supplied-pmid 24897372?><pub-id pub-id-type="pmid">24897372</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref009">
      <label>9</label>
      <mixed-citation publication-type="journal"><name><surname>Campbell</surname><given-names>MP</given-names></name>, <name><surname>Ranzinger</surname><given-names>R</given-names></name>, <name><surname>Lütteke</surname><given-names>T</given-names></name>, <name><surname>Mariethoz</surname><given-names>J</given-names></name>, <name><surname>Hayes</surname><given-names>CA</given-names></name>, <name><surname>Zhang</surname><given-names>J</given-names></name>, <etal>et al</etal><article-title>Toolboxes for a standardised and systematic study of glycans</article-title>. <source>BMC Bioinformatics</source>. <year>2014</year>;<volume>15</volume>: <fpage>S9</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-15-S1-S9</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref010">
      <label>10</label>
      <mixed-citation publication-type="journal"><name><surname>Varki</surname><given-names>A</given-names></name>, <name><surname>Cummings</surname><given-names>RD</given-names></name>, <name><surname>Esko</surname><given-names>JD</given-names></name>, <name><surname>Freeze</surname><given-names>HH</given-names></name>, <name><surname>Stanley</surname><given-names>P</given-names></name>, <name><surname>Marth</surname><given-names>JD</given-names></name>, <etal>et al</etal><article-title>Symbol nomenclature for glycan representation</article-title>. <source>PROTEOMICS</source>. <year>2009</year>;<volume>9</volume>: <fpage>5398</fpage>–<lpage>5399</lpage>. <pub-id pub-id-type="doi">10.1002/pmic.200900708</pub-id><?supplied-pmid 19902428?><pub-id pub-id-type="pmid">19902428</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref011">
      <label>11</label>
      <mixed-citation publication-type="book"><name><surname>Varki</surname><given-names>A</given-names></name>, editor. <source>Essentials of glycobiology</source>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>Cold Spring Harbor Lab. Press</publisher-name>; <year>1999</year>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref012">
      <label>12</label>
      <mixed-citation publication-type="journal"><name><surname>Doubet</surname><given-names>S</given-names></name>, <name><surname>Albersheim</surname><given-names>P</given-names></name>. <article-title>CarbBank</article-title>. <source>Glycobiology</source>. <year>1992</year>;<volume>2</volume>: <fpage>505</fpage><?supplied-pmid 1472756?><pub-id pub-id-type="pmid">1472756</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref013">
      <label>13</label>
      <mixed-citation publication-type="journal"><name><surname>Ranzinger</surname><given-names>R</given-names></name>, <name><surname>Herget</surname><given-names>S</given-names></name>, <name><surname>von der Lieth</surname><given-names>C-W</given-names></name>, <name><surname>Frank</surname><given-names>M</given-names></name>. <article-title>GlycomeDB—a unified database for carbohydrate structures</article-title>. <source>Nucleic Acids Res</source>. <year>2011</year>;<volume>39</volume>: <fpage>D373</fpage>–<lpage>D376</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkq1014</pub-id><?supplied-pmid 21045056?><pub-id pub-id-type="pmid">21045056</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref014">
      <label>14</label>
      <mixed-citation publication-type="journal"><name><surname>Campbell</surname><given-names>MP</given-names></name>, <name><surname>Peterson</surname><given-names>R</given-names></name>, <name><surname>Mariethoz</surname><given-names>J</given-names></name>, <name><surname>Gasteiger</surname><given-names>E</given-names></name>, <name><surname>Akune</surname><given-names>Y</given-names></name>, <name><surname>Aoki-Kinoshita</surname><given-names>KF</given-names></name>, <etal>et al</etal><article-title>UniCarbKB: building a knowledge platform for glycoproteomics</article-title>. <source>Nucleic Acids Res</source>. <year>2014</year>;<volume>42</volume>: <fpage>D215</fpage>–<lpage>221</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkt1128</pub-id><?supplied-pmid 24234447?><pub-id pub-id-type="pmid">24234447</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref015">
      <label>15</label>
      <mixed-citation publication-type="journal"><name><surname>Toukach</surname><given-names>PV</given-names></name>, <name><surname>Egorova</surname><given-names>KS</given-names></name>. <article-title>Carbohydrate structure database merged from bacterial, archaeal, plant and fungal parts</article-title>. <source>Nucleic Acids Res</source>. <year>2015</year>; gkv840. <pub-id pub-id-type="doi">10.1093/nar/gkv840</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref016">
      <label>16</label>
      <mixed-citation publication-type="journal"><name><surname>Ranzinger</surname><given-names>R</given-names></name>, <name><surname>Aoki-Kinoshita</surname><given-names>KF</given-names></name>, <name><surname>Campbell</surname><given-names>MP</given-names></name>, <name><surname>Kawano</surname><given-names>S</given-names></name>, <name><surname>Lütteke</surname><given-names>T</given-names></name>, <name><surname>Okuda</surname><given-names>S</given-names></name>, <etal>et al</etal><article-title>GlycoRDF: an ontology to standardize glycomics data in RDF</article-title>. <source>Bioinforma Oxf Engl</source>. <year>2015</year>;<volume>31</volume>: <fpage>919</fpage>–<lpage>925</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btu732</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref017">
      <label>17</label>
      <mixed-citation publication-type="journal"><name><surname>Aoki-Kinoshita</surname><given-names>KF</given-names></name>, <name><surname>Bolleman</surname><given-names>J</given-names></name>, <name><surname>Campbell</surname><given-names>MP</given-names></name>, <name><surname>Kawano</surname><given-names>S</given-names></name>, <name><surname>Kim</surname><given-names>J-D</given-names></name>, <name><surname>Lütteke</surname><given-names>T</given-names></name>, <etal>et al</etal><article-title>Introducing glycomics data into the Semantic Web</article-title>. <source>J Biomed Semant</source>. <year>2013</year>;<volume>4</volume>: <fpage>39</fpage><pub-id pub-id-type="doi">10.1186/2041-1480-4-39</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref018">
      <label>18</label>
      <mixed-citation publication-type="book"><name><surname>Erling</surname><given-names>O</given-names></name>, <name><surname>Mikhailov</surname><given-names>I</given-names></name>. <chapter-title>RDF Support in the Virtuoso DBMS</chapter-title> In: <name><surname>Pellegrini</surname><given-names>T</given-names></name>, <name><surname>Auer</surname><given-names>S</given-names></name>, <name><surname>Tochtermann</surname><given-names>K</given-names></name>, <name><surname>Schaffert</surname><given-names>S</given-names></name>, editors. <source>Networked Knowledge—Networked Media</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2009</year> pp. <fpage>7</fpage>–<lpage>24</lpage>. Available: <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/978-3-642-02184-8_2">http://link.springer.com/10.1007/978-3-642-02184-8_2</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref019">
      <label>19</label>
      <mixed-citation publication-type="book"><name><surname>Broekstra</surname><given-names>J</given-names></name>, <name><surname>Kampman</surname><given-names>A</given-names></name>, <name><surname>van Harmelen</surname><given-names>F</given-names></name>. <chapter-title>Sesame: A Generic Architecture for Storing and Querying RDF and RDF Schema</chapter-title> In: <name><surname>Horrocks</surname><given-names>I</given-names></name>, <name><surname>Hendler</surname><given-names>J</given-names></name>, editors. <source>The Semantic Web—ISWC 2002</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2002</year> pp. <fpage>54</fpage>–<lpage>68</lpage>. Available: <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/3-540-48005-6_7">http://link.springer.com/10.1007/3-540-48005-6_7</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref020">
      <label>20</label>
      <mixed-citation publication-type="other">Apache Jena [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="https://jena.apache.org/">https://jena.apache.org/</ext-link>. Accessed 29 Oct 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref021">
      <label>21</label>
      <mixed-citation publication-type="other">Blazegraph | Blazegraph is ultra-scalable, high-performance graph database with support for the Blueprints and RDF/SPARQL APIs. It supports high availability, scale-out, and GPU acceleration. [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="https://www.blazegraph.com/">https://www.blazegraph.com/</ext-link>. Accessed 29 Oct 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref022">
      <label>22</label>
      <mixed-citation publication-type="journal"><name><surname>Cummings</surname><given-names>RD</given-names></name>. <article-title>The repertoire of glycan determinants in the human glycome</article-title>. <source>Mol Biosyst</source>. <year>2009</year>;<volume>5</volume>: <fpage>1087</fpage><pub-id pub-id-type="doi">10.1039/b907931a</pub-id><?supplied-pmid 19756298?><pub-id pub-id-type="pmid">19756298</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref023">
      <label>23</label>
      <mixed-citation publication-type="journal"><name><surname>Aoki-Kinoshita</surname><given-names>KF</given-names></name>. [<article-title>Introduction to glycome informatics</article-title>]. <source>Seikagaku</source>. <year>2008</year>;<volume>80</volume>: <fpage>1038</fpage>–<lpage>1041</lpage>.
<?supplied-pmid 19086411?><pub-id pub-id-type="pmid">19086411</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref024">
      <label>24</label>
      <mixed-citation publication-type="other">Klyne G, Carroll J. Resource Description Framework (RDF): Concepts and Abstract Syntax [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="http://www.w3.org/TR/rdf-concepts/">http://www.w3.org/TR/rdf-concepts/</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref025">
      <label>25</label>
      <mixed-citation publication-type="other">What is a Graph Database? In: Neo4j Graph Database [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="http://neo4j.com/developer/graph-database/">http://neo4j.com/developer/graph-database/</ext-link>. Accessed 2 Jul 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref026">
      <label>26</label>
      <mixed-citation publication-type="other">Triplestore [Internet]. Wikipedia, the free encyclopedia. 2015. Available: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/w/index.php?title=Triplestore&amp;oldid=666522393">https://en.wikipedia.org/w/index.php?title=Triplestore&amp;oldid=666522393</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref027">
      <label>27</label>
      <mixed-citation publication-type="book"><name><surname>Angles</surname><given-names>R</given-names></name>, <name><surname>Prat-Pérez</surname><given-names>A</given-names></name>, <name><surname>Dominguez-Sal</surname><given-names>D</given-names></name>, <name><surname>Larriba-Pey</surname><given-names>J-L</given-names></name>. <chapter-title>Benchmarking Database Systems for Social Network Applications</chapter-title><source>First International Workshop on Graph Data Management Experiences and Systems</source>. <publisher-loc>New York, NY, USA</publisher-loc>: <publisher-name>ACM</publisher-name>; <year>2013</year> pp. <fpage>15:1</fpage>–<lpage>15:7</lpage>. <pub-id pub-id-type="doi">10.1145/2484425.2484440</pub-id>
</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref028">
      <label>28</label>
      <mixed-citation publication-type="other">SPARQL Query Language for RDF [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="http://www.w3.org/TR/rdf-sparql-query/">http://www.w3.org/TR/rdf-sparql-query/</ext-link>. Accessed 2 Jul 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref029">
      <label>29</label>
      <mixed-citation publication-type="other">What is Cypher? - - The Neo4j Manual v2.2.3 [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="http://neo4j.com/docs/stable/cypher-introduction.html">http://neo4j.com/docs/stable/cypher-introduction.html</ext-link>. Accessed 2 Jul 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref030">
      <label>30</label>
      <mixed-citation publication-type="journal"><name><surname>Von der Lieth</surname><given-names>C-W</given-names></name>, <name><surname>Freire</surname><given-names>AA</given-names></name>, <name><surname>Blank</surname><given-names>D</given-names></name>, <name><surname>Campbell</surname><given-names>MP</given-names></name>, <name><surname>Ceroni</surname><given-names>A</given-names></name>, <name><surname>Damerell</surname><given-names>DR</given-names></name>, <etal>et al</etal><article-title>EUROCarbDB: An open-access platform for glycoinformatics</article-title>. <source>Glycobiology</source>. <year>2011</year>;<volume>21</volume>: <fpage>493</fpage>–<lpage>502</lpage>. <pub-id pub-id-type="doi">10.1093/glycob/cwq188</pub-id><?supplied-pmid 21106561?><pub-id pub-id-type="pmid">21106561</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref031">
      <label>31</label>
      <mixed-citation publication-type="journal"><name><surname>Horlacher</surname><given-names>O</given-names></name>, <name><surname>Nikitin</surname><given-names>F</given-names></name>, <name><surname>Alocci</surname><given-names>D</given-names></name>, <name><surname>Mariethoz</surname><given-names>J</given-names></name>, <name><surname>Müller</surname><given-names>M</given-names></name>, <name><surname>Lisacek</surname><given-names>F</given-names></name>. <article-title>MzJava: An open source library for mass spectrometry data processing</article-title>. <source>J Proteomics</source>. <pub-id pub-id-type="doi">10.1016/j.jprot.2015.06.013</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0144578.ref032">
      <label>32</label>
      <mixed-citation publication-type="other">SPARQL 1.1 Query Language [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="http://www.w3.org/TR/sparql11-query/">http://www.w3.org/TR/sparql11-query/</ext-link>. Accessed 3 Jul 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref033">
      <label>33</label>
      <mixed-citation publication-type="book"><name><surname>Holzschuher</surname><given-names>F</given-names></name>, <name><surname>Peinl</surname><given-names>R</given-names></name>. <source>Performance of graph query languages: comparison of cypher, gremlin and native access in Neo4j</source>. <publisher-name>ACM Press</publisher-name>; <year>2013</year> p. <fpage>195</fpage>
<pub-id pub-id-type="doi">10.1145/2457317.2457351</pub-id>
</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref034">
      <label>34</label>
      <mixed-citation publication-type="book"><name><surname>Kawasaki</surname><given-names>T</given-names></name>, <name><surname>Nakao</surname><given-names>H</given-names></name>, <name><surname>Tominaga</surname><given-names>T</given-names></name>. <chapter-title>GlycoEpitope: A Database of Carbohydrate Epitopes and Antibodies</chapter-title> In: <name><surname>Taniguchi</surname><given-names>N</given-names></name>, <name><surname>Suzuki</surname><given-names>A</given-names></name>, <name><surname>Ito</surname><given-names>Y</given-names></name>, <name><surname>Narimatsu</surname><given-names>H</given-names></name>, <name><surname>Kawasaki</surname><given-names>T</given-names></name>, <name><surname>Hase</surname><given-names>S</given-names></name>, editors. <source>Experimental Glycoscience</source>. <publisher-loc>Tokyo</publisher-loc>: <publisher-name>Springer Japan</publisher-name>; <year>2008</year> pp. <fpage>429</fpage>–<lpage>431</lpage>. Available: <ext-link ext-link-type="uri" xlink:href="http://www.springerlink.com/index/10.1007/978-4-431-77922-3_104">http://www.springerlink.com/index/10.1007/978-4-431-77922-3_104</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref035">
      <label>35</label>
      <mixed-citation publication-type="other">SPARQL and OWL 2 Inference for Neo4j : Research Group for Communication Systems [Internet]. Available: <ext-link ext-link-type="uri" xlink:href="https://comsys.informatik.uni-kiel.de/res/sparql-and-owl-2-inference-for-neo4j/">https://comsys.informatik.uni-kiel.de/res/sparql-and-owl-2-inference-for-neo4j/</ext-link>. Accessed 2 Nov 2015.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref036">
      <label>36</label>
      <mixed-citation publication-type="book"><name><surname>Auer</surname><given-names>S</given-names></name>, <name><surname>Bizer</surname><given-names>C</given-names></name>, <name><surname>Kobilarov</surname><given-names>G</given-names></name>, <name><surname>Lehmann</surname><given-names>J</given-names></name>, <name><surname>Cyganiak</surname><given-names>R</given-names></name>, <name><surname>Ives</surname><given-names>Z</given-names></name>. <chapter-title>DBpedia: A Nucleus for a Web of Open Data</chapter-title> In: <name><surname>Aberer</surname><given-names>K</given-names></name>, <name><surname>Choi</surname><given-names>K-S</given-names></name>, <name><surname>Noy</surname><given-names>N</given-names></name>, <name><surname>Allemang</surname><given-names>D</given-names></name>, <name><surname>Lee</surname><given-names>K-I</given-names></name>, <name><surname>Nixon</surname><given-names>L</given-names></name>, <etal>et al</etal>, editors. <source>The Semantic Web</source>. <publisher-name>Springer Berlin</publisher-name>
<publisher-loc>Heidelberg</publisher-loc>; <year>2007</year> pp. <fpage>722</fpage>–<lpage>735</lpage>. Available: <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/chapter/10.1007/978-3-540-76298-0_52">http://link.springer.com/chapter/10.1007/978-3-540-76298-0_52</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0144578.ref037">
      <label>37</label>
      <mixed-citation publication-type="journal"><collab>The UniProt Consortium</collab>. <article-title>UniProt: a hub for protein information</article-title>. <source>Nucleic Acids Res</source>. <year>2015</year>;<volume>43</volume>: <fpage>D204</fpage>–<lpage>D212</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gku989</pub-id><?supplied-pmid 25348405?><pub-id pub-id-type="pmid">25348405</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
