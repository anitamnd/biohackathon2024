<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5870853</article-id>
    <article-id pub-id-type="pmid">28165109</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btx057</article-id>
    <article-id pub-id-type="publisher-id">btx057</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>cyvcf2: fast, flexible variant analysis with Python</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Pedersen</surname>
          <given-names>Brent S</given-names>
        </name>
        <xref ref-type="corresp" rid="btx057-cor1"/>
        <!--<email>bpederse@gmail.com</email>-->
        <xref ref-type="aff" rid="btx057-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Quinlan</surname>
          <given-names>Aaron R</given-names>
        </name>
        <xref ref-type="corresp" rid="btx057-cor1"/>
        <!--<email>aaronquinlan@gmail.com</email>-->
        <xref ref-type="aff" rid="btx057-aff1"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Hancock</surname>
          <given-names>John</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btx057-aff1">Department of Human Genetics, Department of Biomedical Informatics, and USTAR Center for Genetic Discovery, University of Utah, Salt Lake City, UT, USA</aff>
    <author-notes>
      <corresp id="btx057-cor1">To whom correspondence should be addressed. Email: <email>bpederse@gmail.com</email> or <email>aaronquinlan@gmail.com</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>15</day>
      <month>6</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2017-02-06">
      <day>06</day>
      <month>2</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>06</day>
      <month>2</month>
      <year>2017</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>33</volume>
    <issue>12</issue>
    <fpage>1867</fpage>
    <lpage>1869</lpage>
    <history>
      <date date-type="received">
        <day>09</day>
        <month>12</month>
        <year>2016</year>
      </date>
      <date date-type="rev-recd">
        <day>13</day>
        <month>1</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>28</day>
        <month>1</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2017. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2017</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by-nc/4.0/" license-type="cc-by-nc">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btx057.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="SA1">
        <title>Motivation</title>
        <p>Variant call format (VCF) files document the genetic variation observed after DNA sequencing, alignment and variant calling of a sample cohort. Given the complexity of the VCF format as well as the diverse variant annotations and genotype metadata, there is a need for fast, flexible methods enabling intuitive analysis of the variant data within VCF and BCF files.</p>
      </sec>
      <sec id="SA2">
        <title>Results</title>
        <p>We introduce <italic>cyvcf2</italic>, a Python library and software package for fast parsing and querying of VCF and BCF files and illustrate its speed, simplicity and utility.</p>
      </sec>
      <sec id="SA3">
        <title>Availability and Implementation</title>
        <p><italic>cyvcf2</italic> is available from <ext-link ext-link-type="uri" xlink:href="https://github.com/brentp/cyvcf2">https://github.com/brentp/cyvcf2</ext-link> under the MIT license and from common python package managers. Detailed documentation is available at <ext-link ext-link-type="uri" xlink:href="http://brentp.github.io/cyvcf2/">http://brentp.github.io/cyvcf2/</ext-link></p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">US National Human Genome Research Institute award to ARQ</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <p>The VCF format (<xref rid="btx057-B3" ref-type="bibr">Danecek <italic>et al.</italic>, 2011</xref>) is the standard for representing genetic variation observed in DNA sequencing studies. The strength of the VCF format is its ability to represent the location of a variant, the genotypes of the sequenced individuals at each locus, as well as extensive variant metadata. Furthermore, the VCF format provided a substantial advance for the research community, as it follows a rigorous format specification that enables direct comparison of results from multiple studies and facilitates reproducible research. However, the consequence of this flexibility and the rather complicated specification of the VCF format, is that researchers require powerful software libraries to access, query and manipulate variants from VCF files.</p>
    <p>While bcftools (<xref rid="btx057-B4" ref-type="bibr">Li, 2011</xref>) provides a high performance programming interface in the C programming language, as well as a powerful command line interface, developing custom analyses requires either expertise in C, or combinations of multiple options and sub-commands from the bcftools package. Furthermore, some analyses (e.g. the first example below) are not yet possible with the bcftools framework. In contrast, pysam (unpublished) and pyvcf provide researchers with direct access to VCF files through Python programming libraries. However, while they are relatively simple to use, these libraries lack the speed required to rapidly manipulate and prioritize variants in VCF files from large-scale studies (e.g. whole-genome sequencing) that often yield tens of millions of genetic variants and many individual genotypes per variant.</p>
  </sec>
  <sec>
    <title>2 Approach</title>
    <p>In developing <italic>cyvcf2</italic>, we sought to create a high performance library that also provides researchers with an intuitive Python interface for manipulating VCF files. <italic>Cyvcf2</italic> provides the ability to filter variants based upon variant annotation, interrogate the details of each sample’s genotype information, and rapidly compute both variant and sample-level statistics. Computational performance is enabled by leveraging <italic>htslib</italic>, an efficient software library for accessing VCF files using the C programming language. Cyvcf2 wraps <italic>htslib</italic> for use within Python programming interface with Cython (<xref rid="btx057-B1" ref-type="bibr">Behnel <italic>et al.</italic>, 2011</xref>). Cython provides the ability to write performance critical aspects of <italic>cyvcf2</italic> in C, while exposing an interface that is familiar to python programmers.</p>
    <p><italic>Cyvcf2</italic> strives to provide the user with the ability to access every aspect of the VCF specification. The most commonly accessed variant properties are provided as Python attributes. For example, each variant in a VCF file can be accessed through a Python iterator and each variant object has a <italic>start</italic> attribute that returns the 0-based start coordinate. Similarly, the <italic>end</italic> attribute returns the end of the variant and is properly computed for structural variants, even when that requires consulting the <italic>END</italic> defined in the INFO field of the VCF record.</p>
    <p>When accessing the sample genotype data (e.g. the predicted genotype, observed sequencing depth and genotype quality) for each variant, cyvcf2 automatically returns a high performance numpy (<xref rid="btx057-B5" ref-type="bibr">Van Der Walt <italic>et al.</italic>, 2011</xref>) array, which enables efficient manipulation and access of all samples, a single sample, or specific subsets of samples, even when the VCF or BCF file includes thousands of individuals.</p>
  </sec>
  <sec>
    <title>3 Usage</title>
    <p>In an effort to demonstrate the power and performance of <italic>cyvcf2</italic>, the following sections highlight typical VCF analyses and illustrate commonly used features in <italic>cyvcf2</italic>. Other examples and further details of the <italic>cyvcf2</italic> library can be found at <ext-link ext-link-type="uri" xlink:href="http://brentp.github.io/cyvcf2/">http://brentp.github.io/cyvcf2/</ext-link>.</p>
    <sec>
      <title>3.1 Counting heterozygous genotypes per sample</title>
      <p>Imagine one is interested in counting the number of high quality heterozygous genotypes for each sample in a given locus of interest. The following example first opens a VCF file (line 3), then creates an iterator of each variant that overlaps our locus of interest (line 5). We ignore any INDEL (line 6) or low quality (i.e. Phred-scaled quality less than 10; line 7) variant. We then extract a numpy array of the observed sequencing depths for each sample (line 9) and increment the counts if each sample is a heterozygote and has an alternate depth greater than 10. Alternate depths are stored in the second column of the depths array, while the observed depth for the reference allele is stored in the first column. For convenience, <italic>cyvcf2</italic> also provides keywords for each of the three diploid genotypes: homozygous for the reference allele (HOM_REF), heterozygous (HET) and homozygous for the alternate allele (HOM_ALT), as well as an unknown genotype (UNKNOWN). Finally, in line 10, we report, for each sample, the number of heterozygous SNP genotypes having an alternate depth greater than 10 observed in the locus of interest.</p>
      <p>
        <boxed-text id="btx057-BOX1" position="float" orientation="portrait">
          <caption>
            <p><bold>Listing 1.</bold> Counting heterozygous genotypes per sample in an indexed VCF file</p>
          </caption>
          <p>
            <monospace>1 <bold>import</bold> cyvcf2</monospace>
          </p>
          <p>
            <monospace>2 <bold>import</bold> numpy as np</monospace>
          </p>
          <p>
            <monospace>3 vcf = cyvcf2.VCF(path)</monospace>
          </p>
          <p>
            <monospace>4 sample_counts = np.zeros(<bold>len</bold>(vcf.samples), dtype=<bold>float</bold>)</monospace>
          </p>
          <p>
            <monospace>5 <bold>for</bold> variant <bold>in</bold> vcf(“chr1:229993-329993”):</monospace>
          </p>
          <p>
            <monospace>6 <bold>if</bold> variant.is_indel: <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>7 <bold>if</bold> variant.QUAL &lt; 10: <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>8 depths = variant.<bold>format</bold>(“AD”)</monospace>
          </p>
          <p>
            <monospace>9 sample_counts[(depths[:, 1] &gt; 10) &amp; (variant.gt_types 
 == vcf.HET)] + = 1</monospace>
          </p>
          <p>
            <monospace>10 <bold>print</bold>(<bold>zip</bold>(vcf.samples, sample_counts))</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
    <sec>
      <title>3.2 Finding <italic>de novo</italic> mutations in a trio</title>
      <p>Searching for <italic>de novo</italic> mutations (DNM) is common in studies of Mendelian disease. The following example demonstrates how <italic>cyvcf2</italic> can be used to screen for <italic>de novo</italic> mutations in a family trio. This example assumes that the proband, mother and father are the first, second and third samples in the VCF file (line 8). A common source of false positive DNM predictions is a lack of sequencing depth in one or both parents to allow the detection of an allele being transmitted from parent to child. Therefore, we require at least 10 aligned sequences for each family member at each candidate DNM (line 511). Next, we require the mother and father to have homozygous genotypes, whereas the child should have a heterozygous genotype, thereby indicating a potential DNM (line 13). Lastly, to further reduce false positive DNMs, we wish to ignore any DNM candidate in which the alternate allele was observed on one or more aligned sequences from the mother or father at the given locus (line 14).</p>
      <p>
        <boxed-text id="btx057-BOX2" position="float" orientation="portrait">
          <caption>
            <p><bold>Listing 2.</bold> Calling De novo mutations</p>
          </caption>
          <p>
            <monospace>1 <bold>import</bold> numpy as np</monospace>
          </p>
          <p>
            <monospace>2 <bold>import</bold> sys</monospace>
          </p>
          <p>
            <monospace>3 <bold>from</bold> scipy.stats <bold>import</bold> binom_test</monospace>
          </p>
          <p>
            <monospace>4 path = sys.argv[1]</monospace>
          </p>
          <p>
            <monospace>5 </monospace>
          </p>
          <p>
            <monospace>6 <bold>import</bold> cyvcf2</monospace>
          </p>
          <p>
            <monospace>7 vcf = cyvcf2.VCF(path)</monospace>
          </p>
          <p>
            <monospace>8 PRO, MOM, DAD = <bold>range</bold>(3)</monospace>
          </p>
          <p>
            <monospace>9 <bold>for</bold> v in vcf:</monospace>
          </p>
          <p>
            <monospace>10 <bold>if</bold> v.QUAL &lt; 10: <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>11 <bold>if</bold> np.<bold>any</bold>(v.gt_depths &lt; 10): <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>12 refs, alts = v.gt_ref_depths, v.gt_alt_depths</monospace>
          </p>
          <p>
            <monospace>13 <bold>if not all</bold>(v.gt_types == [vcf.HET, vcf.HOM_REF, vcf.HOM_REF]): <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>14 <bold>if</bold> alts[MOM] &gt; 1 <bold>or</bold> alts[DAD] &gt; 1: <bold>continue</bold></monospace>
          </p>
          <p>
            <monospace>15   <bold>print</bold>(“%s\t%d\t%s\t%s\t%s” % (v.CHROM, v.start, v.REF, “,”.join(v.ALT), “,”.join(v.gt_bases)))</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
    <sec>
      <title>3.3 Performance</title>
      <p>While simplicity and flexibility were important design goals, we also sought to achieve higher performance than existing Python-based VCF processing libraries. To demonstrate <italic>cyvcf2</italic>’s speed, we measured the running time required by <italic>cyvcf2</italic>, bcftools (<xref rid="btx057-B4" ref-type="bibr">Li, 2011</xref>), pysam (unpublished; pysam.readthedocs.io) and pyvcf (unpublished; pyvcf.readthedocs.io) to analyze all variants in the VCF file for chromosome 22 from the 1000 Genomes Project (<xref rid="btx057-B2" ref-type="bibr">Consortium <italic>et al.</italic>, 2015</xref>), which includes genotypes for 2,504 samples. We developed a script for each method (see <ext-link ext-link-type="uri" xlink:href="https://github.com/brentp/cyvcf2/tree/master/scripts">https://github.com/brentp/cyvcf2/tree/master/scripts</ext-link> for details) to count the number of bi-allelic variants with a quality of at least 20 and an alternate allele frequency less than or equal to 0.05. Since both bcftools and <italic>cyvcf2</italic> leverage <italic>htslib</italic>, <italic>cyvcf2</italic> achieves processing speeds that are equivalent <italic>bcftools</italic> (<xref rid="btx057-T1" ref-type="table">Table 1</xref>). Furthermore, <italic>cyvcf</italic> is 6.9 and 168.1 times faster than pysam and pyvcf, respectively. We emphasize <italic>cyvcf2</italic>’s performance since it is not restricted to a limited set of pre-defined filters and operations. Cyvcf2 offers full programmatic flexibility that can come with minimal performance penalties owing to the careful design. In particular, the underlying sample genotype data are exposed to the user as a <italic>numpy</italic> (<xref rid="btx057-B5" ref-type="bibr">Van Der Walt <italic>et al.</italic>, 2011</xref>) array that uses the original memory allocated by <italic>htslib</italic>. This speed and memory efficiency, along with the extreme flexibility offered by Python, are central to the inherent utility of <italic>cyvcf2</italic>.
<table-wrap id="btx057-T1" orientation="portrait" position="float"><label>Table 1.</label><caption><p>Time required to filter the 1000 genomes VCF for chromosome 22 using a single Intel Xeon CPU E5-26900@2.90GHz</p></caption><table frame="hsides" rules="groups"><colgroup span="1"><col valign="top" align="left" span="1"/><col valign="top" align="center" span="1"/><col valign="top" align="center" span="1"/></colgroup><thead><tr><th rowspan="1" colspan="1">Name</th><th rowspan="1" colspan="1">Time (s)</th><th rowspan="1" colspan="1">Ratio</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">bcftools</td><td rowspan="1" colspan="1">224</td><td rowspan="1" colspan="1">0.9</td></tr><tr><td rowspan="1" colspan="1">cyvcf2</td><td rowspan="1" colspan="1">248.6</td><td rowspan="1" colspan="1">1</td></tr><tr><td rowspan="1" colspan="1">pysam</td><td rowspan="1" colspan="1">1711.5</td><td rowspan="1" colspan="1">6.89</td></tr><tr><td rowspan="1" colspan="1">pyvcf</td><td rowspan="1" colspan="1">41786.6</td><td rowspan="1" colspan="1">168.1</td></tr></tbody></table></table-wrap></p>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>We have developed <italic>cyvcf2</italic>, a fast, flexible and efficient software package that enables simple yet powerful manipulations of VCF files. Its speed and analytical power offer research functionality to investigators studying genetic variation in diverse contexts and species.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This research was supported by a US National Human Genome Research Institute award to ARQ (NIH R01HG006693).</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
</body>
<back>
  <ref-list>
    <title>References</title>
    <ref id="btx057-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Behnel</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>Cython: the best of both worlds</article-title>. <source>Comput. Sci. Eng</source>., <volume>13</volume>, <fpage>31</fpage>–<lpage>39</lpage>.</mixed-citation>
    </ref>
    <ref id="btx057-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Consortium</surname><given-names>G.P.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>A global reference for human genetic variation</article-title>. <source>Nature</source>, <volume>526</volume>, <fpage>68</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">26432245</pub-id></mixed-citation>
    </ref>
    <ref id="btx057-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Danecek</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>The variant call format and vcftools</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>2156</fpage>–<lpage>2158</lpage>.<pub-id pub-id-type="pmid">21653522</pub-id></mixed-citation>
    </ref>
    <ref id="btx057-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H.</given-names></name></person-group> (<year>2011</year>) 
<article-title>A statistical framework for SNP calling, mutation discovery, association mapping and population genetical parameter estimation from sequencing data</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>2987</fpage>–<lpage>2993</lpage>.<pub-id pub-id-type="pmid">21903627</pub-id></mixed-citation>
    </ref>
    <ref id="btx057-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Van Der Walt</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>The numpy array: a structure for efficient numerical computation</article-title>. <source>Comput. Sci. Eng</source>., <volume>13</volume>, <fpage>22</fpage>–<lpage>30</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
