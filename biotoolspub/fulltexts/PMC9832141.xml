<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Sci Rep</journal-id>
    <journal-id journal-id-type="iso-abbrev">Sci Rep</journal-id>
    <journal-title-group>
      <journal-title>Scientific Reports</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2045-2322</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9832141</article-id>
    <article-id pub-id-type="pmid">36627356</article-id>
    <article-id pub-id-type="publisher-id">27302</article-id>
    <article-id pub-id-type="doi">10.1038/s41598-022-27302-8</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>NRN-EZ: an application to streamline biophysical modeling of synaptic integration using NEURON</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Cobb</surname>
          <given-names>Evan A. W.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Petroccione</surname>
          <given-names>Maurice A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Scimemi</surname>
          <given-names>Annalisa</given-names>
        </name>
        <address>
          <email>scimemia@gmail.com</email>
          <email>ascimemi@albany.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.265850.c</institution-id><institution-id institution-id-type="ISNI">0000 0001 2151 7947</institution-id><institution>Department of Biology, </institution><institution>SUNY Albany, </institution></institution-wrap>1400 Washington Avenue, Albany, NY 12222-0100 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.265850.c</institution-id><institution-id institution-id-type="ISNI">0000 0001 2151 7947</institution-id><institution>Department of Computer Science, </institution><institution>SUNY Albany, </institution></institution-wrap>1400 Washington Avenue, Albany, NY 12222-0100 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>10</day>
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>10</day>
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>13</volume>
    <elocation-id>464</elocation-id>
    <history>
      <date date-type="received">
        <day>7</day>
        <month>8</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>29</day>
        <month>12</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">One of the fundamental goals in neuroscience is to determine how the brain processes information and ultimately controls the execution of complex behaviors. Over the past four decades, there has been a steady growth in our knowledge of the morphological and functional diversity of neurons, the building blocks of the brain. These cells clearly differ not only for their anatomy and ion channel distribution, but also for the type, strength, location, and temporal pattern of activity of the many synaptic inputs they receive. Compartmental modeling programs like NEURON have become widely used in the neuroscience community to address a broad range of research questions, including how neurons integrate synaptic inputs and propagate information through complex neural networks. One of the main strengths of NEURON is its ability to incorporate user-defined information about the realistic morphology and biophysical properties of different cell types. Although the graphical user interface of the program can be used to run initial exploratory simulations, introducing a stochastic representation of synaptic weights, locations and activation times typically requires users to develop their own codes, a task that can be overwhelming for some beginner users. Here we describe NRN-EZ, an interactive application that allows users to specify complex patterns of synaptic input activity that can be integrated as part of NEURON simulations. Through its graphical user interface, NRN-EZ aims to ease the learning curve to run computational models in NEURON, for users that do not necessarily have a computer science background.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Neural circuits</kwd>
      <kwd>Neuroscience</kwd>
      <kwd>Mathematics and computing</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000076</institution-id>
            <institution>Directorate for Biological Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>IOS2011998</award-id>
        <principal-award-recipient>
          <name>
            <surname>Scimemi</surname>
            <given-names>Annalisa</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Information transfer within the brain relies on the ability of individual neurons to integrate synaptic inputs in space and time. In most instances, synaptic integration behaves as a non-linear system, where neither analytical solutions nor intuition can guide our understanding of the operating principles of neurons and circuits. To overcome this limitation, back in the ‘80 s, scientists began to develop approaches to efficiently compute the Hodgkin Huxley branched cable equations<sup><xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR3">3</xref></sup>. These works laid the foundation for the development of realistic quantitative models through which investigators could determine how non-homogeneous ion channel distribution in neurons with complex architectures controls synaptic integration and action potential firing. The software NEURON was developed exactly for this purpose in the mid-1980s<sup><xref ref-type="bibr" rid="CR1">1</xref>,<xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR6">6</xref></sup>. Over the course of years and decades, NEURON has gone through extensive upgrades in features and performances. To this day, NEURON remains one of the most widely used simulation environments for biologically detailed biophysical simulations, with a vibrant user community, readable documentation, and an extensive online ModelDB database<sup><xref ref-type="bibr" rid="CR7">7</xref>–<xref ref-type="bibr" rid="CR13">13</xref></sup>. Its use continues to be instrumental to cross-validate experimental data, estimate experimentally inaccessible parameters and establish relationships between specific patterns of synaptic activity and firing output profiles. Therefore, de facto, NEURON has become a standard and up-to-date tool that the neuroscience community continues to use for single-cell or network simulations<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>.</p>
    <p id="Par3">In its original release, NEURON relied on an interpreted programming language based on a floating-point calculator with C-like syntax, called hoc (an acronym for <underline>h</underline>igh <underline>o</underline>rder <underline>c</underline>alculator)<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. Through hoc codes, users defined specific parameters in the simulations, analyzed data, calculated new variables, etc. An improved hoc interpreter was developed in 1985 by the Computing Science Research Center at Bell Labs but was not generally adopted by commercial Unix systems or Linux distributions, which instead relied on developments of earlier calculator languages like dc and bc. For historical reasons, NEURON continued to rely on hoc and hoc interpreters for some time, whereas ion channel mechanisms (e.g., Hodgkin-Huxley-like kinetics, Markov kinetics, synaptic properties, etc.) were programmed using templates written as MOD files<sup><xref ref-type="bibr" rid="CR13">13</xref>,<xref ref-type="bibr" rid="CR16">16</xref></sup>. These templates were then translated into functions in C, compiled and assembled into a dynamic library<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>.</p>
    <p id="Par4">In 2006, the NEURON simulation environment was extended to support parallel processing<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, but some potential drawbacks, including the lack of a debugger and profiler, and some of the intrinsic limitations of the hoc language, remained<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>. Other tools, like neuroConstruct, based on the use of new simulator-independent NeuroML standards, were created to allow importing complex cell morphologies to be used and implemented for single cell or network models in NEURON and other simulators<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>. As the use of Python became even more popular in the neuroscience community, it became possible to describe individual neurons and networks with NEURON not only using the native hoc language, but also using Python or a mix of Python and hoc using PyNEURON<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>. Among other advantages, Python offered a larger choice of data structures for data organization, communication, compatibility and portability with other simulator and analysis packages that use Python as their interpreter language (e.g., NEST, MOOSE, Auryn, GENESIS, PyNN, BRIAN)<sup><xref ref-type="bibr" rid="CR20">20</xref>–<xref ref-type="bibr" rid="CR30">30</xref></sup>. At the time, this implementation allowed users to run simulations of moderate size neural networks (i.e., composed of 1∙10<sup>4</sup>–1∙10<sup>6</sup> cells)<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. Newer versions of hoc continued to be implemented as part of the Plan 9 operating system by Bell labs in 2015, and considerable extensions continued to be made after that.</p>
    <p id="Par5">Automation of many network modeling requirements was aided by the development of NetPyNE, an open-source Python package that serves as a high-level declarative NEURON wrapper<sup><xref ref-type="bibr" rid="CR31">31</xref></sup>. NetPyNE allowed building large-scale networks and running parallel simulations, ensuring replicability, parameter optimization and analysis, which until this point were left to be implemented by each user<sup><xref ref-type="bibr" rid="CR31">31</xref>–<xref ref-type="bibr" rid="CR33">33</xref></sup>. Together with neuroConstruct and other tools that became available over time (e.g., PyNN, Topographica, ARACHNE and BioNet<sup><xref ref-type="bibr" rid="CR22">22</xref>,<xref ref-type="bibr" rid="CR34">34</xref>–<xref ref-type="bibr" rid="CR36">36</xref></sup>) NetPyNE streamlined network modeling with NEURON. Since its release, it has been integrated with other tools available in the neuroscience community including the Human Neocortical Neurosolver, the Neuroscience Gateway Portal, and the Open Source Brain and EBRAINS platforms<sup><xref ref-type="bibr" rid="CR37">37</xref>–<xref ref-type="bibr" rid="CR44">44</xref></sup>.</p>
    <p id="Par6">In the more recent age of big data and hardware developments, NEURON embraced the portability challenge (i.e., running on different operating systems and making good use of multi-core CPUs and GPUs), while also being able to run jobs quickly, accurately, and with backward compatibility. This was accomplished with a recent modernization and modularization of NEURON. Briefly, by integrating NEURON/NetPyNE with CoreNEURON (a scalable simulation engine) and NMODL (a compiler capable of targeting CPUs and GPUs), users can now run multi-scale models and reaction–diffusion simulations using a software that offers improved sustainability, portability, and performance, and that can run on either hoc or Python<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>.</p>
    <p id="Par7">While these modeling tools grow in complexity and accessibility, now more than ever computational proficiency and literacy have become essential skills in a biologist’s toolbox, guiding data interpretation and experiment design. Despite all the improvements, hoc has not completely gone off the shelf, nor are some potential limitations inherent not only to hoc but also to the Python implementations of NEURON. For example, at present, the spatial distribution and activation time of different synaptic inputs can be hard coded by users or arranged based on the identity of different sub-cellular compartments but not, say, based on the distance from a given reference point from the soma. Also, it may be useful to run published models using hoc, without converting them to Python. From an educational perspective, it is important to ease the learning curve for trainees to run simulations at a single cell level, before scaling them up to the level of neuronal networks. Although learning how to code may not be an insurmountable task for a computer scientist, it can still be intimidating for many biologists that have not received formal or informal training in programming. Therefore, while we integrate programming as a core skill for biologists, it is also important to make all the tools necessary to run biophysical models of neurons more accessible to the wider scientific community and junior trainees.</p>
    <p id="Par8">To overcome these hurdles for generating models, we developed an open-source application called NRN-EZ, which is accessible to users with limited programming background. NRN-EZ allows users to: (i) load the 3D morphology of a digitally reconstructed neuron; (ii) add user-defined excitatory and inhibitory synaptic inputs; (iii) generate uniform or Poisson distributions for synaptic location, and activation time of different types of synaptic inputs, or any user-defined distribution for synaptic weight; and (iv) automatically generate .hoc and .py files that can then be compiled in NEURON, providing users the option to run simulations in NEURON using either the hoc or Python interface. The NRN-EZ code is freely accessible through our Github repository, it is easy to use and can be modified by users as they see fit.</p>
  </sec>
  <sec id="Sec2">
    <title>Results</title>
    <sec id="Sec3">
      <title>Overview of the graphical user interface</title>
      <p id="Par9">NRN-EZ has a simple and intuitive graphical user interface (GUI), organized in three adjacent panels (Fig. <xref rid="Fig1" ref-type="fig">1</xref>), and a streamlined software architecture (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Through the GUI, users can load the 3D structure of a biocytin-filled and reconstructed cell (which is displayed as a 2D maximum intensity projection in the NRN-EZ interface) and populate it with inputs of varying weights, spatial distribution, and temporal patterns of activation. The 3D morphology of a cell can be generated de novo from 3D reconstructions of biocytin-fills using open source or proprietary software (e.g., SimpleNeuriteTracer, Bitplane Imaris, etc.). Alternatively, one can use 3D reconstructions available from publicly accessible repositories like NeuroMorpho.org (<ext-link ext-link-type="uri" xlink:href="https://www.neuromorpho.org">https://www.neuromorpho.org</ext-link>)<sup><xref ref-type="bibr" rid="CR45">45</xref>,<xref ref-type="bibr" rid="CR46">46</xref></sup>. Each reconstruction is typically stored as a .swc file, an open-source file format widely used in the neuroscience community. Other file formats can be converted to .swc by using simple and freely available command-line utilities. In each .swc file, cells are defined through a list of sub-cellular compartments, which users can populate with arbitrary passive and active conductances. A typical neuron contains four types of compartments: the soma, the axon, the apical and the basal dendrites. Each compartment is identified by its 3D Cartesian coordinates, its radius and parent compartment. The .hoc or .py files generated through NRN-EZ can then be imported in NEURON to analyze, for example, the spiking output of a neuron (see examples in Figs. <xref rid="Fig3" ref-type="fig">3</xref>, <xref rid="Fig4" ref-type="fig">4</xref> and <xref rid="Fig5" ref-type="fig">5</xref>).<fig id="Fig1"><label>Figure 1</label><caption><p>The NRN-EZ GUI. The GUI is composed of a left, middle, and right panel. The left panel allows users to upload a file containing information about the 3D neuron structure. Once the upload is finished, the users can see the number of segments in each of the four sections of the neuron. They can also pan through the neuron morphology, identify specific segments, and set the path to the directory, which will contain the output from NRN-EZ. The middle panel is the one through which users specify the type of module they plan to use: current steps or synaptic stimulations. They can use multiple modules and assign them an arbitrary name. The weight, kinetics and timing of activation can be selected through the parameters described in the upper portion of the panel. The bottom portion allows users to select the location and spatial distribution of these inputs. The right panel allows selecting the number of inputs and the limits for their spatial location. For example, one may decide to confine synaptic inputs of a given type only to one dendritic compartment. NRN-EZ allows selecting multiple types of inputs, with unique locations and weights that can be integrated to run NEURON simulations of synaptic integration. The neuron morphology loaded in the GUI has color-coded sections and synaptic inputs.</p></caption><graphic xlink:href="41598_2022_27302_Fig1_HTML" id="MO1"/></fig><fig id="Fig2"><label>Figure 2</label><caption><p>Software architecture of NRN-EZ. Schematic representation of the fundamental structure and design for the NRN-EZ software. The blue hexagons highlight the start and end points of the logical workflow (i.e., the parameter choice from the GUI and the output file generated using NRN-EZ. The green hexagons identify intermediate workflow steps.</p></caption><graphic xlink:href="41598_2022_27302_Fig2_HTML" id="MO2"/></fig><fig id="Fig3"><label>Figure 3</label><caption><p>Sample Application of NRN-EZ for summation of supra-threshold EPSPs. (<bold>A</bold>) We used NRN-EZ to place one AMPA excitatory input at 100–300 µm from the soma of a 3D reconstructed, biocytin-filled CA1-PCs. The maximum intensity projection of the CA1-PC includes the soma (<italic>black</italic>), basal dendrites (<italic>cyan</italic>), apical dendrites (<italic>blue</italic>) and the location of the input (<italic>red</italic>). The synaptic weight was set to 1 nS. (<bold>B</bold>) Somatic recording obtained using the NEURON simulation environment. The action potential frequency recorded at the soma for inputs located at increasing distances is plotted in the right panel. (<bold>C</bold>) As in A, for 100 inputs with a Poisson placement along the distal dendrite of the CA1-PC. (<bold>D</bold>) As in B, in response to the synchronous activation of the 100 inputs described in C. (<bold>E</bold>) Somatic membrane potential recorded in response to the asynchronous activation of the 100 excitatory inputs described in C. (<bold>F</bold>) As in E, for synaptic inputs with a Poisson conductance distribution. (<bold>G</bold>) As in C, for 100 inputs with a uniform spatial distribution centered 100–300 µm away from the soma. (<bold>H</bold>) As in F, for 100 inputs with uniform spatial distribution and uniform timing of activation.</p></caption><graphic xlink:href="41598_2022_27302_Fig3_HTML" id="MO3"/></fig><fig id="Fig4"><label>Figure 4</label><caption><p>Sample Application of NRN-EZ for summation of sub-threshold EPSPs. (<bold>A</bold>) We used NRN-EZ to place one AMPA excitatory input at 100–300 µm from the soma of a 3D reconstructed, biocytin-filled CA1-PCs. The maximum intensity projection of the CA1-PC includes the soma (<italic>black</italic>), basal dendrites (<italic>cyan</italic>), apical dendrites (<italic>blue</italic>) and the location of the input (<italic>red</italic>). The synaptic weight was set to 7.5 pS. (<bold>B</bold>) Somatic recording obtained using the NEURON simulation environment. The maximum depolarization (V<sub>max</sub>) and the AUC of the somatic EPSP for increasing distances from the soma are plotted in the right panel. (<bold>C</bold>) As in A, for 100 inputs with a Poisson placement along the distal dendrite of the CA1-PC. (<bold>D</bold>) As in B, in response to the synchronous activation of the 100 inputs described in C. (<bold>E</bold>) Somatic EPSPs recorded in response to the asynchronous activation of the 100 excitatory inputs described in C. (<bold>F</bold>) As in E, for synaptic inputs with a Poisson conductance distribution. (<bold>G</bold>) As in C, for 100 inputs with a uniform spatial distribution centered 100–300 µm away from the soma. (<bold>H</bold>) As in F, for 100 inputs with uniform spatial distribution and uniform timing of activation.</p></caption><graphic xlink:href="41598_2022_27302_Fig4_HTML" id="MO4"/></fig><fig id="Fig5"><label>Figure 5</label><caption><p>Sample Application of NRN-EZ for summation of IPSPs. (<bold>A</bold>) We used NRN-EZ to place one GABA<sub>A</sub> inhibitory input at 100–300 µm from the soma of a 3D reconstructed, biocytin-filled CA1-PCs. The maximum intensity projection of the CA1-PC includes the soma (<italic>black</italic>), basal dendrites (<italic>cyan</italic>), apical dendrites (<italic>blue</italic>) and the location of the input (<italic>red</italic>). The synaptic weight was set to 330 pS. (<bold>B</bold>) Somatic recording obtained using the NEURON simulation environment. The minimum value of the membrane potential (V<sub>min</sub>) and the AUC of the somatic IPSP for increasing distances from the soma are plotted in the right panel. (<bold>C</bold>) As in A, for 100 inputs with a Poisson placement along the distal dendrite of the CA1-PC. (<bold>D</bold>) As in B, in response to the synchronous activation of the 100 inputs described in C. (<bold>E</bold>) Somatic IPSPs recorded in response to the asynchronous activation of the 100 inhibitory inputs described in C. (<bold>F</bold>) As in E, for synaptic inputs with a Poisson conductance distribution. (<bold>G</bold>) As in C, for 100 inputs with a uniform spatial distribution centered 100–300 µm away from the soma. (<bold>H</bold>) As in F, for 100 inputs with uniform spatial distribution and uniform timing of activation.</p></caption><graphic xlink:href="41598_2022_27302_Fig5_HTML" id="MO5"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>The left panel of the GUI: visualizing cells and setting the path for the working environment</title>
      <p id="Par10">The first step when using NRN-EZ is to either: (i) load (i.e., import) a .swc file, (ii) reload a .pkl file, which allows users to recreate the morphology and reload all input parameters of a cell (e.g., synaptic weight, onset, etc.); or (iii) load a .nrnez file, which allows users to load some default values into the GUI, including values for different input parameters. The .swc file can be loaded by first navigating to its location folder using the “Browse” button in the top left corner of the GUI, and by clicking the “Load” button below it. All these files (i.e., .swc, .pkl and .nrnez) are opened using the Python open function (with the Pkl and JSON library used to read .pkl and .nrnez files, respectively). NRN-EZ only imports .swc files and does not correct for potential inaccuracies and discontinuities in the morphology reconstructions, which can still be done using NEURON’s Import3D tool. It also does not have a built-in CellBuilder, which can still be used directly from NEURON. The .swc file format is widely used and standardized to store neuron morphologies and share digitally reconstructed neurons. There are simple command-line utilities freely available for converting other 3D neuron morphology formats into .swc (e.g., MorphoML, Genesis, Imaris, NeuroZoom, Eutectics, etc.), like NeuronLand (<ext-link ext-link-type="uri" xlink:href="http://www.neuronland.org">http://www.neuronland.org</ext-link>). In our custom load of .swc files, each line of the file is read, and the data is saved into an “nPart” object, which describes a single segment of a cell morphology. During loading, we count the total number of segments of a given type (i.e., soma, axon, apical, basal). A message box is displayed to the user if segments without an assigned segment type are detected. The nPart object holds the segment id, type, <italic>xyz</italic> position, radius, and parent id of the segment. After the synaptic inputs have been generated, the experimental settings have been defined and the file generation occurs, then a .nrn file with the morphology definition is created using the .swc file. This .nrn file will be loaded in NEURON. Since .swc files define segments by points and the .nrn file defines segments by lines, the values in the .swc are used to calculate the segment definitions needed in the .nrn file. For example, given soma id <italic>a</italic> with parent id <italic>b</italic> in the .swc file, the length of soma[<italic>a</italic>] in the .nrn file is defined using the x,y values of <italic>a</italic> and <italic>b</italic> and the diameter of soma[<italic>a</italic>] is calculated using the radius value of <italic>a</italic> from the .swc file. These values are calculated using the math Python library. The entire NRN-EZ session, which contains the stimulation parameters, and the cell morphology can be loaded by clicking the “Reload Session” button. Users can press the “Load .nrnez” button to upload a set of default parameters that they find convenient to have as part of their default screen. A sample .nrnez file is included in the NRN-EZ GitHub repository.</p>
      <p id="Par11">Once the .swc file is uploaded, one can visualize the reconstructed cell in the bottom portion of this panel. This plot relies on a custom implementation that uses the PyQtGraph Python graphics and GUI library built on PyQt/PySide and numpy. PyQtGraph was chosen over matplotlib after testing found that plotting with PyQtGraph was orders of magnitude quicker than using matplotlib (i.e., seconds vs. minutes). Using the definitions in the .swc file, the segments are plotted on a 2D graph. To reduce overhead further (i.e., time needed to display the plot), the plot is only written when a branching point is detected (with a branch being defined as a point with non-sequential parent id in the .swc file). Each segment type is given its own color (black for soma, blue for apical, cyan for basal and magenta for axon). The width of the line on the plots for the axon segment is also weighted 50% thinner than the other lines. PyQtGraph supports zooming in and out on the graph as well as panning. The axis units change from µm to mm depending on the size of the cell. The GUI displays the segment composition of the cell as a list that includes the number of segments in the soma, axon, apical and basal dendrites sections. In the interactive 2D Cartesian plane embedded in the GUI, these sections appear as color-coded in black (soma), magenta (axon), blue (apical dendrites) and cyan (basal dendrites). By right clicking and dragging the mouse up and down, we can zoom in and out the Cartesian reference system along the y-axis. By right clicking and dragging the mouse right and left, we can zoom in and out along the <italic>x</italic>-axis. The mouse scroll wheel can be used to zoom in simultaneously along the <italic>x,y</italic>-directions. By clicking and dragging the left mouse button, we can move the neurons around, in any direction. There is also a custom implementation to select a specific segment. The identity of a segment can be revealed in the fields above the graph by drawing a line across it. Briefly, by clicking once on either side of a given segment, the segment is highlighted with its complementary color, and its id is shown in the GUI. The selection is done by calculating a line based on the two points selected and then checking each segment to see if the segment intersects the calculated line. Users can also highlight specific segments by typing their segment identity number and segment identifier in the corresponding fields above the graph area (e.g., by typing “100” and selecting “Apical” from the dropdown box).</p>
      <p id="Par12">The left portion of the GUI also allows selecting the destination folder for the output files generated by NRN-EZ, which includes information about the weight, location and activation time of various synaptic inputs, or the amplitude and duration of current step injections. This can be done by navigating to the destination folder using the “Set Path” button, and then clicking the ”Run” button to execute the code specified through all other panels in the GUI. Users can select to run the code one or multiple times by typing a number in the field on the right-hand side of the “Run” button. To clear all parameters from the whole GUI, one can use the “Reset Fields” button on the right-hand side of the “Run” button.</p>
    </sec>
    <sec id="Sec5">
      <title>The middle panel of the GUI: selecting modules and setting their weight properties selection</title>
      <p id="Par13">In the middle panel of the GUI, users can select the type of stimulus (or module) to be used in their simulations. There are three main types of modules that can be used and that can be distributed across one or more segments. The “I-Step” module allows injecting current steps of any given amplitude and duration into a specified segment of a given compartment. The second module, called “Synaptic Input” is used to generate synaptic inputs based on a two-state kinetic scheme synapse described by rise time and decay time constants tau1 (rise) and tau2 (decay), respectively (see NEURON documentation). The name of each “I-Step” and “Synaptic Input” module type can be set arbitrarily by the user (e.g., AMPA, NMDA, step) in the box called “Name”, a useful feature to prevent potential nomenclature ambiguities when using multiple types of current steps or synaptic inputs in the same simulation. The third module type, “Custom”, allows the use of point processes (i.e., voltage or ligand-gated ion channels) with custom properties defined using .mod files. When using the “Custom” module type, the “.mod File” button prompts users to navigate to the .mod file to be used. In this case, once the .mod file is selected, NRN-EZ automatically sets the name the module in the table to match the name of the .mod file. Once the module type name has been assigned, users can select whether the weight of each input should remain the same (“Single”) or vary according to a uniform (“Multiple Uniform”) or Poisson distribution (“Multiple Poisson”). If the “Multiple Uniform” or “Multiple Poisson” options are selected, then the GUI prompts the user to select the mean and standard deviation of the current (“I-Step”) or of the synaptic weight (“Synaptic Input” and “Custom”). When using the “Synaptic Input” module type, the users also need to select the reversal potential (“E”), and the rise and decay time constants (tau1 and tau2, respectively). Once these parameters have been set, they are saved together with the module type and name and are displayed in the table at the center of this panel. The parameters of any saved module type can be changed by clicking on their corresponding row in the table, and they can be stored by clicking the “Save” button. The “Delete” button can be used to delete any current step or synaptic input that is no longer needed.</p>
      <p id="Par14">The bottom portion of the panel can be used to set the location and spatial distribution of each module type. The options for the spatial distribution are analogous to those mentioned when describing the synaptic weight. Accordingly, any given module type can be delivered to a single location identified by its segment number (“Single”) or to multiple locations according to either a uniform (“Multiple Uniform”) or Poisson distribution (“Multiple Poisson”). The mean of their spatial distribution is calculated using Euclidean distance from the user-selected segment.</p>
    </sec>
    <sec id="Sec6">
      <title>The right panel: stimulus tags, saving tags, and input timing</title>
      <p id="Par15">The right panel is used to label, or tag, a group of module types. Modules with the same tag are applied to the same exact locations and are activated at the same time. For example, assigning the same tag to both AMPA and NMDA module types can be used to create synapses that contain both AMPA and NMDA receptors at the same exact location. The user can select how many of these inputs should be applied to their cell of interest. The location of stimuli labelled by the same tag can be confined to one or more specific domains of the cell, for example the basal and/or apical dendrites. One can use a color-coded scheme for each tag. NRN-EZ will generate random distributions for stimulus magnitude, location and timing, independently for each stimulus tag. Users can decide the temporal pattern of activation of inputs with a given tag. These inputs can be delivered simultaneously by selecting “Single” and setting the variable “Interval” to zero. They can also be delivered with a constant time interval between each other (“Single”) or with a uniform (“Multiple Uniform”) or Poisson temporal distribution (“Multiple Poisson”), each defined by a mean time interval and standard deviation. The “Onset” field is used to set a delay between the beginning of the simulation and the activation time of the first input. “Interval” defines the time interval between consecutive stimuli. The table of saved tags in the right panel functions similarly to the saved stimuli table in the middle panel, where users can delete or edit the parameters assigned to a tag by selecting its corresponding row in the table.</p>
    </sec>
    <sec id="Sec7">
      <title>Generating the inputs and running the simulation</title>
      <p id="Par16">Once all the desired stimulus tags have been created, the code can be run by clicking the “Run” button in the bottom left corner of the GUI. After clicking the “Run” button, NRN-EZ displays each input in the Cartesian coordinate system of the left panel as a dot with a different color for each tag. The output files of NRN-EZ (.mod, .hoc, .py, .nrn, .pkl, .swc) are stored in a folder named with the date and time of its creation, in the destination folder identified by the “Set Path” button (left panel). The folder created by NRNR-EZ contains sub-folders corresponding to the number of runs the user selected. Within each run folder, there are .hoc and .py files containing commands to run the experiments in NEURON using either the hoc or Python interface, along with the .swc selected by the user, the .nrn file generated by the application, and all .mod files needed to run the simulation. NRN-EZ compiles the .mod files with the nrnivmodl command at the time of generation. Additionally, there are sub-folders corresponding to each module defined in the GUI. These folders contain multiple .dat files with input location, time, and weight information. In each .dat file, the first row contains two numbers, corresponding to the number of rows and columns in the file. All these files are used to run a Hodgkin-Huxley simulation using NEURON.</p>
      <p id="Par17">To run a NEURON simulation using the hoc interface, users can run the nrnez.hoc file, created by NRN-EZ and stored in its output folder. Alternatively, to run a NEURON simulation using the Python interface, users can run the nrnez.py file from the terminal with Python in interactive mode using the command “python nrnez.py -i”. Linux users that installed NEURON using the “pip” command in any location that required the use of the “sudo” command will also need to use “sudo” to run the .hoc or .py files. Each of these files contains an xopen command to open the .nrn file, which includes information about the cell morphology and mechanisms (i.e., the whole experiment) defined in NRN-EZ. Running the nrnez.hoc file creates a .ses (session) NEURON file containing all the parameters specified for the simulation, which can be changed from the NEURON GUI (e.g., simulation length). Included in the output files generated by NRN-EZ is the original .swc file, which one can use to take advantage of the NEURON Import3D function to check and correct for inaccuracies and potential discontinuities in the neuron morphology.</p>
    </sec>
    <sec id="Sec8">
      <title>Testing and validation</title>
      <p id="Par18">We tested and validated NRN-EZ by using the 3D morphology of a CA1 pyramidal cell (CA1-PC) in the mouse hippocampus, obtained using biocytin fills and confocal laser scanning microscopy image acquisition (NeuroMorpho NMO_139428)<sup><xref ref-type="bibr" rid="CR47">47</xref></sup>. We assigned this neuron a resting membrane potential of − 65 mV, and the passive and active membrane properties of a CA1-PC described previously<sup><xref ref-type="bibr" rid="CR47">47</xref></sup>. Briefly, the model included voltage-gated sodium channels (Na<sub>V</sub>), A-type potassium channels (K<sub>A</sub>), delayed-rectifier potassium channels (K<sub>DR</sub>), calcium-dependent potassium channels (K<sub>Ca</sub>), muscarinic receptor activated potassium channels (K<sub>M</sub>), hyperpolarization activated cationic channels (I<sub>h</sub>), and L, N, T-type calcium channels. All simulations were performed using a variable time step and the code for the NRN-EZ simulations is deposited on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/scimemia/NRN-EZ">https://github.com/scimemia/NRN-EZ</ext-link>). The NEURON code is shared on the ModelDB database (Acc n. 267419).</p>
      <p id="Par19">In a first series of simulations, we used NRN-EZ to change the location of a single excitatory input, with a conductance of 1 nS, from 100 µm (segment #3285) to 200 µm (segment #943) and 300 µm away from the soma (segment #2420; Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Using the middle panel of the NRN-EZ GUI, we set the reversal potential for AMPA EPSPs at E = 0 mV. Each AMPA input had a rise time constant tau1 = 0.7 ms and a decay time constant tau2 = 2 ms. We selected “Single” location and entered the corresponding segment number and type (e.g., 3285 Apical) and pressed Save. In the right panel, we tagged this input as either Proximal, Medial or Distal and set the number of inputs to 1. The location limit was set to Apical Dendrite, to match the location of the selected segment. We selected red as the color for visualizing the input (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A). At the bottom of this panel, for timing, we selected “Single”, set the Onset to 200 ms, clicked the Save button and then the Run button in the left panel. The results of the NEURON simulations performed using these files are shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>B. The amplitude of the somatic EPSP decreased as the input location moved further away from the soma, while its kinetics (rise and decay time) became slower. These findings are consistent with the basic principles of cable theory, used to describe the physiological properties of passive and active input propagation along dendrites<sup><xref ref-type="bibr" rid="CR48">48</xref></sup>. If rather than using a single input, we used 100 of them, and distributed them with a Poisson location centered 100–300 µm away from the soma, we recorded a single action potential at the soma, arising on top of an EPSP that became less prominent for more distal inputs (Fig. <xref rid="Fig3" ref-type="fig">3</xref>C,D). When the excitatory inputs were not synchronous, but had a Poisson distribution for their activation time, the cell produced multiple action potentials if their location was &lt; 200 µm away from the soma (Fig. <xref rid="Fig3" ref-type="fig">3</xref>E). A train of action potentials could be generated by varying the synaptic weight using a Poisson distribution (Fig. <xref rid="Fig3" ref-type="fig">3</xref>F). This is important, as it suggests that varying the strength and timing of the excitatory inputs increases the firing output probability of CA1-PCs, and therefore the temporal fidelity with which they relay information to the entorhinal cortex. The frequency of the trains decreased as the inputs became more distal (Fig. <xref rid="Fig3" ref-type="fig">3</xref>F). We detected a qualitatively similar trend when using a uniform rather than a Poisson distribution for synaptic input timing and weight. However, in this case, the firing output of the cell decreased more abruptly at increasing distances from the soma (Fig. <xref rid="Fig3" ref-type="fig">3</xref>G,H).</p>
      <p id="Par20">To understand how variability in the location, strength, and timing of activation of different synaptic inputs affect the integration of sub-threshold inputs, we repeated the simulations using a smaller conductance for the AMPA input (7.5 pS; Fig. <xref rid="Fig4" ref-type="fig">4</xref>). In this case, we quantified the maximal depolarization at the soma and the time integral of the change in membrane potential (i.e., the area under the curve, AUC). Consistent with the data previously described for Fig. <xref rid="Fig3" ref-type="fig">3</xref>A,B, a single excitatory input generated a smaller and slower EPSP as it moved from proximal to distal locations (Fig. <xref rid="Fig4" ref-type="fig">4</xref>A,B). This general principle held true also when analyzing the somatic output in response to 100 synchronous (Fig. <xref rid="Fig4" ref-type="fig">4</xref>C,D) and asynchronous inputs (Fig. <xref rid="Fig4" ref-type="fig">4</xref>E,F). The magnitude of the somatic depolarization, however, was larger when the value of the synaptic weight varied according to a Poisson distribution (Fig. <xref rid="Fig4" ref-type="fig">4</xref>F). This is consistent with the results described for supra-threshold stimuli (cf. Fig. <xref rid="Fig3" ref-type="fig">3</xref>E,F and <xref rid="Fig4" ref-type="fig">4</xref>E,F). This effect is less pronounced when the variability of synaptic weights is described through a uniform, rather than a Poisson, distribution (Fig. <xref rid="Fig4" ref-type="fig">4</xref>G,H).</p>
      <p id="Par21">The GABA<sub>A</sub> component had a rise time constant tau1 = 0.5 ms and a decay time constant tau2 = 7 ms. The reversal for GABAergic synaptic inhibition was E = − 75 mV, meaning that its driving force was substantially smaller than that of glutamatergic excitation. Therefore, the general principle of distance-dependence for the attenuation of synaptic inputs held true but were smaller (though qualitatively similar) compared to those described for sub-threshold excitation. (cf. Figs. <xref rid="Fig4" ref-type="fig">4</xref> and <xref rid="Fig5" ref-type="fig">5</xref>). Even in this case, the Poisson distribution of synaptic weights was more effective than the uniform distribution at hyperpolarizing the somatic membrane potential.</p>
      <p id="Par22">Together, these results confirm some fundamental principles of cable theory but also allow exploring new parameters related to the variability in the spatial and temporal properties of synaptic integration in central neurons.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Discussion</title>
    <p id="Par23">Over the years, NEURON has become established in the neuroscience community as a powerful simulation environment capable of handling complex neuron geometry and biophysical mechanisms, essential to prompt and constrain new hypotheses on neuronal function. It has indirectly contributed to the establishment of major scientific enterprises, like the Human Brain Project, Active Brain Mapping and Human Connectome Project, which aim to find the connection between the cellular principles of neuronal coding and cognitive/motor performance<sup><xref ref-type="bibr" rid="CR49">49</xref>–<xref ref-type="bibr" rid="CR55">55</xref></sup>.</p>
    <p id="Par24">An important feature of NEURON, a simulation environment to run compartmental models of individual neurons and networks, is that it allows users to test how neuronal architecture, ion channel and synaptic input distribution and timing of activation affect the firing output and computational efficiency<sup><xref ref-type="bibr" rid="CR56">56</xref></sup> (see nrn.readthedocs.io/). Since its first development, NEURON has been used in more than 2600 publications focusing on topics that range from integration, basic mechanisms of synaptic transmission, dendritic spike initiation, to neuron excitability, etc. (see <ext-link ext-link-type="uri" xlink:href="https://nrn.readthedocs.io/en/latest/publications-using-neuron.html">https://nrn.readthedocs.io/en/latest/publications-using-neuron.html</ext-link>). Although Python wrappers for NEURON have been developed, until 2022, NEURON incorporated a programming language based on hoc, which users could use for writing codes to define the weight and kinetics, spatial distribution, and activation time of synaptic inputs or the location of points for current injections<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>. In 2022, a Python interface was extensively modernized and gained some independence from hoc. However, having the ability to read hoc code written and shared by other groups, can still be a preferred entry point to learn NEURON for some users.</p>
    <p id="Par25">For many investigators with limited computer science knowledge, as well as undergraduate and graduate trainees that do not major in computer science but remain interested in understanding information processing in the brain, the learning barrier for NEURON and hoc can be high. This is particularly true when attempting to simulate complex activation patterns for different types of synapses with unique spatial distributions. In this work, we describe an application, NRN-EZ, which streamlines .hoc and .py file generation to run compartmental models, and provides the flexibility to run them using either the hoc or Python NEURON interface. The software source code and documentation for NRN-EZ are freely available for download from the Scimemi Lab website (<ext-link ext-link-type="uri" xlink:href="https://sites.google.com/site/scimemilab2013/software">https://sites.google.com/site/scimemilab2013/software</ext-link>) and GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/scimemia/NRN-EZ">https://github.com/scimemia/NRN-EZ</ext-link>). Detailed instructions on software installation and operation are available from the GitHub repository, which also includes sample .swc files of 3D digitally reconstructed neuron morphologies. NRN-EZ can be downloaded as a standalone application for Linux (Pop!_OS and Ubuntu), Mac OS, and Windows. NRN-EZ is designed to facilitate the implementation of complex compartmental models by users with limited computer science experience. Being an open-source code, NRN-EZ can be implemented by anyone, which will be particularly useful for researchers around the world. NRN-EZ is flexible to cover a broad diversity of simulation scenarios, from current step injections to synaptic input activation. It allows to simulate synapses with mixed receptor populations, like glutamatergic synapses with AMPA and NMDA receptors.</p>
    <p id="Par26">We aim to keep NRN-EZ as simple, versatile, and useful as possible to make it a perfect entry tool to facilitate NEURON computations. Being an open-source tool will allow users around the world to contribute to future implementation, which can include, for example, the implementation of an interface to write hoc codes for neural network simulations.</p>
  </sec>
  <sec id="Sec10">
    <title>Materials and methods</title>
    <sec id="Sec11">
      <title>Software description</title>
      <p id="Par27">NRN-EZ is an open-source application that uses the Python programming language (version 3.6.9 and higher), the PyQt application (version 5.10.1) and the PyQtGraph module (version 0.11.0), built with PyInstaller 3.6. NRN-EZ was built on Linux (Ubuntu 18.04.5 LTS and Pop!_OS 18.04 LTS), MacOS Monterey 12.5.1 and Windows 10. NRN-EZ uses a Model—View—Controller (MVC) software design, which divides the program’s logic into three interconnected elements through which users can generate one or more synaptic inputs to run compartmental models using NEURON.</p>
      <p id="Par28">The Model portion of NRN-EZ consists of the following classes: experiment (also referred to as session in the GUI), morphology, weight, location (which also handles the number of inputs) and timing. The morphology class loads a .swc file, generates an output graph shown in the left panel of the GUI, and creates a .nrn file. The weight, location and timing classes all do error checking on the user input data and they all handle generating data based on the user input. The experiment class (i.e., the session) does error checking, and generates .hoc files. Any data with Poisson and uniform distributions are created using Python’s built-in math module. These data persist in the memory while the application is running. These and any other user-defined input parameters are also saved when the user hits the “Run” button in the bottom left corner of the GUI. When saving the data, NRN-EZ “pickles” the data (pickling is a built-in python module that saves python objects to flat files). Once saved, these .pkl files can be reloaded as a session into NRN-EZ at any time. The Model portion saves information into the following files: experimentClass.py, morphologyClass.py, locationClass.py, timeClass.py, weightClass.py. These files contain the class definitions for all the user input data. These also contain the output generation functions.</p>
      <p id="Par29">The View portion of NRN-EZ consists of the GUI built using PyQt. The plot section of the GUI is built using PyQtGraph, because of its ability to quickly generate large plots, like the one embedded in the NRN-EZ GUI. Accordingly, when users select a .swc file to load into NRN-EZ, the software quickly renders it graphically. The View portion renders information using the following files: gui.py, gui_helper.py. These files contain all the code for building the user interface.</p>
      <p id="Par30">The Controller portion of NRN-EZ transfers data from the View to the Model portion (e.g., when a user clicks the “Save” buttons in the middle and right portions of the GUI). In addition, the Controller portion transfers data from the Model to the View portion (e.g., when the user edits a module by clicking on its corresponding row in the tables or when the “Run” button is hit to execute the code and update the graph). The Controller portion handles data transfer using the gui_handler.py file. This file contains the code to handle user actions.</p>
      <p id="Par31">The code also includes a file that checks for command line arguments and is the entry point to the application (NRN-EZ.py), an error logger module (errorLogger.py), which generates the run log, error log, and debug log. It also handles generating error messages. The configuration module (config.py) handles options that users can change without having to recreate and version the code (i.e., the reference comment for the .hoc file outputs, setting a default .nrnez file and setting the debug mode on and off.). The configuration menu can be accessed by running NRN-EZ from the command line with the “-config” flag (i.e., “./NRN-EZ -config”). Additional command line flags include “-v” to display the version of NRN-EZ and “-d” to run the application in debug mode. Debug mode creates additional logs for troubleshooting the application. Loading .nrnez interface files is handled by the loader.py file. Last, the code stores information about the definitions of all global variables (globvar.py).</p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>These authors contributed equally: Evan A. W. Cobb and Maurice A. Petroccione.</p>
    </fn>
  </fn-group>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Conceptualization: E.A.W.C., M.A.P., A.S. Data curation: A.S. Formal analysis: M.A.P. Funding acquisition: A.S. Investigation: A.S. Methodology: E.A.W.C. Project administration: A.S. Resources: A.S. Software: E.A.W.C. Supervision: A.S. Validation: M.A.P., A.S. Visualization: E.A.W.C. Writing—original draft: A.S. Writing—review &amp; editing:  E.A.W.C., M.A.P., A.S.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>The funding was provided by Directorate for Biological Sciences (Grant No. IOS2011998).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>The datasets generated and/or analyzed during the current study are available in the Scimemi Lab GitHub repository, <ext-link ext-link-type="uri" xlink:href="https://github.com/scimemia/NRN-EZ">https://github.com/scimemia/NRN-EZ</ext-link>.</p>
  </notes>
  <notes id="FPar1" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par32">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Efficient computation of branched nerve equations</article-title>
        <source>Int. J. Biomed. Comput.</source>
        <year>1984</year>
        <volume>15</volume>
        <issue>1</issue>
        <fpage>69</fpage>
        <lpage>76</lpage>
        <pub-id pub-id-type="doi">10.1016/0020-7101(84)90008-4</pub-id>
        <pub-id pub-id-type="pmid">6698635</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Mascagni</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Koch</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Segev</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Numerical methods for neuronal modelling</article-title>
        <source>Methods in Neuronal Modeling</source>
        <year>1989</year>
        <publisher-loc>Cambridge</publisher-loc>
        <publisher-name>MIT Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hodgkin</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Huxley</surname>
            <given-names>AF</given-names>
          </name>
        </person-group>
        <article-title>A quantitative description of membrane current and its application to conduction and excitation in nerve</article-title>
        <source>J. Physiol.</source>
        <year>1952</year>
        <volume>117</volume>
        <issue>4</issue>
        <fpage>500</fpage>
        <lpage>544</lpage>
        <pub-id pub-id-type="doi">10.1113/jphysiol.1952.sp004764</pub-id>
        <pub-id pub-id-type="pmid">12991237</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>A program for simulation of nerve equations with branching geometries</article-title>
        <source>Int. J. Biomed. Comput.</source>
        <year>1989</year>
        <volume>24</volume>
        <issue>1</issue>
        <fpage>55</fpage>
        <lpage>68</lpage>
        <pub-id pub-id-type="doi">10.1016/0020-7101(89)90007-X</pub-id>
        <pub-id pub-id-type="pmid">2714879</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Eeckman</surname>
            <given-names>FH</given-names>
          </name>
        </person-group>
        <article-title>NEURON—A program for simulation of nerve equations</article-title>
        <source>Neural Systems: Analysis and Modeling</source>
        <year>1993</year>
        <publisher-name>Springer</publisher-name>
        <fpage>127</fpage>
        <lpage>136</lpage>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Skrzypek</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>The NEURON simulation program</article-title>
        <source>Neural Network Simulation Environments</source>
        <year>1994</year>
        <publisher-name>Springer</publisher-name>
        <fpage>147</fpage>
        <lpage>163</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tikidji-Hamburyan</surname>
            <given-names>RA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Software for brain network simulations: A comparative study</article-title>
        <source>Front. Neuroinform.</source>
        <year>2017</year>
        <volume>11</volume>
        <fpage>46</fpage>
        <pub-id pub-id-type="doi">10.3389/fninf.2017.00046</pub-id>
        <pub-id pub-id-type="pmid">28775687</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>ML</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ModelDB: A database to support computational neuroscience</article-title>
        <source>J. Comput. Neurosci.</source>
        <year>2004</year>
        <volume>17</volume>
        <issue>1</issue>
        <fpage>7</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1023/B:JCNS.0000023869.22017.2e</pub-id>
        <pub-id pub-id-type="pmid">15218350</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McDougal</surname>
            <given-names>RA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ModelView for ModelDB: Online presentation of model structure</article-title>
        <source>Neuroinformatics</source>
        <year>2015</year>
        <volume>13</volume>
        <issue>4</issue>
        <fpage>459</fpage>
        <lpage>470</lpage>
        <pub-id pub-id-type="doi">10.1007/s12021-015-9269-2</pub-id>
        <pub-id pub-id-type="pmid">25896640</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Migliore</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ModelDB: Making models publicly accessible to support computational neuroscience</article-title>
        <source>Neuroinformatics</source>
        <year>2003</year>
        <volume>1</volume>
        <issue>1</issue>
        <fpage>135</fpage>
        <lpage>139</lpage>
        <pub-id pub-id-type="doi">10.1385/NI:1:1:135</pub-id>
        <pub-id pub-id-type="pmid">15055399</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Morse</surname>
            <given-names>TM</given-names>
          </name>
        </person-group>
        <article-title>ModelDB in computational neuroscience education: A research tool as interactive educational media</article-title>
        <source>Brains Minds Media</source>
        <year>2008</year>
        <volume>3</volume>
        <issue>1</issue>
        <fpage>bmm1409</fpage>
        <pub-id pub-id-type="pmid">25089156</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Almog</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Korngreen</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Is realistic neuronal modeling realistic?</article-title>
        <source>J. Neurophysiol.</source>
        <year>2016</year>
        <volume>116</volume>
        <issue>5</issue>
        <fpage>2180</fpage>
        <lpage>2209</lpage>
        <pub-id pub-id-type="doi">10.1152/jn.00360.2016</pub-id>
        <pub-id pub-id-type="pmid">27535372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Carnevale</surname>
            <given-names>NT</given-names>
          </name>
          <name>
            <surname>Hines</surname>
            <given-names>ML</given-names>
          </name>
        </person-group>
        <source>The NEURON Book</source>
        <year>2006</year>
        <publisher-name>Cambridge University Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Awile</surname>
            <given-names>O</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Modernizing the NEURON simulator for sustainability, portability, and performance</article-title>
        <source>Front. Neuroinform.</source>
        <year>2022</year>
        <volume>16</volume>
        <fpage>884046</fpage>
        <pub-id pub-id-type="doi">10.3389/fninf.2022.884046</pub-id>
        <pub-id pub-id-type="pmid">35832575</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Kernighan</surname>
            <given-names>BW</given-names>
          </name>
          <name>
            <surname>Pike</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>The UNIX Programming Environment</source>
        <year>1984</year>
        <publisher-name>Prentice-Hall</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Carnevale</surname>
            <given-names>NT</given-names>
          </name>
        </person-group>
        <article-title>Expanding NEURON's repertoire of mechanisms with NMODL</article-title>
        <source>Neural Comput.</source>
        <year>2000</year>
        <volume>12</volume>
        <issue>5</issue>
        <fpage>995</fpage>
        <lpage>1007</lpage>
        <pub-id pub-id-type="doi">10.1162/089976600300015475</pub-id>
        <pub-id pub-id-type="pmid">10905805</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Migliore</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Parallel network simulations with NEURON</article-title>
        <source>J. Comput. Neurosci.</source>
        <year>2006</year>
        <volume>21</volume>
        <issue>2</issue>
        <fpage>119</fpage>
        <lpage>129</lpage>
        <pub-id pub-id-type="doi">10.1007/s10827-006-7949-5</pub-id>
        <pub-id pub-id-type="pmid">16732488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gleeson</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Steuber</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Silver</surname>
            <given-names>RA</given-names>
          </name>
        </person-group>
        <article-title>neuroConstruct: A tool for modeling networks of neurons in 3D space</article-title>
        <source>Neuron</source>
        <year>2007</year>
        <volume>54</volume>
        <issue>2</issue>
        <fpage>219</fpage>
        <lpage>235</lpage>
        <pub-id pub-id-type="doi">10.1016/j.neuron.2007.03.025</pub-id>
        <pub-id pub-id-type="pmid">17442244</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Davison</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Muller</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>NEURON and Python</article-title>
        <source>Front. Neuroinform.</source>
        <year>2009</year>
        <volume>3</volume>
        <fpage>1</fpage>
        <pub-id pub-id-type="doi">10.3389/neuro.11.001.2009</pub-id>
        <pub-id pub-id-type="pmid">19198661</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lytton</surname>
            <given-names>WW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Simulation neurotechnologies for advancing brain research: Parallelizing large networks in NEURON</article-title>
        <source>Neural Comput.</source>
        <year>2016</year>
        <volume>28</volume>
        <issue>10</issue>
        <fpage>2063</fpage>
        <lpage>2090</lpage>
        <pub-id pub-id-type="doi">10.1162/NECO_a_00876</pub-id>
        <pub-id pub-id-type="pmid">27557104</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cornelis</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Python as a federation tool for GENESIS 3.0</article-title>
        <source>PLoS ONE</source>
        <year>2012</year>
        <volume>7</volume>
        <issue>1</issue>
        <fpage>e29018</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0029018</pub-id>
        <pub-id pub-id-type="pmid">22276101</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Davison</surname>
            <given-names>AP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PyNN: A common interface for neuronal network simulators</article-title>
        <source>Front. Neuroinform.</source>
        <year>2008</year>
        <volume>2</volume>
        <fpage>11</fpage>
        <pub-id pub-id-type="doi">10.3389/neuro.11.011.2008</pub-id>
        <pub-id pub-id-type="pmid">19194529</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gewaltig</surname>
            <given-names>M-O</given-names>
          </name>
          <name>
            <surname>Diesmann</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Nest (neural simulation tool)</article-title>
        <source>Scholarpedia</source>
        <year>2007</year>
        <volume>2</volume>
        <issue>4</issue>
        <fpage>1430</fpage>
        <pub-id pub-id-type="doi">10.4249/scholarpedia.1430</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eppler</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PyNEST: A convenient interface to the NEST simulator</article-title>
        <source>Front. Neuroinform.</source>
        <year>2008</year>
        <volume>2</volume>
        <fpage>12</fpage>
        <pub-id pub-id-type="doi">10.3389/neuro.11.012.2008</pub-id>
        <pub-id pub-id-type="pmid">19198667</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goodman</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Brette</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Brian: A simulator for spiking neural networks in Python</article-title>
        <source>Front. Neuroinform.</source>
        <year>2008</year>
        <volume>2</volume>
        <fpage>5</fpage>
        <pub-id pub-id-type="doi">10.3389/neuro.11.005.2008</pub-id>
        <pub-id pub-id-type="pmid">19115011</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goodman</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Brette</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>The brian simulator</article-title>
        <source>Front. Neurosci.</source>
        <year>2009</year>
        <volume>3</volume>
        <issue>2</issue>
        <fpage>192</fpage>
        <lpage>197</lpage>
        <pub-id pub-id-type="doi">10.3389/neuro.01.026.2009</pub-id>
        <pub-id pub-id-type="pmid">20011141</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stimberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Brette</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Goodman</surname>
            <given-names>DF</given-names>
          </name>
        </person-group>
        <article-title>Brian 2, an intuitive and efficient neural simulator</article-title>
        <source>Elife</source>
        <year>2019</year>
        <pub-id pub-id-type="doi">10.7554/eLife.47314</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ray</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bhalla</surname>
            <given-names>US</given-names>
          </name>
        </person-group>
        <article-title>PyMOOSE: Interoperable scripting in Python for MOOSE</article-title>
        <source>Front. Neuroinform.</source>
        <year>2008</year>
        <volume>2</volume>
        <fpage>6</fpage>
        <pub-id pub-id-type="pmid">19129924</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sneddon</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Faeder</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Emonet</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Efficient modeling, simulation and coarse-graining of biological complexity with NFsim</article-title>
        <source>Nat. Methods</source>
        <year>2011</year>
        <volume>8</volume>
        <issue>2</issue>
        <fpage>177</fpage>
        <lpage>183</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1546</pub-id>
        <pub-id pub-id-type="pmid">21186362</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zenke</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Gerstner</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Limits to high-speed simulations of spiking neural networks using general-purpose computers</article-title>
        <source>Front. Neuroinform.</source>
        <year>2014</year>
        <volume>8</volume>
        <fpage>76</fpage>
        <pub-id pub-id-type="doi">10.3389/fninf.2014.00076</pub-id>
        <pub-id pub-id-type="pmid">25309418</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dura-Bernal</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>NetPyNE, a tool for data-driven multiscale modeling of brain circuits</article-title>
        <source>Elife</source>
        <year>2019</year>
        <pub-id pub-id-type="doi">10.7554/eLife.44494</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mulugeta</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Credibility, replicability, and reproducibility in simulation for biomedicine and clinical applications in neuroscience</article-title>
        <source>Front. Neuroinform.</source>
        <year>2018</year>
        <volume>12</volume>
        <fpage>18</fpage>
        <pub-id pub-id-type="doi">10.3389/fninf.2018.00018</pub-id>
        <pub-id pub-id-type="pmid">29713272</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McDougal</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Bulanova</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>Lytton</surname>
            <given-names>WW</given-names>
          </name>
        </person-group>
        <article-title>Reproducibility in computational neuroscience models and simulations</article-title>
        <source>IEEE Trans. Biomed. Eng.</source>
        <year>2016</year>
        <volume>63</volume>
        <issue>10</issue>
        <fpage>2021</fpage>
        <lpage>2035</lpage>
        <pub-id pub-id-type="doi">10.1109/TBME.2016.2539602</pub-id>
        <pub-id pub-id-type="pmid">27046845</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bednar</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>Topographica: Building and analyzing map-level simulations from Python, C/C++, MATLAB, NEST, or NEURON components</article-title>
        <source>Front. Neuroinform.</source>
        <year>2009</year>
        <volume>3</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.3389/neuro.11.008.2009</pub-id>
        <pub-id pub-id-type="pmid">19352443</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aleksin</surname>
            <given-names>SG</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ARACHNE: A neural-neuroglial network builder with remotely controlled parallel computing</article-title>
        <source>PLoS Comput. Biol.</source>
        <year>2017</year>
        <volume>13</volume>
        <issue>3</issue>
        <fpage>e1005467</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005467</pub-id>
        <pub-id pub-id-type="pmid">28362877</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gratiy</surname>
            <given-names>SL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BioNet: A Python interface to NEURON for modeling large-scale networks</article-title>
        <source>PLoS ONE</source>
        <year>2018</year>
        <volume>13</volume>
        <issue>8</issue>
        <fpage>e0201630</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0201630</pub-id>
        <pub-id pub-id-type="pmid">30071069</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Amunts</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Human Brain Project-Synergy between neuroscience, computing, informatics, and brain-inspired technologies</article-title>
        <source>PLoS Biol.</source>
        <year>2019</year>
        <volume>17</volume>
        <issue>7</issue>
        <fpage>e3000344</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pbio.3000344</pub-id>
        <pub-id pub-id-type="pmid">31260438</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gleeson</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Open source brain: A collaborative resource for visualizing, analyzing, simulating, and developing standardized models of neurons and circuits</article-title>
        <source>Neuron</source>
        <year>2019</year>
        <volume>103</volume>
        <issue>3</issue>
        <fpage>395</fpage>
        <lpage>411 e5</lpage>
        <pub-id pub-id-type="doi">10.1016/j.neuron.2019.05.019</pub-id>
        <pub-id pub-id-type="pmid">31201122</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">Neymotin, S. A. <italic>et al.</italic><italic>Human Neocortical Neurosolver</italic> (Zenodo, 2018).</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neymotin</surname>
            <given-names>SA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Multitarget multiscale simulation for pharmacological treatment of dystonia in motor cortex</article-title>
        <source>Front. Pharmacol.</source>
        <year>2016</year>
        <volume>7</volume>
        <fpage>157</fpage>
        <pub-id pub-id-type="doi">10.3389/fphar.2016.00157</pub-id>
        <pub-id pub-id-type="pmid">27378922</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cannon</surname>
            <given-names>RC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LEMS: A language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2</article-title>
        <source>Front. Neuroinform.</source>
        <year>2014</year>
        <volume>8</volume>
        <fpage>79</fpage>
        <pub-id pub-id-type="doi">10.3389/fninf.2014.00079</pub-id>
        <pub-id pub-id-type="pmid">25309419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jones</surname>
            <given-names>SR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Quantitative analysis and biophysically realistic neural modeling of the MEG mu rhythm: Rhythmogenesis and modulation of sensory-evoked responses</article-title>
        <source>J. Neurophysiol.</source>
        <year>2009</year>
        <volume>102</volume>
        <issue>6</issue>
        <fpage>3554</fpage>
        <lpage>3572</lpage>
        <pub-id pub-id-type="doi">10.1152/jn.00535.2009</pub-id>
        <pub-id pub-id-type="pmid">19812290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sivagnanam</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Introducing the neuroscience gateway</article-title>
        <source>IWSG</source>
        <year>2013</year>
        <volume>993</volume>
        <fpage>0</fpage>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neymotin</surname>
            <given-names>SA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Human Neocortical Neurosolver (HNN), a new software tool for interpreting the cellular and network origin of human MEG/EEG data</article-title>
        <source>Elife</source>
        <year>2020</year>
        <pub-id pub-id-type="doi">10.7554/eLife.51214</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ascoli</surname>
            <given-names>GA</given-names>
          </name>
        </person-group>
        <article-title>Mobilizing the base of neuroscience data: The case of neuronal morphologies</article-title>
        <source>Nat. Rev. Neurosci.</source>
        <year>2006</year>
        <volume>7</volume>
        <issue>4</issue>
        <fpage>318</fpage>
        <lpage>324</lpage>
        <pub-id pub-id-type="doi">10.1038/nrn1885</pub-id>
        <pub-id pub-id-type="pmid">16552417</pub-id>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ascoli</surname>
            <given-names>GA</given-names>
          </name>
          <name>
            <surname>Donohue</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Halavi</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>NeuroMorpho.Org: A central resource for neuronal morphologies</article-title>
        <source>J. Neurosci.</source>
        <year>2007</year>
        <volume>27</volume>
        <issue>35</issue>
        <fpage>9247</fpage>
        <lpage>9251</lpage>
        <pub-id pub-id-type="doi">10.1523/JNEUROSCI.2055-07.2007</pub-id>
        <pub-id pub-id-type="pmid">17728438</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McCauley</surname>
            <given-names>JP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Circadian modulation of neurons and astrocytes controls synaptic plasticity in hippocampal area CA1</article-title>
        <source>Cell Rep</source>
        <year>2020</year>
        <volume>33</volume>
        <issue>2</issue>
        <fpage>108255</fpage>
        <pub-id pub-id-type="doi">10.1016/j.celrep.2020.108255</pub-id>
        <pub-id pub-id-type="pmid">33053337</pub-id>
      </element-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rall</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Theory of physiological properties of dendrites</article-title>
        <source>Ann. N. Y. Acad. Sci.</source>
        <year>1962</year>
        <volume>96</volume>
        <fpage>1071</fpage>
        <lpage>1092</lpage>
        <pub-id pub-id-type="doi">10.1111/j.1749-6632.1962.tb54120.x</pub-id>
        <pub-id pub-id-type="pmid">14490041</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>D'Angelo</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>The human brain project</article-title>
        <source>Funct. Neurol.</source>
        <year>2012</year>
        <volume>27</volume>
        <issue>4</issue>
        <fpage>205</fpage>
        <pub-id pub-id-type="pmid">23597433</pub-id>
      </element-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>D'Angelo</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Realistic modeling of neurons and networks: Towards brain simulation</article-title>
        <source>Funct. Neurol.</source>
        <year>2013</year>
        <volume>28</volume>
        <issue>3</issue>
        <fpage>153</fpage>
        <lpage>166</lpage>
        <pub-id pub-id-type="pmid">24139652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kandel</surname>
            <given-names>ER</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Neuroscience thinks big (and collaboratively)</article-title>
        <source>Nat. Rev. Neurosci.</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>9</issue>
        <fpage>659</fpage>
        <pub-id pub-id-type="doi">10.1038/nrn3578</pub-id>
        <pub-id pub-id-type="pmid">23958663</pub-id>
      </element-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Markram</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>A countdown to a digital simulation of every last neuron in the human brain</article-title>
        <source>Sci. Am.</source>
        <year>2012</year>
        <volume>306</volume>
        <issue>6</issue>
        <fpage>50</fpage>
        <lpage>55</lpage>
        <pub-id pub-id-type="doi">10.1038/scientificamerican0612-50</pub-id>
      </element-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Markram</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>The human brain project</article-title>
        <source>Sci. Am.</source>
        <year>2012</year>
        <volume>306</volume>
        <issue>6</issue>
        <fpage>50</fpage>
        <lpage>55</lpage>
        <pub-id pub-id-type="doi">10.1038/scientificamerican0612-50</pub-id>
      </element-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Abbott</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Brain-simulation and graphene projects win billion-euro competition</article-title>
        <source>Nature</source>
        <year>2013</year>
        <pub-id pub-id-type="doi">10.1038/nature.2013.12291</pub-id>
      </element-citation>
    </ref>
    <ref id="CR55">
      <label>55.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Underwood</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <source>Brain Project Draws Presidential Interest, but Mixed Reactions</source>
        <year>2013</year>
        <publisher-name>American Association for the Advancement of Science</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR56">
      <label>56.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hines</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Carnevale</surname>
            <given-names>NT</given-names>
          </name>
        </person-group>
        <article-title>NEURON: A tool for neuroscientists</article-title>
        <source>Neuroscientist</source>
        <year>2001</year>
        <volume>7</volume>
        <issue>2</issue>
        <fpage>123</fpage>
        <lpage>135</lpage>
        <pub-id pub-id-type="doi">10.1177/107385840100700207</pub-id>
        <pub-id pub-id-type="pmid">11496923</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
