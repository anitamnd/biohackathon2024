<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with OASIS Tables with MathML3 v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-archive-oasis-article1-mathml3.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats-oasis2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Curr Protoc</journal-id>
    <journal-id journal-id-type="iso-abbrev">Curr Protoc</journal-id>
    <journal-id journal-id-type="doi">10.1002/(ISSN)2691-1299</journal-id>
    <journal-id journal-id-type="publisher-id">CPZ1</journal-id>
    <journal-title-group>
      <journal-title>Current Protocols</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2691-1299</issn>
    <publisher>
      <publisher-name>John Wiley and Sons Inc.</publisher-name>
      <publisher-loc>Hoboken</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9196995</article-id>
    <article-id pub-id-type="pmid">35567771</article-id>
    <article-id pub-id-type="doi">10.1002/cpz1.442</article-id>
    <article-id pub-id-type="publisher-id">CPZ1442</article-id>
    <article-categories>
      <subj-group subj-group-type="article-subject-classification">
        <subject>Bioinformatics</subject>
      </subj-group>
      <subj-group subj-group-type="overline">
        <subject>Protocol</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Protocol</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ntEdit+Sealer: Efficient Targeted Error Resolution and Automated Finishing of Long‐Read Genome Assemblies</article-title>
      <alt-title alt-title-type="left-running-head">Li et al.</alt-title>
    </title-group>
    <contrib-group>
      <contrib id="cpz1442-cr-0001" contrib-type="author" corresp="yes">
        <name>
          <surname>Li</surname>
          <given-names>Janet X.</given-names>
        </name>
        <xref rid="cpz1442-aff-0001" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="cpz1442-aff-0002" ref-type="aff">
          <sup>2</sup>
        </xref>
        <address>
          <email>janli@bcgsc.ca</email>
        </address>
      </contrib>
      <contrib id="cpz1442-cr-0002" contrib-type="author">
        <name>
          <surname>Coombe</surname>
          <given-names>Lauren</given-names>
        </name>
        <xref rid="cpz1442-aff-0001" ref-type="aff">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib id="cpz1442-cr-0003" contrib-type="author">
        <name>
          <surname>Wong</surname>
          <given-names>Johnathan</given-names>
        </name>
        <xref rid="cpz1442-aff-0001" ref-type="aff">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib id="cpz1442-cr-0004" contrib-type="author">
        <name>
          <surname>Birol</surname>
          <given-names>Inanç</given-names>
        </name>
        <xref rid="cpz1442-aff-0001" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="cpz1442-aff-0003" ref-type="aff">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib id="cpz1442-cr-0005" contrib-type="author">
        <name>
          <surname>Warren</surname>
          <given-names>René L.</given-names>
        </name>
        <xref rid="cpz1442-aff-0001" ref-type="aff">
          <sup>1</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="cpz1442-aff-0001">
      <label>
        <sup>1</sup>
      </label>
      <institution>Canada's Michael Smith Genome Sciences Center</institution>
      <city>Vancouver</city>
      <named-content content-type="country-part">BC</named-content>
      <country country="CA">Canada</country>
    </aff>
    <aff id="cpz1442-aff-0002">
      <label>
        <sup>2</sup>
      </label>
      <named-content content-type="organisation-division">Bioinformatics Graduate Program</named-content>
      <institution>University of British Columbia</institution>
      <city>Vancouver</city>
      <named-content content-type="country-part">BC</named-content>
      <country country="CA">Canada</country>
    </aff>
    <aff id="cpz1442-aff-0003">
      <label>
        <sup>3</sup>
      </label>
      <named-content content-type="organisation-division">Department of Medical Genetics</named-content>
      <institution>University of British Columbia</institution>
      <city>Vancouver</city>
      <named-content content-type="country-part">BC</named-content>
      <country country="CA">Canada</country>
    </aff>
    <author-notes>
      <corresp id="correspondenceTo"><label>*</label>Corresponding author: <email>janli@bcgsc.ca</email><break/></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>14</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="ppub">
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <volume>2</volume>
    <issue seq="90">5</issue>
    <issue-id pub-id-type="doi">10.1002/cpz1.v2.5</issue-id>
    <elocation-id>e442</elocation-id>
    <permissions>
      <!--&#x000a9; 2022 Wiley Periodicals LLC.-->
      <copyright-statement content-type="article-copyright">© 2022 The Authors. Current Protocols published by Wiley Periodicals LLC.</copyright-statement>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link> License, which permits use, distribution and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="file:CPZ1-2-0.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>High‐quality genome assemblies are crucial to many biological studies, and utilizing long sequencing reads can help achieve higher assembly contiguity. While long reads can resolve complex and repetitive regions of a genome, their relatively high associated error rates are still a major limitation. Long reads generally produce draft genome assemblies with lower base quality, which must be corrected with a genome polishing step. Hybrid genome polishing solutions can greatly improve the quality of long‐read genome assemblies by utilizing more accurate short reads to validate bases and correct errors. Currently available hybrid polishing methods rely on read alignments, and are therefore memory‐intensive and do not scale well to large genomes. Here we describe ntEdit+Sealer, an alignment‐free, <italic toggle="yes">k</italic>‐mer‐based genome finishing protocol that employs memory‐efficient Bloom filters. The protocol includes ntEdit for correcting base errors and small indels, and for marking potentially problematic regions, then Sealer for filling both assembly gaps and problematic regions flagged by ntEdit. ntEdit+Sealer produces highly accurate, error‐corrected genome assemblies, and is available as a Makefile pipeline from <ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol" ext-link-type="uri">https://github.com/bcgsc/ntedit_sealer_protocol</ext-link>. © 2022 The Authors. Current Protocols published by Wiley Periodicals LLC.</p>
      <p><bold>Basic Protocol</bold>: Automated long‐read genome finishing with short reads</p>
      <p><bold>Support Protocol</bold>: Selecting optimal values for <italic toggle="yes">k‐</italic>mer lengths (<italic toggle="yes">k</italic>) and Bloom filter size (<italic toggle="yes">b</italic>)</p>
    </abstract>
    <kwd-group kwd-group-type="author-generated">
      <kwd id="cpz1442-kwd-0001">assembly finishing</kwd>
      <kwd id="cpz1442-kwd-0002">Bloom filter</kwd>
      <kwd id="cpz1442-kwd-0003">hybrid assembly polishing</kwd>
      <kwd id="cpz1442-kwd-0004"><italic toggle="yes">k</italic>‐mer</kwd>
      <kwd id="cpz1442-kwd-0005">long‐read genome assembly</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="funding-0001">
        <funding-source>Genome BC</funding-source>
      </award-group>
      <award-group id="funding-0002">
        <funding-source>
          <institution-wrap>
            <institution>Genome Canada
</institution>
            <institution-id institution-id-type="doi">10.13039/100008762</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>281ANV</award-id>
        <award-id>243FOR</award-id>
      </award-group>
      <award-group id="funding-0003">
        <funding-source>
          <institution-wrap>
            <institution>National Institutes of Health
</institution>
            <institution-id institution-id-type="doi">10.13039/100000002</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>2R01HG007182‐04A1</award-id>
      </award-group>
    </funding-group>
    <counts>
      <fig-count count="1"/>
      <table-count count="4"/>
      <page-count count="13"/>
      <word-count count="5352"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>source-schema-version-number</meta-name>
        <meta-value>2.0</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>cover-date</meta-name>
        <meta-value>May 2022</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>details-of-publishers-convertor</meta-name>
        <meta-value>Converter:WILEY_ML3GV2_TO_JATSPMC version:6.2.0 mode:remove_FC converted:07.10.2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <p content-type="self-citation">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0018"><string-name><surname>Li</surname>, <given-names>J. X.</given-names></string-name>, <string-name><surname>Coombe</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Wong</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name>, &amp; <string-name><surname>Warren</surname>, <given-names>R. L.</given-names></string-name> (<year>2022</year>). <article-title>ntEdit+Sealer: Efficient targeted error resolution and automated finishing of long‐read genome assemblies</article-title>. <source>Current Protocols</source>, <volume>2</volume>, <elocation-id>e442</elocation-id>. doi: <pub-id pub-id-type="doi">10.1002/cpz1.442</pub-id>
<pub-id pub-id-type="pmid">35567771</pub-id></mixed-citation>
    </p>
  </notes>
</front>
<body>
  <sec id="cpz1442-sec-0010">
    <title>INTRODUCTION</title>
    <p>High‐quality genomes have enabled many recent advances in the broader life sciences. Genome assemblies provide a wealth of information for clinical applications, comparative genomics, population studies, and other research areas. Long‐read or third‐generation sequencing technologies from Oxford Nanopore Technologies Ltd. (ONT, Oxford, UK) and Pacific Biosciences of California, Inc. (PacBio) have drastically improved in cost and throughput over the past several years, and these improvements have allowed these technologies to be adopted in a broad range of applications (van Dijk, Jaszczyszyn, Naquin, &amp; Thermes, <xref rid="cpz1442-bib-0014" ref-type="bibr">2018</xref>) and genomics studies (Logsdon, Vollger, &amp; Eichler, <xref rid="cpz1442-bib-0007" ref-type="bibr">2020</xref>). The major advantage of long reads over short Illumina reads, the current gold standard, is their length. Long sequencing reads can span several thousands to millions of nucleotides, while Illumina reads are usually 150‐250 base pairs (bp) long. Long reads provide valuable long‐range genomic information that greatly benefits <italic toggle="yes">de novo</italic> genome assembly projects, resolving repetitive regions to achieve high contiguity (Amarasinghe et al., <xref rid="cpz1442-bib-0001" ref-type="bibr">2020</xref>). However, the appreciable error rate of long reads relative to short reads remains a major limitation to this day, with a mean accuracy of 87%‐99% depending on sequencing platform, chemistry, and base‐calling method (Logsdon et al., <xref rid="cpz1442-bib-0007" ref-type="bibr">2020</xref>).</p>
    <p>High base accuracy in genome assemblies is crucial for annotating functional elements and calling variants, for example. Therefore, long‐read genome assemblies often undergo a genome polishing step to improve their base quality. Several genome polishing methods employ a hybrid approach, using more accurate short reads to correct long‐read genome assemblies. Some notable examples of hybrid genome polishing tools include Pilon (Walker et al., <xref rid="cpz1442-bib-0016" ref-type="bibr">2014</xref>) and Racon (Vaser, Sović, Nagarajan, &amp; Šikić, <xref rid="cpz1442-bib-0015" ref-type="bibr">2017</xref>). Both tools rely on read alignments for identifying and correcting erroneous regions. While read alignments are information‐rich, they are also highly memory intensive and therefore not practical for organisms with large genomes. There is a need for scalable and automated tools to polish and finish long‐read genome assemblies.</p>
    <p>Here we describe a scalable and alignment‐free protocol for correcting base errors and resolving problematic regions in long‐read genome assemblies using short reads. This protocol relies on Bloom filters, a probabilistic data structure that stores and tests for elements in a set in constant time (Bloom, <xref rid="cpz1442-bib-0002" ref-type="bibr">1970</xref>). The protocol includes the assembly correction tools ntEdit (Warren et al., <xref rid="cpz1442-bib-0017" ref-type="bibr">2019</xref>) and Sealer (Paulino et al., <xref rid="cpz1442-bib-0010" ref-type="bibr">2015</xref>), and is called ntEdit+Sealer. Additionally, ntHits (Mohamadi, Chu, Coombe, Warren, &amp; Birol, <xref rid="cpz1442-bib-0008" ref-type="bibr">2020</xref>) and ABySS‐Bloom (Jackman et al., <xref rid="cpz1442-bib-0006" ref-type="bibr">2017</xref>) are required for creating Bloom filters from short read <italic toggle="yes">k</italic>‐mers for the respective tools. A general overview of the ntEdit+Sealer genome finishing protocol is presented in Figure <xref rid="cpz1442-fig-0001" ref-type="fig">1</xref>. We will illustrate this protocol with an <italic toggle="yes">Escherichia coli</italic> strain NDM5 dataset obtained from the NCBI Sequencing Read Archive (SRA; Accession: SAMN21398207). We provide instructions for installing the required software, both from package managers and manually, in the Strategic Planning section. Additionally, we provide a <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref> with guidelines for selecting optimal parameter values for the protocol.</p>
    <fig position="float" fig-type="Figure" id="cpz1442-fig-0001">
      <label>Figure 1</label>
      <caption>
        <p>ntEdit+Sealer genome finishing pipeline. ntHits extracts <italic toggle="yes">k</italic>‐mers from short reads and creates a Bloom filter. ntEdit queries assembly <italic toggle="yes">k</italic>‐mers in the short‐read Bloom filter, making base corrections where possible and flagging problematic stretches of sequences. ABySS‐Bloom extracts <italic toggle="yes">k</italic>‐mers and creates another Bloom filter, which is used by Sealer as an implicit de Bruijn graph to fill assembly gaps and problematic regions flagged by ntEdit.</p>
      </caption>
      <graphic xlink:href="CPZ1-2-0-g001" position="anchor" id="jats-graphic-1"/>
    </fig>
    <p>The output of ntEdit+Sealer is a polished long‐read genome assembly with sequence gaps closed. The ntEdit+Sealer protocol provides an accessible solution for correcting errors and producing high quality genome assemblies from long‐ and short‐read sequencing data. This will allow users to take full advantage of the benefits of both technologies. We expect this genome assembly finishing protocol to be invaluable for hybrid sequencing efforts in pursuit of producing contiguous and accurate genome assemblies.</p>
  </sec>
  <sec id="cpz1442-sec-0020">
    <title>STRATEGIC PLANNING</title>
    <sec id="cpz1442-sec-0030">
      <title>Necessary Hardware</title>
      <p>ntEdit+Sealer is a command‐line‐based protocol that requires a 64‐bit Linux or Mac operating system and a sufficient amount of RAM and disk space for generating and storing Bloom filters. Requirements will depend on the genome size of the specific organism under study. The peak memory usage is approximately equal to the size of the Bloom filter generated by ABySS‐Bloom. Guidelines for determining this Bloom filter size are described in the <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref>.</p>
    </sec>
    <sec id="cpz1442-sec-0040">
      <title>Software Installation</title>
      <p>The ntEdit+Sealer genome finishing protocol requires three software packages and their dependencies:
<list list-type="bullet" id="cpz1442-list-0001"><list-item><p>ntHits v0.0.1+ (<ext-link xlink:href="https://github.com/bcgsc/nthits" ext-link-type="uri">https://github.com/bcgsc/nthits</ext-link>)</p></list-item><list-item><p>ntEdit v1.3.5+ (<ext-link xlink:href="https://github.com/bcgsc/ntEdit" ext-link-type="uri">https://github.com/bcgsc/ntEdit</ext-link>)</p></list-item><list-item><p>ABySS v2.3.2+; contains Sealer and ABySS‐Bloom (<ext-link xlink:href="https://github.com/bcgsc/abyss" ext-link-type="uri">https://github.com/bcgsc/abyss</ext-link>)</p></list-item></list>
</p>
      <p>All tools can be installed using the Conda or Homebrew package managers, as well as by manually cloning and compiling the source code from Github. The protocol is implemented as a Makefile (GNU Make) pipeline available on Github at <ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol" ext-link-type="uri">https://github.com/bcgsc/ntedit_sealer_protocol</ext-link>.</p>
      <sec id="cpz1442-sec-0050">
        <title>Option A: Installation using the Conda package manager</title>
        <p>Installation via the Conda package manager (Miniconda) is recommended. Conda allows easy installation of tools and their dependencies into standalone environments. Miniconda is a minimal, lightweight installation for Conda and can be obtained freely from <ext-link xlink:href="https://docs.conda.io/en/latest/miniconda.html" ext-link-type="uri">https://docs.conda.io/en/latest/miniconda.html</ext-link>. Once Miniconda is installed, create a new environment for the protocol with the following commands:
<list list-type="simple" id="cpz1442-list-0002"><list-item><p><monospace>conda create ‐n ntedit_sealer python=3.7</monospace></p></list-item><list-item><p><monospace>conda activate ntedit_sealer</monospace></p></list-item></list>
</p>
        <p>ntHits, ntEdit and ABySS can then be installed from the bioconda channel:
<list list-type="simple" id="cpz1442-list-0003"><list-item><p><monospace>conda install ‐c bioconda "nthits&gt;=0.0.1" "ntedit&gt;=1.3.5" "abyss&gt;=2.3.2"</monospace></p></list-item></list>
</p>
        <p>This command will install all three tools into the <monospace>ntedit_sealer</monospace> environment. This environment must be activated prior to running the protocol with the command <monospace>conda activate ntedit_sealer</monospace>.</p>
      </sec>
      <sec id="cpz1442-sec-0060">
        <title>Option B: Installation using the Homebrew package manager</title>
        <p>The three packages are also available on Homebrew. The Homebrew package manager can be obtained freely from <ext-link xlink:href="https://brew.sh" ext-link-type="uri">https://brew.sh</ext-link>. Once Homebrew is installed and configured, the required tools can be installed with the following commands:
<list list-type="simple" id="cpz1442-list-0004"><list-item><p><monospace>brew tap brewsci/bio</monospace></p></list-item><list-item><p><monospace>brew install nthits ntedit abyss</monospace></p></list-item></list>
</p>
      </sec>
      <sec id="cpz1442-sec-0070">
        <title>Option C: Manual installation from Github</title>
        <p>Since all tools are written in C++, several dependencies are required for compilation:
<list list-type="bullet" id="cpz1442-list-0005"><list-item><p>Autoconf (<ext-link xlink:href="https://www.gnu.org/software/autoconf" ext-link-type="uri">https://www.gnu.org/software/autoconf</ext-link>)</p></list-item><list-item><p>Automake (<ext-link xlink:href="https://www.gnu.org/software/automake" ext-link-type="uri">https://www.gnu.org/software/automake</ext-link>)</p></list-item><list-item><p>A C++ compiler that supports OpenMP, such as GCC 4.2 or greater (<ext-link xlink:href="https://gcc.gnu.org" ext-link-type="uri">https://gcc.gnu.org</ext-link>)</p></list-item></list>
</p>
        <p>ABySS requires the following additional libraries:
<list list-type="bullet" id="cpz1442-list-0006"><list-item><p>Boost (<ext-link xlink:href="https://www.boost.org" ext-link-type="uri">https://www.boost.org</ext-link>)</p></list-item><list-item><p>OpenMPI (<ext-link xlink:href="https://www.open-mpi.org" ext-link-type="uri">https://www.open‐mpi.org</ext-link>)</p></list-item><list-item><p>Sparsehash (<ext-link xlink:href="https://github.com/sparsehash/sparsehash" ext-link-type="uri">https://github.com/sparsehash/sparsehash</ext-link>)</p></list-item></list>
</p>
        <sec id="cpz1442-sec-0080">
          <title>ntHits</title>
          <p>
            <list list-type="simple" id="cpz1442-list-0007">
              <list-item>
                <p>
                  <monospace>git clone https://github.com/bcgsc/ntHits.git</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd ntHits</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>./autogen.sh</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>./configure ‐‐prefix=/path/to/ntHits</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>make</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>make install</monospace>
                </p>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="cpz1442-sec-0090">
          <title>ntEdit</title>
          <p>
            <list list-type="simple" id="cpz1442-list-0008">
              <list-item>
                <p>
                  <monospace>git clone https://github.com/bcgsc/ntEdit.git</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd ntEdit</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>make ntedit</monospace>
                </p>
              </list-item>
            </list>
          </p>
        </sec>
        <sec id="cpz1442-sec-0100">
          <title>ABySS</title>
          <p>
            <list list-type="simple" id="cpz1442-list-0009">
              <list-item>
                <p>
                  <monospace>git clone https://github.com/bcgsc/abyss.git</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd abyss</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>./autogen.sh</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>mkdir build</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>cd build</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>../configure ‐‐prefix=/path/to/abyss</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>make</monospace>
                </p>
              </list-item>
              <list-item>
                <p>
                  <monospace>make install</monospace>
                </p>
              </list-item>
            </list>
          </p>
          <p>For ntHits and ABySS, the <monospace>‐‐prefix</monospace> parameter of the configure script defines the path at which the tool will be installed. With sudo privileges, when this parameter is excluded the tool will install into <monospace>/usr/local</monospace>.</p>
        </sec>
      </sec>
      <sec id="cpz1442-sec-0110">
        <title>Final steps after all dependencies are installed (i.e., after Option A, B or C)</title>
        <p>The ntEdit+Sealer repository must also be downloaded after ensuring that the dependencies have been installed according to options A, B, or C, listed in the section above. The ntEdit+Sealer protocol is implemented as a Makefile pipeline, which is a wrapper for the ntHits, ntEdit, ABySS‐Bloom, and Sealer commands. The repository includes additional scripts required for integrating the tools and processing input files. The scripts can be cloned from Github and do not require any compilation:
<list list-type="simple" id="cpz1442-list-0010"><list-item><p><monospace>git clone https://github.com/bcgsc/ntedit_sealer_protocol.git</monospace></p></list-item></list>
</p>
        <p>To run the tools outside of their directories, their executables must be added to your <monospace>PATH</monospace> environment variable:
<list list-type="simple" id="cpz1442-list-0011"><list-item><p><monospace>PATH=/path/to/ntedit_sealer_protocol:/path/to/ntHits/bin:path/to/ntEdit:/path/to/abyss/bin:$PATH</monospace></p></list-item></list>
</p>
        <p>More detailed instructions for installing the packages can be found in their respective Github repositories.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="protocol" id="cpz1442-prot-0001" specific-use="basic">
    <title>AUTOMATED LONG‐READ GENOME FINISHING WITH SHORT READS</title>
    <p>This <xref rid="cpz1442-prot-0001" ref-type="sec">Basic Protocol</xref> describes how to run ntEdit+Sealer with the protocol Makefile to polish and correct errors in a long‐read genome assembly using short reads. The protocol involves populating several Bloom filters with short‐read <italic toggle="yes">k</italic>‐mers for ntEdit and Sealer using several <italic toggle="yes">k‐</italic>mer sizes. After the Bloom filters are created, ntEdit is run iteratively with long to short <italic toggle="yes">k</italic> values to correct base errors and flag unfixable and problematic regions in the assembly by soft‐masking them. Unmasked sequences that are shorter than the lowest <italic toggle="yes">k</italic> value and flanked by soft‐masked regions are further soft‐masked after the ntEdit runs. Finally, Sealer is run with the same decreasing <italic toggle="yes">k</italic> values to fill in the erroneous soft‐masked regions and existing assembly gaps by traversing an implicit Bloom filter de Bruijn graph.</p>
    <p>The pipeline is invoked with a single Makefile command. We illustrate the steps with an <italic toggle="yes">E. coli</italic> strain NDM5 dataset consisting of a long‐read Shasta (Shafin et al., <xref rid="cpz1442-bib-0012" ref-type="bibr">2020</xref>) assembly generated from ONT MinION reads and paired‐end Illumina MiSeq reads for assembly finishing. Additionally, we demonstrate how to analyze the draft and finished assemblies with QUAST (Gurevich, Saveliev, Vyahhi, &amp; Tesler, <xref rid="cpz1442-bib-0005" ref-type="bibr">2013</xref>).</p>
    <sec id="cpz1442-prs1-0001">
      <title>Necessary Resources</title>
      <sec id="cpz1442-prs1-0002">
        <title>Hardware</title>
        <p>
          <list list-type="simple" id="cpz1442-list-0012">
            <list-item>
              <p>A server or machine running a 64‐bit Linux or Mac operating system with a sufficient amount of disk space and RAM (see <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref> for more details).</p>
            </list-item>
          </list>
        </p>
      </sec>
    </sec>
    <sec id="cpz1442-prs1-0003">
      <title>Software</title>
      <p>The following packages and their dependencies must be installed and be referenced to in your <monospace>PATH</monospace> environment variable:
<list list-type="bullet" id="cpz1442-list-0013"><list-item><p>sra‐tools v2.9.1+ (<ext-link xlink:href="https://github.com/ncbi/sra-tools" ext-link-type="uri">https://github.com/ncbi/sra‐tools</ext-link>)</p></list-item><list-item><p>ntHits v0.0.1+ (<ext-link xlink:href="https://github.com/bcgsc/nthits" ext-link-type="uri">https://github.com/bcgsc/nthits</ext-link>)</p></list-item><list-item><p>ntEdit v1.3.5+ (<ext-link xlink:href="https://github.com/bcgsc/ntEdit" ext-link-type="uri">https://github.com/bcgsc/ntEdit</ext-link>)</p></list-item><list-item><p>ABySS v2.3.2+ (<ext-link xlink:href="https://github.com/bcgsc/abyss" ext-link-type="uri">https://github.com/bcgsc/abyss</ext-link>)</p></list-item><list-item><p>ntEdit+Sealer protocol v1.0.0+ (<ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol" ext-link-type="uri">https://github.com/bcgsc/ntedit_sealer_protocol</ext-link>)</p></list-item><list-item><p>QUAST v5.0.0+ (<ext-link xlink:href="https://github.com/ablab/quast" ext-link-type="uri">https://github.com/ablab/quast</ext-link>)</p></list-item></list>
</p>
    </sec>
    <sec id="cpz1442-prs1-0004">
      <title>Files</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0014">
          <list-item>
            <p>Short sequencing reads (paired‐ or single‐end) can be provided in compressed or uncompressed FASTQ format. Paired‐end reads do not need to be interleaved. The long‐read draft genome assembly can be provided as either a multi‐ or single‐line FASTA file.</p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0005">
      <title>Sample data</title>
      <p>The example <italic toggle="yes">E. coli</italic> strain NDM5 draft genome assembly is included in the ntEdit+Sealer Protocol Github Repository under the “<monospace>demo</monospace>” subdirectory (<ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol/blob/main/demo/ecoli_shasta.fa" ext-link-type="uri">https://github.com/bcgsc/ntedit_sealer_protocol/blob/main/demo/ecoli_shasta.fa</ext-link>). The corresponding Illumina short reads will be used as demonstration for polishing and can be obtained from the NCBI Sequencing Read Archive (Accession: SRX12150405). Additionally, we will use the <italic toggle="yes">E. coli</italic> strain K‐12 substr. MG1655 reference genome assembly (Accession: GCF_000005845.2) to assess the assemblies with QUAST.</p>
    </sec>
    <sec id="cpz1442-prs1-0006">
      <title>Protocol steps</title>
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>1</label>
          <p>Install ntHits, ntEdit, ABySS, and the ntEdit+Sealer repository as outlined in the Strategic Planning section and add all binaries to your <monospace>PATH</monospace> environment variable.</p>
        </list-item>
        <list-item>
          <label>2</label>
          <p>Install protocol‐specific dependencies fasterq‐dump (part of sra‐tools) and QUAST via Conda or manually. Ensure sra‐tools v2.9.1 or newer is installed in order to obtain fasterq‐dump, a more performant, multi‐threaded version of fastq‐dump. If the correct version cannot be installed, fastq‐dump can be used as a replacement (see step 3 below for details). If installing the tools manually, the executables must be added to your PATH environment variable.</p>
        </list-item>
      </list>
    </sec>
    <sec id="cpz1442-prs1-0007">
      <title>Option A: Installation using the Conda package manager</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0015">
          <list-item>
            <p>If Option A of the Strategic Planning section was used to install ntHits, ntEdit, and ABySS, dependencies may be installed into the same environment. Otherwise, a new Conda environment should be created. The Conda environment must be activated (using <monospace>conda activate &lt;env name&gt;</monospace>) prior to installing the tools.</p>
          </list-item>
        </list>
      </p>
      <p>
        <list list-type="simple" id="cpz1442-list-0016">
          <list-item>
            <p>
              <monospace>conda install ‐c bioconda "sra‐tools&gt;=2.9.1" "quast&gt;=5.0.0"</monospace>
            </p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0008">
      <title>Option B: Manual installation</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0017">
          <list-item>
            <p>
              <bold>
                <italic toggle="yes">sra‐tools</italic>
              </bold>
            </p>
          </list-item>
          <list-item>
            <p>Identify the correct version of the SRA Toolkit for your operating system from <ext-link xlink:href="https://github.com/ncbi/sra-tools/wiki/01.-Downloading-SRA-Toolkit" ext-link-type="uri">https://github.com/ncbi/sra‐tools/wiki/01.‐Downloading‐SRA‐Toolkit</ext-link>, and replace the URL if necessary.</p>
          </list-item>
        </list>
      </p>
      <p>
        <list list-type="simple" id="cpz1442-list-0018">
          <list-item>
            <p>
              <monospace>wget https://ftp‐trace.ncbi.nlm.nih.gov/sra/sdk/3.0.0/sratoolkit.3.0.0‐centos_linux64.tar.gz</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>tar ‐xzf sratoolkit.3.0.0‐centos_linux64.tar.gz</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>export PATH=/path/to/sratoolkit.3.0.0‐centos_linux64/bin:$PATH</monospace>
            </p>
          </list-item>
        </list>
      </p>
      <p>
        <bold>
          <italic toggle="yes">QUAST</italic>
        </bold>
        <list list-type="simple" id="cpz1442-list-0019">
          <list-item>
            <p>
              <monospace>wget https://github.com/ablab/quast/releases/download/quast_5.0.2/quast‐5.0.2.tar.gz</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>tar ‐xzf quast‐5.0.2.tar.gz</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>export PATH=/path/to/quast:$PATH</monospace>
            </p>
          </list-item>
        </list>
      </p>
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>3</label>
          <p>Create a new directory for running the ntEdit+Sealer protocol. Enter the new directory, soft‐link the draft genome assembly from the ntEdit+Sealer repository and download the reference genome assembly and short reads.
<list list-type="simple" id="cpz1442-list-0020"><list-item><p><monospace>mkdir ecoli_demo</monospace></p></list-item><list-item><p><monospace>cd ecoli_demo</monospace></p></list-item><list-item><p><monospace>ln ‐s /path/to/ntedit_sealer_protocol/demo/ecoli_shasta.fa</monospace></p></list-item><list-item><p><monospace>wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/005/845/GCF_000005845.2_ASM584v2/GCF_000005845.2_ASM584v2_genomic.fna.gz</monospace></p></list-item><list-item><p><monospace>fasterq‐dump SRR15859208</monospace></p><p content-type="annotation">The <monospace>fasterq‐dump</monospace> command will download the short reads into two separate FASTQ files. These files are named according the SRA run accession number (i.e., <monospace>SRR15859208_1.fastq</monospace> and <monospace>SRR15859208_2.fastq</monospace> for the forward and reverse reads, respectively). If, for some reason, the correct version of sra‐tools and fasterq‐dump cannot be installed, fastq‐dump may be used instead with the following command: <monospace>fastq‐dump SRR15859208 ‐‐split‐3 ‐‐skip‐technical.</monospace>
</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <label>4</label>
          <p>Run the ntEdit+Sealer Makefile with the “finish” command to polish and fill the draft assembly <monospace>ecoli_shasta.fa</monospace> with the two reads files <monospace>SRR15859208_1.fastq</monospace> and <monospace>SRR15859208_2.fastq</monospace>. Specify <italic toggle="yes">k</italic>‐mer lengths of 80, 65 and 50 with the <monospace>k</monospace> parameter, and a Bloom filter size of 200 MB with the <monospace>b</monospace> parameter. The protocol should take approximately 5 min to complete and requires under 550 MB of RAM, so can easily be run on a modern laptop or desktop computer.
<list list-type="simple" id="cpz1442-list-0021"><list-item><p><monospace>ntedit‐sealer finish seqs=ecoli_shasta.fa \</monospace></p></list-item><list-item><p><monospace>reads="SRR15859208_1.fastq SRR15859208_2.fastq" \</monospace></p></list-item><list-item><p><monospace>k="80 65 50" b=200M</monospace></p><p content-type="annotation">Ensure that quotation marks are used to enclose lists of parameter values (i.e., read files and k‐mer lengths), and that individual items in lists are space‐separated. k‐mer lengths must be passed in decreasing order. The command will run (1) ntHits and ABySS‐bloom to populate Bloom filters from the short reads, (2) a Bash script to call ntEdit iteratively with decreasing k, (3) a Python script to consolidate (soft‐mask) sequences shorter than the lowest k that are flanked by soft‐masked regions, and finally (4) Sealer.</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <label>5</label>
          <p>Ensure that the ntEdit+Sealer run completes successfully. Successful completion will result in the Makefile reporting “<monospace>ntEdit and Sealer polishing steps complete! Polished assembly can be found in: ecoli_shasta.ntedit_edited.prepd.sealer_scaffold.fa</monospace>”.</p>
        </list-item>
        <list-item>
          <label>6</label>
          <p>Run QUAST to analyze the draft and ntEdit+Sealer‐finished genome assemblies.
<list list-type="simple" id="cpz1442-list-0022"><list-item><p><monospace>quast ‐‐fast ‐r GCF_000005845.2_ASM584v2_genomic.fna.gz \</monospace></p></list-item><list-item><p><monospace>‐o ecoli_quast ecoli_shasta.fa \</monospace></p></list-item><list-item><p><monospace>ecoli_shasta.ntedit_edited.prepd.sealer_scaffold.fa</monospace></p><p content-type="annotation">All QUAST output files will be printed to the <monospace>ecoli_quast</monospace> directory, specified by the <monospace>‐o</monospace> parameter. A summary report will be printed in tab‐separated format to a file named <monospace>report.tsv</monospace>, where each column describes one of the input assemblies. The “# mismatches per 100 kbp” metric in this summary describes the base accuracy of the draft and finished assemblies compared to the reference. The “# indels per 100 kbp” metric describes the average proportion of insertions or deletions of either assembly compared to the reference. The expected values for these metrics are shown in Table <xref rid="cpz1442-tbl-0001" ref-type="table">1</xref>. If QUAST was installed manually, the executable will be <monospace>quast.py</monospace>.</p></list-item></list>
</p>
        </list-item>
      </list>
      <table-wrap position="float" id="cpz1442-tbl-0001" content-type="Table">
        <label>Table 1</label>
        <caption>
          <p>Number of Mismatches and Indels per 100 kbp for <italic toggle="yes">E. coli</italic> Assembly Before and After Finishing with ntEdit+Sealer<xref rid="cpz1442-tbl1-note-0001" ref-type="table-fn"><sup><italic toggle="yes">a</italic></sup></xref>
</p>
        </caption>
        <table frame="hsides" rules="groups">
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <thead>
            <tr style="border-bottom:solid 1px #000000">
              <th align="left" rowspan="1" colspan="1"/>
              <th align="left" rowspan="1" colspan="1">Draft assembly</th>
              <th align="left" rowspan="1" colspan="1">After ntEdit+Sealer</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" rowspan="1" colspan="1"># mismatches per 100 kbp</td>
              <td align="left" rowspan="1" colspan="1">371.33</td>
              <td align="left" rowspan="1" colspan="1">345.86</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1"># indels per 100 kbp</td>
              <td align="left" rowspan="1" colspan="1">122.38</td>
              <td align="left" rowspan="1" colspan="1">7.22</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="cpz1442-tbl1-note-0001">
            <label>
              <sup>
                <italic toggle="yes">a</italic>
              </sup>
            </label>
            <p>Running ntEdit+Sealer assembly finishing protocol decreases the proportion of mismatched bases and the proportion of indels in the <italic toggle="yes">E. coli</italic> genome assembly.</p>
          </fn>
        </table-wrap-foot>
        <permissions>
          <copyright-holder>John Wiley &amp; Sons, Ltd.</copyright-holder>
        </permissions>
      </table-wrap>
    </sec>
  </sec>
  <sec sec-type="protocol" id="cpz1442-prot-0002" specific-use="support">
    <title>SELECTING OPTIMAL VALUES for <italic toggle="yes">k‐</italic>mer LENGTHS (<italic toggle="yes">k</italic>) AND BLOOM FILTER SIZE (<italic toggle="yes">b</italic>)</title>
    <p>Both ntEdit and Sealer employ a <italic toggle="yes">k</italic>‐sweep approach, iterating from long to short <italic toggle="yes">k</italic>‐mer lengths. This approach is beneficial because different <italic toggle="yes">k</italic>‐mer lengths can provide resolution at different scales. Larger <italic toggle="yes">k</italic>‐mers can disambiguate repeats as they span longer regions, while shorter <italic toggle="yes">k</italic>‐mers are useful when the local read coverage is low and for assemblies with lower base quality. The same sequence of <italic toggle="yes">k</italic> values is used for both tools. <italic toggle="yes">k</italic>=40 is the practical lower limit for Sealer, as shorter <italic toggle="yes">k</italic> values cause its runtime to increase sharply. We find that <italic toggle="yes">k</italic>=80 generally performs well for a variety of datasets and suggest decreasing in intervals of 10‐15. Generally speaking, there is no strict upper limit for <italic toggle="yes">k</italic> (apart from the read length), so a wide range of <italic toggle="yes">k</italic>‐mer lengths can be used to achieve the best polishing results. Time and memory restrictions will be the limiting factors in these cases.</p>
    <p>ntHits will automatically select the optimal Bloom filter size for ntEdit by calculating the <italic toggle="yes">k</italic>‐mer distribution for the input reads, but ABySS‐bloom requires the desired Bloom filter size to be specified. This parameter is controlled by the <monospace>b</monospace> parameter when invoking the protocol Makefile.</p>
    <p>The optimal size of a Bloom filter depends on several factors, namely the desired false positive rate (FPR), number of hash functions used for insertion, and number of elements that will be inserted. For large Bloom filters, the FPR can be approximated (Equation <xref rid="cpz1442-disp-0001" ref-type="disp-formula">1</xref>):
<disp-formula id="cpz1442-disp-0001"><label>(1)</label><mml:math id="jats-math-1" display="block"><mml:mrow><mml:mrow><mml:mi>f</mml:mi><mml:mo linebreak="badbreak">=</mml:mo><mml:msup><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mi>e</mml:mi><mml:mfrac><mml:mrow><mml:mo>−</mml:mo><mml:mi>h</mml:mi><mml:mi>n</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:mfrac></mml:msup></mml:mrow></mml:mfenced><mml:mi>h</mml:mi></mml:msup></mml:mrow></mml:mrow></mml:math></disp-formula>
</p>
    <p>where <italic toggle="yes">f</italic> is the FPR, <italic toggle="yes">m</italic> is the size of the filter in bits, <italic toggle="yes">h</italic> is the number of hash functions, and <italic toggle="yes">n</italic> is the number of elements (Broder &amp; Mitzenmacher, <xref rid="cpz1442-bib-0003" ref-type="bibr">2004</xref>). By default, ABySS‐Bloom uses one hash function for insertion. Using this relationship and asserting <italic toggle="yes">h</italic>=1, we can approximate the optimal <italic toggle="yes">m</italic> for a given dataset and desired FPR (Equation <xref rid="cpz1442-disp-0002" ref-type="disp-formula">2</xref>):
<disp-formula id="cpz1442-disp-0002"><label>(2)</label><mml:math id="jats-math-2" display="block"><mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo linebreak="badbreak">=</mml:mo><mml:mi>C</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>l</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mfrac><mml:mrow><mml:mo>−</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>ln</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>f</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:mfrac></mml:mfenced></mml:mrow></mml:mrow></mml:math></disp-formula>
</p>
    <p>The following Bloom filter sizes (RAM) generally perform well for common model organisms:
<list list-type="bullet" id="cpz1442-list-0023"><list-item><p><italic toggle="yes">Homo sapiens</italic> (3 Gbp genome): 100 GB</p></list-item><list-item><p><italic toggle="yes">Caenorhabditis elegans</italic> (100 Mbp genome): 2.5 GB</p></list-item><list-item><p><italic toggle="yes">Escherichia coli</italic> (5 Mbp genome): 200 MB</p></list-item></list>
</p>
    <p>The optimal <monospace>b</monospace> value for other genome sizes can be interpolated from these guidelines, or can be estimated using ntCard (Mohamadi, Khan, &amp; Birol, <xref rid="cpz1442-bib-0009" ref-type="bibr">2017</xref>). ntCard is a streaming algorithm for estimating <italic toggle="yes">k</italic>‐mer frequencies in genomic datasets and can be used to determine the number of unique <italic toggle="yes">k</italic>‐mers in a set of short reads. ABySS‐Bloom creates a 2‐level cascading Bloom filter (Salikhov, Sacomoto, &amp; Kucherov, <xref rid="cpz1442-bib-0011" ref-type="bibr">2014</xref>) from short‐read <italic toggle="yes">k</italic>‐mers; this means that only <italic toggle="yes">k</italic>‐mers appearing two or more times are accounted for. Therefore, only <italic toggle="yes">k</italic>‐mers with multiplicity of 2 or more should be considered when estimating optimal Bloom filter size.</p>
    <p>The following steps in this <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref> describe how ntCard should be used to calculate the optimal Bloom filter size for a dataset, ensuring a false positive rate (FPR) of ∼0.005. The same <italic toggle="yes">E. coli</italic> short reads from the <xref rid="cpz1442-prot-0001" ref-type="sec">Basic Protocol</xref> will be used to demonstrate this protocol.</p>
    <sec id="cpz1442-prs1-0009">
      <title>Necessary Resources</title>
      <sec id="cpz1442-prs1-0010">
        <title>Hardware</title>
        <p>
          <list list-type="simple" id="cpz1442-list-0024">
            <list-item>
              <p>A server or machine running a 64‐bit Linux or Mac operating system capable of running ntCard.</p>
            </list-item>
          </list>
        </p>
      </sec>
    </sec>
    <sec id="cpz1442-prs1-0011">
      <title>Software</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0025">
          <list-item>
            <p>ntCard v1.2.2+ (<ext-link xlink:href="https://github.com/bcgsc/ntCard" ext-link-type="uri">https://github.com/bcgsc/ntCard</ext-link>)</p>
          </list-item>
          <list-item>
            <p><italic toggle="yes">ntCard is available on the Conda and Homebrew package managers and can also be cloned and compiled from Github</italic>.</p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0012">
      <title>Files</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0026">
          <list-item>
            <p>The short sequencing reads that will be used as input to ntEdit+Sealer will be analyzed here. The reads can be provided in compressed or uncompressed FASTQ format and paired‐end reads do not need to be interleaved.</p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0013">
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>1</label>
          <p>Install ntCard.</p>
        </list-item>
      </list>
    </sec>
    <sec id="cpz1442-prs1-0014">
      <title>Option A: Installation using the Conda package manager</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0027">
          <list-item>
            <p>
              <monospace>conda create ‐n ntcard</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>conda activate ntcard</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>conda install ‐c bioconda "ntcard&gt;=1.2.2"</monospace>
            </p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0015">
      <title>Option B: Installation using the Homebrew package manager</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0028">
          <list-item>
            <p>
              <monospace>brew install brewsci/bio/ntcard</monospace>
            </p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="cpz1442-prs1-0016">
      <title>Option C: Manual installation from Github</title>
      <p>
        <list list-type="simple" id="cpz1442-list-0029">
          <list-item>
            <p>
              <monospace>git clone https://github.com/bcgsc/ntCard.git</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>./autogen.sh</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>./configure ‐‐prefix=/path/to/ntCard</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>make</monospace>
            </p>
          </list-item>
          <list-item>
            <p>
              <monospace>make install</monospace>
            </p>
            <p content-type="annotation">The <monospace>‐‐prefix</monospace> parameter for the configure script installs ntCard to the provided path. This parameter can be excluded if you have sudo privileges and wish to install the tool into <monospace>/usr/local</monospace>. If using Conda, activate the environment that ntCard was installed to with the command <monospace>conda activate environment_name</monospace>. If manually installing ntCard to a specific directory, ensure that the path supplied to the <monospace>‐‐prefix</monospace> parameter is on your <monospace>PATH</monospace>.</p>
          </list-item>
        </list>
      </p>
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>2</label>
          <p>Run ntCard on the read files, providing all <italic toggle="yes">k</italic> values you are planning on using for ntEdit+Sealer. We will use <italic toggle="yes">k</italic>=80, <italic toggle="yes">k</italic>=65, and <italic toggle="yes">k</italic>=50.
<list list-type="simple" id="cpz1442-list-0030"><list-item><p><monospace>ntcard ‐k80,65,50 ‐p freq \</monospace></p></list-item><list-item><p><monospace>SRR15859208_1.fastq SRR15859208_2.fastq</monospace></p><p content-type="annotation">This command will generate a k‐mer distribution histogram for each k provided. Each histogram will be printed to a two‐column, tab‐separated file with the prefix <monospace>freq</monospace>, for example, <monospace>freq_k80.hist</monospace>, where the first column represents an F<sub>k</sub> metric or multiplicity and the second column contains the number of corresponding k‐mers.</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <label>3</label>
          <p>Inspect the <italic toggle="yes">k</italic>‐mer frequency histograms. Only the first three lines are necessary for our purposes.
<list list-type="simple" id="cpz1442-list-0031"><list-item><p><monospace>head ‐n 3 freq_k*.hist</monospace></p><p content-type="annotation">The first two lines of each histogram contain F<sub>k</sub> metrics, which describe statistics for the input dataset. F0 is the number of distinct k‐mers in the reads, and F1 denotes the total number of k‐mers in the dataset. The third line contains the number of k‐mers appearing once in the reads. See Table <xref rid="cpz1442-tbl-0002" ref-type="table">2</xref> for the expected values of these metrics.</p></list-item></list>
</p>
        </list-item>
      </list>
      <table-wrap position="float" id="cpz1442-tbl-0002" content-type="Table">
        <label>Table 2</label>
        <caption>
          <p>F1, F0 and Number of Multiplicity 1 <italic toggle="yes">k</italic>‐mers for <italic toggle="yes">E. coli</italic> Illumina Reads<xref rid="cpz1442-tbl2-note-0001" ref-type="table-fn"><sup><italic toggle="yes">a</italic></sup></xref>
</p>
        </caption>
        <table frame="hsides" rules="groups">
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <thead>
            <tr style="border-bottom:solid 1px #000000">
              <th align="left" rowspan="1" colspan="1">
                <italic toggle="yes">k</italic>
              </th>
              <th align="left" rowspan="1" colspan="1">F1</th>
              <th align="left" rowspan="1" colspan="1">F0</th>
              <th align="left" rowspan="1" colspan="1">1</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" rowspan="1" colspan="1">50</td>
              <td align="left" rowspan="1" colspan="1">322,869,315</td>
              <td align="left" rowspan="1" colspan="1">47,853,592</td>
              <td align="left" rowspan="1" colspan="1">41,155,307</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">65</td>
              <td align="left" rowspan="1" colspan="1">300,812,763</td>
              <td align="left" rowspan="1" colspan="1">50,900,032</td>
              <td align="left" rowspan="1" colspan="1">44,179,082</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">80</td>
              <td align="left" rowspan="1" colspan="1">278,838,102</td>
              <td align="left" rowspan="1" colspan="1">52,274,328</td>
              <td align="left" rowspan="1" colspan="1">45,577,189</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="cpz1442-tbl2-note-0001">
            <label>
              <sup>
                <italic toggle="yes">a</italic>
              </sup>
            </label>
            <p>Table values correspond to the first three rows of ntCard output histograms for 50‐mer, 65‐mer, and 80‐mer cardinality estimation of <italic toggle="yes">E. coli</italic> strain NDM5 Illumina reads.</p>
          </fn>
        </table-wrap-foot>
        <permissions>
          <copyright-holder>John Wiley &amp; Sons, Ltd.</copyright-holder>
        </permissions>
      </table-wrap>
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>4</label>
          <p>Estimate the number of <italic toggle="yes">k</italic>‐mers that appear two or more times in the reads. Subtract the number of <italic toggle="yes">k</italic>‐mers that appear only once from F0 with the following one‐liner:
<list list-type="simple" id="cpz1442-list-0032"><list-item><p><monospace>for k in 80 65 50; do distinct=$(grep “F0” freq_k$k.hist | awk '{print $2}'); once=$(grep “˄1\b” freq_k$k.hist | awk '{print $2}'); echo k=$k: n=$((${distinct} ‐ ${once})); done</monospace></p><p content-type="annotation">This command will calculate and print the number of k‐mers appearing two or more times for each k. See Table <xref rid="cpz1442-tbl-0003" ref-type="table">3</xref> for the expected values for each k.</p></list-item></list>
</p>
        </list-item>
      </list>
      <table-wrap position="float" id="cpz1442-tbl-0003" content-type="Table">
        <label>Table 3</label>
        <caption>
          <p>Number of <italic toggle="yes">k</italic>‐mers Appearing at Least Twice in <italic toggle="yes">E. coli</italic> Illumina Reads<xref rid="cpz1442-tbl3-note-0001" ref-type="table-fn"><sup><italic toggle="yes">a</italic></sup></xref>
</p>
        </caption>
        <table frame="hsides" rules="groups">
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <thead>
            <tr style="border-bottom:solid 1px #000000">
              <th align="left" rowspan="1" colspan="1">
                <italic toggle="yes">k</italic>
              </th>
              <th align="left" rowspan="1" colspan="1">n</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" rowspan="1" colspan="1">50</td>
              <td align="left" rowspan="1" colspan="1">6,697,139</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">65</td>
              <td align="left" rowspan="1" colspan="1">6,720,950</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">80</td>
              <td align="left" rowspan="1" colspan="1">6,698,285</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="cpz1442-tbl3-note-0001">
            <label>
              <sup>a</sup>
            </label>
            <p>Number of <italic toggle="yes">k</italic>‐mers with multiplicity of 2 or more calculated from ntCard output. For each <italic toggle="yes">k</italic>, n is equal to the number of unique <italic toggle="yes">k</italic>‐mers in the dataset (F0) minus the number of <italic toggle="yes">k</italic>‐mers with multiplicity of one.</p>
          </fn>
        </table-wrap-foot>
        <permissions>
          <copyright-holder>John Wiley &amp; Sons, Ltd.</copyright-holder>
        </permissions>
      </table-wrap>
      <list list-type="simple" specific-use="protocol-steps">
        <list-item>
          <label>5</label>
          <p>Calculate the optimal Bloom filter size from the <italic toggle="yes">k</italic>‐mer distributions using the largest <italic toggle="yes">n</italic> calculated in step 4 (<italic toggle="yes">k</italic>=65). This will maximize the number of unique <italic toggle="yes">k</italic>‐mers considered, and therefore produce the lowest FPR for the range of <italic toggle="yes">k</italic>, a method analogous to that employed by Kmergenie (Chikhi &amp; Medvedev, <xref rid="cpz1442-bib-0004" ref-type="bibr">2013</xref>). Using the relationship between FPR and Bloom filter density, the optimal value of <italic toggle="yes">m</italic> given an FPR (<italic toggle="yes">f</italic>) of 0.005 is (Equation <xref rid="cpz1442-disp-0003" ref-type="disp-formula">3</xref>):
<disp-formula id="cpz1442-disp-0003"><label>(3)</label><mml:math id="jats-math-3" display="block"><mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo linebreak="badbreak">=</mml:mo><mml:mi>C</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>l</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mfrac><mml:mrow><mml:mo>−</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>ln</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>f</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:mfrac></mml:mfenced><mml:mo linebreak="goodbreak">=</mml:mo><mml:mi>C</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>l</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mfrac><mml:mrow><mml:mo>−</mml:mo><mml:mn>6720950</mml:mn></mml:mrow><mml:mrow><mml:mi>ln</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mn>0.995</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:mfrac></mml:mfenced><mml:mo linebreak="goodbreak">=</mml:mo><mml:mn>1340826718</mml:mn><mml:mrow><mml:mspace/><mml:mi>bits</mml:mi></mml:mrow></mml:mrow></mml:mrow></mml:math></disp-formula>
</p>
        </list-item>
      </list>
      <p>This equates to approximately 168 MB. We rounded this estimate up to 200 MB for the example in the <xref rid="cpz1442-prot-0001" ref-type="sec">Basic Protocol</xref>.</p>
    </sec>
  </sec>
  <sec id="cpz1442-sec-0120">
    <title>GUIDELINES FOR UNDERSTANDING RESULTS</title>
    <p>The final output of ntEdit+Sealer is a base‐corrected assembly with assembly gaps closed. The file will have the suffix <monospace>.ntedit_edited.prepd.sealer_scaffold.fa</monospace>. The Makefile will exit with a non‐zero code if an error occurs during any of the intermediate steps. Otherwise, the pipeline will log a success message to inform the user of its completion.</p>
    <p>ntEdit keeps track of the base corrections made to the draft assembly, and these changes are printed for each iterative run to a tab‐separated file with the suffix <monospace>_changes.tsv</monospace>. Each iterative run will also produce an intermediate edited FASTA file. Sealer will print information about how many gaps are closed during each iterative <italic toggle="yes">k</italic> to a single file with the suffix <monospace>.sealer_log.txt</monospace>.</p>
    <p>Genome assembly assessment tools such as BUSCO (Simão, Waterhouse, Ioannidis, Kriventseva, &amp; Zdobnov, <xref rid="cpz1442-bib-0013" ref-type="bibr">2015</xref>) and QUAST (Gurevich et al., <xref rid="cpz1442-bib-0005" ref-type="bibr">2013</xref>) can be used to assess assembly correctness before and after polishing. BUSCO is a tool that quantifies the completeness of genome assemblies, transcriptomes, or gene sets with sets of evolutionarily conserved, single‐copy genes. These gene sets are referred to as Benchmarking Universal Single‐Copy Orthologs (BUSCOs) and are available for many clades across the tree of life. The presence, absence, or duplication of BUSCO members within a genome assembly provides a metric for how complete the assembly is in genic space. Polishing with ntEdit+Sealer improves the base quality and therefore should increase the percentage of complete BUSCO genes in your draft assembly. Since BUSCO only searches for conserved genes within a genome assembly, it is a favorable solution when performing <italic toggle="yes">de novo</italic> assembly for an organism without a reference genome. QUAST is a genome assembly quality‐assessment tool that produces a wide range of metrics and visualizations and is particularly beneficial when a reference genome is available. Of note, the number of mismatches per 100 kbp and number of indels per 100 kbp describe the accuracy of your genome assembly in relation to the reference. These metrics should decrease after using ntEdit+Sealer to polish and finish your draft genome, assuming the assembled genome is highly similar to the reference genome.</p>
  </sec>
  <sec sec-type="protocol-commentary" id="cpz1442-sec-0130">
    <title>COMMENTARY</title>
    <sec id="cpz1442-sec-0140">
      <title>Background Information</title>
      <p>ntEdit was developed as an assembly polishing tool (Warren et al., <xref rid="cpz1442-bib-0017" ref-type="bibr">2019</xref>), and Sealer was developed as a tool for filling gaps in genome assemblies (Paulino et al., <xref rid="cpz1442-bib-0010" ref-type="bibr">2015</xref>). New features (discussed in the Critical Parameters section) have been implemented in both tools that allow them to work harmoniously to resolve assembly errors. The multi‐step approach allows error correction at different levels of resolution. ntEdit resolves assembly errors on a small scale, correcting base errors and insertions and deletions up to 5 nucleotides in length by querying the short‐read Bloom filter for all possible edits. If none of the possible edits have sufficient support, the erroneous region is soft‐masked for further base correction by Sealer. Sealer fills the larger erroneous assembly regions, as well as existing hard‐masked assembly gaps, by traversing an implicit Bloom filter de Bruijn graph to find a path that connects the gap‐flanking sequences.</p>
      <p>Both tools employ Bloom filters, making them more memory efficient and quicker than alignment‐based approaches. Bloom filters only consist of an array of bits, thereby requiring less memory during runtime and storage. Additionally, inserting and querying for elements in Bloom filters are both constant time operations, depending only on the number of hash functions used for insertion. These characteristics make Bloom filter–based tools beneficial for storing and querying large sequencing datasets and allow the ntEdit+Sealer protocol to be accessible to groups without access to large amounts of RAM and processing power.</p>
    </sec>
    <sec id="cpz1442-sec-0150">
      <title>Critical Parameters</title>
      <p>When working with Bloom filters, the Bloom filter size and <italic toggle="yes">k</italic>‐mer length are of critical importance. The <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref> provides guidelines for selecting the optimal values for these parameters. ntEdit and Sealer must be configured to be compatible with their respective soft‐masking parameters. The soft‐masking behavior of ntEdit is controlled by setting <monospace>‐a 1</monospace>. Sealer does not recognize lower‐case (soft‐masked) characters as assembly gaps by default; the ‐‐<monospace>lower</monospace> flag dictates this behavior. The ntEdit+Sealer Makefile has these behaviors configured automatically.</p>
    </sec>
    <sec id="cpz1442-sec-0160">
      <title>Troubleshooting</title>
      <p>The Makefile should not finish running (i.e., will exit with a non‐zero status) if an error occurs during any of the intermediate steps. Carefully inspect the logs, output files, and error codes if an error occurs. See Table <xref rid="cpz1442-tbl-0004" ref-type="table">4</xref> for possible problems, causes and solutions.</p>
      <table-wrap position="float" id="cpz1442-tbl-0004" content-type="Table">
        <label>Table 4</label>
        <caption>
          <p>Sources of and Solutions to Potential Errors<xref rid="cpz1442-tbl4-note-0001" ref-type="table-fn"><sup><italic toggle="yes">a</italic></sup></xref>
</p>
        </caption>
        <table frame="hsides" rules="groups">
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <col align="left" span="1"/>
          <thead>
            <tr style="border-bottom:solid 1px #000000">
              <th align="left" rowspan="1" colspan="1">Problem</th>
              <th align="left" rowspan="1" colspan="1">Possible cause</th>
              <th align="left" rowspan="1" colspan="1">Solution</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" rowspan="1" colspan="1">ntEdit does not make any edits and/or Sealer does not fix any regions</td>
              <td align="left" rowspan="1" colspan="1">The supplied <italic toggle="yes">k</italic> values may be too low or high</td>
              <td align="left" rowspan="1" colspan="1">Sweep a larger range of <italic toggle="yes">k</italic> values. For ntEdit, check the <monospace>_changes.tsv</monospace> output files to determine which <italic toggle="yes">k</italic> values produce the most edits. For Sealer, check <monospace>.sealer_log.txt</monospace> file to determine which <italic toggle="yes">k</italic> values close the most gaps. Adjust the parameter values accordingly.</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">Sealer step takes too long</td>
              <td align="left" rowspan="1" colspan="1">The provided <italic toggle="yes">k</italic> value is too low</td>
              <td align="left" rowspan="1" colspan="1">The realistic lower‐bound for <italic toggle="yes">k</italic> is 40. Run the protocol again with higher <italic toggle="yes">k</italic> values.</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">Assembly accuracy metrics from BUSCO or QUAST deteriorate</td>
              <td align="left" rowspan="1" colspan="1">False positive rate of ABySS‐Bloom Bloom filter may be too high.</td>
              <td align="left" rowspan="1" colspan="1">Increase the Bloom filter size (<monospace>b</monospace> parameter) or try larger <italic toggle="yes">k</italic> values</td>
            </tr>
            <tr>
              <td align="left" rowspan="1" colspan="1">The ntEdit+Sealer Makefile gives the error “No rule to make target…”</td>
              <td align="left" rowspan="1" colspan="1">Parameter values or files were passed or named incorrectly</td>
              <td align="left" rowspan="1" colspan="1">Ensure input files are named correctly and that parameters are passed as expected. Run <monospace>ntedit‐sealer help</monospace> or check the ntEdit+Sealer Github page for more details.</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="cpz1442-tbl4-note-0001">
            <label>
              <sup>a</sup>
            </label>
            <p>Potential problems that a user may encounter when running ntEdit+Sealer protocol and corresponding potential causes and solutions.</p>
          </fn>
        </table-wrap-foot>
        <permissions>
          <copyright-holder>John Wiley &amp; Sons, Ltd.</copyright-holder>
        </permissions>
      </table-wrap>
      <p>If other problems arise related to the ntEdit+Sealer protocol Makefile and scripts, create a Github Issue on the ntEdit+Sealer Github page at <ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol/issues" ext-link-type="uri">https://github.com/bcgsc/ntedit_sealer_protocol/issues</ext-link>. Please address any problems related to specific tools on their respective Github Issues pages.</p>
    </sec>
    <sec id="cpz1442-sec-0180">
      <title>Author Contributions</title>
      <p><bold>Janet X. Li</bold>: software, writing original draft; <bold>Lauren Coombe</bold>: software, validation, writing review and editing; <bold>Johnathan Wong</bold>: software, writing review and editing; <bold>Inanç Birol</bold>: supervision, writing review and editing; <bold>René L. Warren</bold>: conceptualization, software, supervision, writing review and editing.</p>
    </sec>
    <sec sec-type="COI-statement" id="cpz1442-sec-0190">
      <title>Conflict of Interest</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
  </sec>
</body>
<back>
  <ack id="cpz1442-sec-0170">
    <title>Acknowledgments</title>
    <p>This work was supported by Genome BC and Genome Canada [281ANV, 243FOR] and the National Institutes of Health [2R01HG007182‐04A1]. The content of this article is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health or other funding organizations.</p>
  </ack>
  <sec sec-type="data-availability" id="cpz1442-sec-0210">
    <title>Data Availability Statement</title>
    <p>The example data used in the <xref rid="cpz1442-prot-0001" ref-type="sec">Basic Protocol</xref> and <xref rid="cpz1442-prot-0002" ref-type="sec">Support Protocol</xref> are openly available. The <italic toggle="yes">E. coli</italic> strain NDM5 Illumina short reads are available from the NCBI SRA at <ext-link xlink:href="https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR15859208" ext-link-type="uri" specific-use="software is-supplemented-by">https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR15859208</ext-link> (Accession: SRR15859208). The draft long‐read assembly was generated from MinION reads which are available from the SRA at <ext-link xlink:href="https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR15859207" ext-link-type="uri" specific-use="software is-supplemented-by">https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR15859207</ext-link> (Accession: SRR15859207). The draft assembly can be found at <ext-link xlink:href="https://github.com/bcgsc/ntedit_sealer_protocol/blob/main/demo/ecoli_shasta.fa" ext-link-type="uri" specific-use="software is-supplemented-by">https://github.com/bcgsc/ntedit_sealer_protocol/blob/main/demo/ecoli_shasta.fa</ext-link> and the <italic toggle="yes">E. coli</italic> reference assembly is available at <ext-link xlink:href="https://www.ncbi.nlm.nih.gov/assembly/GCF_000005845.2" ext-link-type="uri" specific-use="software is-supplemented-by">https://www.ncbi.nlm.nih.gov/assembly/GCF_000005845.2</ext-link> (Accession: GCF_000005845.2).</p>
  </sec>
  <ref-list id="cpz1442-bibl-0001">
    <title>Literature Cited</title>
    <ref id="cpz1442-bib-0001">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0001"><string-name><surname>Amarasinghe</surname>, <given-names>S. L.</given-names></string-name>, <string-name><surname>Su</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Dong</surname>, <given-names>X.</given-names></string-name>, <string-name><surname>Zappia</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Ritchie</surname>, <given-names>M. E.</given-names></string-name>, &amp; <string-name><surname>Gouil</surname>, <given-names>Q.</given-names></string-name> (<year>2020</year>). <article-title>Opportunities and challenges in long‐read sequencing data analysis</article-title>. <source>Genome Biology</source>, <volume>21</volume>(<issue>1</issue>), <fpage>30</fpage>. doi: <pub-id pub-id-type="doi">10.1186/s13059-020-1935-5</pub-id>.<pub-id pub-id-type="pmid">32033565</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0002">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0002"><string-name><surname>Bloom</surname>, <given-names>B. H.</given-names></string-name> (<year>1970</year>). <article-title>Space/time trade‐offs in hash coding with allowable errors</article-title>. <source>Communications of the ACM</source>, <volume>13</volume>(<issue>7</issue>), <fpage>422</fpage>–<lpage>426</lpage>. doi: <pub-id pub-id-type="doi">10.1145/362686.362692</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0003">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0003"><string-name><surname>Broder</surname>, <given-names>A.</given-names></string-name>, &amp; <string-name><surname>Mitzenmacher</surname>, <given-names>M.</given-names></string-name> (<year>2004</year>). <article-title>Network applications of Bloom filters: A survey</article-title>. <source>Internet Mathematics</source>, <volume>1</volume>(<issue>4</issue>), <fpage>485</fpage>–<lpage>509</lpage>. doi: <pub-id pub-id-type="doi">10.1080/15427951.2004.10129096</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0004">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0004"><string-name><surname>Chikhi</surname>, <given-names>R.</given-names></string-name>, &amp; <string-name><surname>Medvedev</surname>, <given-names>P.</given-names></string-name> (<year>2013</year>). <article-title>Informed and automated k‐mer size selection for genome assembly</article-title>. <source>Bioinformatics</source>, <volume>30</volume>(<issue>1</issue>). doi: <pub-id pub-id-type="doi">10.1093/bioinformatics/btt310</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0005">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0005"><string-name><surname>Gurevich</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Saveliev</surname>, <given-names>V.</given-names></string-name>, <string-name><surname>Vyahhi</surname>, <given-names>N.</given-names></string-name>, &amp; <string-name><surname>Tesler</surname>, <given-names>G.</given-names></string-name> (<year>2013</year>). <article-title>QUAST: Quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source>, <volume>29</volume>(<issue>8</issue>), <fpage>1072</fpage>–<lpage>1075</lpage>. doi: <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>.<pub-id pub-id-type="pmid">23422339</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0006">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0006"><string-name><surname>Jackman</surname>, <given-names>S. D.</given-names></string-name>, <string-name><surname>Vandervalk</surname>, <given-names>B. P.</given-names></string-name>, <string-name><surname>Mohamadi</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Chu</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Yeo</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Hammond</surname>, <given-names>S. A.</given-names></string-name>, … <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name> (<year>2017</year>). <article-title>ABySS 2.0: Resource‐efficient assembly of large genomes using a Bloom filter</article-title>. <source>Genome Research</source>, <volume>27</volume>(<issue>5</issue>), <fpage>768</fpage>–<lpage>777</lpage>. doi: <pub-id pub-id-type="doi">10.1101/gr.214346.116</pub-id>.<pub-id pub-id-type="pmid">28232478</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0007">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0007"><string-name><surname>Logsdon</surname>, <given-names>G. A.</given-names></string-name>, <string-name><surname>Vollger</surname>, <given-names>M. R.</given-names></string-name>, &amp; <string-name><surname>Eichler</surname>, <given-names>E. E.</given-names></string-name> (<year>2020</year>). <article-title>Long‐read human genome sequencing and its applications</article-title>. <source>Nature Reviews Genetics</source>, <volume>21</volume>(<issue>10</issue>), <fpage>597</fpage>–<lpage>614</lpage>. doi: <pub-id pub-id-type="doi">10.1038/s41576-020-0236-x</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0008">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0008"><string-name><surname>Mohamadi</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Chu</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Coombe</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Warren</surname>, <given-names>R.</given-names></string-name>, &amp; <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name> (<year>2020</year>). <article-title><italic toggle="yes">ntHits: De novo repeat identification of genomics data using a streaming approach</italic> (preprint)</article-title>. <source>Genomics</source>, doi: <pub-id pub-id-type="doi">10.1101/2020.11.02.365809</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0009">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0009"><string-name><surname>Mohamadi</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Khan</surname>, <given-names>H.</given-names></string-name>, &amp; <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name> (<year>2017</year>). <article-title>ntCard: A streaming algorithm for cardinality estimation in genomics data</article-title>. <source>Bioinformatics</source>, <elocation-id>btw832</elocation-id>. doi: <pub-id pub-id-type="doi">10.1093/bioinformatics/btw832</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0010">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0010"><string-name><surname>Paulino</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Warren</surname>, <given-names>R. L.</given-names></string-name>, <string-name><surname>Vandervalk</surname>, <given-names>B. P.</given-names></string-name>, <string-name><surname>Raymond</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Jackman</surname>, <given-names>S. D.</given-names></string-name>, &amp; <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name> (<year>2015</year>). <article-title>Sealer: A scalable gap‐closing application for finishing draft genomes</article-title>. <source>BMC Bioinformatics</source>, <volume>16</volume>(<issue>1</issue>), <fpage>230</fpage>. doi: <pub-id pub-id-type="doi">10.1186/s12859-015-0663-4</pub-id>.<pub-id pub-id-type="pmid">26209068</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0011">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0011"><string-name><surname>Salikhov</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Sacomoto</surname>, <given-names>G.</given-names></string-name>, &amp; <string-name><surname>Kucherov</surname>, <given-names>G.</given-names></string-name> (<year>2014</year>). <article-title>Using cascading Bloom filters to improve the memory usage for de Brujin graphs</article-title>. <source>Algorithms for Molecular Biology</source>, <volume>9</volume>(<issue>1</issue>), <fpage>2</fpage>. doi: <pub-id pub-id-type="doi">10.1186/1748-7188-9-2</pub-id>.<pub-id pub-id-type="pmid">24565280</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0012">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0012"><string-name><surname>Shafin</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Pesout</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Lorig‐Roach</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Haukness</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Olsen</surname>, <given-names>H. E.</given-names></string-name>, <string-name><surname>Bosworth</surname>, <given-names>C.</given-names></string-name>, … <string-name><surname>Paten</surname>, <given-names>B.</given-names></string-name> (<year>2020</year>). <article-title>Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>. <source>Nature Biotechnology</source>, <volume>38</volume>(<issue>9</issue>), <fpage>1044</fpage>–<lpage>1053</lpage>. doi: <pub-id pub-id-type="doi">10.1038/s41587-020-0503-6</pub-id>.</mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0013">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0013"><string-name><surname>Simão</surname>, <given-names>F. A.</given-names></string-name>, <string-name><surname>Waterhouse</surname>, <given-names>R. M.</given-names></string-name>, <string-name><surname>Ioannidis</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Kriventseva</surname>, <given-names>E. V.</given-names></string-name>, &amp; <string-name><surname>Zdobnov</surname>, <given-names>E. M.</given-names></string-name> (<year>2015</year>). <article-title>BUSCO: Assessing genome assembly and annotation completeness with single‐copy orthologs</article-title>. <source>Bioinformatics</source>, <volume>31</volume>(<issue>19</issue>), <fpage>3210</fpage>–<lpage>3212</lpage>. doi: <pub-id pub-id-type="doi">10.1093/bioinformatics/btv351</pub-id>.<pub-id pub-id-type="pmid">26059717</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0014">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0014"><string-name><surname>van Dijk</surname>, <given-names>E. L.</given-names></string-name>, <string-name><surname>Jaszczyszyn</surname>, <given-names>Y.</given-names></string-name>, <string-name><surname>Naquin</surname>, <given-names>D.</given-names></string-name>, &amp; <string-name><surname>Thermes</surname>, <given-names>C.</given-names></string-name> (<year>2018</year>). <article-title>The third revolution in sequencing technology</article-title>. <source>Trends in Genetics</source>, <volume>34</volume>(<issue>9</issue>), <fpage>666</fpage>–<lpage>681</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.tig.2018.05.008</pub-id>.<pub-id pub-id-type="pmid">29941292</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0015">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0015"><string-name><surname>Vaser</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Sović</surname>, <given-names>I.</given-names></string-name>, <string-name><surname>Nagarajan</surname>, <given-names>N.</given-names></string-name>, &amp; <string-name><surname>Šikić</surname>, <given-names>M.</given-names></string-name> (<year>2017</year>). <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>. <source>Genome Research</source>, <volume>27</volume>(<issue>5</issue>), <fpage>737</fpage>–<lpage>746</lpage>. doi: <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>.<pub-id pub-id-type="pmid">28100585</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0016">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0016"><string-name><surname>Walker</surname>, <given-names>B. J.</given-names></string-name>, <string-name><surname>Abeel</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Shea</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Priest</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Abouelliel</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Sakthikumar</surname>, <given-names>S.</given-names></string-name>, … <string-name><surname>Earl</surname>, <given-names>A. M.</given-names></string-name> (<year>2014</year>). <article-title>Pilon: An integrated tool for comprehensive microbial variant detection and genome assembly improvement</article-title>. <source>PLOS ONE</source>, <volume>9</volume>(<issue>11</issue>), <elocation-id>e112963</elocation-id>. doi: <pub-id pub-id-type="doi">10.1371/journal.pone.0112963</pub-id>.<pub-id pub-id-type="pmid">25409509</pub-id></mixed-citation>
    </ref>
    <ref id="cpz1442-bib-0017">
      <mixed-citation publication-type="journal" id="cpz1442-cit-0017"><string-name><surname>Warren</surname>, <given-names>R. L.</given-names></string-name>, <string-name><surname>Coombe</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Mohamadi</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Zhang</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Jaquish</surname>, <given-names>B.</given-names></string-name>, <string-name><surname>Isabel</surname>, <given-names>N.</given-names></string-name>, … <string-name><surname>Birol</surname>, <given-names>I.</given-names></string-name> (<year>2019</year>). <article-title>ntEdit: Scalable genome sequence polishing</article-title>. <source>Bioinformatics</source>, <volume>35</volume>(<issue>21</issue>), <fpage>4430</fpage>–<lpage>4432</lpage>. doi: <pub-id pub-id-type="doi">10.1093/bioinformatics/btz400</pub-id>.<pub-id pub-id-type="pmid">31095290</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
