<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10040096</article-id>
    <article-id pub-id-type="publisher-id">5245</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-023-05245-9</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ElasticBLAST: accelerating sequence search via cloud computing</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Camacho</surname>
          <given-names>Christiam</given-names>
        </name>
        <address>
          <email>camacho@ncbi.nlm.nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Boratyn</surname>
          <given-names>Grzegorz M.</given-names>
        </name>
        <address>
          <email>boratyng@ncbi.nlm.nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Joukov</surname>
          <given-names>Victor</given-names>
        </name>
        <address>
          <email>joukovv@ncbi.nlm.nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vera Alvarez</surname>
          <given-names>Roberto</given-names>
        </name>
        <address>
          <email>veraalva@ncbi.nlm.nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Madden</surname>
          <given-names>Thomas L.</given-names>
        </name>
        <address>
          <email>madden@ncbi.nlm.nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.280285.5</institution-id><institution-id institution-id-type="ISNI">0000 0004 0507 7840</institution-id><institution>National Center for Biotechnology Information, </institution><institution>National Library of Medicine, National Institutes of Health, </institution></institution-wrap>8600 Rockville Pike, Bethesda, MD 20894 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>26</day>
      <month>3</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>26</day>
      <month>3</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>24</volume>
    <elocation-id>117</elocation-id>
    <history>
      <date date-type="received">
        <day>4</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>21</day>
        <month>3</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© This is a U.S. Government work and not under copyright protection in the US; foreign copyright protection may apply 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Biomedical researchers use alignments produced by BLAST (Basic Local Alignment Search Tool) to categorize their query sequences. Producing such alignments is an essential bioinformatics task that is well suited for the cloud. The cloud can perform many calculations quickly as well as store and access large volumes of data. Bioinformaticians can also use it to collaborate with other researchers, sharing their results, datasets and even their pipelines on a common platform.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We present ElasticBLAST, a cloud native application to perform BLAST alignments in the cloud. ElasticBLAST can handle anywhere from a few to many thousands of queries and run the searches on thousands of virtual CPUs (if desired), deleting resources when it is done. It uses cloud native tools for orchestration and can request discounted instances, lowering cloud costs for users. It is supported on Amazon Web Services and Google Cloud Platform. It can search BLAST databases that are user provided or from the National Center for Biotechnology Information.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">We show that ElasticBLAST is a useful application that can efficiently perform BLAST searches for the user in the cloud, demonstrating that with two examples. At the same time, it hides much of the complexity of working in the cloud, lowering the threshold to move work to the cloud.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>BLAST</kwd>
      <kwd>Cloud computing</kwd>
      <kwd>Alignment</kwd>
      <kwd>Kubernetes</kwd>
      <kwd>AWS Batch</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000092</institution-id>
            <institution>U.S. National Library of Medicine</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Institutes of Health (NIH)</institution>
        </funding-source>
      </award-group>
      <open-access>
        <p>Open Access funding provided by the National Institutes of Health (NIH)</p>
      </open-access>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par16">BLAST (Basic Local Alignment Search Tool) [<xref ref-type="bibr" rid="CR1">1</xref>] is used by biomedical researchers to characterize sequences by identifying similar sequences, with the command-line BLAST+ package [<xref ref-type="bibr" rid="CR2">2</xref>] used for pipelines as well as tasks with large numbers of searches or custom databases. The BLAST+ package supports all types of possible searches (e.g., nucleotide-nucleotide, protein–protein, protein-translated nucleotide, profile searches etc.), user-provided databases, a built-in limit by organism feature, and multiple report choices. BLAST + is supported on LINUX, Mac, and Windows.</p>
    <p id="Par17">The rapid growth of GenBank (see Table 1 in [<xref ref-type="bibr" rid="CR3">3</xref>]) results in a continuing increase in the size of the most popular BLAST databases, requiring more effort to host them locally and more computational power to run searches. At the same time, cloud computing has become mature and offers an opportunity for Bioinformaticians [<xref ref-type="bibr" rid="CR4">4</xref>]. It provides infrastructure such as instances, which are virtual servers that can be started on-demand and can contain different numbers of virtual CPUs (vCPUs) and different amounts of memory. It also provides object storage (cloud buckets) that can hold large amounts of data independent of any server as well as advanced tools to help orchestrate workflows. Cloud computing supports collaboration, with researchers able to easily share data, workflows, and compute environments with colleagues at other institutions. [<xref ref-type="bibr" rid="CR4">4</xref>]. To enable cloud computing, the NCBI is now hosting popular BLAST databases on Amazon Web Servers (AWS) and Google Cloud Platform (GCP) [<xref ref-type="bibr" rid="CR5">5</xref>], which users can easily download to their instance. The NCBI is also hosting 25.6 PB of SRA data in AWS and GCP (as of September 2021) [<xref ref-type="bibr" rid="CR6">6</xref>]. The NIH Science and Technology Research Infrastructure for Discovery, Experimentation, and Sustainability (STRIDES) [<xref ref-type="bibr" rid="CR7">7</xref>] initiative encourages the use of the Cloud by biomedical researchers. The cost model for the cloud (pay for usage) can present difficulties, but authors [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR9">9</xref>] discuss best practices to minimize costs. Multiple groups have demonstrated that the cloud is a viable platform for bioinformatics [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR10">10</xref>–<xref ref-type="bibr" rid="CR12">12</xref>].</p>
    <p id="Par18">Scheduling BLAST+ searches on the cloud involves several steps which include bringing up (possibly many) instances, populating them with databases and software, starting the searches, checking the status of the searches, downloading the results, and then shutting down the instances. Accomplishing these tasks requires the user to answer questions such as what instance type is suitable for the BLAST search, whether to use an SSD or some less expensive disk, and where to save the results.</p>
    <p id="Par19">We present ElasticBLAST, a cloud native package that leverages the command-line BLAST+ package to run BLAST on the cloud. There are several reasons to use ElasticBLAST<bold>.</bold> First, it automates setting up and tearing down instances for the BLAST search, which hides much of the complexity of the cloud and lowers the barrier to entry. At the same time, it makes use of cloud technology where appropriate, leading to a more reliable experience. Second, it can handle anywhere between a few and millions of queries reliably. Third, it distributes the searches to as many instances as the user requests, accelerating the work. Finally, it is supported on AWS and GCP. Given the maturity of cloud technology and the decreasing cost of sequencing (and growing numbers of sequences), ElasticBLAST provides an ideal way to perform alignments in the cloud.</p>
    <p id="Par20">In this article, we describe how ElasticBLAST works, present its user interface, illustrate its use for identifying RNA contamination, and discuss how ElasticBLAST minimizes costs, including using discounted instances, known as spot instances (at AWS) or preemptible instances (at GCP).</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Overall architecture and data flow</title>
      <p id="Par21">ElasticBLAST is a cloud-native, distributed system that runs on GCP and AWS. It uses a number of cloud technologies that include container orchestration (Kubernetes), batch compute frameworks (AWS Batch), serverless computing services (AWS Lambda), and object storage (also known as buckets, provided by S3 and GCS). To this end, ElasticBLAST uses the Platform as a Service (PaaS) [<xref ref-type="bibr" rid="CR13">13</xref>] cloud service model to facilitate resource management.</p>
      <p id="Par22">ElasticBLAST uses managed services (e.g., Kubernetes and AWS Batch). Briefly, the cloud provider takes responsibility for maintaining managed services, which involves optimizing them, keeping them current and fixing security vulnerabilities.</p>
      <p id="Par23">ElasticBLAST uses two types of file storage. The first is object storage, which is the cloud bucket meant for longer term storage independent of an instance. The second is block storage, which is the POSIX compliant storage found on LINUX machines. It can be either SSD or spinning disk and can be mounted directly on the instance. Access to object storage is slow and through vendor specific interfaces. BLAST+ requires access to the database on a (block) file system to run.</p>
      <p id="Par24">Figure <xref rid="Fig1" ref-type="fig">1</xref> is a schematic of the overall architecture in a cloud service provider agnostic form. There are four primary software modules: query splitting, job submission, resource management, and BLAST. The query splitting and job submission modules can run either on the local machine or as remote jobs on the cloud. The resource manager module runs on the local machine, but some of its functionality can optionally run as a remote job on the cloud if the automatic shutdown feature is enabled. The BLAST module runs only on the cloud.<fig id="Fig1"><label>Fig. 1</label><caption><p>High level ElasticBLAST schematic</p></caption><graphic xlink:href="12859_2023_5245_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par25">The query sequence data can reside on the cloud or on the local machine. It is processed by the query splitting module, which splits it into batches and saves these in cloud storage. Each of the query batches, the choice of BLAST database, and any BLAST parameters specified by the end user constitutes a job, which the job submission module sends to the appropriate managed service for processing. The BLAST module is responsible for providing the query batches to the BLAST+ software [<xref ref-type="bibr" rid="CR2">2</xref>] for comparison against a BLAST database, which must reside in cloud object storage. The BLAST module can access NCBI-maintained BLAST databases [<xref ref-type="bibr" rid="CR5">5</xref>] already stored in the cloud as well as custom BLAST databases built and uploaded to the cloud by the end user. The BLAST module saves the result of each of its jobs into the cloud object storage specified by the end user. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows a schematic of the data flow in ElasticBLAST.<fig id="Fig2"><label>Fig. 2</label><caption><p>Dataflow in ElasticBLAST</p></caption><graphic xlink:href="12859_2023_5245_Fig2_HTML" id="MO2"/></fig></p>
      <p id="Par26">The resource manager module runs on the local machine to allocate cloud resources through a managed service supported by the cloud service provider. It also configures cloud resources to monitor and delete the cloud resources it allocated. The end user can still manually delete cloud resources.</p>
      <p id="Par27">The end user interacts with ElasticBLAST via a command-line application implemented in Python (henceforth referenced as the client or elastic-blast). There are three primary subcommands supported by elastic-blast: submit, status and delete. The submit subcommand processes the ElasticBLAST configuration, creates resources on behalf of the end user and orchestrates query splitting and job submission. The status subcommand monitors the ElasticBLAST execution and reports on its progress. The delete subcommand initiates the shutdown and deletion of cloud resources allocated by the submit subcommand.</p>
      <p id="Par28">Among the critical issues in the ElasticBLAST development was the provisioning, management and efficient use of cloud resources, job orchestration, and query splitting.</p>
    </sec>
    <sec id="Sec4">
      <title>Cluster construction and queuing with cloud native infrastructure</title>
      <p id="Par29">ElasticBLAST relies on managed services for cloud resource management and job orchestration: Google Kubernetes Engine (GKE) [<xref ref-type="bibr" rid="CR14">14</xref>] in GCP and AWS Batch [<xref ref-type="bibr" rid="CR15">15</xref>] in AWS. These services start up a pool of instances for ElasticBLAST, which we refer to as a cluster.</p>
      <p id="Par30">When configured to run on AWS, ElasticBLAST uses AWS CloudFormation [<xref ref-type="bibr" rid="CR16">16</xref>], an infrastructure-as-code service that creates “stacks” of resources built from a “template” (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 1). After the cluster resources are created, the client interacts with AWS Batch (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 2) to submit jobs to the compute resources allocated (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 3). The jobs are queued and scheduled to run on instances provisioned by AWS Batch (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 4). Once the jobs start their execution, they retrieve BLAST databases and query batches from cloud buckets to block storage (i.e., the local storage on an instance), and ultimately save the results onto the user’s results bucket (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 5). AWS Batch handles job failures by retrying them up to three times, unless the jobs ran out of memory, in which case they are flagged as failed. This behavior addresses spot instance termination, after which AWS Batch requests a new (spot) instance and restarts the job. Results of completed jobs have already been saved in a cloud bucket. After all BLAST jobs have completed successfully or if any job fails, the resource manager module deallocates the compute resources either through an AWS Lambda function or via the user’s elastic-blast delete invocation (Fig. <xref rid="Fig3" ref-type="fig">3</xref>, step 6).<fig id="Fig3"><label>Fig. 3</label><caption><p>Architecture and workflow overview on AWS</p></caption><graphic xlink:href="12859_2023_5245_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par31">When configured to run on GCP, ElasticBLAST relies on GKE to create a Kubernetes cluster (Fig. <xref rid="Fig4" ref-type="fig">4</xref>, step 1). The cluster is configured with a shared persistent disk and an initialization job to retrieve BLAST input data (Fig. <xref rid="Fig4" ref-type="fig">4</xref>, steps 2 and 3) onto the disk and split queries. After this initialization completes, the client’s job submission module sends jobs to Kubernetes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>, steps 4 &amp; 5) to run BLAST. Kubernetes job objects provide native support for work queues [<xref ref-type="bibr" rid="CR17">17</xref>], which handle scheduling, queuing, error handling and monitoring of jobs consistent with how it is done in AWS. After all BLAST jobs have completed successfully, their results are written to the user’s cloud bucket (Fig. <xref rid="Fig4" ref-type="fig">4</xref>, step 6), and the resource manager module deallocates the compute resources through a Kubernetes cronjob or via the user’s elastic-blast delete invocation (Fig. <xref rid="Fig4" ref-type="fig">4</xref>, step 7).<fig id="Fig4"><label>Fig. 4</label><caption><p>Architecture and workflow overview on GCP</p></caption><graphic xlink:href="12859_2023_5245_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par32">In order to make efficient use of computing resources, ElasticBLAST leverages the horizontal scaling features of GKE and AWS Batch: both managed services will start up as many instances as needed to process the work queue, up to the limit configured by the end user. As the number of outstanding jobs in the queue diminishes, the managed service will shut down the instances when they are no longer needed.</p>
    </sec>
    <sec id="Sec5">
      <title>Query splitting and batch size</title>
      <p id="Par33">ElasticBLAST leverages the cloud to provide multiple worker nodes to parallelize the computation by breaking the queries into query batches. The batch length specifies the number of bases or residues per query batch, which is important for ElasticBLAST performance. The batch length needs to be configured to a value large enough to amortize the runtime cost of the scheduling and queueing. An individual query sequence will not be split between batches. The authors ran experiments with varying programs, BLAST database sizes, query sizes and batch lengths to arrive at a reasonable default batch length for a given configuration. The goal was to target a median runtime for each of the BLAST jobs in the 5–30 min time frame. Using this information, ElasticBLAST provides default values for the different BLAST programs, database sizes and query sizes, but the end user can customize this via the batch-len [<xref ref-type="bibr" rid="CR18">18</xref>] configuration parameter.</p>
    </sec>
    <sec id="Sec6">
      <title>Selection of instance types in ElasticBLAST</title>
      <p id="Par34">The choice of instance type is critical to the performance of ElasticBLAST. The instance type provides an upper bound on the number of CPUs and main memory (i.e.: RAM) available to BLAST + . ElasticBLAST relies on the BLAST database metadata that is automatically generated when creating BLAST databases (using BLAST+ 2.13.0 or newer) to determine the amount of main memory needed for the database. The metadata file lists not only the total size of the files in the BLAST database but also the size of the files needed for the search to run efficiently, which is smaller than the size of the database. The sequence and some indices are needed for the actual search and producing alignments, and it is important they are in memory. After the search, only a fraction of the sequence titles is needed for producing the report, and it would be wasteful to copy all of them to memory. This lower number is used to select an appropriate instance type from the 400 plus instance types available at each of AWS [<xref ref-type="bibr" rid="CR19">19</xref>] or GCP [<xref ref-type="bibr" rid="CR20">20</xref>].</p>
      <p id="Par35">Cloud providers offer instances with enough memory to accommodate almost all BLAST databases. The largest database offered by the NCBI is the ref_euk_rep_genomes, which contains 1.3 trillion letters and requires 319 GB of memory for BLAST to run efficiently. The largest instances that ElasticBLAST will currently suggest are twice as large (r5ad.24xlarge at AWS with 768 GB of RAM and n1-highmem-96 at GCP with 624 GB of RAM). Users could manually request even larger instances from the providers. Larger instances could be added to future releases of ElasticBLAST if needed.</p>
    </sec>
    <sec id="Sec7">
      <title>Automatic shutdown feature</title>
      <p id="Par36">The resource manager module supports an automatic shutdown feature which consists of an AWS Lambda function that monitors the AWS Batch job queue created by ElasticBLAST. The lambda function runs every 5 min to check the status of the BLAST jobs and shuts down and deletes all cloud resources, including itself on successful completion of all jobs or the occurrence of a failure. When running in GCP, the resource manager module starts a Kubernetes cronjob to perform the same role as the lambda function in AWS.</p>
    </sec>
  </sec>
  <sec id="Sec8">
    <title>Results and discussion</title>
    <p id="Par37">We discuss how to run ElasticBLAST and present two search examples, demonstrating its value to the scientific community. In the first case, we show how ElasticBLAST can be used to identify RNA-seq contamination. In the second, we examine how efficiently ElasticBLAST makes use of multiple cloud instances. Finally, we discuss ElasticBLAST in the context of other available tools.</p>
    <sec id="Sec9">
      <title>Interface</title>
      <p id="Par38">A user starts an ElasticBLAST search by invoking the elastic-blast application which reads a configuration file specifying the search. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows an example configuration file. There are three sections (cloud-provider, cluster, and blast) that require corresponding information. In this example, the region is specified as us-east4, but all GCP and AWS regions are supported. At the end of the search, the BLAST results are copied to a cloud bucket (owned by the user) specified in the configuration file. The ElasticBLAST documentation [<xref ref-type="bibr" rid="CR21">21</xref>] provides information on the necessary fields so we will not go into more detail here. It is also possible to use command-line options rather than a configuration file when calling the application, which is also discussed in the documentation.<fig id="Fig5"><label>Fig. 5</label><caption><p>A configuration file used in the second example (below). This configuration file is for GCP. The use-preemptible keyword in the cluster section specifies the use of discounted instances. Information relevant to the search is in the blast section. Results are placed in the user’s bucket specified by the results keyword in the blast section</p></caption><graphic xlink:href="12859_2023_5245_Fig5_HTML" id="MO5"/></fig></p>
      <p id="Par39">As described in the implementation section, ElasticBLAST automatically selects an appropriate instance type for a search, based on database metadata and the BLAST program. The user can override this selection by explicitly setting it in the configuration file.</p>
      <p id="Par40">The ElasticBLAST command-line application can be used as the basis for other interfaces. For example, we have built a Jupyter notebook that calls the elastic-blast application as part of a workflow [<xref ref-type="bibr" rid="CR22">22</xref>]. It would also be possible to call it based on input to a web page or to containerize the application for use in a pipeline with a formal workflow language.</p>
    </sec>
    <sec id="Sec10">
      <title>Identifying RNA contamination with ElasticBLAST</title>
      <p id="Par41">Whole-transcriptome sequencing (WTS), also known as RNA sequencing (RNA-Seq), is a cost-effective means [<xref ref-type="bibr" rid="CR23">23</xref>] to study differential gene expression profiles [<xref ref-type="bibr" rid="CR24">24</xref>, <xref ref-type="bibr" rid="CR25">25</xref>], phylogenomics [<xref ref-type="bibr" rid="CR26">26</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] or evolution [<xref ref-type="bibr" rid="CR28">28</xref>, <xref ref-type="bibr" rid="CR29">29</xref>]. However, RNA-Seq data analysis is especially challenging if there is no reference genome available in the public databases for the target organism. In this case, a suitable reference transcriptome can be assembled de novo and used for quantifying RNA abundance [<xref ref-type="bibr" rid="CR30">30</xref>].</p>
      <p id="Par42">RNA-Seq contamination, however, is a recognized problem that has played an important role in misleading multiple research conclusions [<xref ref-type="bibr" rid="CR31">31</xref>]. Detecting and removing contamination prior to a de novo transcriptome assembly is a critical step. Nonetheless, detecting contamination in RNA-Seq data is complex due to the sequence similarity between genes in distant taxonomic species. BLAST tools [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>] can be used to align RNA-Seq reads to public databases of sequences associating reads with one or more taxonomies. These associations can be used to filter contaminant reads prior to the assembly process. Unfortunately, traditional BLAST searches are time and resource intensive, therefore, k-mer-based methods have been developed to accelerate the computation like Kraken 2 [<xref ref-type="bibr" rid="CR32">32</xref>]. The improved computing time is at the cost of reducing the sensitivity of the sequence alignments. Although k-mer-based tools are reported to be much faster than programs like BLAST that produce alignments, the latter are still the more sensitive tool for sequence similarity identification [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
      <p id="Par43">ElasticBLAST offers a cloud-based solution to efficiently execute BLAST searches in the cloud. The improvement in processing time makes BLAST a usable tool for taxonomic classification of RNA-Seq reads without reducing the sensitivity of the sequence alignments. The GTax database [<xref ref-type="bibr" rid="CR34">34</xref>] is a taxonomically structured database of genomic sequences comprising 19 taxonomic groups. This database includes representative genome sequences and latest sequence assemblies (if the reference genome is not available) for 20,657 taxa. BLAST searches against GTax are used for taxonomic classification. In the case of an unannotated organism, RNA-Seq reads are aligned to the phylogenetically closest species or remain unidentified after not aligning to any GTax taxonomic group.</p>
      <p id="Par44">We used ElasticBLAST to perform BLAST nucleotide searches (using the blastn executable from the BLAST + package) against the GTax database to taxonomically classify reads from eight RNA-Seq raw samples from <italic>Physalis peruviana</italic> (TaxID: 126903, BioProject PRJNA67621). This plant is in the <italic>Solanoideae</italic> subfamily (TaxID: 424551) and it is phylogenetically close to the Capsicum genus (peppers, TaxID: 4071) and the <italic>Solanum</italic> genus (TaxID: 4107), which includes flowering plants like tomato, potato, and eggplant.</p>
      <p id="Par45">Our workflow first processes the samples with Trimmomatic [<xref ref-type="bibr" rid="CR35">35</xref>] to remove adapters and low-quality reads. A total of 26,724,497 reads (5,375,728,710 bases) were aligned with ElasticBLAST against the GTax Eudicotyledons taxonomy group. Figure <xref rid="Fig6" ref-type="fig">6</xref>a shows the taxonomy tree created from the BLASTN results with the percentage of reads assigned to each species. The results show that 85.61% of the reads are assigned to species below the correct <italic>Pentapetalae</italic> clade (TaxID: 1437201). Moreover, 76.85% of the reads are assigned to species under the correct family <italic>Solanaceae</italic> (TaxID: 4070). The remaining 14.39% of the reads were aligned to the rest of 18 GTax taxonomic groups. We identified 2.95% of the total reads as contaminants in these samples, see Fig. <xref rid="Fig6" ref-type="fig">6</xref>b, where the pie chart shows the percentage of reads with respect to total contaminant reads. As expected, the most prevalent contaminants in these samples are the bacteriophage <italic>Escherichia virus phiX174</italic> (TaxID: 10847), the fungus <italic>Fusarium oxysporum </italic>f. sp.<italic> lycopersici 4287</italic> (TaxID: 426428) and the bacterium <italic>Staphylococcus </italic>sp.<italic> MZ1</italic> (TaxID: 2836369).<fig id="Fig6"><label>Fig. 6</label><caption><p>Percent of RNA-Seq reads assigned to each taxonomy species for eight Physalis peruviana samples. <bold>a</bold> Taxonomy tree created from the alignment to GTax Eudicotyledons taxonomy group. Percent of reads at species level with respect to total reads in all samples. <bold>b</bold> percent of reads not identified in the first alignment that match other GTax taxonomy groups. Percent of reads in the Pie chart are related to the total contaminant reads</p></caption><graphic xlink:href="12859_2023_5245_Fig6_HTML" id="MO6"/></fig></p>
      <p id="Par46">Plant (Viridiplantae kingdom) genomes in GTax are separated into three different taxonomy groups: Liliopsida and Eudicotyledons, with any other plant genome placed in a global taxonomy group named Viridiplantae. In this analysis, we considered as contamination those reads with BLAST hits in Liliopsida or Viridiplantae that do not have any hits in Eudicotyledons genomes. We found a few reads, less than 1%, in the <italic>Physalis peruviana</italic> raw reads, that hits <italic>Asparagus officinalis</italic> (Liliopsida taxonomy group) that are marked as contamination despite being a plant, see Fig. <xref rid="Fig6" ref-type="fig">6</xref>b. Readers should note that separating plants into these three groups is a restrictive approach which should be used carefully depending on the research objective. For instance, if the analysis is focused on family conserved transcripts, the contamination threshold can be moved to the family level and consider anything that does not have BLAST hits against any member of the family as contamination. On the other side, reads with hits in Liliopsida or Viridiplantae could be marked as no contamination and joined as part of the Eudicotyledons reads in case of processing plants for less restrictive analysis. Additionally, research projects interested in horizontal gene transfer should further investigate reads marked as contamination from other organisms like bacteria and fungi to avoid excluding those reads from further analysis.</p>
      <p id="Par47">Table <xref rid="Tab1" ref-type="table">1</xref> presents information on the size of the eudicotyledons and non-eudicotyledons search sets. Table <xref rid="Tab2" ref-type="table">2</xref> presents information on the cost, run-time, and number of vCPU’s used for the searches. The blastn executable supports multiple search modes, and the sensitive BLASTN mode was used for the taxonomic identification described here. In this example, ElasticBLAST used thousands of instances (44,288 vCPUs) to perform the BLASTN searches of 26,724,497 reads in less than a day at a cost of $0.0013 per read.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Search sets used for the taxonomic classification (derived from GTax database)</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Search set</th><th align="left">Number of sequences</th><th align="left">Number of bases</th></tr></thead><tbody><tr><td align="left">Eudicotyledons</td><td align="left">880</td><td align="left">39,174,504,447</td></tr><tr><td align="left">non-eudicotyledons</td><td align="left">41,218</td><td align="left">447,368,164,093</td></tr></tbody></table></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption><p>Cost, run-time, and number of virtual CPUs for the ElasticBLAST searches used for taxonomic identification</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Search set</th><th align="left">MegaBLAST time</th><th align="left">MegaBLAST cost</th><th align="left">MegaBLAST vCPUs</th><th align="left">BLASTN time</th><th align="left">BLASTN cost</th><th align="left">BLASTN vCPUs</th></tr></thead><tbody><tr><td align="left">eudicotyledons</td><td align="left">18 min</td><td char="." align="char">$20.64</td><td char="." align="char">1600</td><td align="left">3 h 29 min</td><td char="," align="char">$1,849</td><td char="," align="char">12,288</td></tr><tr><td align="left">non-eudicotyledons</td><td align="left">1 h 19 min</td><td char="." align="char">$617.2</td><td char="." align="char">7248</td><td align="left">15 h 45 min</td><td char="," align="char">$33,012</td><td char="," align="char">32,000</td></tr></tbody></table><table-wrap-foot><p>The costs were calculated by considering the run-time, the hourly on-demand cost per instance, and the number of instances used. Non-eudicotyledons searches were run on an r5ad.4xlarge instance (16 vCPUs, 128 GB RAM, 600 GB local SSD, 10 Gigabit NIC, $1.048/hr on demand). The eudicotyledons searches were run on an c5ad.4xlarge instance (16 vCPUs, 32 GB RAM, 600 GB local SSD, 10 Gigabit NIC, $0.688/hr on demand)</p></table-wrap-foot></table-wrap></p>
      <p id="Par48">We also present information for the megaBLAST search mode, which is optimized for more similar sequences than BLASTN but has a much shorter run-time and is correspondingly less expensive to run. It is suitable for comparing sequences from the same or closely related organisms. The megaBLAST runs cost $0.000024 per read. ElasticBLAST could also start thousands of instances and finish searching 26,724,497 reads in a little more than an hour.</p>
      <p id="Par49">For both megaBLAST and BLASTN an expect value of 0.00001 was used and alignments below 75% identity were discarded. The actual BLAST options were the same in both searches:</p>
      <p id="Par50">
-outfmt "6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid" -evalue 1e-5 -perc_identity 75 -max_target_seqs 5 -max_hsps 10 -penalty -3.
</p>
    </sec>
    <sec id="Sec11">
      <title>Using ElasticBLAST with multiple instances</title>
      <p id="Par51">To demonstrate the ability of ElasticBLAST to effectively utilize multiple instances, we present results for ElasticBLAST runs with 1, 2, 4, and 8 instances at GCP. We run these searches with both on-demand and preemptible instances to provide runtime and cost estimates. To provide a baseline, we run BLAST+ on a stand-alone GCP instance using a script to execute operations performed by ElasticBLAST to configure and run BLAST. For this series of runs we searched 224 contigs (631,309 nucleotides) from the WGS project (DXSX00000000.1) for <italic>Candidatus Saccharibacteria bacterium</italic> against the refseq_protein database, consisting of high-quality proteins from the NCBI RefSeq project [<xref ref-type="bibr" rid="CR36">36</xref>]. We used the BLASTX program, which translates a nucleotide query in six frames and compares it to a protein database. ElasticBLAST uses the database metadata to select the e2-highmem-16 instance with sufficient memory (128 GB) to accommodate the database. The full refseq_protein database is 135 GB, but as described earlier, the metadata specifies the memory needed for ElasticBLAST to run efficiently (about 96 GB). Table <xref rid="Tab3" ref-type="table">3</xref> presents the results, and we discuss those below. The BLAST parameters used for these searches were:<table-wrap id="Tab3"><label>Table 3</label><caption><p>ElasticBLAST searches of <italic>Candidatus Saccharibacteria bacterium</italic> contigs from DXSX00000000.1</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Number of instances</th><th align="left">Time (hours)</th><th align="left">Cost ($)</th><th align="left">Time (hours) preemptible</th><th align="left">Cost ($)<break/>preemptible</th></tr></thead><tbody><tr><td align="left">1</td><td char="." align="char">8.07</td><td char="." align="char">6.57</td><td align="left">7.83</td><td align="left">1.28</td></tr><tr><td align="left">2</td><td char="." align="char">4.08</td><td char="." align="char">6.44</td><td align="left">4.13</td><td align="left">1.30</td></tr><tr><td align="left">4</td><td char="." align="char">2.37</td><td char="." align="char">6.87</td><td align="left">2.22</td><td align="left">1.28</td></tr><tr><td align="left">8</td><td char="." align="char">1.63</td><td char="." align="char">8.55</td><td align="left">1.5</td><td align="left">1.59</td></tr><tr><td align="left">1 (stand-alone)</td><td char="." align="char">6.62</td><td char="." align="char">5.39</td><td align="left">NA</td><td align="left">NA</td></tr></tbody></table><table-wrap-foot><p>Searches were performed at GCP with the e2-highmem-16 instance, selected by ElasticBLAST. The cost was estimated using the search time, the number of instances, and the hourly cost ($0.81432) of the instances (as of October 25, 2022). Costs for ElasticBLAST runs on preemptible instances were calculated at 20% of on-demand instance cost and are shown in the last two columns. The last row (“stand-alone”) shows data for a stand-alone BLAST + run, performed on one on-demand instance</p></table-wrap-foot></table-wrap></p>
      <p id="Par52">
-outfmt 7 -evalue 0.01 -task blastx-fast.
</p>
      <p id="Par53">Discounted instances are an effective means to reduce cloud costs. At GCP, they are called preemptible instances and cost 20% of the on-demand instance price. ElasticBLAST searched the 631,309 nucleotides against the 90 million residues in refseq_protein for a little more than a dollar with one instance, but this run costs about $6 with one on-demand instance (first row of Table <xref rid="Tab3" ref-type="table">3</xref>). We did not have a problem acquiring discounted instances for our runs, and they ran in roughly the same time (and sometimes less) as the on-demand instances.</p>
      <p id="Par54">ElasticBLAST can effectively use multiple instances. The run-time with two instances was about 50% of that for a single instance, and the cost was about the same. The run-time with four instances was about 29% of the single instance time, and the cost was 5% higher. The search with eight instances cost about 30% more than the single instance run and ran in about 20% of the single instance time. The extra expense of the eight-instance run is due to the time it takes Kubernetes to detect that instances are no longer needed and shut them down (data not shown), but the run is still under $2 using preemptible instances. Figure <xref rid="Fig7" ref-type="fig">7</xref> presents a screenshot of the GCP monitoring view for the four-instance run, consisting of two graphs. The top graph shows the number of instances in the cluster at a given time. The bottom graph shows how busy the cluster is at a given time. Every ElasticBLAST search on GCP has a start-up period where only one instance is running allowing for cluster configuration and BLAST database installation. This time varies, depending upon the state of the network at the provider and the size of the database, but was 22 min or less for the runs discussed here. The bottom graph shows that the cluster is no longer completely busy after 4:20, and the top graph shows that cluster shrinking in response, completely shutting down after all instances are no longer busy.<fig id="Fig7"><label>Fig. 7</label><caption><p>Cluster size (top) and CPU utilization of the cluster (bottom) for an ElasticBLAST run with four instances. This is a screenshot of the GCP monitoring view for the cluster. The cluster has only one instance from 2:15 to 2:40 (top graph), allowing for the installation of software and databases. The bottom graph shows that the cluster has about 50% CPU utilization after 4:20, and the top graph shows the cluster size shrinking about 10 min later. The CPU utilization at a given time is based on the size of the cluster at that point in time</p></caption><graphic xlink:href="12859_2023_5245_Fig7_HTML" id="MO7"/></fig></p>
      <p id="Par55">For the stand-alone run, a bash script was used to download the BLAST+ package, the refseq_protein BLAST database and the query file, and then start the BLAST+ search (using 15 threads). The time and cost shown in Table <xref rid="Tab3" ref-type="table">3</xref> include all those tasks. The stand-alone run was faster than ElasticBLAST with a single instance but did not include starting the instance, downloading results to a cloud bucket (after the search) and shutting the instance down.</p>
      <p id="Par56">Cloud providers charge for storing data in cloud buckets. In Table <xref rid="Tab4" ref-type="table">4</xref>, we present estimates for the cost of storing data associated with the second example for a month. The costs to store the BLAST results and queries are minimal. Additionally, a user might want to store a custom database on the cloud. A database the size of refseq_protein would be $3.11 per month.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Costs to store data associated with the second example for a month</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Data</th><th align="left">Size (GB)</th><th align="left">Cost ($) per month</th></tr></thead><tbody><tr><td align="left">BLAST results (gzipped)</td><td char="." align="char">0.0018</td><td char="." align="char">0.0000414</td></tr><tr><td align="left">Query file (gzipped)</td><td char="." align="char">0.000196</td><td char="." align="char">0.000004508</td></tr></tbody></table><table-wrap-foot><p>ElasticBLAST delivers the BLAST results to the cloud bucket already gzipped. ElasticBLAST can also read a gzipped FASTA file. The current costs at GCP and AWS of $0.023 per GB per month were used</p></table-wrap-foot></table-wrap></p>
      <p id="Par57">ElasticBLAST is most efficient working on large query sets. There are a few reasons for this. First, each ElasticBLAST search involves setup overhead, which occurs once regardless of the number of queries. Second, ElasticBLAST groups the queries into batches that are large enough to amortize the scheduling overhead of any individual batch. In the example above the setup time is around 20 min, most of which is to download the refseq_protein database (135 GB).</p>
      <p id="Par58">We have discussed searches with a wide range of costs. A relatively small search of a few hundred contigs against a smaller (but well curated) protein database cost less than $2 with discounted instances. A large search of more than 5 billion bases against a database of more than 400 billion bases using a sensitive search algorithm cost about $33,000. There are some best practices to prevent surprises. First, as noted in [<xref ref-type="bibr" rid="CR8">8</xref>], it is a good idea to perform a small test run before submitting large jobs. This allows users to estimate overall cost and possibly change strategy. Second, discounted instances can provide substantial savings, and ElasticBLAST makes it straightforward to use those. Cautious users can specify a small number of instances and, if it seems the run will cost too much, stop the searches with the delete command. Already processed results will be available in the cloud bucket.</p>
      <p id="Par59">ElasticBLAST implements several best practices to make searches efficient. First, it selects appropriate hardware for the search. It uses SSDs for the databases, which are more expensive than spinning disks, but inexpensive compared to the cost of the instances and respond more quickly, keeping the databases in memory and the instances busy. It also selects the smallest instance, based on the size of the database, that has sufficient memory to hold the database and allow BLAST to function efficiently. Second, it uses cloud services that shut down instances when they are no longer needed. Third, it optimizes the BLAST threading for the search, using at most 16 threads per process as this is optimal for BLAST. Instances with more than 16 vCPUs (e.g., 32 vCPUs) run multiple processes. For small databases, it uses a threading model that is more efficient for those databases [<xref ref-type="bibr" rid="CR37">37</xref>].</p>
    </sec>
    <sec id="Sec12">
      <title>Other tools</title>
      <p id="Par60">We compare ElasticBLAST to other software that can run BLAST on the cloud. We limit our discussion to projects that make source code available and can be run without a licensing fee to match those features of ElasticBLAST.</p>
      <p id="Par61">First, we discuss two packages that use cloud technology to produce sequence alignments. SparkBLAST [<xref ref-type="bibr" rid="CR38">38</xref>] is a cloud native application that runs BLAST on GCP and Azure. It uses cloud native technology to distribute queries over multiple instances running an unsupported version of BLAST (“blastall”). It does not create or provision instances for the BLAST search and does not support spot instances. SparkBLAST is from 2017 and does not appear to be currently in development. Sparky-BLAST [<xref ref-type="bibr" rid="CR39">39</xref>] is an application that runs its own implementation of BLAST (written in Python). It is presented by the authors as a proposal, but it has some interesting features. It can distribute a database across multiple instances, allowing Sparky-BLAST to use smaller machines for the searches. ElasticBLAST is unable to distribute databases in this manner, but (as described in the Implementation section) ElasticBLAST can start instances that can handle almost any database. Sparky-BLAST can also distribute a set of queries over multiple instances, and the authors demonstrate that it scales well (with five 16 CPU instances) and compare it to BLAST+ running on one instance, since BLAST+ cannot use multiple instances. ElasticBLAST, running BLAST+ on the cloud for the user, lifts this limitation by distributing searches over multiple instances. As we have shown above, it also can scale the searches with different numbers of instances. Sparky-BLAST only supports one BLAST program (BLASTN or DNA-DNA comparisons), requires the user to set up a SPARK cluster and Cassandra database, and does not offer the full range of BLAST report options so does not seem suitable for most uses of BLAST. The authors in [<xref ref-type="bibr" rid="CR39">39</xref>] also do not make clear which cloud provider was used for their benchmarking or if it was run on non-cloud machines. It does make interesting and innovative use of cloud technology to improve sequence searches.</p>
      <p id="Par62">Nextflow [<xref ref-type="bibr" rid="CR40">40</xref>] is a general package for running a pipeline, and one could use it to run BLAST searches. It supports spot instances, has cloud support, and can create and provision instances, but the user must provide the software. It is unable to decide which instances will be able to run a BLAST search, unlike ElasticBLAST. It is specifically targeted to “bioinformaticians familiar with programming” [<xref ref-type="bibr" rid="CR40">40</xref>], whereas ElasticBLAST does not require programming experience.</p>
      <p id="Par63">ElasticBLAST was designed specifically for the cloud, with the goal of making it easy to run there. There is other software that will run BLAST on the cloud, but nothing with the functionality of ElasticBLAST.</p>
    </sec>
  </sec>
  <sec id="Sec13">
    <title>Conclusion</title>
    <p id="Par64">We presented ElasticBLAST, a new cloud native application that can run BLAST+ searches on a cloud provider. ElasticBLAST simplifies running a BLAST search on the cloud. It can choose a cloud instance suitable for a BLAST search, given information about the database and program. It can also use discounted instances, saving the user money. ElasticBLAST can search NCBI or user provided databases and supports most of the BLAST+ programs and options. It is supported at both AWS and GCP.</p>
    <p id="Par65">Extensive documentation for ElasticBLAST is available at [<xref ref-type="bibr" rid="CR21">21</xref>]. This documentation includes an introduction to the cloud and ElasticBLAST as well as quickstarts for GCP and AWS, so a researcher can try out ElasticBLAST with minimal effort. Tutorials and documentation for parameters are also available. The ElasticBLAST source code is available at GitHub [<xref ref-type="bibr" rid="CR42">42</xref>]. We also provide a GitHub repository with scripts that use ElasticBLAST [<xref ref-type="bibr" rid="CR22">22</xref>], which includes a Jupyter notebook.</p>
    <p id="Par66">We are exploring ways to improve ElasticBLAST. These include optimizing the setting of parameters (e.g., batch-len) used by ElasticBLAST and improving the ability of ElasticBLAST to read in large numbers of sequences from SRA. We are also interested in integrating ElasticBLAST into workflows. We welcome feedback from users on features that would make ElasticBLAST more useful.</p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>AWS</term>
        <def>
          <p id="Par4">Amazon Web Services</p>
        </def>
      </def-item>
      <def-item>
        <term>BLAST</term>
        <def>
          <p id="Par5">Basic local alignment search tool</p>
        </def>
      </def-item>
      <def-item>
        <term>GCP</term>
        <def>
          <p id="Par6">Google Cloud Platform</p>
        </def>
      </def-item>
      <def-item>
        <term>GCS</term>
        <def>
          <p id="Par7">Google Cloud Storage</p>
        </def>
      </def-item>
      <def-item>
        <term>GKE</term>
        <def>
          <p id="Par8">Google Kubernetes Engine</p>
        </def>
      </def-item>
      <def-item>
        <term>PaaS</term>
        <def>
          <p id="Par9">Platform as a Service</p>
        </def>
      </def-item>
      <def-item>
        <term>RAM</term>
        <def>
          <p id="Par10">Random access memory</p>
        </def>
      </def-item>
      <def-item>
        <term>RNA-seq</term>
        <def>
          <p id="Par11">RNA sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>SSD</term>
        <def>
          <p id="Par12">Solid state drive</p>
        </def>
      </def-item>
      <def-item>
        <term>S3</term>
        <def>
          <p id="Par13">Simple storage service</p>
        </def>
      </def-item>
      <def-item>
        <term>vCPU</term>
        <def>
          <p id="Par14">Virtual central processing unit</p>
        </def>
      </def-item>
      <def-item>
        <term>WTS</term>
        <def>
          <p id="Par15">Whole-transcriptome sequencing</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank Vadim Zalunin, Anatoliy Kuznetsov, and Eugene Yaschenko for valuable architectural discussions. We would like to thank Scott McGinnis, Preye Akuiyibo, Dave Arndt, Priyanka Ghosh, Tao Tao, Peter Cooper, Wayne Matten, Rich McVeigh, Ryan Connor, Ravinder Eskandary, Yan Raytselis, and Yuri Merezhuk for useful discussions, feedback, and help. We would like to thank Kim Pruitt, Valerie Schneider, Wratko Hlavina, Rodney Brister, Bart Trawick, and David Landsman for their support.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>CC, GB, TM conceived the project. CC, GB, VJ implemented the project. TM and RV ran experiments for the paper. CC, GB, RV, and TM drafted the manuscript. TM directed the project. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>Open Access funding provided by the National Institutes of Health (NIH) This work was supported in part by the National Center for Biotechnology Information and the Intramural Research Program at the National Library of Medicine, National Institutes of Health and the NIH Science and Technology Research Infrastructure for Discovery, Experimentation, and Sustainability (STRIDES) Initiative. The funders did not participate in the design of the study, analysis, or the writing of the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The software is freely available on GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/elastic-blast">https://github.com/ncbi/elastic-blast</ext-link> All datasets analyzed during this study are freely available. The SRA runs used for the first example were SRR1944534, SRR1945431, SRR1952996, SRR1955167, SRR1955548, SRR1955886, SRR1957684, and SRR1958937.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par67">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par68">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par69">The authors declare they have no competing interests.</p>
    </notes>
    <notes>
      <title>Availability and Requirements</title>
      <p id="Par70">Project Name: ElasticBLAST. Project Home Page: <ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/elastic-blast">https://github.com/ncbi/elastic-blast</ext-link>.
Operating Systems: 64-bit LINUX, MacOS.
Programming Language: Python.
Other Requirements: See <ext-link ext-link-type="uri" xlink:href="https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/requirements.html">https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/requirements.html</ext-link>.
License: Public Domain [<xref ref-type="bibr" rid="CR42">42</xref>]. 
Any restrictions to use by non-academic users: none.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Schaffer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <issue>17</issue>
        <fpage>3389</fpage>
        <lpage>3402</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
        <pub-id pub-id-type="pmid">9254694</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Camacho</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Coulouris</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Avagyan</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Papadopoulos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bealer</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>TL</given-names>
          </name>
        </person-group>
        <article-title>BLAST+: architecture and applications</article-title>
        <source>BMC Bioinform</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>421</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-421</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sayers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Cavanaugh</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Pruitt</surname>
            <given-names>KD</given-names>
          </name>
          <name>
            <surname>Schoch</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Sherry</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Karsch-Mizrachi</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>GenBank</article-title>
        <source>Nucleic Acids Res</source>
        <year>2022</year>
        <volume>50</volume>
        <issue>D1</issue>
        <fpage>D161</fpage>
        <lpage>D164</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1135</pub-id>
        <pub-id pub-id-type="pmid">34850943</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Nellore</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Cloud computing for genomic data analysis and collaboration</article-title>
        <source>Nat Rev Genet</source>
        <year>2018</year>
        <volume>19</volume>
        <issue>4</issue>
        <fpage>208</fpage>
        <lpage>219</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg.2017.113</pub-id>
        <pub-id pub-id-type="pmid">29379135</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">BLAST Databases [<ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/blast_plus_docs/#blast-databases">https://github.com/ncbi/blast_plus_docs/#blast-databases</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Katz</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Shutov</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Lapoint</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kimelman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Brister</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>O'Sullivan</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>The sequence read archive: a decade more of explosive growth</article-title>
        <source>Nucleic Acids Res</source>
        <year>2022</year>
        <volume>50</volume>
        <issue>D1</issue>
        <fpage>D387</fpage>
        <lpage>D390</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1053</pub-id>
        <pub-id pub-id-type="pmid">34850094</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">STRIDES Initiative [<ext-link ext-link-type="uri" xlink:href="https://datascience.nih.gov/strides">https://datascience.nih.gov/strides</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Alvarez</surname>
            <given-names>RV</given-names>
          </name>
          <name>
            <surname>Mario-Ramirez</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Landsman</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Transcriptome annotation in the cloud: complexity, best practices, and cost</article-title>
        <source>Gigascience</source>
        <year>2021</year>
        <volume>10</volume>
        <issue>2</issue>
        <fpage>giaa163</fpage>
        <pub-id pub-id-type="doi">10.1093/gigascience/giaa163</pub-id>
        <pub-id pub-id-type="pmid">33511996</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Birger C, Hanna M, Salinas E, Neff J, Saksena G, Livitz D, Rosebrock D, Stewart C, Leshchiner I, Baumann A et al. FireCloud, a scalable cloud-based platform for collaborative genome analysis: Strategies for reducing and controlling costs. bioRxiv 2017:209494.
</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Altman</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Barbera</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Meleshko</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Lohr</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Novakovsky</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Al-Shayeb</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Petabase-scale sequence alignment catalyses viral discovery</article-title>
        <source>Nature</source>
        <year>2022</year>
        <volume>602</volume>
        <issue>7895</issue>
        <fpage>142</fpage>
        <lpage>147</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-021-04332-2</pub-id>
        <pub-id pub-id-type="pmid">35082445</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Philippakis</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Afgan</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Banks</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Carroll</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Culotti</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ellrott</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Goecks</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Goecks</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Inverting the model of genomics data sharing with the NHGRI genomic data science analysis, visualization, and informatics lab-space</article-title>
        <source>Cell Genom</source>
        <year>2022</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>10085</fpage>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>MartÌ-Carreras</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gener</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Brito</surname>
            <given-names>AF</given-names>
          </name>
          <name>
            <surname>Camacho</surname>
            <given-names>CE</given-names>
          </name>
          <name>
            <surname>Connor</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Deboutte</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Glickman</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kristensen</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>WK</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>NCBI's virus discovery codeathon: building "FIVE" -The Federated Index of Viral Experiments API index</article-title>
        <source>Viruses</source>
        <year>2022</year>
        <volume>12</volume>
        <issue>12</issue>
        <fpage>1424</fpage>
        <pub-id pub-id-type="doi">10.3390/v12121424</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">What is Paas? [<ext-link ext-link-type="uri" xlink:href="https://cloud.google.com/learn/what-is-paas">https://cloud.google.com/learn/what-is-paas</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Google Kubernetes Engine [<ext-link ext-link-type="uri" xlink:href="https://cloud.google.com/kubernetes-engine">https://cloud.google.com/kubernetes-engine</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">What is AWS Batch? [<ext-link ext-link-type="uri" xlink:href="https://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html">https://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">AWS Cloud Formation [<ext-link ext-link-type="uri" xlink:href="https://aws.amazon.com/cloudformation/">https://aws.amazon.com/cloudformation/</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Kubernetes [<ext-link ext-link-type="uri" xlink:href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-patterns">https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-patterns</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">ElasticBLAST parameters [<ext-link ext-link-type="uri" xlink:href="https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html">https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Amazon EC2 Instance Types [<ext-link ext-link-type="uri" xlink:href="https://aws.amazon.com/ec2/instance-types/">https://aws.amazon.com/ec2/instance-types/</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">About machine types [<ext-link ext-link-type="uri" xlink:href="https://cloud.google.com/compute/docs/machine-types">https://cloud.google.com/compute/docs/machine-types</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">ElasticBLAST Documentation [<ext-link ext-link-type="uri" xlink:href="https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/">https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">ElasticBLAST demos [<ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/elastic-blast-demos">https://github.com/ncbi/elastic-blast-demos</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Marz</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>De novo transcriptome assembly: a comprehensive cross-species comparison of short-read RNA-Seq assemblers</article-title>
        <source>Gigascience</source>
        <year>2008</year>
        <volume>8</volume>
        <issue>5</issue>
        <fpage>giz039</fpage>
        <pub-id pub-id-type="doi">10.1093/gigascience/giz039</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mortazavi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Williams</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>McCue</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Schaeffer</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wold</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Mapping and quantifying mammalian transcriptomes by RNA-Seq</article-title>
        <source>Nat Methods</source>
        <year>2008</year>
        <volume>5</volume>
        <issue>7</issue>
        <fpage>621</fpage>
        <lpage>628</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1226</pub-id>
        <pub-id pub-id-type="pmid">18516045</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Anders</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Differential expression analysis for sequence count data</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>10</issue>
        <fpage>R106</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-10-r106</pub-id>
        <pub-id pub-id-type="pmid">20979621</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schierwater</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Kolokotronis</surname>
            <given-names>SO</given-names>
          </name>
          <name>
            <surname>Eitel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>DeSalle</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>The Diploblast-Bilateria Sister hypothesis: parallel revolution of a nervous systems may have been a simple step</article-title>
        <source>Commun Integr Biol</source>
        <year>2009</year>
        <volume>2</volume>
        <issue>5</issue>
        <fpage>403</fpage>
        <lpage>405</lpage>
        <pub-id pub-id-type="doi">10.4161/cib.2.5.8763</pub-id>
        <pub-id pub-id-type="pmid">19907700</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Amaral</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Bonatelli</surname>
            <given-names>IAS</given-names>
          </name>
          <name>
            <surname>Cerri</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Viviani</surname>
            <given-names>VR</given-names>
          </name>
        </person-group>
        <article-title>Phylogenomic analyses and divergence time estimation of Elateroidea (Coleoptera) based on RNA-Seq data</article-title>
        <source>Comp Biochem Physiol Part D Genom Proteomics</source>
        <year>2019</year>
        <volume>30</volume>
        <fpage>283</fpage>
        <lpage>289</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cbd.2019.04.001</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finet</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Timme</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Delwiche</surname>
            <given-names>CF</given-names>
          </name>
          <name>
            <surname>Marletaz</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Erratum: Multigene phylogeny of the green lineage reveals the origin and diversification of land plants</article-title>
        <source>Curr Biol</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>15</issue>
        <fpage>1456</fpage>
        <lpage>1457</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cub.2012.07.021</pub-id>
        <pub-id pub-id-type="pmid">23050273</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Philippe</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Brinkmann</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lavrov</surname>
            <given-names>DV</given-names>
          </name>
          <name>
            <surname>Littlewood</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Manuel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Worheide</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Resolving difficult phylogenetic questions: why more sequences are not enough</article-title>
        <source>PLoS Biol</source>
        <year>2011</year>
        <volume>9</volume>
        <issue>3</issue>
        <fpage>e1000602</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pbio.1000602</pub-id>
        <pub-id pub-id-type="pmid">21423652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Raghavan</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kraft</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Mesny</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Rigerte</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>A simple guide to de novo transcriptome assembly and annotation</article-title>
        <source>Brief Bioinform.</source>
        <year>2022</year>
        <volume>23</volume>
        <fpage>bbab563</fpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbab563</pub-id>
        <pub-id pub-id-type="pmid">35076693</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Alvarez RV, Landsman D. De novo transcriptome assembly and the effect of foreign RNA contamination. bioRxiv 2022:2022.2011.2007.515468.</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wood</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Improved metagenomic analysis with Kraken 2</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>257</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1891-0</pub-id>
        <pub-id pub-id-type="pmid">31779668</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Salzberg SL, Wood DE. Releasing the Kraken. Front Bioinform. 2021;1.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">GTAX [<ext-link ext-link-type="uri" xlink:href="https://gtax.readthedocs.io/en/latest/">https://gtax.readthedocs.io/en/latest/</ext-link>] ] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bolger</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Lohse</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Usadel</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Trimmomatic: a flexible trimmer for Illumina sequence data</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>15</issue>
        <fpage>2114</fpage>
        <lpage>2120</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu170</pub-id>
        <pub-id pub-id-type="pmid">24695404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">About Refseq [<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/refseq/about/">https://www.ncbi.nlm.nih.gov/refseq/about/</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Threading by Query [<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/books/NBK571452/">https://www.ncbi.nlm.nih.gov/books/NBK571452/</ext-link>] Accessed 12 December 2022</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>de Castro</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Tostes</surname>
            <given-names>CDS</given-names>
          </name>
          <name>
            <surname>Dávila</surname>
            <given-names>AMR</given-names>
          </name>
          <name>
            <surname>Senger</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>da Silva</surname>
            <given-names>FAB</given-names>
          </name>
        </person-group>
        <article-title>SparkBLAST: scalable BLAST processing using in-memory operations</article-title>
        <source>BMC Bioinform</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>1</issue>
        <fpage>318</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-017-1723-8</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cores</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Guirado</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Lluis Lerida</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>High throughput BLAST algorithm using spark and cassandra</article-title>
        <source>J Supercomput</source>
        <year>2021</year>
        <volume>77</volume>
        <fpage>1879</fpage>
        <lpage>1896</lpage>
        <pub-id pub-id-type="doi">10.1007/s11227-020-03338-3</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chatzou</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Floden</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Barja</surname>
            <given-names>PP</given-names>
          </name>
          <name>
            <surname>Palumbo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Notredame</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <fpage>316</fpage>
        <lpage>319</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <mixed-citation publication-type="other">ElasticBLAST [<ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/elastic-blast">https://github.com/ncbi/elastic-blast</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">PUBLIC DOMAIN NOTICE for NCBI [<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC/lxr/source/doc/public/LICENSE">https://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC/lxr/source/doc/public/LICENSE</ext-link>] Accessed 16 November 2022.</mixed-citation>
    </ref>
  </ref-list>
</back>
