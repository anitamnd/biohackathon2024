<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6167853</article-id>
    <article-id pub-id-type="publisher-id">2367</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-018-2367-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Biotite: a unifying open source computational biology framework in Python</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9756-0914</contrib-id>
        <name>
          <surname>Kunzmann</surname>
          <given-names>Patrick</given-names>
        </name>
        <address>
          <email>kunzmann@bio.tu-darmstadt.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hamacher</surname>
          <given-names>Kay</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0940 1669</institution-id><institution-id institution-id-type="GRID">grid.6546.1</institution-id><institution>Department of Computational Biology and Simulation, TU Darmstadt, </institution></institution-wrap>Schnittspahnstraße 2, Darmstadt, 64287 Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>1</day>
      <month>10</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>1</day>
      <month>10</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2018</year>
    </pub-date>
    <volume>19</volume>
    <elocation-id>346</elocation-id>
    <history>
      <date date-type="received">
        <day>6</day>
        <month>4</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>9</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>As molecular biology is creating an increasing amount of sequence and structure data, the multitude of software to analyze this data is also rising. Most of the programs are made for a specific task, hence the user often needs to combine multiple programs in order to reach a goal. This can make the data processing unhandy, inflexible and even inefficient due to an overhead of read/write operations. Therefore, it is crucial to have a comprehensive, accessible and efficient computational biology framework in a scripting language to overcome these limitations.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We have developed the Python package Biotite: a general computational biology framework, that represents sequence and structure data based on NumPy<italic>ndarrays</italic>. Furthermore the package contains seamless interfaces to biological databases and external software. The source code is freely accessible at <ext-link ext-link-type="uri" xlink:href="https://github.com/biotite-dev/biotite">https://github.com/biotite-dev/biotite</ext-link>.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>Biotite is unifying in two ways: At first it bundles popular tasks in sequence analysis and structural bioinformatics in a consistently structured package. Secondly it adresses two groups of users: novice programmers get an easy access to Biotite due to its simplicity and the comprehensive documentation. On the other hand, advanced users can profit from its high performance and extensibility. They can implement their algorithms upon Biotite, so they can skip writing code for general functionality (like file parsers) and can focus on what their software makes unique.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (10.1186/s12859-018-2367-z) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Open source</kwd>
      <kwd>Python</kwd>
      <kwd>NumPy</kwd>
      <kwd>Structural biology</kwd>
      <kwd>Sequence analysis</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2018</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Biology becomes more and more data-driven, with an increasing amount of available genomic sequences and biomolecular structures. In order to make use of this data, a multitude of software has been developed in recent years. Most of these programs have a very specific purpose, like sequence alignment or secondary structure annotation to protein structures. Usually these programs are used via the command line; they are taking some input parameters and files and put their results in output files. It is the task of the user to convert their data of interest into the software specific input format and parse the produced output. This output can be the final result or serve as input for the next program. Depending on the complexity of the user’s initial question this process can be too inflexible and too unhandy to be viable. Furthermore, reading, writing and converting files can yield a significant overhead, increasing the computation time.</p>
    <p>These problems can be solved by shifting the workflow from this file-based approach into a scripting language. Here the data needs to be loaded only once and the subsequent analysis is performed based on the framework’s internal representation of the data, with the full flexibility of a programming language. One programming language, suited for this, is Python: It has a simple and easy-to-learn syntax, it is heavily supported by the open source community and the possibility to interface native C code made it to one of the most popular languages for scientific programming.</p>
    <sec id="Sec2">
      <title>Related Work</title>
      <p>There are some computational biology frameworks in Python that are already available: MDTraj [<xref ref-type="bibr" rid="CR1">1</xref>] and MDAnalysis [<xref ref-type="bibr" rid="CR2">2</xref>] are tools for analysis of trajectories from molecular dynamics simulations. PyCogent [<xref ref-type="bibr" rid="CR3">3</xref>] and scikit-bio support the analysis of (genomic) sequence data. A framework for working with sequence and structure data combined is Biopython [<xref ref-type="bibr" rid="CR4">4</xref>], however, this Python package mostly works as <italic>glue</italic> between different programs. The algorithms directly implemented in the Biopython package are limited in scope and efficiency.</p>
      <p>We set out to develop a comprehensive computational molecular biology framework for analysis of sequence and structure data, where most of the data can be handled internally, without the usage of additional software. Hence we introduce Biotite, an open source Python package, that can handle the complete bioinformatics workflow, from fetching, reading and writing relevant files to the efficient and intuitive analysis and manipulation of their data.</p>
    </sec>
  </sec>
  <sec id="Sec3">
    <title>Implementation</title>
    <p>Biotite is divided into four subpackages: <italic>sequence</italic> and <italic>structure</italic> provide tools for handling sequences or biomolecular structures, respectively. <italic>database</italic> is used for fetching files from biological databases and <italic>application</italic> offers interfaces for external software.</p>
    <p>Since computational efficiency is one central aim of the Biotite project, the package makes heavy use of NumPy [<xref ref-type="bibr" rid="CR5">5</xref>], in places where vectorization is applicable. In cases, where this is not possible, the source code is usually written in Cython [<xref ref-type="bibr" rid="CR6">6</xref>], resulting in performance comparable to native C code.</p>
    <sec id="Sec4">
      <title>The <italic>sequence</italic> subpackage</title>
      <p>Sequences are important objects in bioinformatics. Beside the classical ones, nucleotide and protein sequences, there are for example sequences describing protein structures [<xref ref-type="bibr" rid="CR7">7</xref>–<xref ref-type="bibr" rid="CR9">9</xref>] or pharmacophores [<xref ref-type="bibr" rid="CR10">10</xref>].</p>
      <p>In order to account for these special types of sequences, Biotite has a very broad understanding of a sequence: The symbols in a sequence are not limited to single characters (e.g. ’A’,’C’,’G’ and ’T’), but every immutable and hashable Python object can be a symbol, as long as it is present in the alphabet of a sequence. An alphabet represents the set of allowed symbols in the sequence.</p>
      <p>In practice, a sequence is represented by a Sequence instance. When creating a Sequence, each symbol is encoded into an unsigned integer value (<italic>symbol code</italic>) using the Alphabet instance of the Sequence (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The symbol code <italic>c</italic> of a symbol <italic>s</italic> is the index of <italic>s</italic> in the symbol list of the Alphabet instance. Eventually, the symbol codes are stored in a NumPyndarray of the Sequence object. The number of bytes per symbol code in the ndarray is adapted to the number of different symbols in the alphabet. Hence, it is possible to use alphabets with <italic>more</italic> than 256 different symbols typical for byte-oriented mappings traditionally employed.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Biotite’s internal representation of sequences. A Sequence object takes symbols as input parameter. Each symbol is encoded into its symbol code, using a Sequence class specific alphabet. The resulting code is then stored as NumPyndarray in the Sequence object</p></caption><graphic xlink:href="12859_2018_2367_Fig1_HTML" id="MO1"/></fig>
</p>
      <p>This approach has multiple advantages: 
<list list-type="bullet"><list-item><p>Larger variety of possible symbols (multi-character strings, numbers, tuples, etc.)</p></list-item><list-item><p>Most operations (searches, alignments, etc.) rely on symbol codes and consequently are independent of the actual type of sequence</p></list-item><list-item><p>Vectorized operations yield a performance boost</p></list-item><list-item><p>Symbol codes are direct indices for substitution matrices in alignments (discussed below)</p></list-item></list></p>
      <sec id="Sec5">
        <title>Nucleotide and protein sequences</title>
        <p>NucleotideSequence and ProteinSequence are specialized Sequence subclasses that offer common operations for nucleotide and protein sequences (Fig. <xref rid="Fig2" ref-type="fig">2</xref><xref rid="Fig2" ref-type="fig">a</xref>).
<fig id="Fig2"><label>Fig. 2</label><caption><p>Code examples for Biotite usage. Note that the examples are shortened: Import statements and the AtomArray instantiation are missing. <bold>a</bold> Creation and properties of a NucleotideSequence and its translation into a ProteinSequence. <bold>b</bold> Global alignment of two NucleotideSequence instances. <bold>c</bold> Filtering an AtomArray with <italic>boolean masks</italic></p></caption><graphic xlink:href="12859_2018_2367_Fig2_HTML" id="MO2"/></fig>
</p>
        <p>Biotite provides read and write capabilities for the FASTA format, hence FASTA files can be used to load and save nucleotide and protein sequences.</p>
      </sec>
      <sec id="Sec6">
        <title>Alignments</title>
        <p>Biotite offers a function for global [<xref ref-type="bibr" rid="CR11">11</xref>] and local [<xref ref-type="bibr" rid="CR12">12</xref>] pairwise sequence alignments with both, linear and affine gap penalties [<xref ref-type="bibr" rid="CR13">13</xref>] using dynamic programming. Biotite does not use the more complex <italic>divide and conquer</italic> principle [<xref ref-type="bibr" rid="CR14">14</xref>], hence both, computation time and memory space scale linearly with the lengths of the two aligned sequences. In order to align two Sequence objects a SubstitutionMatrix instance is required. These objects consist of two Alphabet instances, that must fit the alphabets of the aligned sequences, and a score matrix, implemented as 2-dimensional ndarray. The similarity score of two symbols with symbol code <italic>m</italic> and <italic>n</italic>, respectively, is the value of the score matrix at position [<italic>m</italic>,<italic>n</italic>]. This simple indexing operation renders the retrieval of similarity scores highly efficient. In order to decrease the computation time of alignments even more, the underlying dynamic programming algorithm is implemented in Cython.</p>
        <p>For a custom SubstitutionMatrix both alphabets can be freely chosen. This implies at first that alignments are independent of the sequence type and secondly that even unequal types of sequences can be aligned. One possible application for alignments of different sequence types is testing the compatibility of a protein sequence to a given protein structure [<xref ref-type="bibr" rid="CR7">7</xref>]. In addition to custom SubstitutionMatrix instances, all standard NCBI substitution matrices (BLOSUM, PAM, etc.) and the corrected BLOSUM matrices [<xref ref-type="bibr" rid="CR15">15</xref>] can be loaded.</p>
        <p>Alignments in Biotite return Alignment instances. These objects store the <italic>trace</italic> of the aligned sequences, i.e. the indices of the aligned symbols in the original Sequence objects (-1 for gaps) (Fig. <xref rid="Fig2" ref-type="fig">2</xref><xref rid="Fig2" ref-type="fig">b</xref>).</p>
      </sec>
      <sec id="Sec7">
        <title>Sequence features</title>
        <p>Sequence features describe functional parts of a sequence, for example promoters or coding regions. They consist of a feature key (e.g. <italic>regulatory</italic> or <italic>CDS</italic>), one or multiple locations on the reference sequence and qualifiers that describe the feature in detail. A popular format to store sequence features is the text based GenBank format. Biotite provides a GenBank file parser for conversion of the feature table into Python objects.</p>
      </sec>
      <sec id="Sec8">
        <title>Visualizations</title>
        <p>Biotite is able to produce sequence-related visualizations based on matplotlib [<xref ref-type="bibr" rid="CR16">16</xref>] figures. Hence the visualization can use the various matplotlib backends: It can be displayed on screen, saved to files in different raster and vector graphics formats or embedded in other applications. The base class for all visualizations is the Visualizer class. Its subclasses provide visualization functionality for alignments, sequence logos and sequence annotations. An example alignment visualization, created with the AlignmentSimilarityVisualizer class, is shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. Further visualization examples are available in the example gallery of the Biotite documentation (Additional file <xref rid="MOESM1" ref-type="media">1</xref>).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Example sequence alignment visualization. The alignment of an avidin sequence (Accession: CAC34569) with a streptavidin sequence (Accession: ACL82594) is visualized using the AlignmentSimilarityVisualizer</p></caption><graphic xlink:href="12859_2018_2367_Fig3_HTML" id="MO3"/></fig>
</p>
      </sec>
    </sec>
    <sec id="Sec9">
      <title>The <italic>structure</italic> subpackage</title>
      <p>The most basic unit of the representation of a biomolecular structure is the Atom class. An Atom instance contains information about the atom coordinates with a length three ndarray and information about its annotations (like chain ID, residue ID, atom name, etc.). An entire structure, consisting of multiple atoms, is represented by an AtomArray. Rather than storing Atom objects in a list, a much more efficient approach was used: Each annotation category is stored as a length <italic>n</italic>ndarray (<italic>annotation array</italic>) and the coordinates are stored as (<italic>n</italic> ×3) ndarray for a structure with <italic>n</italic> atoms. In some cases the atoms in a structure have multiple coordinates, representing different locations, for example in NMR elucidated structures or in trajectories from molecular dynamics simulations. AtomArrayStack instances represent such multi-model structures. In contrast to an AtomArray, an AtomArrayStack has a (<italic>m</italic> ×<italic>n</italic> ×3) coordinate ndarray for a structure with <italic>n</italic> atoms and <italic>m</italic> models.</p>
      <p>Only in a few cases the user will work with single Atom objects. Usually AtomArray and AtomArrayStack instances are used, which enable vectorized (and hence computationally efficient) operations. The atom coordinates and annotation arrays can be simply accessed by calling the corresponding attribute. Furthermore, these objects behave similar to NumPyndarray objects in respect of indexing: An AtomArray or AtomArrayStack can be indexed like an one or two-dimensional ndarray, respectively, with integers, slices, index arrays or <italic>boolean masks</italic>. Thus, annotation arrays in conjunction with <italic>boolean masks</italic> provide a convenient way of filtering a structure, in contrast to the text based selections used in MDAnalysis and MDTraj (Fig. <xref rid="Fig2" ref-type="fig">2</xref><xref rid="Fig2" ref-type="fig">c</xref>).</p>
      <p>The <italic>structure</italic> subpackage can be used to measure distances, angles and dihedral angles, between single atoms, atom arrays, atom array stacks or a combination of them. The broadcasting rules of NumPy apply here.</p>
      <sec id="Sec10">
        <title>Implemented algorithms</title>
        <p>Beside geometric measurements, Biotite offers more complex algorithms for structure analysis: atom-wise accessible surface area calculation (based on the Shrake-Rupley algorithm [<xref ref-type="bibr" rid="CR17">17</xref>]), structure superimposition (based on the Kabsch algorithm [<xref ref-type="bibr" rid="CR18">18</xref>]) and secondary structure assignment (based on the P-SEA algorithm [<xref ref-type="bibr" rid="CR19">19</xref>]) are available. Furthermore, the root-mean-square deviation (RMSD) and fluctuation (RMSF) can be calculated. Currently, the analysis tools focus on protein structures, but specialized functions for structure analysis of nucleic acids are planned for future versions.</p>
      </sec>
      <sec id="Sec11">
        <title>Reading and writing structure files</title>
        <p>AtomArray and AtomArrayStack instances can be loaded from and saved to multiple different file formats. The most basic one is the PDB format, from which only the <italic>ATOM</italic> and <italic>HETATM</italic> records are parsed. An alternative is the modern PDBx/mmCIF format that provides additional information on a structure. Using Biotite, each category in a PDBx/mmCIF file can be converted into a Python dictionary object.</p>
        <p>Biotite is also capable of parsing files in the recently published binary MMTF format [<xref ref-type="bibr" rid="CR20">20</xref>]. This format features a small file size and short parsing times. Instead of relying on the MMTF parser provided by the RCSB (package mmtf-python), Biotite implements an efficient MMTF decoder and encoder written in Cython. Additionally, the conversion from MMTF’s hierarchical data model (chain, residue, atom) into a BiotiteAtomArray or AtomArrayStack is also C-accelerated.</p>
        <p>If MDTraj is installed, Biotite is also able to load GROMACS [<xref ref-type="bibr" rid="CR21">21</xref>] trajectory files (<italic>trr</italic>, <italic>xtc</italic>, <italic>tng</italic>).</p>
      </sec>
    </sec>
    <sec id="Sec12">
      <title>The <italic>database</italic> subpackage</title>
      <p>This subpackage is used to download files from the RCSB PDB and NCBI Entrez web server via HTTP requests. Furthermore the RCSB PDB SEARCH service is supported.</p>
    </sec>
    <sec id="Sec13">
      <title>The <italic>application</italic> subpackage</title>
      <p>In this subpackage Biotite offers interfaces to external software, including NCBI BLAST [<xref ref-type="bibr" rid="CR22">22</xref>], MUSCLE [<xref ref-type="bibr" rid="CR23">23</xref>], MAFFT [<xref ref-type="bibr" rid="CR24">24</xref>], Clustal-Omega [<xref ref-type="bibr" rid="CR25">25</xref>] and DSSP [<xref ref-type="bibr" rid="CR26">26</xref>]. These interfaces wrap the execution of the respective program on the local machine, or use the HTTP-based API (application programming interface) in case of NCBI BLAST. The execution is seamless: Biotite objects, like Sequence or AtomArray are taken as input, and the output (e.g. an alignment) is returned. Writing/reading input/output files is handled internally.</p>
      <p>Application interfaces inherit from the Application superclass. Each Application has a life cycle, based on application states (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). After creation, the execution of the Application is started using the start() method. After calling the join() method the results are accessible. If the execution has not finished by then, the Python code will wait until the execution has completed. This approach mimics the behavior of an additional thread: Between the start() and the join() statement other operations can be performed, while the application executes in parallel.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Life cycle of an application. After creation, the Application object is in <italic>CREATED</italic> state. When the user calls start(), the Application enters the <italic>RUNNING</italic> state. When the execution finishes, the state changes to <italic>FINISHED</italic>. The results of the execution are made accessible by calling join(), changing the state to <italic>JOINED</italic>. If the Application is still in the <italic>RUNNING</italic> state then, it is constantly checked whether the execution is finished. The execution can be cancelled using the cancel() method, then the Application ends up in the <italic>CANCELLED</italic> state. This life cycle is equal in all Application subclasses, but each subclass has its own implementation of the application specific methods, that are called on state transition</p></caption><graphic xlink:href="12859_2018_2367_Fig4_HTML" id="MO4"/></fig>
</p>
    </sec>
    <sec id="Sec14">
      <title>Software engineering considerations</title>
      <p>The Biotite project aims to follow guidelines of good programming practice. The package’s API is fully documented in order to maximize usability. Furthermore, the documentation provides a tutorial and an example gallery. The source code is unit tested with 72% code coverage (calculated via pytest-cov package). However, the actual coverage is greater since Cython files are not considered in the calculation. To ensure that all supported platforms and Python versions are properly supplied with upcoming releases, the project uses <italic>AppVeyor</italic> and <italic>Travis CI</italic> as continuous integration platforms.</p>
    </sec>
  </sec>
  <sec id="Sec15">
    <title>Results and discussion</title>
    <sec id="Sec16">
      <title>Performance of implemented analysis algorithms</title>
      <p>In order to evaluate the capability of Biotite for large scale analyses, the performance of popular tasks was compared to Biopython, MDAnalysis and MDTraj (Fig. <xref rid="Fig5" ref-type="fig">5</xref>) (benchmark script in Additional file <xref rid="MOESM2" ref-type="media">2</xref>). For structure related tasks the crystal structure of lysozyme was chosen (PDB: 1AKI [<xref ref-type="bibr" rid="CR27">27</xref>], 1001 atoms), for sequence alignment two 1,000 residues long polyalanine sequences were used. All benchmarks were started from the internal representation of a structure (AtomArray in Biotite) or sequence (Sequence in Biotite), respectively.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Performance comparison for analysis algorithms. The computation time of performing popular tasks on biological data, starting from the package’s respective internal sequence or structure representation. Note the logarithmic scale. The performance between Biotite, Biopython, MDAnalysis, MDTraj and FreeSASA is shown. A missing bar indicates that the operation is not supported in the respective package. The average of 100 executions was taken. <bold>RMSD</bold>: Superimposition of a structure onto itself and subsequent RMSD calculation (PDB: 1AKI). <bold>Dihedral</bold>: Calculation of the backbone dihedral angles (<italic>ϕ</italic>, <italic>ψ</italic>, <italic>ω</italic>) of a protein (PDB: 1AKI). <bold>SASA</bold>: Calculation of the SASA of a protein (PDB: 1AKI). <bold>Align</bold>: Optimal global alignment of two 1,000 residues long polyalanine sequences</p></caption><graphic xlink:href="12859_2018_2367_Fig5_HTML" id="MO5"/></fig>
</p>
      <p>One usual task in structural bioinformatics is the superimposition of a structure onto another one (Kabsch algorithm [<xref ref-type="bibr" rid="CR18">18</xref>]) and the subsequent calculation of the RMSD. In this test case the structure of lysozyme was superimposed onto itself. Biotite, MDTraj and MDAnalysis showed comparable computation time. Compared to that, Biopython was an order of magnitude slower due to to the underlying data representation for structures in Biopython, based on pure Python objects. In consequence the data needs to be time-costly converted into a C-compatible data structure, prior to the actual structure superimposition. This circumstance generally hampers the efficiency when analyzing structures in Biopython: The analysis either requires an expensive conversion or is implemented in pure Python. In the other mentioned packages, including Biotite, the function can be directly executed on the internal ndarray objects. Although this case demonstrates the RMSD computation for a protein structure, Biotite can perform this task also for structures of nucleic acids or any other molecule since the superimposition and RMSD calculation does only depend on atom coordinates.</p>
      <p>Another test case was the dihedral angle measurement (<italic>ϕ</italic>, <italic>ψ</italic>, <italic>ω</italic>) of the peptide backbone atoms in the lysozyme structure. Biotite requires approximately half the computation time compared to MDTraj.</p>
      <p>The calculation of the solvent accessible surface area (SASA) is relatively time consuming. Both, Biotite and MDTraj, use an implementation of the Shrake-Rupley algorithm [<xref ref-type="bibr" rid="CR17">17</xref>]. For this benchmark the SASA of the lysozyme structure was calculated, with 1000 sphere points per atom. The measurement shows that Biotite is approximately two times faster than MDTraj. Another benefit of the implementation in Biotite is the ability to use atom radii suited for structures with missing hydrogen atoms [<xref ref-type="bibr" rid="CR28">28</xref>] like most X-ray elucidated structures. Additionally, the result is compared to the Lee-Richards method [<xref ref-type="bibr" rid="CR29">29</xref>] implemented in the C-accelerated package FreeSASA. This algorithm uses sphere slices instead of sphere points. The amount of sphere slices was chosen so that the accuracy is equal to the Shrake-Rupley test cases (Additional file <xref rid="MOESM3" ref-type="media">3</xref> and <xref rid="MOESM4" ref-type="media">4</xref>). The computation speed is comparable to Biotite.</p>
      <p>In regard to sequence data, a frequent operation is the optimal global alignment of two sequences using dynamic programming [<xref ref-type="bibr" rid="CR11">11</xref>]. Both, Biotite and Biopython, use a C-acclerated function to solve this problem. However, Biotite is an order of magnitude faster in performing this task. The main reason for this is the traceback step, that is C-accelerated in Biotite in contrast to Biopython. Moreover, Biotite uses a substitution matrix to score the alignment, while Biopython only distinguishes between match and mismatch. Although Biopython also supports substitution matrices in alignments, these are based on Python dictionaries. This comes with two disadvantages regarding the computational performance: At first the slow Python API is invoked for every cell in the alignment matrix. Secondly, as Biopython works directly with symbols, the dictionary access with a tuple of symbols is relatively time-consuming compared to the fast indexing operation with symbol codes in Biotite.</p>
      <p>Currently, Biotite can only produce pairwise alignments using the <italic>Needleman-Wunsch</italic> [<xref ref-type="bibr" rid="CR11">11</xref>] and <italic>Smith-Waterman</italic> [<xref ref-type="bibr" rid="CR12">12</xref>] algorithm, respectively. Although these techniques produce optimal alignments, the computation can be unfeasible for large sequences like entire genomes, as computation time and memory consumption scales linearly with the length of both sequences. Hence, more sophisticated heuristic pairwise alignment methods will be added to the package in future releases. Currently, <italic>Biotite</italic> can perform fast heuristic pairwise alignments using its <italic>NCBI BLAST</italic> [<xref ref-type="bibr" rid="CR22">22</xref>] interface in the application subpackage.</p>
    </sec>
    <sec id="Sec17">
      <title>Performance of structure file input and output</title>
      <p>Additionally, the computation time for reading and writing structure files in different formats was compared between Biotite, Biopython, MDAnalysis and MDTraj. The measured time is the time of loading a structure file (PDB: 2AVI [<xref ref-type="bibr" rid="CR30">30</xref>], 1952 atoms) into the internal representation of the package or saving this representation in a file, respectively. The results are shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref> (benchmark script in Additional file <xref rid="MOESM5" ref-type="media">5</xref>).
<fig id="Fig6"><label>Fig. 6</label><caption><p>Performance comparison for reading and writing structure files. The computation time of loading a file into the package’s respective internal structure representation (filled bar) and vice versa (hatched bar) is shown. The performance compared between Biotite, Biopython, MDAnalysis and MDTraj is shown. A missing bar indicates that the operation is not supported in the respective package. The structure of an avidin-biotin complex (PDB: 2AVI) was used for computation time measurement. The average of 100 executions was taken</p></caption><graphic xlink:href="12859_2018_2367_Fig6_HTML" id="MO6"/></fig>
</p>
      <p>PDB files are handled in comparable time by Biotite and Biopython: While Biotite is faster in reading PDB files, Biopython has an advantage in writing PDB files. MDAnalysis is very slow in respect of output, MDTraj is slow in PDB file input.</p>
      <p>The modern PDBx/mmCIF format is only supported by Biopython and Biotite, while Biopython only supports file parsing, whose performance is comparable to Biotite.</p>
      <p>The binary MMTF format shows an exceptional performance in combination with Biotite, with a loading time of 3.7 ms and a saving time of 2.6 ms. The parsing speed is multitudes higher than in Biopython and MDTraj. There are probably two reasons for this. Biotite provides its own MMTF decoder/encoder, which has a higher performance than the official one by the RCSB, since the complete decoding/encoding process is either vectorized or runs in native C code. Furthermore, the conversion of the decoded arrays from the MMTF file into an AtomArray (or AtomArrayStack) and vice versa is accelerated via Cython code. Therefore, MMTF is the preferable format when the user wants to analyze a large amount of structure files with Biotite. Notably, to our knowledge Biotite is the only Python framework that is able to save a structure as MMTF file.</p>
    </sec>
    <sec id="Sec18">
      <title>Benchmark details</title>
      <p>The presented benchmarks were run on an <italic>Intel®; Core™ i7-4702MQ</italic> CPU with 8 ×2.20 GHz. The operating system was <italic>Xubuntu</italic> 16.04 and the <italic>CPython</italic> version 3.6.3. The used packages had the following versions: 
<list list-type="bullet"><list-item><p>biotite 0.7.0</p></list-item><list-item><p>Cython 0.26.1</p></list-item><list-item><p>numpy 1.13.3</p></list-item><list-item><p>matplotlib 2.1.2</p></list-item><list-item><p>msgpack 0.5.6</p></list-item><list-item><p>requests 2.18.4</p></list-item><list-item><p>biopython 1.70</p></list-item><list-item><p>MDAnalysis 0.17.0</p></list-item><list-item><p>mdtraj 1.9.1</p></list-item><list-item><p>freesasa 2.0.3</p></list-item></list></p>
      <p>The average of 100 executions was taken for each benchmark.</p>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="conclusion">
    <title>Conclusion</title>
    <p>Due to the comprehensive content of Biotite, a large part of the computational molecular biology workflow can be performed with this package: Data of interest can be downloaded from biological databases and subsequently loaded into the Python environment. After analysis or manipulation of the sequence or structure data, it can be saved in various file formats or displayed using the included visualization capabilities. In cases where the required functionality is not directly integrated in the package, Biotite provides means to interface external software in a seamless manner.</p>
    <p>To our knowledge, the only computational molecular biology framework in Python that is able to fulfill this function to a similar extent, is Biopython. However, due to the high age of Biopython, the package does not meet established standards of scientific programming in Python, especially the usage of NumPy. Therefore, Biotite can be seen as an efficient alternative.</p>
    <p>We think that Biotite is suitable for use by novice programmers, since the extensive tutorial and the code examples give a good introduction into the package. Furthermore, the NumPy-like syntax provides an intuitive way to work with biological data.</p>
    <p>Additionally, advanced users benefit from the good performance, that follows from the vectorization via NumPy and the C-acceleration. The fact, that the internal ndarray instances can be directly accessed by the user, makes the Biotite package extensible. Custom algorithms can be easily implemented based on the internal representations of sequence and structure data. If a developer decides to build software upon Biotite, he/she is able to utilize the already implemented file parsers and analysis tools. Hence the development can focus on the unique features of the software.</p>
    <p>Biotite is continuously developed. Analysis tools for nucleic acid structures, heuristic sequence alignment methods and interfaces for more biological databases are planned to be added in future versions. Feature requests, bug reports, questions and development in general are handled at <ext-link ext-link-type="uri" xlink:href="https://github.com/biotite-dev/biotite">https://github.com/biotite-dev/biotite</ext-link>.</p>
  </sec>
  <sec id="Sec20">
    <title>Availability and requirements</title>
    <p><bold>Project name:</bold> Biotite</p>
    <p>
      <bold>Project home page:</bold>
      <ext-link ext-link-type="uri" xlink:href="https://www.biotite-python.org/">https://www.biotite-python.org/</ext-link>
    </p>
    <p><bold>Operating system(s):</bold> Windows, OS X, Linux</p>
    <p><bold>Programming language:</bold> Python</p>
    <p><bold>Other requirements:</bold> At least Python 3.4, the packages <italic>numpy</italic>, <italic>requests</italic> and <italic>msgpack</italic> must be installed</p>
    <p><bold>License:</bold> BSD 3-Clause</p>
    <p><bold>Any restrictions to use by non-academics:</bold> None</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional files</title>
    <sec id="Sec21">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2018_2367_MOESM1_ESM.7z">
            <label>Additional file 1</label>
            <caption>
              <p>Biotite documentation. This archive contains the HTML documentation of Biotite 0.7.0. The default entry point is index.html. (7Z 3453 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2018_2367_MOESM2_ESM.py">
            <label>Additional file 2</label>
            <caption>
              <p>Analysis performance benchmark. This Python script contains the benchmark for evaluation of the performance of implemented analysis algorithms. (PY 6 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2018_2367_MOESM3_ESM.pdf">
            <label>Additional file 3</label>
            <caption>
              <p>Comparison of SASA accuracy. This figure compares the accuracy of the SASA calculation depending on the computation time for the Shrake-Rupley algorithm implementation in Biotite and the Lee-Richards algorithm implementation in FreeSASA. (PDF 200 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2018_2367_MOESM4_ESM.py">
            <label>Additional file 4</label>
            <caption>
              <p>Comparison of SASA accuracy - script. This is the Python script corresponding to Additional file 3. (PY 4 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM5">
          <media xlink:href="12859_2018_2367_MOESM5_ESM.py">
            <label>Additional file 5</label>
            <caption>
              <p>Read/write performance benchmark. This Python script contains the benchmark for evaluation of the structure file read/write performance. (PY 8 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM6">
          <media xlink:href="12859_2018_2367_MOESM6_ESM.7z">
            <label>Additional file 6</label>
            <caption>
              <p>Biotite repository snapshot. This archive contains a snapshot of the Biotite repository at version 0.7.0. (7Z 6668 KB)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>API</term>
        <def>
          <p>Application programming interface</p>
        </def>
      </def-item>
      <def-item>
        <term>CDS</term>
        <def>
          <p>Coding DNA sequence</p>
        </def>
      </def-item>
      <def-item>
        <term>NMR</term>
        <def>
          <p>Nuclear magnetic resonance</p>
        </def>
      </def-item>
      <def-item>
        <term>RMSD</term>
        <def>
          <p>Root-mean-square deviation</p>
        </def>
      </def-item>
      <def-item>
        <term>RMSF</term>
        <def>
          <p>Root-mean-square fluctuation</p>
        </def>
      </def-item>
      <def-item>
        <term>SASA</term>
        <def>
          <p>Solvent accessible surface area</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Availability of data and materials</bold>
      </p>
      <p>The Biotite source code is hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/biotite-dev/biotite">https://github.com/biotite-dev/biotite</ext-link>
and its official documentation at <ext-link ext-link-type="uri" xlink:href="https://www.biotite-python.org/">https://www.biotite-python.org/</ext-link>. The version 0.7.0, that was used in this study, is available as archive [<xref ref-type="bibr" rid="CR31">31</xref>] (Additional file <xref rid="MOESM6" ref-type="media">6</xref>).</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Daniel Bauer accompanied the Biotite development.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>PK developed the Biotite package and wrote its documentation. KH guided the development process. PK and KH wrote the manuscript. Both authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="COI-statement">
    <sec>
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </sec>
    <sec>
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec>
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec>
      <title>Publisher’s Note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McGibbon</surname>
            <given-names>RT</given-names>
          </name>
          <name>
            <surname>Beauchamp</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>Harrigan</surname>
            <given-names>MP</given-names>
          </name>
          <name>
            <surname>Klein</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Swails</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Hernández</surname>
            <given-names>CX</given-names>
          </name>
          <name>
            <surname>Schwantes</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>LP</given-names>
          </name>
          <name>
            <surname>Lane</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Pande</surname>
            <given-names>VS</given-names>
          </name>
        </person-group>
        <article-title>MDTraj: A Modern Open Library for the Analysis of Molecular Dynamics Trajectories</article-title>
        <source>Biophys J</source>
        <year>2015</year>
        <volume>109</volume>
        <issue>8</issue>
        <fpage>1528</fpage>
        <lpage>32</lpage>
        <pub-id pub-id-type="doi">10.1016/j.bpj.2015.08.015</pub-id>
        <pub-id pub-id-type="pmid">26488642</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Michaud-Agrawal</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Denning</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Woolf</surname>
            <given-names>TB</given-names>
          </name>
          <name>
            <surname>Beckstein</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>MDAnalysis: A toolkit for the analysis of molecular dynamics simulations</article-title>
        <source>J Comput Chem</source>
        <year>2011</year>
        <volume>32</volume>
        <issue>10</issue>
        <fpage>2319</fpage>
        <lpage>27</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.21787</pub-id>
        <pub-id pub-id-type="pmid">21500218</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knight</surname>
            <given-names>Rob</given-names>
          </name>
          <name>
            <surname>Maxwell</surname>
            <given-names>Peter</given-names>
          </name>
          <name>
            <surname>Birmingham</surname>
            <given-names>Amanda</given-names>
          </name>
          <name>
            <surname>Carnes</surname>
            <given-names>Jason</given-names>
          </name>
          <name>
            <surname>Caporaso</surname>
            <given-names>J Gregory</given-names>
          </name>
          <name>
            <surname>Easton</surname>
            <given-names>Brett C</given-names>
          </name>
          <name>
            <surname>Eaton</surname>
            <given-names>Michael</given-names>
          </name>
          <name>
            <surname>Hamady</surname>
            <given-names>Micah</given-names>
          </name>
          <name>
            <surname>Lindsay</surname>
            <given-names>Helen</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Zongzhi</given-names>
          </name>
          <name>
            <surname>Lozupone</surname>
            <given-names>Catherine</given-names>
          </name>
          <name>
            <surname>McDonald</surname>
            <given-names>Daniel</given-names>
          </name>
          <name>
            <surname>Robeson</surname>
            <given-names>Michael</given-names>
          </name>
          <name>
            <surname>Sammut</surname>
            <given-names>Raymond</given-names>
          </name>
          <name>
            <surname>Smit</surname>
            <given-names>Sandra</given-names>
          </name>
          <name>
            <surname>Wakefield</surname>
            <given-names>Matthew J</given-names>
          </name>
          <name>
            <surname>Widmann</surname>
            <given-names>Jeremy</given-names>
          </name>
          <name>
            <surname>Wikman</surname>
            <given-names>Shandy</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>Stephanie</given-names>
          </name>
          <name>
            <surname>Ying</surname>
            <given-names>Hua</given-names>
          </name>
          <name>
            <surname>Huttley</surname>
            <given-names>Gavin A</given-names>
          </name>
        </person-group>
        <article-title>PyCogent: a toolkit for making sense from sequence</article-title>
        <source>Genome Biology</source>
        <year>2007</year>
        <volume>8</volume>
        <issue>8</issue>
        <fpage>R171</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2007-8-8-r171</pub-id>
        <pub-id pub-id-type="pmid">17708774</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cock</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Antao</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Dalke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Friedberg</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hamelryck</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kauff</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wilczynski</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>de Hoon</surname>
            <given-names>MJ</given-names>
          </name>
        </person-group>
        <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>11</issue>
        <fpage>1422</fpage>
        <lpage>3</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id>
        <pub-id pub-id-type="pmid">19304878</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Van Der Walt</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Colbert</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Varoquaux</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>The NumPy array: A structure for efficient numerical computation</article-title>
        <source>Comput Sci Eng</source>
        <year>2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>22</fpage>
        <lpage>30</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Behnel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bradshaw</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Citro</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Dalcin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Seljebotn</surname>
            <given-names>DS</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Cython: The best of both worlds</article-title>
        <source>Comput Sci Eng</source>
        <year>2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>31</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2010.118</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bowie</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Luthy</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Eisenberg</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>A method to identify protein sequences that fold into a known three-dimensional structure</article-title>
        <source>Science</source>
        <year>1991</year>
        <volume>253</volume>
        <issue>5016</issue>
        <fpage>164</fpage>
        <lpage>70</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1853201</pub-id>
        <pub-id pub-id-type="pmid">1853201</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Joseph</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Agarwal</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Mahajan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gelly</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Swapna</surname>
            <given-names>LS</given-names>
          </name>
          <name>
            <surname>Offmann</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Cadet</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Bornot</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tyagi</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Valadié</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Etchebest</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Srinivasan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>de Brevern</surname>
            <given-names>AG</given-names>
          </name>
        </person-group>
        <article-title>A short survey on protein blocks</article-title>
        <source>Biophys Rev</source>
        <year>2010</year>
        <volume>2</volume>
        <issue>3</issue>
        <fpage>137</fpage>
        <lpage>45</lpage>
        <pub-id pub-id-type="doi">10.1007/s12551-010-0036-1</pub-id>
        <pub-id pub-id-type="pmid">21731588</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolodny</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Koehl</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Guibas</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Levitt</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Small libraries of protein fragments model native protein structures accurately</article-title>
        <source>J Mol Biol</source>
        <year>2002</year>
        <volume>323</volume>
        <issue>2</issue>
        <fpage>297</fpage>
        <lpage>307</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(02)00942-7</pub-id>
        <pub-id pub-id-type="pmid">12381322</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hähnke</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Hofmann</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Grgat</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Proschak</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Steinhilber</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>PhAST: Pharmacophore alignment search tool</article-title>
        <source>J Comput Chem</source>
        <year>2009</year>
        <volume>30</volume>
        <issue>5</issue>
        <fpage>761</fpage>
        <lpage>71</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.21095</pub-id>
        <pub-id pub-id-type="pmid">18727161</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Needleman</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Wunsch</surname>
            <given-names>CD</given-names>
          </name>
        </person-group>
        <article-title>A general method applicable to the search for similarities in the amino acid sequence of two proteins</article-title>
        <source>J Mol Biol</source>
        <year>1970</year>
        <volume>48</volume>
        <issue>3</issue>
        <fpage>443</fpage>
        <lpage>53</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(70)90057-4</pub-id>
        <pub-id pub-id-type="pmid">5420325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>TF</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>MS</given-names>
          </name>
        </person-group>
        <article-title>Identification of common molecular subsequences</article-title>
        <source>J Mol Biol</source>
        <year>1981</year>
        <volume>147</volume>
        <issue>1</issue>
        <fpage>195</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id>
        <pub-id pub-id-type="pmid">7265238</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gotoh</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>An improved algorithm for matching biological sequences</article-title>
        <source>J Mol Biol</source>
        <year>1982</year>
        <volume>162</volume>
        <issue>3</issue>
        <fpage>705</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(82)90398-9</pub-id>
        <pub-id pub-id-type="pmid">7166760</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hirschberg</surname>
            <given-names>DS</given-names>
          </name>
        </person-group>
        <article-title>A linear space algorithm for computing maximal common subsequences</article-title>
        <source>Commun ACM</source>
        <year>1975</year>
        <volume>18</volume>
        <issue>6</issue>
        <fpage>341</fpage>
        <lpage>3</lpage>
        <pub-id pub-id-type="doi">10.1145/360825.360861</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <mixed-citation publication-type="other">Hess M, Keul F, Goesele M, Hamacher K. Addressing inaccuracies in BLOSUM computation improves homology search performance. BMC Bioinforma. 2016; 17(1). 10.1186/s12859-016-1060-3.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunter</surname>
            <given-names>John D.</given-names>
          </name>
        </person-group>
        <article-title>Matplotlib: A 2D Graphics Environment</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <year>2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <fpage>90</fpage>
        <lpage>95</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shrake</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rupley</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>Environment and exposure to solvent of protein atoms. Lysozyme and insulin</article-title>
        <source>J Mol Biol</source>
        <year>1973</year>
        <volume>79</volume>
        <issue>2</issue>
        <fpage>351</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(73)90011-9</pub-id>
        <pub-id pub-id-type="pmid">4760134</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kabsch</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>A solution for the best rotation to relate two sets of vectors</article-title>
        <source>Acta Crystallogr Sect A</source>
        <year>1976</year>
        <volume>32</volume>
        <issue>5</issue>
        <fpage>922</fpage>
        <lpage>3</lpage>
        <pub-id pub-id-type="doi">10.1107/S0567739476001873</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Labesse</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Colloc’h</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Pothier</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mornon</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>P-SEA: a new efficient assignment of secondary structure from C alpha trace of proteins</article-title>
        <source>Comput Appl Biosci</source>
        <year>1997</year>
        <volume>13</volume>
        <issue>3</issue>
        <fpage>291</fpage>
        <lpage>5</lpage>
        <?supplied-pmid 9183534?>
        <pub-id pub-id-type="pmid">9183534</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bradley</surname>
            <given-names>Anthony R.</given-names>
          </name>
          <name>
            <surname>Rose</surname>
            <given-names>Alexander S.</given-names>
          </name>
          <name>
            <surname>Pavelka</surname>
            <given-names>Antonín</given-names>
          </name>
          <name>
            <surname>Valasatava</surname>
            <given-names>Yana</given-names>
          </name>
          <name>
            <surname>Duarte</surname>
            <given-names>Jose M.</given-names>
          </name>
          <name>
            <surname>Prlić</surname>
            <given-names>Andreas</given-names>
          </name>
          <name>
            <surname>Rose</surname>
            <given-names>Peter W.</given-names>
          </name>
        </person-group>
        <article-title>MMTF—An efficient file format for the transmission, visualization, and analysis of macromolecular structures</article-title>
        <source>PLOS Computational Biology</source>
        <year>2017</year>
        <volume>13</volume>
        <issue>6</issue>
        <fpage>e1005575</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005575</pub-id>
        <pub-id pub-id-type="pmid">28574982</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Abraham</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Murtola</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Schulz</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Páll</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Hess</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lindah</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Gromacs: High performance molecular simulations through multi-level parallelism from laptops to supercomputers</article-title>
        <source>SoftwareX</source>
        <year>2015</year>
        <volume>1-2</volume>
        <fpage>19</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1016/j.softx.2015.06.001</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <issue>3</issue>
        <fpage>403</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>MUSCLE: Multiple sequence alignment with high accuracy and high throughput</article-title>
        <source>Nucleic Acids Res</source>
        <year>2004</year>
        <volume>32</volume>
        <issue>5</issue>
        <fpage>1792</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkh340</pub-id>
        <pub-id pub-id-type="pmid">15034147</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Katoh</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform</article-title>
        <source>Nucleic Acids Res</source>
        <year>2002</year>
        <volume>30</volume>
        <issue>14</issue>
        <fpage>3059</fpage>
        <lpage>66</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkf436</pub-id>
        <pub-id pub-id-type="pmid">12136088</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sievers</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Wilm</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Dineen</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Gibson</surname>
            <given-names>T. J.</given-names>
          </name>
          <name>
            <surname>Karplus</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Lopez</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>McWilliam</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Remmert</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Soding</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>J. D.</given-names>
          </name>
          <name>
            <surname>Higgins</surname>
            <given-names>D. G.</given-names>
          </name>
        </person-group>
        <article-title>Fast, scalable generation of high-quality protein multiple sequence alignments using Clustal Omega</article-title>
        <source>Molecular Systems Biology</source>
        <year>2014</year>
        <volume>7</volume>
        <issue>1</issue>
        <fpage>539</fpage>
        <lpage>539</lpage>
        <pub-id pub-id-type="doi">10.1038/msb.2011.75</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kabsch</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Sander</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Dictionary of protein secondary structure: Pattern recognition of hydrogen-bonded and geometrical features</article-title>
        <source>Biopolymers</source>
        <year>1983</year>
        <volume>22</volume>
        <issue>12</issue>
        <fpage>2577</fpage>
        <lpage>637</lpage>
        <pub-id pub-id-type="doi">10.1002/bip.360221211</pub-id>
        <pub-id pub-id-type="pmid">6667333</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Artymiuk</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Blake</surname>
            <given-names>CCF</given-names>
          </name>
          <name>
            <surname>Rice</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>KS</given-names>
          </name>
        </person-group>
        <article-title>The structures of the monoclinic and orthorhombic forms of hen egg-white lysozyme at 6 Angstroms resolution</article-title>
        <source>Acta Crystallogr Sect B</source>
        <year>1982</year>
        <volume>38</volume>
        <fpage>778</fpage>
        <lpage>83</lpage>
        <pub-id pub-id-type="doi">10.1107/S0567740882004075</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tsai</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Chothia</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Gerstein</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>The packing density in proteins: Standard radii and volumes</article-title>
        <source>J Mol Biol</source>
        <year>1999</year>
        <volume>290</volume>
        <issue>1</issue>
        <fpage>253</fpage>
        <lpage>66</lpage>
        <pub-id pub-id-type="doi">10.1006/jmbi.1999.2829</pub-id>
        <pub-id pub-id-type="pmid">10388571</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lee</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Richards</surname>
            <given-names>F.M.</given-names>
          </name>
        </person-group>
        <article-title>The interpretation of protein structures: Estimation of static accessibility</article-title>
        <source>Journal of Molecular Biology</source>
        <year>1971</year>
        <volume>55</volume>
        <issue>3</issue>
        <fpage>379</fpage>
        <lpage>IN4</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(71)90324-X</pub-id>
        <pub-id pub-id-type="pmid">5551392</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Livnah</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Bayer</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Wilchek</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sussman</surname>
            <given-names>JL</given-names>
          </name>
        </person-group>
        <article-title>Three-dimensional structures of avidin and the avidin-biotin complex</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>1993</year>
        <volume>90</volume>
        <issue>11</issue>
        <fpage>5076</fpage>
        <lpage>80</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.90.11.5076</pub-id>
        <pub-id pub-id-type="pmid">8506353</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <mixed-citation publication-type="other">Kunzmann P. Biotite 0.7.0 repository. 2018. Zenodo. 10.5281/zenodo.1310668.</mixed-citation>
    </ref>
  </ref-list>
</back>
