<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9235494</article-id>
    <article-id pub-id-type="pmid">35758819</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btac264</article-id>
    <article-id pub-id-type="publisher-id">btac264</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>ISCB/Ismb 2022</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>General Computational Biology</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>The effect of genome graph expressiveness on the discrepancy between genome graph distance and string set distance</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Qiu</surname>
          <given-names>Yutong</given-names>
        </name>
        <aff><institution>Computational Biology Department, Carnegie Mellon University</institution>, Pittsburgh, PA 15232, <country country="US">USA</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Kingsford</surname>
          <given-names>Carl</given-names>
        </name>
        <aff><institution>Computational Biology Department, Carnegie Mellon University</institution>, Pittsburgh, PA 15232, <country country="US">USA</country></aff>
        <xref rid="btac264-cor1" ref-type="corresp"/>
        <!--carlk@cs.cmu.edu-->
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btac264-cor1">To whom correspondence should be addressed. E-mail: <email>carlk@cs.cmu.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>7</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-06-27">
      <day>27</day>
      <month>6</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>6</month>
      <year>2022</year>
    </pub-date>
    <volume>38</volume>
    <issue>Suppl 1</issue>
    <issue-title>ISCB ISMB 2022 Proceedings</issue-title>
    <fpage>i404</fpage>
    <lpage>i412</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btac264.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Intra-sample heterogeneity describes the phenomenon where a genomic sample contains a diverse set of genomic sequences. In practice, the true string sets in a sample are often unknown due to limitations in sequencing technology. In order to compare heterogeneous samples, genome graphs can be used to represent such sets of strings. However, a genome graph is generally able to represent a string set universe that contains multiple sets of strings in addition to the true string set. This difference between genome graphs and string sets is not well characterized. As a result, a distance metric between genome graphs may not match the distance between true string sets.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We extend a genome graph distance metric, Graph Traversal Edit Distance (GTED) proposed by Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic>, to FGTED to model the distance between heterogeneous string sets and show that GTED and FGTED always underestimate the Earth Mover’s Edit Distance (EMED) between string sets. We introduce the notion of string set universe diameter of a genome graph. Using the diameter, we are able to upper-bound the deviation of FGTED from EMED and to improve FGTED so that it reduces the average error in empirically estimating the similarity between true string sets. On simulated T-cell receptor sequences and actual Hepatitis B virus genomes, we show that the diameter-corrected FGTED reduces the average deviation of the estimated distance from the true string set distances by more than 250%.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Data and source code for reproducing the experiments are available at: <ext-link xlink:href="https://github.com/Kingsford-Group/gtedemedtest/" ext-link-type="uri">https://github.com/Kingsford-Group/gtedemedtest/</ext-link>.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Gordon and Betty Moore Foundation’s Data-Driven Discovery Initiative</institution>
          </institution-wrap>
        </funding-source>
        <award-id>GBMF4554</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>US National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>R01GM122935</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>US National Science Foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>DBI-1937540</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Carnegie Mellon University School of Computer Science Sansom</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Intra-sample heterogeneity describes the phenomenon where a genomic sample contains a diverse set of genomic sequences. A heterogeneous string set is a set of strings where each string is assigned a weight representing its abundance in the set. Computing the distance between heterogeneous string sets is essentially computing the distance between two distributions of strings. We formulate the problem of heterogeneous sample comparison as the heterogeneous string set comparison problem.</p>
    <p>This problem can be used to compare samples where differences can be traced to the differences between sets of genomic sequences. For example, cancer samples are clustered based on differences in their genomic and transcriptomic features (<xref rid="btac264-B21" ref-type="bibr">Morris <italic toggle="yes">et al.</italic>, 2016</xref>; <xref rid="btac264-B35" ref-type="bibr">Zhao <italic toggle="yes">et al.</italic>, 2019</xref>) into cancer subtypes that correlate with patient survival rates. The dissimilarities between T-cell receptor (TCR) sequences are computed between individuals to study immune responses (<xref rid="btac264-B2" ref-type="bibr">Bolen <italic toggle="yes">et al.</italic>, 2017</xref>). Different compositions of these sequences result in different clinical outcomes such as response to treatment.</p>
    <p>We point out that the Earth Mover’s Distance (EMD) (<xref rid="btac264-B30" ref-type="bibr">Rubner <italic toggle="yes">et al.</italic>, 2000</xref>), or the Wasserstein distance (<xref rid="btac264-B33" ref-type="bibr">Wasserstein <italic toggle="yes">et al.</italic>, 1969</xref>), with edit distance as the ground metric is an elegant metric to compare a pair of heterogeneous string sets. Given two distributions of items and a cost to transform one item into another, EMD computes the total cost of transforming one distribution into another. The EMD was initially used in computer vision to compare distributions of pixel values in images (<xref rid="btac264-B16" ref-type="bibr">Levina and Bickel, 2001</xref>) and later adapted to natural language processing (<xref rid="btac264-B11" ref-type="bibr">Kusner <italic toggle="yes">et al.</italic>, 2015</xref>). It has also been used to approximate the distance between two genomes (<xref rid="btac264-B18" ref-type="bibr">Mangul and Koslicki, 2016</xref>) by computing the distance between two distributions of k-mers. To compare heterogeneous string sets, when the strings and their distributions are known, we use edit distance as the cost to transform one string to another. We refer to this as the Earth Mover’s Edit Distance (EMED).</p>
    <p>In practice, the complete strings of interest and their abundances are often unknown because these strings are only observed as fragmented sequencing reads. It is impossible to exactly compute EMED between the true sets of complete strings from the sequencing reads only.</p>
    <p>The challenges posed by incomplete observed sequences can be alleviated by representing the string set using a graph structure. Multiple types of genome graphs have been introduced (<xref rid="btac264-B1" ref-type="bibr">Almodaresi <italic toggle="yes">et al.</italic>, 2018</xref>; <xref rid="btac264-B3" ref-type="bibr">Dilthey <italic toggle="yes">et al.</italic>, 2015</xref>; <xref rid="btac264-B5" ref-type="bibr">Garrison <italic toggle="yes">et al.</italic>, 2018</xref>; <xref rid="btac264-B7" ref-type="bibr">Holley and Melsted, 2020</xref>; <xref rid="btac264-B8" ref-type="bibr">Iqbal <italic toggle="yes">et al.</italic>, 2012</xref>; <xref rid="btac264-B13" ref-type="bibr">Lee and Kingsford, 2018</xref>; <xref rid="btac264-B17" ref-type="bibr">Li <italic toggle="yes">et al.</italic>, 2020</xref>; <xref rid="btac264-B20" ref-type="bibr">Minkin <italic toggle="yes">et al.</italic>, 2017</xref>; <xref rid="btac264-B24" ref-type="bibr">Paten <italic toggle="yes">et al.</italic>, 2017</xref>, <xref rid="btac264-B23" ref-type="bibr">2011</xref>). For our purposes, a genome graph is a directed multigraph with labeled nodes and weighted edges, along with a source and a sink node. A string is spelled by a source-to-sink path, or <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> path, if it is equal to the concatenation of node labels on the path. We say that a genome graph represents a string set if the union of paths that spells each string in the set is equal to the graph. In other words, a string set can be spelled by a decomposition of the genome graph.</p>
    <p>There are several methods that compute the distance between genome graphs (<xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic>, 2020</xref>; <xref rid="btac264-B19" ref-type="bibr">Minkin and Medvedev, 2020</xref>; <xref rid="btac264-B27" ref-type="bibr">Polevikov and Kolmogorov, 2019</xref>). Among those, Graph Traversal Edit Distance (GTED) (<xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic>, 2020</xref>) is a general measure that can be applied to genome graphs and does not rely on the type of genome graphs nor the knowledge of the true string sets. Given two genome graphs, GTED finds an Eulerian cycle in each graph that minimizes the edit distance between the strings spelled by each cycle.</p>
    <p>However, applying GTED on genome graphs representing heterogeneous string sets may overestimate the similarity between these string sets for two reasons. First, since GTED computes the distance between Eulerian cycles in genome graphs, it may align the prefix of a string to the suffix of another string with no additional penalties. We address this challenge by proposing an extension of GTED, called FGTED, which penalizes direct alignment of prefixes of a string with suffixes of other strings.</p>
    <p>Second, and more significantly, both FGTED and GTED compute the edit distance between the two string sets represented by each genome graph that are most similar to each other. However, a genome graph that is constructed from sequencing fragments typically is able to represent more than one set of strings (<xref rid="btac264-B10" ref-type="bibr">Kingsford <italic toggle="yes">et al.</italic>, 2010</xref>; <xref rid="btac264-B25" ref-type="bibr">Paten <italic toggle="yes">et al.</italic>, 2018</xref>). As a genome graph merges shared sequences into the same node, it creates chains of bubble structures (<xref rid="btac264-B34" ref-type="bibr">Zerbino and Birney, 2008</xref>) that result in an exponential number of possible paths, and these paths spell a much more diverse collection of strings than the original set. We call the degree to which a genome graph encodes a larger set of strings than the true underlying set the ‘expressiveness’ of a genome graph. Due to the expressiveness of a genome graph, the Eulerian cycles found by GTED may not spell the true set of strings and the computed distance may be far from the true distance between string sets used to construct the graphs (<xref rid="btac264-F1" ref-type="fig">Fig. 1a</xref>).</p>
    <fig position="float" id="btac264-F1">
      <label>Fig. 1.</label>
      <caption>
        <p>(<bold>a</bold>) Genome graph expressiveness results in inexact representations of true string sets. (<bold>b</bold>) Overview of part of theoretical contributions</p>
      </caption>
      <graphic xlink:href="btac264f1" position="float"/>
    </fig>
    <p>We prove both that FGTED always produces a distance that is larger than or equal to GTED, and that FGTED computes a metric that is always less than or equal to the EMED between true sets of strings.</p>
    <p>However, FGTED and GTED can be quite far from the EMED. To resolve this discrepancy between FGTED and EMED, we define the collection of strings that can be represented by the genome graph as its string set universe, and genome graph expressiveness as the diameter of its string set universe (SUD), which is the maximum EMED between two string sets that can be represented by the graph (<xref rid="btac264-F1" ref-type="fig">Fig. 1b</xref>).</p>
    <p>Using diameters, we are able to upper-bound the deviation of FGTED from EMED. Additionally, we are able to correct FGTED and more accurately estimate the true string set distance empirically. On simulated TCR sequences, we reduce the average deviation of FGTED from EMED by more than 300%, and increase the correlation between the true and estimated string set distances by 20%. On Hepatitis B virus genomes, we reduce the average deviation by more than 250%.</p>
    <p>These results provide the first connection between comparisons of genome graphs that encode multiple sequences and a natural string distance and provide the first formalization of the expressiveness of genome graphs. Additionally, they provide a practical method to estimate and reduce discrepancy between genome graph distances and string set distances.</p>
  </sec>
  <sec>
    <title>2 Preliminary concepts</title>
    <sec>
      <title>2.1 Strings</title>
      <statement>
        <label><sc>Definition</sc> 1 (Heterogeneous string set).</label>
        <p><italic toggle="yes">A heterogeneous string set</italic> <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">S</mml:mi><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">contains a set of strings, where each string s<sub>i</sub> is assigned a weight</italic> <inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">that indicates the abundance of s<sub>i</sub> in</italic> <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:mi mathvariant="script">S</mml:mi></mml:math></inline-formula>. <italic toggle="yes">We say that the total weight of</italic> <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mi mathvariant="script">S</mml:mi></mml:math></inline-formula>  <italic toggle="yes">is</italic> <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:munder><mml:mrow><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula>.</p>
        <p><inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mrow><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is the minimum cost to transform <italic toggle="yes">s</italic><sub>1</sub> into <italic toggle="yes">s</italic><sub>2</sub> under edit distance (<xref rid="btac264-B15" ref-type="bibr">Levenshtein <italic toggle="yes">et al.</italic>, 1966</xref>). The set of operations that transforms <italic toggle="yes">s</italic><sub>1</sub> to <italic toggle="yes">s</italic><sub>2</sub> can be written as an alignment between <italic toggle="yes">s</italic><sub>1</sub> and <italic toggle="yes">s</italic><sub>2</sub>, or <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mo>=</mml:mo><mml:mi mathvariant="italic">align</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. The <italic toggle="yes">i</italic>-th position in <italic toggle="yes">A</italic> is denoted by <inline-formula id="IE8"><mml:math id="IM8" display="inline" overflow="scroll"><mml:mi>A</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:mtable><mml:mtr><mml:mtd><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub></mml:mtd></mml:mtr></mml:mtable><mml:mo stretchy="true">]</mml:mo></mml:math></inline-formula>, where <inline-formula id="IE9"><mml:math id="IM9" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> is either a gap character ‘-’ or a character in <italic toggle="yes">s<sub>a</sub></italic>.</p>
      </statement>
    </sec>
    <sec>
      <title>2.2 Earth Mover’s Edit Distance</title>
      <p>To find a distance between two heterogeneous string sets, we need to take into account not only the distance between pairs of strings, but also the weight, or abundance of each string in the set. When we are comparing two heterogeneous string sets, we are essentially comparing two distributions of strings. Therefore, we propose using the EMD as a natural distance measure.</p>
      <p>Given two distributions of items (here, strings) and a cost function that quantifies the cost of transforming one item into another, the EMD between the two distributions is the minimum cost to transform one distribution into another. Computing EMD can be viewed as a transportation problem that finds a many-to-many mapping between two sets of items and minimizes the total cost of the mapping (<xref rid="btac264-B30" ref-type="bibr">Rubner <italic toggle="yes">et al.</italic>, 2000</xref>; <xref rid="btac264-B33" ref-type="bibr">Wasserstein <italic toggle="yes">et al.</italic>, 1969</xref>).</p>
      <p>Given two heterogeneous string sets <inline-formula id="IE10"><mml:math id="IM10" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE11"><mml:math id="IM11" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>, to compute the EMED, we use the edit distance between <italic toggle="yes">s<sub>i</sub></italic> and <italic toggle="yes">s<sub>j</sub></italic> as the cost of transforming one string to another. Following procedures to compute EMD (<xref rid="btac264-B30" ref-type="bibr">Rubner <italic toggle="yes">et al.</italic>, 2000</xref>) as a min-cost max-flow problem, we find a mapping <italic toggle="yes">M</italic>, where <inline-formula id="IE12"><mml:math id="IM12" display="inline" overflow="scroll"><mml:mrow><mml:mi>M</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is the amount of <inline-formula id="IE13"><mml:math id="IM13" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> to be transformed into <inline-formula id="IE14"><mml:math id="IM14" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, which minimizes <inline-formula id="IE15"><mml:math id="IM15" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mstyle displaystyle="true"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:munder><mml:mi>M</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>·</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. We define that <inline-formula id="IE16"><mml:math id="IM16" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mi>M</mml:mi></mml:msub><mml:mi>c</mml:mi><mml:mi mathvariant="italic">ost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
    </sec>
    <sec>
      <title>2.3 Flow networks</title>
      <statement>
        <label><sc>Definition</sc> 2 (Valid flow network).</label>
        <p><italic toggle="yes">A directed graph</italic> <inline-formula id="IE17"><mml:math id="IM17" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">G</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, <italic toggle="yes">where w</italic>(<italic toggle="yes">e</italic>) <italic toggle="yes">is the weight of each edge, is a valid flow network if there exists a source s and sink node t such that:</italic>
 <disp-formula id="E1"><mml:math id="M1" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mo>(</mml:mo><mml:mtext>Flow conservation</mml:mtext><mml:mo>)</mml:mo><mml:mo> </mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>∀</mml:mo><mml:mi>v</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>≠</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>≠</mml:mo><mml:mi>t</mml:mi><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>(</mml:mo><mml:mtext>Total capacity</mml:mtext><mml:mo>)</mml:mo><mml:mo> </mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      </statement>
      <statement>
        <label><sc>Definition</sc> 3 (Flow decomposition).</label>
        <p><italic toggle="yes">A flow decomposition of a valid flow graph</italic> <inline-formula id="IE18"><mml:math id="IM18" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>, <italic toggle="yes">denoted as</italic> <inline-formula id="IE19"><mml:math id="IM19" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">, is a collection of paths and their weights</italic> <inline-formula id="IE20"><mml:math id="IM20" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">, where</italic> <inline-formula id="IE21"><mml:math id="IM21" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mi>m</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is an ordered sequence of edges in</italic> <inline-formula id="IE22"><mml:math id="IM22" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula><italic toggle="yes">, such that:</italic>
 <disp-formula id="E2"><mml:math id="M2" display="block" overflow="scroll"><mml:mrow><mml:mo>(</mml:mo><mml:mtext>Flow coverage</mml:mtext><mml:mo>)</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:munder><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>·</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo>∀</mml:mo><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula><italic toggle="yes">where O</italic>(<italic toggle="yes">e</italic>, <italic toggle="yes">i</italic>) <italic toggle="yes">is equal to the number of occurrences of edge e in path p<sub>i</sub></italic>.</p>
      </statement>
      <p>A valid flow network typically has more than one flow decomposition. Let the set of possible flow decompositions of <inline-formula id="IE23"><mml:math id="IM23" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula> be <inline-formula id="IE24"><mml:math id="IM24" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>.</p>
    </sec>
    <sec>
      <title>2.4 Genome graphs</title>
      <p>There are many variants of genome graphs used for various purposes and in various settings. Here, we introduce the definition of genome graphs we will use.<statement><label><sc>Definition</sc> 4 (Genome graph).</label><p><italic toggle="yes">A genome graph</italic> <inline-formula id="IE25"><mml:math id="IM25" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">G</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is a valid flow network with node set V, edge set E, node labels l(u) for each</italic> <inline-formula id="IE26"><mml:math id="IM26" display="inline" overflow="scroll"><mml:mrow><mml:mi>u</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and edge weights w(e) for each</italic> <inline-formula id="IE27"><mml:math id="IM27" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:math></inline-formula><italic toggle="yes">. A genome graph contains a source node s and a sink node t, and</italic> <inline-formula id="IE28"><mml:math id="IM28" display="inline" overflow="scroll"><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">“$”</italic>, <inline-formula id="IE29"><mml:math id="IM29" display="inline" overflow="scroll"><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">“#”, where $ and # are special characters that do not appear in any string set considered in the scope of this manuscript.</italic></p><p>Define operator <inline-formula id="IE30"><mml:math id="IM30" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> that transforms a set of paths in a genome graph <inline-formula id="IE31"><mml:math id="IM31" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula> to a set of strings by concatenating the node labels on each path. <inline-formula id="IE32"><mml:math id="IM32" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="italic">concat</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> is a heterogeneous string set where the weight of each string is equal to the weight of the path that spells the string.</p></statement><statement><label><sc>Definition</sc> 5 (String set represented by a genome graph).</label><p><italic toggle="yes">A genome graph</italic> <inline-formula id="IE33"><mml:math id="IM33" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>  <italic toggle="yes">represents a string set</italic> <inline-formula id="IE34"><mml:math id="IM34" display="inline" overflow="scroll"><mml:mi mathvariant="script">S</mml:mi></mml:math></inline-formula>  <italic toggle="yes">if there exists a decomposition</italic> <inline-formula id="IE35"><mml:math id="IM35" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">, such that</italic> <inline-formula id="IE36"><mml:math id="IM36" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="script">S</mml:mi></mml:mrow></mml:math></inline-formula>.</p><p>We use <inline-formula id="IE37"><mml:math id="IM37" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">G</mml:mi><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">S</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> to denote when <inline-formula id="IE38"><mml:math id="IM38" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula> represents <inline-formula id="IE39"><mml:math id="IM39" display="inline" overflow="scroll"><mml:mi mathvariant="script">S</mml:mi></mml:math></inline-formula>.</p></statement><statement><label><sc>Definition</sc> 6 (String set universe represented by a genome graph).</label><p><italic toggle="yes">The string set universe</italic> <inline-formula id="IE40"><mml:math id="IM40" display="inline" overflow="scroll"><mml:mrow><mml:mtext>SU</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">of a genome graph</italic> <inline-formula id="IE41"><mml:math id="IM41" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>  <italic toggle="yes">is the collection of all heterogeneous string sets that can be represented by</italic> <inline-formula id="IE42"><mml:math id="IM42" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula><italic toggle="yes">. Formally</italic>, <inline-formula id="IE43"><mml:math id="IM43" display="inline" overflow="scroll"><mml:mrow><mml:mtext>SU</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:mi>D</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>.</p></statement></p>
    </sec>
    <sec>
      <title>2.5 Alignment graph</title>
      <p>An alignment graph is used to align two genome graphs (<xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic>, 2020</xref>) and can be viewed as a graph product between two genome graphs. A special case of the alignment graph (<xref rid="btac264-B9" ref-type="bibr">Jain <italic toggle="yes">et al.</italic>, 2020</xref>) is used to align a string to a graph where the string is represented as a graph with only one path. We assume that the genome graphs to be aligned are transformed so that the label of each node contains only one character.<statement><label><sc>Definition</sc> 7 (Alignment graph).</label><p><italic toggle="yes">Given genome graphs</italic> <inline-formula id="IE44"><mml:math id="IM44" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE45"><mml:math id="IM45" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">, an alignment graph</italic> <inline-formula id="IE46"><mml:math id="IM46" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is a directed graph with node set V<sub>A</sub>, edge set E<sub>A</sub>, edge cost cost(e) and edge weight w(e) for each edge</italic> <inline-formula id="IE47"><mml:math id="IM47" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">. The alignment graph is defined following the steps:</italic>
 <list list-type="bullet"><list-item><p><italic toggle="yes">V<sub>A</sub> is constructed by adding pairings of nodes in V</italic><sub>1</sub>  <italic toggle="yes">and V</italic><sub>2</sub><italic toggle="yes">; that is</italic> <inline-formula id="IE48"><mml:math id="IM48" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>.</p></list-item><list-item><p><italic toggle="yes">For each edge</italic> <inline-formula id="IE49"><mml:math id="IM49" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE50"><mml:math id="IM50" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">, where</italic> <inline-formula id="IE51"><mml:math id="IM51" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE52"><mml:math id="IM52" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">, create three types of edges:</italic></p></list-item></list><list list-type="order"><list-item><p><italic toggle="yes">A match/mismatch edge</italic> <inline-formula id="IE53"><mml:math id="IM53" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">with</italic> <inline-formula id="IE54"><mml:math id="IM54" display="inline" overflow="scroll"><mml:mrow><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>min</mml:mi><mml:mo>{</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>.</p></list-item><list-item><p><italic toggle="yes">An insertion (in) edge</italic> <inline-formula id="IE55"><mml:math id="IM55" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">with</italic> <inline-formula id="IE56"><mml:math id="IM56" display="inline" overflow="scroll"><mml:mrow><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p></list-item><list-item><p><italic toggle="yes">A deletion (del) edge</italic> <inline-formula id="IE57"><mml:math id="IM57" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">with</italic> <inline-formula id="IE58"><mml:math id="IM58" display="inline" overflow="scroll"><mml:mrow><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p></list-item></list></p><p><italic toggle="yes">The cost of an in/del edge and a mismatch edge is equal to a customized penalty. The cost of a match edge is equal to zero. A match/mismatch edge should be distinguished with an in/del edge if the corresponding edge in one of the input graphs is a self-loop.</italic></p><p>Each edge <inline-formula id="IE59"><mml:math id="IM59" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> in an alignment graph can be projected onto one edge in each of the input graphs. An edge in each of the input graphs can also be projected onto a set of edges in <italic toggle="yes">AG</italic>. The size of <italic toggle="yes">AG</italic> is <inline-formula id="IE60"><mml:math id="IM60" display="inline" overflow="scroll"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>|</mml:mo><mml:mo>·</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>|</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and thus the time to construct <italic toggle="yes">AG</italic> is quadratic in the sizes of the input genome graphs.</p></statement><statement><label><sc>Definition</sc> 8 (Projection function).</label><p><italic toggle="yes">Define the projection function as</italic> <inline-formula id="IE61"><mml:math id="IM61" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">H</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>E</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">that maps an edge e from graph</italic> <inline-formula id="IE62"><mml:math id="IM62" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>  <italic toggle="yes">to a set of edges</italic> <inline-formula id="IE63"><mml:math id="IM63" display="inline" overflow="scroll"><mml:mrow><mml:mi>E</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">in graph</italic> <inline-formula id="IE64"><mml:math id="IM64" display="inline" overflow="scroll"><mml:mi mathvariant="script">H</mml:mi></mml:math></inline-formula><italic toggle="yes">. The projection function maps an edge in the alignment graph to the edges in the input graphs that are matched together by that edge. It also maps an edge in one of the input graphs to a set of edges in the alignment graph where it is matched with other edges in another input graph. Specifically:</italic></p><p><italic toggle="yes">Projection from alignment graph to one of the input graphs is defined by</italic>
 <disp-formula id="E3"><mml:math id="M3" display="block" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>}</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p><italic toggle="yes">Projection from one of the input graphs to alignment graph is defined by</italic>
 <disp-formula id="E4"><mml:math id="M4" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>e</mml:mi><mml:mo>|</mml:mo><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi></mml:mrow></mml:msub><mml:mo>}</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>e</mml:mi><mml:mo>|</mml:mo><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi></mml:mrow></mml:msub><mml:mo>}</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p><p>Given a set of paths <inline-formula id="IE65"><mml:math id="IM65" display="inline" overflow="scroll"><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula> in <italic toggle="yes">AG</italic>, we use <inline-formula id="IE66"><mml:math id="IM66" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> to denote the projection of <inline-formula id="IE67"><mml:math id="IM67" display="inline" overflow="scroll"><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula> onto <inline-formula id="IE68"><mml:math id="IM68" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE9000"><mml:math id="IM69" display="inline" overflow="scroll"><mml:mstyle displaystyle="false"><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>|</mml:mo><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo>}</mml:mo></mml:mstyle></mml:math></inline-formula> and the projection of <italic toggle="yes">p</italic> onto <inline-formula id="IE9001"><mml:math id="IM70" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> is <inline-formula><mml:math id="IM71" display="inline" overflow="scroll"><mml:mstyle displaystyle="false"><mml:msubsup><mml:mrow><mml:mrow><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:msub><mml:mi>e</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:msubsup><mml:mo> </mml:mo><mml:mi>for</mml:mi><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mi>e</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>e</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mstyle></mml:math></inline-formula>.</p><p>For convenience, we define that <inline-formula id="IE70"><mml:math id="IM72" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, which is the set of strings spelled by a path decomposition in <italic toggle="yes">AG</italic> that is projected onto <inline-formula id="IE71"><mml:math id="IM73" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>.</p></statement></p>
    </sec>
    <sec>
      <title>2.6 Graph Traversal Edit Distance</title>
      <p>GTED, proposed by <xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic> (2020)</xref>, is a distance between two labeled graphs which are assumed to be Eulerian graphs. Given a genome graph in our definition, we add an edge directing from sink to source with weight equal the sum of edge weights that are directing from the source node in order to make an Eulerian graph.</p>
      <p>Let the language of <inline-formula id="IE72"><mml:math id="IM74" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">G</mml:mi><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mi>L</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, be the set of strings spelled by Eulerian cycles in <inline-formula id="IE73"><mml:math id="IM75" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>. Formally, <inline-formula id="IE74"><mml:math id="IM76" display="inline" overflow="scroll"><mml:mrow><mml:mi>L</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:mi>c</mml:mi><mml:mo> </mml:mo><mml:mtext>is an Eulerian cycle in</mml:mtext><mml:mo> </mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>.<statement><label><sc>Definition</sc> 9</label><p>(Graph Traversal Edit Distance (<xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic>, 2020</xref>)). <italic toggle="yes">Let</italic> <inline-formula id="IE75"><mml:math id="IM77" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE76"><mml:math id="IM78" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">be two Eulerian graphs, where the weights on the edges are seen as the number of times an edge must be visited in each Eulerian cycle. Then</italic>,
<disp-formula id="E5"><mml:math id="M5" display="block" overflow="scroll"><mml:mrow><mml:mtext>GTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mstyle displaystyle="true"><mml:mrow><mml:mover><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>∈</mml:mo><mml:mi>L</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>∈</mml:mo><mml:mi>L</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mover></mml:mrow></mml:mstyle></mml:munder><mml:mi>E</mml:mi><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p>GTED finds one Eulerian cycle in each genome graph such that the edit distance between the strings spelled by the Eulerian cycles is minimized. GTED is computed by solving a linear programming (LP) formulation (<xref rid="E6 E7 E8 E9" ref-type="disp-formula">Equations (1)–(4)</xref>) on the alignment graph <inline-formula id="IE77"><mml:math id="IM79" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, which minimizes the cost of a flow in the graph with the flow conservation (<xref rid="E9" ref-type="disp-formula">Equation (4)</xref>) and flow coverage constraints (<xref rid="E7" ref-type="disp-formula">Equations (2)</xref> and <xref rid="E8" ref-type="disp-formula">(3)</xref>). The LP formulation is as follows:
<disp-formula id="E6"><label>(1)</label><mml:math id="M6" display="block" overflow="scroll"><mml:mrow><mml:munder><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>x</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:munder><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:munder><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>·</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>e</mml:mi></mml:msub></mml:mrow></mml:math></disp-formula>
 <disp-formula id="E7"><label>(2)</label><mml:math id="M7" display="block" overflow="scroll"><mml:mrow><mml:mi>s</mml:mi><mml:mo>.</mml:mo><mml:mi>t</mml:mi><mml:mo>.</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo>∀</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></disp-formula>
 <disp-formula id="E8"><label>(3)</label><mml:math id="M8" display="block" overflow="scroll"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo>∀</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></disp-formula>
 <disp-formula id="E9"><label>(4)</label><mml:math id="M9" display="block" overflow="scroll"><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo>)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>∀</mml:mo><mml:mi>v</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>A</mml:mi></mml:msub></mml:math></disp-formula></p><p><xref rid="btac264-B4" ref-type="bibr">Ebrahimpour Boroojeny <italic toggle="yes">et al.</italic> (2020)</xref> prove that GTED is equal to the optimal solution of this LP formulation, and thus GTED is computable in polynomial time. The number of constraints in the above LP is linear in the size of the alignment graph and thus quadratic in the size of the input genome graphs.</p></statement></p>
    </sec>
  </sec>
  <sec>
    <title>3 An extension of GTED</title>
    <p>GTED was originally used to compare genome graphs that are assumed to contain single genomes. It is therefore intuitive that each string represented by the genome graph is spelled with an Eulerian cycle. This property follows the property of assembly graphs (<xref rid="btac264-B26" ref-type="bibr">Pevzner <italic toggle="yes">et al.</italic>, 2001</xref>). When the genome graph represents more than one string, finding a string spelled by an Eulerian cycle <italic toggle="yes">c</italic> in the graph is equivalent to finding a concatenation of a permutation of strings in a string set. When aligning two Eulerian cycles, <italic toggle="yes">c</italic><sub>1</sub> and <italic toggle="yes">c</italic><sub>2</sub>, from input graphs, the boundaries between strings are ignored and the prefix of one string may be aligned to the suffix of another string with no cost. However, such alignment is not allowed when we align sets of strings using EMED.</p>
    <p>We propose an extension of GTED with a modified cost function in edit distance computation so that the cost of aligning the sink character <inline-formula id="IE78"><mml:math id="IM80" display="inline" overflow="scroll"><mml:mo>#</mml:mo></mml:math></inline-formula> with any other character is infinity.</p>
    <p><xref rid="btac264-F2" ref-type="fig">Figure 2a</xref> shows an example of the alignment graph built from two input graphs using the proposed cost function. Let the sink nodes in <inline-formula id="IE79"><mml:math id="IM81" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE80"><mml:math id="IM82" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> be <italic toggle="yes">t</italic><sub>1</sub> and <italic toggle="yes">t</italic><sub>2</sub>, and the source nodes be <italic toggle="yes">s</italic><sub>1</sub> and <italic toggle="yes">s</italic><sub>2</sub>, respectively. After removing all the alignment edges with infinite costs, there is an edge to the alignment node (<italic toggle="yes">t</italic><sub>1</sub>, <italic toggle="yes">t</italic><sub>2</sub>) in <italic toggle="yes">AG</italic> if and only if there exists an edge (<italic toggle="yes">u</italic><sub>1</sub>, <italic toggle="yes">t</italic><sub>1</sub>) in <inline-formula id="IE81"><mml:math id="IM83" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and an edge (<italic toggle="yes">u</italic><sub>2</sub>, <italic toggle="yes">t</italic><sub>2</sub>) in <inline-formula id="IE82"><mml:math id="IM84" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. The only incoming edge to (<italic toggle="yes">s</italic><sub>1</sub>, <italic toggle="yes">s</italic><sub>2</sub>) is <inline-formula id="IE83"><mml:math id="IM85" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. We refer to the edge <inline-formula id="IE84"><mml:math id="IM86" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> as the sink-to-source edge, or <italic toggle="yes">t–s</italic> edge in alignment graph in the rest of the article.</p>
    <fig position="float" id="btac264-F2">
      <label>Fig. 2.</label>
      <caption>
        <p>(<bold>a</bold>) An alignment graph <italic toggle="yes">AG</italic> between <inline-formula id="IE85"><mml:math id="IM87" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> (vertical) and <inline-formula id="IE86"><mml:math id="IM88" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> (horizontal). Insertion, deletion and match/mismatch edges are labeled with different colors. (b) <inline-formula id="IE87"><mml:math id="IM89" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> after removing all the edges with zero flow in a solution to <inline-formula id="IE88"><mml:math id="IM90" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Edges in <inline-formula id="IE89"><mml:math id="IM91" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE90"><mml:math id="IM92" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> that are highlighted with matching colors are projections from edges in <inline-formula id="IE91"><mml:math id="IM93" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> to <inline-formula id="IE92"><mml:math id="IM94" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE93"><mml:math id="IM95" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, respectively. Path <inline-formula id="IE94"><mml:math id="IM96" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>$</mml:mo><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mo>#</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> is aligned to <inline-formula id="IE95"><mml:math id="IM97" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>$</mml:mo><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mo>#</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and path <inline-formula id="IE96"><mml:math id="IM98" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>$</mml:mo><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo>,</mml:mo><mml:mo>#</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> is aligned to <inline-formula id="IE97"><mml:math id="IM99" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>$</mml:mo><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mo>#</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. The weights on <italic toggle="yes">AG</italic> and <inline-formula id="IE98"><mml:math id="IM100" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> edges are omitted for simplicity</p>
      </caption>
      <graphic xlink:href="btac264f2" position="float"/>
    </fig>
    <p>We let Flow-GTED, or FGTED, denote the distance computed using the alignment graph after removing all infinity cost edges. FGTED assumes that the input genome graphs are flow networks that represent string sets, which can be seen as an analog to Eulerian tours in the graphs that are used as input for GTED. Sink-to-source edges are added to transform flow networks into Eulerian graphs such that FGTED can be reduced to GTED. As FGTED solves a similar LP formulation as GTED that is constructed on a slightly smaller alignment graph, FGTED is also solvable in polynomial time.<statement><label><sc>Theorem</sc> 1.</label><p><inline-formula id="IE99"><mml:math id="IM101" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">GTED</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">for any pair of genome graphs</italic> <inline-formula id="IE100"><mml:math id="IM102" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>.</p></statement></p>
    <p><sc>Proof</sc>. Since FGTED is computed on a smaller alignment graph that contains fewer edges than that for computing GTED, FGTED explores a smaller solution space than GTED in solving the LP formulation. Therefore, any feasible solution to the LP formulation for <inline-formula id="IE101"><mml:math id="IM103" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is a feasible solution to the LP formulation for <inline-formula id="IE102"><mml:math id="IM104" display="inline" overflow="scroll"><mml:mrow><mml:mtext>GTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Since <inline-formula id="IE103"><mml:math id="IM105" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">GTED</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> minimizes the objective, the theorem is true.◻</p>
  </sec>
  <sec>
    <title>4 The relationship between GTED, FGTED and EMED</title>
    <p>Let <inline-formula id="IE104"><mml:math id="IM106" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> be the alignment graph after removing the <italic toggle="yes">t–</italic><italic toggle="yes">s</italic> edge and all the edges from <inline-formula id="IE105"><mml:math id="IM107" display="inline" overflow="scroll"><mml:mrow><mml:mo>{</mml:mo><mml:mi>e</mml:mi><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>e</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mi>A</mml:mi></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> from the LP solution to <xref rid="E6 E7 E8 E9" ref-type="disp-formula">Equations (1)–(4)</xref>. We say that <inline-formula id="IE106"><mml:math id="IM108" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> is a solution of FGTED. Due to constraints (2)–(4), <inline-formula id="IE107"><mml:math id="IM109" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> is a valid flow network. Let <inline-formula id="IE108"><mml:math id="IM110" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> be a flow decomposition in <inline-formula id="IE109"><mml:math id="IM111" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>. Similar to the Eulerian cycles found during the GTED computation, each path in <inline-formula id="IE110"><mml:math id="IM112" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> can be projected to a path in <inline-formula id="IE111"><mml:math id="IM113" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and a path in <inline-formula id="IE112"><mml:math id="IM114" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>.</p>
    <p>Denote <inline-formula id="IE113"><mml:math id="IM115" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> as the set of strings spelled by the set of projected paths from a decomposition <inline-formula id="IE114"><mml:math id="IM116" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> to <inline-formula id="IE115"><mml:math id="IM117" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. Similarly, <inline-formula id="IE116"><mml:math id="IM118" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. We show an example of path projections in <xref rid="btac264-F2" ref-type="fig">Figure 2b</xref>.</p>
    <p>Observing that we can do flow decomposition in both the FGTED solution and input genome graphs, we will show in this section that FGTED can be bounded by EMED between decompositions in the input genome graphs and in the alignment graph solutions.<statement><label><sc>Theorem</sc> 2.</label><p><italic toggle="yes">Given two sets of strings</italic> <inline-formula id="IE117"><mml:math id="IM119" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE118"><mml:math id="IM120" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">, and genome graphs representing these string sets</italic>, <inline-formula id="IE119"><mml:math id="IM121" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE120"><mml:math id="IM122" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E10"><mml:math id="M10" display="block" overflow="scroll"><mml:mrow><mml:mn>0</mml:mn><mml:mo>≤</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></disp-formula>
 <disp-formula id="E11"><mml:math id="M11" display="block" overflow="scroll"><mml:mrow><mml:mo>≤</mml:mo><mml:mstyle displaystyle="true"><mml:munder><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:munder></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></disp-formula><italic toggle="yes">where</italic> <inline-formula id="IE121"><mml:math id="IM123" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is the solution obtained from</italic> <inline-formula id="IE122"><mml:math id="IM124" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.◻</p></statement></p>
    <p>The proof of this theorem is completed in two parts. The first inequality is proven in Section 4.1 and the second is proven in Section 4.2. Since FGTED computes a distance that is larger than GTED between the same pair of genome graphs (Theorem 1), Theorem 2 also shows that FGTED always estimates the distance between true string sets more accurately than GTED.</p>
    <sec>
      <title>4.1 FGTED is always less than or equal to EMED</title>
      <p>We show in this section that FGTED can be expressed in terms of EMED between string sets constructed from decomposing <inline-formula id="IE123"><mml:math id="IM125" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>. In other words, while GTED finds an Eulerian tour in each input graph, FGTED finds a flow decomposition in <inline-formula id="IE124"><mml:math id="IM126" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE125"><mml:math id="IM127" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, respectively, that minimizes the EMED between them. Analogous to Definition 9, we have:<statement><label><sc>Theorem</sc> 3.</label><p><italic toggle="yes">Given two genome graphs</italic> <inline-formula id="IE126"><mml:math id="IM128" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE127"><mml:math id="IM129" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E12"><mml:math id="M12" display="block" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle displaystyle="true"><mml:munder><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:munder></mml:mstyle><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></disp-formula></p><p>Theorem 3 allows us to define FGTED as the minimum EMED between flow decompositions in input graphs. To prove Theorem 3, we first explore the relationship between an <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> path in <inline-formula id="IE128"><mml:math id="IM130" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> and the strings spelled by the projections of this path onto <inline-formula id="IE129"><mml:math id="IM131" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE130"><mml:math id="IM132" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>.</p></statement><statement><label><sc>Lemma</sc> 1.</label><p><italic toggle="yes">Given an s-t path</italic> <inline-formula id="IE131"><mml:math id="IM133" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">, let</italic> <inline-formula id="IE132"><mml:math id="IM134" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">be the string spelled by projecting p onto</italic> <inline-formula id="IE133"><mml:math id="IM135" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula><italic toggle="yes">, and</italic> <inline-formula id="IE134"><mml:math id="IM136" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula><italic toggle="yes">. Then for any</italic> <inline-formula id="IE135"><mml:math id="IM137" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E13"><mml:math id="M13" display="block" overflow="scroll"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:mi>p</mml:mi></mml:mrow></mml:munder><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p></statement></p>
      <p><sc>Proof</sc>. We prove in two directions.</p>
      <p><bold><italic toggle="yes">(</italic></bold><inline-formula id="IE136"><mml:math id="IM138" display="inline" overflow="scroll"><mml:mo>≥</mml:mo></mml:math></inline-formula>  <italic toggle="yes">direction)</italic> We construct <inline-formula id="IE137"><mml:math id="IM139" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mo>=</mml:mo><mml:mi mathvariant="italic">align</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> from <italic toggle="yes">p</italic>. For each <inline-formula id="IE138"><mml:math id="IM140" display="inline" overflow="scroll"><mml:mrow><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>p</mml:mi></mml:mrow></mml:math></inline-formula>:</p>
      <p>(i) if <italic toggle="yes">u</italic><sub>1</sub> = <italic toggle="yes">v</italic><sub>1</sub>, add <inline-formula id="IE139"><mml:math id="IM141" display="inline" overflow="scroll"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mo>−</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> to <italic toggle="yes">A</italic>, (ii) if <italic toggle="yes">u</italic><sub>2</sub> = <italic toggle="yes">v</italic><sub>2</sub>, add <inline-formula id="IE140"><mml:math id="IM142" display="inline" overflow="scroll"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>−</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> to <italic toggle="yes">A</italic>, (iii) else, add <inline-formula id="IE141"><mml:math id="IM143" display="inline" overflow="scroll"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mi>l</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula> to <italic toggle="yes">A</italic>.</p>
      <p>By definition of an alignment graph, <inline-formula id="IE142"><mml:math id="IM144" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> in for all <italic toggle="yes">e</italic>, and therefore <inline-formula id="IE143"><mml:math id="IM145" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mo>∈</mml:mo><mml:mi>A</mml:mi></mml:mrow></mml:munder><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>e</mml:mi><mml:mo>∈</mml:mo><mml:mi>p</mml:mi></mml:mrow></mml:munder><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Since edit distance minimizes the cost of edit operations, <inline-formula id="IE144"><mml:math id="IM146" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p><bold><italic toggle="yes">(</italic></bold><inline-formula id="IE145"><mml:math id="IM147" display="inline" overflow="scroll"><mml:mo>≤</mml:mo></mml:math></inline-formula>  <italic toggle="yes">direction)</italic> We construct <inline-formula id="IE146"><mml:math id="IM148" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> from <inline-formula id="IE147"><mml:math id="IM149" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mi mathvariant="italic">align</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> such that <inline-formula id="IE148"><mml:math id="IM150" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. The procedure is similar as above—for each pair of adjacent entries in <inline-formula id="IE149"><mml:math id="IM151" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>, add corresponding edge to <inline-formula id="IE150"><mml:math id="IM152" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>. Then <inline-formula id="IE151"><mml:math id="IM153" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo>′</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p>Let <inline-formula id="IE152"><mml:math id="IM154" display="inline" overflow="scroll"><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo><mml:mo>=</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mi>G</mml:mi><mml:mo>*</mml:mo></mml:msup><mml:mo>\</mml:mo><mml:mi>p</mml:mi><mml:mo>∪</mml:mo><mml:mi>p</mml:mi><mml:mo>′</mml:mo></mml:math></inline-formula>. Both <italic toggle="yes">p</italic> and <inline-formula id="IE153"><mml:math id="IM155" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> can be found in <italic toggle="yes">AG</italic>, and both <italic toggle="yes">p</italic> and <inline-formula id="IE154"><mml:math id="IM156" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> can be constructed by the alignment of the same pair of strings. Therefore, <inline-formula id="IE155"><mml:math id="IM157" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is also a valid flow network and a feasible solution to FGTED. Since <inline-formula id="IE156"><mml:math id="IM158" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> is the optimal solution to <inline-formula id="IE157"><mml:math id="IM159" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, and
<disp-formula id="E14"><mml:math id="M14" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mi>c</mml:mi><mml:mi mathvariant="italic">ost</mml:mi><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mi>G</mml:mi><mml:mo>*</mml:mo></mml:msup><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo><mml:mo>)</mml:mo><mml:mo>≤</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>⇒</mml:mo><mml:mi>w</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>·</mml:mo><mml:mo>(</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>′</mml:mo><mml:mo>)</mml:mo><mml:mo>)</mml:mo><mml:mo>≤</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>⇒</mml:mo><mml:mi>w</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>·</mml:mo><mml:mo>(</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mtext>ED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo><mml:mo>)</mml:mo><mml:mo>≤</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>⇒</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo>(</mml:mo><mml:mi>p</mml:mi><mml:mo>)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>ED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo><mml:mo>.</mml:mo><mml:mo>◻</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p>We have shown that the cost of an <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> path in <inline-formula id="IE158"><mml:math id="IM160" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> is equal to the edit distance between its projections onto input graphs. Using this lemma, we can transform an optimal FGTED solution into an EMED solution.</p>
      <p>Given an optimal FGTED solution, <inline-formula id="IE159"><mml:math id="IM161" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>, let the set of possible flow decompositions of <inline-formula id="IE160"><mml:math id="IM162" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> be <inline-formula id="IE161"><mml:math id="IM163" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>. Let <inline-formula id="IE162"><mml:math id="IM164" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> be one of the flow decompositions that is a set of weighted <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> paths. We can construct heterogeneous string sets <inline-formula id="IE163"><mml:math id="IM165" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE164"><mml:math id="IM166" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> by projecting paths in <inline-formula id="IE165"><mml:math id="IM167" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> to <inline-formula id="IE166"><mml:math id="IM168" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE167"><mml:math id="IM169" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. Formally, <inline-formula id="IE168"><mml:math id="IM170" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE169"><mml:math id="IM171" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>.<statement><label><sc>Lemma</sc> 2.</label><p><italic toggle="yes">Given</italic> <inline-formula id="IE170"><mml:math id="IM172" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE171"><mml:math id="IM173" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">obtained from any decomposition</italic> <inline-formula id="IE172"><mml:math id="IM174" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E15"><mml:math id="M15" display="block" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula><italic toggle="yes">where</italic> <inline-formula id="IE173"><mml:math id="IM175" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is sum of edge costs in the solution alignment graph to FGTED.</italic></p></statement></p>
      <p><sc>Proof</sc>. We prove in two directions.</p>
      <p><bold><italic toggle="yes">(</italic></bold><inline-formula id="IE174"><mml:math id="IM176" display="inline" overflow="scroll"><mml:mo>≤</mml:mo></mml:math></inline-formula>  <italic toggle="yes">direction)</italic> We construct a mapping <italic toggle="yes">M</italic> between strings in <inline-formula id="IE175"><mml:math id="IM177" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE176"><mml:math id="IM178" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> from the decomposition <inline-formula id="IE177"><mml:math id="IM179" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE178"><mml:math id="IM180" display="inline" overflow="scroll"><mml:mrow><mml:mi>M</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is the portion of <inline-formula id="IE179"><mml:math id="IM181" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE180"><mml:math id="IM182" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> that are aligned. For each <inline-formula id="IE181"><mml:math id="IM183" display="inline" overflow="scroll"><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, we obtain <italic toggle="yes">s</italic><sub>1</sub> and <italic toggle="yes">s</italic><sub>2</sub> as strings constructed from projections of <italic toggle="yes">p</italic> onto <inline-formula id="IE182"><mml:math id="IM184" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE183"><mml:math id="IM185" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and increment the weight of mapping <inline-formula id="IE184"><mml:math id="IM186" display="inline" overflow="scroll"><mml:mrow><mml:mi>M</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> by <italic toggle="yes">w</italic>(<italic toggle="yes">p</italic>). After iterating through all paths in <inline-formula id="IE185"><mml:math id="IM187" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, the cost of <italic toggle="yes">M</italic> is
<disp-formula id="E16"><mml:math id="M16" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mi>c</mml:mi><mml:mi mathvariant="italic">ost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:munder><mml:mi>M</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>·</mml:mo><mml:mtext>ED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:munder><mml:mi>w</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>·</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p><italic toggle="yes">M</italic> is also a feasible solution to the LP formulation of EMED. Since <inline-formula id="IE186"><mml:math id="IM188" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext></mml:mrow></mml:math></inline-formula> minimizes the cost of mapping between <inline-formula id="IE187"><mml:math id="IM189" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE188"><mml:math id="IM190" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p><bold><italic toggle="yes">(</italic></bold><inline-formula id="IE189"><mml:math id="IM191" display="inline" overflow="scroll"><mml:mo>≥</mml:mo></mml:math></inline-formula>  <italic toggle="yes">direction)</italic> We construct a valid flow network, <inline-formula id="IE190"><mml:math id="IM192" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> using an optimal solution to <inline-formula id="IE191"><mml:math id="IM193" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. For each pairing (<italic toggle="yes">s<sub>i</sub></italic>, <italic toggle="yes">s<sub>j</sub></italic>) for <inline-formula id="IE192"><mml:math id="IM194" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE193"><mml:math id="IM195" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, we obtain its weight <italic toggle="yes">w</italic> and cost <italic toggle="yes">c</italic> from the EMED solution. Let <inline-formula id="IE194"><mml:math id="IM196" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mo>=</mml:mo><mml:mi mathvariant="italic">align</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> be an optimal alignment under edit distance, and <italic toggle="yes">cost</italic>(<italic toggle="yes">A</italic>) = <italic toggle="yes">c</italic>. We then add a path corresponding to <italic toggle="yes">A</italic> with weight <italic toggle="yes">w</italic> in <inline-formula id="IE195"><mml:math id="IM197" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>. This follows the same procedure in the proof of Lemma 1. After adding all paths, we obtain <inline-formula id="IE196"><mml:math id="IM198" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> with <inline-formula id="IE197"><mml:math id="IM199" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Since <inline-formula id="IE198"><mml:math id="IM200" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is minimized by FGTED, <inline-formula id="IE199"><mml:math id="IM201" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo>′</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>⇒</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.◻</p>
      <p>Lemma 2 provides a transformation algorithm between optimal solutions to EMED and solutions to FGTED. Using Lemma 2, we can show that the EMED between <inline-formula id="IE200"><mml:math id="IM202" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE201"><mml:math id="IM203" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> constructed from any decomposition in <inline-formula id="IE202"><mml:math id="IM204" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> is equal to the decompositions of <inline-formula id="IE203"><mml:math id="IM205" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE204"><mml:math id="IM206" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> that are closest in terms of EMED.<statement><label><sc>Lemma</sc> 3.</label><p><italic toggle="yes">Given</italic> <inline-formula id="IE205"><mml:math id="IM207" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE206"><mml:math id="IM208" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">obtained from any decomposition</italic> <inline-formula id="IE207"><mml:math id="IM209" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E17"><mml:math id="M17" display="block" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="true">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle displaystyle="true"><mml:munder><mml:mi>min</mml:mi><mml:mrow><mml:mtable><mml:mtr><mml:mtd/></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:munder></mml:mstyle><mml:mtext>EMED</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></disp-formula></p><p><sc>Proof</sc>. In Lemma 2, <inline-formula id="IE208"><mml:math id="IM210" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE209"><mml:math id="IM211" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> can be constructed from decomposing <inline-formula id="IE210"><mml:math id="IM212" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE211"><mml:math id="IM213" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. Suppose for contradiction that there exists a decomposition that constructs string sets <inline-formula id="IE212"><mml:math id="IM214" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE213"><mml:math id="IM215" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>, such that <inline-formula id="IE214"><mml:math id="IM216" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>&gt;</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Following the procedure in the proof of Lemma 2, we can construct a feasible solution to FGTED with cost equal to <inline-formula id="IE215"><mml:math id="IM217" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>′</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, which is less than <inline-formula id="IE216"><mml:math id="IM218" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. This contradicts with the assumption that FGTED minimizes <inline-formula id="IE217"><mml:math id="IM219" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">cost</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.◻</p></statement></p>
      <p>Theorem 3 is therefore true because of Lemmas 2 and 3. Using Theorem 3, we are able to prove the first inequality in Theorem 2 with Lemma 4.<statement><label><sc>Lemma</sc> 4.</label><p><italic toggle="yes">Given heterogeneous string sets</italic> <inline-formula id="IE218"><mml:math id="IM220" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE219"><mml:math id="IM221" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and genome graphs representing these string sets</italic>, <inline-formula id="IE220"><mml:math id="IM222" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE221"><mml:math id="IM223" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, <inline-formula id="IE222"><mml:math id="IM224" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p><p><sc>Proof</sc>. Given Theorem 3, FGTED finds flow decomposition in <inline-formula id="IE223"><mml:math id="IM225" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE224"><mml:math id="IM226" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> that minimizes the EMED between them. Since <inline-formula id="IE225"><mml:math id="IM227" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE226"><mml:math id="IM228" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> can be constructed from a flow decomposition in <inline-formula id="IE227"><mml:math id="IM229" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE228"><mml:math id="IM230" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, respectively, this lemma is true.◻</p></statement></p>
    </sec>
    <sec>
      <title>4.2 Genome graph expressiveness</title>
      <p>A genome graph typically can represent more than one set of strings. We name the collection of string sets representable by a genome graph the <italic toggle="yes">string set universe</italic> of that genome graph, or <inline-formula id="IE229"><mml:math id="IM231" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mi>U</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Using Theorem 3, we can say that FGTED finds two sets of strings in the string set universe of <inline-formula id="IE230"><mml:math id="IM232" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula> that are closest in the metric space of EMED. We define the expressiveness of a genome graph as the diameter of its string set universe, which is the maximum EMED between the string sets in <inline-formula id="IE231"><mml:math id="IM233" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mi>U</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.<statement><label><sc>Definition</sc> 10 (String Set Universe Diameter (SUD)).</label><p><italic toggle="yes">Given a genome graph</italic> <inline-formula id="IE232"><mml:math id="IM234" display="inline" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></inline-formula>,
<disp-formula id="E18"><mml:math id="M18" display="block" overflow="scroll"><mml:mi mathvariant="italic">SUD</mml:mi><mml:mo>(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mi>max</mml:mi><mml:mrow><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mi>b</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi><mml:mi>U</mml:mi><mml:mo>(</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:munder><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mi>b</mml:mi></mml:msub><mml:mo>)</mml:mo><mml:mo>.</mml:mo></mml:math></disp-formula></p></statement></p>
      <sec>
        <title>4.2.1 String set universe diameter as an upper bound on deviation of FGTED from EMED</title>
        <p>The string set universe diameter gives one measure of the size of <italic toggle="yes">SU</italic>(<italic toggle="yes">G</italic>), and it can also be used to characterize the deviation of GTED from EMED.</p>
        <p>Recall that <inline-formula id="IE233"><mml:math id="IM235" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE234"><mml:math id="IM236" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> are string sets obtained from a decomposition <inline-formula id="IE235"><mml:math id="IM237" display="inline" overflow="scroll"><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, and that <inline-formula id="IE236"><mml:math id="IM238" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <inline-formula id="IE237"><mml:math id="IM239" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE238"><mml:math id="IM240" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> are true string sets. From Theorem 2, we have that <inline-formula id="IE239"><mml:math id="IM241" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. We can bound the deviation of <inline-formula id="IE240"><mml:math id="IM242" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> from <inline-formula id="IE241"><mml:math id="IM243" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> using triangle inequalities.<statement><label><sc>Lemma</sc> 5.</label><p><italic toggle="yes">Given string sets</italic> <inline-formula id="IE242"><mml:math id="IM244" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE243"><mml:math id="IM245" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and genome graphs</italic> <inline-formula id="IE244"><mml:math id="IM246" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE245"><mml:math id="IM247" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E19"><mml:math id="M19" display="block" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></disp-formula>
 <disp-formula id="E20"><label>(5)</label><mml:math id="M20" display="block" overflow="scroll"><mml:mrow><mml:mo>≤</mml:mo><mml:munder><mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:munder><mml:mo stretchy="false">(</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula><italic toggle="yes">where</italic> <inline-formula id="IE246"><mml:math id="IM248" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is the solution obtained from</italic> <inline-formula id="IE247"><mml:math id="IM249" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p><p><sc>Proof</sc>. Both edit distance and EMD are metrics (<xref rid="btac264-B15" ref-type="bibr">Levenshtein <italic toggle="yes">et al.</italic>, 1966</xref>; <xref rid="btac264-B30" ref-type="bibr">Rubner <italic toggle="yes">et al.</italic>, 2000</xref>), which means that triangle inequality holds for EMED between strings. Therefore, for any string sets <inline-formula id="IE248"><mml:math id="IM250" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE249"><mml:math id="IM251" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>,
<disp-formula id="E21"><mml:math id="M21" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>≥</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p><p>Combining two inequalities, we have
<disp-formula id="E22"><label>(6)</label><mml:math id="M22" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>≥</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mo>(</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>)</mml:mo><mml:mo>)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>⇒</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="script">G</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>≤</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mi mathvariant="script">S</mml:mi><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>)</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>◻</p><p>The above inequality (6) holds for any string sets <inline-formula id="IE250"><mml:math id="IM252" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE251"><mml:math id="IM253" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>. To give a tight upper bound on the deviation, we take the minimum over all possible pairs of string sets constructed from decomposing <inline-formula id="IE252"><mml:math id="IM254" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> that yields inequality (5).</p></statement></p>
        <p>Lemma 5 proves the second inequality of Theorem 2 thus completing the proof for Theorem 2 with Lemma 4.</p>
        <p>The upper bound found in Lemma 5 can be used as a factor that evaluates the pairwise expressiveness of two genome graphs. While a genome graph may represent a large universe of string sets, as long as the true string set is close to the ‘best’ string set in the pair-wise comparison, the deviation of FGTED from EMED is small. We define this upper bound as the String Universe Co-Expansion Factor (SUCEF), which can be used to evaluate the discrepancy between FGTED and EMED.<statement><label><sc>Definition</sc> 11 (String Universe Co-Expansion Factor (SUCEF)).</label><p><disp-formula id="E23"><mml:math id="M23" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>SUCEF</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>=</mml:mo><mml:mstyle displaystyle="true"><mml:munder><mml:mrow><mml:mi>min</mml:mi></mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mrow><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:munder></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p><p><italic toggle="yes">where</italic> <inline-formula id="IE253"><mml:math id="IM255" display="inline" overflow="scroll"><mml:mrow><mml:mi>A</mml:mi><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">is the solution to</italic> <inline-formula id="IE254"><mml:math id="IM256" display="inline" overflow="scroll"><mml:mrow><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p><p>On the other hand, finding SUCEF not only requires knowledge of true string sets <inline-formula id="IE255"><mml:math id="IM257" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE256"><mml:math id="IM258" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, but SUCEF is also a pair-dependent measure that needs to be calculated for every pair of string sets and corresponding genome graphs. In order to characterize the effect of the expressiveness of individual genome graphs, we derive another upper bound on the deviation of FGTED from EMED using the string set universe diameters.</p></statement></p>
        <p>The sum of string set universe diameters of two genome graphs is an upper bound on SUCEF of these graphs and any two sets of strings they represent.<statement><label><sc>Lemma</sc> 6.</label><p><italic toggle="yes">Given two genome graphs</italic> <inline-formula id="IE257"><mml:math id="IM259" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE258"><mml:math id="IM260" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and two sets of strings</italic> <inline-formula id="IE259"><mml:math id="IM261" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">and</italic> <inline-formula id="IE260"><mml:math id="IM262" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>  <italic toggle="yes">they represent</italic>,
<disp-formula id="E24"><mml:math id="M24" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>SUCEF</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>≤</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p><p><sc>Proof</sc>. Both <inline-formula id="IE261"><mml:math id="IM263" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE262"><mml:math id="IM264" display="inline" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> are represented by <inline-formula id="IE263"><mml:math id="IM265" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and belong to <inline-formula id="IE264"><mml:math id="IM266" display="inline" overflow="scroll"><mml:mrow><mml:mtext>SU</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Therefore, by definition of string set universe diameter, <inline-formula id="IE265"><mml:math id="IM267" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> as the diameter maximizes the distance between any pair of strings represented by the genome graph. The same holds for <inline-formula id="IE266"><mml:math id="IM268" display="inline" overflow="scroll"><mml:mrow><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn><mml:mo>*</mml:mo></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>≤</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.◻</p></statement></p>
        <p>Using Lemma 6, we can bound the deviation of FGTED from EMED using the expressiveness of individual genome graphs even when we do not have the knowledge of ground truth string sets. In practice, we can construct genome graphs using known sequences from the species of interest and form a training set. Using the training set, we can learn the relationship between SUDs and the deviation of FGTED from EMED, and then empirically estimate the anticipated discrepancy between FGTED and EMED. In the following sections, we show that we can improve FGTED using SUDs to obtain reduced anticipated deviation from EMED and stronger correlation with EMED.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>5 Practically correcting the discrepancy between FGTED and EMED</title>
    <sec>
      <title>5.1 Estimating string set universe diameters</title>
      <p>The string set universe diameter of a genome graph can be estimated by sampling flow decompositions of the graph. To sample a flow decomposition, we first sample one <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> path. At each node <italic toggle="yes">u</italic>, we choose the neighbor <italic toggle="yes">v</italic> with the highest edge weight <italic toggle="yes">w</italic>(<italic toggle="yes">u</italic>, <italic toggle="yes">v</italic>) with probability 0.5 and randomly choose a neighbor otherwise. After sampling a path, we send flow that is equal to the minimum edge weight on that path and produce the residual graph by subtracting the flow from edge weights on that <italic toggle="yes">s–</italic><italic toggle="yes">t</italic> path. We repeat this process on the residual graph until all edge weights are zero. This process assumes that the input genome graphs are acyclic to ensure all edge capacities (weights) are satisfied. If a genome graph is cyclic, e.g. de Bruijn graphs, string sets from <inline-formula id="IE267"><mml:math id="IM269" display="inline" overflow="scroll"><mml:mrow><mml:mtext>SU</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> can be obtained by sampling Eulerian cycles in the genome graph, and each string in the string set is obtained by segmenting the sampled Eulerian cycle at source and sink nodes. After sampling 50 pairs of flow decompositions, we construct string sets from sampled flow decompositions and calculate pairwise EMED. We then obtain the highest pairwise EMED and use it as the estimated diameter.</p>
    </sec>
    <sec>
      <title>5.2 Correcting FGTED using string set universe diameters</title>
      <p>Using the sum of SUDs, we empirically estimate the deviation of FGTED from EMED with a linear regression model. We denote the deviation of FGTED from EMED by <inline-formula id="IE268"><mml:math id="IM270" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">deviation</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, which is computed as <inline-formula id="IE269"><mml:math id="IM271" display="inline" overflow="scroll"><mml:mrow><mml:mo>|</mml:mo><mml:mtext>EMED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>. The linear regression model, <italic toggle="yes">LR</italic>, has the following form
<disp-formula id="E25"><mml:math id="M25" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mi>d</mml:mi><mml:mi mathvariant="italic">eviation</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>=</mml:mo><mml:mi>a</mml:mi><mml:mo>·</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mi>b</mml:mi><mml:mo>=</mml:mo><mml:mi>L</mml:mi><mml:mi>R</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>where <italic toggle="yes">a</italic> is the coefficient of the model and <italic toggle="yes">b</italic> is the intercept. The fitted model will minimize the mean squared error between predicted deviation and true deviation in the training set.</p>
      <p>The corrected FGTED for each pair of graphs is calculated using the learned linear regression model as follows.
<disp-formula id="E26"><mml:math id="M26" display="block" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>correctedFGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>=</mml:mo><mml:mtext>FGTED</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mi>L</mml:mi><mml:mi>R</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>SUD</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p>The deviation of corrected FGTED from EMED has the same form as the deviation of uncorrected FGTED from EMED.</p>
    </sec>
    <sec>
      <title>5.3 Data</title>
      <p>We evaluate the use of string set universe diameters on two sequence sets:
</p>
      <list list-type="order">
        <list-item>
          <p><bold>Simulated T-cell receptor (TCR) repertoire.</bold> We simulate 50 sets of TCR sequences and assign weights to each sequence using reference gene sequences of V, D and J genes from Immunogenetics (IMGT) V-Quest sequence directory (<xref rid="btac264-B14" ref-type="bibr">Lefranc and Lefranc, 2001</xref>). The number of sequences in each set varies from 2 to 5. We then generate 225 pairs of TCR string sets. Each TCR sequence is about 300 base pairs long. See <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref> for detailed simulation process.</p>
        </list-item>
        <list-item>
          <p><bold>Hepatitis B virus (HBV) genomes.</bold> We collect 9 sets of HBV genomes from three hosts—humans, bats and ducks—from the NCBI virus database (<xref rid="btac264-B6" ref-type="bibr">Hatcher <italic toggle="yes">et al.</italic>, 2017</xref>). We build 36 pairs of HBV string sets. See <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref> for detailed string set construction process.</p>
        </list-item>
      </list>
      <p>We construct a partial order multiple sequence alignment (MSA) graph on each string set (<xref rid="btac264-B12" ref-type="bibr">Lee <italic toggle="yes">et al.</italic>, 2002</xref>). We first conduct MSA for each string set using Clustal Omega (<xref rid="btac264-B31" ref-type="bibr">Sievers <italic toggle="yes">et al.</italic>, 2011</xref>). Then for each column of the MSA, we create a node for each unique character and add an edge between two nodes if the characters in node labels are adjacent in the input strings at that column. For each consecutive stretch of gap characters, no nodes are created, but an edge is added between flanking columns of the stretch of gaps. We also create a source node and a sink node that are connected to nodes representing the first and last characters of the input strings. The MSA graphs created in this process are all acyclic. We compute FGTED on MSA graphs by adding sink-to-source edges.</p>
      <p>We also construct a de Bruijn graph (<xref rid="btac264-B26" ref-type="bibr">Pevzner <italic toggle="yes">et al.</italic>, 2001</xref>) with k-mer size equal to 4 on TCR sequence sets, which we refer to as dBG4 in the following sections. This k-mer size is reasonable as compared to the average lengths of TCR sequences which is 350 base pairs and allows us to experiment with graphs that are expected to have higher expressiveness. In dBG4, each node corresponds to a k-mer, <inline-formula id="IE270"><mml:math id="IM272" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>:</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>, where <italic toggle="yes">S</italic> is a string from the ground truth string set, <inline-formula id="IE271"><mml:math id="IM273" display="inline" overflow="scroll"><mml:mi mathvariant="script">S</mml:mi></mml:math></inline-formula>. Each edge corresponds to the overlap between two k-mers, <inline-formula id="IE272"><mml:math id="IM274" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>:</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE273"><mml:math id="IM275" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>:</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> for any <inline-formula id="IE274"><mml:math id="IM276" display="inline" overflow="scroll"><mml:mrow><mml:mi>S</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">S</mml:mi></mml:mrow></mml:math></inline-formula>. In order to construct the alignment graph, we process the de Bruijn graphs such that each node represents one character. We add a source node and a sink node to each dBG4 and connect them to nodes that represent the first and the last character in each string, respectively.</p>
      <p>All of used sequences and constructed genome graphs can be found in the GitHub repository at <ext-link xlink:href="https://github.com/Kingsford-Group/gtedemedtest/" ext-link-type="uri">https://github.com/Kingsford-Group/gtedemedtest/</ext-link>.</p>
    </sec>
    <sec>
      <title>5.4 FGTED deviates from EMED as the expressiveness of the genome graph increases</title>
      <p>We compute EMED and FGTED on string set pairs and genome graph pairs. The alignment graphs are constructed using one thread, which on average takes 6 s for dBG4s, 8 s for each MSA graph on TCR sequences, 9.43 min for each MSA graph on HBV genomes. Optimization for LP with 10 threads takes on average 601 s for each dBG4, 1 h for each MSA graph of TCR sequence sets and 4 h for each MSA graph on HBV genomes (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S1</xref>).</p>
      <p>We show that the deviation of FGTED from EMED is higher on genome graphs that are more expressive. We compare the FGTED computed on dBG4s and MSA graphs constructed with TCR sequences and the diameters of two types of graphs. DBG4 represents all sequences with the same 5-mer distributions as the ground truth sequences. Therefore, as expected, we observe larger sampled SUDs from dBG4 than the MSA graphs (<xref rid="btac264-F3" ref-type="fig">Fig. 3a</xref>). The deviation of FGTED from EMED is also larger with dBG4s than the MSA graphs (<xref rid="btac264-F3" ref-type="fig">Fig. 3b</xref>). This further illustrates the effect of graph construction approaches on the resulting expressiveness.</p>
      <fig position="float" id="btac264-F3">
        <label>Fig. 3.</label>
        <caption>
          <p>Comparison between de Bruijn graphs and MSA graphs constructed with TCR sequence sets. (<bold>a</bold>) The distribution of diameters sampled in both types of graphs. Each box shows the quartiles of the distribution, and the whiskers show the rest of the distribution. Each black dot represent the diameter of one graph. (<bold>b</bold>) The correlation between FGTED and EMED with different types of graphs. The diagonal line denotes equality between FGTED and EMED</p>
        </caption>
        <graphic xlink:href="btac264f3" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>5.5 Corrected FGTED more accurately estimates distance between unseen string sets encoded with genome graphs</title>
      <p>For each pair of string sets, we obtain the deviation of FGTED from EMED and sum of estimated SUDs. We fit three linear regression models, <inline-formula id="IE275"><mml:math id="IM277" display="inline" overflow="scroll"><mml:mrow><mml:mi>L</mml:mi><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="italic">dBG</mml:mi><mml:mn>4</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, <italic toggle="yes">LR<sub>TCR</sub></italic> and <italic toggle="yes">LR<sub>HBV</sub></italic>, to predict deviation from sum of SUDs on simulated TCR sequences and HBV genomes of different types of graphs separately.</p>
      <p>We evaluate the corrected and uncorrected FGTED by performing Pearson correlation experiments. We fit <italic toggle="yes">LR</italic> models on half of the data and compute the corrected FGTED on the other half as the test set. We evaluate the correlation between corrected and uncorrected FGTED and EMED on the test set. Two-tail <italic toggle="yes">P</italic>-values are calculated for each correlation experiment to test for non-correlation.</p>
      <p>The <italic toggle="yes">LR</italic> models are evaluated with 10-fold cross validation. We randomly permute and split data into 10 equal parts. In each of the 10 iterations, we use one part as the test set and the rest as the training set. An average deviation is calculated across all iterations.</p>
      <p>In <xref rid="btac264-T1" ref-type="table">Tables 1</xref> and <xref rid="btac264-T2" ref-type="table">2</xref>, we show that using string set universe diameters, we are able to improve the correlation between FGTED and EMED on MSA graphs of both the simulated TCR sequences and HBV genomes. On dBG4s, the correlation is reduced slightly by the correction. All Pearson correlation experiments are statistically significant with <italic toggle="yes">P</italic>-values &lt;0.01, which tests for the probability of non-correlation. On HBV genomes, since the correlation between uncorrected FGTED and EMED is approaching 1, no significant improvement is observed. On the other hand, significant reduction in average deviation is observed on both types of data. We are able to reduce the average deviation from 77.29 to 19.08 on de Bruijn Graphs with TCR sequences, from 32.74 to 9.13 on MSA graphs containing simulated TCR sequences and from 140.12 to 54.87 on HBV genomes.</p>
      <table-wrap position="float" id="btac264-T1">
        <label>Table 1.</label>
        <caption>
          <p>Pearson correlation between EMED and corrected and uncorrected FGTED on simulated TCR and HBV sequences</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">FGTED</th>
              <th colspan="3" align="center" rowspan="1">Pearson correlation<hr/></th>
            </tr>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th align="center" rowspan="1" colspan="1">TCR (dBG4)</th>
              <th align="center" rowspan="1" colspan="1">TCR (MSA graph)</th>
              <th align="center" rowspan="1" colspan="1">HBV (MSA graph)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Uncorrected</td>
              <td rowspan="1" colspan="1">
                <bold>0.75</bold>
              </td>
              <td rowspan="1" colspan="1">0.74</td>
              <td rowspan="1" colspan="1">
                <bold>0.99</bold>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Corrected</td>
              <td rowspan="1" colspan="1">0.68</td>
              <td rowspan="1" colspan="1">
                <bold>0.90</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>0.99</bold>
              </td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <p><italic toggle="yes">Note</italic>: Pearson correlation is calculated on a held-out set of data for both simulated TCR and HBV that consist of 50% of data, and <italic toggle="yes">LR</italic> model is fit on the other half. Bold font numbers identify the better performing method with higher Pearson correlation with EMED on each type of data.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <table-wrap position="float" id="btac264-T2">
        <label>Table 2.</label>
        <caption>
          <p>Average deviation of corrected and uncorrected FGTED from EMED on simulated TCR and HBV sequences</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">FGTED</th>
              <th colspan="3" align="center" rowspan="1">Average deviation<hr/></th>
            </tr>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th align="center" rowspan="1" colspan="1">TCR (dBG4)</th>
              <th align="center" rowspan="1" colspan="1">TCR (MSA Graph)</th>
              <th align="center" rowspan="1" colspan="1">HBV (MSA Graph)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Uncorrected</td>
              <td rowspan="1" colspan="1">77.29</td>
              <td rowspan="1" colspan="1">32.74</td>
              <td rowspan="1" colspan="1">140.12</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Corrected</td>
              <td rowspan="1" colspan="1">
                <bold>19.08</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>9.13</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>54.87</bold>
              </td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn2">
            <p><italic toggle="yes">Note</italic>: The average deviation is calculated over a 10-fold cross-validation of the <italic toggle="yes">LR</italic> model. Bold font numbers identify the better performing method with lower average deviation from EMED on each type of data.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p>One caveat of using SUDs for correcting distances between genome graphs is that this correction is not guaranteed to always improve the distance. Given two string sets, there is usually an adversarial worst case where adjusting the distance using this approach reduces the accuracy in estimating string sets distances. When EMED between true string sets are small, the corrected FGTED may overestimate the EMED and result in a larger deviation. Nevertheless, we show that corrected FGTED reduces the anticipated deviation from EMED.</p>
    </sec>
  </sec>
  <sec>
    <title>6 Discussion</title>
    <p>A genome graph’s string set universe diameter (SUD) provides information on the size and diversity of the represented string sets. We show that we can use SUDs to practically characterize the discrepancy between FGTED and EMED and to obtain a more accurate distance between unseen string sets encoded in genome graphs on average. While the results are obtained on short genomic sequences due to the high computational cost of FGTED and GTED, this result is encouraging.</p>
    <p>The corrected FGTED can be used to compute a more accurate distance between heterogeneous samples represented by genome graphs in applications such as immune repertoire analysis and cancer subtyping. This opens up avenues for more comprehensive heterogeneous sample comparison methods. However, FGTED, as well as GTED, is not scalable to mammalian genomes due to the quadratic size of the alignment graph and time it takes to solve the LP formulations. Algorithms that compute FGTED faster or efficient approximation genome graph comparison methods (<xref rid="btac264-B19" ref-type="bibr">Minkin and Medvedev, 2020</xref>; <xref rid="btac264-B27" ref-type="bibr">Polevikov and Kolmogorov, 2019</xref>) are needed for comparing large heterogeneous string sets.</p>
    <p>SUDs may also be used to characterize the diversity of strings represented by reference genome graphs that are used in sequence-to-graph alignment (<xref rid="btac264-B29" ref-type="bibr">Rautiainen and Marschall, 2020</xref>; <xref rid="btac264-B32" ref-type="bibr">Sirén <italic toggle="yes">et al.</italic>, 2020</xref>). In sequence-to-graph alignment, it is often desired that a more diverse set of strings than the original reference string set is represented by the graph. Here, SUDs could be used as a measure to control the right amount of variation in the string set universe of created genome graphs.</p>
    <p>Another future direction is to use expressiveness as a regularization term in the objective function to construct better genome graphs. To ensure efficiency of genome graphs in storing sequences, we can construct genome graphs that minimize their sizes (<xref rid="btac264-B22" ref-type="bibr">Pandey <italic toggle="yes">et al.</italic>, 2021</xref>; <xref rid="btac264-B28" ref-type="bibr">Qiu and Kingsford, 2021</xref>). However, reducing the size of a genome graph may result in graphs that are highly expressive, and the distance between these genome graphs will deviate further from distances between true string sets. Adding a SUD term to the objective may address this problem.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported in part by the Gordon and Betty Moore Foundation’s Data-Driven Discovery Initiative [GBMF4554 to C.K.], by the US National Institutes of Health [R01GM122935], the US National Science Foundation [DBI-1937540] and the Carnegie Mellon University School of Computer Science Sansom graduate fellowship for computational cancer research to Y.Q.</p>
    <p><italic toggle="yes">Conflict of Interest:</italic> C.K. is a co-founder of Ocean Genomics, Inc.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btac264_Supplementary_Data</label>
      <media xlink:href="btac264_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btac264-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Almodaresi</surname><given-names>F.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2018</year>) <article-title>A space and time-efficient index for the compacted colored de Bruijn graph</article-title>. <source>Bioinformatics</source>, <volume>34</volume>, <fpage>i169</fpage>–<lpage>i177</lpage>.<pub-id pub-id-type="pmid">29949982</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bolen</surname><given-names>C.R.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) <article-title>The repertoire dissimilarity index as a method to compare lymphocyte receptor repertoires</article-title>. <source>BMC Bioinformatics</source>, <volume>18</volume>, <fpage>155</fpage>–<lpage>158</lpage>.<pub-id pub-id-type="pmid">28264647</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dilthey</surname><given-names>A.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2015</year>) <article-title>Improved genome inference in the MHC using a population reference graph</article-title>. <source>Nat. Genet</source>., <volume>47</volume>, <fpage>682</fpage>–<lpage>688</lpage>.<pub-id pub-id-type="pmid">25915597</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ebrahimpour Boroojeny</surname><given-names>A.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>Graph traversal edit distance and extensions</article-title>. <source>J. Comput. Biol</source>., <volume>27</volume>, <fpage>317</fpage>–<lpage>329</lpage>.<pub-id pub-id-type="pmid">32058803</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Garrison</surname><given-names>E.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2018</year>) <article-title>Variation graph toolkit improves read mapping by representing genetic variation in the reference</article-title>. <source>Nat. Biotechnol</source>., <volume>36</volume>, <fpage>875</fpage>–<lpage>879</lpage>.<pub-id pub-id-type="pmid">30125266</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hatcher</surname><given-names>E.L.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) <article-title>Virus variation resource—improved response to emergent viral outbreaks</article-title>. <source>Nucleic Acids Res</source>., <volume>45</volume>, <fpage>D482</fpage>–<lpage>D490</lpage>.<pub-id pub-id-type="pmid">27899678</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Holley</surname><given-names>G.</given-names></string-name>, <string-name><surname>Melsted</surname><given-names>P.</given-names></string-name></person-group> (<year>2020</year>) <article-title>Bifrost: highly parallel construction and indexing of colored and compacted de Bruijn graphs</article-title>. <source>Genome Biol</source>., <volume>21</volume>, <fpage>1</fpage>–<lpage>20</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Iqbal</surname><given-names>Z.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2012</year>) <article-title>De novo assembly and genotyping of variants using colored de Bruijn graphs</article-title>. <source>Nat. Genet</source>., <volume>44</volume>, <fpage>226</fpage>–<lpage>232</lpage>.<pub-id pub-id-type="pmid">22231483</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jain</surname><given-names>C.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>On the complexity of sequence-to-graph alignment</article-title>. <source>J. Comput. Biol</source>., <volume>27</volume>, <fpage>640</fpage>–<lpage>654</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kingsford</surname><given-names>C.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2010</year>) <article-title>Assembly complexity of prokaryotic genomes using short reads</article-title>. <source>BMC Bioinformatics</source>, <volume>11</volume>, <fpage>21</fpage>.<pub-id pub-id-type="pmid">20064276</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B11">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Kusner</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2015</year>) From word embeddings to document distances. In: <italic toggle="yes">International Conference on Machine Learning</italic>. PMLR, pp. <fpage>957</fpage>–<lpage>966</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lee</surname><given-names>C.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2002</year>) <article-title>Multiple sequence alignment using partial order graphs</article-title>. <source>Bioinformatics</source>, <volume>18</volume>, <fpage>452</fpage>–<lpage>464</lpage>.<pub-id pub-id-type="pmid">11934745</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lee</surname><given-names>H.</given-names></string-name>, <string-name><surname>Kingsford</surname><given-names>C.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Kourami: graph-guided assembly for novel human leukocyte antigen allele discovery</article-title>. <source>Genome Biol</source>., <volume>19</volume>, <fpage>16</fpage>.<pub-id pub-id-type="pmid">29415772</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B14">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Lefranc</surname><given-names>M.-P.</given-names></string-name>, <string-name><surname>Lefranc</surname><given-names>G.</given-names></string-name></person-group> (<year>2001</year>) <source>The Immunoglobulin Factsbook</source>. <publisher-name>Academic Press</publisher-name>, Cambridge, MA, USA.</mixed-citation>
    </ref>
    <ref id="btac264-B15">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Levenshtein</surname><given-names>V.I.</given-names></string-name></person-group>  <etal>et al</etal> (<year>1966</year>) Binary codes capable of correcting deletions, insertions, and reversals. In Soviet Physics Doklady, Vol. 10. Soviet Union, pp., <fpage>707</fpage>–<lpage>710</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Levina</surname><given-names>E.</given-names></string-name>, <string-name><surname>Bickel</surname><given-names>P.</given-names></string-name></person-group> (<year>2001</year>). The Earth Mover’s distance is the mallows distance: some insights from statistics. In: <italic toggle="yes">Proceedings Eighth IEEE International Conference on Computer Vision. ICCV 2001</italic>, Vol. <volume>2</volume>. IEEE, pp. <fpage>251</fpage>–<lpage>256</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>The design and construction of reference pangenome graphs with minigraph</article-title>. <source>Genome Biol</source>., <volume>21</volume>, <fpage>1</fpage>–<lpage>19</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B18">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Mangul</surname><given-names>S.</given-names></string-name>, <string-name><surname>Koslicki</surname><given-names>D.</given-names></string-name></person-group> (<year>2016</year>). Reference-free comparison of microbial communities via de Bruijn graphs. In: <italic toggle="yes">Proceedings of the 7th ACM International Conference on Bioinformatics, Computational Biology, and Health Informatics</italic>. pp. <fpage>68</fpage>–<lpage>77</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Minkin</surname><given-names>I.</given-names></string-name>, <string-name><surname>Medvedev</surname><given-names>P.</given-names></string-name></person-group> (<year>2020</year>) <article-title>Scalable pairwise whole-genome homology mapping of long genomes with BubbZ</article-title>. <source>IScience</source>, <volume>23</volume>, <fpage>101224</fpage>.<pub-id pub-id-type="pmid">32563153</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Minkin</surname><given-names>I.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) <article-title>TwoPaCo: an efficient algorithm to build the compacted de Bruijn graph from many complete genomes</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>4024</fpage>–<lpage>4032</lpage>.<pub-id pub-id-type="pmid">27659452</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Morris</surname><given-names>L.G.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2016</year>) <article-title>Pan-cancer analysis of intratumor heterogeneity as a prognostic determinant of survival</article-title>. <source>Oncotarget</source>, <volume>7</volume>, <fpage>10051</fpage>–<lpage>10063</lpage>.<pub-id pub-id-type="pmid">26840267</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pandey</surname><given-names>P.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2021</year>) <article-title>VariantStore: an index for large-scale genomic variant search</article-title>. <source>Genome Biol</source>., <volume>22</volume>, <fpage>1</fpage>–<lpage>25</lpage>.<pub-id pub-id-type="pmid">33397451</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Paten</surname><given-names>B.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2011</year>) <article-title>Cactus graphs for genome comparisons</article-title>. <source>J. Comput. Biol</source>., <volume>18</volume>, <fpage>469</fpage>–<lpage>481</lpage>.<pub-id pub-id-type="pmid">21385048</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Paten</surname><given-names>B.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) <article-title>Genome graphs and the evolution of genome inference</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>665</fpage>–<lpage>676</lpage>.<pub-id pub-id-type="pmid">28360232</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Paten</surname><given-names>B.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2018</year>) <article-title>Superbubbles, ultrabubbles, and cacti</article-title>. <source>J. Comput. Biol</source>., <volume>25</volume>, <fpage>649</fpage>–<lpage>663</lpage>.<pub-id pub-id-type="pmid">29461862</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pevzner</surname><given-names>P.A.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2001</year>) <article-title>An eulerian path approach to DNA fragment assembly</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>98</volume>, <fpage>9748</fpage>–<lpage>9753</lpage>.<pub-id pub-id-type="pmid">11504945</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B27">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Polevikov</surname><given-names>E.</given-names></string-name>, <string-name><surname>Kolmogorov</surname><given-names>M.</given-names></string-name></person-group> (<year>2019</year>). Synteny paths for assembly graphs comparison. In: <italic toggle="yes">19th International Workshop on Algorithms in Bioinformatics (WABI 2019)</italic>. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.</mixed-citation>
    </ref>
    <ref id="btac264-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Qiu</surname><given-names>Y.</given-names></string-name>, <string-name><surname>Kingsford</surname><given-names>C.</given-names></string-name></person-group> (<year>2021</year>) <article-title>Constructing small genome graphs via string compression</article-title>. <source>Bioinformatics</source>, <volume>37</volume>, <fpage>i205</fpage>–<lpage>i213</lpage>.<pub-id pub-id-type="pmid">34252955</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rautiainen</surname><given-names>M.</given-names></string-name>, <string-name><surname>Marschall</surname><given-names>T.</given-names></string-name></person-group> (<year>2020</year>) <article-title>GraphAligner: rapid and versatile sequence-to-graph alignment</article-title>. <source>Genome Biol</source>., <volume>21</volume>, <fpage>1</fpage>–<lpage>28</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rubner</surname><given-names>Y.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2000</year>) <article-title>The earth mover’s distance as a metric for image retrieval</article-title>. <source>Int. J. Comput. Vision</source>, <volume>40</volume>, <fpage>99</fpage>–<lpage>121</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sievers</surname><given-names>F.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2011</year>) <article-title>Fast, scalable generation of high-quality protein multiple sequence alignments using clustal omega</article-title>. <source>Mol. Syst. Biol</source>., <volume>7</volume>, <fpage>539</fpage>.<pub-id pub-id-type="pmid">21988835</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sirén</surname><given-names>J.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>Haplotype-aware graph indexes</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, <fpage>400</fpage>–<lpage>407</lpage>.<pub-id pub-id-type="pmid">31406990</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wasserstein</surname><given-names>L.N.</given-names></string-name></person-group>  <etal>et al</etal> (<year>1969</year>) <article-title>Markov processes over denumerable products of spaces describing large systems of automata</article-title>. <source>Probl. Inf. Transm</source>., <volume>5</volume>, <fpage>47</fpage>–<lpage>52</lpage>.</mixed-citation>
    </ref>
    <ref id="btac264-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zerbino</surname><given-names>D.R.</given-names></string-name>, <string-name><surname>Birney</surname><given-names>E.</given-names></string-name></person-group> (<year>2008</year>) <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source>., <volume>18</volume>, <fpage>821</fpage>–<lpage>829</lpage>.<pub-id pub-id-type="pmid">18349386</pub-id></mixed-citation>
    </ref>
    <ref id="btac264-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhao</surname><given-names>L.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2019</year>) <article-title>Molecular subtyping of cancer: current status and moving toward clinical applications</article-title>. <source>Brief. Bioinform</source>., <volume>20</volume>, <fpage>572</fpage>–<lpage>584</lpage>.<pub-id pub-id-type="pmid">29659698</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
