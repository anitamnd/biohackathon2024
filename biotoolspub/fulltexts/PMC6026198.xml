<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6026198</article-id>
    <article-id pub-id-type="publisher-id">4964</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-018-04964-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Clustering huge protein sequence sets in linear time</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-8781-9753</contrib-id>
        <name>
          <surname>Steinegger</surname>
          <given-names>Martin</given-names>
        </name>
        <address>
          <email>martin.steinegger@mpibpc.mpg.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-9642-8244</contrib-id>
        <name>
          <surname>Söding</surname>
          <given-names>Johannes</given-names>
        </name>
        <address>
          <email>soeding@mpibpc.mpg.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2104 4211</institution-id><institution-id institution-id-type="GRID">grid.418140.8</institution-id><institution>Quantitative and Computational Biology group, </institution><institution>Max-Planck Institute for Biophysical Chemistry, </institution></institution-wrap>Am Fassberg 11, 37077 Göttingen, Germany </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000123222966</institution-id><institution-id institution-id-type="GRID">grid.6936.a</institution-id><institution>Department for Bioinformatics and Computational Biology, </institution><institution>Technische Universität München, </institution></institution-wrap>85748 Garching, Germany </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0470 5905</institution-id><institution-id institution-id-type="GRID">grid.31501.36</institution-id><institution>Department of Chemistry, </institution><institution>Seoul National University, </institution></institution-wrap>08826 Seoul, Republic of Korea </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>29</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>29</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2018</year>
    </pub-date>
    <volume>9</volume>
    <elocation-id>2542</elocation-id>
    <history>
      <date date-type="received">
        <day>5</day>
        <month>1</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>4</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Metagenomic datasets contain billions of protein sequences that could greatly enhance large-scale functional annotation and structure prediction. Utilizing this enormous resource would require reducing its redundancy by similarity clustering. However, clustering hundreds of millions of sequences is impractical using current algorithms because their runtimes scale as the input set size <italic>N</italic> times the number of clusters <italic>K</italic>, which is typically of similar order as <italic>N</italic>, resulting in runtimes that increase almost quadratically with <italic>N</italic>. We developed Linclust, the first clustering algorithm whose runtime scales as <italic>N</italic>, independent of <italic>K</italic>. It can also cluster datasets several times larger than the available main memory. We cluster 1.6 billion metagenomic sequence fragments in 10 h on a single server to 50% sequence identity, &gt;1000 times faster than has been possible before. Linclust will help to unlock the great wealth contained in metagenomic and genomic sequence databases.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Billions of metagenomic and genomic sequences fill up public datasets, which makes similarity clustering an important and time-critical analysis step. Here, the authors develop Linclust, an algorithm with linear time complexity that can cluster over a billion sequences within hours on a single server.</p>
    </abstract>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2018</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">In metagenomics, DNA is sequenced directly from the environment, allowing us to study the vast majority of microbes that cannot be cultivated in vitro<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. During the last decade, costs and throughput of next-generation sequencing have dropped two-fold each year, twice faster than computational costs. This enormous progress has resulted in hundreds of thousands of metagenomes and tens of billions of putative gene and protein sequences<sup><xref ref-type="bibr" rid="CR2">2</xref>,<xref ref-type="bibr" rid="CR3">3</xref></sup>. Therefore, computing and storage costs are now dominating metagenomics<sup><xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR6">6</xref></sup>. Clustering protein sequences predicted from sequencing reads or pre-assembled contigs can considerably reduce the redundancy of sequence sets and costs of downstream analysis and storage.</p>
    <p id="Par4">CD-HIT and UCLUST<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR8">8</xref></sup> are by far the most widely used tools for clustering and redundancy filtering of protein sequence sets (see ref. <sup><xref ref-type="bibr" rid="CR9">9</xref></sup> for a review). Their goal is to find a representative set of sequences such that each of the input set sequences is represented well enough by one of the <italic>K</italic> representatives, where “well enough” is quantified by some similarity criteria.</p>
    <p id="Par5">Like most other fast sequence clustering tools, they use a fast prefilter to reduce the number of slow pairwise sequence alignments. An alignment is only computed if two sequences share a minimum number of identical <italic>k</italic>-mers (substrings of length <italic>k</italic>). If we denote the average probability by <italic>p</italic><sub>match</sub> that this happens by chance between two non-homologous input sequences, then the prefilter would speed up the sequence comparison by a factor of up to 1/<italic>p</italic><sub>match</sub> at the expense of some loss in sensitivity. This is usually unproblematic: if sequence matches are missed (false negatives) we create too many clusters, but we do not lose information. In contrast, false positives are costly as they can cause the loss of unique sequences from the representative set.</p>
    <p id="Par6">CD-HIT and UCLUST employ the following "greedy incremental clustering" approach: each of the <italic>N</italic> input sequences is compared with the representative sequences of already established clusters. When the sequence is similar enough to the representative sequence of one of the clusters, that is, the similarity criteria such as sequence identity are satisfied, the sequence is added to that cluster. Otherwise, the sequence becomes the representative of a new cluster. Due to the comparison of all sequences with the cluster representatives, the runtimes of CD-HIT and UCLUST scale as O(<italic>NK</italic>), where <italic>K</italic> is the final number of clusters. In protein sequence clustering <italic>K</italic> is typically of similar size to <italic>N</italic> and therefore the total runtime scales almost quadratically with <italic>N</italic>. The fast sequence prefilters speed up each pairwise comparison by a large factor 1/<italic>p</italic><sub>match</sub> but cannot improve the time complexity of O(<italic>NK</italic>). This almost quadratic scaling results in impractical runtimes for a billion or more sequences.</p>
    <p id="Par7">Here we present the sequence clustering algorithm Linclust, whose runtime scales as <italic>O</italic>(<italic>N</italic>), independent of the number of clusters found. We demonstrate that it produces clusterings of comparable quality as other tools that are orders of magnitude slower and that it can cluster over a billion sequences within hours on a single server.</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>Overview of Linclust</title>
      <p id="Par8">The Linclust algorithm is explained in Fig. <xref rid="Fig1" ref-type="fig">1</xref> (for details see Methods and Fig. <xref rid="Fig5" ref-type="fig">5</xref>). As in previous methods, we reduce the number of pairwise comparisons by requiring the sequences to share at least one identical <italic>k</italic>-mer substring. A critical insight to achieve linear time complexity is that we need not align every sequence with every other sequence sharing a <italic>k</italic>-mer (see steps 3,4). We reach similar sensitivities by selecting only a very small subset of sequences as "center sequences" (colored dots) and only aligning sequences to the center sequences with which they share a <italic>k</italic>-mer. Linclust thus requires less than <italic>mN</italic> sequence comparisons with a small constant <italic>m</italic> (default value 20), instead of the <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim NKp_{{\mathrm{match}}}$$\end{document}</tex-math><mml:math id="M2"><mml:mo>~</mml:mo><mml:mi>N</mml:mi><mml:mi>K</mml:mi><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">match</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq1.gif"/></alternatives></inline-formula> comparisons needed by UCLUST, CD-HIT and other tools.<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of linear-time clustering algorithm. (1) For each sequence Linclust selects <italic>m k</italic>-mers (with the lowest hash function values). It sorts the <italic>k</italic>-mers alphabetically in quasi-linear time to find the groups of sequences sharing a <italic>k</italic>-mer (colored sets) and (2) it selects the longest sequence per <italic>k</italic>-mer group as center. (3,4) It compares each sequence (in three consecutively slower and more sensitive steps) only with the center sequences it shares a <italic>k</italic>-mer with, not with all sequences it shares a <italic>k</italic>-mer with. It therefore needs to compute at most <italic>m</italic> comparisons per sequence and <italic>mN</italic> in total. Pairs that pass the clustering criteria are linked by an edge. (5) The sequences are clustered in time <italic>O</italic>(<italic>mN</italic>) using a greedy incremental algorithm that finds clusters whose members all have an edge with a representative sequence. For a more details see Fig. <xref rid="Fig5" ref-type="fig">5</xref></p></caption><graphic xlink:href="41467_2018_4964_Fig1_HTML" id="d29e424"/></fig><fig id="Fig2"><label>Fig. 2</label><caption><p>Linclust and Linclust/MMseqs2 manifest unique linear scaling of runtime with sequence set size. <bold>a</bold> Runtime versus input set size on linear scales. The plotting symbols indicate the sequence identity threshold for clustering of 90%, 70%, and 50%. The curves are fits with a power law, <italic>bN</italic><sup><italic>a</italic></sup>. For comparison, we include runtimes of all-against-all searches using sequence search tools DIAMOND, RAPsearch2, and MASH. Runtimes were measured on a server with two Intel Xeon E5-2640v3 8-core CPUs and 128 GB RAM. <bold>b</bold> Same as (<bold>a</bold>) but on log-log scales. <bold>c</bold> Average number of sequences per cluster at 90%, 70%, and 50% sequence identity. Larger average cluster sizes imply higher sensitivities to detect similar sequences</p></caption><graphic xlink:href="41467_2018_4964_Fig2_HTML" id="d29e451"/></fig></p>
      <p id="Par9">In most clustering tools, the main memory size severely limits the size of the datasets that can be clustered. UCLUST, for example, needs 10 bytes per residue of the representative sequences. Linclust needs <italic>m</italic> × 16 bytes per sequence, but before running it automatically checks available main memory and if necessary splits the table of <italic>mN</italic> lines into chunks such that each chunk fits into memory (Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref> and Methods). It then processes the chunks sequentially. In this way, Linclust can cluster sequence sets that would occupy many times its main memory size at almost no loss in speed.</p>
    </sec>
    <sec id="Sec4">
      <title>Linclust and Linclust/MMseqs2 workflows</title>
      <p id="Par10">We integrated Linclust into our MMseqs2 (Many-versus-Many sequence searching) software package<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>, and we test two versions of Linclust in our benchmark comparison: the bare Linclust algorithm described in Fig. <xref rid="Fig1" ref-type="fig">1</xref> (simply named “Linclust”), and a combined four-step cascaded clustering workflow (“Linclust/MMseqs2”). In this workflow, a Linclust clustering step is followed by one (above 60% sequence identity) or three (≤60%) clustering steps, each of which clusters the representative sequences from the previous step by performing an increasingly sensitive all-against-all MMseqs2 sequence search followed by the greedy incremental clustering algorithm. We also include in our benchmark our original MMseqs clustering tool<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>.</p>
    </sec>
    <sec id="Sec5">
      <title>Runtime and clustering sensitivity benchmark</title>
      <p id="Par11">We measure clustering runtimes on seven sets: the 61522444 sequences of the UniProt database, randomly sampled subsets with relative sizes 1/16, 1/8, 1/4, 1/2, and UniProt plus all reversed sequences (123 million sequences). Each tool clustered these sets using a minimum pairwise sequence identity of 90%, 70% and 50%. Sequence identity was defined similarly for all three tools. The three tools use somewhat different strategies to try to ensure that only proteins with the same domain architecture are clustered together (see Methods: Clustering criteria).</p>
      <p id="Par12">At 50% identity, Linclust clusters the 123 million sequences 10 times faster than Linclust/MMseqs2 and, by extrapolation, 2300 times faster than UCLUST, 720 times faster than MMseqs, 4600 times faster than CD-HIT, 1600 times faster than DIAMOND<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>, 69000 times faster than MASH<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>, and 26000 times faster than RAPsearch2<sup><xref ref-type="bibr" rid="CR14">14</xref></sup> (Fig. <xref rid="Fig2" ref-type="fig">2a, b</xref>). At 90% identity, Linclust still clusters these sequences 570 times faster than MMseqs, 100 times faster than UCLUST, 62 times faster than CD-HIT, and 4.5 times faster than Linclust/MMseqs2.</p>
      <p id="Par13">At 90% sequence identity threshold, we determined how the runtimes scale with the input set size <italic>N</italic> by fitting a power law <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\left( {T\sim aN^b} \right)$$\end{document}</tex-math><mml:math id="M4"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>T</mml:mi><mml:mo>~</mml:mo><mml:mi>a</mml:mi><mml:msup><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>b</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq2.gif"/></alternatives></inline-formula> to the measured runtimes. Runtimes scale very roughly quadratically for UCLUST (<italic>N</italic><sup>1.62</sup>) and CD-HIT (<italic>N</italic><sup>2.75</sup>) whereas they grow only linearly for Linclust/MMseqs2 (<italic>N</italic><sup>0.94</sup>) and Linclust (<italic>N</italic><sup>1.01</sup>). The speed-ups due to Linclust’s Hamming distance stage and the ungapped alignment filter are analyzed in Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref>.</p>
      <p id="Par14">To assess the clustering sensitivity, we compare the average size of clusters: a deeper clustering with more sequences per cluster implies a higher sensitivity to detect similar sequences. All three tools produce similar numbers of clusters at 90% and 70% sequence identity (Fig. <xref rid="Fig2" ref-type="fig">2c</xref>). Importantly, despite Linclust’s linear scaling of the runtime with input set size, it manifests no loss of sensitivity for growing dataset sizes. At 50%, Linclust produces 13% more clusters than UCLUST. But we can increase Linclust’s sensitivity simply by selecting more <italic>k</italic>-mers per sequence. By increasing <italic>m</italic> from 20 to 80, Linclust takes only 1.5 to 2 times longer but attains a sensitivity similar to UCLUST (pink in Fig. <xref rid="Fig2" ref-type="fig">2a–c</xref>, Supplementary Fig. <xref rid="MOESM1" ref-type="media">4</xref>).</p>
      <p id="Par15">To estimate the fraction of missed sequence pairs that could have been clustered together, we examined the distribution of sequence identities between representative cluster sequences (Fig. <xref rid="Fig3" ref-type="fig">3a–c</xref>). For each clustering run, we searched with BLAST<sup><xref ref-type="bibr" rid="CR15">15</xref></sup> a random sample of 1000 representative sequences against all representative sequences of the clustering. We show the cumulative distribution of sequence identities for the best matches that satisfy the minimum coverage threshold of 90% used in the clustering runs. This coverage threshold is favorable for UCLUST since its own coverage criterion is less strict (see Methods, “Clustering criteria”). Due to the heuristic prefiltering methods employed by all tools, none produces a perfect clustering. This limitation is seen most clearly at 50% sequence identity (Fig. <xref rid="Fig3" ref-type="fig">3c</xref>), for which Linclust/MMseqs2, UCLUST, Linclust-m80 and Linclust miss 2%, 10%, 16% and 28% of sequence pairs satisfying the clustering threshold.<fig id="Fig3"><label>Fig. 3</label><caption><p>Cumulative distance distribution between representative sequences. We clustered the test set of 123 million sequences at three different sequence identity thresholds (<bold>a</bold>–<bold>c</bold> at 50%, 70%, and 90%, respectively). For each clustering, we randomly sampled 1000 representative cluster sequences, compared them to all representative sequences of the clustering, and plotted the fraction whose best match (excluding self-matches) with minimum sequence coverage of 90% had a sequence identity above the <italic>x</italic>-value. The <italic>y</italic>-value at the clustering threshold (dashed line) is the fraction of false negatives, pairs of sequences whose similarity was overlooked by the clustering method</p></caption><graphic xlink:href="41467_2018_4964_Fig3_HTML" id="d29e602"/></fig></p>
    </sec>
    <sec id="Sec6">
      <title>Cluster consistency analysis</title>
      <p id="Par16">We measure the quality of the clusterings produced by the tools by analyzing the homogeneity of the functional annotation of the sequences in the clusters<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>. We assess Gene Ontology (GO) annotations<sup><xref ref-type="bibr" rid="CR17">17</xref></sup> (Fig. <xref rid="Fig4" ref-type="fig">4a, b</xref>) and Pfam domain annotations<sup><xref ref-type="bibr" rid="CR18">18</xref></sup> (Fig. <xref rid="Fig4" ref-type="fig">4c</xref>) provided by the UniProt database. For each of these annotations, we averaged two score variants over all clusters, “mean” and a “worst”. The “mean” (“worst”) score for a cluster is the mean (minimum) annotation similarity score between the representative sequence and all other cluster members, as described in ref. <sup><xref ref-type="bibr" rid="CR16">16</xref></sup>.<fig id="Fig4"><label>Fig. 4</label><caption><p>Cluster consistency of GO molecular functional and Pfam annotations. <bold>a</bold> Cluster annotation consistency of GO functional annotations inferred from experiments (EXP_F). “Mean” and “worst” refers to the mean and the minimum annotation similarity between each representative sequence and all other cluster members. Plotting symbols indicate the sequence identity threshold for clustering. CD-HIT was only run at 90% sequence identity due to run time constraints. Linclust-m80 was only run at 50% sequence identity. <bold>b</bold> Same as (<bold>a</bold>) but using manually and computationally assigned functional GO annotations. <bold>c</bold> Consistency of Pfam annotation from the representative sequences to the cluster members</p></caption><graphic xlink:href="41467_2018_4964_Fig4_HTML" id="d29e651"/></fig></p>
      <p id="Par17">Overall, the consistencies of cluster annotations are similar for all tools, which is not surprising since they all use exact Smith-Waterman alignments and similar acceptance criteria (Supplementary Fig. <xref rid="MOESM1" ref-type="media">3</xref>, Methods). However, Linclust/MMseqs2 and Linclust clusterings have better consistencies than UCLUST and CD-HIT according to purely experimentally derived GO annotations (Fig. <xref rid="Fig4" ref-type="fig">4a</xref>) and according to Pfam domain annotations (Fig. <xref rid="Fig4" ref-type="fig">4c</xref>). This might be either due to a stricter minimum coverage criterion in Linclust or due to its slightly different definition of sequence similarity, which translates the sequence identity threshold into an approximately equivalent threshold for the similarity score of the local alignment divided by the maximum length of the two aligned segments (Methods: Clustering criteria). This similarity measure is more appropriate than sequence identity to cluster together sequences with conserved functions, as it also accounts for gaps and for the degree of similarity between aligned residues. The cluster consistencies of all tools are similar when GO annotations based on computational predictions are included (Fig. <xref rid="Fig4" ref-type="fig">4b</xref>).</p>
    </sec>
    <sec id="Sec7">
      <title>Clustering 1.6 billion metagenomic sequences</title>
      <p id="Par18">As a demonstration of Linclust’s ability to cluster huge sets, we applied it to cluster 1.59 billion protein sequence fragments predicted by Prodigal<sup><xref ref-type="bibr" rid="CR19">19</xref></sup> in 2200 metagenomic and metatranscriptomic datasets<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR20">20</xref>,<xref ref-type="bibr" rid="CR21">21</xref></sup> downloaded mainly from the Joint Genome Institute. We clustered these sequences with a minimum sequence identity of ≥50% and minimum coverage of the shorter sequence of 90% (Methods: Clustering criteria), producing 424 million clusters in 10 h on a 2 × 14-core server.</p>
      <p id="Par19">Our Metaclust database of 424 million representative sequences will improve the sensitivity of profile sequence searches by increasing the diversity of the underlying multiple sequence alignments. It will thereby raise the fraction of annotatable sequences in genomic and metagenomic datasets<sup><xref ref-type="bibr" rid="CR6">6</xref>,<xref ref-type="bibr" rid="CR21">21</xref></sup>. It could also increase the number protein families for which reliable structures can be predicted de novo, as shown by Ovchinnikov et al.<sup><xref ref-type="bibr" rid="CR22">22</xref></sup>, who used an unpublished dataset of 2 billion metagenomic sequences. Metaclust should also allow us to predict more accurately the effects of mutations on proteins<sup><xref ref-type="bibr" rid="CR23">23</xref></sup>.</p>
    </sec>
  </sec>
  <sec id="Sec8" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par20">Clustering a set of <italic>N</italic> items is challenging when both <italic>N</italic> and the number of clusters <italic>K</italic> are large, due to the time complexity of existing clustering algorithms. Hierarchical agglomerative clustering approaches have a time complexity of <italic>O</italic>(<italic>N</italic><sup>2</sup>log<italic>N</italic>)<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, others with a predefined number of clusters such as <italic>K</italic>-means or expectation maximization clustering have complexity <italic>O</italic>(<italic>NK</italic>). When both <italic>N</italic> and <italic>K</italic> are in the tens of millions, traditional approaches are impracticably slow. Driven by the need to cluster huge datasets in the era of big data, most work has focused on reducing the proportionality constant.</p>
    <p id="Par21">One example is the widely used canopy clustering algorithm<sup><xref ref-type="bibr" rid="CR25">25</xref></sup>. The items are first preclustered into overlapping sets ("canopies") based on a fast approximate similarity measure. Canopies could be biological sequences sharing the same <italic>k</italic>-mer or documents sharing a keyword. Some traditional clustering algorithm is run on all items, but with the restriction that slow, exact similarities are only computed between items belonging to the same canopy. Similar to the <italic>k</italic>-mer prefilter used in CD-HIT, UCLUST, kclust, and MMseqs<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR11">11</xref>,<xref ref-type="bibr" rid="CR26">26</xref>,<xref ref-type="bibr" rid="CR27">27</xref></sup>, the preclustering reduces the number of comparisons by a large factor <italic>F</italic> using the slow, exact measure, but the time complexity of the exact distance calculation <italic>O</italic>(<italic>N</italic><sup>2</sup>/<italic>F</italic>) is still quadratic in <italic>N</italic>. Linear-time clustering algorithms, using for instance hashing techniques, have been proposed<sup><xref ref-type="bibr" rid="CR28">28</xref>,<xref ref-type="bibr" rid="CR29">29</xref></sup>. But like the preclustering step in canopy clustering or Linclust’s prefilter to find <italic>k</italic>-mer matches, these algorithms are only approximate. If falsely clustered pairs are costly (e.g., for redundancy filtering), pairwise links need to be verified with the exact similarity measure, which still requires quadratic time complexity. In contrast, Linclust’s linear time complexity of <italic>O</italic>(<italic>mN</italic>) includes verification of all edges between items using the exact distance measure.</p>
    <p id="Par22">Linclust can be trivially generalized to cluster any items for which a set of <italic>m</italic> keys per item can be defined such that (1) items belonging to a cluster are likely to share at least one of their keys and (2) items not belonging to a cluster are unlikely to share a key (see Methods, Optimal <italic>k</italic>-mer length). For clustering documents the keys could be all <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ m = \left({ {n}\atop{k}} \right)$$\end{document}</tex-math><mml:math id="M6"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mfrac linethickness="0"><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq3.gif"/></alternatives></inline-formula> subsets of the <italic>n</italic> keywords of size <italic>k</italic>, for example<sup><xref ref-type="bibr" rid="CR28">28</xref></sup>. To achieve a high sensitivity, we could select as center of the group of items sharing a key the member with the largest sum of sizes of groups it belongs to. In this way, the center items are able to pull together into the same cluster many items from different groups.</p>
    <p id="Par23">We perform the clustering in step 5 of Fig. <xref rid="Fig1" ref-type="fig">1</xref> with the greedy incremental clustering, because it always chooses the longest sequence as the cluster representative. It ensures that the representative sequences, being the longest sequence in each cluster, are likely to contain all protein domains of all cluster members. Our rule in step 2 to choose the longest protein sequence per <italic>k</italic>-mer group as its center is well-suited to achieve large clusters, because the longest sequences tend to be selected as centers of most of the <italic>k</italic>-mer groups they belong to, and these long sequences therefore have edges to most sequences they share <italic>k</italic>-mers with.</p>
    <p id="Par24">As far as we know, Linclust is the only algorithm that could run on datasets of billions of items resulting in billions of clusters, overcoming the time and memory bottlenecks of existing clustering algorithms. Linclust could therefore be useful for many other applications. We have recently extended Linclust to nucleotide sequences. We are also working on a version to cluster <italic>D</italic>-dimensional vectors, which could be used, for instance, for metagenomic binning to cluster contigs by their coverage profiles across <italic>D</italic> metagenomic samples<sup><xref ref-type="bibr" rid="CR30">30</xref></sup>.</p>
    <p id="Par25">In summary, we hope the Linclust algorithm will prove helpful to exploit the tremendous value in publicly available metagenomic and metatranscriptomic datasets. Linclust should lead to considerable savings in computing resources in current applications. Most importantly, it will enable previously infeasible large-scale analyses.</p>
  </sec>
  <sec id="Sec9">
    <title>Methods</title>
    <p id="Par26">The Linclust algorithm consists of the following steps (Figs <xref rid="Fig1" ref-type="fig">1</xref> and <xref rid="Fig5" ref-type="fig">5</xref>):</p>
    <sec id="Sec10">
      <title>Step 1: Generating the table of <italic>k</italic>-mers</title>
      <p id="Par27">We transform the sequence set into a reduced alphabet of 13 letters to increase the number of <italic>k</italic>-mer matches and hence the <italic>k</italic>-mer sensitivity at a moderate reduction in selectivity (see subsection “Reduced amino acid alphabet”). The <italic>k</italic>-mer length is chosen as described in subsection “Optimal <italic>k</italic>-mer length” and is typically between 10 and 14.</p>
      <p id="Par28">For each sequence, we extract <italic>m k</italic>-mers, as described in “Selection of <italic>k</italic>-mers”. Increasing <italic>m</italic> from its default value of 20 (option—kmer-per-seq) increases the sensitivity at the cost of a moderately decreasing speed (Supplementary Fig. <xref rid="MOESM1" ref-type="media">S4</xref>). We store each extracted <italic>k</italic>-mer index (8 bytes), the sequence identifier (4 bytes), its length (2 bytes), and its position <italic>j</italic> in the sequence (2 bytes) in a table with <italic>mN</italic> lines. Therefore, Linclust has a memory footprint of <italic>mN</italic> × 16 bytes.</p>
    </sec>
    <sec id="Sec11">
      <title>Step 2: Finding exact <italic>k</italic>-mer matches</title>
      <p id="Par29">We sort this table by the <italic>k</italic>-mer index using the in-place sort from the OpenMP template library (<ext-link ext-link-type="uri" xlink:href="http://freecode.com/projects/omptl">http://freecode.com/projects/omptl</ext-link>). The sorting has a quasi-linear time complexity of <italic>O</italic>(<italic>mN</italic>log(<italic>mN</italic>)) and typically takes less than 10% of the total runtime. The sorting groups together sequences into blocks of lines that contain the same <italic>k</italic>-mer. For each such <italic>k</italic>-mer group we select the longest sequence as its center sequence. We overwrite the position <italic>j</italic> with the diagonal <italic>i</italic>−<italic>j</italic> of the <italic>k</italic>-mer match with the center sequence, where <italic>i</italic> is the position of the group’s <italic>k</italic>-mer in the center sequence. We further overwrite the <italic>k</italic>-mer index by the center sequence identifier and resort the <italic>mN</italic> lines of the table by the center sequence identifier. The <italic>k</italic>-mer match stage results file has one entry for each center sequence identifier containing the list of identifiers of sequences that share a <italic>k</italic>-mer with the center sequence. If a sequence shares multiple <italic>k</italic>-mer matches with a center sequence, we keep only the entry with the lowest diagonal <italic>i</italic>−<italic>j</italic>.</p>
    </sec>
    <sec id="Sec12">
      <title>Step 3a: Hamming distance pre-clustering</title>
      <p id="Par30">For each <italic>k</italic>-mer group we compute the Hamming distance (the number of mismatches) in the full amino acid alphabet between the center sequence and each sequence in the group along the stored diagonals <italic>i</italic>−<italic>j</italic>. This operation is fast as it needs no random memory or cache access and uses AVX2/SSE4.1 vector instructions. Members that already satisfy the specified sequence identity and coverage thresholds on the entire diagonal are removed from the results passed to step 3b and are added to the cluster of their center sequence after step 5.</p>
    </sec>
    <sec id="Sec13">
      <title>Step 3b: Ungapped alignment filtering</title>
      <p id="Par31">For each <italic>k</italic>-mer group we compute the optimal ungapped, local alignment between the center sequence and each sequence in the group along the stored diagonals <italic>i</italic>−<italic>j</italic>, using one-dimensional dynamic programming with the Blosum62 matrix. We filter out matches between center and member sequences if the ungapped alignment score divided by the length of the diagonal is very low. We set a conservative threshold, such that the false negative rate is 1%, i.e., only 1% of the alignments below this threshold would satisfy the two criteria, sequence identity and coverage. For each combination on a grid {50, 55, 60,…,100}⊗{0, 10, 20,…,100}, we determined these thresholds empirically on 4 million local alignments sampled from an all-against-all comparison of the UniProt database<sup><xref ref-type="bibr" rid="CR31">31</xref></sup>.</p>
    </sec>
    <sec id="Sec14">
      <title>Step 4: Local gapped sequence alignment</title>
      <p id="Par32">Sequences that pass the ungapped alignment filter are aligned to their center sequence using the AVX2/SSE4.1-vectorized alignment module with amino acid compositional bias correction from MMseqs2<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>, which builds on code from the SSW library<sup><xref ref-type="bibr" rid="CR32">32</xref></sup>. Sequences satisfying the specified sequence identity and coverage thresholds are linked by an edge. These edges (neighbor relationships) are written in the format used by MMseqs2 for clustering results.</p>
    </sec>
    <sec id="Sec15">
      <title>Step 5: Greedy incremental clustering</title>
      <p id="Par33">This algorithm was already implemented for MMseqs<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>. Briefly, the file with the validated directed edges from center sequences to member sequences is read in and all reverse edges are added. The list of input sequences is sorted by decreasing length. While the list is not yet empty, the top sequence is removed from the list, together with all sequences still in the list that share an edge with it. These sequences form a new cluster with the top sequence as its representative.</p>
    </sec>
    <sec id="Sec16">
      <title>Reduced amino acid alphabet</title>
      <p id="Par34">We iteratively constructed reduced alphabets starting from the full amino acid alphabet. At each step, we merged the two letters {<italic>a</italic>, <italic>b</italic>} <inline-formula id="IEq66"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\longrightarrow$$\end{document}</tex-math><mml:math id="M8"><mml:mo>→</mml:mo></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq66.gif"/></alternatives></inline-formula> <italic>a</italic>′ = (<italic>a</italic> or <italic>b</italic>) that conserve the maximum mutual information, <inline-formula id="IEq4"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\mathrm{MI}} = \mathop {\sum}\nolimits_{x,y = 1}^A p\left( {x,y} \right){\mathrm{log}}_2\left( {p\left( {x,y} \right)/p\left( x \right)/p\left( y \right)} \right)$$\end{document}</tex-math><mml:math id="M10"><mml:mi mathvariant="normal">MI</mml:mi><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mo> ∑</mml:mo></mml:mrow><mml:mrow><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>A</mml:mi></mml:mrow></mml:msubsup><mml:mi>p</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi></mml:mrow></mml:mfenced><mml:msub><mml:mrow><mml:mi mathvariant="normal">log</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>p</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi></mml:mrow></mml:mfenced><mml:mo>∕</mml:mo><mml:mi>p</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:mfenced><mml:mo>∕</mml:mo><mml:mi>p</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>y</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq4.gif"/></alternatives></inline-formula>. Here <italic>A</italic> is the new alphabet size, <italic>p</italic>(<italic>x</italic>) is the probability of observing letter <italic>x</italic> at any given position, and <italic>p</italic>(<italic>x</italic>, <italic>y</italic>) is the probabilities of observing <italic>x</italic> and <italic>y</italic> aligned to each other. These probabilities are extracted from the Blosum62 matrix. When <italic>a</italic> and <italic>b</italic> are merged into <italic>a</italic>′, for example, <italic>p</italic>(<italic>a</italic>′) = <italic>p</italic>(<italic>a</italic>) + <italic>p</italic>(<italic>b</italic>) and <italic>p</italic>(<italic>a</italic>′,<italic>y</italic>) = <italic>p</italic>(<italic>a</italic>, <italic>y</italic>) + <italic>p</italic>(<italic>b</italic>, <italic>y</italic>). The default alphabet with <italic>A</italic> = 13, which performed well over all tested clustering sequence identities from 50% to 100%, merges (L, M), (I, V), (K, R), (E, Q), (A, S, T), (N, D), and (F, Y).</p>
    </sec>
    <sec id="Sec17">
      <title>Optimal <italic>k</italic>-mer length</title>
      <p id="Par35">For optimal results and efficiency, the majority of the sequences in <italic>k</italic>-mer groups should be homologous to their center sequence. In other words, the <italic>k</italic>-mers have to be specific enough for the size of the database, with larger databases requiring larger <italic>k</italic>. To automatically set a good value of <italic>k</italic>, a very conservative condition is to limit to 1 the expectation value <italic>E</italic><sub>FP</sub> of the number of sequences per <italic>k</italic>-mer group that are not homologous to their center sequence. <italic>E</italic><sub>FP</sub> is equal to the number <italic>mN</italic> of <italic>k</italic>-mers selected in the entire sequence set times the probability <italic>p</italic><sub>match</sub> for one of those <italic>k</italic>-mers to match the <italic>k</italic>-mer of the <italic>k</italic>-mer group by chance. If the <italic>k</italic>-mers were not preselected by their hash function values, this probability would be approximately <inline-formula id="IEq5"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1/A_{{\mathrm{eff}}}^k$$\end{document}</tex-math><mml:math id="M12"><mml:mn>1</mml:mn><mml:mo>∕</mml:mo><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq5.gif"/></alternatives></inline-formula>, where <inline-formula id="IEq6"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1/A_{{\mathrm{eff}}} = \mathop {\sum}\nolimits_{a = 1}^A p_a^2$$\end{document}</tex-math><mml:math id="M14"><mml:mn>1</mml:mn><mml:mo>∕</mml:mo><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mo> ∑</mml:mo></mml:mrow><mml:mrow><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>A</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq6.gif"/></alternatives></inline-formula> is the probability for two letters from the reduced alphabet of size <italic>A</italic> to match by chance (1/8.7 for <italic>A</italic> = 13) and <italic>p</italic><sub><italic>a</italic></sub> is the frequency of letter <italic>a</italic> in the database. Due to the preselection, only a fraction ~<italic>m</italic>/<italic>L</italic> of the entire set of <italic>k</italic>-mers is used, where <italic>L</italic> is the average sequence length. Therefore, the probability of two selected <italic>k</italic>-mers to match by chance is <inline-formula id="IEq7"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$L/\left( {mA_{{\mathrm{eff}}}^k} \right)$$\end{document}</tex-math><mml:math id="M16"><mml:mi>L</mml:mi><mml:mo>∕</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>m</mml:mi><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq7.gif"/></alternatives></inline-formula>. The condition for the <italic>k</italic>-mer specificity is <inline-formula id="IEq8"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1 \ge E_{{\mathrm{FP}}} = mNL/\left( {mA_{{\mathrm{eff}}}^k} \right) = NL/A_{{\mathrm{eff}}}^k$$\end{document}</tex-math><mml:math id="M18"><mml:mn>1</mml:mn><mml:mo>≥</mml:mo><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">FP</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>m</mml:mi><mml:mi>N</mml:mi><mml:mi>L</mml:mi><mml:mo>∕</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>m</mml:mi><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>L</mml:mi><mml:mo>∕</mml:mo><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq8.gif"/></alternatives></inline-formula>, and hence we demand <inline-formula id="IEq9"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k \ge \left\lfloor {{\mathrm{log}}\left( {NL} \right)/{\mathrm{log}}\left( {A_{{\mathrm{eff}}}} \right)} \right\rfloor = :k_{{\mathrm{spec}}}$$\end{document}</tex-math><mml:math id="M20"><mml:mi>k</mml:mi><mml:mo>≥</mml:mo><mml:mfenced close="⌋" open="⌊" separators=""><mml:mrow><mml:mi mathvariant="normal">log</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>N</mml:mi><mml:mi>L</mml:mi></mml:mrow></mml:mfenced><mml:mo>∕</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">eff</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">spec</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq9.gif"/></alternatives></inline-formula>. In Linclust, we set <italic>k</italic> = max{<italic>k</italic><sub>spec</sub>, <italic>k</italic><sub>seqid</sub>}, with <italic>k</italic><sub>seqid</sub> = 14 for a sequence identity clustering threshold ≥90% and <italic>k</italic><sub>seqid</sub> = 10 otherwise to ensures slightly higher efficiency for high sequence identities, for which longer <italic>k</italic>-mers are sufficiently sensitive.</p>
    </sec>
    <sec id="Sec18">
      <title>Selection of <italic>k</italic>-mers</title>
      <p id="Par36">To be able to cluster two sequences together we need to find a <italic>k</italic>-mer in the reduced alphabet that occurs in both. Because we extract only a small fraction of <italic>k</italic>-mers from each sequence, we need to avoid picking different <italic>k</italic>-mers in each sequence. Our first criterion for <italic>k</italic>-mer selection is therefore to extract <italic>k</italic>-mers such that the same <italic>k</italic>-mers tend to be extracted from homologous sequences. Second, we need to avoid positional clustering of selected <italic>k</italic>-mers in order to be sensitive to detect local homologies in every region of a sequence. Third, we would like to extract <italic>k</italic>-mers that tend to be conserved between homologous sequences. Note that we cannot simply store a subset of <italic>A</italic><sup><italic>k</italic></sup><italic>m</italic>/<italic>L k</italic>-mers to be selected due to its sheer size.</p>
      <p id="Par37">We can satisfy the first two criteria by computing hash values for all <italic>k</italic>-mers in a sequence and selecting the <italic>m k</italic>-mers that obtain the lowest hash values. Since appropriate hash functions can produce values that are not correlated in any simple way with their argument, this method should randomly select <italic>k</italic>-mers from the sequences such that the same <italic>k</italic>-mers always tend to get selected in all sequences. We developed a simple 16-bit rolling hash function with good mixing properties, which we can compute very efficiently using the hash value of the previous <italic>k</italic>-mer (Supplementary Fig. <xref rid="MOESM1" ref-type="media">5</xref>).</p>
      <p id="Par38">In view of the third criterion, we experimented with combining the hash value with a <italic>k</italic>-mer conservation score <inline-formula id="IEq10"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_{{\mathrm{cons}}}\left( {x_{1:k}} \right) = \mathop {\sum}\nolimits_{i = 1}^k S\left( {x_i,x_i} \right)/k$$\end{document}</tex-math><mml:math id="M22"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">cons</mml:mi></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>:</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mo> ∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup><mml:mi>S</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>∕</mml:mo><mml:mi>k</mml:mi></mml:math><inline-graphic xlink:href="41467_2018_4964_Article_IEq10.gif"/></alternatives></inline-formula>. This score ranks <italic>k</italic>-mers <italic>x</italic><sub>1:<italic>k</italic></sub> by the conservation of their amino acids, according to the diagonal elements of the Blosum62 substitution matrix <italic>S</italic>(⋅, ⋅). We scaled the hash function with a rectified version of the conservation score: hash−value(<italic>x</italic><sub>1:<italic>k</italic></sub>)/max{1, <italic>S</italic><sub>cons</sub>(<italic>x</italic><sub>1:<italic>k</italic></sub>) − <italic>S</italic><sub>offset</sub>}. Despite its intuitive appeal, we did not succeed in obtaining significant improvements and reverted to the simple hash function.</p>
    </sec>
    <sec id="Sec19">
      <title>Clustering datasets that do not fit into main memory</title>
      <p id="Par39">Linclust needs <italic>m</italic> × 16 bytes of memory per sequence. If the computer’s main memory is too small, Linclust automatically splits the <italic>k</italic>-mer array into <italic>C</italic> equal-sized chunks small enough to fit each into main memory (Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref>). For each chunk index <italic>c</italic> ∈ {0,…,<italic>C</italic> − 1} we run Linclust steps 1 and 2 (Fig. <xref rid="Fig5" ref-type="fig">5</xref>) normally but extract only <italic>k</italic>-mers whose numerical index modulo <italic>C</italic> yields a rest <italic>c</italic>. This way each of the <italic>C</italic> runs builds up a <italic>k</italic>-mer table with only about <italic>mN</italic>/<italic>C</italic> lines instead of <italic>mN</italic>, and hence each run needs <italic>C</italic> times less memory. Each run writes out a file with all found <italic>k</italic>-mer groups, and afterwards all <italic>C</italic> files are merged into a single file such that <italic>k</italic>-mer groups are sorted by ascending center IDs. Finally, Linclust steps 3 to 5 are performed as usual.<fig id="Fig5"><label>Fig. 5</label><caption><p>Linear-time clustering algorithm. Steps 1 and 2 find exact <italic>k</italic>-mer matches between the <italic>N</italic> input sequences that are extended in step 3 and 4. (1) Linclust selects in each sequence the <italic>m</italic> (default: 20) <italic>k</italic>-mers with the lowest hash function values, as this tends to select the same <italic>k</italic>-mers across homologous sequences. It uses a reduced alphabet of 13 letters for the <italic>k</italic>-mers and sets <italic>k</italic> between 10 and 14 depending on the sequence set size and the sequence identity threshold. It generates a table in which each of the <italic>mN</italic> lines consists of the <italic>k</italic>-mer, the sequence identifier, and the position of the <italic>k</italic>-mer in the sequence. (2) Linclust sorts the table by <italic>k</italic>-mer in quasi-linear time, which identifies groups of sequences sharing the same <italic>k</italic>-mer (large shaded boxes). For each <italic>k</italic>-mer group, it selects the longest sequence as center. It thereby tends to select the same sequences as center among groups sharing sequences. (3) It merges <italic>k</italic>-mer groups with the same center sequence together (<bold>1</bold>: red + cyan and <bold>5</bold>: orange + blue) and compares each group member to the center sequence in two steps: by global Hamming distance and by gapless local alignment extending the <italic>k</italic>-mer match. (4) Sequences above a score cut-off in step 3 are aligned to their center sequence using gapped local sequence alignment. Sequence pairs that satisfy the clustering criteria (e.g., on the <italic>E</italic>-value, sequence similarity, and sequence coverage) are linked by an edge. (5) The greedy incremental algorithm finds a clustering such that each input sequence has an edge to its cluster’s representative sequence. Note that the number of sequence pairs compared in steps 3 and 4 is less than <italic>mN</italic>, resulting in a linear time complexity</p></caption><graphic xlink:href="41467_2018_4964_Fig5_HTML" id="d29e1887"/></fig></p>
    </sec>
    <sec id="Sec20">
      <title>Parallelization and supported platforms</title>
      <p id="Par40">We used OpenMP to parallelize all stages except the fast step 5 and SIMD instructions to parallelize step 3 and step 4. Linclust supports Linux and Windows, Mac OS X and CPUs with AVX2 or SSE4.1 instructions.</p>
    </sec>
    <sec id="Sec21">
      <title>Clustering criteria</title>
      <p id="Par41">Linclust/MMseqs2 and Linclust has three main criteria to link two sequences by an edge: (1) a maximum E-value threshold (option -e [0, ∞[) computed according to the gap-corrected Karlin-Altschul statistics using the ALP library;<sup><xref ref-type="bibr" rid="CR33">33</xref></sup> (2) a minimum coverage (option -c [0,1], which is defined by the number of aligned residue pairs divided by either the maximum of the length of query/center and target/non-center sequences (default mode, --cov-mode 0), or by the length of the target/non-center sequence (--cov-mode 1), or by the length of the query/center (--cov-mode 2); (3) a minimum sequence identity (--min-seq-id [0, 1]) with option --alignment-mode 3 defined as the number of identical aligned residues divided by the number of aligned columns including internal gap columns, or, by default, defined by a highly correlated measure, the equivalent similarity score of the local alignment (including gap penalties) divided by the maximum of the lengths of the two locally aligned sequence segments. The score per residue equivalent to a certain sequence identity is obtained by a linear regression using thousands of local alignments as training set (Fig. <xref rid="MOESM1" ref-type="media">S2</xref> in<sup><xref ref-type="bibr" rid="CR27">27</xref></sup>).</p>
      <p id="Par42">The sequence identity in UCLUST is defined as number of identical residues in the pairwise global alignment divided by the number of aligned columns including internal gaps. Due to the global alignment, no explicit coverage threshold is needed. CD-HIT defines sequence identity as the number of identical residues in the local alignment divided by the length of the shorter sequence. Therefore, sequence coverage of the shorter sequence must be at least as large as the sequence identity threshold.</p>
    </sec>
    <sec id="Sec22">
      <title>Tools and options for benchmark comparison</title>
      <p id="Par43">Linclust and Linclust/MMseqs2 (commit 5e21868) used the commands mmseqs linclust --cov-mode 1 -c 0.9 --min-seq-id 0.9 and mmseqs cluster --cov-mode 1 -c 0.9 --min-seq-id 0.9 for 90%, respectively, and --min-seq-id 0.7 or --min-seq-id 0.5 for 70% and 50%. The minimum coverage of 90% of the shorter sequence was chosen to enforce global similarity, similar to UCLUST and CD-HIT. CD-HIT 4.6 was run with the parameters -T 16 -M 0 and -n 5 -c 0.9, -n 4 -c 0.7, and -n 3 -c 0.5 for 90%, 70%, and 50%, respectively. UCLUST (7.0.1090) was run with --id 0.9, 0.7, 0.5, for RAPsearch2 (2.23) we used -z 16, for DIAMOND (v0.8.36.98) option --id 0.5, and for MASH (v2.0) -s 20 -a -i -p 16. Runtimes were measured with the Linux time command.</p>
    </sec>
    <sec id="Sec23">
      <title>Functional consistency benchmark</title>
      <p id="Par44">We evaluated the functional cluster consistency based on Gene Ontology (GO) annotations of the UniProt knowledge base. We carried out three tests: one based on (1) experimentally validated GO annotations, (2) general functional GO annotations (mostly inferred from homologous proteins) and (3) Pfam annotations. The UniProt 2016_03 release was clustered by each tool at 90%, 70% and 50% sequence identity level and then evaluated. For CD-HIT we computed only the clustering at 90% sequence identity because of run time constraints. For each cluster, we computed the ‘worst’ and ‘mean’ cluster consistency scores, as described earlier<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>. These cluster consistency scores are defined respectively as the minimum and the mean of all pairwise annotation similarity scores between the cluster’s representative sequence and the other sequences in the cluster.</p>
      <p id="Par45">GO annotations often annotate the whole sequence. We used the Pfam annotations of the UniProt to check local consistence of clusters (Fig. <xref rid="Fig3" ref-type="fig">3c</xref>). We compared the Pfam domain annotation of the representative sequence against all cluster members. If the member had the exact same domain annotation as the representative sequence we counted it as correct (value = 1) and otherwise as false (value = 0).</p>
    </sec>
    <sec id="Sec24">
      <title>Clustering</title>
      <p id="Par46">We downloaded ~1800 metagenomic and ~400 metatranscriptomic datasets with assembled contigs from the Joint Genome institute’s IMG/M archive<sup><xref ref-type="bibr" rid="CR3">3</xref></sup> and NCBI’s Sequence Read Archive<sup><xref ref-type="bibr" rid="CR20">20</xref></sup> (<ext-link ext-link-type="uri" xlink:href="ftp://ftp.ncbi.nlm.nih.gov/sra/wgs_aux">ftp://ftp.ncbi.nlm.nih.gov/sra/wgs_aux</ext-link>) using the script metadownload.sh from <ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/martin_steinegger/linclust-analysis">https://bitbucket.org/martin_steinegger/linclust-analysis</ext-link>. We predicted genes and protein sequences using Prodigal<sup><xref ref-type="bibr" rid="CR19">19</xref></sup> resulting in 1,595,926,152 proteins.</p>
      <p id="Par47">We clustered the 1.59 million sequence fragments with Linclust using the following acceptance criteria: (1) the minimum sequence identity is 50%, using the score-per-column similarity measure described in Clustering criteria, (2) the shorter of the two sequences has at least 90% of its residues aligned, and (3) the maximum E-value is 10<sup>−3</sup> (default) (Linclust options: --min-seq-id 0.5 --cov-mode 1 -c 0.9 --cluster-mode 2). The clustering step found 424 million cluster within 10 h on a server with two 14-core Intel Xeon E5-2680 v4 CPUs (2.4 GHz) and 762 GB RAM.</p>
    </sec>
    <sec id="Sec25">
      <title>Metaclust protein sequence sets</title>
      <p id="Par48">The Metaclust database is available as FASTA formatted file at <ext-link ext-link-type="uri" xlink:href="https://metaclust.mmseqs.org/">https://metaclust.mmseqs.org/</ext-link>.</p>
    </sec>
    <sec id="Sec26">
      <title>Code availability</title>
      <p id="Par49">Linclust has been integrated into our free GPLv3-licensed MMseqs2 software suite<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>. The source code and binaries for Linclust can be download at <ext-link ext-link-type="uri" xlink:href="https://github.com/soedinglab/mmseqs2">https://github.com/soedinglab/mmseqs2</ext-link>.</p>
    </sec>
    <sec id="Sec27">
      <title>Data availability</title>
      <p id="Par50">The Metaclust dataset generated during the current study is available at <ext-link ext-link-type="uri" xlink:href="https://metaclust.mmseqs.org">https://metaclust.mmseqs.org</ext-link>. The Linclust source code is available at <ext-link ext-link-type="uri" xlink:href="https://mmseqs.org">https://mmseqs.org</ext-link>. All scripts and benchmark data including command-line parameters necessary to reproduce the benchmark and analysis results presented here are available at <ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/martin_steinegger/linclust-analysis">https://bitbucket.org/martin_steinegger/linclust-analysis</ext-link>.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Electronic supplementary material</title>
    <sec id="Sec29">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2018_4964_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2018_4964_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Electronic supplementary material</bold>
      </p>
      <p><bold>Supplementary Information</bold> accompanies this paper at 10.1038/s41467-018-04964-5.</p>
    </fn>
    <fn>
      <p><bold>Publisher's note:</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We are grateful to Cedric Notredame and Chaok Seok for hosting MS at the CRG in Barcelona and at Seoul National University for 12 and 30 months, respectively. Thanks to Milot Mirdita and Clovis Galiez for discussions and to all who contributed metagenomic datasets used to build Metaclust, in particular the US Department of Energy Joint Genome Institute <ext-link ext-link-type="uri" xlink:href="http://www.jgi.doe.gov/">http://www.jgi.doe.gov/</ext-link> and their user community. This work was supported by the EU’s Horizon 2020 Framework Programme (Virus-X, grant 685778).</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>M.S. performed the research and programming, M.S. and J.S. jointly designed the research and wrote the manuscript.</p>
  </notes>
  <notes notes-type="COI-statement">
    <sec id="FPar1">
      <title>Competing interests</title>
      <p id="Par51">The authors declare no competing interests.</p>
    </sec>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rappe</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Giovannoni</surname>
            <given-names>SJ</given-names>
          </name>
        </person-group>
        <article-title>The uncultured microbial majority</article-title>
        <source>Ann. Rev. Microbiol.</source>
        <year>2003</year>
        <volume>57</volume>
        <issue>no. 1</issue>
        <fpage>369</fpage>
        <lpage>394</lpage>
        <pub-id pub-id-type="doi">10.1146/annurev.micro.57.030502.090759</pub-id>
        <pub-id pub-id-type="pmid">14527284</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilke</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The MG-RAST metagenomics database and portal in 2015</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>no. D1</issue>
        <fpage>D590</fpage>
        <lpage>D594</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1322</pub-id>
        <?supplied-pmid 26656948?>
        <pub-id pub-id-type="pmid">26656948</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Markowitz</surname>
            <given-names>VM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>IMG/M 4 version of the integrated metagenome comparative analysis system</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2014</year>
        <volume>42</volume>
        <issue>no. D1</issue>
        <fpage>D568</fpage>
        <lpage>D573</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkt919</pub-id>
        <?supplied-pmid 24136997?>
        <pub-id pub-id-type="pmid">24136997</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Scholz</surname>
            <given-names>MB</given-names>
          </name>
          <name>
            <surname>Lo</surname>
            <given-names>CC</given-names>
          </name>
          <name>
            <surname>Chain</surname>
            <given-names>PS</given-names>
          </name>
        </person-group>
        <article-title>Next generation sequencing and bioinformatic bottlenecks: the current state of metagenomic data analysis</article-title>
        <source>Curr. Opin. Biotechnol.</source>
        <year>2012</year>
        <volume>23</volume>
        <issue>no. 1</issue>
        <fpage>9</fpage>
        <lpage>15</lpage>
        <pub-id pub-id-type="doi">10.1016/j.copbio.2011.11.013</pub-id>
        <?supplied-pmid 22154470?>
        <pub-id pub-id-type="pmid">22154470</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Desai</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Antonopoulos</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gilbert</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Glass</surname>
            <given-names>EM</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>From genomics to metagenomics</article-title>
        <source>Curr. Opin. Biotechnol.</source>
        <year>2012</year>
        <volume>23</volume>
        <issue>no. 1</issue>
        <fpage>72</fpage>
        <lpage>76</lpage>
        <pub-id pub-id-type="doi">10.1016/j.copbio.2011.12.017</pub-id>
        <?supplied-pmid 22227326?>
        <pub-id pub-id-type="pmid">22227326</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Prakash</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>Functional assignment of metagenomic data: challenges and applications</article-title>
        <source>Brief Bioinforma.</source>
        <year>2012</year>
        <volume>13</volume>
        <issue>no. 6</issue>
        <fpage>711</fpage>
        <lpage>727</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbs033</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fu</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Niu</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>CD-HIT: accelerated for clustering the next-generation sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>3150</fpage>
        <lpage>3152</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts565</pub-id>
        <?supplied-pmid 23060610?>
        <pub-id pub-id-type="pmid">23060610</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>Search and clustering orders of magnitude faster than BLAST</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>2460</fpage>
        <lpage>2461</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq461</pub-id>
        <?supplied-pmid 20709691?>
        <pub-id pub-id-type="pmid">20709691</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Fu</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Niu</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wooley</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Ultrafast clustering algorithms for metagenomic sequence analysis</article-title>
        <source>Brief Bioinform.</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>656</fpage>
        <lpage>668</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbs035</pub-id>
        <?supplied-pmid 22772836?>
        <pub-id pub-id-type="pmid">22772836</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <?supplied-pmid 29035372?>
        <pub-id pub-id-type="pmid">29035372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hauser</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs software suite for fast and deep clustering and searching of large protein sequence sets</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>no. 9</issue>
        <fpage>1323</fpage>
        <lpage>1330</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw006</pub-id>
        <?supplied-pmid 26743509?>
        <pub-id pub-id-type="pmid">26743509</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using diamond</article-title>
        <source>Nat. Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>no. 1</issue>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
        <?supplied-pmid 25402007?>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mash: fast genome and metagenome distance estimation using minhash</article-title>
        <source>Genome Biol.</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>132</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0997-x</pub-id>
        <?supplied-pmid 27323842?>
        <pub-id pub-id-type="pmid">27323842</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Tang</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>RAPSearch2: a fast and memory-efficient protein similarity search tool for next-generation sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>125</fpage>
        <lpage>126</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr595</pub-id>
        <?supplied-pmid 22039206?>
        <pub-id pub-id-type="pmid">22039206</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J. Mol. Biol.</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mirdita</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Uniclust databases of clustered and deeply annotated protein sequences and alignments</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2017</year>
        <volume>45</volume>
        <issue>no. D1</issue>
        <fpage>D170</fpage>
        <lpage>D176</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw1081</pub-id>
        <?supplied-pmid 27899574?>
        <pub-id pub-id-type="pmid">27899574</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>Gene Ontology Consortium.</collab>
        </person-group>
        <article-title>Gene ontology consortium: going forward</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2015</year>
        <volume>43</volume>
        <issue>no. D1</issue>
        <fpage>D1049</fpage>
        <lpage>D1056</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gku1179</pub-id>
        <pub-id pub-id-type="pmid">25428369</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finn</surname>
            <given-names>RD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The pfam protein families database: towards a more sustainable future</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>no. D1</issue>
        <fpage>D279</fpage>
        <lpage>D285</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1344</pub-id>
        <?supplied-pmid 26673716?>
        <pub-id pub-id-type="pmid">26673716</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hyatt</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Prodigal: prokaryotic gene recognition and translation initiation site identification</article-title>
        <source>BMC Bioinforma.</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>no. 1</issue>
        <fpage>119</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kodama</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Leinonen</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>The sequence read archive: explosive growth of sequencing data</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2012</year>
        <volume>40</volume>
        <issue>no. D1</issue>
        <fpage>D54</fpage>
        <lpage>D56</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkr854</pub-id>
        <?supplied-pmid 22009675?>
        <pub-id pub-id-type="pmid">22009675</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Sunagawa, S. et al., Structure and function of the global ocean microbiome, <italic>Science</italic>, <bold>348</bold>, no. 6237, pp. 1261359–1–9, (2015).</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ovchinnikov</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Protein structure determination using metagenome sequence data</article-title>
        <source>Science</source>
        <year>2017</year>
        <volume>355</volume>
        <fpage>294</fpage>
        <lpage>298</lpage>
        <pub-id pub-id-type="doi">10.1126/science.aah4043</pub-id>
        <?supplied-pmid 28104891?>
        <pub-id pub-id-type="pmid">28104891</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hopf</surname>
            <given-names>TA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mutation effects predicted from sequence co-variation</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>128</fpage>
        <lpage>135</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3769</pub-id>
        <?supplied-pmid 28092658?>
        <pub-id pub-id-type="pmid">28092658</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Day</surname>
            <given-names>WH</given-names>
          </name>
          <name>
            <surname>Edelsbrunner</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Efficient algorithms for agglomerative hierarchical clustering methods,</article-title>
        <source>J. Classif.</source>
        <year>1984</year>
        <volume>1</volume>
        <issue>no. 1</issue>
        <fpage>7</fpage>
        <lpage>24</lpage>
        <pub-id pub-id-type="doi">10.1007/BF01890115</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">McCallum, A. Nigam, K. &amp; Ungar, L. H. Efficient clustering of high-dimensional data sets with application to reference matching. In <italic>Proc. 6th ACM SIGKDD International Conference on Knowledge Discovery and Data mining</italic>. 169–178 (ACM, 2000).</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Godzik</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Cd-hit: a fast program for clustering and comparing large sets of protein or nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>1658</fpage>
        <lpage>1659</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl158</pub-id>
        <?supplied-pmid 16731699?>
        <pub-id pub-id-type="pmid">16731699</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hauser</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Mayer</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Soding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>kClust: fast and sensitive clustering of large protein sequence databases</article-title>
        <source>BMC Bioinforma.</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>248+</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-14-248</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Marshall J. A. &amp; Rafsky L. C. Exact clustering in linear time. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1702.05425">https://arxiv.org/abs/1702.05425</ext-link> (2017).</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wang, J. Shen, H. T., Song, J. &amp; Ji., J. Hashing for similarity search: a survey. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1408.2927">https://arxiv.org/abs/1408.2927</ext-link> (2014).</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Albertsen</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome sequences of rare, uncultured bacteria obtained by differential coverage binning of multiple metagenomes</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>no. 6</issue>
        <fpage>533</fpage>
        <lpage>538</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2579</pub-id>
        <?supplied-pmid 23707974?>
        <pub-id pub-id-type="pmid">23707974</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bairoch</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Universal Protein Resource (UniProt)</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2005</year>
        <volume>33</volume>
        <issue>no. Suppl. 1</issue>
        <fpage>D154</fpage>
        <lpage>D159</lpage>
        <?supplied-pmid 15608167?>
        <pub-id pub-id-type="pmid">15608167</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Zhao, M. Lee, W.-P. Garrison, E. P. &amp; Marth, G. T. SSW Library: An SIMD Smith-Waterman C/C++ library for use in genomic applications. <italic>PLoS ONE</italic><bold>8</bold>, e82138 (2013).</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sheetlin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Frith</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Spouge</surname>
            <given-names>JL</given-names>
          </name>
        </person-group>
        <article-title>ALP &amp; FALP: C++ libraries for pairwise local alignment E-values</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>32</volume>
        <issue>no. 2</issue>
        <fpage>304</fpage>
        <lpage>305</lpage>
        <?supplied-pmid 26428291?>
        <pub-id pub-id-type="pmid">26428291</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
