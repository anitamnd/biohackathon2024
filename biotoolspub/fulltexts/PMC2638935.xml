<?properties open_access?>
<?properties no_embargo?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title>Bioinformatics</journal-title>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1460-2059</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2638935</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btn565</article-id>
    <article-id pub-id-type="publisher-id">btn565</article-id>
    <article-id pub-id-type="pmid">18974170</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group>
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Slider—maximum use of probability information for alignment of short sequence reads and SNP detection</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Malhis</surname>
          <given-names>Nawar</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Butterfield</surname>
          <given-names>Yaron S. N.</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ester</surname>
          <given-names>Martin</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jones</surname>
          <given-names>Steven J. M.</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="AFF1"><sup>1</sup>Genome Sciences Centre, BC Cancer Agency, Vancouver and <sup>2</sup>School of Computing Science, Simon Fraser University, Burnaby, BC, Canada</aff>
    <author-notes>
      <corresp id="COR1">*To whom correspondence should be addressed.</corresp>
      <fn>
        <p>Associate Editor: Dmitrij Frishman</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>1</day>
      <month>1</month>
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>30</day>
      <month>10</month>
      <year>2008</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>10</month>
      <year>2008</year>
    </pub-date>
    <volume>25</volume>
    <issue>1</issue>
    <fpage>6</fpage>
    <lpage>13</lpage>
    <history>
      <date date-type="received">
        <day>15</day>
        <month>7</month>
        <year>2008</year>
      </date>
      <date date-type="rev-recd">
        <day>27</day>
        <month>10</month>
        <year>2008</year>
      </date>
      <date date-type="accepted">
        <day>27</day>
        <month>10</month>
        <year>2008</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2008 The Author(s)</copyright-statement>
      <copyright-year>2008</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/2.0/uk/">
        <p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/2.0/uk/">http://creativecommons.org/licenses/by-nc/2.0/uk/</ext-link>) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Motivation:</bold> A plethora of alignment tools have been created that are designed to best fit different types of alignment conditions. While some of these are made for aligning Illumina Sequence Analyzer reads, none of these are fully utilizing its probability (<italic>prb</italic>) output. In this article, we will introduce a new alignment approach (Slider) that reduces the alignment problem space by utilizing each read base's probabilities given in the <italic>prb</italic> files.</p>
      <p><bold>Results:</bold> Compared with other aligners, Slider has higher alignment accuracy and efficiency. In addition, given that Slider matches bases with probabilities other than the most probable, it significantly reduces the percentage of base mismatches. The result is that its SNP predictions are more accurate than other SNP prediction approaches used today that start from the most probable sequence, including those using base quality.</p>
      <p>
        <bold>Contact:</bold>
        <email>nmalhis@bcgsc.ca</email>
      </p>
      <p>
        <bold>Supplementary information and availability:</bold>
        <ext-link ext-link-type="uri" xlink:href="http://www.bcgsc.ca/platform/bioinfo/software/slider">http://www.bcgsc.ca/platform/bioinfo/software/slider</ext-link>
      </p>
    </abstract>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>1 INTRODUCTION</title>
    <p>Novel parallel sequencing technologies including sequencing by synthesis (SBS) such as Illumina Sequence Analyzer (for a review, refer to Holt and Jones, <xref ref-type="bibr" rid="B7">2008</xref>), 454 Life Sciences sequencing and Applied Biosystems SOLiD sequencing, coupled with ever decreasing costs, has provided new opportunities to study genomes. This includes the ability to identify sequence aberrations and chromosomal abnormalities, such as single nucleotide polymorphisms (SNPs), insertions, deletions and inversions, on a genome-wide scale. The amount of sequence produced has also provided the computational challenge of developing accurate and reliable software approaches for sequence alignment that can complete withina useful time frame using affordable computer hardware resources.</p>
    <p>Here, we focus on the short sequence reads generated by the Illumina Sequence Analyzer G1 and G2 platforms. Each experiment run typically produces in excess of 1 Gb of nucleotide sequence as short reads (ranging from 27 to 42 nt in length). The Illumina sequencing by synthesis technology works by first randomly fragmenting DNA of interest, ligating adapters to each end, and then annealing the DNA fragments to a flow cell surface coated with complementary oligonucleotides. The DNA fragments are then amplified at millions of unique locations across the flow cell surface resulting in a random array of clonal clusters of DNA molecules. Sequencing of the amplified DNA occurs in cycles. At each cycle, all four fluorescently labelled reversibly terminated nucleotides are added to the reaction allowing the single correct nucleotide to be incorporated by the polymerase at each cluster. A subsequent laser excitation allows for four images to be generated each of which capture a specific excited wavelength from each of the four fluorescent labels corresponding to a single base type. Comparing the colour signal intensity of each base for each cluster, probabilities corresponding to the most likely base incorporation are generated and reported in a prb file. The most probable identity of that base is called according to these probabilities resulting in a final read sequence which is reported in a seq file. It is important to note that with each subsequent cycle, the sequencing error rate increases primarily due to the fact that the chemical reactions at each cycle do not complete to 100%, resulting in molecules within in each cluster becoming out of synchronization. This phenomenon, known as ‘dephasing’ increases the background noise and reduces the accuracy of each base called as the sequencing proceeds.</p>
    <p>An important task is to align sequence reads to the appropriate reference genome for the detection of genetic variants. However, the alignment of these short reads presents a number of challenges due to their short lengths and error rate. Traditional methods of sequence alignment have worked well with sequences that are long enough to provide high location specificity whilst tolerating a number of mismatching bases (sequencing errors and/or biological SNPs). For short reads a correct interpretation of the quality of every base call is essential in the correct alignment of reads to the reference and the accurate identification of SNPs. For example, one base-calling error can result in a no alignment match to the reference genome, a match reporting a false SNP, or a misaligned match to a different region of the genome. The quality of the alignment and SNP prediction decreases as the number of inaccurate base calls increase. In general, if a base in the reference sequence has a high enough coverage with a consistent difference from its reference, this base likely represents a polymorphism. This redundant coverage must be high enough to confidently discriminate true variants from sequencing errors, and to account for the fact that different copies of the same read location might be generated from biological aliases (e.g. diploid or mitochondrial chromosomes).</p>
    <p>A plethora of alignment tools have been created employing various methods (some of which are described here). A few make use of the quality information from the Illumina <italic>prb</italic> files and these typically use the base probability values to evaluate the probability of the called base only.</p>
    <p>In this study, we will introduce a new alignment tool, Slider. Slider is an application for the Illumina Sequence Analyzer output that uses the probability files instead of the sequence files as an input for alignment to a reference sequence or a set of reference sequences. We will show that this approach is more accurate and more efficient than the currently available software packages.</p>
  </sec>
  <sec sec-type="methods" id="SEC2">
    <title>2 METHODS</title>
    <p>First, we introduce existing tools and their approach and then describe Slider's algorithm.</p>
    <sec id="SEC2.1">
      <title>2.1 Existing tools</title>
      <p>Different nucleotide alignment programs are made to best fit different alignment properties which include: sequence length of references and reads, quality of reads with respect to sequencing errors, sequence similarity to a reference sequence (SNPs, micro-indels), and the number of reads to be aligned with the reference. Some of the more general use aligners are:
<list id="l1" list-type="bullet"><list-item><p>Exonerate (Slater and Birney, <xref ref-type="bibr" rid="B12">2005</xref>): alignment seeds are generated using FSM (Aho and Corasick, <xref ref-type="bibr" rid="B1">1975</xref>) with multiple queries for each single pass by concatenating some reads (Korf and Gish, <xref ref-type="bibr" rid="B9">2000</xref>). High-scoring Segment Pairs (HSPs) are then formed by extending these seeds [in a similar manner as the BLAST algorithm (Altschul <italic>et al.</italic>, <xref ref-type="bibr" rid="B2">1990</xref>)] and finally, these extended HSPs are joined by sparse dynamic programming (Eppstein <italic>et al.</italic>, <xref ref-type="bibr" rid="B5">1990</xref>) to form the alignments.</p></list-item><list-item><p>MUMmer (Delcher <italic>et al.</italic>, <xref ref-type="bibr" rid="B4">2002</xref>; Kurtz <italic>et al.</italic>, <xref ref-type="bibr" rid="B10">2004</xref>) and MUMmerGPU (Schatz <italic>et al.</italic>, <xref ref-type="bibr" rid="B11">2007</xref>): a memory-resident suffix tree is first generated from the reference sequence(s). Alignment seeds are generated by streaming reads against the reference suffix tree, and then Smith–Waterman alignment is used for tuning.</p></list-item></list>
Given the two input sets, the set of reads and the set of reference sequences, most of the available aligners are based on the following two steps:
<list id="l2" list-type="order"><list-item><p>First, a main memory-resident indexing data structure for either one of the input sets is generated; this indexing facilitates fast random access to that set.</p></list-item><list-item><p>The other input set is scanned against this indexed set, alignment seeds are generated, some aligners extend these seeds, and finally a dynamic programming function is used to join seeds that are adjacent and to generate an alignment score taking in consideration read errors, SNPs and/or small insertion or deletions (micro indels).</p></list-item></list>
However, when the aligned sequences have specific properties, building aligners to best fit these properties will reduce the problem space and improve both the efficiency and accuracy of the alignment process. Some aligners are designed especially for aligning the output of Illumina's Sequence Analyzer. These aligners take advantage of the short read lengths for speeding up the alignment (by using hash tables for speeding up seed identification) which allows the processing of a larger number of reads in a reasonable time frame:
<list id="l3" list-type="bullet"><list-item><p>Eland (Illumina): the mapping algorithm which is provided by Illumina as part of its analysis pipeline, divides each read into four parts (A, B, C and D). Given that these reads are short enough, Eland is able to create a memory-resident hash table for this input set of reads parts (quarters). Eland then scans the reference sequences(s) against this hash table; if a read has an exact match for at least two parts within appropriate distance, the other remaining unmatched parts are searched sequentially. Compared with other aligners, ELAND is very efficient; however, Eland can map reads using up to the first 32 bases; for longer sequences the bases after 32 willbe mapped sequentially after the alignment of the initial 32.</p></list-item><list-item><p>RMAP (Smith <italic>et al.</italic>, <xref ref-type="bibr" rid="B13">2008</xref>): in addition to utilizing hash tables for improving the efficiency, RMAP uses quality scores to improve mapping accuracy by not penalizing mismatches for bases with a base-call quality score less than a predetermined cut-off value. Bases of lower quality are considered as wild-cards. To allow up to <italic>k</italic> mismatches, it divides reads into <italic>k</italic> + 1 contiguous seeds, builds a hash table for these seeds, and then scans the reference sequence against this hash table. For each read seed that matches to the reference genome, the entire read is compared with the local area surrounding the location of the matching seed.</p></list-item></list>
As of today, these aligners still have some common disadvantages with respect to the analysis of our target data:
<list id="l4" list-type="order"><list-item><p>Scanning one input set against the other indexed input set requires random access to the indexed set which constitutes very poor space locality and in turn requires the complete index structure to be in main memory. This may not be possible when that input set is large. Failing to locate the index structure in main memory will generate a large amount of swapping (thrashing) and will stall program execution as the indexed input set size increases.</p></list-item><list-item><p>By not using all base probability information available, these aligners are required to use a higher level of approximation, such as a higher number of allowed base mismatches (abm). This results in a larger number of reads that are misaligned.</p></list-item><list-item><p>By considering only the most probable base, these aligners give a large number of base mismatches that would otherwise be interpretable sequencing errors, resulting in a higher percentage of false positive SNPs. Utilizing quality values of only the most probable bases (Smith <italic>et al.</italic>, <xref ref-type="bibr" rid="B13">2008</xref>), partially reduces these unnecessarily false mismatches.</p></list-item></list>
</p>
    </sec>
    <sec id="SEC2.2">
      <title>2.2 Slider</title>
      <p>To overcome these problems, it is important to first understand the properties of the Illumina Sequence Analyzer data, and then to build an approach that maximizes the utilization of these properties in order to optimize the alignment (efficiency and accuracy) and SNP prediction accuracy.</p>
      <p>In contrast to other aligners, the Slider algorithm uses not only the most probable base, but also all possible bases with a probability above a certain base probability threshold (baseMin<italic>Prb</italic>) provided by the Illumina probability files in order to generate all possible reads with probability above a certain read probability threshold (read_0_Min<italic>Prb</italic>). This reduces thelevel of alignment approximation needed and improves accuracy (reducing the number misaligned reads and the number of base mismatches). For its core alignment, Slider sorts all these generated reads in lexicographical order and then crosses it sequentially with a presorted table of windows of reference sequence(s) and their reverse complement(s). This approach eliminates the need for an indexed structure by replacing random I/O with sequential I/O which allows Slider to scale to large input datasets. Our test results show that Slider efficiently provides more accurate alignments and SNP calls.</p>
      <p>Today, the use of Paired End Tag (PET) data in alignments is an important aspect of extracting more information from these reads. Slider currently processes PET data and we are now expanding on this capability. In this article, we demonstrate Slider's concept of aligning a read which is applicable for both single-end and paired-end tag data.</p>
    </sec>
  </sec>
  <sec id="SEC3">
    <title>3 THE SLIDER ALGORITHM</title>
    <p>There are three main properties of the Illumina <italic>Sequence Analyzer</italic> output reads that are important to consider:
<list id="l5" list-type="order"><list-item><p>The number of reads is large; one machine run (a single flow cell) generates about 40 million reads in about 48 h.</p></list-item><list-item><p>These reads are shorter than other sequencers, currently being about 36 nt.</p></list-item><list-item><p>The Sequence Analyzer software provided by Illumina produces probability values associated with each read base. These probability values give at each read location the probabilities of the base to be either A, C, G or T.</p></list-item></list>
The base probability values are provided in the <italic>prb</italic> files in the form of <italic>Q</italic>-values, where probabilities can then be calculated using:
<disp-formula><graphic xlink:href="btn565um1.jpg" position="float"/></disp-formula>
where,</p>
    <p><italic>Q</italic><sub><italic>bs</italic></sub> (i): the probability of the base bs, in the form of a <italic>Q</italic>-value, at location <italic>i</italic> in a read in the range of [−<italic>Q</italic><sub>max</sub>, <italic>Q</italic><sub>max</sub>]. <italic>Q</italic><sub><italic>max</italic></sub> is usually set to 40.</p>
    <p><italic>P</italic><sub><italic>bs</italic></sub> (i): the probability of base bs at location <italic>i</italic> in a read, is in the range of [<italic>P</italic><sub>min</sub>, <italic>P</italic><sub>max</sub>].</p>
    <p>At a given sequencing cycle, if a cluster is visible in only one of the four images, then the base for that cluster is as well resolved as it can be. We call this base a ‘crisp base’. In other words, we define a base as a crisp base if three of its four <italic>prb</italic> values are equal to −<italic>Q</italic><sub>max</sub>, and one is equal to <italic>Q</italic><sub>max</sub>. A crisp read is a read where all the constituent bases are crisp.</p>
    <p>For example, when a base is crisp, the base will have such <italic>Q</italic> and corresponding <italic>P</italic>-values:</p>
    <p>
      <inline-graphic xlink:href="btn565i1.jpg"/>
    </p>
    <p>But, if the base is not crisp, the <italic>Q</italic>-values for a base might look like this:</p>
    <p>
      <inline-graphic xlink:href="btn565i2.jpg"/>
    </p>
    <p>Utilizing these properties, Slider provides major improvements in efficiency and accuracy over other traditional alignment algorithms.</p>
    <p>We present some more definitions that will be used in later sections below:</p>
    <p>Definitions and notations:</p>
    <p><italic>R</italic><sub>src</sub>: the actual source read of nucleotide sequence.</p>
    <p><italic>SZ</italic><sub>r</sub>: the size (length) of a read.</p>
    <p><italic>SZ</italic><sub>d</sub>: the size (length) of a single database sequence (which is a subsequence of the reference).</p>
    <p><italic>R</italic><sub>ps</sub>: a probable sequence of a read given its <italic>prb</italic> line; crisp reads have only one <italic>R</italic><sub>ps</sub>.</p>
    <p><italic>R</italic><sub>mps</sub>: the most probable sequence (MPS) of a read; this sequence is the one given in the <italic>seq</italic> files which are generally used by many aligners as the only input.</p>
    <p><italic>R</italic><sub>al</sub>: a substring of the reference sequence where an <italic>R</italic><sub>ps</sub> is aligned by an aligner. If <italic>R</italic><sub>al</sub> = <italic>R</italic><sub>src</sub>, we say that the read is accurately aligned. Otherwise, the read is misaligned.</p>
    <p><italic>D</italic><sub>mps</sub>: the edit distance (or the number of different bases) between <italic>R</italic><sub>mps</sub> and <italic>R</italic><sub>src</sub>.</p>
    <p><italic>D</italic><sub>al</sub>: the edit distance between an aligned <italic>R</italic><sub>ps</sub> and <italic>R</italic><sub>al</sub>.</p>
    <p><italic>P</italic><sub>ps</sub>: the probability, ‘weight’, of an <italic>R</italic><sub>ps</sub>.
<disp-formula><graphic xlink:href="btn565um2.jpg" position="float"/></disp-formula></p>
    <p><italic>P</italic><sub>mps</sub>: equals <italic>P</italic><sub>ps</sub> when <italic>R</italic><sub>ps</sub> is <italic>R</italic><sub>mps</sub>. Crisp reads have only one <italic>R</italic><sub>ps</sub>, which is the <italic>R</italic><sub>mps</sub> and this value is about one.</p>
    <p>For example, assume a read of 8 bases, with two non-crisp bases (an example of a non-crisp read):</p>
    <p>
      <inline-graphic xlink:href="btn565i3.jpg"/>
    </p>
    <p>We first convert the <italic>Q</italic>-values to probabilities:</p>
    <p>
      <inline-graphic xlink:href="btn565i4.jpg"/>
    </p>
    <p>Then, we generate all possible sequences considering every possible nucleotide with a probability higher than a baseMin<italic>Prb</italic> (a 0.2% value is used by default), and assign a probability for each sequence <italic>P</italic><sub>ps</sub>. Those reads with a cumulative probability or ‘weight’ less than the read_0_Min<italic>Prb</italic> threshold (a 0.1% value is used by default) are ignored.</p>
    <p>
      <inline-graphic xlink:href="btn565i5.jpg"/>
    </p>
    <p>We will loosely define a read specificity as the ability of accurately aligning the read to a unique location on the reference sequence after allowing a limited number of changes on the read from a set of possible changes (<italic>S</italic><sub>ch</sub>). In general, as the size of <italic>S</italic><sub>ch</sub> increases, the read specificity decreases.</p>
    <p>Unlike the Roche (454) <italic>Genome Sequencer</italic> 20 where errors are dominated by missing bases (Brockman <italic>et al.</italic>, <xref ref-type="bibr" rid="B3">2008</xref>), errors in Illumina <italic>Sequence Analyzer</italic>, according to our experience, are mostly base miscalls caused by PCR cluster generation (especially in the early stages), cross-talk between clusters (a considerable amount of such errors being generated when the cluster density is high) and optical noise. Most of these base miscalls canbe treated according to its probabilities provided in the <italic>prb</italic> files. Each base mismatch in an accurately aligned read can be either a sequencing error or a source mutation (SNP). By using the probability files as input instead of the sequence files, Slider reduces base mismatches for non-crisp bases which eliminates most of the sequencing errors and results in more accurate SNP predictions.</p>
    <p>Slider works in five steps:
<list id="l6" list-type="order"><list-item><p>CreateDB.java for generating a reference database table: this table is generated using a sliding window of size <italic>SZ</italic><sub>d</sub>, where every subsequence of size <italic>SZ</italic><sub>d</sub> from the reference and its reverse complement are included. Up to two undefined bases, noted as <italic>N</italic>s in each subsequence, are allowed by substituting all four bases for every <italic>N</italic> and generating all possible subsequences. Finally, this database table is lexicographically sorted. Generating a reference database table needs to be done once for each reference sequence. For example, the human genome reference database table has approximately 6 billion records (counting both forward and reverse complement) that are sorted in lexicographical order. For the human genome, this table was generated in &lt;24 h on a single CPU and used about 160 GB of disk space. Once a reference database table is generated, it can be used for every alignment to that reference, and there is no need for it to be regenerated with each alignment.</p></list-item><list-item><p>CreateSequences.java for generating the P0_Reads Table: using <italic>prb</italic> values, we first generate read sequences <italic>R</italic><sub>ps</sub> for each <italic>prb</italic> line as explained earlier. One unique id is given for all reads that are generated from the same <italic>prb</italic> line source. When a <italic>prb</italic> line has a number of non-crisp bases larger than some threshold value UDmax (a value of 11 is used), only the MPS (most probable sequence) is generated and is marked as a low quality, LQ. LQ sequences will not be used for SNP prediction. The table of all reads generated from all <italic>prb</italic> lines is then lexicographically sorted to form the P0_Reads table.</p></list-item><list-item><p>Alignment.Java: find read locations on the reference sequence with an exact match and one-off match (one base mismatch) to <italic>prb</italic>-derived sequences.</p></list-item><list-item><p>Separation.java: for each reference sequence, aligned reads are then separated into two files: a unique match file and a multiple match file.</p></list-item><list-item><p>SNPsPrediction.java: for each reference sequence, a SNP prediction table, a coverage information file and a set of coverage histogram files are created from the unique matches file of a reference sequence.</p></list-item></list>
Given that our datasets are large (hundreds of millions of records), in order for sorting to not impose main memory limitations on Slider, we used External Merge sorting, which has a runtime complexity of <italic>O</italic>(<italic>n</italic> log<italic>n</italic>) for <italic>n</italic> records (Knuth, <xref ref-type="bibr" rid="B8">1998</xref>). As each of P0_Reads and P0_Reads tables account for sequencing errors, the size of these tables vary as the sequencing quality changes. The number of records in P0_Reads is about 5–10 times the number of <italic>prb</italic> lines, and each record is 29 bytes, so, if we have an input set of 100 million <italic>prb</italic> lines, P0_reads size is about 15–30 GB. P1_Reads size is mainly determined by the number of reads that did not match the reference and are not LQ. The P1_Reads table has about 10–30 times the number of <italic>prb</italic> lines, so for a 100 million reads input set P1_Reads table is about 30–90 GB. Since mismatches in low probability sequences are less likely to account for real SNPs, by increasing the read_1_MinPrb threshold value, we can reduce the size of the P1_Reads table without significantly affecting SNPs prediction.</p>
    <p>While steps 1, 2 and 4 are straightforward, we will now cover in more detail the alignment (3) and the SNPs prediction (5) steps.</p>
    <sec id="SEC3.1">
      <title>3.1 Alignment and efficiency</title>
      <p>The alignment step is a key feature of Slider. It is fast, accurate and does not have a large memory requirement (a 4 GB machine is enough for the human genome). The slider alignment is based on two steps of exact match alignments:
<list id="l7" list-type="order"><list-item><p>The first step is to align the P0_Reads table with the reference database table. Given that both tables are lexicographically sorted, two sliding pointers (<xref ref-type="fig" rid="F1">Figure 1</xref>) can do the exact match alignment with each sliding pointer passing once on one of the two tables. If a read from P0_Reads matches more than one database sequence, it is flagged as a multi-match and cannot therefore be unambiguously mapped to the reference genome. Similarly, if reads in P0_Reads with the same id match to different sequences they are also considered as a multi-match. An ‘.m0’table is generated that holds all matched reads with their matching information (weight, location,dunique match versus multiple matches, etc.).</p></list-item><list-item><p>Reads in the P0_Reads table with an id that is not in the ‘.m0’ table and have a weight more than the threshold weight, read_1_Min<italic>Prb</italic>, are used to generate a one-off read table, P1_Reads, by applying all possible one base mutations on these reads. The P1_Reads table is then lexicographically sorted.</p></list-item><list-item><p>Similar to the first step, the P1_Reads table is aligned to the reference database table. A ‘.m1’ table is generated that holds all matched reads.</p></list-item></list>
While some aligners match sequences with up to a small number of mis-matches (typically, this is limited to two as increasing the number of possible mismatches reduces the read specificity), if <italic>D</italic><sub>mps</sub>, the edit distance between <italic>R</italic><sub>src</sub> and <italic>R</italic><sub>mps</sub>, is greater than this value, the read will either fail to align or will misalign. Eland, for example, uses only the most probable sequence to align and others, such as RMAP (Smith <italic>et al.</italic>, <xref ref-type="bibr" rid="B13">2008</xref>) make use of quality information (of the most probably base) in a discreet way in determining a degenerate or ‘wild card’ position. However, because the threshold value for non-crisp bases in a read can be large with respect to the number of possible mismatches used by other aligners, this only partially solves the problem.
<fig id="F1" position="float"><label>Fig. 1.</label><caption><p>Slider scans both the lexographically sorted reference database and the lexicographically sorted Px_Reads (s.ol0) input table once to generate all exact matches. Exact matches are stored in the sorted s.m0 table. In this example, the set of input sequences is 6 bp (<italic>SZ</italic><sub>r</sub> = 6), which is aligned to a reference database of 10 bp (<italic>SZ</italic><sub>d</sub> = 10) oligos created with a sliding window across the reference. Reads that match are indicated in bold and underlined with an example of a unique match indicated by a solid line and that of a multiple match with a dashed line.</p></caption><graphic xlink:href="btn565f1"/></fig></p>
      <p>The analysis of the run time for each aligner must take into consideration a large number of factors including: read size, read quality, reference accuracy and contamination. In general, the computational complexity for both sorting and indexing is of an order of <italic>O</italic>(<italic>n</italic> * log <italic>n</italic>). Let us have an input set of <italic>M</italic> reads, and a reference sequence of size <italic>N</italic>. Given that our interest is when both <italic>M</italic> and <italic>N</italic> are too large to fit in main memory, the input set of reads are divided into <italic>k</italic> subsets of size <italic>m</italic> = <italic>M</italic>/<italic>k</italic>, such that each of these subset of sequences and their associated parameters can fit in main memory (for most aligners, these subsets are up to 15 million reads). In comparing the computational complexity of sorting with indexing, we can see that:
<list id="l8" list-type="bullet"><list-item><p>Indexing approaches first need to create the indexing structure for each of the <italic>k</italic> subsets, <italic>O</italic>(<italic>k</italic> * <italic>m</italic> * log <italic>m</italic>), and then to search for every possible subsequence of the reference with the reads' length in every one of the <italic>k</italic>-indexed subset of reads <italic>O</italic>(<italic>k</italic> * <italic>N</italic> * log <italic>m</italic>) (Garcia-Molina <italic>et al.</italic>, <xref ref-type="bibr" rid="B6">2008</xref>), since <italic>m</italic> is constant, then:
Total: <italic>O</italic>(<italic>k</italic> * <italic>N</italic>+<italic>M</italic>).</p></list-item><list-item><p>The sorting and streaming needs to sort (external sorting) the input set of reads, <italic>O</italic>(<italic>M</italic> * log <italic>M</italic>), and then stream this sorted reads against a presorted reference <italic>O</italic>(<italic>N</italic> + <italic>M</italic>).
Total: <italic>O</italic>(<italic>N</italic> + <italic>M</italic> * log <italic>M</italic>).</p></list-item></list>
This gives the sorting approach an advantage when the input set of reads and the reference genomesare large such as for human.</p>
    </sec>
    <sec id="SEC3.2">
      <title>3.2 SNP prediction</title>
      <p>SNP prediction is another key feature of Slider. The goal is to locate places in the reference sequence that are covered with read bases that are not equal to the reference sequence base.</p>
      <p>Given that Slider attempts to align most of the possible reads for a <italic>prb</italic> line as a zero-off (U0) match, the final number of Slider's U0 matches is higher than other aligners, and its number of one-off (U1) matches is much lower. Given that most probability values are considered in the U0 and U1 phases, no U2 alignment is needed for Slider (<xref ref-type="table" rid="T1">Table 1</xref>). As a result,there are a lower number of base mismatches, and consequently more accurate SNP predictions. This parsimonious approach by Slider means that before a base mismatch is called, the probabilities of all the bases are utilized to ensure that the base is not one of the predicted nucleotides provided by the read <italic>prb</italic> values. Given the large number of sequence reads that are generated by a machine run, it will be expected that many of the actual bases in sequence reads will not be thosereported as the most probable.
<table-wrap id="T1" position="float"><label>Table 1.</label><caption><p>Comparison of number of reads aligned at various lengths between Eland, RMAP and Slider</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1"/><th colspan="3" align="center" rowspan="1">CT302, 27 bases<hr/></th><th colspan="3" align="center" rowspan="1">CT302, 32 bases<hr/></th></tr><tr><th rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">Eland</th><th align="left" rowspan="1" colspan="1">RMAP</th><th align="left" rowspan="1" colspan="1">Slider</th><th align="left" rowspan="1" colspan="1">Eland</th><th align="left" rowspan="1" colspan="1">RMAP</th><th align="left" rowspan="1" colspan="1">Slider</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">U0</td><td rowspan="1" colspan="1">1 421 114</td><td rowspan="1" colspan="1">1 435 842</td><td rowspan="1" colspan="1">1 806 896</td><td rowspan="1" colspan="1">1 073 725</td><td rowspan="1" colspan="1">1 092 344</td><td rowspan="1" colspan="1">1 570 854</td></tr><tr><td rowspan="1" colspan="1">U1</td><td rowspan="1" colspan="1">431 065</td><td rowspan="1" colspan="1">425 641</td><td rowspan="1" colspan="1">156 084</td><td rowspan="1" colspan="1">527 388</td><td rowspan="1" colspan="1">525 338</td><td rowspan="1" colspan="1">138 566</td></tr><tr><td rowspan="1" colspan="1">U2</td><td rowspan="1" colspan="1">178 993</td><td rowspan="1" colspan="1">157 701</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1">267 044</td><td rowspan="1" colspan="1">259 458</td><td rowspan="1" colspan="1"/></tr><tr><td rowspan="1" colspan="1">No. of MB</td><td rowspan="1" colspan="1">54 052 593</td><td rowspan="1" colspan="1">53 776 925</td><td rowspan="1" colspan="1">52 844 376</td><td rowspan="1" colspan="1">58 719 548</td><td rowspan="1" colspan="1">59 549 564</td><td rowspan="1" colspan="1">54 562 874</td></tr><tr><td rowspan="1" colspan="1">No. of BMM</td><td rowspan="1" colspan="1">789 051</td><td rowspan="1" colspan="1">741 043</td><td rowspan="1" colspan="1">156 084</td><td rowspan="1" colspan="1">1 061 476</td><td rowspan="1" colspan="1">1 044 254</td><td rowspan="1" colspan="1">138 566</td></tr><tr><td rowspan="1" colspan="1">Percentage of BMM</td><td rowspan="1" colspan="1">1.44</td><td rowspan="1" colspan="1">1.36</td><td rowspan="1" colspan="1">0.29</td><td rowspan="1" colspan="1">1.78</td><td rowspan="1" colspan="1">1.72</td><td rowspan="1" colspan="1">0.25</td></tr></tbody></table><table-wrap-foot><fn><p>Using the first 27 and 32 for CT302 (a high-coverage control BAC), the numbers of reads that are aligned to its reference control BAC are compared using three aligners, Eland with the MPS input, RMAP with Base Quality input and Slider with <italic>prb</italic> input. The number of reads that are aligned with zero-off (U0), one-off (U1) and two-off (U2) show that Slider aligns a larger number of U0 reads and smaller number of U1 reads than Eland and RMAP. In the last three lines, we can see that the percentage of base mismatches (BMM) calculated by Slider is more than four times smaller than either of Eland or RMAP. We can see that the total number of reads aligned by Slider decreases more than other aligners as the read length increases. This is due to the large increase of LQ reads as the read length increases, and Slider chooses to align only the MPS (U0) of LQ reads, while Eland and RMAP treat LQ reads as regular reads and align them with U0, U1 and U2. This special treatment of LQ reads improves Slider SNPs prediction by reducing the percentage of mismatched bases. Where MB = Matched Bases.</p></fn></table-wrap-foot></table-wrap>
</p>
      <p>A reference base can be covered by an aligned read in one of three different categories:
<list id="l9" list-type="order"><list-item><p>Crisp base match: when the read base is crisp and is equal to the reference base.</p></list-item><list-item><p>Non-crisp base match: when an aligned read base is not crisp and the probability of the nucleotide that is equal to the reference nucleotide is higher than baseMin<italic>Prb</italic>. In this case, it is possible that another base with a non-negligible probability is the actual source base. This would be a putative SNP.</p></list-item><list-item><p>Mismatch bases (no-match): when a base in an aligned read does not match the reference base, i.e. the probability of the base in the <italic>prb</italic> file that matches the reference base is below the baseMin<italic>Prb</italic> threshold; this base is a candidate SNP. <xref ref-type="fig" rid="F2">Figure 2</xref> shows the probability of a no-match base to be a true SNP as a function of the read weight as found in two datasets.</p></list-item></list>
Mismatch bases are predicted to be SNPs based on two main threshold values:
<list id="l10" list-type="order"><list-item><p>Coverage: the number of mismatch bases that cover a specific location in the reference sequence. High coverage is needed to overcome the effect of sequencing infidelities.</p></list-item><list-item><p>Percentage: the percentage of mismatch bases at the specific location after ignoring non-crisp base matches.</p></list-item></list>
Other factors that affect the accuracy of SNP prediction include:
<list id="l11" list-type="order"><list-item><p>Sequence complexity: we define sequence complexity for a reference sequence with respect to a read size <italic>S</italic><sub>Zr</sub> at any base by the number of unique subsequences with <italic>S</italic><sub>Zr</sub> size in the reference sequence that this base is part of. Considering boththe forward and reverse complement, this value can be up to 2 * <italic>S</italic><sub>Zr</sub>. Bases in a region of higher sequence complexity will less likely be covered with misaligned reads which results in more accurate SNP predictions.</p></list-item><list-item><p>Read weight: reads with a higher weight are less likely to misalign, and therefore, mismatches in the alignment of higher weight reads are more likely to be true positive SNPs, <xref ref-type="fig" rid="F2">Figure 2</xref>.</p></list-item></list>
<fig id="F2" position="float"><label>Fig. 2.</label><caption><p>Probability that a given base mismatch is a true SNP as a function of the read sequence weight.</p></caption><graphic xlink:href="btn565f2"/></fig></p>
      <sec id="SEC3.2.1">
        <title>3.2.1 SNPs prediction steps</title>
        <p>Three counters for each base in the reference sequence are created: cmCount, mCount and nmCountwhich hold the number of crisp matches, non-crisp matches and non-matches, respectively. Based on these three counts, aligned reads' weight, and reads' base probability, three scores that reflect the likelihood of a SNP at each location in the reference are generated:
<list id="l12" list-type="bullet"><list-item><p>cSNP%: the percentage of non-match base coverage of the total coverage without counting the non-crisp coverage. cSNP% at a location <italic>L</italic> is: cSNP%[<italic>L</italic>]=nmCount[<italic>L</italic>/(nmCount[<italic>L</italic>] + cmCount[<italic>L</italic>]).</p></list-item><list-item><p>wSNP%: given that the probability of a mismatch base to be a SNP is positively correlated with its read weight (<xref ref-type="fig" rid="F2">Fig. 2</xref>), wSNP% is a modification of cSNP% that uses the total weight of each read containing that base instead of their counts. Then it is multiplied by the average probability of the predicted SNP nucleotide. wSNP% more accurately predicts the likelihood of SNPs than cSNP%.</p></list-item><list-item><p>mSNP%: this is a low accuracy score that can be used only when the mCount is high. mSNP% is the average probability of the predicted SNP nucleotide from non-crisp matches for a base at location <italic>L</italic>, for ncSNP% to have a value, a predicted SNP nucleotide is needed, so nmCount must be grater than zero: ncSNP%[<italic>L</italic>]=Avr(PsnpBase[<italic>L</italic>])/(Avr(PsnpBase[<italic>L</italic>])+ Avr(PrefBase[<italic>L</italic>]).</p></list-item></list>
SNPs are called when the wSNP% and the number of mismatch bases that cover a specific location in the reference sequence are higher than some user provided thresholds.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="results" id="SEC4">
    <title>4 RESULTS</title>
    <p>We tested Slider's alignments for both efficiency and accuracy and compared it with competing aligners. In addition to that, SNP prediction of Slider was tested for accuracy using Illumina sequence derived from high-coverage bacterial artificial chromosomes (BACs).</p>
    <p>Three different datasets were used to evaluate Slider's performance and compare with other aligners:
<list id="l13" list-type="order"><list-item><p>A high coverage control BAC (CT302).</p></list-item><list-item><p>A BAC from a human tumour (T02).</p></list-item><list-item><p>One dataset, HT01, which consists of about 82.6 million single-end reads from the human genome.</p></list-item></list>
Two aligners were chosen for comparing results:
<list id="l14" list-type="order"><list-item><p>Eland: as the aligner of choice provided by Illumina, we used Eland as an example of aligners that align the MPSs of reads provided in the seq files.</p></list-item><list-item><p>RMAP: we used RMAP to represent the effect of using quality scores to improve mapping accuracy. RMAP uses the <italic>prb</italic> files to reflect the confidence of each base in the MPS.</p></list-item></list>
</p>
    <sec id="SEC4.1">
      <title>4.1 Alignment efficiency and scalability</title>
      <p>We aligned a set of 12 flowcell lanes, 82.6 million reads in total, to the human reference genome using Eland, RMAP and Slider. Slider aligned the reads for all lanes in 28 h and 30 min with &lt;2 GB of memory (using the –Xmx2G option of the Java VM). This is about two-thirds of the time that Eland took for the same job. RMAP by far took a lot longer to align this dataset (<xref ref-type="table" rid="T2">Table 2</xref>).
<table-wrap id="T2" position="float"><label>Table 2.</label><caption><p>Alignment time comparison</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">One lane average alignment time</th><th align="left" rowspan="1" colspan="1">Total alignment time</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">Eland</td><td rowspan="1" colspan="1">03:38:28</td><td rowspan="1" colspan="1">043:41:41</td></tr><tr><td rowspan="1" colspan="1">RMAP</td><td rowspan="1" colspan="1">95:00:00+</td><td rowspan="1" colspan="1">999:59:59+</td></tr><tr><td rowspan="1" colspan="1">Slider</td><td rowspan="1" colspan="1">05:06:05</td><td rowspan="1" colspan="1">028:30:03</td></tr></tbody></table><table-wrap-foot><fn><p>For each aligner of Eland, RMAP and Slider, this table show the average lane alignment time in (h:m:s) and the total alignment time for the complete 12 lanes with 82.6 million reads in total.</p></fn></table-wrap-foot></table-wrap>
</p>
      <p>We should mention here that due to their memory requirements, there is a maximum number of reads that can be aligned simultaneously with Eland and RMAP. Therefore, results of aligning for more than one lane are accomplished by aligning to each lane separately and joining their output. Slider does not have such a limitation because it keeps both the input set of reads and the reference sequence stored in files and reads these files sequentially. This reduces Slider memory requirements to a small constant regardless of the data size. Given today's large datasets—such asthe Yoruba dataset that has been sequenced by Illumina and consists of 606 lanes (303 PET lanes), with a total of more than 4 billion reads (<ext-link ext-link-type="uri" xlink:href="ftp.ncbi.nih.gov/pub/TraceDB/ShortRead/SRA000271">ftp.ncbi.nih.gov/pub/TraceDB/ShortRead/SRA000271</ext-link>) and those datasets in the 1000 Genomes project (<ext-link ext-link-type="uri" xlink:href="www.1000genomes.org">www.1000genomes.org</ext-link>)—Slider's scalability makes it an attractive choice.</p>
    </sec>
    <sec id="SEC4.2">
      <title>4.2 Alignment accuracy</title>
      <p>Starting with the most probable sequence of an edit distance <italic>D</italic><sub>mps</sub> from its actual source <italic>R</italic><sub>src</sub>, most aligners use approximation by introducing all possible <italic>x</italic> mutations trying to align this sequence to the reference. If the sequence did align with <italic>x</italic>&lt;<italic>D</italic><sub>mps</sub>, then it will be aligned inaccurately, and <italic>x</italic> false mismatches are generated. Also, if the location where it was misaligned did have a SNP, this SNP will be covered with a match.</p>
      <p>For measuring the alignment accuracy, we aligned a set of reads against both its reference BAC, RefBAC and an extra sequence from a different source, RefEX. Since the RefBAC is the accurate reference for the reads, most reads will be mapped to it; however, if RefEX is large enough, it will have two effects on the alignment:
<list id="l15" list-type="order"><list-item><p>Some reads which did not align to RefBAC will be misaligned to RefEX. Such misalignments result from a set of factors that we have no control over, such as: sequencing errors, SNPs, indels and/or RefEX size, combined with controllable factors, such as read length, <italic>SZ</italic><sub>r</sub> (longer readsare less likely to be misaligned) and alignment approximation.</p></list-item><list-item><p>Some of the reads that align to RefBAC will also align to RefEX which is due to either sequence similarities in both reference sequences that we have no control over, or because of a misalignment as a result of approximation.</p></list-item></list>
This will make these reads less useful by moving them from the category of unique matches to the category of multiple matches.</p>
      <p>As measuring the effect of some of these factors is a complicated issue and beyond the scope of this work, alignments of variable read and reference lengths were used in comparing reads misalignments of Eland, RMAP and Slider.</p>
      <p>Using the same set of reads, and the same set of references (RefBAC and RefEX), we can compare the accuracy of different aligners by calculating:
<list id="l16" list-type="order"><list-item><p>The percentage of reads that are incorrectly uniquely aligned to RefEX, <italic>P</italic><sub>mis</sub>. Where <italic>P</italic><sub>mis</sub> = (number of reads aligned uniquely to RefEX/total number of uniquely aligned reads). The lower <italic>P</italic><sub>mis</sub> is, the higher the aligner accuracy is.</p></list-item><list-item><p>The ratio of reads, <italic>P</italic><sub>uq</sub> that are aligned uniquely to RefBAC when aligning to RefBAC + RefEX to those that are aligned to RefBAC without RefEX. The higher <italic>P</italic><sub>uq</sub> is, the higher the aligner accuracy is.</p></list-item></list>
In a hypothetical ideal case where the target sequence matches exactly the reference sequence, and read sequencing is error free, we will not have any misaligned reads; <italic>P</italic><sub>mis</sub>=0, and <italic>P</italic><sub>uq</sub> is maximized (multiple matches are only resulted from reference similarities). In reality, the target sequence does not always match the reference sequence and there are sequencing errors. In order to perform the alignment, approximation is required. However, the less approximation we use, the less number of reads will be misaligned but the total number of accurately aligned reads will be reduced also. Different aligners use different approaches for approximation which result in a different number of reads that align and different values for <italic>P</italic><sub>mis</sub>, and <italic>P</italic><sub>uq</sub>.</p>
      <p>With the use of <italic>prb</italic> files as input and considering all base probability information, Slider is able to significantly reduce approximation compared with other aligners. The result is that less reads are misaligned.</p>
      <p>To evaluate Slider's alignment accuracy and compare it with other aligners, alignments were done to their BAC reference sequence and three extra reference sequences RefEX:
<list id="l17" list-type="bullet"><list-item><p><italic>Caenorhabditis elegans</italic> chromosome I (15M base).</p></list-item><list-item><p>Human chromosome I (247M base).</p></list-item><list-item><p>Human genome excluding chromosome 6 because the CT302 BAC is extracted from chromosome 6.</p></list-item></list>
These RefEX sequences are used to measure the level of false alignments for Eland, RMAP and Slider as a function to the RefEX length. Full results are available in the <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btn565/DC1">Supplementary Material</ext-link> on the Slider website. In <xref ref-type="table" rid="T3">Table 3</xref>, values for <italic>P</italic><sub>mis</sub> and <italic>P</italic><sub>uq</sub> for the CT302 BAC with <italic>SZ</italic><sub>r</sub> in {27, 32, 36} aligned against its RefBAC and human genome excluding chromosome 6 (RefEX) shows that the percentage of reads misaligned <italic>P</italic><sub><italic>mis</italic></sub> for each of Eland and RMAP is more than double that of Slider.
<table-wrap id="T3" position="float"><label>Table 3.</label><caption><p>Alignment results</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><td rowspan="1" colspan="1"/><td colspan="2" align="center" rowspan="1">27<hr/></td><td colspan="2" align="center" rowspan="1">32<hr/></td><td colspan="2" align="center" rowspan="1">36<hr/></td></tr><tr><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"><italic>P</italic><sub>mis</sub>(%)</td><td rowspan="1" colspan="1"><italic>P</italic><sub>uq</sub>(%)</td><td rowspan="1" colspan="1"><italic>P</italic><sub>mis</sub>(%)</td><td rowspan="1" colspan="1"><italic>P</italic><sub>uq</sub>(%)</td><td rowspan="1" colspan="1"><italic>P</italic><sub>mis</sub>(%)</td><td rowspan="1" colspan="1"><italic>P</italic><sub>uq</sub>(%)</td></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">Eland</td><td rowspan="1" colspan="1">2.791</td><td rowspan="1" colspan="1">76.65</td><td rowspan="1" colspan="1">3.002</td><td rowspan="1" colspan="1">79.47</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/></tr><tr><td rowspan="1" colspan="1">RMAP</td><td rowspan="1" colspan="1">2.828</td><td rowspan="1" colspan="1">76.69</td><td rowspan="1" colspan="1">3.002</td><td rowspan="1" colspan="1">79.45</td><td rowspan="1" colspan="1">3.520</td><td rowspan="1" colspan="1">81.68</td></tr><tr><td rowspan="1" colspan="1">Slider</td><td rowspan="1" colspan="1">1.169</td><td rowspan="1" colspan="1">77.08</td><td rowspan="1" colspan="1">1.172</td><td rowspan="1" colspan="1">80.19</td><td rowspan="1" colspan="1">1.302</td><td rowspan="1" colspan="1">83.16</td></tr></tbody></table><table-wrap-foot><fn><p>Results of aligning sequences from CT302 to its reference RefBAC and the human genome excluding chromosome 6.</p></fn></table-wrap-foot></table-wrap>
</p>
    </sec>
    <sec id="SEC4.3">
      <title>4.3 SNPs prediction accuracy</title>
      <p>As a result of its low mismatch bases (<xref ref-type="sec" rid="SEC3.2">Section 3.2</xref> and <xref ref-type="table" rid="T1">Table 1</xref>), Slider is able to give reasonably accurate SNP prediction at low coverage. We measured Slider's SNP prediction accuracy by first taking advantage of the high coverage of CT302 and T02. We generated a list of high-confidence SNPs for each dataset which are easily identified given their high coverage. These lists are then used to evaluate the accuracy of Slider's SNPs prediction by computing the probability of a single base mismatch to reflect a true SNP as a function of its read weight, <xref ref-type="fig" rid="F2">Figure 2</xref>. We can see that mismatches that are in reads with higher weight are more likely to represent actual SNPs. Many factors can affect the probability of a base mismatch to reflect a true SNP including the reference sequence complexity, the length of the read and reference, and the accuracy of the <italic>prb</italic> values. A more complete statistical analysis of SNP prediction accuracy that model these factors is beyond the scope of this article, however, the higher the coverage, the more confident the SNPs call is.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="SEC5">
    <title>5 DISCUSSION</title>
    <p>There are three major advantages of using Slider for the alignment of sequences generated by the Illumina Genome Analyzer and the detection of SNPs based on these alignments:
<list id="l18" list-type="order"><list-item><p>Higher accuracy in SNPs prediction: by generating a smaller number of base mismatches, Slider's SNPs prediction is less likely to be confounded by sequence error within the reads.</p></list-item><list-item><p>Smaller number of misalignments: aligners match sequences to a reference using approximation which is done by allowing up to a small number of allowed base mismatches (abm). This abm is needed to align reads with SNPs and sequencing errors. Larger abm values will increase the number of aligned sequences but it will also increase the number of misaligned reads. Slider utilizes the probability values to perform more informed/focused alignments which reduce the need for approximation. For this reason, Slider uses only up to one mismatch base in a read as described in further detail in <xref ref-type="sec" rid="SEC3.2">Section 3.2</xref>.</p></list-item><list-item><p>High alignment efficiency and scalability with a low memory requirement: given that neither of the two input datasets (the reference set and the reads set) needs to be in main memory, Slider aligns large sets of reads to large genomes in a short time on a single CPU.</p></list-item></list>
</p>
  </sec>
</body>
<back>
  <ack>
    <title>ACKNOWLEDGEMENTS</title>
    <p>S.J.M.J. is a senior scholar of the Michael Smith Foundation for Health Research. We thank Anthony Fejes for introducing the initial alignment problem.</p>
    <p><italic>Funding</italic>: IBM Canada Ltd. (in part).</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aho</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Corasick</surname>
            <given-names>MJ</given-names>
          </name>
        </person-group>
        <article-title>Efficient string matching: an aid to bibiographic search</article-title>
        <source>Commun. ACM</source>
        <year>1975</year>
        <volume>18</volume>
        <fpage>333</fpage>
        <lpage>340</lpage>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J. Mol. Biol.</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brockman</surname>
            <given-names>W</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Quality scores and SNP detection in sequencing-by-synthesis systems</article-title>
        <source>Genome Res.</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>763</fpage>
        <lpage>770</lpage>
        <pub-id pub-id-type="pmid">18212088</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Fast algorithms for large-scale genome alignment and comparison</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2002</year>
        <volume>30</volume>
        <fpage>2478</fpage>
        <lpage>2483</lpage>
        <pub-id pub-id-type="pmid">12034836</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Eppstein</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Sparse dynamic programming</article-title>
        <source>Proceedings 1st Symposium Discrete Algorithms ACM and SIAM</source>
        <year>1990</year>
        <publisher-loc>San Francisco</publisher-loc>
        <fpage>513</fpage>
        <lpage>522</lpage>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Garcia-Molina</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>In Index structures, ch. 14</article-title>
        <source>Database Systems: The Complete Book.</source>
        <year>2008</year>
        <edition>2nd edn</edition>
        <publisher-loc>Upper Saddle River, NJ</publisher-loc>
        <publisher-name>Prentice Hall</publisher-name>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holt</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>S.JM</given-names>
          </name>
        </person-group>
        <article-title>The new paradigm of flow cell sequencing</article-title>
        <source>Genome Res.</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>839</fpage>
        <lpage>846</lpage>
        <pub-id pub-id-type="pmid">18519653</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Knuth</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>In External sorting, sec 5.4</article-title>
        <source>The Art of Computer Programming</source>
        <year>1998</year>
        <volume>3</volume>
        <edition>2nd</edition>
        <publisher-loc>Reading, Mass</publisher-loc>
        <publisher-name>Addison-Wesley</publisher-name>
        <comment>Sorting and Searching</comment>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Korf</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>MPBLAST: improved BLAST performance with multiplexed queries</article-title>
        <source>Bioinformatics</source>
        <year>2000</year>
        <volume>16</volume>
        <fpage>1052</fpage>
        <lpage>1053</lpage>
        <pub-id pub-id-type="pmid">11159321</pub-id>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kurtz</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biol.</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R12</fpage>
        <pub-id pub-id-type="pmid">14759262</pub-id>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>High-throughput sequence alignment using Graphics Processing Units</article-title>
        <source>BMC Bioinformatics</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>474</fpage>
        <pub-id pub-id-type="pmid">18070356</pub-id>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Slater</surname>
            <given-names>G.SC</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Automated generation of heuristics for biological sequence comparison</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>31</fpage>
        <pub-id pub-id-type="pmid">15713233</pub-id>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>AD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Using quality scores and longer reads improves accuracy of Solexa read mapping</article-title>
        <source>BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <fpage>128</fpage>
        <pub-id pub-id-type="pmid">18307793</pub-id>
      </citation>
    </ref>
  </ref-list>
</back>
