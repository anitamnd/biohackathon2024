<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4864936</article-id>
    <article-id pub-id-type="publisher-id">951</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-016-0951-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>OPERA-LG: efficient and exact scaffolding of large, repeat-rich eukaryotic genomes with performance guarantees</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Gao</surname>
          <given-names>Song</given-names>
        </name>
        <address>
          <email>song.gao@sahmri.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
        <xref ref-type="aff" rid="Aff2"/>
        <xref ref-type="aff" rid="Aff3"/>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Bertrand</surname>
          <given-names>Denis</given-names>
        </name>
        <address>
          <email>bertrandd@gis.a-star.edu.sg</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chia</surname>
          <given-names>Burton K. H.</given-names>
        </name>
        <address>
          <email>chiakhb@gis.a-star.edu.sg</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Nagarajan</surname>
          <given-names>Niranjan</given-names>
        </name>
        <address>
          <email>nagarajann@gis.a-star.edu.sg</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><label/>Computational and Systems Biology, Genome Institute of Singapore, Singapore, 138672 Singapore </aff>
      <aff id="Aff2"><label/>NUS Graduate School for Integrative Sciences and Engineering, Singapore, 117456 Singapore </aff>
      <aff id="Aff3"><label/>South Australian Health &amp; Medical Research Institute, North Terrace, Adelaide, 5000 SA Australia </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>5</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>5</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2016</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>102</elocation-id>
    <history>
      <date date-type="received">
        <day>27</day>
        <month>10</month>
        <year>2015</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>4</month>
        <year>2016</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Gao et al. 2016</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p>The assembly of large, repeat-rich eukaryotic genomes represents a significant challenge in genomics. While long-read technologies have made the high-quality assembly of small, microbial genomes increasingly feasible, data generation can be expensive for larger genomes. OPERA-LG is a scalable, exact algorithm for the scaffold assembly of large, repeat-rich genomes, out-performing state-of-the-art programs for scaffold correctness and contiguity. It provides a rigorous framework for scaffolding of repetitive sequences and a systematic approach for combining data from different second-generation and third-generation sequencing technologies. OPERA-LG provides an avenue for systematic augmentation and improvement of thousands of existing draft eukaryotic genome assemblies.</p>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s13059-016-0951-y) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100005049</institution-id>
            <institution>Science and Engineering Research Council, Agency for Science, Technology and Research (SG)</institution>
          </institution-wrap>
        </funding-source>
        <award-id>102 101 0025</award-id>
        <principal-award-recipient>
          <name>
            <surname>Nagarajan</surname>
            <given-names>Niranjan</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100005606</institution-id>
            <institution>Genome Institute of Singapore (SG)</institution>
          </institution-wrap>
        </funding-source>
        <award-id>ARB</award-id>
        <principal-award-recipient>
          <name>
            <surname>Nagarajan</surname>
            <given-names>Niranjan</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2016</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Background</title>
    <p>The field of sequence assembly has witnessed a significant amount of mathematical and algorithmic study of the problem [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR4">4</xref>]. Yet many assembly programs in use do not have a clear objective function that they optimize, relying on heuristics and/or manually tuned parameters to piece genomes together to variable degrees of success [<xref ref-type="bibr" rid="CR5">5</xref>–<xref ref-type="bibr" rid="CR7">7</xref>]. As there is a wide array of heuristics and parameter choices to try, the right combination that works well across a range of datasets may not always be apparent and new assembly tools run the risk of being tuned for the datasets on which they are benchmarked. Recent assembly competitions such as GAGE [<xref ref-type="bibr" rid="CR8">8</xref>], Assemblathon [<xref ref-type="bibr" rid="CR9">9</xref>], Assemblathon2 [<xref ref-type="bibr" rid="CR10">10</xref>], and a recent scaffolder benchmark [<xref ref-type="bibr" rid="CR11">11</xref>] have thus played an important role in galvanizing the community and in highlighting the drawbacks of existing tools.</p>
    <p>The prevalence of heuristic choices in assembly owes its origins partly to several well-known early results regarding its computational complexity [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>] (and further confirmed by recent studies [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>]) which suggest that most formal definitions of various assembly problems (such as contiging and scaffolding) are computationally intractable (NP-hard). Notably, though, most complexity results have been limited to worst-case analysis and relatively little has been said about average-case or parametric complexity of various assembly problems [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR12">12</xref>]. For example, while the problem of constructing contigs from read data (typically formulated as a path-finding problem) has been shown to be NP-hard in terms of worst-case complexity [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>], in practice, the problem is usually under-constrained in the absence of ultra-long reads and trivially computable, fragmented contig assemblies are the best we can do [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR12">12</xref>]. The use of paired-end and mate-pair reads to scaffold contigs thus plays a vital role in assembly projects to significantly boost assembly quality [<xref ref-type="bibr" rid="CR13">13</xref>–<xref ref-type="bibr" rid="CR16">16</xref>]. While worst-case analysis for the scaffolding problem also suggests that it could be computationally expensive to solve exactly, surprisingly, it is possible to design exact algorithms that require runtime polynomial in the size of the scaffold graph [<xref ref-type="bibr" rid="CR13">13</xref>]. These algorithms guarantee a scaffold assembly that minimizes discordance with the input data and thus provide an internal “quality control” for their results. As shown in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>] using experiments on small genomes, an exact algorithm for scaffolding simultaneously leads to more accurate as well as contiguous assemblies.</p>
    <p>As the sequencing process is stochastic, in principle, probabilistic models and objective functions provide a natural approach for assembly and scaffolding [<xref ref-type="bibr" rid="CR16">16</xref>–<xref ref-type="bibr" rid="CR20">20</xref>]. Methods such as Genovo [<xref ref-type="bibr" rid="CR19">19</xref>] and SOPRA [<xref ref-type="bibr" rid="CR16">16</xref>] are based on such models and provide an alternative approach that is particularly powerful when sequencing coverage is low and read information uncertain. When sequencing coverage is high (&gt;20×, as is often the case for short-read genome assembly projects) noise from random chimeric reads is easier to filter. Correspondingly, scaffold assembly is frequently formulated as a combinatorial graph problem and this is the approach followed in this study.</p>
    <p>Based on the scaffold assembly formulation from Huson et al. [<xref ref-type="bibr" rid="CR21">21</xref>], this study proposes extensions to an exact algorithm [<xref ref-type="bibr" rid="CR13">13</xref>] that make it feasible for scaffolding large, repeat-rich genomes in a time and memory-efficient manner [<xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>]. The new approach, termed OPERA-LG, was extensively evaluated against state-of-the-art scaffolders (SSPACE [<xref ref-type="bibr" rid="CR14">14</xref>], SOPRA [<xref ref-type="bibr" rid="CR16">16</xref>] and BESST [<xref ref-type="bibr" rid="CR24">24</xref>]) and assembly pipelines (SOAPdenovo [<xref ref-type="bibr" rid="CR25">25</xref>] and ALLPATHS-LG [<xref ref-type="bibr" rid="CR26">26</xref>]) on simulated and real datasets. In the presence of multiple and large fragment (&gt;4 kbp) mate-pair libraries, OPERA-LG was seen to provide a several-fold increase in contiguity metrics and/or reduction in scaffold errors. Improvements with a single short-fragment mate-pair library were limited but OPERA-LG provided consistently good assemblies in these cases as well (among the top three scaffolders).</p>
    <p>OPERA-LG incorporates several features useful for producing high quality draft assemblies for large, repeat-rich genomes. These include the ability to simultaneously use data from multiple libraries [<xref ref-type="bibr" rid="CR27">27</xref>] as needed in large assembly projects, an improved edge-length estimation algorithm, and an exact extension for scaffolding repetitive sequences that typically confound assembly tools. OPERA-LG’s ability to be sequencing platform-independent was evaluated using PacBio and ONT data and compared with scaffolders such as SSPACE-LongRead [<xref ref-type="bibr" rid="CR28">28</xref>] and LINKS [<xref ref-type="bibr" rid="CR29">29</xref>].</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>Overview</title>
      <p>The algorithmic core of OPERA-LG is adapted from the approach described in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>] (summarized in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1) and is based on (i) a memoized search to find a scaffold that minimizes the number of discordant read-derived links connecting contigs (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1a), (ii) a graph contraction technique that allows for localizing the search for an optimal scaffold without losing the guarantee of a globally optimal scaffold (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1b), and (iii) a quadratic programming formulation to compute gap sizes that best match mate-pair-derived distance constraints [<xref ref-type="bibr" rid="CR27">27</xref>] (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1c). To enable it to produce long and accurate scaffolds for large, repeat-rich genomes, OPERA-LG incorporates several novel features and improvements, including (a) optimized data structures to improve its scalability, (b) refined edge-length estimation and the ability to simultaneously use multiple libraries to improve scaffolding accuracy, and (c) extensions that allow for the scaffolding of repeat sequences. Algorithmic details for each of these features and improvements in OPERA-LG can be found in the “<xref rid="Sec14" ref-type="sec">Methods</xref>” section.</p>
    </sec>
    <sec id="Sec4">
      <title>Scalability and multi-library scaffolding</title>
      <sec id="Sec5">
        <title>Scalability</title>
        <p>Runtime and memory optimizations in OPERA-LG (see “<xref rid="Sec14" ref-type="sec">Methods</xref>”) are key to its scalability as shown in Table <xref rid="Tab1" ref-type="table">1</xref>. In particular, while the method in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>] was unable to scaffold the full <italic>D. melanogaster</italic> dataset due to excessive memory usage, OPERA-LG takes a few seconds and a few hundred megabytes of memory (largely for storing read mapping information). For genomes where the previous method was feasible, OPERA-LG is typically &gt;10 times faster and requires significantly less memory (roughly one-half to 1/20th of the requirements for Gao et al.). Across datasets, OPERA-LG’s runtime was found to be comparable to that of SOAPdenovo2 and the scaffolders BESST and SSPACE, while requiring less runtime than SOPRA (runs on <italic>C. elegans</italic> and the three largest genomes were stopped after 10 days) and ALLPATHS-LG (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). In addition, for small genomes OPERA-LG’s runtime is dominated by the preprocessing step, while runtime for the core of the algorithm (“OPERA-LG (scaffolding only)” in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) may not necessarily increase in proportion to the genome size (i.e., may be determined by intrinsic features of the genome, such as repeat lengths and distribution). Overall, OPERA-LG’s runtime was less than 1 day (on a single processor) using &lt;60 GB of memory for all the datasets tested here (including the human genome), establishing its feasibility for scaffolding large genomes and retaining the potential for further improvement with parallelization.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Scalability comparison between the exact method in Gao et al. and OPERA-LG</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th/><th><italic>E. coli</italic></th><th><italic>S. cerevisiae</italic></th><th><italic>D. melanogaster</italic> chromosome X</th><th><italic>D. melanogaster</italic></th></tr></thead><tbody><tr><td rowspan="2">Gao et al.</td><td>Runtime (s)</td><td>1.1</td><td>1.3</td><td>2.6</td><td>- </td></tr><tr><td>Memory (Mb)</td><td>95</td><td>62</td><td>265</td><td>-</td></tr><tr><td rowspan="2">OPERA-LG</td><td>Runtime (s)</td><td>&lt;0.1</td><td>0.1</td><td>0.1</td><td>2.4</td></tr><tr><td>Memory (Mb)</td><td>5</td><td>34</td><td>26</td><td>635</td></tr></tbody></table><table-wrap-foot><p>The runtime reported is the scaffolding time for each method (method in Gao et al. was unable to scaffold the <italic>D. melanogaster</italic> genome)</p></table-wrap-foot></table-wrap><fig id="Fig1"><label>Fig. 1</label><caption><p>Runtime as a function of genome size. Note that both the <italic>x-axis</italic> and <italic>y-axis</italic> are log-scaled and the results for various genomes are indicated at the corresponding genome size. For all standalone scaffolders, runtimes include the mapping stage. For SOAPdenovo2 and ALLPATHS-LG we report the runtime of the full assembly pipeline (including contig assembly). <italic>OPERA-LG (scaffolding only)</italic> shows the runtime of the scaffolding algorithm in OPERA-LG, excluding preprocessing, to highlight that it can take a fraction of the overall runtime and is influenced more by the repeat complexity of the genome than the size of the genome. Due to its library-size restrictions, ALLPATHS-LG could be run on only a few of the datasets shown here. SOPRA runs did not complete after 10 days for <italic>C. elegans</italic> and the three largest genomes</p></caption><graphic xlink:href="13059_2016_951_Fig1_HTML" id="MO1"/></fig></p>
      </sec>
      <sec id="Sec6">
        <title>Edge length estimation and multi-library analysis</title>
        <p>OPERA-LG was redesigned to simultaneously use data from multiple “jumping” libraries for scaffolding, a process that can be critical for improving assembly contiguity and correctness in large genome assembly projects. These improvements were directly evaluated to establish their utility in OPERA-LG. Firstly, scaffold edge length estimates from OPERA-LG were compared with the known true edge lengths for the synthetic datasets and were found to be in excellent agreement overall (Fig. <xref rid="Fig2" ref-type="fig">2b</xref>, <xref rid="Fig2" ref-type="fig">d</xref>). In addition, OPERA-LG’s estimates were found to be more accurate than a commonly used naïve estimation procedure (Fig. <xref rid="Fig2" ref-type="fig">2a</xref>, <xref rid="Fig2" ref-type="fig">c</xref>), which was found to consistently under-estimate edge lengths for longer edges, though the bias observed here was not as severe as observed previously [<xref ref-type="bibr" rid="CR30">30</xref>]. Secondly, OPERA-LG’s ability to handle multiple libraries simultaneously was found to provide a clear benefit over the commonly employed hierarchical approach (Fig. <xref rid="Fig2" ref-type="fig">2e</xref>, <xref rid="Fig2" ref-type="fig">f</xref>). The <italic>simultaneous</italic> approach not only led to fewer assembly errors (Fig. <xref rid="Fig2" ref-type="fig">2f</xref>) but also provided improved assembly contiguity (measured by corrected N50; see “<xref rid="Sec14" ref-type="sec">Methods</xref>”) as a by-product (Fig. <xref rid="Fig2" ref-type="fig">2e</xref>). Note that the results for <italic>C. elegans</italic> may be more indicative of the performance boost that can be expected as the <italic>E. coli</italic> and <italic>D. melanogaster</italic> datasets had high-quality assemblies to begin with.<fig id="Fig2"><label>Fig. 2</label><caption><p>Improvements in multi-library scaffolding. <bold>a</bold>–<bold>d</bold> The improved correlation between empirical estimates and true edge lengths when using the procedure in OPERA-LG in comparison with the “naïve estimation” that is commonly used (results reported are for the 10-kbp libraries). <bold>e</bold>, <bold>f</bold>. The improvements in corrected assembly N50 and reduction in corresponding assembly errors when using the multi-library scaffolding implemented in OPERA-LG in comparison with a commonly used hierarchical scaffolding approach that considers libraries independently in order of their insert size </p></caption><graphic xlink:href="13059_2016_951_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec7">
      <title>Improvements in assembly contiguity and correctness</title>
      <sec id="Sec8">
        <title>Benchmarking with synthetic datasets</title>
        <p>To evaluate the performance of OPERA-LG, it was first benchmarked on several synthetic datasets as these provide the critical flexibility to vary parameters and assess their effect on the method (Table <xref rid="Tab2" ref-type="table">2</xref>). The synthetic datasets contain multiple mate-pair libraries as well as large fragment libraries, representing a typical scenario for the assembly of large genomes where such information is critical (Table <xref rid="Tab2" ref-type="table">2</xref>). OPERA-LG was assessed at two levels: (a) its <italic>scaffold quality</italic> by comparing against a recently published method (BESST) and the top three best performing scaffolders from a recent benchmarking paper [<xref ref-type="bibr" rid="CR11">11</xref>], i.e., SOAPdenovo2’s scaffolding module (S2), SSPACE (SS), and SOPRA, evaluated with a common set of input contigs from SOAPdenovo; and (b) <italic>overall assembly quality</italic> (contiging and scaffolding), using SOAPdenovo as a contig assembler and OPERA-LG as a scaffolder (OP), when compared with ALLPATHS-LG (AP) and SOAPdenovo2 (S2) as representatives of state-of-the-art assembly pipelines (i.e., using their contiging and scaffolding modules; see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1 for contig and scaffold statistics).<table-wrap id="Tab2"><label>Table 2</label><caption><p>Statistics for synthetic datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th><italic>D. melanogaster</italic></th><th><italic>C. elegans</italic></th><th><italic>H. sapiens</italic></th></tr></thead><tbody><tr><td>Assembly ID</td><td align="center">GCF_000001215.2</td><td>GCF_000002985.5</td><td>hg19</td></tr><tr><td>Genome size (Gbp)</td><td align="center">0.1</td><td>0.1</td><td>3.2</td></tr><tr><td>Chromosomes</td><td align="center">7</td><td>6</td><td>24</td></tr><tr><td>Paired-end libraries<sup>a</sup>
</td><td colspan="3">80 bp, 140 ± 10 bp, 40×</td></tr><tr><td>Additional paired-end libraries<sup>a</sup>
</td><td align="center">NA</td><td>NA</td><td>80 bp, 700 ± 70 bp, 10×</td></tr><tr><td>Mate-pair libraries<sup>a</sup>
</td><td align="center" colspan="3">50 bp, 3 ± 0.3 kbp, 2×; 50 bp, 10 ± 1 kbp, 2×; 50 bp, 20 ± 2 kbp, 2×</td></tr><tr><td>Additional mate-pair libraries<sup>a</sup>
</td><td align="center">50 bp, 10 ± 1 kbp, 10×<break/>50 bp, 10 ± 1.5 kbp, 2×<break/>50 bp, 10 ± 2 kbp, 2×</td><td>50 bp, 10 ± 1 kbp, 10×</td><td>NA</td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>Library details are specified in the format: read length, insert size, base pair coverage (NA, not applicable) </p></table-wrap-foot></table-wrap></p>
        <p>At the scaffold level, while the corrected N50 values for SSPACE, SOAPdenovo2, SOPRA, and BESST were typically comparable (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2), OPERA-LG produced assemblies that were significantly more contiguous, regardless of the genome being assembled (5–10× improvement in corrected N50; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2; Fig. <xref rid="Fig3" ref-type="fig">3a</xref>). In addition, scaffolds produced by OPERA-LG contained fewer errors in general (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2; Fig. <xref rid="Fig3" ref-type="fig">3b</xref>), though on the human genome BESST was observed to have fewer indel and relocation errors. Manual inspection of scaffolding errors from OPERA-LG indicate that they were often due to local ordering errors in regions of the scaffold graph that were not sufficiently constrained by scaffold edges (relocations) and gap size estimation errors due to lower read coverage (scaffold indel errors; see “<xref rid="Sec14" ref-type="sec">Methods</xref>”). In particular, OPERA-LG had few translocation errors, where distant regions of the genome were incorrectly brought together. Results from others scaffolders show that they lead to a large number of translocation as well as inversion (where the orientation of contigs is incorrectly determined) errors compared with OPERA-LG (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2; Fig. <xref rid="Fig3" ref-type="fig">3b</xref>). As such errors can significantly impact downstream analysis, this represents an advantage for scaffolds produced by OPERA-LG. It also suggests that the global optimization employed in OPERA-LG may be more effective in eliminating such errors. Overall, OPERA-LG had ≤1 inversion or translocation error for the <italic>D. melanogaster</italic> and <italic>C. elegans</italic> assemblies and less than a 100 such errors for the <italic>H. sapiens</italic> genome.<fig id="Fig3"><label>Fig. 3</label><caption><p>Boosting assembly contiguity and correctness with OPERA-LG. <bold>a</bold>, <bold>b</bold> Scaffold contiguity and correctness for various scaffolders on different genomes starting from common sets of contigs (generated by SOAPdenovo). The final assemblies were only corrected for scaffold errors. Results for BESST and SOPRA were comparable to those for SSPACE and are reported in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2. <bold>c</bold>, <bold>d</bold> Corresponding overall assembly metrics for various assembly pipelines (that were provided all read libraries as input). The final assemblies were corrected for both contig and scaffold errors to allow for a fair comparison. <italic>Arrows</italic> highlight fold improvement in corrected N50 using OPERA-LG. ALLPATHS-LG analysis on the <italic>H. sapiens</italic> dataset had an abnormal exit after &gt;10 days of runtime but appears to have produced a valid assembly. <bold>e</bold>, <bold>f</bold> Overall assembly contiguity as a function of mate-pair libraries and sequencing depth, provided as input. Results shown are for the <italic>C. elegans</italic> dataset and are qualitatively similar for other datasets as well (data not shown) </p></caption><graphic xlink:href="13059_2016_951_Fig3_HTML" id="MO3"/></fig></p>
        <p>For the assembly level comparisons, while ALLPATHS-LG and SOAPdenovo2 had comparable or larger original N50s, corrected assembly N50s were significantly lower compared with OPERA-LG scaffolds based on SOAPdenovo contigs (Fig. <xref rid="Fig3" ref-type="fig">3c</xref>). This was despite the fact that SOAPdenovo contigs were typically more fragmented and thus provided a challenging starting point for the scaffolder. A likely explanation for the improvements seen is the generation of fewer assembly errors compared with ALLPATHS-LG and SOAPdenovo2 (Fig. <xref rid="Fig3" ref-type="fig">3d</xref>; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3). Similar results were seen in experiments with longer reads (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S4), indicating that the results are invariant to read length.</p>
        <p>OPERA-LG’s performance as a function of the information provided to it was assessed by further studying results for various combinations of libraries as input. Overall, as expected, OPERA-LG was seen to introduce fewer errors when more mate-pair libraries were provided (though this was not necessarily the trend for other methods; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2a). For example, incorporation of a 3-kbp mate-pair library, in addition to a 10-kbp library, was seen to consistently help eliminate local scaffolding errors in under-constrained regions of the scaffold graph (see “<xref rid="Sec14" ref-type="sec">Methods</xref>”; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2a). Correspondingly, both original and corrected N50s improved as OPERA-LG was provided with more libraries (Fig. <xref rid="Fig3" ref-type="fig">3e</xref>). A similar trend was seen with increasing sequencing depth, with OPERA-LG reporting fewer assembly errors (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2b) and providing consistent improvement in corrected N50 (Fig. <xref rid="Fig3" ref-type="fig">3f</xref>) with higher read coverage.</p>
        <p>Finally, the robustness of OPERA-LG to the quality of the sequencing library (measured by standard deviation in library size, with lower values implying higher quality) was assessed. Within a reasonable range of quality, OPERA-LG (and most assemblers) produce very similar assemblies in terms of assembly contiguity (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3a). However, degrading library quality led to an increase in the number of assembly errors (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3b). Despite this, OPERA-LG was observed to be more robust to library quality (with fewer errors and better N50 in the worst case than the best-case scenario for other methods; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3b), confirming its utility for analyzing low quality input data.</p>
      </sec>
      <sec id="Sec9">
        <title>Comparisons on real datasets</title>
        <p>Evaluation of scaffolding performance on real datasets can be influenced by the lack of gold-standard references or limited availability of data. Based on evaluation on six sequenced datasets, OPERA-LG was observed to perform consistently well and provide significant scaffold improvements when multiple and large-fragment libraries were provided as input. For example, for the extensively sequenced parrot genome datasets (<italic>M. undulatus</italic>, estimated genome size = 1.2 Gbp, with 2-, 5-, 10-, 20-, and 40-kbp mate-pair libraries), which were assembled as part of the Assemblathon2 competition [<xref ref-type="bibr" rid="CR10">10</xref>], the corrected N50 obtained using OPERA-LG (with SOAPdenovo contigs) was 2.2× the best reported Assemblathon2 assembly (ALLPATHS-LG; Fig. <xref rid="Fig4" ref-type="fig">4a</xref>). This was despite the original N50 for OPERA-LG being slightly smaller than that for other Assemblathon2 programs, such as ALLPATHS-LG. Notably, OPERA-LG’s results were based on more conservative contigs from SOAPdenovo and using default parameters, while Assemblathon2 results were from the best submissions by their respective teams. In comparison with other standalone scaffolders (that shared the same contig set), OPERA-LG’s corrected N50 was 5.8× that of BESST and 1.5× that of SSPACE (Fig. <xref rid="Fig4" ref-type="fig">4a</xref>). SOPRA could not be evaluated as it did not complete its analysis even after 10 days of runtime.<fig id="Fig4"><label>Fig. 4</label><caption><p>Assembly improvements on sequenced genomes using OPERA-LG. <bold>a</bold> Results for the <italic>M. undulatus</italic> genome, comparing OPERA-LG against the best assemblers in the ASSEMBLATHON2 competition (in <italic>blue</italic>) and standalone scaffolders (in <italic>black</italic>; SOPRA did not complete after 10 days of runtime). Note that while OPERA-LG’s original N50 is similar to that of other methods, its corrected N50 is &gt;1.5× that of others. Scatter plot of incorrect joins and corrected N50 for <bold>b</bold>
<italic>S. aureus</italic>, <bold>c</bold>
<italic>P. falciparum</italic>, and <bold>d</bold>
<italic>H. sapiens</italic> chromosome 14. OPERA-LG is consistently among the top three methods in terms of corrected N50 in this evaluation. <bold>e</bold> Assembly augmentation using OPERA-LG for the <italic>C. sinenis</italic> and CHO-K1 genomes significantly boosts assembly contiguity</p></caption><graphic xlink:href="13059_2016_951_Fig4_HTML" id="MO4"/></fig></p>
        <p>Similar results were obtained for the assembly of a sweet orange genome (<italic>C. sinensis</italic>, genome size = 367 Mbp, with 2-, 10-, and 20-kbp mate-pair libraries) [<xref ref-type="bibr" rid="CR31">31</xref>], where OPERA-LG’s corrected N50 was 2.5× that of the best performing alternative (SOAPdenovo2, 178 vs 68 kbp) and with less than a third of its scaffolding errors (1492 vs 5455; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S5). SOPRA was unable to run to completion on this dataset after 10 days, while BESST and SSPACE had corrected N50s &lt;60 kbp. In the case of a well-assembled yeast genome (<italic>P. stipitis</italic>, genome size = 15.4 Mbp, 3 kbp mate-pair library), SOPRA ran to completion and was similar to OPERA-LG in terms of producing few scaffold errors (eight vs one; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S5). On the other hand, SOAPdenovo2’s scaffolds were comparable to those of OPERA-LG in terms of corrected N50 (299 kbp vs 320 kbp) but with many more scaffold errors (61 vs 1; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S5). OPERA-LG’s scaffolds improved over SSPACE, BESST, and SOPRA in terms of corrected N50 (1.4–3×) and had fewer errors than SSPACE and BESST (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S5). In comparisons on the <italic>M. undulatus</italic>, <italic>C. sinensis</italic>, and <italic>P. stipitis</italic> genomes, the contigs provided as inputs to the scaffolders were not corrected for assembly errors and thus these evaluations should better reflect scaffolder performance in real genome assembly projects. In all three cases, OPERA-LG improved corrected N50 significantly, while having fewer scaffolding errors, compared with the next best standalone scaffolder (1.5× SSPACE for <italic>M. undulatus</italic>, 3.5× SSPACE for <italic>C. sinensis</italic>, and 1.4× SOPRA for <italic>P. stipitis</italic>).</p>
        <p>To compare OPERA-LG with a wider range of scaffolding programs, we evaluated it on three additional datasets from a recent benchmarking study [<xref ref-type="bibr" rid="CR11">11</xref>]. Contigs used in this study were corrected for assembly errors providing a more idealized setting for comparing scaffolders. Overall, OPERA-LG was consistently one of the top three methods in terms of corrected N50 across datasets (Fig. <xref rid="Fig5" ref-type="fig">5b</xref>–<xref rid="Fig5" ref-type="fig">d</xref>). No other method exhibited similarly consistent performance. For the two smaller genomes (<italic>S. aureus</italic> and <italic>P. falciparum</italic>), the datasets contained a single mate-pair library (2.8 and 3.6 kbp, respectively) and OPERA-LG had slightly lower corrected N50 than the best performing methods (1.1–1.2× improvement for MIP and ABYSS, respectively). Two mate-pair libraries (3 and 35 kbp) were available for the third experiment (<italic>H. sapiens</italic> chromosome 14) and OPERA-LG provided significantly improved corrected N50 compared with other methods in this setting (&gt;2×; Fig. <xref rid="Fig5" ref-type="fig">5d</xref>). In terms of the number of incorrect joins (used to measure scaffolding error), no single method performed consistently well. Using an alternative metric [<xref ref-type="bibr" rid="CR11">11</xref>] that takes the number of correct scaffold joins as a proxy for assembly contiguity and computes a weighted sum with the number of incorrect joins to obtain a “normalized score”, SOPRA was observed to be the best method in two out of three datasets (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). Note that the number of correct joins does not correlate well with assembly contiguity (e.g., OPERA-LG and SOPRA have a similar number of correct joins on the <italic>H. sapiens</italic> chromosome 14 dataset but OPERA-LG provides a corrected N50 that is five times that of SOPRA; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4e; Fig. <xref rid="Fig5" ref-type="fig">5d</xref>). Thus, the normalized score from Hunt et al. [<xref ref-type="bibr" rid="CR11">11</xref>] provides an alternative measure of scaffold quality compared with widely used measures of assembly contiguity (a primary goal for genome assembly) such as corrected N50.<fig id="Fig5"><label>Fig. 5</label><caption><p>Scaffolding of repeat sequences with OPERA-LG. <bold>a</bold> The correctness and completeness (<italic>Repeats in Scaffold</italic>) of scaffolding with repeat contigs in OPERA-LG. A set of contigs is considered correctly placed in a gap if the contigs belong to that gap and if they are in the right order and orientation. For completeness, all repeat contigs (longer than 500 bp) in valid gaps (gaps where the adjacent contigs are in the right order and orientation) and with edges in the scaffold graph were considered. <bold>b</bold> Length distribution of gaps with contigs placed by OPERA-LG in various genomes. <bold>c</bold>, <bold>d</bold> Results from evaluating whether various gap-filling methods can substitute for OPERA-LG: <bold>c</bold> Percentage of gaps filled and <bold>d</bold> percentage of correctly filled gaps by different gap-filling methods in scaffold gaps where OPERA-LG correctly placed a repeat contig. SEALER was unable to run to completion after 10 days</p></caption><graphic xlink:href="13059_2016_951_Fig5_HTML" id="MO5"/></fig></p>
        <p>Another aspect to note here is the incorporation of “skipped tags” (contigs omitted from a scaffold) as a component in the normalized score from Hunt et al. [<xref ref-type="bibr" rid="CR11">11</xref>]. As the position of small contigs (default &lt;500 bp) in a scaffold is frequently under-constrained, OPERA-LG omits them to avoid scaffold errors (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4), while still scaffolding most of the sequence (&gt;94 % of the genome for datasets from Hunt et al.). More importantly, the exclusion of very small contigs does not diminish the ability to correctly recover complete genes from OPERA-LG assemblies compared with the best assemblies based on the normalized score (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5). Paradoxically, the “normalized score” for OPERA-LG can improve using the complete set of contigs, even when corrected N50 and the number of incorrect links becomes worse (<italic>P. falciparum</italic> dataset; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4d; assembly size increase of 3 %).</p>
      </sec>
    </sec>
    <sec id="Sec10">
      <title>Application I: scaffolding of repeat sequences</title>
      <p>Assembly of repeat sequences is typically the most error-prone stage of many assembly pipelines as was observed in the results for the GAGE [<xref ref-type="bibr" rid="CR8">8</xref>] and Assemblathon [<xref ref-type="bibr" rid="CR9">9</xref>] competitions (e.g., the gap-filling stage in SOAPdenovo). They are often handled in a post-scaffolding, gap-filling stage. Algorithmic extensions in OPERA-LG allow it to simultaneously scaffold unique and non-unique regions of the genome and thus more appropriately scaffold repeat-rich genomes—a feature that is not available in other scaffolders which filter repeats during their preprocessing stage. Evaluation of scaffold correctness for OPERA-LG in the presence of repeat contigs showed that repeat contigs were placed in the correct order (as suggested in the reference genome; Fig. <xref rid="Fig5" ref-type="fig">5a</xref>) in more than 80 % of scaffold gaps (regions with no unique contigs). In addition, more than 90 % of repeat contigs in gap regions were placed in OPERA-LG scaffolds (Fig. <xref rid="Fig5" ref-type="fig">5a</xref>), highlighting the completeness of scaffolds despite the conservative placement of repeats in OPERA-LG (see “<xref rid="Sec14" ref-type="sec">Methods</xref>”).</p>
      <p>Repeat contigs scaffolded by OPERA-LG were found to be frequently part of large gaps in the scaffold (for <italic>D. melanogaster</italic>, about half of the gaps were longer than 5 kbp; Fig. <xref rid="Fig5" ref-type="fig">5b</xref>). Large scaffold gaps present a challenging scenario for many gap-filling programs [<xref ref-type="bibr" rid="CR32">32</xref>]. As no other scaffolder allows scaffolding of repeat sequences, we assessed OPERA-LG’s utility by testing the ability of three gap-filling programs (GapCloser, which is part of the SOAPdenovo package, GapFiller [<xref ref-type="bibr" rid="CR33">33</xref>], and the recently published program Sealer [<xref ref-type="bibr" rid="CR34">34</xref>]) to determine the sequence for scaffold gaps where repeats were placed by OPERA-LG. For <italic>E. coli</italic> and to a lesser extent the <italic>P. stipitis</italic> genome, GapCloser was able to provide the correct sequence for most of the scaffold gaps (&gt;60 %; Fig. <xref rid="Fig5" ref-type="fig">5c, d</xref>). GapFiller did not correctly fill many gaps (1 %) with repeats placed by OPERA-LG (it typically reported sequences for gaps &lt;800 bp long), and Sealer was not able to complete after 10 days on any of the five data sets. Sealer’s results were surprising but potentially due to the complexity of the assembly graph around repeats and the exhaustive search that it needs to identify the correct sequence. These results show that the placement of repeat contigs in large genomes by OPERA-LG frequently provides information that is not available from gap-filling programs (Fig. <xref rid="Fig5" ref-type="fig">5c, d</xref>).</p>
    </sec>
    <sec id="Sec11">
      <title>Application II: assembly augmentation and hybrid assembly</title>
      <p>With the increasing availability of new sequencing technologies and additional sequencing datasets at reduced costs, improvement of older draft genome assemblies in a systematic fashion is an area of increasing interest in the field. As the underlying algorithms in OPERA-LG are conservative and intended to minimize discordance with data, the use of OPERA-LG as an <italic>assembly augmentation</italic> tool is attractive and was explored further in two recent genome assembly projects. In the first project, for the assembly of a sweet orange genome (<italic>C. sinensis</italic>) [<xref ref-type="bibr" rid="CR31">31</xref>], all available Illumina sequencing datasets were used with SOAPdenovo to generate a preliminary draft assembly (N50 of ~430 kbp). This assembly was then augmented using OPERA-LG with SOAPdenovo scaffolds as starting sequences and by reusing the larger mate-pair libraries (10 and 20 kbp). The final N50 obtained by this process was four times larger (~1.6 Mbp; Fig. <xref rid="Fig4" ref-type="fig">4e</xref>) and the assembly was validated to be of high-quality using BAC-end sequences, genetic linkage maps, and cytogenetic analysis [<xref ref-type="bibr" rid="CR31">31</xref>]. In another project, an existing reference genome assembly for a Chinese hamster ovary cell line (CHO-K1) [<xref ref-type="bibr" rid="CR35">35</xref>] was augmented with newly generated Illumina sequencing datasets (300-bp library at 61× and 10-kbp library at 16× base pair coverage). The resulting assembly boosted N50 sixfold (1.2 to 6.9 Mbp; Fig. <xref rid="Fig4" ref-type="fig">4e</xref>) with &gt;90 % of the genome assembled into ~500 scaffolds. The scaffolds were also used to close gaps in silico, filling &gt;130,000 gaps, and scaffold correctness was confirmed using alignments of the transcriptome to the assembly (Yusufi et al., in preparation).</p>
      <p>As an example of a novel direction for hybrid assembly with OPERA-LG (in addition, to its ability to mix paired-read libraries and assemblies from different technologies), scaffolding with long reads from third-generation sequencing technologies was explored (by generating mate-pair libraries in silico; see “<xref rid="Sec14" ref-type="sec">Methods</xref>”). OPERA-LG was evaluated on reads generated on the Pacific Biosciences (PacBio) and Oxford Nanopore (ONT, <ext-link ext-link-type="uri" xlink:href="https://www.nanoporetech.com/">https://www.nanoporetech.com/</ext-link>) platforms and compared against two recently described long read scaffolders: SSPACE-LongRead (SSPACE-LR) [<xref ref-type="bibr" rid="CR28">28</xref>] and LINKS [<xref ref-type="bibr" rid="CR29">29</xref>]. All methods were tested on two synthetic (<italic>D. melanogaster</italic> and <italic>C. elegans</italic> genomes) and three real (<italic>S. cerevisiae</italic>, <italic>D. melanogaster</italic>, and <italic>M. undulatus</italic> genomes; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6) datasets. For synthetic data, OPERA-LG and SSPACE-LR had similar corrected N50s, though OPERA-LG had significantly fewer errors (3–4×; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). While LINKS reported no errors on these datasets, its corrected N50 was 4–10× smaller than that for OPERA-LG (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). On the real ONT dataset, OPERA-LG improved corrected N50 of the original <italic>S. cerevisiae</italic> assembly by threefold (from 49 to 158 kbp) and provided a better corrected N50 compared with other approaches (1.15×). ONT reads were converted into scaffold links using a PacBio-specific mapper in SSPACE-LR and using a nanopore-specific mapper could further improve results [<xref ref-type="bibr" rid="CR36">36</xref>]. On datasets with real PacBio reads, OPERA-LG improved corrected N50 for the <italic>D. melanogaster</italic> genome from 58 to 1290 kbp, a 7× improvement over LINKS, and a 2.4× improvement over SSPACE-LR with slightly fewer errors (498 vs 568; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). For the larger <italic>M. undulatus</italic> genome, OPERA-LG was the only scalable method (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). Despite the low coverage from long reads (~3× for reads longer than 2 kbp) for this dataset, OPERA-LG improved corrected N50 by 4–9× depending on how scaffold edges were constructed (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). Runtime for OPERA-LG and LINKS was at most 6 h and 1 h, respectively, while SSPACE-LR took &gt;5 days for genomes longer than 100 Mbp. OPERA-LG’s results provide a proof-of-concept for this application and refinements in mapping and scaffold edge construction could further improve results for low coverage datasets.</p>
    </sec>
  </sec>
  <sec id="Sec12" sec-type="discussion">
    <title>Discussion</title>
    <p>For many bioinformatics problems it is either hard to formalize a clear objective for algorithm design or the formalized objective is computationally intractable. Benchmarking of a novel algorithm is thus the norm for demonstrating the algorithm’s utility and advance over state-of-the-art. Due to resource limitations, however, benchmarks will always be limited in nature. Moreover, consensus on a standardized and comprehensive benchmark can be elusive in many areas, though recent efforts have provided valuable resources for benchmarking scaffolders and assemblers. Where feasible, algorithms that have a clear optimization criterion provide users reason to believe that the algorithm will work on a new dataset. This is the motivation behind OPERA-LG, where the algorithm is guaranteed to produce a minimal-repeat scaffold that globally minimizes the number of discordant scaffold edges. This is by no means the only optimization criterion though and algorithms such as SOPRA optimize very similar criteria in a probabilistic setting.</p>
    <p>Results for OPERA-LG on synthetic and real datasets indicate that it is well suited for scaffolding datasets where multiple mate-pair libraries or large-fragment libraries are available. In such settings, OPERA-LG reported the best corrected N50s compared with other scaffolders and assemblers. With fewer libraries or smaller fragment libraries, the improvements seen were more limited, though OPERA-LG provided consistently good results. While corrected N50 is widely used to evaluate scaffolds and assemblies [<xref ref-type="bibr" rid="CR8">8</xref>–<xref ref-type="bibr" rid="CR10">10</xref>], other metrics may prefer alternative scaffolders (e.g., SOPRA using “normalized score” [<xref ref-type="bibr" rid="CR11">11</xref>]). Deciding which method to use in an assembly project would thus likely depend on the specific requirements of the project.</p>
    <p>OPERA-LG relies on the presence of sufficient mate-pair information to constrain the scaffold graph and report an optimal scaffold. When this is feasible, it provides scaffolds with fewer errors compared with other methods, particularly translocation and inversion errors. However, availability of only a single mate-pair library and limited sequence coverage can under-constrain the scaffolding problem in some regions, especially in the presence of short contigs. There can be multiple optimal scaffolds in such situations, thus leading to mis-assemblies with OPERA-LG. OPERA-LG tries to mitigate this issue by selecting a solution based on approximate distance information from scaffold edges (see “<xref rid="Sec14" ref-type="sec">Methods</xref>”). Additional strategies, such as post-processing to detect regions of the scaffold that are under-constrained and local analysis to correct misassemblies, or the assignment of a confidence score to different regions of the scaffold, deserve further consideration.</p>
    <p>A common concern and criticism for exact algorithms for assembly and scaffolding has been that they are slow, not practical for large datasets, and cannot handle complicated scenarios (e.g., for scaffolding repeats). An important contribution of this work is to show that these challenges are surmountable in a specific deterministic scaffold assembly framework with appropriate algorithm design and engineering. Our results show that large and repeat-rich genomes are amenable to assembly using exact algorithms and that the efficiency of OPERA-LG is comparable to other scaffolding methods. Methods such as SOPRA and OPERA-LG could thus allow users to obtain consistently high quality scaffolds, depending on the scaffold quality metric of choice.</p>
  </sec>
  <sec id="Sec13" sec-type="conclusion">
    <title>Conclusions</title>
    <p>As characteristics of sequencing technologies continue to improve, particularly in read length, assembly quality is also expected to benefit [<xref ref-type="bibr" rid="CR37">37</xref>, <xref ref-type="bibr" rid="CR38">38</xref>]. Recent improvements in protocols for the generation of large mate libraries (e.g., 40-kbp libraries from the NxSeq technology: <ext-link ext-link-type="uri" xlink:href="http://www.lucigen.com/NxSeq-DNA-Sample-Prep-Kits/">http://www.lucigen.com/NxSeq-DNA-Sample-Prep-Kits/</ext-link>) further emphasize the need for effective scaffolding methods that can use this information. However, genome assembly will continue to be a trial-and-error process until assembly and scaffolding algorithms fully exploit the power of the data. Assembly errors continue to plague downstream biological sequence analysis, affecting almost every aspect of modern bioinformatics, and a full assessment of their impact has yet to be performed [<xref ref-type="bibr" rid="CR6">6</xref>]. Our analysis suggests that commonly used assembly tools such as SOAPdenovo and SSPACE can introduce hundreds to thousands of errors during scaffolding. As these programs have been used to construct hundreds of draft eukaryotic genomes, they may benefit from re-assembly and assembly augmentation using newer assembly tools. As we move to an era where assembled sequences potentially guide medically relevant decisions, tolerance for assembly errors is likely to be even more limited. Improved assembly tools are thus needed, such that fully phased and complete quality-guaranteed assemblies are the norm in the future.</p>
  </sec>
  <sec id="Sec14" sec-type="materials|methods">
    <title>Methods</title>
    <sec id="Sec15">
      <title>Constructing the scaffold graph in OPERA-LG</title>
      <p>In order to simultaneously use data from multiple “jumping” libraries for scaffolding, OPERA-LG uses a three-staged process to combine library information to construct a scaffold graph (with contigs as nodes and scaffold edges, which define the constraints on order, orientation, and distance between adjacent contigs, linking them). Firstly, instead of relying on user input for library properties such as mean and standard deviation of insert sizes, as well as read orientation, by default, OPERA-LG directly estimates them from read mappings on large sequences (&gt;2× the insert size, as estimated from a set of 1000 read pairs). The read orientation of a library is set by default to the majority orientation of all read pairs mapped to the same contig and these are then used to calculate the mean insert length and standard deviation. To avoid biases due to outliers (from mis-assemblies, mis-mapping, or sequencing errors), read pairs with distance less than <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {Q}_1-3\times IQR $$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>−</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mi>I</mml:mi><mml:mi>Q</mml:mi><mml:mi>R</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq1.gif"/></alternatives></inline-formula> or greater than <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {Q}_3+3\times IQR $$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mi>Q</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mi>I</mml:mi><mml:mi>Q</mml:mi><mml:mi>R</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq2.gif"/></alternatives></inline-formula> were ignored, where <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {Q}_1 $$\end{document}</tex-math><mml:math id="M6"><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq3.gif"/></alternatives></inline-formula> and <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {Q}_3 $$\end{document}</tex-math><mml:math id="M8"><mml:msub><mml:mi>Q</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq4.gif"/></alternatives></inline-formula> are the first and third quartiles, respectively, of distances between read pairs on a contig and <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ IQR={Q}_3-{Q}_1 $$\end{document}</tex-math><mml:math id="M10"><mml:mi>I</mml:mi><mml:mi>Q</mml:mi><mml:mi>R</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq5.gif"/></alternatives></inline-formula>.</p>
      <sec id="Sec16">
        <title>Refined edge length estimation</title>
        <p>Secondly, OPERA-LG combines information from read pairs in a single library to get a library-specific estimate of edge length for each scaffold edge. Let the gap length between two contigs be <italic>g</italic> and <italic>C</italic> be the sum of the contigs length and <italic>g</italic>. To account for the fact that the observed read pairs are from a truncated distribution [<xref ref-type="bibr" rid="CR30">30</xref>] (in the range [<italic>g</italic>, <italic>C</italic>] as shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6), a reverse lookup table is used to estimate <italic>g</italic> (gap size) from the observed mean of <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \widehat{S} $$\end{document}</tex-math><mml:math id="M12"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq6.gif"/></alternatives></inline-formula> (defined as the length of contig sequences that overlap with the insert region of the paired reads; Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6). As noted in Sahlin et al. [<xref ref-type="bibr" rid="CR30">30</xref>], this is an important step to avoid biases in edge length estimation that could lead to incorrect ordering of contigs and we propose a novel approach for bias correction. Specifically, given <italic>g</italic> and the overall distribution of insert lengths <italic>I</italic> (as determined by the read mapping on large sequences), we compute <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ E\left(\widehat{S}\right) $$\end{document}</tex-math><mml:math id="M14"><mml:mi>E</mml:mi><mml:mfenced close=")" open="("><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq7.gif"/></alternatives></inline-formula> as <inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ E\left({I}_{\left[g,\ C\right]}\right)-g $$\end{document}</tex-math><mml:math id="M16"><mml:mi>E</mml:mi><mml:mfenced close=")" open="("><mml:msub><mml:mi>I</mml:mi><mml:mfenced close="]" open="["><mml:mrow><mml:mi>g</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:mi>C</mml:mi></mml:mrow></mml:mfenced></mml:msub></mml:mfenced><mml:mo>−</mml:mo><mml:mi>g</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq8.gif"/></alternatives></inline-formula> (where <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {I}_{\left[g,\ C\right]} $$\end{document}</tex-math><mml:math id="M18"><mml:msub><mml:mi>I</mml:mi><mml:mfenced close="]" open="["><mml:mrow><mml:mi>g</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:mi>C</mml:mi></mml:mrow></mml:mfenced></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq9.gif"/></alternatives></inline-formula> is the random variable for the truncated distribution indicated in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6b) for every value of <italic>g</italic> in the range [0, <italic>L</italic>] (where <italic>L</italic> is an upper bound of the library insert size, by default μ + 6<italic>σ</italic>). To reduce runtime, OPERA-LG pre-computes such a lookup table for <italic>l</italic> (the sum of contig lengths) in the range <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \left[g,\ {Q}_3+3\times IQR\right] $$\end{document}</tex-math><mml:math id="M20"><mml:mfenced close="]" open="["><mml:mrow><mml:mi>g</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>Q</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mi>I</mml:mi><mml:mi>Q</mml:mi><mml:mi>R</mml:mi></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq10.gif"/></alternatives></inline-formula> at 500-bp intervals and returns the value of InlineEquation <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ E\left(\widehat{S}\right) $$\end{document}</tex-math><mml:math id="M22"><mml:mi>E</mml:mi><mml:mfenced close=")" open="("><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq11.gif"/></alternatives></inline-formula> that corresponds to the value of <italic>E</italic>(<italic>Ŝ</italic>) closest to the observed mean of <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \widehat{S} $$\end{document}</tex-math><mml:math id="M24"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq12.gif"/></alternatives></inline-formula> (using the appropriate lookup table for the current value of <italic>l</italic>). Note that the pre-computation for a lookup table is quite efficient as it can be done in linear time (as a function of the library size) using cumulative sums.</p>
      </sec>
      <sec id="Sec17">
        <title>Multi-library scaffolding</title>
        <p>Thirdly, scaffold edges obtained from different libraries are combined to form a unified scaffold graph in OPERA-LG. To do this, OPERA-LG uses the mean (as obtained above) and standard deviation [<xref ref-type="bibr" rid="CR21">21</xref>] estimates for all edges connecting a pair of contigs (in the same orientation) to cluster and merge edges, starting at each stage with the edge with the largest standard deviation and identifying other edges whose means are within <italic>k</italic> (6 by default) standard deviations of this edge to merge into a single edge. In the case where more than one edge remains at the end of the process, OPERA-LG uses the edge supported by the most paired reads and discards other edges (for assembly of polyploid sequences all edges will be discarded and for repeat contigs all edges will be retained).</p>
        <p>Since libraries with very different insert sizes (say 200 bp vs 40 kbp) provide largely orthogonal information for scaffolding, it is possible to consider them in groups of similar insert sizes. OPERA-LG therefore allows the user to combine libraries in a <italic>staged</italic> fashion (&lt;1, 1–10, and &gt;10 kbp, by default) for greater runtime efficiency.</p>
      </sec>
    </sec>
    <sec id="Sec18">
      <title>Scaffolding of unique sequences</title>
      <p>OPERA-LG is based on Opera [<xref ref-type="bibr" rid="CR13">13</xref>], which is restricted to the scaffolding of unique sequences. In this section, we briefly describe the main concepts that are common to Opera and OPERA-LG. We begin with a few definitions. We define a <italic>scaffold</italic> (without repeats) as being given by a signed permutation (where the sign denotes orientation) of unique contigs as well as a list of gap sizes between adjacent contigs. A scaffold edge <inline-formula id="IEq13"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ e=&lt;{c}_1,\ {c}_2&gt; $$\end{document}</tex-math><mml:math id="M26"><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo>&lt;</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>&gt;</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq13.gif"/></alternatives></inline-formula> is a concordant edge if <inline-formula id="IEq14"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {c}_1 $$\end{document}</tex-math><mml:math id="M28"><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq14.gif"/></alternatives></inline-formula> and <inline-formula id="IEq15"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {c}_2 $$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq15.gif"/></alternatives></inline-formula> in the scaffold can satisfy the distance and orientation constraints imposed by <italic>e</italic> and otherwise <italic>e</italic> is marked discordant. Given a scaffold graph <inline-formula id="IEq16"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ G=\left(V,\ E\right) $$\end{document}</tex-math><mml:math id="M32"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:mi>E</mml:mi></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq16.gif"/></alternatives></inline-formula>, a partial scaffold <inline-formula id="IEq17"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M34"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq17.gif"/></alternatives></inline-formula> is a scaffold on a subset of the contigs and the dangling set, <inline-formula id="IEq18"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ D\left(S\mathit{\hbox{'}}\right) $$\end{document}</tex-math><mml:math id="M36"><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq18.gif"/></alternatives></inline-formula>, is composed of edges from <inline-formula id="IEq19"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M38"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq19.gif"/></alternatives></inline-formula> to <inline-formula id="IEq20"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ V-S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M40"><mml:mi>V</mml:mi><mml:mo>−</mml:mo><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq20.gif"/></alternatives></inline-formula>. The active region <inline-formula id="IEq21"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A\left(S\mathit{\hbox{'}}\right) $$\end{document}</tex-math><mml:math id="M42"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq21.gif"/></alternatives></inline-formula> is given by the shortest suffix of <inline-formula id="IEq22"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M44"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq22.gif"/></alternatives></inline-formula> such that all dangling set edges are adjacent to a contig in it. A partial scaffold <inline-formula id="IEq23"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M46"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq23.gif"/></alternatives></inline-formula> is considered <italic>valid</italic> if all edges in the induced subgraph are concordant.</p>
      <sec id="Sec19">
        <title>Definition 1 (scaffolding problem without repeats)</title>
        <p>Given a scaffold graph <italic>G</italic>, find a scaffold <italic>S</italic> of the contigs that maximizes the number of concordant edges.</p>
        <p>This problem is analogous to that in Huson et al. [<xref ref-type="bibr" rid="CR21">21</xref>] (where the problem is defined in terms of individual paired reads) and, therefore, the proof there can be adapted in a straightforward way to show that the decision version of the scaffolding problem is NP-complete.</p>
        <p>We first consider the special case where the optimal scaffold in a scaffold graph has no discordant edges. Avoiding a naïve and intractable search over all possible signed permutations, we can instead limit the search to an equivalence class of partial scaffolds as shown in the following lemma from Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>].</p>
      </sec>
      <sec id="Sec20">
        <title>Lemma 1</title>
        <p>If <inline-formula id="IEq24"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M48"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq24.gif"/></alternatives></inline-formula> and <inline-formula id="IEq25"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M50"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq25.gif"/></alternatives></inline-formula> are two valid partial scaffolds where <inline-formula id="IEq26"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \left(A\left({S}_1^{\mathit{\hbox{'}}}\right),D\left({S}_1^{\mathit{\hbox{'}}}\right)\right)=\left(A\left({S}_2^{\mathit{\hbox{'}}}\right),D\left({S}_2^{\mathit{\hbox{'}}}\right)\right) $$\end{document}</tex-math><mml:math id="M52"><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mfenced><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mfenced></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mfenced><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mfenced></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq26.gif"/></alternatives></inline-formula>, then (1) <inline-formula id="IEq27"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M54"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq27.gif"/></alternatives></inline-formula> and <inline-formula id="IEq28"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M56"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq28.gif"/></alternatives></inline-formula> contain the same set of contigs and (2) both or neither of them can be extended to a valid complete scaffold.</p>
        <p>Hence, the scaffolding algorithm of Opera without any discordant edges (as defined in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>]) requires <inline-formula id="IEq29"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left(\left|E\right|\left|V\right|{}^w\right) $$\end{document}</tex-math><mml:math id="M58"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mo stretchy="true">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:mo stretchy="true">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>w</mml:mi></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq29.gif"/></alternatives></inline-formula> time, where <italic>w</italic> as an upper bound on the number of contigs that can be spanned by a paired read.</p>
        <p>Treating the total number of discordant edges <italic>p</italic> in the scaffold graph as a constant, we can extend the previous algorithm and still maintain a runtime polynomial in the size of the graph. To do this, we extend the notion of equivalence class by keeping track of discordant edges from the partial scaffold (denoted by <inline-formula id="IEq30"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ X\left(S\mathit{\hbox{'}}\right) $$\end{document}</tex-math><mml:math id="M60"><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq30.gif"/></alternatives></inline-formula> for a partial scaffold <inline-formula id="IEq31"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M62"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq31.gif"/></alternatives></inline-formula>. We also redefine the notion of a dangling set to only contain concordant edges. As the scaffold is only extended to the right of the active region, given a certain active region it is possible to collect all edges connecting to its right side. Thus, the dangling set is obtained by subtracting the discordant edge set from all edges adjacent to the active region. The following lemma is then a straightforward extension of Lemma 1.</p>
      </sec>
      <sec id="Sec21">
        <title>Lemma 2</title>
        <p>If <inline-formula id="IEq32"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M64"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq32.gif"/></alternatives></inline-formula> and <inline-formula id="IEq33"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M66"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq33.gif"/></alternatives></inline-formula> are two partial scaffolds with less than <italic>p</italic> discordant edges and <inline-formula id="IEq34"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \left(A\left({S}_1^{\mathit{\hbox{'}}}\right),X\left({S}_1^{\mathit{\hbox{'}}}\right)\right)=\left(A\left({S}_2^{\mathit{\hbox{'}}}\right),X\left({S}_2^{\mathit{\hbox{'}}}\right)\right) $$\end{document}</tex-math><mml:math id="M68"><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq34.gif"/></alternatives></inline-formula>, then (1) <inline-formula id="IEq35"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M70"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq35.gif"/></alternatives></inline-formula> and <inline-formula id="IEq36"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M72"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq36.gif"/></alternatives></inline-formula> contain the same set of contigs and (2) both or neither of them can be extended to a valid complete scaffold.</p>
        <p>The extended scaffolding problem with <italic>p</italic> discordant edges can be solved in <inline-formula id="IEq37"><alternatives><tex-math id="M73">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left(\left|E\right|{}^{p+1}\left|V\right|{}^w\right) $$\end{document}</tex-math><mml:math id="M74"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mo stretchy="true">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mrow><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>w</mml:mi></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq37.gif"/></alternatives></inline-formula> time as shown in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>].</p>
        <p>Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1 shows the core common features of Opera and OPERA-LG. The memoized search for an optimal scaffold based on Lemma 2 treats all contigs as possible starting points (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1a). Such a search can be localized using a graph contraction approach to reduce runtime. The basic idea here is that a successful contig assembly would frequently produce contigs that are much longer than the paired-read library threshold(s). If we label such contigs as <italic>border contigs</italic> and note the fact that a valid scaffold will not have concordant library edges spanning a border contig, then for a scaffold graph <inline-formula id="IEq38"><alternatives><tex-math id="M75">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ G=\left(V,E\right) $$\end{document}</tex-math><mml:math id="M76"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="(" separators=","><mml:mi>V</mml:mi><mml:mi>E</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq38.gif"/></alternatives></inline-formula>we can define <inline-formula id="IEq39"><alternatives><tex-math id="M77">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {G}_0=\left({V}_0,\ {E}_0\right) $$\end{document}</tex-math><mml:math id="M78"><mml:msub><mml:mi>G</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>E</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq39.gif"/></alternatives></inline-formula> as a fenced subgraph if edges in <italic>E</italic> from <inline-formula id="IEq40"><alternatives><tex-math id="M79">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ V-{V}_0 $$\end{document}</tex-math><mml:math id="M80"><mml:mi>V</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq40.gif"/></alternatives></inline-formula> to <inline-formula id="IEq41"><alternatives><tex-math id="M81">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {V}_0 $$\end{document}</tex-math><mml:math id="M82"><mml:msub><mml:mi>V</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq41.gif"/></alternatives></inline-formula> are always adjacent to a border contig. The search can then be localized in this fenced subgraph without losing the guarantee of a globally optimal scaffold [<xref ref-type="bibr" rid="CR13">13</xref>] (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1b). After the order and the orientation of contigs in a scaffold have been computed, the size of intervening gaps is determined based on constraints imposed by the paired reads. As scaffold edges can span multiple gaps, imposing competing constraints on their sizes, a maximum likelihood approach was adopted to compute gap sizes optimizing a clear likelihood function while taking all scaffold edges into account [<xref ref-type="bibr" rid="CR13">13</xref>] (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1c).</p>
      </sec>
    </sec>
    <sec id="Sec22">
      <title>Scaffolding of repeat sequences</title>
      <p>OPERA-LG relies on the read coverage of contigs to identify potentially repetitive contigs in the assembly (as well as polyploid sequences, as detailed in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Note 1). More sophisticated approaches that use the graph structure to do this (as is done in the Celera Assembler) could potentially yield more accurate and sensitive results (especially in low coverage settings) and will be explored in future versions of OPERA-LG. Since coverage estimates may not always be provided directly by the assembler (e.g., ALLPATHS [<xref ref-type="bibr" rid="CR26">26</xref>]) or can be inaccurate (e.g., SOAPdenovo k-mer coverage values are bounded at 63), OPERA-LG computes these directly from user-provided read mappings. For haploid genomes, OPERA-LG identifies sequences with coverage less than a multiple (1.5 by default<xref ref-type="fn" rid="Fn1">1</xref>) of the genomic average as <italic>unique</italic>. Here, we describe how the search procedure in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>] can be extended to simultaneously scaffold repeat sequences and unique sequences. There are two assumptions for handling repeats in our algorithm: (1) repeats cannot be used to extend scaffolds—this is to avoid ambiguous extensions to the scaffold; and (2) the concordance of edges between repeats is ignored as these cannot be verified without assuming that all repeat instances have been scaffolded.</p>
    </sec>
    <sec id="Sec23">
      <title>Definitions</title>
      <p>To incorporate repeat contigs, we slightly extend definitions presented in the previous section: a <italic>scaffold</italic> is given by a signed permutation of the contigs (in which repeat contigs are allowed to occur multiple times) as well as a list of gap sizes between adjacent contigs. An edge <inline-formula id="IEq42"><alternatives><tex-math id="M83">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ e=&lt;{c}_1,\ {c}_2&gt; $$\end{document}</tex-math><mml:math id="M84"><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mo>&lt;</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>&gt;</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq42.gif"/></alternatives></inline-formula> is a <italic>concordant</italic> edge if any pair of instances of <inline-formula id="IEq43"><alternatives><tex-math id="M85">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {c}_1 $$\end{document}</tex-math><mml:math id="M86"><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq43.gif"/></alternatives></inline-formula> and <inline-formula id="IEq44"><alternatives><tex-math id="M87">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {c}_2 $$\end{document}</tex-math><mml:math id="M88"><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq44.gif"/></alternatives></inline-formula> in the scaffold can satisfy the distance and orientation constraints imposed by <italic>e</italic> and otherwise <italic>e</italic> is <italic>discordant</italic>. For a scaffold graph <inline-formula id="IEq45"><alternatives><tex-math id="M89">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ G=\left(V,E\right) $$\end{document}</tex-math><mml:math id="M90"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="(" separators=","><mml:mi>V</mml:mi><mml:mi>E</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq45.gif"/></alternatives></inline-formula> and a given partial scaffold <inline-formula id="IEq46"><alternatives><tex-math id="M91">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M92"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq46.gif"/></alternatives></inline-formula>, the <italic>dangling edge set D</italic><inline-formula id="IEq47"><alternatives><tex-math id="M93">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ D\left(S\hbox{'}\right) $$\end{document}</tex-math><mml:math id="M94"><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq47.gif"/></alternatives></inline-formula> is the set of edges from unique contigs in <inline-formula id="IEq48"><alternatives><tex-math id="M95">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\hbox{'} $$\end{document}</tex-math><mml:math id="M96"><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq48.gif"/></alternatives></inline-formula> to all contigs in <inline-formula id="IEq49"><alternatives><tex-math id="M97">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ V-S\hbox{'} $$\end{document}</tex-math><mml:math id="M98"><mml:mi>V</mml:mi><mml:mo>−</mml:mo><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq49.gif"/></alternatives></inline-formula>. When the distance between a repeat <italic>r</italic> and the tail of <inline-formula id="IEq50"><alternatives><tex-math id="M99">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\hbox{'} $$\end{document}</tex-math><mml:math id="M100"><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq50.gif"/></alternatives></inline-formula> (measured as sum of contig lengths in the partial scaffold) is larger than the upper bound of the paired-read library, <italic>r</italic> is said to be <italic>confirmed</italic> (in the sense that it will not be removed from the partial scaffold constructed by OPERA-LG). Then we define the <italic>active region</italic><inline-formula id="IEq51"><alternatives><tex-math id="M101">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A\left(S\hbox{'}\right) $$\end{document}</tex-math><mml:math id="M102"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq51.gif"/></alternatives></inline-formula> as the shortest suffix of <inline-formula id="IEq52"><alternatives><tex-math id="M103">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\hbox{'} $$\end{document}</tex-math><mml:math id="M104"><mml:mi>S</mml:mi><mml:mo>'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq52.gif"/></alternatives></inline-formula> (including all unconfirmed repeats) such that all concordant dangling edges are adjacent to a contig in <inline-formula id="IEq53"><alternatives><tex-math id="M105">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A\left(S\mathit{\hbox{'}}\right) $$\end{document}</tex-math><mml:math id="M106"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq53.gif"/></alternatives></inline-formula>. Also, we use the notation <inline-formula id="IEq54"><alternatives><tex-math id="M107">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ u(G) $$\end{document}</tex-math><mml:math id="M108"><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mi>G</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq54.gif"/></alternatives></inline-formula> and <inline-formula id="IEq55"><alternatives><tex-math id="M109">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ u(S) $$\end{document}</tex-math><mml:math id="M110"><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mi>S</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq55.gif"/></alternatives></inline-formula> to refer to the subgraph of <italic>G</italic> and the subset of <italic>S</italic> composed of unique contigs only.</p>
      <p>To constrain the number of occurrences of repeat contigs in scaffolds, we use a simple parsimony criterion to redefine our notion of an optimal scaffold.</p>
      <sec id="Sec24">
        <title>Definition 2 (minimal-repeat optimal scaffold)</title>
        <p>Given a scaffold graph <inline-formula id="IEq56"><alternatives><tex-math id="M111">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ G=\left(V,E\right) $$\end{document}</tex-math><mml:math id="M112"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="(" separators=","><mml:mi>V</mml:mi><mml:mi>E</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq56.gif"/></alternatives></inline-formula> and a scaffold S that minimizes the number of discordant edges in the graph, <italic>S</italic> is considered a “minimal-repeat optimal scaffold”, if removing any occurrence of a repeat from <italic>S</italic> will increase the number of discordant edges.</p>
        <p>Correspondingly, we have the following updated formulation of the scaffolding problem with repeats.</p>
      </sec>
      <sec id="Sec25">
        <title>Definition 3 (scaffolding problem with repeats)</title>
        <p>Given a scaffold graph <italic>G</italic>, find a minimal-repeat optimal scaffold <italic>S</italic> of the contigs.</p>
        <p>Note that the criterion for including repeats is inherently conservative and would, for example, favor the placement of a single copy of a tandem repeat, where feasible. Suitable post-processing scripts would therefore be needed to estimate and expand-out copies of a tandem repeat region. We next describe how OPERA-LG’s search procedure is designed to guarantee a scaffold that minimizes discordance with paired read-derived scaffold edges while parsimoniously including repeat contigs in the scaffold.</p>
      </sec>
    </sec>
    <sec id="Sec26">
      <title>Construction of a minimal-repeat optimal scaffold</title>
      <p>As is the case for unique sequences, OPERA-LG extends partial scaffolds only to the right of the active region and all contigs are tried as potential starting points. Also, as before, the search in OPERA-LG is limited to an updated equivalence class of partial scaffolds as follows.</p>
      <sec id="Sec27">
        <title>Lemma 3</title>
        <p>Given a scaffold graph <inline-formula id="IEq57"><alternatives><tex-math id="M113">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \mathrm{G} $$\end{document}</tex-math><mml:math id="M114"><mml:mi mathvariant="normal">G</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq57.gif"/></alternatives></inline-formula> and two valid partial scaffolds <inline-formula id="IEq58"><alternatives><tex-math id="M115">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M116"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq58.gif"/></alternatives></inline-formula> and <inline-formula id="IEq59"><alternatives><tex-math id="M117">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M118"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq59.gif"/></alternatives></inline-formula> with <inline-formula id="IEq60"><alternatives><tex-math id="M119">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {k}_1 $$\end{document}</tex-math><mml:math id="M120"><mml:msub><mml:mi>k</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq60.gif"/></alternatives></inline-formula> and <inline-formula id="IEq61"><alternatives><tex-math id="M121">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {k}_2 $$\end{document}</tex-math><mml:math id="M122"><mml:msub><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq61.gif"/></alternatives></inline-formula> discordant edges, respectively, if <inline-formula id="IEq62"><alternatives><tex-math id="M123">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \left(A\left({S}_1^{\mathit{\hbox{'}}}\right),D\left({S}_1^{\mathit{\hbox{'}}}\right),\ {k}_1\right)=\left(A\left({S}_2^{\mathit{\hbox{'}}}\right),D\left({S}_2^{\mathit{\hbox{'}}}\right),\ {k}_2\right) $$\end{document}</tex-math><mml:math id="M124"><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>k</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq62.gif"/></alternatives></inline-formula>, then (1) <inline-formula id="IEq63"><alternatives><tex-math id="M125">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M126"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq63.gif"/></alternatives></inline-formula> and <inline-formula id="IEq64"><alternatives><tex-math id="M127">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M128"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq64.gif"/></alternatives></inline-formula> contain the same set of unique contigs; and (2) both or neither of them can be extended to a solution with equal or less than <italic>k</italic> discordant edges (<inline-formula id="IEq65"><alternatives><tex-math id="M129">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \forall k\in \mathrm{\mathbb{N}} $$\end{document}</tex-math><mml:math id="M130"><mml:mo>∀</mml:mo><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="normal">ℕ</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq65.gif"/></alternatives></inline-formula>).</p>
        <p><italic>Proof</italic>. For (1), since the dangling edge set defines a cut in <inline-formula id="IEq66"><alternatives><tex-math id="M131">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ u(G) $$\end{document}</tex-math><mml:math id="M132"><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mi>G</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq66.gif"/></alternatives></inline-formula>, <inline-formula id="IEq67"><alternatives><tex-math id="M133">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ D\left({S}_1^{\mathit{\hbox{'}}}\right) = D\left({S}_2^{\mathit{\hbox{'}}}\right) $$\end{document}</tex-math><mml:math id="M134"><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mspace width="0.25em"/><mml:mi>D</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq67.gif"/></alternatives></inline-formula> defines the same cut and since <inline-formula id="IEq68"><alternatives><tex-math id="M135">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A\left({S}_1^{\mathit{\hbox{'}}}\right)=A\left({S}_2^{\mathit{\hbox{'}}}\right) $$\end{document}</tex-math><mml:math id="M136"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq68.gif"/></alternatives></inline-formula>, <inline-formula id="IEq69"><alternatives><tex-math id="M137">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M138"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq69.gif"/></alternatives></inline-formula> and <inline-formula id="IEq70"><alternatives><tex-math id="M139">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M140"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq70.gif"/></alternatives></inline-formula> must be on the same side of this cut and thus contain the same set of unique contigs.</p>
        <p>For (2), let <inline-formula id="IEq71"><alternatives><tex-math id="M141">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M142"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq71.gif"/></alternatives></inline-formula> be any scaffold extension of <inline-formula id="IEq72"><alternatives><tex-math id="M143">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M144"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq72.gif"/></alternatives></inline-formula> such that <inline-formula id="IEq73"><alternatives><tex-math id="M145">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}}\ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M146"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup><mml:mspace width="0.25em"/><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq73.gif"/></alternatives></inline-formula> has <inline-formula id="IEq74"><alternatives><tex-math id="M147">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \le k $$\end{document}</tex-math><mml:math id="M148"><mml:mo>≤</mml:mo><mml:mi>k</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq74.gif"/></alternatives></inline-formula> discordant edges. Then <inline-formula id="IEq75"><alternatives><tex-math id="M149">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}}\ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M150"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup><mml:mspace width="0.25em"/><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq75.gif"/></alternatives></inline-formula> would also be a valid scaffold as <inline-formula id="IEq76"><alternatives><tex-math id="M151">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ u\left(S\mathit{\hbox{'}}\mathit{\hbox{'}}\right)=u\left(V-{S}_1^{\mathit{\hbox{'}}}\right)=u\left(V-{S}_2^{\mathit{\hbox{'}}}\right) $$\end{document}</tex-math><mml:math id="M152"><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>V</mml:mi><mml:mo>−</mml:mo><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>V</mml:mi><mml:mo>−</mml:mo><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq76.gif"/></alternatives></inline-formula>. Also, since the active regions are identical, any newly discordant edge in <inline-formula id="IEq77"><alternatives><tex-math id="M153">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}}\ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M154"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup><mml:mspace width="0.25em"/><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq77.gif"/></alternatives></inline-formula> (i.e., not discordant in <inline-formula id="IEq78"><alternatives><tex-math id="M155">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M156"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>1</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq78.gif"/></alternatives></inline-formula>) that is adjacent to a contig in <inline-formula id="IEq79"><alternatives><tex-math id="M157">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M158"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq79.gif"/></alternatives></inline-formula> will also be newly discordant in <inline-formula id="IEq80"><alternatives><tex-math id="M159">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}}\ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M160"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup><mml:mspace width="0.25em"/><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq80.gif"/></alternatives></inline-formula> (i.e., not discordant in <inline-formula id="IEq81"><alternatives><tex-math id="M161">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}} $$\end{document}</tex-math><mml:math id="M162"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq81.gif"/></alternatives></inline-formula>) and vice versa. The corresponding number of discordant edges in <inline-formula id="IEq82"><alternatives><tex-math id="M163">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2^{\mathit{\hbox{'}}}\ S\mathit{\hbox{'}}\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M164"><mml:msubsup><mml:mi>S</mml:mi><mml:mn>2</mml:mn><mml:mo mathvariant="italic">'</mml:mo></mml:msubsup><mml:mspace width="0.25em"/><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq82.gif"/></alternatives></inline-formula> is <inline-formula id="IEq83"><alternatives><tex-math id="M165">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \le\ {k}_2+\left(k-{k}_1\right)=k $$\end{document}</tex-math><mml:math id="M166"><mml:mo>≤</mml:mo><mml:mspace width="0.25em"/><mml:msub><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>k</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>k</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq83.gif"/></alternatives></inline-formula></p>
        <p>During the memoized search in OPERA-LG (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1a), a minimal-repeat optimal scaffold is obtained based on the following definition and lemma.</p>
      </sec>
      <sec id="Sec28">
        <title>Definition 4 (essential repeat instance)</title>
        <p>A repeat instance <italic>r</italic> in a partial scaffold is considered essential if no extension of the partial scaffold can be optimal if <italic>r</italic> is removed.</p>
      </sec>
      <sec id="Sec29">
        <title>Lemma 4</title>
        <p>(a) A repeat instance <italic>r</italic> in a partial scaffold <italic>S</italic> is essential <italic>iff</italic> (b) removing <italic>r</italic> increases the number of discordant edges when <italic>r</italic> is being confirmed (i.e., in the process of being tested to see if it should be marked confirmed).</p>
        <p><italic>Proof</italic>. Let the partial scaffold <inline-formula id="IEq84"><alternatives><tex-math id="M167">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M168"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq84.gif"/></alternatives></inline-formula> be obtained by removing <italic>r</italic> from <italic>S</italic>. (1) To prove <inline-formula id="IEq85"><alternatives><tex-math id="M169">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ (a)\Rightarrow (b) $$\end{document}</tex-math><mml:math id="M170"><mml:mfenced close=")" open="("><mml:mi>a</mml:mi></mml:mfenced><mml:mo>⇒</mml:mo><mml:mfenced close=")" open="("><mml:mi>b</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq85.gif"/></alternatives></inline-formula>, for the sake of contradiction, let a repeat instance <italic>r</italic> in a partial scaffold <italic>S</italic> be essential such that removing <italic>r</italic> does not increase the number of discordant edges when <italic>r</italic> is being confirmed. Then, if there exists an optimal extension <italic>T</italic> of <italic>S</italic> with <italic>p</italic> discordant edges, the scaffold <inline-formula id="IEq86"><alternatives><tex-math id="M171">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}T $$\end{document}</tex-math><mml:math id="M172"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mi>T</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq86.gif"/></alternatives></inline-formula> also has at most <italic>p</italic> discordant edges (as the status of edges connecting to <italic>T</italic> cannot change from <italic>ST</italic> to <inline-formula id="IEq87"><alternatives><tex-math id="M173">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}T $$\end{document}</tex-math><mml:math id="M174"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mi>T</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq87.gif"/></alternatives></inline-formula>, from the definition of a confirmed repeat) and is therefore also optimal. Hence, <italic>r</italic> is not essential, giving a contradiction. (2) To prove <inline-formula id="IEq88"><alternatives><tex-math id="M175">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ (b)\Rightarrow (a) $$\end{document}</tex-math><mml:math id="M176"><mml:mfenced close=")" open="("><mml:mi>b</mml:mi></mml:mfenced><mml:mo>⇒</mml:mo><mml:mfenced close=")" open="("><mml:mi>a</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq88.gif"/></alternatives></inline-formula>, suppose removing a repeat instance <italic>r</italic> increases the number of discordant edges when <italic>r</italic> is being confirmed. Then for any extension <italic>T</italic> of <inline-formula id="IEq89"><alternatives><tex-math id="M177">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}} $$\end{document}</tex-math><mml:math id="M178"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq89.gif"/></alternatives></inline-formula> such that <inline-formula id="IEq90"><alternatives><tex-math id="M179">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}T $$\end{document}</tex-math><mml:math id="M180"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mi>T</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq90.gif"/></alternatives></inline-formula> has <italic>p</italic> discordant edges, the scaffold <italic>ST</italic> will have less than <italic>p</italic> discordant edges (as before, the status of edges connecting to <italic>T</italic> cannot change) and, hence, <inline-formula id="IEq91"><alternatives><tex-math id="M181">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ S\mathit{\hbox{'}}T $$\end{document}</tex-math><mml:math id="M182"><mml:mi>S</mml:mi><mml:mo mathvariant="italic">'</mml:mo><mml:mi>T</mml:mi></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq91.gif"/></alternatives></inline-formula> can never be optimal. By Definition 4, therefore, <italic>r</italic> is essential in <italic>S</italic>.</p>
        <p>Note that, by definition, non-essential repeat instances should not be included in a minimal-repeat optimal scaffold. Correspondingly, based on Lemma 4, the algorithm ScaffoldWithRepeat presented in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7 is guaranteed to report a minimal-repeat optimal scaffold.</p>
        <p>The runtime complexity for ScaffoldWithRepeat is established in the following theorem.</p>
      </sec>
      <sec id="Sec30">
        <title>Theorem 1</title>
        <p>Consider a scaffold graph <inline-formula id="IEq92"><alternatives><tex-math id="M183">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ G=\left(V,\ E\right) $$\end{document}</tex-math><mml:math id="M184"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mfenced close=")" open="("><mml:mrow><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.25em"/><mml:mi>E</mml:mi></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq92.gif"/></alternatives></inline-formula> Let <italic>p</italic> be the maximum allowed number of discordant edges and <italic>w</italic> be the maximum number of contigs in the active region. The algorithm ScaffoldWithRepeat runs in <inline-formula id="IEq93"><alternatives><tex-math id="M185">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left(p\left|V\right|{}^w{\left|E\right|}^{p+1}\right) $$\end{document}</tex-math><mml:math id="M186"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>p</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>w</mml:mi></mml:msup><mml:msup><mml:mfenced close="|" open="|"><mml:mi>E</mml:mi></mml:mfenced><mml:mrow><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq93.gif"/></alternatives></inline-formula> time.</p>
        <p><italic>Proof</italic>. It is straightforward to show that the set of possible active regions is <inline-formula id="IEq94"><alternatives><tex-math id="M187">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left({\left(2\left|V\right|\right)}^w\right) $$\end{document}</tex-math><mml:math id="M188"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:msup><mml:mfenced close=")" open="("><mml:mrow><mml:mn>2</mml:mn><mml:mo stretchy="true">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true">|</mml:mo></mml:mrow></mml:mfenced><mml:mi>w</mml:mi></mml:msup></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq94.gif"/></alternatives></inline-formula> and there are at most <inline-formula id="IEq95"><alternatives><tex-math id="M189">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left({2}^{w^2}\right) $$\end{document}</tex-math><mml:math id="M190"><mml:mi>O</mml:mi><mml:mo>(</mml:mo><mml:msup><mml:mn>2</mml:mn><mml:msup><mml:mi>w</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:msup><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq95.gif"/></alternatives></inline-formula> possible sets of concordant dangling edges for any given active region. In addition, there are at most <inline-formula id="IEq96"><alternatives><tex-math id="M191">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left(\left|E\right|{}^p\right) $$\end{document}</tex-math><mml:math id="M192"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mo stretchy="true">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>p</mml:mi></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq96.gif"/></alternatives></inline-formula>possible sets of discordant dangling edges. So, there are at most <inline-formula id="IEq97"><alternatives><tex-math id="M193">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left({\left|E\right|}^p{2}^{w^2}\right) = O\left(\left|E\right|{}^p\right) $$\end{document}</tex-math><mml:math id="M194"><mml:mi>O</mml:mi><mml:mo>(</mml:mo><mml:mrow><mml:msup><mml:mfenced close="|" open="|"><mml:mi>E</mml:mi></mml:mfenced><mml:mi>p</mml:mi></mml:msup><mml:msup><mml:mn>2</mml:mn><mml:msup><mml:mi>w</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:msup></mml:mrow><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mspace width="0.25em"/><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mo stretchy="true">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>p</mml:mi></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq97.gif"/></alternatives></inline-formula> sets of dangling edges. The number of equivalence classes is therefore bounded by <inline-formula id="IEq98"><alternatives><tex-math id="M195">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left({\left(2\left|V\right|\right)}^w{\left|E\right|}^pp\right)=O\left(p\left|V\right|{}^w{\left|E\right|}^p\right) $$\end{document}</tex-math><mml:math id="M196"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:msup><mml:mfenced close=")" open="("><mml:mrow><mml:mn>2</mml:mn><mml:mfenced close="|" open="|"><mml:mi>V</mml:mi></mml:mfenced></mml:mrow></mml:mfenced><mml:mi>w</mml:mi></mml:msup><mml:msup><mml:mfenced close="|" open="|"><mml:mi>E</mml:mi></mml:mfenced><mml:mi>p</mml:mi></mml:msup><mml:mi>p</mml:mi></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mi>p</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true">|</mml:mo><mml:msup><mml:mrow/><mml:mi>w</mml:mi></mml:msup><mml:msup><mml:mfenced close="|" open="|"><mml:mi>E</mml:mi></mml:mfenced><mml:mi>p</mml:mi></mml:msup></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq98.gif"/></alternatives></inline-formula>. For each equivalence class, confirming repeats and updating the active region, the dangling set, and the number of discordant edges in steps 6–11 takes <inline-formula id="IEq99"><alternatives><tex-math id="M197">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ O\left(\left|E\right|\right) $$\end{document}</tex-math><mml:math id="M198"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mfenced close="|" open="|"><mml:mi>E</mml:mi></mml:mfenced></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq99.gif"/></alternatives></inline-formula>|) time.</p>
        <p>As is the case for scaffolding unique sequences, we use the concept of fenced subgraphs and graph contraction to improve the runtime of OPERA-LG in practice, without affecting its guarantee of finding an optimal scaffold. Note that since repeats are not used for extending scaffolds, we can construct fenced subgraphs on the unique subgraph <inline-formula id="IEq100"><alternatives><tex-math id="M199">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ u(G) $$\end{document}</tex-math><mml:math id="M200"><mml:mi>u</mml:mi><mml:mfenced close=")" open="("><mml:mi>G</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq100.gif"/></alternatives></inline-formula> in the same manner as for unique sequences. Then, the <italic>fenced subgraph with repeats</italic> can be obtained by adding back repeat contigs with edges to unique contigs in a subgraph. The results on unique sequences can then be extended trivially to show that finding minimal-repeat optimal scaffolds on fenced subgraphs with repeats will lead to a global optimum on the entire graph. For polyploid genomes, OPERA-LG uses an intuitive (but untested) approach to accommodate for repeats and thus avoid the scaffolding errors that they can induce (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Note 1).</p>
      </sec>
    </sec>
    <sec id="Sec31">
      <title>Scalability and optimized data structures</title>
      <p>Due to the computational intensity of the search procedure employed in OPERA-LG [<xref ref-type="bibr" rid="CR13">13</xref>], engineering issues such as code optimizations and data structures play an important role in enabling its application to large genomes. To allow for greater control over runtime and memory optimizations, OPERA-LG is implemented in C++ with custom data structures designed to allow for a smaller memory and runtime footprint by exploiting the depth-first structure of the search [<xref ref-type="bibr" rid="CR13">13</xref>]. Specifically, as shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1a, the search procedure in OPERA-LG needs to keep track of a partial solution <italic>S</italic> during its search by recording the corresponding active region <inline-formula id="IEq101"><alternatives><tex-math id="M201">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A(S) $$\end{document}</tex-math><mml:math id="M202"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:mi>S</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq101.gif"/></alternatives></inline-formula> and a set of discordant edges <inline-formula id="IEq102"><alternatives><tex-math id="M203">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ X(S) $$\end{document}</tex-math><mml:math id="M204"><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:mi>S</mml:mi></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq102.gif"/></alternatives></inline-formula>. Since partial scaffolds that are related in the search tree (say <inline-formula id="IEq103"><alternatives><tex-math id="M205">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_1 $$\end{document}</tex-math><mml:math id="M206"><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq103.gif"/></alternatives></inline-formula> and <inline-formula id="IEq104"><alternatives><tex-math id="M207">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {S}_2 $$\end{document}</tex-math><mml:math id="M208"><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq104.gif"/></alternatives></inline-formula>) can overlap in their respective active regions and discordant edge sets, OPERA-LG avoids duplication of this information by only recording the difference in these sets (i.e., <inline-formula id="IEq105"><alternatives><tex-math id="M209">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ A\left({S}_1\right)\varDelta \kern0.5em A\left({S}_2\right) $$\end{document}</tex-math><mml:math id="M210"><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mfenced><mml:mi>Δ</mml:mi><mml:mspace width="0.5em"/><mml:mi>A</mml:mi><mml:mfenced close=")" open="("><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq105.gif"/></alternatives></inline-formula> and <inline-formula id="IEq106"><alternatives><tex-math id="M211">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ X\left({S}_1\right)\varDelta \kern0.5em X\left({S}_2\right) $$\end{document}</tex-math><mml:math id="M212"><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mfenced><mml:mi>Δ</mml:mi><mml:mspace width="0.5em"/><mml:mi>X</mml:mi><mml:mfenced close=")" open="("><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2016_951_Article_IEq106.gif"/></alternatives></inline-formula>. In addition, as shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1a, the search avoids unnecessary computation by keeping track of partial scaffolds that have already been explored (memoization). While this can be done in a straightforward way using a hash table, memory requirements for this approach can be significant. In OPERA-LG we implemented a <italic>prefix tree</italic> data structure to store active regions (these are lists by definition) and corresponding discordant edges (an arbitrary order was imposed to convert these sets into lists) as shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S8. This allowed for a significant reduction in the memory footprint of OPERA-LG (Table <xref rid="Tab1" ref-type="table">1</xref>) while allowing for lookups in time proportional to the size of the active region and the discordant edge set.</p>
      <p>While the runtime requirements for OPERA-LG were typically found to be modest and in particular aided by the graph contraction step shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1b, the search time for some subgraphs can be significantly longer than average. Correspondingly, OPERA-LG allows the user to bound the number of partial scaffolds enumerated on any one subgraph (default value is one million), switching to solving the problem with an increased edge size threshold (default step size of 1) when the maximum is reached. This hybrid-exact option in OPERA-LG (default setting) allows for the user to benefit from an exact algorithm for most of the assembly (&gt;90 % of the genome in all datasets tested here) while relying on a reasonable heuristic (edges with few supporting reads are less reliable) when an exact approach is not directly feasible. Though the rate of incorrect scaffold joins for such subgraphs was found to be comparable to that of the rest of the graphs (0.5 % in both cases), OPERA-LG conservatively flags such scaffolds to the user for further investigation.</p>
      <p>Finally, to improve correctness on large genomes with shallow read coverage, the search procedure in OPERA-LG explores contig extensions in increasing order of their estimated distance from the end of a partial scaffold (line 4 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7). To estimate these distances, it employs a breadth-first search (visiting each scaffold edge only once) and uses a weighted mean (down-weighting by the number of edges) for a contig that can be reached by more than one path. This ordering of contig extensions does not impact the performance guarantees in OPERA-LG (i.e., its ability to find an optimal scaffold) but typically generates more accurate scaffolds in regions with ambiguous extensions.</p>
    </sec>
    <sec id="Sec32">
      <title>Hybrid assembly and scaffolding with long reads</title>
      <p>Similar to other scaffolders that are not restricted to a specific mapper or assembler [<xref ref-type="bibr" rid="CR14">14</xref>], OPERA-LG allows users to combine contig assemblies and paired reads from different sequencing technologies. This feature of OPERA-LG has been exploited in several projects, including the assembly of CHO cell lines using SOLiD mate-pair and Illumina paired-end datasets (Yusufi et al., manuscript in preparation). In addition, the availability of “third-generation” sequencing technologies that directly produce longer reads (e.g., median lengths in the range 2–8 kbp from PacBio Systems [<xref ref-type="bibr" rid="CR37">37</xref>]) has provided another avenue for significantly improving sequence contiguity during genome assembly. For example, in the case of the <italic>M. undulatus</italic> assembly, the authors reported significant improvement in contig N50s (30-fold to 100 kbp) by including PacBio reads [<xref ref-type="bibr" rid="CR38">38</xref>]. The use of PacBio reads to aid scaffolding has also been demonstrated by custom methods designed for this task (SSPACE-LongRead [<xref ref-type="bibr" rid="CR28">28</xref>] and LINKS [<xref ref-type="bibr" rid="CR29">29</xref>]). As a proof of concept that OPERA-LG can adapt to this task with minimal modification, we tested it with contig links (i.e., synthetic mate pairs from long reads) inferred by SSPACE-LongRead as input (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Note 2 for an alternative approach). For each contig link we fixed the standard deviation in distance as 10 % of the distance estimated by SSPACE-LongRead (to account for indel errors in PacBio and ONT reads), grouped links into synthetic mate-pair libraries (with estimated distances in the range [0–300], [300–1000], [1000–2000], [2000–5000], [5000–15,000] and [15,000–40,000]), and provided the synthetic libraries as input to OPERA-LG to construct scaffold edges and link contigs together into scaffolds.</p>
    </sec>
    <sec id="Sec33">
      <title>Evaluation on synthetic datasets</title>
      <p>All paired-end and mate-pair read libraries for synthetic datasets were generated using Metasim with default Illumina sequencing settings [<xref ref-type="bibr" rid="CR39">39</xref>]. In addition to the three small genomes (<italic>E. coli</italic>, <italic>S. cerevisiae</italic>, and <italic>D. melanogaster</italic> chromosome X) analyzed in Gao et al. [<xref ref-type="bibr" rid="CR13">13</xref>], we generated libraries and benchmarked on three larger genomes as well, i.e., <italic>D. melanogaster</italic>, <italic>C. elegans</italic>, and <italic>H. sapiens</italic> (reference genomes from NCBI with details in Table <xref rid="Tab2" ref-type="table">2</xref>). PacBio reads were generated using PBSIM v1.03 [<xref ref-type="bibr" rid="CR40">40</xref>] (using --data-type CLR, i.e., long reads with high error rate) to mimic a library of 3-kbp mean read length (maximum read length of 25 kbp) and give ~7× coverage of the <italic>D. melanogaster</italic> and <italic>C. elegans</italic> genomes.</p>
      <p>For the large synthetic datasets, the GAGE pipeline was used to evaluate the final assemblies [<xref ref-type="bibr" rid="CR8">8</xref>] for contig errors and scaffold errors (indels longer than 5 bp, inversions, relocations, and translocations). As the terminology can be confusing, it is important to note here that scaffold indel errors in GAGE are defined as regions between two contiguously scaffolded contigs A and C, where a contig B larger than 200 bp could be placed and where the gap estimation between A and C is not within 1 kbp of the size of B. Corrected assemblies were produced by splitting the final assemblies produced by all programs at contig and scaffold errors (for evaluating the overall assembly) or only scaffold errors (for scaffold-level evaluation) to compute the <italic>corrected N50</italic> (N50 is defined as the fragment length such that &gt;50 % of the genome is in fragments of equal or longer length). For handling scaffolds with repeats, read mappings produced by the GAGE pipeline were further analyzed. A mapping position was considered correct if both coverage and identity were found to be greater than 90 %. For each repeat, all correct positions were considered for correctness and completeness analysis. To evaluate the correctness of gap-filled sequences, we aligned them to the corresponding reference sequence (using MAFFT with default parameters [<xref ref-type="bibr" rid="CR41">41</xref>]). A gap was considered correctly filled if similarity was &gt;95 % and length difference &lt;5 %.</p>
    </sec>
    <sec id="Sec34">
      <title>Benchmarking on sequenced genomes</title>
      <p>Publicly available data from seven sequenced and published genomes were further used to benchmark scaffolders and assemblers in this study: a bacterial genome (<italic>S. aureus</italic>, 2.8 Mbp) [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR11">11</xref>], two yeast genomes (<italic>S. cerevisiae</italic>, 12 Mbp and <italic>P. stipitis</italic>, 15.0 Mbp) [<xref ref-type="bibr" rid="CR42">42</xref>], a parasite genome (<italic>P. falciparum</italic>, 23 Mbp) [<xref ref-type="bibr" rid="CR11">11</xref>], a mammalian chromosome (<italic>H. sapiens</italic> chromosome 14, 100 Mbp) [<xref ref-type="bibr" rid="CR11">11</xref>], a fruit genome (<italic>C. sinensis</italic>, 367 Mbp) [<xref ref-type="bibr" rid="CR31">31</xref>], and a bird genome (<italic>M. undulatus</italic>, 1.2 Gbp) [<xref ref-type="bibr" rid="CR10">10</xref>].</p>
      <p>Due to the availability of a high-quality reference for <italic>P. stipitis</italic> (NCBI accession number NZ_AAVQ01000000) and <italic>S. cerevisiae</italic> (<ext-link ext-link-type="uri" xlink:href="http://www.yeastgenome.org/strain/S288C/overview">http://www.yeastgenome.org/strain/S288C/overview</ext-link>) assemblies were evaluated using the GAGE pipeline. For <italic>S. aureus</italic>, <italic>P. falciparum</italic>, and <italic>H. sapiens</italic> chromosome 14, assemblies were evaluated using scripts provided by Hunt et al. [<xref ref-type="bibr" rid="CR11">11</xref>] and corrected N50 values were computed by breaking assemblies at incorrect joins. For other genomes, the assemblies were evaluated for errors using REAPR [<xref ref-type="bibr" rid="CR43">43</xref>] (used as part of the evaluation pipeline for Assemblathon2 [<xref ref-type="bibr" rid="CR10">10</xref>]). For <italic>C. sinensis</italic> and <italic>M. undulatus</italic>, all reads from the 10- and 20-kbp mate-pair libraries, respectively, were used for REAPR evaluation (mapped using –i 15000). For <italic>M. undulatus</italic>, PacBio reads were mapped onto the assemblies to recognize contig errors, defined as regions not covered by <italic>any</italic> PacBio reads and having more than three split-mapped reads within 100 bp of the putative breakpoint. Reads were aligned to the assembly using Nucmer v3.23 (with –maxmatch) and the best mapping position for each read was selected using delta-filter v3.23 with default parameters. This approach resulted in only one false-positive break on a simulated dataset with 7× coverage of the SOAPdenovo contig assembly for <italic>M. undulatus</italic>. Corrected assemblies were produced for all datasets by splitting the final assemblies produced by all programs at contig and scaffold errors (for evaluating the overall assembly) or only scaffold errors (for scaffold-level evaluation) to compute the corrected N50.</p>
    </sec>
    <sec id="Sec35">
      <title>Parameter settings</title>
      <p>Parameter settings for the benchmarked scaffolders and assemblers were as follows. SSPACE (SSPACE-BASIC-2.0): default command line parameters, 6 * standard deviation/library mean was used as threshold for allowed error for each library. BESST (version 1.3.9): default parameters. SOPRA (version 1.4.6): run using a wrapper script from Hunt et al. [<xref ref-type="bibr" rid="CR11">11</xref>]. SOAPdenovo2 (version 2.04): -K 41, -d 1, map length was fixed to half of the read length for each library. ALLPATHS-LG (version 43019): PATCH_SCAFFOLDS = false, KPATCH = false (to skip the gap-filling stage). OPERA-LG was run using default parameters: contigs smaller than max(500, 2 × paired-end insert size) bp were not scaffolded, contigs with coverage greater than 1.5 times the average coverage were treated as repeats and scaffold edges with less than five supporting reads were discarded. For runtime efficiency, all genomes &gt;200 Mbp were scaffolded using OPERA-LG’s staged approach.</p>
      <p>Contigs produced by SOAPdenovo (with -K 41 -d –D) were provided as input for SSPACE, BESST, SOPRA, and OPERA-LG (except for datasets from Hunt et al. [<xref ref-type="bibr" rid="CR11">11</xref>]). Read mappings for OPERA-LG and SSPACE were generated using BWA (0.7.10-r789) (samse -n 1) [<xref ref-type="bibr" rid="CR44">44</xref>]. Read mapping for SOPRA and BESST were performed using the script provided in their respective packages and the same version of BWA. Assemblies from Assemblathon2 produced by Meraculous, BCM-HGSC, and Newbler-454 were used for comparison as they were reported to be the best assemblies for <italic>M. undulatus</italic> based on several criteria [<xref ref-type="bibr" rid="CR10">10</xref>]. For datasets from Hunt et al., read mappings for OPERA-LG and BESST were performed using BWA (0.7.10-r789) (samse -n 1) on the assemblies provided [<xref ref-type="bibr" rid="CR11">11</xref>]. As multiple mappers were used to assess the performance of other methods, we conservatively used the best reported assembly.</p>
      <p>For the gap-filling analysis, parameter settings were as follows. GapCloser (version 1.12): default parameters. GapFiller (version 1.10): -m 30 -o 2 -r 0.7 -n 10 -d 50 -t 10 -g 0 -i 1 (recommended parameters). Sealer (version 1.9.0): -P 10 -k90 -k80 -k70 -k60 -k50 -k40 -k30 (recommended parameters) -j 20 (20 threads) -F 15000 (to allow filling of gaps up to 15 kbp long).</p>
      <p>For scaffolding using PacBio and ONT reads we used SSPACE-LongRead (version 1.1) and LINKS (version 1.5.2) with default parameters. For low coverage datasets (simulated <italic>D. melanogaster</italic>, <italic>C. elegans</italic>, and <italic>M. undalatus</italic>) OPERA-LG’s edge support threshold was set to 1, as chimera rates are expected to be low for contig links derived from PacBio reads. For ONT data, we excluded the template and complement reads of corresponding 2D reads.</p>
    </sec>
    <sec id="Sec36">
      <title>Availability of data and materials</title>
      <p>Source code and executables for OPERA-LG are available from its SourceForge website (MIT license; <ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/operasf/">http://sourceforge.net/projects/operasf/</ext-link>). Simulated datasets and assemblies presented (except the ones that were downloaded from Assemblathon 2 and Hunt et al.) are available at the following ftp site: <ext-link ext-link-type="uri" xlink:href="ftp://ftp2.gis.a-star.edu.sg/opera-lg/">ftp://ftp2.gis.a-star.edu.sg/opera-lg/</ext-link>. Published sequencing datasets were accessed based on information from the following websites: (1) for <italic>M. undulatus</italic>, accession numbers in the Additional file 5 from <ext-link ext-link-type="uri" xlink:href="http://gigascience.biomedcentral.com/articles/10.1186/2047-217X-2-10">http://gigascience.biomedcentral.com/articles/10.1186/2047-217X-2-10</ext-link> were used to download data from the Sequence Read Archive (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/sra">http://www.ncbi.nlm.nih.gov/sra</ext-link>); (2) for <italic>P. stipitis</italic>, sequencing data were downloaded from <ext-link ext-link-type="uri" xlink:href="ftp://ftp.jgi-psf.org/pub/JGI_data/meraculous/">ftp://ftp.jgi-psf.org/pub/JGI_data/meraculous/</ext-link>; (3) for <italic>C. sinensis</italic>, sequencing data were downloaded from <ext-link ext-link-type="uri" xlink:href="http://citrus.hzau.edu.cn/orange">http://citrus.hzau.edu.cn/orange</ext-link>; (4) for <italic>S. aureus</italic>, data were downloaded from <ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/index.html">http://gage.cbcb.umd.edu/data/index.html</ext-link>; (5) for <italic>P. falciparum</italic>, data for the runs ERR034295, ERR163027, ERR163028, and ERR163029 were downloaded from <ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/ena">http://www.ebi.ac.uk/ena</ext-link>; (6) for human chromosome 14, data were downloaded from <ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/index.html">http://gage.cbcb.umd.edu/data/index.html</ext-link>; (7) for <italic>S. cerevisiae</italic> W303 raw ONT sequences were from <ext-link ext-link-type="uri" xlink:href="http://schatzlab.cshl.edu/data/nanocorr">http://schatzlab.cshl.edu/data/nanocorr</ext-link>; (8) for <italic>D. melanogaster</italic>, PacBio sequences were from <ext-link ext-link-type="uri" xlink:href="https://github.com/PacificBiosciences/DevNet/wiki/Drosophila-sequence-and-assembly">https://github.com/PacificBiosciences/DevNet/wiki/Drosophila-sequence-and-assembly</ext-link>.</p>
    </sec>
    <sec id="Sec37">
      <title>Ethics approval</title>
      <p>No ethical approval was required for the project.</p>
    </sec>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec39">
        <title>Additional file</title>
        <p>
          <media position="anchor" xlink:href="13059_2016_951_MOESM1_ESM.docx" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p>Contains supplementary notes, figures and tables. (DOCX 2996 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p>Note that the A-statistic [<xref ref-type="bibr" rid="CR27">27</xref>], with coverage modeled as a Poisson distribution, gives rise to a similar threshold (≈1.44).</p>
    </fn>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>SG, DB, and NN participated in designing the algorithm. SG implemented OPERA-LG. SG, DB, and BC conducted the experiments and analysis with guidance from NN. SG, DB, and NN drafted the manuscript. All authors read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>This work was supported by the IMaGIN platform (project number 102 101 0025) through a grant from the Science and Engineering Research Council as well as funding to the Genome Institute of Singapore from the Agency for Science, Technology and Research (A*STAR), Singapore.</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kececioglu</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>Combinatorial algorithms for DNA sequence assembly</article-title>
        <source>Algorithmica</source>
        <year>1993</year>
        <volume>13</volume>
        <fpage>7</fpage>
        <lpage>51</lpage>
        <pub-id pub-id-type="doi">10.1007/BF01188580</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Peltola H, Soderlund H, Tarhio J, Ukkonen E. Algorithms for some string matching problems arising in molecular genetics. Proceedings of the International Federation for Information Processing 9th World Computer Congress. Paris, France: 1983. p. 59–64.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Medvedev</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Georgiou</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Brudno</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Computability of models for sequence assembly</article-title>
        <source>Algorithms Bioinformatics</source>
        <year>2007</year>
        <volume>4645</volume>
        <fpage>289</fpage>
        <lpage>301</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-540-74126-8_27</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Parametric complexity of sequence assembly: theory and applications to next generation sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2009</year>
        <volume>16</volume>
        <fpage>897</fpage>
        <lpage>908</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2009.0005</pub-id>
        <?supplied-pmid 19580519?>
        <pub-id pub-id-type="pmid">19580519</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Sequence assembly demystified</article-title>
        <source>Nat Rev Genet</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>157</fpage>
        <lpage>67</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg3367</pub-id>
        <?supplied-pmid 23358380?>
        <pub-id pub-id-type="pmid">23358380</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Yorke</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>Beware of mis-assembled genomes</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>4320</fpage>
        <lpage>1</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti769</pub-id>
        <?supplied-pmid 16332717?>
        <pub-id pub-id-type="pmid">16332717</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Assemblies: the good, the bad, the ugly</article-title>
        <source>Nat Methods</source>
        <year>2011</year>
        <volume>8</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth0111-59</pub-id>
        <?supplied-pmid 21191376?>
        <pub-id pub-id-type="pmid">21191376</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: a critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <fpage>557</fpage>
        <lpage>67</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Earl</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bradnam</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>St John</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Darling</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Fass</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 1: a competitive assessment of de novo short read assembly methods</article-title>
        <source>Genome Res</source>
        <year>2011</year>
        <volume>21</volume>
        <fpage>2224</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.126599.111</pub-id>
        <?supplied-pmid 21926179?>
        <pub-id pub-id-type="pmid">21926179</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bradnam</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Fass</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Alexandrov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Baranay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bechner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 2: evaluating de novo methods of genome assembly in three vertebrate species</article-title>
        <source>Gigascience</source>
        <year>2013</year>
        <volume>2</volume>
        <fpage>10</fpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-2-10</pub-id>
        <?supplied-pmid 23870653?>
        <pub-id pub-id-type="pmid">23870653</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>A comprehensive evaluation of assembly scaffolding tools</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>R42</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-3-r42</pub-id>
        <?supplied-pmid 24581555?>
        <pub-id pub-id-type="pmid">24581555</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bresler</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Bresler</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tse</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Optimal assembly for high throughput shotgun sequencing</article-title>
        <source>BMC Bioinformatics</source>
        <year>2013</year>
        <volume>14 Suppl 5</volume>
        <fpage>S18</fpage>
        <?supplied-pmid 23902516?>
        <pub-id pub-id-type="pmid">23902516</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gao</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sung</surname>
            <given-names>WK</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Opera: reconstructing optimal genomic scaffolds with high-throughput paired-end sequences</article-title>
        <source>J Comput Biol</source>
        <year>2011</year>
        <volume>18</volume>
        <fpage>1681</fpage>
        <lpage>91</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2011.0170</pub-id>
        <?supplied-pmid 21929371?>
        <pub-id pub-id-type="pmid">21929371</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Henkel</surname>
            <given-names>CV</given-names>
          </name>
          <name>
            <surname>Jansen</surname>
            <given-names>HJ</given-names>
          </name>
          <name>
            <surname>Butler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Scaffolding pre-assembled contigs using SSPACE</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>578</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq683</pub-id>
        <?supplied-pmid 21149342?>
        <pub-id pub-id-type="pmid">21149342</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kosack</surname>
            <given-names>DS</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Hierarchical scaffolding with Bambus</article-title>
        <source>Genome Res</source>
        <year>2004</year>
        <volume>14</volume>
        <fpage>149</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.1536204</pub-id>
        <?supplied-pmid 14707177?>
        <pub-id pub-id-type="pmid">14707177</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dayarian</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Michael</surname>
            <given-names>TP</given-names>
          </name>
          <name>
            <surname>Sengupta</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>SOPRA: scaffolding algorithm for paired reads via statistical optimization</article-title>
        <source>BMC Bioinformatics</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>345</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-345</pub-id>
        <?supplied-pmid 20576136?>
        <pub-id pub-id-type="pmid">20576136</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ghodsi</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hill</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Astrovskaya</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Sommer</surname>
            <given-names>DD</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo likelihood-based measures for comparing genome assemblies</article-title>
        <source>BMC Res Notes</source>
        <year>2013</year>
        <volume>6</volume>
        <fpage>334</fpage>
        <pub-id pub-id-type="doi">10.1186/1756-0500-6-334</pub-id>
        <?supplied-pmid 23965294?>
        <pub-id pub-id-type="pmid">23965294</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rahman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>CGAL: computing genome assembly likelihoods</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>R8</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-1-r8</pub-id>
        <?supplied-pmid 23360652?>
        <pub-id pub-id-type="pmid">23360652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Laserson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Jojic</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Koller</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Genovo: de novo assembly for metagenomes</article-title>
        <source>J Comput Biol</source>
        <year>2011</year>
        <volume>18</volume>
        <fpage>429</fpage>
        <lpage>43</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2010.0244</pub-id>
        <?supplied-pmid 21385045?>
        <pub-id pub-id-type="pmid">21385045</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Medvedev</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Brudno</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Maximum likelihood genome assembly</article-title>
        <source>J Comput Biol</source>
        <year>2009</year>
        <volume>16</volume>
        <fpage>1101</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2009.0047</pub-id>
        <?supplied-pmid 19645596?>
        <pub-id pub-id-type="pmid">19645596</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>The greedy path-merging algorithm for contig scaffolding</article-title>
        <source>J ACM</source>
        <year>2002</year>
        <volume>49</volume>
        <fpage>603</fpage>
        <lpage>15</lpage>
        <pub-id pub-id-type="doi">10.1145/585265.585267</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salmela</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Makinen</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Valimaki</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Ylinen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ukkonen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Fast scaffolding with small independent mixed integer programs</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>3259</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr562</pub-id>
        <?supplied-pmid 21998153?>
        <pub-id pub-id-type="pmid">21998153</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Lindsay J, Salooti H, Zelikovsky A, Măndoiu I. Scalable genome scaffolding using integer linear programming. In: Proceedings of the ACM Conference on Bioinformatics, Computational Biology and Biomedicine. Orlando: ACM; 2012. p. 377–83.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sahlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Vezzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Nystedt</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lundeberg</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Arvestad</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>BESST--efficient scaffolding of large fragmented assemblies</article-title>
        <source>BMC Bioinformatics</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>281</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-15-281</pub-id>
        <?supplied-pmid 25128196?>
        <pub-id pub-id-type="pmid">25128196</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Qian</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Fang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>Z</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of human genomes with massively parallel short read sequencing</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <fpage>265</fpage>
        <lpage>72</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.097261.109</pub-id>
        <?supplied-pmid 20019144?>
        <pub-id pub-id-type="pmid">20019144</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gnerre</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Maccallum</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Przybylski</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ribeiro</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Burton</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>BJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>High-quality draft assemblies of mammalian genomes from massively parallel sequence data</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <year>2011</year>
        <volume>108</volume>
        <fpage>1513</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1017351108</pub-id>
        <?supplied-pmid 21187386?>
        <pub-id pub-id-type="pmid">21187386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Sutton</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Dew</surname>
            <given-names>IM</given-names>
          </name>
          <name>
            <surname>Fasulo</surname>
            <given-names>DP</given-names>
          </name>
          <name>
            <surname>Flanigan</surname>
            <given-names>MJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A whole-genome assembly of Drosophila</article-title>
        <source>Science</source>
        <year>2000</year>
        <volume>287</volume>
        <fpage>2196</fpage>
        <lpage>204</lpage>
        <pub-id pub-id-type="doi">10.1126/science.287.5461.2196</pub-id>
        <?supplied-pmid 10731133?>
        <pub-id pub-id-type="pmid">10731133</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>SSPACE-LongRead: scaffolding bacterial draft genomes using long read sequence information</article-title>
        <source>BMC Bioinformatics</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>211</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-15-211</pub-id>
        <?supplied-pmid 24950923?>
        <pub-id pub-id-type="pmid">24950923</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Behsaz</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lagman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LINKS: Scalable, alignment-free scaffolding of draft genomes with long reads</article-title>
        <source>Gigascience</source>
        <year>2015</year>
        <volume>4</volume>
        <fpage>35</fpage>
        <pub-id pub-id-type="doi">10.1186/s13742-015-0076-3</pub-id>
        <?supplied-pmid 26244089?>
        <pub-id pub-id-type="pmid">26244089</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sahlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Street</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Lundeberg</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Arvestad</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Improved gap size estimation for scaffolding algorithms</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>2215</fpage>
        <lpage>22</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts441</pub-id>
        <?supplied-pmid 22923455?>
        <pub-id pub-id-type="pmid">22923455</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Xu</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>LL</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The draft genome of sweet orange (Citrus sinensis)</article-title>
        <source>Nat Genet</source>
        <year>2013</year>
        <volume>45</volume>
        <fpage>59</fpage>
        <lpage>66</lpage>
        <pub-id pub-id-type="doi">10.1038/ng.2472</pub-id>
        <?supplied-pmid 23179022?>
        <pub-id pub-id-type="pmid">23179022</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gao</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bertrand</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>FinIS: improved in silico finishing using an exact quadratic programming formulation</article-title>
        <source>Algorithms Bioinformatics Lect Notes Comput Sci</source>
        <year>2012</year>
        <volume>7534</volume>
        <fpage>314</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-642-33122-0_25</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Toward almost closed genomes with GapFiller</article-title>
        <source>Genome Biol</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>R56</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2012-13-6-r56</pub-id>
        <?supplied-pmid 22731987?>
        <pub-id pub-id-type="pmid">22731987</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paulino</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Raymond</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Sealer: a scalable gap-closing application for finishing draft genomes</article-title>
        <source>BMC Bioinformatics</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>230</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-015-0663-4</pub-id>
        <?supplied-pmid 26209068?>
        <pub-id pub-id-type="pmid">26209068</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Xu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lewis</surname>
            <given-names>NE</given-names>
          </name>
          <name>
            <surname>Pan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cai</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>X</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The genomic sequence of the Chinese hamster ovary (CHO)-K1 cell line</article-title>
        <source>Nat Biotechnol</source>
        <year>2011</year>
        <volume>29</volume>
        <fpage>735</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1932</pub-id>
        <?supplied-pmid 21804562?>
        <pub-id pub-id-type="pmid">21804562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sovic</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Sikic</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wilm</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Fenlon</surname>
            <given-names>SN</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive mapping of error-prone nanopore sequencing reads with GraphMap</article-title>
        <source>Nat Commun.</source>
        <year>2016</year>
        <volume>7</volume>
        <fpage>11307</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms11307</pub-id>
        <?supplied-pmid 27079541?>
        <pub-id pub-id-type="pmid">27079541</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bashir</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Klammer</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Robins</surname>
            <given-names>WP</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>CS</given-names>
          </name>
          <name>
            <surname>Webster</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Paxinos</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A hybrid approach for the automated finishing of bacterial genomes</article-title>
        <source>Nat Biotechnol</source>
        <year>2012</year>
        <volume>30</volume>
        <fpage>701</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2288</pub-id>
        <?supplied-pmid 22750883?>
        <pub-id pub-id-type="pmid">22750883</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Howard</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Ganapathy</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Hybrid error correction and de novo assembly of single-molecule sequencing reads</article-title>
        <source>Nat Biotechnol</source>
        <year>2012</year>
        <volume>30</volume>
        <fpage>693</fpage>
        <lpage>700</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2280</pub-id>
        <?supplied-pmid 22750884?>
        <pub-id pub-id-type="pmid">22750884</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Richter</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Ott</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Auch</surname>
            <given-names>AF</given-names>
          </name>
          <name>
            <surname>Schmid</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>MetaSim: a sequencing simulator for genomics and metagenomics</article-title>
        <source>PLoS One</source>
        <year>2008</year>
        <volume>3</volume>
        <fpage>e3373</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0003373</pub-id>
        <?supplied-pmid 18841204?>
        <pub-id pub-id-type="pmid">18841204</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ono</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Asai</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hamada</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>PBSIM: PacBio reads simulator--toward accurate genome assembly</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <fpage>119</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts649</pub-id>
        <?supplied-pmid 23129296?>
        <pub-id pub-id-type="pmid">23129296</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Katoh</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Misawa</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Kuma</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Miyata</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform</article-title>
        <source>Nucleic Acids Res</source>
        <year>2002</year>
        <volume>30</volume>
        <fpage>3059</fpage>
        <lpage>66</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkf436</pub-id>
        <?supplied-pmid 12136088?>
        <pub-id pub-id-type="pmid">12136088</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chapman</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Ho</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Sunkara</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schroth</surname>
            <given-names>GP</given-names>
          </name>
          <name>
            <surname>Rokhsar</surname>
            <given-names>DS</given-names>
          </name>
        </person-group>
        <article-title>Meraculous: de novo genome assembly with short paired-end reads</article-title>
        <source>PLoS One</source>
        <year>2011</year>
        <volume>6</volume>
        <fpage>e23501</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0023501</pub-id>
        <?supplied-pmid 21876754?>
        <pub-id pub-id-type="pmid">21876754</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kikuchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sanders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>REAPR: a universal tool for genome assembly evaluation</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>R47</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-5-r47</pub-id>
        <?supplied-pmid 23710727?>
        <pub-id pub-id-type="pmid">23710727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1754</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id>
        <?supplied-pmid 19451168?>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
