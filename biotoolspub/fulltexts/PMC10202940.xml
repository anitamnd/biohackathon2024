<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10202940</article-id>
    <article-id pub-id-type="pmid">37217507</article-id>
    <article-id pub-id-type="publisher-id">38716</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-023-38716-x</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Linear time complexity de novo long read genome assembly with GoldRush</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes" equal-contrib="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1687-8972</contrib-id>
        <name>
          <surname>Wong</surname>
          <given-names>Johnathan</given-names>
        </name>
        <address>
          <email>jowong@bcgsc.ca</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-7518-2326</contrib-id>
        <name>
          <surname>Coombe</surname>
          <given-names>Lauren</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2992-9935</contrib-id>
        <name>
          <surname>Nikolić</surname>
          <given-names>Vladimir</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhang</surname>
          <given-names>Emily</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1574-3363</contrib-id>
        <name>
          <surname>Nip</surname>
          <given-names>Ka Ming</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sidhu</surname>
          <given-names>Puneet</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9890-2293</contrib-id>
        <name>
          <surname>Warren</surname>
          <given-names>René L.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0950-7839</contrib-id>
        <name>
          <surname>Birol</surname>
          <given-names>Inanç</given-names>
        </name>
        <address>
          <email>ibirol@bcgsc.ca</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.434706.2</institution-id><institution-id institution-id-type="ISNI">0000 0004 0410 5424</institution-id><institution>Canada’s Michael Smith Genome Sciences Centre, BC Cancer, </institution></institution-wrap>Vancouver, BC V5Z 4S6 Canada </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>22</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>22</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>14</volume>
    <elocation-id>2906</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>11</day>
        <month>5</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Current state-of-the-art de novo long read genome assemblers follow the Overlap-Layout-Consensus paradigm. While read-to-read overlap – its most costly step – was improved in modern long read genome assemblers, these tools still often require excessive RAM when assembling a typical human dataset. Our work departs from this paradigm, foregoing all-vs-all sequence alignments in favor of a dynamic data structure implemented in GoldRush, a de novo long read genome assembly algorithm with linear time complexity. We tested GoldRush on Oxford Nanopore Technologies long sequencing read datasets with different base error profiles sourced from three human cell lines, rice, and tomato. Here, we show that GoldRush achieves assembly scaffold NGA50 lengths of 18.3-22.2, 0.3 and 2.6 Mbp, for the genomes of human, rice, and tomato, respectively, and assembles each genome within a day, using at most 54.5 GB of random-access memory, demonstrating the scalability of our genome assembly paradigm and its implementation.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Current state-of-the-art de novo long read genome assemblers follow the Overlap-Layout-Consensus paradigm. GoldRush departs from this paradigm, generating highly contiguous assemblies with linear time complexity and using an order of magnitude less RAM than state-of-the-art methods.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Genome assembly algorithms</kwd>
      <kwd>Software</kwd>
      <kwd>Genome assembly algorithms</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Limited 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">Short-read genome assembly methods typically struggle to resolve sequence repeats and often fail to generate assemblies that reach chromosome-scale<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. Both prokaryotic and eukaryotic genomes can contain a large proportion of repeats<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, with the human genome estimated to be 66–69% repetitive<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. Thus, it is imperative that these repetitive regions be sufficiently resolved for a successful de novo genome assembly. Innovations in bioinformatics have emerged to address this challenge, leveraging long-range evidence afforded by various data types, including linked reads<sup><xref ref-type="bibr" rid="CR4">4</xref>,<xref ref-type="bibr" rid="CR5">5</xref></sup>, Hi-C<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, and long sequencing reads<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR8">8</xref></sup>.</p>
    <p id="Par4">Long-read sequencing technology has become increasingly prevalent in recent years. Sequencing throughput, affordability, and the long-read lengths are some of the key reasons<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>. The long-read lengths, ranging from kilobases to megabases, enable better resolution of structural variants<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> and long repeats<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>. Long reads also enable correct and accurate identification of tandem repeat expansions<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>.</p>
    <p id="Par5">Oxford Nanopore Technologies (ONT), Plc. (Oxford, UK) and Pacific Biosciences (PacBio), Inc. (Menlo Park, USA) are currently the two preeminent providers of commercial long-read sequencing technology. PacBio generally produces long reads with lower base errors (8–13% and &lt;1% for Continuous Long Reads (CLR) and HiFi, respectively), but with shorter read lengths (typically averaging 30–60 kbp and 10–25 kbp for CLR and HiFi, respectively)<sup><xref ref-type="bibr" rid="CR13">13</xref>,<xref ref-type="bibr" rid="CR14">14</xref></sup> compared to that of ONT (typically 10–100+ kbp)<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. Yet, high error rates (1–13%) in ONT reads remain a challenging obstacle to de novo genome assembly<sup><xref ref-type="bibr" rid="CR15">15</xref>–<xref ref-type="bibr" rid="CR17">17</xref></sup>. Unlike the de novo genome assembly strategies designed for short reads, both long-read sequencing technologies— and especially ONT, require algorithms and data structures that can accommodate mismatches and indels in the sequencing data.</p>
    <p id="Par6">Most long-read genome assemblers follow the Overlap-Layout-Consensus paradigm (OLC), a quadratic run time algorithm in its naïve implementation. OLC consists of three steps. The first step, overlap, typically generates an overlap graph by computing the pairwise alignment of all reads. As datasets often contain tens of millions of reads, finding and storing the detected overlaps is the most computationally- and memory-intensive step in the OLC paradigm, and has been the target of recent innovative algorithms<sup><xref ref-type="bibr" rid="CR18">18</xref>–<xref ref-type="bibr" rid="CR20">20</xref></sup>. In the second step, layout, the generated read overlap graph is traversed to produce contigs, or contiguous sequences, that reconstruct the underlying genome. The last step, consensus, uses read alignments to infer the most likely nucleotide bases across contigs, and corrects the sequences accordingly<sup><xref ref-type="bibr" rid="CR21">21</xref>,<xref ref-type="bibr" rid="CR22">22</xref></sup>.</p>
    <p id="Par7">In recent years, a number of OLC-based de novo long-read genome assemblers have been developed that leverage the long-range evidence provided by the technology. These tools include Flye<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, Redbean<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>, and Shasta<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. Each tool brings a different innovation to the table, with implementations of the OLC paradigm aiming to reduce the computational cost and address the high error rates of long reads. For instance, Flye clusters the long reads that are likely to originate from the same genomic locus in a preprocessing step to reduce the number of pairwise comparisons<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>. Redbean segments each read into 256 bp tiling subsequences, reducing the dynamic programming matrix to a size of 65536 ( = 256 × 256), thus speeding up the pairwise alignment process<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>. On the other hand, to address the high error rate of long reads, Shasta compresses all homopolymers in the reads using run-length encoding, thereby removing all homopolymer expansion errors, one of the more common error types in the ONT data, and improving the accuracy of alignments in the overlap step of OLC<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. While these optimizations have reduced the time it takes to assemble the long sequencing reads and ultimately improve upon the quality of the generated genome assemblies, these tools still have a large memory footprint, requiring upwards of several hundred gigabytes of RAM for assembling a typical 50X human genome dataset.</p>
    <p id="Par8">Long sequencing reads have also enabled the haplotype phasing of haploid genome assemblies to better understand and characterize the genomic diversity of diploid and polyploid organisms<sup><xref ref-type="bibr" rid="CR23">23</xref></sup>. Existing OLC long-read genome assemblers, such as Shasta<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, and haplotype-aware genome assemblers, such as phasebook<sup><xref ref-type="bibr" rid="CR25">25</xref></sup> and Verkko<sup><xref ref-type="bibr" rid="CR26">26</xref></sup>, have been extended or developed to leverage long reads to produce diploid assemblies.</p>
    <p id="Par9">In this work, we present GoldRush, a memory-efficient long-read haploid de novo genome assembler that employs a novel long-read assembly algorithm, which runs in linear time in the number of reads. GoldRush is implemented as a modular pipeline with four main steps: GoldPath, GoldPolish, Tigmint-long<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR27">27</xref></sup>, and GoldChain<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR28">28</xref></sup>. GoldPath first iterates through the long reads and generates a “golden path”, selected sequences with a ~ 1X representation of the genome of interest. Because the output of GoldPath is a set of raw sequences (termed “goldtigs”), base errors in the golden path are resolved using GoldPolish, a long-read adaptation of the ntEdit+Sealer polishing protocol<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>. Next, misassemblies (due to chimeric reads) are corrected using Tigmint-long<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR27">27</xref></sup>. Finally, the corrected golden path is scaffolded using GoldChain to produce the output genome assembly<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR28">28</xref></sup> (Fig. <xref rid="Fig1" ref-type="fig">1a</xref> and Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref>). The golden path serves as the base assembly for the subsequent steps in GoldRush. Briefly, GoldPath iterates through the reads, querying each read against a dynamic and probabilistic multi-index Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref>,<xref ref-type="bibr" rid="CR31">31</xref></sup> (miBf) data structure in turn, and inserts selected sequence or skips over the read depending on the results of the query to generate multiple “silver paths”, which are &lt;1X representations of the target genome (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). The silver paths are then used as input for GoldPath to generate the golden path. Iteration over the long sequencing reads, as opposed to an all-vs-all alignment of reads, allows GoldRush to achieve a linear time complexity in the number of reads. We show that GoldRush produces contiguous and correct genome assemblies with a low memory footprint, and does so without read-to-read alignments, marking an important paradigm shift in the genome assembly of long sequencing reads.<fig id="Fig1"><label>Fig. 1</label><caption><title>Flowchart of GoldRush and GoldPath.</title><p><bold>a</bold> Raw long reads are first processed by GoldPath to generate the golden path, a ~1X representation of the genome. The golden path is then polished by GoldPolish and corrected for structural errors with Tigmint-long. Finally, GoldChain scaffolds the polished and corrected golden path to generate the final genome assembly. <bold>b</bold> GoldPath uses the input long sequencing reads or silver path sequences to initialize a miBf data structure. GoldPath then loops over the sequences, and queries each sequence against the miBf. If the sequence is found in the miBf, GoldPath skips it and resumes its iterations. Conversely, if the sequence is not found in the miBf, it is inserted into the miBf and added to the silver/golden path. When GoldPath is constructing a silver path, and if the silver path has not reached the threshold number of bases, GoldPath will continue recruiting bases from the input reads. If the threshold number of bases is reached, GoldPath will check if more silver paths need to be generated. If more silver paths are needed, GoldPath will create them using the same algorithm and parameters, otherwise, it will terminate. Five (by default) silver paths, each representing ~0.9X (by default) coverage of the target genome, are combined to generate a low-coverage subsample input for GoldPath to build the golden path. When creating the golden path, GoldPath will continue iterating over the sequences from the silver paths until all sequences are exhausted.</p></caption><graphic xlink:href="41467_2023_38716_Fig1_HTML" id="d32e448"/></fig></p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <p id="Par10">We assembled the genomes of three different human cell lines (NA24385, HG01243, and HG02055), <italic>Oryza sativa</italic> (rice), and <italic>Solanum lycopersicum</italic> (tomato) using GoldRush, Flye, Redbean, and Shasta, and compared the resulting genome assemblies using a variety of length contiguity metrics, genome assembly accuracy markers, including those reported by QUAST<sup><xref ref-type="bibr" rid="CR32">32</xref></sup>, BUSCO<sup><xref ref-type="bibr" rid="CR33">33</xref></sup>, the asmgene utility in minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>, and Merqury<sup><xref ref-type="bibr" rid="CR35">35</xref></sup>, and their resource usage (see Methods).</p>
    <sec id="Sec3">
      <title>Assembly performance</title>
      <p id="Par11">For the genome assemblies of all three human cell lines, GoldRush achieved NG50 lengths between 25.3 and 32.6 Mbp, comparable to both Shasta (29.7–39.6 Mbp) and Flye (26.6–38.8 Mbp), and typically three times more contiguous than the Redbean genome assemblies (8.0–10.9 Mbp) (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>). Two of the three human GoldRush genome assemblies (NA24385 and HG01243) also had the fewest extensive misassemblies (940 and 1057) among the tools tested; ~2–3 times fewer than Shasta (1682 and 3240), and ~5–7 times fewer than Redbean (4918 and 7052). Despite the relatively low number of structural misassemblies, the NGA50 length for each human GoldRush assembly is around 20 Mbp, indicating that some misassemblies are found in the larger scaffolds and breaking the alignment blocks (Fig. <xref rid="Fig2" ref-type="fig">2a</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>). In addition to assembling highly contiguous human genomes, GoldRush is also robust in assembling plant genomes, reaching 0.3 and 2.6 Mbp NGA50 lengths for <italic>O. sativa</italic> and <italic>S. lycopersicum</italic>, respectively (Fig. <xref rid="Fig2" ref-type="fig">2c</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">5</xref>). The <italic>O. sativa</italic> Shasta genome assembly, on the other hand, had scaffold NG50 and NGA50 lengths of 124,700 bp and 104,593 bp, respectively, only ~4.2 and ~3.6 times longer than the raw reads used as input (N50 = 29,349 bp) for genome assembly, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">6</xref>).<fig id="Fig2"><label>Fig. 2</label><caption><title>Contiguity, correctness, and resource usage of GoldRush assemblies compared to Flye, Redbean, and Shasta genome assemblies for three human individuals (NA24385, HG01243, and HG02055), <italic>O. sativa</italic>, and <italic>S. lycopersicum</italic>.</title><p>Human individuals NA24385, HG01243, and HG02055 are represented as circles, triangles, and squares, respectively, in <bold>a</bold> and <bold>b</bold>. <italic>O. sativa</italic> and <italic>S. lycopersicum</italic> are represented as circles and triangles, respectively, in <bold>c</bold> and <bold>d</bold>. GoldRush, Flye, Redbean, and Shasta are colored yellow, purple, red, and blue, respectively. The genome assemblies were assessed using QUAST for their contiguity and correctness. Extensive misassemblies and NGA50 length, as determined by QUAST, are shown on the horizontal and vertical axes, respectively, in <bold>a</bold> and <bold>c</bold>. Wall clock run time (h) and peak memory (GB) usage of the genome assembly processes were recorded using the unix <italic>time</italic> command and shown on the horizontal and vertical axes, respectively, in <bold>b</bold> and <bold>d</bold>.</p></caption><graphic xlink:href="41467_2023_38716_Fig2_HTML" id="d32e571"/></fig></p>
      <p id="Par12">GoldRush and Shasta assembled each of the three human genomes in less than a day, executing in 16.6–20.8 h and 4.1–5.0 h, respectively (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). Both Flye and Redbean required at least 33.7 h to assemble each of the three human genomes, with Redbean assembling two of the datasets (HG01243 and HG02055) in ~68 h, for each (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). GoldRush is also competitive in assembling the smaller plant genomes, requiring 1.6 and 7.4 h to assemble <italic>O. sativa</italic> and <italic>S. lycopersicum</italic>, respectively (Fig. <xref rid="Fig2" ref-type="fig">2d</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">10,</xref><xref rid="MOESM1" ref-type="media">11</xref>). GoldRush used, at most, 54.5 GB of RAM to assemble the three human genomes (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). In comparison, using the same data, Flye and Redbean used between 329.3–502.4 GB (six- to eight-fold more than GoldRush), and Shasta utilized 884.8–1009.2 GB (up to 20-fold more than GoldRush). Similarly, GoldRush required the least amount of RAM to assemble the <italic>O. sativa</italic> and <italic>S. lycopersicum</italic> datasets, using at most 45.3 GB (Fig. <xref rid="Fig2" ref-type="fig">2d</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">10</xref>, <xref rid="MOESM1" ref-type="media">11</xref>).</p>
    </sec>
    <sec id="Sec4">
      <title>GoldPolish base error correction</title>
      <p id="Par13">GoldPolish decreased the number of mismatches or indels per 100 kbp of the NA24385 golden path by ~6.5-fold (1463.7 to 228.5 and 1327.2 to 197.2, respectively) (Supplementary Table <xref rid="MOESM1" ref-type="media">12</xref>). This improvement in mismatches and indels translated into a recovery of 12,272 (89.1%) complete BUSCOs, fewer than the 12,920 (93.8%) and 12,988 (94.3%) complete BUSCOs in the Shasta and Flye NA24385 genome assemblies, respectively, but more than the 12,193 (88.5%) complete BUSCOs reconstructed in the Redbean NA24385 genome assembly (Supplementary Table <xref rid="MOESM1" ref-type="media">13</xref>). Of the 2461 duplicated genes observed in T2T-CHM13<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>, a complete telomere-to-telomere reference-grade human genome assembly, 845 were found in the GoldRush assembly in multiple copies, fewer than the 1717 and 1725 found in the Shasta and Flye genome assemblies, respectively, but greater than the 680 found in the Redbean genome assembly (Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">14</xref>).</p>
      <p id="Par14">When polishing the genome assemblies of the more erroneous human long-read datasets, HG01243 (estimated 9% error rate) and HG02055 (estimated 11% error rate), GoldPolish reduced the number of mismatches and indels per 100 kbp by 60.8 and 67.4% (to 1372.3 and 980.1) for the former, and by 53.6 and 60.5% (to 1981.7 and 1354.8) for the latter, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">6</xref>, <xref rid="MOESM1" ref-type="media">15,</xref><xref rid="MOESM1" ref-type="media">16</xref>). In comparison, the Flye, Redbean, and Shasta assemblies reported 148.7 and 110.6, 324.7 and 354.5, and 195.6 and 100.7 number of mismatches and indels per 100 kbp for HG01243, respectively, and 155.5 and 126.0, 346.1 and 379.1, and 210.2 and 103.9 number of mismatches and indels per 100 kbp for HG02055, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">2</xref>, <xref rid="MOESM1" ref-type="media">3</xref>). The results of running BUSCO on the HG01243 and HG02055 genome assemblies can be found in Supplementary Tables <xref rid="MOESM1" ref-type="media">17,</xref><xref rid="MOESM1" ref-type="media">18</xref>.</p>
      <p id="Par15">When substituting GoldPolish with Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> for polishing the same golden path, the polishing step of the GoldRush pipeline incurred a greater computational cost, requiring over an order of magnitude more memory (602.3 vs 11.0 GB RAM) and taking 19.3% longer (9.9 vs 8.3 h) to complete, but resulted in a more base-accurate genome assembly (157.0 mismatches per 100 kbp and 106.4 indels per 100 kbp) (Fig. <xref rid="Fig3" ref-type="fig">3</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">19</xref>–<xref rid="MOESM1" ref-type="media">21</xref>). The improvements in the base accuracy of the resulting NA24385 genome assembly also translated into a higher recovery of complete BUSCOs (12,752, 92.5% complete) (Supplementary Table <xref rid="MOESM1" ref-type="media">22</xref>). Polishing the NA24385 golden path with GoldPolish and Racon yielded QV (base quality value) statistics of 28.7 and 31.1, respectively, as assessed with Merqury (Supplementary Table <xref rid="MOESM1" ref-type="media">23</xref>).<fig id="Fig3"><label>Fig. 3</label><caption><title>Memory usage of the GoldRush stages when assembling human genome datasets (individuals NA24385, HG01243, and HG02055).</title><p>The average peak memory (GB) for each stage of the assembly of the three human genomes is shown, with the data points (open circles) indicating the peak memory of each assembly and the error bars indicating the standard deviation. Racon can optionally be used for long-read base polishing within GoldRush, if the onboard memory of the computer system is not limited.</p></caption><graphic xlink:href="41467_2023_38716_Fig3_HTML" id="d32e708"/></fig></p>
      <p id="Par16">To characterize the polishing performance of GoldPolish and Racon in repetitive genomic regions, we compared the resulting QV statistics of the polished assemblies, specifically looking at the statistics in non-repetitive and repetitive regions. GoldPolish polishing yielded QV statistics of 27.7 and 30.0 for non-repetitive and repetitive regions, respectively (Supplementary Table <xref rid="MOESM1" ref-type="media">24</xref>). Racon polishing led to QVs of 30.3 and 32.1 for non-repetitive and repetitive regions, respectively (Supplementary Table <xref rid="MOESM1" ref-type="media">25</xref>).</p>
    </sec>
  </sec>
  <sec id="Sec5" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par17">The GoldRush algorithm is straightforward: collect unique fragments representing the genome to generate a golden path, polish the fragments, correct them for structural misassemblies, and join the polished and corrected fragments together. As GoldRush is built upon this fundamental concept of the golden path, it represents a paradigm shift in the genome assembly of erroneous long reads, no longer requiring the time- and memory-intensive process of all-vs-all sequence alignments. Instead, the golden path, or a ~ 1X read fragment representation of the underlying genome, is constructed by iterating over the read set, and querying a progressive miBf database representing the golden path. We have shown that our genome assembly paradigm yields human genome assemblies that are comparable in contiguity to what can be obtained using different implementations of the OLC algorithm, yet with an order of magnitude smaller memory footprint.</p>
    <p id="Par18">The GoldRush algorithm was designed with no single long-read sequencing technology in mind, making it versatile and platform agnostic. The algorithm is robust to base errors, capable of assembling long-read datasets with estimated error rates ranging from 4 to 20%, and achieving NG50 and NGA50 lengths up to 32.6 and 22.2 Mbp, respectively, for the human data tested (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">6</xref>). GoldRush accomplishes this by mitigating the impact of base errors at various stages. For instance, GoldPath uses spaced seeds<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> to enable more sensitive detection of erroneous sequences originating from the same genomic locus. In addition, GoldPath only selects sequences with an average Phred<sup><xref ref-type="bibr" rid="CR39">39</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup> quality ≥15 (by default) for the silver and golden paths. The requirement ensures that the baseline assembly is composed of the higher-quality reads from the set, but may also prevent GoldPath from recruiting sequences derived from genomic loci with reads of insufficient quality. These regions, however, could be rescued downstream if GoldChain scaffolds over the region, as the gap-filling feature can recover the missing sequence. The average Phred quality threshold parameter could also be set to a lower value for more erroneous read datasets. For polishing the golden path sequences, GoldPolish accommodates the higher error rate of long reads by utilizing targeted Bloom filters<sup><xref ref-type="bibr" rid="CR30">30</xref></sup> populated with localized <italic>k</italic>-mers originating exclusively from mapped reads. This approach of using a targeted Bloom filter per goldtig enables the use of smaller <italic>k</italic>-mer sizes than those used for the original short-read focused ntEdit+Sealer protocol, thus increasing the polishing sensitivity and mitigating errors that would otherwise arise from the use of off-target <italic>k</italic>-mers. Further, the GoldRush algorithm can reconstruct duplicated genomic regions in the resulting genome assembly. In our tests, we observed that GoldRush reconstructed 34.3% of duplicated human genes in multiple copies, though this figure was higher in Flye and Shasta assemblies (Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">14</xref>). This is also recapitulated in the Merqury spectra-cn plots;<sup><xref ref-type="bibr" rid="CR35">35</xref></sup> the Flye and Shasta spectrum histograms more closely resemble those of the reference-grade quality NA24385 maternal and paternal genome assemblies<sup><xref ref-type="bibr" rid="CR41">41</xref></sup> in comparison to the GoldRush and Redbean spectrum histograms (Supplementary Fig. <xref rid="MOESM1" ref-type="media">3</xref>). Since GoldRush uses a completely different paradigm to assemble genomes, it also has different strengths when compared to OLC-based genome assemblers. For instance, in the <italic>O. sativa</italic> dataset, the N50 length of the reads is 29,349 bp, and a Shasta genome assembly of the data results in an assembly NGA50 length of 104,593 bp—roughly 3.6 times longer. In contrast, the NGA50 length of the GoldRush genome assembly is tenfold greater (307.9 kbp) than the read N50 length (Fig. <xref rid="Fig2" ref-type="fig">2c</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">6</xref>). However, when considering which tool performs best on all datasets, none consistently outperforms the other in all the metrics we measured (i.e., run time, memory usage, genome contiguity, genome completeness, and genome correctness).</p>
    <p id="Par19">Yet, GoldRush is consistently more memory-efficient in comparison to other tools in all the datasets tested. This provides the opportunity to assemble long-read data from human-sized or larger genomes to those who do not have access to server-class systems, especially as retail computers with 64 GB RAM or more become more accessible. The memory efficiency of GoldRush is mainly due to the use of the miBf data structure in the GoldPath stage. However, the published version of the miBf data structure<sup><xref ref-type="bibr" rid="CR31">31</xref></sup> was intended to serve as a static database, where the user first inserted all the items of interest, and subsequently used the database solely for query operations. For the purpose of GoldPath, we needed a memory-efficient data structure that could also be dynamic, with interleaved insert and query operations. To adjust the miBf for GoldPath, we disabled its ability to rescue information lost to hash collisions, a step that requires all the elements to be inserted, and renders the miBf static afterward. We compensated for this loss of information by using longer tile lengths, <italic>t</italic>. With longer tiles, there are more queries per given tile, and the increased number of queries would offset the loss of expected hits due to hash collisions.</p>
    <p id="Par20">GoldRush also assembles all the human datasets within a day and, together with Shasta, is faster than all other OLC genome assemblers tested herein. Shasta accomplishes this with heuristics based on MinHash markers to quickly identify potential read-to-read overlaps<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. On the other hand, GoldRush achieves this speed with the use of a genome assembly algorithm that has linear time complexity in the number of reads (Supplementary Note <xref rid="MOESM1" ref-type="media">1</xref>). Breaking down the time GoldRush spends for completing each stage, we observe that GoldRush devotes more time polishing the golden path with GoldPolish (Supplementary Tables <xref rid="MOESM1" ref-type="media">20</xref>, <xref rid="MOESM1" ref-type="media">26</xref>, <xref rid="MOESM1" ref-type="media">27</xref>), which is already heavily optimized. GoldPolish runs a background Bloom filter building process which continually produces Bloom filters from the mapped reads for the launched pipelines, minimizing waiting time between ending and starting a new polishing run (Supplementary Fig. <xref rid="MOESM1" ref-type="media">4</xref>). The GoldPath and GoldChain stages were also optimized to reduce the overall run time of GoldRush. GoldPath utilizes multiple independent silver paths to effectively generate a low-coverage subsample of the original dataset, such that the subset still covers the entire target genome. With enough silver paths, any sections of the genome that are missing in a given silver path should be recovered in the others. This enables GoldPath to generate a golden path without having to process the entire dataset, speeding up the golden path generation considerably.</p>
    <p id="Par21">Further, we observed that running additional rounds of ntLink in the GoldChain stage led to substantial improvements in the contiguity of the final assembly. However, re-mapping the long reads for each round was costly. To remedy this, we implemented a mapping liftover step, allowing ntLink to run multiple rounds of scaffolding without re-mapping the long reads, thus reducing the run time in each subsequent round (Supplementary Table <xref rid="MOESM1" ref-type="media">28</xref>). We also implemented two additional features, overlap detection, and gap-filling, in ntLink. While these were introduced specifically for the GoldChain stage of GoldRush, they are also applicable to the general use of ntLink. In earlier versions of ntLink, overlapping sequences were still concatenated end-to-end, which could result in local insertion misassemblies at the contig joints. With the overlap detection and overlap resolution feature, gap estimates from the earlier stages of ntLink are used to identify putative overlaps between adjacent goldtigs (indicated by negative gap estimates), and guide trimming of the overlapping sections. Overlapping goldtigs are expected in the golden path, as reads are evaluated on a tile-by-tile basis in GoldPath.</p>
    <p id="Par22">Polishing the resulting human assemblies with GoldPolish reduces the base error rates by 53.6–85.1%. GoldPolish is built on ntEdit+Sealer<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>, a <italic>k-</italic>mer-based base correction algorithm, and requires 2<italic>k</italic>–1 consecutive high-quality <italic>k</italic>-mers to correct base mismatches and indels. This requirement is geometrically harder to meet for datasets with higher error rates. In comparison, each of the genome assemblies generated by the Flye and Shasta algorithms has higher base-pair accuracy (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>, <xref rid="MOESM1" ref-type="media">6</xref>). In the Merqury spectra-cn plots, we observe that GoldRush has a greater number of unique <italic>k</italic>-mers not found in the high-quality short reads compared to competing tools, which is at least partially attributed to gap-filling with uncorrected read sequences (Supplementary Fig. <xref rid="MOESM1" ref-type="media">3</xref>).</p>
    <p id="Par23">With the recent release of the ONT Q20+ chemistry and its reported base accuracy of 99%, as well as the continual improvements in basecallers<sup><xref ref-type="bibr" rid="CR42">42</xref></sup> and <italic>k</italic>-mer-based genome analysis solutions<sup><xref ref-type="bibr" rid="CR43">43</xref></sup>, we expect GoldRush to capitalize on the improvements in these frontiers, and reduce the time spent correcting base errors. Indeed, for the human GoldRush tests, GoldPolish achieved its highest base quality with the fastest run time for the NA24385 dataset, which is estimated to be the least erroneous in our tests (4%) (Supplementary Tables <xref rid="MOESM1" ref-type="media">6</xref>, <xref rid="MOESM1" ref-type="media">12</xref>, <xref rid="MOESM1" ref-type="media">15</xref>, <xref rid="MOESM1" ref-type="media">16</xref>, <xref rid="MOESM1" ref-type="media">20</xref>, <xref rid="MOESM1" ref-type="media">26</xref>, <xref rid="MOESM1" ref-type="media">27</xref>). For this dataset, GoldPolish displayed a polishing performance similar to that of Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> (Supplementary Tables <xref rid="MOESM1" ref-type="media">12</xref>, <xref rid="MOESM1" ref-type="media">21</xref>, <xref rid="MOESM1" ref-type="media">23</xref>). Racon is computationally more expensive to run, due in part to the input reads and alignments being loaded into memory. In our tests, both GoldPolish and Racon correct repetitive regions better than non-repetitive regions (Supplementary Tables <xref rid="MOESM1" ref-type="media">24</xref>, <xref rid="MOESM1" ref-type="media">25</xref>).</p>
    <p id="Par24">Lastly, GoldRush is modular. Each step within GoldRush can be substituted for another tool that performs the equivalent function, such as substituting GoldPolish for Racon, allowing GoldRush to easily benefit from any future advances in the field. GoldRush also makes no assumptions about the quality of the input long reads, standing only to gain from future computing and sequencing improvements in the long-read sequencing domain.</p>
    <p id="Par25">We have demonstrated that our memory-efficient and modular long-read genome assembly pipeline, GoldRush, assembles long ONT reads into draft genomes with high contiguity, notably chromosome 18 telomere-to-telomere (HG02055) and several other chromosome arms (Supplementary Fig. <xref rid="MOESM1" ref-type="media">5</xref>). We also show that the genome assembly contiguities are comparable to what is achieved with current state-of-the-art tools, but GoldRush uses a fraction of the RAM, lowering the barrier to entry to human long-read genome assembly. With its modular design, memory efficiency, and robust performance in assembling large and complex genomes, we expect our assembly paradigm, and its first implementation, GoldRush, to both be beneficial to the scientific community and expand the reach of long sequencing reads.</p>
  </sec>
  <sec id="Sec6">
    <title>Methods</title>
    <sec id="Sec7">
      <title>GoldPath</title>
      <p id="Par26">To create the golden path, GoldPath first builds silver paths. A silver path is similar to the golden path, except it is an ~<italic>r</italic>X (default 0.9X) representation of the genome. The silver paths are combined to generate a low-coverage subsample of the reads. This subsample is then used as input to GoldPath to generate the golden path.</p>
      <p id="Par27">GoldPath builds the silver paths by using a modified miBf <sup><xref ref-type="bibr" rid="CR31">31</xref></sup>, a resource-efficient probabilistic data structure, to associate spaced seed (a pattern with care and don’t care positions) derived <italic>k</italic>-mers with the locus of the genome they are derived from. The miBf is composed of three data structures: a Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref></sup>, a rank array, and an ID array. The Bloom filter is first initialized with <italic>h</italic> (default 3) sets of spaced seed<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> derived <italic>k</italic>-mers from the input read set using ntHash<sup><xref ref-type="bibr" rid="CR44">44</xref>,<xref ref-type="bibr" rid="CR45">45</xref></sup>. Only reads that are at least <italic>m</italic> bp (default 20,000 bp) long and have an average Phred<sup><xref ref-type="bibr" rid="CR39">39</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup> quality score higher than <italic>P</italic> (default 15, representing 97% base accuracy or more, on average) are inserted into the Bloom filter. A rank array is then created to associate each set bit in the Bloom filter with a position in the empty ID array, sized based on the number of set bits in the Bloom filter.</p>
      <p id="Par28">The read set is then iteratively queried against the miBf data structure to determine if a read should be inserted into the miBf and, thus, the silver path. Once a read is processed and determined to contribute new base coverage to the silver path, the read is inserted into the miBf. The read is first split into tiles of length <italic>t</italic> bp (default 1000), and <italic>b</italic> (default 10) consecutive tiles are binned into one block. The spaced seed-derived <italic>k</italic>-mers from one block are hashed and a unique ID associated with the block, synonymous with a genomic locus, is inserted into the position of the miBf ID array that corresponds to the spaced seed-derived <italic>k</italic>-mer (Supplementary Fig. <xref rid="MOESM1" ref-type="media">6</xref>). By binning tiles into blocks, GoldPath clusters together the spaced seed-derived <italic>k</italic>-mers from a genomic region of length <italic>b</italic> × <italic>t</italic>. Each read that is inserted into the miBf is also saved to the silver path.</p>
      <p id="Par29">Like insertion, the querying process first splits the read into tiles of length <italic>t</italic>. The <italic>k</italic>-mers in these tiles are hashed using the same spaced seed patterns and queried against the miBf, then the associated ID hits within each tile are tallied in an ID-to-counts table. From these hits, a preliminary best ID hit is associated with each tile. The tiles are considered assigned (found) if the ID with the most hits exceeds a threshold <italic>x</italic> (default 10), or unassigned (not found) otherwise (Supplementary Fig. <xref rid="MOESM1" ref-type="media">7</xref>). Next, we improve the accuracy of the tile’s preliminary best hits by using information from the best hits of neighboring tiles along with the target tile’s own ID-to-counts table (Supplementary Fig. <xref rid="MOESM1" ref-type="media">8</xref> and Supplementary Method <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p id="Par30">Once GoldPath determines the final assignment of all the tiles in the read, it evaluates the read with three possible outcomes: skip, insert, or trim and insert. If all the tiles in the read are already assigned, the read is skipped since it does not contribute any new base information to the silver path. If all the tiles in the read are unassigned, the read is inserted into the miBf data structure and the silver path in its entirety. Finally, if the read has a mixture of assigned and unassigned tiles, the read is trimmed such that only one assigned tile on either side of the longest stretch of unassigned tiles is retained (Supplementary Fig. <xref rid="MOESM1" ref-type="media">9</xref>), and the trimmed read is inserted into both the miBf and silver path.</p>
      <p id="Par31">When the silver path contains or exceeds the threshold number of bases (default <italic>genome size</italic> × <italic>r</italic>), the current silver path is finalized, and a new silver path is initialized. The silver path creation continues until the input reads are exhausted or the number of completed silver paths reaches <italic>M</italic> (default 5). The golden path is then generated using the same algorithm and parameters used for the silver paths, except that the input is now the concatenated sequence files from the silver paths and the golden path is only complete when GoldPath has finished iterating through all of the silver path sequences. Sequences in the golden path construe the contigs of the initial genome assembly to be refined in the later steps of the pipeline, and are henceforth termed “goldtigs”.</p>
    </sec>
    <sec id="Sec8">
      <title>GoldPolish</title>
      <p id="Par32">After the golden path is built, the goldtigs are polished to correct mismatches and indels. The polishing protocol, GoldPolish, closely follows the ntEdit+Sealer protocol<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>, which has been shown to perform well using short sequencing reads. Unlike the currently published paradigm, which stores all the short-read <italic>k</italic>-mers in a single Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref></sup> used for correction, GoldPolish uses a targeted approach where each goldtig has a dedicated Bloom filter, each containing a hash representation of <italic>k</italic>-mers derived from long-read subsets.</p>
      <p id="Par33">To accomplish this, GoldPolish maps the long reads to goldtigs using, by default, minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>. GoldPolish is also capable of using mappings from other tools, such as ntLink<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. For each goldtig, the set of mapped reads are <italic>k</italic>-merized using a range of different <italic>k</italic>-mer lengths in order to benefit from a trade-off between specificity (longer <italic>k</italic>-mers) and sensitivity (shorter <italic>k</italic>-mers). These <italic>k</italic>-mers are then inserted into an array of Bloom filters, one Bloom filter for each <italic>k</italic>-mer size per goldtig. From this, we have a set of <italic>k</italic>-mers targeted to individual goldtigs that we can use with ntEdit<sup><xref ref-type="bibr" rid="CR46">46</xref></sup> and Sealer<sup><xref ref-type="bibr" rid="CR47">47</xref></sup> for polishing (Supplementary Fig. <xref rid="MOESM1" ref-type="media">10</xref>).</p>
      <p id="Par34">GoldPolish then polishes the goldtigs using the full ntEdit+Sealer pipeline on each individual goldtig using their dedicated Bloom filters. GoldPolish launches multiple ntEdit+Sealer pipelines in parallel to amortize the overhead introduced with each polishing run.</p>
    </sec>
    <sec id="Sec9">
      <title>GoldChain</title>
      <p id="Par35">After polishing and correcting the goldtigs, an updated version of the long-read genome scaffolder ntLink<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> is used to assemble the goldtigs. To utilize the long-read evidence in building longer sequences, the full long-read set is mapped to the goldtigs using a lightweight minimizer-based approach. Briefly, minimizer sketches are generated for the goldtigs as well as each read for a given <italic>k</italic>-mer size <italic>k</italic> and window size <italic>w</italic><sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. The goldtig minimizer sketches are indexed, and for each minimizer in the sketch of a given long-read, this index is queried to find hits between the long read and the goldtigs. Long-read mappings that span multiple goldtigs provide scaffolding evidence. This long-read evidence is stored as a scaffold graph, where the nodes are goldtigs, and the directed edges between the nodes represent evidence that the goldtigs should be joined. This scaffold graph is traversed using abyss-scaffold<sup><xref ref-type="bibr" rid="CR48">48</xref></sup>, a heuristic-based scaffold layout algorithm, to output the final, contiguated genome assembly.</p>
      <p id="Par36">Three important features have been added to ntLink (v1.3.0+) to adapt the functionality for the de novo long-read genome assembly problem in GoldRush: overlap detection, gap-filling, and scaffolding rounds based on the liftover of sequence mappings.</p>
      <p id="Par37">For the sequence pairs with putative overlaps, minimizer sketches are generated with a lower <italic>k</italic> and <italic>w</italic> than the initial ntLink pairing stage to increase the sensitivity of overlap detection (parameters <italic>small_k</italic>, <italic>small_w</italic>, defaults 15 and 10, respectively). These sketches are filtered to retain minimizers that fall in the estimated overlapping region with a multiplicity of one in each sequence, ensuring that only non-repetitive minimizers in the sequences are retained. These minimizers are then used to create an undirected minimizer graph, similar to methods employed by the reference-guided scaffolder ntJoin<sup><xref ref-type="bibr" rid="CR49">49</xref></sup>. In this graph, the minimizers are nodes, and edges between the minimizers indicate that the minimizers are adjacent in at least one of the ordered sequence minimizer sketches, with the edge weights indicating the number of sequences that have that minimizer adjacency. This minimizer graph is filtered to retain edges with a weight of 2, which removes branches and results in a graph consisting of linear path components. Each linear path is a minimizer-based mapping between the putatively overlapping sequence ends. The middle minimizer from the longest mapping is chosen to anchor the sequences to one another, and the coordinates of this minimizer guide the trimming of the detected overlapping regions on the incident sequences. Finally, after this trimming, the sequences are concatenated (Supplementary Fig. <xref rid="MOESM1" ref-type="media">11</xref>).</p>
      <p id="Par38">The second major feature added to ntLink uses the mapped long reads to fill gaps between the scaffolded goldtigs. The verbose option in the initial ntLink pairing stage was updated to output the complete long-read mapping information, including the mapped goldtigs and the minimizers (including position and strand on the goldtig and read). For each sequence join induced by ntLink, the verbose mapping information is parsed to identify each read that supports that join, and the associated mapped minimizers (“pass 1 minimizers”). The read with the highest average number of mapped pass 1 minimizers is chosen and subsequently used to fill the scaffold gap. As finding anchoring minimizers as close to the sequence ends as possible is preferred, each chosen read is re-mapped to the flanking sequences using a lower <italic>k</italic> and <italic>w</italic> for increased sensitivity (“pass 2 minimizers”). If the mapping is unambiguous, the anchoring pass 2 minimizers closest to the sequence ends are used as cut points for the flanking sequences and the read sequence filling the gap. Otherwise, the pass 1 minimizers are used to determine the gap-filling coordinates (Supplementary Fig. <xref rid="MOESM1" ref-type="media">12</xref>). Gap-filling is turned on in GoldRush by default and is run when the target “gap_fill” is specified to the ntLink command.</p>
      <p id="Par39">Finally, liftover-based rounds were integrated into the ntLink code base. We added a step to liftover the mapped minimizer coordinates in the verbose mapping file (described above) from the initial goldtigs to the sequences post-scaffolding. This new mapping file is then input to the ntLink pairing stage in the subsequent ntLink round, which uses the input mapping coordinates instead of re-mapping the reads to infer the scaffold graph. The remaining steps in the ntLink pipeline then proceed as previously described. To invoke these liftover-based rounds, we provided a Makefile “ntLink_rounds”, which runs a specified number of rounds of ntLink (parameter <italic>rounds</italic>, default 5), lifting over the mapping coordinates between each iteration.</p>
    </sec>
    <sec id="Sec10">
      <title>Implementation</title>
      <p id="Par40">The GoldRush pipeline is driven by a Makefile. GoldPath and GoldPolish are coded in C++, and GoldChain is coded in Python. All components of GoldRush utilize the btllib common code library<sup><xref ref-type="bibr" rid="CR50">50</xref></sup>. The tool can be installed from GitHub or using the conda package manager. Instructions on how to run the GoldRush pipeline are provided on the GitHub page (<ext-link ext-link-type="uri" xlink:href="https://github.com/bcgsc/goldrush">https://github.com/bcgsc/goldrush</ext-link>). Many of the GoldRush parameters are supplied with default values and can be configured. Only the genome size of the target species and the long reads in a single, uncompressed, multi-FASTQ file are required as input.</p>
    </sec>
    <sec id="Sec11">
      <title>Evaluation</title>
      <p id="Par41">To evaluate the performance of GoldRush (v1.0.0), we assembled five genomes from ONT long-read data for three human cell lines (NA24385, HG01243, and HG02055), <italic>O. sativa</italic>, and <italic>S. lycopersicum</italic> (Supplementary Table <xref rid="MOESM1" ref-type="media">6</xref>). We optimized the parameters of GoldRush for each dataset (Supplementary Figs. <xref rid="MOESM1" ref-type="media">13</xref>–<xref rid="MOESM1" ref-type="media">17</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">29</xref>). In a separate trial, we also polished the golden paths with Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> (v1.5.0) instead of GoldPolish. To assess the polishing performance of GoldPolish and Racon in repetitive and non-repetitive regions of the genome, we first masked the repeats in the assemblies using RepeatMasker<sup><xref ref-type="bibr" rid="CR51">51</xref></sup> (v4.1.2) (-e ncbi -species human). Then, to generate an assembly where the non-repetitive regions are masked, we used the complement of the masked repetitive regions. These masked assemblies were then used to compare the polishing performance of GoldPolish and Racon in the repetitive and non-repetitive genomic regions. To compare the performance of GoldRush to current state-of-the-art long-read genome assemblers, we assembled all five datasets with Flye, Redbean, and Shasta. We ran both Flye (v2.9) and Redbean (v2.5) using their default parameters, and Shasta (v0.10.0) using the Nanopore-Plants-Apr2021.conf configuration file for <italic>O. sativa</italic> and Nanopore-May2022.conf for the other datasets.</p>
      <p id="Par42">All assemblies were analysed using QUAST<sup><xref ref-type="bibr" rid="CR32">32</xref></sup> (v5.0.2) (--fast --large --scaffold-gap-max-size 100000 --min-identity 80 --split-scaffold), and the corresponding reference genome (Supplementary Table <xref rid="MOESM1" ref-type="media">30</xref>). To assess the contiguity and correctness of the assemblies, we report the NG50 and NGA50 length metrics, and the number of extensive misassemblies (as defined by QUAST). The NG50 length statistic describes that 50% of the genome size is in sequences of NG50 length or longer. The NGA50 length statistic is similar to the NG50 length, but uses alignment blocks instead of sequence lengths for the calculation. To assess the base qualities of the various assemblies, we report the number of mismatches or indels per 100 kbp from QUAST, spectra-cn plots, and QV from Merqury<sup><xref ref-type="bibr" rid="CR35">35</xref></sup> (v1.3.0) — the latter a proxy for the log-scaled probability of error for the consensus base calls — using short reads and reference-grade genome assemblies as a comparison (Supplementary Table <xref rid="MOESM1" ref-type="media">31</xref>). We also ran BUSCO<sup><xref ref-type="bibr" rid="CR33">33</xref></sup> (v5.3.2) using the primates_odb10 lineage to assess the completeness of the human assemblies in the gene space. Finally, to measure the presence of duplicated genes found in the assemblies, we used the asmgene utility in minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup> (v2.24) (min coverage = 0.99 and min identity = [0.90, 0.99]) using all cDNA sequences annotated in the GRCh38 human reference from Ensembl<sup><xref ref-type="bibr" rid="CR52">52</xref></sup> (release 87) and the T2T-CHM13<sup><xref ref-type="bibr" rid="CR36">36</xref></sup> (v1.1) genome assembly as the “ground truth” for which genes are considered duplicated. All benchmarking tests were performed on a server-class system with 144 Intel(R) Xeon(R) Gold 6254 CPU @ 3.1 GHz with 2.9 TB RAM.</p>
    </sec>
    <sec id="Sec12">
      <title>Reporting summary</title>
      <p id="Par43">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Portfolio Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec13">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2023_38716_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2023_38716_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="41467_2023_38716_MOESM3_ESM.pdf">
            <caption>
              <p>Reporting Summary</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>These authors contributed equally: Johnathan Wong, Lauren Coombe.</p>
    </fn>
    <fn>
      <p>These authors jointly supervised this work: René L Warren, Inanç Birol.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-023-38716-x.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>This study is supported by the Canadian Institutes of Health Research (CIHR) [PJT-183608, I.B.]; and the National Institutes of Health [2R01HG007182-04A1, I.B.]. The content of this article is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health or other funding organizations. The funding organizations did not have a role in the design of the study, the collection, analysis and interpretation of the data, or in writing the manuscript.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>I.B. and R.L.W. conceived the study. J.W., L.C., and V.N. implemented the algorithms. J.W., L.C., E.Z., and P.S. analysed the data. K.M.N. provided input on the design of the algorithm. J.W., L.C., and V.N. created figures and tables with input from co-authors. J.W., L.C., R.L.W., and I.B. wrote the manuscript. R.L.W. and I.B. supervised the research. All authors commented on the manuscript.</p>
  </notes>
  <notes notes-type="peer-review">
    <title>Peer review</title>
    <sec id="FPar1">
      <title>Peer review information</title>
      <p id="Par44"><italic>Nature Communications</italic> thanks Benjamin Istace and the other, anonymous, reviewer(s) for their contribution to the peer review of this work. A peer review file is available.</p>
    </sec>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>The GoldRush, Flye, Redbean, and Shasta genome assemblies generated in this study have been deposited in Zenodo at 10.5281/zenodo.7884681<sup><xref ref-type="bibr" rid="CR53">53</xref></sup>. The GoldRush genome assemblies generated for the parameter sweep experiments in Supplementary Figs. <xref rid="MOESM1" ref-type="media">13</xref>–<xref rid="MOESM1" ref-type="media">17</xref> are available upon request. The accession codes or location of sequencing data used for assembling the draft genomes are listed in Supplementary Table <xref rid="MOESM1" ref-type="media">6</xref>. The accession codes of the reference genomes and the short-read dataset used to benchmark GoldRush and comparators’ genome assemblies are provided in Supplementary Tables <xref rid="MOESM1" ref-type="media">30</xref>–<xref rid="MOESM1" ref-type="media">33</xref>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>GoldRush (v1.0.0) has been deposited in Zenodo at 10.5281/zenodo.7884291<sup><xref ref-type="bibr" rid="CR54">54</xref></sup>. GoldRush is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/bcgsc/goldrush">https://github.com/bcgsc/goldrush</ext-link> and released under the GPL-3 license.</p>
  </notes>
  <notes id="FPar2" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par45">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Repetitive DNA and next-generation sequencing: computational challenges and solutions</article-title>
        <source>Nat. Rev. Genet.</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>36</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg3117</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Haubold</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wiehe</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>How repetitive are genomes?</article-title>
        <source>BMC Bioinform.</source>
        <year>2006</year>
        <volume>7</volume>
        <fpage>541</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-7-541</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>de Koning</surname>
            <given-names>APJ</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Castoe</surname>
            <given-names>TA</given-names>
          </name>
          <name>
            <surname>Batzer</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Pollock</surname>
            <given-names>DD</given-names>
          </name>
        </person-group>
        <article-title>Repetitive elements may comprise over two-thirds of the human genome</article-title>
        <source>PLoS Genet.</source>
        <year>2011</year>
        <volume>7</volume>
        <fpage>e1002384</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pgen.1002384</pub-id>
        <?supplied-pmid 22144907?>
        <pub-id pub-id-type="pmid">22144907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Afshinfard</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Physlr: next-generation physical maps</article-title>
        <source>DNA</source>
        <year>2022</year>
        <volume>2</volume>
        <fpage>116</fpage>
        <lpage>130</lpage>
        <pub-id pub-id-type="doi">10.3390/dna2020009</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ARKS: chromosome-scale scaffolding of human genome drafts with linked read kmers</article-title>
        <source>BMC Bioinform.</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>234</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-018-2243-x</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Putnam</surname>
            <given-names>NH</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Chromosome-scale shotgun assembly using an in vitro method for long-range linkage</article-title>
        <source>Genome Res.</source>
        <year>2016</year>
        <volume>26</volume>
        <fpage>342</fpage>
        <lpage>350</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.193474.115</pub-id>
        <?supplied-pmid 26848124?>
        <pub-id pub-id-type="pmid">26848124</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LongStitch: high-quality genome assembly correction and scaffolding using long reads</article-title>
        <source>BMC Bioinform.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>534</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-021-04451-7</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Qin</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LRScaf: improving draft genomes using long noisy reads</article-title>
        <source>BMC Genomics</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>955</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-019-6337-2</pub-id>
        <?supplied-pmid 31818249?>
        <pub-id pub-id-type="pmid">31818249</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Adewale, B. Will long-read sequencing technologies replace short-read sequencing technologies in the next 10 years? <italic>Afr. J. Lab Med.</italic><bold>9</bold>, 1340 (2020).</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sakamoto</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zaha</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Suzuki</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Seki</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Suzuki</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Application of long-read sequencing to the detection of structural variants in human cancer genomes</article-title>
        <source>Comput. Struct. Biotechnol. J.</source>
        <year>2021</year>
        <volume>19</volume>
        <fpage>4207</fpage>
        <lpage>4216</lpage>
        <pub-id pub-id-type="doi">10.1016/j.csbj.2021.07.030</pub-id>
        <?supplied-pmid 34527193?>
        <pub-id pub-id-type="pmid">34527193</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bongartz</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Resolving repeat families with long reads</article-title>
        <source>BMC Bioinform.</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>232</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-019-2807-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chiu</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rajan-Babu</surname>
            <given-names>I-S</given-names>
          </name>
          <name>
            <surname>Friedman</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Straglr: discovering and genotyping tandem repeat expansions using whole genome long-read sequences</article-title>
        <source>Genome Biol.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>224</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02447-3</pub-id>
        <?supplied-pmid 34389037?>
        <pub-id pub-id-type="pmid">34389037</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparison of structural variants detected by PacBio-CLR and ONT sequencing in pear</article-title>
        <source>BMC Genomics</source>
        <year>2022</year>
        <volume>23</volume>
        <fpage>830</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-022-09074-7</pub-id>
        <?supplied-pmid 36517766?>
        <pub-id pub-id-type="pmid">36517766</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hon</surname>
            <given-names>T</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Highly accurate long-read HiFi sequencing data for five complex genomes</article-title>
        <source>Sci. Data</source>
        <year>2020</year>
        <volume>7</volume>
        <fpage>399</fpage>
        <pub-id pub-id-type="doi">10.1038/s41597-020-00743-4</pub-id>
        <?supplied-pmid 33203859?>
        <pub-id pub-id-type="pmid">33203859</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dohm</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Stralis-Pavese</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Himmelbauer</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Benchmarking of long-read correction methods</article-title>
        <source>NAR Genom. Bioinform.</source>
        <year>2020</year>
        <volume>2</volume>
        <fpage>lqaa037</fpage>
        <pub-id pub-id-type="doi">10.1093/nargab/lqaa037</pub-id>
        <?supplied-pmid 33575591?>
        <pub-id pub-id-type="pmid">33575591</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Deng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Nanopore long-read-only metagenomics enables complete and high-quality genome reconstruction from mock and complex metagenomes</article-title>
        <source>Microbiome</source>
        <year>2022</year>
        <volume>10</volume>
        <fpage>209</fpage>
        <pub-id pub-id-type="doi">10.1186/s40168-022-01415-8</pub-id>
        <?supplied-pmid 36457010?>
        <pub-id pub-id-type="pmid">36457010</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Luo, J. et al. Systematic benchmarking of nanopore Q20+ kit in SARS-CoV-2 whole genome sequencing. <italic>Front. Microbiol</italic>. <bold>13</bold>, 973367 (2022).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2019</year>
        <volume>37</volume>
        <fpage>540</fpage>
        <lpage>546</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0072-8</pub-id>
        <?supplied-pmid 30936562?>
        <pub-id pub-id-type="pmid">30936562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate long-read assembly with wtdbg2</article-title>
        <source>Nat. Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <fpage>155</fpage>
        <lpage>158</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0669-3</pub-id>
        <?supplied-pmid 31819265?>
        <pub-id pub-id-type="pmid">31819265</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shafin</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2020</year>
        <volume>38</volume>
        <fpage>1044</fpage>
        <lpage>1053</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-020-0503-6</pub-id>
        <?supplied-pmid 32686750?>
        <pub-id pub-id-type="pmid">32686750</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wajid</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Serpedin</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Review of general algorithmic features for genome assemblers for next generation sequencers</article-title>
        <source>Genom. Proteom. Bioinform.</source>
        <year>2012</year>
        <volume>10</volume>
        <fpage>58</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gpb.2012.05.006</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>Z</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparison of the two major classes of assembly algorithms: overlap–layout–consensus and de-bruijn-graph</article-title>
        <source>Brief. Funct. Genomics</source>
        <year>2012</year>
        <volume>11</volume>
        <fpage>25</fpage>
        <lpage>37</lpage>
        <pub-id pub-id-type="doi">10.1093/bfgp/elr035</pub-id>
        <?supplied-pmid 22184334?>
        <pub-id pub-id-type="pmid">22184334</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schrinner</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Haplotype threading: accurate polyploid phasing from long reads</article-title>
        <source>Genome Biol.</source>
        <year>2020</year>
        <volume>21</volume>
        <fpage>252</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02158-1</pub-id>
        <?supplied-pmid 32951599?>
        <pub-id pub-id-type="pmid">32951599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Lorig-Roach, R. et al. Phased nanopore assembly with Shasta and modular graph phasing with GFAse. Preprint at <italic>bioRxiv</italic>10.1101/2023.02.21.529152 (2023)</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Luo</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Kang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Schönhuth</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>phasebook: haplotype-aware de novo assembly of diploid genomes from long reads</article-title>
        <source>Genome Biol.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>299</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02512-x</pub-id>
        <?supplied-pmid 34706745?>
        <pub-id pub-id-type="pmid">34706745</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Rautiainen, M. et al. Telomere-to-telomere assembly of diploid chromosomes with Verkko. <italic>Nat. Biotechnol.</italic>10.1038/s41587-023-01662-6 (2023)</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tigmint: correcting assembly errors using linked reads from large molecules</article-title>
        <source>BMC Bioinforma.</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>393</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-018-2425-6</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Coombe, L., Warren, R. L., Wong, J., Nikolic, V. &amp; Birol, I. ntLink: A toolkit for de novo genome assembly scaffolding and mapping using long reads. <italic>Curr. Protoc.</italic><bold>3</bold>, e733 (2023).</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>JX</given-names>
          </name>
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>L. ntEdit+Sealer: efficient targeted error resolution and automated finishing of long-read genome assemblies</article-title>
        <source>Curr. Protoc.</source>
        <year>2022</year>
        <volume>2</volume>
        <fpage>e442</fpage>
        <pub-id pub-id-type="doi">10.1002/cpz1.442</pub-id>
        <?supplied-pmid 35567771?>
        <pub-id pub-id-type="pmid">35567771</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bloom</surname>
            <given-names>BH</given-names>
          </name>
        </person-group>
        <article-title>Space/time trade-offs in hash coding with allowable errors</article-title>
        <source>Commun. ACM</source>
        <year>1970</year>
        <volume>13</volume>
        <fpage>422</fpage>
        <lpage>426</lpage>
        <pub-id pub-id-type="doi">10.1145/362686.362692</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mismatch-tolerant, alignment-free sequence classification using multiple spaced seeds and multiindex Bloom filters</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2020</year>
        <volume>117</volume>
        <fpage>16961</fpage>
        <lpage>16968</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1903436117</pub-id>
        <?supplied-pmid 32641514?>
        <pub-id pub-id-type="pmid">32641514</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Versatile genome assembly evaluation with QUAST-LG</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>i142</fpage>
        <lpage>i150</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty266</pub-id>
        <?supplied-pmid 29949969?>
        <pub-id pub-id-type="pmid">29949969</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simão</surname>
            <given-names>FA</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Ioannidis</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kriventseva</surname>
            <given-names>EV</given-names>
          </name>
          <name>
            <surname>Zdobnov</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>BUSCO: assessing genome assembly and annotation completeness with single-copy orthologs</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <fpage>3210</fpage>
        <lpage>3212</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv351</pub-id>
        <?supplied-pmid 26059717?>
        <pub-id pub-id-type="pmid">26059717</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>3094</fpage>
        <lpage>3100</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id>
        <?supplied-pmid 29750242?>
        <pub-id pub-id-type="pmid">29750242</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rhie</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Merqury: reference-free quality, completeness, and phasing assessment for genome assemblies</article-title>
        <source>Genome Biol.</source>
        <year>2020</year>
        <volume>21</volume>
        <fpage>245</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02134-9</pub-id>
        <?supplied-pmid 32928274?>
        <pub-id pub-id-type="pmid">32928274</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The complete sequence of a human genome</article-title>
        <source>Science</source>
        <year>2022</year>
        <volume>376</volume>
        <fpage>44</fpage>
        <lpage>53</lpage>
        <pub-id pub-id-type="doi">10.1126/science.abj6987</pub-id>
        <?supplied-pmid 35357919?>
        <pub-id pub-id-type="pmid">35357919</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vaser</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sović</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Šikić</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>
        <source>Genome Res.</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>737</fpage>
        <lpage>746</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>
        <?supplied-pmid 28100585?>
        <pub-id pub-id-type="pmid">28100585</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Tromp</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>PatternHunter: faster and more sensitive homology search</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>440</fpage>
        <lpage>445</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.3.440</pub-id>
        <?supplied-pmid 11934743?>
        <pub-id pub-id-type="pmid">11934743</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Base-calling of automated sequencer traces using phred. II. Error probabilities</article-title>
        <source>Genome Res.</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>186</fpage>
        <lpage>194</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.8.3.186</pub-id>
        <?supplied-pmid 9521922?>
        <pub-id pub-id-type="pmid">9521922</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hillier</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wendl</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Base-calling of automated sequencer traces using phred. I. Accuracy assessment</article-title>
        <source>Genome Res.</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>175</fpage>
        <lpage>185</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.8.3.175</pub-id>
        <?supplied-pmid 9521921?>
        <pub-id pub-id-type="pmid">9521921</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jarvis</surname>
            <given-names>ED</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Semi-automated assembly of high-quality diploid human reference genomes</article-title>
        <source>Nature</source>
        <year>2022</year>
        <volume>611</volume>
        <fpage>519</fpage>
        <lpage>531</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-022-05325-5</pub-id>
        <?supplied-pmid 36261518?>
        <pub-id pub-id-type="pmid">36261518</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Performance of neural network basecalling tools for Oxford Nanopore sequencing</article-title>
        <source>Genome Biol.</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>129</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1727-y</pub-id>
        <?supplied-pmid 31234903?>
        <pub-id pub-id-type="pmid">31234903</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sahlin</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Effective sequence similarity detection with strobemers</article-title>
        <source>Genome Res.</source>
        <year>2021</year>
        <volume>31</volume>
        <fpage>2080</fpage>
        <lpage>2094</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.275648.121</pub-id>
        <?supplied-pmid 34667119?>
        <pub-id pub-id-type="pmid">34667119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mohamadi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ntHash: recursive nucleotide hashing</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <fpage>3492</fpage>
        <lpage>3494</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw397</pub-id>
        <?supplied-pmid 27423894?>
        <pub-id pub-id-type="pmid">27423894</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Kazemi, P. et al. ntHash2: recursive spaced seed hashing for nucleotide sequences. <italic>Bioinformatics</italic>10.1093/bioinformatics/btac564 (2022).</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ntEdit: scalable genome sequence polishing</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>35</volume>
        <fpage>4430</fpage>
        <lpage>4432</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz400</pub-id>
        <?supplied-pmid 31095290?>
        <pub-id pub-id-type="pmid">31095290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paulino</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Sealer: a scalable gap-closing application for finishing draft genomes</article-title>
        <source>BMC Bioinform.</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>230</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-015-0663-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ABySS 2.0: resource-efficient assembly of large genomes using a Bloom filter</article-title>
        <source>Genome Res.</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>768</fpage>
        <lpage>777</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214346.116</pub-id>
        <?supplied-pmid 28232478?>
        <pub-id pub-id-type="pmid">28232478</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Nikolić</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>L. ntJoin: fast and lightweight assembly-guided scaffolding using minimizer graphs</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <fpage>3885</fpage>
        <lpage>3887</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa253</pub-id>
        <?supplied-pmid 32311025?>
        <pub-id pub-id-type="pmid">32311025</pub-id>
      </element-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nikolić</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>btllib: a C++ library with Python interface for efficient genomic sequence processing</article-title>
        <source>J. Open Source Softw.</source>
        <year>2022</year>
        <volume>7</volume>
        <fpage>4720</fpage>
        <pub-id pub-id-type="doi">10.21105/joss.04720</pub-id>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <mixed-citation publication-type="other">Smit, A. F. A., Hubley, R. &amp; Green, P. RepeatMasker open-4.0. <ext-link ext-link-type="uri" xlink:href="http://www.repeatmasker.org">http://www.repeatmasker.org</ext-link> (2013–2015).</mixed-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cunningham</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ensembl 2022</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2022</year>
        <volume>50</volume>
        <fpage>D988</fpage>
        <lpage>D995</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1049</pub-id>
        <?supplied-pmid 34791404?>
        <pub-id pub-id-type="pmid">34791404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <mixed-citation publication-type="other">Wong, J. et al. Linear time complexity de novo long read genome assembly with GoldRush. <italic>Zenodo</italic>10.5281/ZENODO.7884681 (2023).</mixed-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <mixed-citation publication-type="other">Wong, J. et al. Linear time complexity de novo long read genome assembly with GoldRush. <italic>Zenodo</italic>10.5281/ZENODO.7884291 (2022).</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10202940</article-id>
    <article-id pub-id-type="pmid">37217507</article-id>
    <article-id pub-id-type="publisher-id">38716</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-023-38716-x</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Linear time complexity de novo long read genome assembly with GoldRush</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes" equal-contrib="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1687-8972</contrib-id>
        <name>
          <surname>Wong</surname>
          <given-names>Johnathan</given-names>
        </name>
        <address>
          <email>jowong@bcgsc.ca</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-7518-2326</contrib-id>
        <name>
          <surname>Coombe</surname>
          <given-names>Lauren</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2992-9935</contrib-id>
        <name>
          <surname>Nikolić</surname>
          <given-names>Vladimir</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhang</surname>
          <given-names>Emily</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1574-3363</contrib-id>
        <name>
          <surname>Nip</surname>
          <given-names>Ka Ming</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sidhu</surname>
          <given-names>Puneet</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9890-2293</contrib-id>
        <name>
          <surname>Warren</surname>
          <given-names>René L.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0950-7839</contrib-id>
        <name>
          <surname>Birol</surname>
          <given-names>Inanç</given-names>
        </name>
        <address>
          <email>ibirol@bcgsc.ca</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.434706.2</institution-id><institution-id institution-id-type="ISNI">0000 0004 0410 5424</institution-id><institution>Canada’s Michael Smith Genome Sciences Centre, BC Cancer, </institution></institution-wrap>Vancouver, BC V5Z 4S6 Canada </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>22</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>22</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>14</volume>
    <elocation-id>2906</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>11</day>
        <month>5</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Current state-of-the-art de novo long read genome assemblers follow the Overlap-Layout-Consensus paradigm. While read-to-read overlap – its most costly step – was improved in modern long read genome assemblers, these tools still often require excessive RAM when assembling a typical human dataset. Our work departs from this paradigm, foregoing all-vs-all sequence alignments in favor of a dynamic data structure implemented in GoldRush, a de novo long read genome assembly algorithm with linear time complexity. We tested GoldRush on Oxford Nanopore Technologies long sequencing read datasets with different base error profiles sourced from three human cell lines, rice, and tomato. Here, we show that GoldRush achieves assembly scaffold NGA50 lengths of 18.3-22.2, 0.3 and 2.6 Mbp, for the genomes of human, rice, and tomato, respectively, and assembles each genome within a day, using at most 54.5 GB of random-access memory, demonstrating the scalability of our genome assembly paradigm and its implementation.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Current state-of-the-art de novo long read genome assemblers follow the Overlap-Layout-Consensus paradigm. GoldRush departs from this paradigm, generating highly contiguous assemblies with linear time complexity and using an order of magnitude less RAM than state-of-the-art methods.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Genome assembly algorithms</kwd>
      <kwd>Software</kwd>
      <kwd>Genome assembly algorithms</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Limited 2023</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">Short-read genome assembly methods typically struggle to resolve sequence repeats and often fail to generate assemblies that reach chromosome-scale<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. Both prokaryotic and eukaryotic genomes can contain a large proportion of repeats<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, with the human genome estimated to be 66–69% repetitive<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. Thus, it is imperative that these repetitive regions be sufficiently resolved for a successful de novo genome assembly. Innovations in bioinformatics have emerged to address this challenge, leveraging long-range evidence afforded by various data types, including linked reads<sup><xref ref-type="bibr" rid="CR4">4</xref>,<xref ref-type="bibr" rid="CR5">5</xref></sup>, Hi-C<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, and long sequencing reads<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR8">8</xref></sup>.</p>
    <p id="Par4">Long-read sequencing technology has become increasingly prevalent in recent years. Sequencing throughput, affordability, and the long-read lengths are some of the key reasons<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>. The long-read lengths, ranging from kilobases to megabases, enable better resolution of structural variants<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> and long repeats<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>. Long reads also enable correct and accurate identification of tandem repeat expansions<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>.</p>
    <p id="Par5">Oxford Nanopore Technologies (ONT), Plc. (Oxford, UK) and Pacific Biosciences (PacBio), Inc. (Menlo Park, USA) are currently the two preeminent providers of commercial long-read sequencing technology. PacBio generally produces long reads with lower base errors (8–13% and &lt;1% for Continuous Long Reads (CLR) and HiFi, respectively), but with shorter read lengths (typically averaging 30–60 kbp and 10–25 kbp for CLR and HiFi, respectively)<sup><xref ref-type="bibr" rid="CR13">13</xref>,<xref ref-type="bibr" rid="CR14">14</xref></sup> compared to that of ONT (typically 10–100+ kbp)<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. Yet, high error rates (1–13%) in ONT reads remain a challenging obstacle to de novo genome assembly<sup><xref ref-type="bibr" rid="CR15">15</xref>–<xref ref-type="bibr" rid="CR17">17</xref></sup>. Unlike the de novo genome assembly strategies designed for short reads, both long-read sequencing technologies— and especially ONT, require algorithms and data structures that can accommodate mismatches and indels in the sequencing data.</p>
    <p id="Par6">Most long-read genome assemblers follow the Overlap-Layout-Consensus paradigm (OLC), a quadratic run time algorithm in its naïve implementation. OLC consists of three steps. The first step, overlap, typically generates an overlap graph by computing the pairwise alignment of all reads. As datasets often contain tens of millions of reads, finding and storing the detected overlaps is the most computationally- and memory-intensive step in the OLC paradigm, and has been the target of recent innovative algorithms<sup><xref ref-type="bibr" rid="CR18">18</xref>–<xref ref-type="bibr" rid="CR20">20</xref></sup>. In the second step, layout, the generated read overlap graph is traversed to produce contigs, or contiguous sequences, that reconstruct the underlying genome. The last step, consensus, uses read alignments to infer the most likely nucleotide bases across contigs, and corrects the sequences accordingly<sup><xref ref-type="bibr" rid="CR21">21</xref>,<xref ref-type="bibr" rid="CR22">22</xref></sup>.</p>
    <p id="Par7">In recent years, a number of OLC-based de novo long-read genome assemblers have been developed that leverage the long-range evidence provided by the technology. These tools include Flye<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, Redbean<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>, and Shasta<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. Each tool brings a different innovation to the table, with implementations of the OLC paradigm aiming to reduce the computational cost and address the high error rates of long reads. For instance, Flye clusters the long reads that are likely to originate from the same genomic locus in a preprocessing step to reduce the number of pairwise comparisons<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>. Redbean segments each read into 256 bp tiling subsequences, reducing the dynamic programming matrix to a size of 65536 ( = 256 × 256), thus speeding up the pairwise alignment process<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>. On the other hand, to address the high error rate of long reads, Shasta compresses all homopolymers in the reads using run-length encoding, thereby removing all homopolymer expansion errors, one of the more common error types in the ONT data, and improving the accuracy of alignments in the overlap step of OLC<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. While these optimizations have reduced the time it takes to assemble the long sequencing reads and ultimately improve upon the quality of the generated genome assemblies, these tools still have a large memory footprint, requiring upwards of several hundred gigabytes of RAM for assembling a typical 50X human genome dataset.</p>
    <p id="Par8">Long sequencing reads have also enabled the haplotype phasing of haploid genome assemblies to better understand and characterize the genomic diversity of diploid and polyploid organisms<sup><xref ref-type="bibr" rid="CR23">23</xref></sup>. Existing OLC long-read genome assemblers, such as Shasta<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, and haplotype-aware genome assemblers, such as phasebook<sup><xref ref-type="bibr" rid="CR25">25</xref></sup> and Verkko<sup><xref ref-type="bibr" rid="CR26">26</xref></sup>, have been extended or developed to leverage long reads to produce diploid assemblies.</p>
    <p id="Par9">In this work, we present GoldRush, a memory-efficient long-read haploid de novo genome assembler that employs a novel long-read assembly algorithm, which runs in linear time in the number of reads. GoldRush is implemented as a modular pipeline with four main steps: GoldPath, GoldPolish, Tigmint-long<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR27">27</xref></sup>, and GoldChain<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR28">28</xref></sup>. GoldPath first iterates through the long reads and generates a “golden path”, selected sequences with a ~ 1X representation of the genome of interest. Because the output of GoldPath is a set of raw sequences (termed “goldtigs”), base errors in the golden path are resolved using GoldPolish, a long-read adaptation of the ntEdit+Sealer polishing protocol<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>. Next, misassemblies (due to chimeric reads) are corrected using Tigmint-long<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR27">27</xref></sup>. Finally, the corrected golden path is scaffolded using GoldChain to produce the output genome assembly<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR28">28</xref></sup> (Fig. <xref rid="Fig1" ref-type="fig">1a</xref> and Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref>). The golden path serves as the base assembly for the subsequent steps in GoldRush. Briefly, GoldPath iterates through the reads, querying each read against a dynamic and probabilistic multi-index Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref>,<xref ref-type="bibr" rid="CR31">31</xref></sup> (miBf) data structure in turn, and inserts selected sequence or skips over the read depending on the results of the query to generate multiple “silver paths”, which are &lt;1X representations of the target genome (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). The silver paths are then used as input for GoldPath to generate the golden path. Iteration over the long sequencing reads, as opposed to an all-vs-all alignment of reads, allows GoldRush to achieve a linear time complexity in the number of reads. We show that GoldRush produces contiguous and correct genome assemblies with a low memory footprint, and does so without read-to-read alignments, marking an important paradigm shift in the genome assembly of long sequencing reads.<fig id="Fig1"><label>Fig. 1</label><caption><title>Flowchart of GoldRush and GoldPath.</title><p><bold>a</bold> Raw long reads are first processed by GoldPath to generate the golden path, a ~1X representation of the genome. The golden path is then polished by GoldPolish and corrected for structural errors with Tigmint-long. Finally, GoldChain scaffolds the polished and corrected golden path to generate the final genome assembly. <bold>b</bold> GoldPath uses the input long sequencing reads or silver path sequences to initialize a miBf data structure. GoldPath then loops over the sequences, and queries each sequence against the miBf. If the sequence is found in the miBf, GoldPath skips it and resumes its iterations. Conversely, if the sequence is not found in the miBf, it is inserted into the miBf and added to the silver/golden path. When GoldPath is constructing a silver path, and if the silver path has not reached the threshold number of bases, GoldPath will continue recruiting bases from the input reads. If the threshold number of bases is reached, GoldPath will check if more silver paths need to be generated. If more silver paths are needed, GoldPath will create them using the same algorithm and parameters, otherwise, it will terminate. Five (by default) silver paths, each representing ~0.9X (by default) coverage of the target genome, are combined to generate a low-coverage subsample input for GoldPath to build the golden path. When creating the golden path, GoldPath will continue iterating over the sequences from the silver paths until all sequences are exhausted.</p></caption><graphic xlink:href="41467_2023_38716_Fig1_HTML" id="d32e448"/></fig></p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <p id="Par10">We assembled the genomes of three different human cell lines (NA24385, HG01243, and HG02055), <italic>Oryza sativa</italic> (rice), and <italic>Solanum lycopersicum</italic> (tomato) using GoldRush, Flye, Redbean, and Shasta, and compared the resulting genome assemblies using a variety of length contiguity metrics, genome assembly accuracy markers, including those reported by QUAST<sup><xref ref-type="bibr" rid="CR32">32</xref></sup>, BUSCO<sup><xref ref-type="bibr" rid="CR33">33</xref></sup>, the asmgene utility in minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>, and Merqury<sup><xref ref-type="bibr" rid="CR35">35</xref></sup>, and their resource usage (see Methods).</p>
    <sec id="Sec3">
      <title>Assembly performance</title>
      <p id="Par11">For the genome assemblies of all three human cell lines, GoldRush achieved NG50 lengths between 25.3 and 32.6 Mbp, comparable to both Shasta (29.7–39.6 Mbp) and Flye (26.6–38.8 Mbp), and typically three times more contiguous than the Redbean genome assemblies (8.0–10.9 Mbp) (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>). Two of the three human GoldRush genome assemblies (NA24385 and HG01243) also had the fewest extensive misassemblies (940 and 1057) among the tools tested; ~2–3 times fewer than Shasta (1682 and 3240), and ~5–7 times fewer than Redbean (4918 and 7052). Despite the relatively low number of structural misassemblies, the NGA50 length for each human GoldRush assembly is around 20 Mbp, indicating that some misassemblies are found in the larger scaffolds and breaking the alignment blocks (Fig. <xref rid="Fig2" ref-type="fig">2a</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>). In addition to assembling highly contiguous human genomes, GoldRush is also robust in assembling plant genomes, reaching 0.3 and 2.6 Mbp NGA50 lengths for <italic>O. sativa</italic> and <italic>S. lycopersicum</italic>, respectively (Fig. <xref rid="Fig2" ref-type="fig">2c</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">5</xref>). The <italic>O. sativa</italic> Shasta genome assembly, on the other hand, had scaffold NG50 and NGA50 lengths of 124,700 bp and 104,593 bp, respectively, only ~4.2 and ~3.6 times longer than the raw reads used as input (N50 = 29,349 bp) for genome assembly, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">6</xref>).<fig id="Fig2"><label>Fig. 2</label><caption><title>Contiguity, correctness, and resource usage of GoldRush assemblies compared to Flye, Redbean, and Shasta genome assemblies for three human individuals (NA24385, HG01243, and HG02055), <italic>O. sativa</italic>, and <italic>S. lycopersicum</italic>.</title><p>Human individuals NA24385, HG01243, and HG02055 are represented as circles, triangles, and squares, respectively, in <bold>a</bold> and <bold>b</bold>. <italic>O. sativa</italic> and <italic>S. lycopersicum</italic> are represented as circles and triangles, respectively, in <bold>c</bold> and <bold>d</bold>. GoldRush, Flye, Redbean, and Shasta are colored yellow, purple, red, and blue, respectively. The genome assemblies were assessed using QUAST for their contiguity and correctness. Extensive misassemblies and NGA50 length, as determined by QUAST, are shown on the horizontal and vertical axes, respectively, in <bold>a</bold> and <bold>c</bold>. Wall clock run time (h) and peak memory (GB) usage of the genome assembly processes were recorded using the unix <italic>time</italic> command and shown on the horizontal and vertical axes, respectively, in <bold>b</bold> and <bold>d</bold>.</p></caption><graphic xlink:href="41467_2023_38716_Fig2_HTML" id="d32e571"/></fig></p>
      <p id="Par12">GoldRush and Shasta assembled each of the three human genomes in less than a day, executing in 16.6–20.8 h and 4.1–5.0 h, respectively (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). Both Flye and Redbean required at least 33.7 h to assemble each of the three human genomes, with Redbean assembling two of the datasets (HG01243 and HG02055) in ~68 h, for each (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). GoldRush is also competitive in assembling the smaller plant genomes, requiring 1.6 and 7.4 h to assemble <italic>O. sativa</italic> and <italic>S. lycopersicum</italic>, respectively (Fig. <xref rid="Fig2" ref-type="fig">2d</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">10,</xref><xref rid="MOESM1" ref-type="media">11</xref>). GoldRush used, at most, 54.5 GB of RAM to assemble the three human genomes (Fig. <xref rid="Fig2" ref-type="fig">2b</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">7</xref>–<xref rid="MOESM1" ref-type="media">9</xref>). In comparison, using the same data, Flye and Redbean used between 329.3–502.4 GB (six- to eight-fold more than GoldRush), and Shasta utilized 884.8–1009.2 GB (up to 20-fold more than GoldRush). Similarly, GoldRush required the least amount of RAM to assemble the <italic>O. sativa</italic> and <italic>S. lycopersicum</italic> datasets, using at most 45.3 GB (Fig. <xref rid="Fig2" ref-type="fig">2d</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">10</xref>, <xref rid="MOESM1" ref-type="media">11</xref>).</p>
    </sec>
    <sec id="Sec4">
      <title>GoldPolish base error correction</title>
      <p id="Par13">GoldPolish decreased the number of mismatches or indels per 100 kbp of the NA24385 golden path by ~6.5-fold (1463.7 to 228.5 and 1327.2 to 197.2, respectively) (Supplementary Table <xref rid="MOESM1" ref-type="media">12</xref>). This improvement in mismatches and indels translated into a recovery of 12,272 (89.1%) complete BUSCOs, fewer than the 12,920 (93.8%) and 12,988 (94.3%) complete BUSCOs in the Shasta and Flye NA24385 genome assemblies, respectively, but more than the 12,193 (88.5%) complete BUSCOs reconstructed in the Redbean NA24385 genome assembly (Supplementary Table <xref rid="MOESM1" ref-type="media">13</xref>). Of the 2461 duplicated genes observed in T2T-CHM13<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>, a complete telomere-to-telomere reference-grade human genome assembly, 845 were found in the GoldRush assembly in multiple copies, fewer than the 1717 and 1725 found in the Shasta and Flye genome assemblies, respectively, but greater than the 680 found in the Redbean genome assembly (Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">14</xref>).</p>
      <p id="Par14">When polishing the genome assemblies of the more erroneous human long-read datasets, HG01243 (estimated 9% error rate) and HG02055 (estimated 11% error rate), GoldPolish reduced the number of mismatches and indels per 100 kbp by 60.8 and 67.4% (to 1372.3 and 980.1) for the former, and by 53.6 and 60.5% (to 1981.7 and 1354.8) for the latter, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">6</xref>, <xref rid="MOESM1" ref-type="media">15,</xref><xref rid="MOESM1" ref-type="media">16</xref>). In comparison, the Flye, Redbean, and Shasta assemblies reported 148.7 and 110.6, 324.7 and 354.5, and 195.6 and 100.7 number of mismatches and indels per 100 kbp for HG01243, respectively, and 155.5 and 126.0, 346.1 and 379.1, and 210.2 and 103.9 number of mismatches and indels per 100 kbp for HG02055, respectively (Supplementary Tables <xref rid="MOESM1" ref-type="media">2</xref>, <xref rid="MOESM1" ref-type="media">3</xref>). The results of running BUSCO on the HG01243 and HG02055 genome assemblies can be found in Supplementary Tables <xref rid="MOESM1" ref-type="media">17,</xref><xref rid="MOESM1" ref-type="media">18</xref>.</p>
      <p id="Par15">When substituting GoldPolish with Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> for polishing the same golden path, the polishing step of the GoldRush pipeline incurred a greater computational cost, requiring over an order of magnitude more memory (602.3 vs 11.0 GB RAM) and taking 19.3% longer (9.9 vs 8.3 h) to complete, but resulted in a more base-accurate genome assembly (157.0 mismatches per 100 kbp and 106.4 indels per 100 kbp) (Fig. <xref rid="Fig3" ref-type="fig">3</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">19</xref>–<xref rid="MOESM1" ref-type="media">21</xref>). The improvements in the base accuracy of the resulting NA24385 genome assembly also translated into a higher recovery of complete BUSCOs (12,752, 92.5% complete) (Supplementary Table <xref rid="MOESM1" ref-type="media">22</xref>). Polishing the NA24385 golden path with GoldPolish and Racon yielded QV (base quality value) statistics of 28.7 and 31.1, respectively, as assessed with Merqury (Supplementary Table <xref rid="MOESM1" ref-type="media">23</xref>).<fig id="Fig3"><label>Fig. 3</label><caption><title>Memory usage of the GoldRush stages when assembling human genome datasets (individuals NA24385, HG01243, and HG02055).</title><p>The average peak memory (GB) for each stage of the assembly of the three human genomes is shown, with the data points (open circles) indicating the peak memory of each assembly and the error bars indicating the standard deviation. Racon can optionally be used for long-read base polishing within GoldRush, if the onboard memory of the computer system is not limited.</p></caption><graphic xlink:href="41467_2023_38716_Fig3_HTML" id="d32e708"/></fig></p>
      <p id="Par16">To characterize the polishing performance of GoldPolish and Racon in repetitive genomic regions, we compared the resulting QV statistics of the polished assemblies, specifically looking at the statistics in non-repetitive and repetitive regions. GoldPolish polishing yielded QV statistics of 27.7 and 30.0 for non-repetitive and repetitive regions, respectively (Supplementary Table <xref rid="MOESM1" ref-type="media">24</xref>). Racon polishing led to QVs of 30.3 and 32.1 for non-repetitive and repetitive regions, respectively (Supplementary Table <xref rid="MOESM1" ref-type="media">25</xref>).</p>
    </sec>
  </sec>
  <sec id="Sec5" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par17">The GoldRush algorithm is straightforward: collect unique fragments representing the genome to generate a golden path, polish the fragments, correct them for structural misassemblies, and join the polished and corrected fragments together. As GoldRush is built upon this fundamental concept of the golden path, it represents a paradigm shift in the genome assembly of erroneous long reads, no longer requiring the time- and memory-intensive process of all-vs-all sequence alignments. Instead, the golden path, or a ~ 1X read fragment representation of the underlying genome, is constructed by iterating over the read set, and querying a progressive miBf database representing the golden path. We have shown that our genome assembly paradigm yields human genome assemblies that are comparable in contiguity to what can be obtained using different implementations of the OLC algorithm, yet with an order of magnitude smaller memory footprint.</p>
    <p id="Par18">The GoldRush algorithm was designed with no single long-read sequencing technology in mind, making it versatile and platform agnostic. The algorithm is robust to base errors, capable of assembling long-read datasets with estimated error rates ranging from 4 to 20%, and achieving NG50 and NGA50 lengths up to 32.6 and 22.2 Mbp, respectively, for the human data tested (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">6</xref>). GoldRush accomplishes this by mitigating the impact of base errors at various stages. For instance, GoldPath uses spaced seeds<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> to enable more sensitive detection of erroneous sequences originating from the same genomic locus. In addition, GoldPath only selects sequences with an average Phred<sup><xref ref-type="bibr" rid="CR39">39</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup> quality ≥15 (by default) for the silver and golden paths. The requirement ensures that the baseline assembly is composed of the higher-quality reads from the set, but may also prevent GoldPath from recruiting sequences derived from genomic loci with reads of insufficient quality. These regions, however, could be rescued downstream if GoldChain scaffolds over the region, as the gap-filling feature can recover the missing sequence. The average Phred quality threshold parameter could also be set to a lower value for more erroneous read datasets. For polishing the golden path sequences, GoldPolish accommodates the higher error rate of long reads by utilizing targeted Bloom filters<sup><xref ref-type="bibr" rid="CR30">30</xref></sup> populated with localized <italic>k</italic>-mers originating exclusively from mapped reads. This approach of using a targeted Bloom filter per goldtig enables the use of smaller <italic>k</italic>-mer sizes than those used for the original short-read focused ntEdit+Sealer protocol, thus increasing the polishing sensitivity and mitigating errors that would otherwise arise from the use of off-target <italic>k</italic>-mers. Further, the GoldRush algorithm can reconstruct duplicated genomic regions in the resulting genome assembly. In our tests, we observed that GoldRush reconstructed 34.3% of duplicated human genes in multiple copies, though this figure was higher in Flye and Shasta assemblies (Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">14</xref>). This is also recapitulated in the Merqury spectra-cn plots;<sup><xref ref-type="bibr" rid="CR35">35</xref></sup> the Flye and Shasta spectrum histograms more closely resemble those of the reference-grade quality NA24385 maternal and paternal genome assemblies<sup><xref ref-type="bibr" rid="CR41">41</xref></sup> in comparison to the GoldRush and Redbean spectrum histograms (Supplementary Fig. <xref rid="MOESM1" ref-type="media">3</xref>). Since GoldRush uses a completely different paradigm to assemble genomes, it also has different strengths when compared to OLC-based genome assemblers. For instance, in the <italic>O. sativa</italic> dataset, the N50 length of the reads is 29,349 bp, and a Shasta genome assembly of the data results in an assembly NGA50 length of 104,593 bp—roughly 3.6 times longer. In contrast, the NGA50 length of the GoldRush genome assembly is tenfold greater (307.9 kbp) than the read N50 length (Fig. <xref rid="Fig2" ref-type="fig">2c</xref> and Supplementary Tables <xref rid="MOESM1" ref-type="media">4,</xref><xref rid="MOESM1" ref-type="media">6</xref>). However, when considering which tool performs best on all datasets, none consistently outperforms the other in all the metrics we measured (i.e., run time, memory usage, genome contiguity, genome completeness, and genome correctness).</p>
    <p id="Par19">Yet, GoldRush is consistently more memory-efficient in comparison to other tools in all the datasets tested. This provides the opportunity to assemble long-read data from human-sized or larger genomes to those who do not have access to server-class systems, especially as retail computers with 64 GB RAM or more become more accessible. The memory efficiency of GoldRush is mainly due to the use of the miBf data structure in the GoldPath stage. However, the published version of the miBf data structure<sup><xref ref-type="bibr" rid="CR31">31</xref></sup> was intended to serve as a static database, where the user first inserted all the items of interest, and subsequently used the database solely for query operations. For the purpose of GoldPath, we needed a memory-efficient data structure that could also be dynamic, with interleaved insert and query operations. To adjust the miBf for GoldPath, we disabled its ability to rescue information lost to hash collisions, a step that requires all the elements to be inserted, and renders the miBf static afterward. We compensated for this loss of information by using longer tile lengths, <italic>t</italic>. With longer tiles, there are more queries per given tile, and the increased number of queries would offset the loss of expected hits due to hash collisions.</p>
    <p id="Par20">GoldRush also assembles all the human datasets within a day and, together with Shasta, is faster than all other OLC genome assemblers tested herein. Shasta accomplishes this with heuristics based on MinHash markers to quickly identify potential read-to-read overlaps<sup><xref ref-type="bibr" rid="CR20">20</xref></sup>. On the other hand, GoldRush achieves this speed with the use of a genome assembly algorithm that has linear time complexity in the number of reads (Supplementary Note <xref rid="MOESM1" ref-type="media">1</xref>). Breaking down the time GoldRush spends for completing each stage, we observe that GoldRush devotes more time polishing the golden path with GoldPolish (Supplementary Tables <xref rid="MOESM1" ref-type="media">20</xref>, <xref rid="MOESM1" ref-type="media">26</xref>, <xref rid="MOESM1" ref-type="media">27</xref>), which is already heavily optimized. GoldPolish runs a background Bloom filter building process which continually produces Bloom filters from the mapped reads for the launched pipelines, minimizing waiting time between ending and starting a new polishing run (Supplementary Fig. <xref rid="MOESM1" ref-type="media">4</xref>). The GoldPath and GoldChain stages were also optimized to reduce the overall run time of GoldRush. GoldPath utilizes multiple independent silver paths to effectively generate a low-coverage subsample of the original dataset, such that the subset still covers the entire target genome. With enough silver paths, any sections of the genome that are missing in a given silver path should be recovered in the others. This enables GoldPath to generate a golden path without having to process the entire dataset, speeding up the golden path generation considerably.</p>
    <p id="Par21">Further, we observed that running additional rounds of ntLink in the GoldChain stage led to substantial improvements in the contiguity of the final assembly. However, re-mapping the long reads for each round was costly. To remedy this, we implemented a mapping liftover step, allowing ntLink to run multiple rounds of scaffolding without re-mapping the long reads, thus reducing the run time in each subsequent round (Supplementary Table <xref rid="MOESM1" ref-type="media">28</xref>). We also implemented two additional features, overlap detection, and gap-filling, in ntLink. While these were introduced specifically for the GoldChain stage of GoldRush, they are also applicable to the general use of ntLink. In earlier versions of ntLink, overlapping sequences were still concatenated end-to-end, which could result in local insertion misassemblies at the contig joints. With the overlap detection and overlap resolution feature, gap estimates from the earlier stages of ntLink are used to identify putative overlaps between adjacent goldtigs (indicated by negative gap estimates), and guide trimming of the overlapping sections. Overlapping goldtigs are expected in the golden path, as reads are evaluated on a tile-by-tile basis in GoldPath.</p>
    <p id="Par22">Polishing the resulting human assemblies with GoldPolish reduces the base error rates by 53.6–85.1%. GoldPolish is built on ntEdit+Sealer<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>, a <italic>k-</italic>mer-based base correction algorithm, and requires 2<italic>k</italic>–1 consecutive high-quality <italic>k</italic>-mers to correct base mismatches and indels. This requirement is geometrically harder to meet for datasets with higher error rates. In comparison, each of the genome assemblies generated by the Flye and Shasta algorithms has higher base-pair accuracy (Supplementary Tables <xref rid="MOESM1" ref-type="media">1</xref>–<xref rid="MOESM1" ref-type="media">3</xref>, <xref rid="MOESM1" ref-type="media">6</xref>). In the Merqury spectra-cn plots, we observe that GoldRush has a greater number of unique <italic>k</italic>-mers not found in the high-quality short reads compared to competing tools, which is at least partially attributed to gap-filling with uncorrected read sequences (Supplementary Fig. <xref rid="MOESM1" ref-type="media">3</xref>).</p>
    <p id="Par23">With the recent release of the ONT Q20+ chemistry and its reported base accuracy of 99%, as well as the continual improvements in basecallers<sup><xref ref-type="bibr" rid="CR42">42</xref></sup> and <italic>k</italic>-mer-based genome analysis solutions<sup><xref ref-type="bibr" rid="CR43">43</xref></sup>, we expect GoldRush to capitalize on the improvements in these frontiers, and reduce the time spent correcting base errors. Indeed, for the human GoldRush tests, GoldPolish achieved its highest base quality with the fastest run time for the NA24385 dataset, which is estimated to be the least erroneous in our tests (4%) (Supplementary Tables <xref rid="MOESM1" ref-type="media">6</xref>, <xref rid="MOESM1" ref-type="media">12</xref>, <xref rid="MOESM1" ref-type="media">15</xref>, <xref rid="MOESM1" ref-type="media">16</xref>, <xref rid="MOESM1" ref-type="media">20</xref>, <xref rid="MOESM1" ref-type="media">26</xref>, <xref rid="MOESM1" ref-type="media">27</xref>). For this dataset, GoldPolish displayed a polishing performance similar to that of Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> (Supplementary Tables <xref rid="MOESM1" ref-type="media">12</xref>, <xref rid="MOESM1" ref-type="media">21</xref>, <xref rid="MOESM1" ref-type="media">23</xref>). Racon is computationally more expensive to run, due in part to the input reads and alignments being loaded into memory. In our tests, both GoldPolish and Racon correct repetitive regions better than non-repetitive regions (Supplementary Tables <xref rid="MOESM1" ref-type="media">24</xref>, <xref rid="MOESM1" ref-type="media">25</xref>).</p>
    <p id="Par24">Lastly, GoldRush is modular. Each step within GoldRush can be substituted for another tool that performs the equivalent function, such as substituting GoldPolish for Racon, allowing GoldRush to easily benefit from any future advances in the field. GoldRush also makes no assumptions about the quality of the input long reads, standing only to gain from future computing and sequencing improvements in the long-read sequencing domain.</p>
    <p id="Par25">We have demonstrated that our memory-efficient and modular long-read genome assembly pipeline, GoldRush, assembles long ONT reads into draft genomes with high contiguity, notably chromosome 18 telomere-to-telomere (HG02055) and several other chromosome arms (Supplementary Fig. <xref rid="MOESM1" ref-type="media">5</xref>). We also show that the genome assembly contiguities are comparable to what is achieved with current state-of-the-art tools, but GoldRush uses a fraction of the RAM, lowering the barrier to entry to human long-read genome assembly. With its modular design, memory efficiency, and robust performance in assembling large and complex genomes, we expect our assembly paradigm, and its first implementation, GoldRush, to both be beneficial to the scientific community and expand the reach of long sequencing reads.</p>
  </sec>
  <sec id="Sec6">
    <title>Methods</title>
    <sec id="Sec7">
      <title>GoldPath</title>
      <p id="Par26">To create the golden path, GoldPath first builds silver paths. A silver path is similar to the golden path, except it is an ~<italic>r</italic>X (default 0.9X) representation of the genome. The silver paths are combined to generate a low-coverage subsample of the reads. This subsample is then used as input to GoldPath to generate the golden path.</p>
      <p id="Par27">GoldPath builds the silver paths by using a modified miBf <sup><xref ref-type="bibr" rid="CR31">31</xref></sup>, a resource-efficient probabilistic data structure, to associate spaced seed (a pattern with care and don’t care positions) derived <italic>k</italic>-mers with the locus of the genome they are derived from. The miBf is composed of three data structures: a Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref></sup>, a rank array, and an ID array. The Bloom filter is first initialized with <italic>h</italic> (default 3) sets of spaced seed<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> derived <italic>k</italic>-mers from the input read set using ntHash<sup><xref ref-type="bibr" rid="CR44">44</xref>,<xref ref-type="bibr" rid="CR45">45</xref></sup>. Only reads that are at least <italic>m</italic> bp (default 20,000 bp) long and have an average Phred<sup><xref ref-type="bibr" rid="CR39">39</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup> quality score higher than <italic>P</italic> (default 15, representing 97% base accuracy or more, on average) are inserted into the Bloom filter. A rank array is then created to associate each set bit in the Bloom filter with a position in the empty ID array, sized based on the number of set bits in the Bloom filter.</p>
      <p id="Par28">The read set is then iteratively queried against the miBf data structure to determine if a read should be inserted into the miBf and, thus, the silver path. Once a read is processed and determined to contribute new base coverage to the silver path, the read is inserted into the miBf. The read is first split into tiles of length <italic>t</italic> bp (default 1000), and <italic>b</italic> (default 10) consecutive tiles are binned into one block. The spaced seed-derived <italic>k</italic>-mers from one block are hashed and a unique ID associated with the block, synonymous with a genomic locus, is inserted into the position of the miBf ID array that corresponds to the spaced seed-derived <italic>k</italic>-mer (Supplementary Fig. <xref rid="MOESM1" ref-type="media">6</xref>). By binning tiles into blocks, GoldPath clusters together the spaced seed-derived <italic>k</italic>-mers from a genomic region of length <italic>b</italic> × <italic>t</italic>. Each read that is inserted into the miBf is also saved to the silver path.</p>
      <p id="Par29">Like insertion, the querying process first splits the read into tiles of length <italic>t</italic>. The <italic>k</italic>-mers in these tiles are hashed using the same spaced seed patterns and queried against the miBf, then the associated ID hits within each tile are tallied in an ID-to-counts table. From these hits, a preliminary best ID hit is associated with each tile. The tiles are considered assigned (found) if the ID with the most hits exceeds a threshold <italic>x</italic> (default 10), or unassigned (not found) otherwise (Supplementary Fig. <xref rid="MOESM1" ref-type="media">7</xref>). Next, we improve the accuracy of the tile’s preliminary best hits by using information from the best hits of neighboring tiles along with the target tile’s own ID-to-counts table (Supplementary Fig. <xref rid="MOESM1" ref-type="media">8</xref> and Supplementary Method <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p id="Par30">Once GoldPath determines the final assignment of all the tiles in the read, it evaluates the read with three possible outcomes: skip, insert, or trim and insert. If all the tiles in the read are already assigned, the read is skipped since it does not contribute any new base information to the silver path. If all the tiles in the read are unassigned, the read is inserted into the miBf data structure and the silver path in its entirety. Finally, if the read has a mixture of assigned and unassigned tiles, the read is trimmed such that only one assigned tile on either side of the longest stretch of unassigned tiles is retained (Supplementary Fig. <xref rid="MOESM1" ref-type="media">9</xref>), and the trimmed read is inserted into both the miBf and silver path.</p>
      <p id="Par31">When the silver path contains or exceeds the threshold number of bases (default <italic>genome size</italic> × <italic>r</italic>), the current silver path is finalized, and a new silver path is initialized. The silver path creation continues until the input reads are exhausted or the number of completed silver paths reaches <italic>M</italic> (default 5). The golden path is then generated using the same algorithm and parameters used for the silver paths, except that the input is now the concatenated sequence files from the silver paths and the golden path is only complete when GoldPath has finished iterating through all of the silver path sequences. Sequences in the golden path construe the contigs of the initial genome assembly to be refined in the later steps of the pipeline, and are henceforth termed “goldtigs”.</p>
    </sec>
    <sec id="Sec8">
      <title>GoldPolish</title>
      <p id="Par32">After the golden path is built, the goldtigs are polished to correct mismatches and indels. The polishing protocol, GoldPolish, closely follows the ntEdit+Sealer protocol<sup><xref ref-type="bibr" rid="CR29">29</xref></sup>, which has been shown to perform well using short sequencing reads. Unlike the currently published paradigm, which stores all the short-read <italic>k</italic>-mers in a single Bloom filter<sup><xref ref-type="bibr" rid="CR30">30</xref></sup> used for correction, GoldPolish uses a targeted approach where each goldtig has a dedicated Bloom filter, each containing a hash representation of <italic>k</italic>-mers derived from long-read subsets.</p>
      <p id="Par33">To accomplish this, GoldPolish maps the long reads to goldtigs using, by default, minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>. GoldPolish is also capable of using mappings from other tools, such as ntLink<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. For each goldtig, the set of mapped reads are <italic>k</italic>-merized using a range of different <italic>k</italic>-mer lengths in order to benefit from a trade-off between specificity (longer <italic>k</italic>-mers) and sensitivity (shorter <italic>k</italic>-mers). These <italic>k</italic>-mers are then inserted into an array of Bloom filters, one Bloom filter for each <italic>k</italic>-mer size per goldtig. From this, we have a set of <italic>k</italic>-mers targeted to individual goldtigs that we can use with ntEdit<sup><xref ref-type="bibr" rid="CR46">46</xref></sup> and Sealer<sup><xref ref-type="bibr" rid="CR47">47</xref></sup> for polishing (Supplementary Fig. <xref rid="MOESM1" ref-type="media">10</xref>).</p>
      <p id="Par34">GoldPolish then polishes the goldtigs using the full ntEdit+Sealer pipeline on each individual goldtig using their dedicated Bloom filters. GoldPolish launches multiple ntEdit+Sealer pipelines in parallel to amortize the overhead introduced with each polishing run.</p>
    </sec>
    <sec id="Sec9">
      <title>GoldChain</title>
      <p id="Par35">After polishing and correcting the goldtigs, an updated version of the long-read genome scaffolder ntLink<sup><xref ref-type="bibr" rid="CR7">7</xref></sup> is used to assemble the goldtigs. To utilize the long-read evidence in building longer sequences, the full long-read set is mapped to the goldtigs using a lightweight minimizer-based approach. Briefly, minimizer sketches are generated for the goldtigs as well as each read for a given <italic>k</italic>-mer size <italic>k</italic> and window size <italic>w</italic><sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. The goldtig minimizer sketches are indexed, and for each minimizer in the sketch of a given long-read, this index is queried to find hits between the long read and the goldtigs. Long-read mappings that span multiple goldtigs provide scaffolding evidence. This long-read evidence is stored as a scaffold graph, where the nodes are goldtigs, and the directed edges between the nodes represent evidence that the goldtigs should be joined. This scaffold graph is traversed using abyss-scaffold<sup><xref ref-type="bibr" rid="CR48">48</xref></sup>, a heuristic-based scaffold layout algorithm, to output the final, contiguated genome assembly.</p>
      <p id="Par36">Three important features have been added to ntLink (v1.3.0+) to adapt the functionality for the de novo long-read genome assembly problem in GoldRush: overlap detection, gap-filling, and scaffolding rounds based on the liftover of sequence mappings.</p>
      <p id="Par37">For the sequence pairs with putative overlaps, minimizer sketches are generated with a lower <italic>k</italic> and <italic>w</italic> than the initial ntLink pairing stage to increase the sensitivity of overlap detection (parameters <italic>small_k</italic>, <italic>small_w</italic>, defaults 15 and 10, respectively). These sketches are filtered to retain minimizers that fall in the estimated overlapping region with a multiplicity of one in each sequence, ensuring that only non-repetitive minimizers in the sequences are retained. These minimizers are then used to create an undirected minimizer graph, similar to methods employed by the reference-guided scaffolder ntJoin<sup><xref ref-type="bibr" rid="CR49">49</xref></sup>. In this graph, the minimizers are nodes, and edges between the minimizers indicate that the minimizers are adjacent in at least one of the ordered sequence minimizer sketches, with the edge weights indicating the number of sequences that have that minimizer adjacency. This minimizer graph is filtered to retain edges with a weight of 2, which removes branches and results in a graph consisting of linear path components. Each linear path is a minimizer-based mapping between the putatively overlapping sequence ends. The middle minimizer from the longest mapping is chosen to anchor the sequences to one another, and the coordinates of this minimizer guide the trimming of the detected overlapping regions on the incident sequences. Finally, after this trimming, the sequences are concatenated (Supplementary Fig. <xref rid="MOESM1" ref-type="media">11</xref>).</p>
      <p id="Par38">The second major feature added to ntLink uses the mapped long reads to fill gaps between the scaffolded goldtigs. The verbose option in the initial ntLink pairing stage was updated to output the complete long-read mapping information, including the mapped goldtigs and the minimizers (including position and strand on the goldtig and read). For each sequence join induced by ntLink, the verbose mapping information is parsed to identify each read that supports that join, and the associated mapped minimizers (“pass 1 minimizers”). The read with the highest average number of mapped pass 1 minimizers is chosen and subsequently used to fill the scaffold gap. As finding anchoring minimizers as close to the sequence ends as possible is preferred, each chosen read is re-mapped to the flanking sequences using a lower <italic>k</italic> and <italic>w</italic> for increased sensitivity (“pass 2 minimizers”). If the mapping is unambiguous, the anchoring pass 2 minimizers closest to the sequence ends are used as cut points for the flanking sequences and the read sequence filling the gap. Otherwise, the pass 1 minimizers are used to determine the gap-filling coordinates (Supplementary Fig. <xref rid="MOESM1" ref-type="media">12</xref>). Gap-filling is turned on in GoldRush by default and is run when the target “gap_fill” is specified to the ntLink command.</p>
      <p id="Par39">Finally, liftover-based rounds were integrated into the ntLink code base. We added a step to liftover the mapped minimizer coordinates in the verbose mapping file (described above) from the initial goldtigs to the sequences post-scaffolding. This new mapping file is then input to the ntLink pairing stage in the subsequent ntLink round, which uses the input mapping coordinates instead of re-mapping the reads to infer the scaffold graph. The remaining steps in the ntLink pipeline then proceed as previously described. To invoke these liftover-based rounds, we provided a Makefile “ntLink_rounds”, which runs a specified number of rounds of ntLink (parameter <italic>rounds</italic>, default 5), lifting over the mapping coordinates between each iteration.</p>
    </sec>
    <sec id="Sec10">
      <title>Implementation</title>
      <p id="Par40">The GoldRush pipeline is driven by a Makefile. GoldPath and GoldPolish are coded in C++, and GoldChain is coded in Python. All components of GoldRush utilize the btllib common code library<sup><xref ref-type="bibr" rid="CR50">50</xref></sup>. The tool can be installed from GitHub or using the conda package manager. Instructions on how to run the GoldRush pipeline are provided on the GitHub page (<ext-link ext-link-type="uri" xlink:href="https://github.com/bcgsc/goldrush">https://github.com/bcgsc/goldrush</ext-link>). Many of the GoldRush parameters are supplied with default values and can be configured. Only the genome size of the target species and the long reads in a single, uncompressed, multi-FASTQ file are required as input.</p>
    </sec>
    <sec id="Sec11">
      <title>Evaluation</title>
      <p id="Par41">To evaluate the performance of GoldRush (v1.0.0), we assembled five genomes from ONT long-read data for three human cell lines (NA24385, HG01243, and HG02055), <italic>O. sativa</italic>, and <italic>S. lycopersicum</italic> (Supplementary Table <xref rid="MOESM1" ref-type="media">6</xref>). We optimized the parameters of GoldRush for each dataset (Supplementary Figs. <xref rid="MOESM1" ref-type="media">13</xref>–<xref rid="MOESM1" ref-type="media">17</xref> and Supplementary Table <xref rid="MOESM1" ref-type="media">29</xref>). In a separate trial, we also polished the golden paths with Racon<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> (v1.5.0) instead of GoldPolish. To assess the polishing performance of GoldPolish and Racon in repetitive and non-repetitive regions of the genome, we first masked the repeats in the assemblies using RepeatMasker<sup><xref ref-type="bibr" rid="CR51">51</xref></sup> (v4.1.2) (-e ncbi -species human). Then, to generate an assembly where the non-repetitive regions are masked, we used the complement of the masked repetitive regions. These masked assemblies were then used to compare the polishing performance of GoldPolish and Racon in the repetitive and non-repetitive genomic regions. To compare the performance of GoldRush to current state-of-the-art long-read genome assemblers, we assembled all five datasets with Flye, Redbean, and Shasta. We ran both Flye (v2.9) and Redbean (v2.5) using their default parameters, and Shasta (v0.10.0) using the Nanopore-Plants-Apr2021.conf configuration file for <italic>O. sativa</italic> and Nanopore-May2022.conf for the other datasets.</p>
      <p id="Par42">All assemblies were analysed using QUAST<sup><xref ref-type="bibr" rid="CR32">32</xref></sup> (v5.0.2) (--fast --large --scaffold-gap-max-size 100000 --min-identity 80 --split-scaffold), and the corresponding reference genome (Supplementary Table <xref rid="MOESM1" ref-type="media">30</xref>). To assess the contiguity and correctness of the assemblies, we report the NG50 and NGA50 length metrics, and the number of extensive misassemblies (as defined by QUAST). The NG50 length statistic describes that 50% of the genome size is in sequences of NG50 length or longer. The NGA50 length statistic is similar to the NG50 length, but uses alignment blocks instead of sequence lengths for the calculation. To assess the base qualities of the various assemblies, we report the number of mismatches or indels per 100 kbp from QUAST, spectra-cn plots, and QV from Merqury<sup><xref ref-type="bibr" rid="CR35">35</xref></sup> (v1.3.0) — the latter a proxy for the log-scaled probability of error for the consensus base calls — using short reads and reference-grade genome assemblies as a comparison (Supplementary Table <xref rid="MOESM1" ref-type="media">31</xref>). We also ran BUSCO<sup><xref ref-type="bibr" rid="CR33">33</xref></sup> (v5.3.2) using the primates_odb10 lineage to assess the completeness of the human assemblies in the gene space. Finally, to measure the presence of duplicated genes found in the assemblies, we used the asmgene utility in minimap2<sup><xref ref-type="bibr" rid="CR34">34</xref></sup> (v2.24) (min coverage = 0.99 and min identity = [0.90, 0.99]) using all cDNA sequences annotated in the GRCh38 human reference from Ensembl<sup><xref ref-type="bibr" rid="CR52">52</xref></sup> (release 87) and the T2T-CHM13<sup><xref ref-type="bibr" rid="CR36">36</xref></sup> (v1.1) genome assembly as the “ground truth” for which genes are considered duplicated. All benchmarking tests were performed on a server-class system with 144 Intel(R) Xeon(R) Gold 6254 CPU @ 3.1 GHz with 2.9 TB RAM.</p>
    </sec>
    <sec id="Sec12">
      <title>Reporting summary</title>
      <p id="Par43">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Portfolio Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec13">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2023_38716_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2023_38716_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="41467_2023_38716_MOESM3_ESM.pdf">
            <caption>
              <p>Reporting Summary</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>These authors contributed equally: Johnathan Wong, Lauren Coombe.</p>
    </fn>
    <fn>
      <p>These authors jointly supervised this work: René L Warren, Inanç Birol.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-023-38716-x.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>This study is supported by the Canadian Institutes of Health Research (CIHR) [PJT-183608, I.B.]; and the National Institutes of Health [2R01HG007182-04A1, I.B.]. The content of this article is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health or other funding organizations. The funding organizations did not have a role in the design of the study, the collection, analysis and interpretation of the data, or in writing the manuscript.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>I.B. and R.L.W. conceived the study. J.W., L.C., and V.N. implemented the algorithms. J.W., L.C., E.Z., and P.S. analysed the data. K.M.N. provided input on the design of the algorithm. J.W., L.C., and V.N. created figures and tables with input from co-authors. J.W., L.C., R.L.W., and I.B. wrote the manuscript. R.L.W. and I.B. supervised the research. All authors commented on the manuscript.</p>
  </notes>
  <notes notes-type="peer-review">
    <title>Peer review</title>
    <sec id="FPar1">
      <title>Peer review information</title>
      <p id="Par44"><italic>Nature Communications</italic> thanks Benjamin Istace and the other, anonymous, reviewer(s) for their contribution to the peer review of this work. A peer review file is available.</p>
    </sec>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>The GoldRush, Flye, Redbean, and Shasta genome assemblies generated in this study have been deposited in Zenodo at 10.5281/zenodo.7884681<sup><xref ref-type="bibr" rid="CR53">53</xref></sup>. The GoldRush genome assemblies generated for the parameter sweep experiments in Supplementary Figs. <xref rid="MOESM1" ref-type="media">13</xref>–<xref rid="MOESM1" ref-type="media">17</xref> are available upon request. The accession codes or location of sequencing data used for assembling the draft genomes are listed in Supplementary Table <xref rid="MOESM1" ref-type="media">6</xref>. The accession codes of the reference genomes and the short-read dataset used to benchmark GoldRush and comparators’ genome assemblies are provided in Supplementary Tables <xref rid="MOESM1" ref-type="media">30</xref>–<xref rid="MOESM1" ref-type="media">33</xref>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>GoldRush (v1.0.0) has been deposited in Zenodo at 10.5281/zenodo.7884291<sup><xref ref-type="bibr" rid="CR54">54</xref></sup>. GoldRush is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/bcgsc/goldrush">https://github.com/bcgsc/goldrush</ext-link> and released under the GPL-3 license.</p>
  </notes>
  <notes id="FPar2" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par45">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Repetitive DNA and next-generation sequencing: computational challenges and solutions</article-title>
        <source>Nat. Rev. Genet.</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>36</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg3117</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Haubold</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wiehe</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>How repetitive are genomes?</article-title>
        <source>BMC Bioinform.</source>
        <year>2006</year>
        <volume>7</volume>
        <fpage>541</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-7-541</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>de Koning</surname>
            <given-names>APJ</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Castoe</surname>
            <given-names>TA</given-names>
          </name>
          <name>
            <surname>Batzer</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Pollock</surname>
            <given-names>DD</given-names>
          </name>
        </person-group>
        <article-title>Repetitive elements may comprise over two-thirds of the human genome</article-title>
        <source>PLoS Genet.</source>
        <year>2011</year>
        <volume>7</volume>
        <fpage>e1002384</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pgen.1002384</pub-id>
        <?supplied-pmid 22144907?>
        <pub-id pub-id-type="pmid">22144907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Afshinfard</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Physlr: next-generation physical maps</article-title>
        <source>DNA</source>
        <year>2022</year>
        <volume>2</volume>
        <fpage>116</fpage>
        <lpage>130</lpage>
        <pub-id pub-id-type="doi">10.3390/dna2020009</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ARKS: chromosome-scale scaffolding of human genome drafts with linked read kmers</article-title>
        <source>BMC Bioinform.</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>234</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-018-2243-x</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Putnam</surname>
            <given-names>NH</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Chromosome-scale shotgun assembly using an in vitro method for long-range linkage</article-title>
        <source>Genome Res.</source>
        <year>2016</year>
        <volume>26</volume>
        <fpage>342</fpage>
        <lpage>350</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.193474.115</pub-id>
        <?supplied-pmid 26848124?>
        <pub-id pub-id-type="pmid">26848124</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LongStitch: high-quality genome assembly correction and scaffolding using long reads</article-title>
        <source>BMC Bioinform.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>534</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-021-04451-7</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Qin</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LRScaf: improving draft genomes using long noisy reads</article-title>
        <source>BMC Genomics</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>955</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-019-6337-2</pub-id>
        <?supplied-pmid 31818249?>
        <pub-id pub-id-type="pmid">31818249</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Adewale, B. Will long-read sequencing technologies replace short-read sequencing technologies in the next 10 years? <italic>Afr. J. Lab Med.</italic><bold>9</bold>, 1340 (2020).</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sakamoto</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zaha</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Suzuki</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Seki</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Suzuki</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Application of long-read sequencing to the detection of structural variants in human cancer genomes</article-title>
        <source>Comput. Struct. Biotechnol. J.</source>
        <year>2021</year>
        <volume>19</volume>
        <fpage>4207</fpage>
        <lpage>4216</lpage>
        <pub-id pub-id-type="doi">10.1016/j.csbj.2021.07.030</pub-id>
        <?supplied-pmid 34527193?>
        <pub-id pub-id-type="pmid">34527193</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bongartz</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Resolving repeat families with long reads</article-title>
        <source>BMC Bioinform.</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>232</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-019-2807-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chiu</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rajan-Babu</surname>
            <given-names>I-S</given-names>
          </name>
          <name>
            <surname>Friedman</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Straglr: discovering and genotyping tandem repeat expansions using whole genome long-read sequences</article-title>
        <source>Genome Biol.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>224</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02447-3</pub-id>
        <?supplied-pmid 34389037?>
        <pub-id pub-id-type="pmid">34389037</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparison of structural variants detected by PacBio-CLR and ONT sequencing in pear</article-title>
        <source>BMC Genomics</source>
        <year>2022</year>
        <volume>23</volume>
        <fpage>830</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-022-09074-7</pub-id>
        <?supplied-pmid 36517766?>
        <pub-id pub-id-type="pmid">36517766</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hon</surname>
            <given-names>T</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Highly accurate long-read HiFi sequencing data for five complex genomes</article-title>
        <source>Sci. Data</source>
        <year>2020</year>
        <volume>7</volume>
        <fpage>399</fpage>
        <pub-id pub-id-type="doi">10.1038/s41597-020-00743-4</pub-id>
        <?supplied-pmid 33203859?>
        <pub-id pub-id-type="pmid">33203859</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dohm</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Peters</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Stralis-Pavese</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Himmelbauer</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Benchmarking of long-read correction methods</article-title>
        <source>NAR Genom. Bioinform.</source>
        <year>2020</year>
        <volume>2</volume>
        <fpage>lqaa037</fpage>
        <pub-id pub-id-type="doi">10.1093/nargab/lqaa037</pub-id>
        <?supplied-pmid 33575591?>
        <pub-id pub-id-type="pmid">33575591</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Deng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Nanopore long-read-only metagenomics enables complete and high-quality genome reconstruction from mock and complex metagenomes</article-title>
        <source>Microbiome</source>
        <year>2022</year>
        <volume>10</volume>
        <fpage>209</fpage>
        <pub-id pub-id-type="doi">10.1186/s40168-022-01415-8</pub-id>
        <?supplied-pmid 36457010?>
        <pub-id pub-id-type="pmid">36457010</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Luo, J. et al. Systematic benchmarking of nanopore Q20+ kit in SARS-CoV-2 whole genome sequencing. <italic>Front. Microbiol</italic>. <bold>13</bold>, 973367 (2022).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2019</year>
        <volume>37</volume>
        <fpage>540</fpage>
        <lpage>546</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0072-8</pub-id>
        <?supplied-pmid 30936562?>
        <pub-id pub-id-type="pmid">30936562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate long-read assembly with wtdbg2</article-title>
        <source>Nat. Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <fpage>155</fpage>
        <lpage>158</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0669-3</pub-id>
        <?supplied-pmid 31819265?>
        <pub-id pub-id-type="pmid">31819265</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shafin</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2020</year>
        <volume>38</volume>
        <fpage>1044</fpage>
        <lpage>1053</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-020-0503-6</pub-id>
        <?supplied-pmid 32686750?>
        <pub-id pub-id-type="pmid">32686750</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wajid</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Serpedin</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Review of general algorithmic features for genome assemblers for next generation sequencers</article-title>
        <source>Genom. Proteom. Bioinform.</source>
        <year>2012</year>
        <volume>10</volume>
        <fpage>58</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gpb.2012.05.006</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>Z</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparison of the two major classes of assembly algorithms: overlap–layout–consensus and de-bruijn-graph</article-title>
        <source>Brief. Funct. Genomics</source>
        <year>2012</year>
        <volume>11</volume>
        <fpage>25</fpage>
        <lpage>37</lpage>
        <pub-id pub-id-type="doi">10.1093/bfgp/elr035</pub-id>
        <?supplied-pmid 22184334?>
        <pub-id pub-id-type="pmid">22184334</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schrinner</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Haplotype threading: accurate polyploid phasing from long reads</article-title>
        <source>Genome Biol.</source>
        <year>2020</year>
        <volume>21</volume>
        <fpage>252</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02158-1</pub-id>
        <?supplied-pmid 32951599?>
        <pub-id pub-id-type="pmid">32951599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Lorig-Roach, R. et al. Phased nanopore assembly with Shasta and modular graph phasing with GFAse. Preprint at <italic>bioRxiv</italic>10.1101/2023.02.21.529152 (2023)</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Luo</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Kang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Schönhuth</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>phasebook: haplotype-aware de novo assembly of diploid genomes from long reads</article-title>
        <source>Genome Biol.</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>299</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02512-x</pub-id>
        <?supplied-pmid 34706745?>
        <pub-id pub-id-type="pmid">34706745</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Rautiainen, M. et al. Telomere-to-telomere assembly of diploid chromosomes with Verkko. <italic>Nat. Biotechnol.</italic>10.1038/s41587-023-01662-6 (2023)</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tigmint: correcting assembly errors using linked reads from large molecules</article-title>
        <source>BMC Bioinforma.</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>393</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-018-2425-6</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Coombe, L., Warren, R. L., Wong, J., Nikolic, V. &amp; Birol, I. ntLink: A toolkit for de novo genome assembly scaffolding and mapping using long reads. <italic>Curr. Protoc.</italic><bold>3</bold>, e733 (2023).</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>JX</given-names>
          </name>
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>L. ntEdit+Sealer: efficient targeted error resolution and automated finishing of long-read genome assemblies</article-title>
        <source>Curr. Protoc.</source>
        <year>2022</year>
        <volume>2</volume>
        <fpage>e442</fpage>
        <pub-id pub-id-type="doi">10.1002/cpz1.442</pub-id>
        <?supplied-pmid 35567771?>
        <pub-id pub-id-type="pmid">35567771</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bloom</surname>
            <given-names>BH</given-names>
          </name>
        </person-group>
        <article-title>Space/time trade-offs in hash coding with allowable errors</article-title>
        <source>Commun. ACM</source>
        <year>1970</year>
        <volume>13</volume>
        <fpage>422</fpage>
        <lpage>426</lpage>
        <pub-id pub-id-type="doi">10.1145/362686.362692</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mismatch-tolerant, alignment-free sequence classification using multiple spaced seeds and multiindex Bloom filters</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2020</year>
        <volume>117</volume>
        <fpage>16961</fpage>
        <lpage>16968</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1903436117</pub-id>
        <?supplied-pmid 32641514?>
        <pub-id pub-id-type="pmid">32641514</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Versatile genome assembly evaluation with QUAST-LG</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>i142</fpage>
        <lpage>i150</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty266</pub-id>
        <?supplied-pmid 29949969?>
        <pub-id pub-id-type="pmid">29949969</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simão</surname>
            <given-names>FA</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Ioannidis</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kriventseva</surname>
            <given-names>EV</given-names>
          </name>
          <name>
            <surname>Zdobnov</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>BUSCO: assessing genome assembly and annotation completeness with single-copy orthologs</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <fpage>3210</fpage>
        <lpage>3212</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv351</pub-id>
        <?supplied-pmid 26059717?>
        <pub-id pub-id-type="pmid">26059717</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>3094</fpage>
        <lpage>3100</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id>
        <?supplied-pmid 29750242?>
        <pub-id pub-id-type="pmid">29750242</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rhie</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Merqury: reference-free quality, completeness, and phasing assessment for genome assemblies</article-title>
        <source>Genome Biol.</source>
        <year>2020</year>
        <volume>21</volume>
        <fpage>245</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02134-9</pub-id>
        <?supplied-pmid 32928274?>
        <pub-id pub-id-type="pmid">32928274</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The complete sequence of a human genome</article-title>
        <source>Science</source>
        <year>2022</year>
        <volume>376</volume>
        <fpage>44</fpage>
        <lpage>53</lpage>
        <pub-id pub-id-type="doi">10.1126/science.abj6987</pub-id>
        <?supplied-pmid 35357919?>
        <pub-id pub-id-type="pmid">35357919</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vaser</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sović</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Šikić</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>
        <source>Genome Res.</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>737</fpage>
        <lpage>746</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>
        <?supplied-pmid 28100585?>
        <pub-id pub-id-type="pmid">28100585</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Tromp</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>PatternHunter: faster and more sensitive homology search</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>440</fpage>
        <lpage>445</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.3.440</pub-id>
        <?supplied-pmid 11934743?>
        <pub-id pub-id-type="pmid">11934743</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Base-calling of automated sequencer traces using phred. II. Error probabilities</article-title>
        <source>Genome Res.</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>186</fpage>
        <lpage>194</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.8.3.186</pub-id>
        <?supplied-pmid 9521922?>
        <pub-id pub-id-type="pmid">9521922</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hillier</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wendl</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Base-calling of automated sequencer traces using phred. I. Accuracy assessment</article-title>
        <source>Genome Res.</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>175</fpage>
        <lpage>185</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.8.3.175</pub-id>
        <?supplied-pmid 9521921?>
        <pub-id pub-id-type="pmid">9521921</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jarvis</surname>
            <given-names>ED</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Semi-automated assembly of high-quality diploid human reference genomes</article-title>
        <source>Nature</source>
        <year>2022</year>
        <volume>611</volume>
        <fpage>519</fpage>
        <lpage>531</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-022-05325-5</pub-id>
        <?supplied-pmid 36261518?>
        <pub-id pub-id-type="pmid">36261518</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Performance of neural network basecalling tools for Oxford Nanopore sequencing</article-title>
        <source>Genome Biol.</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>129</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1727-y</pub-id>
        <?supplied-pmid 31234903?>
        <pub-id pub-id-type="pmid">31234903</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sahlin</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Effective sequence similarity detection with strobemers</article-title>
        <source>Genome Res.</source>
        <year>2021</year>
        <volume>31</volume>
        <fpage>2080</fpage>
        <lpage>2094</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.275648.121</pub-id>
        <?supplied-pmid 34667119?>
        <pub-id pub-id-type="pmid">34667119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mohamadi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ntHash: recursive nucleotide hashing</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <fpage>3492</fpage>
        <lpage>3494</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw397</pub-id>
        <?supplied-pmid 27423894?>
        <pub-id pub-id-type="pmid">27423894</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Kazemi, P. et al. ntHash2: recursive spaced seed hashing for nucleotide sequences. <italic>Bioinformatics</italic>10.1093/bioinformatics/btac564 (2022).</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ntEdit: scalable genome sequence polishing</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>35</volume>
        <fpage>4430</fpage>
        <lpage>4432</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz400</pub-id>
        <?supplied-pmid 31095290?>
        <pub-id pub-id-type="pmid">31095290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paulino</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Sealer: a scalable gap-closing application for finishing draft genomes</article-title>
        <source>BMC Bioinform.</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>230</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-015-0663-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ABySS 2.0: resource-efficient assembly of large genomes using a Bloom filter</article-title>
        <source>Genome Res.</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>768</fpage>
        <lpage>777</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214346.116</pub-id>
        <?supplied-pmid 28232478?>
        <pub-id pub-id-type="pmid">28232478</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Nikolić</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>L. ntJoin: fast and lightweight assembly-guided scaffolding using minimizer graphs</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <fpage>3885</fpage>
        <lpage>3887</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa253</pub-id>
        <?supplied-pmid 32311025?>
        <pub-id pub-id-type="pmid">32311025</pub-id>
      </element-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nikolić</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>btllib: a C++ library with Python interface for efficient genomic sequence processing</article-title>
        <source>J. Open Source Softw.</source>
        <year>2022</year>
        <volume>7</volume>
        <fpage>4720</fpage>
        <pub-id pub-id-type="doi">10.21105/joss.04720</pub-id>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <mixed-citation publication-type="other">Smit, A. F. A., Hubley, R. &amp; Green, P. RepeatMasker open-4.0. <ext-link ext-link-type="uri" xlink:href="http://www.repeatmasker.org">http://www.repeatmasker.org</ext-link> (2013–2015).</mixed-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cunningham</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ensembl 2022</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2022</year>
        <volume>50</volume>
        <fpage>D988</fpage>
        <lpage>D995</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1049</pub-id>
        <?supplied-pmid 34791404?>
        <pub-id pub-id-type="pmid">34791404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <mixed-citation publication-type="other">Wong, J. et al. Linear time complexity de novo long read genome assembly with GoldRush. <italic>Zenodo</italic>10.5281/ZENODO.7884681 (2023).</mixed-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <mixed-citation publication-type="other">Wong, J. et al. Linear time complexity de novo long read genome assembly with GoldRush. <italic>Zenodo</italic>10.5281/ZENODO.7884291 (2022).</mixed-citation>
    </ref>
  </ref-list>
</back>
