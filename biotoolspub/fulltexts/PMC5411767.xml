<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.0 20120330//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Res</journal-id>
    <journal-id journal-id-type="hwp">genome</journal-id>
    <journal-id journal-id-type="pmc">genome</journal-id>
    <journal-id journal-id-type="publisher-id">GENOME</journal-id>
    <journal-title-group>
      <journal-title>Genome Research</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1088-9051</issn>
    <issn pub-type="epub">1549-5469</issn>
    <publisher>
      <publisher-name>Cold Spring Harbor Laboratory Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5411767</article-id>
    <article-id pub-id-type="medline">9509184</article-id>
    <article-id pub-id-type="doi">10.1101/gr.215087.116</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Canu: scalable and accurate long-read assembly via adaptive <italic>k</italic>-mer weighting and repeat separation</article-title>
      <alt-title alt-title-type="left-running">Koren et al.</alt-title>
      <alt-title alt-title-type="right-running">Canu: scalable and accurate long-read assembly</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Koren</surname>
          <given-names>Sergey</given-names>
        </name>
        <xref ref-type="aff" rid="af1">1</xref>
        <xref ref-type="author-notes" rid="FN1">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Walenz</surname>
          <given-names>Brian P.</given-names>
        </name>
        <xref ref-type="aff" rid="af1">1</xref>
        <xref ref-type="author-notes" rid="FN1">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Berlin</surname>
          <given-names>Konstantin</given-names>
        </name>
        <xref ref-type="aff" rid="af2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Miller</surname>
          <given-names>Jason R.</given-names>
        </name>
        <xref ref-type="aff" rid="af3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bergman</surname>
          <given-names>Nicholas H.</given-names>
        </name>
        <xref ref-type="aff" rid="af4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-2983-8934</contrib-id>
        <name>
          <surname>Phillippy</surname>
          <given-names>Adam M.</given-names>
        </name>
        <xref ref-type="aff" rid="af1">1</xref>
      </contrib>
    </contrib-group>
    <aff id="af1"><label>1</label>Genome Informatics Section, Computational and Statistical Genomics Branch, National Human Genome Research Institute, National Institutes of Health, Bethesda, Maryland 20892, USA;</aff>
    <aff id="af2"><label>2</label>Invincea Incorporated, Fairfax, Virginia 22030, USA;</aff>
    <aff id="af3"><label>3</label>J. Craig Venter Institute, Rockville, Maryland 20850, USA;</aff>
    <aff id="af4"><label>4</label>National Biodefense Analysis and Countermeasures Center, Frederick, Maryland 21702, USA</aff>
    <author-notes>
      <fn fn-type="equal" id="FN1">
        <label>5</label>
        <p>These authors contributed equally to this work.</p>
      </fn>
      <corresp>Corresponding author: <email>adam.phillippy@nih.gov</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>5</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <month>5</month>
      <year>2017</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="ppub"/>. -->
    <volume>27</volume>
    <issue>5</issue>
    <fpage>722</fpage>
    <lpage>736</lpage>
    <history>
      <date date-type="received">
        <day>23</day>
        <month>8</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>3</day>
        <month>3</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>
        <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/site/misc/terms.xhtml">Â© 2017 Koren et al.; Published by Cold Spring Harbor Laboratory Press</ext-link>
      </copyright-statement>
      <copyright-year>2017</copyright-year>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This article, published in <italic>Genome Research</italic>, is available under a Creative Commons License (Attribution 4.0 International), as described at <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="722.pdf"/>
    <abstract>
      <p>Long-read single-molecule sequencing has revolutionized de novo genome assembly and enabled the automated reconstruction of reference-quality genomes. However, given the relatively high error rates of such technologies, efficient and accurate assembly of large repeats and closely related haplotypes remains challenging. We address these issues with Canu, a successor of Celera Assembler that is specifically designed for noisy single-molecule sequences. Canu introduces support for nanopore sequencing, halves depth-of-coverage requirements, and improves assembly continuity while simultaneously reducing runtime by an order of magnitude on large genomes versus Celera Assembler 8.2. These advances result from new overlapping and assembly algorithms, including an adaptive overlapping strategy based on <italic>tf-idf</italic> weighted MinHash and a sparse assembly graph construction that avoids collapsing diverged repeats and haplotypes. We demonstrate that Canu can reliably assemble complete microbial genomes and near-complete eukaryotic chromosomes using either Pacific Biosciences (PacBio) or Oxford Nanopore technologies and achieves a contig NG50 of &gt;21 Mbp on both human and <italic>Drosophila melanogaster</italic> PacBio data sets. For assembly structures that cannot be linearly represented, Canu provides graph-based assembly outputs in graphical fragment assembly (GFA) format for analysis or integration with complementary phasing and scaffolding techniques. The combination of such highly resolved assembly graphs with long-range scaffolding information promises the complete and automated assembly of complex genomes.</p>
    </abstract>
    <funding-group>
      <award-group id="funding-1">
        <funding-source>National Human Genome Research Institute <named-content content-type="funder-id">http://dx.doi.org/10.13039/100000051</named-content></funding-source>
      </award-group>
      <award-group id="funding-2">
        <funding-source>National Institutes of Health <named-content content-type="funder-id">http://dx.doi.org/10.13039/100000002</named-content></funding-source>
        <award-id>HSHQDC-07-C-00020</award-id>
      </award-group>
      <award-group id="funding-3">
        <funding-source>US Department of Homeland Security <named-content content-type="funder-id">http://dx.doi.org/10.13039/100000180</named-content></funding-source>
      </award-group>
      <award-group id="funding-4">
        <funding-source>National Science Foundation <named-content content-type="funder-id">http://dx.doi.org/10.13039/100000001</named-content></funding-source>
        <award-id>NSF IOS-1237993</award-id>
      </award-group>
    </funding-group>
  </article-meta>
</front>
<body>
  <p>The goal of genome assembly is to reconstruct a complete genome from many comparatively short sequencing reads. Overlapping reads that originate from the same region of the genome can be joined together to form contigs, but genomic repeats longer than the overlap length lead to ambiguous reconstructions and fragment the assembly (<xref rid="KORENGR215087C51" ref-type="bibr">Phillippy et al. 2008</xref>; <xref rid="KORENGR215087C46" ref-type="bibr">Nagarajan and Pop 2009</xref>). There are two strategies for overcoming this fundamental limitation: increasing the effective read length, and separating nonexact repeats based on copy-specific variants. Recently, single-molecule sequencing has revolutionized assembly by producing reads &gt;10 kbp (<xref rid="KORENGR215087C19" ref-type="bibr">Gordon et al. 2016</xref>), which has significantly reduced the number of unresolvable repeats (<xref rid="KORENGR215087C33" ref-type="bibr">Koren et al. 2012</xref>) and enabled the complete assembly of microbial genomes (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>; <xref rid="KORENGR215087C34" ref-type="bibr">Koren et al. 2013</xref>; <xref rid="KORENGR215087C31" ref-type="bibr">Koren and Phillippy 2014</xref>). These long reads also aid assembly phasing (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>), where the conserved alleles in a diploid, polyploid, or meta-genome can be thought of as a special kind of repeat. However, in contrast to improved read length, single-molecule sequencing is less accurate than past technologies (<xref rid="KORENGR215087C14" ref-type="bibr">Eid et al. 2009</xref>; <xref rid="KORENGR215087C57" ref-type="bibr">Schneider and Dekker 2012</xref>), requiring sensitive alignment methods and limiting the discrimination of divergent alleles and nonexact repeats. Nevertheless, PacBio single-molecule real-time (SMRT) sequencing exhibits a largely unbiased and random error model (<xref rid="KORENGR215087C53" ref-type="bibr">Ross et al. 2013</xref>), enabling assemblies that exceed short-read data both in terms of quality and continuity (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>; <xref rid="KORENGR215087C34" ref-type="bibr">Koren et al. 2013</xref>). Oxford Nanopore strand sequencing can also produce highly continuous assemblies, but current biases in base calling prohibit an accurate consensus sequence without the addition of complementary data (<xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>).</p>
  <p>The increased read length and error rate of single-molecule sequencing has challenged genome assembly programs originally designed for shorter, highly accurate reads. Several new approaches have been developed to address this, roughly categorized as hybrid, hierarchical, or direct (for a review, see <xref rid="KORENGR215087C31" ref-type="bibr">Koren and Phillippy 2014</xref>). Hybrid methods use single-molecule reads to reconstruct the long-range structure of the genome, but rely on complementary short reads for accurate base calls (<xref rid="KORENGR215087C33" ref-type="bibr">Koren et al. 2012</xref>; <xref rid="KORENGR215087C20" ref-type="bibr">Hackl et al. 2014</xref>; <xref rid="KORENGR215087C36" ref-type="bibr">Lee et al. 2014</xref>; <xref rid="KORENGR215087C54" ref-type="bibr">Salmela and Rivals 2014</xref>; <xref rid="KORENGR215087C1" ref-type="bibr">Antipov et al. 2016</xref>; <xref rid="KORENGR215087C70" ref-type="bibr">Ye et al. 2016</xref>). Hierarchical methods do not require a secondary technology and instead use multiple rounds of read overlapping (alignment) and correction to improve the quality of the single-molecule reads prior to assembly (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>; <xref rid="KORENGR215087C34" ref-type="bibr">Koren et al. 2013</xref>). Finally, direct methods attempt to assemble single-molecule reads from a single overlapping step without any prior correction (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>; <xref rid="KORENGR215087C63" ref-type="bibr">TÃ¸rresen et al. 2017</xref>). All three approaches are capable of producing an accurate final assembly. However, our goal is the complete reconstruction of entire genomes, so we focus here on the hierarchical strategy because it has produced the most continuous de novo assemblies to date (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>; <xref rid="KORENGR215087C10" ref-type="bibr">Chakraborty et al. 2016</xref>).</p>
  <sec sec-type="results" id="s1">
    <title>Results</title>
    <p>Canu is a new single-molecule sequence assembler that improves upon and supersedes the now unsupported Celera Assembler (<xref rid="KORENGR215087C45" ref-type="bibr">Myers et al. 2000</xref>; <xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. 2008</xref>). Recently, we introduced the MinHash Alignment Process (MHAP) to overcome the computational bottleneck of overlapping noisy, single-molecule sequencing reads (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). By combining this technique with PBcR (<xref rid="KORENGR215087C33" ref-type="bibr">Koren et al. 2012</xref>) and Celera Assembler, we demonstrated near-complete eukaryotic assemblies from PacBio sequencing alone (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). Building on this work, we developed Canu to (1) integrate our methods into a single, comprehensive assembler; (2) support both PacBio and Oxford Nanopore data; (3) lower runtime and coverage requirements; and (4) improve repeat and haplotype separation. As a result, Canu improves runtime by an order of magnitude for mammalian genomes and outperforms hybrid methods with as little as 20Ã single-molecule coverage. At higher coverage, reference-quality de novo assemblies are possible, including the complete assembly of euchromatic chromosomes from either PacBio or Nanopore sequencing. In addition, Canu's improved graph construction algorithm separates closely related repeats and alleles based on a statistical model of read error, which will be important for future work on diploid, polypoloid, and metagenomic assembly.</p>
    <sec id="s1a">
      <title>Architecture</title>
      <p>To improve usability and performance on single-molecule sequence data, Canu introduces several novel features, including computational resource discovery, adaptive <italic>k</italic>-mer weighting, automated error rate estimation, sparse graph construction, and graphical fragment assembly (GFA) (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>) outputs. The Canu pipeline consists of three stagesâcorrection, trimming, and assembly (<xref ref-type="fig" rid="KORENGR215087F1">Fig. 1</xref>)âeach of which can run independently or in series (e.g., only read correction, or assembly without correction, etc.). When running in a parallel environment, Canu will auto-detect available resources and configure itself to maximize resource utilization. It is currently the most efficient single-molecule read assembler available for large genomes, requiring approximately 20,000 CPU hours to assemble a human genome, compared to about 60,000 required for FALCON (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>) and more than 250,000 required for Celera Assembler v8.2 (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). In addition to these runtime improvements, the resulting assemblies are significantly more continuous than prior versions.</p>
      <fig id="KORENGR215087F1" orientation="portrait" position="float">
        <label>Figure 1.</label>
        <caption>
          <p>A full Canu run includes three stages: correction (green), trimming (red), and assembly (purple). Canu stages share an interface for binary on-disk stores (databases), as well as parallel store construction. In all stages, the first step constructs an indexed store of input sequences, generates a <italic>k</italic>-mer histogram, constructs an indexed store of all-versus-all overlaps, and collates summary statistics. The correction stage (green) selects the best overlaps to use for correction, estimates corrected read lengths, and generates corrected reads. The trimming stage (red) identifies unsupported regions in the input and trims or splits reads to their longest supported range. The assembly stage (purple) makes a final pass to identify sequencing errors; constructs the best overlap graph (BOG); and outputs contigs, an assembly graph, and summary statistics.</p>
        </caption>
        <graphic xlink:href="722f01"/>
      </fig>
    </sec>
    <sec id="s1b">
      <title>Adaptive MinHash <italic>k</italic>-mer weighting</title>
      <p>Optimal handling of repeats is a challenge, because in addition to fragmenting assemblies, repeats also cause computational bottlenecks during overlapping. Read overlapping typically proceeds in two stages: first building a list of read pairs that share some similarity and then performing a more direct comparison of those read pairs (e.g., dynamic programming) (<xref rid="KORENGR215087C62" ref-type="bibr">Sutton et al. 1995</xref>). Candidate overlaps are typically found in the first stage by identifying shared <italic>k</italic>-mers (length <italic>k</italic> substrings) between all pairs of reads. However, repeats reduce the entropy of the <italic>k</italic>-mer distribution compared with random sequence, and the frequent occurrence of some <italic>k</italic>-mers significantly increases the number of candidate overlaps that must be processed by the more expensive second stage. A common solution is to mask low-complexity sequence or ignore highly repetitive <italic>k</italic>-mers during indexing (<xref rid="KORENGR215087C48" ref-type="bibr">Ning et al. 2001</xref>), as is done by many assemblers, including Celera Assembler (<xref rid="KORENGR215087C45" ref-type="bibr">Myers et al. 2000</xref>), FALCON (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>), and Miniasm (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>). However, depending on how many repeating <italic>k</italic>-mers are ignored, some fraction of correct overlaps will not be detected.</p>
      <p>Canu takes a more resilient approach to handling repeats that probabilistically reduces, but does not eliminate, the chance a repetitive <italic>k</italic>-mer will be selected for overlapping. This weighting is achieved via a MinHash overlapping strategy. Rather than comparing individual <italic>k</italic>-mers to identify potential read overlaps, Canu uses the previously described MHAP to compare compressed sketches of entire reads (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). Because each MinHash sketch contains a fixed-size subset of <italic>k</italic>-mers selected from a read, the probability of including particular <italic>k</italic>-mers in a sketch can be adjusted. For instance, a repetitive <italic>k</italic>-mer occurring many times throughout the genome should have a reduced weight, because it carries relatively little information regarding the origin of the read. In contrast, a relatively unique <italic>k</italic>-mer occurring multiple times in a single read should have an increased weight, because it represents a larger fraction of the read's length. The combination of these terms represents the relative importance of a <italic>k</italic>-mer, and in natural language processing, this is known as a <italic>tf-idf</italic> weight (term frequency, inverse document frequency).</p>
      <p>Application of <italic>tf-idf</italic> weighting to MinHash sketches is straightforward (<xref rid="KORENGR215087C13" ref-type="bibr">Chum et al. 2008</xref>). Applied to the read overlapping problem, the weighting is a multiplicative combination of the number of occurrences of a <italic>k</italic>-mer inside a read (the document) and the overall rarity of the <italic>k</italic>-mer among all reads (the corpus). For document similarity, the intuition is that a rare word that occurs multiple times in a single document is a good candidate to identify similar documents. For read overlapping, this statistic has the desirable property that repetitive <italic>k</italic>-mers receive low weights. By reducing the occurrence of repetitive <italic>k</italic>-mers within sketches, the frequency distribution of indexed <italic>k</italic>-mers becomes more uniform. This reduces the number of uninformative, repetitive overlaps that are identified during sketch comparison, significantly improving both runtime and memory usage. Importantly, this is achieved via a probabilistic process so no repeat masking is required, and true overlaps between repetitive reads will still be recovered. Alternative weighting schemes are also possible with this technique (e.g., to increase the probability of selecting haplotype-specific <italic>k</italic>-mers), but we focus our evaluation on the <italic>tf-idf</italic> statistic.</p>
      <p>We evaluated <italic>tf-idf</italic> weighting on a <italic>Bacillus anthracis</italic> genome sequenced with the Oxford Nanopore MinION (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Notes 1, 2</ext-link>). The <italic>B. anthracis</italic> Sterne strain makes a useful test because it possesses a single plasmid often present in multiple copies relative to the main chromosome. In this case, the pXO1 plasmid presented at approximately sixfold higher coverage than the chromosome (487Ã vs. 76Ã). This variable sequencing depth challenges traditional <italic>k</italic>-mer filtering strategies based on a fixed, all-or-nothing threshold. Additionally, it is critically important to recover such plasmids during sequencing, because increased copy number has been previously associated with virulence in other species like <italic>Yersinia pestis</italic> (<xref rid="KORENGR215087C68" ref-type="bibr">Wang et al. 2016</xref>). As expected, MHAP overlap sensitivity for the plasmid is low (26%) when repetitive <italic>k</italic>-mers are filtered via a fixed threshold. Similarly low sensitivity is seen from Minimap (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>) and DALIGNER (<xref rid="KORENGR215087C44" ref-type="bibr">Myers 2014</xref>)â17% and 60%, respectivelyâwhich both employ a <italic>k</italic>-mer count threshold by default (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S1</ext-link>). Manually increasing this threshold to include plasmid <italic>k</italic>-mers improves Minimap and DALIGNER sensitivity to 94% and 76%, respectively. However, Minimap suffers a drop in positive predictive value (PPV), reporting more false, repeat-induced overlaps. DALIGNER performs a dynamic programing check to confirm all candidate overlaps, so its PPV remains high, but it suffers both a memory (1.6-fold) and runtime (twofold) penalty. In contrast, Canu's adaptive <italic>tf-idf</italic> weighting scheme requires no parameter adjustment and achieves 89% sensitivity and maintains high PPV (99.5%) with no added runtime or memory penalty.</p>
    </sec>
    <sec id="s1c">
      <title>Best overlap graph</title>
      <p>Canu uses a variant of the greedy âbest overlap graphâ (BOG) algorithm from <xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. (2008)</xref> for constructing a sparse overlap graph. Loading the full overlap graph into memory, as required by string graph formulations (<xref rid="KORENGR215087C43" ref-type="bibr">Myers 2005</xref>), can be costly for large, complex genomes. In contrast, the greedy algorithm loads only the âbestâ (longest) overlaps for each read end into memory. This greedy approach is optimal when the read length is sufficiently long (<xref rid="KORENGR215087C6" ref-type="bibr">Bresler et al. 2013</xref>), and a BOG can be built using just 64 GB of memory for a mammalian genome. However, the greedy algorithm can be misled by repeats that are longer than the overlap length and is therefore prone to misassemblies. Canu's new âBogartâ algorithm addresses this problem by statistically filtering repeat-induced overlaps and retrospectively inspecting the graph for potential errors.</p>
      <p>In the original BOG method, the best overlaps were selected from a pool of all overlaps below a user-specified error rate threshold, where the overlap error rate is defined as the edit distance divided by the length of the overlap alignment. Thus, this threshold must be set low enough that repeats do not result in false overlaps yet high enough to account for sequencing error and detect true overlaps. In the new Bogart method, the optimal overlap error rate parameter is automatically estimated from the data, both globally and locally. However, this presents a challenge for raw single-molecule data, which has a sequencing error rate between 10% and 20% that blurs the distinction between noise and repeat-induced overlaps. Therefore, Canu performs multiple rounds of read and overlap error correction prior to graph construction. After these corrections, the residual read error is estimated from the distribution of all longest overlaps. This full overlap set is then filtered to include only those overlaps within some tolerance of the global median error rate (<xref ref-type="fig" rid="KORENGR215087F2">Fig. 2</xref>A), and the longest overlaps are recomputed using only this subset. Compared with prior versions of BOG that used a 5% default overlap error rate, Bogart will typically discover an overlap error rate &lt;2% for corrected PacBio data. This low threshold effectively removes most false overlaps, allowing the greedy method to construct a clean BOG. From this graph, initial contigs are constructed from the maximal nonbranching paths.</p>
      <fig id="KORENGR215087F2" orientation="portrait" position="float">
        <label>Figure 2.</label>
        <caption>
          <p>An illustration of overlap error rate estimation, repeat identification, and splitting. (<italic>A</italic>) A histogram of all best edge error rates with the auto-selected threshold shown as a dashed line for the <italic>Drosophila melanogaster</italic> PacBio data set. All overlaps up to 4% error were computed. However, the modal error rate is 0.25% (0.25% median, 0.15% MAD), and Canu chose to use only overlaps &lt;1.6% error for graph construction on this data set. (<italic>B</italic>) The dashed line shows the global error rate threshold (1.6%), and the profile shows the locally computed error rate for the largest contig in this assembly. Only overlaps consistent with this local error rate are considered as potential alternate paths when supplementing the initial BOG. By adjusting the error rate for each contig, Canu can separate diverged repeats without making an assumption of uniform read error across the assembly. (<italic>C</italic>) The contig is shown as a black line with arrows on both sides, indicating Bogart extends a path in both the 5â² and 3â² directions until encountering no overlaps or a read that is already incorporated in another contig. Repeat regions annotated by conflicting reads are shown <italic>above</italic> the contig. The reads align to part of the contig (the repeat) but indicate a different boundary sequence. A single read (blue line) spans the full repeat region, indicating the contig reconstruction is correct. (<italic>D</italic>) Repeat regions annotated by conflicting reads as before. In this case, no single read spans the full repeat region, and the initial contig was built using the overlap between two blue reads. The contig is split if the overlap between the two blue reads is not significantly better than the overlap from either blue read to the conflicting red read.</p>
        </caption>
        <graphic xlink:href="722f02"/>
      </fig>
      <p>To evaluate this repeat separation, we compared Canu, FALCON, and Miniasm on a simulated data set containing two repeat copies with known divergence varying from 0%â15% and without any spanning reads (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 3</ext-link>). Canu was able to resolve the repeat when the divergence between copies was â¥3%, without any manual parameter tuning (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S2</ext-link>). In contrast, FALCON could only resolve the repeat at 5%, after it had diverged beyond the default overlap error rate used for corrected reads. Because it lacks a correction step, Miniasm could not resolve the repeat until 13% divergence, higher than the simulated sequencing error rate. This observation may explain why Miniasm is less continuous than Canu and FALCON assemblies on large genomes.</p>
      <p>Despite careful correction and overlap filtering, exact or near exact repeats within the error rate tolerance can still add false edges to the graph, resulting in potential misassemblies that incorrectly join distant parts of the genome. To guard against this, each initial contig is inspected to identify and correct potential errors. First, the expected overlap error rate for each position of the contig is locally computed using the best overlaps (<xref ref-type="fig" rid="KORENGR215087F2">Fig. 2</xref>B). Next, all nonbest overlaps to reads outside the contig within some deviation of the expected error rate are collected. This excludes sufficiently diverged repeats and haplotypes while retaining overlaps that are compatible with the local error profile. These overlaps are used to annotate potential alternative branches within the contig and flagged for further inspection. If a branching region is spanned by at least one read (<xref ref-type="fig" rid="KORENGR215087F2">Fig. 2</xref>C; <xref rid="KORENGR215087C65" ref-type="bibr">Ukkonen 1992</xref>) or if there is no alternate overlap of similar quality (<xref ref-type="fig" rid="KORENGR215087F2">Fig. 2</xref>D), it is confirmed as correct. Otherwise, the region is split into at least three new contigs and labeled as an unresolved repeat.</p>
      <p>After construction and validation, Canu provides a representation of the final assembly graph in the GFA format (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>). This representation is equivalent to a sparse read overlap graph, simplified to merge unambiguous paths and contained reads. <xref ref-type="fig" rid="KORENGR215087F3">Figure 3</xref> shows the Canu assembly graph for <italic>Drosophila melanogaster</italic> sequenced using PacBio. Some chromosome arms are assembled into single contigs, but the graph reveals the structure of the more complex, unresolved repeats in the assembly. For example, Chromosome 2L is assembled as a single component in the graph but is broken toward the end due to a large array of transposable elements and the histone gene cluster, which spans &gt;500 kbp (<xref rid="KORENGR215087C23" ref-type="bibr">Hoskins et al. 2015</xref>). These elements also correspond to unfinished gaps in the <italic>D. melanogaster</italic> reference. Canu's graphical output localizes this complex structure to a specific chromosome arm and location. However, the size of the repeats precludes complete assembly. Combining the Canu assembly graph with supplementary long-range information, such as from optical (<xref rid="KORENGR215087C21" ref-type="bibr">Hastie et al. 2013</xref>) or chromatin contact mapping (<xref rid="KORENGR215087C9" ref-type="bibr">Burton et al. 2013</xref>; <xref rid="KORENGR215087C29" ref-type="bibr">Kaplan and Dekker 2013</xref>), could help identify the correct path and resolve such structures.</p>
      <fig id="KORENGR215087F3" orientation="portrait" position="float">
        <label>Figure 3.</label>
        <caption>
          <p>Canu GFA output localizes complex repeat regions, allowing for improved scaffolding. (<italic>A</italic>) Bandage (<xref rid="KORENGR215087C69" ref-type="bibr">Wick et al. 2015</xref>) plot of <italic>D. melanogaster</italic> compared with the karyotype (<xref rid="KORENGR215087C61" ref-type="bibr">Stevens 1912</xref>; <xref rid="KORENGR215087C40" ref-type="bibr">Metz 1914</xref>) from FlyBase (<xref rid="KORENGR215087C2" ref-type="bibr">Attrill et al. 2016</xref>)<italic>.</italic> Nodes are contigs sized by length, and edges indicate unused overlaps between contigs. The largest contigs are colored randomly and labeled with their chromosome based on alignment to the reference. (<italic>B</italic>) The callout shows Chromosome 2L from positions 3.07â23.12 Mbp, redrawn with the centromere at the <italic>top</italic> (indicated by a filled circle). Unique contigs are shaded black, while repeat contigs are shaded red. While the 2L chromosome scaffold is composed of 10 individual contigs, they are all linked in the output graph. The two red regions correspond to reference gaps at positions 2L:21,485,538, which consist of 100â200 copies of the histone gene cluster spanning &gt;500 kbp and 2L:22,420,241, which is bordered by several TE repeats (<xref rid="KORENGR215087C23" ref-type="bibr">Hoskins et al. 2015</xref>). The break in the <italic>bottom left</italic> of Chromosome 2L could not be confidently identified but is next to a feature labeled âFlyBase transposable elementâ in the genome annotation and is likely a transposable element insertion site. Even though Canu is unable to fully resolve these large repeat arrays, the graph indicates large-scale continuity across Chromosome 2L and could enable resolution with secondary technologies.</p>
        </caption>
        <graphic xlink:href="722f03"/>
      </fig>
    </sec>
    <sec id="s1d">
      <title>Low-coverage hierarchical assembly</title>
      <p>Canu substantially lowers the coverage requirements for single-molecule de novo assembly. Previously, at least 50Ã coverage was recommended for hierarchical assembly methods (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>; <xref rid="KORENGR215087C10" ref-type="bibr">Chakraborty et al. 2016</xref>). However, as sequencing lengths and algorithms have improved, so have the minimum input requirements. To quantify performance and determine when a hybrid method may be preferred, we randomly subsampled 10Ãâ150Ã of PacBio P5-C3 coverage from <italic>Arabidopsis thaliana</italic> Ler-0 (<xref rid="KORENGR215087C30" ref-type="bibr">Kim et al. 2014</xref>) and compared Canu assemblies to both Illumina-only and hybrid assemblies using SPAdes (<xref rid="KORENGR215087C1" ref-type="bibr">Antipov et al. 2016</xref>). At 20Ã single-molecule coverage, the Canu assembly is more continuous than the hybrid SPAdes assembly of 20Ã PacBio combined with 100Ã Illumina. Although making efficient use of low-coverage PacBio data, the hybrid method plateaus after 30Ã, and the continuity of the Canu 20Ã assembly is comparable to the best hybrid assembly given 150Ã of PacBio (<xref ref-type="fig" rid="KORENGR215087F4">Fig. 4</xref>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 4</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S3</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S1</ext-link>). In contrast, Canu continues to improve with increasing PacBio coverage, reaching its maximum assembly continuity around 50Ã. The amount of improvement is a function of the repeat content and sequence length. PacBio sequence lengths follow a log-normal distribution (<xref rid="KORENGR215087C50" ref-type="bibr">Ono et al. 2013</xref>), and additional coverage increases the probability of spanning a long repeat. Thus, we would expect continued improvement with higher coverage for larger, more complex genomes. Currently, we recommend the hierarchical method whenever single-molecule coverage exceeds 20Ã. However, consensus accuracy from low-coverage single-molecule data is limited, and polishing (<xref rid="KORENGR215087C67" ref-type="bibr">Walker et al. 2014</xref>) with short reads is recommended after assembly (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S3</ext-link>).</p>
      <fig id="KORENGR215087F4" orientation="portrait" position="float">
        <label>Figure 4.</label>
        <caption>
          <p>A comparison of <italic>Arabidopsis thaliana</italic> assembly continuity for Canu and SPAdes. Each set of contigs is sorted from longest to shortest and plotted versus a cumulative percentage of the genome covered. Assemblies with larger contigs appear in the <italic>top</italic> of the plot. The ideal assembly corresponds to the green reference line. The commonly used NG50 metric corresponds to the vertical dashed line. Canu quickly gains continuity with increasing coverage, approaching the limit with 50Ã PacBio on this genome. In contrast, while making a large gain from Illumina-only to 10Ã PacBio, SPAdes continuity plateaus by 30Ã, and the Canu 20Ã assembly is comparable to the hybrid SPAdes assembly using 150Ã PacBio.</p>
        </caption>
        <graphic xlink:href="722f04"/>
      </fig>
    </sec>
    <sec id="s1e">
      <title>Assembly evaluation</title>
      <p>We evaluated Canu on a variety of microbial and eukaryotic genomes and compared it with FALCON (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>), Miniasm (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>), and hybrid SPAdes (<xref rid="KORENGR215087C1" ref-type="bibr">Antipov et al. 2016</xref>) using both PacBio and Oxford Nanopore sequencing data (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Notes 5â7</ext-link>). Continuity was measured using maximum and NG50 contig size, where NG50 is the longest contig such that contigs of this length or greater sum to at least half the haploid genome size. Accuracy was computed via alignment to the nearest available reference genome using MUMmer (<xref rid="KORENGR215087C35" ref-type="bibr">Kurtz et al. 2004</xref>) and reported using the GAGE (<xref rid="KORENGR215087C55" ref-type="bibr">Salzberg et al. 2012</xref>) metrics, which evaluate both base (single nucleotide) and structural breakpoints (inversions, relocations, and translocations). An ideal assembly has high continuity, low breakpoints, and high base accuracy, with 99.99% (Phred QV40) (<xref rid="KORENGR215087C15" ref-type="bibr">Ewing and Green 1998</xref>) commonly defined as the minimum quality for a âfinishedâ sequence (<xref rid="KORENGR215087C17" ref-type="bibr">Felsenfeld et al. 1999</xref>; <xref rid="KORENGR215087C56" ref-type="bibr">Schmutz et al. 2004</xref>).</p>
      <sec id="s1e1">
        <title>PacBio sequence assembly</title>
        <p>We assembled bacterial and eukaryotic genomes recently released (<xref rid="KORENGR215087C30" ref-type="bibr">Kim et al. 2014</xref>) and available from PacBio DevNet (<uri xlink:href="https://github.com/PacificBiosciences/DevNet/wiki/Datasets">https:// github.com/PacificBiosciences/DevNet/wiki/Datasets</uri>). <xref ref-type="table" rid="KORENGR215087TB1">Table 1</xref> shows that Canu produces the most continuous assembly on three of the four eukaryotic genomes tested, while maintaining high accuracy (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Figs. S2âS6</ext-link>). In the one case that Miniasm produces a higher NG50 (<italic>Caenorhabditis elegans</italic>), both FALCON and Miniasm introduce large-scale structural rearrangements not present in the Canu assembly (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S5</ext-link>). For initial assembly, Miniasm (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>) is an order of magnitude faster than Canu and FALCON (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 8</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S4âS7</ext-link>). However, in contrast to Canu and FALCON, Miniasm does not perform a gapped alignment for either overlapping or consensus generation. Instead, Miniasm generates a string graph (<xref rid="KORENGR215087C43" ref-type="bibr">Myers 2005</xref>) directly from approximate read overlaps and labels the edges of this graph with the raw read sequences. Thus, the average identity of the resulting assembly is equal to the identity of the input sequences, and the approximate overlap positions can leave large insertions and deletions in the assembly at the boundaries of the read segments. As a result, the Miniasm assemblies have both low base accuracy (&lt;90%) and a higher frequency of large insertions and deletions, which can be difficult to remove during polishing. Therefore, Miniasm requires four rounds of Quiver polishing (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>) before the assembly quality converges, whereas Canu requires only a single polishing round and is ultimately fastest to generate a polished assembly (<xref ref-type="table" rid="KORENGR215087TB1">Table 1</xref>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 9</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S8âS11</ext-link>). To test if Miniasm polishing could be accelerated using a different algorithm, we tested the recently released Racon tool (<xref rid="KORENGR215087C66" ref-type="bibr">Vaser et al. 2017</xref>), which was designed for this purpose. However, on <italic>C. elegans</italic>, two rounds of Racon required 60 CPU hours and produced a lower-quality consensus than a single round of Quiver, which required a comparable 110 CPU hours.</p>
        <table-wrap id="KORENGR215087TB1" orientation="portrait" position="float">
          <label>Table 1.</label>
          <caption>
            <p>Canu is fastest for generating a high-quality polished assembly from PacBio data</p>
          </caption>
          <graphic xlink:href="722tb01"/>
        </table-wrap>
        <p>Canu shows good scaling to mammalian genomes, completing a polished human assembly tenfold faster than Celera Assembler 8.2, which was used to assemble the first human genome from PacBio data alone (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>), and threefold faster than the more recent FALCON assembler (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S4, S5</ext-link>). Canu runtime improvements come from recent optimizations to the initial overlapping and read correction process (Methods), which have traditionally been the slowest step in hierarchical assembly. Read correction is now the fastest step of the Canu pipeline. As a result, Canu is often able to generate a complete assembly in less time than FALCON requires for its initial DALIGNER (<xref rid="KORENGR215087C44" ref-type="bibr">Myers 2014</xref>) overlapping stage (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S4, S5</ext-link>). On the human genome, where the upfront cost of building MHAP sketches is most effectively amortized, Canu's initial overlapping step is also faster than Minimap (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S6</ext-link>), but Miniasm failed to assemble this data set due to its in-memory string graph construction, which exceeded 1 TB of memory. Canu's greedy algorithm required &lt;36 GB for the same data set.</p>
        <p>Canu also represents a dramatic improvement over the latest version of Celera Assembler (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). Our previous PacBio P5-C3 human (CHM1) assembly required more than 250,000 CPU hours with Celera Assembler, resulting in a contig NG50 of 4 Mbp (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). The reassembly of this same data set with Canu required fewer than 25,000 CPU hours and the NG50 increased to &gt;7 Mbp. Improvements to PacBio chemistries also result in impressive assembly gains. An updated assembly using the more recent PacBio P6-C4 chemistry requires the same runtime yet increases the NG50 fivefold to &gt;20 Mbp. This de novo Canu assembly has comparable assembly size, contig counts, and continuity to the human reference assemblies before NCBI Build 34 (ca. 2003), which is the release immediately prior to the âfinishedâ human genome (<xref rid="KORENGR215087C24" ref-type="bibr">International Human Genome Sequencing Consortium 2004</xref>). The contig sizes of this Canu human assembly are also comparable to the scaffold sizes generated by Celera (<xref rid="KORENGR215087C26" ref-type="bibr">Istrail et al. 2004</xref>), which used Sanger sequencing with a range of insert sizes and BACs.</p>
        <p>Since CHM1 is effectively a haploid sample, we also tested Canu on the recently released diploid Chinese human genome (HX1) (<xref rid="KORENGR215087C59" ref-type="bibr">Shi et al. 2016</xref>). These data have a similar read length distribution to the CHM1 P5-C3 data (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S7</ext-link>), albeit at twice the coverage, so one would expect a slight continuity improvement. As expected, the Canu HX1 assembly achieved an NG50 of 9.00 Mbp (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S8</ext-link>), improving on the published FALCON assembly NG50 of 7.61 Mbp (<xref rid="KORENGR215087C59" ref-type="bibr">Shi et al. 2016</xref>) and thereby demonstrating that Canu performs equally well on diploid human genomes. However, due to the relatively low level of heterozygosity, Canu will currently collapse human haplotypes and would require dedicated phasing to generate a haplotype-resolved human assembly.</p>
      </sec>
      <sec id="s1e2">
        <title>Nanopore sequence assembly</title>
        <p>Currently, the Oxford Nanopore MinION can read either one or both strands of a double-stranded DNA molecule. The â1Dâ mode sequences only the template strand, whereas the â2Dâ mode sequences both the template and complement strands via a hairpin adapter. This technique is similar to PacBio circular consensus sequencing (CCS) (<xref rid="KORENGR215087C64" ref-type="bibr">Travers et al. 2010</xref>). Because the 2D mode provides two independent observations of each base, the per-read accuracy is improved (e.g., from 70% to 86% for R7.3 chemistry) (<xref ref-type="fig" rid="KORENGR215087F5">Fig. 5</xref>A). To date, all assembly evaluations have focused on the more accurate 2D sequences (<xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>; <xref rid="KORENGR215087C28" ref-type="bibr">Judge et al. 2016</xref>; <xref rid="KORENGR215087C60" ref-type="bibr">Sovic et al. 2016</xref>). While more accurate, the library preparation for 2D sequencing is more complex, reduces the effective throughput of the instrument (each molecule must be read twice), and currently produces shorter sequences. Thus, we designed Canu to assemble both 2D and the noisier 1D sequences, which benefit from increased read length and throughput, both key factors for genome assembly.</p>
        <fig id="KORENGR215087F5" orientation="portrait" position="float">
          <label>Figure 5.</label>
          <caption>
            <p>Canu can assemble both 1D and 2D Nanopore <italic>Escherhicia coli</italic> reads. (<italic>A</italic>) A comparison of error rates for 1D and 2D read error rates versus the reference. Template 1D and 2D reads from the MAP006-1 <italic>E. coli</italic> data set were aligned independently to compute an identity for all reads with an alignment &gt;90% of their length (95% of the 2D reads and 86% of the 1D reads had an alignment &gt;90% of their length). The 2D sequences averaged 86% identity, and the 1D reads averaged 70% identity. (<italic>B</italic>) Bandage plot of the Canu BOG for the 2D data. The genome is in a single circle representing the full chromosome. (<italic>C</italic>) The corresponding plot for 1D data. While highly continuous, there are multiple components due to missed overlaps and unresolved repeats (due to the higher sequencing error rate).</p>
          </caption>
          <graphic xlink:href="722f05"/>
        </fig>
        <p><xref ref-type="table" rid="KORENGR215087TB2">Table 2</xref> shows Canu assemblies of seven recent 2D Nanopore sequencing runs (<uri xlink:href="http://lab.loman.net/2015/09/24/first-sqk-map-006-experiment/">http://lab.loman.net/2015/09/24/first-sqk-map-006-experiment/</uri> and <uri xlink:href="http://lab.loman.net/2016/07/30/nanopore-r9-data-release">http://lab.loman.net/2016/07/30/nanopore-r9-data-release</uri>; <xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>). Consistent with independent evaluations (<xref rid="KORENGR215087C28" ref-type="bibr">Judge et al. 2016</xref>; <xref rid="KORENGR215087C60" ref-type="bibr">Sovic et al. 2016</xref>), Canu produces highly continuous assemblies from Nanopore data alone, and the continuity of Canu assemblies was equal to or better than all assemblers tested. Miniasm was again extremely fast and produced structurally correct and continuous assemblies (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 10</ext-link>, <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S12âS14</ext-link>, <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Figs. S9âS15</ext-link>), except for <italic>B. anthracis</italic>, where it failed to assemble the high-copy plasmid pXO1 due to its stringent <italic>k</italic>-mer filtering. As with PacBio, the initial Minimap assemblies also have low base accuracy. For Nanopore data, Minimap assemblies were &lt;90% accurate, whereas Canu assemblies typically exceeded 99%. Consensus polishing using the Nanopore signal data with Nanopolish (<xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>) further improved the accuracy of all assemblies to as high as 99.85%, but polishing the lower-quality Miniasm assemblies to comparable accuracy was 750% slower (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S12âS14</ext-link>).</p>
        <table-wrap id="KORENGR215087TB2" orientation="portrait" position="float">
          <label>Table 2.</label>
          <caption>
            <p>Canu consistently assembles complete genomes from only Oxford Nanopore data</p>
          </caption>
          <graphic xlink:href="722tb02"/>
        </table-wrap>
        <p>Generating a finished-quality (&gt;99.99%) consensus sequence from Nanopore reads required polishing with complementary short-read data. We repeated the above evaluation but substituted Pilon (<xref rid="KORENGR215087C67" ref-type="bibr">Walker et al. 2014</xref>) for Nanopolish (<xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>) and included comparisons to hybrid SPAdes (<xref ref-type="table" rid="KORENGR215087TB3">Table 3</xref>). Pilon aligns Illumina reads against an assembled sequence and corrects base errors and small insertions and deletions (indels). As with Nanopolish, this process was iterated until consensus quality converged, except for hybrid SPAdes, which did not require additional polishing. Combined assembly and polishing times for all assemblers were comparable. Canu, FALCON, and SPAdes routinely exceeded 99.99% polished base accuracy, but Miniasm was unable to exceeded 99.9% after many rounds of polishing (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Table S15</ext-link>). The residual Miniasm errors were large (average &gt;500 bp) expansions or collapses in the draft assembly (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S16</ext-link>), which are difficult to correct using short-read sequences. Hybrid SPAdes was typically most accurate, in terms of both base and structural accuracy. However, on the repetitive <italic>Y. pestis</italic> genome, it was significantly less continuous than hierarchical methods, and on the newer high-quality Nanopore data sets, the polished Canu accuracy exceeded SPAdes (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 11</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Tables S16âS19</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Figs. S17âS23</ext-link>).</p>
        <table-wrap id="KORENGR215087TB3" orientation="portrait" position="float">
          <label>Table 3.</label>
          <caption>
            <p>Nanopore assemblies exceed hybrid methods in continuity and match their quality when polished with Illumina data</p>
          </caption>
          <graphic xlink:href="722tb03"/>
        </table-wrap>
      </sec>
      <sec id="s1e3">
        <title>Nanopore 1D sequence assembly</title>
        <p>We evaluated the performance of Canu on noisy 1D data using only the template sequences from the <italic>Escherichia coli</italic> MAP006-1 data set, which averaged a raw 1D accuracy of just 70% (<xref ref-type="fig" rid="KORENGR215087F5">Fig. 5</xref>A). To deal with this high error, we exploited the modularity of Canu to run 10 rounds of correction, with the output of each round fed as input to the next (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 12</ext-link>). The corrected reads were then assembled into 10 contigs with an NG50 of 619 kbp and a maximum contig size of 1.22 Mbp covering 89% of the reference at 85.52% identity versus a single circular chromosome for 2D data (<xref ref-type="fig" rid="KORENGR215087F5">Fig. 5</xref>B,C). In contrast, the Miniasm assembly of these data covered &lt;10% of the reference at 76.76% identity (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S24</ext-link>). Polishing the Canu assembly with Nanopolish converged on a 1D consensus accuracy of 98% identity, and short-read polishing with Pilon improved the assembly to 93.83% coverage and 99.72% identity. Thus, despite their high error, we conclude that 1D sequences as low as 70% identity can be assembled, albeit at reduced consensus quality. However, more recent Nanopore sequencing chemistries are producing 1D reads with 85% accuracy, for which only a single round of correction is necessary.</p>
        <p>Few eukaryotic Nanopore data sets are currently available due to the low throughput of the initial MinION instruments. However, as previously demonstrated using PacBio data, Canu easily scales to mammalian-sized genomes, and as Nanopore throughput improves, it is expected that highly continuous eukaryotic assemblies will be possible. For an early test, we assembled the <italic>Saccharomyces cerevisiae</italic> genome from available R6 and R7 MinION data (<xref rid="KORENGR215087C18" ref-type="bibr">Goodwin et al. 2015</xref>). This older data set contains only 20Ã coverage of 2D reads and an average identity of 70% (<xref ref-type="fig" rid="KORENGR215087F6">Fig 6</xref>A), significantly lower than that produced by newer chemistries. Despite this, Canu was able to assemble the data set using the same iterative correction strategy as for 1D reads (<xref ref-type="fig" rid="KORENGR215087F6">Fig. 6</xref>B; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 13</ext-link>; <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S25</ext-link>). The resulting assembly comprises 41 contigs, with a majority of chromosomes in one or two contigs and an NG50 of 469 kbp covering 95.22% of the reference at 94.33% identity. Illumina polishing with Pilon improved the assembly to 96.86% coverage at 99.83% identity. Prior to Canu, this data set could only be assembled via a hybrid approach. Newer Nanopore chemistries are not expected to require an iterative correction strategy, and improved instrument throughput will enable fully assembled yeast chromosomes (<xref rid="KORENGR215087C25" ref-type="bibr">Istace et al. 2016</xref>).</p>
        <fig id="KORENGR215087F6" orientation="portrait" position="float">
          <label>Figure 6.</label>
          <caption>
            <p>A highly continuous <italic>S. cerevisae</italic> assembly from noisy 1D and 2D MinION reads. (<italic>A</italic>) A histogram of read error rates (1D and 2D) versus the reference. Alignment identity was computed only for reads with an alignment &gt;90% of their length. The majority of reads were &lt;75% identity with an overall average of 70%. (<italic>B</italic>) Assembled Canu contigs were aligned to the reference, and all alignments &gt;1 kbp in length and &gt;90% identity were then plotted using the ColoredChromosomes package (<xref rid="KORENGR215087C5" ref-type="bibr">BÃ¶hringer et al. 2002</xref>). Alternating shades indicate adjacent alignments, so each transition from gray to black represents a contig boundary or alignment breakpoint. White regions indicate regions missing from the assembly. Most chromosomes are in less than three contigs, indicating structural agreement with the reference.</p>
          </caption>
          <graphic xlink:href="722f06"/>
        </fig>
      </sec>
    </sec>
  </sec>
  <sec sec-type="discussion" id="s2">
    <title>Discussion</title>
    <p>Canu is able to generate highly continuous assemblies from both PacBio and Nanopore sequencing, but signal-level polishing is required to maximize the final consensus accuracy. Such algorithms use statistical models of the sequencing process to predict base calls directly from the raw instrument data, which is a richer source of information than FASTQ Phred quality values. Currently, a PacBio base accuracy of 99.999% (QV50) is achievable with Quiver polishing (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>; <xref rid="KORENGR215087C34" ref-type="bibr">Koren et al. 2013</xref>), but Nanopore is limited to at most 99.9% (QV30) with Nanopolish (<xref rid="KORENGR215087C38" ref-type="bibr">Loman et al. 2015</xref>) due to systematic sequencing errors (<xref rid="KORENGR215087C18" ref-type="bibr">Goodwin et al. 2015</xref>). Both tools are technology specific and must be trained on each new chemistry, so future improvements are possible. Alternatively, complementary short-read sequencing can be used for consensus polishing with Pilon. On recent Nanopore sequencing data, Illumina-polished Canu assemblies can reach QV50 and exceed the base accuracy of hybrid SPAdes assemblies. Thus, the combination of Nanopore and Illumina sequencing provides a new alternative for the generation of finished microbial genomes. However, due to the difficulty of mapping short Illumina reads to repeats, signal-polished PacBio assemblies currently deliver the highest overall quality.</p>
    <p>Canu assembly followed by either single-molecule or short-read polishing is an efficient method for generating high-quality assemblies. Our results indicate that while Miniasm (<xref rid="KORENGR215087C37" ref-type="bibr">Li 2016</xref>) can rapidly produce continuous and structurally accurate assemblies, the multiple rounds of polishing needed to produce an accurate consensus sequence becomes a computational bottleneck. Additionally, Canu is the only tool capable of assembling low-accuracy 1D Nanopore data while scaling to gigabase-sized genomesâan important application given the pending release of high-throughput Nanopore sequencers. Combined with Canu's adaptive <italic>k</italic>-mer weighting strategy, the assembly of repetitive heterochromatic sequence may be possible with high-coverage, long-read nanopore sequencing.</p>
    <p>Canu currently splits haplotypes into separate contigs wherever the allelic divergence is greater than the post-correction overlap error rate. This threshold is typically 1.5% for recent PacBio data. This splitting results in an assembly size larger than the haploid genome size. Although these regions are kept separate in the assembly graph, no effort is currently made to annotate such regions or phase multiple bubbles into larger haplotype blocks. Less diverged haplotypes, such as human, are collapsed, as demonstrated by the HX1 data set. Currently, only abundance is considered for <italic>k</italic>-mer weighting, which avoids the consideration of false, repetitive overlaps. However, this same scheme could be used to improve the discrimination of minor variants between repeats and haplotypes by preferring haplotype-specific <italic>k</italic>-mers during sketch construction. This would increase the power of Canu's statistical overlap filter, which prevents the merging of diverged repeats and haplotypes.</p>
    <p>For further improved haplotype reconstruction, it would be possible to apply an approach like FALCON-Unzip (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>) to the Canu assembly graph to generate phased contigs based on linked variants identified within the single-molecule reads. For repeat structures, the current algorithm can resolve any repeat copy with more divergence than the post-correction overlap error rate. In the future, similar repeats could be resolved using more sophisticated graph traversals. For example, if one copy of a two-copy repeat is spanned, a correct reconstruction of the unspanned copy can be inferred given that the other copy is correctly assembled (<xref rid="KORENGR215087C65" ref-type="bibr">Ukkonen 1992</xref>). Alternatively, secondary information from technologies like 10x Genomics (<xref rid="KORENGR215087C72" ref-type="bibr">Zheng et al. 2016</xref>) or Hi-C (<xref rid="KORENGR215087C58" ref-type="bibr">Selvaraj et al. 2013</xref>) could be used to guide walks through the Canu graph. Ultimately, because Hi-C provides megabase-scale linkage information, the integration of this technology with Canu assembly graphs could lead to complete de novo assemblies that span entire mammalian chromosomes from telomere to telomere, as was recently demonstrated for the domestic goat genome (<xref rid="KORENGR215087C4" ref-type="bibr">Bickhart et al. 2016</xref>).</p>
  </sec>
  <sec sec-type="methods" id="s3">
    <title>Methods</title>
    <sec id="s3a">
      <title>Architecture</title>
      <p>Canu is a modular assembly infrastructure composed of three primary stagesâcorrection, trimming, and assembly (<xref ref-type="fig" rid="KORENGR215087F1">Fig. 1</xref>)âthat can be run on a single computer or multinode compute cluster. For multinode runs, recommended for large genomes, Canu supports Sun Grid Engine (SGE), Simple Linux Utility for Resource Management (SLURM), Load Sharing Facility (LSF), and Portable Batch System (PBS)/Torque job schedulers. Users without access to an institutional compute cluster can run large Canu assemblies via a cloud-computing provider using toolkits such as StarCluster (<uri xlink:href="http://star.mit.edu/cluster/">http://star.mit.edu/cluster/</uri>).</p>
      <p>As a Canu job progresses, summary statistics are updated in a set of plaintext and HTML reports. The primary data interchange between stages is FASTA or FASTQ inputs, but for efficiency, each stage stores input reads in an indexed database, after which the original input is no longer needed. Each of the three stages begins by identifying overlaps between all pairs of input reads. Although the overlapping strategy varies for each stage, each counts <italic>k</italic>-mers in the reads, finds overlaps between the reads, and creates an indexed store of those overlaps. By default, the correction stage uses MHAP (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>), and the remaining stages use overlapInCore (<xref rid="KORENGR215087C45" ref-type="bibr">Myers et al. 2000</xref>). From the input reads, the correction stage generates corrected reads; the trimming stage trims unsupported bases and detects hairpin adapters, chimeric sequences, and other anomalies; and the assembly stage constructs an assembly graph and contigs. The individual stages can be run independently or in series.</p>
      <p>For distributed jobs, local compute resources are polled to build a list of available hosts and their specifications. Next, based on the estimated genome size, Canu will choose an appropriate range of parameters for each algorithm (e.g., number of compute threads to use for computing overlaps). Finally, Canu will automatically choose specific parameters from each allowed range so that usage of available resources is maximized. As an example, for a mammalian-sized genome, Canu will choose between one and eight compute threads and 4- to 16-GB memory for each overlapping job. On a grid with 10 hosts, each with 18 cores and 32 GB of memory, Canu will maximize usage of all 180 cores by selecting six threads and 10 GB of memory per job. This process is repeated for each step and allows automated deployment across varied cluster and host configurations, simplifying usage and maximizing resource utilization.</p>
    </sec>
    <sec id="s3b">
      <title>MinHash overlapping</title>
      <p>Canu uses an updated version of MHAP for computing all-versus-all overlaps from noisy, single-molecule sequences (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). MHAP has been further optimized for both speed and accuracy since the initial version. As described below, the most substantial algorithmic changes involve the sketching and filtering strategies. MHAP uses a two-stage overlap filter, where the first stage identifies read pairs that are likely to share an overlap, and the second stage estimates the extent and quality of the overlap. For the first stage, MHAP now implements <italic>tf-idf</italic> weighting to prefer informative, nonrepetitive <italic>k</italic>-mers. This increases sensitivity to true overlaps, while reducing the number of false, repetitive overlaps considered. For the second stage, MHAP now implements a âbottom sketchâ strategy similar to Mash (<xref rid="KORENGR215087C49" ref-type="bibr">Ondov et al. 2016</xref>), which significantly decreases memory usage and runtime. The Mash distance formula is also used to estimate the error rate (quality) of the identified overlaps directly from the sketches, without the need for a gapped alignment (<xref rid="KORENGR215087C49" ref-type="bibr">Ondov et al. 2016</xref>). Engineering improvements include a switch to the FastUtil (<uri xlink:href="http://fastutil.di.unimi.it">http://fastutil.di.unimi.it</uri>) hash table implementation, which resulted in a threefold speedup, and an increase in the maximum <italic>k</italic>-mer size from 16 to 128 to support greater specificity on low-error data sets. Overall, the new MHAP version is 10-fold faster, on average, and over 40-fold faster on mammalian genomes than the original version, while maintaining similar accuracy.</p>
      <p>There have been several <italic>tf-idf</italic> formulations proposed for document and image retrieval (<xref rid="KORENGR215087C39" ref-type="bibr">Manning et al. 2008</xref>), but for our purposes we use
<disp-formula id="KORENGR215087M1"><label>(1)</label><mml:math id="M1"><mml:msub><mml:mi>w</mml:mi><mml:mi>q</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>t</mml:mi><mml:msub><mml:mi>f</mml:mi><mml:mi>q</mml:mi></mml:msub><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:msub><mml:mi>f</mml:mi><mml:mi>q</mml:mi></mml:msub><mml:mo>.</mml:mo></mml:math></disp-formula>
For each read, <italic>tf</italic><sub><italic>q</italic></sub> is the number of occurrences of <italic>k</italic>-mer <italic>q</italic> in the read, and <italic>idf</italic><sub><italic>q</italic></sub> is the inverse document frequency function for <italic>q</italic>, which logarithmically scales the inverse overall frequency of <italic>q</italic> observed across all reads. Specifically, for all <italic>k</italic>-mers in the input read set, let <italic>f</italic><sub><italic>max</italic></sub> be the maximum observed frequency, <italic>f</italic><sub><italic>min</italic></sub> be the minimum observed frequency, and <italic>f</italic><sub><italic>q</italic></sub> be the frequency of a specific <italic>k</italic>-mer <italic>q</italic>. By default, only 0.0005% of the most abundant <italic>k</italic>-mers are recorded, and all others are assigned <italic>f</italic><sub><italic>min</italic></sub>. We define <italic>idf</italic><sub><italic>q</italic></sub> as
<disp-formula id="KORENGR215087M2"><label>(2)</label><mml:math id="M2"><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:msub><mml:mi>f</mml:mi><mml:mi>q</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>T</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>log</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle><mml:mrow><mml:mfrac><mml:mrow><mml:mspace width="0.4em"/><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>x</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>q</mml:mi></mml:msub></mml:mfrac></mml:mrow><mml:mo>â</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mstyle></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:math></disp-formula>
The parameter <italic>a</italic> â [0,1] controls how strongly less common <italic>k</italic>-mers are preferred in relation to the more common ones, and <italic>T</italic> linearly transforms the values between one and <italic>idf</italic><sub><italic>max</italic></sub>, the maximum allowed weight. The minimum possible value is computed by plugging the maximum observed frequency of the most popular <italic>k</italic>-mer into Equation <xref ref-type="disp-formula" rid="KORENGR215087M2">2</xref>, and the maximum possible value is computed by plugging in the filter cutoff value provided to MHAP (5 Ã 10<sup>â6</sup> being the default). The <italic>idf</italic> values are then linearly rescaled to fall in the range [1,<italic>idf</italic><sub><italic>max</italic></sub>]. Any <italic>k</italic>-mer that does not exist in the filter file is assigned <italic>idf</italic><sub><italic>max</italic></sub>.</p>
      <p>For a general positive floating point number, <xref rid="KORENGR215087C13" ref-type="bibr">Chum et al. (2008)</xref> provided a formula for directly computing the <italic>w</italic>-weighted hash value for MinHash ranking. However, this formula requires computing <italic>s</italic>Â·<italic>L</italic> logarithms to generate a sketch, which is computationally expensive (where <italic>s</italic> is the sketch size and <italic>L</italic> is the read length). As in the original MHAP implementation, we compute the initial hash value using the MurmurHash3 hash (<uri xlink:href="http://code.google.com/p/smhasher/wiki/MurmurHash3">http://code.google.com/p/smhasher/wiki/MurmurHash3</uri>), while the subsequent <italic>s</italic>â1 hashes are computed from a pseudorandom number generator (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>). We discretize the <italic>tf-idf</italic> to a limited range using rounding, which requires at most (<italic>s</italic>â1)Â·<italic>L</italic>Â·<italic>w</italic><sub><italic>max</italic></sub> random number computations, where <italic>w</italic><sub><italic>max</italic></sub> is the maximum weight computed by MHAP, which is comparatively faster. We use <italic>idf</italic><sub><italic>max</italic></sub> = 3 and a = 0.9 by default as a compromise between speed and performance.</p>
      <p>Recall that MinHash selects which <italic>k</italic>-mers will be included in the sketch based on their hash value. In the original MHAP implementation, a set Î of <italic>s</italic> hash functions is defined for a sketch <italic>S</italic> of size <italic>s</italic>. Each sketch entry <italic>S</italic><sub><italic>i</italic></sub> is defined as the minimum-valued <italic>k</italic>-mer after applying the hash function Î<sub><italic>i</italic></sub> to all <italic>k</italic>-mers in the read. The resulting set of <italic>s</italic> minimum-valued <italic>k</italic>-mers, or min-mers, comprise the sketch. Given a discrete <italic>tf-idf</italic> weight <italic>w</italic><sub><italic>q</italic></sub> for each <italic>k</italic>-mer, we now modify the MinHash computation by applying <italic>w</italic><sub><italic>q</italic></sub> hash functions <inline-formula><mml:math id="IL1"><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mi mathvariant="normal">Î</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi mathvariant="normal">Î</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mi>q</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:math></inline-formula> per entry, rather than the single Î<sub><italic>i</italic></sub> as before. For each sketch entry <italic>S</italic><sub><italic>i</italic></sub>, the min-mer is then chosen as the minimum hash value computed across all functions. Because highly weighted <italic>k</italic>-mers are hashed more times, this increases the chance that they will be chosen as a min-mer. To properly match the same <italic>k</italic>-mers with different weights, we index <italic>k</italic>-mers using their fixed MurmurHash3 hash values, and the weighted values are only used to determine inclusion in the read sketches. The <italic>tf-idf</italic> approach replaces the previous approach based on traditional all-or-nothing filtering of repetitive <italic>k</italic>-mers. We evaluated multiple scoring approaches, including <italic>tf-idf</italic>, <italic>idf</italic> only (down-weighting common words), and no weighting on several bacterial and eukaryotic genomes<italic>.</italic> Both <italic>tf-idf</italic> and <italic>idf</italic> outperformed unweighted comparisons in terms of the resulting assembly continuity and accuracy and were comparable to each other. We therefore utilize <italic>tf-idf</italic> by default due to its common use in the natural language field and other MinHash applications (<xref rid="KORENGR215087C13" ref-type="bibr">Chum et al. 2008</xref>).</p>
      <p>The updated MHAP version also implements bottom sketching for the second-stage filter (<xref rid="KORENGR215087C49" ref-type="bibr">Ondov et al. 2016</xref>). In contrast to the first-stage filter, which uses multiple hash functions (<xref rid="KORENGR215087C8" ref-type="bibr">Broder et al. 2000</xref>), bottom sketching uses a single hash function from which the <italic>s</italic> minimum values are retained as the sketch (<xref rid="KORENGR215087C7" ref-type="bibr">Broder 1997</xref>). The former approach has the advantage that the Jaccard similarity can be estimated for one versus <italic>N</italic> reads by a series of <italic>s</italic> hash table lookups. In bottom sketching, each comparison requires an <italic>O(s)</italic> merge operation, but as a benefit, any substring of the original string can be sketched by simply eliminating the min-mers from the original sketch that do not occur in the substring. For the bottom sketch, we now store a constant number of <italic>k</italic>-mers per read (default 1500) and directly estimate the overlap error rate from these sketches using the Mash distance. The overlapping region is estimated as previously (<xref rid="KORENGR215087C3" ref-type="bibr">Berlin et al. 2015</xref>) but also using the bottom sketch <italic>k</italic>-mers.</p>
    </sec>
    <sec id="s3c">
      <title>Parallel overlap sort and index</title>
      <p>The downstream algorithms require efficient access to all overlaps for a single read, so the overlaps are organized using an indexed on-disk structure where all overlaps for a single read are listed sequentially. Canu parallelizes overlap computation into multiple jobs, each generating a compressed file of binary encoded overlaps and a file recording the number of overlaps for each read in that file. These files are combined into the master structure using a parallel bucket sort (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S26</ext-link>). Since each read will have a different number of overlaps and since all overlaps for a given read must be in the same bucket for the bucket to be sorted, the number of overlaps per read is used to compute the ranges of reads assigned to each bucket. The size of a bucket is chosen such that each contains the same number of overlaps, and no bucket is larger than some specified maximum size. In parallel, each file of compressed overlaps is rewritten to a set of uniquely named buckets, and overlaps are duplicated and added to the appropriate bucket (e.g., read <italic>A</italic> overlaps <italic>B</italic>; and read <italic>B</italic> overlaps <italic>A</italic>). Note that as each input file creates its own set of buckets, no synchronization is needed between jobs. When all overlaps are copied into buckets, each bucket is loaded into memory, sorted, and output to a uniquely named file. Each bucket holds all (and only) the overlaps for the range of assigned reads. Finally, an index describing the file and offset location for each read is created.</p>
    </sec>
    <sec id="s3d">
      <title>Read correction</title>
      <p>Canu uses all-versus-all overlap information to correct individual reads. However, simply computing a consensus representation for each read using all overlaps could result in masking copy-specific repeat variants. Therefore, Canu uses two filtering steps to determine which overlaps should be selected to correct each individual read. The first is a global filter where each read chooses where it will supply correction evidence, and the second is a local filter where each read accepts or rejects the evidence supplied by other reads. This strategy attempts to overcome biases due to sequence quality and repeats. For example, reads with higher than average sequencing quality would tend to dominate the correction, regardless of if they were from the correct repeat copy. To prevent this, each read is only allowed to contribute to the correction of <italic>C</italic> other reads, where <italic>C</italic> is the expected read depth. The global filter scores each overlap (<italic>overlap_length</italic> * <italic>identity</italic>) and keeps only the <italic>C</italic> best overlaps for each read, thereby clustering repetitive reads with others likely to have originated from the same copy. When errors are uniformly distributed, we expect that reads are more likely to be grouped with reads from the same repeat copy, as they would have fewer total differences than reads from diverged repeat copies. A small fraction of misassigned reads is tolerable, as they will be outvoted during consensus correction. This strategy was first introduced by PBcR for the hierarchical correction and assembly of single-molecule reads (<xref rid="KORENGR215087C33" ref-type="bibr">Koren et al. 2012</xref>). From this list, the local filter then selects the 2<italic>C</italic> best overlaps to each read for use in correction. The second filter is primarily a computational optimization.</p>
      <p>Before computing the corrected sequence, the all-pair overlaps are used to predict the expected length of each read after correction (i.e., accounting for reads with partial or no overlaps). From these estimates, the longest reads up to a user-specified coverage depth are processed for correction. Corrected reads are generated using a modified implementation of the âfalcon_senseâ algorithm (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>), which parallelizes the pairwise alignment step and removes the maximum read length limits. For a given read to be corrected, overlapping reads are aligned to it using Myersâ O(ND) algorithm (<xref rid="KORENGR215087C42" ref-type="bibr">Myers 1986</xref>). A directed acyclic graph (DAG) is created from the alignments, and the highest weight path is followed to generate a corrected sequence (<xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>). Edges with a weight less than four are omitted, which will split the original read when there is insufficient evidence for correction.</p>
    </sec>
    <sec id="s3e">
      <title>Overlap-based trimming</title>
      <p>After correction, reads are trimmed by recomputing overlaps for the corrected reads and removing sequence that is not supported by other reads. The prior correction stage also trims low-coverage regions, but these initial overlaps are constructed without constructing a gapped alignment, which can result in imprecise trim points. When overlapping the corrected reads for trimming, a gapped alignment is computed for each overlap, and the trim points can be identified more precisely. Overlap-based trimming (OBT) was first described by <xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. (2008)</xref> and <xref rid="KORENGR215087C52" ref-type="bibr">PrÃ¼fer et al. (2012)</xref>, who focused on trimming Sanger, Roche 454 and Illumina reads. Long reads with uniform error allow the algorithm to be simplified. Each read is trimmed to the largest portion covered to at least depth <italic>C</italic> by overlaps of at most <italic>E</italic> error and minimum length <italic>L</italic>. The parameters are technology specific and set to empirically derived defaults.</p>
      <p>Once reads are trimmed, a second pass is made to detect any technology-specific flaws, e.g., undetected hairpin adapters and chimeras (<xref rid="KORENGR215087C14" ref-type="bibr">Eid et al. 2009</xref>; <xref rid="KORENGR215087C27" ref-type="bibr">Jain et al. 2015</xref>). A hairpin adapter is detected by identifying when multiple reads have both forward and reverse overlaps around a common (short) sequence and there are few reads spanning this region. A chimeric junction is similarly detected by identifying a region with few, if any, spanning reads. In both cases, the original read is trimmed to the largest supported region.</p>
    </sec>
    <sec id="s3f">
      <title>Overlap error adjustment</title>
      <p>After trimming and before graph construction, Canu recomputes overlaps and makes a final attempt at detecting sequencing errors. This algorithm was first used by <xref rid="KORENGR215087C22" ref-type="bibr">Holt et al. (2002)</xref>. The intuition is to improve separation between true sequencing differences (e.g., diverged repeats or haplotype) and false differences due to random sequencing error. Each read is corrected by a majority vote of its overlapping alignments, preserving differing bases only if there is sufficient support from other reads for this variation. The read sequence itself is not changed (doing so would invalidate the computed overlaps), but the reported error rate for each overlap is adjusted based on the alignment that would be generated had the sequencing errors been resolved. The algorithm requires two passes through the overlaps: The first pass detects probable sequencing errors in reads, and the second pass applies those changes temporarily to reads to recompute alignments and update the computed error rates.</p>
    </sec>
    <sec id="s3g">
      <title>Graph construction</title>
      <p>The Bogart module builds an assembly graph using a variant of the âbest overlap graphâ strategy from <xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. (2008)</xref>. Overlaps are described as <italic>containment</italic>, if all bases in one read are aligned to another read, or <italic>dovetail</italic>, if involving only the ends of both reads. By definition, at least two read ends must be present in the alignment. A âbestâ overlap is the longest dovetail overlap to a given read end. Each read has two best overlaps: one on the 5â² end and one on the 3â² end. In the original method, best overlaps were picked from all overlaps up to a user-supplied overlap error rate cutoff. In Bogart, best overlaps are picked after several filtering steps remove abnormally high-error overlaps, potential chimeric reads, and reads whose overlaps indicate a possible sequence anomaly. This results in a cleaner and more accurate graph construction.</p>
      <p>After correction, trimming, and overlap error adjustment, all computed overlaps are used to pick an initial set of best edges. This set of best edges is used to compute the median and median absolute deviation (MAD) of the overlap error rate. This distribution represents the residual read error left after all prior corrections, and a low average overlap error rate cutoff indicates good sequencing data and successful correction. A maximum overlap error rate cutoff is automatically computed from this distribution as six MADs away from the median, and overlaps with an error greater than this cutoff are not used during graph construction. This cutoff, which is typically &lt;2% for good PacBio data (average median 0.232% and average MAD 0.138% for PacBio data sets in this article), determines the ability of the algorithm to separate closely related repeats and haplotypes.</p>
      <p>In addition to filtering poor overlaps, Bogart filters suspicious reads that may have evaded proper trimming and correction. First, reads that are not fully covered by overlaps below the overlap error rate cutoff are flagged as potentially chimeric and excluded from graph construction. Second, best overlaps are usually mutual; i.e., the best overlap from <italic>A</italic> is to <italic>B</italic>, and the best overlap from <italic>B</italic> is to <italic>A</italic>. For a pair of reads, nonmutual best overlaps are often caused by indels, making the overlap length slightly longer or shorter compared with the mutual best overlap. Thus, reads with a large overlap size difference are also excluded (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Fig. S27</ext-link>).</p>
      <p>The resulting set of reads and best overlaps define the BOG. Initial contigs are then constructed from the BOG as previously described (<xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. 2008</xref>), and an error rate profile is generated for each contig from the error rate of overlaps used to build it. A median and MAD value are computed for each window in the contig based on the overlaps falling in it to generate an error profile. This error profile is recomputed after each phase of the algorithm and is used to determine if external reads have valid overlaps to the contig.</p>
      <p>Bogart next attempts to include contained (<xref rid="KORENGR215087C16" ref-type="bibr">Fasulo et al. 2002</xref>) and previously filtered reads into the contigs. All overlaps to these reads are used to compute a set of potential contig placements, scored by the average overlap error rate. If this average error rate exceeds the precomputed error profile for the contig region, the read is likely from a diverged repeat or a heterozygous variant and the placement is rejected. The placement with the lowest average error is accepted, and the read is placed. This strategy differs from the original strategy by <xref rid="KORENGR215087C41" ref-type="bibr">Miller et al. (2008)</xref> that placed contained reads based on the highest-quality containment overlap, which could incorrectly place a read when the true location had no containing read. Reads that remain unplaced after this phase are output as âunassembled.â</p>
      <p>An assembly bubble occurs when there is more than one reconstruction of a specific locus caused by haplotype differences (<xref rid="KORENGR215087C16" ref-type="bibr">Fasulo et al. 2002</xref>; <xref rid="KORENGR215087C71" ref-type="bibr">Zerbino and Birney 2008</xref>; <xref rid="KORENGR215087C32" ref-type="bibr">Koren et al. 2011</xref>; <xref rid="KORENGR215087C47" ref-type="bibr">Nijkamp et al. 2013</xref>; <xref rid="KORENGR215087C12" ref-type="bibr">Chin et al. 2016</xref>). Small differences, tens of base pairs in size, are typically not detectable from overlaps alone because the difference is insignificant compared with the size of the overlap. Larger differences can result in two, mostly redundant, contigs covering the same locus. The haplotype with more reads is often reconstructed in a large contig spanning the locus, and the haplotype with fewer reads as just the variant region (the bubble). Currently, contigs with fewer than a minimum threshold of reads, or with &gt;75% of the reads with an overlap to some other contig, are considered potential bubbles. Reads in these contigs are then placed, using the mechanism for placing unplaced reads as above, into all other contigs where possible using heuristics. Improved mechanisms for resolving bubbles within the assembly graph, and ultimately producing a fully phased assembly, are an area of ongoing research and left for future work.</p>
      <p>Despite careful filtering, the greedy construction algorithm remains prone to error, and the graph will be missing edges compared with a full string graph representation, so a final step is required to add missing edges and break incorrectly assembled contigs. By using the all-pairs overlap information, every assembled contig is annotated with compatible read placements, again using the read placement mechanism and all reads from nonbubble contigs. Only overlaps that meet the global and local contig error rate thresholds are considered. The resulting annotated regions indicate alternative branch points in the full overlap graph, and a correct contig reconstruction is confirmed by the presence of spanning reads or overlaps. Unresolved regions are marked as repeats, the contig is split, and additional edges are added to form the final assembly graph.</p>
    </sec>
    <sec id="s3h">
      <title>Contig consensus</title>
      <p>Canu generates a consensus sequence for each contig using a modified version of the âpbdagconâ algorithm (<xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. 2013</xref>). Briefly, a template sequence is constructed for each contig by splicing reads together from approximate positions based on the best overlap path. This template is accurate within individual reads, as they have previously been error-corrected, but may have indel errors at read boundaries due to inaccuracy in the overlap positions. To correct this, all reads in the contig are aligned to the template sequence in parallel using Myersâ O(ND) algorithm (<xref rid="KORENGR215087C42" ref-type="bibr">Myers 1986</xref>) and added to a DAG. The DAG is then used to call a consensus sequence as in the method described by <xref rid="KORENGR215087C11" ref-type="bibr">Chin et al. (2013)</xref>.</p>
    </sec>
    <sec id="s3i">
      <title>Assembler versions</title>
      <p>Assembler versions are as follows: FALCON v0.4.1 as of March 16, 2016 (commit c602aad3667b3fd49263028dac44da8e42caa17c), Minimap/miniasm as of March 16, 2016 (commit 1cd6ae3bc7c7a6f9e7c03c0b7a93a12647bba244 minimap, 17d5bd12290e0e 8a48a5df5afaeaef4d171aa133 miniasm), SPAdes v3.7.1, and Canu v1.3 (<ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 5</ext-link>).</p>
    </sec>
  </sec>
  <sec id="s4">
    <title>Data access</title>
    <p>The <italic>B. anthracis</italic> Sterne 34F2 sequencing data and Canu assembly from this study have been submitted to the NCBI BioProject database (<uri xlink:href="https://www.ncbi.nlm.nih.gov/bioproject/">https://www.ncbi.nlm.nih.gov/bioproject/</uri>) under accession number PRJNA357857; the <italic>Y. pestis</italic> 195/P sequencing data and Canu assembly, under PRJNA357858. All other sequencing was obtained from external sources and is listed in <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Note 2</ext-link>. Canu v1.3 was used for all results presented here and is available as <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/lookup/suppl/doi:10.1101/gr.215087.116/-/DC1">Supplemental Code</ext-link>. Updated source code and precompiled binaries are freely available under a GPLv2 license from <uri xlink:href="https://github.com/marbl/canu">https://github.com/marbl/canu</uri>.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="PMC_1" content-type="local-data">
      <caption>
        <title>Supplemental Material</title>
      </caption>
      <media mimetype="text" mime-subtype="html" xlink:href="supp_27_5_722__index.html"/>
      <media xlink:role="associated-file" mimetype="application" mime-subtype="pdf" xlink:href="supp_gr.215087.116_Supplemental_Material.pdf"/>
      <media xlink:role="associated-file" mimetype="application" mime-subtype="x-zip-compressed" xlink:href="supp_gr.215087.116_Supplemental_Code.tar.gz"/>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>We thank Celera and Pacific Biosciences for open source software that was critical for the development of Canu and also John Urban and all other Canu users who provided early testing and feedback on the software. We thank Shaun Jackman and the other reviewers for their considered reviews, as well as one anonymous reviewer for providing a motivating example on repeat separation. This research was supported in part by the Intramural Research Program of the National Human Genome Research Institute, National Institutes of Health and under contract no. HSHQDC-07-C-00020 awarded by the US Department of Homeland Security (DHS) Science and Technology Directorate (S&amp;T) for the management and operation of the National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and Development Center. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of the DHS or S&amp;T. In no event shall the DHS, NBACC, S&amp;T, or Battelle National Biodefense Institute (BNBI) have any responsibility or liability for any use, misuse, inability to use, or reliance upon the information contained herein. DHS does not endorse any products or commercial services mentioned in this publication. J.R.M. was supported by the National Science Foundation under grant NSF IOS-1237993. This work utilized the computational resources of the NIH HPC Biowulf cluster (<uri xlink:href="https://hpc.nih.gov">https://hpc.nih.gov</uri>).</p>
  </ack>
  <fn-group>
    <fn fn-type="supplementary-material">
      <p>[Supplemental material is available for this article.]</p>
    </fn>
    <fn>
      <p>Article published online before print. Article, supplemental material, and publication date are at <ext-link ext-link-type="uri" xlink:href="http://www.genome.org/cgi/doi/10.1101/gr.215087.116">http://www.genome.org/cgi/doi/10.1101/gr.215087.116</ext-link>.</p>
    </fn>
    <fn>
      <p>Freely available online through the <italic>Genome Research</italic> Open Access option.</p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="KORENGR215087C1">
      <mixed-citation publication-type="journal"><string-name><surname>Antipov</surname><given-names>D</given-names></string-name>, <string-name><surname>Korobeynikov</surname><given-names>A</given-names></string-name>, <string-name><surname>McLean</surname><given-names>JS</given-names></string-name>, <string-name><surname>Pevzner</surname><given-names>PA</given-names></string-name>. <year>2016</year><article-title>hybridSPAdes: an algorithm for hybrid assembly of short and long reads</article-title>. <source>Bioinformatics</source><volume>32</volume>: <fpage>1009</fpage>â<lpage>1015</lpage>.<pub-id pub-id-type="pmid">26589280</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C2">
      <mixed-citation publication-type="journal"><string-name><surname>Attrill</surname><given-names>H</given-names></string-name>, <string-name><surname>Falls</surname><given-names>K</given-names></string-name>, <string-name><surname>Goodman</surname><given-names>JL</given-names></string-name>, <string-name><surname>Millburn</surname><given-names>GH</given-names></string-name>, <string-name><surname>Antonazzo</surname><given-names>G</given-names></string-name>, <string-name><surname>Rey</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Marygold</surname><given-names>SJ</given-names></string-name>; <string-name><surname>FlyBase</surname><given-names>Consortium</given-names></string-name>. <year>2016</year><article-title>FlyBase: establishing a Gene Group resource for <italic>Drosophila melanogaster</italic></article-title>. <source>Nucleic Acids Res</source><volume>44</volume>: <fpage>D786</fpage>â<lpage>D792</lpage>.<pub-id pub-id-type="pmid">26467478</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C3">
      <mixed-citation publication-type="journal"><string-name><surname>Berlin</surname><given-names>K</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Chin</surname><given-names>CS</given-names></string-name>, <string-name><surname>Drake</surname><given-names>JP</given-names></string-name>, <string-name><surname>Landolin</surname><given-names>JM</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>. <year>2015</year><article-title>Assembling large genomes with single-molecule sequencing and locality-sensitive hashing</article-title>. <source>Nat Biotechnol</source><volume>33</volume>: <fpage>623</fpage>â<lpage>630</lpage>.<pub-id pub-id-type="pmid">26006009</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C4">
      <mixed-citation publication-type="journal"><string-name><surname>Bickhart</surname><given-names>DM</given-names></string-name>, <string-name><surname>Rosen</surname><given-names>BD</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Sayre</surname><given-names>BL</given-names></string-name>, <string-name><surname>Hastie</surname><given-names>AR</given-names></string-name>, <string-name><surname>Chan</surname><given-names>S</given-names></string-name>, <string-name><surname>Lee</surname><given-names>J</given-names></string-name>, <string-name><surname>Lam</surname><given-names>ET</given-names></string-name>, <string-name><surname>Liachko</surname><given-names>I</given-names></string-name>, <string-name><surname>Sullivan</surname><given-names>ST</given-names></string-name>. <year>2016</year><article-title>Single-molecule sequencing and conformational capture enable de novo mammalian reference genomes</article-title>. <source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/064352</pub-id>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C5">
      <mixed-citation publication-type="journal"><string-name><surname>BÃ¶hringer</surname><given-names>S</given-names></string-name>, <string-name><surname>GÃ¶dde</surname><given-names>R</given-names></string-name>, <string-name><surname>BÃ¶hringer</surname><given-names>D</given-names></string-name>, <string-name><surname>Schulte</surname><given-names>T</given-names></string-name>, <string-name><surname>Epplen</surname><given-names>JT</given-names></string-name>. <year>2002</year><article-title>A software package for drawing ideograms automatically</article-title>. <source>Online J Bioinformatics</source><volume>1</volume>: <fpage>51</fpage>â<lpage>61</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C6">
      <mixed-citation publication-type="journal"><string-name><surname>Bresler</surname><given-names>G</given-names></string-name>, <string-name><surname>Bresler</surname><given-names>M</given-names></string-name>, <string-name><surname>Tse</surname><given-names>D</given-names></string-name>. <year>2013</year><article-title>Optimal assembly for high throughput shotgun sequencing</article-title>. <source>BMC Bioinformatics</source><volume>14</volume><bold>(</bold><issue>Suppl 5</issue><bold>):</bold><fpage>S18</fpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C7">
      <mixed-citation publication-type="confproc"><string-name><surname>Broder</surname><given-names>AZ</given-names></string-name>. <year>1997</year><article-title>On the resemblance and containment of documents</article-title>. In <conf-name>Sequences â97: Proceedings of the Compression and Complexity of Sequences</conf-name>, pp. <fpage>21</fpage>â<lpage>29</lpage>. <publisher-name>IEEE Computer Society</publisher-name>, <publisher-loc>Washington, DC</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C8">
      <mixed-citation publication-type="journal"><string-name><surname>Broder</surname><given-names>AZ</given-names></string-name>, <string-name><surname>Charikar</surname><given-names>M</given-names></string-name>, <string-name><surname>Frieze</surname><given-names>AM</given-names></string-name>, <string-name><surname>Mitzenmacher</surname><given-names>M</given-names></string-name>. <year>2000</year><article-title>Min-wise independent permutations</article-title>. <source>J Comput Syst Sci</source><volume>60</volume>: <fpage>630</fpage>â<lpage>659</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C9">
      <mixed-citation publication-type="journal"><string-name><surname>Burton</surname><given-names>JN</given-names></string-name>, <string-name><surname>Adey</surname><given-names>A</given-names></string-name>, <string-name><surname>Patwardhan</surname><given-names>RP</given-names></string-name>, <string-name><surname>Qiu</surname><given-names>R</given-names></string-name>, <string-name><surname>Kitzman</surname><given-names>JO</given-names></string-name>, <string-name><surname>Shendure</surname><given-names>J</given-names></string-name>. <year>2013</year><article-title>Chromosome-scale scaffolding of de novo genome assemblies based on chromatin interactions</article-title>. <source>Nat Biotechnol</source><volume>31</volume>: <fpage>1119</fpage>â<lpage>1125</lpage>.<pub-id pub-id-type="pmid">24185095</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C10">
      <mixed-citation publication-type="journal"><string-name><surname>Chakraborty</surname><given-names>M</given-names></string-name>, <string-name><surname>Baldwin-Brown</surname><given-names>JG</given-names></string-name>, <string-name><surname>Long</surname><given-names>AD</given-names></string-name>, <string-name><surname>Emerson</surname><given-names>JJ</given-names></string-name>. <year>2016</year><article-title>Contiguous and accurate de novo assembly of metazoan genomes with modest long read coverage</article-title>. <source>Nucleic Acids Res</source><volume>44</volume>: <fpage>e147</fpage>.<pub-id pub-id-type="pmid">27458204</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C11">
      <mixed-citation publication-type="journal"><string-name><surname>Chin</surname><given-names>CS</given-names></string-name>, <string-name><surname>Alexander</surname><given-names>DH</given-names></string-name>, <string-name><surname>Marks</surname><given-names>P</given-names></string-name>, <string-name><surname>Klammer</surname><given-names>AA</given-names></string-name>, <string-name><surname>Drake</surname><given-names>J</given-names></string-name>, <string-name><surname>Heiner</surname><given-names>C</given-names></string-name>, <string-name><surname>Clum</surname><given-names>A</given-names></string-name>, <string-name><surname>Copeland</surname><given-names>A</given-names></string-name>, <string-name><surname>Huddleston</surname><given-names>J</given-names></string-name>, <string-name><surname>Eichler</surname><given-names>EE</given-names></string-name>, <etal/><year>2013</year><article-title>Nonhybrid, finished microbial genome assemblies from long-read SMRT sequencing data</article-title>. <source>Nat Methods</source><volume>10</volume>: <fpage>563</fpage>â<lpage>569</lpage>.<pub-id pub-id-type="pmid">23644548</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C12">
      <mixed-citation publication-type="journal"><string-name><surname>Chin</surname><given-names>CS</given-names></string-name>, <string-name><surname>Peluso</surname><given-names>P</given-names></string-name>, <string-name><surname>Sedlazeck</surname><given-names>FJ</given-names></string-name>, <string-name><surname>Nattestad</surname><given-names>M</given-names></string-name>, <string-name><surname>Concepcion</surname><given-names>GT</given-names></string-name>, <string-name><surname>Clum</surname><given-names>A</given-names></string-name>, <string-name><surname>Dunn</surname><given-names>C</given-names></string-name>, <string-name><surname>O'Malley</surname><given-names>R</given-names></string-name>, <string-name><surname>Figueroa-Balderas</surname><given-names>R</given-names></string-name>, <string-name><surname>Morales-Cruz</surname><given-names>A</given-names></string-name>, <etal/><year>2016</year><article-title>Phased diploid genome assembly with single-molecule real-time sequencing</article-title>. <source>Nat Methods</source><volume>13</volume>: <fpage>1050</fpage>â<lpage>1054</lpage>.<pub-id pub-id-type="pmid">27749838</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C13">
      <mixed-citation publication-type="journal"><string-name><surname>Chum</surname><given-names>O</given-names></string-name>, <string-name><surname>Philbin</surname><given-names>J</given-names></string-name>, <string-name><surname>Zisserman</surname><given-names>A</given-names></string-name>. <year>2008</year><article-title>Near duplicate image detection: min-hash and tf-idf weighting</article-title>. <source>BMVC</source><volume>810</volume>: <fpage>812</fpage>â<lpage>815</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C14">
      <mixed-citation publication-type="journal"><string-name><surname>Eid</surname><given-names>J</given-names></string-name>, <string-name><surname>Fehr</surname><given-names>A</given-names></string-name>, <string-name><surname>Gray</surname><given-names>J</given-names></string-name>, <string-name><surname>Luong</surname><given-names>K</given-names></string-name>, <string-name><surname>Lyle</surname><given-names>J</given-names></string-name>, <string-name><surname>Otto</surname><given-names>G</given-names></string-name>, <string-name><surname>Peluso</surname><given-names>P</given-names></string-name>, <string-name><surname>Rank</surname><given-names>D</given-names></string-name>, <string-name><surname>Baybayan</surname><given-names>P</given-names></string-name>, <string-name><surname>Bettman</surname><given-names>B</given-names></string-name>, <etal/><year>2009</year><article-title>Real-time DNA sequencing from single polymerase molecules</article-title>. <source>Science</source><volume>323</volume>: <fpage>133</fpage>â<lpage>138</lpage>.<pub-id pub-id-type="pmid">19023044</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C15">
      <mixed-citation publication-type="journal"><string-name><surname>Ewing</surname><given-names>B</given-names></string-name>, <string-name><surname>Green</surname><given-names>P</given-names></string-name>. <year>1998</year><article-title>Base-calling of automated sequencer traces using phred. II. Error probabilities</article-title>. <source>Genome Res</source><volume>8</volume>: <fpage>186</fpage>â<lpage>194</lpage>.<pub-id pub-id-type="pmid">9521922</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C16">
      <mixed-citation publication-type="journal"><string-name><surname>Fasulo</surname><given-names>D</given-names></string-name>, <string-name><surname>Halpern</surname><given-names>A</given-names></string-name>, <string-name><surname>Dew</surname><given-names>I</given-names></string-name>, <string-name><surname>Mobarry</surname><given-names>C</given-names></string-name>. <year>2002</year><article-title>Efficiently detecting polymorphisms during the fragment assembly process</article-title>. <source>Bioinformatics</source><volume>18</volume>(<issue>Suppl 1</issue>): <fpage>S294</fpage>â<lpage>S302</lpage>.<pub-id pub-id-type="pmid">12169559</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C17">
      <mixed-citation publication-type="journal"><string-name><surname>Felsenfeld</surname><given-names>A</given-names></string-name>, <string-name><surname>Peterson</surname><given-names>J</given-names></string-name>, <string-name><surname>Schloss</surname><given-names>J</given-names></string-name>, <string-name><surname>Guyer</surname><given-names>M</given-names></string-name>. <year>1999</year><article-title>Assessing the quality of the DNA sequence from the Human Genome Project</article-title>. <source>Genome Res</source><volume>9</volume>: <fpage>1</fpage>â<lpage>4</lpage>.<pub-id pub-id-type="pmid">9927479</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C18">
      <mixed-citation publication-type="journal"><string-name><surname>Goodwin</surname><given-names>S</given-names></string-name>, <string-name><surname>Gurtowski</surname><given-names>J</given-names></string-name>, <string-name><surname>Ethe-Sayers</surname><given-names>S</given-names></string-name>, <string-name><surname>Deshpande</surname><given-names>P</given-names></string-name>, <string-name><surname>Schatz</surname><given-names>MC</given-names></string-name>, <string-name><surname>McCombie</surname><given-names>WR</given-names></string-name>. <year>2015</year><article-title>Oxford Nanopore sequencing, hybrid error correction, and de novo assembly of a eukaryotic genome</article-title>. <source>Genome Res</source><volume>25</volume>: <fpage>1750</fpage>â<lpage>1756</lpage>.<pub-id pub-id-type="pmid">26447147</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C19">
      <mixed-citation publication-type="journal"><string-name><surname>Gordon</surname><given-names>D</given-names></string-name>, <string-name><surname>Huddleston</surname><given-names>J</given-names></string-name>, <string-name><surname>Chaisson</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Hill</surname><given-names>CM</given-names></string-name>, <string-name><surname>Kronenberg</surname><given-names>ZN</given-names></string-name>, <string-name><surname>Munson</surname><given-names>KM</given-names></string-name>, <string-name><surname>Malig</surname><given-names>M</given-names></string-name>, <string-name><surname>Raja</surname><given-names>A</given-names></string-name>, <string-name><surname>Fiddes</surname><given-names>I</given-names></string-name>, <string-name><surname>Hillier</surname><given-names>LW</given-names></string-name>, <etal/><year>2016</year><article-title>Long-read sequence assembly of the gorilla genome</article-title>. <source>Science</source><volume>352</volume>: <fpage>aae0344</fpage>.<pub-id pub-id-type="pmid">27034376</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C20">
      <mixed-citation publication-type="journal"><string-name><surname>Hackl</surname><given-names>T</given-names></string-name>, <string-name><surname>Hedrich</surname><given-names>R</given-names></string-name>, <string-name><surname>Schultz</surname><given-names>J</given-names></string-name>, <string-name><surname>Forster</surname><given-names>F</given-names></string-name>. <year>2014</year><article-title>proovread: large-scale high-accuracy PacBio correction through iterative short read consensus</article-title>. <source>Bioinformatics</source><volume>30</volume>: <fpage>3004</fpage>â<lpage>3011</lpage>.<pub-id pub-id-type="pmid">25015988</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C21">
      <mixed-citation publication-type="journal"><string-name><surname>Hastie</surname><given-names>AR</given-names></string-name>, <string-name><surname>Dong</surname><given-names>L</given-names></string-name>, <string-name><surname>Smith</surname><given-names>A</given-names></string-name>, <string-name><surname>Finklestein</surname><given-names>J</given-names></string-name>, <string-name><surname>Lam</surname><given-names>ET</given-names></string-name>, <string-name><surname>Huo</surname><given-names>N</given-names></string-name>, <string-name><surname>Cao</surname><given-names>H</given-names></string-name>, <string-name><surname>Kwok</surname><given-names>PY</given-names></string-name>, <string-name><surname>Deal</surname><given-names>KR</given-names></string-name>, <string-name><surname>Dvorak</surname><given-names>J</given-names></string-name>, <etal/><year>2013</year><article-title>Rapid genome mapping in nanochannel arrays for highly complete and accurate de novo sequence assembly of the complex <italic>Aegilops tauschii</italic> genome</article-title>. <source>PLoS One</source><volume>8</volume>: <fpage>e55864</fpage>.<pub-id pub-id-type="pmid">23405223</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C22">
      <mixed-citation publication-type="journal"><string-name><surname>Holt</surname><given-names>RA</given-names></string-name>, <string-name><surname>Subramanian</surname><given-names>GM</given-names></string-name>, <string-name><surname>Halpern</surname><given-names>A</given-names></string-name>, <string-name><surname>Sutton</surname><given-names>GG</given-names></string-name>, <string-name><surname>Charlab</surname><given-names>R</given-names></string-name>, <string-name><surname>Nusskern</surname><given-names>DR</given-names></string-name>, <string-name><surname>Wincker</surname><given-names>P</given-names></string-name>, <string-name><surname>Clark</surname><given-names>AG</given-names></string-name>, <string-name><surname>Ribeiro</surname><given-names>JC</given-names></string-name>, <string-name><surname>Wides</surname><given-names>R</given-names></string-name>, <etal/><year>2002</year><article-title>The genome sequence of the malaria mosquito <italic>Anopheles gambiae</italic></article-title>. <source>Science</source><volume>298</volume>: <fpage>129</fpage>â<lpage>149</lpage>.<pub-id pub-id-type="pmid">12364791</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C23">
      <mixed-citation publication-type="journal"><string-name><surname>Hoskins</surname><given-names>RA</given-names></string-name>, <string-name><surname>Carlson</surname><given-names>JW</given-names></string-name>, <string-name><surname>Wan</surname><given-names>KH</given-names></string-name>, <string-name><surname>Park</surname><given-names>S</given-names></string-name>, <string-name><surname>Mendez</surname><given-names>I</given-names></string-name>, <string-name><surname>Galle</surname><given-names>SE</given-names></string-name>, <string-name><surname>Booth</surname><given-names>BW</given-names></string-name>, <string-name><surname>Pfeiffer</surname><given-names>BD</given-names></string-name>, <string-name><surname>George</surname><given-names>RA</given-names></string-name>, <string-name><surname>Svirskas</surname><given-names>R</given-names></string-name>, <etal/><year>2015</year><article-title>The Release 6 reference sequence of the <italic>Drosophila melanogaster</italic> genome</article-title>. <source>Genome Res</source><volume>25</volume>: <fpage>445</fpage>â<lpage>458</lpage>.<pub-id pub-id-type="pmid">25589440</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C24">
      <mixed-citation publication-type="journal"><collab>International Human Genome Sequencing Consortium</collab>. <year>2004</year><article-title>Finishing the euchromatic sequence of the human genome</article-title>. <source>Nature</source><volume>431</volume>: <fpage>931</fpage>â<lpage>945</lpage>.<pub-id pub-id-type="pmid">15496913</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C25">
      <mixed-citation publication-type="journal"><string-name><surname>Istace</surname><given-names>B</given-names></string-name>, <string-name><surname>Friedrich</surname><given-names>A</given-names></string-name>, <string-name><surname>d'Agata</surname><given-names>L</given-names></string-name>, <string-name><surname>Faye</surname><given-names>S</given-names></string-name>, <string-name><surname>Payen</surname><given-names>E</given-names></string-name>, <string-name><surname>Beluche</surname><given-names>O</given-names></string-name>, <string-name><surname>Caradec</surname><given-names>C</given-names></string-name>, <string-name><surname>Davidas</surname><given-names>S</given-names></string-name>, <string-name><surname>Cruaud</surname><given-names>C</given-names></string-name>, <string-name><surname>Liti</surname><given-names>G</given-names></string-name>, <etal/><year>2016</year><article-title>de novo assembly and population genomic survey of natural yeast isolates with the Oxford Nanopore MinION sequencer</article-title>. <source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/066613</pub-id>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C26">
      <mixed-citation publication-type="journal"><string-name><surname>Istrail</surname><given-names>S</given-names></string-name>, <string-name><surname>Sutton</surname><given-names>GG</given-names></string-name>, <string-name><surname>Florea</surname><given-names>L</given-names></string-name>, <string-name><surname>Halpern</surname><given-names>AL</given-names></string-name>, <string-name><surname>Mobarry</surname><given-names>CM</given-names></string-name>, <string-name><surname>Lippert</surname><given-names>R</given-names></string-name>, <string-name><surname>Walenz</surname><given-names>B</given-names></string-name>, <string-name><surname>Shatkay</surname><given-names>H</given-names></string-name>, <string-name><surname>Dew</surname><given-names>I</given-names></string-name>, <string-name><surname>Miller</surname><given-names>JR</given-names></string-name>, <etal/><year>2004</year><article-title>Whole-genome shotgun assembly and comparison of human genome assemblies</article-title>. <source>Proc Natl Acad Sci</source><volume>101</volume>: <fpage>1916</fpage>â<lpage>1921</lpage>.<pub-id pub-id-type="pmid">14769938</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C27">
      <mixed-citation publication-type="journal"><string-name><surname>Jain</surname><given-names>M</given-names></string-name>, <string-name><surname>Fiddes</surname><given-names>IT</given-names></string-name>, <string-name><surname>Miga</surname><given-names>KH</given-names></string-name>, <string-name><surname>Olsen</surname><given-names>HE</given-names></string-name>, <string-name><surname>Paten</surname><given-names>B</given-names></string-name>, <string-name><surname>Akeson</surname><given-names>M</given-names></string-name>. <year>2015</year><article-title>Improved data analysis for the MinION nanopore sequencer</article-title>. <source>Nat Methods</source><volume>12</volume>: <fpage>351</fpage>â<lpage>356</lpage>.<pub-id pub-id-type="pmid">25686389</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C28">
      <mixed-citation publication-type="journal"><string-name><surname>Judge</surname><given-names>K</given-names></string-name>, <string-name><surname>Hunt</surname><given-names>M</given-names></string-name>, <string-name><surname>Reuter</surname><given-names>S</given-names></string-name>, <string-name><surname>Tracey</surname><given-names>A</given-names></string-name>, <string-name><surname>Quail</surname><given-names>MA</given-names></string-name>, <string-name><surname>Parkhill</surname><given-names>J</given-names></string-name>, <string-name><surname>Peacock</surname><given-names>SJ</given-names></string-name>. <year>2016</year><article-title>Comparison of bacterial genome assembly software for MinION data and their applicability to medical microbiology</article-title>. <source>Microb Genomics</source><volume>2</volume>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C29">
      <mixed-citation publication-type="journal"><string-name><surname>Kaplan</surname><given-names>N</given-names></string-name>, <string-name><surname>Dekker</surname><given-names>J</given-names></string-name>. <year>2013</year><article-title>High-throughput genome scaffolding from in vivo DNA interaction frequency</article-title>. <source>Nat Biotechnol</source><volume>31</volume>: <fpage>1143</fpage>â<lpage>1147</lpage>.<pub-id pub-id-type="pmid">24270850</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C30">
      <mixed-citation publication-type="journal"><string-name><surname>Kim</surname><given-names>KE</given-names></string-name>, <string-name><surname>Peluso</surname><given-names>P</given-names></string-name>, <string-name><surname>Babayan</surname><given-names>P</given-names></string-name>, <string-name><surname>Yeadon</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Yu</surname><given-names>C</given-names></string-name>, <string-name><surname>Fisher</surname><given-names>WW</given-names></string-name>, <string-name><surname>Chin</surname><given-names>C-S</given-names></string-name>, <string-name><surname>Rapicavoli</surname><given-names>NA</given-names></string-name>, <string-name><surname>Rank</surname><given-names>DR</given-names></string-name>, <string-name><surname>Li</surname><given-names>J</given-names></string-name>, <etal/><year>2014</year><article-title>Long-read, whole-genome shotgun sequence data for five model organisms</article-title>. <source>Sci Data</source><volume>1</volume>: <fpage>140045</fpage>.<pub-id pub-id-type="pmid">25977796</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C31">
      <mixed-citation publication-type="journal"><string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>. <year>2014</year><article-title>One chromosome, one contig: complete microbial genomes from long-read sequencing and assembly</article-title>. <source>Curr Opin Microbiol</source><volume>23C</volume>: <fpage>110</fpage>â<lpage>120</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C32">
      <mixed-citation publication-type="journal"><string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Treangen</surname><given-names>TJ</given-names></string-name>, <string-name><surname>Pop</surname><given-names>M</given-names></string-name>. <year>2011</year><article-title>Bambus 2: scaffolding metagenomes</article-title>. <source>Bioinformatics</source><volume>27</volume>: <fpage>2964</fpage>â<lpage>2971</lpage>.<pub-id pub-id-type="pmid">21926123</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C33">
      <mixed-citation publication-type="journal"><string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Schatz</surname><given-names>MC</given-names></string-name>, <string-name><surname>Walenz</surname><given-names>BP</given-names></string-name>, <string-name><surname>Martin</surname><given-names>J</given-names></string-name>, <string-name><surname>Howard</surname><given-names>JT</given-names></string-name>, <string-name><surname>Ganapathy</surname><given-names>G</given-names></string-name>, <string-name><surname>Wang</surname><given-names>Z</given-names></string-name>, <string-name><surname>Rasko</surname><given-names>DA</given-names></string-name>, <string-name><surname>McCombie</surname><given-names>WR</given-names></string-name>, <string-name><surname>Jarvis</surname><given-names>ED</given-names></string-name>, <etal/><year>2012</year><article-title>Hybrid error correction and de novo assembly of single-molecule sequencing reads</article-title>. <source>Nat Biotechnol</source><volume>30</volume>: <fpage>693</fpage>â<lpage>700</lpage>.<pub-id pub-id-type="pmid">22750884</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C34">
      <mixed-citation publication-type="journal"><string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Harhay</surname><given-names>GP</given-names></string-name>, <string-name><surname>Smith</surname><given-names>TP</given-names></string-name>, <string-name><surname>Bono</surname><given-names>JL</given-names></string-name>, <string-name><surname>Harhay</surname><given-names>DM</given-names></string-name>, <string-name><surname>McVey</surname><given-names>SD</given-names></string-name>, <string-name><surname>Radune</surname><given-names>D</given-names></string-name>, <string-name><surname>Bergman</surname><given-names>NH</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>. <year>2013</year><article-title>Reducing assembly complexity of microbial genomes with single-molecule sequencing</article-title>. <source>Genome Biol</source><volume>14</volume>: <fpage>R101</fpage>.<pub-id pub-id-type="pmid">24034426</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C35">
      <mixed-citation publication-type="journal"><string-name><surname>Kurtz</surname><given-names>S</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>A</given-names></string-name>, <string-name><surname>Delcher</surname><given-names>AL</given-names></string-name>, <string-name><surname>Smoot</surname><given-names>M</given-names></string-name>, <string-name><surname>Shumway</surname><given-names>M</given-names></string-name>, <string-name><surname>Antonescu</surname><given-names>C</given-names></string-name>, <string-name><surname>Salzberg</surname><given-names>SL</given-names></string-name>. <year>2004</year><article-title>Versatile and open software for comparing large genomes</article-title>. <source>Genome Biol</source><volume>5</volume>: <fpage>R12</fpage>.<pub-id pub-id-type="pmid">14759262</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C36">
      <mixed-citation publication-type="journal"><string-name><surname>Lee</surname><given-names>H</given-names></string-name>, <string-name><surname>Gurtowski</surname><given-names>J</given-names></string-name>, <string-name><surname>Yoo</surname><given-names>S</given-names></string-name>, <string-name><surname>Marcus</surname><given-names>S</given-names></string-name>, <string-name><surname>McCombie</surname><given-names>WR</given-names></string-name>, <string-name><surname>Schatz</surname><given-names>M</given-names></string-name>. <year>2014</year><article-title>Error correction and assembly complexity of single molecule sequencing reads</article-title>. <source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/006395</pub-id>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C37">
      <mixed-citation publication-type="journal"><string-name><surname>Li</surname><given-names>H</given-names></string-name>. <year>2016</year><article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>. <source>Bioinformatics</source><volume>32</volume>: <fpage>2103</fpage>â<lpage>2110</lpage>.<pub-id pub-id-type="pmid">27153593</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C38">
      <mixed-citation publication-type="journal"><string-name><surname>Loman</surname><given-names>NJ</given-names></string-name>, <string-name><surname>Quick</surname><given-names>J</given-names></string-name>, <string-name><surname>Simpson</surname><given-names>JT</given-names></string-name>. <year>2015</year><article-title>A complete bacterial genome assembled de novo using only nanopore sequencing data</article-title>. <source>Nat Methods</source><volume>12</volume>: <fpage>733</fpage>â<lpage>735</lpage>.<pub-id pub-id-type="pmid">26076426</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C39">
      <mixed-citation publication-type="book"><string-name><surname>Manning</surname><given-names>CD</given-names></string-name>, <string-name><surname>Raghavan</surname><given-names>P</given-names></string-name>, <string-name><surname>SchÃ¼tze</surname><given-names>H</given-names></string-name>. <year>2008</year><article-title>Scoring, term weighting and the vector space model</article-title>. In <source>Introduction to information retrieval</source>, Vol. <volume>100</volume>, pp. <fpage>2</fpage>â<lpage>4</lpage>. <publisher-name>Cambridge University Press</publisher-name>, <publisher-loc>Cambridge</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C40">
      <mixed-citation publication-type="journal"><string-name><surname>Metz</surname><given-names>CW</given-names></string-name>. <year>1914</year><article-title>Chromosome studies in the Diptera</article-title>. <source>J Exp Zool</source><volume>17</volume>: <fpage>45</fpage>â<lpage>59</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C41">
      <mixed-citation publication-type="journal"><string-name><surname>Miller</surname><given-names>JR</given-names></string-name>, <string-name><surname>Delcher</surname><given-names>AL</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Venter</surname><given-names>E</given-names></string-name>, <string-name><surname>Walenz</surname><given-names>BP</given-names></string-name>, <string-name><surname>Brownley</surname><given-names>A</given-names></string-name>, <string-name><surname>Johnson</surname><given-names>J</given-names></string-name>, <string-name><surname>Li</surname><given-names>K</given-names></string-name>, <string-name><surname>Mobarry</surname><given-names>C</given-names></string-name>, <string-name><surname>Sutton</surname><given-names>G</given-names></string-name>. <year>2008</year><article-title>Aggressive assembly of pyrosequencing reads with mates</article-title>. <source>Bioinformatics</source><volume>24</volume>: <fpage>2818</fpage>â<lpage>2824</lpage>.<pub-id pub-id-type="pmid">18952627</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C42">
      <mixed-citation publication-type="journal"><string-name><surname>Myers</surname><given-names>EW</given-names></string-name>. <year>1986</year><article-title>An O(ND) difference algorithm and its variations</article-title>. <source>Algorithmica</source><volume>1</volume>: <fpage>251</fpage>â<lpage>266</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C43">
      <mixed-citation publication-type="journal"><string-name><surname>Myers</surname><given-names>EW</given-names></string-name>. <year>2005</year><article-title>The fragment assembly string graph</article-title>. <source>Bioinformatics</source><volume>21</volume>(<issue>Suppl 2</issue>): <fpage>i79</fpage>â<lpage>ii85</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C44">
      <mixed-citation publication-type="book"><string-name><surname>Myers</surname><given-names>G</given-names></string-name>. <year>2014</year><article-title>Efficient local alignment discovery amongst noisy long reads</article-title>. In <source>Algorithms in bioinformatics. WABI 2014. Lecture notes in computer science</source>, Vol. <volume>8701</volume> (ed. <string-name><surname>Brown</surname><given-names>D</given-names></string-name>, <string-name><surname>Morgernstern</surname><given-names>B</given-names></string-name>), pp. <fpage>52</fpage>â<lpage>67</lpage>. <publisher-name>Springer</publisher-name>, <publisher-loc>Berlin</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C45">
      <mixed-citation publication-type="journal"><string-name><surname>Myers</surname><given-names>EW</given-names></string-name>, <string-name><surname>Sutton</surname><given-names>GG</given-names></string-name>, <string-name><surname>Delcher</surname><given-names>AL</given-names></string-name>, <string-name><surname>Dew</surname><given-names>IM</given-names></string-name>, <string-name><surname>Fasulo</surname><given-names>DP</given-names></string-name>, <string-name><surname>Flanigan</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Kravitz</surname><given-names>SA</given-names></string-name>, <string-name><surname>Mobarry</surname><given-names>CM</given-names></string-name>, <string-name><surname>Reinert</surname><given-names>KH</given-names></string-name>, <string-name><surname>Remington</surname><given-names>KA</given-names></string-name>, <etal/><year>2000</year><article-title>A whole-genome assembly of <italic>Drosophila</italic></article-title>. <source>Science</source><volume>287</volume>: <fpage>2196</fpage>â<lpage>2204</lpage>.<pub-id pub-id-type="pmid">10731133</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C46">
      <mixed-citation publication-type="journal"><string-name><surname>Nagarajan</surname><given-names>N</given-names></string-name>, <string-name><surname>Pop</surname><given-names>M</given-names></string-name>. <year>2009</year><article-title>Parametric complexity of sequence assembly: theory and applications to next generation sequencing</article-title>. <source>J Comput Biol</source><volume>16</volume>: <fpage>897</fpage>â<lpage>908</lpage>.<pub-id pub-id-type="pmid">19580519</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C47">
      <mixed-citation publication-type="journal"><string-name><surname>Nijkamp</surname><given-names>JF</given-names></string-name>, <string-name><surname>Pop</surname><given-names>M</given-names></string-name>, <string-name><surname>Reinders</surname><given-names>MJT</given-names></string-name>, <string-name><surname>de Ridder</surname><given-names>D</given-names></string-name>. <year>2013</year><article-title>Exploring variation-aware contig graphs for (comparative) metagenomics using MaryGold</article-title>. <source>Bioinformatics</source><volume>29</volume>: <fpage>2826</fpage>â<lpage>2834</lpage>.<pub-id pub-id-type="pmid">24058058</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C48">
      <mixed-citation publication-type="journal"><string-name><surname>Ning</surname><given-names>Z</given-names></string-name>, <string-name><surname>Cox</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Mullikin</surname><given-names>JC</given-names></string-name>. <year>2001</year><article-title>SSAHA: a fast search method for large DNA databases</article-title>. <source>Genome Res</source><volume>11</volume>: <fpage>1725</fpage>â<lpage>1729</lpage>.<pub-id pub-id-type="pmid">11591649</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C49">
      <mixed-citation publication-type="journal"><string-name><surname>Ondov</surname><given-names>BD</given-names></string-name>, <string-name><surname>Treangen</surname><given-names>TJ</given-names></string-name>, <string-name><surname>Melsted</surname><given-names>P</given-names></string-name>, <string-name><surname>Mallonee</surname><given-names>AB</given-names></string-name>, <string-name><surname>Bergman</surname><given-names>NH</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>. <year>2016</year><article-title>Mash: fast genome and metagenome distance estimation using MinHash</article-title>. <source>Genome Biol</source><volume>17</volume>: <fpage>132</fpage>.<pub-id pub-id-type="pmid">27323842</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C50">
      <mixed-citation publication-type="journal"><string-name><surname>Ono</surname><given-names>Y</given-names></string-name>, <string-name><surname>Asai</surname><given-names>K</given-names></string-name>, <string-name><surname>Hamada</surname><given-names>M</given-names></string-name>. <year>2013</year><article-title>PBSIM: PacBio reads simulator: toward accurate genome assembly</article-title>. <source>Bioinformatics</source><volume>29</volume>: <fpage>119</fpage>â<lpage>121</lpage>.<pub-id pub-id-type="pmid">23129296</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C51">
      <mixed-citation publication-type="journal"><string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>, <string-name><surname>Schatz</surname><given-names>MC</given-names></string-name>, <string-name><surname>Pop</surname><given-names>M</given-names></string-name>. <year>2008</year><article-title>Genome assembly forensics: finding the elusive mis-assembly</article-title>. <source>Genome Biol</source><volume>9</volume>: <fpage>R55</fpage>.<pub-id pub-id-type="pmid">18341692</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C52">
      <mixed-citation publication-type="journal"><string-name><surname>PrÃ¼fer</surname><given-names>K</given-names></string-name>, <string-name><surname>Munch</surname><given-names>K</given-names></string-name>, <string-name><surname>Hellmann</surname><given-names>I</given-names></string-name>, <string-name><surname>Akagi</surname><given-names>K</given-names></string-name>, <string-name><surname>Miller</surname><given-names>JR</given-names></string-name>, <string-name><surname>Walenz</surname><given-names>B</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Sutton</surname><given-names>G</given-names></string-name>, <string-name><surname>Kodira</surname><given-names>C</given-names></string-name>, <string-name><surname>Winer</surname><given-names>R</given-names></string-name>, <etal/><year>2012</year><article-title>The bonobo genome compared with the chimpanzee and human genomes</article-title>. <source>Nature</source><volume>486</volume>: <fpage>527</fpage>â<lpage>531</lpage>.<pub-id pub-id-type="pmid">22722832</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C53">
      <mixed-citation publication-type="journal"><string-name><surname>Ross</surname><given-names>MG</given-names></string-name>, <string-name><surname>Russ</surname><given-names>C</given-names></string-name>, <string-name><surname>Costello</surname><given-names>M</given-names></string-name>, <string-name><surname>Hollinger</surname><given-names>A</given-names></string-name>, <string-name><surname>Lennon</surname><given-names>NJ</given-names></string-name>, <string-name><surname>Hegarty</surname><given-names>R</given-names></string-name>, <string-name><surname>Nusbaum</surname><given-names>C</given-names></string-name>, <string-name><surname>Jaffe</surname><given-names>DB</given-names></string-name>. <year>2013</year><article-title>Characterizing and measuring bias in sequence data</article-title>. <source>Genome Biol</source><volume>14</volume>: <fpage>R51</fpage>.<pub-id pub-id-type="pmid">23718773</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C54">
      <mixed-citation publication-type="journal"><string-name><surname>Salmela</surname><given-names>L</given-names></string-name>, <string-name><surname>Rivals</surname><given-names>E</given-names></string-name>. <year>2014</year><article-title>LoRDEC: accurate and efficient long read error correction</article-title>. <source>Bioinformatics</source><volume>30</volume>: <fpage>3506</fpage>â<lpage>3514</lpage>.<pub-id pub-id-type="pmid">25165095</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C55">
      <mixed-citation publication-type="journal"><string-name><surname>Salzberg</surname><given-names>SL</given-names></string-name>, <string-name><surname>Phillippy</surname><given-names>AM</given-names></string-name>, <string-name><surname>Zimin</surname><given-names>A</given-names></string-name>, <string-name><surname>Puiu</surname><given-names>D</given-names></string-name>, <string-name><surname>Magoc</surname><given-names>T</given-names></string-name>, <string-name><surname>Koren</surname><given-names>S</given-names></string-name>, <string-name><surname>Treangen</surname><given-names>TJ</given-names></string-name>, <string-name><surname>Schatz</surname><given-names>MC</given-names></string-name>, <string-name><surname>Delcher</surname><given-names>AL</given-names></string-name>, <string-name><surname>Roberts</surname><given-names>M</given-names></string-name>. <year>2012</year><article-title>GAGE: a critical evaluation of genome assemblies and assembly algorithms</article-title>. <source>Genome Res</source><volume>22</volume>: <fpage>557</fpage>â<lpage>567</lpage>.<pub-id pub-id-type="pmid">22147368</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C56">
      <mixed-citation publication-type="journal"><string-name><surname>Schmutz</surname><given-names>J</given-names></string-name>, <string-name><surname>Wheeler</surname><given-names>J</given-names></string-name>, <string-name><surname>Grimwood</surname><given-names>J</given-names></string-name>, <string-name><surname>Dickson</surname><given-names>M</given-names></string-name>, <string-name><surname>Yang</surname><given-names>J</given-names></string-name>, <string-name><surname>Caoile</surname><given-names>C</given-names></string-name>, <string-name><surname>Bajorek</surname><given-names>E</given-names></string-name>, <string-name><surname>Black</surname><given-names>S</given-names></string-name>, <string-name><surname>Chan</surname><given-names>YM</given-names></string-name>, <string-name><surname>Denys</surname><given-names>M</given-names></string-name>, <etal/><year>2004</year><article-title>Quality assessment of the human genome sequence</article-title>. <source>Nature</source><volume>429</volume>: <fpage>365</fpage>â<lpage>368</lpage>.<pub-id pub-id-type="pmid">15164052</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C57">
      <mixed-citation publication-type="journal"><string-name><surname>Schneider</surname><given-names>GF</given-names></string-name>, <string-name><surname>Dekker</surname><given-names>C</given-names></string-name>. <year>2012</year><article-title>DNA sequencing with nanopores</article-title>. <source>Nat Biotechnol</source><volume>30</volume>: <fpage>326</fpage>â<lpage>328</lpage>.<pub-id pub-id-type="pmid">22491281</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C58">
      <mixed-citation publication-type="journal"><string-name><surname>Selvaraj</surname><given-names>S</given-names></string-name>, <string-name><surname>R Dixon</surname><given-names>J</given-names></string-name>, <string-name><surname>Bansal</surname><given-names>V</given-names></string-name>, <string-name><surname>Ren</surname><given-names>B</given-names></string-name>. <year>2013</year><article-title>Whole-genome haplotype reconstruction using proximity-ligation and shotgun sequencing</article-title>. <source>Nat Biotechnol</source><volume>31</volume>: <fpage>1111</fpage>â<lpage>1118</lpage>.<pub-id pub-id-type="pmid">24185094</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C59">
      <mixed-citation publication-type="journal"><string-name><surname>Shi</surname><given-names>L</given-names></string-name>, <string-name><surname>Guo</surname><given-names>Y</given-names></string-name>, <string-name><surname>Dong</surname><given-names>C</given-names></string-name>, <string-name><surname>Huddleston</surname><given-names>J</given-names></string-name>, <string-name><surname>Yang</surname><given-names>H</given-names></string-name>, <string-name><surname>Han</surname><given-names>X</given-names></string-name>, <string-name><surname>Fu</surname><given-names>A</given-names></string-name>, <string-name><surname>Li</surname><given-names>Q</given-names></string-name>, <string-name><surname>Li</surname><given-names>N</given-names></string-name>, <string-name><surname>Gong</surname><given-names>S</given-names></string-name>, <etal/><year>2016</year><article-title>Long-read sequencing and de novo assembly of a Chinese genome</article-title>. <source>Nat Commun</source><volume>7</volume>: <fpage>12065</fpage>.<pub-id pub-id-type="pmid">27356984</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C60">
      <mixed-citation publication-type="journal"><string-name><surname>Sovic</surname><given-names>I</given-names></string-name>, <string-name><surname>Krizanovic</surname><given-names>K</given-names></string-name>, <string-name><surname>Skala</surname><given-names>K</given-names></string-name>, <string-name><surname>Sikic</surname><given-names>M</given-names></string-name>. <year>2016</year><article-title>Evaluation of hybrid and non-hybrid methods for de novo assembly of nanopore reads</article-title>. <source>Bioinformatics</source><volume>32</volume>: <fpage>2582</fpage>â<lpage>2589</lpage>.<pub-id pub-id-type="pmid">27162186</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C61">
      <mixed-citation publication-type="confproc"><string-name><surname>Stevens</surname><given-names>NM</given-names></string-name>. <year>1912</year><article-title>The chromosomes in <italic>Drosophila</italic> ampelophila</article-title>. In <conf-name>Proceedings of the 7th International Zoological Congress</conf-name>, pp. <fpage>380</fpage>â<lpage>381</lpage>. <publisher-name>The University Press</publisher-name>, <publisher-loc>Cambridge</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C62">
      <mixed-citation publication-type="journal"><string-name><surname>Sutton</surname><given-names>GG</given-names></string-name>, <string-name><surname>White</surname><given-names>O</given-names></string-name>, <string-name><surname>Adams</surname><given-names>MD</given-names></string-name>, <string-name><surname>Kerlavage</surname><given-names>AR</given-names></string-name>. <year>1995</year><article-title>TIGR assembler: a new tool for assembling large shotgun sequencing projects</article-title>. <source>Genome Sci Technol</source><volume>1</volume>: <fpage>9</fpage>â<lpage>19</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C63">
      <mixed-citation publication-type="journal"><string-name><surname>TÃ¸rresen</surname><given-names>OK</given-names></string-name>, <string-name><surname>Star</surname><given-names>B</given-names></string-name>, <string-name><surname>Jentoft</surname><given-names>S</given-names></string-name>, <string-name><surname>Reinar</surname><given-names>WB</given-names></string-name>, <string-name><surname>Grove</surname><given-names>H</given-names></string-name>, <string-name><surname>Miller</surname><given-names>JR</given-names></string-name>, <string-name><surname>Walenz</surname><given-names>BP</given-names></string-name>, <string-name><surname>Knight</surname><given-names>J</given-names></string-name>, <string-name><surname>Ekholm</surname><given-names>JM</given-names></string-name>, <string-name><surname>Peluso</surname><given-names>P</given-names></string-name>, <etal/><year>2017</year><article-title>An improved genome assembly uncovers prolific tandem repeats in Atlantic cod</article-title>. <source>BMC Genomics</source><volume>18</volume>: <fpage>95</fpage>.<pub-id pub-id-type="pmid">28100185</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C64">
      <mixed-citation publication-type="journal"><string-name><surname>Travers</surname><given-names>KJ</given-names></string-name>, <string-name><surname>Chin</surname><given-names>CS</given-names></string-name>, <string-name><surname>Rank</surname><given-names>DR</given-names></string-name>, <string-name><surname>Eid</surname><given-names>JS</given-names></string-name>, <string-name><surname>Turner</surname><given-names>SW</given-names></string-name>. <year>2010</year><article-title>A flexible and efficient template format for circular consensus sequencing and SNP detection</article-title>. <source>Nucleic Acids Res</source><volume>38</volume>: <fpage>e159</fpage>.<pub-id pub-id-type="pmid">20571086</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C65">
      <mixed-citation publication-type="journal"><string-name><surname>Ukkonen</surname><given-names>E</given-names></string-name>. <year>1992</year><article-title>Approximate string-matching with q-grams and maximal matches</article-title>. <source>Theor Comput Sci</source><volume>92</volume>: <fpage>191</fpage>â<lpage>211</lpage>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C66">
      <mixed-citation publication-type="journal"><string-name><surname>Vaser</surname><given-names>R</given-names></string-name>, <string-name><surname>SoviÄ</surname><given-names>I</given-names></string-name>, <string-name><surname>Nagarajan</surname><given-names>N</given-names></string-name>, <string-name><surname>Å ikiÄ</surname><given-names>M</given-names></string-name>. <year>2017</year><article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>. <source>Genome Res</source> (<issue>this issue</issue>). <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>.</mixed-citation>
    </ref>
    <ref id="KORENGR215087C67">
      <mixed-citation publication-type="journal"><string-name><surname>Walker</surname><given-names>BJ</given-names></string-name>, <string-name><surname>Abeel</surname><given-names>T</given-names></string-name>, <string-name><surname>Shea</surname><given-names>T</given-names></string-name>, <string-name><surname>Priest</surname><given-names>M</given-names></string-name>, <string-name><surname>Abouelliel</surname><given-names>A</given-names></string-name>, <string-name><surname>Sakthikumar</surname><given-names>S</given-names></string-name>, <string-name><surname>Cuomo</surname><given-names>CA</given-names></string-name>, <string-name><surname>Zeng</surname><given-names>Q</given-names></string-name>, <string-name><surname>Wortman</surname><given-names>J</given-names></string-name>, <string-name><surname>Young</surname><given-names>SK</given-names></string-name>, <etal/><year>2014</year><article-title>Pilon: an integrated tool for comprehensive microbial variant detection and genome assembly improvement</article-title>. <source>PLoS One</source><volume>9</volume>: <fpage>e112963</fpage>.<pub-id pub-id-type="pmid">25409509</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C68">
      <mixed-citation publication-type="journal"><string-name><surname>Wang</surname><given-names>H</given-names></string-name>, <string-name><surname>Avican</surname><given-names>K</given-names></string-name>, <string-name><surname>Fahlgren</surname><given-names>A</given-names></string-name>, <string-name><surname>Erttmann</surname><given-names>SF</given-names></string-name>, <string-name><surname>Nuss</surname><given-names>AM</given-names></string-name>, <string-name><surname>Dersch</surname><given-names>P</given-names></string-name>, <string-name><surname>Fallman</surname><given-names>M</given-names></string-name>, <string-name><surname>Edgren</surname><given-names>T</given-names></string-name>, <string-name><surname>Wolf-Watz</surname><given-names>H</given-names></string-name>. <year>2016</year><article-title>Increased plasmid copy number is essential for Yersinia T3SS function and virulence</article-title>. <source>Science</source><volume>353</volume>: <fpage>492</fpage>â<lpage>495</lpage>.<pub-id pub-id-type="pmid">27365311</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C69">
      <mixed-citation publication-type="journal"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Schultz</surname><given-names>MB</given-names></string-name>, <string-name><surname>Zobel</surname><given-names>J</given-names></string-name>, <string-name><surname>Holt</surname><given-names>KE</given-names></string-name>. <year>2015</year><article-title>Bandage: interactive visualization of de novo genome assemblies</article-title>. <source>Bioinformatics</source><volume>31</volume>: <fpage>3350</fpage>â<lpage>3352</lpage>.<pub-id pub-id-type="pmid">26099265</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C70">
      <mixed-citation publication-type="journal"><string-name><surname>Ye</surname><given-names>C</given-names></string-name>, <string-name><surname>Hill</surname><given-names>CM</given-names></string-name>, <string-name><surname>Wu</surname><given-names>S</given-names></string-name>, <string-name><surname>Ruan</surname><given-names>J</given-names></string-name>, <string-name><surname>Ma</surname><given-names>ZS</given-names></string-name>. <year>2016</year><article-title>DBG2OLC: efficient assembly of large genomes using long erroneous reads of the third generation sequencing technologies</article-title>. <source>Sci Rep</source><volume>6</volume>: <fpage>31900</fpage>.<pub-id pub-id-type="pmid">27573208</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C71">
      <mixed-citation publication-type="journal"><string-name><surname>Zerbino</surname><given-names>DR</given-names></string-name>, <string-name><surname>Birney</surname><given-names>E</given-names></string-name>. <year>2008</year><article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source><volume>18</volume>: <fpage>821</fpage>â<lpage>829</lpage>.<pub-id pub-id-type="pmid">18349386</pub-id></mixed-citation>
    </ref>
    <ref id="KORENGR215087C72">
      <mixed-citation publication-type="journal"><string-name><surname>Zheng</surname><given-names>GX</given-names></string-name>, <string-name><surname>Lau</surname><given-names>BT</given-names></string-name>, <string-name><surname>Schnall-Levin</surname><given-names>M</given-names></string-name>, <string-name><surname>Jarosz</surname><given-names>M</given-names></string-name>, <string-name><surname>Bell</surname><given-names>JM</given-names></string-name>, <string-name><surname>Hindson</surname><given-names>CM</given-names></string-name>, <string-name><surname>Kyriazopoulou-Panagiotopoulou</surname><given-names>S</given-names></string-name>, <string-name><surname>Masquelier</surname><given-names>DA</given-names></string-name>, <string-name><surname>Merrill</surname><given-names>L</given-names></string-name>, <string-name><surname>Terry</surname><given-names>JM</given-names></string-name>, <etal/><year>2016</year><article-title>Haplotyping germline and cancer genomes with high-throughput linked-read sequencing</article-title>. <source>Nat Biotechnol</source><volume>34</volume>: <fpage>303</fpage>â<lpage>311</lpage>.<pub-id pub-id-type="pmid">26829319</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
