<?properties open_access?>
<?properties no_embargo?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title>Bioinformatics</journal-title>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1460-2059</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2666816</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btp112</article-id>
    <article-id pub-id-type="publisher-id">btp112</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group>
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>mkESA</italic>: enhanced suffix array construction tool</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Homann</surname>
          <given-names>Robert</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fleer</surname>
          <given-names>David</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Giegerich</surname>
          <given-names>Robert</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Rehmsmeier</surname>
          <given-names>Marc</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>3</sup>
        </xref>
        <xref ref-type="author-notes" rid="FN1">
          <sup>†</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="AFF1"><sup>1</sup>International NRW Graduate School in Bioinformatics and Genome Research, Center for Biotechnology (CeBiTec), Bielefeld University, 33594 Bielefeld, <sup>2</sup>Technische Fakultät, Bielefeld University, Postfach 100 131, 33501, Bielefeld, Germany and <sup>3</sup>GMI - Gregor Mendel Institute of Molecular Plant Biology GmbH, Dr. Bohr-Gasse 3, 1030 Vienna, Austria</aff>
    <author-notes>
      <corresp id="COR1">*To whom correspondence should be addressed.</corresp>
      <fn id="FN1">
        <p><sup>†</sup>Present address: GMI - Gregor Mendel Institute of Molecular Plant Biology GmbH, Dr. Bohr-Gasse 3, 1030 Vienna, Austria.</p>
      </fn>
      <fn>
        <p>Associate Editor: Limsoon Wong</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>15</day>
      <month>4</month>
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>26</day>
      <month>2</month>
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>26</day>
      <month>2</month>
      <year>2009</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
			<pub-date pub-type="epub"/>. -->
    <volume>25</volume>
    <issue>8</issue>
    <fpage>1084</fpage>
    <lpage>1085</lpage>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>1</month>
        <year>2009</year>
      </date>
      <date date-type="rev-recd">
        <day>19</day>
        <month>2</month>
        <year>2009</year>
      </date>
      <date date-type="accepted">
        <day>20</day>
        <month>2</month>
        <year>2009</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2009 The Author(s)</copyright-statement>
      <copyright-year>2009</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/2.0/uk/">
        <p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/2.0/uk/">http://creativecommons.org/licenses/by-nc/2.0/uk/</ext-link>) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Summary:</bold> We introduce the tool <italic>mkESA</italic>, an open source program for constructing enhanced suffix arrays (ESAs), striving for low memory consumption, yet high practical speed. <italic>mkESA</italic> is a user-friendly program written in portable C99, based on a parallelized version of the Deep-Shallow suffix array construction algorithm, which is known for its high speed and small memory usage. The tool handles large FASTA files with multiple sequences, and computes suffix arrays and various additional tables, such as the LCP table (longest common prefix) or the inverse suffix array, from given sequence data.</p>
      <p><bold>Availability:</bold> The source code of <italic>mkESA</italic> is freely available under the terms of the GNU General Public License (GPL) version 2 at <ext-link ext-link-type="uri" xlink:href="http://bibiserv.techfak.uni-bielefeld.de/mkesa/">http://bibiserv.techfak.uni-bielefeld.de/mkesa/</ext-link>.</p>
      <p>
        <bold>Contact:</bold>
        <email>rhomann@techfak.uni-bielefeld.de</email>
      </p>
    </abstract>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>1 INTRODUCTION</title>
    <p>The program <italic>mkESA</italic> is a software tool for constructing enhanced suffix arrays (ESAs) from biological sequence data. The ESA is an index data structure for textual data, introduced in Abouelhoda <italic>et al.</italic> (<xref ref-type="bibr" rid="B1">2004</xref>) as an extension of the well-known suffix array (Manber and Myers, <xref ref-type="bibr" rid="B8">1993</xref>). The ESA is equivalent to the suffix tree, another very important, but more space consuming full-text index data structure (Gusfield, <xref ref-type="bibr" rid="B5">1997</xref>). The major advantages of ESAs over suffix trees are their lower space overhead, improved locality of reference and simple storing to files.</p>
    <p>A suffix array for text <italic>T</italic> of length <italic>n</italic> is a table of size <italic>n</italic> + 1 that lists the start positions of the suffixes of <italic>T</italic> in lexicographic order. Using a suffix array, exact string queries can be answered in <italic>O</italic>(<italic>m</italic> log<italic>n</italic>) time, where <italic>m</italic> is the length of the query, instead of <italic>O</italic>(<italic>m</italic>+<italic>n</italic>) time without a suffix array. ESAs are composed of a suffix array and additional tables that can be used to improve query performance [e.g. <italic>O</italic>(<italic>m</italic>+log<italic>n</italic>) time using the LCP table, called <italic>Hgt</italic> array in Manber and Myers (<xref ref-type="bibr" rid="B8">1993</xref>)], or enabling efficient implementation of more advanced queries (e.g. finding maximum unique matches). Thus, ESAs are fundamental technology in sequence analysis.</p>
    <p>Many interesting problems on sequences from the field of computational biology can be solved efficiently by transforming sequence data into (enhanced) suffix arrays [see, for instance, (Beckstette <italic>et al.</italic>, <xref ref-type="bibr" rid="B2">2006</xref>; De Bona <italic>et al.</italic>, <xref ref-type="bibr" rid="B3">2008</xref>; Höhl <italic>et al.</italic>, <xref ref-type="bibr" rid="B6">2002</xref>; Krumsiek <italic>et al.</italic>, <xref ref-type="bibr" rid="B7">2007</xref>; Rahmann, <xref ref-type="bibr" rid="B12">2003</xref>)]. Linear-time algorithms for suffix array construction have been proposed as well as algorithms that are fast in practice and/or tuned for space efficiency, rendering use of suffix arrays feasible for large datasets; see Puglisi <italic>et al.</italic> (<xref ref-type="bibr" rid="B11">2007</xref>) for a comprehensive overview. In addition, by the results of Abouelhoda <italic>et al.</italic> (<xref ref-type="bibr" rid="B1">2004</xref>), any program using suffix trees can be transformed so to employ ESAs instead and benefit from the advantages offered by that data structure.</p>
    <p>Despite the great interest in suffix arrays in the literature, only few actual programs for ESA construction are available. Most existing programs are useful for mere suffix array construction, and do not address specificities of computational biology such as handling multiple sequences and very large datasets. A notable exception is the widely used <italic>mkvtree</italic> program (<ext-link ext-link-type="uri" xlink:href="http://www.vmatch.de/">http://www.vmatch.de/</ext-link>). <italic>mkvtree</italic> can read common file formats such as FASTA and keeps sequences separated from their descriptions. An ESA generated by <italic>mkvtree</italic> may contain multiple sequences, stored so that a match can easily be mapped to its corresponding sequence. The program is available free of charge as part of the <italic>Vmatch</italic> package, but, unfortunately, in binary form and for non-commercial purposes only. This implies that software relying on <italic>mkvtree</italic> cannot be distributed easily since the terms of the <italic>Vmatch</italic> license agreement restrict the legal use of <italic>mkvtree</italic>. Software that requires using <italic>mkvtree</italic> also requires all users to obtain the <italic>Vmatch</italic> package, if available for their platform of choice, and have them sign a license agreement, too.</p>
    <p>We have implemented the alternative open source software tool <italic>mkESA</italic>, using the Deep-Shallow algorithm (Manzini and Ferragina, <xref ref-type="bibr" rid="B10">2004</xref>) for in-memory suffix array construction instead of multikey quicksort as used by <italic>mkvtree</italic>. Thus, <italic>mkESA</italic> is efficient even for highly repetitive sequence data, and is fast as long as all data can be held in main memory. As further improvement, our implementation of Deep-Shallow can use multiple CPUs for increased speed.</p>
  </sec>
  <sec id="SEC2">
    <title>2 IMPLEMENTATION</title>
    <p>With <italic>mkvtree</italic> being the most widely spread program for ESA construction, we tried to pick up all of the important ideas implemented in <italic>mkvtree</italic> and improve upon its weaknesses. <italic>mkESA</italic> has been designed so to produce output as compatible with <italic>mkvtree</italic> as possible. The files generated by <italic>mkESA</italic> are in fact the same as those made by <italic>mkvtree</italic>, meaning that data produced by <italic>mkESA</italic> can be processed by programs that expect <italic>mkvtree</italic>-generated ESAs.</p>
    <p><italic>mkESA</italic> employs the ‘Deep-Shallow’ algorithm of Manzini and Ferragina (<xref ref-type="bibr" rid="B10">2004</xref>) for suffix array construction. This algorithm belongs to the family of ‘lightweight’ suffix sorting algorithms, covering algorithms that use only very small additional space besides the suffix array and the input text, i.e. only <italic>O</italic>((5+ɛ)<italic>n</italic>) bytes space for a text of length <italic>n</italic>, and using 32 bit integers for the suffix array. Our version of Deep-Shallow is multithreaded, i.e. the computational work for suffix sorting can be distributed over multiple CPUs or CPU cores. Since Deep-Shallow is not useful for building LCP tables as by-product of suffix sorting (as is the case with simple multikey quicksort), we use the space-efficient, linear-time algorithm of Manzini (<xref ref-type="bibr" rid="B9">2004</xref>) to construct LCP tables from suffix arrays. Moreover, <italic>mkESA</italic> can generate the inverse suffix array and the skip table (Beckstette <italic>et al.</italic>, <xref ref-type="bibr" rid="B2">2006</xref>). It is worth noting that <italic>mkESA</italic> can incrementally add additional tables when they are needed.</p>
  </sec>
  <sec id="SEC3">
    <title>3 RUNTIME BENCHMARKS</title>
    <p>We compared the performance of <italic>mkESA</italic> with other programs for suffix array construction, namely <italic>mkvtree</italic>, <italic>mksary</italic> 1.2.0 (<ext-link ext-link-type="uri" xlink:href="http://sary.sourceforge.net/">http://sary.sourceforge.net/</ext-link>, included for its ability to run multithreaded), and Manzini's implementation of Deep-Shallow <italic>ds</italic>. We measured the time and space consumption for building suffix arrays from the datasets in <xref ref-type="table" rid="T1">Table 1</xref>, using <monospace>memtime</monospace> version 1.3. <italic>mkESA</italic> and <italic>mkvtree</italic> processed FASTA files, the other programs processed the bare sequence data with FASTA headers removed so that all programs had comparable workloads. Only ‘parallel <italic>mkESA</italic>’ and ‘parallel <italic>mksary</italic>’ (<xref ref-type="table" rid="T2">Table 2</xref>) made explicit use of multiple CPU cores. Measurements were taken on a Sun Fire X4450 (4 Intel Xeon CPUs at 2.93 GHz, 16 cores, 96 GB RAM) running Solaris 10. The programs were compiled with <italic>gcc</italic> 4.1.1 using flags <monospace>-m64 -O3 -fomit-frame-pointer</monospace>. Each experiment was repeated four times in a row; the best (shortest elapsed time) of the results are displayed in <xref ref-type="table" rid="T2">Table 2</xref>. Our results show comparable memory requirements for all tested programs, while <italic>mkESA</italic> is usually the fastest among them, even when using only one CPU.
<table-wrap id="T1" position="float"><label>Table 1.</label><caption><p>Datasets used for performance measurements</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1">Name</th><th rowspan="1" colspan="1">Description</th><th rowspan="1" colspan="1">Size</th><th rowspan="1" colspan="1">σ</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">chr1</td><td rowspan="1" colspan="1">Chromosome 1 human genome</td><td rowspan="1" colspan="1">219 (219) MB</td><td rowspan="1" colspan="1">4</td></tr><tr><td rowspan="1" colspan="1">fmdv</td><td rowspan="1" colspan="1">Foot/mouth disease virus genomes</td><td rowspan="1" colspan="1">65 (64) MB</td><td rowspan="1" colspan="1">4</td></tr><tr><td rowspan="1" colspan="1">spro</td><td rowspan="1" colspan="1">UniprotKB/Swiss-Prot rel. 56.4</td><td rowspan="1" colspan="1">181 (140) MB</td><td rowspan="1" colspan="1">20</td></tr><tr><td rowspan="1" colspan="1">trem</td><td rowspan="1" colspan="1">UniprotKB/TrEMBL rel. 39.4</td><td rowspan="1" colspan="1">2836 (2110) MB</td><td rowspan="1" colspan="1">20</td></tr><tr><td rowspan="1" colspan="1">f25</td><td rowspan="1" colspan="1">25th Fibonacci string</td><td rowspan="1" colspan="1">73 (73) kB</td><td rowspan="1" colspan="1">2</td></tr><tr><td rowspan="1" colspan="1">f30</td><td rowspan="1" colspan="1">30th Fibonacci string</td><td rowspan="1" colspan="1">813 (813) kB</td><td rowspan="1" colspan="1">2</td></tr></tbody></table><table-wrap-foot><fn><p>Sizes are given as file sizes, followed by sizes of files with FASTA headers removed in parentheses. Alphabet sizes are given as σ. We included Fibonacci strings since these are hard on many suffix tree and suffix array construction algorithms due to their high repetitiveness. They impose the worst case for the number of nodes in a suffix tree, 2<italic>n</italic>, and thus, e.g. trigger the worst case running time of <italic>O</italic>(<italic>n</italic><sup>2</sup>) of the WOTD suffix tree construction algorithm (Giegerich <italic>et al.</italic>, <xref ref-type="bibr" rid="B4">2003</xref>). Dataset ‘fmdv’ is a non-artificial example for highly repetitive sequence data, with similar impact on performance (<xref ref-type="table" rid="T2">Table 2</xref>).</p></fn></table-wrap-foot></table-wrap>
<table-wrap id="T2" position="float"><label>Table 2.</label><caption><p>Results of performance measurements</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1">Name</th><th colspan="2" rowspan="1"><italic>mkESA</italic><hr/></th><th colspan="2" rowspan="1">Parallel <italic>mkESA</italic><hr/></th><th colspan="2" rowspan="1"><italic>mkvtree</italic><hr/></th></tr><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">chr1</td><td rowspan="1" colspan="1">91 (2.6)</td><td rowspan="1" colspan="1">1085</td><td rowspan="1" colspan="1">66 (2.6)</td><td rowspan="1" colspan="1">1093</td><td rowspan="1" colspan="1">138 (2.2)</td><td rowspan="1" colspan="1">1148</td></tr><tr><td rowspan="1" colspan="1">fmdv</td><td rowspan="1" colspan="1">89 (0.9)</td><td rowspan="1" colspan="1">353</td><td rowspan="1" colspan="1">66 (0.9)</td><td rowspan="1" colspan="1">356</td><td rowspan="1" colspan="1">1797 (1.1)</td><td rowspan="1" colspan="1">338</td></tr><tr><td rowspan="1" colspan="1">spro</td><td rowspan="1" colspan="1">47 (1.9)</td><td rowspan="1" colspan="1">785</td><td rowspan="1" colspan="1">25 (1.9)</td><td rowspan="1" colspan="1">785</td><td rowspan="1" colspan="1">76 (2.2)</td><td rowspan="1" colspan="1">813</td></tr><tr><td rowspan="1" colspan="1">trem</td><td rowspan="1" colspan="1">2273 (545)</td><td rowspan="1" colspan="1">21 461</td><td rowspan="1" colspan="1">1500 (553)</td><td rowspan="1" colspan="1">21 462</td><td rowspan="1" colspan="1">2956 (530)</td><td rowspan="1" colspan="1">21 827</td></tr><tr><td rowspan="1" colspan="1">f25</td><td rowspan="1" colspan="1">0.1 (0.0)</td><td rowspan="1" colspan="1">0.1</td><td rowspan="1" colspan="1">0.1 (0.0)</td><td rowspan="1" colspan="1">0.1</td><td rowspan="1" colspan="1">7.3 (0.0)</td><td rowspan="1" colspan="1">1.4</td></tr><tr><td rowspan="1" colspan="1">f30</td><td rowspan="1" colspan="1">1.1 (0.0)</td><td rowspan="1" colspan="1">5.1</td><td rowspan="1" colspan="1">1.1 (0.0)</td><td rowspan="1" colspan="1">5.3</td><td rowspan="1" colspan="1">895 (0.0)</td><td rowspan="1" colspan="1">5.4</td></tr></tbody></table><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1">Name</th><th colspan="2" rowspan="1"><italic>mksary</italic><hr/></th><th colspan="2" rowspan="1">Parallel <italic>mksary</italic><hr/></th><th colspan="2" rowspan="1"><italic>ds</italic><hr/></th></tr><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th><th rowspan="1" colspan="1">sec</th><th rowspan="1" colspan="1">MB</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">chr1</td><td rowspan="1" colspan="1">224 (11)</td><td rowspan="1" colspan="1">1097</td><td rowspan="1" colspan="1">252 (28)</td><td rowspan="1" colspan="1">1097</td><td rowspan="1" colspan="1">102 (3.8)</td><td rowspan="1" colspan="1">1098</td></tr><tr><td rowspan="1" colspan="1">fmdv</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td rowspan="1" colspan="1">99 (1.2)</td><td rowspan="1" colspan="1">323</td></tr><tr><td rowspan="1" colspan="1">spro</td><td rowspan="1" colspan="1">161 (7.7)</td><td rowspan="1" colspan="1">705</td><td rowspan="1" colspan="1">115 (23)</td><td rowspan="1" colspan="1">707</td><td rowspan="1" colspan="1">63 (2.5)</td><td rowspan="1" colspan="1">705</td></tr><tr><td rowspan="1" colspan="1">f25</td><td rowspan="1" colspan="1">7.5 (0.0)</td><td rowspan="1" colspan="1">3.2</td><td rowspan="1" colspan="1">6.3 (0.0)</td><td rowspan="1" colspan="1">3.4</td><td rowspan="1" colspan="1">0.1 (0.0)</td><td rowspan="1" colspan="1">0.1</td></tr><tr><td rowspan="1" colspan="1">f30</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td align="center" rowspan="1" colspan="1">–</td><td rowspan="1" colspan="1">0.9 (0.0)</td><td rowspan="1" colspan="1">5.1</td></tr></tbody></table><table-wrap-foot><fn><p>The ‘sec’ columns show the total time consumed in seconds (wall time clock), followed by the time attributed to operating system activities in parentheses. The ‘MB’ columns show main memory consumption in megabytes [resident set size (RSS)]. Parallel versions were allowed to use up to 16 threads. Some programs crashed for various datasets, in which cases results are not shown. For the same reason there is no row for ‘trem’ in the lower part. All values were rounded for readability.</p></fn></table-wrap-foot></table-wrap>
</p>
  </sec>
  <sec sec-type="conclusions" id="SEC4">
    <title>4 CONCLUSION</title>
    <p>We presented <italic>mkESA</italic>, a portable, lightweight, multithreaded and fast program for constructing enhanced suffix arrays. We carefully tested the software on a variety of UNIX-like operating systems and hardware architectures, including recent versions of Linux, Solaris, Mac OS X, FreeBSD, OpenBSD and NetBSD. Its ability to generate output compatible with <italic>mkvtree</italic> makes <italic>mkESA</italic> a convenient open source drop-in replacement for earlier programs.</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
</body>
<back>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Abouelhoda</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Replacing suffix trees with enhanced suffix arrays</article-title>
        <source>J. Discrete Algorithms</source>
        <year>2004</year>
        <volume>2</volume>
        <fpage>53</fpage>
        <lpage>86</lpage>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Beckstette</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Fast index based algorithms and software for matching position specific scoring matrices</article-title>
        <source>BMC Bioinformatics</source>
        <year>2006</year>
        <volume>7</volume>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>De Bona</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Optimal spliced alignments of short sequence reads</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>i174</fpage>
        <lpage>i180</lpage>
        <pub-id pub-id-type="pmid">18689821</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Efficient implementation of lazy suffix trees</article-title>
        <source>Softw. Pract. Exp.</source>
        <year>2003</year>
        <volume>33</volume>
        <fpage>1035</fpage>
        <lpage>1049</lpage>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gusfield</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <source>Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology.</source>
        <year>1997</year>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <publisher-name>Cambridge University Press</publisher-name>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Höhl</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Efficient multiple genome alignment</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>S312</fpage>
        <lpage>S320</lpage>
        <pub-id pub-id-type="pmid">12169561</pub-id>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krumsiek</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Gepard: a rapid and sensitive tool for creating dotplots on genome scale</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <pub-id pub-id-type="pmid">17309896</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Manber</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Suffix Arrays: a new method for on-line string searches</article-title>
        <source>SIAM J. Comput.</source>
        <year>1993</year>
        <volume>22</volume>
        <fpage>935</fpage>
        <lpage>948</lpage>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Manzini</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Hagerup</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Katajainen</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Two space saving tricks for linear time LCP array computation</article-title>
        <source>Proceedings of 9th Scandinavian Workshop on Algorithm Theory (SWAT '04)</source>
        <year>2004</year>
        <volume>3111</volume>
        <publisher-loc>Berlin, Germany</publisher-loc>
        <publisher-name>Springer-Verlag</publisher-name>
        <fpage>372</fpage>
        <lpage>383</lpage>
        <comment>of <italic>Lecture Notes in Computer Science</italic></comment>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Manzini</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Ferragina</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Engineering a lightweight suffix array construction algorithm</article-title>
        <source>Algorithmica</source>
        <year>2004</year>
        <volume>40</volume>
        <fpage>33</fpage>
        <lpage>50</lpage>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Puglisi</surname>
            <given-names>SJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A taxonomy of suffix array construction algorithms</article-title>
        <source>ACM Comput. Surv.</source>
        <year>2007</year>
        <volume>39</volume>
        <fpage>4</fpage>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Fast large scale oligonucleotide selection using the longest common factor approach</article-title>
        <source>J. Bioinform. Comput. Biol.</source>
        <year>2003</year>
        <volume>1</volume>
        <fpage>343</fpage>
        <lpage>361</lpage>
        <pub-id pub-id-type="pmid">15290776</pub-id>
      </citation>
    </ref>
  </ref-list>
</back>
