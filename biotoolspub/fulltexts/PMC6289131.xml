<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6289131</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/bty443</article-id>
    <article-id pub-id-type="publisher-id">bty443</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genetics and Population Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Comparing complex variants in family trios</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Toptaş</surname>
          <given-names>Berke Ç</given-names>
        </name>
        <xref ref-type="aff" rid="bty443-aff1">1</xref>
        <xref ref-type="aff" rid="bty443-aff2">2</xref>
        <xref ref-type="corresp" rid="bty443-cor1"/>
        <!--<email>cagkantoptas@gmail.com</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Rakocevic</surname>
          <given-names>Goran</given-names>
        </name>
        <xref ref-type="aff" rid="bty443-aff1">1</xref>
        <xref ref-type="aff" rid="bty443-aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kómár</surname>
          <given-names>Péter</given-names>
        </name>
        <xref ref-type="aff" rid="bty443-aff1">1</xref>
        <xref ref-type="aff" rid="bty443-aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kural</surname>
          <given-names>Deniz</given-names>
        </name>
        <xref ref-type="aff" rid="bty443-aff1">1</xref>
        <xref ref-type="aff" rid="bty443-aff2">2</xref>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Stegle</surname>
          <given-names>Oliver</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="bty443-aff1"><label>1</label>R&amp;D Seven Bridges Genomics, Cambridge, MA, USA</aff>
    <aff id="bty443-aff2"><label>2</label>R&amp;D Totient, Cambridge, MA, USA</aff>
    <author-notes>
      <corresp id="bty443-cor1">To whom correspondence should be addressed. E-mail: <email>cagkantoptas@gmail.com</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>15</day>
      <month>12</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2018-06-01">
      <day>01</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>01</day>
      <month>6</month>
      <year>2018</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>34</volume>
    <issue>24</issue>
    <fpage>4241</fpage>
    <lpage>4247</lpage>
    <history>
      <date date-type="received">
        <day>1</day>
        <month>2</month>
        <year>2018</year>
      </date>
      <date date-type="rev-recd">
        <day>3</day>
        <month>5</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>29</day>
        <month>5</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="bty443.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Several tools exist to count Mendelian violations in family trios by comparing variants at the same genomic positions. This naive variant comparison, however, fails to assess regions where multiple variants need to be examined together, resulting in reduced accuracy of existing Mendelian violation checking tools.</p>
      </sec>
      <sec id="s4">
        <title>Results</title>
        <p>We introduce VBT, a trio concordance analysis tool, which identifies Mendelian violations by approximately solving the 3-way variant matching problem to resolve variant representation differences in family trios. We show that VBT outperforms previous trio comparison methods by accuracy.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>VBT is implemented in C++ and source code is available under GNU GPLv3 license at the following URL: <ext-link ext-link-type="uri" xlink:href="https://github.com/sbg/VBT-TrioAnalysis.git">https://github.com/sbg/VBT-TrioAnalysis.git</ext-link>.</p>
      </sec>
      <sec id="s3">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">UK Department of Health</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">SBRI Genomics Competition: Enabling Technologies for Genomic Sequence Data Analysis and Interpretation</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Genomics England</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="7"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Recent technological advancements enabled a rapid progress in our understanding and characterization of the human genome, assessment of the scale and extent of genomic variation present in human genome (The 1000 <xref rid="bty443-B1" ref-type="bibr">Genome Project Consortium <italic>et al.</italic>, 2015</xref>) as well as creation of a vast body of knowledge related to the functioning of human body and rare diseases (<xref rid="bty443-B10" ref-type="bibr">Jamuar and Tan, 2015</xref>). Pedigree-based genetics plays a crucial role in uncovering the genetic origins of diseases, where family trios are analyzed, and genomic variants that disagree with Mendel’s law of segregation are identified.</p>
    <p>A particularly important use case of trio analysis is the identification of de novo mutations which have repeatedly been implicated in rare and complex diseases (<xref rid="bty443-B5" ref-type="bibr">Deciphering Developmental Disorders Study, 2017</xref>; <xref rid="bty443-B9" ref-type="bibr">Hidalgo <italic>et al.</italic>, 2016</xref>). De novo mutations occur with relatively low frequencies (1.2 × 10<sup>−8</sup>) (<xref rid="bty443-B3" ref-type="bibr">Conrad <italic>et al.</italic>, 2011</xref>; <xref rid="bty443-B11" ref-type="bibr">Kong <italic>et al.</italic>, 2012</xref>) compared with the typical amount of variants a person has. Therefore, accurate strategies are essential for identification of such variants which typically starts with assessing Mendelian Inheritance rules of the calls from family trios followed by using sophisticated statistical models [DeNovoGear (<xref rid="bty443-B20" ref-type="bibr">Ramu <italic>et al.</italic>, 2013</xref>), PhaseByTransmission (<xref rid="bty443-B7" ref-type="bibr">Francioli <italic>et al.</italic>, 2017</xref>), TrioDeNovo (<xref rid="bty443-B25" ref-type="bibr">Wei et al., 2015</xref>)].</p>
    <p>Such trio analysis can also be used for truth-free benchmarking of variant calling pipelines (<xref rid="bty443-B6" ref-type="bibr">Douglas <italic>et al.</italic>, 2002</xref>; <xref rid="bty443-B12" ref-type="bibr">Komar and Deniz 2017</xref>, <xref rid="bty443-B12" ref-type="bibr">2017</xref>; <xref rid="bty443-B17" ref-type="bibr">Nutsua <italic>et al.</italic>, 2015</xref>; <xref rid="bty443-B18" ref-type="bibr">Pilipenko <italic>et al.</italic>, 2014</xref>). In many cases, Mendelian violations are considered as sequencing/variant calling errors due to the low mutation rate. Trio concordance analysis is useful where no truth-set exists and allows using variants from all regions of the genome as opposed to current whole genome truth-sets which are limited to a set of high confidence regions in a few samples, excluding many regions of the genome (<xref rid="bty443-B26" ref-type="bibr">Zook <italic>et al.</italic>, 2014</xref>). Improved truth-free benchmarking will also guide the development of future genome analysis pipelines such as graph genome pipeline (<xref rid="bty443-B19" ref-type="bibr">Rakocevic <italic>et al.</italic>, 2017</xref>).</p>
    <p>Several tools exist (RTG-mendelian, GATK-SelectVariants, Vcftools-mendel) that count Mendelian violations using naive locus-by-locus variant comparison. In this approach, each record in the merged trio vcf is processed independently, and only variants with coinciding reference positions are analyzed together. This method fails to provide an accurate analysis in cases where multiple records are affecting the same locus.</p>
    <p>Here we address a problem during the identification of Mendelian violations in the data from a family trio, one which arises from varying variant representations. Regions with several overlapping variants often have a number of different ways in which they can be represented, all of which conform to the widely accepted VCF standard (<xref rid="bty443-B4" ref-type="bibr">Danecek <italic>et al.</italic>, 2011</xref>); the same is true for most variants which are complex in nature, and even some simple indels (<xref ref-type="fig" rid="bty443-F1">Fig. 1</xref>a). The choice of which of the possible representations is produced often depends on the variant context (other nearby variants) and the set of sequencing reads used to identify the variant. If this choice happens to be different between different members of the pedigree, comparing the three sets of calls position by position will result in detection of Mendelian violations, even though the underlying haplotypes are Mendelian compliant (<xref ref-type="fig" rid="bty443-F1">Fig. 1</xref>b).</p>
    <fig id="bty443-F1" orientation="portrait" position="float">
      <label>Fig. 1.</label>
      <caption>
        <p>(<bold>a</bold>) Representation difference in indels. The variant in position 103 is represented as a single indel in first vcf and 2 indels + 1 SNP in the second vcf. After they are applied on the reference sequence, it is seen that they are equivalent. (<bold>b</bold>) A toy example of variant representation difference in family trios. Naive trio comparison tools mark all four records as a Mendelian violation. However, a consistent combination can be found if they are processed together</p>
      </caption>
      <graphic xlink:href="bty443f1"/>
    </fig>
    <p>Problems related to variant representation has been recognized in the context of benchmarking NGS data processing methods, and numerous approaches have been developed for comparing two sets of results for a single sample [SMaSH (<xref rid="bty443-B23" ref-type="bibr">Talwalkar <italic>et al.</italic>, 2014</xref>), Vcfeval (<xref rid="bty443-B2" ref-type="bibr">Cleary <italic>et al.</italic>, 2015</xref>), VarMatch (<xref rid="bty443-B22" ref-type="bibr">Sun and Medvedev, 2016</xref>)]. However, none of these tools are capable of resolving the issue with data from a family trio.</p>
    <p>One way to unify variant representations across a family trio is to use a joint variant caller such as GATK GenotypeGVCFs. This tool aggregates variants of multiple samples by combining overlapping trio records and re-genotyping them. Although joint calling resolves many representation issues, it is still unable to merge complex overlapping indels affecting the same site. This method also requires GATK (<xref rid="bty443-B16" ref-type="bibr">McKenna <italic>et al.</italic>, 2010</xref>) HaplotypeCaller as variant caller which eliminates the benchmarking purpose of trio analysis.</p>
    <p>In this paper, we present VBT, a Mendelian violation detection tool that uses an advanced variant comparison to deal with ambiguities arising from different variant representations. VBT extends the variant comparison algorithm of vcfeval (<xref rid="bty443-B2" ref-type="bibr">Cleary <italic>et al.</italic>, 2015</xref>) for trio concordance analysis. We show that VBT outperforms all previous trio comparison methods regarding the accuracy of detecting Mendelian violations.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <sec>
      <title>2.1 Pairwise variant comparison and extension for Mendelian violation identification</title>
      <p>The pairwise comparison algorithm of vcfeval eliminates variant representation differences in VCFs by applying variants back to the reference sequence. For each of baseline (gold standard) and called (test) diploid variant sets (we refer variants as diploid single-sample VCF entities which have two alleles), two haplotype sequence (i.e. Haplotype A and Haplotype B) are formed by applying alleles of variants to the reference sequence in such a way that, haplotype A(B) of baseline set becomes identical to haplotype A(B) of called set. Many ways of forming such haplotype sequences are possible using different subsets of baseline and called variants and using different phasings. Vcfeval aims to identify the largest baseline and called variant subset out of possible combinations that satisfy the equality condition.</p>
      <p>For a diploid variant set V from a single sample VCF, we define a phasing vector, P<sub>V</sub> = {p<sub>1</sub>, p<sub>2</sub>, .. p<sub>|V|</sub>} ∈ {1, 2}<sup>|V|</sup>, where the <italic>i</italic>th value (1 or 2) indicates whether the first or second allele (<xref ref-type="fig" rid="bty443-F1">Fig. 1</xref>b) of the <italic>i</italic>th variant is selected for the maternal haplotype. Similarly P<sub>V’</sub> denotes the opposite phasing vector {3-p<sub>1</sub>, 3-p<sub>2</sub>, .., 3-p<sub>|V|</sub>}, which indicates the alleles on the paternal haplotype, not selected by P<sub>V</sub>. A haplotype function h(V, P<sub>V</sub>) is defined (<xref rid="bty443-B2" ref-type="bibr">Cleary <italic>et al.</italic>, 2015</xref>) to produce the haplotype sequence (i.e. outputs a single string) obtained by applying all variants of V to the reference sequence using the P<sub>V</sub> phasing vector. vcfeval defines the variant matching problem as finding the optimal sets of variants X<sup>opt</sup>, Y<sup>opt</sup>, and their corresponding phasing vectors P<sub>X</sub><sup>opt</sup>, P<sub>Y</sub><sup>opt</sup>, that solves the following optimization problem:
<disp-formula id="bty443-M1"><label>(1)</label><mml:math id="M1"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext> arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:msup><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mtext> I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mtext>X</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>                         X</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>B</mml:mtext><mml:mo>,</mml:mo><mml:mtext> Y</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>C</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>X</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Y</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where B and C denote baseline and called variant sets, and X<sup>opt</sup> and Y<sup>opt</sup> are the sets of variants which maximize the number of matching variants in baseline and called variant set. I[seq1, seq2] is the indicator function that performs a simple string comparison operation which outputs 1 if seq1 = seq2, and 0 otherwise.</p>
      <p>For VBT, we aim to extend this definition for family trios to detect Mendelian violations. Instead of baseline and called variant sets, we use mother, father and child variant sets denoted by M, F and C, respectively. We define the trio matching problem as finding the optimal sets X<sup>opt</sup>, Y<sup>opt</sup>, Z<sup>opt</sup> and their corresponding phasing vectors P<sub>X</sub><sup>opt</sup>, P<sub>Y</sub><sup>opt</sup>, P<sub>Z</sub><sup>opt</sup> that solve the following optimization problem:
<disp-formula id="bty443-M2"><label>(2)</label><mml:math id="M2"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mtext> Y</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mtext> Z</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext>arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mtext> I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:mtext> X</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>M</mml:mtext><mml:mo>,</mml:mo><mml:mtext> Y</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>F</mml:mtext><mml:mo>,</mml:mo><mml:mtext> Z</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>C</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext> </mml:mtext><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>X</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Y</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p>By following the Mendelian Inheritance rules, <xref ref-type="disp-formula" rid="bty443-M2">Eq. (2)</xref> seeks for the optimum mother, father and child variant sets where the maternal haplotype sequence of the child sample is identical to one of two mother haplotype sequences, and paternal haplotype sequence of the child sample is identical to one of two father haplotype sequences. X<sup>opt</sup>, Y<sup>opt</sup> and Z<sup>opt</sup> denote the set of Mendelian-consistent variants in the mother, father and child samples, and the remaining variants M\X<sup>opt</sup>, F\Y<sup>opt</sup> and C\Z<sup>opt</sup> are marked as Mendelian violations. VBT uses a heuristic that approximates <xref ref-type="disp-formula" rid="bty443-M2">Eq. (2)</xref> described in the following section.</p>
    </sec>
    <sec>
      <title>2.2 Separate haplotype sequence construction and Same Allele Match Elimination</title>
      <p>An alternative approach of identifying Mendelian violations in trio data is constructing maternal and paternal haplotype sequences of the child sample separately. To construct the maternal sequence of the child sample, we can search for the optimum mother and child variant sets which share a single allele rather than two. Similarly, we can construct the paternal sequence using the shared-allele father and child variant sets. Then we can take the intersection of the child variants from mother–child and father–child shared allele searching. Since all of the variants in the intersection child variant set share one allele each with parent samples, we can assess these child variants as Mendelian consistent and the remaining child variants as Mendelian violations.</p>
      <p>One problem with the separate haplotype sequence construction is, we need to guarantee that the child’s haplotypes use opposite phases P<sub>Z</sub> and P<sub>Z</sub><sub>′</sub>. For heterozygous child variants, if one of the two alleles is not present in either the mother–child or the father–child sequences, they should be reported as a Mendelian violation. For instance, if the alleles of mother is A/A, father is C/A and child is A/G for a multi-allelic SNP variant at the same position, then the child’s variant matches with both parents’ variants with allele A. On the other hand, Allele G of child is not present in any of the parents. Although pairwise comparisons with both parents indicate one matching allele of the child, this locus is a Mendelian violation because the same phase is used for both matches. In most cases, we can indeed mark it as such. We call this condition <italic>same allele matching.</italic></p>
      <p>One point, one need to be careful about during elimination of same allele matching condition is that, in a family trio, child variants often match to parent variants with both of their alleles. For these child variants, any of the two alleles can be present in the final haplotype sequence. For example, if the alleles of mother is A/T, father is C/T and child is A/T for a variant, both ‘A’ and ‘T’ can be selected as a shared allele between mother and child, however, if the ‘T’ allele is selected, then same allele matching condition occurs whereas selecting ‘A’ as the shared allele resolves the problem. During haplotype construction, the allele selection of the child variant between parent samples is unknown. Therefore, in cases where both alleles of the parent and child are matching, the allele is chosen arbitrarily. To identify which parent variants are sharing both alleles with child variants and eliminate the wrong phasing selection, we applied 2-stage variant comparison where we start searching for shared genotypes [i.e. <xref ref-type="disp-formula" rid="bty443-M1">Eq. (1)</xref>] between parent and child followed by shared allele searching. We write the equations of shared genotype searching stage as:
<disp-formula id="bty443-M3"><label>(3)</label><mml:math id="M3"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext> arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>Z1</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Z1</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mtext> I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:malignmark/><mml:mtext>  X</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>M</mml:mtext><mml:mo>,</mml:mo><mml:mtext> Z</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>C</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:msub><mml:mrow><mml:mtext>  P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>X</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula><disp-formula id="bty443-M4"><label>(4)</label><mml:math id="M4"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext> arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>Z2</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Z2</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mtext> I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext><mml:mo>′</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:malignmark/><mml:mtext>  Y</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>F</mml:mtext><mml:mo>,</mml:mo><mml:mtext> Z</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>C</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>  </mml:mtext><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Y</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Z</mml:mtext></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mtext>Z</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:msup></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where Z1<sup>opt</sup> and Z2<sup>opt</sup> are child variants sharing both alleles with mother and father variants respectively. From the remaining variants M\X<sup>opt</sup> (=: MM), F\Y<sup>opt</sup> (=: FF), C\Z1<sup>opt</sup> (=: CC1) and C\Z2<sup>opt</sup> (=: CC2); we obtain all child variants sharing a single allele by maximizing the number of variants in constructing a single haplotype sequence, ignoring the alternative phases of variant sets:
<disp-formula id="bty443-M5"><label>(5)</label><mml:math id="M5"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext> arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>XX</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>ZZ1</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mtext>   XX</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>MM</mml:mtext><mml:mo>,</mml:mo><mml:mtext> ZZ1</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>CC1</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>          </mml:mtext><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula><disp-formula id="bty443-M6"><label>(6)</label><mml:math id="M6"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mo>=</mml:mo><mml:mtext> arg max I</mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mtext>h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>YY</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mtext> h</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>ZZ2</mml:mtext><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mtext> </mml:mtext><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:msup><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:malignmark/><mml:mtext>  YY</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>FF</mml:mtext><mml:mo>,</mml:mo><mml:mtext> ZZ2</mml:mtext><mml:mo>⊆</mml:mo><mml:mtext>CC2</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>         </mml:mtext><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow></mml:mrow></mml:msub></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where, during maximization, P<sub>XX</sub>, P<sub>YY</sub>, P<sub>ZZ1</sub> and P<sub>ZZ2</sub> are required to be such that the reference allele (‘0’) is never used in any comparison. I.e. if a variant has the genotype 1|0, the corresponding phasing is not allowed to take the value 2, because that would correspond to the ‘0’ allele.</p>
      <p>The reason for not allowing the reference allele to be used in <xref ref-type="disp-formula" rid="bty443-M5">Eqs. (5)</xref> and <xref ref-type="disp-formula" rid="bty443-M6">(6)</xref> is the ambiguity caused by the equal representation of excluded variant and included reference allele. If we allow reference alleles in the haplotype function for <xref ref-type="disp-formula" rid="bty443-M5">Eqs. (5)</xref> and <xref ref-type="disp-formula" rid="bty443-M6">(6)</xref>, child variants having reference phasing would always be included regardless of the corresponding parent variant. For example, if genotype of the mother is 0/2, father is 2/2 and child is 0/1 for a variant call, mother and child variants would be included in mother–child side because they share ‘0’ allele. In father–child side, there is no shared allele, but once the father variant is excluded, that position becomes reference and child variant alone could be included with ‘0’ allele. In the end, child variant would be present on both mother and father final haplotypes and would be marked as Mendelian consistent, while it is a violation in reality. With the above restriction on the phasing vectors, we eliminate this mistake.</p>
      <p>We solve the maximization problem given in <xref ref-type="disp-formula" rid="bty443-M3">Eqs. (3)</xref>,<xref ref-type="disp-formula" rid="bty443-M4"> (4)</xref>, <xref ref-type="disp-formula" rid="bty443-M5">(5)</xref> and <xref ref-type="disp-formula" rid="bty443-M6">(6)</xref> using dynamic programming solution of <xref rid="bty443-B2" ref-type="bibr">Cleary <italic>et al.</italic>, (2015)</xref> where haplotype sequences of samples are procedurally generated, and the total combination count is kept small using clever dynamic pruning methods. We also introduce a small change to the algorithm to improve reference overlapping variant comparison which is described in the <xref ref-type="supplementary-material" rid="sup1">Supplementary Text, Section 2</xref>.</p>
      <p>Using <xref ref-type="disp-formula" rid="bty443-M3">Eqs. (3)</xref>,<xref ref-type="disp-formula" rid="bty443-M4"> (4)</xref>, <xref ref-type="disp-formula" rid="bty443-M5">(5)</xref> and <xref ref-type="disp-formula" rid="bty443-M6">(6)</xref>, we construct the VBT pipeline as shown in <xref ref-type="fig" rid="bty443-F2">Figure 2</xref> to obtain our four child variant sets Z1<sup>opt</sup>, Z2<sup>opt</sup>, ZZ1<sup>opt</sup>, ZZ2<sup>opt</sup> with their phasing information P<sub>Z1</sub><sup>opt</sup>, P<sub>Z2</sub><sup>opt</sup>, P<sub>ZZ1</sub><sup>opt</sup>, P<sub>ZZ2</sub><sup>opt</sup>. Using these 4 variant set, we identify Mendelian consistent and violation child variants with the accurate checking of same allele matching condition with Algorithm 1:</p>
      <p>
        <boxed-text id="bty443-BOX1" position="float" orientation="portrait">
          <sec>
            <title>Algorithm 1 Same Allele Match Elimination</title>
            <p><bold>procedure</bold> GETVIOLATIONS</p>
            <p><bold>Input:</bold> Z1<sup>opt</sup>, P<sub>Z1</sub><sup>opt</sup>, Z2<sup>opt</sup>, P<sub>Z2</sub><sup>opt</sup>, ZZ1<sup>opt</sup>, P<sub>ZZ1</sub><sup>opt</sup>, ZZ2<sup>opt</sup>, P<sub>ZZ2</sub><sup>opt</sup></p>
            <p><bold>Output:</bold><italic>ConsistentChildList</italic>, <italic>ViolationChildList</italic></p>
            <p>1 CVars_MC = Z1<sup>opt</sup> ∪ <monospace>ZZ1</monospace><sup>opt</sup>, CVars_FC = Z2<sup>opt</sup> ∪ <monospace>ZZ2</monospace><sup>opt</sup></p>
            <p>2 CPhases_MC = P<sub>Z1</sub><sup>opt</sup> ∪ <monospace>P</monospace><sub>ZZ1</sub><sup>opt</sup>, CPhases_FC = P<sub>Z2</sub><sup>opt</sup> ∪ <monospace>P</monospace><sub>ZZ2</sub><sup>opt</sup></p>
            <p>3 SortByIndex(CVars_MC, CPhases_MC)</p>
            <p>4 SortByIndex(CVars_FC, CPhases_FC)</p>
            <p>5 <bold>FOR</bold> varM in CVars_MC, phaseM in CPhases_MC,</p>
            <p>   varF in CVars_FC, phaseF in CPhases_FC</p>
            <p>6    <bold>IF</bold> varM.Index = varF.Index</p>
            <p>7     <bold>IF</bold> IsHomozygous(varM)</p>
            <p>8       <bold>ADD</bold> varM to <italic>ConsistentChildList</italic></p>
            <p>9     <bold>ELSE IF</bold><monospace>phaseM ≠ phaseF</monospace></p>
            <p>10      <bold>ADD</bold> varM to <italic>ConsistentChildList</italic></p>
            <p>11    <bold>ELSE IF</bold><monospace>varM ∈ Z1</monospace><bold>OR</bold><monospace>varF ∈ Z2</monospace></p>
            <p>12      <bold>ADD</bold> varM to <italic>ConsistentChildList</italic></p>
            <p>13    <bold>ELSE</bold></p>
            <p>14      <bold>ADD</bold> varM to <italic>ViolationChildList</italic></p>
            <p>15    <bold>ENDIF</bold></p>
            <p>16    next(varM), next(varF), next(phaseM), next(phaseF)</p>
            <p>17  <bold>ELSE IF</bold> varM.Index &lt; varF.Index</p>
            <p>18     <bold>ADD</bold> varM to <italic>ViolationChildList</italic></p>
            <p>19     next(varM), next(phaseM)</p>
            <p>20   <bold>ELSE</bold></p>
            <p>21     <bold>ADD</bold> varF to <italic>ViolationChildList</italic></p>
            <p>22     next(varF), next(phaseF)</p>
            <p>23   <bold>ENDIF</bold></p>
            <p>24 <bold>ENDFOR</bold></p>
          </sec>
        </boxed-text>
      </p>
      <fig id="bty443-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>VBT pipeline using vcfeval best path algorithm and GA4GH benchmarking standard methods (<xref rid="bty443-B13" ref-type="bibr">Krusche <italic>et al.</italic>, 2018</xref>). Included variants are present in the best common path between parent and child while excluded variants are eliminated from that path</p>
        </caption>
        <graphic xlink:href="bty443f2"/>
      </fig>
      <p>In Algorithm 1, in order to identify child variants that share an allele with both parents, we first merge the shared genotype and shared allele child variant sets by keeping the information of belonging sets for each variant at lines (1) and (2) of the pseudocode. Then we sort the merged child variant sets by variant indexes (order in VCF) at lines (3) and (4). At line (7), we check the condition where child variant is homozygous and same allele matching condition is ignored since both phasings can be used for child variant to break the same allele matching condition. At line (9), we check whether heterozygous child variants match with parents with different phasings. At line (11), we check if child variant matches to parent with both alleles so that alternative phasing can also be used to avoid same allele matching condition. We use <italic>next</italic> command to iterate to the following variant/phase at the line (16), (19) and (22). In the end, we obtain the list of Mendelian violations and consistent child variants for the input sets Z1<sup>opt</sup>, Z2<sup>opt</sup>, ZZ1<sup>opt</sup> and ZZ2<sup>opt</sup>.</p>
      <p>In <xref ref-type="disp-formula" rid="bty443-M5">Eqs. (5)</xref> and <xref ref-type="disp-formula" rid="bty443-M6">(6)</xref>, reference alleles of child variants are ignored during maximization calculation. As a result, child variants that are matching one parent with non-reference allele and the other parent with reference allele are marked as Mendelian violation after processing variants with Algorithm 1. To identify and correct the decision of these child variants, we use the following equations:
<disp-formula id="bty443-M7"><label>(7)</label><mml:math id="M7"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msub><mml:mrow><mml:mtext>K</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>MOTHER</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:malignmark/><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mtext>r</mml:mtext><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mtext>Z2</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msup><mml:mrow><mml:mtext>ZZ2</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> A</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext>a</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>REF</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:mo>∨</mml:mo><mml:msub><mml:mrow><mml:mtext>A</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mn>2</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext>a</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>REF</mml:mtext><mml:mo>:</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>h</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msup><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>X</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>XX</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mtext>s</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mo>.</mml:mo><mml:msub><mml:mrow><mml:mtext>e</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>f</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mtext>s</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mo>.</mml:mo><mml:msub><mml:mrow><mml:mtext>e</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>}</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula><disp-formula id="bty443-M8"><label>(8)</label><mml:math id="M8"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:maligngroup/><mml:msub><mml:mrow><mml:mtext>K</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>FATHER</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:malignmark/><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mtext>r</mml:mtext><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mtext>Z1</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msup><mml:mrow><mml:mtext>ZZ1</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> A</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext>a</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>REF</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:mo>∨</mml:mo><mml:msub><mml:mrow><mml:mtext>A</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mn>2</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext>a</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>REF</mml:mtext></mml:mrow><mml:mo>:</mml:mo></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mtext>h</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msup><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mtext> P</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Y</mml:mtext></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo>∪</mml:mo><mml:msub><mml:mrow><mml:mtext>P</mml:mtext></mml:mrow><mml:mrow><mml:mrow><mml:mtext>YY</mml:mtext></mml:mrow></mml:mrow></mml:msub><mml:msup><mml:mrow/><mml:mrow><mml:mrow><mml:mtext>opt</mml:mtext></mml:mrow></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mtext>s</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mo>.</mml:mo><mml:msub><mml:mrow><mml:mtext>e</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>R</mml:mi><mml:mi>e</mml:mi><mml:mi>f</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mtext>s</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub><mml:mo>.</mml:mo><mml:msub><mml:mrow><mml:mtext>e</mml:mtext></mml:mrow><mml:mrow><mml:mtext>r</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>}</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where s<sub>r</sub> and e<sub>r</sub> denote the start and end position of variant r and <italic>Ref</italic> denotes the reference sequence string. Indexing of the haplotype sequence is inherited from the reference sequence. A<sub>r</sub>(k) is the allele function that represents the allele of variant r with the phase selection of k ∈ {1, 2} and a<sub>REF</sub> is the reference allele of a variant. K<sub>MOTHER</sub> and K<sub>FATHER</sub> are the sets of consistent child variants that share a reference allele with Mother and Father variants, respectively, and they are inserted into the set of consistent variants. The remaining unprocessed child variants (i.e. C\(Z1<sup>opt</sup> ∪ Z2<sup>opt</sup> ∪ ZZ1<sup>opt</sup> ∪ ZZ2<sup>opt</sup>)) are inserted into the set of violations.</p>
      <p>Once we obtain decisions of all child variants, we merge mother, father and child VCF as a trio by merging variants at the same position. Then, we apply three post-processing steps on the merged VCF:
<list list-type="order"><list-item><p>Assign Mendelian decision to sites where the child has no variant (i.e. homozygous ref child variants in the merged trio). For each hom-ref child variant, final haplotype sequences of both mother and father are checked. If none of the parent haplotype sequences is equal to reference at the child variant’s location, then the variant is marked as a violation.</p></list-item><list-item><p>Consolidate the decision for variants affecting the same position in the final haplotype sequence. Consistent VCF record decisions are changed to a violation if there is at least one overlapping violation VCF record.</p></list-item><list-item><p>Exclude sites where <italic>nocall</italic> is reported by at least one family member. <italic>Nocall</italic> variants are sites where insufficient information is available to determine genotypes, and they are usually represented as ‘./.’ at genotype (GT) column of VCF records.</p></list-item></list></p>
    </sec>
    <sec>
      <title>2.3 Violation metrics</title>
      <p>With naive line-by-line violation identification, a VCF entity is considered as a Mendelian violation if the genotypes of the mother, father and child variant call are inconsistent according to the Mendelian inheritance rules. After we extend the Mendelian identification from single entity comparison to multiple entities, the ambiguity of proper violation identification metrics arises.</p>
      <p>In VBT, we use two different metrics to identify violations. The first method is identifying violations based on single entities which are similar to the naive approach. The difference is that, when multiple VCF records are affecting the same site, we unify their Mendelian decisions. For example, if child sample has a hom-alt deletion and parent samples have heterozygous SNPs in the range of deletion, naive method marks the hom-alt child deletion only as violation, whereas VBT marks all variants resides in the deletion site as violations.</p>
      <p>In addition to the entity based violation identification, VBT also reports region based violations. In entity based evaluation, if a site has a Mendelian violation, all VCF entities reside in that site are counted as violations.
<table-wrap id="INLIT1" orientation="portrait" position="float"><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1">Chr</th><th rowspan="1" colspan="1">Pos</th><th align="left" rowspan="1" colspan="1">Ref</th><th align="left" rowspan="1" colspan="1">Alt</th><th rowspan="1" colspan="1">Format</th><th rowspan="1" colspan="1">Mother</th><th rowspan="1" colspan="1">Father</th><th rowspan="1" colspan="1">Child</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">GATAC</td><td rowspan="1" colspan="1">G, GA</td><td rowspan="1" colspan="1">GT</td><td rowspan="1" colspan="1">0/2</td><td rowspan="1" colspan="1">0/0</td><td rowspan="1" colspan="1">0/1</td></tr><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">102</td><td rowspan="1" colspan="1">TAC</td><td rowspan="1" colspan="1">T</td><td rowspan="1" colspan="1">GT</td><td rowspan="1" colspan="1">0/0</td><td rowspan="1" colspan="1">0/0</td><td rowspan="1" colspan="1">0/1</td></tr><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">103</td><td rowspan="1" colspan="1">A</td><td rowspan="1" colspan="1">C</td><td rowspan="1" colspan="1">GT</td><td rowspan="1" colspan="1">0/0</td><td rowspan="1" colspan="1">1/1</td><td rowspan="1" colspan="1">0/0</td></tr></tbody></table></table-wrap></p>
      <p>In the above example, all three variants are counted as Mendelian violations using entity based metrics. However, all three variants could be represented at the same position and could be counted as a single violation. In that case, when comparing Mendelian violation rate of different variant calling pipelines, the variant caller which calls the above variants as a single entity would have the advantage. We eliminate this by dividing variant sets into small independent regions. We use <italic>syncpoints</italic> (<xref rid="bty443-B2" ref-type="bibr">Cleary <italic>et al.</italic>, 2015</xref>) which are genomic positions that delimit regions where variants within the two syncpoint can be processed independently. <italic>Syncpoints</italic> are incidental results of vcfeval and they are used to determine variant weightings as a post-processing stage. In VBT, we use syncpoints to divide variants into small regions where each region can contain one or more variants. If a region includes at least one Mendelian violation, we count that region as a violation and Mendelian consistent otherwise.</p>
    </sec>
    <sec>
      <title>2.4 Evaluation methods and data</title>
      <p>A truth set for trio analysis does not exist for direct result comparison. Instead, we use two alternative testing methods to compare VBT and existing tools. For our experiments, we use high coverage alignments of Central European (CEU) individuals (NA12878, NA12891 and NA12892) which are available at 1000 genomes phase 3 FTP server (<ext-link ext-link-type="uri" xlink:href="http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/">ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/</ext-link>).</p>
      <p>For our first testing experiment, we construct trios from single individual samples by changing their variant representations. We use FreeBayes (<xref rid="bty443-B8" ref-type="bibr">Garrison and Marth, 2012</xref>) to generate unnormalized VCF files. Then we use Vt norm (<xref rid="bty443-B24" ref-type="bibr">Tan <italic>et al.</italic>, 2015</xref>) to alter variant representations of VCF. By using vcftools merge, we merge two identical unnormalized VCFs (playing the roles of mother and father samples) and one normalized VCF (playing the role of child sample). Since all trio samples belong to the same individual, we expect to see zero Mendelian violations by all Mendelian violation checking tools.</p>
      <p>For the second testing experiment, we implement a Mendelian violation validator that checks all possible combinations of variant phasings in a given set of small regions. For this experiment, we use region-based assessment. As we discussed in violation metrics section, we want to count any number of mistakes has been made for a region as one since we do not want to penalize one tool to another due to representation differences. We obtain the regions by merging <italic>syncpoints</italic> yielded by mother–child and father–child variant comparisons. Our validation pipeline performs a comparative analysis of unique Mendelian violations between two Mendelian violation checking tools. That is why, we first select the regions where either VBT or naive tools find a Mendelian Violation. We ignore the regions in which both tools found no Mendelian violations.</p>
      <p>For each selected region, we discard the variants that are marked as a Mendelian violation and, using the remaining variants; we seek for a Mendelian consistent combination. If no consistent combination can be found, the region is marked as <italic>missing MV</italic> for that tool. If a consistent combination can be found for both VBT and the naive method for a region, then we compare the reported violation counts for that region in order to check whether there are extra Mendelian violations reported. We accept the decision of tool with less Mendelian violation as correct and mark that region for the other tool as <italic>extra MV.</italic> A more detailed overview of our validation pipeline can be found in <xref ref-type="supplementary-material" rid="sup1">Supplementary Text, Section 3</xref>.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>VBT resolves variant representation differences in family trios efficiently by maximizing matching child variants with mother and father separately instead of using the ideal trio comparison function (<xref ref-type="disp-formula" rid="bty443-M2">eq. 2</xref>). This enables covering nearly all regions in datasets and provides VBT a reasonable running time, which varies between 6 and 8 min on Amazon c4.4xlarge instance (Intel Xeon E5 2.9 GHz, 16 vCPU, 30 GiB Memory) depending on complex region count for the whole human genome that contains 6.1 million vcf record.</p>
    <p>In our first test scenario, we use the trios we generated from a single CEU sample to show that naive trio comparison tools produce wrong Mendelian decisions due to variant representations. We compared VBT, naive (line-by-line) Mendelian error checking tools (RTG-mendelian, GATK-SelectVariants, Vcftools-mendel) and PhaseByTransmission (PBT). For PBT, we used both 2 × 10<sup>−2</sup> and 10<sup>−8</sup> as mutation rates and obtained the same number of <italic>corrections</italic> plus <italic>mutations.</italic> As seen in <xref rid="bty443-T1" ref-type="table">Table 1</xref>, VBT correctly outputs no violations for all three test data while the other tools output more than seventy thousand violations.
<table-wrap id="bty443-T1" orientation="portrait" position="float"><label>Table 1.</label><caption><p>Violation counts of different tools where the input trio is constructed from a single sample with different variant representations</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th align="left" rowspan="1" colspan="1">Input sample</th><th align="left" rowspan="1" colspan="1">VBT</th><th align="left" rowspan="1" colspan="1">Naive</th><th align="left" rowspan="1" colspan="1">PBT</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">NA12878 as trio</td><td rowspan="1" colspan="1">0</td><td rowspan="1" colspan="1">76 867</td><td rowspan="1" colspan="1">72 111</td></tr><tr><td rowspan="1" colspan="1">NA12891 as trio</td><td rowspan="1" colspan="1">0</td><td rowspan="1" colspan="1">78 854</td><td rowspan="1" colspan="1">73 396</td></tr><tr><td rowspan="1" colspan="1">NA12892 as trio</td><td rowspan="1" colspan="1">0</td><td rowspan="1" colspan="1">76 176</td><td rowspan="1" colspan="1">72 674</td></tr></tbody></table><table-wrap-foot><fn id="tblfn1"><p><italic>Note</italic>: Naive check tools include RTG-mendelian, GATK -SelectVariants and Vcftools-mendel. For PhaseByTransmission (PBT), the sum of violation count and corrected genotype count is used in this table.</p></fn></table-wrap-foot></table-wrap></p>
    <p>In the second experiment, we used CEU samples to compare trio concordance rate of different variant callers, FreeBayes (fb), Unified Genotyper (ug) and HaplotypeCaller (hc). In addition, we apply normalization (vt norm) on FreeBayes outputs and add it as fourth testing set to see if normalization can reduce errors of naive comparison tools. As a final testing trio, we produce gVCFs using HaplotypeCaller and jointly call them using GATK GenotypeGVCFs. We used vcftools (v0.1.14) to merge VCF files of individual samples except for the jointly called HaplotypeCaller trio VCF.</p>
    <p>After we generate 5 trio VCFs using different variant calling pipelines, we ran VBT and naive checking tool for each trio and compare their result using our Mendelian violation validator. <xref rid="bty443-T2" ref-type="table">Table 2</xref> shows the numbers of total violation regions, falsely identified violation regions and missed violations regions of the two methods, and for the five different variant calling pipelines. For all five testing pipeline, VBT has over 99% precision and recall values (<xref ref-type="fig" rid="bty443-F3">Fig. 3</xref>). The precision of naive tools and VBT is closer for HaplotypeCaller and jointly-called HaplotypeCaller because the representations of called variants are more similar across the samples compared to other variant callers. It is also important to note that, total violation counts in experiment 2 depend on the variant caller, and for de novo mutation analysis, using a dedicated de novo caller may produce numbers closer to the expected counts.
<table-wrap id="bty443-T2" orientation="portrait" position="float"><label>Table 2.</label><caption><p>Violation validation results of different variant calling pipelines using CEU trio</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th colspan="2" align="left" rowspan="1">VBT<hr/></th><th colspan="2" align="left" rowspan="1">naïve<hr/></th></tr><tr><th rowspan="1" colspan="1">Pipeline</th><th rowspan="1" colspan="1">Total MV Regions</th><th rowspan="1" colspan="1">Extra MV Regions</th><th rowspan="1" colspan="1">Missing MV Regions</th><th rowspan="1" colspan="1">Extra MV Regions</th><th rowspan="1" colspan="1">Missing MV Regions</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1"><bold>Fb</bold></td><td align="char" char="." rowspan="1" colspan="1">160 756</td><td align="char" char="." rowspan="1" colspan="1">229</td><td align="char" char="." rowspan="1" colspan="1">604</td><td align="char" char="." rowspan="1" colspan="1">21 237</td><td align="char" char="." rowspan="1" colspan="1">18 212</td></tr><tr><td rowspan="1" colspan="1"><bold>Ug</bold></td><td align="char" char="." rowspan="1" colspan="1">119 359</td><td align="char" char="." rowspan="1" colspan="1">134</td><td align="char" char="." rowspan="1" colspan="1">692</td><td align="char" char="." rowspan="1" colspan="1">6457</td><td align="char" char="." rowspan="1" colspan="1">16 986</td></tr><tr><td rowspan="1" colspan="1"><bold>Hc</bold></td><td align="char" char="." rowspan="1" colspan="1">72 671</td><td align="char" char="." rowspan="1" colspan="1">516</td><td align="char" char="." rowspan="1" colspan="1">229</td><td align="char" char="." rowspan="1" colspan="1">32</td><td align="char" char="." rowspan="1" colspan="1">6215</td></tr><tr><td rowspan="1" colspan="1"><bold>fb+norm</bold></td><td align="char" char="." rowspan="1" colspan="1">161 252</td><td align="char" char="." rowspan="1" colspan="1">39</td><td align="char" char="." rowspan="1" colspan="1">1052</td><td align="char" char="." rowspan="1" colspan="1">23 077</td><td align="char" char="." rowspan="1" colspan="1">15 380</td></tr><tr><td rowspan="1" colspan="1"><bold>hc joint</bold></td><td align="char" char="." rowspan="1" colspan="1">39 342</td><td align="char" char="." rowspan="1" colspan="1">287</td><td align="char" char="." rowspan="1" colspan="1">60</td><td align="char" char="." rowspan="1" colspan="1">218</td><td align="char" char="." rowspan="1" colspan="1">1600</td></tr></tbody></table><table-wrap-foot><fn id="tblfn2"><p><italic>Note</italic>: Comparison results of FreeBayes (fb), HaplotypeCaller (hc) and UnifiedGenotyper (ug). Autosomes only. No filtration is applied to the data. Regions may contain zero or multiple Mendelian violations.</p></fn></table-wrap-foot></table-wrap></p>
    <fig id="bty443-F3" orientation="portrait" position="float">
      <label>Fig. 3.</label>
      <caption>
        <p>Violation Precision versus Recall plot of VBT and Naive tools for 5 different variant calling pipelines. Recall is defined as <italic>(Total MV Region—Extra MV—Missing MV)/(Total MV Region—Extra MV)</italic> and precision is defined as <italic>(Total MV Region—Extra MV—Missing MV)/(Total MV Region—Missing MV)</italic> according to <xref rid="bty443-T2" ref-type="table">Table 2</xref></p>
      </caption>
      <graphic xlink:href="bty443f3"/>
    </fig>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>In this work, we presented VBT, a Mendelian violation detection tool that is capable of comparing complex indels in family trios. We showed with our test scenarios that, VBT has better accuracy than the existing tools.</p>
    <p>We propose a trio comparison extension for pairwise comparison algorithm of vcfeval and we approximately solve this problem by processing mother–child and father–child haplotype sequence chains separately. VBT has two error modes which drop the precision and recall by a small amount visible on <xref rid="bty443-T2" ref-type="table">Table 2</xref>: First error mode is not knowing the 1-to-1 matches of variants across different samples. When we assess parent variant decisions using child decisions in the post-processing stage, we try to match parent and child variants using a position overlap [i.e. used in <xref ref-type="disp-formula" rid="bty443-M7">Eq. (7)</xref> and <xref ref-type="disp-formula" rid="bty443-M8">Eq. (8)</xref>] which leads to an error in repetitive regions. Our approximation to the trio comparison problem introduces the second error mode. Obtained local best paths from mother–child and father–child duos are not always identical to the global optimum of the trio, and in the merging step, this causes a small error rate. We further explain the error modes with examples in <xref ref-type="supplementary-material" rid="sup1">Supplementary Text, Section 3.4</xref>. To solve the second error mode of VBT, direct implementation of our initial method [i.e. <xref ref-type="disp-formula" rid="bty443-M2">Eq. (2)</xref>] could be used. However, the first error mode also remains as a problem for this method and even worse sensitivity could be shown due to the larger number of variants required to be post-processed after <xref ref-type="disp-formula" rid="bty443-M2">Eq. (2)</xref>.</p>
    <p>VBT’s accuracy can further be improved by correcting wrong/missed decisions by comparing vcf output with the naive comparison as a post-processing step. In regions where the naive method and VBT disagrees, a nonlinear violation check can be performed by generating all possible subsequences for that region, similarly to our violation validation pipeline. This would not increase overall running time considerably because the slow nonlinear checking method would be invoked only for regions where the naive method disagrees with VBT. As a result, VBT would serve as a cost-efficient detector informing us whenever the naive comparison methods are not enough.</p>
    <p>VBT does not alter variant representations during or after variant comparison. Instead, we keep the original variant representations and add additional info tag that whether a variant is a Mendelian violation or not. The advantage of this is the ability to track variants for benchmarking purposes. The disadvantage is that existing tools which require trio analysis such as PhaseByTransmission and DeNovoGear are not able to use VBT output directly and need to read Mendelian decision annotation from output vcf records. The reason why we do not alter variant representations (i.e. merge multiple rows as a single entity) is the ambiguity in violation regions since the correct phasings of variants are unknown and several merging options are possible. Therefore, for de novo mutation identification tools, we add an input mode (–output-violation-regions) that allows VBT to output all Mendelian violation regions as a BED file. Using this BED file, we can identify the violation regions missed by naive the method. Besides, variants in these violation regions then can be either merged with a custom choice or all combinations can be generated for de Novo mutation analysis.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>Supplementary Text</label>
      <media xlink:href="bty443_supplementary_text.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank Maxime Huvet, Maria C. Suciu and Amit Jain for trio benchmarking discussions and thank Sun-Gou Ji, Yilong Li, Morten Källberg, Gülfem Demir, James Spencer and Kaushik Ghose for their valuable comments on VBT.</p>
  </ack>
  <sec>
    <title>Funding</title>
    <p>This work was supported in part by UK Department of Health grant SBRI Genomics Competition: Enabling Technologies for Genomic Sequence Data Analysis and Interpretation administered by Genomics England.</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <ref-list>
    <title>References</title>
    <ref id="bty443-B1">
      <mixed-citation publication-type="journal"><collab>Genome Project Consortium</collab><etal>et al</etal> (<year>2015</year>) 
<article-title>A global reference for human genetic variation</article-title>. <source>Nature</source>, <volume>526</volume>, <fpage>68</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">26432245</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cleary</surname><given-names>J.G.</given-names></name><etal>et al</etal></person-group> (<year>2015</year>) 
<article-title>Comparing variant call files for performance benchmarking of next-generation sequencing variant calling pipelines</article-title>. <source>bioRxiv</source>, <comment>doi: 10.1101/023754/</comment></mixed-citation>
    </ref>
    <ref id="bty443-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Conrad</surname><given-names>D.F.</given-names></name><etal>et al</etal></person-group> (<year>2011</year>) 
<article-title>Variation in genome-wide mutation rates within and between human families</article-title>. <source>Nat. Genet.</source>, <volume>43</volume>, <fpage>712</fpage>–<lpage>714</lpage>.<pub-id pub-id-type="pmid">21666693</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Danecek</surname><given-names>P.</given-names></name><etal>et al</etal></person-group> (<year>2011</year>) 
<article-title>The Variant Call Format and VCFtools</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>2156</fpage>–<lpage>2158</lpage>.<pub-id pub-id-type="pmid">21653522</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B5">
      <mixed-citation publication-type="journal"><collab>Deciphering Developmental Disorders Study</collab> (<year>2017</year>) 
<article-title>Prevalence and architecture of de novo mutations in developmental disorders</article-title>. <source>Nature</source>, <volume>542</volume>, <fpage>433</fpage>–<lpage>438</lpage>.<pub-id pub-id-type="pmid">28135719</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Douglas</surname><given-names>J.A.</given-names></name><etal>et al</etal></person-group> (<year>2002</year>) 
<article-title>Probability of detection of genotyping errors and mutations as inheritance inconsistencies in nuclear-family data</article-title>. <source>Am. J. Hum. Genet.</source>, <volume>70</volume>, <fpage>487</fpage>–<lpage>495</lpage>.<pub-id pub-id-type="pmid">11791214</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Francioli</surname><given-names>L.C.</given-names></name><etal>et al</etal></person-group> (<year>2017</year>) 
<article-title>A framework for the detection of de novo mutations in family-based sequencing data</article-title>. <source>Eur. J. Hum. Genet.</source>, <volume>25</volume>, <fpage>227</fpage>–<lpage>233</lpage>.<pub-id pub-id-type="pmid">27876817</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Garrison</surname><given-names>E.</given-names></name>, <name name-style="western"><surname>Marth</surname><given-names>G.</given-names></name></person-group> (<year>2012</year>) 
<article-title>Haplotype-based variant detection from short-read sequencing</article-title>. <source>arXiv</source>, <comment>arXiv: 1207.3907</comment></mixed-citation>
    </ref>
    <ref id="bty443-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hidalgo</surname><given-names>R.A.</given-names></name><etal>et al</etal></person-group> (<year>2016</year>) 
<article-title>New insights into the generation and role of de novo mutation in health and disease</article-title>. <source>Genome Biol.</source>, <volume>17</volume>, <fpage>241</fpage>.<pub-id pub-id-type="pmid">27894357</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jamuar</surname><given-names>S.S.</given-names></name>, <name name-style="western"><surname>Tan</surname><given-names>E.C.</given-names></name></person-group> (<year>2015</year>) 
<article-title>Clinical application of next generation sequencing for Mendelian diseases</article-title>. <source>Hum. Genomics</source>, <volume>9</volume>, <fpage>10</fpage>.<pub-id pub-id-type="pmid">26076878</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kong</surname><given-names>A.</given-names></name><etal>et al</etal></person-group> (<year>2012</year>) 
<article-title>Rate of de novo mutations and the importance of father’s age to disease risk</article-title>. <source>Nature</source>, <volume>488</volume>, <fpage>471</fpage>–<lpage>475</lpage>.<pub-id pub-id-type="pmid">22914163</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Komar</surname><given-names>P.</given-names></name>, <name name-style="western"><surname>Deniz</surname><given-names>K.</given-names></name></person-group> (<year>2017</year>) 
<article-title>geck: trio-based comparative benchmarking of variant calls</article-title>. <source>bioRxiv</source>, <comment>doi: 10.1101/208116</comment></mixed-citation>
    </ref>
    <ref id="bty443-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Krusche</surname><given-names>P.</given-names></name><etal>et al</etal></person-group> (<year>2018</year>) 
<article-title>Best practices for benchmarking small variant calls in human genomes</article-title>. <source>bioRxiv</source>, <comment>doi: 10.1101/270157</comment></mixed-citation>
    </ref>
    <ref id="bty443-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>McKenna</surname><given-names>A.</given-names></name><etal>et al</etal></person-group> (<year>2010</year>) 
<article-title>The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data</article-title>. <source>Genome Res.</source>, <volume>20</volume>, <fpage>1297</fpage>–<lpage>1303</lpage>.<pub-id pub-id-type="pmid">20644199</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Nutsua</surname><given-names>M.E.</given-names></name><etal>et al</etal></person-group> (<year>2015</year>) 
<article-title>Family-based benchmarking of copy number variation detection software</article-title>. <source>PLoS One</source>, <comment>doi: 10.1371/journal.pone.0133465</comment></mixed-citation>
    </ref>
    <ref id="bty443-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Pilipenko</surname><given-names>V.V.</given-names></name><etal>et al</etal></person-group> (<year>2014</year>) 
<article-title>Using Mendelian inheritance errors as quality control criteria in whole genome sequencing dataset</article-title>. In <italic>BMC Proceedings</italic>, Vol. 8, pp. 1.</mixed-citation>
    </ref>
    <ref id="bty443-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Rakocevic</surname><given-names>G.</given-names></name><etal>et al</etal></person-group> (<year>2017</year>) 
<article-title>Fast and accurate genomic analyses using genome graphs</article-title>. <source>bioRxiv</source>, <comment>doi: 10.1101/194530</comment></mixed-citation>
    </ref>
    <ref id="bty443-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ramu</surname><given-names>A.</given-names></name><etal>et al</etal></person-group> (<year>2013</year>) 
<article-title>DeNovoGear: de novo indel and point mutation discovery and phasing</article-title>. <source>Nat. Methods</source>, <volume>10</volume>, <fpage>985</fpage>–<lpage>987</lpage>.<pub-id pub-id-type="pmid">23975140</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sun</surname><given-names>C.</given-names></name>, <name name-style="western"><surname>Medvedev</surname><given-names>P.</given-names></name></person-group> (<year>2016</year>) 
<article-title>VarMatch: robust matching of small variant datasets using flexible scoring schemes</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>1301</fpage>–<lpage>1308</lpage>.</mixed-citation>
    </ref>
    <ref id="bty443-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Talwalkar</surname><given-names>A.</given-names></name><etal>et al</etal></person-group> (<year>2014</year>) 
<article-title>SM A SH: a benchmarking toolkit for human genome variant calling</article-title>. <source>Bioinformatics</source>, <volume>30</volume>, <fpage>2787</fpage>–<lpage>2795</lpage>.<pub-id pub-id-type="pmid">24894505</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Tan</surname><given-names>A.</given-names></name><etal>et al</etal></person-group> (<year>2015</year>) 
<article-title>Unified representation of genetic variants</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>2202</fpage>–<lpage>2204</lpage>.<pub-id pub-id-type="pmid">25701572</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wei</surname><given-names>Q.</given-names></name><etal>et al</etal></person-group> (<year>2015</year>) 
<article-title>A Bayesian framework for de novo mutation calling in parents-offspring trios</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>1375</fpage>–<lpage>1381</lpage>.<pub-id pub-id-type="pmid">25535243</pub-id></mixed-citation>
    </ref>
    <ref id="bty443-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zook</surname><given-names>J.M.</given-names></name><etal>et al</etal></person-group> (<year>2014</year>) 
<article-title>Integrating human sequence data sets provides a resource of benchmark SNP and indel genotype calls</article-title>. <source>Nat. Biotechnol.</source>, <volume>32</volume>, <fpage>246</fpage>–<lpage>251</lpage>.<pub-id pub-id-type="pmid">24531798</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
