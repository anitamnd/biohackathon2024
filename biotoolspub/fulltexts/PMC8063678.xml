<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="publisher-id">synbio</journal-id>
    <journal-title-group>
      <journal-title>Synthetic Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2397-7000</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8063678</article-id>
    <article-id pub-id-type="doi">10.1093/synbio/ysab001</article-id>
    <article-id pub-id-type="publisher-id">ysab001</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00010</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SynBiopython: an open-source software library for <italic>Synthetic Biology</italic></article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Yeoh</surname>
          <given-names>Jing Wui</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Swainston</surname>
          <given-names>Neil</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff2">2</xref>
        <xref ref-type="corresp" rid="ysab001-cor1"/>
        <!--<email>neil.swainston@liverpool.ac.uk</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vegh</surname>
          <given-names>Peter</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zulkower</surname>
          <given-names>Valentin</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-0993-5625</contrib-id>
        <name>
          <surname>Carbonell</surname>
          <given-names>Pablo</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff4">4</xref>
        <xref ref-type="aff" rid="ysab001-aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-1535-4296</contrib-id>
        <name>
          <surname>Holowko</surname>
          <given-names>Maciej B</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff6">6</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Peddinti</surname>
          <given-names>Gopal</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff7">7</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Poh</surname>
          <given-names>Chueh Loo</given-names>
        </name>
        <xref ref-type="aff" rid="ysab001-aff1">1</xref>
        <xref ref-type="corresp" rid="ysab001-cor1"/>
        <!--<email>poh.chuehloo@nus.edu.sg</email>-->
      </contrib>
    </contrib-group>
    <aff id="ysab001-aff1"><label>1</label><institution>NUS Synthetic Biology for Clinical and Technological Innovation (SynCTI), Life Sciences Institute, National University of Singapore</institution>, Singapore, <country country="SG">Singapore</country></aff>
    <aff id="ysab001-aff2"><label>2</label><institution>Institute of Systems, Molecular and Integrative Biology, University of Liverpool</institution>, Liverpool, <country country="GB">UK</country></aff>
    <aff id="ysab001-aff3"><label>3</label><institution>Edinburgh Genome Foundry, University of Edinburgh</institution>, Edinburgh, <country country="GB">UK</country></aff>
    <aff id="ysab001-aff4"><label>4</label><institution>Instituto Universitario de Automática e Informática Industrial, Universitat Politècnica de València</institution>, Valencia, <country country="ES">Spain</country></aff>
    <aff id="ysab001-aff5"><label>5</label><institution>Manchester Synthetic Biology Research Centre for Fine and Speciality Chemicals (SYNBIOCHEM), Manchester Institute of Biotechnology, The University of Manchester</institution>, Manchester, <country country="GB">UK</country></aff>
    <aff id="ysab001-aff6"><label>6</label><institution>CSIRO Synthetic Biology Future Science Platform</institution>, Canberra, ACT, <country country="AU">Australia</country></aff>
    <aff id="ysab001-aff7"><label>7</label><institution>VTT Technical Research Center of Finland</institution>, Espoo, <country country="FI">Finland</country></aff>
    <author-notes>
      <corresp id="ysab001-cor1">Corresponding authors: E-mail: <email>poh.chuehloo@nus.edu.sg</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-02-22">
      <day>22</day>
      <month>2</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>22</day>
      <month>2</month>
      <year>2021</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>6</volume>
    <issue>1</issue>
    <elocation-id>ysab001</elocation-id>
    <history>
      <date date-type="received">
        <day>06</day>
        <month>12</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>28</day>
        <month>12</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="ysab001.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Advances in hardware automation in synthetic biology laboratories are not yet fully matched by those of their software counterparts. Such automated laboratories, now commonly called biofoundries, require software solutions that would help with many specialized tasks such as batch DNA design, sample and data tracking, and data analysis, among others. Typically, many of the challenges facing biofoundries are shared, yet there is frequent wheel-reinvention where many labs develop similar software solutions in parallel. In this article, we present the first attempt at creating a standardized, open-source Python package. A number of tools will be integrated and developed that we envisage will become the obvious starting point for software development projects within biofoundries globally. Specifically, we describe the current state of available software, present usage scenarios and case studies for common problems, and finally describe plans for future development. SynBiopython is publicly available at the following address: <ext-link ext-link-type="uri" xlink:href="http://synbiopython.org">http://synbiopython.org</ext-link>.</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>Software</kwd>
      <kwd>Synthetic Biology</kwd>
      <kwd>Biofoundries</kwd>
      <kwd>Open-source</kwd>
      <kwd>Automation</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Biotechnology and Biological Sciences Research Council (BBSRC)</institution>
          </institution-wrap>
        </funding-source>
        <award-id>BB/S004955/1</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Liverpool</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000836</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>UK Research Councils Synthetic Biology for Growth Programme</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>BBSRC</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000268</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>BB/M00029X/1, BB/M025640/1, BB/M025659/1, BB/M018040/1</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>UK Biotechnology and Biological Sciences Research Council (BBSRC) and the Engineering and Physical Sciences Research Council (EPSRC)</institution>
          </institution-wrap>
        </funding-source>
        <award-id>BB/M017702/1</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Universitat Politècnica de València Talento Programme</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>CSIRO’s Synthetic Biology Future Science Platform</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Singapore NRF Synthetic Biology Program</institution>
          </institution-wrap>
        </funding-source>
        <award-id>SBP-P5, SBP-P6</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Synthetic Biology Initiative of the National University of Singapore</institution>
          </institution-wrap>
        </funding-source>
        <award-id>DPRT/943/09/14</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <p>With synthetic biology developing at an increasing pace, there are now a large number of tools covering the Design-Build-Test-Learn (DBTL) cycle available to researchers, originating from both academic and commercial sources. For instance at the Design stage, computer-aided metabolic engineering tools such as Cameo (<xref rid="ysab001-B1" ref-type="bibr">1</xref>) and RetroPath2.0 (<xref rid="ysab001-B2" ref-type="bibr">2</xref>); or tools in the transition from Design to Build for sequence optimization such as DnaChisel (<xref rid="ysab001-B3" ref-type="bibr">3</xref>) and PartsGenie (<xref rid="ysab001-B4" ref-type="bibr">4</xref>); tools at the Build stage such as CloneFlow for planning ligase cycling reaction DNA assemblies (<xref rid="ysab001-B5" ref-type="bibr">5</xref>); tools at the Test stage, such as mzmine for mass spectrometry data processing (<xref rid="ysab001-B6" ref-type="bibr">6</xref>), tools from Test to Learn and Design such as BioModel Selection System (BMSS) that performs automated BioModel selection (<xref rid="ysab001-B7" ref-type="bibr">7</xref>), or tools facilitating the transition from Learn to Design such as the cobrapy library for genome-scale metabolic modeling (<xref rid="ysab001-B8" ref-type="bibr">8</xref>). Increasing automation in synthetic biology laboratories [the consensus term for such an automated lab used for synthetic biology research and development is ‘biofoundry’ (see also ref. to GBA article, <ext-link ext-link-type="uri" xlink:href="https://biofoundries.org/">https://biofoundries.org/</ext-link>)] is posing another set of problems. While many laboratories may not require sophisticated software for data collection, sample tracking or batch genetic construct design, such software is essential for heavily automated labs. The main reason for this is the significant number of samples being processed daily (in the order of 10<sup>2</sup> to 10<sup>4</sup>). Without appropriate software, manually generated mistakes can become increasingly prevalent and, given the volume of samples processed, such mistakes can become very costly in terms of both time and money.</p>
    <p>Selecting appropriate software solutions for an automated laboratory can be difficult. The solutions are scattered and there are no definite guidelines or universally agreed state-of-the-art. As a result, many groups have created software solutions in-house, which typically involves directly hiring developers. This approach, however, leads to the multiplication of efforts, and since these solutions are usually developed with that specific lab in mind, it is often difficult to reuse these solutions in a different lab, even if the code is open-sourced. Commercial solutions, on the other hand, are usually developed with big operations in mind and do not scale well to smaller operations. Additionally, such solutions are often expensive and such costs are hard to justify for a relatively small, albeit automated, lab. Furthermore, many tools, whether academically or commercially developed, are typically end-to-end applications. Such solutions provide a predefined set of functionalities, which are difficult for other developers to unpick in order to reuse individual components in their own software.</p>
    <p>In the 2000s, the bioinformatics community was in a similar situation and created Biopython (<xref rid="ysab001-B9" ref-type="bibr">9</xref>) as a library of primitives. The advantages of such libraries include, (i) increased reliability, due to community testing; (ii) increased reusability and interoperability between the different modules of the project; and (iii) increased community uptake, due to easier discovery of features that are organized under a single umbrella project. The approach has been very successful, with over 2000 manuscript citations and 3500 Github projects using Biopython. However, since Biopython is primarily focused toward classical bioinformatics, with an emphasis on sequence analysis, the Global Biofoundries Alliance (GBA) (<xref rid="ysab001-B10" ref-type="bibr">10</xref>) software group identified a need for a library specific to the requirements of the synthetic biology community. These requirements include tools assisting in DNA design and assembly, software for automation and robotic equipment. A project specific to synthetic biology provides better visibility and also encourages contributions from developers in this field.</p>
    <p>The Software Working Group of Global Biofoundries Alliance, therefore, introduces a new package, named <italic>SynBiopython</italic>, to support aspects of development efforts that are common to many DNA design and assembly projects. Python is recognized as being ubiquitous in biofoundry software development efforts and is, therefore, a natural choice for such a consolidated, collaborative effort.</p>
    <p>In introducing this work, it is recognized that there remains a large amount of development work to be performed, requiring the introduction of a multitude of new modules, for the package to be considered ‘full-suite’. This article, therefore, acts as a ‘call to arms’ on the synthetic biology community, introducing the concept of reusable libraries, exemplifying its use through the development of specific, community-developed modules and specifying the governance requirements to manage the growth of the resource over time.</p>
    <p>The initial modules demonstrated here include standard file parsers and tool interoperability, an automation library and support for codon usage tables. The presented tools were chosen from a number of tools that were originally written in different biofoundries that are part of the GBA. The decision was made to work on these modules first to meet the following general objectives of SynBiopython: (i) collation and development of synthetic biology-oriented code and tools in Python; (ii) support for both novice and advanced developers of synthetic biology software; and (iii) prevention of duplicated efforts. There are also a number of specific aims that the Authors would like SynBiopython to meet: (i) standardization of read/write operations and other procedures and automation related tools to allow ease of access and interaction; (ii) simplification of parsing of different synthetic biology-related file formats; and (iii) development of more intuitive APIs and wrapper functions on top of more complex code, hiding underlying details.</p>
  </sec>
  <sec sec-type="results">
    <title>Results</title>
    <p>Here, we describe the three modules that show how future modules in SynBiopython should be written and used. Each module is provided together with a case study and some example code for easier understanding. First, we describe Genbabel, a tool that enables translation between file formats relevant to synthetic biology. Next, we discuss the Automation Library, a module that can be used to create instruction files for automated equipment. Finally, we show how the Codon Usage Tables tool can be used to optimize DNA sequences.</p>
    <sec>
      <title>Standard file parsers and tool interoperability: Genbabel</title>
      <p>Driving interoperability between tools via a common standard is a deep-rooted effort in synthetic biology. Several standard file formats such as GenBank (<xref rid="ysab001-B11" ref-type="bibr">11</xref>), FASTA, Synthetic Biology Open Language (SBOL) (<xref rid="ysab001-B12" ref-type="bibr">12</xref>), Systems Biology Markup Language (SBML) (<xref rid="ysab001-B13" ref-type="bibr">13</xref>), Simulation Experiment Description Markup Language (SED-ML) (<xref rid="ysab001-B14" ref-type="bibr">14</xref>) and Computational Modeling in Biology Network (COMBINE) archives (<xref rid="ysab001-B15" ref-type="bibr">15</xref>) have been proposed at different information levels to overcome the reproducibility challenge and to serve as a common integrated knowledge base for data sharing. Despite these standards having been adopted in many of the developed tools, there is no one-size-fits-all tool that supports the parsing of these common standard files in the field of synthetic biology. To mitigate these issues, SynBiopython introduces a universal environment, named Genbabel, which serves as a repository of standard file parsers built upon existing libraries and applications to enable easy generation and conversion of different standard files as mentioned above, including formats for DNA/protein sequences, genetic circuits, and model simulations. This aims to reduce redundant or overlapping efforts and to improve reusability which are essential to accelerate the progress of the field.</p>
      <p>At the lower level, GenBank and FASTA files are the most ubiquitous standard formats used to encode DNA and protein sequence data (<xref rid="ysab001-B11" ref-type="bibr">11</xref>). To capture the structural information at a higher level, the SBOL and SBOL Visual compliant diagrams have been introduced and applied in many software platforms (<xref rid="ysab001-B12" ref-type="bibr">12</xref>). To enable the transferability of different data standards, built upon existing online platform and packages (<xref rid="ysab001-B16" ref-type="bibr">16–18</xref>), a standard file parser has been developed in Genbabel to support the conversion between SBOL files and the aforementioned sequence data formats including General Feature Format (GFF3), and the rendering of highly customizable genetic circuits and their associated regulations.</p>
      <p>Aligning with the use of the model-driven approach in forward and reverse cell engineering, the advent of SBML enables the representation of computational models in a declarative form to ease the exchange of quantitative descriptions (<xref rid="ysab001-B13" ref-type="bibr">13</xref>). SBML is widely used for modeling and simulation for chassis optimization through Python-based tools for flux analysis and knock-out/knock-in optimization such as COBRApy (<xref rid="ysab001-B8" ref-type="bibr">8</xref>) or cameo (<xref rid="ysab001-B1" ref-type="bibr">1</xref>). Genome-scale metabolic models for the most common industrial hosts are available at public databases, such as BioModels (<xref rid="ysab001-B19" ref-type="bibr">19</xref>) and BiGG (<xref rid="ysab001-B20" ref-type="bibr">20</xref>) and can be downloaded in SBML. The support of modeling in general and SBML in particular is therefore of increasing interest to the synthetic biology community. The Genbabel module was thus extended to provide the capability of generating SBML files and other formats related to modeling, such as SED-ML (<xref rid="ysab001-B14" ref-type="bibr">14</xref>) and COMBINE archives in Open Modeling EXchange (OMEX) format (<xref rid="ysab001-B15" ref-type="bibr">15</xref>), which are hinged on several developed packages (<xref rid="ysab001-B21" ref-type="bibr">21–23</xref>).</p>
      <p>The incorporation of Genbabel module in the SynBiopython package seeks to provide a universal parser environment which supports the gathering of and interfacing with parsers spanning across gene sequence, circuit, and systems levels. Longer-term goals include the development of an improved interface, linking file parsing encoded in different formats from sequence, structure, model, simulation and analysis.</p>
    </sec>
    <sec>
      <title>Case study: standard file generation and model generation</title>
      <p>To demonstrate the capability of Genbabel, we present an example (<xref ref-type="fig" rid="ysab001-F4">Code Block 1</xref>) to demonstrate the conversion of a GenBank file, which encodes an AND logic gate genetic circuit generated from Benchling (Benchling Inc., San Francisco, USA) during the Design phase, to SBOL file using the GenSBOLconv submodule. The circular plasmid map can also be constructed based on the given GenBank file (<xref ref-type="fig" rid="ysab001-F1">Figure 1a</xref>). Meanwhile, the corresponding SBOL-compliant genetic circuit diagram can be generated using the SimpleDNAplot submodule (<xref ref-type="fig" rid="ysab001-F1">Figure 1b</xref>).</p>
      <fig id="ysab001-F1" orientation="portrait" position="float">
        <label>Figure 1.</label>
        <caption>
          <p>A case study of an AND logic gate genetic circuit generated using the Genbabel module. The AND gate consists of a blue-light inducible system using a photosensitive DNA-binding protein EL222 (<xref rid="ysab001-B24" ref-type="bibr">24</xref>, <xref rid="ysab001-B25" ref-type="bibr">25</xref>). The system is turned on in the presence of both blue light and the arabinose inducer, to drive the expression of red fluorescent proteins (RFPs). (<bold>a</bold>) Circuit plasmid map generated using the GenSBOLconv submodule; and (<bold>b</bold>) SBOL Visual compliant gene circuit diagram generated using the SimpleDNAplot submodule of Genbabel module.</p>
        </caption>
        <graphic xlink:href="ysab001f1"/>
      </fig>
      <p>During the Design phase before the actual circuit construction, one can also utilize the SBMLgen submodule to generate the SBML file which encodes the kinetic model of the AND gate for simulation as demonstrated in <xref ref-type="fig" rid="ysab001-F5">Code Block 2</xref>. All the different elements such as the ODEs, variables, initial conditions, parameters names, values and units are to be provided in lists of strings as input arguments to the export_sbml function. Otherwise, in the Learn phase, using characterization data of the AND gate, an SBML file can also be generated via running the BMSS tool (<xref rid="ysab001-B7" ref-type="bibr">7</xref>). With the available SBML file, the corresponding SED-ML file and COMBINE archive in OMEX format can subsequently be generated and executed using the SEDMLOMEXgen submodule with the AND gate simulation results shown in <xref ref-type="fig" rid="ysab001-F2">Figure 2</xref>. These formats ensure the reproducibility of the model implementation and simulation. A detailed example code implementation is provided in the SynBiopython GitHub repository.</p>
      <fig id="ysab001-F2" orientation="portrait" position="float">
        <label>Figure 2.</label>
        <caption>
          <p>Model simulation results for the AND logic gate with four state inputs (00, 01, 10, 11) generated from the SBML and SED-ML files contained in the COMBINE archive OMEX format. The simulation is performed using the execute_inlineomex function from the SEDMLOMEXgen submodule.</p>
        </caption>
        <graphic xlink:href="ysab001f2"/>
      </fig>
    </sec>
    <sec>
      <title>Automation library</title>
      <p>In the spirit of developing computational infrastructure across the DBTL cycle, the Build phase is supported through the introduction of the SynBiopython automation library. The goal of the library is to provide an easy-to-use, standardized solution for the creation of automated workflows for biofoundries. It is envisaged that the library will act as the first software suite that a user of a biofoundry will have contact with and by setting good practices it will reinforce them in the users.</p>
      <p>There are currently a number of solutions that allow lab workflow automation, including Aquarium (<xref rid="ysab001-B26" ref-type="bibr">26</xref>), Antha (Synthace Ltd., London, UK), TeselaGen BUILD (TeselaGen Biotechnology Inc., San Francisco, USA) and the Autoprotocol [Strateos Inc. (formerly Transcriptic), Menlo Park, USA]. However, these may not be suitable for a biofoundry operator. Some of these are still under development, or do not allow the development of protocols via scripts. Proprietary software can be costly and inhibits collaborative development and adapting the software to custom needs.</p>
      <p>The GBA recognizes automation to be a major bottleneck in the development of the biofoundry technology. For the most part, each lab uses their own collection of open-source, in-house and commercial automation software which makes collaborations and comparative studies very difficult. Many of the routine tasks that are performed in biofoundries involve liquid manipulation, including dilutions, normalizations, transfers between plates and rearraying. Creating reliable protocols and picklists for such operations is a time-consuming effort and, without proper software support, very error prone.</p>
      <p>The introduction of the lab automation module within the SynBiopython package aims to address these issues. This module, adapted from Plateo by the Edinburgh Genome Foundry, enables generation of picklists and protocols for commonly used machines, focusing on liquid handlers (e.g. Labcyte Echo). A long-term goal is the integration of this module with a number of open-source libraries and APIs (e.g. Biopython, Benchling, Teselagen, other common LIMS or DNA synthesis providers) to enhance its data-tracking capability.</p>
    </sec>
    <sec>
      <title>Case study: generating a picklist</title>
      <p>The lab automation module includes a number of classes: the plate class (e.g. a microplate) which contains objects of the well class (which stores information about the contents of a given well in the plate), the transfer class that stores information about transfers to be performed between wells and finally the picklist class, which contains a list of transfers to be made within a single plate or between different plates.</p>
      <p>The example in <xref ref-type="fig" rid="ysab001-F6">Code Block 3</xref> shows how a picklist can be generated. The picklist object can be initiated with a predetermined list of transfers to be performed or the transfers can be directly defined using the add_transfer method. After defining all the transfers, the picklist can be then translated to a form accepted by a relevant liquid handler (which will be a future feature) and finally executed. More detailed code demonstrating these features is available in the examples directory of the code repository.</p>
    </sec>
    <sec>
      <title>Codon usage tables</title>
      <p>A typical task in the Design step of a biofoundry workflow is the optimization of the coding sequence of a given amino acid sequence for recombinant expression in a host of interest. As codon usage differs across organisms, such codon optimization is reliant on codon usage tables, which specify a given organism’s frequency of use of each degenerate codon. While codon usage tables are publicly available (<xref rid="ysab001-B27" ref-type="bibr">27</xref>), there remains as yet no standardized means for the programmatic access and manipulation.</p>
      <p>SynBiopython consequently includes a module for support of codon usage tables and codon optimization. This module is based on previous work from the Manchester Centre for Synthetic Biology (SYNBIOCHEM) and the Edinburgh Genome Foundry. Following a simple interface, codon usage tables may be automatically accessed from the Kazusa Codon Usage Database and used in a number of codon optimization methods. The library complements the existing Biopython CodonTable module but includes codon frequency in addition to translation tables. Example code for the codon module is provided in <xref ref-type="fig" rid="ysab001-F7">Code Block 4</xref>.</p>
      <p>Future work may include support for custom codon usage tables of novel or rare organisms, more sophisticated codon optimization algorithms, and support for Biopython sequences.</p>
    </sec>
    <sec>
      <title>Future directions</title>
      <p>It is hoped that future directions of development for the SynBiopython library will be driven by the needs of the community, and by interested volunteers who would happily provide useful modules that would be of general utility. Synthetic biology is an umbrella term, encompassing a number of sub-disciplines, and the SynBiopython project aspires to support a range of tools and applications across these numerous sub-communities.</p>
      <p>One such application of interest for the metabolic engineering community is to provide a straightforward scripting way for <italic>in silico</italic> prototyping of genetic constructs once inserted into the optimized chassis organisms. Such approach should be addressed effortlessly, as examples and tutorials exist in both cameo and COBRApy about adding biochemical species and reactions to genome-scale models in order to represent the genetic circuit of metabolic circuits and pathways.</p>
      <p>To connect the dots, combinatorial genetic circuits represented in SBOL and designed through tools such as Cello (<xref rid="ysab001-B28" ref-type="bibr">28</xref>) should generate annotated SBML models that can be seamlessly added into the genome-scale model of the chassis. Standard interconversion procedures exist between SBML and SBOL and have been implemented in the Java-based iBioSim tool (<xref rid="ysab001-B29" ref-type="bibr">29</xref>). In general, the generation of an annotated SBML model from SBOL can be accomplished by using terms from ontologies (<xref rid="ysab001-B30" ref-type="bibr">30</xref>). Ontologies are controlled vocabularies that can be associated with different elements in the SBOL. The Sequence Ontology (<xref rid="ysab001-B31" ref-type="bibr">31</xref>) allows defining roles to the components such as promoters, coding sequences or terminators, while the Systems Biology Ontology (SBO) (<xref rid="ysab001-B32" ref-type="bibr">32</xref>) allows the definition of biochemical species and reactions. As a first approach, SBOL should provide the minimal annotations required in order to be able to integrate the engineered circuit of the pathway into the SBML model and perform steady-state flux analysis simulations.</p>
      <p>Furthermore, an extensive number of freely available online (web-based) and offline tools are available to expedite the different phases of the DBTL cycle of synthetic biology. Supporting interoperability between these tools will allow for more efficient development of computational pipelines and the reduction of redundant efforts (<xref ref-type="fig" rid="ysab001-F3">Figure 3</xref>). Such interoperability will pave the way toward a long-standing goal of synthetic biology: full lab automation assisted by streamlined computer-aided tools. Several useful tools that serve to automate design, modeling and optimization phases are compiled below, and depending upon the priorities of the community, these will be incrementally supported by future developments of SynBiopython. Such a platform for the support of third-party applications will be made highly extensible to allow more tools to be interfaced over time.</p>
      <fig id="ysab001-F3" orientation="portrait" position="float">
        <label>Figure 3.</label>
        <caption>
          <p>Current SynBiopython modules within the Design-Build-Test-Learn (DBTL) cycle of synthetic biology (<xref rid="ysab001-B33" ref-type="bibr">33</xref>). Genbabel module provides the link between Design and Build by allowing the interconversion of sequence-based files into gene circuit representation format in SBOL, and the generation of SBML models and other modeling-related formats, which could then be interfaced through the CAD tools with external tools such as BMSS, Cello, RBS Calculator or sRNA, gRNA tools. The link between Build and Test is implemented through the Codon usage and the Automation library.</p>
        </caption>
        <graphic xlink:href="ysab001f3"/>
      </fig>
      <fig id="ysab001-F4" orientation="portrait" position="float">
        <label>Code Block 1.</label>
        <caption>
          <p>Demonstration of the features of GenSBOLconv and SimpleDNAplot submodules. Here, we exemplified the conversion of a GenBank file to SBOL file, which encodes an AND logic gate for a blue-light inducible system, using the run_sbolvalidator function from GenSBOLconv class. This function enables the interconversion of GenBank, Fasta, GFF3 and SBOL files. With the provided GenBank file, the linear and circular plasmid maps can be exported. Users can also employ the plot_circuit function from SimpleDNAplot class to generate the SBOL-compliant gene circuit diagram. The circuit configuration and the corresponding regulations were to be defined in the form of string following proper sequences separated by spaces. The alphabets p, r, c, t, o represent the promoter, ribosome binding site, coding sequence, terminator and origin with the negative sign denoting the reverse direction. Each of the parts consists of the part type followed by the color (optional) and part name (optional). The regulations were defined in the form of ‘from part-&gt;to part’ followed by the type of regulation and color (optional). The parts were numbered starting from 0 following the sequences defined in circuit from left to right.</p>
        </caption>
        <graphic xlink:href="ysab001f4"/>
      </fig>
      <fig id="ysab001-F5" orientation="portrait" position="float">
        <label>Code Block 2.</label>
        <caption>
          <p>Demonstration of the features of SBMLgen and SEDMLOMEXgen submodules. To generate a SBML file, the function export_sbml from the SBMLgen class is used to generate the ANDgate_sbml.xml file. Input arguments such as ODEs, variables, initial conditions, parameters’ names, values and units have to be defined and provided into the function. To generate the COMBINE omex file, the previously generated SBML file is read and converted into an antimony string representation using function from SEDMLOMEXgen submodule. Users can then define the phrasedml string which encodes the descriptions for the simulation experiment. The antimony and the phrasedml strings are then supplied as input arguments to the export_omex function to generate the corresponding omex file.</p>
        </caption>
        <graphic xlink:href="ysab001f5"/>
      </fig>
      <fig id="ysab001-F6" orientation="portrait" position="float">
        <label>Code Block 3.</label>
        <caption>
          <p>Demonstration of the lab automation module. First, a 96 well source plate object is created, followed by two lines which fill the wells of that plate with content of given volume (plate is created empty). Next, a 384 well destination plate is created, then two transfers from source wells to destination wells are defined. Finally, a picklist is created, and the transfers are added to it. The user can then choose to simulate the picklist to see if the transfers are resolved correctly.</p>
        </caption>
        <graphic xlink:href="ysab001f6"/>
      </fig>
      <p>Potential tools for future incorporation are as follows, and readers are encouraged to contact the Authors with comments regarding their prioritization and to make further suggestions.</p>
      <list list-type="alpha-lower">
        <list-item>
          <p>‘Cello’ allows for the automatic design of genetic logic gates using a high-level language known as Verilog. Circuit performance can be predicted, factoring in growth and load (<xref rid="ysab001-B28" ref-type="bibr">28</xref>).</p>
        </list-item>
        <list-item>
          <p>The ‘RBS Calculator’ predicts translation initiation rates, based on the start codon of mRNA transcripts, and designs and optimizes synthetic ribosome binding site (RBS) sequences to achieve a desired translation rate (<xref rid="ysab001-B34" ref-type="bibr">34</xref>).</p>
        </list-item>
        <list-item>
          <p>The ‘Biomodel Selection System (BMSS)’ automatically derives or selects the best mathematical model based upon part/circuit characterization data (<xref rid="ysab001-B7" ref-type="bibr">7</xref>).</p>
        </list-item>
        <list-item>
          <p>sRNA design tools include ‘IntaRNA’ which is used to predict the mRNA target sites for a given sRNA or to predict the interactions between two RNA molecules. ‘CopraRNA’ is built upon IntaRNA and computes whole-genome sRNA target predictions for a set of given organisms (<xref rid="ysab001-B35" ref-type="bibr">35</xref>).</p>
        </list-item>
        <list-item>
          <p>gRNA design tools. ‘Cas-OFFinder’, ‘CHOPCHOP’ and ‘CRISPOR’ are free web-based tools which allow off-target site analysis, with some providing specificity scores and cleavage likelihood of a gene sequence (<xref rid="ysab001-B36" ref-type="bibr">36</xref>).</p>
        </list-item>
      </list>
      <p>The overarching goal is to support the interoperability of file formats and software tools, from sequence design, through automation, data analysis and representation, and machine learning, allowing for the development of computational pipelines across the DBTL cycle, complementing the work conducted on the bench.</p>
    </sec>
  </sec>
  <sec sec-type="conclusion">
    <title>Conclusion</title>
    <p>This work introduces SynBiopython, in which initial efforts in creating a standardized, open-source, Python library to be used in biofoundry-type facilities around the world are demonstrated. The library is modeled on the existing Biopython library, being divided into modules of different functionalities. To our knowledge, this is the first synthetic biology specific software package for standardizing development efforts across automated synbio facilities.</p>
    <p>It is strongly envisaged that SynBiopython will be a community effort. As the global biofoundry community grows and more labs join the automation effort, the hope is to attract more developers and other stakeholders. A key goal is for members of the community to offer additional modules, used locally in their own labs but with perhaps wider utility, and thereby to help with the development and curation of the package. Such an approach has many mutual benefits, reducing duplication of efforts and thereby freeing up resources to focus on the development of more novel and innovative methods. It is clear that there are developers and users in the general synbio community with skills and interests that would benefit the development efforts of the SynBiopython package, and interested members are encouraged to mail <email>info@synbiopython.org</email> to discuss their potential involvement.</p>
    <p>With an increasing number of contributors, a governance model will also be developed to help steer the future development of the package. Such governance matters include deciding on the scope of the package and which new modules to prioritize, and more technical matters including code standardization, automated testing and documentation requirements. All such decisions will be made with the consultation of the SynBiopython development community and more details can be found in the relevant file in the Github repository.</p>
    <p>With the introduction of the SynBiopython package, a clear mechanism for the sharing and reusability of code being developed in individual biofoundries is proposed. Promoting such standardization and interoperability is not intended to stifle innovation, but rather to support the development of novel approaches through reducing effort spent on finding solutions to universal problems that are shared across many labs. Such developments are of benefit to all stakeholders in synthetic biology, from lab-based researchers, informaticians, research leaders and funders.</p>
    <fig id="ysab001-F7" orientation="portrait" position="float">
      <label>Code Block 4:</label>
      <caption>
        <p>Demonstration of the features of the Codon Usage module, codon. The taxonomy_utils module supports mapping between organism names and taxonomy ids. The names and the taxonomy ids can be used to retrieve the codon usage table which is a simple dictionary of amino acids to codons, and the codons are themselves a dictionary of a codon to usage frequency.</p>
      </caption>
      <graphic xlink:href="ysab001f7"/>
    </fig>
  </sec>
</body>
<back>
  <sec>
    <title>Funding</title>
    <p>N.S. acknowledges funding from the Biotechnology and Biological Sciences Research Council (BBSRC) under grant ‘GeneORator: a novel and high-throughput method for the synthetic biology-based improvement of any enzyme’ (BB/S004955/1) and from the University of Liverpool. The Edinburgh Genome Foundry is supported by the UK Research Councils Synthetic Biology for Growth Programme and acknowledges funding from BBSRC grants (BB/M00029X/1, BB/M025640/1, BB/M025659/1, BB/M018040/1). SYNBIOCHEM is supported by the UK Biotechnology and Biological Sciences Research Council (BBSRC) and the Engineering and Physical Sciences Research Council (EPSRC) under grant: ‘Centre for synthetic biology of fine and speciality chemicals (SYNBIOCHEM)’ (BB/M017702/1). P.C. acknowledges support from the Universitat Politècnica de València Talento Programme. M.B.H. acknowledges support from CSIRO’s Synthetic Biology Future Science Platform. C.L.P. acknowledges support from Singapore NRF Synthetic Biology Program (SBP-P5, SBP-P6) and the Synthetic Biology Initiative of the National University of Singapore (DPRT/943/09/14).</p>
    <p><italic>Conflict of interest statement</italic>. None declared.</p>
  </sec>
  <sec>
    <title>Code availability</title>
    <p>The code repository for SynBioPython is located on Github: https://github.com/Global-Biofoundries-Alliance/SynBioPython</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="ysab001-B1">
      <label>1</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cardoso</surname><given-names>J.G.R.</given-names></string-name>, <string-name><surname>Jensen</surname><given-names>K.</given-names></string-name>, <string-name><surname>Lieven</surname><given-names>C.</given-names></string-name>, <string-name><surname>Lærke Hansen</surname><given-names>A.S.</given-names></string-name>, <string-name><surname>Galkina</surname><given-names>S.</given-names></string-name>, <string-name><surname>Beber</surname><given-names>M.</given-names></string-name>, <string-name><surname>Özdemir</surname><given-names>E.</given-names></string-name>, <string-name><surname>Herrgård</surname><given-names>M.J.</given-names></string-name>, <string-name><surname>Redestig</surname><given-names>H.</given-names></string-name>, <string-name><surname>Sonnenschein</surname><given-names>N.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Cameo: a Python library for computer aided metabolic engineering and optimization of cell factories</article-title>. <source>ACS Synth. Biol</source>., <volume>7</volume>, <fpage>1163</fpage>–<lpage>1166</lpage>.<pub-id pub-id-type="pmid">29558112</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B2">
      <label>2</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Delépine</surname><given-names>B.</given-names></string-name>, <string-name><surname>Duigou</surname><given-names>T.</given-names></string-name>, <string-name><surname>Carbonell</surname><given-names>P.</given-names></string-name>, <string-name><surname>Faulon</surname><given-names>J.-L.</given-names></string-name></person-group> (<year>2018</year>) <article-title>RetroPath2.0: a retrosynthesis workflow for metabolic engineers</article-title>. <source>Metab. Eng</source>., <volume>45</volume>, <fpage>158</fpage>–<lpage>170</lpage>.<pub-id pub-id-type="pmid">29233745</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B3">
      <label>3</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zulkower</surname><given-names>V.</given-names></string-name>, <string-name><surname>Rosser</surname><given-names>S.</given-names></string-name></person-group> (<year>2020</year>) <article-title>DNA Chisel, a versatile sequence optimizer</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, <fpage>4508</fpage>–<lpage>4509</lpage>.<pub-id pub-id-type="pmid">32647895</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B4">
      <label>4</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Swainston</surname><given-names>N.</given-names></string-name>, <string-name><surname>Dunstan</surname><given-names>M.</given-names></string-name>, <string-name><surname>Jervis</surname><given-names>A.J.</given-names></string-name>, <string-name><surname>Robinson</surname><given-names>C.J.</given-names></string-name>, <string-name><surname>Carbonell</surname><given-names>P.</given-names></string-name>, <string-name><surname>Williams</surname><given-names>A.R.</given-names></string-name>, <string-name><surname>Faulon</surname><given-names>J.-L.</given-names></string-name>, <string-name><surname>Scrutton</surname><given-names>N.S.</given-names></string-name>, <string-name><surname>Kell</surname><given-names>D.B.</given-names></string-name></person-group> (<year>2018</year>) <article-title>PartsGenie: an integrated tool for optimizing and sharing synthetic biology parts</article-title>. <source>Bioinformatics</source>, <volume>34</volume>, <fpage>2327</fpage>–<lpage>2329</lpage>.<pub-id pub-id-type="pmid">29949952</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B5">
      <label>5</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chandran</surname><given-names>S.</given-names></string-name></person-group> (<year>2017</year>) <article-title>Rapid assembly of DNA via ligase cycling reaction (LCR)</article-title>. <source>Methods Mol. Biol</source>., <volume>1472</volume>, <fpage>105</fpage>–<lpage>110</lpage>.<pub-id pub-id-type="pmid">27671935</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B6">
      <label>6</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Katajamaa</surname><given-names>M.</given-names></string-name>, <string-name><surname>Miettinen</surname><given-names>J.</given-names></string-name>, <string-name><surname>Oresic</surname><given-names>M.</given-names></string-name></person-group> (<year>2006</year>) <article-title>MZmine: toolbox for processing and visualization of mass spectrometry based molecular profile data</article-title>. <source>Bioinformatics</source>, <volume>22</volume>, <fpage>634</fpage>–<lpage>636</lpage>.<pub-id pub-id-type="pmid">16403790</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B7">
      <label>7</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yeoh</surname><given-names>J.W.</given-names></string-name>, <string-name><surname>Ng</surname><given-names>K.B.I.</given-names></string-name>, <string-name><surname>Teh</surname><given-names>A.Y.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>J.Y.</given-names></string-name>, <string-name><surname>Chee</surname><given-names>W.K.D.</given-names></string-name>, <string-name><surname>Poh</surname><given-names>C.L.</given-names></string-name></person-group> (<year>2019</year>) <article-title>An automated biomodel selection system (BMSS) for gene circuit designs</article-title>. <source>ACS Synth. Biol</source>., <volume>8</volume>, <fpage>1484</fpage>–<lpage>1497</lpage>.<pub-id pub-id-type="pmid">31035759</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B8">
      <label>8</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ebrahim</surname><given-names>A.</given-names></string-name>, <string-name><surname>Lerman</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Palsson</surname><given-names>B.O.</given-names></string-name>, <string-name><surname>Hyduke</surname><given-names>D.R.</given-names></string-name></person-group> (<year>2013</year>) <article-title>COBRApy: COnstraints-based reconstruction and analysis for Python</article-title>. <source>BMC Syst. Biol</source>., <volume>7</volume>, <fpage>74</fpage>.<pub-id pub-id-type="pmid">23927696</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B9">
      <label>9</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cock</surname><given-names>P.J.A.</given-names></string-name>, <string-name><surname>Antao</surname><given-names>T.</given-names></string-name>, <string-name><surname>Chang</surname><given-names>J.T.</given-names></string-name>, <string-name><surname>Chapman</surname><given-names>B.A.</given-names></string-name>, <string-name><surname>Cox</surname><given-names>C.J.</given-names></string-name>, <string-name><surname>Dalke</surname><given-names>A.</given-names></string-name>, <string-name><surname>Friedberg</surname><given-names>I.</given-names></string-name>, <string-name><surname>Hamelryck</surname><given-names>T.</given-names></string-name>, <string-name><surname>Kauff</surname><given-names>F.</given-names></string-name>, <string-name><surname>Wilczynski</surname><given-names>B.</given-names></string-name></person-group><etal>et al</etal> (<year>2009</year>) <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1422</fpage>–<lpage>1423</lpage>.<pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B10">
      <label>10</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hillson</surname><given-names>N.</given-names></string-name>, <string-name><surname>Caddick</surname><given-names>M.</given-names></string-name>, <string-name><surname>Cai</surname><given-names>Y.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>Building a global alliance of biofoundries (vol 10, 2040, 2019)</article-title>. <source>Nat. Commun</source>., <volume>10, 1–4</volume>.</mixed-citation>
    </ref>
    <ref id="ysab001-B11">
      <label>11</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Benson</surname><given-names>D.A.</given-names></string-name>, <string-name><surname>Boguski</surname><given-names>M.S.</given-names></string-name>, <string-name><surname>Lipman</surname><given-names>D.J.</given-names></string-name>, <string-name><surname>Ostell</surname><given-names>J.</given-names></string-name>, <string-name><surname>Ouellette</surname><given-names>B.F.F.</given-names></string-name>, <string-name><surname>Rapp</surname><given-names>B.A.</given-names></string-name>, <string-name><surname>Wheeler</surname><given-names>D.L.</given-names></string-name></person-group> (<year>1999</year>) <article-title>GenBank</article-title>. <source>Nucleic Acids Res</source>., <volume>27</volume>, <fpage>12</fpage>–<lpage>17</lpage>.<pub-id pub-id-type="pmid">9847132</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B12">
      <label>12</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Galdzicki</surname><given-names>M.</given-names></string-name>, <string-name><surname>Clancy</surname><given-names>K.P.</given-names></string-name>, <string-name><surname>Oberortner</surname><given-names>E.</given-names></string-name>, <string-name><surname>Pocock</surname><given-names>M.</given-names></string-name>, <string-name><surname>Quinn</surname><given-names>J.Y.</given-names></string-name>, <string-name><surname>Rodriguez</surname><given-names>C.A.</given-names></string-name>, <string-name><surname>Roehner</surname><given-names>N.</given-names></string-name>, <string-name><surname>Wilson</surname><given-names>M.L.</given-names></string-name>, <string-name><surname>Adam</surname><given-names>L.</given-names></string-name>, <string-name><surname>Anderson</surname><given-names>J.C.</given-names></string-name></person-group><etal>et al</etal> (<year>2014</year>) <article-title>The Synthetic Biology Open Language (SBOL) provides a community standard for communicating designs in synthetic biology</article-title>. <source>Nat. Biotechnol</source>., <volume>32</volume>, <fpage>545</fpage>–<lpage>550</lpage>.<pub-id pub-id-type="pmid">24911500</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B13">
      <label>13</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M.</given-names></string-name>, <string-name><surname>Finney</surname><given-names>A.</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>H.M.</given-names></string-name></person-group><etal>et al</etal> (<year>2003</year>) <article-title>The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models</article-title>. <source>Bioinformatics</source>, <volume>19</volume>, <fpage>524</fpage>–<lpage>531</lpage>.<pub-id pub-id-type="pmid">12611808</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B14">
      <label>14</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Waltemath</surname><given-names>D.</given-names></string-name>, <string-name><surname>Adams</surname><given-names>R.</given-names></string-name>, <string-name><surname>Bergmann</surname><given-names>F.T.</given-names></string-name>, <string-name><surname>Hucka</surname><given-names>M.</given-names></string-name>, <string-name><surname>Kolpakov</surname><given-names>F.</given-names></string-name>, <string-name><surname>Miller</surname><given-names>A.K.</given-names></string-name>, <string-name><surname>Moraru</surname><given-names>I.I.</given-names></string-name>, <string-name><surname>Nickerson</surname><given-names>D.</given-names></string-name>, <string-name><surname>Sahle</surname><given-names>S.</given-names></string-name>, <string-name><surname>Snoep</surname><given-names>J.L.</given-names></string-name></person-group><etal>et al</etal> (<year>2011</year>) <article-title>Reproducible computational biology experiments with SED-ML—the Simulation Experiment Description Markup Language</article-title>. <source>BMC Syst. Biol</source>., <volume>5</volume>, <fpage>198</fpage>.<pub-id pub-id-type="pmid">22172142</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B15">
      <label>15</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bergmann</surname><given-names>F.T.</given-names></string-name>, <string-name><surname>Adams</surname><given-names>R.</given-names></string-name>, <string-name><surname>Moodie</surname><given-names>S.</given-names></string-name>, <string-name><surname>Cooper</surname><given-names>J.</given-names></string-name>, <string-name><surname>Glont</surname><given-names>M.</given-names></string-name>, <string-name><surname>Golebiewski</surname><given-names>M.</given-names></string-name>, <string-name><surname>Hucka</surname><given-names>M.</given-names></string-name>, <string-name><surname>Laibe</surname><given-names>C.</given-names></string-name>, <string-name><surname>Miller</surname><given-names>A.K.</given-names></string-name>, <string-name><surname>Nickerson</surname><given-names>D.P.</given-names></string-name></person-group><etal>et al</etal> (<year>2014</year>) <article-title>COMBINE archive and OMEX format: one file to share all information to reproduce a modeling project</article-title>. <source>BMC Bioinformatics</source>, <volume>15</volume>, <fpage>369</fpage>.<pub-id pub-id-type="pmid">25494900</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B16">
      <label>16</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zundel</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Samineni</surname><given-names>M.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name></person-group> (<year>2017</year>) <article-title>A validator and converter for the synthetic biology open language</article-title>. <source>ACS Synth. Biol</source>., <volume>6</volume>, <fpage>1161</fpage>–<lpage>1168</lpage>.<pub-id pub-id-type="pmid">28033703</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B17">
      <label>17</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Der</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Glassey</surname><given-names>E.</given-names></string-name>, <string-name><surname>Bartley</surname><given-names>B.A.</given-names></string-name>, <string-name><surname>Enghuus</surname><given-names>C.</given-names></string-name>, <string-name><surname>Goodman</surname><given-names>D.B.</given-names></string-name>, <string-name><surname>Gordon</surname><given-names>D.B.</given-names></string-name>, <string-name><surname>Voigt</surname><given-names>C.A.</given-names></string-name>, <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group> (<year>2017</year>) <article-title>DNAplotlib: programmable visualization of genetic designs and associated data</article-title>. <source>ACS Synth. Biol</source>., <volume>6</volume>, <fpage>1115</fpage>–<lpage>1119</lpage>.<pub-id pub-id-type="pmid">27744689</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B18">
      <label>18</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Quinn</surname><given-names>J.Y.</given-names></string-name>, <string-name><surname>Cox</surname><given-names>R.S.</given-names></string-name>, <string-name><surname>Adler</surname><given-names>A.</given-names></string-name>, <string-name><surname>Beal</surname><given-names>J.</given-names></string-name>, <string-name><surname>Bhatia</surname><given-names>S.</given-names></string-name>, <string-name><surname>Cai</surname><given-names>Y.</given-names></string-name>, <string-name><surname>Chen</surname><given-names>J.</given-names></string-name>, <string-name><surname>Clancy</surname><given-names>K.</given-names></string-name>, <string-name><surname>Galdzicki</surname><given-names>M.</given-names></string-name>, <string-name><surname>Hillson</surname><given-names>N.J.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>SBOL visual: a graphical language for genetic designs</article-title>. <source>PLoS Biol</source>., <volume>13</volume>, <fpage>e1002310</fpage>.<pub-id pub-id-type="pmid">26633141</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B19">
      <label>19</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Le Novere</surname><given-names>N.</given-names></string-name>, <string-name><surname>Bornstein</surname><given-names>B.</given-names></string-name>, <string-name><surname>Broicher</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2006</year>) <article-title>BioModels Database: a free, centralized database of curated, published, quantitative kinetic models of biochemical and cellular systems</article-title>. <source>Nucleic Acids Res</source>., <volume>34</volume>, <fpage>D689</fpage>–<lpage>D691</lpage>.<pub-id pub-id-type="pmid">16381960</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B20">
      <label>20</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schellenberger</surname><given-names>J.</given-names></string-name>, <string-name><surname>Park</surname><given-names>J.O.</given-names></string-name>, <string-name><surname>Conrad</surname><given-names>T.M.</given-names></string-name>, <string-name><surname>Palsson</surname><given-names>B.Ø.</given-names></string-name></person-group> (<year>2010</year>) <article-title>BiGG: a Biochemical Genetic and Genomic knowledgebase of large scale metabolic reconstructions</article-title>. <source>BMC Bioinformatics</source>, <volume>11</volume>, <fpage>213</fpage>.<pub-id pub-id-type="pmid">20426874</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B21">
      <label>21</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Cannistra</surname><given-names>C.</given-names></string-name>, <string-name><surname>Medley</surname><given-names>K.</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>H.</given-names></string-name></person-group> (<year>2015</year>) SimpleSBML: a Python package for creating and editing SBML models. <italic>BioRxiv; 030312</italic>. doi: 10.1101/030312.</mixed-citation>
    </ref>
    <ref id="ysab001-B22">
      <label>22</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bornstein</surname><given-names>B.J.</given-names></string-name>, <string-name><surname>Keating</surname><given-names>S.M.</given-names></string-name>, <string-name><surname>Jouraku</surname><given-names>A.</given-names></string-name>, <string-name><surname>Hucka</surname><given-names>M.</given-names></string-name></person-group> (<year>2008</year>) <article-title>LibSBML: an API library for SBML</article-title>. <source>Bioinformatics</source>, <volume>24</volume>, <fpage>880</fpage>–<lpage>881</lpage>.<pub-id pub-id-type="pmid">18252737</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B23">
      <label>23</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Choi</surname><given-names>K.</given-names></string-name>, <string-name><surname>Medley</surname><given-names>J.K.</given-names></string-name>, <string-name><surname>König</surname><given-names>M.</given-names></string-name>, <string-name><surname>Stocking</surname><given-names>K.</given-names></string-name>, <string-name><surname>Smith</surname><given-names>L.</given-names></string-name>, <string-name><surname>Gu</surname><given-names>S.</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>H.M.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Tellurium: an extensible python-based modeling environment for systems and synthetic biology</article-title>. <source>Biosystems</source>, <volume>171</volume>, <fpage>74</fpage>–<lpage>79</lpage>.<pub-id pub-id-type="pmid">30053414</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B24">
      <label>24</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jayaraman</surname><given-names>P.</given-names></string-name>, <string-name><surname>Devarajan</surname><given-names>K.</given-names></string-name>, <string-name><surname>Chua</surname><given-names>T.K.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>H.</given-names></string-name>, <string-name><surname>Gunawan</surname><given-names>E.</given-names></string-name>, <string-name><surname>Poh</surname><given-names>C.L.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Blue light-mediated transcriptional activation and repression of gene expression in bacteria</article-title>. <source>Nucleic Acids Res</source>., <volume>44</volume>, <fpage>6994</fpage>–<lpage>7005</lpage>.<pub-id pub-id-type="pmid">27353329</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B25">
      <label>25</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jayaraman</surname><given-names>P.</given-names></string-name>, <string-name><surname>Yeoh</surname><given-names>J.W.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>J.</given-names></string-name>, <string-name><surname>Poh</surname><given-names>C.L.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Programming the dynamic control of bacterial gene expression with a chimeric ligand- and light-based promoter system</article-title>. <source>ACS Synth. Biol</source>., <volume>7</volume>, <fpage>2627</fpage>–<lpage>2639</lpage>.<pub-id pub-id-type="pmid">30359530</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B26">
      <label>26</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Keller</surname><given-names>B.</given-names></string-name>, <string-name><surname>Vrana</surname><given-names>J.</given-names></string-name>, <string-name><surname>Miller</surname><given-names>A.</given-names></string-name></person-group>, <etal>et al</etal> Aquarium: the laboratory operating system (Version v2.5.0). Zenodo.</mixed-citation>
    </ref>
    <ref id="ysab001-B27">
      <label>27</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nakamura</surname><given-names>Y.</given-names></string-name>, <string-name><surname>Gojobori</surname><given-names>T.</given-names></string-name>, <string-name><surname>Ikemura</surname><given-names>T.</given-names></string-name></person-group> (<year>2000</year>) <article-title>Codon usage tabulated from international DNA sequence databases: status for the year 2000</article-title>. <source>Nucleic Acids Res</source>., <volume>28</volume>, <fpage>292</fpage>–<lpage>292</lpage>.<pub-id pub-id-type="pmid">10592250</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B28">
      <label>28</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nielsen</surname><given-names>A.A.K.</given-names></string-name>, <string-name><surname>Der</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Shin</surname><given-names>J.</given-names></string-name>, <string-name><surname>Vaidyanathan</surname><given-names>P.</given-names></string-name>, <string-name><surname>Paralanov</surname><given-names>V.</given-names></string-name>, <string-name><surname>Strychalski</surname><given-names>E.A.</given-names></string-name>, <string-name><surname>Ross</surname><given-names>D.</given-names></string-name>, <string-name><surname>Densmore</surname><given-names>D.</given-names></string-name>, <string-name><surname>Voigt</surname><given-names>C.A.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Genetic circuit design automation</article-title>. <source>Science</source>, <volume>352</volume>, <fpage>aac7341</fpage>.<pub-id pub-id-type="pmid">27034378</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B29">
      <label>29</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Watanabe</surname><given-names>L.</given-names></string-name>, <string-name><surname>Nguyen</surname><given-names>T.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>M.</given-names></string-name>, <string-name><surname>Zundel</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Madsen</surname><given-names>C.</given-names></string-name>, <string-name><surname>Roehner</surname><given-names>N.</given-names></string-name>, <string-name><surname>Myers</surname><given-names>C.</given-names></string-name></person-group> (<year>2019</year>) <article-title>iBioSim 3: a tool for model-based genetic circuit design</article-title>. <source>ACS Synth. Biol</source>., <volume>8</volume>, <fpage>1560</fpage>–<lpage>1563</lpage>.<pub-id pub-id-type="pmid">29944839</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B30">
      <label>30</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Roehner</surname><given-names>N.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Nguyen</surname><given-names>T.</given-names></string-name>, <string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name></person-group> (<year>2015</year>) <article-title>Generating systems biology markup language models from the synthetic biology open language</article-title>. <source>ACS Synth. Biol</source>., <volume>4</volume>, <fpage>873</fpage>–<lpage>879</lpage>.<pub-id pub-id-type="pmid">25822671</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B31">
      <label>31</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Eilbeck</surname><given-names>K.</given-names></string-name>, <string-name><surname>Lewis</surname><given-names>S.E.</given-names></string-name>, <string-name><surname>Mungall</surname><given-names>C.J.</given-names></string-name>, <string-name><surname>Yandell</surname><given-names>M.</given-names></string-name>, <string-name><surname>Stein</surname><given-names>L.</given-names></string-name>, <string-name><surname>Durbin</surname><given-names>R.</given-names></string-name>, <string-name><surname>Ashburner</surname><given-names>M.</given-names></string-name></person-group> (<year>2005</year>) <article-title>The Sequence Ontology: a tool for the unification of genome annotations</article-title>. <source>Genome Biol</source>., <volume>6</volume>, <fpage>R44</fpage>.<pub-id pub-id-type="pmid">15892872</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B32">
      <label>32</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Juty</surname><given-names>N.</given-names></string-name></person-group> (<year>2010</year>) Systems biology ontology: update. <italic>Nature Precedings</italic>. doi: 10.1038/npre.2010.5121.1.</mixed-citation>
    </ref>
    <ref id="ysab001-B33">
      <label>33</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Carbonell</surname><given-names>P.</given-names></string-name>, <string-name><surname>Radivojevic</surname><given-names>T.</given-names></string-name>, <string-name><surname>García Martín</surname><given-names>H.</given-names></string-name></person-group> (<year>2019</year>) <article-title>Opportunities at the intersection of synthetic biology, machine learning, and automation</article-title>. <source>ACS Synth. Biol</source>., <volume>8</volume>, <fpage>1474</fpage>–<lpage>1477</lpage>.<pub-id pub-id-type="pmid">31319671</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B34">
      <label>34</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Salis</surname><given-names>H.M.</given-names></string-name></person-group> (<year>2011</year>) <article-title>The ribosome binding site calculator</article-title>. <source>Methods Enzymol</source>., <volume>498</volume>, <fpage>19</fpage>–<lpage>42</lpage>.<pub-id pub-id-type="pmid">21601672</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B35">
      <label>35</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wright</surname><given-names>P.R.</given-names></string-name>, <string-name><surname>Georg</surname><given-names>J.</given-names></string-name>, <string-name><surname>Mann</surname><given-names>M.</given-names></string-name>, <string-name><surname>Sorescu</surname><given-names>D.A.</given-names></string-name>, <string-name><surname>Richter</surname><given-names>A.S.</given-names></string-name>, <string-name><surname>Lott</surname><given-names>S.</given-names></string-name>, <string-name><surname>Kleinkauf</surname><given-names>R.</given-names></string-name>, <string-name><surname>Hess</surname><given-names>W.R.</given-names></string-name>, <string-name><surname>Backofen</surname><given-names>R.</given-names></string-name></person-group> (<year>2014</year>) <article-title>CopraRNA and IntaRNA: predicting small RNA targets, networks and interaction domains</article-title>. <source>Nucleic Acids Res</source>., <volume>42</volume>, <fpage>W119</fpage>–<lpage>W123</lpage>.<pub-id pub-id-type="pmid">24838564</pub-id></mixed-citation>
    </ref>
    <ref id="ysab001-B36">
      <label>36</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wilson</surname><given-names>L.O.W.</given-names></string-name>, <string-name><surname>O’Brien</surname><given-names>A.R.</given-names></string-name>, <string-name><surname>Bauer</surname><given-names>D.C.</given-names></string-name></person-group> (<year>2018</year>) <article-title>The current state and future of CRISPR-Cas9 gRNA design tools</article-title>. <source>Front. Pharmacol</source>., <volume>9</volume>, <fpage>749</fpage>.<pub-id pub-id-type="pmid">30050439</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
