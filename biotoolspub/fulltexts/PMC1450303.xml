<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title>BMC Bioinformatics</journal-title>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">1450303</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-7-172</article-id>
    <article-id pub-id-type="pmid">16566824</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-7-172</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>GENOMEMASKER package for designing unique genomic PCR primers</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" contrib-type="author">
        <name>
          <surname>Andreson</surname>
          <given-names>Reidar</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>reidar.andreson@ut.ee</email>
      </contrib>
      <contrib id="A2" contrib-type="author">
        <name>
          <surname>Reppo</surname>
          <given-names>Eric</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>ereppo@biodata.ee</email>
      </contrib>
      <contrib id="A3" contrib-type="author">
        <name>
          <surname>Kaplinski</surname>
          <given-names>Lauris</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I3">3</xref>
        <email>lauris@ebc.ee</email>
      </contrib>
      <contrib id="A4" corresp="yes" contrib-type="author">
        <name>
          <surname>Remm</surname>
          <given-names>Maido</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I3">3</xref>
        <email>maido.remm@ut.ee</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Department of Bioinformatics, University of Tartu, Tartu, Estonia</aff>
    <aff id="I2"><label>2</label>BioData Ltd., Tartu, Estonia</aff>
    <aff id="I3"><label>3</label>Estonian Biocentre, Tartu, Estonia</aff>
    <pub-date pub-type="collection">
      <year>2006</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>3</month>
      <year>2006</year>
    </pub-date>
    <volume>7</volume>
    <fpage>172</fpage>
    <lpage>172</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/7/172"/>
    <history>
      <date date-type="received">
        <day>19</day>
        <month>9</month>
        <year>2005</year>
      </date>
      <date date-type="accepted">
        <day>27</day>
        <month>3</month>
        <year>2006</year>
      </date>
    </history>
    <copyright-statement>Copyright Â© 2006 Andreson et al; licensee BioMed Central Ltd.</copyright-statement>
    <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
      <p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
    </license>
    <abstract>
      <sec>
        <title>Background</title>
        <p>The design of oligonucleotides and PCR primers for studying large genomes is complicated by the redundancy of sequences. The eukaryotic genomes are particularly difficult to study due to abundant repeats. The speed of most existing primer evaluation programs is not sufficient for large-scale experiments.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>In order to improve the efficiency and success rate of automatic primer/oligo design, we created a novel method which allows rapid masking of repeats in large sequence files, for example in eukaryotic genomes. It also allows the detection of all alternative binding sites of PCR primers and the prediction of PCR products. The new method was implemented in a collection of efficient programs, the GENOMEMASKER package. The performance of the programs was compared to other similar programs. We also modified the PRIMER3 program, to be able to design primers from lowercase-masked sequences.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>The GENOMEMASKER package is able to mask the entire human genome for non-unique primers within 6 hours and find locations of all binding sites for 10 000 designed primer pairs within 10 minutes. Additionally, it predicts all alternative PCR products from large genomes for given primer pairs.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>Microarrays and other genomic technologies allow the testing of thousands of genomic regions from each sample. Most of these methods require PCR amplification to achieve sufficiently strong signals. Therefore, there is a growing need for automatic oligo design and PCR primer design methods. There is always a certain chance that the selected PCR primers have alternative binding sites on the template DNA. It is expected that numerous alternative binding sites of the PCR primers may cause failures in PCR. However, the exact relationship between the number of binding sites in the genome and the success rate is not known. The computational prediction of these unwanted interactions would help to increase the quality of microarrays and genomic PCR and to reduce the cost of related experiments.</p>
    <p>A large variety of PCR primer design programs exist. Nevertheless, only few of them allow some kind of testing for primer uniqueness and/or testing for alternative products from the same template. Some programs use repeat libraries to avoid primer design from repeated regions. For example, a program called PC-RARE uses 8-mer frequency disparity at the 3' end of primers to avoid the risk of non-specific binding of primers [<xref ref-type="bibr" rid="B1">1</xref>]. FAST-PCR program allows homology search against the custom list of repeated sequences [<xref ref-type="bibr" rid="B2">2</xref>]. OLIGO6 [<xref ref-type="bibr" rid="B3">3</xref>] uses libraries that contain all the frequent 6-mer to exclude the primers that contain highly repeated motifs. A well-known PRIMER3 [<xref ref-type="bibr" rid="B4">4</xref>] can be used with the collection of repeats (repeat library) to avoid non-specific binding of primers. However, the primers are compared to a repeat library using the Smith-Waterman algorithm [<xref ref-type="bibr" rid="B5">5</xref>], which makes use of large libraries for the design of a large number of primers slow and therefore unpractical.</p>
    <p>Some programs use suffix trees or suffix arrays to ensure the uniqueness of selected oligos. PICKY is an oligo design software that allows one to create unique hybridisation oligos [<xref ref-type="bibr" rid="B6">6</xref>]. This program uses a suffix-tree based algorithm to test the uniqueness of oligo candidates in a user-given sequence set. Rahmann presents a method that uses the longest common substring as a specificity measure for candidate oligos [<xref ref-type="bibr" rid="B7">7</xref>]. This algorithm is based on a suffix array with additional information that is efficient both in terms of memory usage and running time to rank all candidate oligos according to their specificity.</p>
    <p>The masking of repeats on the template DNA is another common approach that is used to avoid non-specific binding. DUST [<xref ref-type="bibr" rid="B8">8</xref>] and TandemRepeatsFinder [<xref ref-type="bibr" rid="B9">9</xref>] are commonly used for masking simple (short) repeat motifs. RepeatMasker is a universal program that is used for masking out several kinds of repeats and therefore mostly used for this kind of sequence analysis [<xref ref-type="bibr" rid="B10">10</xref>]. Similarly, BLAST [<xref ref-type="bibr" rid="B11">11</xref>] can be used to mask the non-unique regions of the genome [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>]. Onodera and Melcher have found that unfavored and preferred 3' end triplets existed in different viral genome sequences [<xref ref-type="bibr" rid="B14">14</xref>]. They recommend a scoring system incorporating empirical frequencies of different 3' end triplets and that information may be used in masking primer candidates with poor success rate in other genomic sequences.</p>
    <p>Another widely used method related to the success of the PCR is prediction of all PCR products from the genome sequence. This process is known as electronic PCR (e-PCR) or virtual PCR (vPCR). Electronic PCR was first developed to detect the presence of sequence tagged sites (STS) in template DNA [<xref ref-type="bibr" rid="B15">15</xref>]. Virtual PCR is a web based service that predicts PCR products from different genomes [<xref ref-type="bibr" rid="B16">16</xref>]. SPCR is a recently published program that can help the user to choose a PCR primer pair giving the least possible non-targeted products [<xref ref-type="bibr" rid="B17">17</xref>]. Its algorithm is based on the hypothesis that the annealing of a primer to a template is an information transfer process. We will use the term 'e-PCR' for all similar computational predictions of PCR products throughout this paper. The process of e-PCR is typically performed with the help of sequence alignment software, which counts the number of identical or nearly identical matches between the primer and the template DNA. The BLAST program is most frequently used for this purpose in multiple applications [<xref ref-type="bibr" rid="B18">18</xref>-<xref ref-type="bibr" rid="B20">20</xref>]. Nevertheless, the speed of BLAST is not sufficient for e-PCR in large eukaryotic genomes with large number of primers. High-speed methods applicable to large-scale problems are becoming more important with the increasing number of genome sequences. The speed can be increased by using MEGABLAST [<xref ref-type="bibr" rid="B21">21</xref>], BLAT [<xref ref-type="bibr" rid="B22">22</xref>] or SSAHA [<xref ref-type="bibr" rid="B23">23</xref>] which are specifically designed for large scale sequence search and alignment. A primer design program called MuPlex includes BLAT software to align primer candidates against genomic DNA [<xref ref-type="bibr" rid="B24">24</xref>]. These methods are relatively fast, but unfortunately all of them require specific parsers to count all primer binding sites and to find all PCR products on the template DNA. PRIMEX [<xref ref-type="bibr" rid="B25">25</xref>], on the other hand is specifically designed for testing oligos and counting primer binding sites from genomic DNA. Another recently reported program, me-PCR [<xref ref-type="bibr" rid="B26">26</xref>], is designed for the detection of locations of STS markers in the human genome and is helpful for the detection of PCR products of any type. There is a similar program called In-Situ PCR (isPCR) [<xref ref-type="bibr" rid="B27">27</xref>] created by Jim Kent that is also designed for predicting possible PCR products that two primers could produce.</p>
    <p>In this paper, we describe a novel and efficient method, which masks large sequence files for repeats, performs a rapid prediction of all binding sites of PCR primers and predicts possible PCR products. The efficiency of our program is compared to several existing methods.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <sec>
      <title>Components of the software package</title>
      <p>The GENOMEMASKER package can be divided into two separate parts: 1. A repeat masking application (GenomeMasker with auxiliary programs), 2. An e-PCR application for predicting primer binding sites and PCR products (GenomeTester with auxiliary programs). They contain the following executables:</p>
      <sec>
        <title>1. GenomeMasker application</title>
        <p><italic>glistmaker </italic>â creates a so called blacklist of over-represented (occurring more frequently than user-defined threshold) primer binding sites in a given genome.</p>
        <p><italic>gmasker </italic>â performs a binary search in the blacklist for each studied FastA sequence and masks the words present in the blacklist.</p>
        <p><italic>gm_primer3 </italic>â a modified PRIMER3 program that is able to use <italic>gmasker </italic>output for primer design.</p>
      </sec>
      <sec>
        <title>2. GenomeTester application</title>
        <p><italic>gindexer </italic>â creates binary index files containing locations of all the predicted binding sites in a given genome.</p>
        <p><italic>gtester </italic>â performs a binary search in index files for each primer to locate all their binding sites in a given genome.</p>
        <p><italic>gt2multiplex </italic>â extracts nucleotide sequences of all PCR products from template sequence using the output information of <italic>gtester</italic>.</p>
      </sec>
    </sec>
    <sec>
      <title>The GenomeMasker algorithm</title>
      <p>The first part of the package â GenomeMasker application â contains programs required for the masking of repeated primer binding sites on the template DNA. The program <italic>glistmaker </italic>reads through the template sequence(s) and counts the number of occurrences of each word of user-defined length. After that it creates a blacklist containing only over-represented words, encoded into 32 bit integers. The encoding is done by allocating two consecutive bits for each nucleotide in a word. Thus the maximum word length in current implementation is 16 nucleotides. We define the over-represented word as the sequence that occurs in the given genome more times than a user-given cutoff (eg. 1, 2, 3, etc.). The entire list of encoded words is sorted for faster access. The input for <italic>glistmaker </italic>is one or more FastA files (either DNA template or genome/chromosome sequences).</p>
      <p>The program <italic>gmasker </italic>uses blacklist file as a reference to mask the sequence file in FastA format. It iterates over the whole input sequence with step 1 nucleotide and checks forward word, its reverse complement or both against the blacklist. If a given word is in the blacklist, the corresponding word in the template sequence is masked. Only one nucleotide at the 3' end of the matching word is masked by default, because this should be sufficient to avoid most of the low-success PCR primers. Nevertheless, the user can define how many nucleotides will be masked by <italic>gmasker </italic>with a special option. The output of the program is a FastA file identical to input file, except that it contains masked nucleotides (uppercase letter changed to lowercase letter) in regions where primers should not be selected. Instead of uppercase-lowercase masking, any user-defined character can also be used for masking by <italic>gmasker</italic>. However, the lowercase masking is recommended because it maintains the sequence information at masked sites and allows subsequent primer design from the masked sequence.</p>
      <p>The program <italic>gm_primer3 </italic>is a modification of PRIMER3 that is able to use the lowercase-masked sequence for primer design. The overall functionality and algorithm of the program is the same as in the original PRIMER3, but we have added a new filtering feature that rejects the primer candidates with lowercase letters in 3' end. However, <italic>gm_primer3 </italic>can be used to design primers from templates masked by other methods as well.</p>
    </sec>
    <sec>
      <title>The GenomeTester algorithm</title>
      <p>The second part of the package, the GenomeTester application, contains programs for predicting primer binding sites and PCR products in long template DNA sequences, e.g. eukaryotic genomes. The program <italic>gindexer </italic>is needed to create index files for <italic>gtester </italic>to work. It creates 4 different index files for each sequence file â all words starting with A, C, T and G nucleotide. For example, four index files will be created for 24 human chromosomes creating a total number of 96 files. The creation of a separate index file for each nucleotide is necessary to reduce the file size and memory usage of <italic>gtester</italic>. In an index file we keep 8 bytes of data for each occurrence of each word in the whole genomic sequence. The first 4 bytes represent the word, encoded as 32 bit integer, 2 bits per nucleotide. The last 4 bytes contain the position of the current occurrence of the word in the genomic sequence. The word length can be specified by the user within the range between 8 and 16 nucleotides. The entire file is sorted by the encoded word (by first 4 bytes) in order to allow high speed binary search with the <italic>gtester</italic>. The sequence files of chromosomes in FastA format are used as input of <italic>gindexer</italic>.</p>
      <p>The program <italic>gtester </italic>works in four steps. During the first step, it creates an array structure of primer pairs. For each primer pair, it takes a word of given length (the same length as was used for creation of index files) from the 3' end of the primer and creates 2 words â one original and one reverse complement. In step 2, a binary search is performed with all words in the array against index files. Another list with the locations of the binding sites is created in step 3. Finally, the program finds all PCR products that are possibly synthesized by the given primer pair hybridizing on both sense and antisense chains of the DNA. PCR products generated by a single primer are also considered. For both parts of the package, primer binding sites can be modelled with a custom, user-defined word length.</p>
    </sec>
    <sec>
      <title>Advantages of our implementation</title>
      <p>The speed of the programs in this package is achieved by extensive pre-processing of the genomic data. Both applications, GenomeMasker and GenomeTester, require preprocessed files to work efficiently. During the creation of these files all the locations in the genome are counted, sorted and recorded in a binary format. The blacklist of GenomeMasker contains the list of all over-represented binding sites. The index files of GenomeTester contain a list of all binding sites together with their location in the genome. There are two reasons why GenomeTester and GenomeMasker are faster than most other similar applications. First, both of them use the fast binary search algorithm which runs in O(log <italic>n</italic>) time. The binary search algorithm [<xref ref-type="bibr" rid="B28">28</xref>] can be briefly explained as follows. The search itself begins by examining the value in the center of the list (index). These values in the list are sorted, so the program knows whether the value occurs before or after the center value. Then the program searches through the correct half in the same way as before. Those cycles will be repeated until the searched value is found or until there are no more values to check. The second advantage of our programs is an on-demand memory-mapping technique that allows us to achieve optimal speed for analyzing both small and large input datasets. The programs <italic>gmasker </italic>and <italic>gtester </italic>also use an on-demand memory-mapping technique. Instead of pre-reading the entire index into memory they only read the requested parts (positions in the middle of intervals). Those parts will stay in a memory cache and thus the search speed per string will increase gradually when using more search strings, as more of the index will need to be read into the memory.</p>
    </sec>
    <sec>
      <title>Parameters for comparing different programs</title>
      <p>All software programs were tested on assembled chromosome sequences derived from ENSEMBL database Human 19.34 (NCBI Build 34). The computational performance tests described here were obtained by running all the programs on a 2.66 GHz Intel Xeonâ¢ processor machine with 6 GB of RAM.</p>
      <p>RepeatMasker (version 2004/03/06) was used with different sensitivity parameters -s, -q and -qq. -s means "slow search", which is 0â5% more sensitive and 2â3 times slower than default. -q is a "quick search", 5â10% less sensitive and 2â5 times faster than default. -qq is a "rush job", about 10% less sensitive and 4â&gt;10 times faster than default. We used RepBase Update [<xref ref-type="bibr" rid="B29">29</xref>] 8.12 library (6 March 2004) of repeated motifs in human genome. DUST was used with default parameters. TandemRepeatFinder was used with alignment parameters (match, mismatch, indels) 2, 7 and 7, minimum alignment score to report repeat 50 and maximum period size 500. GenomeMasker blacklist was created with word length 12 and word length 16 and with over-represented cutoffs 1000 and 10 respectively. The masking program <italic>gmasker </italic>was used with masking letter parameter 'l' (lower-case masking) and masking type parameter 'target 500 501'.</p>
      <p>The SSAHA indexes were created with the word length parameter (-wl) 10 and step length (-sl) 1. SSAHA searches were performed with match lengths (-ml) 16. PRIMEX indexes were created with default parameters and word length (-wl) 10. The number of mismatches allowed in each lookup table word (-m1) and the number of mismatches allowed in the entire query (-m2) were set to 0 and 1 respectively. Me-PCR was executed with parameters: word size (W) 11, number of mismatches allowed (N) 0, margin (M) 500 and default PCR size (Z) 240. The parameters as word size (-W) 12 and maximal total length of queries for a single search (-M) 16 were used for MEGABLAST. All results were parsed with word length 16 (32 bits for BLAST and MEGABLAST). The maximum size of the PCR product (-maxSize) was set to 1000 bp with stand-alone isPCR. GenomeTester indexes were created with word length 16 and the program <italic>gtester </italic>was used with default parameters.</p>
    </sec>
  </sec>
  <sec>
    <title>Results</title>
    <sec>
      <title>The GenomeMasker package</title>
      <p>Predicting the number and location of PCR primer binding sites in large genomes can pose computational challenges. Therefore we have designed a software package GENOMEMASKER that helps to achieve a fully automatic sequence masking and PCR primer testing for large genomic applications. The first part of the package â GenomeMasker â is designed to mask all repeated primer binding sites in the template sequence to avoid selection of such primers. The essence of sequence masking is in finding and marking sequence regions with specific properties, e.g. repeated regions of sequence. Masked nucleotides are typically replaced by character 'X' or converted to a lowercase character. Unlike the widely used masking program RepeatMasker, GenomeMasker masks only the 3'-terminal nucleotide of each repeated word, which is sufficient to avoid primer design from the repeated region. To be able to use that masked sequence for designing unique PCR primers, the PRIMER3 program was modified to distinguish between upper- and lowercase letters in a masked template file. If a primer candidate ends with a lower-case letter it will be rejected by PRIMER3 and unique primer will be designed from the remaining candidates. However, other primer design methods that can use masked sequence could also work with the GenomeMasker output file.</p>
      <p>Another important test for genomic PCR applications is the prediction of the number of all possible PCR products, which a given primer pair can generate from a given genome. This can effectively be done by the second part of our package called GenomeTester. GenomeTester counts and locates all potential binding sites of the PCR primer pair in the genome and predicts the location of all PCR products that could be generated with these primers. These two main methods â GenomeMasker and GenomeTester â can be used independently.</p>
      <p>Our software models the PCR primer binding site as 100% identical match to a continuous string (word) from primer's 3' end with a fixed length. User defined length in the range of 8 and 16 nucleotides can be used. The bindings with mismatches are not modeled for several reasons. Firstly, for each 16-mer oligonucleotide there are 48 variants with a single mismatch. Counting the number of occurences and keeping track of genomic location of all these variants would increase the computing time significantly. Secondly, it is not known whether counting mismatch containing primer binding sites helps to predict the PCR success rate better than counting full-match primer binding sites. Until the relationship between the number of mismatched binding sites and PCR success is known we prefer not to use mismatched binding sites.</p>
    </sec>
    <sec>
      <title>Workflow of the program package</title>
      <p>Figure <xref ref-type="fig" rid="F1">1</xref> shows the basic workflow of GENOMEMASKER package. In the initial step the blacklist file for GenomeMasker and the binary index files for GenomeTester have to be created by the user from the genomic data in a FastA format. These procedures have to be performed only once for a given set of genomic data and chosen word length. After creating the blacklist file, the user can start masking sequence files containing template DNA regions (in FastA format) with the <italic>gmasker </italic>program and design unique PCR primers with the <italic>gm_primer3 </italic>program. If the user already has PCR primers (tabulated text file), GenomeTester can evaluate the primer pairs by counting the number of all binding sites and possible PCR products and by recording their coordinates. Additionally, with GenomeTester the user can create a special file containing primer and product sequences, which can be used for multiplexing PCR primers into compatible groups by using the previously published program MultiPLX [<xref ref-type="bibr" rid="B30">30</xref>].</p>
      <p>The creation of either a blacklist for GenomeMasker or the indexes for GenomeTester from the entire human genome takes approximately three hours on a Linux server with 2.4 GHz Xeon processor, at least 2 GB of RAM and SCSI disks. Once the preprocessing is done, the masking, primer design and primer testing steps are extremely fast. The algorithmic details are more thoroughly described in the chapter "Implementation and methods".</p>
    </sec>
    <sec>
      <title>GenomeMasker: comparison of repeat masking methods</title>
      <p>To compare the properties of our package with the properties of other repeat detection and masking methods we chose 1000 random regions from the human genome, each 1000 bp long. The sequences were masked with RepeatMasker and GenomeMasker. PCR primer design was attempted from each sequence. Both masking programs were used at similar sensitivities â the overall fraction of masked nucleotides was similar (41% and 37% respectively). The results of masking are shown in Figure <xref ref-type="fig" rid="F2">2</xref>. The general tendency is that masking by GenomeMasker is more detailed than masking by RepeatMasker. In sequences masked by RepeatMasker short repeats are often not detected. Incomplete RepBase libraries may be one of the causes of that. On the other hand some other DNA regions are extensively masked by RepeatMasker and cannot be used for primer design. GenomeMasker, however, masks only a single nucleotide in the 3'-end of each over-represented word it finds. This creates a more detailed masking pattern and allows the design of primers inside complicated regions between repetitive sequences. Detailed masking is legitimate because GenomeMasker assures that any non-masked word is not repeated in the genomic DNA sequence.</p>
      <p>We compared the properties of primers designed from template DNA masked with different programs (Table <xref ref-type="table" rid="T1">1</xref>). In addition to GenomeMasker and RepeatMasker we studied the primers designed from the non-masked templates using the repeat detection library built-in into the PRIMER3 program. We also used short repeats masking programs DUST and TandemRepeatsFinder. The amount of outcoming primers and their properties are rather different. It turns out that using only the default repeat library of PRIMER3, masking with DUST or TandemRepeatsFinder is not sufficient to design non-repeated primers. As much as 39% of primers designed using PRIMER3 repeat library still occur in more than 10 locations in the genome, which, according to our estimates can reduce the success rate of PCR. RepeatMasker is good in avoiding such repeated regions, but unfortunately it tends to mask large regions thus making the primer design impossible in complicated regions. Primer design was not possible in around 31% of randomly chosen regions masked by the RepeatMasker.</p>
      <p>The computational performance of GenomeMasker compared to RepeatMasker is shown in Figure <xref ref-type="fig" rid="F3">3</xref>. RepeatMasker was used with several different sensitivity parameters and GenomeMasker with two different word lengths. GenomeMasker is at least 10 times faster compared to RepeatMasker. To simplify the primer design process, the user can pre-mask the entire human genome within 6â7 hours and subsequently use the masked genomic sequence for various primer design tasks.</p>
    </sec>
    <sec>
      <title>GenomeTester: comparison between e-PCR methods</title>
      <p>Although the masking of template sequences with GenomeMasker avoids low-quality primer design, some primer pairs may still produce two or more alternative PCR products which should be avoided. Also, users may have existing primer pairs that they would like to evaluate against the given genome for the number of binding sites. Therefore, it may be necessary to perform a search against the entire genome for primer binding sites and detect the location of possible products. Such searches are typically done with sequence homology programs (eg. BLAST) or with dedicated e-PCR programs (eg. me-PCR). The computation time and the memory requirements of e-PCR programs are important factors, particularly when dealing with large datasets like eukaryotic genomes. To compare the speed of different methods we created five datasets, consisting of 1, 10, 100, 1000 and 10000 randomly selected primer pairs. All datasets were subjected to the e-PCR against the human genome with seven different programs and the computing time of the results was recorded.</p>
      <p>The results of the comparison are shown in Figure <xref ref-type="fig" rid="F4">4</xref>. The speed difference between the fastest methods and more traditional sequence homology search programs like BLAST and MEGABLAST is more than 100-fold. me-PCR program seems to be more effective for larger datasets than other e-PCR methods. However, one should keep in mind that although the recent e-PCR methods like me-PCR and isPCR are very fast, they are designed to locate PCR products only. Other studied programs are able to record the location and number of all primer binding sites.</p>
      <p>Physical memory requirement for the e-PCR procedure on human chromosomes is approximately 1GB for SSAHA, 500 MB for GenomeTester and isPCR and ca 300 MB for other methods. Please note that all the programs shown in Figure <xref ref-type="fig" rid="F4">4</xref> were compared in standalone mode. The performance of most of the programs can be increased by using server-client architecture (with all the genomic data stored in server RAM).</p>
    </sec>
  </sec>
  <sec>
    <title>Discussion</title>
    <p>Large-scale genomic studies often require amplification of genomic DNA by PCR. Therefore, automatic PCR primer design is one of the critical steps in such studies. We have created a novel method for masking repeated regions in sequences. It allows masking of the entire template DNA before primer design to avoid the consideration of poor primer candidates. GenomeMasker is able to identify and mask repeating words that have not been included in the current repeat libraries. This, combined with a specific 3'-end masking technique, allowed us to achieve a more sensitive masking than the existing approaches. Programs like DUST and TandemRepeatsFinder are designed for masking short repeat motifs and are faster than our method, but their ability to find different types of longer repeats is lower, as demonstrated in Table <xref ref-type="table" rid="T1">1</xref>. Masking repeats may help to increase PCR success rate, but this might not be sufficient for some applications. For example, genotyping [<xref ref-type="bibr" rid="B31">31</xref>] requires that a unique PCR product must be generated from the human genome. Therefore, additional e-PCR step is still required after candidate primer pair is selected, which in our case is done with the GenomeTester application. The method presented in this paper offers the possibility to increase specificity and speed of finding non-unique words by using word indexing and binary search algorithm compared to other repeat-masking and e-PCR methods. The package also contains an optional primer design program that can be replaced with desired software. Therefore, the main advantage of our method is speed, unique masking style and the possibility to quickly locate alternative PCR primer binding sites and products.</p>
    <p>All programs in our test must read the genome sequence information from a hard drive. This information is typically pre-processed and saved into a database or an index in a specific binary format. Databases or indexes that need to be read from hard drive are rather large. Total size of indexes for the human chromosomes is approximately 1 GB for BLAST and MEGABLAST, 11 GB for SSAHA and 22 GB for GenomeTester. When executed, most programs initially read all database/index data into RAM, which speeds up the search, particularly for large datasets. However, for searching only a few primer pairs the entire database/index may not be necessary. The pre-processed and sorted index of GenomeTester allows identifying locations of the given primer pair by reading only a fraction of the index file.</p>
    <p>Our package is based on finding the exact matches between sequences. Newer methods [<xref ref-type="bibr" rid="B25">25</xref>] and algorithms [<xref ref-type="bibr" rid="B32">32</xref>] allow considering mismatches when comparing oligos against large genomic sequence. Whereas it would be possible to enhance our programs so that the bindings with single mismatches would be taken into account, the current implementation would require about 45â48 times more computing time for both <italic>gtester </italic>and <italic>gmasker</italic>. The number comes from the fact that there are 3 mismatched variants per each nucleotide within a given word. For example, 16-mer oligonucleotide would have 48 different single-mismatch oligos. We could forbid the mismatch at 3'-end of oligo, but nevertheless the number of different variants to search is huge. The problem is particularly serious with the GenomeTester which keeps track of the location of each potential binding site. Thus, the memory requirement for storing all the locations would be enormous. Also, there is no good model to estimate how different mismatches should be weighted. For example, it is usually expected that mismatches near the 3' end disturb primer binding and subsequent replication matter much more than the ones near 5' end. The exact dependence between mismatch location and binding strength is not known. Additionally, the strength of the mismatched DNA duplex is somewhat weaker than the duplex with exact matches [<xref ref-type="bibr" rid="B33">33</xref>]. Thus, the relative influence of mismatched binding sites to the success rate of PCR compared to fully complementary binding sites is poorly understood and their importance in predicting PCR success cannot be estimated without extensive experimental studies.</p>
    <p>However, we have examined the correlation between the number of perfect match binding sites and the number of binding sites with single mismatch. We have taken all strings with length 12 nucleotides from the human genome. For each oligonucleotide, two things were counted 1) the number of binding sites in the genome as 100% identical match and 2) the number of binding sites in the genome containing single mismatch. These two numbers were plotted against each other and a strong linear correlation was observed (with correlation coefficient r = 0.938). As these two values are strongly correlated we would expect them to be almost equally efficient predictors of PCR success. Thus, counting of mismatched binding sites is not likely to give a significant improvement for the prediction of PCR success.</p>
  </sec>
  <sec>
    <title>Conclusion</title>
    <p>We have created a novel method for masking repeated regions in sequences, detecting all PCR primer binding sites and possible PCR products from the human genome. The GENOMEMASKER package is suitable for researchers who need to evaluate or design unique PCR primers in genomic scale. It is able to mask the entire human genome for non-unique primers within 6 hours and find locations of all binding sites for 10 000 designed primer pairs within 10 minutes.</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p>Project name: GENOMEMASKER package</p>
    <p>Project homepage: <ext-link ext-link-type="uri" xlink:href="http://bioinfo.ebc.ee/download/"/></p>
    <p>Operating system: Unix/Linux</p>
    <p>Programming language: C/C++</p>
    <p>Other requirements: None</p>
    <p>License: The package is freely available to academic users</p>
    <p>Any restrictions to use by non-academics: Licence needed</p>
    <p>The web client for the GenomeTester program is available at <ext-link ext-link-type="uri" xlink:href="http://bioinfo.ebc.ee/genometester/"/> and the web client for the GenomeMasker is available at <ext-link ext-link-type="uri" xlink:href="http://bioinfo.ebc.ee/snpmasker/"/>.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>RA conducted this study, carried out different tests on various methods, validated the package and was responsible for drafting the manuscript. ER created the initial code of the package and LK optimized the code. MR contributed to the conception of this study, participated in its design and coordination and helped to draft the manuscript. All authors have read and approved the final manuscript.</p>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgements</title>
      <p>This work was supported by the Estonian Ministry of Education and Research grant no. 0182649s04 and partially by grants no. 42/2002 and EU19730 from Enterprise Estonia. The testing of the programs was performed on a dedicated computer farm supported by grant no. 03-03.01-10 from the Estonian Information Technology Foundation. The authors thank TÃµnu MÃ¶ls, Ulvi Gerst, Priit Palta and TÃµnis Org for critical reading of the manuscript, and Katre Palm and Signe Sumerik for valuable help with English grammar.</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chenal</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Souque</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Markovits</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Griffais</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Choosing highly specific primers for the polymerase chain reaction using the octomer frequency disparity method: application to Chlamydia trachomatis</article-title>
        <source>Gene</source>
        <year>1996</year>
        <volume>176</volume>
        <fpage>97</fpage>
        <lpage>101</lpage>
        <pub-id pub-id-type="pmid">8918239</pub-id>
        <pub-id pub-id-type="doi">10.1016/0378-1119(96)00226-0</pub-id>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kalendar</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Tanskanen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Immonen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Nevo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Schulman</surname>
            <given-names>AH</given-names>
          </name>
        </person-group>
        <article-title>Genome evolution of wild barley (Hordeum spontaneum) by BARE-1 retrotransposon dynamics in response to sharp microclimatic divergence</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <year>2000</year>
        <volume>97</volume>
        <fpage>6603</fpage>
        <lpage>6607</lpage>
        <pub-id pub-id-type="pmid">10823912</pub-id>
        <pub-id pub-id-type="doi">10.1073/pnas.110587497</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rychlik</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Selection of primers for polymerase chain reaction</article-title>
        <source>Mol Biotechnol</source>
        <year>1995</year>
        <volume>3</volume>
        <fpage>129</fpage>
        <lpage>134</lpage>
        <pub-id pub-id-type="pmid">7620973</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rozen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Skaletsky</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Primer3 on the WWW for general users and for biologist programmers</article-title>
        <source>Methods Mol Biol</source>
        <year>2000</year>
        <volume>132</volume>
        <fpage>365</fpage>
        <lpage>386</lpage>
        <pub-id pub-id-type="pmid">10547847</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>TF</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>MS</given-names>
          </name>
        </person-group>
        <article-title>Identification of common molecular subsequences</article-title>
        <source>J Mol Biol</source>
        <year>1981</year>
        <volume>147</volume>
        <fpage>195</fpage>
        <lpage>197</lpage>
        <pub-id pub-id-type="pmid">7265238</pub-id>
        <pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chou</surname>
            <given-names>HH</given-names>
          </name>
          <name>
            <surname>Hsia</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Mooney</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Schnable</surname>
            <given-names>PS</given-names>
          </name>
        </person-group>
        <article-title>Picky: oligo microarray design for large genomes</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>2893</fpage>
        <lpage>2902</lpage>
        <pub-id pub-id-type="pmid">15180932</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth347</pub-id>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <source>Algorithms for Probe Selection and DNA Microarray Design</source>
        <year>2004</year>
        <publisher-name>Berlin, University of Berlin</publisher-name>
        <fpage>208</fpage>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="other">
        <article-title>DUST source code</article-title>
        <ext-link ext-link-type="uri" xlink:href="ftp://ftp.ncbi.nlm.nih.gov/pub/tatusov/dust/"/>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Benson</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Tandem repeats finder: a program to analyze DNA sequences</article-title>
        <source>Nucleic Acids Res</source>
        <year>1999</year>
        <volume>27</volume>
        <fpage>573</fpage>
        <lpage>580</lpage>
        <pub-id pub-id-type="pmid">9862982</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/27.2.573</pub-id>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="other">
        <article-title>RepeatMasker homepage</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.repeatmasker.org"/>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>TL</given-names>
          </name>
          <name>
            <surname>Schaffer</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <fpage>3389</fpage>
        <lpage>3402</lpage>
        <pub-id pub-id-type="pmid">9254694</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>van Hijum</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>de Jong</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Buist</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kok</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kuipers</surname>
            <given-names>OP</given-names>
          </name>
        </person-group>
        <article-title>UniFrag and GenomePrimer: selection of primers for genome-wide production of unique amplicons</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>1580</fpage>
        <lpage>1582</lpage>
        <pub-id pub-id-type="pmid">12912842</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg203</pub-id>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rouillard</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Zuker</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gulari</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>OligoArray 2.0: design of oligonucleotide probes for DNA microarrays using a thermodynamic approach</article-title>
        <source>Nucleic Acids Res</source>
        <year>2003</year>
        <volume>31</volume>
        <fpage>3057</fpage>
        <lpage>3062</lpage>
        <pub-id pub-id-type="pmid">12799432</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gkg426</pub-id>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Onodera</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Melcher</surname>
            <given-names>U</given-names>
          </name>
        </person-group>
        <article-title>Selection for 3' end triplets for polymerase chain reaction primers</article-title>
        <source>Mol Cell Probes</source>
        <year>2004</year>
        <volume>18</volume>
        <fpage>369</fpage>
        <lpage>372</lpage>
        <pub-id pub-id-type="pmid">15488375</pub-id>
        <pub-id pub-id-type="doi">10.1016/j.mcp.2004.05.007</pub-id>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schuler</surname>
            <given-names>GD</given-names>
          </name>
        </person-group>
        <article-title>Sequence mapping by electronic PCR</article-title>
        <source>Genome Res</source>
        <year>1997</year>
        <volume>7</volume>
        <fpage>541</fpage>
        <lpage>550</lpage>
        <pub-id pub-id-type="pmid">9149949</pub-id>
      </citation>
    </ref>
    <ref id="B16">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lexa</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Horak</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brzobohaty</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Virtual PCR</article-title>
        <source>Bioinformatics</source>
        <year>2001</year>
        <volume>17</volume>
        <fpage>192</fpage>
        <lpage>193</lpage>
        <pub-id pub-id-type="pmid">11238077</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/17.2.192</pub-id>
      </citation>
    </ref>
    <ref id="B17">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Kou</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Wei</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>He</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhao</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Information theory-based algorithm for in silico prediction of PCR products with whole genomic sequences as templates</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>190</fpage>
        <pub-id pub-id-type="pmid">16042814</pub-id>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-190</pub-id>
      </citation>
    </ref>
    <ref id="B18">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Xu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>PRIMEGENS: robust and efficient design of gene-specific probes for microarray analysis</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>1432</fpage>
        <lpage>1437</lpage>
        <pub-id pub-id-type="pmid">12424113</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.11.1432</pub-id>
      </citation>
    </ref>
    <ref id="B19">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weckx</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>De Rijk</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Broeckhoven</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Del-Favero</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>SNPbox: a modular software package for large-scale primer design</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>385</fpage>
        <lpage>387</lpage>
        <pub-id pub-id-type="pmid">15347573</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti006</pub-id>
      </citation>
    </ref>
    <ref id="B20">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rouchka</surname>
            <given-names>EC</given-names>
          </name>
          <name>
            <surname>Khalyfa</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cooper</surname>
            <given-names>NG</given-names>
          </name>
        </person-group>
        <article-title>MPrime: efficient large scale multiple primer and oligonucleotide design for customized gene microarrays</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>175</fpage>
        <pub-id pub-id-type="pmid">16014168</pub-id>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-175</pub-id>
      </citation>
    </ref>
    <ref id="B21">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>A greedy algorithm for aligning DNA sequences</article-title>
        <source>J Comput Biol</source>
        <year>2000</year>
        <volume>7</volume>
        <fpage>203</fpage>
        <lpage>214</lpage>
        <pub-id pub-id-type="pmid">10890397</pub-id>
        <pub-id pub-id-type="doi">10.1089/10665270050081478</pub-id>
      </citation>
    </ref>
    <ref id="B22">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kent</surname>
            <given-names>WJ</given-names>
          </name>
        </person-group>
        <article-title>BLAT--the BLAST-like alignment tool</article-title>
        <source>Genome Res</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="pmid">11932250</pub-id>
        <comment>10.1101/gr.229202. Article published online before March 2002</comment>
      </citation>
    </ref>
    <ref id="B23">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ning</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Mullikin</surname>
            <given-names>JC</given-names>
          </name>
        </person-group>
        <article-title>SSAHA: a fast search method for large DNA databases</article-title>
        <source>Genome Res</source>
        <year>2001</year>
        <volume>11</volume>
        <fpage>1725</fpage>
        <lpage>1729</lpage>
        <pub-id pub-id-type="pmid">11591649</pub-id>
        <pub-id pub-id-type="doi">10.1101/gr.194201</pub-id>
      </citation>
    </ref>
    <ref id="B24">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rachlin</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ding</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Cantor</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kasif</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>MuPlex: multi-objective multiplex PCR assay design</article-title>
        <source>Nucleic Acids Res</source>
        <year>2005</year>
        <volume>33</volume>
        <fpage>W544</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="pmid">15980531</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gki377</pub-id>
      </citation>
    </ref>
    <ref id="B25">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lexa</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Valle</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>PRIMEX: rapid identification of oligonucleotide matches in whole genomes</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>2486</fpage>
        <lpage>2488</lpage>
        <pub-id pub-id-type="pmid">14668240</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg350</pub-id>
      </citation>
    </ref>
    <ref id="B26">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Murphy</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Raj</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Winters</surname>
            <given-names>RS</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>PS</given-names>
          </name>
        </person-group>
        <article-title>me-PCR: a refined ultrafast algorithm for identifying sequence-defined genomic elements</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>588</fpage>
        <lpage>590</lpage>
        <pub-id pub-id-type="pmid">14990458</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg466</pub-id>
      </citation>
    </ref>
    <ref id="B27">
      <citation citation-type="other">
        <article-title>In-Situ PCR (isPCR) source code</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.soe.ucsc.edu/~kent/src/unzipped/isPcr/"/>
      </citation>
    </ref>
    <ref id="B28">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Knuth</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>The Art of Computer Programming</article-title>
        <source>Sorting an Searching</source>
        <year>1997</year>
        <volume>3</volume>
        <edition>Third</edition>
        <publisher-name>, Addison-Wesley</publisher-name>
        <fpage>409</fpage>
        <lpage>426</lpage>
      </citation>
    </ref>
    <ref id="B29">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jurka</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Repbase update: a database and an electronic journal of repetitive elements</article-title>
        <source>Trends Genet</source>
        <year>2000</year>
        <volume>16</volume>
        <fpage>418</fpage>
        <lpage>420</lpage>
        <pub-id pub-id-type="pmid">10973072</pub-id>
        <pub-id pub-id-type="doi">10.1016/S0168-9525(00)02093-X</pub-id>
      </citation>
    </ref>
    <ref id="B30">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kaplinski</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Andreson</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Puurand</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Remm</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>MultiPLX: automatic grouping and evaluation of PCR primers</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>1701</fpage>
        <lpage>1702</lpage>
        <pub-id pub-id-type="pmid">15598831</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti219</pub-id>
      </citation>
    </ref>
    <ref id="B31">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Syvanen</surname>
            <given-names>AC</given-names>
          </name>
        </person-group>
        <article-title>Accessing genetic variation: genotyping single nucleotide polymorphisms</article-title>
        <source>Nat Rev Genet</source>
        <year>2001</year>
        <volume>2</volume>
        <fpage>930</fpage>
        <lpage>942</lpage>
        <pub-id pub-id-type="pmid">11733746</pub-id>
        <pub-id pub-id-type="doi">10.1038/35103535</pub-id>
      </citation>
    </ref>
    <ref id="B32">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zheng</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Close</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lonardi</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Efficient selection of unique and popular oligos for large EST databases</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>2101</fpage>
        <lpage>2112</lpage>
        <pub-id pub-id-type="pmid">15059835</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth210</pub-id>
      </citation>
    </ref>
    <ref id="B33">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>SantaLucia</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Hicks</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>The thermodynamics of DNA structural motifs</article-title>
        <source>Annu Rev Biophys Biomol Struct</source>
        <year>2004</year>
        <volume>33</volume>
        <fpage>415</fpage>
        <lpage>440</lpage>
        <pub-id pub-id-type="pmid">15139820</pub-id>
        <pub-id pub-id-type="doi">10.1146/annurev.biophys.32.110601.141800</pub-id>
      </citation>
    </ref>
  </ref-list>
  <sec sec-type="display-objects">
    <title>Figures and Tables</title>
    <fig position="float" id="F1">
      <label>Figure 1</label>
      <caption>
        <p><bold>The workflow of the two separate units in GENOMEMASKER package: GenomeMasker (A) and GenomeTester (B)</bold>. Boxes with rectangular corners describe data structures, rounded boxes describe procedures performed by different programs and boxes with bold outlines denote the main input files. Procedures indicated by dashed lines are optional.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-172-1"/>
    </fig>
    <fig position="float" id="F2">
      <label>Figure 2</label>
      <caption>
        <p><bold>Examples of masking style of different masking programs</bold>. Masked nucleotides are shown by red lowercase letters. There are some DNA regions that are extensively masked by RepeatMasker (A) and some regions where RepeatMasker does not find any repetitive motifs (B). Both programs are executed at similar sensitivity level.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-172-2"/>
    </fig>
    <fig position="float" id="F3">
      <label>Figure 3</label>
      <caption>
        <p><bold>The speed test between two masking methods: RepeatMasker and GenomeMasker</bold>. Both programs were tested with several parameters and different template sizes. Masking of the entire human genome takes 6â7 hours with the GenomeMasker. Programs were executed on a 2.66 GHz Intel Xeonâ¢ processor with 6 GB of RAM.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-172-3"/>
    </fig>
    <fig position="float" id="F4">
      <label>Figure 4</label>
      <caption>
        <p><bold>The performance test between various alignment and e-PCR methods</bold>. We compared the speed of seven different methods with five datasets, consisting of 1, 10, 100, 1000 and 10000 randomly selected primer pairs. All datasets were subjected to the e-PCR against the human genome with different programs and the computing time was recorded. All programs were executed on a 2.66 GHz Intel Xeonâ¢ processor with 6 GB of RAM.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-172-4"/>
    </fig>
    <table-wrap position="float" id="T1">
      <label>Table 1</label>
      <caption>
        <p>The effect of different repeat-masking methods onto PCR primer design.</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <td/>
            <td align="left">
              <bold>PRIMER3 + No masking</bold>
            </td>
            <td align="left">
              <bold>PRIMER3 + DUST</bold>
            </td>
            <td align="left">
              <bold>PRIMER3 + Tandem</bold>
              <break/>
              <bold> Repeats Finder</bold>
            </td>
            <td align="left">
              <bold>PRIMER3 + repeat library</bold>
              <break/>
              <bold> (ALU+LINE+MIR)</bold>
            </td>
            <td align="left">
              <bold>PRIMER3 + Repeat Masker -qq</bold>
            </td>
            <td align="left">
              <bold>GM_PRIMER3 + Genome</bold>
              <break/>
              <bold> Masker -wl 16</bold>
            </td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">
              <bold>Primer selection</bold>
              <break/>
              <bold> was not possible (no primers)</bold>
            </td>
            <td align="left">2%</td>
            <td align="left">2%</td>
            <td align="left">2%</td>
            <td align="left">4%</td>
            <td align="left">31%</td>
            <td align="left">7%</td>
          </tr>
          <tr>
            <td align="left">
              <bold>&gt;10 predicted binding sites for</bold>
              <break/>
              <bold> at least one primer of the primer pair</bold>
            </td>
            <td align="left">52%</td>
            <td align="left">51%</td>
            <td align="left">51%</td>
            <td align="left">39%</td>
            <td align="left">12%</td>
            <td align="left">NA*</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <p>In this test, 1000 random regions, each 1000 bp long, were selected from the human genome for selection of PCR primers. The PRIMER3 program was used in combination with different masking methods to design PCR primers for amplification for each region. The binding sites were predicted for each designed primer using 16 nucleotides from the primer 3'-end and requiring perfect match with template DNA. *Masking the primers that have &gt;10 predicted binding sites is an intrinsic feature of GenomeMasker and thus not comparable to others.</p>
      </table-wrap-foot>
    </table-wrap>
  </sec>
</back>
