<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS Comput Biol</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-title-group>
      <journal-title>PLoS Computational Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1553-734X</issn>
    <issn pub-type="epub">1553-7358</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9447925</article-id>
    <article-id pub-id-type="pmid">35984845</article-id>
    <article-id pub-id-type="publisher-id">PCOMPBIOL-D-22-00149</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pcbi.1010394</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Evolutionary Biology</subject>
          <subj-group>
            <subject>Evolutionary Systematics</subject>
            <subj-group>
              <subject>Phylogenetics</subject>
              <subj-group>
                <subject>Phylogenetic Analysis</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Taxonomy</subject>
          <subj-group>
            <subject>Evolutionary Systematics</subject>
            <subj-group>
              <subject>Phylogenetics</subject>
              <subj-group>
                <subject>Phylogenetic Analysis</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Data Management</subject>
          <subj-group>
            <subject>Taxonomy</subject>
            <subj-group>
              <subject>Evolutionary Systematics</subject>
              <subj-group>
                <subject>Phylogenetics</subject>
                <subj-group>
                  <subject>Phylogenetic Analysis</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Plant Science</subject>
          <subj-group>
            <subject>Plant Anatomy</subject>
            <subj-group>
              <subject>Leaves</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Organisms</subject>
          <subj-group>
            <subject>Eukaryota</subject>
            <subj-group>
              <subject>Plants</subject>
              <subj-group>
                <subject>Trees</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Organisms</subject>
          <subj-group>
            <subject>Viruses</subject>
            <subj-group>
              <subject>RNA viruses</subject>
              <subj-group>
                <subject>Orthomyxoviruses</subject>
                <subj-group>
                  <subject>Influenza Viruses</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Microbiology</subject>
          <subj-group>
            <subject>Medical Microbiology</subject>
            <subj-group>
              <subject>Microbial Pathogens</subject>
              <subj-group>
                <subject>Viral Pathogens</subject>
                <subj-group>
                  <subject>Orthomyxoviruses</subject>
                  <subj-group>
                    <subject>Influenza Viruses</subject>
                  </subj-group>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Medicine and Health Sciences</subject>
        <subj-group>
          <subject>Pathology and Laboratory Medicine</subject>
          <subj-group>
            <subject>Pathogens</subject>
            <subj-group>
              <subject>Microbial Pathogens</subject>
              <subj-group>
                <subject>Viral Pathogens</subject>
                <subj-group>
                  <subject>Orthomyxoviruses</subject>
                  <subj-group>
                    <subject>Influenza Viruses</subject>
                  </subj-group>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Organisms</subject>
          <subj-group>
            <subject>Viruses</subject>
            <subj-group>
              <subject>Viral Pathogens</subject>
              <subj-group>
                <subject>Orthomyxoviruses</subject>
                <subj-group>
                  <subject>Influenza Viruses</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Medicine and Health Sciences</subject>
        <subj-group>
          <subject>Medical Conditions</subject>
          <subj-group>
            <subject>Infectious Diseases</subject>
            <subj-group>
              <subject>Viral Diseases</subject>
              <subj-group>
                <subject>Influenza</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Microbiology</subject>
          <subj-group>
            <subject>Microbial Evolution</subject>
            <subj-group>
              <subject>Viral Evolution</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Evolutionary Biology</subject>
          <subj-group>
            <subject>Organismal Evolution</subject>
            <subj-group>
              <subject>Microbial Evolution</subject>
              <subj-group>
                <subject>Viral Evolution</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Microbiology</subject>
          <subj-group>
            <subject>Virology</subject>
            <subj-group>
              <subject>Viral Evolution</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Mathematics</subject>
          <subj-group>
            <subject>Optimization</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Data Management</subject>
          <subj-group>
            <subject>Data Visualization</subject>
            <subj-group>
              <subject>Infographics</subject>
              <subj-group>
                <subject>Graphs</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>TreeKnit: Inferring ancestral reassortment graphs of influenza viruses</article-title>
      <alt-title alt-title-type="running-head">TreeKnit: Inferring Ancestral Reassortment Graphs of influenza viruses</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Barrat-Charlaix</surname>
          <given-names>Pierre</given-names>
        </name>
        <role content-type="http://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
        <role content-type="http://credit.niso.org/contributor-roles/formal-analysis/">Formal analysis</role>
        <role content-type="http://credit.niso.org/contributor-roles/investigation/">Investigation</role>
        <role content-type="http://credit.niso.org/contributor-roles/methodology/">Methodology</role>
        <role content-type="http://credit.niso.org/contributor-roles/software/">Software</role>
        <role content-type="http://credit.niso.org/contributor-roles/validation/">Validation</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-original-draft/">Writing – original draft</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-review-editing/">Writing – review &amp; editing</role>
        <xref rid="aff001" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="aff002" ref-type="aff">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0001-6220-2239</contrib-id>
        <name>
          <surname>Vaughan</surname>
          <given-names>Timothy G.</given-names>
        </name>
        <role content-type="http://credit.niso.org/contributor-roles/software/">Software</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-review-editing/">Writing – review &amp; editing</role>
        <xref rid="aff002" ref-type="aff">
          <sup>2</sup>
        </xref>
        <xref rid="aff003" ref-type="aff">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-2525-1407</contrib-id>
        <name>
          <surname>Neher</surname>
          <given-names>Richard A.</given-names>
        </name>
        <role content-type="http://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
        <role content-type="http://credit.niso.org/contributor-roles/funding-acquisition/">Funding acquisition</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-original-draft/">Writing – original draft</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-review-editing/">Writing – review &amp; editing</role>
        <xref rid="aff001" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="aff002" ref-type="aff">
          <sup>2</sup>
        </xref>
        <xref rid="cor001" ref-type="corresp">*</xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <label>1</label>
      <addr-line>Biozentrum, Universität Basel, Basel, Switzerland</addr-line>
    </aff>
    <aff id="aff002">
      <label>2</label>
      <addr-line>Swiss Institute of Bioinformatics, Basel, Switzerland</addr-line>
    </aff>
    <aff id="aff003">
      <label>3</label>
      <addr-line>ETH Zurich, Department of Biosystems Science and Engineering, Basel, Switzerland</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Martinez-Garcia</surname>
          <given-names>Ricardo</given-names>
        </name>
        <role>Editor</role>
        <xref rid="edit1" ref-type="aff"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>International Center for Theoretical Physics - South American Institute for Fundamental Research, BRAZIL</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p>The authors have declared that no competing interests exist.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>richard.neher@unibas.ch</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>19</day>
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <volume>18</volume>
    <issue>8</issue>
    <elocation-id>e1010394</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>1</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>15</day>
        <month>7</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2022 Barrat-Charlaix et al</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>Barrat-Charlaix et al</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pcbi.1010394.pdf"/>
    <abstract>
      <p>When two influenza viruses co-infect the same cell, they can exchange genome segments in a process known as reassortment. Reassortment is an important source of genetic diversity and is known to have been involved in the emergence of most pandemic influenza strains. However, because of the difficulty in identifying reassortment events from viral sequence data, little is known about their role in the evolution of the seasonal influenza viruses. Here we introduce TreeKnit, a method that infers ancestral reassortment graphs (ARG) from two segment trees. It is based on topological differences between trees, and proceeds in a greedy fashion by finding regions that are compatible in the two trees. Using simulated genealogies with reassortments, we show that TreeKnit performs well in a wide range of settings and that it is as accurate as a more principled bayesian method, while being orders of magnitude faster. Finally, we show that it is possible to use the inferred ARG to better resolve segment trees and to construct more informative visualizations of reassortments.</p>
    </abstract>
    <abstract abstract-type="summary">
      <title>Author summary</title>
      <p>Influenza viruses evolve quickly and escape immune defenses which requires frequent update of vaccines. Understanding this evolution is key to an effective public health response. The genome of influenza viruses is made up of 8 pieces called segments, each coding for different viral proteins. Within each segment, evolution is an asexual process in which genetic diversity is generated by mutations. But influenza also diversifies through reassortment which can occur when two different viruses infect the same cell: offsprings can then contain a combination of segments from both viruses. Reassortment is akin to sexual reproduction and can generate viruses that combine segments from diverged viral lineages. Reassortment is a crucial component of viral evolution, but it is challenging to reconstruct where reassortments happened and which segments share history. Here, we develop a method called TreeKnit to detect reassortment events. TreeKnit is based on genealogical trees of single segments that can be reconstructed using standard bioinformatics tools. Inconsistencies between these trees are then used as signs of reassortment. We show that TreeKnit is as accurate as other recent methods, but runs much faster. Our method will facilitate the study of reassortment and its consequences for influenza evolution.</p>
    </abstract>
    <funding-group>
      <award-group id="award001">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100001711</institution-id>
            <institution>Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung</institution>
          </institution-wrap>
        </funding-source>
        <award-id>310030_188547</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-2525-1407</contrib-id>
          <name>
            <surname>Neher</surname>
            <given-names>Richard A.</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <funding-statement>This work was funded by SNF (310030_188547) to RAN. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="5"/>
      <table-count count="0"/>
      <page-count count="19"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>PLOS Publication Stage</meta-name>
        <meta-value>vor-update-to-uncorrected-proof</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>Publication Update</meta-name>
        <meta-value>2022-09-06</meta-value>
      </custom-meta>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>The source code of TreeKnit is available at <ext-link xlink:href="https://github.com/PierreBarrat/TreeKnit" ext-link-type="uri">https://github.com/PierreBarrat/TreeKnit</ext-link>. Supporting code used for simulations and analysis is available at <ext-link xlink:href="https://github.com/PierreBarrat/ARGTools" ext-link-type="uri">https://github.com/PierreBarrat/ARGTools</ext-link> and <ext-link xlink:href="https://github.com/PierreBarrat/TestRecombTools" ext-link-type="uri">https://github.com/PierreBarrat/TestRecombTools</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>The source code of TreeKnit is available at <ext-link xlink:href="https://github.com/PierreBarrat/TreeKnit" ext-link-type="uri">https://github.com/PierreBarrat/TreeKnit</ext-link>. Supporting code used for simulations and analysis is available at <ext-link xlink:href="https://github.com/PierreBarrat/ARGTools" ext-link-type="uri">https://github.com/PierreBarrat/ARGTools</ext-link> and <ext-link xlink:href="https://github.com/PierreBarrat/TestRecombTools" ext-link-type="uri">https://github.com/PierreBarrat/TestRecombTools</ext-link>.</p>
  </notes>
</front>
<body>
  <disp-quote>
    <p>This is a <italic toggle="yes">PLOS Computational Biology</italic> Methods paper.</p>
  </disp-quote>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>Influenza viruses evolve rapidly and change their surface proteins, which allows them to evade preexisting immunity and reinfect their hosts. The viral genome is made of 8 RNA segments that encode for 11 different proteins, with segments coding for the surface proteins haemagglutinin (HA) and neuraminidase (NA) being the most important for immune escape. In each segment, evolution is an asexual process in which diversity is generated by mutations. However, when a host cell is simultaneously infected by more than one virus, offspring viruses can carry segments from several parents—a process known as reassortment [<xref rid="pcbi.1010394.ref001" ref-type="bibr">1</xref>]. Genomic reassortment is akin to sexual reproduction and can generate viruses with novel genetic constellations. In particular, it has been found to be the cause of most pandemic influenza strains [<xref rid="pcbi.1010394.ref002" ref-type="bibr">2</xref>, <xref rid="pcbi.1010394.ref003" ref-type="bibr">3</xref>].</p>
    <p>The genealogy of a single segment is described by a tree, whose leaves correspond to observed sequences and internal nodes to the ancestry of different lineages. Many methods exist to reconstruct this tree from gene sequences [<xref rid="pcbi.1010394.ref004" ref-type="bibr">4</xref>–<xref rid="pcbi.1010394.ref006" ref-type="bibr">6</xref>]. However, trees are not well suited to describe genealogies of full genomes in the presence of reassortment since lineages can then have different ancestors for their different segments. A more adapted concept is the so-called Ancestral Reassortment Graph (ARG), or Ancestral Recombination Graph in the context of recombination. Internal nodes of the ARG represent either coalescence of different lineages, in which case they have a unique ancestor as internal tree nodes, or the emergence of a new lineage from a reassortment, in which case they may have several ancestors. Simple examples of ARGs for two segments are shown in <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref>.</p>
    <fig position="float" id="pcbi.1010394.g001">
      <object-id pub-id-type="doi">10.1371/journal.pcbi.1010394.g001</object-id>
      <label>Fig 1</label>
      <caption>
        <title>Example of ARGs for five sampled strains and for two segments (blue and red).</title>
        <p>Reassortments are shown as black circles in each ARG. Based on the scaled reassortment rate in the population <italic toggle="yes">r</italic><sup>⋆</sup>, three regimes can be identified. <bold>Left</bold>: Very low reassortment rate. Reassortments are very rare, and every strain inherits its two segments from the same parent. The ARG is equal to the gene trees, and reconstructing it is easy. <bold>Center</bold>: Intermediate reassortment rate. Some exchange of segments takes place: some strains do not inherit their segments from the same parent (here, strain <monospace>C</monospace>). The segments trees have different topologies, but are still relatively similar. Inferring the position of reassortments from the gene trees is non trivial. <bold>Right</bold>: Very high reassortment rate. A reassortment takes place on every branch of the ARG before the first coalescence. The two segments have independent evolutionary histories, and the segment trees share no structure. Inference of reassortments becomes easy again.</p>
      </caption>
      <graphic xlink:href="pcbi.1010394.g001" position="float"/>
    </fig>
    <p>The knowledge of the ARG for a set of influenza sequences would be of major interest, mainly as it would shine light on the role of reassortment in the evolution of influenza. While the importance of major reassortment events in the formation of pandemic strains is known, much less can be said on the effects of smaller scale intra flu-lineage reassortments. Several studies have tackled this problem, with significant discrepancy in their results [<xref rid="pcbi.1010394.ref007" ref-type="bibr">7</xref>–<xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>]. This is likely due to the lack of a robust and efficient method to infer the whole set of reassortments in the history of a large and representative set of viral genomes. In addition, knowing the ARG would allow a more accurate reconstruction of tree branch lengths in regions without reassortments by using the sequences of several segments, or a better visualization of pairs of trees of different segments by disentangling tanglegrams as much as possible (see <xref rid="pcbi.1010394.s002" ref-type="supplementary-material">S1 Fig</xref>).</p>
    <p>A common method to identify reassortments is to reconstruct segment trees and manually compare them [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>, <xref rid="pcbi.1010394.ref011" ref-type="bibr">11</xref>], which is time consuming and error prone. A number of automated methods have also been developed. Some do not go through the step of reconstructing phylogenies and instead compare the sequence distance of different strains for different segments [<xref rid="pcbi.1010394.ref012" ref-type="bibr">12</xref>, <xref rid="pcbi.1010394.ref013" ref-type="bibr">13</xref>]. Other approaches consist in finding discrepancies between segment trees, either using topology [<xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>–<xref rid="pcbi.1010394.ref016" ref-type="bibr">16</xref>] or mutation patterns on the branches of the trees [<xref rid="pcbi.1010394.ref008" ref-type="bibr">8</xref>]. Sets of probable reassortments are then deduced from these discrepancies, typically using a confidence score. A common point to all these methods is that they only identify a subset of the reassortments that occurred in the genealogy, which could result in a mis-interpretation of the importance of reassortment. Additionally, it is not possible to fully reconstruct the genealogy since differences between trees remain even after accounting for the inferred reassortments. Recently, a method for directly inferring the ARG from sequences has been proposed that extends the principles used to infer phylogenetic trees to data containing reassortments [<xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>, <xref rid="pcbi.1010394.ref017" ref-type="bibr">17</xref>]. It does so by using a coalescence-reassortment model to assign a probability to any ARG based on observed sequences and then samples from this probability. While this model based approach is appealing, it is computationally expensive and limited to medium size datasets.</p>
    <p>Here we propose TreeKnit, a fast method to infer ARGs from pairs of segment trees that processes by “knitting” the trees together starting from the leaves. The underlying idea is that topological differences between trees are caused by reassortments, and that we can thus introduce reassortments so as to minimize these incompatibilities. In a first part, we describe how TreeKnit works. We then estimate its performance and limitations on simulated genealogies and show that it can be used to better resolve segment trees. Finally, we compare it to two existing methods to infer reassortments in influenza genealogies.</p>
  </sec>
  <sec sec-type="materials|methods" id="sec002">
    <title>Methods</title>
    <p>Whether inferring ARGs is easy or hard and whether it is useful or not depends on the relative strength of coalescence and reassortment. Qualitatively, we can distinguish three main regimes represented in <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref>. For a very low reassortment rate, reassortments are so rare that the ARG can be considered tree-like, with the two segment trees being identical. Recovering the ARG from the knowledge of the segment trees is then trivial. On the contrary, for a very large reassortment rate, the first reassortments along a lineage occur well before any pair of strains coalesce to a common ancestor. The two segments evolve in practice independently, and their trees have no shared structure. Coalescences between different segments and additional reassortments can occur deeper in the ARG, but would only connect to observed sequences by branches that are not shared by the two segment trees (see <xref rid="pcbi.1010394.s004" ref-type="supplementary-material">S3 Fig</xref> for an illustration). As they leave almost no trace on the segment trees, these deeper events cannot be identified by the method presented here, and we will ignore them in the following. Inferring the observable part of the ARG is again easy although uninformative: one only has to introduce a reassortment above each leaf. The intermediate case is both the hardest and the most interesting one. Indeed, reassortments are then rare enough that the segment trees share a lot of structure, but sufficiently frequent for the problem to not be trivial.</p>
    <sec id="sec003">
      <title>Maximally Compatible Clades (MCC)</title>
      <p>A central concept for our method are <italic toggle="yes">Maximally Compatible Clades (MCCs)</italic>. Given a two segment ARG that embeds two trees, one obtains the MCCs by removing all branches that correspond to only one tree, and keeping those that are common to both. In <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref>, this would amount to removing all branches that have only one color and keeping those that are both red and blue. This operation results in a set of disjoint trees, each of those being one MCC. Note that MCCs are not necessarily clades in the segment trees, since they can be nested. It is convenient to refer to an MCC by the leaves that it contains, and we will do so in the following.</p>
      <p>MCCs have several properties that makes them a very useful concept for thinking about ARGs: (i) If both segment trees <italic toggle="yes">and</italic> all MCCs are known, so is the observable part of the corresponding ARG. This follows from the fact that MCCs are the regions where the two trees are “stitched” together in the ancestral graph. Our method reconstructs ARGs using this idea and is effectively a method to <italic toggle="yes">infer MCCs given a pair of trees</italic>. Once the MCCs are known, the only informations missing to fully reconstruct the observable ARG are the times at which reassortments occurred on internal branches. (ii) There is a one-to-one correspondence between MCCs and observable reassortment events. This is a simple consequence of the fact that reassortments correspond to the separation of lineages of different segments in the ARG, and therefore to the transition between a region where branches are common to both trees to a region where they are not. By definition the root of an MCC must be located right where this separation occurs. The only exception to this rule is the case of an MCC that contains the root of one of the segment trees. The implication is that the number of reassortments in the genealogy of two segments is equal to the number of MCCs in their ARG, minus one if one of the MCCs contains a root. (iii) Restricting segment trees to an MCC results in two subtrees with the same topology. MCCs are maximal in the sense that extending them by adding nodes results in <italic toggle="yes">topologically different</italic> subtrees in the two segments. This last property is important for our method: finding MCCs is equivalent to finding maximal sets of leaves that give rise to subtrees with matching topologies.</p>
    </sec>
    <sec id="sec004">
      <title>Finding MCCs: The TreeKnit method</title>
      <p>The input to TreeKnit are two rooted segment trees that share leaves. TreeKnit is an iterative method that alternates between trying to grow a set of compatible clades (CCs) until they are maximal, and identifying reassortment events that prevent further expansion of these compatible clades. At the start of the algorithm, the CCs are simply the leaves of the trees. The iterative cycle is illustrated in <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2</xref> and consists of the following four steps.</p>
      <list list-type="simple">
        <list-item>
          <label>(i)</label>
          <p>Perform a naive maximization of compatible clades (CCs): grow CCs by adding internal nodes as long as the obtained clades are exactly equivalent in the two trees (<xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>A</bold></xref>). The resulting compatible regions are called the naive MCCs, where the “maximal” term will be justified in the next section.</p>
        </list-item>
        <list-item>
          <label>(ii)</label>
          <p>Collapse the naive MCCs into effective nodes (<xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>B</bold></xref>). This allows us to ignore their topological details. Note that if we applied step <italic toggle="yes">(i)</italic> to the reduced trees, we would find naive MCCs consisting only of leaves, by construction.</p>
        </list-item>
        <list-item>
          <label>(iii)</label>
          <p>Count topological incompatibilities in the reduced trees (<xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>C</bold></xref>). For each leaf, compare its surroundings in the two trees, and count one incompatibility if the two surroundings do not match. The surrounding of a leaf is defined as the clade defined by its parent node.</p>
        </list-item>
        <list-item>
          <label>(iv)</label>
          <p>Enforce reassortments on some leaves in order to <italic toggle="yes">minimize</italic> the number of incompatibilities (<xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>D</bold></xref>). Effective leaves above which a reassortment is enforced are <italic toggle="yes">removed from the trees</italic>, which reduces the number of incompatibilities. The cost associated with removing a leaf is determined by parameter <italic toggle="yes">γ</italic>. Effective leaves removed at the end of this operation are added to the list of final MCCs. If no leaf was removed as a result of the optimization, <italic toggle="yes">i.e</italic>. if no reassortment was enforced, stop here. Otherwise, go back to step <italic toggle="yes">(i)</italic></p>
        </list-item>
      </list>
      <fig position="float" id="pcbi.1010394.g002">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1010394.g002</object-id>
        <label>Fig 2</label>
        <caption>
          <title>Schematic of the iterative algorithm.</title>
          <p><bold>A</bold>: Construction of the naive MCCs. Circles indicate the root of the five clades that match exactly in the two trees (slightly highlighted branches). Trying to grow one of these clades gives inconsistent results in the two trees: <italic toggle="yes">e.g</italic>. growing the MCC <monospace>(B1,B2)</monospace> gives clade <monospace>(A,B1,B2)</monospace> in the first tree and <monospace>(A,D1,D2,B1,B2)</monospace> in the second. <bold>B</bold>: Trees obtained after reducing trees of <bold>A</bold> to their naive MCCs: each clade is represented by a single effective leaf. <bold>C</bold>: Counting incompatibilities in the reduced trees. For each effective leaf, the clades defined by its direct ancestor in the two trees are compared, and each mismatch counts as one incompatibility. <bold>D</bold>: Enforcing reassortments on some leaves to remove incompatibilities. A configuration <inline-formula id="pcbi.1010394.e001"><alternatives><graphic xlink:href="pcbi.1010394.e001" id="pcbi.1010394.e001g" position="anchor"/><mml:math id="M1" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> is associated to each set of removed leaves. The scoring function <inline-formula id="pcbi.1010394.e002"><alternatives><graphic xlink:href="pcbi.1010394.e002" id="pcbi.1010394.e002g" position="anchor"/><mml:math id="M2" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> adds the number of remaining incompatibilities given <inline-formula id="pcbi.1010394.e003"><alternatives><graphic xlink:href="pcbi.1010394.e003" id="pcbi.1010394.e003g" position="anchor"/><mml:math id="M3" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> and the number of removed leaves multiplied by <italic toggle="yes">γ</italic>. The optimal set of reassortments is found by minimizing <inline-formula id="pcbi.1010394.e004"><alternatives><graphic xlink:href="pcbi.1010394.e004" id="pcbi.1010394.e004g" position="anchor"/><mml:math id="M4" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>, <italic toggle="yes">e.g</italic>. removing <monospace>D</monospace> is optimal if <italic toggle="yes">γ</italic> &lt; 5.</p>
        </caption>
        <graphic xlink:href="pcbi.1010394.g002" position="float"/>
      </fig>
      <p>A leaf <italic toggle="yes">n</italic> can give rise to an incompatibility counted in step <italic toggle="yes">(iii)</italic> for two reasons: if a reassortment took place on the branch leading to <italic toggle="yes">n</italic>, it will be observed in different regions in the two trees, corresponding to the two ancestral viruses that took part in the reassortment; or if <italic toggle="yes">n</italic> is “close” to another reassorted leaf in one of the trees and not in the other, in which case it will also have different surroundings. In the example of <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2</xref>, <monospace>D</monospace> corresponds to the first situation, and <monospace>A,B,C</monospace> and <monospace>E</monospace> to the second.</p>
      <p>Given two reduced trees of <italic toggle="yes">L</italic> effective leaves after step <italic toggle="yes">(ii)</italic>, the idea of step <italic toggle="yes">(iv)</italic> is to reduce as much as possible the number of topological incompatibilities by removing (mark as reassortants) a minimal number of leaves. We encode the current state of each leaf <italic toggle="yes">n</italic> in the binary variable <italic toggle="yes">σ</italic><sub><italic toggle="yes">n</italic></sub> ∈ {0, 1}: it is set to 1 if leaf <italic toggle="yes">n</italic> is present in the tree, and to 0 if it is removed from the tree. Furthermore, we define <inline-formula id="pcbi.1010394.e005"><alternatives><graphic xlink:href="pcbi.1010394.e005.jpg" id="pcbi.1010394.e005g" position="anchor"/><mml:math id="M5" display="inline" overflow="scroll"><mml:mrow><mml:mo>Δ</mml:mo><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula> if the trial configuration <inline-formula id="pcbi.1010394.e006"><alternatives><graphic xlink:href="pcbi.1010394.e006.jpg" id="pcbi.1010394.e006g" position="anchor"/><mml:math id="M6" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> resolves the incompatibility above node <italic toggle="yes">n</italic> (compare <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>C</bold> and 2<bold>D</bold></xref>), and <inline-formula id="pcbi.1010394.e007"><alternatives><graphic xlink:href="pcbi.1010394.e007.jpg" id="pcbi.1010394.e007g" position="anchor"/><mml:math id="M7" display="inline" overflow="scroll"><mml:mrow><mml:mo>Δ</mml:mo><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula> otherwise. For any combination of removed leaves <inline-formula id="pcbi.1010394.e008"><alternatives><graphic xlink:href="pcbi.1010394.e008.jpg" id="pcbi.1010394.e008g" position="anchor"/><mml:math id="M8" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula>, we now define the scoring function <inline-formula id="pcbi.1010394.e009"><alternatives><graphic xlink:href="pcbi.1010394.e009.jpg" id="pcbi.1010394.e009g" position="anchor"/><mml:math id="M9" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>:
<disp-formula id="pcbi.1010394.e010"><alternatives><graphic xlink:href="pcbi.1010394.e010.jpg" id="pcbi.1010394.e010g" position="anchor"/><mml:math id="M10" display="block" overflow="scroll"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mo>∈</mml:mo><mml:mtext>leaves</mml:mtext></mml:mrow></mml:munder><mml:mo>Δ</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow><mml:msub><mml:mi>σ</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mrow><mml:mo>+</mml:mo><mml:mi>γ</mml:mi><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:mo>-</mml:mo><mml:mo>|</mml:mo></mml:mrow><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mrow><mml:mo>|</mml:mo><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(1)</label></disp-formula>
where <inline-formula id="pcbi.1010394.e011"><alternatives><graphic xlink:href="pcbi.1010394.e011.jpg" id="pcbi.1010394.e011g" position="anchor"/><mml:math id="M11" display="inline" overflow="scroll"><mml:mrow><mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> is the <italic toggle="yes">l</italic>1-norm of <inline-formula id="pcbi.1010394.e012"><alternatives><graphic xlink:href="pcbi.1010394.e012.jpg" id="pcbi.1010394.e012g" position="anchor"/><mml:math id="M12" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula>. <inline-formula id="pcbi.1010394.e013"><alternatives><graphic xlink:href="pcbi.1010394.e013.jpg" id="pcbi.1010394.e013g" position="anchor"/><mml:math id="M13" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> is composed of two terms with a simple interpretation: the first sums over leaves and counts the number of remaining incompatibilities, while the second counts the number of removed leaves with a removal cost <italic toggle="yes">γ</italic>.</p>
      <p>The optimal set of leaves to remove is then found by finding the configuration <inline-formula id="pcbi.1010394.e014"><alternatives><graphic xlink:href="pcbi.1010394.e014.jpg" id="pcbi.1010394.e014g" position="anchor"/><mml:math id="M14" display="inline" overflow="scroll"><mml:msup><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>⋆</mml:mo></mml:msup></mml:math></alternatives></inline-formula> that minimizes <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub>. As this function can have several local and global minima, minimization is performed efficiently by simulated annealing [<xref rid="pcbi.1010394.ref018" ref-type="bibr">18</xref>], see <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>. In the case of <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2<bold>D</bold></xref> and for <italic toggle="yes">γ</italic> ≤ 5, the optimal configuration is the one that removes leaf <monospace>D</monospace> only, that is <inline-formula id="pcbi.1010394.e015"><alternatives><graphic xlink:href="pcbi.1010394.e015.jpg" id="pcbi.1010394.e015g" position="anchor"/><mml:math id="M15" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>⋆</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mspace width="0.166667em"/><mml:mn>1</mml:mn><mml:mspace width="0.166667em"/><mml:mn>1</mml:mn><mml:mspace width="0.166667em"/><mml:mn>0</mml:mn><mml:mspace width="0.166667em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>, with a score <inline-formula id="pcbi.1010394.e016"><alternatives><graphic xlink:href="pcbi.1010394.e016.jpg" id="pcbi.1010394.e016g" position="anchor"/><mml:math id="M16" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>⋆</mml:mo></mml:msup><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>γ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>. Removing any single other leaf gives a score 4 + <italic toggle="yes">γ</italic>, and is thus always worse than removing <monospace>D</monospace>. Not removing any leaf gives a score 5, which becomes optimal if <italic toggle="yes">γ</italic> &gt; 5.</p>
      <p>The parameter <italic toggle="yes">γ</italic> plays a key role in the result of the method and thus on the reconstruction of the ARG. In the next paragraphs, we discuss the behavior of TreeKnit for extreme values of <italic toggle="yes">γ</italic> and explain some underlying ideas.</p>
    </sec>
    <sec id="sec005">
      <title>Naive MCCs: <italic toggle="yes">γ</italic> → ∞</title>
      <p>If <italic toggle="yes">γ</italic> is very large, <italic toggle="yes">i.e</italic>. of the order of the number of leaves in the reduced trees, removing leaves in step <italic toggle="yes">(iv)</italic> has a prohibitive cost. The MCCs returned by the algorithm will thus be the ones found in step <italic toggle="yes">(i)</italic>, that is the <italic toggle="yes">naive MCCs</italic>.</p>
      <p>This <italic toggle="yes">n</italic>aive approach has a simple interpretation: any two clades with the exact same topology in two trees are matched, but compatible regions are not extended further. The limit can thus be thought of as a <italic toggle="yes">conservative</italic> approach to the reconstruction of MCCs that avoid over-extending MCCs.</p>
      <p>On the other hand, since there is a one to one mapping between MCCs and inferred reassortments, the naive method tends to over-estimate the number of reassortments. This evident in <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2</xref>: five naive MCCs are found, corresponding to five inferred reassortments since none of them contains the root of one of the trees. The naive method introduces a reassortment for each incompatibility it finds and treats the two types of incompatibilities discussed above identically. However, to infer a more accurate set of MCCs, it is necessary to identify the first type of incompatibility corresponding to a reassortment along the branch leading to the leaf. After identifying these and removing the corresponding MCC, other incompatibilities tend to resolve as is the case in the example in <xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2</xref>: A single reassortment above clade <monospace>(D1, D2)</monospace> explains the differences between the two trees.</p>
    </sec>
    <sec id="sec006">
      <title>Approximately parsimonious MCCs: <italic toggle="yes">γ</italic> = 1</title>
      <p>We have seen above that every incompatibility gives rise to one inferred reassortment in the naive approach. On the other hand, we also know that an incompatibility above one leaf might not be due to a reassortment above it, but rather to its proximity to another reassorted leaf. This means that if we observe <italic toggle="yes">N</italic> incompatibilities, we can often resolve them by using less than <italic toggle="yes">N</italic> reassortments.</p>
      <p>For <italic toggle="yes">γ</italic> = 1, the scoring function <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub> of <xref rid="pcbi.1010394.e010" ref-type="disp-formula">Eq 1</xref> has a simple interpretation in terms of <italic toggle="yes">parsimony</italic>. Its first term counts the number of remaining incompatibilities, approximating the number of remaining reassortments predicted by the naive approach once the leaves with <italic toggle="yes">σ</italic><sub><italic toggle="yes">n</italic></sub> = 0 have been removed. The other term <inline-formula id="pcbi.1010394.e017"><alternatives><graphic xlink:href="pcbi.1010394.e017.jpg" id="pcbi.1010394.e017g" position="anchor"/><mml:math id="M17" display="inline" overflow="scroll"><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:mo>-</mml:mo><mml:mo>|</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>|</mml:mo><mml:mo>)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula> counts the number of removed leaves, which are <italic toggle="yes">enforced</italic> reassortments. <inline-formula id="pcbi.1010394.e018"><alternatives><graphic xlink:href="pcbi.1010394.e018.jpg" id="pcbi.1010394.e018g" position="anchor"/><mml:math id="M18" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> thus approximates the total number of reassortments for a configuration <inline-formula id="pcbi.1010394.e019"><alternatives><graphic xlink:href="pcbi.1010394.e019.jpg" id="pcbi.1010394.e019g" position="anchor"/><mml:math id="M19" display="inline" overflow="scroll"><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover></mml:math></alternatives></inline-formula>. Since the configuration <inline-formula id="pcbi.1010394.e020"><alternatives><graphic xlink:href="pcbi.1010394.e020.jpg" id="pcbi.1010394.e020g" position="anchor"/><mml:math id="M20" display="inline" overflow="scroll"><mml:msup><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>⋆</mml:mo></mml:msup></mml:math></alternatives></inline-formula> minimizes <italic toggle="yes">N</italic><sub>1</sub>, it can be interpreted as a parsimonious explanation of the topological differences between the trees.</p>
    </sec>
    <sec id="sec007">
      <title>Bridging parsimonious and naive approaches: Intermediate <italic toggle="yes">γ</italic></title>
      <p><xref rid="pcbi.1010394.g002" ref-type="fig">Fig 2</xref> shows an example where a parsimonious method clearly outperforms the naive one. In some cases, for example the high reassortment rate case shown on the right panel of <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref>, this is not true: in this case the correct MCCs consist of single leaves, and the naive approach then performs well. However, it is possible to explain the tree with fewer reassortments. Removing leaves <monospace>A,B</monospace> and <monospace>C</monospace>, corresponding to configuration <inline-formula id="pcbi.1010394.e021"><alternatives><graphic xlink:href="pcbi.1010394.e021.jpg" id="pcbi.1010394.e021g" position="anchor"/><mml:math id="M21" display="inline" overflow="scroll"><mml:mrow><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mspace width="0.166667em"/><mml:mn>0</mml:mn><mml:mspace width="0.166667em"/><mml:mn>0</mml:mn><mml:mspace width="0.166667em"/><mml:mn>1</mml:mn><mml:mspace width="0.166667em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>, will result in <inline-formula id="pcbi.1010394.e022"><alternatives><graphic xlink:href="pcbi.1010394.e022.jpg" id="pcbi.1010394.e022g" position="anchor"/><mml:math id="M22" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>, since the two remaining leaves <monospace>D</monospace> and <monospace>E</monospace> will then form a compatible clade in the two trees (three enforced reassortments, no incompatibility left). More generally, given an ARG of <italic toggle="yes">L</italic> leaves and with an infinitely high reassortment rate, it is always possible for the pseudo-parsimonious approach to enforce reassortments on <italic toggle="yes">L</italic> − 2 leaves, and have the remaining 2 form a compatible clade, thus obtaining <italic toggle="yes">L</italic> − 2 reassortments in total, instead of <italic toggle="yes">L</italic>. This is not surprising, as it is expected that a parsimonious method performs poorly when there are many reassortments.</p>
      <p>Parameter <italic toggle="yes">γ</italic> in <xref rid="pcbi.1010394.e010" ref-type="disp-formula">Eq 1</xref> tunes the “aggressiveness” with which the algorithm tries to grow compatible clades. In the pseudo-parsimonious approach, <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub> stays constant if one enforced reassortment “fixes” exactly one incompatibility. On the other hand, if <italic toggle="yes">γ</italic> &gt; 1, every removed leaf must fix more than one incompatibility for <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub> to stay constant. As a consequence, it is harder to remove leaves and thus to grow MCCs. In the extreme limit of <italic toggle="yes">γ</italic> → ∞, MCCs cannot be grown and we fall back to the naive method.</p>
      <p>The parameter <italic toggle="yes">γ</italic> thus allows us to interpolate between pseudo-parsimonious and naive approaches, and can be thought of as how “conservative” the inference of MCCs is. Note that given the discrete nature of <xref rid="pcbi.1010394.e010" ref-type="disp-formula">Eq (1)</xref>, the sharpest changes of behavior of <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub> happen when <italic toggle="yes">γ</italic> crosses an integer value. In the following, we will mostly use integer values <italic toggle="yes">γ</italic> (comp. <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref>).</p>
      <fig position="float" id="pcbi.1010394.g003">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1010394.g003</object-id>
        <label>Fig 3</label>
        <caption>
          <title>Accuracy of inferred MCCs in simulated ARGs.</title>
          <p>Increasing values of <italic toggle="yes">γ</italic> are shown by colored lines, from red to blue. <bold>A</bold>: Number of MCCs found by different methods as a function of the reassortment rate. The real number of MCCs is represented by the marked black line. The naive method (dashed black line) overestimates the number of MCCs for low <italic toggle="yes">r</italic><sup>⋆</sup>, while the parsimonious one (<italic toggle="yes">γ</italic> = 1) underestimates it for high <italic toggle="yes">r</italic><sup>⋆</sup>. <bold>B</bold>: Positive predictive value for reassortments: fraction of inferred reassortments that are indeed present in the real ARG. The low number of reassortments results in a relatively large uncertainty for this quantity for <italic toggle="yes">r</italic><sup>⋆</sup> ≪ 1. <bold>C</bold>: Distance between inferred and real MCCs for different methods. The distance is based on the variation of information [<xref rid="pcbi.1010394.ref020" ref-type="bibr">20</xref>].</p>
        </caption>
        <graphic xlink:href="pcbi.1010394.g003" position="float"/>
      </fig>
    </sec>
    <sec id="sec008">
      <title>Poorly resolved trees</title>
      <p>Trees inferred from sequences are often not completely resolved: branches in the actual genealogy along which no mutations happened will not appear in the reconstructed tree. This results in polytomies or multifurcations: internal nodes with more than two offspring. On a branch of the ARG shared by the two segment trees, it is possible that mutations occurred in one of the segments and not in the other, so that a polytomy will be present in one reconstructed segment tree and not in the other. <xref rid="pcbi.1010394.g004" ref-type="fig">Fig 4<bold>A</bold></xref> gives an example of such a situation.</p>
      <fig position="float" id="pcbi.1010394.g004">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1010394.g004</object-id>
        <label>Fig 4</label>
        <caption>
          <title>Effect of poorly resolved trees on the inference of MCCs.</title>
          <p><bold>A</bold>: Pre-resolving trees before inferring MCCs. The approach is greedy: every split of one tree that is compatible with the other is introduced in the other. <bold>B</bold>: VI distance to real MCCs as a function of <italic toggle="yes">r</italic><sup>⋆</sup> for different tree resolutions <italic toggle="yes">c</italic>, using <italic toggle="yes">γ</italic> = 2. The dashed line corresponds to the naive method <italic toggle="yes">γ</italic> → ∞. The quality of the inference decreases with <italic toggle="yes">c</italic>. <italic toggle="yes">c</italic><sup>⋆</sup> ≃ 0.8 corresponds to levels found in A/H3N2 influenza trees with strains from the same season. <bold>C</bold>: Quality of the resolution of trees <italic toggle="yes">after</italic> having inferred MCCs. This combines splits introduced by the pre-resolution step, and splits known once the MCCs are inferred. The number of correctly inferred splits is shown, scaled by the number of splits that would be necessary to make the trees binary. The black line indicates the performance if the MCCs were exactly known.</p>
        </caption>
        <graphic xlink:href="pcbi.1010394.g004" position="float"/>
      </fig>
      <p>If the polytomies are in parts of the segment trees shared in the ARG, one can improve phylogenetic resolution by using the sequences of both segments to infer topology and branch length. However, these shared parts of the ARG need to be identified first, which in turn is hampered by lack of phylogenetic resolution.</p>
      <p>In order to overcome this problem, it is necessary to disentangle topological incompatibilities that are due to reassortment from those due to lack of resolution. We reduce the latter by resolving polytomies in each tree using the clades observed in the other. Formally, given two trees <inline-formula id="pcbi.1010394.e023"><alternatives><graphic xlink:href="pcbi.1010394.e023.jpg" id="pcbi.1010394.e023g" position="anchor"/><mml:math id="M23" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1010394.e024"><alternatives><graphic xlink:href="pcbi.1010394.e024.jpg" id="pcbi.1010394.e024g" position="anchor"/><mml:math id="M24" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>, we introduce in <inline-formula id="pcbi.1010394.e025"><alternatives><graphic xlink:href="pcbi.1010394.e025.jpg" id="pcbi.1010394.e025g" position="anchor"/><mml:math id="M25" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula> every split of <inline-formula id="pcbi.1010394.e026"><alternatives><graphic xlink:href="pcbi.1010394.e026.jpg" id="pcbi.1010394.e026g" position="anchor"/><mml:math id="M26" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula> that is compatible with the set of splits in <inline-formula id="pcbi.1010394.e027"><alternatives><graphic xlink:href="pcbi.1010394.e027.jpg" id="pcbi.1010394.e027g" position="anchor"/><mml:math id="M27" display="inline" overflow="scroll"><mml:msub><mml:mi mathvariant="script">T</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>, and inversely. This assumes that topological differences that could be trivially explained by lack of phylogenetic resolution are never due to reassortment.</p>
      <p>The right panel of <xref rid="pcbi.1010394.g004" ref-type="fig">Fig 4<bold>A</bold></xref> sketches this resolution procedure. In this simple example, the resolving procedure allows one to recover perfect binary trees. However, it is important to note that many incompatibilities due to polytomies are not found in this way. This is especially true when the several descendants of a large polytomy are involved in reassortment events either within the clade or with other parts of the population. Situations where large polytomies and reassortments are entangled in the same clades also represent a challenge to the optimization procedure, as they tend to create local minima in the <italic toggle="yes">N</italic><sub><italic toggle="yes">γ</italic></sub> function. Indeed, in these cases it is often necessary to remove several leaves (i.e. identify as recombinants) from the polytomy before incompatibilities are fixed and the MCCs can be extended. Overall, poor resolution represents a loss of information regarding the genealogies, and makes the problem of finding reassortments intrinsically harder.</p>
    </sec>
    <sec id="sec009">
      <title>Implementation and code availability</title>
      <p>The code of TreeKnit is available at <ext-link xlink:href="https://github.com/PierreBarrat/TreeKnit" ext-link-type="uri">https://github.com/PierreBarrat/TreeKnit</ext-link>. It is implemented in Julia, and also provides a simple CLI script that returns an ARG file as an extended Newick string [<xref rid="pcbi.1010394.ref019" ref-type="bibr">19</xref>]. Other codes that were used for this work are listed here:</p>
      <list list-type="bullet">
        <list-item>
          <p>The implementation for the simulation of ARGs can be found at <ext-link xlink:href="https://github.com/PierreBarrat/ARGTools" ext-link-type="uri">https://github.com/PierreBarrat/ARGTools</ext-link></p>
        </list-item>
        <list-item>
          <p>Miscellaneous functions that were used to evaluate the performance of TreeKnit are available at <ext-link xlink:href="https://github.com/PierreBarrat/TestRecombTools" ext-link-type="uri">https://github.com/PierreBarrat/TestRecombTools</ext-link>.</p>
        </list-item>
      </list>
      <p>The input to TreeKnit are two segment trees in the form of two Newick files. Requirements on the trees are the following:</p>
      <list list-type="bullet">
        <list-item>
          <p>The trees must share all leaf nodes.</p>
        </list-item>
        <list-item>
          <p>Each tree must represent the genealogy of a genomic unit that does not experience reassortment/recombination. This is the case for trees of individual genome segments of influenza viruses.</p>
        </list-item>
        <list-item>
          <p>The two trees must be rooted in a consistent way. For instance, one can use the same outgroup to root both.</p>
        </list-item>
        <list-item>
          <p>Because TreeKnit fully trusts the topology of input trees (more below), all internal nodes should have a strong support. Low support internal nodes can cause TreeKnit to infer spurious reassortments. We highly recommend to remove any internal branch that is not supported by at least one mutation. In addition, we found that removing every internal node with a bootstrap value inferior to 75 gives robust results, see <xref rid="pcbi.1010394.s005" ref-type="supplementary-material">S4 Fig</xref>.</p>
        </list-item>
      </list>
      <p>For simplicity, TreeKnit only takes a pair of trees as input and ignores the sequences that were used to build them. For this reason, it fully trusts the topology of these input trees: the internal nodes are taken as hard topological constraints regardless of the branch length or of confidence values. Since TreeKnit introduces reassortments to explain topological incompatibilities, uncertainty about internal nodes directly translates into uncertainty in the inferred reassortments. For this reason, it is generally preferable to remove internal nodes with low support from the trees, effectively transforming topological constraints into polytomies. Overall, the philosophy of TreeKnit is that the problem of poorly supported nodes should be dealt with before passing the trees to the algorithm.</p>
      <p>TreeKnit expects the branch length of the trees to represent an average number of mutations per sequence position. However, this information is not crucial to the function of the algorithm (see <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>).</p>
      <p>The output of TreeKnit is:</p>
      <list list-type="bullet">
        <list-item>
          <p>A text file containing the list of inferred MCCs defined by their leaves.</p>
        </list-item>
        <list-item>
          <p>An ARG representing the evolution of the two input segments, written using the extended Newick format [<xref rid="pcbi.1010394.ref019" ref-type="bibr">19</xref>].</p>
        </list-item>
        <list-item>
          <p>Trees obtained by resolving each input segment tree using the other one and the knowledge of MCCs.</p>
        </list-item>
        <list-item>
          <p>A text file mapping internal nodes of the ARG to internal nodes of each resolved tree, whenever possible.</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec sec-type="results" id="sec010">
    <title>Results</title>
    <sec id="sec011">
      <title>Validation on simulated genealogies</title>
      <p>We simulated two segment ARGs of one hundred leaves using a coalescent-reassortment process for different values of a scaled reassortment rate <italic toggle="yes">r</italic><sup>⋆</sup>: coalescence dominates reassortment when <italic toggle="yes">r</italic><sup>⋆</sup> ≪ 1, and reassortment dominates coalescence when <italic toggle="yes">r</italic><sup>⋆</sup> ≫ 1. Details of the simulations can be found in <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>. Individual segment trees are then extracted from simulated ARGs, and we use TreeKnit to infer MCCs and compare them to the ground truth.</p>
      <p><xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3<bold>A</bold></xref> shows the number of MCCs <italic toggle="yes">N</italic><sub><italic toggle="yes">mcc</italic></sub>, both real and inferred, as a function of <italic toggle="yes">r</italic><sup>⋆</sup>. Note that by definition, each MCC corresponds to one reassortment in the ARG, except if it contains the root of one of the trees. Therefore, the number of reassortments is equal to either <italic toggle="yes">N</italic><sub><italic toggle="yes">mcc</italic></sub> or <italic toggle="yes">N</italic><sub><italic toggle="yes">mcc</italic></sub> − 1. As expected, the real number of MCCs (marked black line on the figure) is 1 for very low reassortment rates, and equal to the number of leaves for very high reassortment rates (see <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref> for an example).</p>
      <p>At fixed <italic toggle="yes">r</italic><sup>⋆</sup>, the number of inferred MCCs varies systematically with the parameter <italic toggle="yes">γ</italic>. The naive method (<italic toggle="yes">γ</italic> → ∞) is by construction conservative when merging MCCs and consistently overestimates the number of MCCs for <italic toggle="yes">r</italic><sup>⋆</sup> ≲ 1 (see discussion in the <xref rid="sec002" ref-type="sec">Methods</xref> section). In contrast, the parsimonious method (<italic toggle="yes">γ</italic> = 1) estimates the number of reassortments for low <italic toggle="yes">r</italic><sup>⋆</sup> accurately, but clearly underestimates it for <italic toggle="yes">r</italic><sup>⋆</sup> ≳ 0.5. Intermediate values of <italic toggle="yes">γ</italic> fall between these two extremes, with <italic toggle="yes">γ</italic> = 2 and <italic toggle="yes">γ</italic> = 3 being particularly close to ground truth.</p>
      <p>Inferring the correct number of MCCs does not necessarily imply that they are correct. <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref> shows the positive predictive value (PPV), the fraction of correctly predicted reassortments, as a function of <italic toggle="yes">r</italic><sup>⋆</sup>. For <italic toggle="yes">γ</italic> equal 2 or 3, the three regimes discussed on <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref> are immediately visible: inference is trivially easy in the regions of high and low <italic toggle="yes">r</italic><sup>⋆</sup>, and the PPV is then close to one. For <italic toggle="yes">γ</italic> = 1, the PPV plateaus below one for high <italic toggle="yes">r</italic><sup>⋆</sup> meaning that TreeKnit not only infers too few reassortments, but some of those inferred are incorrect. ARG inference is hardest at intermediate reassortment rates. But even in this region the PPV is above 70% for <italic toggle="yes">γ</italic> = 1 and <italic toggle="yes">γ</italic> = 3, and above 80% for <italic toggle="yes">γ</italic> = 2. This suggests that reassortments are predicted with good accuracy by our method if <italic toggle="yes">γ</italic> is chosen in the right range of values. High values of <italic toggle="yes">γ</italic> overestimate the number of reassortment events at low <italic toggle="yes">r</italic><sup>⋆</sup>, resulting in a low <italic toggle="yes">PPV</italic>.</p>
      <p>The fraction of correctly predicted reassortments is only a limited measure of how well the ARG is recovered as all events, whether deep in the tree or on a terminal branch, are weighted equally. We propose an alternative measure to globally assess the accuracy at which the inference represents the truth based on the idea that MCCs define a <italic toggle="yes">clustering</italic> of leaves. Two clusterings of the same set can be compared using the variation of information (VI) [<xref rid="pcbi.1010394.ref020" ref-type="bibr">20</xref>]. The VI of two partitions of a set is equal to the difference between the sum of the entropies of the two partitions and their mutual information times two. It is 0 if the two partitions are identical, and equal to log(<italic toggle="yes">L</italic>) if the two partitions are maximally different, where <italic toggle="yes">L</italic> is the number of elements of the set, here the number of leaves in the trees. Here, we scale the VI by log(<italic toggle="yes">L</italic>) so that it varies between 0 and 1. While the values of VI are not as directly interpreted as a fraction of true positives, they constitute a global measure of how close a set of inferred MCCs is to the ground truth and can thus be used to compare methods.</p>
      <p><xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3<bold>C</bold></xref> shows the VI distance between the real MCCs and the ones inferred by TreeKnit for different <italic toggle="yes">γ</italic>. Regions where <italic toggle="yes">r</italic><sup>⋆</sup> ≫ 1 and <italic toggle="yes">r</italic><sup>⋆</sup> ≪ 1 result in accurate inference for <italic toggle="yes">γ</italic> &gt; 1. As expected, the performance of the naive method starts to decrease as soon as <italic toggle="yes">r</italic><sup>⋆</sup> rises above very small values, or in other words as soon as reassortments appear in the ARG. As before, <italic toggle="yes">γ</italic> = 2 seems to be an optimal value across the entire range of reassortment rate. In <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>, we show that <italic toggle="yes">γ</italic> = 2 to 3 is optimal for different coalescent processes (<xref rid="pcbi.1010394.s006" ref-type="supplementary-material">S5</xref> and <xref rid="pcbi.1010394.s007" ref-type="supplementary-material">S6</xref> Figs), as well as for ARGs with asynchronously sampled leaves (<xref rid="pcbi.1010394.s008" ref-type="supplementary-material">S7 Fig</xref>). Therefore, fine-tuning of <italic toggle="yes">γ</italic> does not seem necessary.</p>
      <p>Another way of estimating the accuracy of the inference is to look at predictions made for individual branches of the segment trees. For one of the trees, each branch can either be predicted to be shared with the other tree in the ARG, or to be specific to its tree (see illustration in <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref>). <xref rid="pcbi.1010394.s009" ref-type="supplementary-material">S8 Fig</xref> shows the accuracy at which individual branches are predicted to be shared or not for different values of <italic toggle="yes">γ</italic>. As expected, <italic toggle="yes">γ</italic> = 1 results in branches incorrectly predicted to be shared, while for large values of <italic toggle="yes">γ</italic> shared branches are often missed. The values of <italic toggle="yes">γ</italic> lying in between smoothly interpolate between these two behaviors. <italic toggle="yes">γ</italic> can thus be seen as a way to balance between different types of false predictions for branches of the ARG.</p>
    </sec>
    <sec id="sec012">
      <title>Increasing phylogenetic resolution of segment trees</title>
      <p>While simulated trees are completely binary, trees reconstructed from genome sequences often lack resolution resulting in polytomies. This problem is particularly acute when the sample consists of many closely related viruses. As stated in the Methods section, poor resolution of trees leads to complications for our topology based method: topological differences due to reassortment must be disentangled from those due to different polytomies in segment trees, see <xref rid="pcbi.1010394.g004" ref-type="fig">Fig 4<bold>A</bold></xref> for an example. Polytomies are thus a source of errors in the inference of MCCs. At the same time, the knowledge of the MCCs allows us to better resolve trees: in regions of shared branches in the ARG, the two trees must have the same splits, <italic toggle="yes">i.e</italic>. the same internal nodes. This means that once the MCCs are inferred, it is possible to introduce some of the splits of each tree in the other, and therefore to partly resolve them.</p>
      <p>To quantify the errors in ARG reconstruction due to limited resolution and to assess the quality of the resolution once the MCCs are known, we simulated ARGs with limited resolution (see <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>). A parameter <italic toggle="yes">c</italic> ≥ 0 controls the amount of polytomies: <italic toggle="yes">c</italic> plays the role of an inverse mutations rate and <italic toggle="yes">c</italic> = 0 corresponds to perfectly resolved binary trees where every branch is supported by mutations, while <italic toggle="yes">c</italic> → ∞ corresponds to completely unresolved star-trees. A value of <italic toggle="yes">c</italic><sup>⋆</sup> ≃ 0.8 results in a level of resolution that is quantitatively close to the one observed in trees of A/H3N2 HA with strains of the same season (see <xref rid="pcbi.1010394.s010" ref-type="supplementary-material">S9</xref> and <xref rid="pcbi.1010394.s011" ref-type="supplementary-material">S10</xref> Figs).</p>
      <p><xref rid="pcbi.1010394.g004" ref-type="fig">Fig 4<bold>B</bold></xref> shows the VI distance of inferred MCCs to the real ones (using <italic toggle="yes">γ</italic> = 2) as a function of <italic toggle="yes">r</italic><sup>⋆</sup> for varying resolution of the segment trees controlled by <italic toggle="yes">c</italic>. The case of <italic toggle="yes">c</italic> = 0 is equivalent to the <italic toggle="yes">γ</italic> = 2 curve on <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3<bold>C</bold></xref>. The performance of the method decreases gradually with the loss of resolution. For A/H3N2 like resolution (<italic toggle="yes">c</italic> = 0.8), the error is close to doubled when compared to the <italic toggle="yes">c</italic> = 0 case. However, for most reassortment rates, the gain in performance over using the naive method remains substantial.</p>
      <p>Once MCCs are inferred, we can resolve the subtrees corresponding to an MCC by complementing each others splits. However, this will only result in correct resolutions if the MCCs are correctly identified to begin with and thus requires further validation. <xref rid="pcbi.1010394.g004" ref-type="fig">Fig 4<bold>C</bold></xref> shows the number of missing splits that are correctly and incorrectly introduced scaled by the total number of missing splits, as a function of <italic toggle="yes">r</italic><sup>⋆</sup> (lines with markers) and for both the naive and the <italic toggle="yes">γ</italic> = 2 method. Note, that a split that is resolved in neither tree can not be resolved this way. The maximal resolution, obtained with the knowledge of the true MCCs, is indicated in the figure, showing that for <italic toggle="yes">γ</italic> = 2 the majority of possible resolutions are found while only a small fraction of incorrect splits are introduced.</p>
    </sec>
    <sec id="sec013">
      <title>Comparison with other methods</title>
      <p>To demonstrate the utility of TreeKnit, we compare it to GiRaF [<xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>, <xref rid="pcbi.1010394.ref021" ref-type="bibr">21</xref>] and the recently published fully bayesian method CoalRe [<xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>, <xref rid="pcbi.1010394.ref017" ref-type="bibr">17</xref>].</p>
      <p>GiRaf is, as TreeKnit, based on topological differences between the two trees. Given two trees, it uses the compatibility network of their splits to infer the position of reassortments. However, unlike our method, it does not aim at inferring the whole ARG. Instead, it finds a set of probable reassortments, which may not fully explain the topological differences between segment trees.</p>
      <p>CoalRe [<xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>, <xref rid="pcbi.1010394.ref017" ref-type="bibr">17</xref>], on the other hand, is a bayesian method that uses a coalescence-reassortment process to construct a probability distribution for ARGs given a sample of sequences. It reconstructs the ARG by sampling from this distribution. It can thus be seen as an extension of usual tree inference methods to the case of genealogies with reassortment. By construction, it uses not only the topology of segment trees, but all the available information contained in the gene sequences.</p>
      <p>We compare methods for three different reassortment rates: <italic toggle="yes">r</italic><sup>⋆</sup> ∈ {0.01, 0.05, 0.25}. Note that the intermediate value <italic toggle="yes">r</italic><sup>⋆</sup> = 0.05 is close to the one that we estimated for segments HA and NA of A/H3N2 influenza. For each value of <italic toggle="yes">r</italic><sup>⋆</sup>, we simulate five ARGs and extract the segment trees from them. We then simulate the evolution of sequences on these trees, using the JC69 model for simplicity. Mutation rate <italic toggle="yes">μ</italic> is either tuned such that the resulting trees have a close to perfect resolution (<italic toggle="yes">μ</italic><sup><italic toggle="yes">high</italic></sup>), or such that the trees have flu-like polytomies (<italic toggle="yes">μ</italic><sup><italic toggle="yes">low</italic></sup>). We use all three methods to infer reassortment from the simulated sequences. In the case of GiRaF and TreeKnit, trees must first be reconstructed: this is done using the MrBayes program [<xref rid="pcbi.1010394.ref022" ref-type="bibr">22</xref>] in the case of GiRaF (code provided in the original publication [<xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>]), and using IQ-Tree in the case of TreeKnit [<xref rid="pcbi.1010394.ref023" ref-type="bibr">23</xref>]. The natural inputs of CoalRe are sequence alignments, and no prior tree reconstruction is needed.</p>
      <p><xref rid="pcbi.1010394.g005" ref-type="fig">Fig 5</xref> quantifies the accuracy and completeness of the inferences made by the three methods. TreeKnit and CoalRe perform similarly well, with CoalRe reporting slightly less false reassortments. GiRaF misses reassortment events, but very rarely reports a reassortment that did not happen.</p>
      <fig position="float" id="pcbi.1010394.g005">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1010394.g005</object-id>
        <label>Fig 5</label>
        <caption>
          <title>Comparison of TreeKnit with CoalRe [<xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>, <xref rid="pcbi.1010394.ref017" ref-type="bibr">17</xref>] and GiRaF [<xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>, <xref rid="pcbi.1010394.ref021" ref-type="bibr">21</xref>] on simulated ARGs of 100 leaves.</title>
          <p>For three reassortment rates, shows the <bold>Left</bold>: number of true reassortments, <bold>Center</bold>: number of false reassortments, and <bold>Right</bold>: number of missed reassortments, for all three methods. Large markers represent the average over 5 simulations for each <italic toggle="yes">r</italic><sup>⋆</sup>. Smaller markers show results on individual ARGs. Results for each method are slightly shifted on the <italic toggle="yes">r</italic><sup>⋆</sup>-axis for visibility.</p>
        </caption>
        <graphic xlink:href="pcbi.1010394.g005" position="float"/>
      </fig>
      <p>TreeKnit has a much shorter runtime than the other methods. For the trees of 100 leaves used here, the average runtime of TreeKnit was 40ms, whereas GiRaF took 40s. Note that these times are small compared what is needed to infer the phylogenetic trees: the IQ-Tree runs took about 30s, while the MrBayes runs took about 20minutes. <xref rid="pcbi.1010394.s012" ref-type="supplementary-material">S11 Fig</xref> shows that for our simulated genealogies, the runtime of TreeKnit scales quadratically with the number of leaves. We also observed that GiRaF scales similarly. For very asymmetric trees, which can be the case for influenza genealogies, we observed that the scaling of TreeKnit can become closer to cubic. Finally, CoalRe takes several hours to infer one ARG. TreeKnit thus runs orders of magnitude faster than CoalRe at the cost of a very small reduction accuracy.</p>
    </sec>
    <sec id="sec014">
      <title>Results on influenza A data</title>
      <p>TreeKnit was developed for application to influenza virus data and in particular to seasonal influenza viruses. We have shown (see <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref>) that TreeKnit accurately infers MCCs of simulated genealogies. But accuracy depends on the reassortment rate and the resolution of the segment trees. In <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>, we estimate that A/H3N2 influenza data corresponds to <italic toggle="yes">c</italic> = 0.8 and <italic toggle="yes">r</italic><sup>⋆</sup> ≈ 0.05 (<xref rid="pcbi.1010394.s010" ref-type="supplementary-material">S9</xref> and <xref rid="pcbi.1010394.s013" ref-type="supplementary-material">S12(<bold>A</bold>)</xref> Figs). <xref rid="pcbi.1010394.s013" ref-type="supplementary-material">S12(<bold>B</bold>) Fig</xref> uses simulations to estimate the difficulty of the inference problem in the space of <italic toggle="yes">r</italic> and <italic toggle="yes">c</italic>. Seasonal influenza viruses seem to lie exactly in a region of parameter space where the problem is hard, but most is gained over the naive method. We can thus expect significant improvement in terms of resolution of the segment trees and non-trivial reassortment patterns.</p>
      <p>As a mean to investigate the consistency between TreeKnit and other methods, we use TreeKnit on the collection of human influenza H3N2 isolates sequenced and analyzed in [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>]. This data has previously been used as a test set by some authors [<xref rid="pcbi.1010394.ref008" ref-type="bibr">8</xref>, <xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>]. It consists of about 150 strains sampled in New York between 1999 and 2004.</p>
      <p>When considering HA and NA segments, two reassorted clades were found in [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>] to be reassortments by manual inspection. The GiRaF method [<xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>] found one more reassorted clade containing a single strain. We applied TreeKnit to this dataset (<italic toggle="yes">γ</italic> = 2), with results shown on <xref rid="pcbi.1010394.s002" ref-type="supplementary-material">S1</xref> and <xref rid="pcbi.1010394.s003" ref-type="supplementary-material">S2</xref> Figs. TreeKnit recovers the two reassortments found in [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>] and the additional one found by GiRaF, and also finds three extra reassorted clades: {A/New York/137/2004, A/New York/138/2003}, {A/New York/177/1999}, and a large clade consisting of strains sampled between 2003 and 2004. Manual inspection of the trees suggests that these three clades are indeed reassortments. Note that the fact that we find more reassortments than GiRaF on the same data is consistent with results shown on <xref rid="pcbi.1010394.g005" ref-type="fig">Fig 5</xref>.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec015">
    <title>Discussion</title>
    <p>Recombination and reassortment are important to reduce mutational load by weeding out deleterious mutations [<xref rid="pcbi.1010394.ref024" ref-type="bibr">24</xref>] and can facilitate adaptation, especially in rapidly evolving populations [<xref rid="pcbi.1010394.ref025" ref-type="bibr">25</xref>, <xref rid="pcbi.1010394.ref026" ref-type="bibr">26</xref>]. While a number of studies document frequent reassortment in seasonal influenza virus populations [<xref rid="pcbi.1010394.ref007" ref-type="bibr">7</xref>, <xref rid="pcbi.1010394.ref008" ref-type="bibr">8</xref>, <xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>, <xref rid="pcbi.1010394.ref027" ref-type="bibr">27</xref>], reassortment is often ignored because of a lack of methods to infer ARGs at scale. Furthermore, the inferred reassortment history is difficult to visualize and interpret as soon as more than a few reassortment events occurred.</p>
    <p>We introduced TreeKnit, a fast and accurate method to infer ancestral reassortment graphs (ARG) from two segment trees. Its underlying idea is to find regions of the genealogy without reassortments, where the two trees have the same topology (MCCs). Intuitively, this is done by “knitting” the trees together starting from the leaves. The method iteratively grows compatible regions and introduces reassortment events until the entire observable ARG is inferred. Strictly speaking the ARG also includes deep reassortment events that are shadowed by more recent dynamics. TreeKnit infers only the observable part of the ARG that is directly connected to the observed taxa. At each stage, the method introduces reassortment events that explain the largest number of incompatibilities and stops when no more reassortment events are found that explain at least <italic toggle="yes">γ</italic> incompatibilities.</p>
    <p>The parameter <italic toggle="yes">γ</italic> allows us to tune the behavior of TreeKnit: at <italic toggle="yes">γ</italic> = 1, TreeKnit tries to minimize the number of reassortments, while at <italic toggle="yes">γ</italic> → ∞ only complete subtrees with identical topology are identified. Simulations revealed that <italic toggle="yes">γ</italic> = 2 is a robust choice, giving best results for a wide range of reassortment rates. Note that the method is by design <italic toggle="yes">greedy</italic>, since the function <inline-formula id="pcbi.1010394.e028"><alternatives><graphic xlink:href="pcbi.1010394.e028.jpg" id="pcbi.1010394.e028g" position="anchor"/><mml:math id="M28" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mi>γ</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>σ</mml:mi><mml:mo>→</mml:mo></mml:mover><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> only takes into account incompatibilities that are one level above the (effective) leaves. Comparing TreeKnit to CoalRe suggests that the greedy heuristic achieves similar accuracy to more principled bayesian approaches for parameter sets tested, while being orders of magnitude faster.</p>
    <p>Efficient inference of ARGs of seasonal influenza viruses should enable deeper insights into the importance of reassortment for antigenic evolution through combination of specific HA and NA variants. So far this has remained unclear, with studies reaching different conclusions [<xref rid="pcbi.1010394.ref008" ref-type="bibr">8</xref>, <xref rid="pcbi.1010394.ref009" ref-type="bibr">9</xref>]. This discordance might in part due to the lack of tools that can infer ARGs of large data sets. In addition, joint analysis of multiple segments should improve resolution of segment trees with polytomies. In parts of the ARG that are common to both segment trees, the sequences of the two segments can be considered jointly, which amounts to roughly doubling the number of mutations per branch. In the future, we plan to extend TreeKnit to multiple and complement it with ARG visualization tools in Nextstrain [<xref rid="pcbi.1010394.ref028" ref-type="bibr">28</xref>].</p>
  </sec>
  <sec id="sec016" sec-type="supplementary-material">
    <title>Supporting information</title>
    <supplementary-material id="pcbi.1010394.s001" position="float" content-type="local-data">
      <label>S1 Text</label>
      <caption>
        <title>Additional analysis, derivations, methods, and robustness checks.</title>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s001.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s002" position="float" content-type="local-data">
      <label>S1 Fig</label>
      <caption>
        <title>Segment trees and tanglegram for the 156 strains studied in [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>].</title>
        <p>Node support is shown on the sketch in <xref rid="pcbi.1010394.s003" ref-type="supplementary-material">S2 Fig</xref>. Strains and branches are colored based on MCCs found by our method (<italic toggle="yes">γ</italic> = 2). MCC 7 does not correspond to a reassortment, as it contains the roots. The list of remaining MCCs is as follows: 1→{A/New York/105/2003}; 2→{A/New York/177/1999}; 3→{A/New York/137/2004, A/New York/138/2003}; 4→{A/New York/52/2004, A/New York/59/2003}; 5→{A/New York/32/2003, A/New York/198/2003, A/New York/199/2003}; 6→{<monospace>R</monospace>} (see <xref rid="pcbi.1010394.s003" ref-type="supplementary-material">S2 Fig</xref>). Previous studies only found reassortments 1, 4 and 5 [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>, <xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>]. Note that since MCCs have the same topology in the two trees, it is possible to completely disentangle lines of the same color in this plot.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s002.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s003" position="float" content-type="local-data">
      <label>S2 Fig</label>
      <caption>
        <title>Segment trees for the 156 strains studied in [<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>].</title>
        <p><bold>Left</bold>: HA segment and <bold>right</bold>: NA segment. Some clades are collapsed for better visibility. Support is indicated for some internal nodes in the form of ultrafast bootstrap values [<xref rid="pcbi.1010394.ref005" ref-type="bibr">5</xref>], either on the branch above the node or at the right of the node. The 6 MCCs corresponding to a reassortment found by our method (<italic toggle="yes">γ</italic> = 2) are highlighted. One of them involves a clade of 58 strains, shown collapsed and labelled as “<monospace>R</monospace>”. The remaining MCC contains all remaining strains as well as the root of both trees, and does not correspond to a reassortment. Previous studies ([<xref rid="pcbi.1010394.ref010" ref-type="bibr">10</xref>, <xref rid="pcbi.1010394.ref014" ref-type="bibr">14</xref>]) only found reassortments for clades {A/New York/52/2004, A/New York/59/2003}, {A/New York/32/2003, A/New York/198/2003, A/New York/199/2003} and {A/New York/105/2003}. We also find clades {A/New York/137/2004, A/New York/138/2003}, {A/New York/177/1999} and {<monospace>R</monospace>}.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s003.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s004" position="float" content-type="local-data">
      <label>S3 Fig</label>
      <caption>
        <title>Illustration of inferrable and non-inferrable reassortments.</title>
        <p>The ARG is similar to the high-reassortment case of <xref rid="pcbi.1010394.g001" ref-type="fig">Fig 1</xref> of the main text. Reassortments highlighted by black circles are connected to observed sequences (<italic toggle="yes">i.e</italic>. leaves) by branches shared by the two trees: they will leave traces in the segment trees in the form of topological differences or branch length differences. In the former case, TreeKnit can identify them. On the contrary, reassortments highlighted by black squares are only connected to observed sequences by non-shared branches. Such reassortments leave almost no traces in the segment trees, and TreeKnit does not try to infer them. Note that the coalescence events between different segment lineages that take place below the reassortments marked by squares are also intrisically hard to infer from sequence data.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s004.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s005" position="float" content-type="local-data">
      <label>S4 Fig</label>
      <caption>
        <title>Evaluation of the robustness of our method with respect to uncertainty in the tree inference.</title>
        <p>When treeknit is run on two identical trees, there should be exactly one MCC. To test the effect of uncertainty of tree inference on reassortment inference, when we run the tree builder (iqtree) twice on the same alignment. The graph shows the average number of MCCs obtained when applying the algorithm as a function of the bootstrap value below which a branch is collapsed. The average is performed over 10 A/H3N2 HA alignments. Finding more than one MCC implies that some topological differences are introduced by the tree building process, typically because of weakly supported nodes. A minimum bootstrap of 75 is enough to guarantee an MCC inference robust to errors in the inference of the trees.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s005.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s006" position="float" content-type="local-data">
      <label>S5 Fig</label>
      <caption>
        <title>Equivalent to <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref> of the main text for the Yule coalescent.</title>
        <p>Results of <italic toggle="yes">γ</italic>-methods on simulated ARGs of 100 leaves. Increasing values of <italic toggle="yes">γ</italic> are shown by colored lines, from red to blue.<bold>A</bold>: Number of MCCs found by different methods as a function of the reassortment rate. The real number of MCCs is represented by the marked black line. The naive method (dashed black line) overestimates the number of MCCs for low <italic toggle="yes">ρ</italic>, while the parsimonious one (<italic toggle="yes">γ</italic> = 1) underestimates it for high <italic toggle="yes">ρ</italic>. <bold>B</bold>: True positive rate for reassortments: fraction of inferred reassortments that are indeed present in the real ARG. The low number of reassortments results in a relatively large uncertainty for this quantity for <italic toggle="yes">ρ</italic> ≪ 1. <bold>C</bold>: Distance between inferred and real MCCs for different methods. The distance is based on the variation of information.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s006.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s007" position="float" content-type="local-data">
      <label>S6 Fig</label>
      <caption>
        <title>Equivalent to <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref> of the main text for the Kingman coalescent.</title>
        <p>Results of <italic toggle="yes">γ</italic>-methods on simulated ARGs of 100 leaves. Increasing values of <italic toggle="yes">γ</italic> are shown by colored lines, from red to blue.<bold>A</bold>: Number of MCCs found by different methods as a function of the reassortment rate. The real number of MCCs is represented by the marked black line. The naive method (dashed black line) overestimates the number of MCCs for low <italic toggle="yes">ρ</italic>, while the parsimonious one (<italic toggle="yes">γ</italic> = 1) underestimates it for high <italic toggle="yes">ρ</italic>. <bold>B</bold>: True positive rate for reassortments: fraction of inferred reassortments that are indeed present in the real ARG. The low number of reassortments results in a relatively large uncertainty for this quantity for <italic toggle="yes">ρ</italic> ≪ 1. <bold>C</bold>: Distance between inferred and real MCCs for different methods. The distance is based on the variation of information.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s007.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s008" position="float" content-type="local-data">
      <label>S7 Fig</label>
      <caption>
        <title>Equivalent to <xref rid="pcbi.1010394.g003" ref-type="fig">Fig 3</xref> of the main text for asynchronous samples.</title>
        <p>Results of <italic toggle="yes">γ</italic>-methods on simulated ARGs of 100 leaves. The backward simulation of the ARGs starts with 25 lineages (leaves), and the 75 remaining leaves are added at a fixed rate over a time ∼2<italic toggle="yes">N</italic>, with <italic toggle="yes">N</italic> the population size. This imitates typical influenza trees with strains coming from different seasons. Increasing values of <italic toggle="yes">γ</italic> are shown by colored lines, from red to blue. <bold>A</bold>: Number of MCCs found by different methods as a function of the reassortment rate. The real number of MCCs is represented by the marked black line. The naive method (dashed black line) overestimates the number of MCCs for low <italic toggle="yes">ρ</italic>, while the parsimonious one (<italic toggle="yes">γ</italic> = 1) underestimates it for high <italic toggle="yes">ρ</italic>. <bold>B</bold>: True positive rate for reassortments: fraction of inferred reassortments that are indeed present in the real ARG. The low number of reassortments results in a relatively large uncertainty for this quantity for <italic toggle="yes">ρ</italic> ≪ 1. <bold>C</bold>: Distance between inferred and real MCCs for different methods. The distance is based on the variation of information.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s008.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s009" position="float" content-type="local-data">
      <label>S8 Fig</label>
      <caption>
        <title>False predictions for individual branches as a function of <italic toggle="yes">ρ</italic>, for different values of <italic toggle="yes">γ</italic>.</title>
        <p>Solid lines correspond to branches that are predicted to be shared by the two segment trees, but are not in the real ARG. On the contrary, dashed lines correspond to branches that are predicted to not be shared by the two segment trees, but are shared in the real ARG. The parsimonious method (top-right) makes a lot of the first type of error, and few of the second type. Increasing <italic toggle="yes">γ</italic> transitions between the two types of errors. The naive method (grey dashed line) makes close to only errors of the second type.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s009.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s010" position="float" content-type="local-data">
      <label>S9 Fig</label>
      <caption>
        <title>Solid lines: Ratio of number of leaves to number of nodes in simulated trees of different sizes, as a function of the amount of parameter <italic toggle="yes">c</italic>, artificially introducing polytomies.</title>
        <p>Dashed lines: same quantity for A/H3N2 HA trees. For a perfectly resolved tree, this quantity is approximately one half. Polytomies are introduced in simulated trees using the method described in section SA2 of <xref rid="pcbi.1010394.s001" ref-type="supplementary-material">S1 Text</xref>. A unique value <italic toggle="yes">c</italic><sup>⋆</sup> allows simulated trees of different sizes to reproduce the lack of resolution of influenza trees.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s010.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s011" position="float" content-type="local-data">
      <label>S10 Fig</label>
      <caption>
        <title>Histogram of the size of polytomies for A/H3N2 HA trees and for simulated ones, with a level of polytomies chosen to reproduce that of influenza.</title>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s011.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s012" position="float" content-type="local-data">
      <label>S11 Fig</label>
      <caption>
        <title>Runtime in seconds as a function of the number of leaves <italic toggle="yes">L</italic>, for different values of <italic toggle="yes">ρ</italic>, in log-log scale.</title>
        <p>Performed on a single CPU. The linear fit is done for <italic toggle="yes">L</italic> &gt; 10<sup>2</sup>. As expected, runtime is quadratic in the number of leaves of the trees.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s012.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s013" position="float" content-type="local-data">
      <label>S12 Fig</label>
      <caption>
        <p><bold>Left</bold>: Estimation of the reassortment rate of segments HA and NA in A/H3N2 influenza. Colored lines show the number of MCCs inferred by <italic toggle="yes">γ</italic>-methods as a function of <italic toggle="yes">γ</italic>. Colors going from blue to red correspond to increasing values of <italic toggle="yes">ρ</italic>. The black line shows the same quantity for the influenza trees. The curve corresponding to influenza lies between the values 0.043 and 0.093. <bold>Right</bold>: VI distance of inferred MCC to the real ones for simulated data and <italic toggle="yes">γ</italic> = 2, as a function of the reassortment rate <italic toggle="yes">ρ</italic> and the amount of polytomies in the trees. The star corresponds to the estimated position of A/H3N2 influenza (HA/NA segments, sequences from the same epidemiological season).</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s013.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s014" position="float" content-type="local-data">
      <label>S13 Fig</label>
      <caption>
        <title>Similar to <xref rid="pcbi.1010394.g005" ref-type="fig">Fig 5</xref> from the main text, with sequences generated using a lower mutation rate.</title>
        <p>This results in reconstructed trees with more polytomies. <bold>Left</bold>: number of true reassortments, <bold>Center</bold>: number of false reassortments, and <bold>Right</bold>: number of missed reassortments, for all three methods (Treeknit, GiRaF, CoalRe). Compared to better resolved trees (<xref rid="pcbi.1010394.g005" ref-type="fig">Fig 5</xref>), GiRaF and Coalre infer more false reassortments while Treeknit has more missed reassortments.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s014.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s015" position="float" content-type="local-data">
      <label>S14 Fig</label>
      <caption>
        <title>Estimation of the convergence of the algorithm for simulated ARGs of <italic toggle="yes">L</italic> leaves: VI distance to real MCCs as a function of the number of iterations of the SA optimization, scaled by <italic toggle="yes">L</italic>.</title>
        <p>The rhythm of convergence is the same for all curves, indicating that the number of iterations needed to reach convergence should be proportional to <italic toggle="yes">L</italic>.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s015.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s016" position="float" content-type="local-data">
      <label>S15 Fig</label>
      <caption>
        <title>Estimation of the reproducibility of results for simulated ARGs of <italic toggle="yes">L</italic> leaves: VI distance between two independent runs as function of the number of iterations of the SA optimization, scaled by <italic toggle="yes">L</italic>.</title>
        <p>For a very low number of iterations, results are close to the naive MCCs, which are the starting point of the optimization. The distance between two runs is maximal for an intermediate number of iterations, and vanishes again as the optimization converges.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s016.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pcbi.1010394.s017" position="float" content-type="local-data">
      <label>S16 Fig</label>
      <caption>
        <title>PPV for inferred reassortments as a function of their topological distance to the root of one of the segment trees using simulated data.</title>
        <p>Reassortments inferred close to the root, <italic toggle="yes">i.e</italic>. distance ≲ 4, are more often wrong. A natural explanation for this is that errors made at an early stage of the algorithm will propagate back for the rest of the inference. Additionally, a reassortment close to the leaves can result in a large number of incompatibilities, as it can “move” a clade to a very different part of the tree. Close to the root, there are few lineages left, and thus reassortments have a weaker topological signature.</p>
        <p>(PNG)</p>
      </caption>
      <media xlink:href="pcbi.1010394.s017.png">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list>
    <title>References</title>
    <ref id="pcbi.1010394.ref001">
      <label>1</label>
      <mixed-citation publication-type="journal"><name><surname>Simon-Loriere</surname><given-names>E</given-names></name>, <name><surname>Holmes</surname><given-names>EC</given-names></name>. <article-title>Why do RNA viruses recombine?</article-title><source>Nature Reviews Microbiology</source>. <year>2011</year>;<volume>9</volume>(<issue>8</issue>):<fpage>617</fpage>–<lpage>626</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1038/nrmicro2614</pub-id><?supplied-pmid 21725337?><pub-id pub-id-type="pmid">21725337</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref002">
      <label>2</label>
      <mixed-citation publication-type="journal"><name><surname>Smith</surname><given-names>GJD</given-names></name>, <name><surname>Bahl</surname><given-names>J</given-names></name>, <name><surname>Vijaykrishna</surname><given-names>D</given-names></name>, <name><surname>Zhang</surname><given-names>J</given-names></name>, <name><surname>Poon</surname><given-names>LLM</given-names></name>, <name><surname>Chen</surname><given-names>H</given-names></name>, <etal>et al</etal>. <article-title>Dating the emergence of pandemic influenza viruses</article-title>. <source>Proceedings of the National Academy of Sciences</source>. <year>2009</year>;<volume>106</volume>(<issue>28</issue>):<fpage>11709</fpage>–<lpage>11712</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1073/pnas.0904991106</pub-id><?supplied-pmid 19597152?><pub-id pub-id-type="pmid">19597152</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>Guan</surname><given-names>Y</given-names></name>, <name><surname>Vijaykrishna</surname><given-names>D</given-names></name>, <name><surname>Bahl</surname><given-names>J</given-names></name>, <name><surname>Zhu</surname><given-names>H</given-names></name>, <name><surname>Wang</surname><given-names>J</given-names></name>, <name><surname>Smith</surname><given-names>GJD</given-names></name>. <article-title>The emergence of pandemic influenza viruses</article-title>. <source>Protein &amp; Cell</source>. <year>2010</year>;<volume>1</volume>(<issue>1</issue>):<fpage>9</fpage>–<lpage>13</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1007/s13238-010-0008-z</pub-id><?supplied-pmid 21203993?><pub-id pub-id-type="pmid">21203993</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref004">
      <label>4</label>
      <mixed-citation publication-type="journal"><name><surname>Price</surname><given-names>MN</given-names></name>, <name><surname>Dehal</surname><given-names>PS</given-names></name>, <name><surname>Arkin</surname><given-names>AP</given-names></name>. <article-title>FastTree: Computing Large Minimum Evolution Trees with Profiles instead of a Distance Matrix</article-title>. <source>Molecular Biology and Evolution</source>. <year>2009</year>;<volume>26</volume>(<issue>7</issue>):<fpage>1641</fpage>–<lpage>1650</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/molbev/msp077</pub-id><?supplied-pmid 19377059?><pub-id pub-id-type="pmid">19377059</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref005">
      <label>5</label>
      <mixed-citation publication-type="journal"><name><surname>Minh</surname><given-names>BQ</given-names></name>, <name><surname>Schmidt</surname><given-names>HA</given-names></name>, <name><surname>Chernomor</surname><given-names>O</given-names></name>, <name><surname>Schrempf</surname><given-names>D</given-names></name>, <name><surname>Woodhams</surname><given-names>MD</given-names></name>, <name><surname>von Haeseler</surname><given-names>A</given-names></name>, <etal>et al</etal>. <article-title>IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era</article-title>. <source>Molecular Biology and Evolution</source>. <year>2020</year>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/molbev/msaa131</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref006">
      <label>6</label>
      <mixed-citation publication-type="journal"><name><surname>Stamatakis</surname><given-names>A</given-names></name>. <article-title>RAxML version 8: a tool for phylogenetic analysis and post-analysis of large phylogenies</article-title>. <source>Bioinformatics (Oxford, England)</source>. <year>2014</year>;<volume>30</volume>(<issue>9</issue>):<fpage>1312</fpage>–<lpage>1313</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btu033</pub-id><?supplied-pmid 24451623?><pub-id pub-id-type="pmid">24451623</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref007">
      <label>7</label>
      <mixed-citation publication-type="journal"><name><surname>Neverov</surname><given-names>AD</given-names></name>, <name><surname>Lezhnina</surname><given-names>KV</given-names></name>, <name><surname>Kondrashov</surname><given-names>AS</given-names></name>, <name><surname>Bazykin</surname><given-names>GA</given-names></name>. <article-title>Intrasubtype Reassortments Cause Adaptive Amino Acid Replacements in H3N2 Influenza Genes</article-title>. <source>PLOS Genetics</source>. <year>2014</year>;<volume>10</volume>(<issue>1</issue>):<fpage>e1004037</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1371/journal.pgen.1004037</pub-id><?supplied-pmid 24415946?><pub-id pub-id-type="pmid">24415946</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref008">
      <label>8</label>
      <mixed-citation publication-type="journal"><name><surname>Villa</surname><given-names>M</given-names></name>, <name><surname>Lässig</surname><given-names>M</given-names></name>. <article-title>Fitness cost of reassortment in human influenza</article-title>. <source>PLOS Pathogens</source>. <year>2017</year>;<volume>13</volume>(<issue>11</issue>):<fpage>e1006685</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1371/journal.ppat.1006685</pub-id><?supplied-pmid 29112968?><pub-id pub-id-type="pmid">29112968</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref009">
      <label>9</label>
      <mixed-citation publication-type="journal"><name><surname>Müller</surname><given-names>NF</given-names></name>, <name><surname>Stolz</surname><given-names>U</given-names></name>, <name><surname>Dudas</surname><given-names>G</given-names></name>, <name><surname>Stadler</surname><given-names>T</given-names></name>, <name><surname>Vaughan</surname><given-names>TG</given-names></name>. <article-title>Bayesian inference of reassortment networks reveals fitness benefits of reassortment in human influenza viruses</article-title>. <source>Proceedings of the National Academy of Sciences</source>. <year>2020</year>;<volume>117</volume>(<issue>29</issue>):<fpage>17104</fpage>–<lpage>17111</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1073/pnas.1918304117</pub-id><?supplied-pmid 32631984?><pub-id pub-id-type="pmid">32631984</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref010">
      <label>10</label>
      <mixed-citation publication-type="journal"><name><surname>Holmes</surname><given-names>EC</given-names></name>, <name><surname>Ghedin</surname><given-names>E</given-names></name>, <name><surname>Miller</surname><given-names>N</given-names></name>, <name><surname>Taylor</surname><given-names>J</given-names></name>, <name><surname>Bao</surname><given-names>Y</given-names></name>, <name><surname>George</surname><given-names>KS</given-names></name>, <etal>et al</etal>. <article-title>Whole-Genome Analysis of Human Influenza A Virus Reveals Multiple Persistent Lineages and Reassortment among Recent H3N2 Viruses</article-title>. <source>PLOS Biology</source>. <year>2005</year>;<volume>3</volume>(<issue>9</issue>):<fpage>e300</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1371/journal.pbio.0030300</pub-id><?supplied-pmid 16026181?><pub-id pub-id-type="pmid">16026181</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref011">
      <label>11</label>
      <mixed-citation publication-type="journal"><name><surname>Nelson</surname><given-names>MI</given-names></name>, <name><surname>Viboud</surname><given-names>C</given-names></name>, <name><surname>Simonsen</surname><given-names>L</given-names></name>, <name><surname>Bennett</surname><given-names>RT</given-names></name>, <name><surname>Griesemer</surname><given-names>SB</given-names></name>, <name><surname>George</surname><given-names>KS</given-names></name>, <etal>et al</etal>. <article-title>Multiple Reassortment Events in the Evolutionary History of H1N1 Influenza A Virus Since 1918</article-title>. <source>PLOS Pathogens</source>. <year>2008</year>;<volume>4</volume>(<issue>2</issue>):<fpage>e1000012</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1371/journal.ppat.1000012</pub-id><?supplied-pmid 18463694?><pub-id pub-id-type="pmid">18463694</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref012">
      <label>12</label>
      <mixed-citation publication-type="journal"><name><surname>Rabadan</surname><given-names>R</given-names></name>, <name><surname>Levine</surname><given-names>AJ</given-names></name>, <name><surname>Krasnitz</surname><given-names>M</given-names></name>. <article-title>Non-random reassortment in human influenza A viruses</article-title>. <source>Influenza and Other Respiratory Viruses</source>. <year>2008</year>;<volume>2</volume>(<issue>1</issue>):<fpage>9</fpage>–<lpage>22</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1111/j.1750-2659.2007.00030.x</pub-id><?supplied-pmid 19453489?><pub-id pub-id-type="pmid">19453489</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref013">
      <label>13</label>
      <mixed-citation publication-type="journal"><name><surname>de Silva</surname><given-names>UC</given-names></name>, <name><surname>Tanaka</surname><given-names>H</given-names></name>, <name><surname>Nakamura</surname><given-names>S</given-names></name>, <name><surname>Goto</surname><given-names>N</given-names></name>, <name><surname>Yasunaga</surname><given-names>T</given-names></name>. <article-title>A comprehensive analysis of reassortment in influenza A virus</article-title>. <source>Biology Open</source>. <year>2012</year>;<volume>1</volume>(<issue>4</issue>):<fpage>385</fpage>–<lpage>390</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1242/bio.2012281</pub-id><?supplied-pmid 23213428?><pub-id pub-id-type="pmid">23213428</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref014">
      <label>14</label>
      <mixed-citation publication-type="journal"><name><surname>Nagarajan</surname><given-names>N</given-names></name>, <name><surname>Kingsford</surname><given-names>C</given-names></name>. <article-title>GiRaF: robust, computational identification of influenza reassortments via graph mining</article-title>. <source>Nucleic Acids Research</source>. <year>2011</year>;<volume>39</volume>(<issue>6</issue>):<fpage>e34</fpage>–<lpage>e34</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/nar/gkq1232</pub-id><?supplied-pmid 21177643?><pub-id pub-id-type="pmid">21177643</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref015">
      <label>15</label>
      <mixed-citation publication-type="journal"><name><surname>Yurovsky</surname><given-names>A</given-names></name>, <name><surname>Moret</surname><given-names>BME</given-names></name>. <article-title>FluReF, an automated flu virus reassortment finder based on phylogenetic trees</article-title>. <source>BMC Genomics</source>. <year>2011</year>;<volume>12</volume>(<issue>2</issue>):<fpage>S3</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1186/1471-2164-12-S2-S3</pub-id><?supplied-pmid 21989112?><pub-id pub-id-type="pmid">21989112</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref016">
      <label>16</label>
      <mixed-citation publication-type="journal"><name><surname>Svinti</surname><given-names>V</given-names></name>, <name><surname>Cotton</surname><given-names>JA</given-names></name>, <name><surname>McInerney</surname><given-names>JO</given-names></name>. <article-title>New approaches for unravelling reassortment pathways</article-title>. <source>BMC Evolutionary Biology</source>. <year>2013</year>;<volume>13</volume>(<issue>1</issue>):<fpage>1</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1186/1471-2148-13-1</pub-id><?supplied-pmid 23279962?><pub-id pub-id-type="pmid">23279962</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref017">
      <label>17</label>
      <mixed-citation publication-type="other">Stolz U, Stadler T, Müller NF, Vaughan TG. Joint inference of migration and reassortment patterns for viruses with segment genomes; 2021. Available from: <ext-link xlink:href="https://www.biorxiv.org/content/10.1101/2021.05.15.442587v1" ext-link-type="uri">https://www.biorxiv.org/content/10.1101/2021.05.15.442587v1</ext-link>.</mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref018">
      <label>18</label>
      <mixed-citation publication-type="journal"><name><surname>Kirkpatrick</surname><given-names>S</given-names></name>, <name><surname>Gelatt</surname><given-names>CD</given-names></name>, <name><surname>Vecchi</surname><given-names>MP</given-names></name>. <article-title>Optimization by Simulated Annealing</article-title>. <source>Science</source>. <year>1983</year>;<volume>220</volume>(<issue>4598</issue>):<fpage>671</fpage>–<lpage>680</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1126/science.220.4598.671</pub-id><?supplied-pmid 17813860?><pub-id pub-id-type="pmid">17813860</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref019">
      <label>19</label>
      <mixed-citation publication-type="journal"><name><surname>Cardona</surname><given-names>G</given-names></name>, <name><surname>Rosselló</surname><given-names>F</given-names></name>, <name><surname>Valiente</surname><given-names>G</given-names></name>. <article-title>Extended Newick: it is time for a standard representation of phylogenetic networks</article-title>. <source>BMC Bioinformatics</source>. <year>2008</year>;<volume>9</volume>(<issue>1</issue>):<fpage>532</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1186/1471-2105-9-532</pub-id><?supplied-pmid 19077301?><pub-id pub-id-type="pmid">19077301</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref020">
      <label>20</label>
      <mixed-citation publication-type="journal"><name><surname>Meilă</surname><given-names>M</given-names></name>. <article-title>Comparing clusterings—an information based distance</article-title>. <source>Journal of Multivariate Analysis</source>. <year>2007</year>;<volume>98</volume>(<issue>5</issue>):<fpage>873</fpage>–<lpage>895</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1016/j.jmva.2006.11.013</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref021">
      <label>21</label>
      <mixed-citation publication-type="other">Nagarajan N, Kingsford C. Uncovering Genomic Reassortments among Influenza Strains by Enumerating Maximal Bicliques. In: 2008 IEEE International Conference on Bioinformatics and Biomedicine; 2008. p. 223–230.</mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref022">
      <label>22</label>
      <mixed-citation publication-type="journal"><name><surname>Huelsenbeck</surname><given-names>JP</given-names></name>, <name><surname>Ronquist</surname><given-names>F</given-names></name>. <article-title>MRBAYES: Bayesian inference of phylogenetic trees</article-title>. <source>Bioinformatics</source>. <year>2001</year>;<volume>17</volume>(<issue>8</issue>):<fpage>754</fpage>–<lpage>755</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/17.8.754</pub-id><?supplied-pmid 11524383?><pub-id pub-id-type="pmid">11524383</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref023">
      <label>23</label>
      <mixed-citation publication-type="journal"><name><surname>Nguyen</surname><given-names>LT</given-names></name>, <name><surname>Schmidt</surname><given-names>HA</given-names></name>, <name><surname>von Haeseler</surname><given-names>A</given-names></name>, <name><surname>Minh</surname><given-names>BQ</given-names></name>. <article-title>IQ-TREE: A Fast and Effective Stochastic Algorithm for Estimating Maximum-Likelihood Phylogenies</article-title>. <source>Molecular Biology and Evolution</source>. <year>2014</year>;<volume>32</volume>(<issue>1</issue>):<fpage>268</fpage>–<lpage>274</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/molbev/msu300</pub-id><?supplied-pmid 25371430?><pub-id pub-id-type="pmid">25371430</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref024">
      <label>24</label>
      <mixed-citation publication-type="journal"><name><surname>Hudson</surname><given-names>RR</given-names></name>, <name><surname>Kaplan</surname><given-names>NL</given-names></name>. <article-title>Deleterious Background Selection with Recombination</article-title>. <source>Genetics</source>. <year>1995</year>;<volume>141</volume>(<issue>4</issue>):<fpage>1605</fpage>–<lpage>1617</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/genetics/141.4.1605</pub-id><?supplied-pmid 8601498?><pub-id pub-id-type="pmid">8601498</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref025">
      <label>25</label>
      <mixed-citation publication-type="journal"><name><surname>Hill</surname><given-names>WG</given-names></name>, <name><surname>Robertson</surname><given-names>A</given-names></name>. <article-title>The effect of linkage on limits to artificial selection</article-title>. <source>Genetics Research</source>. <year>1966</year>;<volume>8</volume>(<issue>3</issue>):<fpage>269</fpage>–<lpage>294</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1017/S0016672300010156</pub-id><?supplied-pmid 5980116?><pub-id pub-id-type="pmid">5980116</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref026">
      <label>26</label>
      <mixed-citation publication-type="journal"><name><surname>Neher</surname><given-names>RA</given-names></name>, <name><surname>Shraiman</surname><given-names>BI</given-names></name>. <article-title>Genetic draft and quasi-neutrality in large facultatively sexual populations</article-title>. <source>Genetics</source>. <year>2011</year>;<volume>188</volume>(<issue>4</issue>):<fpage>975</fpage>–<lpage>996</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1534/genetics.111.128876</pub-id><?supplied-pmid 21625002?><pub-id pub-id-type="pmid">21625002</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref027">
      <label>27</label>
      <mixed-citation publication-type="journal"><name><surname>Dudas</surname><given-names>G</given-names></name>, <name><surname>Bedford</surname><given-names>T</given-names></name>, <name><surname>Lycett</surname><given-names>S</given-names></name>, <name><surname>Rambaut</surname><given-names>A</given-names></name>. <article-title>Reassortment between Influenza B Lineages and the Emergence of a Coadapted PB1–PB2–HA Gene Complex</article-title>. <source>Molecular Biology and Evolution</source>. <year>2015</year>;<volume>32</volume>(<issue>1</issue>):<fpage>162</fpage>–<lpage>172</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/molbev/msu287</pub-id><?supplied-pmid 25323575?><pub-id pub-id-type="pmid">25323575</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1010394.ref028">
      <label>28</label>
      <mixed-citation publication-type="journal"><name><surname>Hadfield</surname><given-names>J</given-names></name>, <name><surname>Megill</surname><given-names>C</given-names></name>, <name><surname>Bell</surname><given-names>SM</given-names></name>, <name><surname>Huddleston</surname><given-names>J</given-names></name>, <name><surname>Potter</surname><given-names>B</given-names></name>, <name><surname>Callender</surname><given-names>C</given-names></name>, <etal>et al</etal>. <article-title>Nextstrain: real-time tracking of pathogen evolution</article-title>. <source>Bioinformatics</source>. <year>2018</year>;<volume>34</volume>(<issue>23</issue>):<fpage>4121</fpage>–<lpage>4123</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/bty407</pub-id><?supplied-pmid 29790939?><pub-id pub-id-type="pmid">29790939</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
