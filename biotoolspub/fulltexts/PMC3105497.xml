<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Biomed Semantics</journal-id>
    <journal-title-group>
      <journal-title>Journal of Biomedical Semantics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1480</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3105497</article-id>
    <article-id pub-id-type="publisher-id">2041-1480-2-S1-S5</article-id>
    <article-id pub-id-type="pmid">21388574</article-id>
    <article-id pub-id-type="doi">10.1186/2041-1480-2-S1-S5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Semantics-based composition of EMBOSS services</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes" id="A1">
        <name>
          <surname>Lamprecht</surname>
          <given-names>Anna-Lena</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>anna-lena.lamprecht@cs.tu-dortmund.de</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Naujokat</surname>
          <given-names>Stefan</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>stefan.naujokat@cs.tu-dortmund.de</email>
      </contrib>
      <contrib contrib-type="author" id="A3">
        <name>
          <surname>Margaria</surname>
          <given-names>Tiziana</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>tiziana.margaria@cs.uni-potsdam.de</email>
      </contrib>
      <contrib contrib-type="author" id="A4">
        <name>
          <surname>Steffen</surname>
          <given-names>Bernhard</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>bernhard.steffen@cs.tu-dortmund.de</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Chair for Programming Systems, Technical University Dortmund, Dortmund, D-44227, Germany</aff>
    <aff id="I2"><label>2</label>Chair for Service and Software Engineering, Potsdam University, Potsdam, D-14482, Germany</aff>
    <pub-date pub-type="collection">
      <year>2011</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>7</day>
      <month>3</month>
      <year>2011</year>
    </pub-date>
    <volume>2</volume>
    <issue>Suppl 1</issue>
    <supplement>
      <named-content content-type="supplement-title">Semantic Web Applications and Tools for Life Sciences (SWAT4LS), 2009</named-content>
      <named-content content-type="supplement-editor">Andrea Splendiani, Albert Burger, Adrian Paschke, Paolo Romano and M Scott Marshall</named-content>
    </supplement>
    <fpage>S5</fpage>
    <lpage>S5</lpage>
    <permissions>
      <copyright-statement>Copyright ©2011 Lamprecht et al; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2011</copyright-year>
      <copyright-holder>Lamprecht et al; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.jbiomedsem.com/content/2/S1/S5"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>More than in other domains the heterogeneous services world in bioinformatics demands for a methodology to classify and relate resources in a both human and machine accessible manner. The Semantic Web, which is meant to address exactly this challenge, is currently one of the most ambitious projects in computer science. Collective efforts within the community have already led to a basis of standards for semantic service descriptions and meta-information. In combination with process synthesis and planning methods, such knowledge about types and services can facilitate the automatic composition of workflows for particular research questions.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>In this study we apply the synthesis methodology that is available in the Bio-jETI workflow management framework for the semantics-based composition of EMBOSS services. EMBOSS (European Molecular Biology Open Software Suite) is a collection of 350 tools (March 2010) for various sequence analysis tasks, and thus a rich source of services and types that imply comprehensive domain models for planning and synthesis approaches. We use and compare two different setups of our EMBOSS synthesis domain: 1) a manually defined domain setup where an intuitive, high-level, semantically meaningful nomenclature is applied to describe the input/output behavior of the single EMBOSS tools and their classifications, and 2) a domain setup where this information has been automatically derived from the EMBOSS Ajax Command Definition (ACD) files and the EMBRACE Data and Methods ontology (EDAM). Our experiments demonstrate that these domain models in combination with our synthesis methodology greatly simplify working with the large, heterogeneous, and hence manually intractable EMBOSS collection. However, they also show that with the information that can be derived from the (current) ACD files and EDAM ontology alone, some essential connections between services can not be recognized.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>Our results show that adequate domain modeling requires to incorporate as much domain knowledge as possible, far beyond the mere technical aspects of the different types and services. Finding or defining semantically appropriate service and type descriptions is a difficult task, but the bioinformatics community appears to be on the right track towards a Life Science Semantic Web, which will eventually allow automatic service composition methods to unfold their full potential.</p>
      </sec>
    </abstract>
    <conference>
      <conf-date>
        <day>20</day>
        <month>11</month>
        <year>2009</year>
      </conf-date>
      <conf-name>Semantic Web Applications and Tools for Life Sciences (SWAT4LS), 2009</conf-name>
      <conf-loc>Amsterdam, The Netherlands</conf-loc>
    </conference>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>Research projects in modern molecular biology rely on increasingly complex combinations of computational methods to handle the data that is produced in the life science laboratories. The plethora and kind of data involved in modern research in the field of biology is only accessible by computational methods. Bioinformatics algorithms, tools, and databases, are available in various ways, developed by different groups, in different contexts, using different technologies. The abundance of heterogeneous resources provided by different institutes all over the world leads to the problem of finding the right service for a certain task. The Semantic Web [<xref ref-type="bibr" rid="B1">1</xref>] aims at thoroughly equipping individual data and services with machine-processable meta-information in order to simplify the discovery of relevant resources. The importance of properly semantically annotated data and services has been recognized by the life science community earlier than by other application domains, and thus various projects have made significant progress towards a Semantic Web for bioinformatics [<xref ref-type="bibr" rid="B2">2</xref>]. Making no claim to be complete, the following list of projects characterizes the current state of the art:</p>
    <p>● BioMoby [<xref ref-type="bibr" rid="B3">3</xref>] is an open bioinformatics web services registry, which particularly started the modeling of the bioinformatics domain. Making use of service and type meta-data and ontologies for classifying them further, a number of services has been prepared mainly for supporting semantics-based retrieval. However, the native Moby specifications originate from the early 2000s and thus do not adhere to the Semantic Web standards, which have been developed in the last years, but on self-made realizations of the same concepts.</p>
    <p>● The SADI (Semantic Automated Discovery and Integration) [<xref ref-type="bibr" rid="B4">4</xref>] framework provides an open service registry that, in contrast to its predecessor BioMoby, uses standards-compliant Semantic Web Service design patterns to deploy and operate bioinformatics web services. In addition to the collection of services, a simple OWL-based ontology is available that classifies the heterogeneous resources further.</p>
    <p>● The BioCatalogue [<xref ref-type="bibr" rid="B5">5</xref>] is a recently released, curated registry for life science web services. It provides a comprehensive portal for discovering, registering, annotating and monitoring services that also makes extensive use of different Web 2.0 community features, like collaborative tagging of services and various newsfeeds.</p>
    <p>● The myGrid ontology [<xref ref-type="bibr" rid="B6">6</xref>] is one of the sources of information that the BioCatalogue uses. It has been developed with the aim of supporting service discovery. It consists of two parts, namely the service ontology and the domain ontology. The former describes the physical and operational features of web services (e.g., inputs and outputs), while the latter captures descriptions of bioinformatics data types and their relationships.</p>
    <p>● The EMBRACE Ontology for Data and Methods (EDAM, [<xref ref-type="bibr" rid="B7">7</xref>]) is an ontology for bioinformatics tools and data, which aims at providing a controlled vocabulary for the diverse services and resources in the Life Science Semantic Web.</p>
    <p>The challenge of semantics-based service composition in the bioinformatics application domain has been addressed by a number of projects. For instance, the BioMoby project provides a composition functionality for its services: with the MOBY-S Web Service Browser [<xref ref-type="bibr" rid="B8">8</xref>] it is possible to search for an appropriate next service and store the sequence of executed tools as a Taverna [<xref ref-type="bibr" rid="B9">9</xref>] workflow. Similarly, the REMORA web server [<xref ref-type="bibr" rid="B10">10</xref>] offers functionality for the discovery and step-by-step composition of BioMoby services and the DDBJ’s Web API for biology provides next applicable services according to the outputs of previously executed services [<xref ref-type="bibr" rid="B11">11</xref>]. Another example is the scenario presented in [<xref ref-type="bibr" rid="B12">12</xref>], where meaningful terms from the gene expression domain are recognized in the text of a web page and used for the formulation of higher-level goals, which are, together with web services that are linked to the terms, given to an HTN (Hierarchical Task Network) planner in order to create workflows that are suitable within the current context. All these have clear limitations, as their automatic service composition functionality is:</p>
    <p>● restricted to small sub-workflows or even single steps of the workflow, which comes with the risk that users get stuck when stepwisely trying to construct the globally intended solution, </p>
    <p>● limited to semantically annotated services of the particular platform.</p>
    <p>Current tools for the graphical development of bioinformatics workflows [<xref ref-type="bibr" rid="B9">9</xref>,<xref ref-type="bibr" rid="B13">13</xref>-<xref ref-type="bibr" rid="B16">16</xref>], most of them data-flow based, do not include means for semantic modeling or automatic service composition. An exception is Bio-jETI [<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B18">18</xref>], which bridges this gap by supporting the incorporation of semantically modeled domain information for control-flow oriented process construction. Its holistic perspective covers both the process modeling and the integration of individual services and platforms:</p>
    <p>● Process development is addressed from a goal-oriented global perspective. A loose programming concept allows the user to specify the actually intended workflow as a whole, and the synthesis finds shortest solutions directly matching the global intent.</p>
    <p>● Service descriptions in terms of the domain model are decoupled from the technical service specifications and implementations, so that any kind of heterogeneous resource at any location can be integrated, and there is no restriction to semantically annotated services of a particular platform.</p>
    <p>In this paper we extend a previous case study on the semantics-based composition of EMBOSS services with Bio-jETI [<xref ref-type="bibr" rid="B19">19</xref>]. We use two different setups, one manually defined and one automatically generated from available meta-information, and compare their characteristics and the respective synthesis results.</p>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>EMBOSS (European Molecular Biology Open Software Suite [<xref ref-type="bibr" rid="B20">20</xref>,<xref ref-type="bibr" rid="B21">21</xref>]) is a collection of freely available tools for the molecular biology user community. It contains a number of small and large programs for a wide range of tasks, such as sequence alignment, database searches, protein motif identification, nucleotide sequence pattern analysis, and codon usage analysis as well as the preparation of data for presentation and publication. As of March 2010, EMBOSS (Release 6.2.0) consists of around 350 tools, some derived from originally standalone packages.</p>
    <p>EMBOSS provides a common technical interface for the diverse tools that are contained in the suite. They can be run from the command line, or accessed from other programs. Thus, EMBOSS is also suitable for being set up behind GUIs and web interfaces. What is more, it automatically copes with data in a variety of formats, even allowing for transparent retrieval of sequence data from the web. The EMBOSS tools work seamlessly for a number of different formats and types, and therefore free the user from caring about compatibility and type conflicts. This enables us to focus on the actual service semantics rather than on technical details of data compatibility when setting up the domain.</p>
    <p>We give a detailed description of our synthesis method and its integration into the Bio-jETI framework (called PROPHETS) in the Methods section. PROPHETS supports domain-specific workflow modeling and synthesis in two principal phases:</p>
    <p>1. Domain modeling.</p>
    <p>2. Workflow design.</p>
    <p>Roughly speaking, the domain modeling involves everything that is required prior to domain-specific workflow development, such as service integration and providing meta-information about the services and types of the application domain. The actual process modeling is then done by the workflow designer, who benefits from the domain model that has been set up according to his needs, referring to services and data types using familiar terminology. The workflow designer does not need to care about technical details like type consistency. He can mark the connection between certain services as<italic> loosely specified,</italic> thus leaving the problem of proper type conversion to the synthesis algorithm.</p>
    <p>Starting from the beginning, setting up a domain for PROPHETS involves three major steps:</p>
    <p>1. Integration of services.</p>
    <p>2. Description of the input/output behavior of the individual services.</p>
    <p>3. Structuring of the domain by classification of types and services in taxonomies (i.e. simple ontologies that relate entities in terms of<italic> is-a</italic> relations).</p>
    <p>The integration of the EMBOSS services that we used in this study was done automatically. We let a script process the tool directories of the EMBOSS source code repository and create workflow building blocks for all available tools. In the following, we describe two disparate procedures that we used to set up synthesis domains for the EMBOSS suite, regarding the service descriptions and taxonomic classifications of types and services:</p>
    <p>● <italic> manually</italic>, where intuitive, high-level, semantically meaningful nomenclature for types and services is provided by a domain modeler, and</p>
    <p>●  <italic>automatically,</italic> where the information about types and services is derived from the EDAM Ontology and the EMBOSS Ajax Command Definition (ACD) files.</p>
    <p>In the remainder of this section, we show by means of some workflow examples what the synthesis methodology can infer from these domains and where the principal differences are.</p>
    <p>The graphical presentations of the domain (including all EMBOSS tools and several abstract groups) are not suited to be represented in paper page format. Therefore, we use a small subset of this domain for presentation in this paper. Table <xref ref-type="table" rid="T1">1</xref> lists the services in this subset along with a short description of their function. The subset consists mainly of the HMMER [<xref ref-type="bibr" rid="B22">22</xref>,<xref ref-type="bibr" rid="B23">23</xref>] applications. HMMER is a software for biosequence analysis using Profile Hidden Markov Models. It contributes 9 applications to EMBOSS, namely<monospace>
					 ehmmalign, ehmmbuild, ehmmcalibrate, ehmmconvert, ehmmemit, ehmmfetch, ehmmindex, ehmmpfam,
				</monospace> and<monospace>
					 ehmmsearch.
				</monospace> The prefix ’e’ is used to distinguish the EMBOSS integration from the orginal HMMER programs. In addition to the HMMER tools, the subset contains the multiple sequence analysis tools<monospace>
					 emma
				</monospace> and<monospace>
					edialign, makeprotseq
				</monospace> and<monospace>
					 makenucseq
				</monospace> for the generation of random protein and nucleotide sequences, respectively, as well as some tools for the display of specific data<monospace> 
					(showalign, showfeat, showpep, showseq). 
				</monospace></p>
    <table-wrap id="T1" position="float">
      <label>Table 1</label>
      <caption>
        <p>Services in the HMMER subset of the EMBOSS domain.</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <th align="center">Service</th>
            <th align="center">Function</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="center">edialign</td>
            <td align="center">Local multiple alignment of sequences.</td>
          </tr>
          <tr>
            <td align="center">ehmmalign</td>
            <td align="center">Align sequences to an HMM profile.</td>
          </tr>
          <tr>
            <td align="center">ehmmbuild</td>
            <td align="center">Build a profile HMM from an alignment.</td>
          </tr>
          <tr>
            <td align="center">ehmmcalibrate</td>
            <td align="center">Calibrate HMM search statistics.</td>
          </tr>
          <tr>
            <td align="center">ehmmconvert</td>
            <td align="center">Convert between profile HMM file formats.</td>
          </tr>
          <tr>
            <td align="center">ehmmemit</td>
            <td align="center">Generate sequences from a profile HMM.</td>
          </tr>
          <tr>
            <td align="center">ehmmfetch</td>
            <td align="center">Retrieve an HMM from an HMM database.</td>
          </tr>
          <tr>
            <td align="center">ehmmindex</td>
            <td align="center">Create a binary SSI index for an HMM database.</td>
          </tr>
          <tr>
            <td align="center">ehmmpfam</td>
            <td align="center">Search one or more sequences against an HMM database.</td>
          </tr>
          <tr>
            <td align="center">ehmmsearch</td>
            <td align="center">Search sequence database with a profile HMM.</td>
          </tr>
          <tr>
            <td align="center">emma</td>
            <td align="center">Global multiple alignment of sequences.</td>
          </tr>
          <tr>
            <td align="center">makenucseq</td>
            <td align="center">Create random nucleotide sequences.</td>
          </tr>
          <tr>
            <td align="center">makeprotseq</td>
            <td align="center">Create random protein sequences.</td>
          </tr>
          <tr>
            <td align="center">showalign</td>
            <td align="center">Display a multiple sequence alignment in pretty format.</td>
          </tr>
          <tr>
            <td align="center">showfeat</td>
            <td align="center">Display features of a sequence in pretty format.</td>
          </tr>
          <tr>
            <td align="center">showpep</td>
            <td align="center">Displays protein sequences with features in pretty format.</td>
          </tr>
          <tr>
            <td align="center">showseq</td>
            <td align="center">Display sequences with features in pretty format.</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <p>This table lists the services in the HMMER subset of the EMBOSS domain and gives a short description of their function.</p>
      </table-wrap-foot>
    </table-wrap>
    <sec>
      <title>Manual domain setup</title>
      <p>As stated above, after the (mere technical) integration of the EMBOSS services into the framework, setting up the domain consists of describing the input/output behavior of the services and structuring services and data types by taxonomic classifications. In short, the manual setup procedure involved basically two steps:</p>
      <p>1. Extracting information about input and output types from natural language documentations of the services.</p>
      <p>2. Adding classifications of service and types based on further natural language documentations and own knowledge and experiences.</p>
      <p>This manual setup for the EMBOSS synthesis domain originated from a former case study [<xref ref-type="bibr" rid="B19">19</xref>]. We applied natural language documentations of the services from different sources that are available on the web, primarily from the project web site’s list of EMBOSS [<xref ref-type="bibr" rid="B24">24</xref>] and EMBASSY [<xref ref-type="bibr" rid="B25">25</xref>] applications, and from the EBI’s EMBOSS web service descriptions in SoapLab [<xref ref-type="bibr" rid="B26">26</xref>]. Table <xref ref-type="table" rid="T2">2</xref> lists the services in the HMMER subset of the domain along with their input and output data types.</p>
      <table-wrap id="T2" position="float">
        <label>Table 2</label>
        <caption>
          <p>Manually defined domain: services in the HMMER subset.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="center">Service</th>
              <th align="center">Input Types</th>
              <th align="center">Output Types</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">edialign</td>
              <td align="center">MultipleSequence</td>
              <td align="center">Alignment</td>
            </tr>
            <tr>
              <td align="center">ehmmalign</td>
              <td align="center">HMM, Sequence</td>
              <td align="center">Alignment</td>
            </tr>
            <tr>
              <td align="center">ehmmbuild</td>
              <td align="center">Alignment</td>
              <td align="center">HMM</td>
            </tr>
            <tr>
              <td align="center">ehmmcalibrate</td>
              <td align="center">HMM</td>
              <td align="center">HMM</td>
            </tr>
            <tr>
              <td align="center">ehmmconvert</td>
              <td align="center">HMM</td>
              <td align="center">HMM</td>
            </tr>
            <tr>
              <td align="center">ehmmemit</td>
              <td align="center">HMM</td>
              <td align="center">EhmmemitOutput</td>
            </tr>
            <tr>
              <td align="center">ehmmfetch</td>
              <td align="center">HMMDatabase</td>
              <td align="center">HMM</td>
            </tr>
            <tr>
              <td align="center">ehmmindex</td>
              <td align="center">HMMDatabase</td>
              <td align="center">HMMDatabase</td>
            </tr>
            <tr>
              <td align="center">ehmmpfam</td>
              <td align="center">HMMDatabase, Sequence</td>
              <td align="center">EhmmpfamOutput</td>
            </tr>
            <tr>
              <td align="center">ehmmsearch</td>
              <td align="center">HMM, SequenceDatabase</td>
              <td align="center">EhmmsearchOutput</td>
            </tr>
            <tr>
              <td align="center">emma</td>
              <td align="center">MultipleSequence</td>
              <td align="center">Alignment, Tree</td>
            </tr>
            <tr>
              <td align="center">makenucseq</td>
              <td align="center">-</td>
              <td align="center">MultipleNucleotideSequence</td>
            </tr>
            <tr>
              <td align="center">makeprotseq</td>
              <td align="center">-</td>
              <td align="center">MultipleProteinSequence</td>
            </tr>
            <tr>
              <td align="center">showalign</td>
              <td align="center">Alignment</td>
              <td align="center">-</td>
            </tr>
            <tr>
              <td align="center">showfeat</td>
              <td align="center">Sequence</td>
              <td align="center">-</td>
            </tr>
            <tr>
              <td align="center">showpep</td>
              <td align="center">ProteinSequence</td>
              <td align="center">-</td>
            </tr>
            <tr>
              <td align="center">showseq</td>
              <td align="center">NucleotideSequence</td>
              <td align="center">-</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>This table shows the manually defined input and output descriptions for the services in the HMMER subset of the EMBOSS domain.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>Figure <xref ref-type="fig" rid="F1">1</xref> shows the manually defined service taxonomy for the HMMER subset, the type taxonomy is given in Figure <xref ref-type="fig" rid="F2">2</xref>. The (blue) squares in the figure represent the abstract services or types (OWL classes), and the (purple) rhombs are used for concrete instances (OWL individuals). The generic type<monospace>
						 Thing 
					</monospace> (center) represents the root of the taxonomy, underneath which abstract groups are defined. The service taxonomy (Figure <xref ref-type="fig" rid="F1">1</xref>) contains four abstract groups.<monospace>
						 Edit
					</monospace> has the services<monospace>
						 makenucseq
					</monospace> and<monospace>
						 makeprotseq
					</monospace> as instances, and the services<monospace>
						 showseq, showalign
					</monospace> and<monospace>
						 showtext
					</monospace> are classified as<monospace>
						 Display
					</monospace> by the taxonomy.<monospace>
						 Edialign
					</monospace> and<monospace>
						 emma
					</monospace> are abstractly described as<monospace>
						 AlignmentMultiple,
					</monospace> the remaining tools belong to the<monospace>
						 HMM
					</monospace> group. Although it would be natural to classify the HMM tools further (e.g.,<monospace>
						 ehmmalign
					</monospace> is also an<monospace>
						 Alignment
					</monospace> service), we leave it this simple for presentation in this paper, as a further classification is not relevant for the given examples. As all services in the HMMER subset work on text-based data, all available types in the type taxonomy (Figure <xref ref-type="fig" rid="F2">2</xref>) belong to the<monospace>
						 Text
					</monospace> group. The different<monospace>
						 Sequence
					</monospace> types are distinguished further into the groups<monospace>
						 ProteinSequence, NucleotideSequence,
					</monospace> and<monospace>
						 MultipleSequence.
					</monospace> Note that some types are instances of more than one group:<monospace>
						 MultipleNucleotideSequence,
					</monospace> for instance, is both a <monospace>
						MultipleSequence
					</monospace> and<monospace>
						 NucleotideSequence.
					</monospace></p>
      <fig id="F1" position="float">
        <label>Figure 1</label>
        <caption>
          <p><bold>Manually defined service taxonomy for the HMMER subset of the EMBOSS domain.</bold> This taxonomy contains four abstract groups.<monospace>
								 Edit
							</monospace> has the services<monospace>
								 makenucseq
							</monospace> and<monospace>
								 makeprotseq
							</monospace> as instances, the services<monospace>
								 showseq, showalign
							</monospace> and<monospace>
								 showtext
							</monospace> are classified as<monospace>
								 Display
							</monospace> by the taxonomy. <monospace>
								Edialign
							</monospace> and<monospace>
								 emma
							</monospace> are abstractly described as<monospace>
								 AlignmentMultiple,
							</monospace> the remaining tools belong to the<monospace>
								 HMM
							</monospace> group.</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-1"/>
      </fig>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p><bold>Manually defined type taxonomy for the HMMER subset of the EMBOSS domain.</bold> As all services in the HMMER subset work on text-based data, all available types in this taxonomy belong to the<monospace>
								 Text
							</monospace> group. The different<monospace>
								 Sequence
							</monospace> types are distinguished further into the groups <monospace>
								ProteinSequence, NucleotideSequence,
							</monospace> and<monospace>
								 MultipleSequence.
							</monospace> Note that some types are instances of multiple groups:<monospace>
								 MultipleNucleotideSequence,
							</monospace> for instance, is both a<monospace>
								 MultipleSequence
							</monospace> and <monospace>
								NucleotideSequence.
							</monospace></p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-2"/>
      </fig>
    </sec>
    <sec>
      <title>Automatic domain setup</title>
      <p>In this section we describe how we use different kinds of available meta-information about the tools for the automatic setup of the domain. In short, this setup was created by the followings steps:</p>
      <p>1. Generating a skeletal structure for the taxonomies based on the EDAM ontology.</p>
      <p>2. Extracting the definition of the input/output behavior from the tools’ ACD files.</p>
      <p>3. Linking the services and the determined input/output types to the respective EDAM terms in the taxonomies.</p>
      <p>The EMBRACE Ontology for Data and Methods (EDAM, [<xref ref-type="bibr" rid="B7">7</xref>]) is an ontology for bioinformatics tools and data, which aims at providing a controlled vocabulary for the diverse services and resources in the life science Semantic Web. The ontology is provided in OBO (Open Biomedical Ontologies) [<xref ref-type="bibr" rid="B27">27</xref>] format. Among others, EDAM contains hierarchical term definitions for tool functions and data types, which we use as basis for our service and type taxonomies. The results presented in this paper are based on the EDAM version<monospace>
						 beta03
					</monospace> (March 2010).</p>
      <p>Each EMBOSS tool is accompanied by an ACD (Ajax Command Definition [<xref ref-type="bibr" rid="B28">28</xref>]) file that defines its parameters in a special-purpose language. Among plenty other information (the file specifies everything that could be part of the command line invoking the tool or that can be used by another client application), it contains detailed information about the tool’s input and output behavior, including input and output data types, possible other parameters, and indications whether parameters are mandatory or optional. Figure <xref ref-type="fig" rid="F3">3</xref> shows a (slightly shortened) ACD file as an example. The first section defines the application’s name<monospace>
						 (edialign)
					</monospace> and the application’s attributes, such as its documentation text and the functional groups that it belongs to. The subsequent sections are used for describing inputs and outputs, where each section can comprise several parameters. In the present example, the input section defines one input parameter<monospace>
						 (seqset),
					</monospace> whereas the output section defines two<monospace>
					 (outfile
					</monospace> and<monospace>
						 seqoutall).
					</monospace> As is also visible from this example, ACD files can contain definitions of relations to EDAM terms. At the time of this writing, around 96% of the available ACD files have already been annotated using EDAM terms, whereby 56% have annotations regarding the application itself, and 95% have parameter annotations. The number of application annotations per file ranges from 1 to 3, with the majority of files providing only one single application relation. The number of parameter annotations varies widely, corresponding to the number of parameters that are defined for the tool (ranging from 1 to 126, at an average of 10 annotations per file). In total, 97% of all parameters are equipped with EDAM relation annotations. We use these annotations to link the individual services and data types to the EDAM terms in our service and type taxonomies. Table <xref ref-type="table" rid="T3">3</xref> lists the services in the HMMER subset of our example domain along with the input/output behavior as derived from the information in the ACD files. Figure <xref ref-type="fig" rid="F4">4</xref> shows the service taxonomy for the generated domain setup. In contrast to the manual setup, only three services are classified further in terms of the EDAM Ontology<monospace>
						 (showalign, edialign,
					</monospace> and<monospace>
						 emma),
					</monospace> while the majority of the services remain direct instances of the generic OWL type<monospace>
						 Thing.
					</monospace> The type taxonomy for the generated domain setup (Figure <xref ref-type="fig" rid="F5">5</xref>) is more comprehensive, containing several EDAM terms for the classification of the various data types. The EDAM terms distinguish, for example,<monospace>
						 identifiers, sequence_signature s, sequence_records, sequencejreports,
					</monospace> and <monospace>
						sequence_profile_alignment s
					</monospace>, while other types (such as, e.g., <monospace>
						sequence_alignment_data
					</monospace> and<monospace>
						 dendrograms
					</monospace> are not (yet) consequently covered by the EDAM ontology). These taxonomies reveal that the EDAM Ontology already contains many, but not yet all of the relevant terms that are in frequent use.</p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Example of an ACD file.</bold> ACD file for<monospace>
								 edialign
							</monospace> (slightly shortened).</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-3"/>
      </fig>
      <table-wrap id="T3" position="float">
        <label>Table 3</label>
        <caption>
          <p>Automatically generated domain: services in the HMMER subset.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="center">Service</th>
              <th align="center">Input Types</th>
              <th align="center">Output Types</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">edialign</td>
              <td align="center">sequence_record</td>
              <td align="center">edialign_seqoutall_output, edialign_output</td>
            </tr>
            <tr>
              <td align="center">ehmmalign</td>
              <td align="center">protein _sequence_record, hmmer_hidden_markov_model</td>
              <td align="center">ehmmalign_align_output</td>
            </tr>
            <tr>
              <td align="center">ehmmbuild</td>
              <td align="center">protein_sequence_alignment_data</td>
              <td align="center">hmm</td>
            </tr>
            <tr>
              <td align="center">ehmmcalibrate</td>
              <td align="center">hmmer_hidden_markov_model</td>
              <td align="center">hmmer.histogram, hmmcalibrate_output</td>
            </tr>
            <tr>
              <td align="center">ehmmconvert</td>
              <td align="center">hmmer_hidden_markov_model</td>
              <td align="center">hmm</td>
            </tr>
            <tr>
              <td align="center">ehmmemit</td>
              <td align="center">hmmer_hidden_markov_model</td>
              <td align="center">hmmemit_output</td>
            </tr>
            <tr>
              <td align="center">ehmmfetch</td>
              <td align="center">hmmer_hidden_markov_model_identifier, hmmer_hidden_markov_model_database</td>
              <td align="center">hmm</td>
            </tr>
            <tr>
              <td align="center">ehmmindex</td>
              <td align="center">hmmer_hidden_markov_model_database</td>
              <td align="center"/>
            </tr>
            <tr>
              <td align="center">ehmmpfam</td>
              <td align="center">protein jsequence_record, hmmer_hidden_markov_model</td>
              <td align="center">hmmpfam_output</td>
            </tr>
            <tr>
              <td align="center">ehmmsearch</td>
              <td align="center">protein _sequence_record, hmmer_hidden_markov_model</td>
              <td align="center">hmmsearch_output</td>
            </tr>
            <tr>
              <td align="center">emma</td>
              <td align="center">sequence_record</td>
              <td align="center">emma_seqoutset_output, dendrogram</td>
            </tr>
            <tr>
              <td align="center">makenucseq</td>
              <td align="center">-</td>
              <td align="center">makenucseq_seqoutall_output</td>
            </tr>
            <tr>
              <td align="center">makeprotseq</td>
              <td align="center">-</td>
              <td align="center">makeprotseq_seqoutall_output</td>
            </tr>
            <tr>
              <td align="center">showalign</td>
              <td align="center">sequence _alignment_data</td>
              <td align="center">showalign_output</td>
            </tr>
            <tr>
              <td align="center">showfeat</td>
              <td align="center">sequence_record</td>
              <td align="center">showfeat_output</td>
            </tr>
            <tr>
              <td align="center">showpep</td>
              <td align="center">proteinjsequence_record</td>
              <td align="center">showpep_output</td>
            </tr>
            <tr>
              <td align="center">showseq</td>
              <td align="center">dna_sequence_record</td>
              <td align="center">showseq_output</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>This table shows the automatically derived input and output descriptions for the services in the HMMER subset of the EMBOSS domain.</p>
        </table-wrap-foot>
      </table-wrap>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Automatically created service taxonomy for the HMMER subset of the EMBOSS domain.</bold> In the service taxonomy for the generated domain setup, only three services are classified further in terms of the EDAM Ontology:<monospace>
								 showalign, edialign,
							</monospace> and<monospace>
								 emma
							</monospace> have further classified tool functions. The majority of the services are direct instances of the generic OWL type<monospace>
								 Thing.
							</monospace></p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-4"/>
      </fig>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>Automatically created type taxonomy for the HMMER subset of the EMBOSS domain.</bold> The type taxonomy for the generated domain setup contains several EDAM terms for the classification of the various data types. The EDAM terms distinguish, for example<monospace>
								, identifiers, sequence_signatures, sequence_records, sequence_reports
							</monospace>, and<monospace>
								 sequence_profile_alignments
							</monospace>.</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-5"/>
      </fig>
    </sec>
    <sec>
      <title>Working with the domains</title>
      <p>In the previous sections we described the setup of the EMBOSS domain, which is the task of the domain modeler, either by directly defining the domain model (i.e. service descriptions and appropriate type and service taxonomies), or by equipping the services themselves with appropriate meta-information and maintaining ontologies to relate and classify the used terms further, which can be automatically translated into a domain model.</p>
      <p>In this section, we illustrate the work of the workflow designer, who develops the actual analysis processes dealing with particular biological questions. Based on the three increasingly complex examples which have been introduced in [<xref ref-type="bibr" rid="B19">19</xref>] we show how synthesis problems are specified and what the synthesis methodology derives from these specifications based on the domains described above.</p>
      <sec>
        <title>Example 1</title>
        <p>As a first example we consider the small workflow on the left of Figure <xref ref-type="fig" rid="F6">6</xref>: it consists of the services <monospace>
							makenucseq
						</monospace> and<monospace>
							 showalign,
						</monospace> which are connected by a loosely specified branch. (For simplicity, we let our example processes begin with services that randomly generate sequences that can be processed further. Note that they can be easily exchanged by the retrieval of sequences from a public database, or by loading a sequence file.) The synthesis problem that is defined by the loose branch is simply given by the output type of<monospace>
							 makenucseq,
						</monospace> providing the input type for the synthesized sequence, and the input type of <monospace>
							showalign,
						</monospace> which is the type that the synthesized sequence must finally produce.</p>
        <fig id="F6" position="float">
          <label>Figure 6</label>
          <caption>
            <p><bold>Synthesis example 1</bold> Loosely specified workflow starting with<monospace>
									 makenucseq
								</monospace> and ending with<monospace>
									 showalign
								</monospace> (left). The synthesis problem is given by the output type of<monospace>
									 makenucseq,
								</monospace> and the input type of<monospace>
									 showalign.
								</monospace> For the manually defined domain, a shortest solution is to insert the multiple alignment algorithm<monospace>
									 emma
								</monospace> (center). For the automatically created domain, no solution can be found (right).</p>
          </caption>
          <graphic xlink:href="2041-1480-2-S1-S5-6"/>
        </fig>
        <p>In case of the manually defined domain, this means that the synthesis algorithm has to find a way from <monospace>
							MultipleNucleotideSequence
						</monospace> to<monospace>
							 Alignment.
						</monospace> This request can be met by inserting a single multiple sequence alignment service, for example<monospace>
							 emma: MultipleNucleotideSequence
						</monospace> is defined as an instance of <monospace>
							MultipleSequence
						</monospace> by the type taxonomy (cf. Figure <xref ref-type="fig" rid="F2">2</xref>), which is<monospace>
							 emma’s
						</monospace> input type (cf. Table <xref ref-type="table" rid="T2">2</xref>), while its output type<monospace>
						 Alignment 
						</monospace> is directly suitable as input for<monospace>
							 showalign
						</monospace> (cf. Table <xref ref-type="table" rid="T2">2</xref>). Figure <xref ref-type="fig" rid="F6">6</xref> (center) shows the resulting process.</p>
        <p>In case of the automatically created domain, which uses the terminology from the EDAM ontology and the ACD files, the synthesis problem is to find a sequence of services beginning with <monospace>
							makenucseq_seqoutall_output
						</monospace> and ending with<monospace>
							 sequence_alignment_data.
						</monospace> As Figure <xref ref-type="fig" rid="F6">6</xref> (right side) shows, the synthesis does not find a solution for this problem. The reason for this disconnect is that no service in the domain, especially no sequence alignment service, is annotated to produce the type <monospace>
							sequence_alignment_data,
						</monospace> which is required as input for the<monospace>
							 showalign
						</monospace> services (cf. the service characterizations in Table <xref ref-type="table" rid="T3">3</xref>). Rather, the alignment services<monospace>
							 edialign
						</monospace> and<monospace>
							 emma
						</monospace> have output types that are classified as<monospace>
							 sequence_record
						</monospace> (cf. the type taxonomy in Figure <xref ref-type="fig" rid="F5">5</xref>), so that the synthesis algorithm has no chance to find a possibility to connect them.</p>
      </sec>
      <sec>
        <title>Example 2</title>
        <p>A similar synthesis problem is defined by the process shown in Figure <xref ref-type="fig" rid="F7">7</xref> (left), where the loosely specified workflow begins with<monospace>
							 makeprotseq
						</monospace> and ends with<monospace>
							 showfeat,
						</monospace> a service that displays features of a sequence. As the output of the first service is a<monospace>
							 MultipleProteinSequence
						</monospace> (manually defined domain) / a <monospace>
							makeprotseq_seqoutall_output
						</monospace> (automatically created domain), classified by the respective type taxonomies as <monospace>
							Sequence / sequence_record,
						</monospace> which is the input data type for<monospace>
							 showfeat,
						</monospace> the shortest solution is obviously an empty service sequence (not shown in the figure).</p>
        <fig id="F7" position="float">
          <label>Figure 7</label>
          <caption>
            <p><bold>Synthesis example 2</bold> Loosely specified workflow starting with<monospace>
									 makeprotseq
								</monospace> and ending with<monospace>
									 showfeat
								</monospace> (left). The synthesis problem is given by the output type of<monospace>
									 makenucseq,
								</monospace> and the input type of<monospace>
									 showfeat.
								</monospace> Obviously, the shortest solution is the empty service sequence. Using conditional constraints, it is possible to, e.g., enforce the use of particular services or types. Enforcing the use of<monospace>
									 ehmmemit
								</monospace> leads to inserting a three-step service sequence in case of the manually created domain (center). For the automatically created domain, no solution can be found (right).</p>
          </caption>
          <graphic xlink:href="2041-1480-2-S1-S5-7"/>
        </fig>
        <p>We might, however, have a process in mind that does some analysis on the initially generated sequences and produces another set of sequences, for instance via a Profile HMM. As will be detailed in the Methods section, additional constraints can be used in the workflow specification that is given to the synthesis algorithm. For expressing the sketched case, we can give an additional constraint to the synthesis algorithm that enforces the use of the service<monospace>
						 ehmmemit.
						</monospace></p>
        <p>One of the shortest thus possible processes is shown in Figure <xref ref-type="fig" rid="F7">7</xref> (center), obtained by providing the synthesis algorithm with the manually defined domain and an additional constraint that enforced the use of<monospace>
							 ehmmemit:
						</monospace> the initial input sequences are converted into an<monospace>
							 Alignment
						</monospace> by<monospace>
							 emma,
						</monospace> which is then used by <monospace>
							ehmmbuild
						</monospace> to create a Profile HMM.<monospace>
							 Ehmmemit
						</monospace> emits a set of sequences based on this HMM that are finally displayed by<monospace>
							 showfeat.
						</monospace> The right side of the figure shows the result of a corresponding synthesis run on the automatically created domain, where again no solution can be found. The reason is basically the same as in the previous example: as the alignment services’ outputs are defined as<monospace>
							 sequence_record
						</monospace> rather than as suitable alignment types, the synthesis is not able to recognize them as valid inputs for, e.g.,<monospace>
							 ehmmbuild.
						</monospace></p>
      </sec>
      <sec>
        <title>Example 3</title>
        <p>As a third and final example in this paper, we discuss the process shown in Figure <xref ref-type="fig" rid="F8">8</xref> (left), which does not (yet) contain any EMBOSS services. A (nucleotide) sequence is fetched from the DNA Data Bank of Japan (DDBJ), and used for a BLAST search against a protein database. The Uniprot IDs are extracted from the BLAST result and then processed in a loop that fetches the Uniprot entry for this ID. The remainder of the loop body is a loosely specified branch, to be concretized by an appropriate sequence of services. The synthesis plugin has access to both the EMBOSS and the DDBJ domain model and can transparently combine services from both sources. For this example, we did not only use the HMMER subset but the complete EMBOSS domains to find an appropriate sequence of services that does something with the protein sequence that is retrieved within the loop.</p>
        <fig id="F8" position="float">
          <label>Figure 8</label>
          <caption>
            <p><bold>Synthesis example 3</bold> In this workflow, which does not (yet) contain any EMBOSS services (left), a part of the loop body is a loosely specified and has to be concretized by an appropriate sequence of services. The workflow in the center contains one of the service sequences that were proposed by the synthesis algorithm for the manually created domain and constraints expressing that we want to ”Enforce the use of module <monospace>Protein2dStructure</monospace>” and ”Use<monospace>
									Display
								</monospace> as last service in solution”. The constraints ”Use<monospace>
								 showreport
								</monospace> as last service in solution” and ”Enforce the use of module<monospace>
									 protein secondary structure prediction
								</monospace>” used together with the automatically created domain leads to the results on the right side of the figure.</p>
          </caption>
          <graphic xlink:href="2041-1480-2-S1-S5-8"/>
        </fig>
        <p>If we start the synthesis with no further constraints, thousands of possible solutions are found, even if the length of the solution is limited. The reason lies in the nature of the EMBOSS domain: many tools work on very similar input types (sequence), some again producing sequences, so that if the synthesis is only based on the type information, unfathomable many variations of solutions are possible.</p>
        <p>Thus we refine our specification and formulate additional constraints for the synthesis in order to get less, but more reasonable results. For instance, we might want the inserted service sequence to end with a service that visualizes a result in some fashion, possibly after having applied some analysis to the sequence. The center of Figure <xref ref-type="fig" rid="F8">8</xref> shows the workflow with one of the service sequences that were proposed by the synthesis algorithm for the manually created domain and constraints expressing that we want to “Enforce the use of module<monospace>
							 Protein2dStructure</monospace>” and “Use<monospace>
							 Display
						</monospace> as last service in solution”, where <monospace>
							Protein2dStructure
						</monospace> and<monospace>
							 Display
						</monospace> are abstract service groups. This request is met, for instance, by <monospace>
							pepwheel,
						</monospace> a service that draws a helical wheel diagram for a protein sequence.</p>
        <p>For the automatically created domain, where the EDAM terminology is used for the constraint formulation, we use the constraints “Use<monospace>
							 showreport
						</monospace> as last service in solution”<monospace>
							 (showreport
						</monospace> being a concrete service) and “Enforce the use of module<monospace>
							 protein secondary structure prediction</monospace>” (abstract service), as there are no EDAM terms that directly correspond to the abstract service groups that we defined in the manual domain setup. The right side of Figure <xref ref-type="fig" rid="F8">8</xref> shows one of the possible results of this synthesis run, where the services<monospace>
							 garnier
						</monospace> (a service predicting protein secondary structures) and<monospace>
							 showreport
						</monospace> (simply displaying the textual content of, e.g., the EMBOSS report that is produced by<monospace>
							 garnier)
						</monospace> have been inserted. The different constraints and the different corresponding results that we encounter in this example show that not only the process specification and the resulting service sequences, but also the constraint formulation itself (as part of the specification) depend on the concrete structure of the domain model.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Conclusions</title>
    <p>Our experiments demonstrate that comprehensive domain models in combination with adequate synthesis methodology greatly simplify working with the large, heterogeneous, and hence manually intractable EMBOSS collection. However, they also show that with the information that can be derived from the (current) ACD files and EDAM ontology alone, some essential connections between services cannot be recognized. A striking example is the disconnect between the alignment services (e.g.,<monospace>
					 edialign, emma)
				</monospace> and alignment visualizers such as<monospace>
					 showalign.
				</monospace> Due to the reason that the alignment services’ outputs are simply described as<monospace>
					 sequence records</monospace> whereas some kind of<monospace>
					 sequence alignment data
				</monospace> would make a suitable input for<monospace>
					 showalign,
				</monospace> an artificial separation of actually compatible types has been introduced. This reveals that although the descriptions of the individual components are technically sound and several ontological terms are well defined, they are not (yet) sufficiently synchronized with respect to the automatic construction of executable workflows. Thus, automatically created domain models should be manually revised in order to detect and bridge essential gaps.</p>
    <p>Clearly, adequate domain modeling requires to incorporate as much domain knowledge as possible, far beyond the mere technical aspects of the different types and services. Finding or defining semantically appropriate service and type descriptions is a difficult task [<xref ref-type="bibr" rid="B29">29</xref>], which is common among all approaches to (semi-) automatically dealing with the large number of distributed, heterogeneous services that are available in the bioinformatics application domain. Projects like BioMoby [<xref ref-type="bibr" rid="B3">3</xref>], SADI [<xref ref-type="bibr" rid="B4">4</xref>], BioCatalogue [<xref ref-type="bibr" rid="B5">5</xref>], the (my)Grid Ontology [<xref ref-type="bibr" rid="B6">6</xref>], and the EDAM Ontology address this issue by providing knowledge bases that particularly capture bioinformatics data types and services. We plan to integrate (more of) their services and domain knowledge in the scope of future case studies with Bio-jETI and PROPHETS. The resulting domains will contain far more heterogeneous services than the comparatively ’closed’ EMBOSS domain that we used for the current study, creating new challenges for the client-side software, challenges that our methods are designed for.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>Bio-jETI [<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B30">30</xref>] is a framework for model-based, graphical design, execution and management of bioinformatics analysis processes. It has been used in a number of different bioinformatics projects [<xref ref-type="bibr" rid="B31">31</xref>-<xref ref-type="bibr" rid="B34">34</xref>] and is continuously evolving as new service libraries and service and software technologies become established.</p>
    <p>Technically, Bio-jETI is based on the jABC modeling framework [<xref ref-type="bibr" rid="B35">35</xref>] as an intuitive, graphical user interface and the jETI electronic tool integration platform [<xref ref-type="bibr" rid="B36">36</xref>] for dealing with remote services. Using the jABC technology, process models are constructed graphically by placing services on a canvas and connecting them according to the flow of control. jABC process models are directly executable by an interpreter component, and they can be compiled into a variety of target languages via the Genesys code generation framework [<xref ref-type="bibr" rid="B37">37</xref>].</p>
    <p>In [<xref ref-type="bibr" rid="B18">18</xref>], we presented our approach to semantics-based service composition in the Bio-jETI platform. By integration of automatic service composition functionality into an intuitive, graphical process management framework, we maintained the usability of the latter for semantically aware workflow development. Furthermore, we could integrate services and domain knowledge from any kind of heterogeneous resource at any location, and were not restricted to any semantically annotated services of a particular platform. For the work presented in this paper, we used the PROPHETS (Process Realization and Optimization Platform using a Human-readable Expression of Temporal-logic Synthesis) extension of the Bio-jETI platform that simplifies workflow development in order to even reach biologists without programming background. PROPHETS seamlessly integrates automatic service composition into the jABC. It enhances the previous approaches by including more formal methodology, but with less of it being required for the user to know, thus enabling the system to be used by a wider range of users. These enhancement are in particular:</p>
    <p>● visualized/graphical semantic domain modeling.</p>
    <p>● loose specification within the process model.</p>
    <p>● non-formal specification of constraints using natural language templates, and</p>
    <p>● automatic generation of model checking formulas (to check global properties processes).</p>
    <p>Two roles are designed for using this extension. The<italic> domain modeler</italic> provides information on available services and a semantic classification of these services and their input and output types. The<italic> workflow designer</italic> is the one who uses the available services to model the processes. The following two subsections deal with one of those roles, respectively, while the subsequent ones give more detail on the synthesis method and verification concerns.</p>
    <sec>
      <title>Domain modeling</title>
      <p>The basis of the domain model is built by meta-information on services, which enhances the definition of jABC services regarding their abstract input/output behavior. Throughout our framework types are represented by symbolic names, thus abstracting from concrete implementations. Each service is characterized by two subsets of the set of all symbolic type names, namely<italic> input types</italic> and<italic> output types.</italic> The meta-information is stored as a separate file within the current project’s directory, which allows for the usage of a specialized nomenclature for different jABC projects, even though the included services might be the same.</p>
      <p>Furthermore, the services and types can be classified using taxonomies. These taxonomies are expressed as ontologies in OWL format, where the concept<italic> Thing</italic> denotes the most general type or service, respectively. Using the<italic> is-a</italic> relation, additional semantic classifications can be added into the domain. The actual types and services are then represented as individuals that are related to one or more of those classifications by the<italic> instance-of</italic> relation. Although we also provide a seamlessly integrated graphical editor for these OWL files (Figures <xref ref-type="fig" rid="F1">1</xref>,<xref ref-type="fig" rid="F2">2</xref>, <xref ref-type="fig" rid="F4">4</xref> and <xref ref-type="fig" rid="F5">5</xref>), the domain modeler may use any OWL tool of his preference.</p>
      <p>Finally, there might be domain specific knowledge like ordering constraints on services or general compatibility information. This knowledge must be formalized appropriately. Basically, there are two possible options to do so: Either the domain expert expresses model checking formulas that must hold for every process within the project, or he defines global constraints that are used for every synthesis. Furthermore, the system that allows formulae to be expressed with natural language templates, can be extended to the needs of the specific domain.</p>
    </sec>
    <sec>
      <title>Process design</title>
      <p>After a domain has been set up by the domain expert, it can be used by the workflow designer to model processes. As part of the seamless integration into the jABC, PROPHETS concentrates on the usability for non-technical users. It mainly differs from our previous synthesis approaches [<xref ref-type="bibr" rid="B18">18</xref>] in the idea of<italic> loose specification</italic>: branches in the model can be marked as<italic> loosely specified,</italic> which then automatically are replaced by reasonable services by our framework. Therefore, the process designer neither needs to model fully executable processes (the standard Bio-jETI way) nor formally specify a synthesis or planning problem with some first-order or temporal logic. Behind the scenes the algorithm still requires formal specifications of the synthesis problem, but our goal with the here presented approach is to hide this formal complexity from the user and replace it by intuitive (graphical) modeling concepts. Furthermore, the actual execution of the synthesis is presented to the user as a set of wizard windows where he finally can choose the favored solution from the list of all possible solutions (”Wizard Step 2” in Figure <xref ref-type="fig" rid="F9">9</xref>). </p>
      <fig id="F9" position="float">
        <label>Figure 9</label>
        <caption>
          <p><bold>Synthesis Execution</bold> Shows a loosely specified process (background, cf. Figure <xref ref-type="fig" rid="F8">8</xref> - Synthesis example 3) and the wizard windows (foreground) that query the user for additional input. Step 1 shows the constraint editor that is based on natural language templates, and in Step 2, the user can choose one out of all the solutions that the synthesis algorithm found.</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-9"/>
      </fig>
      <p>Each loosely specified branch’s synthesis can be enhanced by additional constraints. As we will not expect common process designers to deal with this formal specification, we provide means to express constraints using a system that is based on templates in natural language. The user chooses a restricting concept and then simply has to fill in a cloze text with prepared values ("Wizard Step 1” in Figure <xref ref-type="fig" rid="F9">9</xref>). The possible values for the cloze text fields are automatically extracted from the domain (i.e. service definition and taxonomies).</p>
    </sec>
    <sec>
      <title>Synthesis algorithm</title>
      <p>The algorithm [<xref ref-type="bibr" rid="B38">38</xref>] that we use to complete a loosely specified process to be fully executable takes two aspects into account: On the one hand, the process must be a valid execution regarding type consistency, on the other hand, the constraints specified by the process designer must be met.</p>
      <p>The<italic> configuration universe</italic> constitutes the algorithm’s basic search space. It contains all valid execution sequences and is implicitly defined by the domain model as follows: Each subset of the overall type set denotes a state. The edges represent state transformations caused by the execution of services. An edge is inserted for a service, if the input types of the service are a subset of the types at the edge’s originating state and the target state is the union of the service’s output types and the original types. As this configuration universe usually is very large, it is not explicitly generated from the domain definition, but on the fly within the synthesis process. Figure <xref ref-type="fig" rid="F10">10</xref> shows a small excerpt of the configuration universe for the example domain that we use in this paper. To maintain the readability, only 4 of the full example domain’s (which was already simplified by only containing 17 out of over 350 services) services are included in the figure.</p>
      <fig id="F10" position="float">
        <label>Figure 10</label>
        <caption>
          <p><bold>Synthesis Algorithm’s Configuration Universe</bold> Small excerpt of the search space that is used by the synthesis algorithm to find possible solutions. The nodes represent available (i.e. already generated) types, while the edges are the services that create new ones.</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-10"/>
      </fig>
      <p>The<italic> specification formula</italic> is the second aspect. It describes all sequences of services that meet the individual workflow specification, but without taking care of actual executability concerns. As the explicit representation of all those possible sequences might be extremely large, it also is not explicitly built, but given declarative as a formula in SLTL (Semantic Linear Time Logic) [<xref ref-type="bibr" rid="B38">38</xref>], an extension of the commonly known propositional linear-time logic (PLTL). This formula is created by conjunction of all constraints, i.e. the constraints that are specified by the process designer for the current loosely specified branch and the ones that were globally specified by the domain modeler.</p>
      <p>To start the search for solutions, the synthesis algorithm requires an initial state (i.e. a set of start types). In contrast to our previous approach [<xref ref-type="bibr" rid="B18">18</xref>], where these start types had to be specified manually, they are now determined automatically according to preceding services using data-flow analysis methods. The types that are created on the execution path from the workflow’s initial node to the currently synthesized loosely specified branch are taken as start types. If due to branching in the model multiple paths are possible, the largest set of types that is consistent with each of those paths is taken.</p>
      <p>Given these specifications, the synthesis algorithm performs a parallel evaluation of the configuration universe and the specification formula to search for paths that are consistent with the configuration universe and fulfill the SLTL formula. Each of those paths is a valid solution that may replace the loosely specified branch. The framework currently supports two possibilities to choose one of the solutions: Either the shortest solution is chosen automatically or the user is queried to select one. However, the general architecture of the framework allows for the easy integration of other solution choosing mechanisms, for instance based on some cost function in order to obtain the<italic> cheapest</italic> solution.</p>
    </sec>
    <sec>
      <title>Verification</title>
      <p>As already mentioned, the domain modeler can define high-level constraints using model checking [<xref ref-type="bibr" rid="B39">39</xref>] formulas to express properties that must hold for any model in this domain. For an example, consider the process in Figure <xref ref-type="fig" rid="F11">11(A)</xref>, where a HMM is built from a multiple sequence alignment (obtained via<monospace>
						 emma)
					</monospace> and used to produce sequences that are finally displayed using<monospace>
						 showseq.
					</monospace> The workflow designer now might want to express that each built HMM has to be calibrated before it actually emits sequences. Formally, this can be expressed with the PLTL formula 
					<italic>ehmmbuild </italic><inline-formula><inline-graphic xlink:href="2041-1480-2-S1-S5-i1.gif"/></inline-formula> (<inline-formula><inline-graphic xlink:href="2041-1480-2-S1-S5-i2.gif"/></inline-formula><italic>ehmmemit</italic><bold> WU</bold><italic>ehmmcalibrate</italic>) denoting that the use of<monospace>
						 ehmmbuild
					</monospace> implies that<monospace>
						 ehmmemit
					</monospace> is not used before<monospace>
						 ehmmcalibrate
					</monospace> has been executed. As Figure <xref ref-type="fig" rid="F11">11(A)</xref> shows, this requirement is not met by the previously created process, because at the<monospace>
						 ehmmbuild
					</monospace> service’s node, the property is not fulfilled (indicated by the red ”x” overlay icon in the lower right corner). Inserting the<monospace>
						 ehmmcalibrate
					</monospace> service into the workflow fixes this issue, as Figure <xref ref-type="fig" rid="F11">11(B)</xref> shows: all services are marked by a green icon. Naturally, and as <xref ref-type="fig" rid="F11">11(C)</xref> shows, this constraint is also fulfilled if the HMM is not built by the process, but fetched from an HMM database.</p>
      <fig id="F11" position="float">
        <label>Figure 11</label>
        <caption>
          <p><bold>Model checking examples.</bold> Model checking of a formula expressing that each built HMM must be calibrated before it actually emits sequences.</p>
        </caption>
        <graphic xlink:href="2041-1480-2-S1-S5-11"/>
      </fig>
    </sec>
  </sec>
  <sec>
    <title>List of abbreviations used</title>
    <p><bold>ACD:</bold> Ajax Command Definition;<bold> API:</bold> Application Programming Interface;<bold> BLAST:</bold> Basic Local Alignment Search Tool;<bold> DDBJ:</bold> DNA Data Bank of Japan;<bold> EDAM:</bold> EMBRACE Data And Methods ontology;<bold> EMBOSS:</bold> European Molecular Biology Open Software Suite;<bold> GUI:</bold> Graphical User Interface; <bold>HMM:</bold> Hidden Markov Model;<bold> HTN:</bold> Hierarchical Task Network;<bold> ID:</bold> Identifier;<bold> jABC:</bold> Java Application Building Center;<bold> jETI:</bold> Java Electronic Tool Integration;<bold> OBO:</bold> Open Biomedical Ontologies;<bold> OWL:</bold> Web Ontology Language;<bold> PLTL:</bold> Propositional Linear Time Logic;<bold> PROPHETS:</bold> Process Realization and Optimization Platform using a Human-readable Expression of Temporal-logic Synthesis;<bold> SADI:</bold> Semantic Automated Discovery and Integration;<bold> SLTL:</bold> Semantic Linear Time Logic</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>AL developed the presented examples and drafted the manuscript. SN designed and implemented the PROPHETS plugin and contributed essential parts to the manuscript, especially to the Methods section. TM and BS have been developing the concept of the jABC and jETI platforms since 1993, first in the area of formal verification tools, then in the area of Semantic Web services. They have revised and edited the manuscript. All authors read and approved the final manuscript.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>This article has been published as part of <italic>Journal of Biomedical Semantics</italic> Volume 2 Supplement 1, 2011: Semantic Web Applications and Tools for Life Sciences (SWAT4LS), 2009.  The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.jbiomedsem.com/supplements/2/S1">http://www.jbiomedsem.com/supplements/2/S1</ext-link></p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Berners-Lee</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Hendler</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Lassila</surname>
          <given-names>O</given-names>
        </name>
        <article-title>The Semantic Web - A new form of Web content that is meaningful to computers will unleash a revolution of new possibilities.</article-title>
        <source>Scientific American</source>
        <year>2001</year>
        <volume>284</volume>
        <issue>5</issue>
        <fpage>34</fpage>
        <lpage>43</lpage>
        <pub-id pub-id-type="doi">10.1038/scientificamerican0501-34</pub-id>
        <pub-id pub-id-type="pmid">11396337</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Cannata</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Schroder</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Marangoni</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Romano</surname>
          <given-names>P</given-names>
        </name>
        <article-title>A Semantic Web for bioinformatics: goals, tools, systems, applications.</article-title>
        <source> BMC Bioinformatics </source>
        <year>2008</year>
        <volume>9</volume>
        <issue>Suppl 4</issue>
        <fpage>S1</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S4-S1</pub-id>
        <pub-id pub-id-type="pmid">18460170</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wilkinson</surname>
          <given-names>MD</given-names>
        </name>
        <name>
          <surname>Links</surname>
          <given-names>M</given-names>
        </name>
        <article-title>BioMOBY: an open source biological web services proposal.</article-title>
        <source> Briefings in Bioinformatics</source>
        <year>2002</year>
        <volume>3</volume>
        <issue>4</issue>
        <fpage>331</fpage>
        <lpage>41</lpage>
        <comment>[PMID: 12511062]</comment>
        <pub-id pub-id-type="doi">10.1093/bib/3.4.331</pub-id>
        <pub-id pub-id-type="pmid">12511062</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="book">
        <name>
          <surname>Wilkinson</surname>
          <given-names>MD</given-names>
        </name>
        <name>
          <surname>Vandervalk</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>McCarthy</surname>
          <given-names>L</given-names>
        </name>
        <article-title>SADI Semantic Web Services - ’cause you can’t always GET what you want!</article-title>
        <source>Proceedings of the IEEE Services Computing Conference: 7-11 December 2009, Singapore. APSCC 2009</source>
        <year>2009</year>
        <publisher-name>IEEE Asia-Pacific</publisher-name>
        <fpage>13</fpage>
        <lpage>18</lpage>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="book">
        <name>
          <surname>Goble</surname>
          <given-names>CA</given-names>
        </name>
        <name>
          <surname>Belhajjame</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Tanoh</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Bhagat</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Wolstencroft</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Stevens</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Nzuobontane</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>McWilliam</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Laurent</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Lopez</surname>
          <given-names>R</given-names>
        </name>
        <article-title>BioCatalogue: A Curated Web Service Registry For The Life Science Community.</article-title>
        <source> In 3rd International Biocuration Conference: 16-18 April 2009, Berlin</source>
        <year>2009</year>
        <publisher-name>Nature Precedings, Nature Publishing Group</publisher-name>
        <ext-link ext-link-type="uri" xlink:href="http://precedings.nature.com/documents/3132/version/1">http://precedings.nature.com/documents/3132/version/1</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wolstencroft</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Alper</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Hull</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Wroe</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Lord</surname>
          <given-names>PW</given-names>
        </name>
        <name>
          <surname>Stevens</surname>
          <given-names>RD</given-names>
        </name>
        <name>
          <surname>Goble</surname>
          <given-names>CA</given-names>
        </name>
        <article-title>The (my)Grid ontology: bioinformatics service discovery.</article-title>
        <source> International Journal of Bioinformatics Research and Applications</source>
        <year>2007</year>
        <volume>3</volume>
        <issue>3</issue>
        <fpage>303</fpage>
        <lpage>325</lpage>
        <comment>[PMID: 18048194]</comment>
        <pub-id pub-id-type="doi">10.1504/IJBRA.2007.015005</pub-id>
        <pub-id pub-id-type="pmid">18048194</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="other">
        <article-title>EMBRACE Ontology for Data and Methods (EDAM)</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://edamontology.sourceforge.net/">http://edamontology.sourceforge.net/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>DiBernardo</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Pottinger</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Wilkinson</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Semi-automatic web service composition for the life sciences using the BioMoby semantic web framework.</article-title>
        <source> Journal of Biomedical Informatics</source>
        <year>2008</year>
        <volume>41</volume>
        <issue>5</issue>
        <fpage>837</fpage>
        <lpage>847</lpage>
        <comment>[PMID: 18373957]</comment>
        <pub-id pub-id-type="doi">10.1016/j.jbi.2008.02.005</pub-id>
        <pub-id pub-id-type="pmid">18373957</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Oinn</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Addis</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Ferris</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Marvin</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Senger</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Greenwood</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Carver</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Glover</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Pocock</surname>
          <given-names>MR</given-names>
        </name>
        <name>
          <surname>Wipat</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>P</given-names>
        </name>
        <article-title>Taverna: a tool for the composition and enactment of bioinformatics workflows.</article-title>
        <source> Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <issue>17</issue>
        <fpage>3045</fpage>
        <lpage>3054</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth361</pub-id>
        <pub-id pub-id-type="pmid">15201187</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Carrere</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Gouzy</surname>
          <given-names>J</given-names>
        </name>
        <article-title>REMORA: a pilot in the ocean of BioMoby web-services.</article-title>
        <source> Bioinformatics (Oxford, England)</source>
        <year>2006</year>
        <volume>22</volume>
        <issue>7</issue>
        <fpage>900</fpage>
        <lpage>901</lpage>
        <comment>[PMID: 16423924]</comment>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl001</pub-id>
        <pub-id pub-id-type="pmid">16423924</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kwon</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Shigemoto</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Kuwana</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Sugawara</surname>
          <given-names>H</given-names>
        </name>
        <article-title>Web API for biology with a workflow navigation system.</article-title>
        <source> Nucleic Acids Res</source>
        <year>2009</year>
        <volume>37</volume>
        <issue>Web Server issue</issue>
        <fpage>W11</fpage>
        <lpage>W16</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkp300</pub-id>
        <pub-id pub-id-type="pmid">19417067</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Sutherland</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>McLeod</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Ferguson</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Burger</surname>
          <given-names>A</given-names>
        </name>
        <article-title>Knowledge-driven enhancements for task composition in bioinformatics.</article-title>
        <source> BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>Suppl 10</issue>
        <fpage>S12</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-S10-S12</pub-id>
        <pub-id pub-id-type="pmid">19796396</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="other">
        <name>
          <surname>Bausch</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Pautasso</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Schaeppi</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Alonso</surname>
          <given-names>G</given-names>
        </name>
        <article-title>BioOpera: Cluster-aware Computing.</article-title>
        <source> In Proceedings of the 4th IEEE International Conference on Cluster Computing</source>
        <year>2002</year>
        <fpage>99</fpage>
        <lpage>106</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.5158">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.5158</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Eker</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Janneck</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Lee</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Liu</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Liu</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Ludvig</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Neuendorffer</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Sachs</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Xiong</surname>
          <given-names>Y</given-names>
        </name>
        <article-title>Taming heterogeneity - the Ptolemy approach.</article-title>
        <source>Proceedings of the IEEE</source>
        <year>2003</year>
        <volume>91</volume>
        <fpage>127</fpage>
        <lpage>144</lpage>
        <pub-id pub-id-type="doi">10.1109/JPROC.2002.805829</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="other">
        <name>
          <surname>Altintas</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Berkley</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Jaeger</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Jones</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Ludäscher</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Mock</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Kepler: An Extensible System for Design and Execution of Scientific Workflows.</article-title>
        <source> In SSDBM</source>
        <year>2004</year>
        <fpage>21</fpage>
        <lpage>23</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.5.9905">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.5.9905</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="book">
        <name>
          <surname>Taylor</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Shields</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Wang</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Harrison</surname>
          <given-names>A</given-names>
        </name>
        <article-title>The Triana Workflow Environment: Architecture and Applications.</article-title>
        <source>Workflows for e-Science</source>
        <year>2007</year>
        <publisher-name>Secaucus, NJ, USA: Springer, New York</publisher-name>
        <fpage>320</fpage>
        <lpage>339</lpage>
        <comment>full_text</comment>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Kubczak</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Bio-jETI: a service integration, design, and provisioning platform for orchestrated bioinformatics processes.</article-title>
        <source> BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>Suppl 4</issue>
        <fpage>S12</fpage>
        <comment>[PMID: 18460173 PMCID: 2367639]</comment>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S4-S12</pub-id>
        <pub-id pub-id-type="pmid">18460173</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Lamprecht</surname>
          <given-names>AL</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Bio-jETI: a framework for semantics-based service composition.</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>Suppl 10</issue>
        <fpage>S8</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-S10-S8</pub-id>
        <pub-id pub-id-type="pmid">19796405</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="book">
        <name>
          <surname>Lamprecht</surname>
          <given-names>AL</given-names>
        </name>
        <name>
          <surname>Naujokat</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <person-group person-group-type="editor">Marshall MS, Burger A, Romano P, Paschke A, Splendiani A</person-group>
        <article-title>Semantics-Based Composition of EMBOSS Services with Bio-jETI.</article-title>
        <source>Proceedings of the 2nd Workshop on Semantic Web Applications and Tools for Life Sciences (SWAT4LS 2009): 20 November 2009, Amsterdam</source>
        <year> 2009</year>
        <volume>559</volume>
        <publisher-name>CEUR Workshop Proceedings</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Rice</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Longden</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Bleasby</surname>
          <given-names>A</given-names>
        </name>
        <article-title>EMBOSS: the European Molecular Biology Open Software Suite.</article-title>
        <source> Trends in Genetics: TIG</source>
        <year>2000</year>
        <volume>16</volume>
        <issue>6</issue>
        <fpage>276</fpage>
        <lpage>7</lpage>
        <comment>[PMID: 10827456]</comment>
        <pub-id pub-id-type="doi">10.1016/S0168-9525(00)02024-2</pub-id>
        <pub-id pub-id-type="pmid">10827456</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="other">
        <article-title>EMBOSS Homepage</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://emboss.sourceforge.net/index.html">http://emboss.sourceforge.net/index.html</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Eddy</surname>
          <given-names>SR</given-names>
        </name>
        <article-title>Profile hidden Markov models.</article-title>
        <source> Bioinformatics (Oxford, England)</source>
        <year>1998</year>
        <volume>14</volume>
        <issue>9</issue>
        <fpage>755</fpage>
        <lpage>763</lpage>
        <comment>[PMID: 9918945]</comment>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/14.9.755</pub-id>
        <pub-id pub-id-type="pmid">9918945</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="other">
        <article-title>HMMER: biosequence analysis using hidden Markov models</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://hmmer.janelia.org/">http://hmmer.janelia.org/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="other">
        <article-title>EMBOSS: Applications</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://emboss.sourceforge.net/apps/release/6.2/emboss/apps/">http://emboss.sourceforge.net/apps/release/6.2/emboss/apps/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="other">
        <article-title>EMBASSY Applications</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://emboss.sourceforge.net/apps/release/6.2/embassy/index.html">http://emboss.sourceforge.net/apps/release/6.2/embassy/index.html</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="other">
        <article-title>Web Services for EMBOSS-6.1.0 applications</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/soaplab/">http://www.ebi.ac.uk/soaplab/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Smith</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Ashburner</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Rosse</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Bard</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Bug</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Ceusters</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Goldberg</surname>
          <given-names>LJ</given-names>
        </name>
        <name>
          <surname>Eilbeck</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Ireland</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Mungall</surname>
          <given-names>CJ</given-names>
        </name>
        <name>
          <surname>Leontis</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Rocca-Serra</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Ruttenberg</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Sansone</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Scheuermann</surname>
          <given-names>RH</given-names>
        </name>
        <name>
          <surname>Shah</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Whetzel</surname>
          <given-names>PL</given-names>
        </name>
        <name>
          <surname>Lewis</surname>
          <given-names>S</given-names>
        </name>
        <article-title>The OBO Foundry: coordinated evolution of ontologies to support biomedical data integration.</article-title>
        <source> Nat Biotechnol</source>
        <year>2007</year>
        <volume>25</volume>
        <issue>11</issue>
        <fpage>1251</fpage>
        <lpage>1255</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt1346</pub-id>
        <pub-id pub-id-type="pmid">17989687</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="other">
        <article-title>EMBOSS: AJAX Command Definition (ACD files)</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://emboss.sourceforge.net/developers/acd/">http://emboss.sourceforge.net/developers/acd/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="other">
        <name>
          <surname>Lord</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Bechhofer</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Wilkinson</surname>
          <given-names>MD</given-names>
        </name>
        <name>
          <surname>Schiltz</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Gessler</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Hull</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Goble</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Stein</surname>
          <given-names>L</given-names>
        </name>
        <article-title>Applying Semantic Web Services to Bioinformatics: Experiences Gained, Lessons Learnt.</article-title>
        <source> In The Semantic Web - ISWC 2004</source>
        <year>2004</year>
        <fpage>350</fpage>
        <lpage>364</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://www.springerlink.com/content/1b7b409w0lw92326">http://www.springerlink.com/content/1b7b409w0lw92326</ext-link>
        <comment>full_text</comment>
      </mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="other">
        <article-title>Bio-jETI homepage</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://biojeti.cs.tu-dortmund.de/">http://biojeti.cs.tu-dortmund.de/</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="book">
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Kubczak</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Njoku</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Model-based Design of Distributed Collaborative Bioinformatics Processes in the jABC.</article-title>
        <source> Procedings of 11th IEEE International Conference on Engineering of Complex Computer Systems (ICECCS’06): 15-17 August 2006. Stanford, California.., Los Alamitos, CA, USA</source>
        <year>2006</year>
        <publisher-name>IEEE Computer Society</publisher-name>
        <fpage>169</fpage>
        <lpage>176</lpage>
      </mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="book">
        <name>
          <surname>Kubczak</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Fritsch</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Biological LC/MS Preprocessing and Analysis with jABC, jETI and xcms.</article-title>
        <source> Proceedings of the 2nd International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA 2006): 15-19 November 2006, Paphos, Cyprus</source>
        <year>2006</year>
        <publisher-name>IEEE Computer Society</publisher-name>
        <fpage>308</fpage>
        <lpage>313</lpage>
      </mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Lamprecht</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Sczyrba</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Hartmeier</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Giegerich</surname>
          <given-names>R</given-names>
        </name>
        <article-title>GeneFisher-P: variations of GeneFisher as processes in Bio-jETI.</article-title>
        <source>  BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>Suppl 4</issue>
        <fpage>S13</fpage>
        <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/18460174">http://www.ncbi.nlm.nih.gov/pubmed/18460174</ext-link>
        <comment>[PMID: 18460174]</comment>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S4-S13</pub-id>
        <pub-id pub-id-type="pmid">18460174</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="book">
        <name>
          <surname>Lamprecht</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Seven Variations of an Alignment Workflow - An Illustration of Agile Process Design and Management in Bio-jETI.</article-title>
        <source> Bioinformatics Research and Applications, Volume 4983 of LNBI, Atlanta, Georgia</source>
        <year>2008</year>
        <publisher-name>Springer</publisher-name>
        <fpage>445</fpage>
        <lpage>456</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-3-540-79450-9_42">http://dx.doi.org/10.1007/978-3-540-79450-9_42</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="book">
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Nagel</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Jörges</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Kubczak</surname>
          <given-names>C</given-names>
        </name>
        <source>Model-Driven Development with the jABC.</source>
        <year>2006</year>
        <volume>4383</volume>
        <publisher-name>Springer Berlin / Heidelberg</publisher-name>
        <fpage>92</fpage>
        <lpage>108</lpage>
        <comment>of LNCS</comment>
      </mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="book">
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Nagel</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>jETI: A Tool for Remote Tool Integration.</article-title>
        <source> Tools and Algorithms for the Construction and Analysis of Systems, Volume 3440/2005 of LNCS</source>
        <year>2005</year>
        <publisher-name>Springer Berlin/Heidelberg</publisher-name>
        <fpage>557</fpage>
        <lpage>562</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://www.springerlink.com/content/h9x6m1x21g5lknkx">http://www.springerlink.com/content/h9x6m1x21g5lknkx</ext-link>
        <comment>full_text</comment>
      </mixed-citation>
    </ref>
    <ref id="B37">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Jörges</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Genesys: service-oriented construction of property conform code generators.</article-title>
        <source>ISSE</source>
        <year>2008</year>
        <volume>4</volume>
        <issue>4</issue>
        <fpage>361</fpage>
        <lpage>384</lpage>
      </mixed-citation>
    </ref>
    <ref id="B38">
      <mixed-citation publication-type="other">
        <name>
          <surname>Steffen</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Margaria</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Freitag</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Module Configuration by Minimal Model Construction.</article-title>
        <source> Tech. rep., Fakultät für Mathematik und Informatik, Universität Passau</source>
        <year>1993</year>
      </mixed-citation>
    </ref>
    <ref id="B39">
      <mixed-citation publication-type="book">
        <name>
          <surname>Clarke</surname>
          <given-names>EM</given-names>
        </name>
        <name>
          <surname>Grumberg</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Peled</surname>
          <given-names>DA</given-names>
        </name>
        <source>Model Checking.</source>
        <year>1999</year>
        <publisher-name>The MIT Press</publisher-name>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
