<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title>BMC Bioinformatics</journal-title>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2633306</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-9-526</article-id>
    <article-id pub-id-type="pmid">19063732</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-9-526</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SNPFile – A software library and file format for large scale association mapping and population genetics studies</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" corresp="yes" contrib-type="author">
        <name>
          <surname>Nielsen</surname>
          <given-names>Jesper</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>jn@daimi.au.dk</email>
      </contrib>
      <contrib id="A2" contrib-type="author">
        <name>
          <surname>Mailund</surname>
          <given-names>Thomas</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>mailund@birc.au.dk</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Bioinformatics Research Center, University of Aarhus, Denmark</aff>
    <aff id="I2"><label>2</label>Department of Computer Science, University of Aarhus, Denmark</aff>
    <pub-date pub-type="collection">
      <year>2008</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>8</day>
      <month>12</month>
      <year>2008</year>
    </pub-date>
    <volume>9</volume>
    <fpage>526</fpage>
    <lpage>526</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/9/526"/>
    <history>
      <date date-type="received">
        <day>22</day>
        <month>4</month>
        <year>2008</year>
      </date>
      <date date-type="accepted">
        <day>8</day>
        <month>12</month>
        <year>2008</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2008 Nielsen and Mailund; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2008</copyright-year>
      <copyright-holder>Nielsen and Mailund; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
        <!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>
               Nielsen
               Jesper
               
               
               jn@daimi.au.dk
            </dc:author><dc:title>
            SNPFile &#x02013; A software library and file format for large scale association mapping and population genetics studies
         </dc:title><dc:date>2008</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 9(1): 526-. (2008)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2008)9:1&#x0003c;526&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>-->
      </license>
    </permissions>
    <abstract>
      <sec>
        <title>Background</title>
        <p>High-throughput genotyping technology has enabled cost effective typing of thousands of individuals in hundred of thousands of markers for use in genome wide studies. This vast improvement in data acquisition technology makes it an informatics challenge to efficiently store and manipulate the data. While spreadsheets and at text files were adequate solutions earlier, the increased data size mandates more efficient solutions.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We describe a new binary file format for SNP data, together with a software library for file manipulation. The file format stores genotype data together with any kind of additional data, using a flexible serialisation mechanism. The format is designed to be IO efficient for the access patterns of most multi-locus analysis methods.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>The new file format has been very useful for our own studies where it has significantly reduced the informatics burden in keeping track of various secondary data, and where the memory and IO efficiency has greatly simplified analysis runs. A main limitation with the file format is that it is only supported by the very limited set of analysis tools developed in our own lab. This is somewhat alleviated by a scripting interfaces that makes it easy to write converters to and from the format.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>High-throughput genotyping technology has enabled cost effective typing of thousands of individuals in hundred of thousands of markers for use in genome wide studies [<xref ref-type="bibr" rid="B1">1</xref>], in particular genome disease association studies [<xref ref-type="bibr" rid="B2">2</xref>-<xref ref-type="bibr" rid="B7">7</xref>].</p>
    <p>There are currently no standard file format for storing such genotype data, and most major analysis tools define their own textual input and output formats. Only a few tools supports several input formats, and often several conversion scripts needs to be implemented in a study. These file formats of analysis tools usually only represent a restricted set of the data collected for the study – only the data necessary for the computations provided by the program – so a study either needs a secondary format for storing all data, with converter programs for import/export to analysis tools, or need several files for storing various types of data.</p>
    <p>While spreadsheets and plain text files were adequate, if not optimal, solutions earlier, the increased data size mandates more efficient solutions. While plain text files formats have the advantage that they are human readable and can be edited in any text editor to correct mistakes, they have two major disadvantages: <italic>i</italic>) they are less space efficient than binary formats, often significantly so, and <italic>ii</italic>) text formats need to be parsed by tools before the data is analysed, a time consuming task when dealing with massive data sets.</p>
    <p>Here we describe a new binary file format, <italic>SNPFile</italic>, for storing SNP data and a software library for manipulating such files. The file format stores genotype data together with any kind of additional data, using a flexible serialisation mechanism. Data is memory mapped as needed so even very large data sets can be manipulated with moderate RAM requirements. The representation is optimised for accessing nearby markers together, and thus cache and disk efficient for the access patterns of most multi-locus analysis methods.</p>
    <p>We have extended the suite of association mapping tools developed in our group [<xref ref-type="bibr" rid="B8">8</xref>], including both single marker methods [<xref ref-type="bibr" rid="B9">9</xref>] and multi locus methods [<xref ref-type="bibr" rid="B10">10</xref>,<xref ref-type="bibr" rid="B11">11</xref>] and now successfully use it in our own studies.</p>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>We have developed a new file format and C++ library for manipulating SNP genotype data and arbitrary secondary data. The design allows us to store all genotype and secondary data in a single file, using a flexible serialisation framework. The genotype data representation is designed to be memory and IO efficient for the access patterns typical for multi-marker association mapping methods.</p>
    <sec>
      <title>Simple and efficient genotype data manipulation</title>
      <p>The primary data in a SNPFile is genotype data, represented as a matrix with one or two rows per individual (depending on whether the phase of the genotypes is know or unknown) and one column per marker. A matrix representation for the primary data is a simple abstraction that makes it relatively easy to implement most analyses.</p>
      <p>The actual implementation consists of a small hierarchy of classes for representing the data, depending on the size of the data and the usage pattern. Small matrices can efficiently be stored in RAM while for larger matrices we provide file storage. The abstraction for accessing the data is the same whether the actual data is stored in RAM or on disk.</p>
      <p>Although the programming abstraction for RAM based and file based matrices are the same, the time performance can differ significantly between accessing RAM and file data. By representing the file based matrices in a "column by column" order on the disk (see figure <xref ref-type="fig" rid="F1">1</xref>) we have optimised the code for the common case where nearby markers (nearby columns in the matrix) are accessed together (see figure <xref ref-type="fig" rid="F2">2</xref>).</p>
      <fig position="float" id="F1">
        <label>Figure 1</label>
        <caption>
          <p><bold>Memory layout of SNPFile matrix</bold>. If your program only accesses a few columns at a time they will cluster nicely in virtual memory and it will be easy for the operating system to keep only the needed pages in physical memory. This means you can handle very big SNPFiles while not using very much actual memory. Furthermore, if your program only access columns ordered left-to-right and from top to bottom, the file will simply be accessed from the beginning to the end. This is what the entire computer, both hardware and software, is optimized for. Thus it should be very fast. If you read a row from the matrix, however, you will access a lot of pages in the file, only use a very small part of each and the operating system will waste a lot of time reading data that will not be used, since it operates on entire pages.</p>
        </caption>
        <graphic xlink:href="1471-2105-9-526-1"/>
      </fig>
      <fig position="float" id="F2">
        <label>Figure 2</label>
        <caption>
          <p><bold>Time for accessing matrices</bold>. Times for reading or writing an entire matrix as a function of matrix size. Three tests was performed for each matrix size. The tests were done on a Intel Pentium 4 with 1 GB of RAM running linux.</p>
        </caption>
        <graphic xlink:href="1471-2105-9-526-2"/>
      </fig>
      <p>We do not expect the disk storage matrices to ever outperform RAM matrices. When the data can fit in RAM, the RAM matrices will always be more efficient to access, and when the matrix cannot fit in RAM, the swapping strategy will be similar to the swapping strategy used for the memory mapped file matrices. The main advantage of using the disk based matrices is that the matrix representation is directly available after opening the file; potentially time and memory consuming parsing is avoided.</p>
      <p>Table <xref ref-type="table" rid="T1">1</xref> compares the running time of our <italic>Blossoc </italic>tool [<xref ref-type="bibr" rid="B12">12</xref>] when loading data into RAM from its previous flat text format with the running time when using SNPFile. <italic>Blossoc </italic>is a haplotype based association mapping tool. The algorithm with or without SNPFile is exactly the same, and the difference in running time is due to the parsing of the input data. For large input sizes, the text based version runs out of memory in the parsing routine, something that of course could be alleviated by more careful resource management. Using SNPFile, however, it is not necessary to worry about it.</p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Runtime comparison using the Blossoc tool with its text file format vs. using SNPFile.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="center">No. Individuals</td>
              <td align="center">Text IO</td>
              <td align="center">SNPFile</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">500</td>
              <td align="center">1200</td>
              <td align="center">867</td>
            </tr>
            <tr>
              <td align="center">1000</td>
              <td align="center">1893</td>
              <td align="center">1671</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>Running time in seconds, for Blossoc using text IO and SNPFile, as a function as the number of individuals.</p>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec>
      <title>Framework for arbitrary secondary data</title>
      <p>Depending on the analysis of the data, various secondary data is needed, such as phenotypes, co-variates etc. Most file formats support only a small fraction of the types of secondary data of interest in a study, since they only focus on the types of analysis intended when the file format was designed. A consequence is that data is often kept in several independent files, with ample risks for accidental inconsistencies between files.</p>
      <p>To avoid such problems we have designed a flexible framework for secondary data into SNPFile. Through a serialisation framework, any C++ type can be stored in a SNPFile and accessed through a text key. Built-in types and STL containers are directly supported, and user-defined types can be supported by writing serialisation and de-serialisation methods. This can be done either through template methods in the user-defined types, or non-intrusively through global or name-space functions.</p>
    </sec>
    <sec>
      <title>Using SNPFile</title>
      <p>Most multi-marker analysis methods can efficiently represent the genotype data in matrix form, with one or two rows (columns) per individual and with a column (row) per marker. For such methods, implementing them using SNPFile is straightforward. With the framework for storing arbitrary C++ data types, porting applications to use SNPFile is usually a simple matter of changing the IO routines to read the relevant secondary data through this framework, and then using SNPFiles matrix classes instead of those used before.</p>
      <p>We have ported our existing association mapping software [<xref ref-type="bibr" rid="B8">8</xref>-<xref ref-type="bibr" rid="B11">11</xref>] – both single marker and multi-marker methods – to work on the new file format. Since these tools already represented genotype data as matrices, porting them was a simple task, taking from a few hours to a day or two. We are currently successfully using the updated tools in our own studies, where the format has greatly alleviated the informatics problems in data management and completely eliminated the need for cutting data into windows for analysis, when the full data cannot fit in RAM.</p>
    </sec>
  </sec>
  <sec>
    <title>Conclusion</title>
    <p>The size of data that can cost efficiently be collected for population genetics studies – and especially disease mapping studies – has increased immensely the last few years, and this has lead to an informatics challenge in how to efficiently store and manipulate this data together with any secondary data collected for the study.</p>
    <p>The file format we have described enables us to store all relevant data – primary and secondary – in a single file. The primary data is stored as a matrix, with a memory layout that makes it IO efficient to manipulate the data on disk, avoiding having to keep large data sets in RAM. The secondary data is stored using a flexible serialisation framework that allows any C++ data type to be stored together with the primary data.</p>
    <p>The format has been very useful for our own studies where it has significantly reduced the informatics burden in keeping track of various secondary data, and where the memory and IO efficiency has greatly simplified analysis runs. A main limitation with the file format is that it is only supported by the very limited set of analysis tools developed in our own lab. Through scripting interfaces to the file format, we hope to alleviate this in the future.</p>
    <p>A different binary file format for massive genotype data is available in the PLINK project [<xref ref-type="bibr" rid="B13">13</xref>]. The purpose of the binary format there is also achieving better CPU and memory performance. Where their format differs from ours is mainly in the treatment of secondary data. In the PLINK project, secondary data such as co-variates requires separate files from the genotype data. In contrast, we have designed our format such that we can store arbitrary secondary data together with the primary data in the same files.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>A SNPFile stores primary data as a matrix as well as any kind of secondary data, e.g. individuals phenotypes, marker names and positions, ethnicity of individuals or co-variates for disease studies.</p>
    <sec>
      <title>File manipulation</title>
      <p>SNPFiles are accessed through a class of the same name. Instances of the class SNPFile represents a SNPFile on disk, and arguments to its constructor determine read, write and creation semantics of the file. The constructor for SNPFile looks like this:</p>
      <p>SNPFile(const std::string &amp;filename,</p>
      <p>   bool allowWriting = false,</p>
      <p>   bool createFile = true,</p>
      <p>   int mode = 00644);</p>
      <p>where filename specifies the name of the file on disk, allowWriting determines if the file should be opened read-only or in read-write mode, createFile specifies if the file should be created on disk if it does not already exist, and mode specifies the access file permissions. A usage example could look like this:</p>
      <p>#include &lt;snpfile/snpfile.hh&gt;</p>
      <p>using namespace BiRC::SNPFile;</p>
      <p>int main( )</p>
      <p>{</p>
      <p>   SNPFile readOnly("/dir1/file1.snp");</p>
      <p>   SNPFile readWrite("/dir2/file2.snp", true);</p>
      <p>   // Do computations with files</p>
      <p>   readOnly.close( );</p>
      <p>   readWrite.close( );</p>
      <p>   return 0;</p>
      <p>}</p>
      <p>The read/write semantics of a SNPFile is carried over to the methods and classes for accessing data, in the form of separate interfaces to mutable and immutable matrices, providing a compile time check for correct access to the data. The exception to this design is the SNPFile class itself: the access to SNPFile objects is checked at runtime, with exceptions thrown in case of incorrect access. The reason for this is to permit write access permission to change at runtime for interactive applications.</p>
    </sec>
    <sec>
      <title>Accessing genotype data</title>
      <p>The primary data in a SNPFile is genotype data. We represent this as a matrix with each cell containing a genotype or allele. The matrix has one row for data with unknown phase and two rows for data with known phase. The matrix has one column per typed marker. The cells contain a signed char representing the genotype, where by convention, we use -9 to indicate missing values, use 0 and 1 for homozygote genotypes and 2 for heterzygote genotypes. Other values are reserved for future use.</p>
      <p>The library contains a small hierarchy of matrix classes for representing genotype data, together with two handler classes providing the matrix interface to the data representation classes. The matrix data representation hierarchy, rooted in the abstract class MatrixData, implements the memory management strategies, including allocation, deallocation and resizing. The handler classes, ImmutableMatrix and Matrix, provides the interface for accessing and, in the case of Matrix, modifying the matrices. Splitting the matrix classes in two responsibilities, data representation and data access, combines flexibility in representation with efficient data access. We get a flexible design for representing data both in RAM and on disk with no virtual function overhead when accessing the data.</p>
      <sec>
        <title>Accessing matrices</title>
        <p>Access to matrix data is through one of the classes ImmutableMatrix and Matrix. ImmutableMatrix represents a read-only matrix, and Matrix represents a read-write matrix. The later is derived from the former, but allows entries in the matrix to be updated. A usage example, calculating the genotype frequencies for all markers in a matrix, is shown below:</p>
        <p>#include &lt;iostream&gt;</p>
        <p>#include &lt;snpfile/matrix.hh&gt;</p>
        <p>using namespace BiRC::SNPFile;</p>
        <p>void genotypeFrequencies(ImmutableMatrix &amp;m)</p>
        <p>{</p>
        <p>   for (int j = 0; j &lt; m.noCols( ); ++j) {</p>
        <p>      int counts[ ] = {0,0,0};</p>
        <p>      int total = 0;</p>
        <p>      for (int i = 0; i &lt; m.noRows( ); ++i) {</p>
        <p>         if (m(i, j) &lt; 0) continue; //missing</p>
        <p>         if (m(i, j) &gt; 2) continue; //error</p>
        <p>         ++counts [m(i, j)];</p>
        <p>         ++total;</p>
        <p>      }</p>
        <p>      if (total &gt; 0) {</p>
        <p>         std::cout &lt;&lt; counts [0]/total &lt;&lt; ' '</p>
        <p>            &lt;&lt; counts [1]/total &lt;&lt; ' '</p>
        <p>            &lt;&lt; counts [2]/total</p>
        <p>            &lt;&lt; std::endl;</p>
        <p>      } else {</p>
        <p>         std::cout &lt;&lt; "nan nan nan"</p>
        <p>            &lt;&lt; std::endl;</p>
        <p>      }</p>
        <p>   }</p>
        <p>}</p>
        <p>Both handler classes can only be instantiated when assigned a MatrixData instance. They do not represent the data but only provide interfaces to it.</p>
      </sec>
      <sec>
        <title>Matrix representation</title>
        <p>The MatrixData class is abstract and provides the bridge between data access (the ImmutableMatrix and Matrix classes) and memory management. The actual data management is implemented in sub-classes of MatrixData. The library provides two data representations, one for representing matrix data in RAM and one for representing data on disk (the later actually implemented as two different classes), but application programmers can provide their own as needed.</p>
        <p>In our design we have considered the data representations implementation details, so the actual class representations cannot be accessed through the library interface. Instead, instances of the classes can be created through factory methods.</p>
        <p>Small matrices, representing small windows of the data, are often used as part of a larger computation, and such matrices are most efficiently stored in RAM. The ArrayMatrixData class is provided for this. The factory method for creating instances of this class returns a Matrix handler since read-only RAM based matrices are of little use. This handler can, of course, always be cast to a ImmutableMatrix handler if a read-only interface is needed for later processing.</p>
        <p>Matrices stored on disk are handled by the two classes: ReadOnlyFileMatrixData and ReadWriteFileMatrixData. Both are constructed with a reference to a SNPFile object. The factory method for ReadOnlyFileMatrixData returns a ImmutableMatrix instance while the factory method for ReadWriteFileMatrixData returns a Matrix. It is a runtime error to create a ReadWriteFileMatrixData object with a reference to a SNPFile object opened as read-only. Compile time checks ensure that the access patterns to matrices, after their instantiation, is correct.</p>
        <p>An example of accessing a matrix on a read-only file, for calculating the genotype using the function defined above, is shown below:</p>
        <p>#include &lt;iostream&gt;</p>
        <p>#include &lt;snpfile/snpfile.hh&gt;</p>
        <p>#include &lt;snpfile/matrix.hh&gt;</p>
        <p>#include &lt;snpfile/file_matrix.hh&gt;</p>
        <p>using namespace BiRC::SNPFile;</p>
        <p>void genotypeFrequencies(ImmutableMatrix &amp;m)</p>
        <p>{</p>
        <p>   // see above for implementation</p>
        <p>   ...</p>
        <p>}</p>
        <p>int main( )</p>
        <p>{</p>
        <p>   SNPFile file("filename.snp");</p>
        <p>   ImmutableMatrix m = newReadOnlyFileMatrix(file);</p>
        <p>   genotypeFrequencies(m);</p>
        <p>   file.close( );</p>
        <p>   return 0;</p>
        <p>}</p>
      </sec>
      <sec>
        <title>IO efficiency for large genotype data sets</title>
        <p>One of the motivations for SNPFiles is efficient management of large datasets; frequently datasets too large to keep in the computer's main memory. We achieve this by keeping file matrices (classes ReadOnlyFileMatrixData and ReadWriteFileMatrixData) on disk, rather than loading them into RAM, and then use memory mapping to access the matrices. By representing the matrices on disk in a way that matches common usage we can rely on the operating system of the computer to make sure the right parts of the file are read into memory and flushed back to disk in an efficient way. This essentially means representing the matrices column-wise since most multi locus methods access neighbouring markers together but less frequently distant markers together.</p>
      </sec>
      <sec>
        <title>Matrix views</title>
        <p>For computations on sub-matrices, where the matrix data is not modified, it is inefficient to copy the data. It is often also inconvenient to design the methods to keep track of relevant indices for sub-matrices, especially with recursive methods that modify the views – e.g. split rows based on genotypes or sort columns with respect to marker position as in the Blossoc method [<xref ref-type="bibr" rid="B12">12</xref>].</p>
        <p>The MatrixView class provides a solution to this problem by wrapping MatrixData objects and modifying matrix indices so a cell index in a view is redirected to the corresponding cell index in the matrix. This design allow transparent rearrangement of rows and columns, and extraction of arbitrary sub-matrices, with very little computational overhead.</p>
      </sec>
    </sec>
    <sec>
      <title>Accessing secondary data (meta data)</title>
      <p>SNPFiles can store arbitrary secondary data, or meta data, associated to the primary data. Meta data access is handled through three template methods:</p>
      <p>template&lt;typename T&gt;</p>
      <p>void getMetadata(const MetadataAccessor &amp;acc,</p>
      <p>   const std::string &amp;key,</p>
      <p>   T &amp;dest);</p>
      <p>template&lt;typename T&gt;</p>
      <p>T fetchMetadata(const MetadataAccessor &amp;acc,</p>
      <p>   const std::string &amp;key);</p>
      <p>template&lt;typename T&gt;</p>
      <p>void setMetadata(MetadataAccessor &amp;acc,</p>
      <p>   const std::string &amp;key,</p>
      <p>   const T &amp;src);</p>
      <p>The first parameter for all tree functions is of type MetadataAccessor. A MetadataAccessor is a container capable of storing meta data, which in practise is usually a SNPFile object. The second parameter is a key used to identify the data. Since we can store arbitrary meta data, keys are used to identify the various data.</p>
      <p>The functions are templates parameterized with the type of the meta data. In principle, any C++ type can be used as meta data, but the template functions needs to know how to serialise data of the type. For serialisation, we use a framework similar to the the Boost serialisation framework [<xref ref-type="bibr" rid="B14">14</xref>], but one that is binary compatible across different platforms and different versions of the C++ STL. The framework can immediately serialise all primitive types, such as int or double, and the most common STL types, such as map&lt;&gt; or vector&lt;&gt;.</p>
      <p>Adding meta data to a SNPFile is done using setMetaData as below:</p>
      <p>#include &lt;snpfile/metadata_access.hh&gt;</p>
      <p>#include &lt;snpfile/snpfile.hh&gt;</p>
      <p>#include &lt;iterator&gt;</p>
      <p>#include &lt;fstream&gt;</p>
      <p>using namespace BiRC::SNPFile;</p>
      <p>using namespace std;</p>
      <p>namespace {</p>
      <p>   // command line options...</p>
      <p>   bool binaryPhenotypes;</p>
      <p>   // ... more options ...</p>
      <p>}</p>
      <p>int main(int argc, char *argv[ ])</p>
      <p>{</p>
      <p>   // ... option parsing ...</p>
      <p>   SNPFile file("someFile.snp", true);</p>
      <p>   ifstream input("input.txt");</p>
      <p>   if (binaryPhenotypes) {</p>
      <p>      // read a sequence of binary phenotypes</p>
      <p>      // into a boolean vector</p>
      <p>      vector&lt;bool&gt; phenotypes;</p>
      <p>      copy(istream_iterator&lt;bool&gt;(input),</p>
      <p>         istream_iterator&lt;bool&gt;( ),</p>
      <p>         back_inserter(phenotypes));</p>
      <p>      // store a flag indicating the</p>
      <p>      // phenotypes are binary</p>
      <p>      setMetadata(file, "binary phenotypes?", true);</p>
      <p>      // store the phenotypes as well</p>
      <p>      setMetadata(file, "phenotypes", phenotypes);</p>
      <p>} else {</p>
      <p>      // read a sequence of quantitative</p>
      <p>      // phenotypes into a double vector</p>
      <p>      vector&lt;double&gt; phenotypes;</p>
      <p>      copy(istream_iterator&lt;double&gt;(input),</p>
      <p>         istream_iterator&lt;double&gt;( ),</p>
      <p>         back_inserter(phenotypes));</p>
      <p>      // store a flag indicating the</p>
      <p>      // phenotypes are *not* binary</p>
      <p>      setMetadata(file, "binary phenotypes?", false);</p>
      <p>      // store the phenotypes</p>
      <p>      setMetadata(file, "phenotypes", phenotypes);</p>
      <p>   }</p>
      <p>   file.close( );</p>
      <p>   return 0;</p>
      <p>}</p>
      <p>where the example code reads some phenotype data from a text file – either binary traits or continous traits depending on command line options – and stores the data, together with a flag, in the SNPFile. Reading the data back from a file is done through getMetadata or fetchMetaData:</p>
      <p>#include &lt;snpfile/metadata_access.hh&gt;</p>
      <p>#include &lt;snpfile/snpfile.hh&gt;</p>
      <p>using namespace BiRC::SNPFile;</p>
      <p>using namespace std;</p>
      <p>int main( )</p>
      <p>{</p>
      <p>   SNPFile file("someFile.snp");</p>
      <p>   if (fetchMetadata&lt;bool&gt;(file, "binary phenotypes?")) {</p>
      <p>      vector&lt;bool&gt; phenotypes;</p>
      <p>      getMetadata(file, "phenotypes", phenotypes);</p>
      <p>      // ... analyse data ...</p>
      <p>   } else {</p>
      <p>      vector&lt;double&gt; phenotypes;</p>
      <p>      getMetadata(file, "phenotypes", phenotypes);</p>
      <p>      // ... analyse data ...</p>
      <p>   }</p>
      <p>   file.close( );</p>
      <p>   return 0;</p>
      <p>}</p>
      <p>where fetchMetadata is just syntactic sugar around getMetaData so we can access data without necessarily declaring a variable for it (as in the if statement above). For complex data, such as maps, getMetaData is more efficient than fetchMetadata.</p>
      <sec>
        <title>Serialising user-defined types</title>
        <p>User defined classes cannot immediately be serialised, but it is possible to extend the serialisation framework with arbitrary types in two ways: by implementing member functions in the class or struct to be serialised, or by implementing free functions in the namespace of the class. The former can be used for classes the application programmer is free to modify, while the later can be used when that is not an option.</p>
        <p>The simplest way to add serialisation through member functions it to add a template method named serialize that can be used for both serialisation and de-serialisation, depending on its template instantiation. Alternatively, an overloaded serialize function can be used to handle serialisation and de-serialisation differently. A class that implements serialisation with member functions can then be exported to the SNPFile serialisation framework using the macro BIRC_SNPFILE_INTRUSIVE_SERIALIZATION.</p>
        <p>For non-intrusive serialisation, the framework can use a serialize template function in the namespace of the class to be serialised and the macro BIRC_SNPFILE_NONINTRUSIVE_SERIALIZATION instead. If different methods are needed for serialisation and de-serialisation, one can implement methods load and save in a specialised SerializationTrait template. For details on this, we refer to the library documentation.</p>
        <p>The example below illustrates serialisation of user-defined types. The example shows how, in a hypothetical study where a SNPFile combines individuals from different previous studies and from different populations, we can store population and study information from the previous studies, and associate this to each individual. The example defines three new types: IndivData for data associated with each genotyped individual, StudyData for data associated with each previous study where the genotype data is obtained from, and PopulationData for data associated with populations. For IndivData we use the member function approach to serialisation and for the other two classes we use the free function version.</p>
        <p>#include &lt;snpfile/metadata_access.hh&gt;</p>
        <p>#include &lt;snpfile/snpfile.hh&gt;</p>
        <p>using namespace BiRC::SNPFile;</p>
        <p>#include &lt;string&gt;</p>
        <p>#include &lt;vector&gt;</p>
        <p>#include &lt;map&gt;</p>
        <p>using namespace std;</p>
        <p>struct IndivData {</p>
        <p>   string name;</p>
        <p>   int studyID;</p>
        <p>   int populationID;</p>
        <p>   // member interface to</p>
        <p>   // meta data serialisation</p>
        <p>   template&lt;class Archive&gt;</p>
        <p>   void serialize(Archive &amp; ar)</p>
        <p>   {</p>
        <p>      ar | name;</p>
        <p>      ar | studyID;</p>
        <p>      ar | populationID;</p>
        <p>   }</p>
        <p>};</p>
        <p>// macro needed to export the serialisation</p>
        <p>// to the SNPFile framework</p>
        <p>BIRC_SNPFILE_INTRUSIVE_SERIALIZATION(IndivData);</p>
        <p>struct StudyData {</p>
        <p>   string someRelevantData;</p>
        <p>   string additionalData;</p>
        <p>};</p>
        <p>struct PopulationData {</p>
        <p>   string popData;</p>
        <p>};</p>
        <p>// non-intrusive support for serialisation</p>
        <p>template&lt;class Archive&gt;</p>
        <p>void serialize(Archive &amp; ar, StudyData &amp;d)</p>
        <p>{</p>
        <p>   ar | d.someRelevantData;</p>
        <p>   ar | d.additionalData;</p>
        <p>}</p>
        <p>template&lt;class Archive&gt;</p>
        <p>void serialize(Archive &amp; ar, PopulationData &amp;d)</p>
        <p>{</p>
        <p>   ar | d.popData;</p>
        <p>}</p>
        <p>// macros needed to export</p>
        <p>// serialisation</p>
        <p>BIRC_SNPFILE_NONINTRUSIVE_SERIALIZATION(StudyData);</p>
        <p>BIRC_SNPFILE_NONINTRUSIVE_SERIALIZATION(PopulationData);</p>
        <p>int main( )</p>
        <p>{</p>
        <p>   // mapping from studyIDs to study data</p>
        <p>   map&lt;int, StudyData&gt; studies;</p>
        <p>   // mapping from populationIDs to population data</p>
        <p>   map&lt;int, PopulationData&gt; populations;</p>
        <p>   // data for each individual in the SNPFile, ordered</p>
        <p>   // in the same order as the rows in the genotype</p>
        <p>   // matrix</p>
        <p>   vector&lt;IndivData&gt; individualsData;</p>
        <p>   // ... fill in data for the maps and vector...</p>
        <p>   SNPFile file("someFile.snp", true);</p>
        <p>   setMetadata(file, "study data", studies);</p>
        <p>   setMetadata(file, "population data", populations);</p>
        <p>   setMetadata(file, "individuals data", individualsData);</p>
        <p>   file.close( );</p>
        <p>   return 0;</p>
        <p>}</p>
        <p>After the serialisation method is specified in this way, getMetaData, setMetadata and fetchMetadata can be used as for any other type. For more information about serialisation of custom types, we refer to the library documentation.</p>
      </sec>
      <sec>
        <title>Meta-data type system</title>
        <p>The serialisation mechanism for meta-data requires that the program accessing meta-data knows the type of the data before accessing it – a consequence of using a statically typed language such as C++. Unfortunately, this limits the general usability of the meta-data framework: tools operating on SNPFiles must all agree on the availability and type of meta-data to be able to manipulate it. This requires a protocol that application programs must follow if their programs should be able to operate on the same files.</p>
        <p>Our initial design did rely on such a meta-data protocol, with agreed-upon types for the data used by our tool suite. Our experience with this convinced us, however, that this approach was less flexible than desired. This lead us to design a system for storing type information together with meta-data in SNPFiles, enabling us to dynamically extract meta-data information – availability and type of meta-data. With this design, programs can probe SNPFiles to get information about meta-data, and users can – when the tools support this – interactively access data to do their analyses.</p>
        <p>The meta-data type system is non-intrusive in the sense that it does not affect the interface to storing meta-data described above. Any kind of meta-data can still be serialised into SNPFiles – using the functions above – and type information will automatically be stored together with the data whenever the type of the data is known by the SNPFile library (which includes primitive types and STL containers).</p>
        <p>For custom meta-data – where the SNPFile library does not know the type – a mechanism similar to the serialisation framework allows the application program to provide type information to SNPFile. For example, to add support for the three custom types introduced in the example above, we would just add the following lines to our program:</p>
        <p>BiRC_SNPFILE_EXPORT_TYPE(IndivData)</p>
        <p>BiRC_SNPFILE_EXPORT_TYPE(StudyData)</p>
        <p>BiRC_SNPFILE_EXPORT_TYPE(PopulationData)</p>
        <p>The macros used for exporting types to the serialisation framework will by default add type support as well, however, so in our example this is not needed.</p>
        <p>In our program above, the type associated with meta-data "individuals data" will then be std::vector&lt; IndivData &gt;, the type associated with "population data" will be std::map&lt; int32_t, PopulationData &gt; and the data associated with "study data" will be std::map&lt; int32_t, StudyData &gt;. Without specifying the type this way, the types would be stored as std::vector&lt; unknown &gt; and std::map&lt; int32_t, unknown &gt;, respectively.</p>
      </sec>
    </sec>
    <sec>
      <title>Script access to SNPFiles</title>
      <p>For easier manipulation of SNPFile files, we provide a Python extension module. Through this module, the genotype matrices can be manipulated in ways similar to the C++ interface. Most common meta data types can be serialized and manipulated, but due to type differences between Python and C++ there are some limitations in the Python interface, including manipulation of custom data types.</p>
    </sec>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p><bold>Project name: </bold>SNPFile</p>
    <p>
      <bold>Project home page: </bold>
      <ext-link ext-link-type="uri" xlink:href="http://www.daimi.au.dk/~mailund/SNPFile/"/>
    </p>
    <p><bold>Operating system(s): </bold>Binary distributions available for Linux. Source code available for all unix-like platforms.</p>
    <p><bold>Programming language: </bold>C++</p>
    <p><bold>Other requirements: </bold>The boost library [<xref ref-type="bibr" rid="B15">15</xref>].</p>
    <p><bold>License: </bold>GNU GPL version 2.</p>
    <p><bold>Any restrictions to use by non-academics: </bold>None, besides those of the GPL license.</p>
  </sec>
  <sec>
    <title>Abbreviations</title>
    <p>IO: Input/Output; RAM: Random Access Memory; SNP: Single nucleotide polymorphism; STL: Standard template library.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>TM conceived of the project. JN and TM both designed the library, while JN did the majority of the implementation. Both authors drafted the manuscript.</p>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgements</title>
      <p>TM is funded by the Danish Research Agency, FNU grant 272-05-0283 and FTP grant 274-05-0365 and a Wellcome Trust 'Value in People Award'.</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Barrett</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Cardon</surname>
            <given-names>LR</given-names>
          </name>
        </person-group>
        <article-title>Evaluating coverage of genome-wide association studies</article-title>
        <source>Nat Genet</source>
        <year>2006</year>
        <volume>38</volume>
        <fpage>659</fpage>
        <lpage>662</lpage>
        <pub-id pub-id-type="pmid">16715099</pub-id>
        <pub-id pub-id-type="doi">10.1038/ng1801</pub-id>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Arking</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pfeufer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Post</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Kao</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Newton-Cheh</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Ikeda</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>West</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Kashuk</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Akyol</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Perz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Jalilzadeh</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Illig</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gieger</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wichmann</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Marban</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>O'donnell</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hirschhorn</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kaab</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Spooner</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Meitinger</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Chakravarti</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>A common genetic variant in the NOS1 regulator NOS1AP modulates cardiac repolarization</article-title>
        <source>Nat Genet</source>
        <year>2006</year>
        <volume>38</volume>
        <fpage>644</fpage>
        <lpage>651</lpage>
        <pub-id pub-id-type="pmid">16648850</pub-id>
        <pub-id pub-id-type="doi">10.1038/ng1790</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smyth</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Cooper</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bailey</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Field</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Burren</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Smink</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Guja</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Ionescu-Tirgoviste</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Widmer</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Dunger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Savage</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Clayton</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Todd</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>A genome-wide association study of nonsynonymous SNPs identifies a type 1 diabetes locus in the interferon-induced helicase (IFIH1) region</article-title>
        <source>Nat Genet</source>
        <year>2006</year>
        <volume>38</volume>
        <fpage>617</fpage>
        <lpage>619</lpage>
        <pub-id pub-id-type="pmid">16699517</pub-id>
        <pub-id pub-id-type="doi">10.1038/ng1800</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Amundadottir</surname>
            <given-names>LT</given-names>
          </name>
          <name>
            <surname>Sulem</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gudmundsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Helgason</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Baker</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Agnarsson</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Sigurdsson</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Benediktsdottir</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Cazier</surname>
            <given-names>JB</given-names>
          </name>
          <name>
            <surname>Sainz</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Jakobsdottir</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kostic</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Magnusdottir</surname>
            <given-names>DN</given-names>
          </name>
          <name>
            <surname>Ghosh</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Agnarsson</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Birgisdottir</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Le Roux</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Olafsdottir</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Blondal</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Andresdottir</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gretarsdottir</surname>
            <given-names>OS</given-names>
          </name>
          <name>
            <surname>Bergthorsson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Gudbjartsson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gylfason</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Thorleifsson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Manolescu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kristjansson</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Geirsson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Isaksson</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Douglas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Johansson</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Balter</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Wiklund</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Montie</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Suarez</surname>
            <given-names>BK</given-names>
          </name>
          <name>
            <surname>Ober</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Cooney</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>Gronberg</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Catalona</surname>
            <given-names>WJ</given-names>
          </name>
          <name>
            <surname>Einarsson</surname>
            <given-names>GV</given-names>
          </name>
          <name>
            <surname>Barkardottir</surname>
            <given-names>RB</given-names>
          </name>
          <name>
            <surname>Gulcher</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Kong</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Thorsteinsdottir</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Stefansson</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>A common variant associated with prostate cancer in European and African populations</article-title>
        <source>Nat Genet</source>
        <year>2006</year>
        <volume>38</volume>
        <fpage>652</fpage>
        <lpage>658</lpage>
        <pub-id pub-id-type="pmid">16682969</pub-id>
        <pub-id pub-id-type="doi">10.1038/ng1808</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Easton</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Pooley</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>Dunning</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Pharoah</surname>
            <given-names>PD</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ballinger</surname>
            <given-names>DG</given-names>
          </name>
          <name>
            <surname>Struewing</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Morrison</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Field</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Luben</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wareham</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Ahmed</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Healey</surname>
            <given-names>CS</given-names>
          </name>
          <name>
            <surname>Bowman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>KB</given-names>
          </name>
          <name>
            <surname>Haiman</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Kolonel</surname>
            <given-names>LK</given-names>
          </name>
          <name>
            <surname>Henderson</surname>
            <given-names>BE</given-names>
          </name>
          <name>
            <surname>Le Marchand</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Brennan</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Sangrajrang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gaborieau</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Odefrey</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Shen</surname>
            <given-names>CY</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>PE</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>HC</given-names>
          </name>
          <name>
            <surname>Eccles</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Evans</surname>
            <given-names>DG</given-names>
          </name>
          <name>
            <surname>Peto</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Fletcher</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Seal</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Stratton</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Rahman</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chenevix-Trench</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Bojesen</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Nordestgaard</surname>
            <given-names>BG</given-names>
          </name>
          <name>
            <surname>Axelsson</surname>
            <given-names>CK</given-names>
          </name>
          <name>
            <surname>Garcia-Closas</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Brinton</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Chanock</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lissowska</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Peplonska</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Nevanlinna</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Fagerholm</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Eerola</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Kang</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Yoo</surname>
            <given-names>KY</given-names>
          </name>
          <name>
            <surname>Noh</surname>
            <given-names>DY</given-names>
          </name>
          <name>
            <surname>Ahn</surname>
            <given-names>SH</given-names>
          </name>
          <name>
            <surname>Hunter</surname>
            <given-names>DJ</given-names>
          </name>
          <name>
            <surname>Hankinson</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>DG</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Wedren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Low</surname>
            <given-names>YL</given-names>
          </name>
          <name>
            <surname>Bogdanova</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Schurmann</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Dork</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Tollenaar</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Jacobi</surname>
            <given-names>CE</given-names>
          </name>
          <name>
            <surname>Devilee</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Klijn</surname>
            <given-names>JG</given-names>
          </name>
          <name>
            <surname>Sigurdson</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Doody</surname>
            <given-names>MM</given-names>
          </name>
          <name>
            <surname>Alexander</surname>
            <given-names>BH</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Brock</surname>
            <given-names>IW</given-names>
          </name>
          <name>
            <surname>MacPherson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Reed</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Couch</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Goode</surname>
            <given-names>EL</given-names>
          </name>
          <name>
            <surname>Olson</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Meijers-Heijboer</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ouweland</surname>
            <given-names>A van den</given-names>
          </name>
          <name>
            <surname>Uitterlinden</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rivadeneira</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Milne</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Ribas</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Gonzalez-Neira</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Benitez</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hopper</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>McCredie</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Southey</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Giles</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>Schroen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Justenhoven</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Brauch</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Hamann</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Ko</surname>
            <given-names>YD</given-names>
          </name>
          <name>
            <surname>Spurdle</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Beesley</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Mannermaa</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kosma</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Kataja</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Hartikainen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Day</surname>
            <given-names>NE</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Ponder</surname>
            <given-names>BA</given-names>
          </name>
        </person-group>
        <article-title>Genome-wide association study identifies novel breast cancer susceptibility loci</article-title>
        <source>Nature</source>
        <year>2007</year>
        <volume>447</volume>
        <fpage>1087</fpage>
        <lpage>93</lpage>
        <pub-id pub-id-type="pmid">17529967</pub-id>
        <pub-id pub-id-type="doi">10.1038/nature05887</pub-id>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gudmundsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Sulem</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Steinthorsdottir</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Bergthorsson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Thorleifsson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Manolescu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rafnar</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gudbjartsson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Agnarsson</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Baker</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sigurdsson</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Benediktsdottir</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Jakobsdottir</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Blondal</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Stacey</surname>
            <given-names>SN</given-names>
          </name>
          <name>
            <surname>Helgason</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gunnarsdottir</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Olafsdottir</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kristinsson</surname>
            <given-names>KT</given-names>
          </name>
          <name>
            <surname>Birgisdottir</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ghosh</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Thorlacius</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Magnusdottir</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Stefansdottir</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kristjansson</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Bagger</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Wilensky</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Reilly</surname>
            <given-names>MP</given-names>
          </name>
          <name>
            <surname>Morris</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Kimber</surname>
            <given-names>CH</given-names>
          </name>
          <name>
            <surname>Adeyemo</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>So</surname>
            <given-names>WY</given-names>
          </name>
          <name>
            <surname>Tong</surname>
            <given-names>PC</given-names>
          </name>
          <name>
            <surname>Ng</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Hansen</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Andersen</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Borch-Johnsen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jorgensen</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Tres</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Fuertes</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Ruiz-Echarri</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Asin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Saez</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>van Boven</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Klaver</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Swinkels</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Aben</surname>
            <given-names>KK</given-names>
          </name>
          <name>
            <surname>Graif</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Cashy</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Suarez</surname>
            <given-names>BK</given-names>
          </name>
          <name>
            <surname>van Vierssen Trip</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Frigge</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Ober</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hofker</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Wijmenga</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Christiansen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Rader</surname>
            <given-names>DJ</given-names>
          </name>
          <name>
            <surname>Palmer</surname>
            <given-names>CN</given-names>
          </name>
          <name>
            <surname>Rotimi</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chan</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Pedersen</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Sigurdsson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Benediktsson</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Jonsson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Einarsson</surname>
            <given-names>GV</given-names>
          </name>
          <name>
            <surname>Mayordomo</surname>
            <given-names>JI</given-names>
          </name>
          <name>
            <surname>Catalona</surname>
            <given-names>WJ</given-names>
          </name>
          <name>
            <surname>Kiemeney</surname>
            <given-names>LA</given-names>
          </name>
          <name>
            <surname>Barkardottir</surname>
            <given-names>RB</given-names>
          </name>
          <name>
            <surname>Gulcher</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Thorsteinsdottir</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Kong</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stefansson</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Two variants on chromosome 17 confer prostate cancer risk, and the one in TCF2 protects against type 2 diabetes</article-title>
        <source>Nat Genet</source>
        <year>2007</year>
        <volume>39</volume>
        <fpage>977</fpage>
        <lpage>83</lpage>
        <pub-id pub-id-type="pmid">17603485</pub-id>
        <pub-id pub-id-type="doi">10.1038/ng2062</pub-id>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saxena</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Voight</surname>
            <given-names>BF</given-names>
          </name>
          <name>
            <surname>Lyssenko</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Burtt</surname>
            <given-names>NP</given-names>
          </name>
          <name>
            <surname>de Bakker</surname>
            <given-names>PI</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Roix</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Kathiresan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hirschhorn</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Hughes</surname>
            <given-names>TE</given-names>
          </name>
          <name>
            <surname>Groop</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Altshuler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Almgren</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Florez</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ardlie</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Bengtsson Bostrom</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Isomaa</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lettre</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Lindblad</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Lyon</surname>
            <given-names>HN</given-names>
          </name>
          <name>
            <surname>Melander</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Newton-Cheh</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Nilsson</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Orho-Melander</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rastam</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Speliotes</surname>
            <given-names>EK</given-names>
          </name>
          <name>
            <surname>Taskinen</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Tuomi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Guiducci</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berglund</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gianniny</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Hackett</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Holmkvist</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Laurila</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sjogren</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sterner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Surti</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Svensson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Svensson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tewhey</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Blumenstiel</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Parkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Defelice</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Barry</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Brodeur</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Camarata</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Chia</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Fava</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gibbons</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Handsaker</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Healy</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Nguyen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Gates</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sougnez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Gage</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Nizzari</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gabriel</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Chirn</surname>
            <given-names>GW</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Parikh</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Richardson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ricke</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Purcell</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Genome-wide association analysis identifies loci for type 2 diabetes and triglyceride levels</article-title>
        <source>Science</source>
        <year>2007</year>
        <volume>316</volume>
        <fpage>1331</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="pmid">17463246</pub-id>
        <pub-id pub-id-type="doi">10.1126/science.1142358</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="other">
        <article-title>BiRC association mapping software</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.birc.au.dk/~mailund/association-mapping/"/>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="other">
        <article-title>Single marker association tests</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.birc.au.dk/~mailund/sma/"/>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="other">
        <article-title>Blossoc: Block association mapping</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.birc.au.dk/~mailund/Blossoc/"/>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="other">
        <article-title>HapCluster: Haplotype clustering association mapping</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.birc.au.dk/~mailund/HapCluster/"/>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mailund</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Besenbacher</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schierup</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Whole genome association mapping by incompatibilities and local perfect phylogenies</article-title>
        <source>BMC Bioinformatics</source>
        <year>2006</year>
        <volume>7</volume>
        <fpage>454</fpage>
        <pub-id pub-id-type="pmid">17042942</pub-id>
        <pub-id pub-id-type="doi">10.1186/1471-2105-7-454</pub-id>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Purcell</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Neale</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Todd-Brown</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Ferreira</surname>
            <given-names>MAR</given-names>
          </name>
          <name>
            <surname>Bender</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Maller</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Sklar</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>de Bakker</surname>
            <given-names>PIW</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Sham</surname>
            <given-names>PC</given-names>
          </name>
        </person-group>
        <article-title>PLINK: a tool set for whole-genome association and population-based linkage analyses</article-title>
        <source>Am J Hum Genet</source>
        <year>2007</year>
        <volume>81</volume>
        <fpage>559</fpage>
        <lpage>575</lpage>
        <pub-id pub-id-type="pmid">17701901</pub-id>
        <pub-id pub-id-type="doi">10.1086/519795</pub-id>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="other">
        <article-title>Boost Serialization</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.boost.org/libs/serialization/"/>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="other">
        <article-title>Boost</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.boost.org/"/>
      </citation>
    </ref>
  </ref-list>
</back>
