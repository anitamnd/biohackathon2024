<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10715767</article-id>
    <article-id pub-id-type="pmid">38048610</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad733</article-id>
    <article-id pub-id-type="publisher-id">btad733</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Gene Expression</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Parsley: a web app for parsing data from plate readers</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-4759-5921</contrib-id>
        <name>
          <surname>Csibra</surname>
          <given-names>Eszter</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--e.csibra@imperial.ac.uk-->
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Stan</surname>
          <given-names>Guy-Bart</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--g.stan@imperial.ac.uk-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Nikolski</surname>
          <given-names>Macha</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad733-cor1">Corresponding authors. Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London,  Exhibition Road, London SW7 2AY, United Kingdom. E-mails: <email>e.csibra@imperial.ac.uk</email> (E.C.) and <email>g.stan@imperial.ac.uk</email> (G.-B.S.) </corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-04">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad733</elocation-id>
    <history>
      <date date-type="received">
        <day>18</day>
        <month>7</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>16</day>
        <month>10</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>09</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>01</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad733.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>As demand for the automation of biological assays has increased over recent years, the range of measurement types implemented by multiwell plate readers has broadened and the list of published software packages that caters to their analysis has grown. However, most plate readers export data in esoteric formats with little or no metadata, while most analytical software packages are built to work with tidy data accompanied by associated metadata. ‘Parser’ functions are therefore required to prepare raw data for analysis. Such functions are instrument- and data type-specific, and to date, no generic tool exists that can parse data from multiple data types or multiple plate readers, despite the potential for such a tool to speed up access to analysed data and remove an important barrier for less confident coders. We have developed the interactive web application, Parsley, to bridge this gap. Unlike conventional programmatic parser functions, Parsley makes few assumptions about exported data, instead employing user inputs to identify and extract data from data files. In doing so, it is designed to enable any user to parse plate reader data and can handle a wide variety of instruments (10+) and data types (53+). Parsley is freely available via a web interface, enabling access to its unique plate reader data parsing functionality, without the need to install software or write code.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>The Parsley web application can be accessed at: <ext-link xlink:href="https://gbstan.shinyapps.io/parsleyapp/" ext-link-type="uri">https://gbstan.shinyapps.io/parsleyapp/</ext-link>. The source code is available at: <ext-link xlink:href="https://github.com/ec363/parsleyapp" ext-link-type="uri">https://github.com/ec363/parsleyapp</ext-link> and is archived on Zenodo: <ext-link xlink:href="https://zenodo.org/records/10011752" ext-link-type="uri">https://zenodo.org/records/10011752</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Royal Academy of Engineering</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000287</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="5"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Most modern plate readers are capable of carrying out absorbance, fluorescence and luminescence readings using multiwell plates ranging from 6- to 384-well plates (with 96-well plates being the most common). Many come with additional features to enable spectrum scanning, timecourse measurements, as well as the ability to control temperature, tune wavelengths or implement reagent injection. As a result of this versatility, a diverse range of phenotypes may be assayed in these instruments in high-throughput, making plate readers essential tools for the average molecular or cell biology laboratory.</p>
    <p>A growing number of analytical packages have been developed in recent years to automate the analysis of plate reader data. A list of currently available packages is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B42" ref-type="bibr">Sprouffske and Wagner 2016</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B26" ref-type="bibr">Kamrad <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B38" ref-type="bibr">Small <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B41" ref-type="bibr">Sprouffske 2020</xref>, <xref rid="btad733-B4" ref-type="bibr">Cheng and Thrash 2021</xref>, <xref rid="btad733-B5" ref-type="bibr">2023</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B25" ref-type="bibr">Kamrad 2021</xref>, <xref rid="btad733-B30" ref-type="bibr">Midani <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B45" ref-type="bibr">Warchal 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B39" ref-type="bibr">Small and McCormick 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>). These tools fall broadly into three categories: those that tackle the analysis of microbial growth curves, those that quantify fluorescent protein expression, and those that evaluate phenotype (or drug) screening assays. Regardless of type, all analysis workflows must begin with the importing and cleaning of raw data. Raw data files produced by plate readers tend to be exported in Microsoft Excel format, but they suffer from a lack of data standardization [unlike e.g. standardized FCS file formats exported by flow cytometers (<xref rid="btad733-B40" ref-type="bibr">Spidlen <italic toggle="yes">et al.</italic> 2021</xref>)]. This means that the exact location of the data within the file, the orientation and arrangement of the data, and the presence and location of metadata all depend on the commercial software sold with the instrument. However, analytical functions rely on data (i) in so-called ‘tidy’ format [where every column is a variable, every row is an observation, and every cell contains a single value (<xref rid="btad733-B46" ref-type="bibr">Wickham 2014</xref>)] and (ii) which includes all the necessary metadata for the downstream analysis. The conversion of raw data into a format appropriate for programmatic analysis—the combination of data extraction, data tidying and metadata joining known as data ‘parsing’—is therefore an essential primary requirement for the analysis of plate reader data.</p>
    <p>As shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>, some tools expect raw plate reader data as inputs. As raw data export formats differ between instruments, these packages restrict their user base to only those who own identical plate readers (or those who are willing to edit package functions). In contrast, packages that require tidy data inputs for their analytical functions, enable the modularization of their workflow by separating the data parsing from the data analysis. Parser functions can then be supplied as needed by either the package authors or external sources without affecting the downstream analysis.</p>
    <p>Data parsing functions can be found in a variety of packages [<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B7" ref-type="bibr">b</xref>, <xref rid="btad733-B8" ref-type="bibr">c</xref>, <xref rid="btad733-B9" ref-type="bibr">d</xref>, <xref rid="btad733-B10" ref-type="bibr">e</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B34" ref-type="bibr">Palakkan 2020</xref>, <xref rid="btad733-B35" ref-type="bibr">Palakkan and Davies 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>)]. Of the 22 tools identified, parsers in 15 of these function in data extraction, 16 in data tidying and 11 in metadata joining, though capabilities in each area vary. For instance, the data extraction capabilities of many of these tools are limited to only using the simplest data types (i.e. not timecourse data), by only one data format (e.g. can only extract data from column formatted files), or where only 1 reading has been taken during an experiment. Most of these tools are analysis packages that contain the occasional parsing function, but a few tools were written specifically as parsing software: AUDIT, plater, PLATEO and XDC (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>). For instance, the widely used plater package was developed specifically to automate the joining of data and metadata (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>). However, plater (i) requires metadata input to be provided in 8 by 12 matrix format, which can be impractical when a large number of metadata variables need to be recorded, and (ii) assumes that the data itself is already in tidy format. Most include parsers for only one or two instruments, while bletl, FLAPJACK, flopr, AUDIT, PLATEO and QurvE include parsers for (certain export formats from) 3, 3, 3, 4, 6 and 8 instruments, respectively (<xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>). While gcplyr can handle data extraction from row-, column- and matrix-formats, it is built for microbial growth curve data, and does not consider other data types (<xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>).</p>
    <p>Thus, none of the above tools tackle the generic problem of data extraction from diverse raw data structures, nor are they implemented as interactive parsing applications. As a result, prospective users of plate reader analysis software are likely to have to write one, or perhaps several, parser functions before being able to begin their analyses. This requirement for function writing poses a hurdle that impedes the take-up of software packages for data analysis, particularly for users who are less confident in their coding abilities.</p>
    <p>To confront this problem, we have developed Parsley (<xref rid="btad733-B13" ref-type="bibr">Csibra 2023a</xref>, <xref rid="btad733-B14" ref-type="bibr">b</xref>), a web-based, universal plate reader data parsing application written in R/Shiny (<xref rid="btad733-B3" ref-type="bibr">Chang <italic toggle="yes">et al.</italic> 2022</xref>), that aims to enable users to parse raw plate reader data from any plate reader in under 5 min. As Parsley enables users to parse data without having to write any code, it is anticipated that it will reduce barriers to the use of the wide array of excellent data analysis software that is actively being developed by the research community.</p>
  </sec>
  <sec>
    <title>2 Results</title>
    <sec>
      <title>2.1 Parsley overview</title>
      <p>There are three main steps to parsing plate reader data with Parsley (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). First, an experimental Raw Data file needs to be uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Second, an accompanying Metadata file containing all the variables required for downstream analysis needs to be created and uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Parsley accepts files in a range of formats (CSV, CSV2, TSV, .txt and Excel). Third, users need to proceed through a guided series of Data Specification steps, that informs the app about key properties of the data in the Raw Data file (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref> and <xref rid="btad733-F1" ref-type="fig">C</xref>). The user interface (UI) is organized with the Raw Data and Metadata upload modules at the top, and the Data Specifications options in a left-hand sidebar. To avoid overloading users with data entry fields, the UI is configured to gradually reveal options as the user interacts with the software.</p>
      <fig position="float" id="btad733-F1">
        <label>Figure 1.</label>
        <caption>
          <p>The Parsley workflow. Screenshots of the Parsley app UI at three stages. (A) Raw Data and Metadata upload sections. (B) Data Specifications step 3: selection of first and last cells for the first reading using the interactive DataTables table. (C) The final Data Specifications step 7, in which the data, having been extracted in previous steps, is tidied and joined to the provided metadata, and can be downloaded as a CSV. The built parser function can then also be saved for reuse at a later date.</p>
        </caption>
        <graphic xlink:href="btad733f1" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>2.2 A framework for a general data parsing application</title>
      <p>While raw data from plate readers is exported in a wide range of formats, there are some conventions to data export formats that can be used as starting points for a general parser. For example, the most common multiwell plate is the 96-well plate, in which rows are numbered ‘A’ to ‘H’, columns ‘1’ to ’12’, and wells ‘A1’ to ‘H12’. Most export functions will present this data in one of three formats: horizontal (readings in rows, wells in columns), vertical (readings in columns, wells in rows), or matrix format (presented as a grid that visually mimics a multiwell plate), where a reading refers to a measurement (such as OD600, or green fluorescence). For horizontal and vertical data, well order is typically ‘A1’, ‘A2’, ‘A3’, etc. For matrix data, the entire plate is typically represented as an 8 by 12 grid. For horizontal/vertical data, consecutive rows/columns are typically used for each respective measurement reading. Therefore, some assumptions can be made about data structures and built into a general parser. The rare exceptions can then be handled by adapting the default framework.</p>
    </sec>
    <sec>
      <title>2.3 The DT package enables data extraction parameters to be specified interactively in Shiny</title>
      <p>Unlike a standard parser function, which may identify the location of data within a raw data file programmatically by instrument-specific context clues, Parsley identifies the location of data entirely from positional information. This is because Parsley makes few assumptions about the raw data structure and does not aim to provide automation capabilities. However, Parsley is intended to be generic to a wide range of formats. Positional information is also an easy and intuitive type of input to ask users to provide. To implement this, the app uses DataTables from the DT package (<xref rid="btad733-B48" ref-type="bibr">Xie <italic toggle="yes">et al.</italic> 2023</xref>) to display the Raw Data file. DT renders an interactive HTML widget that displays the Raw Data dataframe, allows for cells in the table to be interactively selected (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref>), and makes the indices of the selected cells available to the Shiny server. These can then be used to extract the data from the original Raw Data file.</p>
    </sec>
    <sec>
      <title>2.4 Metadata joining</title>
      <p>Once the data is extracted from the raw data file, it is tidied and joined to user-specified metadata. There are few requirements for the metadata file, except that it needs to contain a variable called ‘well’, as this is the column that is used for joining the data and metadata together. All other columns are optional and will depend on downstream requirements. The parse function in Parsley builds a tidy dataframe consisting of the metadata on the left and the tidied data on the right, which can be downloaded as a CSV file and used in downstream analyses (<xref rid="btad733-F1" ref-type="fig">Fig. 1C</xref>).</p>
    </sec>
    <sec>
      <title>2.5 Guided parsing ensures step-by-step validation and minimizes parsing errors</title>
      <p>Parsley is built to guide users through a predefined series of steps to specify the type and format of the data, the location of the data, and the number and name of readings and/or timepoints (for timecourse data) and/or wavelengths (for spectra). A number of checks are included in both the UI (for the user to validate) and the server (for the program to validate). For instance, each Data Specification step involves a user entered action (a dropdown selection, a text entry or a cell selection on the raw data) followed by a submission with a button labelled ‘Set’. Invalid entries are flagged by an error message that informs the user about the detected data entry problem. Similarly, a Data Specifications tab collects all the user inputs, which can be checked to verify that the program is using the values that the user intends Parsley to be using. Most errors should be caught with a combination of these methods. A complete guide to the use of the app is available in the ‘Guide’ tab in the main header, with a ‘Demos’ tab containing screen recording solutions for all three data types, as well as a ‘Help’ tab to troubleshoot common issues and provide definitions for the error messages.</p>
    </sec>
    <sec>
      <title>2.6 Using Parsley to build and save parser functions</title>
      <p>In completing the above steps, users not only parse a Raw Data file, but also effectively ‘build’ their own parser functions. To speed up the parsing of similar data files, Parsley allows users to save completed parser functions as .RDS (R data) files (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). A dedicated ‘Use Saved Parser’ tab then allows users to load previously saved parser functions at a later date, to parse further files, without requiring users to go through the Data Specification steps again. and simply requires the upload of a Parser, Raw Data and Metadata files, and clicking ‘Run Parser’.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Conclusion</title>
    <p>Parsley tackles an as-yet-unaddressed problem in the multiwell plate data analytics pipeline, namely the question of whether it is possible to write generic data parsing software that operates on raw data exported from any plate reader instrument. Compared to other parsing tools, Parsley is designed with as few assumptions as possible about the raw data and maximum flexibility to deal with unusual data types. These options allowed us to verify that Parsley can extract data successfully from at least 53 export formats from over 10 different instruments (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2</xref>). It is implemented as an interactive web-based Shiny app, which is key to its universal functionality as well as its accessibility to noncoders. We hope it will become a useful tool for the community and will facilitate and streamline the use of downstream plate data analysis software.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad733_Supplementary_Data</label>
      <media xlink:href="btad733_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the Royal Academy of Engineering [RAEng CiET 1819\5].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>No new data were generated or analysed in support of this research.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad733-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group> gcplyr: an R package for microbial growth curve data analysis. bioRxiv, <pub-id pub-id-type="doi">10.1101/2023.04.30.538883</pub-id>, <year>2023a</year>, preprint: not peer reviewed.</mixed-citation>
    </ref>
    <ref id="btad733-B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group><source>mikeblazanin/gcplyr</source>. R, GitHub, <year>2023b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Chang</surname><given-names>W</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Allaire</surname><given-names>JJ</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">shiny: Web Application Framework for R</italic>. CRAN. <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><article-title>Sparse-growth-curve: a computational pipeline for parsing cellular growth curves with low temporal resolution</article-title>. <source>Microbiol Resour Announc</source><year>2021</year>;<volume>10</volume>:<fpage>e00296-21</fpage>. <pub-id pub-id-type="doi">10.1128/MRA.00296-21</pub-id>.<pub-id pub-id-type="pmid">33986091</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B5">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><source>thrash-lab/sparse-growth-curve</source>. <publisher-name>Jupyter Notebook, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/audit</source>. <publisher-name>GitHub</publisher-name>, <year>2019a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B7">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readbioscreen</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B8">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readcg12</source>. <publisher-name>JavaScript, GitHub</publisher-name>, <year>2019c</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B9">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readgp1</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019d</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B10">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readyg</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019e</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ</given-names></string-name>, <string-name><surname>Giaever</surname><given-names>G</given-names></string-name>, <string-name><surname>Nislow</surname><given-names>C.</given-names></string-name></person-group><article-title>Interactively AUDIT your growth curves with a suite of R packages</article-title>. <source>G3 (Bethesda)</source><year>2020</year>;<volume>10</volume>:<fpage>933</fpage>–<lpage>43</lpage>. <pub-id pub-id-type="doi">10.1534/g3.119.400898</pub-id>.<pub-id pub-id-type="pmid">31974098</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> FPCountR: Fluorescent protein calibration for plate readers. <italic toggle="yes">Zenodo</italic><year>2021</year>. <pub-id pub-id-type="doi">10.5281/zenodo.5760028</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B13">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group><source>ec363/parsleyapp</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B14">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> parsleyapp package v0.1.3. <italic toggle="yes">Zenodo</italic><year>2023b</year>. <pub-id pub-id-type="doi">10.5281/zenodo.8065739</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E</given-names></string-name>, <string-name><surname>Stan</surname><given-names>G-B.</given-names></string-name></person-group><article-title>Absolute protein quantification using fluorescence measurements with FPCountR</article-title>. <source>Nat Commun</source><year>2022</year>;<volume>13</volume>:<fpage>6600</fpage>. <pub-id pub-id-type="doi">10.1038/s41467-022-34232-6</pub-id>.<pub-id pub-id-type="pmid">36329019</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B16">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH.</given-names></string-name></person-group><source>ucl-cssb/flopr</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH</given-names></string-name>, <string-name><surname>Robinson</surname><given-names>CM</given-names></string-name>, <string-name><surname>Wen</surname><given-names>KY</given-names></string-name></person-group><etal>et al</etal><article-title>FlopR: an open source software package for calibration and normalization of plate reader and flow cytometry data</article-title>. <source>ACS Synth Biol</source><year>2020</year>;<volume>9</volume>:<fpage>2258</fpage>–<lpage>66</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00296</pub-id>.<pub-id pub-id-type="pmid">32854500</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B18">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fernandez</surname><given-names>L.</given-names></string-name></person-group><source>Endimion75/PRECOG</source>. <publisher-name>C#, GitHub</publisher-name>, <year>2019</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fernandez-Ricaud</surname><given-names>L</given-names></string-name>, <string-name><surname>Kourtchenko</surname><given-names>O</given-names></string-name>, <string-name><surname>Zackrisson</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>PRECOG: a tool for automated extraction and visualization of fitness components in microbial growth phenomics</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>249</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1134-2</pub-id>.<pub-id pub-id-type="pmid">27334112</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B20">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Giordano</surname><given-names>N.</given-names></string-name></person-group><source>ibis-inria/wellFARE</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Borràs-Ferrís</surname><given-names>J</given-names></string-name>, <string-name><surname>Boada</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>PLATERO: a calibration protocol for plate reader green fluorescence measurements</article-title>. <source>Front Bioeng Biotechnol</source><year>2023</year>;<volume>11</volume>:<fpage>1104445</fpage>.<pub-id pub-id-type="pmid">36741754</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B22">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Vignoni</surname><given-names>A.</given-names></string-name></person-group><source>sb2cl/PLATERO</source>. <publisher-name>MATLAB, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><article-title>plater: read, tidy, and display data from microtiter plates</article-title>. <source>J Open Source Softw</source><year>2016</year>;<volume>1</volume>:<fpage>106</fpage>. <pub-id pub-id-type="doi">10.21105/joss.00106</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B24">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><source>plater: Read, Tidy, and Display Data from Microtiter Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B25">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S.</given-names></string-name></person-group><source>Bahler-Lab/pyphe</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S</given-names></string-name>, <string-name><surname>Rodríguez-López</surname><given-names>M</given-names></string-name>, <string-name><surname>Cotobal</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Pyphe, a python toolbox for assessing microbial growth and cell viability in high-throughput colony screens (K. J. Verstrepen, A. M. Walczak, K. J. Verstrepen, &amp; J. Warringer, eds)</article-title>. <source>Elife</source><year>2020</year>;<volume>9</volume>:<fpage>e55160</fpage>. <pub-id pub-id-type="doi">10.7554/eLife.55160</pub-id>.<pub-id pub-id-type="pmid">32543370</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B27">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Mante</surname><given-names>J.</given-names></string-name></person-group><source>SynBioDex/Xperimental-Data-Connector</source>. <publisher-name>GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Martin</surname><given-names>Y</given-names></string-name>, <string-name><surname>Page</surname><given-names>M</given-names></string-name>, <string-name><surname>Blanchet</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>WellInverter: a web application for the analysis of fluorescent reporter gene data</article-title>. <source>BMC Bioinformatics</source><year>2019</year>;<volume>20</volume>:<fpage>309</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-019-2920-4</pub-id>.<pub-id pub-id-type="pmid">31185910</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B29">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>F.</given-names></string-name></person-group><source>firasmidani/AMiGA</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>FS</given-names></string-name>, <string-name><surname>Collins</surname><given-names>J</given-names></string-name>, <string-name><surname>Britton</surname><given-names>RA.</given-names></string-name></person-group><article-title>AMiGA: software for automated analysis of microbial growth assays</article-title>. <source>mSystems</source><year>2021</year>;<volume>6</volume>:<fpage>e00508-21</fpage>. <pub-id pub-id-type="doi">10.1128/mSystems.00508-21</pub-id>.<pub-id pub-id-type="pmid">34254821</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Montaño-Gutierrez</surname><given-names>LF</given-names></string-name>, <string-name><surname>Moreno</surname><given-names>NM</given-names></string-name>, <string-name><surname>Farquhar</surname><given-names>I</given-names></string-name></person-group><etal>et al</etal><article-title>Analysing and meta-analysing time-series data of microbial growth and gene expression from plate readers</article-title>. <source>PLoS Comput Biol</source><year>2022</year>;<volume>18</volume>:<fpage>e1010138</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1010138</pub-id>.<pub-id pub-id-type="pmid">35617352</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B32">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M.</given-names></string-name></person-group><source>JuBiotech/bletl</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M</given-names></string-name>, <string-name><surname>Tenhaef</surname><given-names>N</given-names></string-name>, <string-name><surname>Zyla</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>bletl ‐ a Python package for integrating BioLector microcultivation devices in the design‐build‐test‐learn cycle</article-title>. <source>Eng Life Sci</source><year>2022</year>;<volume>22</volume>:<fpage>242</fpage>–<lpage>59</lpage>. <pub-id pub-id-type="doi">10.1002/elsc.202100108</pub-id>.<pub-id pub-id-type="pmid">35382539</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A.</given-names></string-name></person-group><article-title>Bioassays: a new package in R for analyzing cellular assays</article-title>. <source>JOSS</source><year>2020</year>;<volume>5</volume>:<fpage>2402</fpage>. <pub-id pub-id-type="doi">10.21105/joss.02402</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B35">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A</given-names></string-name>, <string-name><surname>Davies</surname><given-names>J.</given-names></string-name></person-group><source>Bioassays: Summarising Multi Well Plate Cellular Assay</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Samineni</surname><given-names>SP</given-names></string-name>, <string-name><surname>Vidal</surname><given-names>G</given-names></string-name>, <string-name><surname>Vidal-Céspedes</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Experimental data connector (XDC): integrating the capture of experimental data and metadata using standard formats and digital repositories</article-title>. <source>ACS Synth Biol</source><year>2023</year>;<volume>12</volume>:<fpage>1364</fpage>–<lpage>70</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.2c00669</pub-id>.<pub-id pub-id-type="pmid">36995948</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B37">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Shterev</surname><given-names>ID</given-names></string-name>, <string-name><surname>Chan</surname><given-names>C</given-names></string-name>, <string-name><surname>Sempowski</surname><given-names>GD.</given-names></string-name></person-group><source>highSCREEN: High-Throughput Screening for Plate Based Essays</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>Felker</surname><given-names>DP</given-names></string-name>, <string-name><surname>Heath</surname><given-names>OC</given-names></string-name></person-group><etal>et al</etal><article-title>SPOCK, an R based package for high-throughput analysis of growth rate, survival, and chronological lifespan in yeast</article-title>. <source>Transl Med Aging</source><year>2020</year>;<volume>4</volume>:<fpage>141</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.1016/j.tma.2020.08.003</pub-id>.<pub-id pub-id-type="pmid">33542965</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B39">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>McCormick</surname><given-names>MA.</given-names></string-name></person-group><source>labmccormick/SPOCK</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Spidlen</surname><given-names>J</given-names></string-name>, <string-name><surname>Moore</surname><given-names>W</given-names></string-name>, <string-name><surname>Parks</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal>; <collab>ISAC Data Standards Task Force</collab>. <article-title>Data file standard for flow cytometry, version FCS 3</article-title>. <source>Cytometry A</source><year>2021</year>;<volume>99</volume>:<fpage>100</fpage>–<lpage>2</lpage>. <pub-id pub-id-type="doi">10.1002/cyto.a.24225</pub-id>.<pub-id pub-id-type="pmid">32881398</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B41">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K.</given-names></string-name></person-group><source>growthcurver: Simple Metrics to Summarize Growth Curves</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K</given-names></string-name>, <string-name><surname>Wagner</surname><given-names>A.</given-names></string-name></person-group><article-title>Growthcurver: an R package for obtaining interpretable metrics from microbial growth curves</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>172</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1016-7</pub-id>.<pub-id pub-id-type="pmid">27094401</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B43">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Swain</surname><given-names>PS.</given-names></string-name></person-group><source>omniplate: A Package for Processing and Analysing Data from Plate Readers</source>. <publisher-name>GitLab</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B44">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Vegh</surname><given-names>P.</given-names></string-name></person-group><source>Edinburgh-Genome-Foundry/Plateo</source>. <publisher-name>GitHub</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B45">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Warchal</surname><given-names>S.</given-names></string-name></person-group><source>platetools: Tools and Plots for Multi-Well Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wickham</surname><given-names>H.</given-names></string-name></person-group><article-title>Tidy data</article-title>. <source>J Stat Soft</source><year>2014</year>;<volume>59</volume>:<fpage>1</fpage>–<lpage>23</lpage>. <pub-id pub-id-type="doi">10.18637/jss.v059.i10</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B47">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Wirth</surname><given-names>N.</given-names></string-name></person-group><source>NicWir/QurvE</source>. <publisher-name>R, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B48">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Xie</surname><given-names>Y</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Tan</surname><given-names>X</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">DT: A Wrapper of the JavaScript Library “DataTables”</italic>. CRAN, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yáñez Feliú</surname><given-names>G</given-names></string-name>, <string-name><surname>Earle Gómez</surname><given-names>B</given-names></string-name>, <string-name><surname>Codoceo Berrocal</surname><given-names>V</given-names></string-name></person-group><etal>et al</etal><article-title>Flapjack: data management and analysis for genetic circuit characterization</article-title>. <source>ACS Synth Biol</source><year>2021</year>;<volume>10</volume>:<fpage>183</fpage>–<lpage>91</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00554</pub-id>.<pub-id pub-id-type="pmid">33382586</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10715767</article-id>
    <article-id pub-id-type="pmid">38048610</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad733</article-id>
    <article-id pub-id-type="publisher-id">btad733</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Gene Expression</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Parsley: a web app for parsing data from plate readers</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-4759-5921</contrib-id>
        <name>
          <surname>Csibra</surname>
          <given-names>Eszter</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--e.csibra@imperial.ac.uk-->
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Stan</surname>
          <given-names>Guy-Bart</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--g.stan@imperial.ac.uk-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Nikolski</surname>
          <given-names>Macha</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad733-cor1">Corresponding authors. Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London,  Exhibition Road, London SW7 2AY, United Kingdom. E-mails: <email>e.csibra@imperial.ac.uk</email> (E.C.) and <email>g.stan@imperial.ac.uk</email> (G.-B.S.) </corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-04">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad733</elocation-id>
    <history>
      <date date-type="received">
        <day>18</day>
        <month>7</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>16</day>
        <month>10</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>09</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>01</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad733.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>As demand for the automation of biological assays has increased over recent years, the range of measurement types implemented by multiwell plate readers has broadened and the list of published software packages that caters to their analysis has grown. However, most plate readers export data in esoteric formats with little or no metadata, while most analytical software packages are built to work with tidy data accompanied by associated metadata. ‘Parser’ functions are therefore required to prepare raw data for analysis. Such functions are instrument- and data type-specific, and to date, no generic tool exists that can parse data from multiple data types or multiple plate readers, despite the potential for such a tool to speed up access to analysed data and remove an important barrier for less confident coders. We have developed the interactive web application, Parsley, to bridge this gap. Unlike conventional programmatic parser functions, Parsley makes few assumptions about exported data, instead employing user inputs to identify and extract data from data files. In doing so, it is designed to enable any user to parse plate reader data and can handle a wide variety of instruments (10+) and data types (53+). Parsley is freely available via a web interface, enabling access to its unique plate reader data parsing functionality, without the need to install software or write code.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>The Parsley web application can be accessed at: <ext-link xlink:href="https://gbstan.shinyapps.io/parsleyapp/" ext-link-type="uri">https://gbstan.shinyapps.io/parsleyapp/</ext-link>. The source code is available at: <ext-link xlink:href="https://github.com/ec363/parsleyapp" ext-link-type="uri">https://github.com/ec363/parsleyapp</ext-link> and is archived on Zenodo: <ext-link xlink:href="https://zenodo.org/records/10011752" ext-link-type="uri">https://zenodo.org/records/10011752</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Royal Academy of Engineering</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000287</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="5"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Most modern plate readers are capable of carrying out absorbance, fluorescence and luminescence readings using multiwell plates ranging from 6- to 384-well plates (with 96-well plates being the most common). Many come with additional features to enable spectrum scanning, timecourse measurements, as well as the ability to control temperature, tune wavelengths or implement reagent injection. As a result of this versatility, a diverse range of phenotypes may be assayed in these instruments in high-throughput, making plate readers essential tools for the average molecular or cell biology laboratory.</p>
    <p>A growing number of analytical packages have been developed in recent years to automate the analysis of plate reader data. A list of currently available packages is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B42" ref-type="bibr">Sprouffske and Wagner 2016</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B26" ref-type="bibr">Kamrad <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B38" ref-type="bibr">Small <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B41" ref-type="bibr">Sprouffske 2020</xref>, <xref rid="btad733-B4" ref-type="bibr">Cheng and Thrash 2021</xref>, <xref rid="btad733-B5" ref-type="bibr">2023</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B25" ref-type="bibr">Kamrad 2021</xref>, <xref rid="btad733-B30" ref-type="bibr">Midani <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B45" ref-type="bibr">Warchal 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B39" ref-type="bibr">Small and McCormick 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>). These tools fall broadly into three categories: those that tackle the analysis of microbial growth curves, those that quantify fluorescent protein expression, and those that evaluate phenotype (or drug) screening assays. Regardless of type, all analysis workflows must begin with the importing and cleaning of raw data. Raw data files produced by plate readers tend to be exported in Microsoft Excel format, but they suffer from a lack of data standardization [unlike e.g. standardized FCS file formats exported by flow cytometers (<xref rid="btad733-B40" ref-type="bibr">Spidlen <italic toggle="yes">et al.</italic> 2021</xref>)]. This means that the exact location of the data within the file, the orientation and arrangement of the data, and the presence and location of metadata all depend on the commercial software sold with the instrument. However, analytical functions rely on data (i) in so-called ‘tidy’ format [where every column is a variable, every row is an observation, and every cell contains a single value (<xref rid="btad733-B46" ref-type="bibr">Wickham 2014</xref>)] and (ii) which includes all the necessary metadata for the downstream analysis. The conversion of raw data into a format appropriate for programmatic analysis—the combination of data extraction, data tidying and metadata joining known as data ‘parsing’—is therefore an essential primary requirement for the analysis of plate reader data.</p>
    <p>As shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>, some tools expect raw plate reader data as inputs. As raw data export formats differ between instruments, these packages restrict their user base to only those who own identical plate readers (or those who are willing to edit package functions). In contrast, packages that require tidy data inputs for their analytical functions, enable the modularization of their workflow by separating the data parsing from the data analysis. Parser functions can then be supplied as needed by either the package authors or external sources without affecting the downstream analysis.</p>
    <p>Data parsing functions can be found in a variety of packages [<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B7" ref-type="bibr">b</xref>, <xref rid="btad733-B8" ref-type="bibr">c</xref>, <xref rid="btad733-B9" ref-type="bibr">d</xref>, <xref rid="btad733-B10" ref-type="bibr">e</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B34" ref-type="bibr">Palakkan 2020</xref>, <xref rid="btad733-B35" ref-type="bibr">Palakkan and Davies 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>)]. Of the 22 tools identified, parsers in 15 of these function in data extraction, 16 in data tidying and 11 in metadata joining, though capabilities in each area vary. For instance, the data extraction capabilities of many of these tools are limited to only using the simplest data types (i.e. not timecourse data), by only one data format (e.g. can only extract data from column formatted files), or where only 1 reading has been taken during an experiment. Most of these tools are analysis packages that contain the occasional parsing function, but a few tools were written specifically as parsing software: AUDIT, plater, PLATEO and XDC (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>). For instance, the widely used plater package was developed specifically to automate the joining of data and metadata (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>). However, plater (i) requires metadata input to be provided in 8 by 12 matrix format, which can be impractical when a large number of metadata variables need to be recorded, and (ii) assumes that the data itself is already in tidy format. Most include parsers for only one or two instruments, while bletl, FLAPJACK, flopr, AUDIT, PLATEO and QurvE include parsers for (certain export formats from) 3, 3, 3, 4, 6 and 8 instruments, respectively (<xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>). While gcplyr can handle data extraction from row-, column- and matrix-formats, it is built for microbial growth curve data, and does not consider other data types (<xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>).</p>
    <p>Thus, none of the above tools tackle the generic problem of data extraction from diverse raw data structures, nor are they implemented as interactive parsing applications. As a result, prospective users of plate reader analysis software are likely to have to write one, or perhaps several, parser functions before being able to begin their analyses. This requirement for function writing poses a hurdle that impedes the take-up of software packages for data analysis, particularly for users who are less confident in their coding abilities.</p>
    <p>To confront this problem, we have developed Parsley (<xref rid="btad733-B13" ref-type="bibr">Csibra 2023a</xref>, <xref rid="btad733-B14" ref-type="bibr">b</xref>), a web-based, universal plate reader data parsing application written in R/Shiny (<xref rid="btad733-B3" ref-type="bibr">Chang <italic toggle="yes">et al.</italic> 2022</xref>), that aims to enable users to parse raw plate reader data from any plate reader in under 5 min. As Parsley enables users to parse data without having to write any code, it is anticipated that it will reduce barriers to the use of the wide array of excellent data analysis software that is actively being developed by the research community.</p>
  </sec>
  <sec>
    <title>2 Results</title>
    <sec>
      <title>2.1 Parsley overview</title>
      <p>There are three main steps to parsing plate reader data with Parsley (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). First, an experimental Raw Data file needs to be uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Second, an accompanying Metadata file containing all the variables required for downstream analysis needs to be created and uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Parsley accepts files in a range of formats (CSV, CSV2, TSV, .txt and Excel). Third, users need to proceed through a guided series of Data Specification steps, that informs the app about key properties of the data in the Raw Data file (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref> and <xref rid="btad733-F1" ref-type="fig">C</xref>). The user interface (UI) is organized with the Raw Data and Metadata upload modules at the top, and the Data Specifications options in a left-hand sidebar. To avoid overloading users with data entry fields, the UI is configured to gradually reveal options as the user interacts with the software.</p>
      <fig position="float" id="btad733-F1">
        <label>Figure 1.</label>
        <caption>
          <p>The Parsley workflow. Screenshots of the Parsley app UI at three stages. (A) Raw Data and Metadata upload sections. (B) Data Specifications step 3: selection of first and last cells for the first reading using the interactive DataTables table. (C) The final Data Specifications step 7, in which the data, having been extracted in previous steps, is tidied and joined to the provided metadata, and can be downloaded as a CSV. The built parser function can then also be saved for reuse at a later date.</p>
        </caption>
        <graphic xlink:href="btad733f1" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>2.2 A framework for a general data parsing application</title>
      <p>While raw data from plate readers is exported in a wide range of formats, there are some conventions to data export formats that can be used as starting points for a general parser. For example, the most common multiwell plate is the 96-well plate, in which rows are numbered ‘A’ to ‘H’, columns ‘1’ to ’12’, and wells ‘A1’ to ‘H12’. Most export functions will present this data in one of three formats: horizontal (readings in rows, wells in columns), vertical (readings in columns, wells in rows), or matrix format (presented as a grid that visually mimics a multiwell plate), where a reading refers to a measurement (such as OD600, or green fluorescence). For horizontal and vertical data, well order is typically ‘A1’, ‘A2’, ‘A3’, etc. For matrix data, the entire plate is typically represented as an 8 by 12 grid. For horizontal/vertical data, consecutive rows/columns are typically used for each respective measurement reading. Therefore, some assumptions can be made about data structures and built into a general parser. The rare exceptions can then be handled by adapting the default framework.</p>
    </sec>
    <sec>
      <title>2.3 The DT package enables data extraction parameters to be specified interactively in Shiny</title>
      <p>Unlike a standard parser function, which may identify the location of data within a raw data file programmatically by instrument-specific context clues, Parsley identifies the location of data entirely from positional information. This is because Parsley makes few assumptions about the raw data structure and does not aim to provide automation capabilities. However, Parsley is intended to be generic to a wide range of formats. Positional information is also an easy and intuitive type of input to ask users to provide. To implement this, the app uses DataTables from the DT package (<xref rid="btad733-B48" ref-type="bibr">Xie <italic toggle="yes">et al.</italic> 2023</xref>) to display the Raw Data file. DT renders an interactive HTML widget that displays the Raw Data dataframe, allows for cells in the table to be interactively selected (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref>), and makes the indices of the selected cells available to the Shiny server. These can then be used to extract the data from the original Raw Data file.</p>
    </sec>
    <sec>
      <title>2.4 Metadata joining</title>
      <p>Once the data is extracted from the raw data file, it is tidied and joined to user-specified metadata. There are few requirements for the metadata file, except that it needs to contain a variable called ‘well’, as this is the column that is used for joining the data and metadata together. All other columns are optional and will depend on downstream requirements. The parse function in Parsley builds a tidy dataframe consisting of the metadata on the left and the tidied data on the right, which can be downloaded as a CSV file and used in downstream analyses (<xref rid="btad733-F1" ref-type="fig">Fig. 1C</xref>).</p>
    </sec>
    <sec>
      <title>2.5 Guided parsing ensures step-by-step validation and minimizes parsing errors</title>
      <p>Parsley is built to guide users through a predefined series of steps to specify the type and format of the data, the location of the data, and the number and name of readings and/or timepoints (for timecourse data) and/or wavelengths (for spectra). A number of checks are included in both the UI (for the user to validate) and the server (for the program to validate). For instance, each Data Specification step involves a user entered action (a dropdown selection, a text entry or a cell selection on the raw data) followed by a submission with a button labelled ‘Set’. Invalid entries are flagged by an error message that informs the user about the detected data entry problem. Similarly, a Data Specifications tab collects all the user inputs, which can be checked to verify that the program is using the values that the user intends Parsley to be using. Most errors should be caught with a combination of these methods. A complete guide to the use of the app is available in the ‘Guide’ tab in the main header, with a ‘Demos’ tab containing screen recording solutions for all three data types, as well as a ‘Help’ tab to troubleshoot common issues and provide definitions for the error messages.</p>
    </sec>
    <sec>
      <title>2.6 Using Parsley to build and save parser functions</title>
      <p>In completing the above steps, users not only parse a Raw Data file, but also effectively ‘build’ their own parser functions. To speed up the parsing of similar data files, Parsley allows users to save completed parser functions as .RDS (R data) files (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). A dedicated ‘Use Saved Parser’ tab then allows users to load previously saved parser functions at a later date, to parse further files, without requiring users to go through the Data Specification steps again. and simply requires the upload of a Parser, Raw Data and Metadata files, and clicking ‘Run Parser’.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Conclusion</title>
    <p>Parsley tackles an as-yet-unaddressed problem in the multiwell plate data analytics pipeline, namely the question of whether it is possible to write generic data parsing software that operates on raw data exported from any plate reader instrument. Compared to other parsing tools, Parsley is designed with as few assumptions as possible about the raw data and maximum flexibility to deal with unusual data types. These options allowed us to verify that Parsley can extract data successfully from at least 53 export formats from over 10 different instruments (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2</xref>). It is implemented as an interactive web-based Shiny app, which is key to its universal functionality as well as its accessibility to noncoders. We hope it will become a useful tool for the community and will facilitate and streamline the use of downstream plate data analysis software.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad733_Supplementary_Data</label>
      <media xlink:href="btad733_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the Royal Academy of Engineering [RAEng CiET 1819\5].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>No new data were generated or analysed in support of this research.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad733-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group> gcplyr: an R package for microbial growth curve data analysis. bioRxiv, <pub-id pub-id-type="doi">10.1101/2023.04.30.538883</pub-id>, <year>2023a</year>, preprint: not peer reviewed.</mixed-citation>
    </ref>
    <ref id="btad733-B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group><source>mikeblazanin/gcplyr</source>. R, GitHub, <year>2023b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Chang</surname><given-names>W</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Allaire</surname><given-names>JJ</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">shiny: Web Application Framework for R</italic>. CRAN. <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><article-title>Sparse-growth-curve: a computational pipeline for parsing cellular growth curves with low temporal resolution</article-title>. <source>Microbiol Resour Announc</source><year>2021</year>;<volume>10</volume>:<fpage>e00296-21</fpage>. <pub-id pub-id-type="doi">10.1128/MRA.00296-21</pub-id>.<pub-id pub-id-type="pmid">33986091</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B5">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><source>thrash-lab/sparse-growth-curve</source>. <publisher-name>Jupyter Notebook, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/audit</source>. <publisher-name>GitHub</publisher-name>, <year>2019a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B7">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readbioscreen</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B8">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readcg12</source>. <publisher-name>JavaScript, GitHub</publisher-name>, <year>2019c</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B9">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readgp1</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019d</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B10">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readyg</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019e</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ</given-names></string-name>, <string-name><surname>Giaever</surname><given-names>G</given-names></string-name>, <string-name><surname>Nislow</surname><given-names>C.</given-names></string-name></person-group><article-title>Interactively AUDIT your growth curves with a suite of R packages</article-title>. <source>G3 (Bethesda)</source><year>2020</year>;<volume>10</volume>:<fpage>933</fpage>–<lpage>43</lpage>. <pub-id pub-id-type="doi">10.1534/g3.119.400898</pub-id>.<pub-id pub-id-type="pmid">31974098</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> FPCountR: Fluorescent protein calibration for plate readers. <italic toggle="yes">Zenodo</italic><year>2021</year>. <pub-id pub-id-type="doi">10.5281/zenodo.5760028</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B13">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group><source>ec363/parsleyapp</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B14">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> parsleyapp package v0.1.3. <italic toggle="yes">Zenodo</italic><year>2023b</year>. <pub-id pub-id-type="doi">10.5281/zenodo.8065739</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E</given-names></string-name>, <string-name><surname>Stan</surname><given-names>G-B.</given-names></string-name></person-group><article-title>Absolute protein quantification using fluorescence measurements with FPCountR</article-title>. <source>Nat Commun</source><year>2022</year>;<volume>13</volume>:<fpage>6600</fpage>. <pub-id pub-id-type="doi">10.1038/s41467-022-34232-6</pub-id>.<pub-id pub-id-type="pmid">36329019</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B16">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH.</given-names></string-name></person-group><source>ucl-cssb/flopr</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH</given-names></string-name>, <string-name><surname>Robinson</surname><given-names>CM</given-names></string-name>, <string-name><surname>Wen</surname><given-names>KY</given-names></string-name></person-group><etal>et al</etal><article-title>FlopR: an open source software package for calibration and normalization of plate reader and flow cytometry data</article-title>. <source>ACS Synth Biol</source><year>2020</year>;<volume>9</volume>:<fpage>2258</fpage>–<lpage>66</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00296</pub-id>.<pub-id pub-id-type="pmid">32854500</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B18">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fernandez</surname><given-names>L.</given-names></string-name></person-group><source>Endimion75/PRECOG</source>. <publisher-name>C#, GitHub</publisher-name>, <year>2019</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fernandez-Ricaud</surname><given-names>L</given-names></string-name>, <string-name><surname>Kourtchenko</surname><given-names>O</given-names></string-name>, <string-name><surname>Zackrisson</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>PRECOG: a tool for automated extraction and visualization of fitness components in microbial growth phenomics</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>249</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1134-2</pub-id>.<pub-id pub-id-type="pmid">27334112</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B20">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Giordano</surname><given-names>N.</given-names></string-name></person-group><source>ibis-inria/wellFARE</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Borràs-Ferrís</surname><given-names>J</given-names></string-name>, <string-name><surname>Boada</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>PLATERO: a calibration protocol for plate reader green fluorescence measurements</article-title>. <source>Front Bioeng Biotechnol</source><year>2023</year>;<volume>11</volume>:<fpage>1104445</fpage>.<pub-id pub-id-type="pmid">36741754</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B22">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Vignoni</surname><given-names>A.</given-names></string-name></person-group><source>sb2cl/PLATERO</source>. <publisher-name>MATLAB, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><article-title>plater: read, tidy, and display data from microtiter plates</article-title>. <source>J Open Source Softw</source><year>2016</year>;<volume>1</volume>:<fpage>106</fpage>. <pub-id pub-id-type="doi">10.21105/joss.00106</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B24">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><source>plater: Read, Tidy, and Display Data from Microtiter Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B25">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S.</given-names></string-name></person-group><source>Bahler-Lab/pyphe</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S</given-names></string-name>, <string-name><surname>Rodríguez-López</surname><given-names>M</given-names></string-name>, <string-name><surname>Cotobal</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Pyphe, a python toolbox for assessing microbial growth and cell viability in high-throughput colony screens (K. J. Verstrepen, A. M. Walczak, K. J. Verstrepen, &amp; J. Warringer, eds)</article-title>. <source>Elife</source><year>2020</year>;<volume>9</volume>:<fpage>e55160</fpage>. <pub-id pub-id-type="doi">10.7554/eLife.55160</pub-id>.<pub-id pub-id-type="pmid">32543370</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B27">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Mante</surname><given-names>J.</given-names></string-name></person-group><source>SynBioDex/Xperimental-Data-Connector</source>. <publisher-name>GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Martin</surname><given-names>Y</given-names></string-name>, <string-name><surname>Page</surname><given-names>M</given-names></string-name>, <string-name><surname>Blanchet</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>WellInverter: a web application for the analysis of fluorescent reporter gene data</article-title>. <source>BMC Bioinformatics</source><year>2019</year>;<volume>20</volume>:<fpage>309</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-019-2920-4</pub-id>.<pub-id pub-id-type="pmid">31185910</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B29">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>F.</given-names></string-name></person-group><source>firasmidani/AMiGA</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>FS</given-names></string-name>, <string-name><surname>Collins</surname><given-names>J</given-names></string-name>, <string-name><surname>Britton</surname><given-names>RA.</given-names></string-name></person-group><article-title>AMiGA: software for automated analysis of microbial growth assays</article-title>. <source>mSystems</source><year>2021</year>;<volume>6</volume>:<fpage>e00508-21</fpage>. <pub-id pub-id-type="doi">10.1128/mSystems.00508-21</pub-id>.<pub-id pub-id-type="pmid">34254821</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Montaño-Gutierrez</surname><given-names>LF</given-names></string-name>, <string-name><surname>Moreno</surname><given-names>NM</given-names></string-name>, <string-name><surname>Farquhar</surname><given-names>I</given-names></string-name></person-group><etal>et al</etal><article-title>Analysing and meta-analysing time-series data of microbial growth and gene expression from plate readers</article-title>. <source>PLoS Comput Biol</source><year>2022</year>;<volume>18</volume>:<fpage>e1010138</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1010138</pub-id>.<pub-id pub-id-type="pmid">35617352</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B32">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M.</given-names></string-name></person-group><source>JuBiotech/bletl</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M</given-names></string-name>, <string-name><surname>Tenhaef</surname><given-names>N</given-names></string-name>, <string-name><surname>Zyla</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>bletl ‐ a Python package for integrating BioLector microcultivation devices in the design‐build‐test‐learn cycle</article-title>. <source>Eng Life Sci</source><year>2022</year>;<volume>22</volume>:<fpage>242</fpage>–<lpage>59</lpage>. <pub-id pub-id-type="doi">10.1002/elsc.202100108</pub-id>.<pub-id pub-id-type="pmid">35382539</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A.</given-names></string-name></person-group><article-title>Bioassays: a new package in R for analyzing cellular assays</article-title>. <source>JOSS</source><year>2020</year>;<volume>5</volume>:<fpage>2402</fpage>. <pub-id pub-id-type="doi">10.21105/joss.02402</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B35">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A</given-names></string-name>, <string-name><surname>Davies</surname><given-names>J.</given-names></string-name></person-group><source>Bioassays: Summarising Multi Well Plate Cellular Assay</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Samineni</surname><given-names>SP</given-names></string-name>, <string-name><surname>Vidal</surname><given-names>G</given-names></string-name>, <string-name><surname>Vidal-Céspedes</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Experimental data connector (XDC): integrating the capture of experimental data and metadata using standard formats and digital repositories</article-title>. <source>ACS Synth Biol</source><year>2023</year>;<volume>12</volume>:<fpage>1364</fpage>–<lpage>70</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.2c00669</pub-id>.<pub-id pub-id-type="pmid">36995948</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B37">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Shterev</surname><given-names>ID</given-names></string-name>, <string-name><surname>Chan</surname><given-names>C</given-names></string-name>, <string-name><surname>Sempowski</surname><given-names>GD.</given-names></string-name></person-group><source>highSCREEN: High-Throughput Screening for Plate Based Essays</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>Felker</surname><given-names>DP</given-names></string-name>, <string-name><surname>Heath</surname><given-names>OC</given-names></string-name></person-group><etal>et al</etal><article-title>SPOCK, an R based package for high-throughput analysis of growth rate, survival, and chronological lifespan in yeast</article-title>. <source>Transl Med Aging</source><year>2020</year>;<volume>4</volume>:<fpage>141</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.1016/j.tma.2020.08.003</pub-id>.<pub-id pub-id-type="pmid">33542965</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B39">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>McCormick</surname><given-names>MA.</given-names></string-name></person-group><source>labmccormick/SPOCK</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Spidlen</surname><given-names>J</given-names></string-name>, <string-name><surname>Moore</surname><given-names>W</given-names></string-name>, <string-name><surname>Parks</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal>; <collab>ISAC Data Standards Task Force</collab>. <article-title>Data file standard for flow cytometry, version FCS 3</article-title>. <source>Cytometry A</source><year>2021</year>;<volume>99</volume>:<fpage>100</fpage>–<lpage>2</lpage>. <pub-id pub-id-type="doi">10.1002/cyto.a.24225</pub-id>.<pub-id pub-id-type="pmid">32881398</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B41">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K.</given-names></string-name></person-group><source>growthcurver: Simple Metrics to Summarize Growth Curves</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K</given-names></string-name>, <string-name><surname>Wagner</surname><given-names>A.</given-names></string-name></person-group><article-title>Growthcurver: an R package for obtaining interpretable metrics from microbial growth curves</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>172</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1016-7</pub-id>.<pub-id pub-id-type="pmid">27094401</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B43">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Swain</surname><given-names>PS.</given-names></string-name></person-group><source>omniplate: A Package for Processing and Analysing Data from Plate Readers</source>. <publisher-name>GitLab</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B44">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Vegh</surname><given-names>P.</given-names></string-name></person-group><source>Edinburgh-Genome-Foundry/Plateo</source>. <publisher-name>GitHub</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B45">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Warchal</surname><given-names>S.</given-names></string-name></person-group><source>platetools: Tools and Plots for Multi-Well Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wickham</surname><given-names>H.</given-names></string-name></person-group><article-title>Tidy data</article-title>. <source>J Stat Soft</source><year>2014</year>;<volume>59</volume>:<fpage>1</fpage>–<lpage>23</lpage>. <pub-id pub-id-type="doi">10.18637/jss.v059.i10</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B47">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Wirth</surname><given-names>N.</given-names></string-name></person-group><source>NicWir/QurvE</source>. <publisher-name>R, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B48">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Xie</surname><given-names>Y</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Tan</surname><given-names>X</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">DT: A Wrapper of the JavaScript Library “DataTables”</italic>. CRAN, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yáñez Feliú</surname><given-names>G</given-names></string-name>, <string-name><surname>Earle Gómez</surname><given-names>B</given-names></string-name>, <string-name><surname>Codoceo Berrocal</surname><given-names>V</given-names></string-name></person-group><etal>et al</etal><article-title>Flapjack: data management and analysis for genetic circuit characterization</article-title>. <source>ACS Synth Biol</source><year>2021</year>;<volume>10</volume>:<fpage>183</fpage>–<lpage>91</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00554</pub-id>.<pub-id pub-id-type="pmid">33382586</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10715767</article-id>
    <article-id pub-id-type="pmid">38048610</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad733</article-id>
    <article-id pub-id-type="publisher-id">btad733</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Gene Expression</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Parsley: a web app for parsing data from plate readers</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-4759-5921</contrib-id>
        <name>
          <surname>Csibra</surname>
          <given-names>Eszter</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--e.csibra@imperial.ac.uk-->
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Stan</surname>
          <given-names>Guy-Bart</given-names>
        </name>
        <aff><institution>Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London</institution>, London SW7 2AY, <country country="GB">United Kingdom</country></aff>
        <xref rid="btad733-cor1" ref-type="corresp"/>
        <!--g.stan@imperial.ac.uk-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Nikolski</surname>
          <given-names>Macha</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad733-cor1">Corresponding authors. Department of Bioengineering, Imperial College Centre for Synthetic Biology (IC-CSynB), Imperial College London,  Exhibition Road, London SW7 2AY, United Kingdom. E-mails: <email>e.csibra@imperial.ac.uk</email> (E.C.) and <email>g.stan@imperial.ac.uk</email> (G.-B.S.) </corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-04">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>04</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad733</elocation-id>
    <history>
      <date date-type="received">
        <day>18</day>
        <month>7</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>16</day>
        <month>10</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>09</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>01</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad733.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>As demand for the automation of biological assays has increased over recent years, the range of measurement types implemented by multiwell plate readers has broadened and the list of published software packages that caters to their analysis has grown. However, most plate readers export data in esoteric formats with little or no metadata, while most analytical software packages are built to work with tidy data accompanied by associated metadata. ‘Parser’ functions are therefore required to prepare raw data for analysis. Such functions are instrument- and data type-specific, and to date, no generic tool exists that can parse data from multiple data types or multiple plate readers, despite the potential for such a tool to speed up access to analysed data and remove an important barrier for less confident coders. We have developed the interactive web application, Parsley, to bridge this gap. Unlike conventional programmatic parser functions, Parsley makes few assumptions about exported data, instead employing user inputs to identify and extract data from data files. In doing so, it is designed to enable any user to parse plate reader data and can handle a wide variety of instruments (10+) and data types (53+). Parsley is freely available via a web interface, enabling access to its unique plate reader data parsing functionality, without the need to install software or write code.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>The Parsley web application can be accessed at: <ext-link xlink:href="https://gbstan.shinyapps.io/parsleyapp/" ext-link-type="uri">https://gbstan.shinyapps.io/parsleyapp/</ext-link>. The source code is available at: <ext-link xlink:href="https://github.com/ec363/parsleyapp" ext-link-type="uri">https://github.com/ec363/parsleyapp</ext-link> and is archived on Zenodo: <ext-link xlink:href="https://zenodo.org/records/10011752" ext-link-type="uri">https://zenodo.org/records/10011752</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Royal Academy of Engineering</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000287</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="5"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Most modern plate readers are capable of carrying out absorbance, fluorescence and luminescence readings using multiwell plates ranging from 6- to 384-well plates (with 96-well plates being the most common). Many come with additional features to enable spectrum scanning, timecourse measurements, as well as the ability to control temperature, tune wavelengths or implement reagent injection. As a result of this versatility, a diverse range of phenotypes may be assayed in these instruments in high-throughput, making plate readers essential tools for the average molecular or cell biology laboratory.</p>
    <p>A growing number of analytical packages have been developed in recent years to automate the analysis of plate reader data. A list of currently available packages is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B42" ref-type="bibr">Sprouffske and Wagner 2016</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B26" ref-type="bibr">Kamrad <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B38" ref-type="bibr">Small <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B41" ref-type="bibr">Sprouffske 2020</xref>, <xref rid="btad733-B4" ref-type="bibr">Cheng and Thrash 2021</xref>, <xref rid="btad733-B5" ref-type="bibr">2023</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B25" ref-type="bibr">Kamrad 2021</xref>, <xref rid="btad733-B30" ref-type="bibr">Midani <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B45" ref-type="bibr">Warchal 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B39" ref-type="bibr">Small and McCormick 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>). These tools fall broadly into three categories: those that tackle the analysis of microbial growth curves, those that quantify fluorescent protein expression, and those that evaluate phenotype (or drug) screening assays. Regardless of type, all analysis workflows must begin with the importing and cleaning of raw data. Raw data files produced by plate readers tend to be exported in Microsoft Excel format, but they suffer from a lack of data standardization [unlike e.g. standardized FCS file formats exported by flow cytometers (<xref rid="btad733-B40" ref-type="bibr">Spidlen <italic toggle="yes">et al.</italic> 2021</xref>)]. This means that the exact location of the data within the file, the orientation and arrangement of the data, and the presence and location of metadata all depend on the commercial software sold with the instrument. However, analytical functions rely on data (i) in so-called ‘tidy’ format [where every column is a variable, every row is an observation, and every cell contains a single value (<xref rid="btad733-B46" ref-type="bibr">Wickham 2014</xref>)] and (ii) which includes all the necessary metadata for the downstream analysis. The conversion of raw data into a format appropriate for programmatic analysis—the combination of data extraction, data tidying and metadata joining known as data ‘parsing’—is therefore an essential primary requirement for the analysis of plate reader data.</p>
    <p>As shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>, some tools expect raw plate reader data as inputs. As raw data export formats differ between instruments, these packages restrict their user base to only those who own identical plate readers (or those who are willing to edit package functions). In contrast, packages that require tidy data inputs for their analytical functions, enable the modularization of their workflow by separating the data parsing from the data analysis. Parser functions can then be supplied as needed by either the package authors or external sources without affecting the downstream analysis.</p>
    <p>Data parsing functions can be found in a variety of packages [<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref> (<xref rid="btad733-B19" ref-type="bibr">Fernandez-Ricaud <italic toggle="yes">et al.</italic> 2016</xref>, <xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B7" ref-type="bibr">b</xref>, <xref rid="btad733-B8" ref-type="bibr">c</xref>, <xref rid="btad733-B9" ref-type="bibr">d</xref>, <xref rid="btad733-B10" ref-type="bibr">e</xref>, <xref rid="btad733-B18" ref-type="bibr">Fernandez 2019</xref>, <xref rid="btad733-B28" ref-type="bibr">Martin <italic toggle="yes">et al.</italic> 2019</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B34" ref-type="bibr">Palakkan 2020</xref>, <xref rid="btad733-B35" ref-type="bibr">Palakkan and Davies 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B12" ref-type="bibr">Csibra 2021</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B37" ref-type="bibr">Shterev <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B15" ref-type="bibr">Csibra and Stan 2022</xref>, <xref rid="btad733-B31" ref-type="bibr">Montaño-Gutierrez <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B32" ref-type="bibr">Osthege 2022</xref>, <xref rid="btad733-B33" ref-type="bibr">Osthege <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>, <xref rid="btad733-B20" ref-type="bibr">Giordano 2023</xref>, <xref rid="btad733-B22" ref-type="bibr">González-Cebrián and Vignoni 2023</xref>, <xref rid="btad733-B21" ref-type="bibr">González-Cebrián <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B29" ref-type="bibr">Midani 2023</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad733-B43" ref-type="bibr">Swain 2023</xref>)]. Of the 22 tools identified, parsers in 15 of these function in data extraction, 16 in data tidying and 11 in metadata joining, though capabilities in each area vary. For instance, the data extraction capabilities of many of these tools are limited to only using the simplest data types (i.e. not timecourse data), by only one data format (e.g. can only extract data from column formatted files), or where only 1 reading has been taken during an experiment. Most of these tools are analysis packages that contain the occasional parsing function, but a few tools were written specifically as parsing software: AUDIT, plater, PLATEO and XDC (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>, <xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B27" ref-type="bibr">Mante 2021</xref>, <xref rid="btad733-B36" ref-type="bibr">Samineni <italic toggle="yes">et al.</italic> 2023</xref>). For instance, the widely used plater package was developed specifically to automate the joining of data and metadata (<xref rid="btad733-B23" ref-type="bibr">Hughes 2016</xref>, <xref rid="btad733-B24" ref-type="bibr">2022</xref>). However, plater (i) requires metadata input to be provided in 8 by 12 matrix format, which can be impractical when a large number of metadata variables need to be recorded, and (ii) assumes that the data itself is already in tidy format. Most include parsers for only one or two instruments, while bletl, FLAPJACK, flopr, AUDIT, PLATEO and QurvE include parsers for (certain export formats from) 3, 3, 3, 4, 6 and 8 instruments, respectively (<xref rid="btad733-B6" ref-type="bibr">Coutin 2019a</xref>, <xref rid="btad733-B11" ref-type="bibr">Coutin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B17" ref-type="bibr">Fedorec <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad733-B44" ref-type="bibr">Vegh 2020</xref>, <xref rid="btad733-B47" ref-type="bibr">Wirth 2021</xref>, <xref rid="btad733-B49" ref-type="bibr">Yáñez Feliú <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad733-B16" ref-type="bibr">Fedorec 2023</xref>). While gcplyr can handle data extraction from row-, column- and matrix-formats, it is built for microbial growth curve data, and does not consider other data types (<xref rid="btad733-B1" ref-type="bibr">Blazanin 2023a</xref>, <xref rid="btad733-B2" ref-type="bibr">b</xref>).</p>
    <p>Thus, none of the above tools tackle the generic problem of data extraction from diverse raw data structures, nor are they implemented as interactive parsing applications. As a result, prospective users of plate reader analysis software are likely to have to write one, or perhaps several, parser functions before being able to begin their analyses. This requirement for function writing poses a hurdle that impedes the take-up of software packages for data analysis, particularly for users who are less confident in their coding abilities.</p>
    <p>To confront this problem, we have developed Parsley (<xref rid="btad733-B13" ref-type="bibr">Csibra 2023a</xref>, <xref rid="btad733-B14" ref-type="bibr">b</xref>), a web-based, universal plate reader data parsing application written in R/Shiny (<xref rid="btad733-B3" ref-type="bibr">Chang <italic toggle="yes">et al.</italic> 2022</xref>), that aims to enable users to parse raw plate reader data from any plate reader in under 5 min. As Parsley enables users to parse data without having to write any code, it is anticipated that it will reduce barriers to the use of the wide array of excellent data analysis software that is actively being developed by the research community.</p>
  </sec>
  <sec>
    <title>2 Results</title>
    <sec>
      <title>2.1 Parsley overview</title>
      <p>There are three main steps to parsing plate reader data with Parsley (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). First, an experimental Raw Data file needs to be uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Second, an accompanying Metadata file containing all the variables required for downstream analysis needs to be created and uploaded (<xref rid="btad733-F1" ref-type="fig">Fig. 1A</xref>). Parsley accepts files in a range of formats (CSV, CSV2, TSV, .txt and Excel). Third, users need to proceed through a guided series of Data Specification steps, that informs the app about key properties of the data in the Raw Data file (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref> and <xref rid="btad733-F1" ref-type="fig">C</xref>). The user interface (UI) is organized with the Raw Data and Metadata upload modules at the top, and the Data Specifications options in a left-hand sidebar. To avoid overloading users with data entry fields, the UI is configured to gradually reveal options as the user interacts with the software.</p>
      <fig position="float" id="btad733-F1">
        <label>Figure 1.</label>
        <caption>
          <p>The Parsley workflow. Screenshots of the Parsley app UI at three stages. (A) Raw Data and Metadata upload sections. (B) Data Specifications step 3: selection of first and last cells for the first reading using the interactive DataTables table. (C) The final Data Specifications step 7, in which the data, having been extracted in previous steps, is tidied and joined to the provided metadata, and can be downloaded as a CSV. The built parser function can then also be saved for reuse at a later date.</p>
        </caption>
        <graphic xlink:href="btad733f1" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>2.2 A framework for a general data parsing application</title>
      <p>While raw data from plate readers is exported in a wide range of formats, there are some conventions to data export formats that can be used as starting points for a general parser. For example, the most common multiwell plate is the 96-well plate, in which rows are numbered ‘A’ to ‘H’, columns ‘1’ to ’12’, and wells ‘A1’ to ‘H12’. Most export functions will present this data in one of three formats: horizontal (readings in rows, wells in columns), vertical (readings in columns, wells in rows), or matrix format (presented as a grid that visually mimics a multiwell plate), where a reading refers to a measurement (such as OD600, or green fluorescence). For horizontal and vertical data, well order is typically ‘A1’, ‘A2’, ‘A3’, etc. For matrix data, the entire plate is typically represented as an 8 by 12 grid. For horizontal/vertical data, consecutive rows/columns are typically used for each respective measurement reading. Therefore, some assumptions can be made about data structures and built into a general parser. The rare exceptions can then be handled by adapting the default framework.</p>
    </sec>
    <sec>
      <title>2.3 The DT package enables data extraction parameters to be specified interactively in Shiny</title>
      <p>Unlike a standard parser function, which may identify the location of data within a raw data file programmatically by instrument-specific context clues, Parsley identifies the location of data entirely from positional information. This is because Parsley makes few assumptions about the raw data structure and does not aim to provide automation capabilities. However, Parsley is intended to be generic to a wide range of formats. Positional information is also an easy and intuitive type of input to ask users to provide. To implement this, the app uses DataTables from the DT package (<xref rid="btad733-B48" ref-type="bibr">Xie <italic toggle="yes">et al.</italic> 2023</xref>) to display the Raw Data file. DT renders an interactive HTML widget that displays the Raw Data dataframe, allows for cells in the table to be interactively selected (<xref rid="btad733-F1" ref-type="fig">Fig. 1B</xref>), and makes the indices of the selected cells available to the Shiny server. These can then be used to extract the data from the original Raw Data file.</p>
    </sec>
    <sec>
      <title>2.4 Metadata joining</title>
      <p>Once the data is extracted from the raw data file, it is tidied and joined to user-specified metadata. There are few requirements for the metadata file, except that it needs to contain a variable called ‘well’, as this is the column that is used for joining the data and metadata together. All other columns are optional and will depend on downstream requirements. The parse function in Parsley builds a tidy dataframe consisting of the metadata on the left and the tidied data on the right, which can be downloaded as a CSV file and used in downstream analyses (<xref rid="btad733-F1" ref-type="fig">Fig. 1C</xref>).</p>
    </sec>
    <sec>
      <title>2.5 Guided parsing ensures step-by-step validation and minimizes parsing errors</title>
      <p>Parsley is built to guide users through a predefined series of steps to specify the type and format of the data, the location of the data, and the number and name of readings and/or timepoints (for timecourse data) and/or wavelengths (for spectra). A number of checks are included in both the UI (for the user to validate) and the server (for the program to validate). For instance, each Data Specification step involves a user entered action (a dropdown selection, a text entry or a cell selection on the raw data) followed by a submission with a button labelled ‘Set’. Invalid entries are flagged by an error message that informs the user about the detected data entry problem. Similarly, a Data Specifications tab collects all the user inputs, which can be checked to verify that the program is using the values that the user intends Parsley to be using. Most errors should be caught with a combination of these methods. A complete guide to the use of the app is available in the ‘Guide’ tab in the main header, with a ‘Demos’ tab containing screen recording solutions for all three data types, as well as a ‘Help’ tab to troubleshoot common issues and provide definitions for the error messages.</p>
    </sec>
    <sec>
      <title>2.6 Using Parsley to build and save parser functions</title>
      <p>In completing the above steps, users not only parse a Raw Data file, but also effectively ‘build’ their own parser functions. To speed up the parsing of similar data files, Parsley allows users to save completed parser functions as .RDS (R data) files (<xref rid="btad733-F1" ref-type="fig">Fig. 1</xref>). A dedicated ‘Use Saved Parser’ tab then allows users to load previously saved parser functions at a later date, to parse further files, without requiring users to go through the Data Specification steps again. and simply requires the upload of a Parser, Raw Data and Metadata files, and clicking ‘Run Parser’.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Conclusion</title>
    <p>Parsley tackles an as-yet-unaddressed problem in the multiwell plate data analytics pipeline, namely the question of whether it is possible to write generic data parsing software that operates on raw data exported from any plate reader instrument. Compared to other parsing tools, Parsley is designed with as few assumptions as possible about the raw data and maximum flexibility to deal with unusual data types. These options allowed us to verify that Parsley can extract data successfully from at least 53 export formats from over 10 different instruments (<xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2</xref>). It is implemented as an interactive web-based Shiny app, which is key to its universal functionality as well as its accessibility to noncoders. We hope it will become a useful tool for the community and will facilitate and streamline the use of downstream plate data analysis software.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad733_Supplementary_Data</label>
      <media xlink:href="btad733_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the Royal Academy of Engineering [RAEng CiET 1819\5].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>No new data were generated or analysed in support of this research.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad733-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group> gcplyr: an R package for microbial growth curve data analysis. bioRxiv, <pub-id pub-id-type="doi">10.1101/2023.04.30.538883</pub-id>, <year>2023a</year>, preprint: not peer reviewed.</mixed-citation>
    </ref>
    <ref id="btad733-B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Blazanin</surname><given-names>M.</given-names></string-name></person-group><source>mikeblazanin/gcplyr</source>. R, GitHub, <year>2023b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Chang</surname><given-names>W</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Allaire</surname><given-names>JJ</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">shiny: Web Application Framework for R</italic>. CRAN. <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><article-title>Sparse-growth-curve: a computational pipeline for parsing cellular growth curves with low temporal resolution</article-title>. <source>Microbiol Resour Announc</source><year>2021</year>;<volume>10</volume>:<fpage>e00296-21</fpage>. <pub-id pub-id-type="doi">10.1128/MRA.00296-21</pub-id>.<pub-id pub-id-type="pmid">33986091</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B5">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>C</given-names></string-name>, <string-name><surname>Thrash</surname><given-names>JC.</given-names></string-name></person-group><source>thrash-lab/sparse-growth-curve</source>. <publisher-name>Jupyter Notebook, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/audit</source>. <publisher-name>GitHub</publisher-name>, <year>2019a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B7">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readbioscreen</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019b</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B8">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readcg12</source>. <publisher-name>JavaScript, GitHub</publisher-name>, <year>2019c</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B9">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readgp1</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019d</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B10">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ.</given-names></string-name></person-group><source>npjc/readyg</source>. <publisher-name>R, GitHub</publisher-name>, <year>2019e</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coutin</surname><given-names>NPJ</given-names></string-name>, <string-name><surname>Giaever</surname><given-names>G</given-names></string-name>, <string-name><surname>Nislow</surname><given-names>C.</given-names></string-name></person-group><article-title>Interactively AUDIT your growth curves with a suite of R packages</article-title>. <source>G3 (Bethesda)</source><year>2020</year>;<volume>10</volume>:<fpage>933</fpage>–<lpage>43</lpage>. <pub-id pub-id-type="doi">10.1534/g3.119.400898</pub-id>.<pub-id pub-id-type="pmid">31974098</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> FPCountR: Fluorescent protein calibration for plate readers. <italic toggle="yes">Zenodo</italic><year>2021</year>. <pub-id pub-id-type="doi">10.5281/zenodo.5760028</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B13">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group><source>ec363/parsleyapp</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023a</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B14">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E.</given-names></string-name></person-group> parsleyapp package v0.1.3. <italic toggle="yes">Zenodo</italic><year>2023b</year>. <pub-id pub-id-type="doi">10.5281/zenodo.8065739</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Csibra</surname><given-names>E</given-names></string-name>, <string-name><surname>Stan</surname><given-names>G-B.</given-names></string-name></person-group><article-title>Absolute protein quantification using fluorescence measurements with FPCountR</article-title>. <source>Nat Commun</source><year>2022</year>;<volume>13</volume>:<fpage>6600</fpage>. <pub-id pub-id-type="doi">10.1038/s41467-022-34232-6</pub-id>.<pub-id pub-id-type="pmid">36329019</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B16">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH.</given-names></string-name></person-group><source>ucl-cssb/flopr</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fedorec</surname><given-names>AJH</given-names></string-name>, <string-name><surname>Robinson</surname><given-names>CM</given-names></string-name>, <string-name><surname>Wen</surname><given-names>KY</given-names></string-name></person-group><etal>et al</etal><article-title>FlopR: an open source software package for calibration and normalization of plate reader and flow cytometry data</article-title>. <source>ACS Synth Biol</source><year>2020</year>;<volume>9</volume>:<fpage>2258</fpage>–<lpage>66</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00296</pub-id>.<pub-id pub-id-type="pmid">32854500</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B18">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Fernandez</surname><given-names>L.</given-names></string-name></person-group><source>Endimion75/PRECOG</source>. <publisher-name>C#, GitHub</publisher-name>, <year>2019</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fernandez-Ricaud</surname><given-names>L</given-names></string-name>, <string-name><surname>Kourtchenko</surname><given-names>O</given-names></string-name>, <string-name><surname>Zackrisson</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>PRECOG: a tool for automated extraction and visualization of fitness components in microbial growth phenomics</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>249</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1134-2</pub-id>.<pub-id pub-id-type="pmid">27334112</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B20">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Giordano</surname><given-names>N.</given-names></string-name></person-group><source>ibis-inria/wellFARE</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Borràs-Ferrís</surname><given-names>J</given-names></string-name>, <string-name><surname>Boada</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>PLATERO: a calibration protocol for plate reader green fluorescence measurements</article-title>. <source>Front Bioeng Biotechnol</source><year>2023</year>;<volume>11</volume>:<fpage>1104445</fpage>.<pub-id pub-id-type="pmid">36741754</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B22">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>González-Cebrián</surname><given-names>A</given-names></string-name>, <string-name><surname>Vignoni</surname><given-names>A.</given-names></string-name></person-group><source>sb2cl/PLATERO</source>. <publisher-name>MATLAB, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><article-title>plater: read, tidy, and display data from microtiter plates</article-title>. <source>J Open Source Softw</source><year>2016</year>;<volume>1</volume>:<fpage>106</fpage>. <pub-id pub-id-type="doi">10.21105/joss.00106</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B24">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Hughes</surname><given-names>S.</given-names></string-name></person-group><source>plater: Read, Tidy, and Display Data from Microtiter Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B25">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S.</given-names></string-name></person-group><source>Bahler-Lab/pyphe</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kamrad</surname><given-names>S</given-names></string-name>, <string-name><surname>Rodríguez-López</surname><given-names>M</given-names></string-name>, <string-name><surname>Cotobal</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Pyphe, a python toolbox for assessing microbial growth and cell viability in high-throughput colony screens (K. J. Verstrepen, A. M. Walczak, K. J. Verstrepen, &amp; J. Warringer, eds)</article-title>. <source>Elife</source><year>2020</year>;<volume>9</volume>:<fpage>e55160</fpage>. <pub-id pub-id-type="doi">10.7554/eLife.55160</pub-id>.<pub-id pub-id-type="pmid">32543370</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B27">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Mante</surname><given-names>J.</given-names></string-name></person-group><source>SynBioDex/Xperimental-Data-Connector</source>. <publisher-name>GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Martin</surname><given-names>Y</given-names></string-name>, <string-name><surname>Page</surname><given-names>M</given-names></string-name>, <string-name><surname>Blanchet</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>WellInverter: a web application for the analysis of fluorescent reporter gene data</article-title>. <source>BMC Bioinformatics</source><year>2019</year>;<volume>20</volume>:<fpage>309</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-019-2920-4</pub-id>.<pub-id pub-id-type="pmid">31185910</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B29">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>F.</given-names></string-name></person-group><source>firasmidani/AMiGA</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Midani</surname><given-names>FS</given-names></string-name>, <string-name><surname>Collins</surname><given-names>J</given-names></string-name>, <string-name><surname>Britton</surname><given-names>RA.</given-names></string-name></person-group><article-title>AMiGA: software for automated analysis of microbial growth assays</article-title>. <source>mSystems</source><year>2021</year>;<volume>6</volume>:<fpage>e00508-21</fpage>. <pub-id pub-id-type="doi">10.1128/mSystems.00508-21</pub-id>.<pub-id pub-id-type="pmid">34254821</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Montaño-Gutierrez</surname><given-names>LF</given-names></string-name>, <string-name><surname>Moreno</surname><given-names>NM</given-names></string-name>, <string-name><surname>Farquhar</surname><given-names>I</given-names></string-name></person-group><etal>et al</etal><article-title>Analysing and meta-analysing time-series data of microbial growth and gene expression from plate readers</article-title>. <source>PLoS Comput Biol</source><year>2022</year>;<volume>18</volume>:<fpage>e1010138</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1010138</pub-id>.<pub-id pub-id-type="pmid">35617352</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B32">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M.</given-names></string-name></person-group><source>JuBiotech/bletl</source>. <publisher-name>Python, GitHub</publisher-name>, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Osthege</surname><given-names>M</given-names></string-name>, <string-name><surname>Tenhaef</surname><given-names>N</given-names></string-name>, <string-name><surname>Zyla</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>bletl ‐ a Python package for integrating BioLector microcultivation devices in the design‐build‐test‐learn cycle</article-title>. <source>Eng Life Sci</source><year>2022</year>;<volume>22</volume>:<fpage>242</fpage>–<lpage>59</lpage>. <pub-id pub-id-type="doi">10.1002/elsc.202100108</pub-id>.<pub-id pub-id-type="pmid">35382539</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A.</given-names></string-name></person-group><article-title>Bioassays: a new package in R for analyzing cellular assays</article-title>. <source>JOSS</source><year>2020</year>;<volume>5</volume>:<fpage>2402</fpage>. <pub-id pub-id-type="doi">10.21105/joss.02402</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B35">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Palakkan</surname><given-names>A</given-names></string-name>, <string-name><surname>Davies</surname><given-names>J.</given-names></string-name></person-group><source>Bioassays: Summarising Multi Well Plate Cellular Assay</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Samineni</surname><given-names>SP</given-names></string-name>, <string-name><surname>Vidal</surname><given-names>G</given-names></string-name>, <string-name><surname>Vidal-Céspedes</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Experimental data connector (XDC): integrating the capture of experimental data and metadata using standard formats and digital repositories</article-title>. <source>ACS Synth Biol</source><year>2023</year>;<volume>12</volume>:<fpage>1364</fpage>–<lpage>70</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.2c00669</pub-id>.<pub-id pub-id-type="pmid">36995948</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B37">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Shterev</surname><given-names>ID</given-names></string-name>, <string-name><surname>Chan</surname><given-names>C</given-names></string-name>, <string-name><surname>Sempowski</surname><given-names>GD.</given-names></string-name></person-group><source>highSCREEN: High-Throughput Screening for Plate Based Essays</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>Felker</surname><given-names>DP</given-names></string-name>, <string-name><surname>Heath</surname><given-names>OC</given-names></string-name></person-group><etal>et al</etal><article-title>SPOCK, an R based package for high-throughput analysis of growth rate, survival, and chronological lifespan in yeast</article-title>. <source>Transl Med Aging</source><year>2020</year>;<volume>4</volume>:<fpage>141</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.1016/j.tma.2020.08.003</pub-id>.<pub-id pub-id-type="pmid">33542965</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B39">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Small</surname><given-names>EM</given-names></string-name>, <string-name><surname>McCormick</surname><given-names>MA.</given-names></string-name></person-group><source>labmccormick/SPOCK</source>. <publisher-name>R, GitHub</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Spidlen</surname><given-names>J</given-names></string-name>, <string-name><surname>Moore</surname><given-names>W</given-names></string-name>, <string-name><surname>Parks</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal>; <collab>ISAC Data Standards Task Force</collab>. <article-title>Data file standard for flow cytometry, version FCS 3</article-title>. <source>Cytometry A</source><year>2021</year>;<volume>99</volume>:<fpage>100</fpage>–<lpage>2</lpage>. <pub-id pub-id-type="doi">10.1002/cyto.a.24225</pub-id>.<pub-id pub-id-type="pmid">32881398</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B41">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K.</given-names></string-name></person-group><source>growthcurver: Simple Metrics to Summarize Growth Curves</source>. <publisher-name>CRAN</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sprouffske</surname><given-names>K</given-names></string-name>, <string-name><surname>Wagner</surname><given-names>A.</given-names></string-name></person-group><article-title>Growthcurver: an R package for obtaining interpretable metrics from microbial growth curves</article-title>. <source>BMC Bioinformatics</source><year>2016</year>;<volume>17</volume>:<fpage>172</fpage>. <pub-id pub-id-type="doi">10.1186/s12859-016-1016-7</pub-id>.<pub-id pub-id-type="pmid">27094401</pub-id></mixed-citation>
    </ref>
    <ref id="btad733-B43">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Swain</surname><given-names>PS.</given-names></string-name></person-group><source>omniplate: A Package for Processing and Analysing Data from Plate Readers</source>. <publisher-name>GitLab</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B44">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Vegh</surname><given-names>P.</given-names></string-name></person-group><source>Edinburgh-Genome-Foundry/Plateo</source>. <publisher-name>GitHub</publisher-name>, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B45">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Warchal</surname><given-names>S.</given-names></string-name></person-group><source>platetools: Tools and Plots for Multi-Well Plates</source>. <publisher-name>CRAN</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wickham</surname><given-names>H.</given-names></string-name></person-group><article-title>Tidy data</article-title>. <source>J Stat Soft</source><year>2014</year>;<volume>59</volume>:<fpage>1</fpage>–<lpage>23</lpage>. <pub-id pub-id-type="doi">10.18637/jss.v059.i10</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad733-B47">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Wirth</surname><given-names>N.</given-names></string-name></person-group><source>NicWir/QurvE</source>. <publisher-name>R, GitHub</publisher-name>, <year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B48">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Xie</surname><given-names>Y</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>J</given-names></string-name>, <string-name><surname>Tan</surname><given-names>X</given-names></string-name></person-group><etal>et al</etal><italic toggle="yes">DT: A Wrapper of the JavaScript Library “DataTables”</italic>. CRAN, <year>2023</year>.</mixed-citation>
    </ref>
    <ref id="btad733-B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yáñez Feliú</surname><given-names>G</given-names></string-name>, <string-name><surname>Earle Gómez</surname><given-names>B</given-names></string-name>, <string-name><surname>Codoceo Berrocal</surname><given-names>V</given-names></string-name></person-group><etal>et al</etal><article-title>Flapjack: data management and analysis for genetic circuit characterization</article-title>. <source>ACS Synth Biol</source><year>2021</year>;<volume>10</volume>:<fpage>183</fpage>–<lpage>91</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00554</pub-id>.<pub-id pub-id-type="pmid">33382586</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
