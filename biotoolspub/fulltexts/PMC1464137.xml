<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title>BMC Bioinformatics</journal-title>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">1464137</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-7-176</article-id>
    <article-id pub-id-type="pmid">16569235</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-7-176</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>The Gaggle: An open-source software system for integrating bioinformatics software and data sources</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" contrib-type="author">
        <name>
          <surname>Shannon</surname>
          <given-names>Paul T</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>pshannon@systemsbiology.org</email>
      </contrib>
      <contrib id="A2" contrib-type="author">
        <name>
          <surname>Reiss</surname>
          <given-names>David J</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>dreiss@systemsbiology.org</email>
      </contrib>
      <contrib id="A3" contrib-type="author">
        <name>
          <surname>Bonneau</surname>
          <given-names>Richard</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>rbonneau@systemsbiology.org</email>
      </contrib>
      <contrib id="A4" corresp="yes" contrib-type="author">
        <name>
          <surname>Baliga</surname>
          <given-names>Nitin S</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>nbaliga@systemsbiology.org</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Institute for Systems Biology, 1441 N 34<sup>th </sup>Street, Seattle, WA 98103, USA</aff>
    <aff id="I2"><label>2</label>Department of Biology, New York University, 100 Washington Square E, New York, NY 10003, USA</aff>
    <pub-date pub-type="collection">
      <year>2006</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>3</month>
      <year>2006</year>
    </pub-date>
    <volume>7</volume>
    <fpage>176</fpage>
    <lpage>176</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/7/176"/>
    <history>
      <date date-type="received">
        <day>27</day>
        <month>10</month>
        <year>2005</year>
      </date>
      <date date-type="accepted">
        <day>28</day>
        <month>3</month>
        <year>2006</year>
      </date>
    </history>
    <copyright-statement>Copyright © 2006 Shannon et al; licensee BioMed Central Ltd.</copyright-statement>
    <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
      <p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
    </license>
    <abstract>
      <sec>
        <title>Background</title>
        <p>Systems biologists work with many kinds of data, from many different sources, using a variety of software tools. Each of these tools typically excels at one type of analysis, such as of microarrays, of metabolic networks and of predicted protein structure. A crucial challenge is to combine the capabilities of these (and other forthcoming) data resources and tools to create a data exploration and analysis environment that does justice to the variety and complexity of systems biology data sets. A solution to this problem should recognize that data types, formats and software in this high throughput age of biology are constantly changing.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>In this paper we describe the Gaggle -a simple, open-source Java software environment that helps to solve the problem of software and database integration. Guided by the classic software engineering strategy of <italic>separation of concerns </italic>and a policy of <italic>semantic flexibility</italic>, it integrates existing popular programs and web resources into a user-friendly, easily-extended environment.</p>
        <p>We demonstrate that four simple data types (names, matrices, networks, and associative arrays) are sufficient to bring together diverse databases and software. We highlight some capabilities of the Gaggle with an exploration of <italic>Helicobacter pylori </italic>pathogenesis genes, in which we identify a putative ricin-like protein -a discovery made possible by simultaneous data exploration using a wide range of publicly available data and a variety of popular bioinformatics software tools.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>We have integrated diverse databases (for example, KEGG, BioCyc, String) and software (Cytoscape, DataMatrixViewer, R statistical environment, and TIGR Microarray Expression Viewer). Through this loose coupling of diverse software and databases the Gaggle enables simultaneous exploration of experimental data (mRNA and protein abundance, protein-protein and protein-DNA interactions), functional associations (operon, chromosomal proximity, phylogenetic pattern), metabolic pathways (KEGG) and Pubmed abstracts (STRING web resource), creating an exploratory environment useful to 'web browser and spreadsheet biologists', to statistically savvy computational biologists, and those in between. The Gaggle uses Java RMI and Java Web Start technologies and can be found at <ext-link ext-link-type="uri" xlink:href="http://gaggle.systemsbiology.net"/>.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The practice of systems biology seeks to comprehend the complexity of organisms, or their subsystems, by combining many different kinds of data (mRNA and protein levels, protein-protein and protein-DNA interactions, protein modifications, biochemistry, etc.) to create predictive models [<xref ref-type="bibr" rid="B1">1</xref>]. In current practice, as biologists explore their data, they typically create manual, <italic>ad hoc </italic>connections among software tools and databases, cutting and pasting queries, creating temporary files, running web searches, and taking notes. This strategy does not scale well, and so, in response, several software projects have arisen to offer computer-assisted data and software integration. Notable among these are ToolBus [<xref ref-type="bibr" rid="B2">2</xref>], Taverna [<xref ref-type="bibr" rid="B3">3</xref>], caCore [<xref ref-type="bibr" rid="B4">4</xref>], each of which uses semantic mapping to ensure that entities in one environment are appropriately related to entities in another. While it is appealing in the abstract, this approach can be quite costly, which may explain why, despite many person-years of engineering effort, these projects have not yet been widely adopted in the biological community.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <sec>
      <title>The Gaggle: an overview</title>
      <p>The Gaggle [<xref ref-type="bibr" rid="B5">5</xref>] uses a minimalist approach to integrate data and software. It is written in Java and uses standard Java libraries. It is simple to install, and easy to update; new data sources and software tools can be added with minimal implementation costs. A small server program (the '<italic>Gaggle Boss</italic>') provides communication among analysis and display programs (the '<italic>geese'</italic>) which are modest adaptations of existing (or novel) bioinformatics and computational biology programs and web resources. The Boss and the geese all run as separate programs on the user's desktop computer, communicating with each other, at the user's behest, by passing simple messages.</p>
      <p>In the Gaggle, <bold><italic>semantic flexibility </italic></bold>[<xref ref-type="bibr" rid="B6">6</xref>] – the notion that "word meanings are not ... fixed and unchanging, but tend to vary according to the context of their use" – is seen as a <italic>solution </italic>to the complications of data integration, rather than as a problem that must be solved before integration can begin. Four data types (names, matrices, networks, and associative arrays), distilled into a semantically simple form, are passed between the geese, whereupon they take on richer meaning in the context of each goose. For example, the gene name "<italic>HP0352" </italic>identifies (1) a flagellar motor switch protein in three KEGG [<xref ref-type="bibr" rid="B7">7</xref>] pathway maps, (2) a node in a Cytoscape [<xref ref-type="bibr" rid="B8">8</xref>] association network, (3) a row in a matrix to a microarray data viewer, and (4) a set of PubMed abstracts to a literature search tool. The biological semantics attached to the gene name in each of these environments are rich, significant, and though overlapping, somewhat <italic>different</italic>. But in the Gaggle's approach to software and data integration, no formal mapping and no explicit integration are needed. It suffices to simply pass the gene name (accompanied by the organism name, which is required by some geese) to each environment, where in each case a different web of meanings is invoked.</p>
      <p>The Gaggle does not, however, preclude the use of applications and data repositories which are built upon, and offer the benefits of, careful semantic mapping. This is demonstrated by the KEGG goose, which submits queries to and retrieves results from KEGG. All carefully curated semantic mappings of gene name to metabolic pathways, biochemical reactions, cellular structures, DNA sequences, protein functions, and orthology groups in KEGG are obtained by merely passing gene names to this goose. As systems biology matures, we predict that many more such semantically rigorous resources will become available, and that they too will be easy to add to the Gaggle using this same approach. Similarly, large scale efforts such as SBML (Systems Biology Markup Language,[<xref ref-type="bibr" rid="B9">9</xref>], BioMoby [<xref ref-type="bibr" rid="B10">10</xref>] and BioPAX (a collaborative effort to create a data exchange format for biological pathway data)[<xref ref-type="bibr" rid="B11">11</xref>] will continue to be complementary to the Gaggle. However, we are also confident that, given the heterogeneity of systems biology data, it is unlikely that a single unifying language or unifying scheme will emerge. Valuable work will continue to be done in more or less restricted domains and semantic flexibility will always be required to integrate them.</p>
    </sec>
    <sec>
      <title>The Gaggle in action: A simple introductory example</title>
      <p>In a simple, prototypical use of the Gaggle, genes of interest are first selected in some program – perhaps nodes in a Cytoscape network. Next, by pressing the "Broadcast" button, the selected gene names are sent to other geese: the KEGG goose and a microarray data viewer goose. The KEGG goose will respond by displaying a list of pathways and structures in which those genes are implicated, and the microarray data viewer will plot the experimental data for those genes (Fig <xref ref-type="fig" rid="F1">1</xref>).</p>
      <p>Thus, a single mouse click performs all operations which would otherwise require: (1) writing down, copying or exporting the names of the selected Cytoscape nodes to a file; (2) browsing to the 'Search Objects in KEGG Pathways' web page, and typing in, pasting, or otherwise loading the gene names from the file, making sure to prefix each name with the appropriate organism code; and finally (3) plotting the microarray data, again requiring the list of gene names to be typed, loaded, or pasted into the microarray data viewing program's 'select' function. In our experience, in absence of the Gaggle, such data exploration involving more than a few genes can be tedious and error-prone. With the Gaggle, even with a large number of genes, such exploration can be fast and dependable and can easily include a wide range of tools and data sources, all of which respond to a single mouse-click.</p>
    </sec>
    <sec>
      <title>Gaggle data types</title>
      <p>There are four data types used in the Gaggle, and broadcast at the user's request from program to program. They are all implemented as Java classes, and they are all free of explicit biological semantics. They are: a list of names, a matrix, a network, and an associative array (a collection of name/value pairs). These four are sufficient to capture all the kinds of data used in systems biology. Instances of these data types are transmitted in <italic>serialized </italic>form using Java RMI within the Gaggle. Name lists and associative arrays are standard Java classes; Network and DataMatrix are Gaggle-specific, and are documented at the Gaggle website. Some straightforward translation of these types into 'native' types is usually required when adapting a new program to the Gaggle.</p>
    </sec>
    <sec>
      <title>The Gaggle boss</title>
      <p>The Gaggle always has a <bold>Boss</bold>. This is a standalone Java program (usually, but see Section 4 below for an alternate approach) that relays messages between the programs in the Gaggle. The Boss's graphical user interface (GUI) displays the names of the currently registered programs, and provides the user with some basic controls: to hide or reveal particular programs, and to specify whether they are to accept or ignore messages. The Boss can, in addition, be given extra capabilities, which are added via a plugin mechanism. In the example below (see Section 3), we use a species-specific annotation search capability which appears as a tab in the Boss's GUI.</p>
    </sec>
    <sec>
      <title>Current Geese</title>
      <p>When any Java program has been adapted to run in the Gaggle, we call it a '<italic>goose</italic>', and we say that it has been '<italic>gaggled</italic>'. This is a relatively simple operation: to gaggle a program requires only that it implement a dozen or so new programming calls (see software design and engineering below). Current geese in the Gaggle include:</p>
      <p><bold>1</bold>. <bold><underline>DMV: </underline></bold>the DataMatrixViewer, for navigating and selecting from experiments (microarray, ChIP-chip, proteomics), and for displaying and plotting their numerical data (Johnson et al, in preparation).</p>
      <p><bold>2</bold>. <bold><underline>Cytoscape, with assorted plugins, </underline></bold>for viewing protein-protein interactions, protein-DNA interactions, association networks, biclusters discovered by the cMonkey algorithm (see below; Reiss et al., submitted)[<xref ref-type="bibr" rid="B8">8</xref>].</p>
      <p><bold>3</bold>. <bold><underline>TIGR's microarray expression viewer (TMev): </underline></bold>a popular tool for microarray analysis [<xref ref-type="bibr" rid="B12">12</xref>].</p>
      <p><bold>4</bold>. <bold><underline>The R Goose: </underline></bold>using Java-to-R translation classes provided by RoSuDa the R Goose provides full access to the R statistical programming language and its many packages, including BioConductor [<xref ref-type="bibr" rid="B13">13</xref>].</p>
      <p><bold>5</bold>. <bold><underline>Simple Bioinformatics Web Browser: </underline></bold>which provides easy access to web-based bioinformatics resources, e.g., KEGG, EMBL's STRING, BioCyc [<xref ref-type="bibr" rid="B8">8</xref>,<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>].</p>
    </sec>
    <sec>
      <title>Starting the Gaggle</title>
      <p>The Gaggle is often launched using Java Web Start [<xref ref-type="bibr" rid="B16">16</xref>] – a standard Java technology for launching programs from a single click in a web browser. The Gaggle Boss and any number of geese may be set up, for example, as links on a laboratory's web page, perhaps including shared laboratory data; any scientist can then launch the programs with a few mouse clicks. With Java Web Start, each goose is downloaded from the web server the first time it is run; it then runs locally on one's desktop computer like a standard installed program. On every subsequent launch of the program, a fresh version is downloaded only if the program has been updated on the web server. Web Start therefore simplifies distribution and maintenance of the Gaggle, and of shared data. Java Web Start, however, is not with a requirement of the Gaggle; traditional installation and update procedures work fine as well.</p>
    </sec>
    <sec>
      <title>Supporting other programming languages in the Gaggle</title>
      <p>Though Java is an excellent general purpose language, it is not the right tool for every job and many bioinformatics tools are written in other languages. <bold><italic>R </italic></bold>[<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B18">18</xref>], for example, is the language of choice for statistics, C++ is preferred for applications in which speed is essential, and Python and Perl are scripting languages popular in the bioinformatics community. Three strategies are available for accommodating these and other languages: cross-language interoperability (using the Java Native Interface, JNI [<xref ref-type="bibr" rid="B19">19</xref>]), JVM-rehosting (i.e., Jython as a rehosted Python[<xref ref-type="bibr" rid="B20">20</xref>]), and web services (in which Simple Object Access Protocol [SOAP] [<xref ref-type="bibr" rid="B21">21</xref>] provides remote, language-neutral access to programs written in other languages).</p>
      <p>We employ the first strategy (JNI) in the R goose. The second strategy, JVM-rehosting, allows Python programs to join the Gaggle; we use the resulting Jython geese for prototyping and debugging. Jython geese and the R goose are excellent tools for exploratory data analyses that require scripting.</p>
      <p>Perl and C++ are not yet available directly within the Gaggle. In order to use code written in these languages, a few possibilities exist: either JNI 'glue' code must be written; the code must be made available as through SOAP as a web service; or the code must appear on the web behind a CGI interface.</p>
    </sec>
    <sec>
      <title>Software design and engineering</title>
      <p>The Gaggle's design is based upon the classic software engineering strategies of <italic>separation of concerns </italic>[<xref ref-type="bibr" rid="B22">22</xref>], and <italic>parsimony</italic>, from which we derived these specific prescriptions: (1) use the fewest possible software elements, (2) keep each maximally ignorant of all others, (3) avoid biological semantics, (4) use mainstream programming languages, and only one such language if possible, (5) avoid operating systems dependencies, (6) make sure that existing popular software and data formats are supported, (7) place a priority on ease of installation and update. These principles led us to choose the general purpose programming language Java, which has additional noteworthy features, including portability across operating systems, a simple and robust inter-process communication (RMI, remote method invocation), and the means (JNI) to call programs written in other languages.</p>
      <p>Every program which runs in the Gaggle is a <italic>separate, stand-alone </italic>program. A Gaggle Boss (also typically, but not necessarily, a stand-alone program) is always started first. It provides a graphical interface to monitor and control the geese, and using RMI, the communications infrastructure. Every goose, at startup, registers itself with the current boss.</p>
      <p>We use the traditional Java <italic>interface </italic>mechanism to specify both the extent to which each goose is aware of the boss and also the capabilities necessary for a program to become a full member of the goose. A Java interface defines a <italic>type</italic>, without specifying how that type is implemented. This common programming strategy allows for the separation of <italic>what </italic>an object must do, from <italic>how </italic>it does it. In the Gaggle, for example, every gaggled program must provide a <italic>handleNameList </italic>method (which is called when a bunch of gene names are broadcast to it), but the actual <italic>implementation </italic>of this method will differ with every Goose. These are presented below, followed by detailed explanations of some typical implementations of key methods in these interfaces. A full, compilable, and annotated listing of a minimal, functioning Goose will be found in the supplement.</p>
      <p>Java RMI is the linchpin of the Gaggle. This standard Java component is a very sophisticated and robust technology for inter-process communication; fortunately, it is also very simple to use. It works like this: after an initial lookup to obtain a reference to the remote object (a remote program) one program can subsequently call methods on that remote program just as if it were a local object. In the Gaggle, we use RMI to broadcast data, and for housekeeping chores (i.e., to hide, show, or terminate specific geese, to get and set their names). The four Gaggle data types (see above) are all <italic>serializable</italic>, which means that Java RMI can send 'across the wire' to the remote program, marshalling and demarshalling the data at each end. The four data types are defined as Java classes, but all of them may be written to and read from disk in various formats, of which plain text and xml currently dominate. Within a running gaggle, however, all of the data exists strictly as Java objects.</p>
      <p>The Gaggle defines two simple class interfaces (Boss and Goose), as well as the four data types. A Goose is an existing Java program adapted to run in the Gaggle; the adapation may be a plugin, a derived class, or an object added to the existing Java program. Only the methods listed below need to be implemented by every goose. Since these methods – especially in the prototyping stage – can be stubs (empty functions), the simplest adaptation of a program to the Gaggle can be very simple indeed, as illustrated below:</p>
      <p>Goose.java</p>
      <p>public interface Goose extends Remote</p>
      <p>void connectToGaggle ();</p>
      <p>void handleNameList (String species, String [] names);</p>
      <p>void handleMatrix (DataMatrix matrix) throws RemoteException;</p>
      <p>void handleMap (String species, String dataTitle, HashMap hashMap);</p>
      <p>void handleCluster (String species, String clusterName, String [] rowNames, String [] columnNames);</p>
      <p>void handleNetwork (String species, Network network);</p>
      <p>String getName ();</p>
      <p>void setName (String newName);</p>
      <p>void doHide ();</p>
      <p>void doShow ();</p>
      <p>void doExit () ;</p>
      <p>...</p>
      <p>}</p>
      <p>Let's examine three representative Goose methods (again, see the supplement for a fully documented simple goose).</p>
    </sec>
    <sec>
      <title>ConnectToGaggle</title>
      <p>This method looks up the address of the boss, registers itself with the boss, and receives a unique name in response. (The goose has a preferred name, but if that name is already in use, the boss will make sure the returned name is unique.) Henceforth the goose and the boss each have a reference to each other, and can communicate any of the messages specified in the other's interface. The crucial lines of code in this method are</p>
      <p>boss = (Boss) Naming.lookup ("rmi://localhost/gaggle");</p>
      <p>myGaggleName = boss.register ((Goose) this);</p>
    </sec>
    <sec>
      <title>handleNameList</title>
      <p>Perhaps the most used Goose method. When one goose broadcasts a list of names to another, this is the method which executes in the receiving goose. The full signature of the method is</p>
      <p>handleNameList (String species, String [] names)</p>
      <p>where the '<italic>names' </italic>denote entities (often genes) in the organism named in the '<italic>species' </italic>variable. In a typical implementation, i.e., in a network viewing program, this method would highlight all of the nodes whose names appear in the variable <italic>names</italic>.</p>
    </sec>
    <sec>
      <title>DoHide</title>
      <p>This is an example of a Gaggle housekeeping method. The boss calls this method on the goose, without additional arguments. The goose that receives the message typically responds by calling <italic>mainframe.setVisible (false) </italic>on its outermost JFrame.</p>
      <p>Boss.java</p>
      <p>public interface Boss extends Remote {</p>
      <p>void String register (Goose goose);</p>
      <p>void broadcast (String sourceGoose, String species, String [] names);</p>
      <p>void broadcast (String sourceGoose, DataMatrix matrix);</p>
      <p>void broadcast (String sourceGoose, String species, HashMap hashMap);</p>
      <p>void broadcast (String sourceGoose, String species, String clusterName, String [] rowNames, String [] columnNames;</p>
      <p>void broadcast (String sourceGoose, String species, Network network)</p>
      <p>...</p>
      <p>}</p>
      <p>In addition to the "<bold><italic>boss.register</italic></bold>" call shown above, a goose will make calls to one or more of the Boss <italic>broadcast </italic>methods. The prototypical example here is that broadcast method which is overloaded for sending a list of names. The full signature is</p>
      <p>broadcast (String sourceGooseName, String species, String [] names);</p>
      <p>Here, <bold><italic>sourceGooseName </italic></bold>identifies the goose which initiated the broadcast, <bold><italic>names </italic></bold>are typically of genes or proteins of interest, and <bold><italic>species </italic></bold>identifies the organism from which the gene or protein names come. One benefit for requiring the name of the goose initiating the broadcast (<bold><italic>sourceGooseName</italic></bold>) is that this allows the boss to avoid broadcasting back to the goose from which the broadcast originated.</p>
      <p>When the boss receives this message, the boss will rebroadcast the message to the other geese in the gaggle, calling <bold><italic>handleNameList (species, names) </italic></bold>on all listening geese (see Goose.java, above). And thus we come full circle, broadcasting a list of names from the source goose, to the boss, and then to one or more destination geese. This sequence of events, of course, is usually initiated by the biologist clicking a 'broadcast' button in a gaggled bioinformatics program in which some number of genes or proteins have been selected.</p>
      <p>Please not that, in the current implementation, the Boss is a standalone program, but it could easily be re-implemented as a part of some <italic>other </italic>program. This might be attractive to a biologist with a favorite bioinformatics program to which they wish to add Gaggle capabilities. (A Cytoscape plugin, for example, could implement the Boss interface, and recreate the Boss user interface as a dedicated Cytoscape panel, thereby creating a Cytoscape-centric Gaggle.)</p>
    </sec>
    <sec>
      <title>Scalability of the Gaggle</title>
      <sec>
        <title>(i) Adding new programs and web resources</title>
        <p>Many programs and web sites can be added to the Gaggle quite easily. In every case, the ratio of software development time to bioinformatics benefit must be assessed; the benefits will often be worth the effort. Furthermore, although gaggling a program usually (not always) requires access to the source code, a lot of molecular biology software is open source, and a lot of it is written in Java. The R Goose and TIGR MeV are prime examples: these are popular and powerful software packages developed entirely independent of the Gaggle; each required only about a week of programmer time to adapt to the Gaggle.</p>
        <p>Specifically, adding a Java program to the Gaggle is straightforward:</p>
        <p>a. If the source code is available</p>
        <p>b. If the data structures to be broadcast or received in the prospective goose are roughly compatible with the four data types used in the Gaggle (name lists, networks, matrices, associative arrays).</p>
        <p>As for any program, adding a website to the gaggle also runs the gamut, from easy to complicated to onerous. The difficulty goes up when Javascript is used, if logins are required, if results are available only after substantial delay, and (especially) if the website undergoes frequent revision.</p>
        <p>A third kind of prospective goose is a non-Java program. This will</p>
        <p>a. require an experienced Java programmer familiar with Java JNI, and</p>
        <p>b. separate development and compilation on each target operating system.</p>
        <p>Please note, however, that it is not unusual to find a Java JNI bridge already created for other programming languages and environments: R, Python, Prolog, and Matlab, to mention a few.</p>
      </sec>
      <sec>
        <title>(ii) Performance</title>
        <p>With regard to run-time scalability: since the Gaggle's purpose is first and foremost to facilitate <italic>interactive </italic>exploration of multiple data types, and since human-computer interaction with desktop software is not computationally intensive, even inexpensive computers can easily keep up with the typing and mouse operations of any user, and with the performance requirements of most individual software programs. In typical use, the Gaggle user moves at a pace measured in seconds between the various gaggled programs, with only one program in the foreground at a time; all other gaggled programs are relatively inactive in the background, perhaps even swapped out into virtual memory. Thus, the normal use of the Gaggle scales very nicely: there is no practical limit to the number of relatively inactive programs which can reside in the background.</p>
        <p>In the worst case scenario, if a sophisticated Gaggle user should broadcast large matrices or networks to several different analytical programs at once, and if all of these are running on the desktop computer, a scaling problem might result. But please note that this is not a problem with the Gaggle: this is the familiar problem of running too many simultaneous, computationally intensive tasks on a small computer. This could be considered a limitation of the Gaggle only if it promotes a style of work that might lead the biologist to attempt these multiple tasks at once when they otherwise would not have done so. If such situations were to arise and computationally intensive tasks start to swamp the desktop computer these tasks could be reconfigured to run on a server. In the Gaggle's case, this familiar solution can be implemented easily through a lightweight goose, from which the biologist can monitor and control the remote computationally-intensive task.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>Using the Gaggle we have integrated diverse databases (for example, KEGG, BioCyc, String) and software (for example, Cytoscape, DataMatrixViewer, R statistical environment, and TIGR Microarray Expression Viewer). This loose coupling of diverse software and databases enables simultaneous exploration of experimental data (mRNA and protein abundance, protein-protein and protein-DNA interactions), functional associations (operon, chromosomal proximity, phylogenetic pattern), metabolic pathways (KEGG) and Pubmed abstracts (STRING web resource). More importantly, the researcher can craft queries to explore these rich resources without any software constraints. This is best demonstrated through the case study provided below.</p>
    <sec>
      <title>A case study: Exploring pathogenesis in <italic>Helicobacter pylori</italic></title>
      <p>We turn now to a demonstration of the Gaggle, where we explore diverse sets of publicly available data for <italic>Helicobacter pylori </italic>using a variety of bioinformatics software tools. The choice of an organism outside of our general expertise (which is the systems biology of archaeal organisms) is intentional; it demonstrates how data integration via software interoperability in the Gaggle can reveal, even to the relatively inexpert researcher, insights previously hidden from view. We conclude the example by making several discoveries including identification of a protein functionally associated with flagellar biosynthesis proteins with a predicted three-dimensional structure match to ebulin, a ricin-like toxin.</p>
      <p>The steps listed below reflect a possible thought process of a biologist and indicate logic behind his/her actions. Moreover, this exercise exemplifies typical systems biology data exploration and analysis in the Gaggle. Specifically, as in any real-world systems biology data exploration, this workflow contains frequent dead ends, reiteration of the same or similar analyses with different parameters, and exploration of additional data to support new findings. The H. pylori demo is available on the Gaggle website.</p>
      <p>In this example we make use of diverse types of data archived in different locations around the world: Chromosome maps at BioCyc [<xref ref-type="bibr" rid="B15">15</xref>]; a local copy of publicly available mRNA data from Stanford microarray database [<xref ref-type="bibr" rid="B23">23</xref>]; functional associations from Prolinks [<xref ref-type="bibr" rid="B24">24</xref>];protein-protein interactions [<xref ref-type="bibr" rid="B25">25</xref>]; a local copy of a gene/protein annotation file from TIGR; metabolic pathways at KEGG [<xref ref-type="bibr" rid="B7">7</xref>] in Japan; and all Pubmed abstracts, and protein and DNA sequences through STRING [<xref ref-type="bibr" rid="B14">14</xref>] in Germany. The example also demonstrates the power of the Gaggle platform in enabling software interoperability, by including the DataMatrix Viewer (DMV) for exploring microarray data; JGR goose for statistical analysis using the 'R' package; and TMeV for clustering analysis of microarray data. More importantly, it showcases how broadcasting no more than 4 messages types through the Gaggle boss can catalyze seamless integration of all of these data and software (screenshots shown in Fig <xref ref-type="fig" rid="F2">2</xref>).</p>
      <sec>
        <title><italic>Step-by-step demonstration of Gaggle exploration of H. pylori systems biology data </italic>(see accompanying Fig <xref ref-type="fig" rid="F2">2</xref> for details)</title>
        <p>The goal of this analysis was to identify genes functionally associated with cytotoxin-associated genes of <italic>H. pylori</italic></p>
        <p>Step 1. We searched for the term "cag" (short for '<underline>c</underline>ytotoxin-<underline>a</underline>ssociated gene') in the "Annotation Search" tab of the Gaggle Boss, identifying 26 genes encoded in the <italic>H. pylori </italic>genome (The annotations were obtained from the Comprehensive Microbial Resource at TIGR <ext-link ext-link-type="uri" xlink:href="http://cmr.tigr.org"/>.</p>
        <p>Step 2. All records (Total 26 genes) retrieved in Step 1 were selected within the annotation tab.</p>
        <p>Step 3. The selected genes were broadcast to BioCyc [<xref ref-type="bibr" rid="B26">26</xref>], DMV (Johnson et al, submitted) and BiclusterView (see below, Reiss et al, submitted) (by selecting appropriate check boxes in the Gaggle Boss main panel). Taking <underline>Route A</underline>, records matching the 26 genes were retrieved through a web query against the BioCyc database for <italic>Helicobacter pylori</italic>. Upon following links for individual records we learned more about genome organization of these genes (for example <italic>cag19 </italic>seems to be in an operon along with <italic>cag21</italic>, <italic>cag20 </italic>and <italic>cag18</italic>) and that all <italic>cag </italic>genes are encoded contiguously within an approximately 40 Kbp pathogenicity island.</p>
        <p>Step 4. After reviewing basic information for genomic organization of <italic>cag </italic>genes we took <underline>Route B </underline>to investigate relationships among them by exploring expression profiles in microarray data downloaded from the Stanford Microarray Database [<xref ref-type="bibr" rid="B27">27</xref>]. Route B begins with analysis of mRNA profiles for the 26 <italic>cag </italic>genes in the DMV; these genes were selected through a broadcast described in Step 3. By clicking the "Plot Profiles" button we visualized the expression profiles for all <italic>cag </italic>genes within the DMV. This indicated that the relationship among their expression profiles is complex and requires clustering analysis for proper evaluation.</p>
        <p>Step 5. Using the "Create New Matrix" feature of DMV a sub-matrix of the 26 <italic>cag </italic>genes were created within the DMV.</p>
        <p>Step 6. Subsequently all genes within this new sub-matrix were selected using the "Select All" feature.</p>
        <p>Step 7. To ensure uniformity in the expression data across conditions we decided to normalize the data (variance = 1 and mean = 0). The selected sub-matrix was broadcast to JGR. This matrix was received as R-object <italic>m1 </italic>in JGR. The data were then normalized to matrix <italic>nm </italic>using an R function (<italic>normalize</italic>).</p>
        <p>Step 8. The normalized sub-matrix (<italic>nm</italic>) was broadcast (using command "<italic>broadcast (nm)</italic>" within JGR) to TMeV [<xref ref-type="bibr" rid="B12">12</xref>] for further analysis.</p>
        <p>Step 9. Expression profiles were clustered using the k-means algorithm (k = 5, Euclidean correlation metric) within TMeV. Upon viewing the 5 k-means clusters it was evident that whereas some <italic>cag </italic>genes, such as <italic>cag1</italic>, <italic>cag20, cag21 </italic>and <italic>cag26</italic>, had correlated profiles over almost all conditions, others (for example, <italic>cag2</italic>, <italic>cag11</italic>, <italic>cag12</italic>, <italic>cag15, cag24 </italic>and <italic>cag25</italic>) were correlated only under a subset of conditions. This elevated the importance of using a more sophisticated clustering procedure such as <italic>cMonkey </italic>(Reiss et al, submitted), which identifies putative groups of genes co-regulated over a subset of conditions (<italic>biclusters</italic>) by simultaneously analyzing expression data, functional and/or physical associations, and <italic>de novo </italic>detected cis-regulatory motifs (Reiss et al, submitted). We have developed a simple Cytoscape plug-in goose for filtering and exploring these biclusters (called BiclusterView), along with a PDF file viewer goose (called ClusterInfo) for viewing specific cluster information such as detected cis-regulatory motifs.</p>
        <p>Step 10. Taking <underline>Route C</underline>, 19 biclusters containing pathogenicity genes (selected within the BiclusterView through a broadcast action described in Step 3) were sent to a new BiclusterView window (Ctrl + N). 12 of these biclusters shared metabolic processes and/or contained genes encoding physically interacting proteins, suggesting that these biclusters are functionally related. Properties of all biclusters (expression correlation, conserved motifs etc.) were further explored by broadcasting them using the "broadcast node names" feature to the ClusterInfo application. All biclusters were found to be of high quality and some contained a motif implicated in pH regulation (Reiss etal, submitted).</p>
        <p>Step 11. To further explore functional associations among the pathogenicity genes, all genes contained within the 19 biclusters were broadcast to the Cytoscape view of the <italic>H. pylori </italic>Prolinks [<xref ref-type="bibr" rid="B24">24</xref>] Network using the "Broadcast genes and conditions" feature within the BiclusterView Control panel. All selected nodes (263 genes) within the selected Prolinks subnetwork were sent to a new window (Ctrl + N) along with associated edges. Altogether 203 genes within this network were interconnected through the following relationships: 85 gene cluster edges, 13 gene fusion edges, 99 gene neighbor edges, 83 phylogenetic profile edges and 53 protein-protein interaction edges [<xref ref-type="bibr" rid="B24">24</xref>,<xref ref-type="bibr" rid="B28">28</xref>]. Viewing functions for these 263 genes in the GB annotation tab revealed that many complex functions are associated with the cag gene blicusters (Additional file 1) elevating the need for further analysis with KEGG and STRING (below).</p>
        <p>Step 12. Finally, we broadcast all genes in the Prolinks sub-network to KEGG [<xref ref-type="bibr" rid="B7">7</xref>] and STRING [<xref ref-type="bibr" rid="B14">14</xref>] to explore metabolic pathways represented in these biclusters as well as literature containing co-occurrence of two or more genes in these 19 biclusters. Altogether ~25 pathways with three or more enzyme matches were retrieved from KEGG (Additional file 2) and ~927 publications were retrieved through STRING. Within the abstract of these publications were co-occurrences of two or more genes from the 19 biclusters (or their orthologs in other organisms). Given the large number of papers that were retrieved, we subsequently conducted repeated searches in STRING by broadcasting fewer numbers of genes at a time. In the section below we provide a synthesis of our findings.</p>
      </sec>
      <sec>
        <title>Summary of findings (Fig <xref ref-type="fig" rid="F3">3</xref>)</title>
        <p>Using the Gaggle we were able to tease out from a complicated landscape of 6399 putative associations and physical interactions among 1539 genes, 57 microarray conditions, 246 gene biclusters, and nearly 79 KEGG pathways a far more easily comprehensible picture from which to gain biological insight. Specifically, in 12 steps we identified several previously known and also unknown relationships that could serve as tangible leads for future experimental investigation of <italic>H. pylori </italic>pathogenesis.</p>
        <p>Among the pathways containing the filtered set of 263 genes (Additional file 1) was an over-representation of major processes that have been previously implicated in aspects of pathogenesis such as peptidoglycan biosynthesis [<xref ref-type="bibr" rid="B29">29</xref>], lipopolysaccharide biosynthesis [<xref ref-type="bibr" rid="B30">30</xref>], flagellar biosynthesis [<xref ref-type="bibr" rid="B31">31</xref>], Type IV secretion [<xref ref-type="bibr" rid="B32">32</xref>] (Additional file 2, Fig <xref ref-type="fig" rid="F3">3</xref>). Also present was an overrepresentation of enzymes for aa-tRNA synthesis, reductive carboxylate cycle, pyruvate metabolism, lysine biosynthesis, oxidative phosphoorylation and glycolysis/gluconeogenesis. Categorizing the 263 genes into these various pathways helped explore putative roles for proteins of unknown function (Additional file 1).</p>
        <p>Altogether 71 proteins associated with the <italic>cag </italic>gene biclusters were of unknown function. Among these unknown function proteins are four conserved secreted proteins including one protein (HP0028) linked through protein-protein interactions to Cag26 (CagA) – a key pathogenesis protein [<xref ref-type="bibr" rid="B33">33</xref>]. Another set of interesting unknown function proteins were HP1028 and HP1029 connected via gene cluster (operon) edges to FliY and FliM – key flagellar switch proteins. Also present in this operon is an alternate sigma factor (σ<sup>28</sup>) gene <italic>fliA </italic>which has been implicated in mediating transcription of FlaA (also present in the flagellar gene association network (Fig <xref ref-type="fig" rid="F3">3</xref>)), the major flagellar subunit required for both motility [<xref ref-type="bibr" rid="B34">34</xref>] as well as gastric colonization [<xref ref-type="bibr" rid="B35">35</xref>]. Note that co-expression analysis alone was not sufficient to find these relationships. Moreover, both functional associations and protein-protein interactions are notoriously noisy; however, our use of a combined analysis of all of these orthogonal data sources increases the likelihood that these relationships are real.</p>
        <p>To further explore putative functions of these key genes of unknown function, we retrieved their protein sequences (by broadcasting the genes to the STRING goose). The protein sequences were manually submitted to Robetta, a structure prediction server [36]. Among the various proteins analyzed the most striking was the match of predicted three dimensional structure of HP1028 to B-chain of ebulin (PDB: 1 hwm), a ricin-like toxin. Proteins with the conserved ricin domain are ribosome inactivating proteins widely distributed in plants, fungi, algae and bacteria. This putative function for HP1028, coupled to its putative functional association with flagellar proteins, implicates it in a likelyrole in <italic>H. pylori </italic>pathogenesis. In a similar manner, future functional exploration of additional unknown function genes in our candidate set (Additional file 1) will provide basis for discovery of potentially new candidate genes involved in pathogenesis of <italic>H. pylori</italic>.</p>
        <p>This case study illustrates the exploration of one set of heterogeneous data, using one particular combination of web resources and gaggled programs. The flexibility of the Gaggle enables any other kinds of exploration, combining other kinds of data, employing other analytical programs and web resources, and using different analytical styles (emphasizing genomics, or statistics, or simulation). In other words, a user can choose her/his style of data analysis through extensive trial and error operations using the Gaggle to layout a landscape of complex diverse data from which to tease out biological insights.</p>
      </sec>
      <sec>
        <title>Targeted users of the Gaggle</title>
        <p>Through the example above we illustrate how the Gaggle is designed to serve biologists at all points along the spectrum, from biologists who conduct most of their analyses using spreadsheets and web browsers to statistically savvy computational biologists who can write their own R code. However, note that, with the exception of the R goose, all current programs in the Gaggle are point-and-click applications, and fully useful to the non-programming biologist. Among these point-and click applications, are applications such as TIGR MeV [<xref ref-type="bibr" rid="B12">12</xref>], which provide the biologist quick access to a suite of statistical analysis tools. More importantly, although TIGR MeV development will continue independent of the Gaggle, users of the Gaggle will benefit from advances in this third party tool. This exemplifies the benefit of coupling existing popular open source software. As and when more popular software are developed we will make them part of the Gaggle.</p>
        <p>With the addition of the R goose, a new class of biological work is supported, through which even the most proficient R programmer may benefit from a collection of point-and-click geese, for instance, for the visual display of STRING associations, KEGG pathways, and Cytoscape networks, all with just a few mouse clicks.</p>
        <p>In our experience, there is yet a third class of biologists, who have no prior experience with R; but who use the Gaggle to explore their data with the point-and-click geese; and are also not opposed to using a few simple one-line R commands as long as they have a cribsheet to work from. We provide this cribsheet on the Gaggle website and intend to populate it with useful commands that are clearly described from a biologist's standpoint. Some of the commands in the cribsheet tell the user how to filter their data, normalize it, and find intersection and/or union between two matrices or gene lists.</p>
        <p>Thus, the Gaggle provides a setting in which point-and-click exploration may be gently expanded to include the sort of statistical data exploration, which is becoming indispensable in analyzing complex systems biology data. In other words the Gaggle can be (and is currently) used both by novices to computational biology and also by high end statisticians familiar with R. thereby improving communication among collaborators of diverse expertise.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Future Work</title>
    <p>In addition to the straightforward task of adding new geese to the Gaggle (for example, a goose for Gene Ontology annotation and for Robetta structure prediction), we also wish to add new capabilities to existing geese. For example, we plan to add simple scripting capabilities to the Boss, probably using Jython, to support 'goose pipelines', in which the result from one goose may be automatically sent to another. Another ambitious goal currently planned is to add a unified 'save state' capability to the Gaggle, requiring (primarily) some extensions to each participating goose.</p>
  </sec>
  <sec>
    <title>Conclusion</title>
    <p>The Gaggle is a minimal, effective and open-ended system for integrating software and data sources used in systems biology analyses. The Gaggle's effectiveness comes from the recognition that four simple data messages each free of biological semantics, and a judicious use of the Java programming language, are all that is needed to integrate diverse types of data and software. More importantly, the Gaggle is easily extensible and new software and databases can be easily converted into geese of the Gaggle with little effort. This has advantage over other approaches which require tight coupling of software and databases and therefore extensive effort to integrate new resources into the framework. This we emphasize is an important consideration because many valuable databases and software already exist and new resources are constantly emerging -if we are to take full advantage of all these existing and forthcoming resources without reformatting data or extensively reconfiguring those resources, we predict that a strategy such as the Gaggle will prove to be invaluable.</p>
  </sec>
  <sec>
    <title>Source code and Gaggle availability</title>
    <p>All of the Gaggle source code, and all of the geese mentioned in this manuscript, are available, with full documentation along with a growing number of ready-to-use "Gaggles" of model organisms on the Gaggle website.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p><bold>PS </bold>Conceived and initiated the project. Developed and implemented the method and the resultant computer program. Wrote the manuscript.</p>
    <p><bold>DJR </bold>Obtained and parsed out the relevant biological conditions in the <italic>H. pylori </italic>microarray data. Allowed access to pre-publication results of the <italic>cMonkey </italic>algorithm.</p>
    <p><bold>RB </bold>Obtained and parsed out the relevant biological conditions in the <italic>H. pylori </italic>microarray data. Allowed access to pre-publication results of the <italic>cMonkey </italic>algorithm.</p>
    <p><bold>NSB </bold>Conceived and initiated the project. Provided direction, feedback on the quality of results, software design and crafted the case study. Wrote the manuscript.</p>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgements</title>
      <p>We thank Nat Goodman and Burak Kutlu for critical reading of the manuscript and helpful suggestions. The work was funded through grants from NSF (EF-0313754) and DoE (DAAD13-03-O-0057) to NSB.</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Facciotti</surname>
            <given-names>MT</given-names>
          </name>
          <name>
            <surname>Bonneau</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Hood</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Baliga</surname>
            <given-names>NS</given-names>
          </name>
        </person-group>
        <article-title>Systems Biology Experimental Design - Considerations for Building Predictive Gene Regulatory Network Models for Prokaryotic Systems</article-title>
        <source>Current Genomics</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>527</fpage>
        <lpage>544</lpage>
        <pub-id pub-id-type="doi">10.2174/1389202043348850</pub-id>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eckart</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Sobral</surname>
            <given-names>BW</given-names>
          </name>
        </person-group>
        <article-title>A life scientist's gateway to distributed data management and computing: the PathPort/ToolBus framework</article-title>
        <source>Omics</source>
        <year>2003</year>
        <volume>7</volume>
        <fpage>79</fpage>
        <lpage>88</lpage>
        <pub-id pub-id-type="pmid">12831562</pub-id>
        <pub-id pub-id-type="doi">10.1089/153623103322006661</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oinn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Addis</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ferris</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Marvin</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Senger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Greenwood</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Carver</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Glover</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Pocock</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Wipat</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Taverna: a tool for the composition and enactment of bioinformatics workflows</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>3045</fpage>
        <lpage>3054</lpage>
        <pub-id pub-id-type="pmid">15201187</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth361</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Covitz</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Hartel</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Schaefer</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>De Coronado</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Fragoso</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Sahni</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Gustafson</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Buetow</surname>
            <given-names>KH</given-names>
          </name>
        </person-group>
        <article-title>caCORE: a common infrastructure for cancer informatics</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>2404</fpage>
        <lpage>2412</lpage>
        <pub-id pub-id-type="pmid">14668224</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg335</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>Gaggle</collab>
        </person-group>
        <article-title>[http://gaggle.systemsbiology.org/]</article-title>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Taylor</surname>
            <given-names>JR</given-names>
          </name>
        </person-group>
        <source>Cognitive Grammar</source>
        <year>2002</year>
        <publisher-name>Oxford , Oxford University Press</publisher-name>
        <fpage>634</fpage>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kanehisa</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>The KEGG database</article-title>
        <source>Novartis Found Symp</source>
        <year>2002</year>
        <volume>247</volume>
        <fpage>91</fpage>
        <lpage>101; discussion 101-3, 119-28, 244-52</lpage>
        <pub-id pub-id-type="pmid">12539951</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shannon</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Markiel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ozier</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Baliga</surname>
            <given-names>NS</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Ramage</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Amin</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Schwikowski</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ideker</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Cytoscape: a software environment for integrated models of biomolecular interaction networks</article-title>
        <source>Genome Res</source>
        <year>2003</year>
        <volume>13</volume>
        <fpage>2498</fpage>
        <lpage>2504</lpage>
        <pub-id pub-id-type="pmid">14597658</pub-id>
        <pub-id pub-id-type="doi">10.1101/gr.1239303</pub-id>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hucka</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Finney</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sauro</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Bolouri</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Doyle</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Kitano</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Arkin</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Bornstein</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Bray</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Cornish-Bowden</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cuellar</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dronov</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gilles</surname>
            <given-names>ED</given-names>
          </name>
          <name>
            <surname>Ginkel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gor</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Goryanin</surname>
            <given-names>II</given-names>
          </name>
          <name>
            <surname>Hedley</surname>
            <given-names>WJ</given-names>
          </name>
          <name>
            <surname>Hodgman</surname>
            <given-names>TC</given-names>
          </name>
          <name>
            <surname>Hofmeyr</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Hunter</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Juty</surname>
            <given-names>NS</given-names>
          </name>
          <name>
            <surname>Kasberger</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Kremling</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kummer</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Le Novere</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Loew</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Lucio</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Mendes</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Minch</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Mjolsness</surname>
            <given-names>ED</given-names>
          </name>
          <name>
            <surname>Nakayama</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Sakurada</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Schaff</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Shapiro</surname>
            <given-names>BE</given-names>
          </name>
          <name>
            <surname>Shimizu</surname>
            <given-names>TS</given-names>
          </name>
          <name>
            <surname>Spence</surname>
            <given-names>HD</given-names>
          </name>
          <name>
            <surname>Stelling</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Takahashi</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Tomita</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>524</fpage>
        <lpage>531</lpage>
        <pub-id pub-id-type="pmid">12611808</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg015</pub-id>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Links</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>BioMOBY: an open source biological web services proposal</article-title>
        <source>Brief Bioinform</source>
        <year>2002</year>
        <volume>3</volume>
        <fpage>331</fpage>
        <lpage>341</lpage>
        <pub-id pub-id-type="pmid">12511062</pub-id>
        <pub-id pub-id-type="doi">10.1093/bib/3.4.331</pub-id>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>BioPAX</collab>
        </person-group>
        <article-title>[http://www.biopax.org]</article-title>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saeed</surname>
            <given-names>AI</given-names>
          </name>
          <name>
            <surname>Sharov</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Liang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Bhagabati</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Braisted</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Klapa</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Currier</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Thiagarajan</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sturn</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Snuffin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rezantsev</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Popov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ryltsov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kostukovich</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Borisovsky</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Vinsavich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Trush</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Quackenbush</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>TM4: a free, open-source system for microarray data management and analysis</article-title>
        <source>Biotechniques</source>
        <year>2003</year>
        <volume>34</volume>
        <fpage>374</fpage>
        <lpage>378</lpage>
        <pub-id pub-id-type="pmid">12613259</pub-id>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gentleman</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Bates</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Bolstad</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Dettling</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dudoit</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ellis</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Gautier</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Ge</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Gentry</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hornik</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hothorn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Iacus</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Irizarry</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Leisch</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Maechler</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rossini</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Sawitzki</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Smyth</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Tierney</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>JY</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R80</fpage>
        <pub-id pub-id-type="pmid">15461798</pub-id>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>von Mering</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Jensen</surname>
            <given-names>LJ</given-names>
          </name>
          <name>
            <surname>Snel</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hooper</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Krupp</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Foglierini</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Jouffre</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Huynen</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Bork</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>STRING: known and predicted protein-protein associations, integrated and transferred across organisms</article-title>
        <source>Nucleic Acids Res</source>
        <year>2005</year>
        <volume>33</volume>
        <fpage>D433</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="pmid">15608232</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gki005</pub-id>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krummenacker</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Paley</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mueller</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Yan</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Karp</surname>
            <given-names>PD</given-names>
          </name>
        </person-group>
        <article-title>Querying and computing with BioCyc databases</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>3454</fpage>
        <lpage>3455</lpage>
        <pub-id pub-id-type="pmid">15961440</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti546</pub-id>
      </citation>
    </ref>
    <ref id="B16">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>JavaWebstart</collab>
        </person-group>
        <article-title>[http://java.sun.com/products/javawebstart/]</article-title>
      </citation>
    </ref>
    <ref id="B17">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>R_Statistical_package</collab>
        </person-group>
        <article-title>[http://www.r-project.org]</article-title>
      </citation>
    </ref>
    <ref id="B18">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>RoSuDA</collab>
        </person-group>
        <article-title>[http://www.rosuda.org/JGR]</article-title>
      </citation>
    </ref>
    <ref id="B19">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>JNI</collab>
        </person-group>
        <article-title>[http://java.sun.com/j2se/1.5.0/docs/guide/jni/]</article-title>
      </citation>
    </ref>
    <ref id="B20">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>Jython</collab>
        </person-group>
        <article-title>[http://www.jython.org/]</article-title>
      </citation>
    </ref>
    <ref id="B21">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>SOAP</collab>
        </person-group>
        <article-title>[http://www.w3.org/TR/soap/]</article-title>
      </citation>
    </ref>
    <ref id="B22">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parnas</surname>
            <given-names>DL</given-names>
          </name>
        </person-group>
        <article-title>On the Criteria To Be Used in Decomposing Systems into Modules</article-title>
        <source>Communications of the ACM</source>
        <year>1972</year>
        <volume>15</volume>
        <fpage>1053</fpage>
        <lpage>1058</lpage>
        <pub-id pub-id-type="doi">10.1145/361598.361623</pub-id>
      </citation>
    </ref>
    <ref id="B23">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <collab>Stanford_microarray_database</collab>
        </person-group>
        <article-title> [http://genome-www5.stanford.edu/]</article-title>
      </citation>
    </ref>
    <ref id="B24">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bowers</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Pellegrini</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Fierro</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Yeates</surname>
            <given-names>TO</given-names>
          </name>
          <name>
            <surname>Eisenberg</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Prolinks: a database of protein functional linkages derived from coevolution</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R35</fpage>
        <pub-id pub-id-type="pmid">15128449</pub-id>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-5-r35</pub-id>
      </citation>
    </ref>
    <ref id="B25">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rain</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Selig</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>De Reuse</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Battaglia</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Reverdy</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Simon</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lenzen</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Petel</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wojcik</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schachter</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Chemama</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Labigne</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Legrain</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>The protein-protein interaction map of Helicobacter pylori</article-title>
        <source>Nature</source>
        <year>2001</year>
        <volume>409</volume>
        <fpage>211</fpage>
        <lpage>215</lpage>
        <pub-id pub-id-type="pmid">11196647</pub-id>
        <pub-id pub-id-type="doi">10.1038/35051615</pub-id>
      </citation>
    </ref>
    <ref id="B26">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Karp</surname>
            <given-names>PD</given-names>
          </name>
          <name>
            <surname>Paley</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Integrated access to metabolic and genomic data</article-title>
        <source>J Comput Biol</source>
        <year>1996</year>
        <volume>3</volume>
        <fpage>191</fpage>
        <lpage>212</lpage>
        <pub-id pub-id-type="pmid">8697237</pub-id>
      </citation>
    </ref>
    <ref id="B27">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ball</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Awad</surname>
            <given-names>IA</given-names>
          </name>
          <name>
            <surname>Demeter</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gollub</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hebert</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Hernandez-Boussard</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Jin</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Matese</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Nitzberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wymore</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zachariah</surname>
            <given-names>ZK</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>PO</given-names>
          </name>
          <name>
            <surname>Sherlock</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>The Stanford Microarray Database accommodates additional microarray platforms and data formats</article-title>
        <source>Nucleic Acids Res</source>
        <year>2005</year>
        <volume>33</volume>
        <fpage>D580</fpage>
        <lpage>2</lpage>
        <pub-id pub-id-type="pmid">15608265</pub-id>
        <pub-id pub-id-type="doi">10.1093/nar/gki006</pub-id>
      </citation>
    </ref>
    <ref id="B28">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Costa</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Bacher</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Allmaier</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Dominguez-Bello</surname>
            <given-names>MG</given-names>
          </name>
          <name>
            <surname>Engstrand</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Falk</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>de Pedro</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Garcia-del Portillo</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>The Morphological Transition of Helicobacter pylori Cells from Spiral to Coccoid Is Preceded by a Substantial Modification of the Cell Wall</article-title>
        <source>J Bacteriol</source>
        <year>1999</year>
        <volume>181</volume>
        <fpage>3710</fpage>
        <lpage>3715</lpage>
        <pub-id pub-id-type="pmid">10368145</pub-id>
      </citation>
    </ref>
    <ref id="B29">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moran</surname>
            <given-names>AP</given-names>
          </name>
        </person-group>
        <article-title>The role of lipopolysaccharide in Helicobacter pylori pathogenesis</article-title>
        <source>Aliment Pharmacol Ther</source>
        <year>1996</year>
        <volume>10 Suppl 1</volume>
        <fpage>39</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="pmid">8730258</pub-id>
      </citation>
    </ref>
    <ref id="B30">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kostrzynska</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Betts</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Austin</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Trust</surname>
            <given-names>TJ</given-names>
          </name>
        </person-group>
        <article-title>Identification, characterization, and spatial localization of two flagellin species in Helicobacter pylori flagella</article-title>
        <source>J Bacteriol</source>
        <year>1991</year>
        <volume>173</volume>
        <fpage>937</fpage>
        <lpage>946</lpage>
        <pub-id pub-id-type="pmid">1704004</pub-id>
      </citation>
    </ref>
    <ref id="B31">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Suerbaum</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Michetti</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Helicobacter pylori infection</article-title>
        <source>N Engl J Med</source>
        <year>2002</year>
        <volume>347</volume>
        <fpage>1175</fpage>
        <lpage>1186</lpage>
        <pub-id pub-id-type="pmid">12374879</pub-id>
        <pub-id pub-id-type="doi">10.1056/NEJMra020542</pub-id>
      </citation>
    </ref>
    <ref id="B32">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Segal</surname>
            <given-names>ED</given-names>
          </name>
          <name>
            <surname>Cha</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lo</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Falkow</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tompkins</surname>
            <given-names>LS</given-names>
          </name>
        </person-group>
        <article-title>Altered states: involvement of phosphorylated CagA in the induction of host cellular growth changes by Helicobacter pylori</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <year>1999</year>
        <volume>96</volume>
        <fpage>14559</fpage>
        <lpage>14564</lpage>
        <pub-id pub-id-type="pmid">10588744</pub-id>
        <pub-id pub-id-type="doi">10.1073/pnas.96.25.14559</pub-id>
      </citation>
    </ref>
    <ref id="B33">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Josenhans</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Labigne</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Suerbaum</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Comparative ultrastructural and functional studies of Helicobacter pylori and Helicobacter mustelae flagellin mutants: both flagellin subunits, FlaA and FlaB, are necessary for full motility in Helicobacter species</article-title>
        <source>J Bacteriol</source>
        <year>1995</year>
        <volume>177</volume>
        <fpage>3010</fpage>
        <lpage>3020</lpage>
        <pub-id pub-id-type="pmid">7768796</pub-id>
      </citation>
    </ref>
    <ref id="B34">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eaton</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>Suerbaum</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Josenhans</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Krakowka</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Colonization of gnotobiotic piglets by Helicobacter pylori deficient in two flagellin genes</article-title>
        <source>Infect Immun</source>
        <year>1996</year>
        <volume>64</volume>
        <fpage>2445</fpage>
        <lpage>2448</lpage>
        <pub-id pub-id-type="pmid">8698465</pub-id>
      </citation>
    </ref>
    <ref id="B35">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chivian</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Malmstrom</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Bradley</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Robertson</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Murphy</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Strauss</surname>
            <given-names>CE</given-names>
          </name>
          <name>
            <surname>Bonneau</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rohl</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Baker</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Automated prediction of CASP-5 structures using the Robetta server</article-title>
        <source>Proteins</source>
        <year>2003</year>
        <volume>53 Suppl 6</volume>
        <fpage>524</fpage>
        <lpage>533</lpage>
        <pub-id pub-id-type="pmid">14579342</pub-id>
        <pub-id pub-id-type="doi">10.1002/prot.10529</pub-id>
      </citation>
    </ref>
  </ref-list>
  <sec sec-type="display-objects">
    <title>Figures and Tables</title>
    <fig position="float" id="F1">
      <label>Figure 1</label>
      <caption>
        <p><bold>A simple introductory example for use of Gaggle</bold>. A set of genes (circular nodes with edges represents associations/interactions) selected in <bold>Cytoscape </bold>(<bold>A</bold>) are broadcasted to the <bold>Gaggle Boss </bold>(<bold>B</bold>). The Gaggle Boss re-routes the broadcast to a Java web browser connected to KEGG (<bold>C</bold>), further exploration wherein localizes <italic>H. pylori </italic>proteins to relevant subunits in the flagellar apparatus map. A second goose that receives the broadcast is the DMV (<bold>D</bold>). A plot function therein provides mRNA levels of the 15 <italic>H. pylori </italic>genes in 57 experimental conditions.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-176-1"/>
    </fig>
    <fig position="float" id="F2">
      <label>Figure 2</label>
      <caption>
        <p><bold>Workflow used in Gaggle for exploration of H. pylori pathogenesis (see text for details)</bold>. The exploration begins with the Gaggle Boss (GB). All steps (mouse clicks) are indicated by arrows alongside numbers (both in black and red font) that correspond to sequence of actions. Black numbers indicate actions within a goose; red arrows and numbers (enclosed in red circles) indicate "Broadcast" actions with corresponding red numbers (not enclosed in circles) indicating transmission of data from one goose to another (implicitly through the GB). The three watermark arrows in (A) green, (B) red and (C) grey provide sequence and paths of exploratory routes.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-176-2"/>
    </fig>
    <fig position="float" id="F3">
      <label>Figure 3</label>
      <caption>
        <p><bold>Annotated prolinks network view of 263 genes identified to beputatively functionally associated with one or more of the 26 cytotoxin-associated <italic>cag </italic>genes in <italic>H. pylori</italic></bold>. This filtered network was obtained through selection of genes in biclusters of putatively co-regulated containing one or more <italic>cag </italic>gene(s). The <italic>cag </italic>genes are indicated with pink node borders. See inset keys for description of node and edge coloring.</p>
      </caption>
      <graphic xlink:href="1471-2105-7-176-3"/>
    </fig>
  </sec>
</back>
