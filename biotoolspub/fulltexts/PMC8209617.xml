<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="publisher-id">synbio</journal-id>
    <journal-title-group>
      <journal-title>Synthetic Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2397-7000</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8209617</article-id>
    <article-id pub-id-type="pmid">34151028</article-id>
    <article-id pub-id-type="doi">10.1093/synbio/ysab006</article-id>
    <article-id pub-id-type="publisher-id">ysab006</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00010</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Aquarium: open-source laboratory software for design, execution and data management</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-0862-0824</contrib-id>
        <name>
          <surname>Vrana</surname>
          <given-names>Justin</given-names>
        </name>
        <xref rid="ysab006-aff1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-7264-4484</contrib-id>
        <name>
          <surname>de Lange</surname>
          <given-names>Orlando</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5745-3970</contrib-id>
        <name>
          <surname>Yang</surname>
          <given-names>Yaoyu</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Newman</surname>
          <given-names>Garrett</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Saleem</surname>
          <given-names>Ayesha</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Miller</surname>
          <given-names>Abraham</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Cordray</surname>
          <given-names>Cameron</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Halabiya</surname>
          <given-names>Samer</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Parks</surname>
          <given-names>Michelle</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lopez</surname>
          <given-names>Eriberto</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1062-2084</contrib-id>
        <name>
          <surname>Goldberg</surname>
          <given-names>Sarah</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-7377-6051</contrib-id>
        <name>
          <surname>Keller</surname>
          <given-names>Benjamin</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-6468-0928</contrib-id>
        <name>
          <surname>Strickland</surname>
          <given-names>Devin</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Klavins</surname>
          <given-names>Eric</given-names>
        </name>
        <xref rid="ysab006-aff2" ref-type="aff">2</xref>
        <xref rid="ysab006-cor1" ref-type="corresp"/>
        <!--klavins@uw.edu-->
      </contrib>
    </contrib-group>
    <aff id="ysab006-aff1"><label>1</label><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA, <country country="US">USA</country></aff>
    <aff id="ysab006-aff2"><label>2</label><institution>Department of Electrical and Computer Engineering, University of Washington</institution>, Seattle, WA, <country country="US">USA</country></aff>
    <author-notes>
      <corresp id="ysab006-cor1">Corresponding author: E-mail: <email>klavins@uw.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-01-30">
      <day>30</day>
      <month>1</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>1</month>
      <year>2021</year>
    </pub-date>
    <volume>6</volume>
    <issue>1</issue>
    <elocation-id>ysab006</elocation-id>
    <history>
      <date date-type="received">
        <day>01</day>
        <month>10</month>
        <year>2020</year>
      </date>
      <date date-type="rev-recd">
        <day>12</day>
        <month>1</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>1</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© The Author(s) 2021. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbynclicense">https://creativecommons.org/licenses/by-nc/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Automation has been shown to improve the replicability and scalability of biomedical and bioindustrial research. Although the work performed in many labs is repetitive and can be standardized, few academic labs can afford the time and money required to automate their workflows with robotics. We propose that human-in-the-loop automation can fill this critical gap. To this end, we present Aquarium, an open-source, web-based software application that integrates experimental design, inventory management, protocol execution and data capture. We provide a high-level view of how researchers can install Aquarium and use it in their own labs. We discuss the impacts of the Aquarium on working practices, use in biofoundries and opportunities it affords for collaboration and education in life science laboratory research and manufacture.</p>
    </abstract>
    <kwd-group>
      <kwd>automation</kwd>
      <kwd>replicability</kwd>
      <kwd>software</kwd>
      <kwd>LIMS</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Defense Advanced Research Projects Agency (DARPA)</institution>
          </institution-wrap>
        </funding-source>
        <award-id>HR001117C0095</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>As the scale of scientific research expands, systems to support replicable methods are increasingly important (<xref rid="ysab006-B1" ref-type="bibr">1</xref>). Critical to replicability is the question of how experiments are described and how closely these descriptions are followed. Working practices for conducting biology experiments fall on a continuum between artisanal and highly standardized. On one end, idiosyncratic decisions made on the fly by a few people appear throughout the experimental design. At worst, these decisions are poorly documented, while at best they introduce extra experimental factors that make results challenging to compare and replicate. At the other end, researchers follow well-established protocols and do not deviate from them. This is due to either top-down enforcement, as with clinical research, or to the fact that doing so is simpler and more reliable, as with kits for common procedures such as plasmid DNA isolation. Similarly, record keeping varies from hand-written laboratory notebooks and manually curated digital records to fully structured electronic notebooks.</p>
    <p>A consequence of less structured approaches is that many experiments cannot be repeated by different researchers (<xref rid="ysab006-B2" ref-type="bibr">2</xref>, <xref rid="ysab006-B3" ref-type="bibr">3</xref>). These types of issues are typically described under the terms <italic toggle="yes">replicability</italic> (reproducibility of results) (<xref rid="ysab006-B4" ref-type="bibr">4â7</xref>). While replicability in science is a complex and multifaceted issue (<xref rid="ysab006-B8" ref-type="bibr">8</xref>, <xref rid="ysab006-B9" ref-type="bibr">9</xref>), enforcement of standardization of experimental work can result in more replicable data collection (<xref rid="ysab006-B10" ref-type="bibr">10</xref>, <xref rid="ysab006-B11" ref-type="bibr">11</xref>). However, the reality is that maintaining this standardization and record keeping is laborious and researchers often fail to enforce strict standards on themselves at the bench (<xref rid="ysab006-B12" ref-type="bibr">12</xref>).</p>
    <p>Robotic automation has been proposed as a solution for replicable large-scale experimentation by delivering consistent performance of delicate high-throughput procedures (<xref rid="ysab006-B13" ref-type="bibr">13</xref>). However, commercially available liquid handling robots and general-purpose manipulators have high-upfront costs and are laborious to reconfigure or reprogram (<xref rid="ysab006-B14" ref-type="bibr">14</xref>). While robotic systems are continually improving, labs solely reliant on robots to carry out experimental work are rare. Many experiments involve tasks for which a human operator is well suited and more cost-effective than currently available robots; for example, tasks involving delicate hand-eye coordination or variable inputs and protocols. Hence, it seems likely that human researchers will be involved in benchtop experimentation for some time, and thus the potential for non-standardized execution and sub-optimal record keeping will remain as a concern.</p>
    <p>To address this challenge, we built Aquariumâa web-based application that integrates experimental design, inventory management, protocol execution, and data collection. Aquarium supports flexible development and deployment of standardized workflows, composed of modular protocols that drive on-screen, step-by-step instructions for human technicians. During execution, experimental data and metadata are captured in forms or uploaded as files. The software automates computations involved in preparing and tracking samples through protocol execution. Aquarium also provides features to plan complex experiments involving many samples and protocols.</p>
    <p>Aquarium integrates two key software innovations: Aquarium Workflow Language (AWL) for defining custom laboratory workflows and Krill, a protocol language for describing replicable laboratory instructions. AWL is a dataflow programming language (<xref rid="ysab006-B15" ref-type="bibr">15</xref>) that represents a laboratory workflow as a network of modular work units linked by inputs and outputs. Borrowing concepts from visual programming languages, such as Scratch (<xref rid="ysab006-B16" ref-type="bibr">16</xref>), protocols are represented graphically as blocks that can be wired together to create workflows. Krill is a Ruby domain-specific language that complements AWL by capturing granular instructions for a protocol as computer code. In addition to complex procedural steps such as if-then statements, loops and calculations, Krill has methods to facilitate sample flow management and render instructions for technicians working at the bench. Through AWL and Krill, Aquarium provides interactive web-based interfaces to build executable protocols, design experimental workflows based on these protocols, manage the execution of protocols in the lab and automatically record the resulting data.</p>
    <p>Aquarium also features a Python application program interface (API), called <italic toggle="yes">Trident</italic> that provides a common interface for other applications and scripts to interact with Aquarium, for example, in planning complex workflows or extracting detailed datasets. These three programmatic interfaces, combined with inventory management and human-centered execution, make Aquarium a comprehensive, open-source software platform that facilitates low-cost scaling of laboratory research while retaining replicability and flexibility.</p>
  </sec>
  <sec>
    <title>2 Results</title>
    <sec>
      <title>2.1 Planning laboratory work with Aquarium</title>
      <p>From the perspective of the researcher, planning laboratory work is the primary interaction with Aquarium. Researchers design <italic toggle="yes">plans</italic> using a graphical user interface (GUI) that resembles a sketch board (<xref rid="ysab006-F1" ref-type="fig">Figure 1</xref>). Plans are built from workflows, essentially stereotyped series of procedures, in which materials pass from an initial state to a final state. Within plans, each input sample passes through a series of work modules termed <italic toggle="yes">operations</italic> (<xref rid="ysab006-F2" ref-type="fig">Figure 2b</xref>), to produce desired output samples and data. For example, a plan that ends with a sequence-verified plasmid stock (<xref rid="ysab006-F1" ref-type="fig">Figure 1</xref>) might include a series of operations such as PCR, DNA assembly, bacterial transformation and plasmid DNA purification. A plan may represent a fixed workflow that always executes in the same way, or it may be extended as it is executed. Thus, enabling the use of Aquarium for either manufacturing or exploratory research and development.</p>
      <fig position="float" id="ysab006-F1">
        <label>Figure 1.</label>
        <caption>
          <p>Workflow designer interface. Experimental plans can be created by dragging operation types (not shown) onto the designer canvas (right side) to create operations. Selecting a given operation input or output node users are prompted to select from a list of compatible up or downstream operations to create a custom workflow. Available inventory for each operation input is selected in the input view (bottom) and the I/O view (left). Designer tools are available for creating templates and modifying/copying plans. Additionally there are several plan tools (top left) available for investigating input/output specifications, managing existing plans, and launching plans. The designer also features annotation capabilities, allowing embedded text (such as Markdown; <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://daringfireball.net/projects/markdown/" ext-link-type="uri">https://daringfireball.net/projects/markdown/</ext-link>), images or links.</p>
        </caption>
        <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006f1" position="float"/>
      </fig>
      <fig position="float" id="ysab006-F2">
        <label>Figure 2.</label>
        <caption>
          <p>AWL. Depictions of operation, operation type, plan, and job models that comprise an AWL. (<bold>a</bold>) An example of a âBacterial Transformationâ operation type is displayed. Operation types define specific ways in which input samples and items can be processed to produce outputs. Each operation type contains specifications for its input and output types. For example, the âDNAâ input of a hypothetical bacterial transformation operation type may be satisfied by a âmaxiprep of plasmid libraryâ or a âminiprep of plasmidâ. Input and output types are entirely customizable and may include any number of sample type and object type specifications. Sample routing, if provided, ensures the input and output samples are mapped correctly upon operation execution; here the input âDNAâ sample will be mapped to the âTransformed Cellsâ output sample. Non-inventory inputs (i.e. parameters) can also be defined as inputs to operation types. (<bold>b</bold>) An example of a bacterial transformation connected to a colony PCR operation. Operations types are instantiated to operations when their input and output types are satisfied by items. Here, a bacterial transformation uses specific items in the LIMS and a parameter (37Â°C) to produce a bacterial plate. After executing the transformation, the output plate is wired to the colony PCR operation. The colony PCR outputs the amplicon to an empty well in a stripwell. Notice that the operation type sample routing ensures sample information (here pUC19-GFP, sample 442) is maintained throughout the series of tasks. (<bold>c</bold>) Operations from several different researchers and different plans can be batched together into jobs if they have the same operation types. For instance, all âColony PCRâ operations from all users can be run as a single job. (<bold>d</bold>) Once operations have been batched into jobs, jobs can be run divorced from Aquarium plans because all necessary information for execution is included in the job. These jobs can then be performed concurrently by separate technicians.</p>
        </caption>
        <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006f2" position="float"/>
      </fig>
      <p>Operations correspond to units of work that can be performed on one sample, by one person, within a single work session. Each operation will generally output a sample that can be stored or used in a variety of other operations. Operations are wired together such that the output of one operation is automatically routed to and triggers the execution of one or more subsequent operations (<xref rid="ysab006-F2" ref-type="fig">Figure 2b</xref>). Each operation is defined by valid inputs and outputs as well as a detailed laboratory protocol, written in Krill, that renders on-screen instructions to guide technicians. An Aquarium plan can encode arbitrarily large and complex programs of work that progress automatically. As the plan is executed, the state of inventory is automatically updated and data are captured, stored and made available through the GUI as well as the Python API.</p>
    </sec>
    <sec>
      <title>2.2 Executing laboratory work</title>
      <p>Aquarium contains its own laboratory information management system (LIMS) that tracks lab inventory. Through the LIMS, changes in inventory are recorded automatically as a part of protocol and workflow execution, rather than requiring manual updates. Hence, the workflow planner and Krill can reliably use the LIMS as an up-to-date representation of the laboratory.</p>
      <p>In Aquarium, a physical object is referred to as an <italic toggle="yes">item.</italic> Each item has a recorded location and may have associated data (<xref rid="ysab006-F3" ref-type="fig">Figure 3</xref>). An item is an instance of a <italic toggle="yes">sample</italic>, which is a class of physical objects in the laboratory defined by a set of descriptors determined by a <italic toggle="yes">sample type</italic>. The information fields used to define each sample type are chosen by the user and then apply to every sample of that sample type. For example, a user may define a âplasmidâ sample type, including fields for information on sequence, length and selectable markers, which would have to be defined for each plasmid sample in the database. Using sample types ensures that inventory descriptions are standardized while allowing the flexibility of custom definitions based on user needs.</p>
      <fig position="float" id="ysab006-F3">
        <label>Figure 3.</label>
        <caption>
          <p>Aquarium inventory types. The procedures of a given research lab will require handling of multiple different sample types, representing things like DNA plasmid, various cell lines or chemical reagents. (<bold>a</bold>) For instance samples of type âPlasmidâ may be defined by a marker, length or sequence. Properties for sample types are defined by the user allowing for custom definition of inventory. In Aquarium, there are no hardcoded concepts of âPlasmidsâ or any other form of laboratory inventory. Once a sample type has been defined samples can then be added to the database. Items are physical manifestations of samples and always have a location, as well as the ability to carry data associations. Each item is of a given type, known as an object type defining relevant physical properties relevant to laboratory handling. (<bold>b</bold>) Each item produced automatically gets assigned a location. How this location is assigned is reconfigurable in Aquarium. Here, a â20C freezer is designated âM20â and has three dimensions (shelf, box and position). The location designation and capacity along the dimensions are customizable. Which types of items go into which locations are defined in the itemâs object type. Proper management of item locations in Aquarium is critical as this feeds into protocol execution, which may use (or alter) item location during execution.</p>
        </caption>
        <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006f3" position="float"/>
      </fig>
      <p>Each item belongs to a user-defined <italic toggle="yes">object type.</italic> One key parameter for the definition of an object type is the default <italic toggle="yes">location wizard</italic> for items of this object type. Location wizards correspond to storage locations such as fridges and freezers and are represented as matrices with unique numbered positions for items within boxes, organized into rows and shelves (<xref rid="ysab006-F3" ref-type="fig">Figure 3b</xref>). Other than the location wizard, the name of each object type is its most important defined parameter and will indicate a physical state of the sample, reflecting how it manifests or is used in the laboratory. For example, a plasmid sample might have items associated with it belonging to a number of object types such as âPlasmid miniprepâ, âGibson assembly reaction productâ or â<italic toggle="yes">E. coli</italic> overnight cultureâ. As items are generated in the course of laboratory work, they are automatically assigned ID numbers as well as locations according to the location wizard defined by the itemâs object type.</p>
      <p>Once the items required to initiate an operation in a plan are available in the lab, the inputs to the operation are <italic toggle="yes">satisfied</italic> and the operation can be executed. In the manager subsystem, an executable operation is batched into <italic toggle="yes">a job</italic> with operations of the same type to be executed together (<xref rid="ysab006-F2" ref-type="fig">Figure 2</xref>). A job may include operations from many different plans and researchers but can only be created from operations of the same type. A strict execution policy governs how and when operations can be batched into jobs and executed in the lab (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>). Running a job launches a graphical user interface that displays step-by-step instructions to guide a technician through the steps of the operation protocol (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>).</p>
      <fig position="float" id="ysab006-F4">
        <label>Figure 4.</label>
        <caption>
          <p>Krill protocol. An example of Krill protocol code and its corresponding rendered protocol instructions. Operation types have four sets of code that govern operation behavior and scheduling: Krill protocol, precondition, documentation and cost. (<bold>a</bold>) Shown here is a snippet of Krill protocol code for the load template step in a PCR amplification protocol with lettering highlighting aspects of the code. Operations are batched into a single job; when the job is executed, Krill code can access the input and output information of all batched operations. (i) In this simple example, the template volume is calculated for each operation before generating instructions for loading template DNA into wells. (ii) A new protocol step is rendered with a <italic toggle="yes">show</italic> block. (iâvii) Within the show block, various elements are rendered for the technician. (iii, iv) A title is displayed and has two checkboxes. Checkboxes must be checked before proceeding to the next step, forcing the user to be attentive. Operations are iterated to display a table that uses the computed template volume, inputs and outputs of the operations. (v) Tables can be interactive and may include text inputs or checkable boxes. (vi) A visible <italic toggle="yes">warning</italic> is displayed. (vii) A <italic toggle="yes">selection</italic> input instructs the user to select from a list of options; numerical, textual and file upload inputs are also possible through Krill. (viii) Finally, an SVG graphics element can be rendered on the fly using operation information. (b) Optional precondition code governs when operations can be scheduled into jobs. Cost model computes monetary costs prior to plan launch and documentation provides readable instruction about the underlying protocol.</p>
        </caption>
        <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006f4" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>2.3 Rendering instructions using the krill protocol language</title>
      <p>The Krill protocol language produces detailed, context-specific instructions for how materials and data should be handled for each operation (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>). To accomplish this, Krill provides methods that allow arbitrary computations to be rendered dynamically, so that specific instructions presented to the technician can be made to reflect not only the number of items being processed, their locations and ID numbers, but also the results of calculations such as pipetting volumes based on the molarity of a solution. Thus, a Krill protocol describes a procedure in enough detail that it can be replicated by another person or lab by following specific instructions on a tablet or computer screen. Krill methods include those to execute complex calculations, retrieve and generate data, add and remove inventory, display videos and photos, retrieve user input, create interactive timers, output audio alarms and send emails, among other functions. Krill extends Ruby (<xref rid="ysab006-B17" ref-type="bibr">17</xref>), a popular, dynamic, object-oriented language used in web development. To facilitate development, Krill provides ways of creating libraries of reusable code. A version control system allows a lab to record changes to their protocols over time, or revert their protocols to past versions.</p>
      <p>The Krill protocol is supplemented by two functions that facilitate the proper execution of the protocol (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>). The <italic toggle="yes">cost model</italic> calculates how much an operation may cost at the time of execution. Cost models can use any information from Aquarium to perform cost calculations, but typically calculations use properties of samples or items used in an operation. For example, an operation that orders a synthesized piece of DNA may use the length and sequence of the DNA and check with a vendor website to establish an accurate monetary cost. Some protocols may be labor-intensive, and so operation cost models can include an estimation of the âlabor rateâ and the average length of time required to complete the protocol. Additional features in Aquarium allow the generation of monthly spending reports and budget tracking for each user or user group. The <italic toggle="yes">precondition</italic> defines conditions required for a protocol to be run; the default precondition is always true. Preconditions are a critical part of an operationâs execution policy (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>) and can be used to institute more complex experimental workflows. For instance, enforcing a 12âh delay to wait for an <italic toggle="yes">E. coli</italic> plate to grow. Like the cost model, precondition code may use any of the other subsystems to establish running conditions. For example, an operation that runs a colony PCR on a bacterial plate may halt operation if there are data associated with the plate indicating there was contamination, or if the plate is less than 12âh old and thus not ready to be run. Finally, the <italic toggle="yes">documentation</italic> contains human-readable markdown text that describes how the protocols are used and executed.</p>
    </sec>
    <sec>
      <title>2.4 Recording and accessing experimental data</title>
      <p>Aquarium records data in several ways. By default, Aquarium automatically logs protocol metadata during job execution. These metadata include operations batched within the job as well as the identity of submitting users and IDs of source plans for each operation. Job logs also capture technician identity, job start and end time, timestamps for each step in a protocol, job error records, and inventory handled. In addition to the job metadata, Aquarium has generic <italic toggle="yes">data associations</italic> that record data as attachments to inventory items, operations or plans. Data associations may include numerical (e.g. DNA concentration), text (e.g. experiment notes) or file uploads (e.g. sequencing results). Data associations can be created manually through the GUI or automatically by a protocol during a job. During execution, protocols may include specific steps instructing the technician to record or upload data (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>-vii). Post-execution, data can be accessed by researchers through the GUI, or by scripting via Aquariumâs Python API, known as Trident. Trident allows custom Python applications that power visualizations, interfaces, reports or machine-learning workflows to communicate easily with Aquarium.</p>
    </sec>
    <sec>
      <title>2.5 Interacting with Aquarium</title>
      <p>There are five major interfaces in Aquarium: designer, plans, manager, samples and developer. The designer tab provides access to the AWL interface, in which users can draft and launch plans, selecting from available operation types. The plans interface offers a summary of launched plans including up to date sample and status data. The manager tab is used to batch operations into jobs and run them. Within the manager interface, all operations are accessible, grouped by category, operation type and status. Launching a job from the manager interface starts with the on-screen instructions used by technicians (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>). The samples interface provides searchable access to inventory. The developer tab provides access to an Interactive Development Environment (IDE) where Krill code for protocols can be written and tested directly in the web browser (<xref rid="ysab006-F5" ref-type="fig">Figure 5</xref>).</p>
      <fig position="float" id="ysab006-F5">
        <label>Figure 5:</label>
        <caption>
          <p>Operation type integrated development environment (IDE). New operation types are developed through the operation type IDE. Input/output specifications are defined for each operation, along with sample type and object type specifications for each input or output. Several tools are available (top) for editing Krill protocol, precondition, cost and documentation code. A built-in protocol testing environment is available (top right) to speed workflow development.</p>
        </caption>
        <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006f5" position="float"/>
      </fig>
    </sec>
  </sec>
  <sec>
    <title>3 Discussion</title>
    <sec>
      <title>3.1 Specialization of roles</title>
      <p>Aquarium facilitates, but does not require, a division of personnel roles roughly corresponding to the different front-end interfaces, thereby facilitating the standardization of laboratory workflows as a low-cost and flexible alternative to robotic automation systems. The module composition approach implemented by AWL is intended to allow for flexible workflow design, reflecting the reality of discovery-phase research, while gaining the benefits of standardization, including replicability and efficiency gains from batched jobs. Laboratory roles can further be divided into lab managers, scheduling and assigning jobs, and technicians, executing jobs. The following role descriptions are based on our experience using the system while recognizing that individual members of laboratory personnel have often adopted multiple or blended roles.</p>
      <p><italic toggle="yes">Researchers</italic>, including graduate students and postdocs, use Aquariumâs LIMS to define new samples and the AWL (<xref rid="ysab006-F1" ref-type="fig">Figure 1</xref>) to design and launch plans. Once a researcher is ready to launch a plan, costs are computed with the operation cost models, and the researcher assigns the total to a budget that Aquarium uses to automatically track spending and generate reports. After launching, plans become visible within the plans interface, where the researcher can see the status of each operation in the plan, as well as access collected data. Some power users in the researcher role entirely bypass the Aquarium browser front-end and instead add sample definitions, submit plans and retrieve data through the Trident API. We have found that these tools allow researchers to spend minimal time at the lab bench, and more time reading literature, planning experiments and analyzing data.</p>
      <p><italic toggle="yes">Developers</italic> use Aquariumâs IDE to specify operation types and associate code (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>). In our experience Aquarium protocol drafting typically begins with a pre-existing paper-based or digital protocol as references, with the developer often working with an experimentalist for guidance. Once a protocol has been tested in the IDE, it can be deployed, making it available to add to plans and run in jobs. Developers also work with researchers and managers to develop the cost model, documentation and preconditions to create cohesive workflows (<xref rid="ysab006-F4" ref-type="fig">Figure 4d</xref>).</p>
      <p><italic toggle="yes">Managers</italic> batch operations and schedule and launch jobs, in the process deciding how many operations to include in each job, when each job should be executed and which technician should run the job.</p>
      <p><italic toggle="yes">Technicians</italic> execute jobs at the lab bench in accordance with the on-screen instructions provided by the protocol code (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>). Instructions typically include item retrieval and storage, sample preparation and handling, operation of laboratory instruments and data uploading. Technicians may be guided to directly upload data files from cameras or other equipment, or asked to create data based on prompts (e.g. answering whether or not a band of a given length is present on a gel).</p>
      <p>As well as formalizing personnel roles, Aquarium facilitates a conceptual shift to thinking about all laboratory work, including both manufacturing and experimentation, as composed of modular units, with the steps of each modular unit standardized. Standardization of laboratory methods can be beneficial for replicability (<xref rid="ysab006-B10" ref-type="bibr">10</xref>, <xref rid="ysab006-B11" ref-type="bibr">11</xref>) and Aquarium provides a means to ensure that standardized procedures are both established and followed. This arrangement can also reduce experimental bias and shield sensitive sample information.</p>
    </sec>
    <sec>
      <title>3.2 Aquarium use cases</title>
      <p>Aquarium has been used for a number of applications beyond the work of academic research groups. These include biofoundries, service laboratories and laboratory skills training.</p>
      <p>Biofoundaries are facilities providing laboratory services to the synthetic biology research community, generally including plasmid assembly and strain construction (<xref rid="ysab006-B1" ref-type="bibr">1</xref>). Aquariumâs built-in abstraction barrier between design and execution, and system for efficient task management are well suited to support biofoundries. Aquarium has supported a biofoundry at the University of Washington, the UW BIOFAB that was first developed for internal use in 2014 and then made publically accessible in 2016. Between 2014 and 2020, the UW BIOFAB has run over 30 000 jobs, serving 319 different users. BIOFAB technicians have assembled 23 million base pairs of DNA using 8.8 million base pairs of fragment DNA amplified in-house, and have built over 5700 different yeast strains. This work has supported synthetic biology research efforts of the Klavins lab and collaborators (<xref rid="ysab006-B18" ref-type="bibr">18â22</xref>), as well as other users with no shared research interests. The UW BIOFAB first implemented cloning and yeast construction services but has since moved on to offer plant cultivation and transformation, mammalian cell culturing, protein engineering, and next-generation sequencing and other workflows.</p>
      <p>Operated by private companies or public institutions, service laboratories support clinical diagnostics, agricultural soil and crop analytics, and forensics. The impacts of the global pandemics (such as COVID-19) highlighted the importance of low-cost, flexible tools that can support the rapid scaling of laboratory services both in terms of throughput and geographical reach. Aquarium was recently used to support an HIV-resistance screening workflow for use in the developing world (<xref rid="ysab006-B23" ref-type="bibr">23</xref>), taking advantage of Aquariumâs graphical technician interface, data collection management and options for rapid deployment into new devices and locations.</p>
      <p>Given the instructional efficacy of the technician interface, we have also found utility for using Aquarium as an education tool, teaching university laboratory courses with the software. Aquariumâs technician interface (<xref rid="ysab006-F4" ref-type="fig">Figure 4</xref>) delivers step-by-step instructions at the lab bench, reducing the need to front load learning of methods, similar to Just-in-Time Teaching (<xref rid="ysab006-B24" ref-type="bibr">24</xref>). It has also been used to support undergraduate laboratory training courses at the University of Washington and elsewhere.</p>
    </sec>
    <sec>
      <title>3.3 Comparison with other software</title>
      <p>Aquarium is part of a growing ecosystem of laboratory research software that we believe will become central to the working practices of researchers over the next decade. Similar to Aquarium, existing software platforms like those provided by Benchling, Riffyn, Teselagen and Transcriptic have fully featured LIMS capabilities that connect to protocols and workflows in meaningful ways. However, as far as we are aware, Aquarium is unique in its support for human-centric workflow execution which allows labs to leverage existing equipment and personnel. This is in contrast to robotic automation approaches, like those provided by Transcriptic, that integrate workflow execution primarily via laboratory robotics, which allows high-throughput experimental automation. Other platforms specialize in other aspects of the laboratory research process, such as Riffyn, which provides sophisticated tools for connecting and integrating workflow processing to data analytics; Benchling and Teselagen integrate aspects of biodesign to LIMS and workflow processes. Unlike these tools, Aquarium has limited capabilities for data processing and biodesign. Instead, Aquarium focuses on flexible workflow planning and execution, leaving design and data analytics to other software better suited to that task, such as those mentioned above. Aquariumâs open-source Python API and flexible LIMS invite future integrations of Aquarium with other software systems.</p>
    </sec>
    <sec>
      <title>3.4 Future development of Aquarium</title>
      <p>We support a growing Aquarium user community and are aware of at least eight groups that have set up and operated independent Aquarium servers for applications ranging from plant transgenics, to microbial strain construction to biomedical diagnostics. Aquarium is distributed under the MIT license to promote adoption by, and contributions from, users in any setting, whether academic, commercial or educational.</p>
      <p>An online hub (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.aquarium.b" ext-link-type="uri">https://www.aquarium.b</ext-link>io/) for sharing and peer-curation of Aquarium workflows supports the growing user community. Aquarium workflows currently can be exported and published as Github repositories. Current development plans include simplification of the Krill protocol language to lower barriers and allow for wider use of Aquarium in life science research labs.</p>
      <p>While Aquarium provides a way to formalize scientific workflows and their execution so as to allow researchers without high-level knowledge of the protocol to perform experiments reliably, it does not provide guidance on experimental design choices. However, there have been many recent advances on computer-aided design (CAD) tools for science (<xref rid="ysab006-B25" ref-type="bibr">25â29</xref>). Using Aquarium and its Python API provides a way to execute experimental plans developed by CAD software and return results in a machine-readable format. In the future, one can imagine combinations of such systems that mediate automatic design and submission of experiments, execution through Aquarium, automated extraction and analysis of results, and rapid redesign.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Materials and methods</title>
    <sec>
      <title>4.1 Glossary of Aquarium terminology</title>
      <p>The following is provided for disambiguation and covers Aquarium terminology used in this article for which an alternative common-usage definition exists. For a more complete description of relevant terminology, please refer to the documentation found at <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.aquarium.bi" ext-link-type="uri">www.aquarium.bi</ext-link>o.</p>
      <p><bold>Sample</bold>: A biologically unique entity, with properties defined by the needs of the user. A description of a specific plasmid is a sample.</p>
      <p><bold>Sample type</bold>: A category of samples, such as âPlasmidâ or âMammalian Cell Lineâ.</p>
      <p><bold>Item</bold>: A physical manifestation of a sample that exists in the laboratory. A miniprep stock is an item of a given plasmid sample.</p>
      <p><bold>Object type</bold>: A category of items that includes a name and a default location, and belongs to a particular sample type. Examples could be âPlasmid Stockâ or â400 mL Bottle of Mediaâ.</p>
      <p><bold>Operation</bold>: The basic unit of laboratory work planned in Aquarium, in which inputs are converted to outputs according to a protocol defined using the Krill protocol language.</p>
      <p><bold>Operation type</bold>: A protocol definition, which governs how human-readable instructions are rendered for a batch of operations, and how operations change the inventory and other data.</p>
      <p><bold>Plan</bold>: A set of operations that are linked by connecting inputs and outputs.</p>
      <p><bold>Job</bold>: A batch of operations of the same type that are run concurrently by a technician following instructions generated from the operation type protocol written in Krill.</p>
      <p><bold>Krill</bold>: The domain-specific language used to define protocols, a core element of an operation type. Krill extends Ruby by including methods specific for managing Aquarium objects and generating on-screen instructions for technicians.</p>
      <p><bold>Data association</bold>: Key-value pair that is associated with plans, operations or items. Data associations are added automatically during the execution of a job or manually by a user.</p>
    </sec>
    <sec>
      <title>4.2 Aquarium license and software availability</title>
      <p>Aquarium is distributed under the open-source MIT license. Aquarium, documentation and installation instructions are freely available (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.aquarium.bio/" ext-link-type="uri">https://www.aquarium.bio/</ext-link>) along with links to Dockerized versions of the software. Code is maintained on Github (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/aquariumbio/aquarium" ext-link-type="uri">https://github.com/aquariumbio/aquarium</ext-link>). Aquariumâs Python API (Trident) is also under the open-source MIT license and is hosted on the open-source python repository at PyPI (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://pypi.org/project/pydent/" ext-link-type="uri">https://pypi.org/project/pydent/</ext-link>) and its documentation and installation instructions are also freely available (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://aquariumbio.github.io/trident/" ext-link-type="uri">https://aquariumbio.github.io/trident/</ext-link>).</p>
    </sec>
    <sec>
      <title>4.3 Aquarium software implementation</title>
      <p>Aquarium is implemented as a browser-based Ruby-on-Rails application (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://rubyonrails.org/" ext-link-type="uri">https://rubyonrails.org/</ext-link>), with an AngularJS (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://angularjs.org/" ext-link-type="uri">https://angularjs.org/</ext-link>) and HTML5 front-end. The current implementation of Krill leverages Ruby (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.ruby-lang.org/en/" ext-link-type="uri">https://www.ruby-lang.org/en/</ext-link>), which is a popular, dynamic, object-oriented language used in web development. Data models are implemented using a MySQL relational database (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://dev.mysql.com/" ext-link-type="uri">https://dev.mysql.com/</ext-link>).</p>
      <p>Aquarium is distributed as a Docker (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.docker.com" ext-link-type="uri">https://www.docker.com</ext-link>) image (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://hub.docker.com/repository/docker/aquariumbio/aquarium" ext-link-type="uri">https://hub.docker.com/repository/docker/aquariumbio/aquarium</ext-link>), along with Docker Compose (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://docs.docker.com/compose/" ext-link-type="uri">https://docs.docker.com/compose/</ext-link>) scripts (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/aquariumbio/aquarium-deployment" ext-link-type="uri">https://github.com/aquariumbio/aquarium-deployment</ext-link>) that can be used to orchestrate backend, relational database and front-end services. The Trident API is implemented in Python using open-source libraries and is available as a Python package via pypi.org (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://pypi.org/project/pydent/" ext-link-type="uri">https://pypi.org/project/pydent/</ext-link>).</p>
    </sec>
  </sec>
  <sec>
    <title>SUPPLEMENTARY DATA</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary Data</xref> are available at <italic toggle="yes">SYNBIO</italic> Online.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No. HR001117C0095. Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Defense Advanced Research Projects Agency (DARPA), the Department of Defense or the United States Government.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>ysab006_Supplementary_Data</label>
      <media xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ysab006_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>Justin Vrana, Orlando de Lange, Devin Strickland, and Ben Keller wrote and revised the manuscript. Eric Klavins and Yaoyu Yang conceptualized the software and wrote most of the application code. Ben Keller, Abe Miller, Garrett Newman, Phuong Le, Justin Vrana contributed to the application code. Abe Miller and Ben Keller prepared documentation and installation scripts. Tileli Amimeur, Nick Bolten, Leandra Brettner, Cameron Cordray, Miles Gander, Sarah Goldberg, Samer Halabiya, Seunghee Jang, Yokesh Jayakumar, Eriberto Lopez, Jon Luntzel, Cannon Mallory, Abraham Miller, Garrett Newman, Michelle Parks, Sundipta Rao, Ayesha Saleem, Devin Strickland, Chris Takahashi, Justin Vrana, Yaoyu Yang and David Younger developed Aquarium workflows. Cami Corday, Samer Halabyla, Aza Allen and Michelle Parks executed and tested workflows and contributed to project ideas while managing the experimental laboratory.</p>
    <p><italic toggle="yes">Conflict of interest statement</italic>. None declared.</p>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="ysab006-B1">
      <label>1</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jessop-Fabre</surname><given-names>M.M.</given-names></string-name>, <string-name><surname>Sonnenschein</surname><given-names>N.</given-names></string-name></person-group> (<year>2019</year>) <article-title>Improving reproducibility in synthetic biology</article-title>. <source>Front. Bioeng. Biotechnol</source>., <volume>7</volume>, <fpage>18</fpage>.<pub-id pub-id-type="pmid">30805337</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B2">
      <label>2</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Begley</surname><given-names>C.G.</given-names></string-name>, <string-name><surname>Ellis</surname><given-names>L.M.</given-names></string-name></person-group> (<year>2012</year>) <article-title>Drug development: raise standards for preclinical cancer research</article-title>. <source>Nature</source>, <volume>483</volume>, <fpage>531</fpage>â<lpage>533</lpage>.<pub-id pub-id-type="pmid">22460880</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B3">
      <label>3</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fang</surname><given-names>F.C.</given-names></string-name>, <string-name><surname>Casadevall</surname><given-names>A.</given-names></string-name></person-group> (<year>2012</year>) <article-title>Reforming science: structural reforms</article-title>. <source>Infect. Immun</source>., <volume>80</volume>, <fpage>897</fpage>â<lpage>901</lpage>.<pub-id pub-id-type="pmid">22184420</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B4">
      <label>4</label>
      <mixed-citation publication-type="book"><collab>National Academies of Sciences, Engineering, and Medicine</collab>. (<year>2019</year>) <source>Reproducibility and Replicability in Science</source>. <publisher-name>National Academies Press</publisher-name>.</mixed-citation>
    </ref>
    <ref id="ysab006-B5">
      <label>5</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Goodman</surname><given-names>S.N.</given-names></string-name>, <string-name><surname>Fanelli</surname><given-names>D.</given-names></string-name>, <string-name><surname>Ioannidis</surname><given-names>J.P.A.</given-names></string-name></person-group> (<year>2016</year>) <article-title>What does research reproducibility mean?</article-title><source>Sci. Transl. Med</source>., <volume>8</volume>, <fpage>341ps12</fpage>.</mixed-citation>
    </ref>
    <ref id="ysab006-B6">
      <label>6</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Prinz</surname><given-names>F.</given-names></string-name>, <string-name><surname>Schlange</surname><given-names>T.</given-names></string-name>, <string-name><surname>Asadullah</surname><given-names>K.</given-names></string-name></person-group> (<year>2011</year>) <article-title>Believe it or not: how much can we rely on published data on potential drug targets?</article-title><source>Nat. Rev. Drug Discov</source>., <volume>10</volume>, <fpage>712</fpage>â<lpage>712</lpage>.<pub-id pub-id-type="pmid">21892149</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B7">
      <label>7</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ioannidis</surname><given-names>J.P.A.</given-names></string-name></person-group> (<year>2005</year>) <article-title>Why most published research findings are false</article-title>. <source>PLoS Med</source>., <volume>2</volume>, <fpage>e124</fpage>.<pub-id pub-id-type="pmid">16060722</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B8">
      <label>8</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Baker</surname><given-names>M.</given-names></string-name></person-group> (<year>2016</year>) <article-title>1,500 scientists lift the lid on reproducibility</article-title>. <source>Nature</source>, <volume>533</volume>, <fpage>452</fpage>â<lpage>454</lpage>.<pub-id pub-id-type="pmid">27225100</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B9">
      <label>9</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fanelli</surname><given-names>D.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Opinion: is science really facing a reproducibility crisis, and do we need it to?</article-title><source>Proc. Natl. Acad. Sci. USA</source>, <volume>115</volume>, <fpage>2628</fpage>â<lpage>2631</lpage>.<pub-id pub-id-type="pmid">29531051</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B10">
      <label>10</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fonio</surname><given-names>E.</given-names></string-name>, <string-name><surname>Golani</surname><given-names>I.</given-names></string-name>, <string-name><surname>Benjamini</surname><given-names>Y.</given-names></string-name></person-group> (<year>2012</year>) <article-title>Measuring behavior of animal models: faults and remedies</article-title>. <source>Nat. Methods</source>, <volume>9</volume>, <fpage>1167</fpage>â<lpage>1170</lpage>.<pub-id pub-id-type="pmid">23223171</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B11">
      <label>11</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Arroyo-Araujo</surname><given-names>M.</given-names></string-name>, <string-name><surname>Graf</surname><given-names>R.</given-names></string-name>, <string-name><surname>Maco</surname><given-names>M.</given-names></string-name>, <string-name><surname>van Dam</surname><given-names>E.</given-names></string-name>, <string-name><surname>Schenker</surname><given-names>E.</given-names></string-name>, <string-name><surname>Drinkenburg</surname><given-names>W.</given-names></string-name>, <string-name><surname>Koopmans</surname><given-names>B.</given-names></string-name>, <string-name><surname>de Boer</surname><given-names>S.F.</given-names></string-name>, <string-name><surname>Cullum-Doyle</surname><given-names>M.</given-names></string-name>, <string-name><surname>Noldus</surname><given-names>L.P.J.J.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>Reproducibility via coordinated standardization: a multi-center study in a Shank2 genetic rat model for autism spectrum disorders</article-title>. <source>Sci. Rep</source>., <volume>9, 1â10.</volume></mixed-citation>
    </ref>
    <ref id="ysab006-B12">
      <label>12</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nussbeck</surname><given-names>S.Y.</given-names></string-name>, <string-name><surname>Weil</surname><given-names>P.</given-names></string-name>, <string-name><surname>Menzel</surname><given-names>J.</given-names></string-name>, <string-name><surname>Marzec</surname><given-names>B.</given-names></string-name>, <string-name><surname>Lorberg</surname><given-names>K.</given-names></string-name>, <string-name><surname>Schwappach</surname><given-names>B.</given-names></string-name></person-group> (<year>2014</year>) <article-title>The laboratory notebook in the 21st century: the electronic laboratory notebook would enhance good scientific practice and increase research productivity</article-title>. <source>EMBO Rep</source>., <volume>15</volume>, <fpage>631</fpage>â<lpage>634</lpage>.<pub-id pub-id-type="pmid">24833749</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B13">
      <label>13</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Miles</surname><given-names>B.</given-names></string-name>, <string-name><surname>Lee</surname><given-names>P.L.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Achieving reproducibility and closed-loop automation in biological experimentation with an IoT-enabled lab of the future</article-title>. <source>SLAS Technol</source>., <volume>23</volume>, <fpage>432</fpage>â<lpage>439</lpage>.<pub-id pub-id-type="pmid">30045649</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B14">
      <label>14</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Naugler</surname><given-names>C.</given-names></string-name>, <string-name><surname>Church</surname><given-names>D.L.</given-names></string-name></person-group> (<year>2019</year>) <article-title>Automation and artificial intelligence in the clinical laboratory</article-title>. <source>Crit. Rev. Clin. Lab. Sci</source>., <volume>56</volume>, <fpage>98</fpage>â<lpage>110</lpage>.<pub-id pub-id-type="pmid">30922144</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B15">
      <label>15</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Dennis</surname><given-names>J.B.</given-names></string-name></person-group> (<year>1975</year>) <italic toggle="yes">First Version of a Data Flow Procedure Language</italic>. Programming Symposium, Springer Berlin Heidelberg, Berlin, Heidelberg. <fpage>362</fpage>â<lpage>376</lpage>.</mixed-citation>
    </ref>
    <ref id="ysab006-B16">
      <label>16</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Resnick</surname><given-names>M.</given-names></string-name>, <string-name><surname>Maloney</surname><given-names>J.</given-names></string-name>, <string-name><surname>Monroy-HernÃ¡ndez</surname><given-names>A.</given-names></string-name>, <string-name><surname>Rusk</surname><given-names>N.</given-names></string-name>, <string-name><surname>Eastmond</surname><given-names>E.</given-names></string-name>, <string-name><surname>Brennan</surname><given-names>K.</given-names></string-name>, <string-name><surname>Millner</surname><given-names>A.</given-names></string-name>, <string-name><surname>Rosenbaum</surname><given-names>E.</given-names></string-name>, <string-name><surname>Silver</surname><given-names>J.</given-names></string-name>, <string-name><surname>Silverman</surname><given-names>B.</given-names></string-name></person-group><etal>et al</etal> (<year>2009</year>) <article-title>Scratch: programming for all</article-title>. <source>Commun. ACM</source>, <volume>52</volume>, <fpage>60</fpage>â<lpage>67</lpage>.</mixed-citation>
    </ref>
    <ref id="ysab006-B17">
      <label>17</label>
      <mixed-citation publication-type="other"><collab>Ruby Programming Language</collab>. (<year>2020</year>) <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.ruby-lang.org/en/" ext-link-type="uri">https://www.ruby-lang.org/en/</ext-link> (20 October 2020, date last accessed).</mixed-citation>
    </ref>
    <ref id="ysab006-B18">
      <label>18</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Younger</surname><given-names>D.</given-names></string-name>, <string-name><surname>Berger</surname><given-names>S.</given-names></string-name>, <string-name><surname>Baker</surname><given-names>D.</given-names></string-name>, <string-name><surname>Klavins</surname><given-names>E.</given-names></string-name></person-group> (<year>2017</year>) <article-title>High-throughput characterization of protein-protein interactions by reprogramming yeast mating</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>114</volume>, <fpage>12166</fpage>â<lpage>12171</lpage>.<pub-id pub-id-type="pmid">29087945</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B19">
      <label>19</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Khakhar</surname><given-names>A.</given-names></string-name>, <string-name><surname>Leydon</surname><given-names>A.R.</given-names></string-name>, <string-name><surname>Lemmex</surname><given-names>A.C.</given-names></string-name>, <string-name><surname>Klavins</surname><given-names>E.</given-names></string-name>, <string-name><surname>Nemhauser</surname><given-names>J.L.</given-names></string-name></person-group> (<year>2018</year>) <article-title>Synthetic hormone-responsive transcription factors can monitor and re-program plant development</article-title>. <source>Elife</source>, <volume>7</volume>, <fpage>e34702</fpage>.<pub-id pub-id-type="pmid">29714687</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B20">
      <label>20</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Groves</surname><given-names>B.</given-names></string-name>, <string-name><surname>Khakhar</surname><given-names>A.</given-names></string-name>, <string-name><surname>Nadel</surname><given-names>C.M.</given-names></string-name>, <string-name><surname>Gardner</surname><given-names>R.G.</given-names></string-name>, <string-name><surname>Seelig</surname><given-names>G.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Rewiring MAP kinases in <italic toggle="yes">Saccharomyces cerevisiae</italic> to regulate novel targets through ubiquitination</article-title>. <source>Elife</source>, <volume>5</volume>, <fpage>e15200</fpage>.<pub-id pub-id-type="pmid">27525484</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B21">
      <label>21</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Khakhar</surname><given-names>A.</given-names></string-name>, <string-name><surname>Bolten</surname><given-names>N.J.</given-names></string-name>, <string-name><surname>Nemhauser</surname><given-names>J.</given-names></string-name>, <string-name><surname>Klavins</surname><given-names>E.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Cellâcell communication in yeast using auxin biosynthesis and auxin responsive CRISPR transcription factors</article-title>. <source>ACS Synth. Biol</source>., <volume>5</volume>, <fpage>279</fpage>â<lpage>286</lpage>.<pub-id pub-id-type="pmid">26102245</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B22">
      <label>22</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gander</surname><given-names>M.W.</given-names></string-name>, <string-name><surname>Vrana</surname><given-names>J.D.</given-names></string-name>, <string-name><surname>Voje</surname><given-names>W.E.</given-names></string-name>, <string-name><surname>Carothers</surname><given-names>J.M.</given-names></string-name>, <string-name><surname>Klavins</surname><given-names>E.</given-names></string-name></person-group> (<year>2017</year>) <article-title>Digital logic circuits in yeast with CRISPR-dCas9 NOR gates</article-title>. <source>Nat. Commun</source>., <volume>8</volume>, <fpage>15459</fpage>.<pub-id pub-id-type="pmid">28541304</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B23">
      <label>23</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Panpradist</surname><given-names>N.</given-names></string-name>, <string-name><surname>Beck</surname><given-names>I.A.</given-names></string-name>, <string-name><surname>Vrana</surname><given-names>J.</given-names></string-name>, <string-name><surname>Higa</surname><given-names>N.</given-names></string-name>, <string-name><surname>McIntyre</surname><given-names>D.</given-names></string-name>, <string-name><surname>Ruth</surname><given-names>P.S.</given-names></string-name>, <string-name><surname>So</surname><given-names>I.</given-names></string-name>, <string-name><surname>Kline</surname><given-names>E.C.</given-names></string-name>, <string-name><surname>Kanthula</surname><given-names>R.</given-names></string-name>, <string-name><surname>Wong-On-Wing</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>OLA-Simple: a software-guided HIV-1 drug resistance test for low-resource laboratories</article-title>. <source>EBioMedicine</source>, <volume>50</volume>, <fpage>34</fpage>â<lpage>44</lpage>.<pub-id pub-id-type="pmid">31767540</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B24">
      <label>24</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Marrs</surname><given-names>K.A.</given-names></string-name>, <string-name><surname>Novak</surname><given-names>G.</given-names></string-name></person-group> (<year>2004</year>) <article-title>Just-in-time teaching in biology: creating an active learner classroom using the Internet</article-title>. <source>Cell Biol. Educ</source>., <volume>3</volume>, <fpage>49</fpage>â<lpage>61</lpage>.<pub-id pub-id-type="pmid">22039345</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B25">
      <label>25</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rohl</surname><given-names>C.A.</given-names></string-name>, <string-name><surname>Strauss</surname><given-names>C.E.M.</given-names></string-name>, <string-name><surname>Misura</surname><given-names>K.M.S.</given-names></string-name>, <string-name><surname>Baker</surname><given-names>D.</given-names></string-name></person-group> (<year>2004</year>) <article-title>Protein structure prediction using rosetta</article-title>. <source>Methods Enzymol</source>., <volume>383</volume>, <fpage>66</fpage>â<lpage>93</lpage>.<pub-id pub-id-type="pmid">15063647</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B26">
      <label>26</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hillson</surname><given-names>N.J.</given-names></string-name>, <string-name><surname>Rosengarten</surname><given-names>R.D.</given-names></string-name>, <string-name><surname>Keasling</surname><given-names>J.D.</given-names></string-name></person-group> (<year>2012</year>) <article-title>j5 DNA assembly design automation software</article-title>. <source>ACS Synth. Biol</source>., <volume>1</volume>, <fpage>14</fpage>â<lpage>21</lpage>.<pub-id pub-id-type="pmid">23651006</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B27">
      <label>27</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Untergasser</surname><given-names>A.</given-names></string-name>, <string-name><surname>Cutcutache</surname><given-names>I.</given-names></string-name>, <string-name><surname>Koressaar</surname><given-names>T.</given-names></string-name>, <string-name><surname>Ye</surname><given-names>J.</given-names></string-name>, <string-name><surname>Faircloth</surname><given-names>B.C.</given-names></string-name>, <string-name><surname>Remm</surname><given-names>M.</given-names></string-name>, <string-name><surname>Rozen</surname><given-names>S.G.</given-names></string-name></person-group><etal>et al</etal>. (<year>2012</year>) <article-title>Primer3ânew capabilities and interfaces</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>e115</fpage>â<lpage>e115</lpage>.<pub-id pub-id-type="pmid">22730293</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B28">
      <label>28</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Appleton</surname><given-names>E.</given-names></string-name>, <string-name><surname>Tao</surname><given-names>J.</given-names></string-name>, <string-name><surname>Haddock</surname><given-names>T.</given-names></string-name>, <string-name><surname>Densmore</surname><given-names>D.</given-names></string-name></person-group> (<year>2014</year>) <article-title>Interactive assembly algorithms for molecular cloning</article-title>. <source>Nat. Methods</source>, <volume>11</volume>, <fpage>657</fpage>â<lpage>662</lpage>.<pub-id pub-id-type="pmid">24776633</pub-id></mixed-citation>
    </ref>
    <ref id="ysab006-B29">
      <label>29</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nielsen</surname><given-names>A.A.K.</given-names></string-name>, <string-name><surname>Der</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Shin</surname><given-names>J.</given-names></string-name>, <string-name><surname>Vaidyanathan</surname><given-names>P.</given-names></string-name>, <string-name><surname>Paralanov</surname><given-names>V.</given-names></string-name>, <string-name><surname>Strychalski</surname><given-names>E.A.</given-names></string-name>, <string-name><surname>Ross</surname><given-names>D.</given-names></string-name>, <string-name><surname>Densmore</surname><given-names>D.</given-names></string-name>, <string-name><surname>Voigt</surname><given-names>C.A.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Genetic circuit design automation</article-title>. <source>Science</source>, <volume>352</volume>, <fpage>aac7341</fpage>.<pub-id pub-id-type="pmid">27034378</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
