<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Source Code Biol Med</journal-id>
    <journal-id journal-id-type="iso-abbrev">Source Code Biol Med</journal-id>
    <journal-title-group>
      <journal-title>Source Code for Biology and Medicine</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1751-0473</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3464138</article-id>
    <article-id pub-id-type="publisher-id">1751-0473-7-4</article-id>
    <article-id pub-id-type="pmid">22640820</article-id>
    <article-id pub-id-type="doi">10.1186/1751-0473-7-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software Review</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Scaffolder - software for manual genome scaffolding</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes" id="A1">
        <name>
          <surname>Barton</surname>
          <given-names>Michael D</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>mail@michaelbarton.me.uk</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Barton</surname>
          <given-names>Hazel A</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>bartonh@uakron.edu</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Biology Department, The University of Akron, Akron, OH, 44325-3908, USA</aff>
    <pub-date pub-type="collection">
      <year>2012</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>5</month>
      <year>2012</year>
    </pub-date>
    <volume>7</volume>
    <fpage>4</fpage>
    <lpage>4</lpage>
    <history>
      <date date-type="received">
        <day>2</day>
        <month>5</month>
        <year>2012</year>
      </date>
      <date date-type="accepted">
        <day>3</day>
        <month>5</month>
        <year>2012</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright ©2012 Barton and Barton; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2012</copyright-year>
      <copyright-holder>Barton and Barton; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.scfbm.org/content/7/1/4"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>The assembly of next-generation short-read sequencing data can result in a fragmented non-contiguous set of genomic sequences. Therefore a common step in a genome project is to join neighbouring sequence regions together and fill gaps. This scaffolding step is non-trivial and requires manually editing large blocks of nucleotide sequence. Joining these sequences together also hides the source of each region in the final genome sequence. Taken together these considerations may make reproducing or editing an existing genome scaffold difficult.</p>
      </sec>
      <sec>
        <title>Methods</title>
        <p>The software outlined here, “Scaffolder,” is implemented in the Ruby programming language and can be installed via the RubyGems software management system. Genome scaffolds are defined using YAML - a data format which is both human and machine-readable. Command line binaries and extensive documentation are available.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>This software allows a genome build to be defined in terms of the constituent sequences using a relatively simple syntax. This syntax further allows unknown regions to be specified and additional sequence to be used to fill known gaps in the scaffold. Defining the genome construction in a file makes the scaffolding process reproducible and easier to edit compared with large FASTA nucleotide sequences.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>Scaffolder is easy-to-use genome scaffolding software which promotes reproducibility and continuous development in a genome project. Scaffolder can be found at <ext-link ext-link-type="uri" xlink:href="http://next.gs">http://next.gs</ext-link>.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>High-throughput sequencing can produce hundreds of thousands to millions of sequence reads from a genome. At the time of writing, high-throughput sequencing is limited to producing reads less than 1,000 nucleotides in length. Therefore to resolve a sequence longer than this, such as a complete genome, these numerous smaller fragments must be pieced together. The process of joining reads into longer sequences is the ‘assembly’ stage of a genome project [<xref ref-type="bibr" rid="B1">1</xref>].</p>
    <p>Assembly software takes the nucleotide reads produced by sequencing hardware and, in the ideal case, outputs a single complete genome sequence composed of these individual fragments. An analogy for this process is a jigsaw puzzle: each nucleotide read represents a single piece, and the final genome sequence is the completed puzzle. Sequences of repetitive nucleotide ‘repeat’ regions or biased and incomplete sequencing data may prevent the genome being assembled into a continuous sequence. This may be due to insufficient or multiple different overlaps between reads and is analogous to missing pieces in the jigsaw or pieces that fit to multiple other pieces.</p>
    <p>The advent of high-throughput sequencing methods has led to a renewed interest in algorithms to solve the problem of genome assembly [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>]. The complexity of merging large numbers of overlapping reads can lead to genome assembly software being unable to produce a complete sequence. Instead, the algorithm may generate several large assembled regions of sequence (‘contigs’) composed of the many individual reads. These contigs represent a fragmented picture of the genome and therefore require additional work to join together into a complete sequence.</p>
    <p>The process of finishing a genome sequence can be expensive in terms of time and laboratory effort. In some cases the genomic data present in a set of generated contigs may be sufficient for many research questions [<xref ref-type="bibr" rid="B4">4</xref>]. Nevertheless, a continuous high-quality ‘finished’ genome sequence does provide a greater depth of information, such as complete resolution of repeat regions and precise estimates of distances between genomic elements [<xref ref-type="bibr" rid="B5">5</xref>,<xref ref-type="bibr" rid="B6">6</xref>]. The process of joining these contigs together to form a continuous genome sequence is called the ‘scaffolding’ or ‘finishing’ stage and is the focus of the software described in this article.</p>
  </sec>
  <sec>
    <title>Scaffolding</title>
    <p>Scaffolding is the process of joining a series of disconnected contigs into a complete continuous genome sequence. Due to genomic complexity and missing data, scaffolding may not ultimately produce a final completed sequence, but may still succeed in joining a subset of contigs together or resolving gaps between contigs. An overview of the required steps in the scaffolding process is outlined below:</p>
  </sec>
  <sec>
    <title>Contig orientation</title>
    <p>The sequencing process generates reads from either strand of the DNA helix and the resulting contigs constructed from these reads may represent either DNA strand. Orientating all contigs to point in the same direction requires reverse complementing sequences where necessary. In the case of archaeal and bacterial genomes this orientation will be to the 5’ → 3’ direction following the direction of genome replication.</p>
  </sec>
  <sec>
    <title>Contig ordering</title>
    <p>Contig ordering determines the placement of observed contigs to best represent their order in the true genome sequence. The correct placement of each contig also highlights any extra-genomic DNA, such as plasmids which are scaffolded separately from the genomic sequence. The order is commonly started at the contig containing the origin of replication. All subsequent contigs are then ordered in the 5’ → 3’ direction of DNA replication.</p>
  </sec>
  <sec>
    <title>Contig distancing</title>
    <p>Given the correct order and orientation, determining the distance between contigs results in an estimate of the complete genome size. The size of any inter-contig gaps represents the length of an unknown region in the genome. Filling these regions with unknown nucleotide characters ‘N’ allows a draft continuous sequence. This sequence is useful for representing both the known and to-be-resolved areas in the genome sequence.</p>
  </sec>
  <sec>
    <title>Gap closing</title>
    <p>During the scaffolding process, closing and filling gaps between contigs completes and improves the genome scaffold. Closing gaps may require returning to the laboratory to perform additional sequencing or using computational methods to estimate the unknown sequence. This additional sequence is used to replace the gap between two contigs, joining them into a single sequence. Once all contigs have been joined and gaps in a scaffold closed, the genome may be considered finished.</p>
  </sec>
  <sec>
    <title>Computational methods for scaffolding</title>
    <p>The process of finishing a genome scaffold uses wet laboratory methods, in silico methods, or a combination of both. An example of a computational method might use the paired-read data from the sequencing stage. The occurrence of paired reads in separate contigs can be used to estimate probabilistically the order and distance between these contigs. Alternatively, laboratory methods may use PCR to amplify the unknown DNA in a gap region then use Sanger sequencing to determine the sequence of this gap. Computational methods, using available sequencing data, are preferable as they are less costly in laboratory time and materials compared to manual gap resolution [<xref ref-type="bibr" rid="B7">7</xref>]. Finally when the scaffold cannot be completely resolved, in silico software packages exist to suggest the likely primers necessary for PCR amplifying the sequence in gap regions [<xref ref-type="bibr" rid="B8">8</xref>].</p>
    <p>Examples of in silico methods include comparing the assembled contigs to a complete reference genome sequence to search for areas of sequence similarity between the two. Any areas of corresponding sequence in the reference genome can be used to infer contig placement and build the contigs into a scaffold [<xref ref-type="bibr" rid="B9">9</xref>-<xref ref-type="bibr" rid="B11">11</xref>]. Genomic recombination can however reduce the efficacy of this. Repeat regions may also be responsible for multiple gaps when building a genome sequence; tandemly repeated nucleotide regions in the genome produce multiple reads with similar sequence. As many assembly algorithms rely on sequence overlaps between reads to build a contig, the similarity between repeat-region reads can result in the assembly collapsing into an artificially short sequence or being ignored by more conservative assembly algorithms. Such regions can be resolved by using algorithms that specifically reassemble the collapsed repeat region [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>]. A related approach uses unassembled sequence reads matching the regions around a scaffold gap to construct a uniquely overlapping set of reads across the gap. [<xref ref-type="bibr" rid="B14">14</xref>].</p>
    <p>Paired-read data can provide an extra level of information about how contigs may be scaffolded together. Heuristic scaffolding algorithms take advantage of this data to search for the optimal configuration of contigs in the scaffold that matches these paired-read distances [<xref ref-type="bibr" rid="B15">15</xref>,<xref ref-type="bibr" rid="B16">16</xref>]. Synteny data from a reference genome can also be combined with this paired-read data to estimate the best contig configuration [<xref ref-type="bibr" rid="B17">17</xref>].</p>
    <p>These described in silico methods provide a wide array of approaches for merging contigs into a larger, continuous scaffold sequence. The scaffolding process may still require manually inserting additional sequences or further joining contigs using PCR-derived sequence. Moving and editing large blocks of nucleotide text by hand however introduces human error and precludes any reproducibility.</p>
    <p>The software outlined here, “Scaffolder,” aims to address these problems of reproducibility by creating a file syntax and software framework for editing a genome scaffold. Scaffolder uses a specific file format to define how contigs are joined, additional sequences are inserted, and for the specification of unknown regions. This syntax allows a scaffold to be updated by simply editing the scaffold file. As such, Scaffolder facilitates a reproducible finishing process and provides a concise overview of how the final genomic scaffold was constructed.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <sec>
      <title>Code and dependencies</title>
      <p>Scaffolder is written in the Ruby programming language and tested against versions 1.8.7 and 1.9.2 [<xref ref-type="bibr" rid="B18">18</xref>]. The Scaffolder package is split into two libraries. The first called “scaffolder” which provides the core Scaffolder application programming interface (API). The second library “scaffolder-tools” provides the Scaffolder command line interface (CLI).</p>
      <p>Unit tests were implemented to maintain individual elements of the source code during development and were written using the Shoulda and RSpec [<xref ref-type="bibr" rid="B19">19</xref>] libraries. Integration tests were written to test the Scaffolder software interface as a whole and were written using the Cucumber library [<xref ref-type="bibr" rid="B19">19</xref>].</p>
      <p>The Scaffolder source code is documented using the Yard library [<xref ref-type="bibr" rid="B20">20</xref>]. Unix manual pages for the command line were generated using the Ronn library [<xref ref-type="bibr" rid="B21">21</xref>]. The manipulation of biological sequences in Scaffolder uses the BioRuby library [<xref ref-type="bibr" rid="B22">22</xref>]. A full list of the software dependencies in Scaffolder can be found in the Gemfile in the root of each source code directory.</p>
    </sec>
    <sec>
      <title>Scaffold file syntax</title>
      <p>The choice of nucleotide sequences comprising the scaffold is specified using the YAML syntax [<xref ref-type="bibr" rid="B23">23</xref>]. YAML is a data format using whitespace and indentation to produce a machine readable structure. As YAML is a standardised data format, third-party developers have the option to generate a genome scaffold using any programming language for which a YAML library exists. The YAML website lists current parsers for languages including C/C++, Ruby, Python, Java, Perl, C#/.NET, PHP, and JavaScript. In addition to being widely supported, YAML-formatted scaffold files can be validated for correct syntax using third-party tools such as Kwalify [<xref ref-type="bibr" rid="B24">24</xref>].</p>
      <p>Initial sequencing data assembly may result in an incomplete genome build. Adding further sequences from either PCR or computational methods also means that genome scaffolding may be an on-going process. The scaffold file should therefore be simple to update manually in addition to being computationally tractable. This requirement was also best suited to YAML syntax which is human-readable and simple to edit in a standard text editor.</p>
      <p>The scaffold file takes the form of a list of entries. Each entry corresponds to a region of sequence used in the final scaffold sequence. Each entry in the scaffold file may have attributes that define whether a sub-sequence or the reverse complement of the sequence should be used. The types of attributes available, and an example scaffold file are outlined in the Results section.</p>
      <p>The input data for Scaffolder are nucleotide sequences in FASTA format file. These nucleotide sequences can be of any length and may be individual reads, assembled contigs or contigs which have been joined into larger scaffolds. The case in which Scaffolder may be most useful is using the contigs and scaffolded contigs, combined with additional gap filling sequences produced by PCR or in silico methods as outlined in the Background.</p>
    </sec>
  </sec>
  <sec sec-type="results">
    <title>Results</title>
    <sec>
      <title>Scaffolder simplifies genome finishing</title>
      <p>The Scaffolder software facilitates reproducibly joining nucleotide sequences together into a single contiguous scaffolded super-sequence. Plain-text scaffold files written in YAML specify how these sequences should be joined. The Scaffolder software is used to generate the scaffold sequence from these instructions. In addition to specifying which contigs are required, the scaffold file allows the contigs to be edited into smaller sub-sequences or reverse complemented if necessary. Each scaffold file represents one scaffolded nucleotide sequence and as such separate scaffolds should be defined in separate files.</p>
      <p>The process of genome finishing may involve producing additional oligonucleotide sequences to fill unknown regions in a scaffold. The Scaffolder format provides functionality to use these additional insert sequences to fill gaps. These inserts can also be treated in the same manner as larger contig sequences: trimmed and/or reverse complemented to match the corresponding gap region size and orientation.</p>
      <p>The distances between contigs may be estimated from paired-read data or from mapping the contigs to a reference genome. These inter-contig gap regions are useful to join separate sequences together by the estimated distance. The scaffold file allows for the specification of such unresolved regions by inserting regions of ‘N’ nucleotides into the scaffold. The use of these regions in the scaffold indicates the unresolved regions in the build and their approximate size.</p>
      <p>The nucleotide sequences used in the scaffold are maintained as a separate FASTA file: the nucleotide sequences are referenced in the scaffold using the first word from the FASTA header of the corresponding sequence. Maintaining the nucleotide sequences in a separate file preserves the unedited sequence and decouples the data from the specification of how it should be used to produce the genome sequence.</p>
    </sec>
    <sec>
      <title>Defining a scaffold as a text file</title>
      <p>The scaffold file is written using the YAML syntax and an example is shown in Figure <xref ref-type="fig" rid="F1">1</xref>. This file illustrates the text attributes used to describe a scaffold and how the sequences are correspondingly joined together in the genome build. The basic layout of the scaffold file is a list of entries, where each entry corresponds to a region of sequence in the generated scaffold super-sequence.</p>
      <fig id="F1" position="float">
        <label>Figure 1</label>
        <caption>
          <p><bold>Example of Scaffolder File and the Resulting Build An example scaffold file written using the YAML syntax</bold>[<xref ref-type="bibr" rid="B1">1</xref>]<bold>(left) and the resulting putative scaffold sequence (right).</bold> The scaffold contains three entries and two inserts. Each entry in the scaffold file text is delimited by a ‘-’ on a new line and highlighted using separate colours. The scaffold diagram on the right is not to scale and instead illustrates how the scaffold sequences are joined.</p>
        </caption>
        <graphic xlink:href="1751-0473-7-4-1"/>
      </fig>
    </sec>
    <sec>
      <title>Simple sequence region</title>
      <p>The first line of the scaffold file in Figure <xref ref-type="fig" rid="F1">1</xref> begins with three dashes to indicate the start of a YAML-formatted document. The first entry (highlighted in green) begins with a dash character ‘-’ to denote an entry in the YAML list. This is a requirement of the YAML format: each entry begins with a dash line. The next line is indented by two spaces where whitespace is used to group similar attributes together. The “sequence” tag indicates that this entry corresponds to a sequence in the FASTA file and the following line indicates the name of this sequence using the “source” tag. The first word of the FASTA header is used to identify which sequence is selected from the file. Together these three lines describe the first entry in the scaffold as a simple sequence using a FASTA entry named ‘sequence1’. On the right hand side of Figure <xref ref-type="fig" rid="F1">1</xref> this produces the first region in the scaffold, also shown in green.</p>
    </sec>
    <sec>
      <title>Unresolved sequence region</title>
      <p>The second entry in the scaffold, highlighted in orange, is identified by the “unresolved” tag, indicating a region of unknown sequence but known length. The second line specifies the size of this unknown region. In this example this entry produces a region of 20 ‘N’ characters in the scaffold.</p>
    </sec>
    <sec>
      <title>Trimmed sequence region with multiple inserts</title>
      <p>The last entry in the scaffold, highlighted in blue, adds a FASTA entry named ‘sequence2’ to the scaffold. This entry demonstrates how this sequence may be manipulated prior to addition to the scaffold. The ‘start’ and ‘stop’ tags trim the sequence to these coordinates inclusively. The “reverse” tag also instructs Scaffolder to reverse complement the sequence. In the putative scaffold shown in Figure <xref ref-type="fig" rid="F1">1</xref> this completes the sequence.</p>
      <p>This final entry in the scaffold uses the “inserts” tag to add additional regions of sequence. These inserts are also added as a YAML list, with each insert beginning with a dash. The first insert, shown in purple, uses similar attributes to that of a sequence entry; the reverse, start and stop tags are used to trim and reverse complement the insert. Similarly the ‘source’ tag identifies the corresponding FASTA sequence as ‘insert1’. The “open” and “close” tags are specific to inserts and determine where the insert is added in the enclosing sequence. The region of the sequence inside these coordinates is inclusively replaced by the specified insert sequence. This is visualised in the putative scaffold in Figure <xref ref-type="fig" rid="F1">1</xref> by the black lines bisecting the blue sequence.</p>
      <p>The next insert, shown in brown, is specified using only the ‘open’ tag. This illustrates that only one of either the ‘open’ or ‘close’ tags is required when adding an insert sequence. If only one of the ‘open’ or ‘close’ tags is used the corresponding opposing ‘open’/‘close’ coordinate is calculated from the length of the insert FASTA sequence. This allows inserts to bridge into, and partially fill, gap regions without requiring an end coordinate position.</p>
    </sec>
    <sec>
      <title>Scaffolder software interface</title>
      <p>Scaffolder provides a standardised set of Ruby classes and methods (API) for interacting with the scaffold. This allows Scaffolder to be integrated into existing genomics workflows or used with Ruby build tools such as Rake. In addition Scaffolder provides a command line interface (CLI) to validate the scaffold file and build the draft super sequence. The Scaffolder CLI behaves as a standard Unix tool and returns appropriate exit codes and manual pages. The use of both these Scaffolder interfaces is outlined in detail on the Scaffolder website (<ext-link ext-link-type="uri" xlink:href="http://next.gs">http://next.gs</ext-link>). This website provides a “getting started” guide as an introduction to using Scaffolder to build a genome scaffold.</p>
    </sec>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>Scaffolding an incomplete genome assembly requires joining contigs and additional gap-filling sequences using a combination of computational and laboratory methods. The process of manually editing a scaffold is inherently hard to reproduce and introduces irreproducible edits and/or human error. In respect to this the aims of the Scaffolder software are twofold: 1) to provide software that is easy to install and simplifies the task of genome finishing; and 2) to facilitate reproducibility in the scaffolding and finishing stage of a genome project. Scaffolder uses a minimal and compact syntax to describe how a genome scaffold sequence should be generated. This syntax is simple to write and edit whilst being succinct and readable.</p>
    <p>AGP is a similar format for describing scaffolds. This format can be used to describe contig order and N-filled gap regions in a scaffold. The advantage of the AGP format is that each contig entry is defined on a single line which allows searching the scaffold using Unix line-based tools. The Scaffolder format in contrast is written in the standardised YAML format and therefore accessible to the many languages which provide parsers to this format. The Scaffolder format is provided with a tool explicitly to produce the FASTA sequence of scaffold specified by the file. The Scaffolder format further provides functions for trimming and replacing regions of sequence using inserts.</p>
    <p>Constructing a genome by specifying the scaffold organisation in text file makes generating a scaffold super sequence both reproducible and deterministic for the same file and set of FASTA sequences. In comparison, joining large nucleotide sequences by hand cannot be reliably reproduced, while the scaffold file also provides a human readable description of how the scaffold is constructed. Configuring the final sequence in the scaffold file means the build is easier to edit, once constructed.</p>
    <p>An example use case for Scaffolder is a combination of computational and manual editing of a genome scaffold. We have used Scaffolder in our own genome projects to create an initial scaffold from computationally parsing the output of in silico scaffolding tools into YAML. This scaffold was then manually updated as the scaffold was finished with additional gap-filling sequences generated in the laboratory. This is example of the Scaffolder format being both computationally tractable while being simple to edit manually. The YAML text format also allows comparison of differences between scaffold builds using standard Unix tools such as diff. This therefore makes scaffold files amenable to storage in version control systems and allows genome finishers to use methods similar to those in software development.</p>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusions</title>
    <p>Scaffolder is software, written in Ruby, aimed at both bioinformaticians and biologists familiar with the command line who wish to build a genome scaffold from a set of nucleotide sequences. The Scaffolder file format maintains the genome scaffold as a concise and readable text representation that allows third-parties to see how the genome sequence was scaffolded. This file format also allows a broad overview of which sequences were included and how they are ordered in the genome scaffold, something not possible to deduce from a megabase-length string of nucleotide characters. Scaffolder furthers increases the ease of reproducibility in genome projects by allowing the scaffold super-sequence to be reliably reproduced from the same scaffold file. The YAML syntax for writing the scaffold file is also standardised and simple to manipulate programmatically. This thereby means the scaffolding process follows the Unix tenet of “If your data structures are good enough, the algorithm to manipulate them should be trivial.”</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p><bold>Project name:</bold> Scaffolder v0.4.4, Scaffolder Tools v0.1.3</p>
    <p>
      <bold>Project home page:</bold>
      <ext-link ext-link-type="uri" xlink:href="http://next.gs">http://next.gs</ext-link>
    </p>
    <p><bold>Operating system:</bold> Platform Independent. Tested on Mac OS X and Ubuntu. Programming language: Ruby 1.8.7 or 1.9.2</p>
    <p><bold>Other requirements:</bold> RubyGems package management software and the following libraries: BioRuby 1.4.x, confligliere 0.1.x, ronn 0.7.x. A full list of development dependencies can be found in the Gemfile in the base directory of each project.</p>
    <p><bold>License:</bold> MIT</p>
    <p><bold>Any restrictions to use by non-academics:</bold> None</p>
  </sec>
  <sec>
    <title>Abbreviations</title>
    <p>API, Application programming interface; CLI, Command line interface; PCR, Polymerase chain reaction; YAML, YAML ain’t markup language [23].</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare no competing interests.</p>
  </sec>
  <sec>
    <title>Authors’ contributions</title>
    <p>MDB developed and maintains the Scaffolder tool. MDB and HAB wrote the manuscript. All authors have read and approved the manuscript.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>This work was supported by the National Institute for Health: IDeA Network of Biomedical Research Excellence (KY-INBRE) grant (NIH 2P20 RR016481-09) and the NIH R15 AREA Program grant (R15GM079775).</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Miller</surname>
          <given-names>JR</given-names>
        </name>
        <name>
          <surname>Koren</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Sutton</surname>
          <given-names>G</given-names>
        </name>
        <article-title>Assembly algorithms for next-generation sequencing data</article-title>
        <source>Genomics</source>
        <year>2010</year>
        <volume>95</volume>
        <issue>6</issue>
        <fpage>315</fpage>
        <lpage>327</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ygeno.2010.03.001</pub-id>
        <pub-id pub-id-type="pmid">20211242</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <article-title>Bioinformatics challenges of new sequencing technology</article-title>
        <source>Trends Genet</source>
        <year>2008</year>
        <volume>24</volume>
        <issue>3</issue>
        <fpage>142</fpage>
        <lpage>149</lpage>
        <pub-id pub-id-type="doi">10.1016/j.tig.2007.12.006</pub-id>
        <pub-id pub-id-type="pmid">18262676</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Genome assembly reborn: recent computational challenges</article-title>
        <source>Brief Bioinform</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>4</issue>
        <fpage>354</fpage>
        <lpage>366</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbp026</pub-id>
        <pub-id pub-id-type="pmid">19482960</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Branscomb</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Predki</surname>
          <given-names>P</given-names>
        </name>
        <article-title>On the high value of low standards</article-title>
        <source>J Bacteriol</source>
        <year>2002</year>
        <volume>184</volume>
        <issue>23</issue>
        <fpage>6406</fpage>
        <lpage>6409</lpage>
        <pub-id pub-id-type="doi">10.1128/JB.184.23.6406-6409.2002</pub-id>
        <pub-id pub-id-type="pmid">12426325</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Parkhill</surname>
          <given-names>J</given-names>
        </name>
        <article-title>The importance of complete genome sequences</article-title>
        <source>Trends Microbiol</source>
        <year>2002</year>
        <volume>10</volume>
        <issue>5</issue>
        <fpage>219</fpage>
        <lpage>220</lpage>
        <pub-id pub-id-type="doi">10.1016/S0966-842X(02)02353-3</pub-id>
        <pub-id pub-id-type="pmid">11973153</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Fraser</surname>
          <given-names>CM</given-names>
        </name>
        <name>
          <surname>Eisen</surname>
          <given-names>JA</given-names>
        </name>
        <name>
          <surname>Nelson</surname>
          <given-names>KE</given-names>
        </name>
        <name>
          <surname>Paulsen</surname>
          <given-names>IT</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <article-title>The value of complete microbial genome sequencing (you get what you pay for)</article-title>
        <source>J Bacteriol</source>
        <year>2002</year>
        <volume>184</volume>
        <issue>23</issue>
        <fpage>6403</fpage>
        <lpage>6405</lpage>
        <pub-id pub-id-type="doi">10.1128/JB.184.23.6403-6405.2002</pub-id>
        <pub-id pub-id-type="pmid">12426324</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nagarajan</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Cook</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Di Bonaventura</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Ge</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Richards</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Bishop-Lilly</surname>
          <given-names>KA</given-names>
        </name>
        <name>
          <surname>DeSalle</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Read</surname>
          <given-names>TD</given-names>
        </name>
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Finishing genomes with limited resources: lessons from an ensemble of microbial genomes</article-title>
        <source>BMC Genomics</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>242+</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-11-242</pub-id>
        <pub-id pub-id-type="pmid">20398345</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Gordon</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Desmarais</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Green</surname>
          <given-names>P</given-names>
        </name>
        <article-title>Automated finishing with autofinish</article-title>
        <source>Genome Res</source>
        <year>2001</year>
        <volume>11</volume>
        <issue>4</issue>
        <fpage>614</fpage>
        <lpage>625</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.171401</pub-id>
        <pub-id pub-id-type="pmid">11282977</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Richter</surname>
          <given-names>DC</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>SC</given-names>
        </name>
        <name>
          <surname>Huson</surname>
          <given-names>DH</given-names>
        </name>
        <article-title>OSLay: optimal syntenic layout of unfinished assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <issue>13</issue>
        <fpage>1573</fpage>
        <lpage>1579</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm153</pub-id>
        <pub-id pub-id-type="pmid">17463020</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Zhao</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Zhao</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Bryant</surname>
          <given-names>DA</given-names>
        </name>
        <article-title>A new pheromone trail-based genetic algorithm for comparative genome assembly</article-title>
        <source>Nucleic Acids Res</source>
        <year>2008</year>
        <volume>36</volume>
        <issue>10</issue>
        <fpage>3455</fpage>
        <lpage>3462</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkn168</pub-id>
        <pub-id pub-id-type="pmid">18445633</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Assefa</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Keane</surname>
          <given-names>TM</given-names>
        </name>
        <name>
          <surname>Otto</surname>
          <given-names>TD</given-names>
        </name>
        <name>
          <surname>Newbold</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Berriman</surname>
          <given-names>M</given-names>
        </name>
        <article-title>ABACAS: algorithm-based automatic contiguation of assembled sequences</article-title>
        <source>Bioinformatics (Oxford, England)</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>15</issue>
        <fpage>1968</fpage>
        <lpage>1969</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp347</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Mulyukov</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Pevzner</surname>
          <given-names>PA</given-names>
        </name>
        <article-title>EULER-PCR: finishing experiments for repeat resolution</article-title>
        <source>Pac Symp Biocomput</source>
        <year>2002</year>
        <volume>7</volume>
        <fpage>199</fpage>
        <lpage>210</lpage>
        <pub-id pub-id-type="pmid">11928476</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Koren</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Miller</surname>
          <given-names>JR</given-names>
        </name>
        <name>
          <surname>Walenz</surname>
          <given-names>BP</given-names>
        </name>
        <name>
          <surname>Sutton</surname>
          <given-names>G</given-names>
        </name>
        <article-title>An algorithm for automated closure during assembly</article-title>
        <source>BMC Bioinforma</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>457+</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-457</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Tsai</surname>
          <given-names>IJ</given-names>
        </name>
        <name>
          <surname>Otto</surname>
          <given-names>TD</given-names>
        </name>
        <name>
          <surname>Berriman</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Improving draft assemblies by iterative mapping and assembly of short reads to eliminate gaps</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>4</issue>
        <fpage>R41+</fpage>
        <pub-id pub-id-type="pmid">20388197</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dayarian</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Michael</surname>
          <given-names>TP</given-names>
        </name>
        <name>
          <surname>Sengupta</surname>
          <given-names>AM</given-names>
        </name>
        <article-title>SOPRA: Scaffolding algorithm for paired reads via statistical optimization</article-title>
        <source>BMC Bioinforma</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>345+</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-345</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Boetzer</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Henkel</surname>
          <given-names>CV</given-names>
        </name>
        <name>
          <surname>Jansen</surname>
          <given-names>HJ</given-names>
        </name>
        <name>
          <surname>Butler</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Pirovano</surname>
          <given-names>W</given-names>
        </name>
        <article-title>Scaffolding pre-assembled contigs using SSPACE</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>4</issue>
        <fpage>578</fpage>
        <lpage>579</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq683</pub-id>
        <pub-id pub-id-type="pmid">21149342</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Kosack</surname>
          <given-names>DS</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <article-title>Hierarchical scaffolding with Bambus</article-title>
        <source>Genome Res</source>
        <year>2004</year>
        <volume>14</volume>
        <fpage>149</fpage>
        <lpage>159</lpage>
        <pub-id pub-id-type="pmid">14707177</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="other">
        <name>
          <surname>Matsumoto</surname>
          <given-names>Y</given-names>
        </name>
        <source>The Ruby Programming Language</source>
        <comment>[<ext-link ext-link-type="uri" xlink:href="http://www.ruby-lang.org/">http://www.ruby-lang.org/</ext-link>]</comment>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="book">
        <name>
          <surname>Chelimsky</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Astels</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Helmk</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>North</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Dennis</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Hellesoy</surname>
          <given-names>A</given-names>
        </name>
        <source>The RSpec Book: Behaviour Driven Development with Rspec</source>
        <year>2010</year>
        <publisher-name>Friends. Pragmatic Bookshelf, Cucumber</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="other">
        <name>
          <surname>Segal</surname>
          <given-names>L</given-names>
        </name>
        <source>YARD: A Ruby Documentation Tool</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://yardoc.org/">http://yardoc.org/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="other">
        <name>
          <surname>Tomayko</surname>
          <given-names>R</given-names>
        </name>
        <source>Ronn manual page authoring tool</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://rtomayko.github.com/ronn/">http://rtomayko.github.com/ronn/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Goto</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Prins</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Nakao</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Bonnal</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Aerts</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Katayama</surname>
          <given-names>T</given-names>
        </name>
        <article-title>BioRuby: bioinformatics software for the Ruby programming language</article-title>
        <source>Bioinformatics (Oxford, England)</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>20</issue>
        <fpage>2617</fpage>
        <lpage>2619</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq475</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="other">
        <name>
          <surname>Evans</surname>
          <given-names>CC</given-names>
        </name>
        <source>YAML: a human friendly data serialization standard for all programming languages</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.yaml.org/">http://www.yaml.org/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="other">
        <collab>Kuwata Lab</collab>
        <source>Kwalify: schema validator and data binding for YAML/JSON</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.kuwata-lab.com/kwalify/">http://www.kuwata-lab.com/kwalify/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
