<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4581417</article-id>
    <article-id pub-id-type="publisher-id">764</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-015-0764-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Metassembler: merging and optimizing de novo genome assemblies</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Wences</surname>
          <given-names>Alejandro Hernandez</given-names>
        </name>
        <address>
          <email>alhernan@cshl.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Schatz</surname>
          <given-names>Michael C.</given-names>
        </name>
        <address>
          <email>mschatz@cshl.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><label/>Simons Center for Quantitative Biology, Cold Spring Harbor Laboratory, Cold Spring Harbor, NY USA </aff>
      <aff id="Aff2"><label/>Centro de Ciencias Genómicas, Universidad Nacional Autónoma de México, Cuernavaca, Morelos México </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>24</day>
      <month>9</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>24</day>
      <month>9</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="ppub">
      <year>2015</year>
    </pub-date>
    <volume>16</volume>
    <elocation-id>207</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>7</month>
        <year>2015</year>
      </date>
      <date date-type="accepted">
        <day>1</day>
        <month>9</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Wences and Schatz. 2015</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p>Genome assembly projects typically run multiple algorithms in an attempt to find the single best assembly, although those assemblies often have complementary, if untapped, strengths and weaknesses. We present our metassembler algorithm that merges multiple assemblies of a genome into a single superior sequence. We apply it to the four genomes from the Assemblathon competitions and show it consistently and substantially improves the contiguity and quality of each assembly. We also develop guidelines for meta-assembly by systematically evaluating 120 permutations of merging the top 5 assemblies of the first Assemblathon competition. The software is open-source at <ext-link ext-link-type="uri" xlink:href="http://metassembler.sourceforge.net">http://metassembler.sourceforge.net</ext-link>.</p>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s13059-015-0764-4) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Background</title>
    <p>Next-generation high-throughput DNA sequencing technologies are being used to tackle an increasing list of biological questions [<xref ref-type="bibr" rid="CR1">1</xref>]. One of the most fundamental uses is for de novo genome assembly, where the goal is to reconstruct the genome sequence of an organism from high-throughput sequencing data, while dealing with their characteristic short reads and error rates [<xref ref-type="bibr" rid="CR2">2</xref>]. Genome assembly is fundamental to computational biology, as a successful assembly is needed to study the gene content, regulatory regions, or evolutionary relationships in a genome, along with several other questions. As such, it is critical that researchers can create the best possible assembly from the available data.</p>
    <p>While de novo genome assembly has been studied for more than 20 years, the problem is far from being solved. The available assembly algorithms vary most significantly in the techniques and heuristics applied to assemble repetitive sequences and resolve errors present, especially in response to the ever-changing landscape of available biotechnologies [<xref ref-type="bibr" rid="CR2">2</xref>–<xref ref-type="bibr" rid="CR4">4</xref>]. The central challenge in genome assembly is that repetitive sequences can give rise to false or ambiguous overlaps, leading to the termination of contigs and/or the introduction of errors [<xref ref-type="bibr" rid="CR5">5</xref>]. Indeed, all assemblers can assemble non-repetitive error-free data with ease.</p>
    <p>As a result, the performance of different de novo genome assembly algorithms can vary greatly on the same dataset, although it has been repeatedly demonstrated that no single assembler is optimal in every possible quality metric [<xref ref-type="bibr" rid="CR6">6</xref>–<xref ref-type="bibr" rid="CR8">8</xref>]. The most widely used metrics for evaluating an assembly include 1) contiguity statistics such as scaffold and contig N50 size, 2) accuracy statistics such as the number of structural errors found when compared with an available reference genome (GAGE (Genome Assembly Gold Standard Evaluation) evaluation tool [<xref ref-type="bibr" rid="CR8">8</xref>]), 3) presence of core eukaryotic genes (CEGMA (Core Eukaryotic Genes Mapping Approach) [<xref ref-type="bibr" rid="CR9">9</xref>]) or, if available, transcript mapping rates, and 4) the concordance of the sequence with remapped paired-end and mate-pair reads (REAPR (Recognising Errors in Assemblies using Paired Reads) [<xref ref-type="bibr" rid="CR10">10</xref>], assembly validation [<xref ref-type="bibr" rid="CR11">11</xref>], or assembly likelihood [<xref ref-type="bibr" rid="CR12">12</xref>]).</p>
    <p>The performance of different assemblers, as measured by these metrics, has recently been systematically compared in the two international Assemblathon competitions [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR7">7</xref>], as well as other evaluations, where different researchers generated the best possible assemblies of the same sample using different algorithms and parameters. The first Assemblathon competition used a simulated genome derived from a mutated version of human chromosome 13, thus enabling evaluation directly with the truth. The second Assemblathon competition used real data from three species — a fish (<italic>Maylandia zebra</italic>), a bird (<italic>Melopsittacus undulatus</italic>), and a snake (<italic>Boa constrictor constrictor</italic>) — whose complete reference genomes are unavailable and therefore relied on reference-free assembly evaluation metrics. Dozens of assemblies were generated for each species, and the results of both competitions show that the different algorithms have varying strengths and weaknesses; that is, a single assembly may maximize a subset of evaluation metrics but no single assembly or assembler maximized all the metrics at once in every dataset. These projects even demonstrated that different parameter settings of a single algorithm could significantly vary the results.</p>
    <p>To overcome this challenge and make best use of the available algorithms and data, we present our metassembler algorithm for merging and optimizing multiple assemblies together into a single superior assembly. The metassembly combines the locally best sequence from all input assemblies at each region of the genome, and merges them into a final sequence as good as or superior to the constituent assemblies. The merging is performed with an iterative, progressive approach where the current metassembled sequence is aligned and revised pairwise with each available assembly. After aligning the current metassembly sequence with the next assembly, it evaluates any conflicts and selects the locally best sequence as assessed by the compression–expansion (CE) statistic proposed by Zimin et al. [<xref ref-type="bibr" rid="CR13">13</xref>]. Unlike previous works including the assembly reconciliation algorithm [<xref ref-type="bibr" rid="CR13">13</xref>], GAM-NGS (Genomic Assemblies Merger for Next Generation Sequencing) [<xref ref-type="bibr" rid="CR14">14</xref>], or GARM [<xref ref-type="bibr" rid="CR15">15</xref>], our approach works with current high-throughput sequence data and is designed to merge multiple assemblies all together. Our algorithm also has the capability to close more types of scaffolding gaps, and a scaffolding function whenever the alignment information and the local mate-pair reads support such modifications (see benchmarking results below). The algorithm also works in a purely de novo fashion, unlike other approaches such as MAIA [<xref ref-type="bibr" rid="CR16">16</xref>] that require a closely related genome. Using a closely related genome can be useful when one is available, although great care must be taken to not mis-assemble the sequences when there are true biological differences.</p>
    <p>We tested our algorithm on the four genomes of the Assemblathon competitions, and demonstrate marked improvement in the contiguity and accuracy of each. A critical aspect to our merging algorithms is determining the order in which the input assemblies should be evaluated. To address this question, we systematically computed the metassembly of all possible 120 permutations of the top five assemblies of the Assemblathon 1 competition. Our algorithm achieved an average improvement of 4.6 Mb for scaffold N50 size while improving or maintaining quality statistics such as the number of duplicated sequences and genomic rearrangements. For the Assemblathon 2 competition, we metassembled the top six assemblies for each of the three species available. Similar improvements were obtained by significantly increasing contiguity statistics (contig and scaffold N50 size) while maintaining overall quality. These results show the compelling nature of the metassembly algorithm for all future genome assembly projects, and we have released the software and documentation to the community open-source at [<xref ref-type="bibr" rid="CR17">17</xref>] under a BSD license.</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <p>We applied our metassembly algorithm to four genomes with multiple publicly available assemblies: the Asssemblathon 1 competition genome, and the three genomes (snake, bird, and fish) of the Assemblathon 2 competition. For each dataset, we compared overall contiguity statistics such as the N50 size and total span at each merging step, the change in CE statistic at positions where merges were made, and various accuracy metrics depending or not if a reference genome was available.</p>
    <sec id="Sec3">
      <title>Metassembly of the Assemblathon 1 genome</title>
      <p>The Assemblathon 1 genome consists of a pair of simulated haploid genomes generated with the Evolver evolution tool [<xref ref-type="bibr" rid="CR18">18</xref>] using the human chromosome 13 sequence and annotation as input. Paired-end and mate-pair reads were then simulated from the resulting 112 Mbp genome, which were then presented as an international competition to create the best possible assembly of the data. More than 40 entries were submitted and evaluated by an ensemble of quality metrics. For our analysis, we focused on the top five assemblies reported by the Assemblathon 1 overall rank shown in Table S1 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
      <p>We systematically metassembled all 120 possible permutations of the five input assemblies, using the 2.5-kbp mate-pair library to evaluate the CE status of each assembly (Fig. <xref rid="Fig1" ref-type="fig">1</xref>; Table S1, Figure S1, and Note S1 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>). Because the genome has an exact reference available, we were able to compute ten different quality metrics, including the number of major structural errors and the corrected scaffold and contig N50 sizes, using the GAGE assembly evaluation tool. The corrected scaffold N50 size and corrected contig N50 size are computed by splitting the input sequences at places where significant errors are found relative to the reference assembly, and then computing the N50 sizes of the remaining sequences.<fig id="Fig1"><label>Fig. 1</label><caption><p>Assemblathon 1 metassembly accuracy. Assembly contiguity and accuracy metrics are plotted at each merging step for all possible permutations of the five input assemblies: scaffold N50 (<bold>a</bold>), corrected contig N50 (<bold>b</bold>), duplicated reference bases (<bold>c</bold>), deleted reference bases (<bold>d</bold>), translocations (<bold>e</bold>), and relocations (<bold>f</bold>). For all plots, the x-axis represents the number of input assemblies being metassembled, with 1 being the starting assembly. The two <italic>horizontal red lines</italic> mark the final maximum and minimum value of the metric across all permutations. Most of the permutations are plotted in <italic>gray</italic>, while permutations of particular note are plotted with different colors: the <italic>pink line</italic> represents the permutation that has the maximum value in the final metassembly while the <italic>dark blue line</italic> represents the permutation with the minimum value. Also, the <italic>green line</italic> represents the permutation resulting from ordering the input assemblies by the overall rank reported in the Assemblathon 1 paper (Broad-BGI-WTSI-DOEJGI-CSHL), the <italic>light blue line</italic> represents the permutation obtained by ordering the input assemblies by scaffold N50 size (DOEJGI-Broad-WTSI-CSHL-BGI) while the <italic>brown line</italic> represents the order by contig N50 size (BGI-Broad-CSHL-WTSI-DOEJGI). <italic>Comp Ref Bases</italic> compressed reference bases, <italic>Dup Ref Bases</italic> duplicated reference bases</p></caption><graphic xlink:href="13059_2015_764_Fig1_HTML" id="MO1"/></fig></p>
      <p>On average, 138.9 scaffold merges were made across all permutations, and 2288 gaps and 541 indels were also processed (maximum of 5899 and 1178, respectively). As shown in Fig. <xref rid="Fig1" ref-type="fig">1a</xref> (and Figure S1a in Additional file <xref rid="MOESM1" ref-type="media">1</xref>), scaffold NG50 sizes (N50 sizes relative to the reference genome size) consistently increase using any permutation of the input assemblies: the mean difference in scaffold NG50 size between the final metassembly and the starting assembly is 4.6 Mb, with a maximum improvement of 13.5 Mb for the BGI-Broad-CSHL-DOEJGI-WTSI permutation (starting with the BGI assembly as the primary assembly and adding the remaining assemblies in that order). Contig NG50 sizes also improve substantially with a mean increment of 17.3 kb and a maximum of 70 kb (Figure S1c in Additional file <xref rid="MOESM1" ref-type="media">1</xref>). Furthermore, GAGE corrected scaffold NG50 size (Scf GC-NG50; Figure S1b in Additional file <xref rid="MOESM1" ref-type="media">1</xref>) and corrected contig NG50 size (Ctg GC-NG50; Fig. <xref rid="Fig1" ref-type="fig">1b</xref>) are also substantially increased with a mean difference between the final metassembly and the initial assembly of 701 kb and 1.5 kb, respectively. We also evaluated the change in CE statistic at positions where modifications to the primary assembly were made and find the vast majority of events have a positive difference. This indicates that the CE statistic is reduced closer to zero, further supporting that our algorithm is capable of correcting such events without introducing errors (Figure S2 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p>These results imply that, during the metassembly process, the scaffolds are becoming much larger and more contiguous without sacrificing contig or scaffold quality. The other accuracy metrics further support this conclusion: the number of duplicated reference bases and the number of deleted reference bases (Fig. <xref rid="Fig1" ref-type="fig">1c, d</xref>) significantly decrease with a mean difference of −1 Mb and −460 kb, respectively, while the number of translocations (mean difference −5.4) and relocations (mean difference 4) do not show any significant change. The complete table of metrics for all metassemblies and their corresponding boxplots are included in the Note S2 in Additional files <xref rid="MOESM1" ref-type="media">1</xref>, <xref rid="MOESM2" ref-type="media">2</xref>, <xref rid="MOESM3" ref-type="media">3</xref> and <xref rid="MOESM4" ref-type="media">4</xref>.</p>
      <p>Finally, we also used the Assemblathon 1 dataset to compare the performance of the metassembler against two other leading assembly reconciliation algorithms, GAM-NGS and GARM. We ran GAM-NGS sequentially, using both paired-end and mate-pair libraries, in order to compute all 120 possible merging permutations of the input assemblies for two different sets of input parameters and evaluated the final assemblies using GAGE. As shown in Figure S3 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>, the GAGE-reported metrics for the GAM-NGS results do not improve significantly for any set of input parameters, and in many instances do not change at all. The same result is seen if we only use mate-pair data (not shown). Overall, our metassembler algorithm outperforms GAM-NGS in nearly every permutation and metric. The overall Z score comparison (Figure S3j in Additional file <xref rid="MOESM1" ref-type="media">1</xref>) shows metassembler to be superior by several point values, corresponding to both greatly improved contiguity and accuracy. We also attempted several times to run the GARM pipeline on the same data but the program repeatedly exhausted all 500 GB of RAM available and failed to execute. In contrast, metassembler required less than 3 GB of RAM at its peak (Note S1 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>).</p>
    </sec>
    <sec id="Sec4">
      <title>Metassembly ordering</title>
      <p>We studied the dependency between the order in which the assemblies are metassembled and the quality of the final metassembly by evaluating the final metassembly of all input permutations. To do so, we computed the Z score of assembly quality, proposed in the Assemblathon 2 paper, which aggregates and summarizes all of the different metrics into a single value based on the mean and standard deviation of the individual metrics. The boxplots shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref> summarize the distribution of overall Z scores for all the metassemblies starting with each of the input assemblies. This shows that our algorithm is capable of significantly improving overall Z scores with a mean increment of 14.5 standard deviations, but also strongly suggests that quality and contiguity of the final assembly is dependent on the order of merging and which assembly is used first.<fig id="Fig2"><label>Fig. 2</label><caption><p>Boxplots of overall Z scores for Assemblathon 1 metassemblies grouped by initial assembly. <italic>Blue circles</italic> indicate the Z score of the corresponding initial assembly. Below each circle, the corresponding mean difference in Z scores between the final metassembly and the initial assembly (<italic>μ∆</italic>) is shown. The global mean difference is also shown at the top</p></caption><graphic xlink:href="13059_2015_764_Fig2_HTML" id="MO2"/></fig></p>
      <p>This dependency could be inflated if the quality metrics were redundant or highly correlated, so we also evaluated the distribution of overall Z scores using just the subset of statistically independent metrics obtained by an independent component analysis (ICA) to select the most statistically independent metrics (Notes S3 and S4 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>). The ICA-selected subset of statistically most informative metrics were: 1) inversions, 2) compressed reference bases, 3) missing reference bases, and 4) relocations using the top 50 % components in the kurtosis distribution, plus 5) duplicated reference bases for the top 80 %. Using just these subsets of quality metrics, the same dependency between initial assembly and final overall Z score was observed (Figure S4 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p>Given that the final metassembly quality is dependent on the order in which the input assemblies are processed, we considered whether there was a simple ordering rule that would lead to the best (or nearly best) metassembly as measured by the overall Z score. We therefore correlated reference-independent metrics of the initial input assemblies, such as scaffold N50 size and contig N50 size, with the median value of their corresponding overall Z score distribution. We found that contig N50 size correlates positively with median overall Z score (r = 0.72 and permutation test <italic>p</italic> value = 0.08), while scaffold N50 does not correlate (r = −0.22). These results were reproduced when evaluating just the subset of metrics selected by the ICA; contig N50 size had a correlation of r = 0.65 with <italic>p</italic> value = 0.12, while scaffold N50 size had a correlation of r = −0.24. This shows that ordering the initial assemblies by contig N50 size should give a high quality metassembly. Indeed, the BGI-Broad-CSHL-WTSI-DOEJGI permutation (ordered by contig N50 size) falls in position 13 of the total 120 ranked metassemblies, while the permutation DOEJGI-Broad-WTSI-CSHL-BGI (ordering by scaffold N50 size) lies in position 85. The permutation ordered by Assemblathon 1 rank (Broad-BGI-WTSI-DOEJGI-CSHL) lies at position 39.</p>
    </sec>
    <sec id="Sec5">
      <title>Metassembly of the three Assemblathon 2 genomes</title>
      <p>For each of the three species in the Assemblathon 2 project we applied our algorithm to the top six assemblies as ranked by the cumulative Z score reported in the paper (Note 1b and Table S4 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>). For the fish genome, we excluded the top ranking CSHL entry and picked the lesser ranking CSHL/ALLPATHS-LG-based assembly instead, since the top ranking CSHL entry used a prototype of our metassembler algorithm. Since these genomes are much larger than the Assemblathon 1 genome and because we had already established strong rules for ordering the assemblies, we generated three metassemblies for each species: ordering the input assemblies by contig N50 size, scaffold N50 size, or Assemblathon 2 cumulative Z score (A2Z) (Table S3 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p>We evaluated the correctness and contiguity of the metassembly at each merging step using the metrics used by the Assemblathon 2 evaluation. Namely, we evaluated the presence of core eukaryotic genes using the CEGMA algorithm [<xref ref-type="bibr" rid="CR9">9</xref>], as well as the concordance of the metassembly sequence with remapped paired-end and mate-pair reads using REAPR [<xref ref-type="bibr" rid="CR10">10</xref>]. The former looks for the presence of 248 highly conserved core eukaryotic genes in the assembly sequence as a proxy for the completeness and accuracy of the assembly, especially of genes. The latter evaluates errors by aligning paired-end and mate-pair libraries and looking for regions where coverage drops or the distribution of observed fragment lengths differs from the expected distribution. It then splits the assembled sequence at places where errors are found to compute corrected scaffold N50 size (Scf RC-N50) and corrected contig N50 sizes (Ctg RC-N50). In our analysis we recomputed these relative to the estimated genome size (Scf RC-NG50 and Ctg RC-NG50, respectively). We also evaluated the CE statistic at positions where modifications to the starting assembly were made (Figure S5 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>).</p>
      <p>In all three species, the contiguity statistics are significantly improved by our metassembler algorithm (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Contig NG50 sizes increased by at least 3.9 kb and 4.4 kb for the fish and snake metassemblies, with a maximum increment of 3.98 kb and 13.8 kb, respectively. The largest increment in contig NG50 size was observed in the bird species, with an improvement ranging between 43.9 kb and 69.1 kb. Moreover, scaffold NG50 sizes improved by between 0.96 Mb and 1.4 Mb for the snake genome, and between 105 kb and 122 kb for the fish genome. For the bird species a decrement of −3.9 kb is observed for the A2Z permutation, while a maximum increment of 1.9 Mb is observed for the Scf N50 order permutation. Furthermore, the assembly quality metrics either remain unchanged or show a tendency to improve. The REAPR corrected NG50 sizes increase throughout the metassembly process, as well as the percentage of error-free bases. The number of CEGMA genes found either increases (in the bird and snake assemblies) or decreases slightly because of poor secondary assemblies (in the fish Assemblathon 2 cumulative Z score Abbrev genome). The complete results are available in Additional files <xref rid="MOESM1" ref-type="media">1</xref>, <xref rid="MOESM5" ref-type="media">5</xref>, <xref rid="MOESM6" ref-type="media">6</xref> and <xref rid="MOESM7" ref-type="media">7</xref>.<fig id="Fig3"><label>Fig. 3</label><caption><p>Assemblathon 2 metassembly contiguity and accuracy metrics. Assembly contiguity and accuracy metrics are shown at each merging step of all metassemblies for the three species. The x-axis represents the number of assemblies merged with one being the initial input assembly. <italic>Ctg</italic> contig, <italic>Scf</italic> scaffold</p></caption><graphic xlink:href="13059_2015_764_Fig3_HTML" id="MO3"/></fig></p>
      <p>These results show that our algorithm is capable of improving assembly contiguity and quality metrics with real sequence data. The fish genome shows the least improvement in scaffold N50 size probably because the secondary assemblies provide little new scaffolding information: the BCM fish genome assembly has the largest scaffold N50 size, and was the starting assembly for all three permutations attempted (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Furthermore, the number of CEGMA genes found for the fish genome slightly decreases (from 228 to 225), due to the sequence filtering done at the alignment step. The effects of this filtering could have been exacerbated by the inclusion of the SGA assembly, which has a scaffold N50 size of only 0.1 Mb compared with 1.24 Mb for the second lowest scaffold N50 size. For the other genomes, CEGMA results improve through the metassembly process, especially when the metassemblies are computed in order of the contig N50 sizes.</p>
      <p>We also ranked the input assemblies and metassemblies by overall Z score using the following metrics: scaffold NG50 size, contig NG50 size, scaffold REAPR-corrected NG50 size, contig REAPR-corrected NG50 size, percentage of error-free bases, and number of CEGMA genes found. In the fish and snake species the three metassemblies occupy the top three positions, while in the bird species the three metassemblies lie within the top four positions.</p>
      <p>Finally, in order to show that metassembler is capable of integrating information from different input assemblies, and to illustrate the power of using assemblies computed with different algorithms and heuristics, we picked the largest scaffold of the BCM fish assembly (FISH00033861) and followed the number of corrected indels and gaps closed throughout the metassembly corresponding to the Assemblathon 2 Z score ordering. As shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref>, sequences from all input assemblies is used to improve the original scaffold, to collectively close hundreds of gaps and fix dozens of mis-assemblies in this single scaffold. Moreover, some regions of the original scaffold seem to be preferentially corrected by a particular input assembly or set of input assemblies, thus showing the power of combining multiple assemblies into a single superior metassembly.<fig id="Fig4"><label>Fig. 4</label><caption><p>Metassembly of fish BCM scaffold FISH00033861. A representation of the changes made to a single scaffold throughout the metassembler pipeline is shown. Scaffold FISH00033861 of the BCM fish assembly (<italic>bottom</italic>) is taken as the starting point in the metassembly corresponding to the Assemblathon 2 Z score ordering. <italic>Vertical blue</italic> and <italic>green lines</italic> represent indel corrections and gap closures made at each merging step</p></caption><graphic xlink:href="13059_2015_764_Fig4_HTML" id="MO4"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec6" sec-type="discussion">
    <title>Discussion</title>
    <p>We have developed an algorithm capable of merging multiple assemblies generated with different algorithms, parameters, and possibly different sequence data into a single metassembly. We demonstrated the power of our algorithm in both simulated and real data over four species, 23 assemblies, and more than 100 metassemblies. Given that the final metassembly depends critically on the order in which the input assemblies are incorporated, we computed the metassembly for all 120 possible permutations to systematically explore this relationship. We found that scaffold NG50 size is improved for all permutations with a mean increase of 4.6 Mb while corrected scaffold and corrected contig NG50 sizes improve by 701 kb and 1.5 kb on average. For the Assemblathon 1 and 2 datasets we show that scaffold NG50 and contig NG50 sizes are substantially improved in all species while quality statistics remain practically unchanged or improve. These results support that our algorithm is capable of improving contiguity statistics without any loss in sequence accuracy; in fact a prototype version of this algorithm was used for our Assemblathon 2 fish submission, and was one of the highest rated algorithms in the entire competition. New ranking of the assemblathon genomes show our version would have won or been extremely competitive for all four species.</p>
    <p>These observations together indicate that combining information from multiple assemblies into a single assembly is a powerful approach towards improving assembly quality and contiguity prior to its publication or subsequent analysis. Furthermore, these results show our open-source algorithm is capable of performing such a task in a fast and accurate way. Indeed, consensus approaches, such as metassembly, are often a highly effective strategy for optimizing complex decisions, as long as the underlying algorithms can utilize independent characteristics [<xref ref-type="bibr" rid="CR19">19</xref>]. In the case of genome assembly, the metassembler algorithm synthesizes the various heuristics and techniques implemented for error correction and repeat resolution in each of the assemblers used. In this light, future work remains to develop additional error correction and repeat resolution modules that can systematically explore the range of possible algorithms for them, although care must be taken to keep the search space tractable.</p>
  </sec>
  <sec id="Sec7" sec-type="materials|methods">
    <title>Materials and methods</title>
    <p>The metassembler algorithm performs pairwise, progressive alignments to merge multiple assemblies in the order specified by the user or by some metric. The algorithm makes no assumptions on the way the input assemblies are generated, and can be applied to a set of assemblies generated with different software packages, parameters, and/or different types of data. The only data requirement is that at least one jumping library is available to evaluate the presence of compression/expansion mis-assemblies, although that data type need not been used in any or all of the assemblies.</p>
    <sec id="Sec8">
      <title>Pairwise merging process</title>
      <p>The pairwise merging process follows the basic logic of the assembly reconciliation algorithm, and uses one of the input assemblies as the “primary” assembly and the other as the “secondary” assembly that is used to add information to the primary; in particular, it is used to correct insertion/deletion errors, close gaps, and to scaffold sequences in the primary assembly. The pairwise merging process consist of four steps.</p>
      <sec id="Sec9">
        <title>Whole genome alignment</title>
        <p>The metassembler algorithm uses the <italic>nucmer</italic> program from the <italic>MUMmer</italic> package to align the two input assemblies [<xref ref-type="bibr" rid="CR20">20</xref>]. The resulting alignments are then refined using <italic>delta-filter</italic> (also part of <italic>MUMmer</italic>) to compute the one-to-one mapping between the primary and secondary assemblies. As a result, each position in the primary sequence will be uniquely mapped to the best corresponding position in the secondary as assessed by a LIS (longest increasing subsequence) maximization function weighted by the product of the length and identity of the alignment. This optimization step identifies the most significant correspondence between the two assemblies, discarding any repeat induced spurious alignment.</p>
        <p>By default our algorithm only takes into account those scaffolds present in the filtered set of alignments, i.e., it discards any sequences (scaffolds and/or contigs) with zero significant alignments from both assemblies. This generally eliminates spurious sequences that are most commonly short error-prone sequences. However, the user can optionally retain all sequences with a minimum length regardless of whether they have any significant alignments if so desired.</p>
      </sec>
      <sec id="Sec10">
        <title>Assembly evaluation</title>
        <p>The algorithm maps the mate-pair libraries to both the primary and secondary assemblies using the short read mapping algorithm Bowtie2 [<xref ref-type="bibr" rid="CR21">21</xref>]. The algorithm uses the resulting insert lengths to compute the CE statistic [<xref ref-type="bibr" rid="CR13">13</xref>] at every base pair using a plane-sweep approach. The CE statistic quantifies how compressed or expanded the set of mate pairs spanning a given position are in comparison with the expected insert size. Formally, it computes a z-test to detect statistically significant differences between the local mean insert size and the global (expected) mean insert size. Values substantially less than zero (typically &lt; −3) indicate high probability of compression, and values substantially greater than zero (typically &gt; +3) indicate high probability of expansion.</p>
        <p>These values are used by the merging step to assess which assembly is more likely to be correct in the event of a conflicting alignment. It is worth noting that even though there may be outlying correctly assembled regions of the genome with high absolute value of the CE statistic (erroneously signaling for a misassembly), the metric is not used as an error detection statistic in isolation, but rather as a method to locally compare candidate sequences.</p>
      </sec>
      <sec id="Sec11">
        <title>Assembly comparison and merging</title>
        <p>The metassembler algorithm scans each primary sequence to identify segments of aligned and unaligned sequences indicating gaps or discrepancies. Every aligned segment of the primary sequence is automatically added to the metassembly; in contrast, when a difference is found, the algorithm compares the CE statistic and coverage at the corresponding breakpoint positions to determine which of the two sequences will be added to the metassembly sequence (Fig. <xref rid="Fig5" ref-type="fig">5</xref>).<fig id="Fig5"><label>Fig. 5</label><caption><p>Schematic representation of the pairwise merging process. <italic>Dark color</italic> represents alignment blocks between the primary and secondary assemblies. <italic>Light color</italic> represents unaligned sequences. 1) For blocks of aligned sequence, the algorithm inserts the primary sequence to the new metassembly. 2) Insertion in the primary with respect to the secondary assembly: because the CE statistic is a large positive value (&gt;3) for the primary sequence, the algorithm skips the primary insertion and chooses the secondary sequence instead. 3) Both assemblies have an unaligned insertion: because the primary insertion is shorter than the secondary insertion, and because the primary has a large negative CE statistic (&lt; −3), the algorithm will choose the secondary insertion over the primary, thus correcting the CE statistic</p></caption><graphic xlink:href="13059_2015_764_Fig5_HTML" id="MO5"/></fig></p>
        <p>For insertion/deletion events, the algorithm replaces the primary assembly sequence with the corresponding sequence of the secondary if all the following conditions are met:<list list-type="order"><list-item><p><bold><italic>Poor primary assembly:</italic></bold><italic>abs(CE primary)</italic> &gt; <italic>z</italic>, where abs(CE primary) is the absolute value of the CE statistic in the primary assembly at the breakpoint position, and '<italic>z</italic>' is a user-specified threshold (3 by default).</p></list-item><list-item><p><bold><italic>Improved secondary assembly:</italic></bold><italic>abs(CE primary) – abs(CE secondary)</italic> &gt; <italic>d</italic>, where '<italic>d</italic>' is a user-specified threshold (2 by default).</p></list-item><list-item><p><bold><italic>Improved metassembly:</italic></bold> If the insert coverage in the primary sequence is greater than zero, then we can infer the CE statistic value resulting from choosing the secondary sequence instead of the primary. To do this we first compute an estimate of the local mean insert length after the modification: <italic>Y</italic><sub><italic>i</italic></sub><sup><bold><italic>*</italic></bold></sup> = <italic>Y</italic><sub><italic>i</italic></sub> 
<italic>− Primary insertion/deletion length + Secondary insertion/deletion length</italic>, where Y<sub>i</sub> is the primary assembly mean insert length. We then use <italic>Y</italic><sub><italic>i</italic></sub><sup><bold><italic>*</italic></bold></sup> to compute the inferred CE statistic after the modification (<italic>CE</italic><sub><italic>i</italic></sub><sup><bold><italic>*</italic></bold></sup>). The algorithm only makes changes to the primary if <italic>abs(CE</italic><sub><italic>i</italic></sub><sup><italic>*</italic></sup><italic>)</italic> &lt; <italic>z.</italic></p></list-item><list-item><p><bold><italic>Improved metassembly:</italic></bold> The algorithm only makes changes to the primary assembly if <italic>abs(CE secondary)</italic> &lt; <italic>z</italic>.</p></list-item></list></p>
        <p>A “scaffold gap” in the primary assembly is defined as a segment with at least <italic>t</italic> contiguous gap bases (Ns) such that <italic>p</italic> percent of the entire segment is gap sequence. Both, <italic>t</italic> and <italic>p</italic> are parameters (<italic>t</italic> = 50, <italic>p</italic> = 0.65 by default), allowing isolated gap nucleotides to be skipped and neighboring gaps to be joined into a single unit. In contrast, gaps in the secondary assembly are defined as having at least ten contiguous gap bases and at least 10 % of gap sequence to maximize sensitivity. If a gap in the primary assembly is spanned by a non-gap sequence in the secondary assembly, the primary sequence is replaced by the secondary if the improved metassembly conditions 3) and 4) above are met.</p>
        <p>It is often the case that secondary sequences do not entirely align to a particular primary sequence, having “overhangs” at the very ends of the sequence caused by errors or lower coverage at the very end of the contig. These cases are also handled as gap closure or insertion/deletion events.</p>
      </sec>
      <sec id="Sec12">
        <title>Scaffolding</title>
        <p>Our algorithm also finds the set of primary sequences that can be linked into scaffolds. If two primary sequences align contiguously to the same secondary scaffold after filtering for repetitive alignments, and the secondary sequence has coverage above a user-specified threshold (default is 20), then the two primary sequences are linked together into a single scaffold or a single contig, depending on if the secondary sequence has a scaffold gap at that position.</p>
      </sec>
    </sec>
    <sec id="Sec13">
      <title>Progressive analysis</title>
      <p>After the pairwise merging has been completed with the top two assemblies, the algorithm iterates the procedure using that newly formed metassembly and the next best assembly as inputs (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Assemblies are processed according to the user-specified ordering or ranking scheme, such as ordering by assembly contiguity (N50 size, etc.) or completeness metrics (CEGMA, etc.). For example, in our analysis below we have found that ranking assemblies from largest to smallest by their contig N50 size is a generally effective heuristic.<fig id="Fig6"><label>Fig. 6</label><caption><p>Schematic diagram of the progressive metassembly of three assemblies. All three input assemblies have gap sequences and a variety of errors such that no pair of assemblies will create a perfect assembly. However, the final metassembly of all three assemblies together will reconstruct the entire correct genome. <italic>Gap Seq</italic> gap sequence, <italic>Scf</italic> scaffold</p></caption><graphic xlink:href="13059_2015_764_Fig6_HTML" id="MO6"/></fig></p>
      <p>The progressive pairwise merging avoids the computational load of performing whole genome alignments for all pairs of assemblies. Moreover, because the overall contiguity of the intermediate metassembly increases with each merging step, the subsequent whole genome alignment and mate-pair read alignments become more sensitive, thus improving error detection, CE statistic accuracy, and the overall performance of the following pairwise merge.</p>
    </sec>
    <sec id="Sec14">
      <title>Data availability</title>
      <p>Sequencing data and individual assemblies for the Assemblathon 1 project are available at: [<xref ref-type="bibr" rid="CR22">22</xref>]. Sequencing data for the Assemblathon 2 species are available in the Sequence Read Archive under the accessions ERP002324 (bird), SRA026860 (fish), and ERP002294 (snake). Please see the Assemblathon 2 paper [<xref ref-type="bibr" rid="CR7">7</xref>] for a detailed list of all associated sequence accessions. The individual Assemblathon 2 assemblies are available in the GigaDB [<xref ref-type="bibr" rid="CR23">23</xref>].</p>
    </sec>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec15">
        <title>Additional files</title>
        <p>
          <media position="anchor" xlink:href="13059_2015_764_MOESM1_ESM.docx" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p><bold>SupplementaryFile_v4.docx: Supplementary Notes, Figures, and Tables.</bold> (DOCX 795 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM2_ESM.txt" id="MOESM2">
            <label>Additional file 2:</label>
            <caption>
              <p><bold>A1MetEventsTable.txt: Reported metassembly events (i.e. modifications to the primary assembly such as gaps closed, number of scaffold links, etc) for all Assemblathon1 metassemblies at each merging step.</bold> (TXT 24 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM3_ESM.txt" id="MOESM3">
            <label>Additional file 3:</label>
            <caption>
              <p><bold>A1metricTable.txt: GAGE reported assembly evaluation metrics for all Assemblathon1 metassemblies at each step.</bold> (TXT 206 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM4_ESM.txt" id="MOESM4">
            <label>Additional file 4:</label>
            <caption>
              <p><bold>A1Zscores.txt: Zscores for all metrics and Overall Zscore for all metassemblies and input assemblies.</bold> (TXT 11 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM5_ESM.txt" id="MOESM5">
            <label>Additional file 5:</label>
            <caption>
              <p><bold>A2MetEventsTable.txt: Reported metassembly events for all Assemblathon2 metassemblies of the three species at each merging step.</bold> (TXT 1 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM6_ESM.txt" id="MOESM6">
            <label>Additional file 6:</label>
            <caption>
              <p><bold>A2metricTable.txt: REAPR, CEGMA and contiguity statistics reported for all Assemblathon2 metassemblies of the three species at each step.</bold> (TXT 9 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="13059_2015_764_MOESM7_ESM.txt" id="MOESM7">
            <label>Additional file 7:</label>
            <caption>
              <p><bold>A2Zscores.txt: Zscores for all metrics and Overall Zscore for all metassemblies and input assemblies of the three species.</bold> (TXT 1 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>A2Z</term>
        <def>
          <p>Assemblathon 2 cumulative Z score</p>
        </def>
      </def-item>
      <def-item>
        <term>CE statistic</term>
        <def>
          <p>compression–expansion statistic</p>
        </def>
      </def-item>
      <def-item>
        <term>CEGMA</term>
        <def>
          <p>Core Eukaryotic Genes Mapping Approach</p>
        </def>
      </def-item>
      <def-item>
        <term>Ctg GC-NG50</term>
        <def>
          <p>contig GAGE-corrected N50, relative to the reference genome size</p>
        </def>
      </def-item>
      <def-item>
        <term>Ctg NG50</term>
        <def>
          <p>contig N50 size relative to the estimated/reference genome size</p>
        </def>
      </def-item>
      <def-item>
        <term>Ctg RC-NG50</term>
        <def>
          <p>contig REAPR-corrected N50, relative to the estimated genome size</p>
        </def>
      </def-item>
      <def-item>
        <term>GAGE</term>
        <def>
          <p>Genome Assembly Gold Standard Evaluation</p>
        </def>
      </def-item>
      <def-item>
        <term>GAM-NGS</term>
        <def>
          <p>Genomic Assemblies Merger for Next Generation Sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>ICA</term>
        <def>
          <p>independent component analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>REAPR</term>
        <def>
          <p>Recognising Errors in Assemblies using Paired Reads</p>
        </def>
      </def-item>
      <def-item>
        <term>Scf GC-NG50</term>
        <def>
          <p>scaffold GAGE-corrected N50, relative to the reference genome size</p>
        </def>
      </def-item>
      <def-item>
        <term>Scf NG50</term>
        <def>
          <p>scaffold N50 size relative to the estimated/reference genome size</p>
        </def>
      </def-item>
      <def-item>
        <term>Scf RC-NG50</term>
        <def>
          <p>scaffold REAPR-corrected N50, relative to the estimated genome size</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>MCS designed the study. AHW implemented the software and performed the experiments. Both authors wrote and approved the manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <p>We would like to thank Paul Baranay and Scott Emrich for their helpful discussions and involvement during the development of the prototype of the software. The project was supported in part by National Institutes of Health award (R01-HG006677) and by National Science Foundation awards (DBI-1350041 and IOS-1237880) to MCS.</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mardis</surname>
            <given-names>ER</given-names>
          </name>
        </person-group>
        <article-title>The impact of next-generation sequencing technology on genetics</article-title>
        <source>Trends Genet.</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>133</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1016/j.tig.2007.12.007</pub-id>
        <?supplied-pmid 18262675?>
        <pub-id pub-id-type="pmid">18262675</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Assembly of large genomes using second-generation sequencing</article-title>
        <source>Genome Res.</source>
        <year>2010</year>
        <volume>20</volume>
        <fpage>1165</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.101360.109</pub-id>
        <?supplied-pmid 20508146?>
        <pub-id pub-id-type="pmid">20508146</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Roberts</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Carneiro</surname>
            <given-names>MO</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
        </person-group>
        <article-title>The advantages of SMRT sequencing</article-title>
        <source>Genome Biol.</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>405</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-6-405</pub-id>
        <?supplied-pmid 23822731?>
        <pub-id pub-id-type="pmid">23822731</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Witkowski</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>McCombie</surname>
            <given-names>WR</given-names>
          </name>
        </person-group>
        <article-title>Current challenges in de novo plant genome sequencing and assembly</article-title>
        <source>Genome Biol.</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>243</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2012-13-4-243</pub-id>
        <?supplied-pmid 22546054?>
        <pub-id pub-id-type="pmid">22546054</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Genome assembly reborn: recent computational challenges</article-title>
        <source>Brief Bioinform.</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>354</fpage>
        <lpage>66</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbp026</pub-id>
        <?supplied-pmid 19482960?>
        <pub-id pub-id-type="pmid">19482960</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Earl</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 1: a competitive assessment of de novo short read assembly methods</article-title>
        <source>Genome Res.</source>
        <year>2011</year>
        <volume>21</volume>
        <fpage>2224</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.126599.111</pub-id>
        <?supplied-pmid 21926179?>
        <pub-id pub-id-type="pmid">21926179</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bradnam</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Fass</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Alexandrov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Baranay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bechner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 2: evaluating de novo methods of genome assembly in three vertebrate species</article-title>
        <source>GigaScience</source>
        <year>2013</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-2-10</pub-id>
        <pub-id pub-id-type="pmid">23587291</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Res.</source>
        <year>2012</year>
        <volume>22</volume>
        <fpage>557</fpage>
        <lpage>67</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parra</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Bradnam</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ning</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Keane</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Korf</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Assessing the gene space in draft genomes</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2009</year>
        <volume>37</volume>
        <fpage>289</fpage>
        <lpage>97</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkn916</pub-id>
        <?supplied-pmid 19042974?>
        <pub-id pub-id-type="pmid">19042974</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kikuchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sanders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>REAPR: a universal tool for genome assembly evaluation</article-title>
        <source>Genome Biol.</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>R47</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-5-r47</pub-id>
        <?supplied-pmid 23710727?>
        <pub-id pub-id-type="pmid">23710727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Sommer</surname>
            <given-names>DD</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Narzisi</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Hawkeye and AMOS: visualizing and assessing the quality of genome assemblies</article-title>
        <source>Briefings in Bioinformatics.</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>213</fpage>
        <lpage>24</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbr074</pub-id>
        <?supplied-pmid 22199379?>
        <pub-id pub-id-type="pmid">22199379</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rahman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>CGAL: computing genome assembly likelihoods</article-title>
        <source>Genome Biol.</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>R8</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-1-r8</pub-id>
        <?supplied-pmid 23360652?>
        <pub-id pub-id-type="pmid">23360652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zimin</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Sutton</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Yorke</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>Assembly reconciliation</article-title>
        <source>Bioinformatics.</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>42</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm542</pub-id>
        <?supplied-pmid 18057021?>
        <pub-id pub-id-type="pmid">18057021</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vicedomini</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Vezzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Scalabrin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Arvestad</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Policriti</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>GAM-NGS: genomic assemblies merger for next generation sequencing</article-title>
        <source>BMC Bioinformatics</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>S6</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-14-S7-S6</pub-id>
        <?supplied-pmid 23815503?>
        <pub-id pub-id-type="pmid">23815503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Soto-Jimenez</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Estrada</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sanchez-Flores</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>GARM: genome assembly, reconciliation and merging pipeline</article-title>
        <source>Curr Top Med Chem.</source>
        <year>2014</year>
        <volume>14</volume>
        <fpage>418</fpage>
        <lpage>24</lpage>
        <pub-id pub-id-type="doi">10.2174/1568026613666131204110628</pub-id>
        <?supplied-pmid 24304318?>
        <pub-id pub-id-type="pmid">24304318</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nijkamp</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Winterbach</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>van den Broek</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Daran</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Reinders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>de Ridder</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Integrating genome assemblies with MAIA</article-title>
        <source>Bioinformatics.</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>i433</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq366</pub-id>
        <?supplied-pmid 20823304?>
        <pub-id pub-id-type="pmid">20823304</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">metassembler. <ext-link ext-link-type="uri" xlink:href="http://metassembler.sourceforge.net">http://metassembler.sourceforge.net</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Edgar RC, Asimenos G, Batzoglou S, Sidow A (2015) Evolver. <ext-link ext-link-type="uri" xlink:href="http://www.drive5.com/evolver/">http://www.drive5.com/evolver/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Marbach</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Costello</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Küffner</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Vega</surname>
            <given-names>NM</given-names>
          </name>
          <name>
            <surname>Prill</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Camacho</surname>
            <given-names>DM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Wisdom of crowds for robust gene network inference</article-title>
        <source>Nat Methods.</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>796</fpage>
        <lpage>804</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.2016</pub-id>
        <?supplied-pmid 22796662?>
        <pub-id pub-id-type="pmid">22796662</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kurtz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Smoot</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Antonescu</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biol.</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R12</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id>
        <?supplied-pmid 14759262?>
        <pub-id pub-id-type="pmid">14759262</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat Methods.</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>357</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <?supplied-pmid 22388286?>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">Assemblathon 1 datasets. <ext-link ext-link-type="uri" xlink:href="http://korflab.ucdavis.edu/Datasets/Assemblathon/Assemblathon1/">http://korflab.ucdavis.edu/Datasets/Assemblathon/Assemblathon1/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Assemblathon 2 assemblies. <ext-link ext-link-type="uri" xlink:href="http://gigadb.org/dataset/100060">http://gigadb.org/dataset/100060</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
