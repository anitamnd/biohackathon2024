<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d1 20130915//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5079480</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btw422</article-id>
    <article-id pub-id-type="publisher-id">btw422</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PyPanda: a Python package for gene regulatory network reconstruction</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>van IJzendoorn</surname>
          <given-names>David G.P.</given-names>
        </name>
        <xref ref-type="aff" rid="btw422-aff1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Glass</surname>
          <given-names>Kimberly</given-names>
        </name>
        <xref ref-type="aff" rid="btw422-aff2">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Quackenbush</surname>
          <given-names>John</given-names>
        </name>
        <xref ref-type="aff" rid="btw422-aff3">
          <sup>3</sup>
        </xref>
        <xref ref-type="aff" rid="btw422-aff4">
          <sup>4</sup>
        </xref>
        <xref ref-type="aff" rid="btw422-aff5">
          <sup>5</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kuijjer</surname>
          <given-names>Marieke L.</given-names>
        </name>
        <xref ref-type="aff" rid="btw422-aff3">
          <sup>3</sup>
        </xref>
        <xref ref-type="aff" rid="btw422-aff4">
          <sup>4</sup>
        </xref>
        <xref ref-type="corresp" rid="btw422-cor1">*</xref>
      </contrib>
      <aff id="btw422-aff1"><sup>1</sup>Department of Pathology, Leiden University Medical Center, 2300RC Leiden, The Netherlands</aff>
      <aff id="btw422-aff2"><sup>2</sup>Channing Division of Network Medicine, Department of Medicine, Brigham and Women’s Hospital, Harvard Medical School, Boston, MA 02215, USA</aff>
      <aff id="btw422-aff3"><sup>3</sup>Department of Biostatistics and Computational Biology, Dana-Farber Cancer Institute, Boston, MA 02215, USA</aff>
      <aff id="btw422-aff4"><sup>4</sup>Department of Biostatistics, Harvard T.H. Chan School of Public Health, Boston, MA 02215, USA</aff>
      <aff id="btw422-aff5"><sup>5</sup>Department of Cancer Biology, Dana-Farber Cancer Institute, Boston, MA 02215, USA</aff>
    </contrib-group>
    <author-notes>
      <corresp id="btw422-cor1">*To whom correspondence should be addressed.</corresp>
      <fn id="btw422-FM1">
        <p>Associate Editor: Jonathan Wren</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>11</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>10</day>
      <month>7</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>10</day>
      <month>7</month>
      <year>2016</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>32</volume>
    <issue>21</issue>
    <fpage>3363</fpage>
    <lpage>3365</lpage>
    <history>
      <date date-type="received">
        <day>03</day>
        <month>5</month>
        <year>2016</year>
      </date>
      <date date-type="rev-recd">
        <day>13</day>
        <month>6</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>27</day>
        <month>6</month>
        <year>2016</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2016. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2016</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/" license-type="creative-commons">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Summary:</bold> PANDA (<underline>P</underline>assing <underline>A</underline>ttributes between <underline>N</underline>etworks for <underline>D</underline>ata <underline>A</underline>ssimilation) is a gene regulatory network inference method that uses message-passing to integrate multiple sources of ‘omics data. PANDA was originally coded in C ++. In this application note we describe PyPanda, the Python version of PANDA. PyPanda runs considerably faster than the C ++ version and includes additional features for network analysis.</p>
      <p><bold>Availability and implementation:</bold> The open source PyPanda Python package is freely available at <ext-link ext-link-type="uri" xlink:href="http://github.com/davidvi/pypanda">http://github.com/davidvi/pypanda</ext-link>.</p>
      <p><bold>Contact:</bold><email>mkuijjer@jimmy.harvard.edu</email> or <email>d.g.p.van_ijzendoorn@lumc.nl</email></p>
    </abstract>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Accurately inferring gene regulatory networks is one of the most important challenges in the analysis of gene expression data. Although many methods have been proposed (<xref rid="btw422-B1" ref-type="bibr">Altay <italic>et al.</italic>, 2011</xref>; <xref rid="btw422-B2" ref-type="bibr">Ernst <italic>et al.</italic>, 2008</xref>; <xref rid="btw422-B3" ref-type="bibr">Faith <italic>et al.</italic>, 2007</xref>; <xref rid="btw422-B10" ref-type="bibr">Lemmens <italic>et al.</italic>, 2006</xref>), computation time has been a significant limiting factor in their widespread use. PANDA (<underline>P</underline>assing <underline>A</underline>ttributes between <underline>N</underline>etworks for <underline>D</underline>ata <underline>A</underline>ssimilation) is a gene regulatory network inference method that uses message passing between multiple ‘omics data types to infer the network of interactions most consistent with the underlying data (<xref rid="btw422-B4" ref-type="bibr">Glass <italic>et al.</italic>, 2013</xref>). PANDA has been applied to understand transcriptional programs in a variety of systems (<xref rid="btw422-B5" ref-type="bibr">Glass <italic>et al.</italic>, 2014</xref>, <xref rid="btw422-B7" ref-type="bibr">2015b</xref>; <xref rid="btw422-B9" ref-type="bibr">Lao <italic>et al.</italic>, 2015</xref>).</p>
    <p>Here we introduce PyPanda, a Python implementation of the PANDA algorithm, following the approach taken in <xref rid="btw422-B6" ref-type="bibr">Glass <italic>et al.</italic> (2015a</xref>) and optimized for matrix operations using NumPy (<xref rid="btw422-B11" ref-type="bibr">van der Walt <italic>et al.</italic>, 2011</xref>). This approach enables the use of fast matrix multiplications using the BLAS and LAPACK functions, thereby significantly decreasing run-time for network prediction compared with the original implementation of PANDA, which was coded in C ++ and used for-loops (<xref rid="btw422-B6" ref-type="bibr">Glass <italic>et al.</italic>, 2015a</xref>). We observe further speed increase over the C ++-code because PyPanda automatically uses multiple processor-cores through the NumPy library. We have also expanded PyPanda to include common downstream analyses of PANDA networks, including the calculation of network in- and out-degrees and the estimation of single-sample networks using the recently developed LIONESS algorithm (<xref rid="btw422-B8" ref-type="bibr">Kuijjer <italic>et al.</italic>, 2015</xref>).</p>
  </sec>
  <sec>
    <title>2 Approach</title>
    <sec>
      <title>2.1 Comparing PANDA C ++-code to Python-code</title>
      <p>We compared the C ++-code and Python-code versions of PANDA using several metrics. First, we assessed the two implementations by comparing the number of lines of code. Using the <italic>cloc</italic> utility we counted the number of lines of C ++-code and Python-code. The C ++-code counted 1132 lines of code. The Python-code counted 258 lines of code, significantly shorter (4.4 times) than the C ++-code. The Python-code also includes features such as the LIONESS equation and in- and out-degree calculation. Without these features the Python-code is only 155 lines of code. Because the Python implementation is much more concise than the C ++-code it is easier to interpret and modify.</p>
      <p>Next we performed a speed comparison test between the C ++-code and the Python-code. We used built-in timing functions for both languages, directly before and after the message passing part of the code as this is the step that consumes the most time (Glass <italic>et al.</italic>, <xref rid="btw422-B6" ref-type="bibr">2015a</xref>). For the C ++-code, we used <italic>gettimeofday()</italic> to record time in milliseconds before and after the message passing algorithm. For the Python code we implemented the <italic>time.time()</italic> function around the message passing algorithm. The C ++-code was compiled using the <italic>clang</italic> compiler (version 3.8.0) with speed optimization flag -O3. Python (version 2.7.10) was used with NumPy (version 1.10.1) using the BLAS and LAPACK algebraic functions. All analyses were run on a server running ×86_64 GNU/Linux.</p>
      <p>The speed of the network prediction was tested using simulated networks of <italic>Ne</italic>=<italic> Na</italic> dimensions, where <italic>Ne</italic> is the number of effector nodes and <italic>Na</italic> is the number of affected nodes. For each of several different network sizes (<inline-formula id="IE1"><mml:math id="IEQ1"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>125</mml:mn></mml:mrow></mml:math></inline-formula> to <inline-formula id="IE2"><mml:math id="IEQ2"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>2000</mml:mn></mml:mrow></mml:math></inline-formula> nodes, in steps of 125) we generated ten random ‘motif data’ networks according to the method described in <xref rid="btw422-B6" ref-type="bibr">Glass <italic>et al.</italic> (2015a</xref>). We then ran the Python and C ++ versions of PANDA using these simulated motif data together with identity matrices for the protein-protein interaction and co-expression information. For runs on the same initial ‘motif data’ networks, we verified that the C ++-code and Python-code returned exactly the same output network, as expected due to the deterministic nature of PANDA.</p>
      <p>The C ++-code only uses one CPU core. In comparing the C ++-code with the Python-code using a single core, we found a 2.07-fold speed-up relative to the C ++-code for the smallest network (<inline-formula id="IE3"><mml:math id="IEQ3"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>125</mml:mn></mml:mrow></mml:math></inline-formula>) tested. The speed increase of the Python-code over the C ++-code became larger as the network size increased. For example, the Python-code performed 12.31 times faster for the largest network (<inline-formula id="IE4"><mml:math id="IEQ4"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>2000</mml:mn></mml:mrow></mml:math></inline-formula>) (<xref ref-type="fig" rid="btw422-F1">Fig. 1A</xref>). Recorded run times across the ten random networks had a standard deviation of 0.04s and 2.59 s for the smallest (<inline-formula id="IE5"><mml:math id="IEQ5"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>125</mml:mn></mml:mrow></mml:math></inline-formula>) and largest (<inline-formula id="IE6"><mml:math id="IEQ6"><mml:mrow><mml:mi>N</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mi>N</mml:mi><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>2000</mml:mn></mml:mrow></mml:math></inline-formula>) networks, respectively using the C ++ code. Using the Python code these were reduced to 0.03s and 0.099 s.
<fig id="btw422-F1" orientation="portrait" position="float"><label>Fig. 1.</label><caption><p>Speed comparison for network reconstruction on networks of different sizes using <bold>(A)</bold> the C ++-code and the Python-code, <bold>(B)</bold> the Python-code running on a single CPU compared with multicore (6 CPU cores)</p></caption><graphic xlink:href="btw422f1p"/></fig>
</p>
      <p>Given the abundance of multicore computing resources currently available, we also tested the speed increase when running the Python-code on multiple cores compared with running the Python-code on a single core. We found that for the smallest network the speed was 1.45 times faster when using 6 cores compared with using only a single core; for the largest network the speed increase was 3.7-fold (<xref ref-type="fig" rid="btw422-F1">Fig. 1B</xref>).</p>
      <p>This increase in speed enables reconstruction of networks with larger numbers of regulators and target genes. For example, using the Python-code significantly decreases the time required to infer a human gene regulatory network (<italic>Ne</italic> = 1000, <italic>Na</italic> = 20 000), from ∼18 h with the C ++-code to only about 2 h with the Python-code. This speed-up is especially important as transcription factor motif databases are frequently updated to include more motifs. Further, the decreased running time helps to enable the estimation of network significance by making the use of bootstrapping/jackknifing methods much more feasible.</p>
    </sec>
    <sec>
      <title>2.2 Additional features</title>
      <p>In addition to reconstructing one regulatory network based on a data set consisting of multiple samples, PyPanda can also reconstruct single-sample networks using the LIONESS algorithm (<xref rid="btw422-B8" ref-type="bibr">Kuijjer <italic>et al.</italic>, 2015</xref>). In PyPanda, the LIONESS method uses PANDA to infer an ‘aggregate’ network representing a set of <italic>N</italic> input samples, infers a network for <italic>N</italic> – 1 samples, and then applies a linear equation to estimate the network for the sample that had been removed. The process is then repeated for each sample in the original set, producing <italic>N</italic> single-sample networks. PyPanda can also use LIONESS to reconstruct single-sample networks based on Pearson correlation.</p>
      <p>PyPanda also includes functions to calculate in-degrees (the sum of edge weights targeting a specific gene) and out-degrees (the sum of edge weights pointing out from a regulator to its target genes). These summary metrics can be used for downstream network analysis (<xref rid="btw422-B5" ref-type="bibr">Glass <italic>et a</italic>l., 2014</xref>).</p>
    </sec>
  </sec>
  <sec>
    <title>3 Conclusion</title>
    <p>PANDA is a proven method for gene regulatory network inference but, like most sophisticated network inference methods, its runtime has limited its utility. The Python implementation of PANDA uses matrix operations and incorporates the NumPy libraries, resulting in a significant simplification of the code and a dramatic increase in computing speed, even on a single processor. When applied to a test data set and run on multiple processing cores, this increase in speed was even greater, decreasing processing times by a factor of 46 relative to the original C ++-code. This creates opportunities to greatly expand the use of PANDA and to implement additional measures of network significance based on bootstrapping/jackknifing. PyPanda also includes the LIONESS method, which allows inference of single-sample networks, as well as a number of other useful network metric measures. The open source PyPanda package is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/davidvi/pypanda">http://github.com/davidvi/pypanda</ext-link>.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors would like to thank Judith V.M.G. Bovée, MD, PhD and Karoly Szuhai, MD, PhD for thoughtful discussions and Cho-Yi Chen, PhD for testing PyPanda.</p>
  </ack>
  <sec>
    <title>Funding</title>
    <p>This work has been supported by the <funding-source>National Institutes of Health</funding-source> (<award-id>R01 HL111759</award-id> to J.Q., K.G., <award-id>P01 HL105339</award-id> to J.Q., K.G., M.L.K.) and <award-id>Leiden University Fund</award-id> (<award-id>5259/4-6-2015/Gg</award-id> to D.G.P.IJ).</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <ref-list>
    <title>References</title>
    <ref id="btw422-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altay</surname><given-names>G.</given-names></name></person-group><etal/> (<year>2011</year>) <article-title>Differential c3net reveals disease networks of direct physical interactions</article-title>. <source>BMC Bioinformatics</source>, <volume>12</volume>, <fpage>296.</fpage><pub-id pub-id-type="pmid">21777411</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ernst</surname><given-names>J.</given-names></name></person-group><etal/> (<year>2008</year>) <article-title>A semi-supervised method for predicting transcription factor–gene interactions in escherichia coli</article-title>. <source>PLOS Comput. Biol</source>., <volume>4</volume>, <fpage>e1000044.</fpage><pub-id pub-id-type="pmid">18369434</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Faith</surname><given-names>J.J.</given-names></name></person-group><etal/> (<year>2007</year>) <article-title>Large-scale mapping and validation of escherichia coli transcriptional regulation from a compendium of expression profiles</article-title>. <source>PLOS Biol</source>., <volume>5</volume>, <fpage>e8.</fpage><pub-id pub-id-type="pmid">17214507</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Glass</surname><given-names>K.</given-names></name></person-group><etal/> (<year>2013</year>) <article-title>Passing messages between biological networks to refine predicted interactions</article-title>. <source>Plos One</source>, <volume>8</volume>, <fpage>e64832.</fpage><pub-id pub-id-type="pmid">23741402</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Glass</surname><given-names>K.</given-names></name></person-group><etal/> (<year>2014</year>) <article-title>Sexually-dimorphic targeting of functionally-related genes in copd</article-title>. <source>BMC Syst. Biol</source>., <volume>8</volume>, <fpage>118.</fpage><pub-id pub-id-type="pmid">25431000</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B6">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Glass</surname><given-names>K.</given-names></name></person-group><etal/> (<year>2015a</year>). High performance computing of gene regulatory networks using a message-passing model. High Performance Extreme Computing Conference (HPEC), 2015 IEEE, <fpage>1</fpage>–<lpage>6</lpage>.</mixed-citation>
    </ref>
    <ref id="btw422-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Glass</surname><given-names>K.</given-names></name></person-group><etal/> (<year>2015b</year>) <article-title>A network model for angiogenesis in ovarian cancer</article-title>. <source>BMC Bioinformatics</source>, <volume>16</volume>, <fpage>115.</fpage><pub-id pub-id-type="pmid">25888305</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kuijjer</surname><given-names>M.L.</given-names></name></person-group><etal/> (<year>2015</year>) <article-title>Estimating sample-specific regulatory networks</article-title>. <source>arXiv</source>, preprint 1505.06440.</mixed-citation>
    </ref>
    <ref id="btw422-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lao</surname><given-names>T.</given-names></name></person-group><etal/> (<year>2015</year>) <article-title>Haploinsufficiency of hedgehog interacting protein causes increased emphysema induced by cigarette smoke through network rewiring</article-title>. <source>Genome Med</source>., <volume>7</volume>, <fpage>12</fpage>.<pub-id pub-id-type="pmid">25763110</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lemmens</surname><given-names>K.</given-names></name></person-group><etal/> (<year>2006</year>) <article-title>Inferring transcriptional modules from chip-chip, motif and microarray data</article-title>. <source>Genome Biol</source>., <volume>7</volume>, <fpage>R37.</fpage><pub-id pub-id-type="pmid">16677396</pub-id></mixed-citation>
    </ref>
    <ref id="btw422-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>van der Walt</surname><given-names>S.</given-names></name></person-group><etal/> (<year>2011</year>) <article-title>The numpy array: a structure for efficient numerical computation</article-title>. <source>Comput. Sci. Eng</source>., <volume>13</volume>, <fpage>22</fpage>–<lpage>30</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
