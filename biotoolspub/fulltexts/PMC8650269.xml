<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8650269</article-id>
    <article-id pub-id-type="publisher-id">4492</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-021-04492-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SpinSPJ: a novel NMR scripting system to implement artificial intelligence and advanced applications</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Zao</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-6637-8194</contrib-id>
        <name>
          <surname>Chen</surname>
          <given-names>Zhiwei</given-names>
        </name>
        <address>
          <email>chenzhiwei@xmu.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Song</surname>
          <given-names>Kan</given-names>
        </name>
        <address>
          <email>songkan@qone-inst.com</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.9227.e</institution-id><institution-id institution-id-type="ISNI">0000000119573309</institution-id><institution>State Key Laboratory of Magnetic Resonance and Atomic and Molecular Physics, Wuhan Center for Magnetic Resonance, Wuhan Institute of Physics and Mathematics, Innovation Academy for Precision Measurement Science and Technology, </institution><institution>Chinese Academy of Sciences, </institution></institution-wrap>Wuhan, 430071 People’s Republic of China </aff>
      <aff id="Aff2"><label>2</label>Zhongke-Niujin MR Tech Co. Ltd, Wuhan, 430075 People’s Republic of China </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.12955.3a</institution-id><institution-id institution-id-type="ISNI">0000 0001 2264 7233</institution-id><institution>Department of Electronic Science, Fujian Provincial Key Laboratory of Plasma and Magnetic Resonance Research, </institution><institution>Xiamen University, </institution></institution-wrap>Xiamen, 361005 People’s Republic of China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>7</day>
      <month>12</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>7</day>
      <month>12</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>22</volume>
    <elocation-id>581</elocation-id>
    <history>
      <date date-type="received">
        <day>4</day>
        <month>6</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>24</day>
        <month>11</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Software for nuclear magnetic resonance (NMR) spectrometers offer general functionality of instrument control and data processing; these applications are often developed with non-scripting languages. NMR users need to flexibly integrate rapidly developing NMR applications with emerging technologies. Scripting systems offer open environments for NMR users to write custom programs. However, existing scripting systems have limited capabilities for both extending the functionality of NMR software’s non-script main program and using advanced native script libraries to support specialized application domains (e.g., biomacromolecules and metabolomics). Therefore, it is essential to design a novel scripting system to address both of these needs.</p>
      </sec>
      <sec>
        <title>Result</title>
        <p id="Par2">Here, a novel NMR scripting system named SpinSPJ is proposed. It works as a plug-in in the Java based NMR spectrometer software SpinStudioJ. In the scripting system, both Java based NMR methods and original CPython based libraries are supported. A module has been developed as a bridge to integrate the runtime environments of Java and CPython. The module works as an extension in the CPython environment and interacts with Java via the Java Native Interface. Leveraging this bridge, Java based instrument control and data processing methods of SpinStudioJ can be called with the CPython style. Compared with traditional scripting systems, SpinSPJ better supports both extending the non-script main program and implementing advanced NMR applications with a rich variety of script libraries. NMR researchers can easily call functions of instrument control and data processing as well as developing complex functionality (such as multivariate statistical analysis, deep learning, etc.) with CPython native libraries.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">SpinSPJ offers a user-friendly environment to implement custom functionality leveraging its powerful basic NMR and rich CPython libraries. NMR applications with emerging technologies can be easily integrated. The scripting system is free of charge and can be downloaded by visiting <ext-link ext-link-type="uri" xlink:href="http://www.spinstudioj.net/spinspj">http://www.spinstudioj.net/spinspj</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-021-04492-y.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>NMR</kwd>
      <kwd>Software</kwd>
      <kwd>Script</kwd>
      <kwd>Java</kwd>
      <kwd>CPython</kwd>
      <kwd>Instrument control</kwd>
      <kwd>Data processing</kwd>
      <kwd>Artificial intelligence</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par13">Since its discovery in the 1940s, nuclear magnetic resonance (NMR) has been adopted in many important fields including chemistry, biology, medicine, etc. NMR software for spectrometers is an important tool to implement applications in these fields. With the expansion of NMR applications, a variety of usage scenarios have to be supported by the software. For example, a developer expects to prototype a spectral reconstruction method [<xref ref-type="bibr" rid="CR1">1</xref>]; an NMR facility manager needs to handle data management; and a user wants to perform the statistical analysis [<xref ref-type="bibr" rid="CR2">2</xref>] of a completed NMR experiment. To support above usage scenarios and rapidly developing NMR applications, emerging technologies have to be quickly integrated in NMR software. For instance, deep learning [<xref ref-type="bibr" rid="CR3">3</xref>] has been successfully applied in non-uniform sampling [<xref ref-type="bibr" rid="CR1">1</xref>], spectrum denoising [<xref ref-type="bibr" rid="CR4">4</xref>], chemical shift prediction [<xref ref-type="bibr" rid="CR5">5</xref>–<xref ref-type="bibr" rid="CR8">8</xref>], etc. Multivariate statistical analysis [<xref ref-type="bibr" rid="CR2">2</xref>] plays an important role in metabolomics [<xref ref-type="bibr" rid="CR9">9</xref>, <xref ref-type="bibr" rid="CR10">10</xref>] to reveal the relationships between metabolites and significant issues such as diseases and biological processes. However, NMR users have to wait for software vendors to integrate newly developed functionality and distribute the new versions. As an alternative solution for NMR users who expect to freely implement their own customized functionality in NMR software, scripting systems offer an open environment that allows users to write scripting programs. As a module in NMR software, the scripting system can both extend the existing functionality of NMR software’s non-script main program and perform native libraries of scripting languages. In the scripting system, existing non-script functions such as instrument control and data processing of main program can be called as a script style. As emerging technologies are expected to play an increasingly important role to solve complex problems for advanced NMR applications, it is essential to enhance scripting systems’ capabilities of implementing emerging technologies and advanced applications.</p>
    <p id="Par14">To enhance the capabilities, existing scripting systems have adopted a variety of solutions. In general, the solutions can be divided into two types. For the first type, the scripting system runs as an extension of the main program which is compiled with another computer language. Most commercial NMR software is of this type. For example, MAGICAL, is supported in VnmrJ [<xref ref-type="bibr" rid="CR11">11</xref>]. This software is based on the “shell” scripting language which is native in UNIX like operating systems. The macros of MAGICAL support complex pulse sequence and custom commands. Jython [<xref ref-type="bibr" rid="CR12">12</xref>], Tcl [<xref ref-type="bibr" rid="CR13">13</xref>], and the AU program [<xref ref-type="bibr" rid="CR14">14</xref>] are supported in TopSpin [<xref ref-type="bibr" rid="CR15">15</xref>]. Jython and Tcl are standard scripting languages; the AU program is based on the C programming language and macros, and it needs to be compiled in GNU environment. Mnova [<xref ref-type="bibr" rid="CR16">16</xref>] uses the native scripting language of the Qt library [<xref ref-type="bibr" rid="CR17">17</xref>], named QtScript, to call powerful NMR algorithms of C++ based programs. ACD/Spectrus Processor [<xref ref-type="bibr" rid="CR18">18</xref>] supports a collection of standard scripting languages (e.g., BasicScript, PascalScript, JavaScript, and C++ Script) to sequentially perform data processing and analysis. For the second type, the entire NMR software is developed using a scripting language. Examples in this category include MatNMR [<xref ref-type="bibr" rid="CR19">19</xref>], jsNMR [<xref ref-type="bibr" rid="CR20">20</xref>], rNMR [<xref ref-type="bibr" rid="CR21">21</xref>], and nmrglue [<xref ref-type="bibr" rid="CR22">22</xref>], which respectively use Matlab, JavaScript, R language [<xref ref-type="bibr" rid="CR23">23</xref>], and CPython [<xref ref-type="bibr" rid="CR24">24</xref>–<xref ref-type="bibr" rid="CR26">26</xref>] as the scripting language for NMR data post-processing. This approach takes advantage of the powerful scientific computing libraries and chart display capabilities that are available.</p>
    <p id="Par15">However, the existing scripting systems may be difficult to use in the development of extended functionality for main programs and to support emerging technologies such as deep learning and multivariate statistics analysis. The main program of NMR software for spectrometers is often developed with a mainstream non-scripting language; these programs are typically compiled to binary code and directly executed by computer for higher execution efficiency. Scripting languages [<xref ref-type="bibr" rid="CR27">27</xref>] are dynamically interpreted to machine instructions by corresponding interpreters in real time. Script programs can be freely modified and executed without recompiling. For existing scripting systems, the first type uses standard scripting languages and supports extending the functionality of main programs, but it has a more limited selection of advanced algorithms such as fast numerical computation and deep learning. The second type is better in advanced numerical computation, but it has critical disadvantages in execution efficiency [<xref ref-type="bibr" rid="CR27">27</xref>] and implementing complex graphical user interfaces. These are important in the data acquisition and real-time curve display for instrument control applications. Existing NMR software of the second type focuses on data processing; they are not intended for the instrument control of spectrometers. Therefore, it is necessary to design a new scripting system, which has the capabilities to extend the functionality of the main programs (written in non-scripting languages) and rapidly implement emerging technologies by using advanced script libraries.</p>
    <p id="Par16">In this paper, a novel NMR scripting system named SpinSPJ (SpinStudioJ' Scripting system with Python and Java) is introduced. By integrating the CPython and Java programming languages, the system offers the benefits of both languages. CPython has flexible syntax features and has been widely adopted in various fields such as artificial intelligence, scientific computation, etc. It has a rich collection of libraries and a powerful ecosystem, which is significant for developing NMR advanced applications; The Java programming language [<xref ref-type="bibr" rid="CR28">28</xref>] is cross platform and robust enough to implement multithreading, complex graphical user interfaces, etc. It is the development language for the main program of SpinStudioJ [<xref ref-type="bibr" rid="CR29">29</xref>], which is an NMR software for spectrometers. The use of Java language is beneficial for the scripting system to interact with the main program. Therefore, SpinSPJ can extend the functionality of SpinStudioJ’s main program such as instrument control, data acquisition and data processing implemented in Java; in addition, it can rapidly adopt emerging technologies by leveraging CPython’s rich native libraries.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Architecture</title>
      <p id="Par17">The proposed scripting system SpinSPJ offers a flexible scripting environment to implement custom functionality for NMR users. SpinSPJ works as a plug-in in SpinStudioJ, which is a plug-in based NMR software. SpinSPJ interacts with other plug-ins with the mechanism defined by framework OSGi (Open Service Gateway Initiative) [<xref ref-type="bibr" rid="CR30">30</xref>]. The relationship between SpinSPJ and SpinStudioJ is illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref>.<fig id="Fig1"><label>Fig. 1</label><caption><p>The relationship between SpinSPJ and SpinStudioJ. SpinStudioJ is a NMR software for spectrometers. It is built with a plugin architecture called Eclipse Rich Client Platform which integrates the functionalities as a plugin style. SpinSPJ works as a plugin in SpinStudioJ. SpinSPJ can call the Java based functions of instrument control and data processing, as well as using the native libraries of CPython</p></caption><graphic xlink:href="12859_2021_4492_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par18">The conventional instrument control and data processing capabilities are implemented in Java. CPython has advantages in the availability of advanced libraries for numerical computation and artificial intelligence (e.g., NumPy [<xref ref-type="bibr" rid="CR31">31</xref>], TensorFlow [<xref ref-type="bibr" rid="CR32">32</xref>]). The significant issue of the proposed scripting system focuses on how to build a bridge that connects Java and CPython so that both Java-based NMR methods and third-party CPython libraries are supported. CPython, developed with the C programming language, supports an extension mechanism to wrap C libraries as customized modules. The Java virtual machine provides a mechanism called the Java Native Interface (JNI) [<xref ref-type="bibr" rid="CR33">33</xref>] to support interactions with the C programming language. Through the JNI, Java can call functions defined by C, and C also can access resources (e.g., classes, functions, objects) in the Java environment. Therefore, the C programming language can serve as an ideal bridge between the Java and CPython languages.</p>
      <p id="Par19">The overall architecture of SpinSPJ is illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. According to the computer languages adopted, the entire scripting system consists of three components: Java, C, and CPython.<fig id="Fig2"><label>Fig. 2</label><caption><p>Architecture of the proposed SpinSPJ scripting system. The three components play different roles in the scripting system. Component Java extends the functionality of SpinStudioJ’s main program by the mechanism of OSGi. Component CPython offers the powerful libraries such as Numpy, SciPy, Pandas, Tensorflow, etc. Component C works as a bridge to connect Java and CPython to make their resources accessible to each other</p></caption><graphic xlink:href="12859_2021_4492_Fig2_HTML" id="MO2"/></fig></p>
      <p id="Par20">The Java component is responsible for the graphical user interface and provides the interfaces for CPython including the basic configuration, scripting editor, instrument control, and data processing. The basic configuration can set the location of CPython libraries. The scripting editor offers a script editing window, execution output, menus, and toolbar. The interfaces for instrument control and data processing are implemented by the OSGi which separates the abstract interface from the concrete business logic. The instrument control includes sample control, temperature control, tuning, locking, shimming, data acquisition, etc. The data processing includes Fourier transform, phase correction, baseline correction, peak picking, and integration functionality. The NMR data of a HDF5 [<xref ref-type="bibr" rid="CR29">29</xref>, <xref ref-type="bibr" rid="CR34">34</xref>] based custom format organises parameters, pulse sequence, free induction decay (FID), spectrum, peak list as a hierarchical style in a single file. It can be easily read and converted to other data formats by third party analysis tools (e.g., Matlab, CPython). After processing operations selected by NMR users are performed by CPython scripts, the processed data can be written back and saved to the disk. The scripts can be set to both blocking and non-blocking modes to ensure the statements are executed in the expected sequence.</p>
      <p id="Par21">The C component is the bridge between the Java and CPython components. Through the JNI, Java can call functions in C based libraries. If necessary, the C component also can create Java objects and call Java functions. Based on the C extension mechanism of CPython, the C component can define customized modules for the CPython component. In the CPython environment, customized modules can be compiled and linked with basic CPython libraries. Two significant methods used to accomplish these are the SetPythonHome method (set the location of the CPython libraries) and the PyRun_String (execute scripted code). A Java object can be wrapped as a PyObject, which is the foundation of the CPython language. As Java based resources can be accessed by CPython, the environments of Java and CPython are connected by the C component. In SpinSPJ, the C component creates a C extension module of CPython and builds the Java-CPython bridge with the help of an open source library called Jep [<xref ref-type="bibr" rid="CR35">35</xref>].</p>
      <p id="Par22">The CPython component can define customized initialization and import methods for packages and modules, as well as offering various native libraries (e.g., NumPy, SciPy, TensorFlow). The initialization and import are the significant steps which enable the interactions between CPython and Java. For native libraries, NumPy and SciPy are usually used for fast numerical operations and scientific calculations. TensorFlow is widely used for deep learning. Non-uniform sampling and chemical shift prediction methods developed by deep learning can be easily integrated into the scripting system.</p>
    </sec>
    <sec id="Sec4">
      <title>Workflow</title>
      <p id="Par23">The workflow of SpinSPJ explains how the internal components work from the perspective of a time series. It contains the sequential actions and interactions of the components Java, C, and CPython during different stages. The workflow consists of three main stages: initialization, execution, and exiting.</p>
      <p id="Par24">The initialization stage is mainly for the preparation of the scripting environment. In this stage, the scripting system first configures the location of the CPython libraries. Secondly, CPython installs an importer hook and inserts it into the sys.meta_path. The importer hook defines the methods find_module and load_module to tell CPython how to find and load Java packages. Therefore, the resources of Java and CPython have been connected and the scripting environment has been established in this stage.</p>
      <p id="Par25">In the execution stage, the scripting system controls the three components to support grammar features and resource accessibility. The workflow of the stage is illustrated in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. There are two significant issues in this stage: import and interpretation. Different from conventional CPython environments, import statements in SpinSPJ can be used to import Java packages. When an import statement is called, the scripting system searches for the expected package from the variable sys.modules. If the package is found, it indicates that the package has been loaded by CPython; otherwise, the CPython environment finds the importer hook to invoke the find_module and load_module methods to load the spinspj module. The spinspj module is used to interact with Java resources. The spinspj module has a method __getattr__ to define its submodules for packages and classes in Java environment. The methods (wrapped to PyJMethod) and fields (wrapped to PyJField) of Java objects are wrapped as the attributes of a CPython object. CPython allows the PyJMethod to implement custom execution by defining the attribute tp_call of PyTypeObject, and allows PyJField to implement custom getting and setting styles by defining the attributes tp_getattro and tp_setattro of the PyTypeObject. An example is illustrated in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. When the NMR command go is executed in scripts, PyJMethod invokes corresponding Java method by the JNI. Therefore, the CPython interpreter can recognize Java objects as conventional native CPython objects, as well as calling Java methods freely.<fig id="Fig3"><label>Fig. 3</label><caption><p>Execution workflow of the proposed SpinSPJ scripting system. The arrows denote the execution flow of script statements in each components. Firstly, by importing the module spinspj, the scripting system installs an importer hook, which defines how to find (“find_module()”) and load (“load_module()”) the module spinspj. Secondly, the fields and methods of module spinspj are wrapped as PyJField and PyJMethod, which enable the Java based fields and methods being called as a conventional CPython style through the JNI</p></caption><graphic xlink:href="12859_2021_4492_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par26">In the exiting stage, exception and memory management are the significant issues to ensure the scripting system is stable and robust. The JNI allows the C component to throw C based exceptions to the Java component. The Java component catches exceptions and back traces. For memory management, the Java component can reclaim memory at runtime by automatically leveraging the garbage collection feature of the Java virtual machine, so there is no need to release memory manually. However, the C component must release memory manually. Both the JNI and the C extension mechanism offer corresponding methods to release memory in order to avoid memory leaks.</p>
    </sec>
  </sec>
  <sec id="Sec5">
    <title>Results</title>
    <p id="Par27">The proposed SpinSPJ scripting system provides a familiar graphical user interface layout for the user, which makes it straightforward to use. A screenshot of the NMR scripting editor is illustrated in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. The menus and tools offer not only conventional functionality for file access and text editing, but also example scripts and help manuals. All the function and parameter definitions are described in the help manuals. In addition, commands for starting and stopping to run the scripts are available both in menus and toolbar. For script editing area, the key words of CPython can be marked as a highlighted style. Code comments and strings can be respectively displayed as green and blue. When NMR users enter the code spinspj., the available fields and methods of the spinspj module are displayed as prompts. When there is only one available option, the statement is automatically completed. The bottom region of the interface can show the outputs during the execution of scripts. The reported errors, warnings, and exceptions can prompt users to deal with problems during the execution of script programs. The script file (e.g., file name is “xxxx.py”) can be executed by entering the file name (e.g., “xxxx”) of the script in the command line of NMR software SpinStudioJ.<fig id="Fig4"><label>Fig. 4</label><caption><p>A screenshot of the NMR scripting editor. The scripting editor offers an environment to edit and execute the scripts of SpinSPJ. The script code and output are respectively displayed in the middle and bottom area of the editor’s interface</p></caption><graphic xlink:href="12859_2021_4492_Fig4_HTML" id="MO4"/></fig></p>
    <p id="Par28">The scripts offer general functionality such as instrument control, data processing as well as native CPython libraries. Typical scripting functions are described as Table <xref rid="Tab1" ref-type="table">1</xref>.<table-wrap id="Tab1"><label>Table 1</label><caption><p>General functions in the proposed SpinSPJ scripting system</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Function name</th><th align="left">Description</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><italic>Instrument control</italic></td><td align="left"/><td align="left"/></tr><tr><td align="left">aij(n)</td><td align="left">Inject a sample, The sample number is “n”</td><td align="left">aij(2)</td></tr><tr><td align="left">alock()</td><td align="left">Lock the field automatically</td><td align="left">alock()</td></tr><tr><td align="left">stm(nucleus)</td><td align="left">Automatic tuning and matching</td><td align="left">stm('H1')</td></tr><tr><td align="left">smartmapshim()</td><td align="left">Create a gradient shim map and perform the shimming</td><td align="left">smartmapshim()</td></tr><tr><td align="left">smartshim()</td><td align="left">Perform the gradient shimming using the existing field map</td><td align="left">smartshim()</td></tr><tr><td align="left">searchshim(algorithm, evaluation, channels, iteration)</td><td align="left">Searching for better shim values with an algorithm</td><td align="left">searchshim('simplex', 'FIDArea', 'z1-z2', 50)</td></tr><tr><td align="left">vartemp(target, timeout)</td><td align="left">Vary temperature to “target” celsius degree within “timeout” seconds</td><td align="left">vartemp(35.5, 240)</td></tr><tr><td align="left">spin(target, timeout)</td><td align="left">Rotate the sample with the spin rate of “target” Hz within “timeout” seconds</td><td align="left">spin(20, 200)</td></tr><tr><td align="left">setshimvalue(channel, value)</td><td align="left">Set the shim value of shim coil in “channel”</td><td align="left">setshimvalue('z1', 1000)</td></tr><tr><td align="left">go()</td><td align="left">Start the data acquisition</td><td align="left">go()</td></tr><tr><td align="left"><italic>Data processing</italic></td><td align="left"/><td align="left"/></tr><tr><td align="left">setactws(path)</td><td align="left">Set the active workspace</td><td align="left">setactws('D:/1.nmr')</td></tr><tr><td align="left">setparam(name, value)</td><td align="left">Set the value of parameter of the active workspace</td><td align="left">setparam('ns', 4)</td></tr><tr><td align="left">getfid(path)</td><td align="left">Get the FID data of the workspace whose storage path is “path”</td><td align="left">getfid('D:/1.nmr')</td></tr><tr><td align="left">getspec(path)</td><td align="left">Get the spectrum data of the workspace whose storage path is “path”</td><td align="left">getspec('D:/1.nmr')</td></tr><tr><td align="left">setspec(path, data)</td><td align="left">Set the spectrum data of the workspace whose storage path is “path”</td><td align="left">setspec('D:/1.nmr', data)</td></tr><tr><td align="left">wft()</td><td align="left">Perform the data processing with weighting and Fourier transform</td><td align="left">wft()</td></tr><tr><td align="left"><italic>Original CPython libraries</italic></td><td align="left"/><td align="left"/></tr><tr><td align="left">np.multiply(a, b)</td><td align="left">Matrix multiplication</td><td align="left">np.multiply(a, b)</td></tr><tr><td align="left">np.median(a)</td><td align="left">Compute median of an array</td><td align="left">np.median(a)</td></tr><tr><td align="left">plt.plot(x, y)</td><td align="left">Draw a curve</td><td align="left">plt.plot(x, y)</td></tr><tr><td align="left">scipy.optimize.curve_fit (func, x, y)</td><td align="left">Compute curve fitting</td><td align="left">scipy.optimize.curve_fit(func, x, y)</td></tr></tbody></table></table-wrap></p>
    <p id="Par29">Instrument control is used to control the NMR spectrometer’s physical components such as auto sample changer, temperature control, shimming, and locking units. For data acquisition, scripts are allowed to set the parameters of the workspace, and then start the acquisition command. Both the blocking and non-blocking modes are supported. In the blocking mode, the script waits for the completion of the invoked method until the maximum time is exhausted. In the non-blocking mode, the script invokes the method and doesn’t wait for the completion of its execution.</p>
    <p id="Par30">For data processing, scripts can call conventional processing methods such as linear prediction, Fourier transform, phase correction, baseline correction, etc. Scripts can access an FID or spectrum from a workspace, as well as updating the spectrum display after a transformation or analysis.</p>
    <p id="Par31">In order to achieve powerful performance, most native libraries of CPython can be used in the scripting system, including NumPy, SciPy, matplotlib, and TensorFlow. NumPy supports a user-friendly and efficient numerical manipulation. Users can read data (FID or spectrum) from a workspace and convert the data format to an ndarray or matrix; these are the basic data formats for fast numerical calculations in Numpy. SciPy is a scientific computation library which can be used in parameter optimization and data denoising. Matplotlib library is a visualization library for FID or spectrum plotting. TensorFlow can be used to implement deep learning which is an emerging field in NMR.</p>
    <p id="Par32">To illustrate the performance of the scripting system, three examples of NMR methods are presented. The first script example for automatic searching for shimming is illustrated in Fig. <xref rid="Fig5" ref-type="fig">5</xref>. Automatic searching for shimming aims to calibrate output values of instrumental shim power supply by using a multivariate optimization algorithm, which can significantly improve the homogeneity of a center magnetic field. It needs real-time data acquisition and optimization analysis with an alternating style. The proposed SpinSPJ scripting system offers Java based instrument control for setting shim values and real-time data acquisition. The SciPy library provides the optimization algorithm Simplex [<xref ref-type="bibr" rid="CR36">36</xref>] to generate new shim values with an optimized search path. As illustrated in Fig. <xref rid="Fig5" ref-type="fig">5</xref>, the experiment of searching for shimming has been performed on a Zhongke-Niujin 500 MHz QOne<sup>Plus</sup> NMR spectrometer. The test sample is 0.1 mg/ml GdCl<sub>3</sub> in D<sub>2</sub>O with 1% H<sub>2</sub>O. The evaluation criterion of field homogeneity is the area of FID, which can be affected by adjusting the shim values. In each iteration, Simplex can simultaneously change all of the Z1-Z4 shim values and seek their best combination by evaluating the area of the FID. After 40 iterations, the area of the FID is optimized from 350,781 to 864,282 (ADC value), and the half peak width of H<sub>2</sub>O peak is optimized from 15.8 to 3.7 Hz, which presents a substantial improvement on the magnetic field homogeneity. This example demonstrates that the scripting system can be used to flexibly develop user defined NMR methods for the instrument calibration by combining data acquisition and CPython based optimization algorithms.<fig id="Fig5"><label>Fig. 5</label><caption><p>Searching shimming by FID area and simplex algorithm. As the evaluation of field’s homogeneity, FID area can be acquired and calculated by calling Java based method; the library SciPy of CPython provides the simplex algorithm to optimize the shim values with an iterative style. The homogeneity of the magnetic field is much better after utilizing the searching shimming method</p></caption><graphic xlink:href="12859_2021_4492_Fig5_HTML" id="MO5"/></fig></p>
    <p id="Par33">The second example is for a principal component analysis (PCA) [<xref ref-type="bibr" rid="CR37">37</xref>] of metabolomic data. A PCA is the significant step to distinguish among the bulk data by projecting them onto multiple orthogonal components. As illustrated in Fig. <xref rid="Fig6" ref-type="fig">6</xref>, the data are from the web site metabolomics workbench [<xref ref-type="bibr" rid="CR38">38</xref>], and the corresponding study ID is “ST000101” which presents an NMR analysis of synthetic mixtures. Each of a total of 10 samples has 20 synthetic metabolites. All of the samples can be divided into two groups because the quantities of the 10 metabolites are quite different. After a Java based automatic phase, baseline correction, and integration of binned spectrals, the data set is analyzed by a PCA that is implemented with the proposed SpinSPJ scripting system. The script for the PCA includes reading the original data, calculating the average and standard deviation, conducting a PCA, and displaying the columnar and scattered data. The CPython libraries of NumPy, scikit-learn[<xref ref-type="bibr" rid="CR39">39</xref>], and matplotlib are helpful to implement above requirements. The histogram gives the result of the 1st–8th principal components and their contribution percentages. Among all of the components, the first principal component can explain 58.02% of the information in the total samples. The score scatter plot shows the score values of each sample on the first and second principal component, where “·” denotes the published result of the study and “×” denotes the calculated score values by the scripts. Obviously, on the first dimension of the PCA, the samples are divided into group A and B, which is consistent with the metabolite composition of the samples. The data of the score scatter plot are consistent with the published results of the study [<xref ref-type="bibr" rid="CR40">40</xref>]. This example indicates that the scripting system can support complex multivariate statistical algorithms and chart displays with the help of native CPython libraries.<fig id="Fig6"><label>Fig. 6</label><caption><p>Principal component analysis. After some basic data processing, PCA is easily performed with the help of the CPython library scikit-learn</p></caption><graphic xlink:href="12859_2021_4492_Fig6_HTML" id="MO6"/></fig></p>
    <p id="Par34">The third example focuses on deep learning NMR (DLNMR) [<xref ref-type="bibr" rid="CR1">1</xref>] for non-uniform sampling (NUS)[<xref ref-type="bibr" rid="CR41">41</xref>, <xref ref-type="bibr" rid="CR42">42</xref>]. NUS is an emerging NMR field that can accelerate multi-dimensional experiments of biomacromolecule as well as reducing the heating effect due to RF excitation. Deep learning based NUS methods have achieved accurate and fast reconstruction. The script reconstructs the spectra with a smart dense convolution neural network (DCNN) [<xref ref-type="bibr" rid="CR1">1</xref>], which has been trained with simulated or acquired data. A DCNN requires a variety of libraries to implement the convolution and data fitting capabilities. SpinSPJ can integrate all of the related libraries (such as TensorFlow, keras, cuDNN) in the CPython environment. As illustrated in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, a 3D HNCO NMR data of Azurin (molecular weight is 14 kDa) with full sampling was downloaded from the MddNMR website <ext-link ext-link-type="uri" xlink:href="http://mddnmr.spektrino.com">http://mddnmr.spektrino.com</ext-link>. A fair comparison between full and 20% sampling with respect to the spectral quality are shown in (a)–(f). In Fig. <xref rid="Fig7" ref-type="fig">7</xref>, (a) and (c) are the sub-regions of the projections on the planes of <sup>15</sup>N–<sup>1</sup>H and <sup>15</sup>N–<sup>13</sup>C for the fully sampled 3D spectrum, which is reconstructed by fast Fourier Transform. (b) and (d) are the corresponding reconstruction results of a 20% sampling rate, which is reconstructed by a DLNMR method. (e) gives the correlation coefficient of the peak intensities of (a) and (b); (f) gives the correlation coefficient of the peak intensities of (c) and (d). The correlation coefficients of peak intensities between DLNMR reconstructed and fully sampled spectrums are greater than 0.99, which indicates excellent fidelity of the two spectrums. For the 3D NMR, the achieved acceleration factor of 5 in NUS implies that the experimental time can be reduced from 22.4 to 4.48 h. In addition, the computation time for the 3D reconstruction is 9.66 s (data size: 732*60*60, GPU: NVIDIA Tesla K40m), which demonstrates the method achieves very high computational efficiency. This example shows the capability of the scripting system to implement a deep learning based NMR method by leveraging native CPython libraries.<fig id="Fig7"><label>Fig. 7</label><caption><p>Non-uniform sampling by deep learning. The original FID data is read by calling the function offered by the main program of SpinStudioJ. The reconstruction method based on deep learning is easily performed with the help of CPython libraries such as Tensorflow, keras, cuDNN, etc.</p></caption><graphic xlink:href="12859_2021_4492_Fig7_HTML" id="MO7"/></fig></p>
  </sec>
  <sec id="Sec6">
    <title>Conclusion</title>
    <p id="Par35">SpinSPJ is a novel NMR scripting system which offers general functionality for instrument control and data processing; in addition, it can leverage native CPython libraries. Conventional instrument control and data processing are implemented by Java programming language; CPython libraries are helpful for providing advanced algorithms such as fast numerical computation, artificial intelligence etc. More advanced NMR functionality such as chemical shift and protein structure prediction are going to be integrated in the future.</p>
    <p id="Par36">SpinSPJ can be downloaded free of charge by visiting the website: <ext-link ext-link-type="uri" xlink:href="http://www.spinstudioj.net/spinspj">http://www.spinstudioj.net/spinspj</ext-link>. The source code is private and owned by Zhongke-Niujin MR Tech Co.Ltd. The released software products are freely available to any researcher wishing to use them for non-commercial purposes, and licenses are needed for commercial purposes. The coded scripts are available in the GitHub repository <ext-link ext-link-type="uri" xlink:href="https://github.com/qonenmr/spinspj">https://github.com/qonenmr/spinspj</ext-link>.</p>
    <sec id="Sec7">
      <title>Availability and requirements</title>
      <p id="Par37">Project name: SpinSPJ</p>
      <p id="Par38">Project home page: <ext-link ext-link-type="uri" xlink:href="http://www.spinstudioj.net/spinspj">http://www.spinstudioj.net/spinspj</ext-link></p>
      <p id="Par39">Operating system(s): Platform independent</p>
      <p id="Par40">Programming language: Java, CPython</p>
      <p id="Par41">License: source code private</p>
      <p id="Par42">Any restrictions to use by non-academics: license needed</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec8">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2021_4492_MOESM1_ESM.7z">
            <caption>
              <p><bold>Additional file 1: User manuals</bold>. Instructions about the installation, function list and programming for the proposed scripting system SpinSPJ.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2021_4492_MOESM2_ESM.7z">
            <caption>
              <p><bold>Additional file 2: Script examples</bold>. Example script files of SpinSPJ, including automation, searching shimming, baseline correction, PCA, NUS, etc.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>NMR</term>
        <def>
          <p id="Par4">Nuclear magnetic resonance</p>
        </def>
      </def-item>
      <def-item>
        <term>NUS</term>
        <def>
          <p id="Par5">Non-uniform sampling</p>
        </def>
      </def-item>
      <def-item>
        <term>MAGICAL</term>
        <def>
          <p id="Par6">MAGnetics instrument control and analysis language</p>
        </def>
      </def-item>
      <def-item>
        <term>FID</term>
        <def>
          <p id="Par7">Free induction decay</p>
        </def>
      </def-item>
      <def-item>
        <term>JNI</term>
        <def>
          <p id="Par8">Java native interface</p>
        </def>
      </def-item>
      <def-item>
        <term>OSGi</term>
        <def>
          <p id="Par9">Open Service Gateway Initiative</p>
        </def>
      </def-item>
      <def-item>
        <term>DCNN</term>
        <def>
          <p id="Par10">Dense convolution neural network</p>
        </def>
      </def-item>
      <def-item>
        <term>PCA</term>
        <def>
          <p id="Par11">Principal component analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>DLNMR</term>
        <def>
          <p id="Par12">Deep learning NMR</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We gratefully acknowledge Mr. Rui Chen, Mr. Rui Cao, Mr. Xuedong Zheng, and Ms. Qingyuan Li for their patient programming assistance. We sincerely appreciate the fruitful discussions with Prof. Xiaobo Qu, Prof. Xianzhong Yan, and Mr. Shigan Chai. We also thank EditSprings (<ext-link ext-link-type="uri" xlink:href="https://www.editsprings.com">https://www.editsprings.com</ext-link>) for the expert linguistic services.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors' contributions</title>
    <p>ZL completed the programming task and wrote the manuscript. ZWC designed the main framework of the scripting system. KS designed the script examples presented in this article. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>No funding was obtained for this study.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>All of the programs and script examples can be downloaded by visiting web site: <ext-link ext-link-type="uri" xlink:href="http://www.spinstudioj.net/spinspj">http://www.spinstudioj.net/spinspj</ext-link>. The coded scripts are available in the GitHub repository <ext-link ext-link-type="uri" xlink:href="https://github.com/qonenmr/spinspj">https://github.com/qonenmr/spinspj</ext-link>. The original data for PCA are from <ext-link ext-link-type="uri" xlink:href="https://www.metabolomicsworkbench.org/data/pca/show_metabolite_pca_NMR.php">https://www.metabolomicsworkbench.org/data/pca/show_metabolite_pca_NMR.php</ext-link>. The NMR example data of sample Azure for NUS have been downloaded from <ext-link ext-link-type="uri" xlink:href="http://mddnmr.spektrino.com">http://mddnmr.spektrino.com</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent participate</title>
      <p id="Par43">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par44">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par45">The author ZL and KS are employees of Zhongke-Niujin MR Tech Co.Ltd, and the company has no competing interests with the published results.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Qu</surname>
            <given-names>XB</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>YH</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>HF</given-names>
          </name>
          <name>
            <surname>Qiu</surname>
            <given-names>TY</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Agback</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Orekhov</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>Accelerated nuclear magnetic resonance spectroscopy with deep learning</article-title>
        <source>Angew Chem Int Ed</source>
        <year>2020</year>
        <volume>59</volume>
        <fpage>10297</fpage>
        <lpage>10300</lpage>
        <pub-id pub-id-type="doi">10.1002/anie.201908162</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liland</surname>
            <given-names>KH</given-names>
          </name>
        </person-group>
        <article-title>Multivariate methods in metabolomics—from pre-processing to dimension reduction and statistical analysis</article-title>
        <source>Trends Anal Chem</source>
        <year>2011</year>
        <volume>30</volume>
        <fpage>827</fpage>
        <lpage>841</lpage>
        <pub-id pub-id-type="doi">10.1016/j.trac.2011.02.007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hinton</surname>
            <given-names>GE</given-names>
          </name>
          <name>
            <surname>Salakhutdinov</surname>
            <given-names>RR</given-names>
          </name>
        </person-group>
        <article-title>Reducing the dimensionality of data with neural networks</article-title>
        <source>Science</source>
        <year>2006</year>
        <volume>313</volume>
        <fpage>504</fpage>
        <lpage>507</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1127647</pub-id>
        <pub-id pub-id-type="pmid">16873662</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wu</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zeng</surname>
            <given-names>Q</given-names>
          </name>
        </person-group>
        <article-title>Improvement in signal-to-noise ratio of liquid-state NMR spectroscopy via a deep neural network DN-Unet</article-title>
        <source>Anal Chem</source>
        <year>2021</year>
        <volume>93</volume>
        <fpage>1377</fpage>
        <lpage>1382</lpage>
        <pub-id pub-id-type="doi">10.1021/acs.analchem.0c03087</pub-id>
        <pub-id pub-id-type="pmid">33377773</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cobas</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>NMR signal processing, prediction and structure verification with machine learning techniques</article-title>
        <source>Magn Reson Chem</source>
        <year>2020</year>
        <volume>58</volume>
        <fpage>512</fpage>
        <lpage>519</lpage>
        <pub-id pub-id-type="doi">10.1002/mrc.4989</pub-id>
        <pub-id pub-id-type="pmid">31912547</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meiler</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Meusinger</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Will</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Fast determination of <sup>13</sup>C NMR chemical shifts using artificial neural networks</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2000</year>
        <volume>40</volume>
        <fpage>1169</fpage>
        <lpage>1176</lpage>
        <pub-id pub-id-type="doi">10.1021/ci000021c</pub-id>
        <pub-id pub-id-type="pmid">11045810</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Senior</surname>
            <given-names>AW</given-names>
          </name>
          <name>
            <surname>Evans</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Jumper</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kirkpatrick</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Sifre</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Qin</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Zídek</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>AWR</given-names>
          </name>
          <name>
            <surname>Bridgland</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Penedones</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Petersen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Simonyan</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Crossan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kohli</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Silver</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kavukcuoglu</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hassabis</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Improved protein structure prediction using potentials from deep learning</article-title>
        <source>Nature</source>
        <year>2020</year>
        <volume>577</volume>
        <fpage>706</fpage>
        <lpage>710</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-019-1923-7</pub-id>
        <pub-id pub-id-type="pmid">31942072</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Orekhov</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Qu</surname>
            <given-names>XB</given-names>
          </name>
        </person-group>
        <article-title>Review and prospect: deep learning in nuclear magnetic resonance spectroscopy</article-title>
        <source>Chem Eur J</source>
        <year>2020</year>
        <volume>26</volume>
        <fpage>10391</fpage>
        <lpage>10401</lpage>
        <pub-id pub-id-type="doi">10.1002/chem.202000246</pub-id>
        <pub-id pub-id-type="pmid">32251549</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nicholson</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Lindon</surname>
            <given-names>JC</given-names>
          </name>
        </person-group>
        <article-title>Systems biology: metabonomics</article-title>
        <source>Nature</source>
        <year>2008</year>
        <volume>455</volume>
        <fpage>1054</fpage>
        <lpage>1056</lpage>
        <pub-id pub-id-type="doi">10.1038/4551054a</pub-id>
        <pub-id pub-id-type="pmid">18948945</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>German</surname>
            <given-names>JB</given-names>
          </name>
          <name>
            <surname>Hammock</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Watkins</surname>
            <given-names>SM</given-names>
          </name>
        </person-group>
        <article-title>Metabolomics: building on a century of biochemistry to guide human health</article-title>
        <source>Metabolomics</source>
        <year>2005</year>
        <volume>1</volume>
        <fpage>3</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1007/s11306-005-1102-8</pub-id>
        <pub-id pub-id-type="pmid">16680201</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">OpenVnmrJ. 2020. <ext-link ext-link-type="uri" xlink:href="http://openvnmrj.org">http://openvnmrj.org</ext-link>. Accessed 24 Dec 2020.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Jython. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.jython.org">https://www.jython.org</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Tcl Developer site. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.tcl.tk/">https://www.tcl.tk/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">AU Programming. 2020. <ext-link ext-link-type="uri" xlink:href="http://www2.chem.uic.edu/nmr/downloads/ts_au.pdf">http://www2.chem.uic.edu/nmr/downloads/ts_au.pdf</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Comprehensive Portfolio of NMR Software. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.bruker.com/products/mr.html">https://www.bruker.com/products/mr.html</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Willcott</surname>
            <given-names>MR</given-names>
          </name>
        </person-group>
        <article-title>MestRe nova</article-title>
        <source>J Am Chem Soc</source>
        <year>2009</year>
        <volume>131</volume>
        <fpage>13180</fpage>
        <lpage>13180</lpage>
        <pub-id pub-id-type="doi">10.1021/ja906709t</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Qt. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.qt.io/">https://www.qt.io/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kwan</surname>
            <given-names>EE</given-names>
          </name>
        </person-group>
        <article-title>ACD/spectrus processor review</article-title>
        <source>J Chem Inf Model</source>
        <year>2012</year>
        <volume>52</volume>
        <fpage>1898</fpage>
        <lpage>1900</lpage>
        <pub-id pub-id-type="doi">10.1021/ci300249w</pub-id>
        <pub-id pub-id-type="pmid">22712842</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Van Beek</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <article-title>matNMR: A flexible toolbox for processing, analyzing and visualizing magnetic resonance data in Matlab®</article-title>
        <source>J Magn Reson</source>
        <year>2007</year>
        <volume>187</volume>
        <fpage>19</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jmr.2007.03.017</pub-id>
        <pub-id pub-id-type="pmid">17448713</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vosegaard</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>jsNMR: an embedded platform-independent NMR spectrum viewer</article-title>
        <source>Magn Reson Chem</source>
        <year>2015</year>
        <volume>53</volume>
        <fpage>285</fpage>
        <lpage>290</lpage>
        <pub-id pub-id-type="doi">10.1002/mrc.4195</pub-id>
        <pub-id pub-id-type="pmid">25641013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lewis</surname>
            <given-names>IA</given-names>
          </name>
          <name>
            <surname>Schommer</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Markley</surname>
            <given-names>JL</given-names>
          </name>
        </person-group>
        <article-title>rNMR: open source software for identifying and quantifying metabolites in NMR spectra</article-title>
        <source>Magn Reson Chem</source>
        <year>2009</year>
        <volume>47</volume>
        <fpage>123</fpage>
        <lpage>126</lpage>
        <pub-id pub-id-type="doi">10.1002/mrc.2526</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Helmus</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Jaroniec</surname>
            <given-names>CP</given-names>
          </name>
        </person-group>
        <article-title>Nmrglue: an open source Python package for the analysis of multidimensional NMR data</article-title>
        <source>J Biomol NMR</source>
        <year>2013</year>
        <volume>55</volume>
        <fpage>355</fpage>
        <lpage>367</lpage>
        <pub-id pub-id-type="doi">10.1007/s10858-013-9718-x</pub-id>
        <pub-id pub-id-type="pmid">23456039</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">The R project for statistical computing. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.r-project.org">https://www.r-project.org</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Python.org. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.python.org">https://www.python.org</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">nmrpy · PyPI. 2020. <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/nmrpy/">https://pypi.org/project/nmrpy/</ext-link>. Accessed 17 June 2021.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Badenhorst</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Barry</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Swanepoel</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>van Staden</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Wissing</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rohwer</surname>
            <given-names>JM</given-names>
          </name>
        </person-group>
        <article-title>Workflow for data analysis in experimental and computational systems biology: using python as ‘glue’</article-title>
        <source>Processes</source>
        <year>2019</year>
        <volume>7</volume>
        <issue>7</issue>
        <fpage>460</fpage>
        <lpage>476</lpage>
        <pub-id pub-id-type="doi">10.3390/pr7070460</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">What is the difference between a compiled and an interpreted program. 2020. <ext-link ext-link-type="uri" xlink:href="https://kb.iu.edu/d/agsz/">https://kb.iu.edu/d/agsz/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Java Software | Oracle. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.oracle.com/java">https://www.oracle.com/java</ext-link>. Accessed Nov 25 2020.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>ZW</given-names>
          </name>
        </person-group>
        <article-title>SpinStudioJ: a cross-platform NMR data acquisition and processing workbench based on a plug-in architecture</article-title>
        <source>Magn Reson Chem</source>
        <year>2019</year>
        <volume>57</volume>
        <fpage>380</fpage>
        <lpage>389</lpage>
        <pub-id pub-id-type="doi">10.1002/mrc.4862</pub-id>
        <pub-id pub-id-type="pmid">30860613</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Alliance</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <source>Osgi Service Platform, Release 3</source>
        <year>2003</year>
        <publisher-loc>Amsterdam</publisher-loc>
        <publisher-name>IOS Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Numpy. 2020. <ext-link ext-link-type="uri" xlink:href="https://numpy.org/">https://numpy.org/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">TensorFlow. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.tensorflow.org/">https://www.tensorflow.org/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Java Native Interface. 2020. <ext-link ext-link-type="uri" xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni">https://docs.oracle.com/javase/8/docs/technotes/guides/jni</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">The HDF group. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.hdfgroup.org/">https://www.hdfgroup.org/</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Embed Python in Java. 2020. <ext-link ext-link-type="uri" xlink:href="http://github.com/ninia/jep">http://github.com/ninia/jep</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">Hull WE. NMR tips for shimming, part I: computerized shimming with the simplex algorithm. Bruker SpinReport; 2003.</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Dai</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Principal component analysis based methods in bioinformatics studies</article-title>
        <source>Brief Bioinform</source>
        <year>2011</year>
        <volume>6</volume>
        <fpage>714</fpage>
        <lpage>722</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbq090</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Metabolomics Workbench - NIH Data Repository. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.metabolomicsworkbench.org/data/DRCCMetadata.php?Mode=Study&amp;DataMode=NMRData&amp;StudyID=ST000101&amp;StudyType=NMR&amp;ResultType=2#DataTabs">https://www.metabolomicsworkbench.org/data/DRCCMetadata.php?Mode=Study&amp;DataMode=NMRData&amp;StudyID=ST000101&amp;StudyType=NMR&amp;ResultType=2#DataTabs</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">scikit-learn : machine learning in Python. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.sklearn.org">https://www.sklearn.org</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <mixed-citation publication-type="other">Metabolomics Workbench. 2020. <ext-link ext-link-type="uri" xlink:href="https://www.metabolomicsworkbench.org/data/pca/study_pca_NMR.php">https://www.metabolomicsworkbench.org/data/pca/study_pca_NMR.php</ext-link>. Accessed 25 Nov 2020.</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hyberts</surname>
            <given-names>SG</given-names>
          </name>
          <name>
            <surname>Takeuchi</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Poisson-Gap sampling and FM reconstruction for enhancing resolution and sensitivity of protein NMR data</article-title>
        <source>J Am Chem Soc</source>
        <year>2010</year>
        <volume>132</volume>
        <fpage>2145</fpage>
        <lpage>2147</lpage>
        <pub-id pub-id-type="doi">10.1021/ja908004w</pub-id>
        <pub-id pub-id-type="pmid">20121194</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hyberts</surname>
            <given-names>SG</given-names>
          </name>
          <name>
            <surname>Milbradt</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Arthanari</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Application of iterative soft thresholding for fast reconstruction of NMR data non-uniformly sampled with multidimensional Poisson Gap scheduling</article-title>
        <source>J Biomol NMR</source>
        <year>2012</year>
        <volume>52</volume>
        <fpage>315</fpage>
        <lpage>327</lpage>
        <pub-id pub-id-type="doi">10.1007/s10858-012-9611-z</pub-id>
        <pub-id pub-id-type="pmid">22331404</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
