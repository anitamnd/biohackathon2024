<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlm.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title>BMC Bioinformatics</journal-title>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2771019</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-10-334</article-id>
    <article-id pub-id-type="pmid">19832968</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-10-334</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Magallanes: a web services discovery and automatic workflow composition tool</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" contrib-type="author">
        <name>
          <surname>Ríos</surname>
          <given-names>Javier</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>jriosp@uma.es</email>
      </contrib>
      <contrib id="A2" contrib-type="author">
        <name>
          <surname>Karlsson</surname>
          <given-names>Johan</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>tjkarlsson@uma.es</email>
      </contrib>
      <contrib id="A3" corresp="yes" contrib-type="author">
        <name>
          <surname>Trelles</surname>
          <given-names>Oswaldo</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>ots@ac.uma.es</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Computer Architecture Department, University of Malaga, 29080, Malaga, Spain</aff>
    <pub-date pub-type="collection">
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>15</day>
      <month>10</month>
      <year>2009</year>
    </pub-date>
    <volume>10</volume>
    <fpage>334</fpage>
    <lpage>334</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/10/334"/>
    <history>
      <date date-type="received">
        <day>1</day>
        <month>6</month>
        <year>2009</year>
      </date>
      <date date-type="accepted">
        <day>15</day>
        <month>10</month>
        <year>2009</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2009 Ríos et al; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2009</copyright-year>
      <copyright-holder>Ríos et al; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
        <!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>
               R&#x000ed;os
               Javier
               
               jriosp@uma.es
            </dc:author><dc:title>
            Magallanes: a web services discovery and automatic workflow composition tool
         </dc:title><dc:date>2009</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 10(1): 334-. (2009)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2009)10:1&#x0003c;334&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>-->
      </license>
    </permissions>
    <abstract>
      <sec>
        <title>Background</title>
        <p>To aid in bioinformatics data processing and analysis, an increasing number of web-based applications are being deployed. Although this is a positive circumstance in general, the proliferation of tools makes it difficult to find the right tool, or more importantly, the right set of tools that can work together to solve real complex problems.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>Magallanes (Magellan) is a versatile, platform-independent Java library of algorithms aimed at discovering bioinformatics web services and associated data types. A second important feature of Magallanes is its ability to connect available and compatible web services into workflows that can process data sequentially to reach a desired output given a particular input. Magallanes' capabilities can be exploited both as an API or directly accessed through a graphic user interface.</p>
        <p>The Magallanes' API is freely available for academic use, and together with Magallanes application has been tested in MS-Windows™ XP and Unix-like operating systems. Detailed implementation information, including user manuals and tutorials, is available at <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/magallanes"/>.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>Different implementations of the same client (web page, desktop applications, web services, etc.) have been deployed and are currently in use in real installations such as the National Institute of Bioinformatics (Spain) and the ACGT-EU project. This shows the potential utility and versatility of the software library, including the integration of novel tools in the domain and with strong evidences in the line of facilitate the automatic discovering and composition of workflows.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>Applications and databases available online for bioinformatics research are rapidly proliferating [<xref ref-type="bibr" rid="B1">1</xref>]; however, the absence of effective discovery tools for these resources prevents them from being combined in workflows to create powerful bioinformatics machines.</p>
    <p>Typically, in service-oriented architectures, dynamic discovery of tools is made possible by registering tool metadata in a shared repository or registry--for example, UDDI. In bioinformatics, some metadata repositories such as BioMoby [<xref ref-type="bibr" rid="B2">2</xref>] and FETA [<xref ref-type="bibr" rid="B3">3</xref>] also recognize the importance of sharing data formats between tools, and make use of this strategy to implement integration architectures. Such repository approaches have collected large sets of registered services and data types, making a manual discovery process difficult and time consuming. Support for this task has become crucial.</p>
    <p>In general, a discovery process aims to segregate a set of services or data-types that satisfy a given number of requirements from the larger pool of available resources; for example, what services are able to process my molecular sequence?</p>
    <p>These discovery processes can be based on syntax or semantics. In bioinformatics, a syntax-based discovery process is often unsatisfactory because it presumes knowledge of the names of the objects or services to be searched. Semantics-based discovery processes enable a more accurate discovery mechanism since the descriptions are generally structured and well defined. Magallanes uses a syntactic approach for text-based searches and a semantic approach to combine different services, guided by semantic knowledge about the input and output data types.</p>
    <p>The essential task is to design and implement a search engine adapted to the demands of bioinformatics. In this document we present a programmatic library called Magallanes that provides necessary support for flexible and expandable discovery of services, which in turn simplifies the creation of workflows. Results from Magallanes' discovery process can be used as input for workflow generation because web services are automatically combined based on semantic descriptions (specifically based on their input and output data types).</p>
    <p>As a proof-of concept, we have developed several variations of the same client (both standalone and web applications) that use Magallanes as a discovery engine (see Results section). These clients can also be embedded in third-party applications.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <sec>
      <title>Related work</title>
      <p>In this section, we outline related work. Since our work consists of a software library which can be re-used in other client software, we look at two aspects: search and workflow composition functionality in existing clients. Although Magallanes support standard WSDL web services, our efforts so far have focused on BioMoby services since there is a large set of services to search and those services are easily composed due to a shared data type ontology.</p>
      <p>Therefore, we selected the most prominent clients for BioMoby web services for this overview of related work.</p>
    </sec>
    <sec>
      <title>Service discovery by clients</title>
      <p>BioMoby-compatible clients, such as MOWServ [<xref ref-type="bibr" rid="B4">4</xref>], Seahawk [<xref ref-type="bibr" rid="B5">5</xref>], Remora [<xref ref-type="bibr" rid="B6">6</xref>] and Taverna [<xref ref-type="bibr" rid="B7">7</xref>], provide support for service searches in various degrees (see complementary material). Typically, services are located by specifying an input data type (which returns compatible services) or by name (partial matches).</p>
      <p>BioCatalogue [<xref ref-type="bibr" rid="B8">8</xref>] is a public curated catalogue of life science web services that provides a keyword based search and allows filtering the results by some metadata like service type, provider, country, etc. BioCatalogue could benefit from the functionality of Magallanes.</p>
    </sec>
    <sec>
      <title>Automatic workflow composition</title>
      <p>GBrowse [<xref ref-type="bibr" rid="B9">9</xref>] and Seahawk [<xref ref-type="bibr" rid="B5">5</xref>] are two end-user oriented clients with a data-centric approach. Users either specify input data by submitting a data file which the application analyses to determine the correct data type (Seahawk) or they specify identifiers of a sequence in an external database (Seahawk/GBrowse). Available services to further process data are presented once the user data and data type is known to the applications. Seahawk has a slightly more sophisticated approach that lets the user specify what he/she wants to do with the data (using semantic keywords used for by the compatible services) instead of choosing the next service specifically. Both applications allow users to save their results as Taverna workflows.</p>
      <p>The strategy in [<xref ref-type="bibr" rid="B10">10</xref>] is to simplify interactive service composition of BioMoby services. In each step of the workflow construction process, only those services that are compatible and more likely to be useful are displayed. This is achieved by ranking the services according to several aspects, such as semantic similarity of data type inputs; or by non-functional measurements such as number of retrievals of service definitions from MobyCentral. Their composition algorithm aims to limit the number of services presented to the user. The algorithm considers not only direct compatibility and polymorphism (data type compatibility by inheritance), but also includes services whose input/output data type matches the requested data type either directly or recursively. Results are further ranked by their popularity as measured by requests to the central registry, and by the disparity between data types in the ontology.</p>
    </sec>
    <sec>
      <title>Summarizing the related work</title>
      <p>As is evident from section 'Service discovery by clients', search functionality in clients is heterogeneous. Users would benefit from having a standardized way of locating services. Client software developers could, instead of re-inventing search algorithms, focus on providing a user-friendly graphical interface. This shows the need for a freely shared software library.</p>
      <p>Regarding workflow generation, authors in [<xref ref-type="bibr" rid="B10">10</xref>] do not address the problem of locating data types as input to the workflow generation algorithm. This problem becomes serious considering the proliferation of data types in BioMoby (currently over 800).</p>
      <p>While there is clearly a need for service composition support, current approaches fail to recognize the difficulties in a) find initial data type and b) automatically creating an initial version of a workflow. Therefore, we have addressed both a) and b).</p>
    </sec>
    <sec>
      <title>Magallanes' architecture</title>
      <p>Existing workflow composition approaches do not assist the user during initial selection of input and output data types, even though this step can be quite complicated. Magallanes aims to do two things: simplify the discovery task, and integrate discovery with composition.</p>
      <p>Magallanes consists of a Java library with algorithms and data handling routines built using the Modular API [<xref ref-type="bibr" rid="B11">11</xref>]. The Modular API uses specific wrappers called <italic>access</italic>es to map different data types and web-services repositories into a unified model (e.g., parsing the WSDL to get the web service's description, name, etc.). Magallanes can access and manage various remote repositories using a standardized interface, and benefits from a cache system to reduce processing time. Currently, the Modular API can access to BioMoby, INB, ACGT and standard WDSL repositories. In order to support another repository, a new access must be implemented (e.g. we are currently working to incorporate BioCatalogue in the list of available repositories).</p>
      <p>Magallanes' API is organized in two main modules: search engine and workflow composition.</p>
    </sec>
    <sec>
      <title>Search engine</title>
      <p>The search engine module provides Google™-like methods for finding web resources using a scoring system based on the number of occurrences and relative word positions of matching hits. Currently it is endowed with AND/OR operators and regular expressions. The searching space defined by the resource metadata is easily expandable [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>]. The algorithm initially searches for words similar to the keywords on the metadata descriptions. The similarity threshold can be setup as a configuration parameter [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>]. If no hits occur, it becomes necessary to fall back on approximate expression matching. There are two widely used approaches for approximate expression matching: the Hamming distance [<xref ref-type="bibr" rid="B12">12</xref>], which compares strings of the same length and the Levenshtein distance [<xref ref-type="bibr" rid="B13">13</xref>], which compares two strings not necessarily having the same length, measuring by the minimum number of insertions, deletions, and substitutions of characters required to transform one string into another. Levenshtein distance is also known as the matching with <italic>k </italic>differences or errors. If the search does not generate hits, a "Did You Mean?" module in Magallanes pops up to aid the user. This module offers plausible alternatives to the user's query by computing the Levenshtein distance automatically (and letting the user influence the suggestions) to identify words similar to each keyword, and to estimate the distance using multiple keywords.</p>
      <p>Magallanes uses a feedback module to continually learn and refine its discovery capabilities. Any client software using Magallanes is able to access this feedback module, which records user selections of resources associated with specific keywords. The module stores this information and records the 'feedback' value associated to the keyword-resource tuple (KR). This value is adjusted when the user selects another resource using the same keyword.</p>
      <p>Selected KR tuples increase their <italic>feedback </italic>value (v) using the function v = v*α + (1-α), where α is a decay value [0-1 ranged] to slope the learning curve, and correspondingly all the remaining KR tuples with the same keyword decrement their value to v*α.</p>
      <p>Results are ranked by combining the metadata matching information (id, name, description, documentation, etc.) with the feedback information when available. A <italic>score </italic>is computed as the average value of both. The first value is computed as the hits density in the matching space; in other words, the rate between the number of hits and text length. All density values are averaged and normalised to [0-1] to produce the metadata <italic>score</italic>. The <italic>feedback </italic>value for a given resource is the average of the KR tuple value for all the keywords used in the query.</p>
      <p>Finally, Magallanes also allows the use of third-party discovery functionality. For instance, several repositories implement discovery strategies based on web service compatibility with a given data type (i.e., which services are able to process my data?). Intuitively, the consecutive application of this strategy can be exploited to create a sequence of compatible services that connect a given input with another target data type, in "pipeline" fashion. This motivates the next major area of functionality offered by Magallanes: the automatic arrangement of services to connect differing data types, including the management of user interactions to refine results.</p>
    </sec>
    <sec>
      <title>Automatic workflow composition</title>
      <p>The Workflow Management consortium (WfMC) defines a workflow or workflow model as the complete or partial automation of a process in which information or tasks are passed from a participant to another according to a defined set of procedural rules.</p>
      <p>Bioinformatics research can often benefit from connecting several applications in sequence to form a workflow (WF). Manual construction of WFs is complex and prone to error, particularly in bioinformatics where data comes in a multitude of formats. Combined with the difficulty of using distributed web services, composing a meaningful WF can present a challenge to life scientists.</p>
      <p>Automatic workflow generation (also called automatic service composition) aims to automate the task of connecting independent services. Two services can be connected if the output of one is compatible with the input of the other. Therefore, the task of automatic workflow generation is to find the shortest non-redundant sequence of services, meaningful to the research, that match outputs with inputs to link the source to the target data type.</p>
      <p>Workflow generation support can be either semi-automatic, interactively giving advice on suitable services for each step in workflow construction, or fully automatic, where the scientist only provides input and output data sets and the algorithm generates the complete workflow.</p>
      <p>In simplest terms, the automatic WF-builder in Magallanes proceeds to identify all the services that produce a <italic>target </italic>data type as output. All the data types used as input for such services are used a target in the next step.</p>
      <p>A well defined data type hierarchy will provide the required semantics to generate meaningful workflows.</p>
      <p>A breath-first with pruning algorithm [<xref ref-type="bibr" rid="B14">14</xref>] speeds up the process of finding the shortest path from source to target (see Discussion section).</p>
      <p>The following definitions are needed for formal statement of the algorithm: let D be the set of all the data types, and D* be the set of all the possible subsets of data types (that will be consumed by the functions H), thus D* = {d ⊆ D }.</p>
      <p>Let T be the set of all the registered tools in the current repository and let P be all the tools I/O combinations (valid combinations D-T-D without inheritance). Therefore, P = {i, t, o: i, o ∈ D, t ∈ T | i is an input of t and o is an output of t }.</p>
      <p>Here H<sup>- </sup>: D → D* is a function defined to consume a given data type or any of the corresponding sub-data types as input: d<sub>i </sub>→ d = { dj ∈ D: d<sub>j </sub>is subtype of d<sub>i </sub>}.</p>
      <p>As can be observed, H<sup>-</sup>: D* → D* extends the function to receive a set of data types to return all the subtypes of any of them D<sub>i </sub>→ d = { d<sub>j </sub>∈ D | ∃ d<sub>h </sub>∈ D<sub>j </sub>: d<sub>j </sub>is subtype of d<sub>h </sub>}.</p>
      <p>The inverse function H<sup>+</sup>: D → D* defines the supertype d<sub><italic>i </italic></sub>→ d = { d<sub><italic>j</italic></sub>∈ D: d<sub><italic>i </italic></sub>is subtype of d<sub><italic>j </italic></sub>} and correspondingly H<sup>+</sup>: D* → D* extends the function to use collections of inputs: D<sub><italic>i </italic></sub>→ d = { d<sub><italic>j </italic></sub>∈ D | ∃ d<sub><italic>h </italic></sub>∈ D<sub><italic>j </italic></sub>: d<sub><italic>h </italic></sub>is subtype of d<sub><italic>j </italic></sub>}.</p>
      <p>Using these definitions we can outline the algorithm:</p>
      <p>Function Compass</p>
      <p>   Input: source: D</p>
      <p>      target: D</p>
      <p>(1)   sources: ∅</p>
      <p>(2)   unexplored: {target}</p>
      <p>(3)   explored: ∅</p>
      <p>(4)   depth [target]: 0</p>
      <p>(5)   maxDepth: infinity</p>
      <p>(6)   while unexplored != ∅</p>
      <p>(7)      current: first of unexplored</p>
      <p>(8)      unexplored = unexplored - current</p>
      <p>(9)      explored = explored ∪ current</p>
      <p>(10)         if depth [current] &gt; maxDepth</p>
      <p>(11)            end</p>
      <p>(12)         if current ∈ H<sup>+</sup>(source)</p>
      <p>(13)            sources = sources ∪ current</p>
      <p>(14)            maxDepth: depth [current]</p>
      <p>(15)            continue</p>
      <p>(16)         ∀ p = (p<sub><italic>i</italic></sub>, p<sub><italic>t</italic></sub>, p<sub><italic>o</italic></sub>) ∈ P: p<sub><italic>o </italic></sub>= current</p>
      <p>(17)            unexplored = unexplored ∪ p<sub><italic>i</italic></sub></p>
      <p>(18)            depth [p<sub><italic>i</italic></sub>]: depth [current] +1</p>
      <p>(19)            suc [current] = suc [current] ∪ p<sub><italic>i</italic></sub></p>
      <p>Outputs:</p>
      <p>sources: possible WF's input</p>
      <p>suc [<italic>dt</italic>]: p ∈ P backtrack information from <italic>dt </italic>to a source.</p>
      <p>When the <italic>sources </italic>set is empty means a partial solution was obtained; otherwise, a full solution has been reached. It is possible to modify the algorithm's behaviour to search for solutions other than the shortest by managing the <italic>Depth </italic>threshold parameter and by using <italic>a-posteriori </italic>refinement of the solution space by user interaction.</p>
      <p>To illustrate the algorithm behaviour, a trivial example with a reduced set of data types (DT) and services registered in a repository will be used (see Table <xref ref-type="table" rid="T1">1</xref>). The example consists of obtaining a set of amino acid sequences in Fasta format (FastaAAmult target DT) that are similar with a given an AASeq (source DT).</p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Data types and services used in the example</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="left">
                <bold>Input DT</bold>
              </td>
              <td align="left">
                <bold>Service</bold>
              </td>
              <td align="left">
                <bold>Output DT</bold>
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Object</td>
              <td align="left">getAASequence</td>
              <td align="left">AASeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">getAASequenceCollection</td>
              <td align="left">AASeq</td>
            </tr>
            <tr>
              <td align="left"> VirtualSeq</td>
              <td/>
              <td/>
            </tr>
            <tr>
              <td align="left">  GenericSeq</td>
              <td align="left">fromGenericSequenceCollectionToFasta</td>
              <td align="left">Fasta</td>
            </tr>
            <tr>
              <td/>
              <td align="left">fromGenericSequenceToFasta</td>
              <td align="left">Fasta</td>
            </tr>
            <tr>
              <td/>
              <td align="left">fromGenericToAASequence</td>
              <td align="left">AASeq</td>
            </tr>
            <tr>
              <td align="left">   AASeq</td>
              <td align="left">runBlastp</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td/>
              <td align="left">runTblastn</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td align="left">   NNSeq</td>
              <td align="left">runBlastn</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td/>
              <td align="left">runBlastx</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td/>
              <td align="left">runTblastx</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td align="left">  TextPlain</td>
              <td/>
              <td/>
            </tr>
            <tr>
              <td align="left">   TextFormatted</td>
              <td/>
              <td/>
            </tr>
            <tr>
              <td align="left">   BlastText</td>
              <td align="left">getBestHitsFromBlast</td>
              <td align="left">Object</td>
            </tr>
            <tr>
              <td/>
              <td align="left">getIDsFromBlast</td>
              <td align="left">Object</td>
            </tr>
            <tr>
              <td/>
              <td align="left">parseMultipleAlignFromBLASTText</td>
              <td align="left">FastaAAmult</td>
            </tr>
            <tr>
              <td align="left">   Fasta</td>
              <td align="left">fromFastaToAASequence</td>
              <td align="left">AASeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">fromFastaToGenericSequence</td>
              <td align="left">GenericSeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">runDisruptionPhysicalProperties</td>
              <td align="left">TextPlain</td>
            </tr>
            <tr>
              <td align="left">   FastaAA</td>
              <td align="left">fromFASTAToAASequence</td>
              <td align="left">AASeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">runPSIBlastpFromFASTA</td>
              <td align="left">BlastText</td>
            </tr>
            <tr>
              <td align="left">   FastaAAmult</td>
              <td align="left">fromFASTAToAASequenceCollection</td>
              <td align="left">AASeq</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>Schematic representation of a reduced set of data types and associated services able to process these different types of data. Although tools names are descriptive, a long description is available as supplementary material [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>].</p>
        </table-wrap-foot>
      </table-wrap>
      <p>The content of the variables during the execution of the algorithm evolves as follows (see Table <xref ref-type="table" rid="T2">2</xref>): 'sources' will contain all the possible WF inputs; 'unexplored' is a list with the remaining DTs to analyse, in this case the target FastaAAmult DT and 'explored' is the list with the already analysed DT. The variable 'maxDepth' contains the depth of the shortest solution, and depth [&lt;DT&gt;] contains the specific values for each data type. Finally, suc [&lt;DT&gt;] is the set of services that produces the target from &lt;DT&gt; source in depth [&lt;DT&gt;] steps.</p>
      <table-wrap position="float" id="T2">
        <label>Table 2</label>
        <caption>
          <p>Execution trace</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="left">
                <bold>Step</bold>
              </td>
              <td align="left">
                <bold>Status</bold>
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Init</td>
              <td align="left">sources = ∅</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unexplored = { FastaAAmult }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = ∅</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = ∞</td>
            </tr>
            <tr>
              <td/>
              <td align="left">depth [FastaAAmult] = 0</td>
            </tr>
            <tr>
              <td align="left">1</td>
              <td align="left">current = FastaAAmult</td>
            </tr>
            <tr>
              <td/>
              <td align="left">sources = ∅</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unexplored = { BlastText }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = { FastaAAmult }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = ∞</td>
            </tr>
            <tr>
              <td/>
              <td align="left">depth [BlastText] = 1</td>
            </tr>
            <tr>
              <td/>
              <td align="left">suc [BlastText] = {parseMultipleAlignFromBLASTText }</td>
            </tr>
            <tr>
              <td align="left">2</td>
              <td align="left">current = BlastText</td>
            </tr>
            <tr>
              <td/>
              <td align="left">sources = ∅</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unexplored = { AASeq, NNSeq, FastaAA }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = { FastaAAmult, BlastText }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = ∞</td>
            </tr>
            <tr>
              <td/>
              <td align="left">depth [AASeq] = 2</td>
            </tr>
            <tr>
              <td/>
              <td align="left">depth [NNSeq] = 2</td>
            </tr>
            <tr>
              <td/>
              <td align="left">depth [FastaAA] = 2</td>
            </tr>
            <tr>
              <td/>
              <td align="left">suc [AASeq] = {runBlastp, runTblastn}</td>
            </tr>
            <tr>
              <td/>
              <td align="left">suc [NNSeq] = {runBlastn, runBlastx, runTBlastx}</td>
            </tr>
            <tr>
              <td/>
              <td align="left">suc [FastaAA]={parseMultipleAlignFromBLASTText}</td>
            </tr>
            <tr>
              <td align="left">3</td>
              <td align="left">current = AASeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">sources = { AASeq }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = { FastaAAmult, BlastText, AASeq }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = 2</td>
            </tr>
            <tr>
              <td align="left">4</td>
              <td align="left">current = NNSeq</td>
            </tr>
            <tr>
              <td/>
              <td align="left">sources = { AASeq }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unexplored = { FastaAA }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = { FastaAAmult, BlastText, AASeq, NNSeq }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = 2</td>
            </tr>
            <tr>
              <td align="left">5</td>
              <td align="left">current = FastaAA</td>
            </tr>
            <tr>
              <td/>
              <td align="left">sources = { AASeq }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unexplored = ∅</td>
            </tr>
            <tr>
              <td/>
              <td align="left">explored = { FastaAAmult, BlastText, AASeq, NNSeq, FastaAA }</td>
            </tr>
            <tr>
              <td/>
              <td align="left">maxDepth = 2</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>Tracing information showing the content of the main variables during the step-by-step algorithm execution.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>In step 1, 'current' is assigned with 'FastaAAmult', this data type is removed from the 'unexplored' list and added to the 'explored' list. For each tool that returns the 'FastaAAmult' data type (in this case only 'parseMultipleAlignFromBlastText), add the inputs to the 'unexplored' list (BlastText) and set the depth of each input to depth [FastaAAmult]+1 (a new service is in the path). Finally, add the tool to the input data types' successors.</p>
      <p>In Step 2, proceed as in step 1 by taking 'BlastText' from the 'unexplored' list as the 'current' and including 'AASeq', 'NNSeq' and 'FastaAA' to the 'unexplored' list, all of them with a depth value equal to 2.</p>
      <p>In Step 3, 'current' takes 'AASeq' from the 'unexplored' list. Since 'AASeq', is the <italic>source </italic>data type, the algorithm adds 'AASeq' to the 'sources' list and removes it from the 'unexplored' list. Set maxDepth to the depth [AASeq] value (in this case 2).</p>
      <p>In step 4, 'current' takes and moves 'NNseq' from the 'unexplored' to the 'explored' list. Since there is no tool that returns 'NNSeq' data type, go to the next step.</p>
      <p>In step 5, proceed as in step 4 by selecting 'FastaAA' from the 'unexplored' list as the 'current' data type. The algorithm ends at this step because the 'unexplored' list is empty.</p>
      <p>The only possible workflow input is sources = {AASeq}. To built the graph (see Figure <xref ref-type="fig" rid="F1">1</xref>), WF sources are retrieved from sources and the successors can be recursively obtained from suc (i.e. suc [AASeq] = { runBlastp, runTblastn }. This means that the target data type (the solution) is closer when using AASeq to call runBlastp or runTblastn).</p>
      <fig position="float" id="F1">
        <label>Figure 1</label>
        <caption>
          <p><bold>Workflow example</bold>. Proposed WF composition to obtain a set of sequences similar to a given amino acid sequence. Two alternative paths were identified and displayed to be edited and fine-tuned by user interaction.</p>
        </caption>
        <graphic xlink:href="1471-2105-10-334-1"/>
      </fig>
    </sec>
  </sec>
  <sec>
    <title>Results</title>
    <p>In this section, we describe the role and operation of Magallanes client. Magallanes' API functionality is available as a set of Java methods [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>] that can be used by external clients in such a way that results can be used to invoke web services, recover data type descriptions, build up workflows, etc. Specific clients can be developed to fulfil services inter-operability, to enhance search engines, include the "<italic>Did you mean?</italic>" method, etc. [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>]. It is noteworthy to observe that 'did you mean methods' has a long tradition of support of searching engines in the web environment, so what we claim is the novelty of the design, incorporation and utility of this type of strategies in the bioinformatics application domain.</p>
    <p>Magallanes is a client with simple but powerful architecture for resource discovery and workflow composition (see Figure <xref ref-type="fig" rid="F2">2</xref>). As previously explained, the bottom layer of Magallanes' API supplies a uniform view of different data models by managing the uniform representation of resources from different repositories.</p>
    <fig position="float" id="F2">
      <label>Figure 2</label>
      <caption>
        <p><bold>Magallanes architectural scheme</bold>. The bottom layer of the Magallanes' API library works over a standardised view of the diverse repositories and data models supplied by the modular API framework. Magallanes' API functionality is exposed to external clients as a powerful programmatic API organised in two main groups: searching and workflows methods.</p>
      </caption>
      <graphic xlink:href="1471-2105-10-334-2"/>
    </fig>
    <p>Magallanes, coded in Java, provides:</p>
    <p>• integration of different repositories through the use of the modular API in such a way that discovery can be defined for multiple or individual repositories;</p>
    <p>• the capability to extend the metadata discovery space to web links available in descriptive metadata;</p>
    <p>• 'did you mean' assistance methods and user-profile learning capabilities;</p>
    <p>• wide and extendable functionality to include new calling methods using the types of data available; and finally,</p>
    <p>• several alternatives for user interaction, using the GUI library to directly built-up a desktop application, or developing a web-based tool by direct use of Magallanes' API; or as a discovery engine embedded in third-party applications.</p>
    <p>Just like Magallanes' API, Magallanes client is organised into two main modules: searching and workflows. Both are GUI coded as Java Swing components [<xref ref-type="bibr" rid="B15">15</xref>] for querying and managing results, providing extra functionality such as service-data type compatibility.</p>
    <p>The WF composition module is independent from the discovery engine, but the client can send data between the modules (e.g., set a data type as WF's input or output). The interactive GUI uses the JUNG framework [<xref ref-type="bibr" rid="B16">16</xref>] for graphing.</p>
    <p>Magallanes is available as desktop application, Java Web Start, web page, web service implementation, or portlet in a Grid-Environment (currently, automatic workflow generation isn't available in Magallanes' web version). It can also be embedded in third-party applications like the jORCA client <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/jorca"/>.</p>
    <p>Figure <xref ref-type="fig" rid="F3">3</xref>, depicts Magallanes' web interface using the key words 'nucleotide sequence' as a simple example. In a more elaborate query such as "How can I obtain a phylogeny for the gene I have?" the user could start by searching 'gene' (generating 512 hits), or 'phylog' (generating 62 hits--observe this is equivalent to phylog*) or finally, search for "gene phylog" which generates 14 hits. The second and third matching results correspond to 'Estimate phylogenies from protein (or nucleotide) sequence by unrooted parsimony'. It is interesting to note that the 'gene' keyword does not appear in the service description but in the web pages associated with the service. Magallanes follows the links in descriptions to also search for potential matches. This feature allows Magallanes to out-perform current search engines, and function as a discovery engine.</p>
    <fig position="float" id="F3">
      <label>Figure 3</label>
      <caption>
        <p><bold>Web-based implementation of Magallanes search engine</bold>. Example of the web-based implementation of Magallanes engine using the default options for the "nucleotide sequence" query. Results are shown ranked by score, including the specific repository and resource. The web-search option follows web links specified as part of the service metadata.</p>
      </caption>
      <graphic xlink:href="1471-2105-10-334-3"/>
    </fig>
    <p>For a deeper exploration of Magallanes' capabilities, let us assume that we wish to obtain a multiple sequence alignment in Newick format using a given generic sequence as the starting point. The 'Did you mean?' module manages spelling mistakes (e.g. "seqeunc") and suggests a set of possible solutions (data types and services) related with the word 'sequence', among them the 'GenericSequence' data type that can be used as initial input into a WF. Note that GenericSequence is an example of a BioMoby specific data type that is likely unknown to the average user. The 'Did you mean?' module was able to inform the user about this data type. A second search using 'tree' keyword will identify "Newick_tree" that can be entered as target data type. Then the algorithm selects the "shortest" path, which could be extended by relaxing the <italic>depth </italic>threshold or by expanding one more level in a particular step.</p>
    <p>In some research endeavours, a problem arises when only a partial solution can be found and there are no services to connect a given data type with the source data type by reverse analysis. Magallanes manages this situation by inserting a Black-Box service to complete the pathway, letting the user search manually for a solution.</p>
    <sec>
      <title>WF editing</title>
      <p>Although WF editing is beyond the scope of Magallanes, the generated WF model can be examined by an expert user using the developed GUI, which has two switchable and synchronized graph layouts to provide alternative graph representations. The expert user understands how to analyse the WF model and, at the end of this stage, the model can be validated and accepted. In addition, before validating, the expert can review further feedback on the quality of the WF model derived by the quality of the individual services that make up the workflow. Some systems such as MOWServ [<xref ref-type="bibr" rid="B4">4</xref>] store information about service performance: CPU time, availability rate, frequency of use against alternative services, etc.</p>
      <p>The resulting WF model can be stored in a SCUFL format for editing using the Taverna 1 [<xref ref-type="bibr" rid="B7">7</xref>] application. Final mapping with end-point services will occur in run-time.</p>
    </sec>
  </sec>
  <sec>
    <title>Discussion</title>
    <sec>
      <title>Scoring system: resource retrieval</title>
      <p>The rationale of the scoring system used to rank resources is to combine the learning rate based on traditional KR voting systems with user's feedback. This enriches resource identification and adapts resources more rapidly to user needs. For instance, Magallanes stores feedback information using a file system--local in the case of desktop installations or on the server for web-based installations. In these different conditions, context sensitivity can be controlled by managing the learning rate. For instance, the typical scenario for desktop implementations is an individual user, thus a rapid learning rate is appropriate to accelerate adaptability to user preferences. However, a web-based application is designed to be used by several users, so a slower learning rate would improve stability and better reflect group behaviour.</p>
    </sec>
    <sec>
      <title>WF composition</title>
      <p>Depth- and breath-first with pruning implementations were both evaluated for WF composition. Depth-first was able to identify the shortest solution by using an adaptive threshold. However, the repetitive exploration of the potential-solutions space is a challenge when efficient implementation is the goal.</p>
      <p>Initial breath-first implementation drives a forward exploration from <italic>source </italic>to <italic>target </italic>data type with poor response times. The main reason for the excessive response time is related to the large number of services that uses a generic object as input; the typical root in the data type taxonomy system [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>]. As result, object-input services always appear to be initially compatible.</p>
      <p>However, a breath-first backward implementation from <italic>target </italic>to <italic>source </italic>data types produces good response times. Basically, this is because there are many more ways to consume a data type in current repositories than ways to produce data of a specific data type.</p>
      <p>In graphical terms, forward connection is equivalent to the query, 'Which services can use a given DT?' This approach becomes expensive because of the large number of services that consume the root object (e.g. 'Object'). Backward compatibility asks 'Which services return a given DT?' Situations can arise when the list is empty since several DT are used as input by the services (but no services produce them); however, in general, the list is much shorter than in the forward approach.</p>
      <p>Our breath-first algorithm is quicker than the deep-first one, although it consume more memory. To ensure that memory demand in breadth-first approach do not represents a problem we have tested the algorithm using the University of Calgary's BioMoby repository with around 786 services and 1655 data types registered. No memory problems arose.</p>
    </sec>
    <sec>
      <title>About the "Did you mean?" methodology</title>
      <p>Levenshtein distance is used to identify similar words in the repository, producing a ranked list of possible solutions available to the client. This strategy ensures an up-to-date dictionary that is adapted to a specific repository (e.g., in different languages), but it becomes influenced by the quality of annotations in the repository (as when misspelled words on the repository cannot be detected).</p>
      <p>The initial search approach is perfect matching which can produce an aesthetic situation: if a spelling mistake is made during the metadata resource annotation and the same mistake is used as query keyword, Magallanes will identify the mistake as the best solution and will suppress the "Did you mean?" module. However, this functionality (on/off methods) can be managed by the Magallanes' API.</p>
      <p>Another discovery alternative is the use of dictionaries or ontologies to link related concepts, such as "FASTA → sequence → genome" providing semantic information that can be exploited by reasoning engines. However, a generic approach fits better for a broad range of applications, and also, the system is easily extendable to incorporate specific discovery mechanisms.</p>
    </sec>
    <sec>
      <title>Complex workflows (more than one input)</title>
      <p>Without losing the advantages of generality, the described procedure enables users to discover alternative pipelines that connect source with target data types. However, some services need more than one input data type that, in turn, needs to be obtained via another pipelined branch of services. The current solution uses the iterative application of the algorithm for each of the needed branches and integrates them into a global solution [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>].</p>
    </sec>
    <sec>
      <title>Service discovery</title>
      <p>MOWServ [<xref ref-type="bibr" rid="B4">4</xref>] provides several alternatives for service discovery. The taxonomies for services and data types are presented in a tree which the user can browse and search. The search shows the number of hits and highlights the hits in yellow. The user must expand the trees to identify the hits. Furthermore, the trees always contain all resources, not only the matching hits, which make it difficult to find the hits. Searches are limited to full-string matching (allows for intermediate spaces). Additionally, services can be located based on the input data (similar to Seahawk and GBrowse). Recent additions to MOWServ allow users to search for services based on input data types, service type (keyword describing the semantics of the service) and output data types.</p>
      <p>As mentioned before, Seahawk [<xref ref-type="bibr" rid="B5">5</xref>] analyses user data to determine the correct BioMoby data type. Based on this information, the application presents the user with available services grouped according to keywords (service types). There is no direct searching of service or data type descriptions.</p>
      <p>Remora [<xref ref-type="bibr" rid="B6">6</xref>] displays available services based on the currently produced data type during workflow construction. Furthermore, the application provides search functionality that selects search terms based on direct or partial matches. Search terms must be exact and cannot be misspelled.</p>
      <p>Taverna [<xref ref-type="bibr" rid="B7">7</xref>] has updated its search functionality in version 2.0. The application now allows direct and partial matching of nodes in the tree of available activities (BioMoby being one) showing also the number of matches. The tree is automatically filtered to show only matching results.</p>
      <p>Taverna has a plug-in for FETA that allows the user to discover services based on name (partial or entire matches) or additional constraints where the user can select concepts from a list (task performed, data resource used, method used [algorithm etc.] and input/output data types). Concepts used in the search are taken from the myGrid ontology [<xref ref-type="bibr" rid="B17">17</xref>].</p>
    </sec>
    <sec>
      <title>Workflow generation</title>
      <p>Magallanes performs automatic workflow composition, generating the entire sequence of services from start to finish datatypes. After the workflow has been generated, the user can select alternative paths. This strategy is less interactive than [<xref ref-type="bibr" rid="B10">10</xref>], but Magallanes was never designed to be a complete workflow editor. Instead, its focus was on service, data type and workflow discovery. Service and data type discovery allows clients to find the required data types and services using text searches in descriptions. Workflow discovery is not only supported in the obvious way, by treating workflows as services, but also by generating interesting workflows on-the-fly, allowing users to "discover" potentially interesting workflows and then export them to a fully-fledged workflow editor such as Taverna.</p>
      <p>Magallanes' workflow generation is based on the hits generated in the search engine (see Magallanes' architecture section) where the user can choose to select a data type as source or target for the workflow generation algorithm.</p>
      <p>As proof of concept we choose to test the workflows generation module to reproduce already published workflows like [<xref ref-type="bibr" rid="B18">18</xref>]. The workflow reported by Kerhornou and Guigó supports the clustering of co-regulated genes, producing as main result a hierarchical clustering in Newick format from a collection of DNA sequences.</p>
      <p>Magallanes is able to find multiple alternative paths to solve that problem from a FASTA_NA_multi (a collection of nucleotide sequences in FASTA format) to produce a clustering in Newick format (Newick_text data type). The main path of that workflow (ignoring the image output) can be obtained making only four branch selections on Magallanes. This task only took a few minutes to complete with Magallanes, comparing to around two months needed for the manual elaboration of the same workflow (personal communication) [see Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>].</p>
    </sec>
  </sec>
  <sec>
    <title>Conclusion</title>
    <p>One of the most relevant research methods in bioinformatics is intensive use of distributed web-accessible resources. As a number of recent technical publications suggest, appropriate tools for resource discovery and for composition of complex workflows have become urgently needed. Both discovery and composition are the new paradigms to support data processing in massive genomics analysis. In this document, we have acknowledged those new working paradigms and proposed effective solutions.</p>
    <p>The Magallanes software library supplies an integrated framework to develop powerful discovery engines that help researchers find web-services and associated data-types. The rationale for Magallanes' design has been efficiency and usability. There is consensus in the genomics research community that one of the biggest barriers to the integrated use of remote resources is difficulty of locating the appropriate resource. Several techniques have proposed to solve this problem, with varying degrees of success. Magallanes represents advancement in practical web-resource discovering tasks, regardless of application domain. Approximate keyword matching and user profiling have demonstrated the power of simple approaches similar to the most commonly used way to locate web pages--search engines.</p>
    <p>A second important feature available in Magallanes is its capacity to build up workflows by automatic and efficient analysis of alternative pathways. These pathways go from an initial type of data to a desired output by using a set of available and compatible services. Rigorous evaluations of different algorithm implementations lead to an efficient breath-first pruning algorithm from target to source followed by a backtracking procedure.</p>
    <p>The Magallanes client integrates different sources of resource metadata outperforming current client search capabilities. Moreover, the inclusion of indirect information from the available web page links usually embedded in description metadata extends the scope of discovery.</p>
    <p>Various implementations of Magallanes client have been deployed to demonstrate the potential utility of the Magallanes' API. Different variations of the same client (web-based engines, desktop applications, etc.) demonstrate the versatility of the software library. Several of these clients are being used in real installations such as the National Institute of Bioinformatics (Spain) and ACGT-EU project, to exploit BioMoby-based repositories. Web services from the EBI are also among the available service catalogues.</p>
    <p>Although many interesting improvements are already planned for Magallanes, the current approach is an important step in the integrated exploitation of web services, with user interaction and client usability in the application domain of bioinformatics.</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p>•Project name: Magallanes.</p>
    <p>•Project home page: <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/magallanes"/></p>
    <p>•Operating system(s): Platform independent.</p>
    <p>•Programming language: Java.</p>
    <p>•Other requirements: Java 6 or higher.</p>
    <p>•License: free software.</p>
    <p>•Any restrictions to use by non-academics: none.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>JR designed and programmed Magallanes. JK tested the application and helped with the manuscript. OTS conceived of the study, participated in its design and coordination and helped to draft the manuscript. All authors have read, participated in, and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>Supplementary material</bold>. Information about Magallanes' API, complex workflows composition, how to extend the search space, detailed algorithm trace, Did You Mean algorithm example, repositories' statistics and published workflows discovery.</p>
      </caption>
      <media xlink:href="1471-2105-10-334-S1.PDF" mimetype="text" mime-subtype="plain">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgements</title>
      <p>This work has been partially financed by the National Institute for Bioinformatics <ext-link ext-link-type="uri" xlink:href="http://www.inab.org"/> a platform of Genoma-España and the EU project "Advancing Clinico-Genomic Trials on Cancer" (EU-contract no.026996).</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Perez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Andrade</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Wren</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <article-title>Evolving research trends in bioinformatics</article-title>
        <source>Briefings in Bioinformatics Advance Access</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>88</fpage>
        <lpage>95</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbl035</pub-id>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Links</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>BioMOBY: An open source biological web services proposal</article-title>
        <source>Briefings in Bioinformatics</source>
        <year>2002</year>
        <volume>3</volume>
        <fpage>331</fpage>
        <lpage>341</lpage>
        <pub-id pub-id-type="pmid">12511062</pub-id>
        <pub-id pub-id-type="doi">10.1093/bib/3.4.331</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Wroe</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Stevens</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Goble</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Roberts</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Greenwood</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>A suite of daml+oil ontologies to describe bioinformatics web services and data</article-title>
        <source>International Journal of Cooperative Information Systems special issue on Bioinformatics</source>
        <year>2003</year>
        <comment>ISSN: 0218-8430</comment>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Navas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Rojano</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ramirez</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pérez</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Aldana</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Trelles</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>Intelligent client for integrating bioinformatics services</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>106</fpage>
        <lpage>111</lpage>
        <pub-id pub-id-type="pmid">16257987</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti740</pub-id>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gordon</surname>
            <given-names>PMK</given-names>
          </name>
          <name>
            <surname>Sensen</surname>
            <given-names>CW</given-names>
          </name>
        </person-group>
        <article-title>Seahawk: Moving Beyond HTML in Web-based Bioinformatics Analysis</article-title>
        <source>BMC Bioinformatics</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>208</fpage>
        <pub-id pub-id-type="pmid">17577405</pub-id>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-208</pub-id>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Carrere</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gouzy</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>REMORA: a pilot in the ocean of BioMoby web-services</article-title>
        <source>Journal of Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>900</fpage>
        <lpage>901</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl001</pub-id>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oinn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Addis</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ferris</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Marvin</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Senger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Greenwood</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Carver</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Glover</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Pocock</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Wipat</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Taverna: A tool for the composition and enactment of bioinformatics workflows</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>3045</fpage>
        <lpage>3054</lpage>
        <pub-id pub-id-type="pmid">15201187</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth361</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Goble</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Belhajjame</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Tanoh</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Bhagat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wolstencroft</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Stevens</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Nzuobontane</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>McWilliam</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Laurent</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lopez</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Biocatalogue: A Curated Web Service Registry for the Life Science Community</article-title>
        <source>Microsoft eScience conference: 7-9 December 2008; Indianapolis</source>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Gbrowse Moby: a Web-based browser for BioMoby Services</article-title>
        <source>Source Code for Biology and Medicine</source>
        <year>2006</year>
        <volume>1</volume>
        <fpage>4</fpage>
        <pub-id pub-id-type="pmid">17147784</pub-id>
        <pub-id pub-id-type="doi">10.1186/1751-0473-1-4</pub-id>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>DiBernardo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pottinger</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wilkinson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Semi-automatic web service composition for the life sciences using the BioMoby semantic web framework</article-title>
        <source>Journal of Biomedical Informatics</source>
        <year>2008</year>
        <volume>41</volume>
        <fpage>837</fpage>
        <lpage>847</lpage>
        <pub-id pub-id-type="pmid">18373957</pub-id>
        <pub-id pub-id-type="doi">10.1016/j.jbi.2008.02.005</pub-id>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Ramírez</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Karlsson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>García</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Trelles</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>Metadata repositories for web-services and workflows</article-title>
        <source>VIII Jornadas de Bioinformática: Valencia</source>
        <year>2008</year>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hamming</surname>
            <given-names>RW</given-names>
          </name>
        </person-group>
        <article-title>Error detecting and error correcting codes</article-title>
        <source>The Bell System Technical Journal</source>
        <year>1950</year>
        <volume>29</volume>
        <fpage>147</fpage>
        <lpage>160</lpage>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Levenshtein</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Binary codes capable of correcting deletions, insertions and reversals</article-title>
        <source>Soviet Physsics-Doklady</source>
        <year>1966</year>
        <volume>10</volume>
        <fpage>707</fpage>
        <lpage>710</lpage>
        <comment>Original in Russian in Doklady Akademii Nauk SSSR (1965) <bold>163(4)</bold>:845-848</comment>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dijkstra</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>A note on two problems in conection with grapas</article-title>
        <source>Numerische Mathematik</source>
        <year>1959</year>
        <volume>1</volume>
        <fpage>269</fpage>
        <lpage>271</lpage>
        <pub-id pub-id-type="doi">10.1007/BF01386390</pub-id>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Geary</surname>
            <given-names>DM</given-names>
          </name>
        </person-group>
        <article-title>Graphic Java 2</article-title>
        <source>Swing</source>
        <year>1999</year>
        <volume>II</volume>
        <edition>Third</edition>
        <publisher-name>New Jersey: Prentice Hall</publisher-name>
        <comment>ISBN 0-13-079667-0</comment>
      </citation>
    </ref>
    <ref id="B16">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>O'Madadhain</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Fisher</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Boey</surname>
            <given-names>YB</given-names>
          </name>
        </person-group>
        <article-title>The JUNG (Java Universal Network/Graph) Framework</article-title>
        <source>Technical Report UCI-ICS 03-17</source>
        <year>2003</year>
        <publisher-name>University of California, Irvine, Dept. of Information and Computer Science</publisher-name>
      </citation>
    </ref>
    <ref id="B17">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wolstencroft</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Alper</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Hull</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>The myGrid ontology: bioinformatics service discovery</article-title>
        <source>Int J Bioinformatics Research and Applications</source>
        <year>2007</year>
        <volume>3</volume>
        <fpage>303</fpage>
        <lpage>325</lpage>
        <pub-id pub-id-type="doi">10.1504/IJBRA.2007.015005</pub-id>
      </citation>
    </ref>
    <ref id="B18">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kerhornou</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Guigó</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>BioMoby web services to support clustering of co-regulated genes based on similarity of promoter configurations</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <fpage>1831</fpage>
        <lpage>1833</lpage>
        <pub-id pub-id-type="pmid">17496321</pub-id>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm252</pub-id>
      </citation>
    </ref>
  </ref-list>
</back>
