<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8388020</article-id>
    <article-id pub-id-type="pmid">33585897</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btab102</article-id>
    <article-id pub-id-type="publisher-id">btab102</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Genozip: a universal extensible genomic data compressor</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-9794-6825</contrib-id>
        <name>
          <surname>Lan</surname>
          <given-names>Divon</given-names>
        </name>
        <xref rid="btab102-cor1" ref-type="corresp"/>
        <aff><institution>Australian Centre for Ancient DNA, School of Biological Sciences, The Environment Institute, Faculty of Sciences, The University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
        <!--divon@genozip.com-->
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-4603-1473</contrib-id>
        <name>
          <surname>Tobler</surname>
          <given-names>Ray</given-names>
        </name>
        <aff><institution>Australian Centre for Ancient DNA, School of Biological Sciences, The Environment Institute, Faculty of Sciences, The University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
        <aff><institution>Centre of Excellence for Australian Biodiversity and Heritage (CABAH), School of Biological Sciences, University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Souilmi</surname>
          <given-names>Yassine</given-names>
        </name>
        <xref rid="btab102-cor1" ref-type="corresp"/>
        <aff><institution>Australian Centre for Ancient DNA, School of Biological Sciences, The Environment Institute, Faculty of Sciences, The University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
        <aff><institution>National Centre for Indigenous Genomics, Australian National University</institution>, Canberra, ACT 0200, <country country="AU">Australia</country></aff>
        <xref rid="btab102-FM1" ref-type="author-notes"/>
        <!--yassine.souilmi@adelaide.edu.au-->
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5550-9176</contrib-id>
        <name>
          <surname>Llamas</surname>
          <given-names>Bastien</given-names>
        </name>
        <xref rid="btab102-cor1" ref-type="corresp"/>
        <aff><institution>Australian Centre for Ancient DNA, School of Biological Sciences, The Environment Institute, Faculty of Sciences, The University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
        <aff><institution>Centre of Excellence for Australian Biodiversity and Heritage (CABAH), School of Biological Sciences, University of Adelaide</institution>, Adelaide, SA 5005, <country country="AU">Australia</country></aff>
        <aff><institution>National Centre for Indigenous Genomics, Australian National University</institution>, Canberra, ACT 0200, <country country="AU">Australia</country></aff>
        <!--bastien.llamas@adelaide.edu.au-->
        <xref rid="btab102-FM1" ref-type="author-notes"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Kelso</surname>
          <given-names>Janet</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <fn id="btab102-FM1">
        <p>Equal contribution</p>
      </fn>
      <corresp id="btab102-cor1">Corresponding author: E-mail: <email>divon@genozip.com</email>; <email>yassine.souilmi@adelaide.edu.au</email>; <email>bastien.llamas@adelaide.edu.au</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>15</day>
      <month>8</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-02-15">
      <day>15</day>
      <month>2</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>15</day>
      <month>2</month>
      <year>2021</year>
    </pub-date>
    <volume>37</volume>
    <issue>16</issue>
    <fpage>2225</fpage>
    <lpage>2230</lpage>
    <history>
      <date date-type="received">
        <day>09</day>
        <month>12</month>
        <year>2020</year>
      </date>
      <date date-type="rev-recd">
        <day>25</day>
        <month>1</month>
        <year>2021</year>
      </date>
      <date date-type="editorial-decision">
        <day>10</day>
        <month>2</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>12</day>
        <month>2</month>
        <year>2021</year>
      </date>
      <date date-type="corrected-typeset">
        <day>17</day>
        <month>5</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btab102.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title> </title>
        <p>We present Genozip, a universal and fully featured compression software for genomic data. Genozip is designed to be a general-purpose software and a development framework for genomic compression by providing five core capabilities—universality (support for all common genomic file formats), high compression ratios, speed, feature-richness and extensibility. Genozip delivers high-performance compression for widelyused genomic data formats in genomics research, namely FASTQ, SAM/BAM/CRAM, VCF, GVF, FASTA, PHYLIP and 23andMe formats. Our test results show that Genozip is fast and achieves greatly improved compression ratios, even when the files are already compressed. Further, Genozip is architected with a separation of the Genozip <italic toggle="yes">Framework</italic> from file-format-specific <italic toggle="yes">Segmenters</italic> and data-type-specific <italic toggle="yes">Codecs</italic>. With this, we intend for Genozip to be a general-purpose compression platform where researchers can implement compression for additional file formats, as well as new codecs for data types or fields within files, in the future. We anticipate that this will ultimately increase the visibility and adoption of these algorithms by the user community, thereby accelerating further innovation in this space.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>Genozip is written in C. The code is open-source and available on <ext-link xlink:href="http://www.genozip.com" ext-link-type="uri">http://www.genozip.com</ext-link>. The package is free for non-commercial use. It is distributed through the Conda package manager, github, and as a Docker container on DockerHub. Genozip is tested on Linux, Mac and Windows.</p>
      </sec>
      <sec id="s4">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Australian Research Council</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000923</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>ARC DP190103705</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>ARC DECRA fellow</institution>
          </institution-wrap>
        </funding-source>
        <award-id>DE190101069</award-id>
        <award-id>FT170100448</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Genomic data production is growing rapidly as sequencing prices continue to drop, making data storage and transfer a core issue for researchers, healthcare providers, service facilities and private companies. To date, most users have relied upon compression software that implements the RFC 1951 format [<xref rid="btab102-B4" ref-type="bibr">Deutsch, 1996</xref>; e.g.gzip, bgzip (<xref rid="btab102-B8" ref-type="bibr">Li, 2011</xref>) and others], a general-purpose compression format that was designed decades ago and is not specifically tailored for genomic data.</p>
    <p>Many novel algorithms have emerged in recent years that effectively compress one or more of the data types embedded in genomic files [e.g.GTShark (<xref rid="btab102-B3" ref-type="bibr">Deorowicz and Danek, 2019</xref>) and SPRING (<xref rid="btab102-B2" ref-type="bibr">Chandak et al., 2019</xref>)]. However, these algorithms are typically implemented within a rudimentary software package that inadvertently lacks the breadth of features required for a software to be useful in many real-world use cases; most importantly, most work with only one of the common file formats. These limitations have meant that none of these software packages are currently widely used by the genomic researcher and practitioner community.</p>
    <p>Here, we introduce a new version of the compression software Genozip, which has been nearly completely re-written from an earlier version designed to compress VCF files (<xref rid="btab102-B7" ref-type="bibr">Lan et al., 2020</xref>). Genozip now offers five core capabilities:
</p>
    <list list-type="order">
      <list-item>
        <p>Universality—Genozip supports all common genomic file formats—FASTQ, SAM/BAM/CRAM, VCF, GVF, FASTA, PHYLIP and 23andMe.</p>
      </list-item>
      <list-item>
        <p>High compression ratios—better than all other universal tools tested.</p>
      </list-item>
      <list-item>
        <p>Speed—in most cases, faster than other tools.</p>
      </list-item>
      <list-item>
        <p>Feature richness—providing an array of features that allow integration into pipelines, specification of compression options and development tools to allow developers to extend Genozip easily.</p>
      </list-item>
      <list-item>
        <p>Extensibility—with a clear separation of the Genozip Framework from the file formats being compressed and from the codecs used for compression, it is fairly easy to add support for more file formats as well as new codecs to improve compression of specific data types of any specific fields within genomic files.</p>
      </list-item>
    </list>
  </sec>
  <sec>
    <title>2 Software description</title>
    <p>Genozip provides a command line interface that consists of four commands: <monospace>genozip</monospace> for compression, <monospace>genounzip</monospace> for decompression, <monospace>genocat</monospace> to display or subset a compressed file, and <monospace>genols</monospace> to show metadata associated with the compressed files.</p>
    <p>Genozip is currently optimized to compress FASTQ, FASTA, SAM/BAM/CRAM, VCF/BCF, GVF, PHYLIP and 23andMe files, including files that are already compressed into .<italic toggle="yes">gz</italic>, .<italic toggle="yes">bz2</italic>or .<italic toggle="yes">xz</italic> formats. However, Genozip can also compress any other file format. Compression of .cram, .bcf or .xz files requires the software packages samtools, bcftools or xz, respectively, to be available in the PATH environment variable. Genozip allows multiple files of identical or different formats to be specified in the command line. Files that share a common format can be <italic toggle="yes">bound</italic> together with <monospace>genozip –output</monospace> and subsequently unbound with <monospace>genounzip –unbind</monospace>. This functionality is beneficial for packaging a large number of samples together for delivery or archiving.</p>
    <p>Genozip can be integrated into analytical pipelines in two ways. First, <monospace>genozip</monospace> and <monospace>genounzip</monospace> may be used with pipes. Second, <monospace>genocat</monospace> provides random-access to user-specified sections of a .genozip file and facilitates file subsetting. When using <monospace>genocat</monospace> to subset files, the targeted data are identified using the <monospace>–samples</monospace> option for VCF files and the <monospace>–regions</monospace> option for SAM, VCF, FASTA, GVF and 23andMe file types. <monospace>–downsample</monospace>downsamples any file type. Further, because .genozip files are indexed during data compression, a separate indexing step is not required.</p>
    <p>In addition, genocat offers built-in file format <italic toggle="yes">translation</italic>, and currently offers <italic toggle="yes">translations</italic> between SAM and BAM, from SAM or BAM to FASTQ, between FASTA and PHYLIP and from 23andMe to VCF, using <monospace>genounzip’</monospace>s<monospace>–bam</monospace>, <monospace>–sam</monospace>, <monospace>–fastq</monospace>, <monospace>–phylip</monospace>, <monospace>–fasta</monospace> and <monospace>–vcf</monospace> options, respectively.</p>
    <p>Genozip offers a range of data integrity and security options. To support data security requirements that comply with ethical standards now expected for modern genomic projects, Genozip allows encryption of the data using the <monospace>–password</monospace> option. With this option, data are encrypted with the standard Advanced Encryption Standard (AES) algorithm (<xref rid="btab102-B5" ref-type="bibr">Fips, 2009</xref>), using the strongest mode available (256 bits). To ensure data integrity, Genozip includes a built-in MD5 (<xref rid="btab102-B11" ref-type="bibr">Rivest, 1992</xref>) option triggered by using <monospace>–md5</monospace> or <monospace>–test</monospace>. This calculates (in <monospace>genozip</monospace>) or verifies (in <monospace>genounzip</monospace> and <monospace>genocat</monospace>) the MD5 sum of the source data on the fly and stores it within the compressed genozip file. This MD5 sum is then viewable using genols.</p>
    <p>Genozip offers two lossless compression modes: <monospace>–best</monospace>, which is the default and results in the highest compression ratio, and <monospace>–fast</monospace>, which optimizes compression speed at the cost of somewhat reduced compression ratios (see Supplementary Section S12). While Genozip is strictly lossless by default, a lossy<monospace>–optimise</monospace> (or <monospace>–optimize</monospace>) option is also offered, which further improves compression by modifying the data in ways that typically do not impact downstream analysis (See Supplementary Section S3).</p>
    <p>In addition, Genozip supports compression with or without a reference genome sequence. Providing a reference improves compression of the sequence data component in SAM/BAM/CRAM, FASTQ and VCF files. A reference file may be generated from a FASTA file with <monospace>genozip –make-reference</monospace> and used with <monospace>genozip –reference</monospace> or <monospace>–REFERENCE</monospace>. The latter option stores information from the reference within the resulting compressed file, obviating the need to provide the reference as a separate file during the decompression step. Including the reference information within the compressed file is particularly useful when binding several genomic data files together for delivery.</p>
    <p>Finally, fine level information on various aspects of the data compression can be accessed by the user via the large suite of <monospace>–show</monospace> options (see Supplementary Section S8). For instance, <monospace>–show-stats</monospace> provides compression statistics broken down by data type within the file. We anticipate that such information will be insightful for end-users and particularly useful when developing new compression algorithms.</p>
  </sec>
  <sec>
    <title>3 Materials and methods</title>
    <sec>
      <title>3.1 Framework and architecture</title>
      <p>The Genozip framework (<xref rid="btab102-F1" ref-type="fig">Fig. 1</xref>) interprets the user’s command line, reads the source genomic file (referred to as the <italic toggle="yes">txt file</italic>) and divides it into <italic toggle="yes">vblocks</italic>. Each vblock comprises a certain number of full <italic toggle="yes">txt file</italic> lines, limited by size that is determined by the user with the <monospace>–vblock</monospace> option (default: 16MB). By default, a <italic toggle="yes">line</italic> means an actual ASCII line in the <italic toggle="yes">txt file</italic>; however, this is flexible—e.g. for FASTQ, a <italic toggle="yes">line</italic> comprises four textual lines and for BAM it comprises one alignment record.</p>
      <fig position="float" id="btab102-F1">
        <label>Fig. 1.</label>
        <caption>
          <p>Genozip high-level architecture. The Genozip framework interprets and reads the input file(s) in the main thread (I/O thread) and divides them into vblocks, which are then segmented. Segmentation is followed by the compression step. Compressed vblocks are sent back to the I/O thread to create the.genozip output(s)</p>
        </caption>
        <graphic xlink:href="btab102f1" position="float"/>
      </fig>
      <p>Once the Genozip framework has read the <italic toggle="yes">vblock txt data</italic> into memory using its main thread (called the <italic toggle="yes">I/O thread</italic>; <xref rid="btab102-F1" ref-type="fig">Fig. 1</xref>), a separate <italic toggle="yes">compute thread</italic> is spawned to segment the <italic toggle="yes">vblock</italic>. This segmentation step is followed by the final compression step that ultimately generates <italic toggle="yes">z data</italic>, which is the final compressed data for the <italic toggle="yes">vblock</italic>. When the compression step is completed, the compute thread terminates and the compressed <italic toggle="yes">vblock</italic>is handed back to the <italic toggle="yes">I/O thread</italic> that appends it to the .genozip compressed file being generated on disk.</p>
    </sec>
    <sec>
      <title>3.2. The segmentation step</title>
      <p>A <italic toggle="yes">segmenter</italic>is a module that is specific to the file format being compressed. Genozip currently has nine segmenters, one each for FASTQ, FASTA, SAM, BAM, VCF, GVF, PHYLIP, 23andMe and Generic. If samtools (<xref rid="btab102-B9" ref-type="bibr">Li <italic toggle="yes">et al.</italic>, 2009</xref>) is also installed, the SAM segmenter can also handle CRAM files by reading them as SAM. The <italic toggle="yes">Generic</italic> segmenter handles all other file formats for which genozip does not have a <italic toggle="yes">segmenter</italic> in a default manner. Importantly, interested parties can add more segmenters to Genozip in the future.</p>
      <p>The <italic toggle="yes">segmenter</italic>is called by the Genozip framework to work on one line of <italic toggle="yes">txt data</italic> at a time, and the job of the <italic toggle="yes">segmenter</italic>is to segment this line into its individual data components, store these in <italic toggle="yes">contexts</italic> (which are described in detail in Supplementary Section S2) and declare how each context should be handled in the compression stage.</p>
      <p>The segmenter starts by breaking up the <italic toggle="yes">txt line</italic> into the top-level data fields and deciding what to do with each data field. Broadly, it has six options:
</p>
      <list list-type="order">
        <list-item>
          <p><underline>Placing the data directly in its appropriate</underline>  <italic toggle="yes"><underline>context</underline></italic>. We refer to a short string of data inserted into a context as a <italic toggle="yes">snip</italic>. Each new <italic toggle="yes">snip</italic> encountered by the Genozip framework is added to a <italic toggle="yes">dictionary</italic> within each <italic toggle="yes">context</italic>, and an index is added to the <italic toggle="yes">dictionary</italic> entry in a data buffer for this <italic toggle="yes">context</italic> called the <italic toggle="yes">b250 buffer.</italic> Accordingly, the .genozip file stores each <italic toggle="yes">snip</italic> only once and uses a numeric index to point to it throughout the file.</p>
        </list-item>
        <list-item>
          <p><underline>Further segmenting a field into its subfields</underline>: Rather than making a <italic toggle="yes">snip</italic> of the entire field data as it appears in the file, the segmenter can insert a special <italic toggle="yes">snip</italic> type called a <italic toggle="yes">Container</italic>, which defines the structure of the data of this field, where the data itself is stored in other <italic toggle="yes">contexts</italic> that are named in the container. <italic toggle="yes">Containers</italic> can define records containing multiple types of data, as well as arrays of similar data elements or arrays of records. The entire <italic toggle="yes">vblock</italic> is described as a single <italic toggle="yes">Container snip</italic> placed in the TOPLEVEL <italic toggle="yes">context</italic>. This is a key feature that enables the decompressor to be generic. Indeed, in most cases, the decompressor need not have any built-in awareness of the details of each file format. The file format structure is encoded in the data itself, and a <italic toggle="yes">vblock</italic> may be reconstructed by traversing the data starting from the TOPLEVEL.</p>
        </list-item>
        <list-item>
          <p>This is a key feature that enables the decompressor to be generic. Indeed, in most cases, the decompressor need not have any built-in awareness of the details of each file format. The file format structure is encoded in the data itself, and a <italic toggle="yes">vblock</italic> may be reconstructed by traversing the data starting from the TOPLEVEL.</p>
        </list-item>
      </list>
      <list list-type="order">
        <list-item>
          <p><underline>Exploiting known relationships between fields, subsequent lines</underline>  <underline>and/or external data</underline> to improve the compression. For that, the segmenter may define <italic toggle="yes">contexts</italic> as needed—for example, it may store multiple fields in a single context or may decompose a field into multiple contexts. It can be as simple as exploiting a mathematical relationship between fields, but it can also be complex—for example, the sequence data in FASTQ and SAM are aligned to a reference if the <monospace>–reference</monospace> option is used.</p>
        </list-item>
        <list-item>
          <p><underline>Using one of the Genozip’s framework built-in algorithms</underline>. Some relationships occur frequently, for which Genozip has built-in algorithms. These include the <italic toggle="yes">seg_pos</italic> algorithm that exploits the nearness of position data in subsequent lines, if it exists and <italic toggle="yes">seg_id</italic> algorithm that handles ID data that starts with an alphabetical prefix followed by a number (such as ‘rs23424’) as well as LOOKUP and DELTA versus another field on the same line or versus the same field in a previous line or versus the pair file (in case of paired-end FASTQ files). Details about these built-in algorithms can be found in Supplementary Section S2.</p>
        </list-item>
        <list-item>
          <p><underline>Preparing the data for a</underline>  <italic toggle="yes"><underline>specific</underline></italic>  <underline>codec</underline>. Rather than inserting a <italic toggle="yes">snip</italic>, the segmenter can store the data of a field in the <italic toggle="yes">local</italic> buffer of the <italic toggle="yes">context</italic> in any proprietary way, in preparation for consumption by a <italic toggle="yes">specific</italic> codec in the compression stage.</p>
        </list-item>
        <list-item>
          <p><underline>Declaring a</underline>  <italic toggle="yes"><underline>context</underline></italic>  <underline>to be an</underline>  <italic toggle="yes"><underline>alias.</underline></italic> There are cases where multiple fields contain data with similar characteristics, in which case storing them in a single <italic toggle="yes">context</italic> can improve compression. To achieve this, we can define a <italic toggle="yes">context</italic> as an <italic toggle="yes">alias</italic> of another, essentially sharing their data. For example, in SAM format, there are multiple Optional tags that express data in CIGAR format (MC:Z, OC:Z and others), which are all defined as aliases of a <italic toggle="yes">context</italic> named @CIGAR.</p>
        </list-item>
      </list>
      <p>In the <italic toggle="yes">Generic</italic>segmenter used for unrecognized file formats, the segmenter is trivial and does not actually segment the data—instead, the entire <italic toggle="yes">vblock</italic> data is placed in a <italic toggle="yes">local</italic> buffer of a single context.</p>
      <p>A detailed example of how these six options work is in Supplementary Section S2, as well as a full list of how each of the nine segmenters in Genozip handles each data field.</p>
    </sec>
    <sec>
      <title>3.3. Context management</title>
      <p>Segmentation step: Each <italic toggle="yes">vblock</italic> maintains its own set of <italic toggle="yes">contexts—</italic>the set consisting of one <italic toggle="yes">context</italic> for each data component. A context is a data structure that includes the <italic toggle="yes">dictionary</italic>, <italic toggle="yes">b250</italic>, and <italic toggle="yes">local</italic> data buffers as well as additional information.</p>
      <p>Context merging step: We maintain one global set of similar <italic toggle="yes">contexts</italic> within an object called the <italic toggle="yes">z_file</italic> to which we merge vblock<italic toggle="yes">contexts’</italic> dictionary data after the segmentation is completed for a <italic toggle="yes">vblock</italic>, thereby incrementally creating a global dictionary containing, in a particular <italic toggle="yes">z_datacontext</italic>, all values of that appear for that data component in the entire file (except for singletons—see Supplementary Section S2).</p>
      <p>Cloning step: When a new <italic toggle="yes">vblock</italic> is created, the current dictionary and related information of each <italic toggle="yes">context</italic> are <italic toggle="yes">cloned</italic> from the <italic toggle="yes">z_file</italic> to the new <italic toggle="yes">vblock</italic> by the framework.</p>
      <p>Writing step: After the compute thread terminates and the <italic toggle="yes">vblock</italic> is handed back to the I/O thread, the I/O thread writes the <italic toggle="yes">vblock’</italic>s<italic toggle="yes">z_data</italic> (containing <italic toggle="yes">b250 and local</italic> sections) to the output .genozip file. The merged dictionary data is written upon the completion of computing of all <italic toggle="yes">vblocks</italic>.</p>
      <p><italic toggle="yes">Context</italic> cloning, concurrent <italic toggle="yes">dictionary</italic> access and <italic toggle="yes">context</italic> merging in a multi-threaded environment are difficult, even more so with minimal synchronization between threads to avoid a bottleneck that would limit scaling CPU cores. We employ advanced multi-threading mechanisms that ensure that all threads can operate on the same dictionaries concurrently while minimizing the use of synchronization objects like mutexes, minimizing memory copies, and ensuring O(1) dictionary lookups, uniqueness of dictionary entries and thread-safety. Details of how this is done are in Supplementary Section S6.</p>
    </sec>
    <sec>
      <title>3.4 The compression step</title>
      <p>Within the <italic toggle="yes">compute thread</italic> of any specific <italic toggle="yes">vblock</italic>, and once the segmentation is complete for all lines and the contexts dictionaries have been merged back into <italic toggle="yes">z_file</italic>, the framework proceeds to compress the two buffers of each <italic toggle="yes">context</italic> present in this vblock—namely, the <italic toggle="yes">b250</italic> and the <italic toggle="yes">local</italic> buffers. Each buffer is compressed with one of the available codecs. There are two types of codecs in Genozip:</p>
      <p><italic toggle="yes">Generic</italic> codecs—these are lzma (<xref rid="btab102-B10" ref-type="bibr">Pavlov, 2007</xref>), bz2 (<xref rid="btab102-B12" ref-type="bibr">Seward, 1996</xref>), bsc (<ext-link xlink:href="http://libbsc.com/" ext-link-type="uri">http://libbsc.com/</ext-link>) and <italic toggle="yes">none</italic>. The first three are standard codecs for which Genozip utilizes a modified version of the standard libraries, and the fourth is a codec that essentially keeps the data as-is.</p>
      <p><italic toggle="yes">Specific</italic> codecs—these are additional codecs that compress a specific data type better than the generic codecs and would often be <italic toggle="yes">complex</italic> codecs—which means that they will perform some processing of the data, and then complete the compression by applying one or more of the built-in codecs. <italic toggle="yes">Specific</italic> codecs can be added to compress any specific field of any genomic file format.</p>
      <p>For the <italic toggle="yes">b250</italic> and <italic toggle="yes">local</italic> buffers of each <italic toggle="yes">context</italic>, the codec is selected automatically by sampling approximately 100KB of the buffer data in the first <italic toggle="yes">vblock</italic> in which this <italic toggle="yes">context</italic> is first encountered and compressing it with each of the four codecs. The best codec is selected by an algorithm that chooses the codec with the best compression ratio unless the compression ratio between the best two codecs is close enough, and the execution time is different enough, in which case it selects the faster codec of the two. Subsequent <italic toggle="yes">vblocks</italic> use the same codec and need not test again. In <monospace>–fast</monospace> mode, a modified selection algorithm is used that is biased towards speed even at the expense of a small difference in compression.</p>
      <p>A segmenter may specify a codec for the <italic toggle="yes">local</italic> buffer of any particular <italic toggle="yes">context</italic>, overriding the automatic selection. In the segmenters provided, we use this privilege only when we set the codec to a <italic toggle="yes">specific</italic> codec.</p>
      <p>Genozip currently has four <italic toggle="yes">specific</italic> codecs:
</p>
      <list list-type="order">
        <list-item>
          <p><italic toggle="yes">acgt—</italic>used for compression of a sequence of nucleotides, which is expected to contain mostly, but not necessarily exclusively, ‘A’, ‘C’, ‘G’ or ‘T’ characters. It is used to compress FASTA sequence data and characters (bases) from the SEQ field of FASTQ and SAM file formats that are not mapped to a reference.</p>
        </list-item>
        <list-item>
          <p><italic toggle="yes">domqual—</italic>used for compression of a string of Phred quality-scores in SAM and FASTQ formats, in the common case where there is one dominant score value.</p>
        </list-item>
        <list-item>
          <p><italic toggle="yes">hapmat—</italic>used for compression of a matrix of haplotypes derived from FORMAT/GT fields in VCF. The algorithm is described in (<xref rid="btab102-B7" ref-type="bibr">Lan<italic toggle="yes">et al.</italic>, 2020</xref>) and has been re-implemented to serve as a codec.</p>
        </list-item>
        <list-item>
          <p><italic toggle="yes">gtshark—</italic>triggered by the <monospace>–gtshark</monospace> option, utilizes the software package GTShark (<xref rid="btab102-B3" ref-type="bibr">Deorowicz and Danek, 2019</xref>) as a codec for the same haplotype matrix as <italic toggle="yes">hapmat</italic> as an alternative to <italic toggle="yes">hapmat</italic>. This was already implemented in (<xref rid="btab102-B7" ref-type="bibr">Lan<italic toggle="yes">et al.</italic>, 2020</xref>), where we have shown it to be significantly better but significantly slower than <italic toggle="yes">hapmat</italic> for the FORMAT/GT data component in VCF files that have a large number of samples. It has been re-implemented as a codec for FORMAT/GT on top of the new framework and with a new fast in-memory (rather than disk-based) communication channel between genozip and gtshark. This is an example of how Genozip can be easily extended to incorporate new codecs for specific data types.</p>
        </list-item>
      </list>
      <p>More details on the algorithms for each of these codecs can be found in Supplementary Section S6.</p>
    </sec>
    <sec>
      <title>3.5 Compressing against a reference</title>
      <p>Genozip does not require a reference but takes advantage if one is available to better compress FASTQ, SAM/BAM and VCF data.</p>
      <p>To use a reference with Genozip, a <italic toggle="yes">Genozip reference file</italic> must first be created using genozip<monospace>–make-reference</monospace>. This is a one-time step for any particular reference FASTA file. The Genozip reference file creation is implemented by segmenting the reference FASTA data with a specialized segmenter, which generates a Genozip file containing a pre-processed version of the reference data in a format that is readily usable by Genozip, as well as hash tables for use of the Genozip Aligner, indexing data and additional metadata.</p>
      <p>When using a particular Genozip reference file to compress data for the first time, Genozip generates two cache files. These files are used to accelerate the loading of the reference data and the Genozip Aligner hash tables in subsequent executions of Genozip and may be deleted if such acceleration is not needed. The acceleration is achieved by loading the cache files, if they exist, using the operating system’s paging system rather than libc allocated memory, allowing portions of the reference data to be paged-in as needed, and also enables sharing of the loaded pages between concurrently running Genozip processes, resulting in reduced memory consumption and instantaneous loading in the case of concurrent Genozip instances.</p>
      <p>The VCF segmenter uses reference data to avoid storing REF and/or ALT data and referring to the reference if possible. Since the REF and ALT fields usually represent only a small fraction of the information content of a VCF file, the gains are modest, however.</p>
      <p>The SAM and BAM segmenters use reference data in two different ways, depending on whether the <italic toggle="yes">txt line</italic> being segmented is aligned (i.e. contains values in the RNAME, POS and CIGAR fields) or not, and the FASTQ segmenter uses the reference similar unaligned SAM/BAM:
</p>
      <list list-type="order">
        <list-item>
          <p>For an aligned SAM/BAM/CRAM <italic toggle="yes">txt line</italic>, the segmenter decomposes the data into three <italic toggle="yes">contexts</italic>: SQBITMAP, NONREF and NONREF_X. SQBITMAP is a bitmap consisting of a bit for every base in the sequence that ‘consumes a reference’, as defined in the SAM specification (<ext-link xlink:href="https://samtools.github.io/hts-specs/SAMv1.pdf" ext-link-type="uri">https://samtools.github.io/hts-specs/SAMv1.pdf</ext-link>page 8) according to the CIGAR string. The bit is set to 1 if the base is the same as the base in the reference data at its position. If not, the bit is set to 0, and the base character is placed in NONREF. Bases in the sequence that ‘do not consume a reference’, according to the CIGAR string, are also placed in NONREF. NONREF is set to be compressed with the <italic toggle="yes">acgt</italic> codec that requires a second <italic toggle="yes">context</italic> for the CODEC_XCGT data, which is NONREF_X (see Supplementary Section S6).</p>
        </list-item>
        <list-item>
          <p>For an unaligned SAM/BAM/CRAM <italic toggle="yes">txt line</italic> and a FASTQ sequence line, the Genozip Aligner is used. It utilizes the same three <italic toggle="yes">contexts</italic> described above and two additional ones: GPOS and STRAND. The Aligner algorithm (see Supplementary Section S4) finds the position in the reference to which the sequence string at hand best aligns. This algorithm is extremely fast as it does not attempt to find the biologically correct alignment, just one that compresses well. The aligner determines the location in the reference, using a coordinate called <italic toggle="yes">gpos</italic>(Global Position) - which is a single 32-bit unsigned integer covering the entire reference genome, and indicates whether it is forward or reverse complement relative to the sequence (which we call <italic toggle="yes">strand</italic>). The segmenter then stores the <italic toggle="yes">gpos</italic> and <italic toggle="yes">strand</italic> in the <italic toggle="yes">local</italic> buffers of the GPOS and STRAND contexts, respectively (the strand is stored as a bitmap with ‘1’ meaning forward) and proceeds to populate the SQBITMAP and NONREF contexts as before, based on whether or not each base in the sequence matches the corresponding base in the forward or reverse complement reference.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>3.6 Indexing</title>
      <p>While Genozip is designed as a compression tool rather than a data analysis tool, it also contains some capabilities that allow direct integration into analysis pipelines. Chief among these, is indexing of the data done by the Genozip framework during segmentation, which then allows subsetting the data with the <monospace>genocat –regions</monospace> option: a segmenter may notify the Genozip framework of the chromosome (or contig) and position of each line being segmented. As the segmentation progresses, the framework collects data per vblock—namely, it records which chromosomes appear in the vblock, and the minimum and maximum position of each chromosome within the vblock. These data are then emitted to the generated compressed genozip file as the SEC_RANDOM_ACCESS section.</p>
      <p>During <monospace>genocat–regions</monospace>,vblocks that contain no data from the requested regions are skipped entirely, while vblocks that do contain data from the requested regions are decompressed, but only lines that are included in the requested regions are emitted.</p>
      <p>In addition, Genozip reference files are also indexed in the same way, so when subsetting a file that requires a reference (i.e. the <monospace>–reference</monospace> option is used), Genozip only reads the vblocks of the reference file that overlap with the regions requested.</p>
      <p>Currently, the segmenters for VCF, SAM, BAM, GVF and 23andMe implement this capability.</p>
      <p>This indexing method is more coarse-grained than the BGZF-block level indexing that is common in standard indexes of genomic file formats, as subsetting requires decompression of entire vblocks (16MB of txt data in the default configuration) versus just BGZF blocks (64KB of data), and hence subsetting is significantly slower. However, in practice, this may be sufficient for many analysis applications.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Results</title>
    <p>We evaluated the performance of Genozip by compressing genomic files as they most commonly appear in real-world research and clinical situations—namely, already compressed in fastq.gz, BAM, CRAM and vcf.gz formats. Regarding CRAM, we tested two different commonly used versions of CRAM files—a version containing the same data as the BAM file and a version optimizedby binning quality data. For VCF, we tested a single-sample file. We previously reported the compression performance of multi-sample VCF using an earlier version of the HapMat codec in <xref rid="btab102-B7" ref-type="bibr">Lan<italic toggle="yes">et al.</italic> (2020)</xref>. For BAM, CRAM and FASTQ, we also tested with Genozip’s<monospace>–optimise</monospace> option.</p>
    <p>The FASTQ, BAM and VCF files (<xref rid="btab102-T1" ref-type="table">Table 1</xref> with further details in Supplementary <xref rid="sup1" ref-type="supplementary-material">Table S10</xref>) were obtained from a public FTP server of the National Center for Biotechnology Information (NCBI), while the CRAM files were generated from the BAM file usingScramble (<xref rid="btab102-B1" ref-type="bibr">Bonfield, 2014</xref>) with the highest compression ratio (-9 option) and, in addition, for the binned-quality CRAM, with the quality-binning option -B (<xref rid="btab102-T1" ref-type="table">Table 1</xref>). The reference file used was based on a modified version of GRCh37 as required by the particular BAM file tested (see Supplementary Section S12) and was prepared with: <monospace>genozip –make-reference $grch37-fasta-file</monospace>.</p>
    <table-wrap position="float" id="btab102-T1">
      <label>Table 1.</label>
      <caption>
        <p>Files used for testing against already-compressed files</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">File type</th>
            <th rowspan="1" colspan="1">File size</th>
            <th rowspan="1" colspan="1"><bold>Genozip command</bold> —optimise added for the Optimised test</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">.fastq.gz</td>
            <td rowspan="1" colspan="1">3.6 GB (R1+R2)</td>
            <td rowspan="1" colspan="1">genozip—pair $file-R1 $file-R2 -e $ref-file</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">.bam</td>
            <td rowspan="1" colspan="1">147 GB</td>
            <td rowspan="1" colspan="1">genozip $file -e $ref-file</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">.cram (lossless)</td>
            <td rowspan="1" colspan="1">102 GB</td>
            <td rowspan="1" colspan="1">genozip $file -e $ref-file</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">.cram (binned)</td>
            <td rowspan="1" colspan="1">79.5 GB</td>
            <td rowspan="1" colspan="1">genozip $file -e $ref-file</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">.vcf.gz</td>
            <td rowspan="1" colspan="1">128 MB</td>
            <td rowspan="1" colspan="1">genozip $file -e $ref-file</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn1">
          <p><italic toggle="yes">Note</italic>: See more details in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S10</xref>.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>Genozip improved the compression of these already-compressed files in every scenario we tested by a 1.2–5.7 factor (<xref rid="btab102-F2" ref-type="fig">Fig. 2</xref> as well as <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S11</xref> in <xref rid="sup1" ref-type="supplementary-material">Supplementary Information</xref>).</p>
    <fig position="float" id="btab102-F2">
      <label>Fig. 2.</label>
      <caption>
        <p>Sizes of Genozip-compressed files relative to already-compressed source files.The blue bars represent the source files (see <xref rid="btab102-T1" ref-type="table">Table 1</xref>), with the corresponding file extensions at the bottom. The orange and grey bars are for Genozip compression with the default, lossless mode and the –optimise option, respectively. See also results in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S11</xref></p>
      </caption>
      <graphic xlink:href="btab102f2" position="float"/>
    </fig>
    <p>In addition, we performed tests comparing Genozip’s compression ratio on raw (uncompressed) files (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S8</xref> in <xref rid="sup1" ref-type="supplementary-material">Supplementary Information</xref>), as well as compression and decompression time, to several popular tools. These additional results can be found in Supplementary Section S12 and illustrated in <xref rid="btab102-F3" ref-type="fig">Figure 3</xref>, <xref rid="btab102-T2" ref-type="table">Table 2</xref> and Supplementary Tables S8 and S9. Again, in all cases tested, Genozip outperformed other software for compression ratio by a 1.3-4.4 factor, while also faster than other tools in most, but not all, cases.</p>
    <fig position="float" id="btab102-F3">
      <label>Fig. 3.</label>
      <caption>
        <p>Raw (uncompressed) files benchmark results.The three panels show compression ratios of various relevant compression formats indicated at the bottom relative to uncompressed VCF (left), SAM (middle) and FASTQ (right) files relative. See Supplementary Section S12 for more details</p>
      </caption>
      <graphic xlink:href="btab102f3" position="float"/>
    </fig>
    <table-wrap position="float" id="btab102-T2">
      <label>Table 2.</label>
      <caption>
        <p>Raw-file benchmark results</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Tool</th>
            <th rowspan="1" colspan="1">Ratio</th>
            <th rowspan="1" colspan="1">Compress time</th>
            <th rowspan="1" colspan="1">Decompress time</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">
              <bold>VCF</bold>
            </td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Pigz</td>
            <td rowspan="1" colspan="1">15.9</td>
            <td rowspan="1" colspan="1">1.9 sec</td>
            <td rowspan="1" colspan="1">3.1 sec</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">bcftools</td>
            <td rowspan="1" colspan="1">11.7</td>
            <td rowspan="1" colspan="1">23.82 sec</td>
            <td rowspan="1" colspan="1">21.02 sec</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">bzip2</td>
            <td rowspan="1" colspan="1">25.3</td>
            <td rowspan="1" colspan="1">260.05 sec</td>
            <td rowspan="1" colspan="1">43.37 sec</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">genozip</td>
            <td rowspan="1" colspan="1">33.6</td>
            <td rowspan="1" colspan="1">7.1 sec</td>
            <td rowspan="1" colspan="1">6.53 sec</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <bold>SAM</bold>
            </td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Pigz</td>
            <td rowspan="1" colspan="1">3.4</td>
            <td rowspan="1" colspan="1">00:12:40.3</td>
            <td rowspan="1" colspan="1">00:34:17.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Bam</td>
            <td rowspan="1" colspan="1">3.2</td>
            <td rowspan="1" colspan="1">00:23:16.7</td>
            <td rowspan="1" colspan="1">00:29:48.5</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Cram</td>
            <td rowspan="1" colspan="1">4.7</td>
            <td rowspan="1" colspan="1">00:27:58.4</td>
            <td rowspan="1" colspan="1">00:17:34.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">genozip</td>
            <td rowspan="1" colspan="1">5.8</td>
            <td rowspan="1" colspan="1">00:33:41.1</td>
            <td rowspan="1" colspan="1">00:27:55.3</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">cram opt (binned quality)</td>
            <td rowspan="1" colspan="1">6.0</td>
            <td rowspan="1" colspan="1">00:48:56.1</td>
            <td rowspan="1" colspan="1">00:19:10.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">genozip opt (—optimise)</td>
            <td rowspan="1" colspan="1">7.6</td>
            <td rowspan="1" colspan="1">00:30:51.1</td>
            <td rowspan="1" colspan="1">00:20:38.0</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <bold>FASTQ</bold>
            </td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Pigz</td>
            <td rowspan="1" colspan="1">4.2</td>
            <td rowspan="1" colspan="1">00:14:34.5</td>
            <td rowspan="1" colspan="1">00:34:17.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">bwa -&gt; cram</td>
            <td rowspan="1" colspan="1">5.4</td>
            <td rowspan="1" colspan="1">03:42:54.0</td>
            <td rowspan="1" colspan="1">00:48:24.7</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">genozip</td>
            <td rowspan="1" colspan="1">6.8</td>
            <td rowspan="1" colspan="1">00:16:40.1</td>
            <td rowspan="1" colspan="1">00:08:31.7</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">genozip opt</td>
            <td rowspan="1" colspan="1">18.6</td>
            <td rowspan="1" colspan="1">00:08:52.3</td>
            <td rowspan="1" colspan="1">00:05:26.4</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn2">
          <p><italic toggle="yes">Note</italic>: Seemore details in Supplementary Table S9.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>Genozip provides not only excellent compression for raw (uncompressed) genomic files, but also provides excellent compression when applied directly to already-compressed genomic files, as is common in real-world applications. Genozip is also universal and works on all common genomic files, uniquely so amongst currently available genomic file compressors.</p>
    <p>Further, by providing a modular and extensible architecture, Genozip is also a framework that can be used for rapid development and deployment of new compression algorithms for established or emerging genomic data types and file formats.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btab102_Supplementary_Datay</label>
      <media xlink:href="btab102_supplementary_datay.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The authors thank one anonymous reviewer and Heng Li for their constructive feedback.</p>
    <sec>
      <title>Funding</title>
      <p>D.L. was supported by a scholarship from the University of Adelaide. Y.S. was supported by the Australian Research Council[ARC DP190103705]. R.T. was an ARC DECRA fellow [DE190101069]. B.L. was an ARC Future Fellow[FT170100448].</p>
      <p><italic toggle="yes">Conflict of Interest</italic>: D.L. intends to receive royalties from commercial users of genozip.</p>
    </sec>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btab102-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bonfield</surname><given-names>J.K.</given-names></string-name></person-group> (<year>2014</year>) <article-title>The Scramble conversion tool</article-title>. <source>Bioinformatics</source>, <volume>30</volume>, <fpage>2818</fpage>–<lpage>2819</lpage>.<pub-id pub-id-type="pmid">24930138</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chandak</surname><given-names>S.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2019</year>) <article-title>SPRING: a next-generation compressor for FASTQ data</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, <fpage>2674</fpage>–<lpage>2676</lpage>.<pub-id pub-id-type="pmid">30535063</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Deorowicz</surname><given-names>S.</given-names></string-name>, <string-name><surname>Danek</surname><given-names>A.</given-names></string-name></person-group> (<year>2019</year>) <article-title>GTShark: genotype compression in large projects</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, <fpage>4791</fpage>–<lpage>4793</lpage>.<pub-id pub-id-type="pmid">31225861</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B4">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Deutsch</surname><given-names>P.</given-names></string-name></person-group> (<year>1996</year>) DEFLATE Compressed Data Format Specification version 1.3https://tools.ietf.org/html/rfc1951 (accessed 1 December 2020).</mixed-citation>
    </ref>
    <ref id="btab102-B5">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Fips</surname><given-names>P.</given-names></string-name></person-group> (<year>2009</year>) 197, Advanced Encryption Standard (AES), National Institute of Standards and Technology, US Department of Commerce, November 2001. <ext-link xlink:href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" ext-link-type="uri">http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf</ext-link> (accessed 1 December 2020).</mixed-citation>
    </ref>
    <ref id="btab102-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lan</surname><given-names>D.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>genozip: a fast and efficient compression tool for VCF files</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, <fpage>4091</fpage>–<lpage>4092</lpage>.<pub-id pub-id-type="pmid">32407471</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group> (<year>2011</year>) <article-title>Tabix: fast retrieval of sequence features from generic TAB-delimited files</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>718</fpage>–<lpage>719</lpage>.<pub-id pub-id-type="pmid">21208982</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group>  <etal>et al</etal>; 1000 Genome Project Data Processing Subgroup. (<year>2009</year>) <article-title>The Sequence Alignment/Map format and SAMtools</article-title>.<source>Bioinformatics</source>, <volume>25</volume>, <fpage>2078</fpage>–<lpage>2079</lpage>.<pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="btab102-B10">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Pavlov</surname><given-names>I.</given-names></string-name></person-group> (<year>2007</year>) Lzmasdk (software development kit). <ext-link xlink:href="https://www.7-zip.org/sdk.html" ext-link-type="uri">https://www.7-zip.org/sdk.html</ext-link> (accessed 1 December 2020).</mixed-citation>
    </ref>
    <ref id="btab102-B11">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Rivest</surname><given-names>R.</given-names></string-name></person-group> (<year>1992</year>) RFC1321: The MD5 Message-Digest Algorithm <ext-link xlink:href="https://www.ietf.org/rfc/rfc1321.txt" ext-link-type="uri">https://www.ietf.org/rfc/rfc1321.txt</ext-link> (accessed 1 December 2020).</mixed-citation>
    </ref>
    <ref id="btab102-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Seward</surname><given-names>J.</given-names></string-name></person-group> (<year>1996</year>) bzip2 and libbzip2. <ext-link xlink:href="http://www.bzip.org" ext-link-type="uri">http://www.bzip.org</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
