<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Database (Oxford)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Database (Oxford)</journal-id>
    <journal-id journal-id-type="publisher-id">databa</journal-id>
    <journal-title-group>
      <journal-title>Database: The Journal of Biological Databases and Curation</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1758-0463</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6301337</article-id>
    <article-id pub-id-type="doi">10.1093/database/bay130</article-id>
    <article-id pub-id-type="publisher-id">bay130</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Foundry: a message-oriented, horizontally scalable ETL system for scientific data integration and enhancement</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-3944-1893</contrib-id>
        <name>
          <surname>Ozyurt</surname>
          <given-names>Ibrahim Burak</given-names>
        </name>
        <!--<email>iozyurt@ucsd.edu</email>-->
        <xref ref-type="aff" rid="aff1"/>
        <xref rid="cor1" ref-type="corresp"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-5212-7052</contrib-id>
        <name>
          <surname>Grethe</surname>
          <given-names>Jeffrey S</given-names>
        </name>
        <xref ref-type="aff" rid="aff1"/>
      </contrib>
    </contrib-group>
    <aff id="aff1">Center for Research in Biological Systems, University of California, San Diego, La Jolla, CA, USA</aff>
    <author-notes>
      <corresp id="cor1">Corresponding author: <email>iozyurt@ucsd.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2018-12-17">
      <day>17</day>
      <month>12</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>17</day>
      <month>12</month>
      <year>2018</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>2018</volume>
    <elocation-id>bay130</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>9</month>
        <year>2018</year>
      </date>
      <date date-type="rev-recd">
        <day>18</day>
        <month>10</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>11</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="bay130.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Data generated by scientific research enables further advancement in science through reanalyses and pooling of data for novel analyses. With the increasing amounts of scientific data generated by biomedical research providing researchers with more data than they have ever had access to, finding the data matching the researchers' requirements continues to be a major challenge and will only grow more challenging as more data is produced and shared. In this paper, we introduce a horizontally scalable distributed extract-transform-load system to tackle scientific data aggregation, transformation and enhancement for scientific data discovery and retrieval. We also introduce a data transformation language for biomedical curators allowing for the transformation and combination of data/metadata from heterogeneous data sources. Applicability of the system for scientific data is illustrated in biomedical and earth science domains.</p>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Institute of Health’s Big Data to Knowledge</named-content>
        </funding-source>
        <award-id>U24AI117966</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Community Inventory of EarthCube Resources for Geosciences Interoperability (CINERGI project via National Science Foundation)</named-content>
        </funding-source>
        <award-id>1343816</award-id>
        <award-id>1639764</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Institute of Diabetes and Digestive and Kidney Diseases (NIDDK) Information Network</named-content>
        </funding-source>
        <award-id>U24DK097771</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Neuroscience Information Framework via NIH’s National Institute of Drug Abuse</named-content>
        </funding-source>
        <award-id>U24DA039832</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Repronim via NIH’s National Institute of Biomedical Imaging and Bioengineering</named-content>
        </funding-source>
        <award-id>P41EB019936</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">University of California, San Diego, Center for Research in Biological Systems</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="13"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <title>Introduction</title>
    <p>Modern biomedical science involves the accrual of increasingly larger data sets in many forms. SciCrunch (<ext-link ext-link-type="uri" xlink:href="https://scicrunch.org">https://scicrunch.org</ext-link>) lists &gt;2800 databases in its resource registry, spanning biological systems from the level of genes to behavior. We know that the amount of data that is easily discoverable and accessible relative to the amount produced or that which is required to comprehensively cover a domain is limited. Therefore, calls to add to public data must also be accompanied by platforms for making these data available, searchable and useful (FAIR, a set of guiding principles to make data Findable, Accessible, Interoperable, and Reusable) (<xref rid="ref1" ref-type="bibr">1</xref>). These challenges are not unique to specific disciplines
but echo the needs of science in general (<xref rid="ref2" ref-type="bibr">2</xref>). Individual communities are also not unique in wanting to determine the most effective means to maximize the utility of existing resources created to support and spur their researchers. Our experience in Neuroscience Information Framework (NIF) and dkNET (<xref rid="ref3" ref-type="bibr">3–7</xref>) suggests that researchers are largely unaware of the many resources that are available to them, not just targeted resources such as the Mouse Metabolic Phenotyping Center but also databases such as the National Institutes of Health (NIH) Reporter. The current funding situation requires that we take full advantage of the available resources to create effective platforms for data generation, sharing and analysis. Most recently, as part of the NIH Big Data to Knowledge initiative, the biomedical and healthCAre Data Discovery Index Ecosystem (bioCADDIE, RRID:SCR_004018) (<xref rid="ref8" ref-type="bibr">8</xref>, <xref rid="ref9" ref-type="bibr">9</xref>) was launched to build a prototype (DataMed, <ext-link ext-link-type="uri" xlink:href="http://datamed.org">http://datamed.org</ext-link>) for data discovery analogous to PubMed. In order to support these discovery needs, there is a need to develop and deploy technologies to make the large collection of data and information resources collectively searchable.</p>
    <p>Development of the Foundry indexing infrastructure was informed by the following three distinct user communities: (i) biomedical data set discovery (bioCADDIE), (ii) biomedical information and discovery portals (NIF, RRID:SCR_002894 and dkNET, RRID:SCR_001606) and (iii) Earth science resource discovery [EarthCube Community Inventory of EarthCube Resources for Geosciences Interoperability (CINERGI), RRID:SCR_002188] (<xref rid="ref10" ref-type="bibr">10</xref>). The umbrella system was designed to interoperate with the current ecosystem of indices and repositories and not to replace them. The overall infrastructure consists of the following components:</p>
    <list list-type="bullet">
      <list-item>
        <p>A data and metadata extraction system that is able to connect to various repositories and data aggregators/integrators using parameterized ingestors and a domain-specific language (DSL) to specify complex data extraction/ingestion scenarios. Incoming metadata information is converted to JavaScript Object Notation (JSON) for each data set being described and is stored in MongoDB.</p>
      </list-item>
      <list-item>
        <p>A loosely coupled distributed data processing pipeline management system using a message-oriented middleware (MoM) architecture, utilizing Apache ActiveMQ (<ext-link ext-link-type="uri" xlink:href="http://activemq.apache.org">http://activemq.apache.org</ext-link>/), to manage a set of enhancements and transformations on the ingested data for data integration.</p>
      </list-item>
      <list-item>
        <p>A generic transformation language to align heterogeneous data from multiple sources with a data/metadata model [e.g. bioCADDIE Data Tag Suite (DATS) (<xref rid="ref9" ref-type="bibr">9</xref>)] enabling a broader community of curators to create and manage the transformation of data and metadata.</p>
      </list-item>
      <list-item>
        <p>Export mechanisms for the enhanced/transformed data to Elasticsearch search engine endpoints or to local file structures.</p>
      </list-item>
    </list>
    <sec id="sec2">
      <title>Related work</title>
      <p>With the availability of large-scale data, the importance of extract-transform-load (ETL) systems to prepare data for analytics have increased. Processing of big data requires usage of new programming models such as MapReduce (<xref rid="ref11" ref-type="bibr">11</xref>) on a cluster of machines. Hadoop is the most popular open-source implementation of MapReduce model acting as a generic ETL framework allowing programmers to write code for their specific ETL task. Apache Spark addresses some of the shortcomings of Hadoop for iterative large-scale data processing and interactive data analytics. However, Apache Spark is also a low-level ETL framework designed for programmers. Foundry, on the other hand, is a distributed ETL system specifically designed for scientific data with declarative ingestion and transformation languages for data curators.</p>
      <p>Foundry is most similar to the Discovery (DISCO) system (<xref rid="ref12" ref-type="bibr">12</xref>,
<xref rid="ref13" ref-type="bibr">13</xref>) (RRID:SCR_004586) currently used by <ext-link ext-link-type="uri" xlink:href="http://SciCrunch.org">SciCrunch.org</ext-link> for data ingestion and integration. While Foundry has a similar end goal as DISCO of being an ETL system for scientific data harvesting and integration, Foundry differs from DISCO in many aspects. Foundry is designed to be a loosely coupled non-monolithic cloud-based ETL system that can scale with additional data load horizontally by adding new consumer containers running on additional machines to distribute the processing load. It uses streaming iterators for handling very large data sets and has an ingestion language for complex data ingestion pipeline construction. It also has a generic transformation language for transforming, cleaning and normalizing data records. Another major difference from DISCO is workflow management for executing a configured set of discrete processes to enhance the data records.</p>
    </sec>
  </sec>
  <sec id="sec3">
    <title>Materials and methods</title>
    <sec id="sec4">
      <title>System design</title>
      <p>MoM systems such as Apache ActiveMQ allow designing loosely coupled distributed systems that can run in heterogeneous distributed computer environments. Use of MoM in Foundry allows horizontal scaling of the system by adding new consumer nodes on demand for increased load. It allows for event-driven, reactive workflow management orchestrated by messages sent/received from consumers that are self-contained processing units (microservices) to/from a message dispatcher component. The persistent message queues also make the system resilient to computer crashes and outages, as unfinished messages resulting from a computer failure on a consumer node remain in the message queue and are either picked up by another consumer node (if any are running) or reprocessed when the consumer node restarts.</p>
      <p>The overall system consists of a dispatcher, one or more consumer container(s) and a command-line manager interface. The dispatcher listens to the dispatcher message queue for incoming messages from consumer container instance(s). Using its configured workflow, it dispatches messages to the message queue for the listening consumer container(s). The consumer container coordinates a set of configured consumers that perform predefined operation(s) of a document indicated by the message they receive from the dispatcher and ingestors. The harvesters/ingestors are specialized consumers that are responsible for the retrieval of the original data as configured by a harvest descriptor JSON file of the corresponding source. They are triggered by the manager application. These component interactions are summarized in <xref rid="f1" ref-type="fig">Figure 1</xref> and an example of a specific pipeline is given in the section below.</p>
      <fig id="f1" orientation="portrait" position="float">
        <label>Figure 1</label>
        <caption>
          <p>Foundry dispatcher and consumer container unified modeling language activity diagram.</p>
        </caption>
        <graphic xlink:href="bay130f1"/>
      </fig>
    </sec>
    <sec id="sec5">
      <title>Dispatcher architecture</title>
      <p>The dispatcher subsystem coordinates messages coming from consumers/enhancers and relays them to corresponding message queues as configured by a particular data enhancement/transformation workflow. Each workflow is configured as a routing table. A route associates a status label with a message queue. Special status labels are specified to indicate the start and the end of the pipeline. Each consumer/enhancer is configured to listen for messages with a certain status label on a particular message queue. When the consumer finishes processing a data record, it puts a message to a preconfigured message queue with a consumer-specific output status label for the dispatcher to pick up. The dispatcher creates a new message with the output status label received and puts it to the message queue of the matching route in the pipeline route table. This process continues until there is no route left in the pipeline route table. The dispatcher is a lightweight component acting as an event bus. The heavy lifting is done by the consumers running inside the consumer container(s).</p>
      <p>The whole system including the workflow and the enhancers is configured from a single configuration file. For example, the bioCADDIE data processing workflow consist of a transformation that aligns the metadata to the DATS format (<xref rid="ref9" ref-type="bibr">9</xref>), citation enhancement (datamention) and biomedical named entity detection enhancement [natural language processing (NLP)] steps as illustrated by the YAML Ain't Markup Language (YAML, a human-readable data serialization language) configuration file used for bioCADDIE in <xref rid="f2" ref-type="fig">Figure 2</xref>. The configuration file has four main sections: a database section for Mongo database configuration, a message queue (mq) section for message queue connection configuration, a workflow section to specify the pipeline as a list of consumer aliases and a consumers section to configure individual consumers/enhancers used by the pipeline. Each consumer configuration has two mandatory fields, namely, ‘class’ to specify the full java class name of the consumer implementation and ‘status’ indicating the status of the processed record after this consumer has finished processing it. The status label is used to name the internal message queues used to orchestrate the pipeline processing and should be unique for each consumer. Any additional options specific to a particular consumer are provided as name–value pairs besides mandatory class and status fields.</p>
      <fig id="f2" orientation="portrait" position="float">
        <label>Figure 2</label>
        <caption>
          <p>Meta configuration file for the Foundry system.</p>
        </caption>
        <graphic xlink:href="bay130f2"/>
      </fig>
    </sec>
    <sec id="sec6">
      <title>Consumer container architecture</title>
      <p>The consumer container coordinates a set of consumers. A consumer listens to a preconfigured message queue and applies a predefined operation to the document indicated by the received message. On success, a consumer sets the processing status of the document to a preconfigured status. Consumers are implemented as plugins with life cycle methods that are called by the consumer container during the life of the consumer in the container. The life cycle events include the creation, initialization and shutdown of a consumer. The Foundry framework provides support for two types of consumers, namely, ingestors and enhancers. The ingestors are responsible for the extraction/retrieval of data/metadata from a data source. The enhancers are responsible for transforming and enhancing the extracted source data. Each consumer runs in its own thread. The consumer container spawns only one consumer instance for each enhancer type and spawns one ingestor per data extraction source. An ingestor stays alive until all the data records from that source are extracted and terminated by the container afterwards. Enhancers are only terminated when the consumer container terminates. The consumer container is also responsible for duplicate checking and document wrapper generation.</p>
      <sec id="sec7">
        <title>Harvesters (ingestors)</title>
        <p>All ingestors are implemented as plugins. The Ingestor interface has life cycle methods to initialize parameters received in the message body to start the ingestion process. These include the harvest url and ingestion type-specific parameters defined in the harvest description JSON file stored in the MongoDB under the sources collection. The startup() life cycle method is generally used to get the data to an intermediate storage/cache. An ingestor plugin acts like an iterator where the hasNext() method returns true if there are still more records to process and the prepPayload() method returns a JSON representation of the original record harvested.</p>
        <p>The harvesters form the extract portion of the Foundry ETL system. Both the distribution and format of the scientific data are heterogeneous. Hence, both access mode and data format need to be taken into account in devising a generic design for the harvester portion of the system. The generalizable parts, namely, the access mode of the raw data [e.g. via FTP, RSync, web application programming interface (API) or a file bundle] and distribution format (e.g. XML, CSV or JSON) are abstracted out. All available harvesters are parametrized to increase reusability. Another responsibility of a harvester is partitioning of the data into records to iterate over. The harvesting framework relies heavily on the iterator design pattern (<xref rid="ref14" ref-type="bibr">14</xref>) similar to cursors used in relational database systems. In relational database systems, structured query language (SQL) queries are converted to a pipeline of relational operations on a set of cursors for the tables and indices involved in the query during the query planning phase (<xref rid="ref15" ref-type="bibr">15</xref>). To support data sets that will not fit the system memory, the devised iterators are lazy and retrieve the next record on a demand basis in a streaming fashion allowing the system to process very large data files such as 0.5 TB XML file dumps from UniProt (<xref rid="ref16" ref-type="bibr">16</xref>) (RRID:SCR_002380). The harvester support system has iterators for the scientific data distribution formats we have encountered so far. The types of ingestors used for the bioCADDIE project are summarized in <xref rid="TB1" ref-type="table">Table 1</xref>.</p>
        <table-wrap id="TB1" orientation="portrait" position="float">
          <label>Table 1</label>
          <caption>
            <p>Ingestors/Harvesters used for bioCADDIE</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col align="left" span="1"/>
              <col align="left" span="1"/>
              <col align="left" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" rowspan="1" colspan="1">
                  <bold>Ingestor type</bold>
                </th>
                <th align="left" rowspan="1" colspan="1">
                  <bold>Sample bioCADDIE sources</bold>
                </th>
                <th align="left" rowspan="1" colspan="1">
                  <bold>Number of sources using this ingestor</bold>
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">Web service ingestor</td>
                <td align="left" rowspan="1" colspan="1">Clinical Trials, Uniprot</td>
                <td align="left" rowspan="1" colspan="1">42</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Database ingestor</td>
                <td align="left" rowspan="1" colspan="1">NeuroMorpho, PeptideAtlas, Clinical Trials Network</td>
                <td align="left" rowspan="1" colspan="1">14</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">OAI-PMH ingestor <sup>†</sup></td>
                <td align="left" rowspan="1" colspan="1">Dryad, The Cardiovascular Research Grid</td>
                <td align="left" rowspan="1" colspan="1">2</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Two-stage web service ingestor <sup>*</sup></td>
                <td align="left" rowspan="1" colspan="1">Inter-university Consortium for Political and Social Research, Dataverse Native</td>
                <td align="left" rowspan="1" colspan="1">2</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Rsync ingestor</td>
                <td align="left" rowspan="1" colspan="1">PDB, dbGAP</td>
                <td align="left" rowspan="1" colspan="1">2</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">FTP ingestor</td>
                <td align="left" rowspan="1" colspan="1">BioProject, Biological Magnetic Resonance Data Bank (BMRB)</td>
                <td align="left" rowspan="1" colspan="1">2</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Aspera ingestor</td>
                <td align="left" rowspan="1" colspan="1">GEO Datasets</td>
                <td align="left" rowspan="1" colspan="1">1</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CSV ingestor</td>
                <td align="left" rowspan="1" colspan="1">Gemma</td>
                <td align="left" rowspan="1" colspan="1">1</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">XML ingestor</td>
                <td align="left" rowspan="1" colspan="1">ArrayExpress</td>
                <td align="left" rowspan="1" colspan="1">1</td>
              </tr>
            </tbody>
          </table>
          <table-wrap-foot>
            <fn id="tblfn1">
              <p>The web service ingestor uses REST API of the source to access raw data. <sup>*</sup>The two-stage web service ingestor also uses REST API; however, the data is accessed in two steps: first, finding the identifiers of the available data, usually through a web service providing search or summary listings, and then by retrieving each data record, through a more detailed service, by the extracted identifiers. <sup>†</sup>The Open Archives Initiative Protocol for Metadata Harvesting (OAI-PMH) ingestor implements OAI-PMH protocol to retrieve archived data.</p>
            </fn>
          </table-wrap-foot>
        </table-wrap>
      </sec>
      <sec id="sec8">
        <title>DSL for data ingestion</title>
        <p>For some of the data sources, an extraction step is involved, including multiple interdependent steps to access data records and/or joining multiple data file/API call results to form the data record to be extracted. To this end, we have developed a DSL for data extraction/ingestion available as a generic ingestor/harvester. Similar to the way a database management system handles the query planning and processing, the harvester language interpreter converts the declarative instructions into a set of iterators (cursors) that can be joined together after determining the join order.</p>
        <sec id="sec9">
          <title>Ingestion DSL syntax</title>
          <p>The syntax of the ingestion DSL is shown in <xref rid="f3" ref-type="fig">Figure 3</xref>. For all common harvesting operations such as downloading the raw data, extracting files from data distribution bundles, partitioning the data files into individual records and joining multiple raw records into a record to ingest, a DSL statement is provided. The statements in an ingestion script form a pipeline of low-level operations to prepare raw data for ingestion into the Foundry system. Statements such as ‘DOWNLOAD’ and ‘EXTRACT’ generate artifacts for the data processing statements such as PARTITION and JOIN which are identified by aliases. The aliases are used in upstream statements to identify artifacts for partitioning and combining. The script ends with an INGEST statement. From the declarative ingestion DSL script, the ingestion DSL engine creates an ingestion data preparation pipeline using the built-in cursors/iterators of the Foundry framework. The cursors can be parametrized using the SET statement as needed.</p>
          <fig id="f3" orientation="portrait" position="float">
            <label>Figure 3</label>
            <caption>
              <p>Syntax diagram of the DSL for the retrieval/combining/ingestion of the raw scientific data.</p>
            </caption>
            <graphic xlink:href="bay130f3"/>
          </fig>
          <p>An example script to extract records from the NITRC-IR data resource (<xref rid="ref17" ref-type="bibr">17</xref>) (RRID:SCR_004162) by joining project, subject and subject data information are shown in <xref rid="f4" ref-type="fig">Figure 4</xref>.</p>
          <p>Here, raw data is retrieved from three representational state transfer (REST) API calls (the last call is parametrized) in XML format and cached locally. Since the data retrieved contains multiple data records, they are partitioned into records via ‘partition’ statements. Each ‘row’ tag in the first two XML documents under the ‘rows’ XML tag indicate a data record. The last data set is parametrized by the subject identifier and contains only one record. It is retrieved on demand by the three-way inner join indicated by the ‘join’ statements. The fields to join on are declared as JSONPaths, since all row data formats are converted to JSON first for internal processing. The value for each parameterized REST API retrieval call comes from the value of the join data record on the left-hand side of the join. The data record to be ingested is a combination of data records from the project, project subjects and individual subject information joined by the common (join) fields indicated in the join statements in <xref rid="f4" ref-type="fig">Figure 4</xref>.</p>
          <fig id="f4" orientation="portrait" position="float">
            <label>Figure 4</label>
            <caption>
              <p>A sample ingestion script to retrieve and join data from three web services to form self-contained metadata records to be ingested.</p>
            </caption>
            <graphic xlink:href="bay130f4"/>
          </fig>
        </sec>
      </sec>
      <sec id="sec10">
        <title>Consumers/enhancers</title>
        <p>The consumer container subsystem of the Foundry framework manages the lifecycle of the consumers, the main units of work, of the system. Each consumer is responsible for a single atomic process applied to a data record. They are stateless and work concurrently on different data records. However, on the same record the order of operations is determined by the configured data/document processing pipeline orchestrated by the dispatcher. Consumers are implemented as plugins to a generic consumer process to simplify third party consumer development and to facilitate customizability and extensibility of the system. Transformation and data enhancement are the most common usages for consumers. Each consumer listens on a predefined message queue for messages from the dispatcher. These messages consist of the current status and the id of the data record with which the wrapper for the data record is retrieved from the MongoDB database, processed and written back before signaling the dispatcher about the current status of the document. The status messages are used by the dispatcher to determine the next consumer in the pipeline.</p>
        <p>The types of document enhancements needed are application specific. Thus, different sets of enhancers have been developed for the projects where Foundry is used. For bioCADDIE, an NLP pipeline was developed by members of the bioCADDIE Core Development Team at the University of Texas Health Science Center at Houston for recognizing gene, disease, drug and cell line mentions in the data record metadata descriptions. This code module was converted to an enhancer using the client side plugin API. To incorporate literature citation information for data records from Protein Data Bank (PDB) (<xref rid="ref18" ref-type="bibr">18</xref>) (RRID:SCR_012820), GEO (<xref rid="ref19" ref-type="bibr">19</xref>) (RRID:SCR_005012) and other data sets, another enhancer was also developed that incorporates citation information from an external web service.</p>
        <p>Since the CINERGI project is focused on enhancement of geological metadata records, time was devoted to developing an ontology-backed NLP enhancer for keyword extraction and suggestion from the metadata record, a geolocation enhancer with location named entity recognition and an organization enhancer to associate organizations in free text format in the geological metadata records with their corresponding Virtual International Authority File records.</p>
      </sec>
    </sec>
    <sec id="sec11">
      <title>Data transformation language</title>
      <p>Aggregation of heterogeneous semi-structured data from multiple sources requires alignment and transformation to a common format. To this end, we have developed a simple, curator friendly, transformation language to transform a given hierarchical data structure in JSON format to any desired JSON form including JSON-LD for linked data.</p>
      <p>The first thing that needs to be addressed is how to indicate a path(s) in a JSON tree. For XML, there is the XPath specification to address this issue. However, there is no parallel standard for JSON. However, by analogy to the XPath specification there are attempts to implement/specify paths in a JSON tree. We have developed a subset of the analogous functionality to XPath as JSONPath based on the syntax from <ext-link ext-link-type="uri" xlink:href="https://goessner.net/articles/JsonPath">https://goessner.net/articles/JsonPath</ext-link> to be used in the JSON transformation language (JSONTL). Our JSONPath implementation is tightly integrated with our transformation engine to allow complex nested multivalued source JSON forest to destination JSON forest transformations besides speed optimizations. The transformation language named JSONTL allows declaration of a mapping from a source path to a destination path optionally combining and/or transforming the source value. To support arbitrary value transformation, the JSONTL integrates the Python programming language. This way, common operations such as data cleanup, conversion, normalization, combining multiple fields, splitting values and generating calculated fields based on existing ones are made possible.</p>
      <sec id="sec12">
        <title>JSONPath syntax</title>
        <p>For the source side of a transformation statement, the JSONPath is used to match path(s) and for the destination side, the JSONPath is used to create a new path (branch in the JSON document tree). Due to this functionality difference, the recognized syntax of the source and destination JSONPaths are slightly different. The syntax diagrams for source document JSONPath syntax are shown in <xref rid="f5" ref-type="fig">Figures 5</xref> and <xref rid="f6" ref-type="fig">6</xref>, the target document JSONPath syntax is shown in <xref rid="f7" ref-type="fig">Figure 7</xref>.</p>
        <fig id="f5" orientation="portrait" position="float">
          <label>Figure 5</label>
          <caption>
            <p>JSONPath syntax for the source document.</p>
          </caption>
          <graphic xlink:href="bay130f5"/>
        </fig>
        <fig id="f6" orientation="portrait" position="float">
          <label>Figure 6</label>
          <caption>
            <p>JSONPath expression syntax recognized.</p>
          </caption>
          <graphic xlink:href="bay130f6"/>
        </fig>
        <fig id="f7" orientation="portrait" position="float">
          <label>Figure 7</label>
          <caption>
            <p>JSONPath syntax for the generated target JSON document.</p>
          </caption>
          <graphic xlink:href="bay130f7"/>
        </fig>
        <p>An example of JSONPath for a source document, taken from the transformation script for the PDB, is ‘<monospace>$..'PDBx:database_PDB_revCategory'</monospace>.<monospace>'PDBx:database_PDB_rev'[?(@.'@num' = '1')]</monospace>.<monospace>'PDBx:date'</monospace>.<monospace>'_$'</monospace>’. This statement matches the text (‘<inline-formula><tex-math id="M1">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\_\$$\end{document}</tex-math></inline-formula>’) of the PDBx:date object in the PDBx:database_PDB_rev object having a field named ‘@num’ (mapped from the ‘num’ XML attribute) with value equal to 1. The ‘$..’ at the beginning of the statement indicates that the remaining subtree is matched at an arbitrarily deep level in the source document JSON hierarchy.</p>
        <p>An example of JSONPath for a destination document from the transformation script for PDB is ‘<monospace>identifiers[].ID</monospace>’ where the destination document will have an array called ‘identifiers’ at the top level having objects with a field named ‘ID’.</p>
      </sec>
      <sec id="sec13">
        <title>JSONTL syntax</title>
        <p>The transformation language consists of five types of statements allowing one-to-one, one-to-many, many-to-one and many-to-many mappings of various sorts. Besides the join statement, all JSONTL statements can be conditioned based on value, existence and non-existence of any source document field, using the optional conditional expression.</p>
      </sec>
      <sec id="sec14">
        <title>Constant field generation</title>
        <p>This statement (see <xref rid="f8" ref-type="fig">Figure 8</xref>) allows introducing fields with constant values that does not exist in the source record. This statement is mostly used to add metadata about the data source to processed records.</p>
        <fig id="f8" orientation="portrait" position="float">
          <label>Figure 8</label>
          <caption>
            <p>Syntax diagram for constant field transformation statement.</p>
          </caption>
          <graphic xlink:href="bay130f8"/>
        </fig>
        <p>An example constant field statement from the PDB transformation script is <monospace>let "</monospace><monospace>dataRepository.name</monospace><monospace>" = "Protein Data Bank";</monospace></p>
        <p>This statement assigns the value ‘Protein Data Bank’ to the ‘name’ field of a top level destination object named ‘dataRepository’.</p>
      </sec>
      <sec id="sec15">
        <title>Single path transformation</title>
        <p>Single path transformation (see <xref rid="f9" ref-type="fig">Figure 9</xref>) allows transforming of a single source path to a single destination path with single value (one-to-one transformation) or multiple values (one-to-many transformation). One-to-many transformations are achieved by using the optional apply block that allows arbitrary manipulation of the matched source path value such as splitting delimited text into a list of keywords.</p>
        <fig id="f9" orientation="portrait" position="float">
          <label>Figure 9</label>
          <caption>
            <p>Syntax diagram for single path transformation statement.</p>
          </caption>
          <graphic xlink:href="bay130f9"/>
        </fig>
        <p>An example from the PDB transformation script with an apply block shows creating a landing page URL using the entry id value from a PDB record.</p>
        <p>
          <monospace>transform column "$.'PDBx:datablock'.'@datablockName'.'PDBx:atom_sites'.'@entry_id'" to "access.landingPage" apply {{ result ='</monospace>
          <monospace>http://www.rcsb.org/pdb/explore/explore.do?structureId=</monospace>
          <monospace>' + value}};</monospace>
        </p>
        <p>Usage of built-in date processing functions with NLP capabilities for heterogeneous free form date fields can be illustrated by the following example from the PDB transformation script.</p>
        <p><monospace>transform column "$..'PDBx:database_PDB_revCategory'</monospace>.<monospace>'PDBx:database_PDB_rev'[?(@.'@num' = '1')]</monospace>.<monospace>'PDBx:date'.'_$'" to "dataset.dateReleased" apply toStandardDateTime("yyyy-MM-dd");</monospace></p>
        <p>The transformation language is extensible with new functions that can be used instead of the APPLY Python script block as shown in the above example. The ‘toStandardDateTime()’ function used above is provided by implementing the transformation language’s plugin interface and registering it with the transformation engine. This function is used for converting date fields to internal date and time format suitable for Elasticsearch indexing and also allows free form date processing using NLP.</p>
        <p>The entity–value–attribute (EVA) model is a common extensible data model where data fields are encoded as name–value pairs allowing different data records to contain different set of data fields. To enable transformation of EVA-style data records, an ASSIGN NAME FROM construct is provided. The usage of an EVA-style transformation from the Ion Channel Genealogy transformation script is shown below:</p>
        <p><monospace>transform column "$</monospace>.<monospace>'metadata'[*].'value'" to "metadata.value" assign name from "$.'metadata'[*].'name'";</monospace></p>
        <p>This statement converts each name and value field pair from the source into a single field named from the source name field with the value of the source value field as demonstrated in <xref rid="f10" ref-type="fig">Figure 10</xref>.</p>
        <fig id="f10" orientation="portrait" position="float">
          <label>Figure 10</label>
          <caption>
            <p>EVA style data transformation example.</p>
          </caption>
          <graphic xlink:href="bay130f10"/>
        </fig>
      </sec>
      <sec id="sec16">
        <title>Multiple path transformation (many to one, many to many)</title>
        <p>This transformation statement (see <xref rid="f11" ref-type="fig">Figure 11</xref>) is similar to single path transformation statements in structure. However, it allows for the combining of values from multiple source paths to a destination path through the help of the mandatory APPLY section.</p>
        <fig id="f11" orientation="portrait" position="float">
          <label>Figure 11</label>
          <caption>
            <p>Syntax diagram for the multiple path many-to-one transformation statement.</p>
          </caption>
          <graphic xlink:href="bay130f11"/>
        </fig>
        <p>The following statement from the PDB transform script illustrates how this statement is used in practice.</p>
        <p><monospace>transform columns "$..'PDBx:struct_keywords'</monospace>.<monospace>'PDBx:pdbx_keywords'</monospace>.<monospace>'_$'", "$..'PDBx:struct_keywords'.'PDBx:text'.'_$'" to "dataset.keywords[]" apply {{</monospace></p>
        <p>
          <monospace>arr=re.split("\s*,\s*",value1,)</monospace>
        </p>
        <p>
          <monospace>arr.extend(re.split("\s*,\s*",value2))</monospace>
        </p>
        <p>
          <monospace>result=arr</monospace>
        </p>
        <p>
          <monospace>}};</monospace>
        </p>
        <p>Here a multiple comma separated lists of keywords in the source document are combined into a single array of keywords after splitting the source keyword text fields into individual keywords via the Python code in the apply block of the statement.</p>
      </sec>
      <sec id="sec17">
        <title>Multiple path union transformation</title>
        <p>This transformation statement (see <xref rid="f12" ref-type="fig">Figure 12</xref>) combines all values from all the matching source paths and passes them all together to the destination path that needs to be multivalued (i.e. array). Each source value becomes another element in the destination array. Each source value can be processed by an optional apply block before being assigned to the destination element.</p>
        <fig id="f12" orientation="portrait" position="float">
          <label>Figure 12</label>
          <caption>
            <p>Syntax diagram for the multiple path union transformation statement.</p>
          </caption>
          <graphic xlink:href="bay130f12"/>
        </fig>
        <p>The following statement from the PDB transformation script illustrates a practical usage of the multiple path union transformation statement:</p>
        <p><monospace>transform union "$.'PDBx:datablock'</monospace>.<monospace>'PDBx:entity_src_genCategory'</monospace>.<monospace>'PDBx:entity_src_gen'[*]</monospace>.<monospace>'PDBx:pdbx_gene_src_ncbi_taxonomy_id'</monospace>.<monospace>'_$'", "$.'PDBx:datablock'</monospace>.<monospace>'PDBx:entity_src_genCategory'</monospace>.<monospace>'PDBx:entity_src_gen'[*]</monospace>.<monospace>'PDBx:pdbx_host_org_ncbi_taxonomy_id'</monospace>.<monospace>'_$'" to "taxonomicInformation[].ID" apply {{ result = 'ncbitax:' + value }};</monospace></p>
        <p>Here the taxonomy identifiers from the source and host organisms are combined together and passed one by one into the apply block to generate a CURIE (<ext-link ext-link-type="uri" xlink:href="https://www.w3.org/TR/curie/">https://www.w3.org/TR/curie/</ext-link>), an abbreviated syntax for expressing uniform resource identifiers, for the passed taxonomy identifier.</p>
      </sec>
      <sec id="sec18">
        <title>Join transformation (many to one, many to many)</title>
        <p>This transformation statement (see <xref rid="f13" ref-type="fig">Figure 13</xref>) passes a list of values of each matching source path forest, as identified by its JSON Path, to the optional APPLY block. If no apply block is specified, all values from the source are combined to a comma separated list that becomes the value of the destination path. However, the power of this statement is realized with an apply block allowing, for example, one to select a corresponding source value based on the value(s) of another field’s list.</p>
        <fig id="f13" orientation="portrait" position="float">
          <label>Figure 13</label>
          <caption>
            <p>Syntax diagram for the join transformation statement.</p>
          </caption>
          <graphic xlink:href="bay130f13"/>
        </fig>
        <p>An example usage of this statement from the UniProt-SwissProt BioCADDIE transformation script is show below:</p>
        <p><monospace>join "$</monospace>.<monospace>'entry'.'organism'.'name'[*].'@type'", "$</monospace>.<monospace>'entry'.'organism'.'name'[*].'_$'" to "taxonomicInformation[0].name" apply</monospace></p>
        <p>
          <monospace>{{</monospace>
        </p>
        <p>
          <monospace>i = -1</monospace>
        </p>
        <p>
          <monospace>try:</monospace>
        </p>
        <p>
          <monospace>i = value1.index('scientific')</monospace>
        </p>
        <p>
          <monospace>except:</monospace>
        </p>
        <p>
          <monospace>pass</monospace>
        </p>
        <p>
          <monospace>result = value2[i] if i &gt;= 0 else “</monospace>
        </p>
        <p>
          <monospace>}};</monospace>
        </p>
        <p>This statement takes in a list of organism names and a list of organism name types, identifies the organism name with the type ‘scientific’ and assigns the found scientific organism name to the destination as the taxonomic information name.</p>
      </sec>
      <sec id="sec19">
        <title>Conditional expression</title>
        <p>JSONTL supports conditioning of a transformation statement on arbitrary number of source path values by a wide array of comparison operators. The syntax diagrams of the conditional expression and operators are shown in <xref rid="f14" ref-type="fig">Figures 14</xref> and <xref rid="f15" ref-type="fig">15</xref>.</p>
        <fig id="f14" orientation="portrait" position="float">
          <label>Figure 14</label>
          <caption>
            <p>Syntax diagram for the conditional expression supported in JSONTL.</p>
          </caption>
          <graphic xlink:href="bay130f14"/>
        </fig>
        <fig id="f15" orientation="portrait" position="float">
          <label>Figure 15</label>
          <caption>
            <p>Syntax diagram for the conditional operators supported in JSONTL.</p>
          </caption>
          <graphic xlink:href="bay130f15"/>
        </fig>
        <p>A practical example of conditional expression usage from the transformation script for Gemma (<xref rid="ref20" ref-type="bibr">20</xref>) (RRID:SCR_008007) is shown below:</p>
        <p>
          <monospace>if "$.'SourceAccession'" like "%GSE%" then
let "datasetDistributions[2].storedIn" = "Gene Expression Omnibus";</monospace>
        </p>
        <p>Here if the ‘SourceAccession’ field value contains the string ‘GSE’, then a constant field is generated on the destination.</p>
      </sec>
    </sec>
    <sec id="sec20">
      <title>Data export</title>
      <p>The ability to export transformed and/or enhanced data is essential for an ETL system. The exported data is used by the upstream systems. In the case of bioCADDIE, the enhanced data is indexed to an Elasticsearch endpoint used by the DataMed UI. In the case of the CINERGI project, the enhanced ISO XML metadata documents are exported as files for indexing within an ESRI Geoportal server (<ext-link ext-link-type="uri" xlink:href="https://www.esri.com/en-us/arcgis/products/geoportal-server/overview">https://www.esri.com/en-us/arcgis/products/geoportal-server/overview</ext-link>). The export functionality is implemented as another enhancer/consumer in the Foundry system configured to be the final step in the processing pipeline.</p>
    </sec>
  </sec>
  <sec id="sec21">
    <title>Results and discussion</title>
    <p>The introduced transformation language enables incremental development of data transformations since each transformation rule only handles a small number of branches (usually only one branch) in the source data hierarchy. Thus, the rules can be developed and tested individually. A web front-end for testing the transformation rules is part of the system to facilitate incremental development. In DISCO, transformation and data aggregation of a data source is done in a single SQL query that usually ends up being overly complex making it hard to maintain requiring expert level SQL skills. Also, the transformations are limited to the capabilities of SQL in a single large query. With its embedded Python programming language execution capabilities, the introduced transformation language provides data manipulation capabilities of a full-blown computer language. The system includes a tool to automatically generate identity transformation rules from raw sample data as an aid to the curators to minimize effort. These features, together with the relative simplicity of the transformation language, lower the bar of entry for curators, decreasing data source transformation development and maintenance time. The transformation language was designed in concert with curators working on biomedical data curation for almost a decade in SciCrunch and with the input from BioCADDIE curators.</p>
    <p>In Foundry, in contrast to DISCO, a raw data set is stored as a denormalized and potentially hierarchical document instead of a set of normalized relational database tables. This allows each data set to be self-contained without requiring costly join operations to access related data. One of the main design goals for Foundry is to push as many of the semantic enhancements to the offline from the online search processes to improve end user experience. Each self-contained data set can be semantically enhanced independent of each other in parallel and the additional semantic information is indexed together with the data/metadata enabling fast, semantically enhanced queries.</p>
    <p>Foundry is open source and together with its documentation can be retrieved from the bioCADDIE GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/biocaddie/Foundry-ES">https://github.com/biocaddie/Foundry-ES</ext-link>).</p>
    <p>Initial testing of the system was done on a system containing a single MongoDB instance running on an Amazon m4.large (8 GB RAM with two virtual CPUs) virtual machine and another m4.large virtual machine running the ActiveMQ server, Foundry dispatcher and a consumer container with ingestor enhancer. This testing was done with the initial bioCADDIE DataMed corpus consisting of 58 sources (77 085 123 metadata records) with a total size of 68.54 GB (median record size of 2.89 KB with a minimum size of 0.57 KB and a maximum size of 3.4 MB, see <xref rid="f16" ref-type="fig">Figure 16</xref>).</p>
    <fig id="f16" orientation="portrait" position="float">
      <label>Figure 16</label>
      <caption>
        <p>Average Metadata Record size across bioCADDIE DataMed test corpus.</p>
      </caption>
      <graphic xlink:href="bay130f16"/>
    </fig>
    <p>Performance of the core system for metadata ingestion was measured for each source and took a total of 23 hours and 35 minutes (224 documents per second). Data transfer from the remote source was not included in the timings as this can be quite variable and is also determined by the remote sources policies for crawl rates and frequency. This base system performance can also be affected by the addition of various enhancement modules (e.g. NLP processing). In order to enable additional processing steps while maintaining throughput, the system needs to be scaled horizontally.</p>
    <p>To test the horizontal scalability of the introduced system, we devised an experiment on a large data resource (full set of PubMED abstracts) on the Amazon cloud. The system consists of a single MongoDB instance running on an m4.large (8 GB RAM with two virtual CPUs) virtual machine, another m4.large running the ActiveMQ server, Foundry dispatcher and a consumer container with ingestor enhancer and four consumer containers running on four Amazon t2.medium (4 GB RAM with two virtual CPUs) EC2 nodes (virtual machines). Altogether, there are five computation nodes one of which is responsible for data ingestion and transformation and the other four only for transformation. For cloud deployment, we utilized two types of Amazon Machine Images (AMI), one for the node running the ActiveMQ server, dispatcher and the consumer container for ingestion and another for the slave nodes running consumer containers configured without the ingestion capability. The consumer AMI is then manually cloned to create the four consumer EC2 nodes. All the EC2 nodes are configured to be in the same zone and security domain. The consumer AMI can be used with the Amazon EC2 Auto Scale functionality to automatically start new consumer nodes on demand when load increases.</p>
    <p>We started with a master node and introduced each additional computation node one at a time while the pipeline is running. Each additional node is introduced at least one hour of processing apart and the rate of document processing after each introduced computation node is plotted together with the linear regression line in <xref rid="f17" ref-type="fig">Figure 17</xref>, showing linear increase in processing rate. The Amazon EC2 nodes we have used are general purpose virtual machines with low to moderate network traffic settings using general purpose solid-state drives showing that decent data processing performance can be achieved even with run of the mill hardware with the introduced ETL system.</p>
    <fig id="f17" orientation="portrait" position="float">
      <label>Figure 17</label>
      <caption>
        <p>Horizontal scaling performance of the Foundry ETL system on the PubMed data ingestion and transformation.</p>
      </caption>
      <graphic xlink:href="bay130f17"/>
    </fig>
  </sec>
  <sec id="sec22">
    <title>Conclusion</title>
    <p>In this paper, we introduced a scalable data integration/indexing platform that is being used across a wide variety of scientific domains. The system has been shown to have wide applicability across different scientific domains, metadata specifications and data types and formats. Through the transformation and enhancement process, a pipeline can be easily customized for a specific domain and associated use case. The transformation language and source configuration YAML files provide biomedical curators with an easy and understandable process to specify how a data source should be ingested. Current work is focused on development of additional enhancement modules that will support standardized mechanisms for query expansion and enhancement of links between indexed documents.</p>
  </sec>
  <sec id="sec23">
    <title>Declarations</title>
    <sec id="sec24">
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="sec25">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="sec29">
      <title>Availability of data and materials</title>
      <p>Foundry source code and documentation together is available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/biocaddie/Foundry-ES">https://github.com/biocaddie/Foundry-ES</ext-link>).</p>
      <p>The data sets (i.e the indices) generated by the pipeline are available (and searchable) via the discovery portals for the projects involved in this work:</p>
      <p>bioCADDIE: <ext-link ext-link-type="uri" xlink:href="https://datamed.org">https://datamed.org</ext-link></p>
      <p>CINERGI: <ext-link ext-link-type="uri" xlink:href="http://cinergi.sdsc.edu/geoportal/">http://cinergi.sdsc.edu/geoportal/</ext-link></p>
      <p>Neuroscience Information Framework: <ext-link ext-link-type="uri" xlink:href="https://neuinfo.org">https://neuinfo.org</ext-link></p>
      <p>NIDDK Information Network: <ext-link ext-link-type="uri" xlink:href="https://dknet.org">https://dknet.org</ext-link>.</p>
    </sec>
    <sec id="sec26">
      <title>Competing interests</title>
      <p>I.B.O. has no competing interests.</p>
      <p>Dr. Grethe has an equity interest in SciCrunch, Inc., a company that may potentially benefit from the research results. The terms of this arrangement have been reviewed and approved by the University of California, San Diego in accordance with its conflict of interest policies.</p>
    </sec>
  </sec>
  <sec id="sec28">
    <title>Authors’ contributions</title>
    <p>I.B.O. designed (together with J.S.G.) and implemented the introduced system and conducted the experiments on the system and was a major contributor in writing the manuscript. J.S.G. designed (together with I.B.O.) the system and implemented majority of the transformation scripts for bioCADDIE and was a major contributor in writing the manuscript. All authors read and approved the final manuscript.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank Yueling Li for her help in transformation script curation and the bioCADDIE Core Technical Team for their curation and testing efforts during the development of the system introduced in the manuscript. We also thank the anonymous reviewers for their comments.</p>
  </ack>
  <ack>
    <title>Funding</title>
    <p>bioCADDIE (<ext-link ext-link-type="uri" xlink:href="http://biocaddie.org">http://biocaddie.org</ext-link>) project via an National Institute of Health’s Big Data to Knowledge award (U24AI117966); the Community Inventory of EarthCube Resources for Geosciences Interoperability (CINERGI project via National Science Foundation awards (ICER/GEO 1343816 and 1639764); the National Institute of Diabetes and Digestive and Kidney Diseases (NIDDK) Information Network (dkNET, <ext-link ext-link-type="uri" xlink:href="http://dknet.org">http://dknet.org</ext-link>) via NIH’s NIDDK award (U24DK097771); the Neuroscience Information Framework (<ext-link ext-link-type="uri" xlink:href="http://neuinfo.org">http://neuinfo.org</ext-link>) via NIH’s National Institute of Drug Abuse award (U24DA039832); Repronim via NIH’s National Institute of Biomedical Imaging and Bioengineering award (P41EB019936) and partially supported by the University of California, San Diego, Center for Research in Biological Systems.</p>
    <p><italic>Conflict of interest</italic>. None declared.</p>
  </ack>
  <notes id="AN1">
    <p><bold>Github URL</bold>: <ext-link ext-link-type="uri" xlink:href="https://github.com/biocaddie/Foundry-ES">https://github.com/biocaddie/Foundry-ES</ext-link></p>
  </notes>
  <ref-list>
    <title>References</title>
    <ref id="ref1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wilkinson</surname><given-names>M.D.</given-names></name>, <name name-style="western"><surname>Dumontier</surname><given-names>M.</given-names></name>, <name name-style="western"><surname>Aalbersberg</surname><given-names>I.J.</given-names></name><etal>et al.</etal></person-group> (<year>2016</year>) <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>. <source><italic toggle="yes">Sci. Data</italic></source>, <volume>3</volume>, <fpage>160018</fpage>.<pub-id pub-id-type="pmid">26978244</pub-id></mixed-citation>
    </ref>
    <ref id="ref2">
      <label>2.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Hey</surname><given-names>T.</given-names></name>, <name name-style="western"><surname>Tansley</surname><given-names>S.</given-names></name> and <name name-style="western"><surname>Tolle</surname><given-names>K.</given-names></name></person-group> (<year>2009</year>) <source><italic toggle="yes">Fourth Paradigm: Data-intensive Scientific Discovery</italic></source>. <publisher-name>Microsoft Research</publisher-name>, <publisher-loc>Redmond, Washington</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="ref3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cachat</surname><given-names>J.</given-names></name>, <name name-style="western"><surname>Bandrowski</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>Grethe</surname><given-names>J.S.</given-names></name><etal>et al.</etal></person-group> (<year>2012</year>) <article-title>A survey of the neuroscience resource landscape: perspectives from the neuroscience information framework</article-title>. <source><italic toggle="yes">Int. Rev. Neurobiol.</italic></source>, <volume>103</volume>, <fpage>39</fpage>–<lpage>68</lpage>.<pub-id pub-id-type="pmid">23195120</pub-id></mixed-citation>
    </ref>
    <ref id="ref4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gupta</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>Bug</surname><given-names>W.</given-names></name>, <name name-style="western"><surname>Marenco</surname><given-names>L.</given-names></name><etal>et al.</etal></person-group> (<year>2008</year>) <article-title>Federated access to heterogeneous information resources in the Neuroscience Information Framework (NIF)</article-title>. <source><italic toggle="yes">Neuroinformatics</italic></source>, <volume>6</volume>, <fpage>205</fpage>–<lpage>217</lpage>.<pub-id pub-id-type="pmid">18958629</pub-id></mixed-citation>
    </ref>
    <ref id="ref5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gardner</surname><given-names>D.</given-names></name>, <name name-style="western"><surname>Akil</surname><given-names>H.</given-names></name>, <name name-style="western"><surname>Ascoli</surname><given-names>G.A.</given-names></name><etal>et al.</etal></person-group> (<year>2008</year>) <article-title>The neuroscience information framework: a data and knowledge environment for neuroscience</article-title>. <source><italic toggle="yes">Neuroinformatics</italic></source>, <volume>6</volume>, <fpage>149</fpage>–<lpage>160</lpage>.<pub-id pub-id-type="pmid">18946742</pub-id></mixed-citation>
    </ref>
    <ref id="ref6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Whetzel</surname><given-names>P.L.</given-names></name>, <name name-style="western"><surname>Grethe</surname><given-names>J.S.</given-names></name>, <name name-style="western"><surname>Banks</surname><given-names>D.E.</given-names></name><etal>et al.</etal></person-group> (<year>2015</year>) <article-title>The NIDDK Information Network: a community portal for finding data, materials, and tools for researchers studying diabetes, digestive, and kidney diseases</article-title>. <source><italic toggle="yes">PLoS One</italic></source>, <volume>10</volume>, <comment>e0136206</comment>
<pub-id pub-id-type="doi">10.1371/journal.pone.0136206</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bandrowski</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>Brush</surname><given-names>M.</given-names></name>, <name name-style="western"><surname>Grethe</surname><given-names>J.S.</given-names></name><etal>et al.</etal></person-group> (<year>2016</year>) <article-title>The Resource Identification Initiative: a cultural shift in publishing</article-title>. <source><italic toggle="yes">Brain Behav.</italic></source>, <volume>6</volume>, <comment>e00417</comment>.</mixed-citation>
    </ref>
    <ref id="ref8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ohno-Machado</surname><given-names>L.</given-names></name>, <name name-style="western"><surname>Sansone</surname><given-names>S.-A.</given-names></name>, <name name-style="western"><surname>Alter</surname><given-names>G.</given-names></name><etal>et al</etal></person-group> (<year>2017</year>) <article-title>DataMed: finding useful data across multiple biomedical data repositories</article-title>. <source><italic toggle="yes">Nat. Gen.</italic></source>, <volume>49</volume>, <fpage>816</fpage>–<lpage>819</lpage>. doi:<comment>10.1038/ng.3864</comment>.</mixed-citation>
    </ref>
    <ref id="ref9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sansone</surname><given-names>S.-A.</given-names></name>, <name name-style="western"><surname>Gonzalez-Beltran</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>Rocca-Serra</surname><given-names>P.</given-names></name><etal>et al</etal></person-group> (<year>2017</year>) <article-title>DATS: the data tag suite to enable discoverability of datasets</article-title>. <source><italic toggle="yes">Sci. Data</italic></source>, <volume>4</volume>, <fpage>170059</fpage>. doi:10.1038/sdata.2017.59.<pub-id pub-id-type="pmid">28585923</pub-id></mixed-citation>
    </ref>
    <ref id="ref10">
      <label>10.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><collab>CINERGI</collab></person-group>, <comment><ext-link ext-link-type="uri" xlink:href="https://www.earthcube.org/group/cinergi">https://www.earthcube.org/group/cinergi</ext-link></comment> (<year>2017</year>). (<comment>Accessed 15 May 2017</comment>).</mixed-citation>
    </ref>
    <ref id="ref11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Dean</surname><given-names>J.</given-names></name> and <name name-style="western"><surname>Ghemawat</surname><given-names>S.</given-names></name></person-group> (<year>2008</year>) <article-title>MapReduce</article-title>. <source><italic toggle="yes">Commun. ACM</italic></source>, <volume>51</volume>, <fpage>107</fpage>.</mixed-citation>
    </ref>
    <ref id="ref12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Marenco</surname><given-names>L.N.</given-names></name>, <name name-style="western"><surname>Wang</surname><given-names>R.</given-names></name>, <name name-style="western"><surname>Bandrowski</surname><given-names>A.E.</given-names></name><etal>et al.</etal></person-group> (<year>2014</year>) <article-title>Extending the NIF DISCO framework to automate complex workflow: coordinating the harvest and integration of data from diverse neuroscience information resources</article-title>. <source><italic toggle="yes">Front. Neuroinform</italic>.</source>, <volume>8</volume>, <fpage>58</fpage>.<pub-id pub-id-type="pmid">25018728</pub-id></mixed-citation>
    </ref>
    <ref id="ref13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Marenco</surname><given-names>L.</given-names></name>, <name name-style="western"><surname>Wang</surname><given-names>R.</given-names></name>, <name name-style="western"><surname>Shepherd</surname><given-names>G.M.</given-names></name><etal>et al.</etal></person-group> (<year>2010</year>) <article-title>The NIF DISCO framework: facilitating automated integration of neuroscience content on the web</article-title>. <source><italic toggle="yes">Neuroinformatics</italic></source>, <volume>8</volume>, <fpage>101</fpage>–<lpage>112</lpage>.<pub-id pub-id-type="pmid">20387131</pub-id></mixed-citation>
    </ref>
    <ref id="ref14">
      <label>14.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Gamma</surname><given-names>E.</given-names></name>, <name name-style="western"><surname>Helm</surname><given-names>R.</given-names></name>, <name name-style="western"><surname>Johnson</surname><given-names>R.</given-names></name><etal>et al.</etal></person-group> (<year>1994</year>) <source><italic toggle="yes">Design Patterns: Elements of Reusable Object-Oriented Software</italic> (Adobe Reader)</source>. <publisher-name>Pearson Education</publisher-name>, <publisher-loc>Boston, MA</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="ref15">
      <label>15.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Garcia-Molina</surname><given-names>H.</given-names></name>, <name name-style="western"><surname>Ullman</surname><given-names>J.D.</given-names></name> and <name name-style="western"><surname>Widom</surname><given-names>J.</given-names></name></person-group> (<year>2000</year>) <source><italic toggle="yes">Database System Implementation</italic></source>. <publisher-name>Prentice Hall</publisher-name>, <publisher-loc>Upper Saddle River, New Jersey</publisher-loc>.</mixed-citation>
    </ref>
    <ref id="ref16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><collab>UniProt Consortium</collab></person-group> (<year>2009</year>) <article-title>The universal protein resource (UniProt)</article-title>. <source><italic toggle="yes">Nucleic Acids Res.</italic></source>, <volume>37</volume>, <fpage>D169</fpage>–<lpage>D174</lpage>. doi:<comment>10.1093/nar/gkn664</comment>.<pub-id pub-id-type="pmid">18836194</pub-id></mixed-citation>
    </ref>
    <ref id="ref17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kennedy</surname><given-names>D.N.</given-names></name>, <name name-style="western"><surname>Haselgrove</surname><given-names>C.</given-names></name>, <name name-style="western"><surname>Riehl</surname><given-names>J.</given-names></name><etal>et al</etal></person-group> (<year>2016</year>) <article-title>The NITRC image repository</article-title>. <source><italic toggle="yes">Neuroimage</italic></source>, <volume>124</volume>, <fpage>1069</fpage>–<lpage>1073</lpage>, doi:10.1016/j.neuroimage.2015.05.074.<pub-id pub-id-type="pmid">26044860</pub-id></mixed-citation>
    </ref>
    <ref id="ref18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Berman</surname><given-names>H.M.</given-names></name></person-group> (<year>2000</year>) <article-title>The Protein Data Bank</article-title>. <source><italic toggle="yes">Nucleic Acids Res.</italic></source>, <volume>28</volume>, <fpage>235</fpage>–<lpage>242</lpage>.<pub-id pub-id-type="pmid">10592235</pub-id></mixed-citation>
    </ref>
    <ref id="ref19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Barrett</surname><given-names>T.</given-names></name>, <name name-style="western"><surname>Troup</surname><given-names>D.B.</given-names></name>, <name name-style="western"><surname>Wilhite</surname><given-names>S.E.</given-names></name><etal>et al.</etal></person-group> (<year>2007</year>) <article-title>NCBI GEO: mining tens of millions of expression profiles—database and tools update</article-title>. <source><italic toggle="yes">Nucleic Acids Res.</italic></source>, <volume>35</volume>, <fpage>D760</fpage>–<lpage>D765</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkl887</pub-id>.<pub-id pub-id-type="pmid">17099226</pub-id></mixed-citation>
    </ref>
    <ref id="ref20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zoubarev</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>K.M.</surname></name>, <name name-style="western"><surname>K.D.</surname></name><etal>et al</etal></person-group> (<year>2012</year>). <article-title>Gemma: a resource for the reuse, sharing and meta-analysis of expression profiling data</article-title>. <source><italic toggle="yes">Bioinformatics</italic></source>, <volume>28</volume>, <fpage>2272</fpage>–<lpage>2273</lpage>. doi:<pub-id pub-id-type="doi">10.1093/bioinformatics/bts430</pub-id>.<pub-id pub-id-type="pmid">22782548</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
