<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Sci Rep</journal-id>
    <journal-id journal-id-type="iso-abbrev">Sci Rep</journal-id>
    <journal-title-group>
      <journal-title>Scientific Reports</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2045-2322</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6718772</article-id>
    <article-id pub-id-type="publisher-id">49114</article-id>
    <article-id pub-id-type="doi">10.1038/s41598-019-49114-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VIVA (VIsualization of VAriants): A VCF File Visualization Tool</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Tollefson</surname>
          <given-names>G. A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Schuster</surname>
          <given-names>J.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Gelin</surname>
          <given-names>F.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Agudelo</surname>
          <given-names>A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ragavendran</surname>
          <given-names>A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Restrepo</surname>
          <given-names>I.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Stey</surname>
          <given-names>P.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Padbury</surname>
          <given-names>J.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-6489-8591</contrib-id>
        <name>
          <surname>Uzun</surname>
          <given-names>A.</given-names>
        </name>
        <address>
          <email>alper_uzun@brown.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.241223.4</institution-id><institution>Department of Pediatrics, </institution><institution>Women and Infants Hospital of RI, </institution></institution-wrap>Providence, RI USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 9094</institution-id><institution-id institution-id-type="GRID">grid.40263.33</institution-id><institution>Department of Pediatrics, </institution><institution>Brown University Warren Alpert Medical School, </institution></institution-wrap>Providence, RI USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 9094</institution-id><institution-id institution-id-type="GRID">grid.40263.33</institution-id><institution>Data Science Practice, </institution><institution>Brown University, </institution></institution-wrap>Providence, RI USA </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 9094</institution-id><institution-id institution-id-type="GRID">grid.40263.33</institution-id><institution>Center for Computational Molecular Biology, </institution><institution>Brown University, </institution></institution-wrap>Providence, RI USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>9</volume>
    <elocation-id>12648</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>8</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>15</day>
        <month>8</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">High-throughput sequencing produces an extraordinary amount of genomic data that is organized into a number of high-dimension datasets. Accordingly, visualization of genomic data has become essential for quality control, exploration, and data interpretation. The Variant Call Format (VCF) is a text file format generated during the variant calling process that contains genomic information and locations of variants in a group of sequenced samples. The current workflow for visualization of genomic variant data from VCF files requires use of a combination of existing tools. Here, we describe VIVA (VIsualization of VAriants), a command line utility and Jupyter Notebook based tool for evaluating and sharing genomic data for variant analysis and quality control of sequencing experiments from VCF files. VIVA combines the functionality of existing tools into a single command to interactively evaluate and share genomic data, as well as create publication quality graphics.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Software</kwd>
      <kwd>Sequencing</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par2">Next generation sequencing produces an enormous amount of genomic data. This genomic data is stored in standardized data structures that have been designed to facilitate efficient analysis. The Variant Call Format (VCF) is a file format frequently used in sequence analysis<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. VCF data visualization is an effective way to share experimental and genetic insights within teams and with external parties. Since VCF data is notoriously dense, effective communication of variant analysis results is needed. We believe that the variant analysis process can be made more transparent by making VCF interpretation more accessible to all clinicians and researchers interested in genetic data analysis.</p>
    <p id="Par3">We introduce “VIVA”, a command line utility and Jupyter Notebook<sup><xref ref-type="bibr" rid="CR2">2</xref></sup> based tool for evaluating and sharing genomic data for variant analysis and quality control of sequencing experiments from VCF files. VIVA delivers flexibility, efficiency, and ease of use. VIVA’s functionality comprises three main parts: VCF file filtering, data parsing, and plotting. Currently, researchers must use a combination of tools to achieve this. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows an infographic comparing the current workflow with the workflow of VIVA to illustrate its contribution to this field.<fig id="Fig1"><label>Figure 1</label><caption><p>Comparative workflow. We present a general workflow for filtering, extracting, and visualizing variants from VCF files. This comparative workflow shows that while VIVA can perform filtering, extracting, annotating phenotype(s), and plotting functions in single command, other existing tools need additional and intermediate steps that require computational skills.</p></caption><graphic xlink:href="41598_2019_49114_Fig1_HTML" id="d29e319"/></fig></p>
    <p id="Par4">Interpreting data from VCF files presents several challenges. The ability to process VCF files is limited by computational resources as the file size is often very large. To facilitate memory efficient data retrieval, existing VCF file parsing and visualization tools require users to preprocess their VCF files. This entails compressing and sorting VCF files by genomic position before either subsetting the file with an external program, such as VCFtools<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>, or indexing the files with Tabix<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. Further, the VCF data structure is dense and difficult to interpret in its raw data format and requires data querying to draw insights.</p>
    <p id="Par5">We have prepared a detailed table of features comparing VIVA with some of the tools in the current workflow (VCFTools<sup><xref ref-type="bibr" rid="CR1">1</xref></sup>, GEMINI<sup><xref ref-type="bibr" rid="CR4">4</xref></sup>, BrowseVCF<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>, VCF.Filter<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, VCF-Miner<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>, VCF-Server<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>, vcfR<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>, IGV<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>) (Table <xref rid="Tab1" ref-type="table">1</xref>). We only considered tools that are open source and published in peer-reviewed journals. Our comparisons are based on four feature categories: technical details, filtering, visualization, and output options. In the technical details category, tools with the feature “one-step command” are defined as tools that can be run in a single step by the user. Tools that are run with a single one-step command load the input files, manipulate the file (for example filtering, extracting data, annotating with phenotype information) and produce output data (for example plots) without the need for intermediate user commands. The only tools that offer this feature are VIVA, VCFtools and IGV. All of the considered tools exist as standalone applications, except for VCF-Server. BrowseVCF and VCF-Miner have many of the same variant filtering features as VIVA; however, they have no options for visualization. Only VIVA and vcfR produce multi-sample heatmaps and read depth scatter plots. However, VIVA is the only tool which produces interactive HTML5 based visualizations, supports grouping of samples by like metadata traits, and displays multiple genomic regions and genotypic-phenotypic associations in a single plot.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Comparison of features for VCF filtering and visualization tools.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Categories of Features</th><th>Features</th><th>VIVA</th><th>VCFtools</th><th>GEMINI</th><th>BrowseVCF</th><th>VCF. Filter</th><th>VCF-Miner</th><th>VCF-Server</th><th>vcfR</th><th>IGV</th></tr></thead><tbody><tr><td rowspan="6">Technical Details</td><td>One-step command</td><td>✓</td><td>✓</td><td/><td/><td/><td/><td/><td/><td>✓</td></tr><tr><td>Standalone software</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/><td>✓</td><td>✓</td></tr><tr><td>Environment (OS)</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td><td>Windows</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td><td>Windows, Mac, Linux</td></tr><tr><td>Language</td><td>Julia</td><td>C++, Perl</td><td>Python</td><td>Python, JavaScript, CSS, HTML5</td><td>Java</td><td>Java</td><td>C, PERL‐CGI, JavaScript</td><td>R</td><td>Java</td></tr><tr><td>Interface</td><td>Command Line, Jupyter Notebook</td><td>Command Line</td><td>Command Line, Web Browser</td><td>GUI, Command Line</td><td>GUI</td><td>GUI</td><td>GUI</td><td>R Console</td><td>GUI</td></tr><tr><td>Docker container</td><td>✓</td><td>✓</td><td>✓</td><td/><td/><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td rowspan="6">Filtering</td><td>Genomic ranges</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/><td>✓</td></tr><tr><td>Variant position list</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/><td/><td>✓</td></tr><tr><td>PASS filter</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Sample selection</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Variant annotations</td><td/><td/><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/><td/></tr><tr><td>Dynamic filtering</td><td/><td/><td/><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/><td>✓</td></tr><tr><td rowspan="6">Visualization</td><td>Multi-sample heatmaps</td><td>✓</td><td/><td/><td/><td/><td/><td/><td>✓</td><td/></tr><tr><td>Read depth scatter plots</td><td>✓</td><td/><td/><td/><td/><td/><td/><td>✓</td><td/></tr><tr><td>Interactive HTML5 visualization</td><td>✓</td><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>Group samples by metadata traits</td><td>✓</td><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>Display genotypic-phenotypic associations</td><td>✓</td><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>Display multiple genomic regions</td><td>✓</td><td/><td/><td/><td/><td/><td/><td/><td>✓</td></tr><tr><td rowspan="4">Output</td><td>Filtered results as tabular data</td><td>✓</td><td/><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/></tr><tr><td>Tabular output grouped by phenotype</td><td>✓</td><td/><td/><td/><td/><td>✓</td><td/><td/><td/></tr><tr><td>Publication quality graphics</td><td>✓</td><td/><td/><td/><td/><td/><td/><td>✓</td><td>✓</td></tr><tr><td>Export filtered VCF file</td><td/><td>✓</td><td/><td/><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td/></tr></tbody></table></table-wrap></p>
    <p id="Par6">VIVA employs the Julia programming language, a high-level, high-performance, dynamic programming language for numerical computing<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>. VIVA is among the first user-level tools of its kind written in the Julia programming language. Additionally, it can be integrated into workflows with other tools hosted by BioJulia, the Julia language community for biologists and bioinformaticians.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <p id="Par7">VIVA’s workflow involves three main steps which are illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>: (1) The user submits input files and chooses filtering options, if any are needed; (2) VIVA reads the VCF file and processes the data; (3) VIVA creates graphs and exports output files. These steps are all initialized in single command by the user.<fig id="Fig2"><label>Figure 2</label><caption><p>Workflow of VIVA. <italic>INPUT</italic>: VCF file is a required file. Users can use one or any combination of variant filters, sample selection, and grouping options. <italic>DATA PROCESSING</italic>: Data processing requires the Julia programing language and depends on several well-maintained Julia packages. Plotting uses the PlotlyJS.jl wrapper for Plotly. VIVA has two interface choices. Users may use the program through a Jupyter Notebook or from the command line. <italic>OUTPUT</italic>: VIVA’s four visualization options include heatmaps of genotype and read depth data as well as scatter plots of average sample read depth and average variant read depth data. These visualizations can be saved in HTML, PDF, SVG, or EPS formats. HTML format enables users to share and analyze the data interactively between research groups which supports collaborative work environments.</p></caption><graphic xlink:href="41598_2019_49114_Fig2_HTML" id="d29e982"/></fig></p>
    <sec id="Sec3">
      <title>Data input</title>
      <p id="Par8">VCF is a text file format generated during the variant calling process that contains genomic information and locations of variants in a group of sequenced samples. The structure includes variant information such as genotype and read depth values for samples at each genomic position. The VCF file is the only required input file and it may be compressed or uncompressed. VIVA specifically supports VCF files for human genomes.</p>
      <p id="Par9">There are three optional text file inputs that support variant filtering and sample selection: (1) Variant List: A comma separated list of specific variant positions to include in visualization, including chromosome number and genomic position; (2) Sample Metadata Matrix: A .csv file with phenotypic or experimental metadata information. Any number of binary phenotypic traits or experimental conditions can be included in the matrix; (3) Sample List: A .csv file containing samples of interest to include in visualization. Examples of these input files are found in the repository hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/compbiocore/VariantVisualization.jl">https://github.com/compbiocore/VariantVisualization.jl</ext-link>.</p>
    </sec>
    <sec id="Sec4">
      <title>Variant record filtering</title>
      <p id="Par10">We recommend using one or a combination of VIVA’s variant filtering options when producing visualizations, as the number of data points included in visualization is limited by the user’s computational resources available for plotting and pixels needed for display. These filtering options include: (1) Pass Filter: Selects variant records that have passed filters selected during VCF generation; (2) Variant List Filter: Uses the Variant List input file described above to select variant records that match a list of genomic positions; (3) Genomic Range Filter: Selects variants that lie within a given genomic range (Ex: chr1:8900000–12000000). Users set filtering and visualization options in the command line interface or in the VIVA Jupyter Notebook utility’s settings.</p>
    </sec>
    <sec id="Sec5">
      <title>Sample ordering and selection</title>
      <p id="Par11">There are two options to manipulate the VCF data using sample IDs. Users can reorder the columns of the VCF file to explore trends across samples by supplying a matrix of sample metadata and sample IDs. Additionally, users can select specific samples to include in visualizations by supplying a list of sample IDs.</p>
    </sec>
    <sec id="Sec6">
      <title>Generating plots</title>
      <p id="Par12">We built our plotting functions using PlotlyJS.jl v0.12.3. We used this library to build heatmap functions for plotting read depth and genotype data, as well as scatter plot functions to create summary plots of average read depth values. Numerical arrays of genotype values are plotted by a heatmap function to produce a multi-sample categorical heatmap. These heatmaps display the genotype values: homozygous reference, heterozygous variant, homozygous variant, or no call for all selected samples and variants. These values are plotted with the Viridis color palette. Viridis is the default colormap of the Python plotting package, Matplotlib 2.0. Viridis is accessible to viewers with color blindness, visually appealing, and able to be converted to grayscale<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>. Read depth values are plotted in a continuous value heatmap using shades of blue that are reminiscent of ocean floor relief maps. For both heatmaps, y-axes are labeled with chromosome positions and x-axes are labeled with sample IDs. Users can choose to annotate their heatmaps with color bars showing binary sample metadata traits such as phenotypes or sequencing information.</p>
      <p id="Par13">File formats for saving heatmap and scatter plots include PDF, HTML, SVG, PNG, and EPS. Interactive plots can be saved in HTML to be used for real-time data exploration and are easily shared with other researchers who do not have VIVA installed. HTML plots are in HTML5 format and can be viewed in any browser. They support zooming, panning, and hover labels for real-time data exploration. Hover labels contain chromosome position, sample ID, and data values for each data point.</p>
    </sec>
    <sec id="Sec7">
      <title>Tool architecture</title>
      <p id="Par14">VIVA exists as both a command line tool and as a Jupyter Notebook hosted utility. Both of these tools are built with VariantVisualization.jl, our registered Julia programming language package for VCF file parsing, data manipulation, and plotting. VariantVisualization.jl depends upon a variety of other Julia packages. VariantVisualization.jl contains functions for data processing that are utilized in the following sequence: variant record selection, extraction of genotype or read depth values for selected variants into a numerical array, reordering the columns of the numerical array using sample metadata, selection of specific samples, and finally, plotting the resulting data.</p>
      <p id="Par15">The VIVA command line utility is implemented by calling the tool name, the name of the VCF file, and all usage options (‘viva -f file.vcf [options]’) in the Terminal or Windows PowerShell. VIVA options are evaluated and passed to VariantVisualization.jl functions by the ArgParse.jl v0.6.2 Julia package.</p>
      <p id="Par16">Our custom variant filtering functions utilize the GeneticVariation.jl v0.4.0 Julia package for reading data from VCF files. Our functions also utilize the VCF.Reader function to read VCF file variant records in the form of a reader object.</p>
    </sec>
    <sec id="Sec8">
      <title>Jupyter notebook</title>
      <p id="Par17">We used our VariantVisualization.jl Julia package to design a Jupyter Notebook with the full functionality of the command line tool. The VIVA Jupyter Notebook utility guides users who are unfamiliar with running bioinformatics tools on the command line through the use of VIVA. It includes a concise user manual in the first cell of the notebook. The next cells contain clearly labeled fields for entering the VCF file name and desired options. The user only needs to fill out the data input and option selection fields, then run the notebook to produce, save, and display interactive plots and publication quality graphics.</p>
    </sec>
  </sec>
  <sec id="Sec9" sec-type="results">
    <title>Results</title>
    <p id="Par18">We compared VIVA to the current workflow needed to achieve comparable output (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). As demonstrated in this figure in conjunction with Table <xref rid="Tab1" ref-type="table">1</xref>, there is no single tool with which we can compare VIVA’s performance. One of our goals while building VIVA was to optimize the efficiency of reading and filtering large VCF files without the need for VCF file preprocessing. Thus, in the following section we compare the performance of VIVA to a VCF filtering tool (BrowseVCF). We also present use case examples of VIVA in which we visualize both differential burden of putative disease associated variants and evidence of batch effect.</p>
    <sec id="Sec10">
      <title>Benchmarks</title>
      <sec id="Sec11">
        <title>Evaluation of performance</title>
        <p id="Par19">We evaluated VIVA’s performance on a MacBook Pro with 2.9 GHz Intel Core i5 CPU running macOS High Sierra with 8 GB 1867 MHz DDR3. Our test data set was a 13.58 GB VCF file from a whole exome sequencing study containing 6,699,236 variants for 100 samples. We ran VIVA and selected 8700 variants-of-interest from our test VCF file using default options to generate all plots. We saved four outputs, including a scatter plot of average sample read depth, a scatter plot of average variant read depth, and heatmaps of genotype and read depth values. All graphics were saved in HTML file format. We ran 5 replicates of this test and found it took an average of 4 minutes and 13 seconds with a range of 2 seconds.</p>
      </sec>
      <sec id="Sec12">
        <title>Comparative performance analysis of VCF loading/filtering</title>
        <p id="Par20">We compared VIVA’s performance to that of BrowseVCF using 4 different simulation data sets. Two test VCF files were used, the first for Simulations 1 and 2 and the second for Simulations 3 and 4. In Simulation 1 and Simulation 3, the “PASS” filter was applied. In Simulations 2 and 4, the genomic range filter was used (chr3:1-4500000 and chr1:1-11134196 respectively). For all four simulations, VIVA’s runtime was shorter compared to that of BrowseVCF (Table <xref rid="Tab2" ref-type="table">2</xref>).<table-wrap id="Tab2"><label>Table 2</label><caption><p>VIVA filtering runtime comparisons.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Simulations</th><th>VCF Filtering Simulations</th><th>VCF File Size</th><th>Number of Samples</th><th>Number of Variants</th><th>Number of Filtered Variants</th><th>VIVA Runtime (seconds)</th><th>BrowseVCF Runtime (seconds)</th></tr></thead><tbody><tr><td>Sim 1</td><td><italic>PASS FILTER</italic></td><td>34.1 MB</td><td>24</td><td>37928</td><td>17901</td><td>25.97</td><td>109.29</td></tr><tr><td>Sim 2</td><td><italic>Genomic Range</italic> (<italic>chr3:1-4500000</italic>)</td><td>34.1 MB</td><td>24</td><td>37928</td><td>60</td><td>27.30</td><td>96.00</td></tr><tr><td>Sim 3</td><td><italic>PASS FILTER</italic></td><td>261.5 MB</td><td>100</td><td>99850</td><td>99850</td><td>58.91</td><td>843.15</td></tr><tr><td>Sim 4</td><td><italic>Genomic Range</italic> (<italic>chr1:1-11134196</italic>)</td><td>261.5 MB</td><td>100</td><td>99850</td><td>4498</td><td>31.50</td><td>672.28</td></tr></tbody></table></table-wrap></p>
      </sec>
    </sec>
    <sec id="Sec13">
      <title>Application examples</title>
      <p id="Par21">VIVA’s variety of visualization options creates many use cases for high-throughput sequencing experiment quality control and variant analysis. We present two such use cases in Fig. <xref rid="Fig3" ref-type="fig">3</xref>.<fig id="Fig3"><label>Figure 3</label><caption><p>VIVA Use Cases. We present two use cases for VIVA. In both heatmaps, unique variant positions are stored in rows and individual samples are stored in columns. In the first use case (<bold>a</bold>) we visualize a differential burden of putative disease associated variants in a heatmap of genotype values for a set of 100 samples grouped by case and control metadata. In the second use case (<bold>b</bold>) we identify batch effect between a total of 191 samples sequenced at two separate facilities for a variant analysis study by visualizing read depth information and grouping samples by sequencing facility.</p></caption><graphic xlink:href="41598_2019_49114_Fig3_HTML" id="d29e1238"/></fig></p>
      <p id="Par22">Grouping samples by phenotype or metadata is useful for comparative evaluation between samples. When sample grouping is implemented by the user, binary phenotype characteristics are visualized in a subplot of color bars at the top of heatmap visualizations. Users can add as many binary traits as they like to the visualization and can group samples by any one trait at a time. In Fig. <xref rid="Fig3" ref-type="fig">3a</xref>, genotype data is visualized in a heatmap for a select list of variants which had a statistically significant difference in distribution between the test groups. The samples are grouped by case and control. In this use case, the visualization highlights the differential burden of putative disease associated variants in the case group compared to the group of controls. In Fig. <xref rid="Fig3" ref-type="fig">3b</xref>, read depth values are visualized and samples are grouped by sequencing facility. In this use case, the visualization identified batch effect between groups of samples sequenced by the two sequencing facilities. There was a globally lower sequencing read depth achieved by one of the two sequencing cores, shown by areas of light blue indicating low read depth values.</p>
    </sec>
  </sec>
  <sec id="Sec14" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par23">We have taken several steps to make VCF file interpretation and visualization more accessible to researchers and clinicians. By consolidating the steps of current VCF file visualization workflows into a single tool, VIVA saves users’ time and resources. We have written comprehensive and clearly structured documentation with running examples to guide new users through their first runs. Since no coding is necessary to run VIVA, we have made VCF file visualization accessible to non-programmers.</p>
    <p id="Par24">VIVA was designed to optimize filtering speed using functions with a low-memory-footprint. VIVA reads through VCF files line by line and evaluates each variant record in the VCF file. The functions only load a variant record into memory if the record matches filter selection criteria. In this way, VIVA can read VCF files without loading the entire file into memory. Other tools require users to upload their VCF files onto a server for indexing and filtering. VIVA is both secure and fast because uploading large files onto an external server is not necessary. We showed in VIVA’s runtime comparisons (Table <xref rid="Tab2" ref-type="table">2</xref>) that VIVA outperformed BrowseVCF in all simulations. We chose to compare VIVA against BrowseVCF because the authors of BrowseVCF showed faster performance than other filtering tools in their own comparisons<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>.</p>
    <p id="Par25">VIVA combines VCF file filtering and data extraction with flexible plotting functionality. Users can customize their plots by adding custom titles, selecting axes labelling options, and choosing from a variety of output file formats. VIVA supports interactive HTML output that can be used for real-time data exploration as well as scalable graphics formats like PDF and SVG for inclusion in publications and presentations.</p>
    <p id="Par26">VIVA’s array of visualizations can be used for quality control in sequencing experiments. Catching errors early on in the variant analysis workflow saves time and produces more accurate results. Plotting read depth values of sequenced samples across selected variants can help identify problematic samples and difficult to sequence genomic regions (both can be observed as very light blue streaks across the read depth heatmap in Fig. <xref rid="Fig3" ref-type="fig">3b</xref>). Batch effect can be identified with VIVA by grouping samples by user-supplied experimental metadata and plotting a heatmap of read depth values (as shown in Fig. <xref rid="Fig3" ref-type="fig">3b</xref>).</p>
    <p id="Par27">Sample grouping can also be used for exploring and presenting phenotype-genotype associations. By supplying phenotype metadata for samples, users can group samples by common phenotypic traits and plot variant genotype values. In this way, users can identify variants with higher distribution in samples with certain phenotypes. This could be useful for identifying variants that are associated with symptoms, with diseases, with drug effectiveness, and more. In this way, VIVA can be used for data exploration and presentation of findings in genetic disease research and precision medicine in the clinical genetics setting.</p>
    <p id="Par28">While our primary goal was to create a tool that is easily accessible to non-programmers, it is important to note that VariantVisualization.jl is an open-source package of clearly documented, modular functions. This allows other Julia developers to incorporate parts of VIVA’s functionality into their own projects. VIVA is one of the first user-level tools in the Julia programming language and sets a precedent for other command line tools to be built in the language. Functions within the VariantVisualization.jl package can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/compbiocore/VariantVisualization.jl/tree/master/src">https://github.com/compbiocore/VariantVisualization.jl/tree/master/src</ext-link>.</p>
    <p id="Par29">Several improvements to VIVA are under development. We want VIVA to be accessible to users who prefer a graphical user interface (GUI). We chose to develop a Jupyter Notebook utility for VIVA to accommodate these users. Jupyter Notebook is an open source computational notebook that combines code, descriptive text, and interactive output and has become the computational notebook of choice with data scientists<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>. While a Jupyter Notebook makes running VIVA accessible to those who are unfamiliar with using the command line, in the future we intend to design an easy-to-use GUI for our application. Other VCF file filtering tools support dynamic filtering of VCF files. These tools are able to dynamically learn which fields exist in a submitted VCF file and allow users to filter by them. We intend to implement this functionality into a future version of VIVA. We also intend to expand our sample grouping feature to allow grouping of samples by more than one trait at a time. Finally, we are developing a variety of variant annotation features to support variant analysis and filtering by annotations.</p>
  </sec>
  <sec id="Sec15" sec-type="conclusion">
    <title>Conclusions</title>
    <p id="Par30">In conclusion, we have built a visualization tool for exploratory analysis and generation of publication quality graphics for variant analysis projects using variant call format (VCF) files. Researchers and clinicians can use VIVA to explore phenotype and genotype associations, batch effects on coverage, and differential incidence of variants between samples in their variant analysis experiments. VIVA provides a user friendly, one-step command and combines the functionality of existing tools to increase the accessibility of the current VCF file visualization workflow.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note:</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank Ben J. Ward (The Clavijo Group, The Earlham Institute, Norwich Research Park), developer of Genetic Variation.jl, who provided frequent technical support while we developed our functions for memory efficient variant record extraction from large VCF files. We thank Spencer Lyon (Managing Director, Valorum Data), developer of PlotlyJS.jl, who provided technical support while we developed our plotting functions. We also thank the Center for Computation and Visualization (CCV) and the Computational Biology Core at Brown University for their support in testing VIVA’s performance on different system configurations. This work was supported by the National Institutes of Health (grants 5P20GM109035-04, P20GM121298, 5P30GM114750) and the Kilguss Research Core at Women &amp; Infants Hospital.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author Contributions</title>
    <p>G.A.T. wrote the software. J.S. and A.U. developed the algorithm. F.G. provided technical support. G.A.T. and F.G. assembled the Julia package. A.A., A.R., I.R., P.S. provided guidance. J.P. contributed ideas to the features of the software. G.A.T. wrote the manuscript with critical feedback and input from J.P., J.S., A.U. A.U. conceptualized the project and supervised the study.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Software and Code Availability</title>
    <p>VIVA is an open source tool built upon our registered Julia package, VariantVisualization.jl. It is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/compbiocore/VariantVisualization.jl">https://github.com/compbiocore/VariantVisualization.jl</ext-link>.</p>
    <p>We have minted the project using Zenodo. The DOI is 10.5281/zenodo.3341840. Installation and comprehensive use instructions are detailed in the VIVA documentation which is available at <ext-link ext-link-type="uri" xlink:href="https://compbiocore.github.io/VariantVisualization.jl/latest/">https://compbiocore.github.io/VariantVisualization.jl/latest/</ext-link>.</p>
    <p>The tool undergoes routine cross-platform testing by the continuous integration services, Travis CI and AppVeyor.</p>
    <p>We have also implemented a Docker container to run VIVA without installing the Julia programming language and Julia package dependencies. Docker installation and use instructions are detailed in the manual at <ext-link ext-link-type="uri" xlink:href="https://compbiocore.github.io/VariantVisualization.jl/latest/installation/#running-viva-with-docker-or-docker-compose">https://compbiocore.github.io/VariantVisualization.jl/latest/installation/#running-viva-with-docker-or-docker-compose</ext-link>.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing Interests</title>
    <p id="Par31">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Danecek</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The variant call format and VCFtools</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>2156</fpage>
        <lpage>2158</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr330</pub-id>
        <?supplied-pmid 3137218?>
        <pub-id pub-id-type="pmid">21653522</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Perkel</surname>
            <given-names>JM</given-names>
          </name>
        </person-group>
        <article-title>Why Jupyter is data scientists’ computational notebook of choice</article-title>
        <source>Nature</source>
        <year>2018</year>
        <volume>563</volume>
        <fpage>145</fpage>
        <lpage>146</lpage>
        <pub-id pub-id-type="doi">10.1038/d41586-018-07196-1</pub-id>
        <?supplied-pmid 30375502?>
        <pub-id pub-id-type="pmid">30375502</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Tabix: fast retrieval of sequence features from generic TAB-delimited files</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>718</fpage>
        <lpage>719</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq671</pub-id>
        <?supplied-pmid 21208982?>
        <pub-id pub-id-type="pmid">21208982</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paila</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Kirchner</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>GEMINI: integrative exploration of genetic variation and genome annotations</article-title>
        <source>PLoS Comput Biol</source>
        <year>2013</year>
        <volume>9</volume>
        <fpage>e1003153</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003153</pub-id>
        <?supplied-pmid 23874191?>
        <pub-id pub-id-type="pmid">23874191</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salatino</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ramraj</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>BrowseVCF: a web-based application and workflow to quickly prioritize disease-causative variants in VCF files</article-title>
        <source>Brief Bioinform</source>
        <year>2017</year>
        <volume>18</volume>
        <fpage>774</fpage>
        <lpage>779</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbw054</pub-id>
        <?supplied-pmid 27373737?>
        <pub-id pub-id-type="pmid">27373737</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Muller</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>VCF.Filter: interactive prioritization of disease-linked genetic variants from sequencing data</article-title>
        <source>Nucleic Acids Res</source>
        <year>2017</year>
        <volume>45</volume>
        <fpage>W567</fpage>
        <lpage>W572</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkx425</pub-id>
        <?supplied-pmid 28520890?>
        <pub-id pub-id-type="pmid">28520890</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hart</surname>
            <given-names>SN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>VCF-Miner: GUI-based application for mining variants and annotations stored in VCF files</article-title>
        <source>Brief Bioinform</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>346</fpage>
        <lpage>351</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbv051</pub-id>
        <?supplied-pmid 26210358?>
        <pub-id pub-id-type="pmid">26210358</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Jiang, J., Gu, J., Zhao, T. &amp; Lu, H. VCF-Server: A web-based visualization tool for high-throughput variant data mining and management. <italic>Mol Genet Genomic Med</italic>, e641, 10.1002/mgg3.641 (2019).</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knaus</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Grunwald</surname>
            <given-names>NJ</given-names>
          </name>
        </person-group>
        <article-title>Vcfr: a package to manipulate and visualize variant call format data in R</article-title>
        <source>Mol Ecol Resour</source>
        <year>2017</year>
        <volume>17</volume>
        <fpage>44</fpage>
        <lpage>53</lpage>
        <pub-id pub-id-type="doi">10.1111/1755-0998.12549</pub-id>
        <pub-id pub-id-type="pmid">27401132</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Robinson</surname>
            <given-names>JT</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrative genomics viewer</article-title>
        <source>Nat Biotechnol</source>
        <year>2011</year>
        <volume>29</volume>
        <fpage>24</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1754</pub-id>
        <?supplied-pmid 21221095?>
        <pub-id pub-id-type="pmid">21221095</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Bezanson, J., Karpinski, S., Shah, V. B. &amp; Edelman, A. Julia: A Fast Dynamic Language for Technical Computing, <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1209.5145">https://arxiv.org/abs/1209.5145</ext-link> (2012).</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Walt, N. S. S. V. D. In <italic>14th annual meeting of the SciPy</italic> (<italic>Scientific Python</italic>) <italic>Conference</italic> (2015).</mixed-citation>
    </ref>
  </ref-list>
</back>
