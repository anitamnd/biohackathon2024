<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6842186</article-id>
    <article-id pub-id-type="publisher-id">3159</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-019-3159-9</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PyGMQL: scalable data extraction and analysis for heterogeneous genomic datasets</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7021-2007</contrib-id>
        <name>
          <surname>Nanni</surname>
          <given-names>Luca</given-names>
        </name>
        <address>
          <email>luca.nanni@polimi.it</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pinoli</surname>
          <given-names>Pietro</given-names>
        </name>
        <address>
          <email>pietro.pinoli@polimi.it</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Canakoglu</surname>
          <given-names>Arif</given-names>
        </name>
        <address>
          <email>arif.canakoglu@polimi.it</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ceri</surname>
          <given-names>Stefano</given-names>
        </name>
        <address>
          <email>stefano.ceri@polimi.it</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1937 0327</institution-id><institution-id institution-id-type="GRID">grid.4643.5</institution-id><institution>Department of Electronics, Information and Bioengineering, Politecnico di Milano, </institution></institution-wrap>Milan, Italy </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>8</day>
      <month>11</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>8</day>
      <month>11</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>560</elocation-id>
    <history>
      <date date-type="received">
        <day>13</day>
        <month>6</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>10</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">With the growth of available sequenced datasets, analysis of heterogeneous processed data can answer increasingly relevant biological and clinical questions. Scientists are challenged in performing efficient and reproducible data extraction and analysis pipelines over heterogeneously processed datasets. Available software packages are suitable for analyzing experimental files from such datasets one by one, but do not scale to thousands of experiments. Moreover, they lack proper support for metadata manipulation.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We present PyGMQL, a novel software for the manipulation of region-based genomic files and their relative metadata, built on top of the GMQL genomic big data management system. PyGMQL provides a set of expressive functions for the manipulation of region data and their metadata that can scale to arbitrary clusters and implicitly apply to thousands of files, producing millions of regions. PyGMQL provides data interoperability, distribution transparency and query outsourcing. The PyGMQL package integrates scalable data extraction over the Apache Spark engine underlying the GMQL implementation with native Python support for interactive data analysis and visualization. It supports data interoperability, solving the impedance mismatch between executing set-oriented queries and programming in Python. PyGMQL provides distribution transparency (the ability to address a remote dataset) and query outsourcing (the ability to assign processing to a remote service) in an orthogonal way. Outsourced processing can address cloud-based installations of the GMQL engine.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">PyGMQL is an effective and innovative tool for supporting tertiary data extraction and analysis pipelines. We demonstrate the expressiveness and performance of PyGMQL through a sequence of biological data analysis scenarios of increasing complexity, which highlight reproducibility, expressive power and scalability.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genomic data</kwd>
      <kwd>Data scalability</kwd>
      <kwd>Tertiary data analysis</kwd>
      <kwd>Distribution transparency</kwd>
      <kwd>Python</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010663</institution-id>
            <institution>H2020 European Research Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>693174</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100008536</institution-id>
            <institution>Amazon Web Services</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>By means of fast sequencing technologies, modern genomics promises to assist biological and clinical research by answering complex questions, e.g., how gene expression is deregulated in diseases, how mutations can lead to specific traits, how transcription factors interact to create complexes, how the genome organizes within three-dimensional configurations. To this aim, an impressive amount of sequencing data has been being collected by world-wide consortia as well as private laboratories and hospitals. Personalized medicine is slowly but steadily turning from vision into reality and biological research benefits more and more from bioinformatics approaches. In this scenario, computation approaches and tools are paramount to manage, process and analyze these large and heterogeneous collections of data.</p>
    <p>Primary analysis can be defined as the machine specific steps needed to call base pairs and compute quality scores for those calls. As these steps generate what are referred to as “reads” of small nucleotide sequences, it’s left up to secondary analysis to reassemble these reads to get a representation of the underlying biology, as well as the detection of signals (primarily variants, but also expression levels and peaks of expression). Tertiary analysis focuses on the integration of these signals to answer research questions and diverges into a spectrum of various study specific downstream investigations [<xref ref-type="bibr" rid="CR1">1</xref>].</p>
    <p>Most of the effort of the bioinformatics and computational biology community was focused on primary and secondary analysis. Nowadays, the most important challenge is tertiary analysis, concerned with the development of complex models and tools for integrating and analyzing the heterogeneous pieces of information provided by secondary analysis, to the aim of producing novel biological knowledge. For addressing tertiary analysis, we proposed the Genomic Data Model (GDM) [<xref ref-type="bibr" rid="CR2">2</xref>] and the GenoMetric Query Language (GMQL) [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>], composed by a query language and an engine built on top of Apache Spark [<xref ref-type="bibr" rid="CR5">5</xref>]. GMQL enables heterogeneous dataset manipulation and provides a public repository of curated datasets to be used with private data but it is not suited for interactive data exploration or data analysis, as it assumes batch interaction from command lines or from a Web interface.</p>
    <p>Tertiary data management practice requires the intertwining and seamless integration of data extraction and data analysis, so that the data scientist can easily build interactive applications which include use of statistical testing, machine learning and visualization. Python is earning more and more attention as vector language for data scientists. For this reason, we designed and implemented PyGMQL, a Python library which embeds the GMQL engine. PyGMQL combines the highly scalable approach of GMQL with the flexibility of Python, and solves the impedance mismatch between set-oriented execution of data management systems and the procedural nature of scripting languages. PyGMQL provides distribution transparency (the ability to address a remote dataset) and query outsourcing (the ability to assign processing to a remote service) in an orthogonal way. By relying on its Spark implementation, it can scale up from local execution to arbitrary cluster architectures. The ability to scale on parallel and cloud computing environments is the most innovative and distinguishing feature of PyGMQL and allows performing complex queries on large datasets. This, together with the high-level genomic operation definition and the possibility to embed complex data analysis workflows inside Jupyter Notebooks, makes PyGMQL a comprehensive tool for big genomic data exploration, management and integration.</p>
    <sec id="Sec2">
      <title>Related work</title>
      <p>Several efforts have been done in the design of libraries or command line suites for genomic region manipulation. BEDTools [<xref ref-type="bibr" rid="CR6">6</xref>] and BEDOPS [<xref ref-type="bibr" rid="CR7">7</xref>] both offer Unix-based command line tools providing common BED file manipulation primitives. BEDTools also offers a Python interface [<xref ref-type="bibr" rid="CR8">8</xref>]. In the R community, the GenomicRanges Bioconductor package [<xref ref-type="bibr" rid="CR9">9</xref>] is a well-established tool with similar features. A more general purpose Python library for genomic data analysis is BioPython [<xref ref-type="bibr" rid="CR10">10</xref>], which focuses more on secondary data analysis. These tools focus on supporting powerful operators for region manipulation upon a single experimental file. They emphasize usability but do not support scalable computing on remote clusters. Moreover, they do not include metadata and files must be individually loaded before being accessible to Python computations, which are performed by ad-hoc Python programs.</p>
      <p>In [<xref ref-type="bibr" rid="CR2">2</xref>] and [<xref ref-type="bibr" rid="CR11">11</xref>] we provide respectively a functional and performance comparison of GMQL with BEDTools and BEDOPS, from which PyGMQL inherits the result.</p>
      <p>PyGMQL has comparable expressive power in region manipulation with respect to these tools, but it adds an implicit iteration over all experiments of the same dataset. Its design is driven by scalability over thousands of experiments. Moreover, it supports metadata management explicitly, through high level operations for metadata extraction and for expressing predicates, that are seamlessly integrated with region manipulations. We designed the API of the library and its documentation so that biologists and bioinformaticians already competent in these tools can rapidly adapt to PyGMQL. For these reasons, PyGMQL can be considered as an upstream software for data manipulation both at the genomic data and metadata level, as demonstrated by several applications reported in the “<xref rid="Sec9" ref-type="sec">Results</xref>” section. The results of PyGMQL computations can be easily then used by the previously cited tools.</p>
      <p>The development of next-generation sequencing technologies has been followed by an increasing request of highly scalable software to define bioinformatics workflows [<xref ref-type="bibr" rid="CR12">12</xref>]. This has brought to the development of very successful workflow management software like Galaxy [<xref ref-type="bibr" rid="CR13">13</xref>], Snakemake [<xref ref-type="bibr" rid="CR14">14</xref>], Nextflow [<xref ref-type="bibr" rid="CR15">15</xref>] and FireCloud [<xref ref-type="bibr" rid="CR16">16</xref>] (evolving to a new system named Terra, in May 2019). Most of the work done so far is tailored for secondary analysis pipelines like read alignment and mapping: important players in this field are the Genome Analysis Toolkit (GATK) [<xref ref-type="bibr" rid="CR17">17</xref>] and the still in-development Hail framework<xref ref-type="fn" rid="Fn1">1</xref>, both focusing on variant discovery. The ADAM software framework [<xref ref-type="bibr" rid="CR18">18</xref>] is another important effort towards the deployment of common bioinformatics tools on big data management frameworks like Spark.</p>
      <p>PyGMQL effectively complements these tools, by supporting data integration among heterogeneous data sources. We envision using PyGMQL at the end of secondary analysis pipelines, for supporting integrative analysis which also include access to large open repositories (as discussed in our application section). We already integrated both GMQL and PyGMQL with FireCloud and its evolution Terra<xref ref-type="fn" rid="Fn2">2</xref>.</p>
    </sec>
  </sec>
  <sec id="Sec3">
    <title>Implementation</title>
    <p>PyGMQL is part of a larger ecosystem of tools for biological data-driven research, that comprises a data manager (equipped with domain-specific data model and query language) and an open repository providing access to several public datasets as well giving users the possibility to import their private data; briefly reviewed next.</p>
    <sec id="Sec4">
      <title>Data model and query language</title>
      <p>PyGMQL adopts the Genomic Data Model [<xref ref-type="bibr" rid="CR3">3</xref>] to store and load genomic datasets. In GDM, a dataset consists of a set of samples, each observed on an individual or cell line in a given condition and typically represented as a track on the genome browser. Each sample includes two components: genomic regions (assignments from genomic coordinates, possibly stranded, to arbitrary genomic signals such as mutations, gene expressions, chip-seq peaks, topological domains, and so on) and arbitrary metadata (attribute-value pairs which describe the experimental/clinical/contextual conditions).</p>
      <p>The GenoMetric Query Language [<xref ref-type="bibr" rid="CR4">4</xref>] was developed to manipulate GDM datasets. It is inspired to relational algebra operators, which in turn have comparable expressive power as the SQL language. GMQL operators are either unary (UNOP - they apply to a single dataset) or binary (BINOP - they apply to two datasets) and produce one GDM dataset as result. The MATERIALIZE operator instructs the program where to store the result of a query. The request for materialization of a GMQL variable causes the recursive computation of all the intermediate datasets, up to the source datasets. Some of the operators are direct extensions of classic relational operations (i.e. SELECT, PROJECT, UNION, DIFFERENCE), while others target domain-specific region manipulations (i.e. COVER, MAP, JOIN). All operators in GMQL are applied both to genomic regions and their metadata; thus, it is possible to trace which samples of the input contribute to the samples of the result, as well as to compute global properties of the samples (e.g. statistics about their regions), using specific metadata attributes added during the computation while the query processes the datasets from the sources to the result.</p>
    </sec>
    <sec id="Sec5">
      <title>GMQL repository</title>
      <p>Currently, the principal deployment of the GMQL system is through a Web application. For every user logged in the system, the GMQL repository reserves a private space to store his/her private data. In addition to this, the system collects a wide set of curated datasets from several sources which can be accessed by the users for integrative analysis. We integrated genomic metadata from five consolidated sources: The Cancer Genome Atlas [<xref ref-type="bibr" rid="CR19">19</xref>] from Genomic Data Commons [<xref ref-type="bibr" rid="CR20">20</xref>], ENCODE [<xref ref-type="bibr" rid="CR21">21</xref>], Roadmap Epigenomics [<xref ref-type="bibr" rid="CR22">22</xref>], and annotation data from GENCODE [<xref ref-type="bibr" rid="CR23">23</xref>] and RefSeq [<xref ref-type="bibr" rid="CR24">24</xref>]. We are in the process of adding other data sources, including Cistrome [<xref ref-type="bibr" rid="CR25">25</xref>] for epigenomic and International Cancer Genome Consortium (ICGC, [<xref ref-type="bibr" rid="CR26">26</xref>]) for mutation data, and we plan to integrate several other sources. GMQL offers several deployment settings for the repository, which can be installed on a local or Hadoop file system (HDFS).</p>
    </sec>
    <sec id="Sec6">
      <title>PyGMQL architecture</title>
      <p>PyGMQL is designed to address the specific needs of biologists and bioinformaticians during both the processes of pipeline design and data exploration [<xref ref-type="bibr" rid="CR27">27</xref>]. PyGMQL offers a Python integrated environment where the users can interleave the definition of complex genomic queries and the analysis, manipulation and visualization of their results, which can then be stored and reused for further analysis or queries. The library adopts a client-server architecture, where the Python front-end exposes to the user all the dataset manipulation functions and utilities, while a Scala back-end implements all the query operators. As depicted in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, the back-end relies on the implementation of GMQL on Spark.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Schematic representation of the software components of PyGMQL. In the front-end, the GMQLDataset is a data structure associated with a query, referring directly to the DAG expressing the query operations. The GDataframe stores the query result and enables in-memory manipulation of the data. The front-end provides also a module for loading and storing data, and a RemoteManager module, used for message interchange between the package and an external GMQL service. The back-end interacts with the front-end through a Manager module, which maps the operations specified in Python with the GMQL operators implemented in Spark</p></caption><graphic xlink:href="12859_2019_3159_Fig1_HTML" id="MO1"/></fig>
</p>
      <p>PyGMQL offers a set of methods which wrap and extend the GMQL language operators Additional file <xref rid="MOESM2" ref-type="media">2</xref>. In Table <xref rid="Tab1" ref-type="table">1</xref> we show the mapping between the GMQL operators and their Python wrapper. Methods manipulate PyGMQL variables, each associated to structures called GMQLDataset. These keep a reference to an abstract GMQL representation, the GMQL directed acyclic graph (DAG) (see [<xref ref-type="bibr" rid="CR4">4</xref>]), which represents the operations used for computing the variable. This design enables the back-end to apply query optimizations to the DAG structure [<xref ref-type="bibr" rid="CR28">28</xref>]. PyGMQL adopts a <italic>lazy execution</italic> model, inspired by the Spark implementation. Therefore, no actual operation is executed until the materialize is applied to the variable.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Mapping between PyGMQL methods and GMQL operators or utilities</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">PyGMQL function</th><th align="left">Description</th><th align="left">GMQL operator</th></tr></thead><tbody><tr><td align="justify">load_from_path</td><td align="justify">UTIL, loads a dataset from local repository</td><td align="justify">SELECT</td></tr><tr><td align="justify">load_from_remote</td><td align="justify">UTIL, loads a dataset from remote repository</td><td align="justify">SELECT</td></tr><tr><td align="justify">load_from_file</td><td align="justify">UTIL, loads a bed file from local repository</td><td align="justify"/></tr><tr><td align="justify">selectreg_selectmeta_select</td><td align="justify">UNOP, filters samples using region and/or metadata predicates</td><td align="justify">SELECT</td></tr><tr><td align="justify">projectreg_projectmeta_project</td><td align="justify">UNOP, projects (in/out) attributes of regions or metadata. Creates new attributes by means of expressions</td><td align="justify">PROJECT</td></tr><tr><td align="justify">extend</td><td align="justify">UNOP, creates a new metadata attribute by aggregation of region data</td><td align="justify">EXTEND</td></tr><tr><td align="justify">covernormal_coverflat_coversummit_coverhistogram_cover</td><td align="justify">UNOP, collapses regions from several samples into regions of a single sample, based on min/max accumulation indexes</td><td align="justify">COVER</td></tr><tr><td align="justify">order</td><td align="justify">UNOP, orders the samples of a dataset based on regions and/or metadata attributes</td><td align="justify">ORDER</td></tr><tr><td align="justify">merge</td><td align="justify">UNOP, merges all the samples of a dataset into a single one</td><td align="justify">MERGE</td></tr><tr><td align="justify">groupmeta_groupreg_group</td><td align="justify">UNOP, groups regions and/or metadata with the same values</td><td align="justify">GROUP</td></tr><tr><td align="justify">join</td><td align="justify">BINOP, joins the regions of two datasets based on distance-based predicates</td><td align="justify">JOIN</td></tr><tr><td align="justify">map</td><td align="justify">BINOP, computes aggregate values from overlapping regions of two datasets</td><td align="justify">MAP</td></tr><tr><td align="justify">union</td><td align="justify">BINOP, builds the union of regions and metadata of two datasets</td><td align="justify">UNION</td></tr><tr><td align="justify">difference</td><td align="justify">BINOP, keeps the regions of a dataset not intersecting with regions of another one</td><td align="justify">DIFFERENCE</td></tr><tr><td align="justify">materialize</td><td align="justify">UTIL, triggers the query execution for the specified dataset and stores the result after query completion</td><td align="justify">MATERIALIZE</td></tr><tr><td align="justify">head</td><td align="justify">UTIL, Shows the first lines of a dataset</td><td align="justify"/></tr></tbody></table><table-wrap-foot><p>For every method we provide a concise explanation (UNOP stands for unary operator, BINOP stands for binary operator and UTIL identifies an utility function)</p></table-wrap-foot></table-wrap>
</p>
      <p>Once the query is terminated, its results are loaded in memory and stored in a GDataframe data structure, which holds both regions and metadata in the form of two Pandas DataFrames<xref ref-type="fn" rid="Fn3">3</xref>. This makes it possible to work with the result of a query in the Python environment. It is also possible to convert the result of a query back to a GMQLDataset and use it as a new variable for a query. Obviously, the Python program can change its content before reloading.</p>
      <p>To facilitate the integration with the Python ecosystem, PyGMQL enables to import datasets directly from Pandas DataFrames that use a BED or GTF format.</p>
      <p>The interleaving between Python computation and GMQL execution constitutes a powerful tool for the bioinformatician, which is able to build complex pipelines without leaving the Python environment. By embedding PyGMQL within Jupyter Notebooks<xref ref-type="fn" rid="Fn4">4</xref>, users can easily perform data exploration and are facilitated in reproducibility of their pipelines, a very important aspect of modern genomic computing. Figure <xref rid="Fig2" ref-type="fig">2</xref> schematically represents the relationship between a GMQLDataset and a GDataframe, together with the main functions to load, materialize and import datasets from/to PyGMQL.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Relationships between GMQLDataset and GDataframe. Data can be imported into a GMQLDataset from a local GDM dataset with the load_from_path function. Using the load_from_file, it is possible to load generic BED files, while load_from_remote enables the loading of GDM datasets from an external GMQL repository, accessible through TCP connection. The user applies operation on the GMQLDataset and triggers the computation of the result with the materialize function. At the end of computation, the result is stored in-memory in a GDataframe, which can be then manipulated in Python. It is possible to import data directly from Pandas with from_pandas. Finally, it is possible to transform a GDataframe structure back into GMQLDataset using the to_GMQLDataset function</p></caption><graphic xlink:href="12859_2019_3159_Fig2_HTML" id="MO2"/></fig>
</p>
    </sec>
    <sec id="Sec7">
      <title>Distribution transparency</title>
      <p>The GMQL system is directly linked to one repository deployment, although many deployment technologies are supported. Instead, PyGMQL enables the users also to locally access their data, like most of the Python libraries. In addition, PyGMQL can also interface with an external GMQL system and login with the user credentials (using the login function) to interact with his/her private datasets or the public repository. During the query composition in PyGMQL, the user can specify if a source dataset comes from his local file system (using the load_from_path function) or from the remote GMQL repository (using the load_from_remote function). Therefore, queries in PyGMQL can be composed of genomic operations acting both on local and remote datasets.</p>
      <p>Another important functionality of the library is given by its ability to "outsource" the query computation to an external GMQL service. If the users is logged on a remote GMQL server in PyGMQL, using the set_mode function she can decide if the query computation will be performed on the local (<italic>local mode</italic>) or on the remote (<italic>remote mode</italic>) system (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). In the case of remote computation, the library takes care of downloading the result and loading it in a GDataframe.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Deployment modes and executor options of the library. When the library is in remote mode, it interfaces with an external GMQL service, hosting a GMQL repository (accessible by the Python program, which has been deployed on several file systems). When the mode is set to local, the library can operate on various file systems, based on the selected master</p></caption><graphic xlink:href="12859_2019_3159_Fig3_HTML" id="MO3"/></fig>
</p>
      <p>The location of the datasets used during the query is orthogonal with respect to the mode of execution. Therefore, during the execution of a genomic query using both local and remote datasets, the library will manage their download or upload based on the mode. The library keeps tracks of the used datasets and their dependencies during the whole Python program execution, minimizing the data transmission between local and remote systems.</p>
    </sec>
    <sec id="Sec8">
      <title>Deployment over cloud infrastructures</title>
      <p>When the mode of execution of PyGMQL is set to <italic>local</italic>, the user can specify the deployment strategy of the queries using the set_master function. Since the implementation of the GMQL operators is based on Spark, the library can be deployed in the following modes:
<list list-type="bullet"><list-item><p><italic>Local master</italic>: the program is executed on the local user machine. In this execution mode, the PyGMQL software can access datasets in the local file system or in HDFS.</p></list-item><list-item><p><italic>Spark master</italic>: the back-end of the library is submitted to the master node of a Spark cluster and interacts with the front-end through a TCP connection. Also, in this case, the PyGMQL software can access datasets in the local file system (if the master node of the cluster is in the same machine as the python program) or in HDFS.</p></list-item><list-item><p><italic>YARN master</italic>: the back-end of the library is submitted to the Application Master of a YARN cluster and interacts with the front-end through a TCP connection. In this case, the local datasets reside on the Hadoop file-system. This deployment strategy must be adopted to run the library on cloud providers like Google Cloud and Amazon Web Services.</p></list-item></list></p>
      <p>Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the available deployment modes and the possible master settings for the library together with the distributed file systems which the library can interact with.</p>
    </sec>
  </sec>
  <sec id="Sec9" sec-type="results">
    <title>Results</title>
    <p>We demonstrate the flexibility of the PyGMQL library through three data analysis workflows, available in the form of Jupyter Notebooks and scripts both in the Supplementary Materials of this paper and in the PyGMQL GitHub repository. For a progressive introduction to PyGMQL usage, the applications are increasingly complex both for what concerns the biological analysis and the data size Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
    <p>Examples show: (a) the interplay of local and remote GMQL resources, (b) the scalability with datasets of increasing size. A schematic description of the three deployment strategies is shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref> together with the location of the datasets used during the analysis. We will focus on the system’s scalability in the third and most complex example.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Schematic representation of the deployment strategies adopted in the three applications. <bold>a</bold> Local/Remote system interaction for the analysis of ENCODE histone marks signal on promotorial regions. The gene dataset is stored in the local file system, the ENCODE BroadPeak database is hosted in the GMQL remote repository, deployed on the Hadoop file system with three slaves. <bold>b</bold> Configuration for the interactive analysis of the GWAS dataset against the whole set of enhancers from ENCODE. The library interacts directly with the YARN cluster and the data is stored in the Google Cloud File System with a fixed configuration of three slaves, accessed through the Hadoop engine. The gwas.tsv file is downloaded from the web and stored in the file system before executing the query. <bold>c</bold> Distributed setup for running the TICA query. Three datasets (from ENCODE and GENCODE) are in GDM format and stored in HDFS and the query runs on Amazon Web Services with a variable number of slave nodes, for evaluating the scalability of the system</p></caption><graphic xlink:href="12859_2019_3159_Fig4_HTML" id="MO4"/></fig>
</p>
    <p>Examples show the interplay between pure Python code and scalable genomic operations, implemented in PyGMQL through the GMQL engine. For this reason, a complete implementation of the examples in GMQL is not possible. While it is possible to implement them by stacking together some of the previously cited tools or even standalone Python code, their parallelization and metadata management would induce a great development overhead for the researcher. The examples highlight the expressiveness, cleanness and ease to use of the library, demonstrating that complex parallel genomic data analysis workflows can be achieved using just PyGMQL.</p>
    <sec id="Sec10">
      <title>Interfacing with an external GMQL service: aggregating the chip-Seq signal of histone Marks on promotorial regions</title>
      <p>In this first application, genes’ promoters are extracted from a local dataset and a large set of Chip-Seq experiments is selected from a remote repository. Then, for every promoter and for every Chip-seq experiment, the average signal of those Chip-Seq peaks intersecting the promoter is computed. The result is finally visualized as a heatmap, with rows representing promoters and columns representing Chip-Seq experiments.</p>
      <p>This example shows: (i) the integration of local PyGMQL programs with remote repositories, (ii) the possibility to outsource the execution to an external deployment of (Py)GMQL, (iii) the interplay between PyGMQL data and Python libraries written by third parties. These features allow users to write arbitrary complex queries - whose execution and size of the inputs exceed the capabilities of the local environment - and, at the same time, analyze/visualize the output by means of well-known Python libraries.</p>
      <p>The code begins by loading a local dataset of gene annotations and extracting their promotorial regions (here defined as regions at [<italic>g</italic><italic>e</italic><italic>n</italic><italic>e</italic><sub><italic>start</italic></sub>−2000;<italic>g</italic><italic>e</italic><italic>n</italic><italic>e</italic><sub><italic>start</italic></sub>+2000]). Note that the “.start” and “.stop” attributes automatically consider the strand of the region.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figa_HTML" id="MO15"/>
      </p>
      <p>The genes and promoters variables are GMQLDataset, the former is loaded directly, the latter results from a projection operation. Region feature names can be accessed directly from variables to build expressions and predicates (e.g., gene.start + 2000).</p>
      <p>Next, we load the external dataset of Chip-Seq from a remote GMQL Web service. In order to do so, the user has to specify the remote address and login. If the user has already signed to the remote GMQL installation, he/she can use his/her own credentials (this will also grant the access to private datasets), otherwise a guest account is automatically created, without requiring the user to do it manually.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figb_HTML" id="MO6"/>
      </p>
      <p>Next, we show how to load the Chip-Seq data of the ENCODE dataset from the remote GMQL repository and select only the experiments of interest. First, the user sets the remote execution mode and imports remote datasets with the load_from_remote function. Such loading is <italic>lazy</italic>, therefore no actual data is moved or red at this point. Then the user specifies the select condition: the hms[~experiment_target~] notation enables the user to build predicates on the given metadata attribute. The GMQL engine loads from the dataset only the samples whose metadata satisfy such condition, specifically, only experiments targeting the <italic>human H3K9ac marker</italic> will be selected.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figc_HTML" id="MO7"/>
      </p>
      <p>Next, the PyGMQL map operation is used to compute the average of the signal of hms_ac intersecting each promoter: iteration over all samples is implicit. Finally, the materialize method triggers the execution of the query. Since the mode is set to "remote", the dataset stored at ~./genes/~ is sent to the remote service GMQL system that performs the specified operations. The result is loaded into the mappingGDataframe variable which resides on the local machine.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figd_HTML" id="MO8"/>
      </p>
      <p>At this point, Python libraries for data manipulation, visualization or analysis can be applied to the GDataframe. The following portion of code provides an example of data manipulation of a query result. The to_matrix method transforms the GDataframe into a Pandas matrix, where each row corresponds to a gene and each column to a cell line. Values are the average signal on the promoter of the given gene in the given cell line. Finally, the matrix is visualized as a heatmap.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Fige_HTML" id="MO9"/>
      </p>
    </sec>
    <sec id="Sec11">
      <title>Exploring data interactively: analyzing GWAS mutations on cell-specific enhancers</title>
      <p>In the following example, we explore the interaction between a Genome-wide Association Study (GWAS) dataset (downloaded from an external source<xref ref-type="fn" rid="Fn5">5</xref>) and tracks from the ENCODE dataset, stored in the distributed file system. PyGMQL is deployed on a small Hadoop Cluster. GWAS (genome-wide association studies) are associations between mutations and the traits of individuals carrying the mutations. The following example is inspired by a published research connecting mutations occurring on enhancers (regulatory regions of the genome) with autoimmune diseases [<xref ref-type="bibr" rid="CR29">29</xref>]. The scientist loads a set of GWAS and investigates if they overlap with enhancer regions which are <italic>cell-specific</italic>, i.e., are active only in a limited number of cell lines or tissues (typically one or two). The interesting aspect of this query is that some of the discovered traits are associated with that cell line, e.g., because they are concerned with a disease affecting the tissue of the cell line.</p>
      <p>For a given GWAS dataset, considering all cell lines available in ENCODE, we first extract cell-specific enhancers, then we intersect GWAS with them, and then we count the number of variants which are associated with each trait, and rank traits by such counter. For the first ranked traits, we then represent a heat map having cell lines as rows and traits as columns.</p>
      <p>In the Supplementary Materials and on the project web page we present the full data exploration. We next show the main steps and results, assuming that the user has already downloaded the GWAS dataset and stored it in HDFS, where the GMQL repository is also accessible. By default, the library sets the master node of computation to the local Scala back-end. In this case, we deploy the library to a Spark cluster managed by the YARN resource manager [<xref ref-type="bibr" rid="CR30">30</xref>]. Therefore, we need to use the set_master function, which will request PyGMQL to open a connection to the YARN master node and submit its back-end code for computation.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figf_HTML" id="MO10"/>
      </p>
      <p>We then load the GWAS dataset, which is encoded as a Tab-separated values file (TSV). Note that, in addition to GDM-like datasets, PyGMQL can load data with generic format using the load_from_file function. In order to do so, the user must configure a custom parser for the TSV format, by specifying the position of the chromosome and the start/end positions (in this particular case the 11-th and 12-th columns respectively) and the position of any of the fields he/she wishes to import (in this example, the 7-th column, which stores the indication of the disease/trait associated with the mutation). The file is then imported as a valid GDM instance. To explore instances, we use the head function, that displays the first rows of both regions and metadata. Its effect is shown in the Supplementary Material. <graphic position="anchor" xlink:href="12859_2019_3159_Figg_HTML" id="MO11"/></p>
      <p>We next load the ENCODE Broad Peak and select from it the Chip-Seq experiments of H3K27ac, as predictor of enhancer activity. This is done with a selection on the experiment_target metadata attribute. We perform a normalization by extracting the position in the middle of each Chip-Seq region with a reg_project operation and then by extending the mid position of a given base pair interval on both sides, again with a projection. We set <italic>interval</italic> to ±1500 bp, resulting in enlarge regions of 3000 base pair length.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figh_HTML" id="MO12"/>
      </p>
      <p>To select only cell-specific enhancers, we need to perform several region manipulation operations.
<list list-type="bullet"><list-item><p>First, we group the enlarge regions by the cell line on which they were probed. We also merge overlapping regions of the same cell line which could be due to replicas. This is done with a normal_cover operation adding the groupBy clause on the biosample_term_name metadata attribute, which specifies the cell line of origin for every sample.</p></list-item><list-item><p>Next, we use again the normal_cover operation to filter cell-specific enhancer regions, i.e. regions that are present in more than a specified maximum number of cell lines (max_overlapping variable). This parameter can be set to small numbers, such as 1 or 2, to increase specificity.</p></list-item><list-item><p>Finally, we intersect the set of cell-specific enhancers produced by the second cover operation with the set of enhancers grouped by cell line (join with distance less than zero basis, <italic>D</italic><italic>L</italic><italic>E</italic>(0)). This results in a dataset with a sample for each cell line containing its set of specific enhancers.</p></list-item></list></p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figi_HTML" id="MO13"/>
      </p>
      <p>As final operation, we aggregate the GWAS mutations on each cell-specific enhancer region. This is easily done using the map operation projecting the gwas onto cell-specific enhancers. We also want to keep track of the list of diseases/traits associated to each enhancer region, thus we create a new region attribute ’traits’ with the BAG operator on the ’trait’ attribute of gwas.</p>
      <p>Query computation on the cluster is triggered by the materialization of the result in the resultGDataframe variable.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3159_Figj_HTML" id="MO14"/>
      </p>
      <p>The rest of the analysis can be now done directly in Python, since the result size is typically manageable. We refer the reader to the Supplementary Material for what concerns the operations required to obtain the final heatmap. This analysis can be repeated for arbitrary GWAS databases, changing the setting of interval and max_overlapping, thereby repeating explorations seeking for results of desired cardinality and specificity.</p>
    </sec>
    <sec id="Sec12">
      <title>Performing large queries in the cloud: transcription factors interaction analyzer</title>
      <p>An interesting aspect of epigenomic research is concerned with the interaction of transcription factors, i.e. proteins that, once bound onto specific positions of the DNA, enhance or repress the transcription of genes into RNA. Transcription factors (TFs) are known to act in cooperation, as a functional complex. In previous work, we developed TICA (Transcriptional Interaction and Co-regulation Analyser) and an associated Web service [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR32">32</xref>] using GMQL. TICA is able to predict whether two TFs cooperate to the regulation of the expression of genes by forming a protein complex.</p>
      <p>The data-intensive computation has been ported to PyGMQL. The purpose of this Section is not to show the PyGMQL code - as it is rather complex, see Supplementary Material - but rather to show that it scales to very large datasets. In essence, for every cell line the code considers all possible pairs of TFs for which ChIP-seq experiments are available (ranging between 116 in GM12878 and 268 in K562) as candidate complexes. For each such pair, it computes the bindings which are at minimal distance within promotorial regions. Once minimal distance pairs are extracted by PyGMQL, a significance test (written in Python) predicts if the two TFs form a complex.</p>
      <p>The code reported in the Supplementary Material illustrates the data extraction part. It uses a normal_cover so as to merge replicates of the same experiment and then two join operations, the former for detecting the overlap between each TF region and active promotorial regions, the latter for extracting the pairs of regions of two TFs at minimal distance within such regions. Joins are complex operations, and here they are performed in the three-dimensional full genome space formed by the bindings of the two TFs and of the promotorial regions.</p>
    </sec>
  </sec>
  <sec id="Sec13">
    <title>Performance evaluation</title>
    <p>The ability to scale on parallel and cloud computing environments is the most innovative and distinguishing feature of PyGMQL and allows performing complex queries on large datasets. In this Section, we show the computational performance of PyGMQL on the last application, for three cell lines (GM12878, HepG2, K562) with increasing amount of available samples. For our experiments, we used AWS Elastic MapReduce clusters of <italic>m5.2xlarge</italic> instances, each of which has 8 virtual cores, 32 GiB of memory and 300 GiB of hard disk capacity. We used 4 different setups, all with 1 single master nodes and 1, 3, 5 and 10 slaves.</p>
    <p>Table <xref rid="Tab2" ref-type="table">2</xref> reports the data size of input and output of the three variant of the query as well as the execution times on the 4 cluster configurations. Figure <xref rid="Fig5" ref-type="fig">5</xref> demonstrates the scalability of PyGMQL. Indeed, the execution times decrease as the size of the cluster increases. This effect is especially observable in the K562 and HepG2 cases (the biggest ones), for which the execution is approximately 7.5 times faster in the cluster with 10 slaves with respect to the cluster with one slave. By using the cluster with 10 slaves, we build output data of 381M regions in about half hour, enabling us to compute prediction estimates for the cooperation of about 72K pairs of TFs.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Execution time for the TICA query on three different cell lines, with four different cluster configurations</p></caption><graphic xlink:href="12859_2019_3159_Fig5_HTML" id="MO5"/></fig><table-wrap id="Tab2"><label>Table 2</label><caption><p>Sizes of inputs ad outputs for three different cell lines, and execution times (in minutes) for the TICA query over four cluster configurations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">GM12878</th><th align="left">HepG2</th><th align="left">K562</th></tr></thead><tbody><tr><td align="left">Input samples</td><td align="left">164</td><td align="left">224</td><td align="left">347</td></tr><tr><td align="left">Distinct TFs</td><td align="left">116</td><td align="left">192</td><td align="left">268</td></tr><tr><td align="left">Input regions</td><td align="left">3,003,121</td><td align="left">4,384,181</td><td align="left">6,101,933</td></tr><tr><td align="left">Output samples</td><td align="left">13,454</td><td align="left">36,330</td><td align="left">71.612</td></tr><tr><td align="left">Output regions</td><td align="left">109,858,355</td><td align="left">213,499,617</td><td align="left">381,255,507</td></tr><tr><td align="left">Output size (MB)</td><td align="left">3,122</td><td align="left">6,064.</td><td align="left">10,921</td></tr><tr><td align="left">1 node e. t. <sup>∗</sup></td><td align="left">26.73</td><td align="left">73.05</td><td align="left">246.85</td></tr><tr><td align="left">3 nodes e. t. <sup>∗</sup></td><td align="left">10.40</td><td align="left">26.28</td><td align="left">91.27</td></tr><tr><td align="left">5 nodes e. t. <sup>∗</sup></td><td align="left">7.21</td><td align="left">16.67</td><td align="left">59.12</td></tr><tr><td align="left">10 nodes e. t. <sup>∗</sup></td><td align="left">4.75</td><td align="left">9.67</td><td align="left">32.92</td></tr></tbody></table></table-wrap>
</p>
  </sec>
  <sec id="Sec14" sec-type="conclusion">
    <title>Conclusions</title>
    <p>Python is becoming the leading programming language for data science, thanks to its flexibility and ease of use, the embedding within Jupyter notebooks, and the huge number of supporting libraries and packages. Within the scope of genomic computing, PyGMQL is a new Python library for linking domain-specific data extraction to domain-independent tools and environments for data analysis and visualization.</p>
    <p>PyGMQL fills the gap between the scalable Spark-based data management engine of GMQL and the huge body of Python-based resources. PyGMQL supports data interoperability, solves the impedance mismatch between set-oriented data extraction and imperative programming, provides distribution transparency and query outsourcing to powerful server-based and cloud-based systems. The possibility of supporting both local and remote queries enables the efficient prototyping of data extraction pipelines, which can be locally developed and then deployed to big remote services.</p>
  </sec>
  <sec id="Sec15">
    <title>Availability of source code and requirements</title>
    <p>
      <list list-type="bullet">
        <list-item>
          <p>Project name: PyGMQL</p>
        </list-item>
        <list-item>
          <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/DEIB-GECO/PyGMQL">https://github.com/DEIB-GECO/PyGMQL</ext-link></p>
        </list-item>
        <list-item>
          <p>Operating system(s): Platform independent</p>
        </list-item>
        <list-item>
          <p>Programming language: Python (version 3.4 or higher)</p>
        </list-item>
        <list-item>
          <p>Other requirements: Java 1.8 or higher</p>
        </list-item>
        <list-item>
          <p>License: Apache 2.0</p>
        </list-item>
        <list-item>
          <p>Any restrictions to use by non-academics: None</p>
        </list-item>
      </list>
    </p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec16">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2019_3159_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold> Supplementary materials guide. Document describing how to reproduce the pipelines presented in the manuscript (PDF).</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2019_3159_MOESM2_ESM.pdf">
            <caption>
              <p><bold>Additional file 2</bold> Library documentation. Detailed documentation of the software package (PDF).</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>GATK</term>
        <def>
          <p>Genome analysis toolkit</p>
        </def>
      </def-item>
      <def-item>
        <term>GDM</term>
        <def>
          <p>Genomic data model</p>
        </def>
      </def-item>
      <def-item>
        <term>GMQL</term>
        <def>
          <p>Genometric query language</p>
        </def>
      </def-item>
      <def-item>
        <term>GWAS</term>
        <def>
          <p>Genome-wide association study</p>
        </def>
      </def-item>
      <def-item>
        <term>HDFS</term>
        <def>
          <p>Hadoop file system</p>
        </def>
      </def-item>
      <def-item>
        <term>TF</term>
        <def>
          <p>Transcription factor</p>
        </def>
      </def-item>
      <def-item>
        <term>TICA</term>
        <def>
          <p>Transcriptional interaction and co-regulation analyser</p>
        </def>
      </def-item>
      <def-item>
        <term>TSV</term>
        <def>
          <p>Tab-separated values file</p>
        </def>
      </def-item>
      <def-item>
        <term>YARN</term>
        <def>
          <p>Yet another resource negotiator</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://github.com/hail-is/hail/">https://github.com/hail-is/hail/</ext-link>
      </p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p>Two workspaces describing how to use and develop pipelines built with GMQL and PyGMQL are publicly available to Terra users at <ext-link ext-link-type="uri" xlink:href="https://terra.bio/">https://terra.bio/</ext-link></p>
    </fn>
    <fn id="Fn3">
      <label>3</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://pandas.pydata.org/">https://pandas.pydata.org/</ext-link>
      </p>
    </fn>
    <fn id="Fn4">
      <label>4</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://jupyter.org/">https://jupyter.org/</ext-link>
      </p>
    </fn>
    <fn id="Fn5">
      <label>5</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/gwas/docs/file-downloads">https://www.ebi.ac.uk/gwas/docs/file-downloads</ext-link>
      </p>
    </fn>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-019-3159-9.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank all the members of the Data-Driven Genomic Computing research group at Politecnico di Milano for their continuous support and useful discussion.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>The project was conceptualized by PP, LN and SC The library was developed and documented by LN, installed and tested by LN, PP and AC The article was written by LN, PP, AC and SC. All authors red and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the ERC Advanced Grant 693174 “Data-Driven Genomic Computing (GeCo)”, and by the grant “Amazon Machine Learning Research Awards”. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Additional file <xref rid="MOESM1" ref-type="media">1</xref> describes how to reproduce the experiments that we present in the manuscript. We provide a Docker image to facilitate the reproducibility of the examples at <ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/gecopolimi/pygmql">https://hub.docker.com/r/gecopolimi/pygmql</ext-link>. Source code of the library can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/DEIB-GECO/PyGMQL">https://github.com/DEIB-GECO/PyGMQL</ext-link>.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moorthie</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>CF</given-names>
          </name>
        </person-group>
        <article-title>Informatics and clinical genome sequencing: opening the black box</article-title>
        <source>Genet Med</source>
        <year>2013</year>
        <volume>15</volume>
        <issue>3</issue>
        <fpage>165</fpage>
        <pub-id pub-id-type="doi">10.1038/gim.2012.116</pub-id>
        <pub-id pub-id-type="pmid">22975759</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Masseroli</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Modeling and interoperability of heterogeneous genomic big data for integrative processing and querying</article-title>
        <source>Methods</source>
        <year>2016</year>
        <volume>111</volume>
        <fpage>3</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ymeth.2016.09.002</pub-id>
        <pub-id pub-id-type="pmid">27637471</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Masseroli</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genometric query language: a novel approach to large-scale genomic data management</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>12</issue>
        <fpage>1881</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv048</pub-id>
        <pub-id pub-id-type="pmid">25649616</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Masseroli</surname>
            <given-names>Marco</given-names>
          </name>
          <name>
            <surname>Canakoglu</surname>
            <given-names>Arif</given-names>
          </name>
          <name>
            <surname>Pinoli</surname>
            <given-names>Pietro</given-names>
          </name>
          <name>
            <surname>Kaitoua</surname>
            <given-names>Abdulrahman</given-names>
          </name>
          <name>
            <surname>Gulino</surname>
            <given-names>Andrea</given-names>
          </name>
          <name>
            <surname>Horlova</surname>
            <given-names>Olha</given-names>
          </name>
          <name>
            <surname>Nanni</surname>
            <given-names>Luca</given-names>
          </name>
          <name>
            <surname>Bernasconi</surname>
            <given-names>Anna</given-names>
          </name>
          <name>
            <surname>Perna</surname>
            <given-names>Stefano</given-names>
          </name>
          <name>
            <surname>Stamoulakatou</surname>
            <given-names>Eirini</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>Stefano</given-names>
          </name>
        </person-group>
        <article-title>Processing of big heterogeneous genomic datasets for tertiary analysis of Next Generation Sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>35</volume>
        <issue>5</issue>
        <fpage>729</fpage>
        <lpage>736</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty688</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zaharia</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Apache spark: a unified engine for big data processing</article-title>
        <source>Commun ACM</source>
        <year>2016</year>
        <volume>59</volume>
        <issue>11</issue>
        <fpage>56</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1145/2934664</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bedtools: a flexible suite of utilities for comparing genomic features</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>6</issue>
        <fpage>841</fpage>
        <lpage>2</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id>
        <pub-id pub-id-type="pmid">20110278</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neph</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bedops: high-performance genomic feature operations</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>14</issue>
        <fpage>1919</fpage>
        <lpage>20</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts277</pub-id>
        <pub-id pub-id-type="pmid">22576172</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dale</surname>
            <given-names>RK</given-names>
          </name>
          <name>
            <surname>Pedersen</surname>
            <given-names>BS</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>Pybedtools: a flexible python library for manipulating genomic datasets and annotations</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>24</issue>
        <fpage>3423</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr539</pub-id>
        <pub-id pub-id-type="pmid">21949271</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Pagès</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Aboyoun</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Morgan</surname>
            <given-names>MT</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
        </person-group>
        <article-title>Software for computing and annotating genomic ranges</article-title>
        <source>PLOS Comput Biol</source>
        <year>2013</year>
        <volume>9</volume>
        <issue>8</issue>
        <fpage>1</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003118</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cock</surname>
            <given-names>PJA</given-names>
          </name>
          <name>
            <surname>Antao</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Dalke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Friedberg</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hamelryck</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kauff</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wilczynski</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>de Hoon</surname>
            <given-names>MJL</given-names>
          </name>
        </person-group>
        <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>11</issue>
        <fpage>1422</fpage>
        <lpage>3</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id>
        <pub-id pub-id-type="pmid">19304878</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Data management for heterogeneous genomic datasets</article-title>
        <source>IEEE/ACM Trans Comput Biol Bioinforma</source>
        <year>2017</year>
        <volume>14</volume>
        <issue>6</issue>
        <fpage>1251</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1109/TCBB.2016.2576447</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <mixed-citation publication-type="other">Guo R, Zhao Y, Zou Q, Fang X, Peng S. Bioinformatics applications on Apache Spark. GigaScience. 2018; 7(8). 10.1093/gigascience/giy098. <ext-link ext-link-type="uri" xlink:href="http://oup.prod.sis.lan/gigascience/article-pdf/7/8/giy098/25597457/giy098.pdf">http://oup.prod.sis.lan/gigascience/article-pdf/7/8/giy098/25597457/giy098.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Afgan</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Baker</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Van den Beek</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Blankenberg</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bouvier</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Čech</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chilton</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Clements</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Coraor</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Eberhard</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update</article-title>
        <source>Nucleic Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>W1</issue>
        <fpage>3</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw343</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>19</issue>
        <fpage>2520</fpage>
        <lpage>2</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">22908215</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chatzou</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Floden</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Barja</surname>
            <given-names>PP</given-names>
          </name>
          <name>
            <surname>Palumbo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Notredame</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <fpage>316</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <mixed-citation publication-type="other">Birger C, Hanna M, Salinas E, Neff J, Saksena G, Livitz D, Rosebrock D, Stewart C, Leshchiner I, Baumann A, Voet D, Cibulskis K, Banks E, Philippakis A, Getz G. Firecloud, a scalable cloud-based platform for collaborative genome analysis: Strategies for reducing and controlling costs. bioRxiv. 2017. 10.1101/209494. <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/early/2017/11/03/209494.full.pdf">https://www.biorxiv.org/content/early/2017/11/03/209494.full.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McKenna</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hanna</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Banks</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sivachenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cibulskis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Kernytsky</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Garimella</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Altshuler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gabriel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>DePristo</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>The genome analysis toolkit: A mapreduce framework for analyzing next-generation dna sequencing data</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>9</issue>
        <fpage>1297</fpage>
        <lpage>303</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.107524.110</pub-id>
        <pub-id pub-id-type="pmid">20644199</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <mixed-citation publication-type="other">Nothaft FA, Massie M, Danford T, Zhang Z, Laserson U, Yeksigian C, Kottalam J, Ahuja A, Hammerbacher J, Linderman M, Franklin M, Joseph AD, Patterson DA. Rethinking data-intensive science using scalable analytics systems. In: Proceedings of the 2015 International Conference on Management of Data (SIGMOD ’15). ACM: 2015. 10.1145/2723372.2742787.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weinstein</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Collisson</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Mills</surname>
            <given-names>GB</given-names>
          </name>
          <name>
            <surname>Shaw</surname>
            <given-names>KRM</given-names>
          </name>
          <name>
            <surname>Ozenberger</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Ellrott</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Shmulevich</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Sander</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Stuart</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Network</surname>
            <given-names>CGAR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The cancer genome atlas pan-cancer analysis project</article-title>
        <source>Nat Genet</source>
        <year>2013</year>
        <volume>45</volume>
        <issue>10</issue>
        <fpage>1113</fpage>
        <pub-id pub-id-type="doi">10.1038/ng.2764</pub-id>
        <pub-id pub-id-type="pmid">24071849</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jensen</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Ferretti</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Grossman</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Staudt</surname>
            <given-names>LM</given-names>
          </name>
        </person-group>
        <article-title>The nci genomic data commons as an engine for precision medicine</article-title>
        <source>Blood</source>
        <year>2017</year>
        <volume>130</volume>
        <issue>4</issue>
        <fpage>453</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1182/blood-2017-03-735654</pub-id>
        <pub-id pub-id-type="pmid">28600341</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Consortium</surname>
            <given-names>EP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An integrated encyclopedia of dna elements in the human genome</article-title>
        <source>Nature</source>
        <year>2012</year>
        <volume>489</volume>
        <issue>7414</issue>
        <fpage>57</fpage>
        <pub-id pub-id-type="doi">10.1038/nature11247</pub-id>
        <pub-id pub-id-type="pmid">22955616</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kundaje</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Meuleman</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Ernst</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bilenky</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yen</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Heravi-Moussavi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kheradpour</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ziller</surname>
            <given-names>MJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrative analysis of 111 reference human epigenomes</article-title>
        <source>Nature</source>
        <year>2015</year>
        <volume>518</volume>
        <issue>7539</issue>
        <fpage>317</fpage>
        <pub-id pub-id-type="doi">10.1038/nature14248</pub-id>
        <pub-id pub-id-type="pmid">25693563</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Frankish</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Diekhans</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ferreira</surname>
            <given-names>A-M</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Jungreis</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Loveland</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mudge</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Sisu</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Armstrong</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Gencode reference annotation for the human and mouse genomes</article-title>
        <source>Nucleic Acids Res</source>
        <year>2018</year>
        <volume>47</volume>
        <issue>D1</issue>
        <fpage>766</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky955</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O’Leary</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Brister</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Ciufo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Haddad</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>McVeigh</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rajput</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Robbertse</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Smith-White</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ako-Adjei</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reference sequence (refseq) database at ncbi: current status, taxonomic expansion, and functional annotation</article-title>
        <source>Nucleic Acids Res</source>
        <year>2015</year>
        <volume>44</volume>
        <issue>D1</issue>
        <fpage>733</fpage>
        <lpage>45</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mei</surname>
            <given-names>Shenglin</given-names>
          </name>
          <name>
            <surname>Qin</surname>
            <given-names>Qian</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>Qiu</given-names>
          </name>
          <name>
            <surname>Sun</surname>
            <given-names>Hanfei</given-names>
          </name>
          <name>
            <surname>Zheng</surname>
            <given-names>Rongbin</given-names>
          </name>
          <name>
            <surname>Zang</surname>
            <given-names>Chongzhi</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>Muyuan</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>Jiaxin</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>Xiaohui</given-names>
          </name>
          <name>
            <surname>Taing</surname>
            <given-names>Len</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Tao</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>Myles</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>Clifford A.</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>X. Shirley</given-names>
          </name>
        </person-group>
        <article-title>Cistrome Data Browser: a data portal for ChIP-Seq and chromatin accessibility data in human and mouse</article-title>
        <source>Nucleic Acids Research</source>
        <year>2016</year>
        <volume>45</volume>
        <issue>D1</issue>
        <fpage>D658</fpage>
        <lpage>D662</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw983</pub-id>
        <pub-id pub-id-type="pmid">27789702</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Baran</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Cros</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Guberman</surname>
            <given-names>J. M.</given-names>
          </name>
          <name>
            <surname>Haider</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Hsu</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Liang</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Rivkin</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Whitty</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Wong-Erasmus</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Yao</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Kasprzyk</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>International Cancer Genome Consortium Data Portal--a one-stop shop for cancer genomics data</article-title>
        <source>Database</source>
        <year>2011</year>
        <volume>2011</volume>
        <issue>0</issue>
        <fpage>bar026</fpage>
        <lpage>bar026</lpage>
        <?supplied-pmid 3263593?>
        <pub-id pub-id-type="pmid">21930502</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Nanni</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Pinoli</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Canakoglu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Exploring genomic datasets: From batch to interactive and back</article-title>
        <source>Proceedings of the 5th International Workshop on Exploratory Search in Databases and the Web. ExploreDB 2018</source>
        <year>2018</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pinoli</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Martinenghi</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Nanni</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Metadata management for scientific databases</article-title>
        <source>Inf Syst</source>
        <year>2019</year>
        <volume>81</volume>
        <fpage>1</fpage>
        <lpage>20</lpage>
        <pub-id pub-id-type="doi">10.1016/j.is.2018.10.002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Farh</surname>
            <given-names>Kyle Kai-How</given-names>
          </name>
          <name>
            <surname>Marson</surname>
            <given-names>Alexander</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>Jiang</given-names>
          </name>
          <name>
            <surname>Kleinewietfeld</surname>
            <given-names>Markus</given-names>
          </name>
          <name>
            <surname>Housley</surname>
            <given-names>William J.</given-names>
          </name>
          <name>
            <surname>Beik</surname>
            <given-names>Samantha</given-names>
          </name>
          <name>
            <surname>Shoresh</surname>
            <given-names>Noam</given-names>
          </name>
          <name>
            <surname>Whitton</surname>
            <given-names>Holly</given-names>
          </name>
          <name>
            <surname>Ryan</surname>
            <given-names>Russell J. H.</given-names>
          </name>
          <name>
            <surname>Shishkin</surname>
            <given-names>Alexander A.</given-names>
          </name>
          <name>
            <surname>Hatan</surname>
            <given-names>Meital</given-names>
          </name>
          <name>
            <surname>Carrasco-Alfonso</surname>
            <given-names>Marlene J.</given-names>
          </name>
          <name>
            <surname>Mayer</surname>
            <given-names>Dita</given-names>
          </name>
          <name>
            <surname>Luckey</surname>
            <given-names>C. John</given-names>
          </name>
          <name>
            <surname>Patsopoulos</surname>
            <given-names>Nikolaos A.</given-names>
          </name>
          <name>
            <surname>De Jager</surname>
            <given-names>Philip L.</given-names>
          </name>
          <name>
            <surname>Kuchroo</surname>
            <given-names>Vijay K.</given-names>
          </name>
          <name>
            <surname>Epstein</surname>
            <given-names>Charles B.</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>Mark J.</given-names>
          </name>
          <name>
            <surname>Hafler</surname>
            <given-names>David A.</given-names>
          </name>
          <name>
            <surname>Bernstein</surname>
            <given-names>Bradley E.</given-names>
          </name>
        </person-group>
        <article-title>Genetic and epigenetic fine mapping of causal autoimmune disease variants</article-title>
        <source>Nature</source>
        <year>2014</year>
        <volume>518</volume>
        <issue>7539</issue>
        <fpage>337</fpage>
        <lpage>343</lpage>
        <pub-id pub-id-type="doi">10.1038/nature13835</pub-id>
        <pub-id pub-id-type="pmid">25363779</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Vavilapalli</surname>
            <given-names>VK</given-names>
          </name>
          <name>
            <surname>Murthy</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Douglas</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Agarwal</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Konar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Evans</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Graves</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lowe</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Shah</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Seth</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Saha</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Curino</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>O’Malley</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Radia</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Reed</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Baldeschwieler</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Apache hadoop yarn: Yet another resource negotiator</article-title>
        <source>Proceedings of the 4th Annual Symposium on Cloud Computing. SOCC ’13</source>
        <year>2013</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Perna</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pinoli</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Tica: Transcriptional interaction and coregulation analyzer</article-title>
        <source>Genom Proteomics Bioinforma</source>
        <year>2018</year>
        <volume>16</volume>
        <issue>5</issue>
        <fpage>342</fpage>
        <lpage>53</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gpb.2018.05.004</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Perna</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Canakoglu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pinoli</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Implementing a transcription factor interaction prediction system using the genometric query language</article-title>
        <source>Data Mining for Systems Biology</source>
        <year>2018</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
  </ref-list>
</back>
