<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9148508</article-id>
    <article-id pub-id-type="publisher-id">4736</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-022-04736-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>FragGeneScanRs: faster gene prediction for short reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3168-927X</contrib-id>
        <name>
          <surname>Van der Jeugt</surname>
          <given-names>Felix</given-names>
        </name>
        <address>
          <email>unipept@ugent.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Dawyndt</surname>
          <given-names>Peter</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mesuere</surname>
          <given-names>Bart</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.5342.0</institution-id><institution-id institution-id-type="ISNI">0000 0001 2069 7798</institution-id><institution>Department of Applied Mathematics, Computer Science and Statistics, </institution><institution>Ghent University, </institution></institution-wrap>Ghent, Belgium </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>28</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>23</volume>
    <elocation-id>198</elocation-id>
    <history>
      <date date-type="received">
        <day>9</day>
        <month>12</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>17</day>
        <month>5</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">FragGeneScan is currently the most accurate and popular tool for gene prediction in short and error-prone reads, but its execution speed is insufficient for use on larger data sets. The parallelization which should have addressed this is inefficient. Its alternative implementation FragGeneScan+ is faster, but introduced a number of bugs related to memory management, race conditions and even output accuracy.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">This paper introduces FragGeneScanRs, a faster Rust implementation of the FragGeneScan gene prediction model. Its command line interface is backward compatible and adds extra features for more flexible usage. Its output is equivalent to the original FragGeneScan implementation.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">Compared to the current C implementation, shotgun metagenomic reads are processed up to 22 times faster using a single thread, with better scaling for multithreaded execution. The Rust code of FragGeneScanRs is freely available from GitHub under the GPL-3.0 license with instructions for installation, usage and other documentation (<ext-link ext-link-type="uri" xlink:href="https://github.com/unipept/FragGeneScanRs">https://github.com/unipept/FragGeneScanRs</ext-link>).</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-022-04736-5.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Shotgun metagenomics</kwd>
      <kwd>Gene prediction</kwd>
      <kwd>Hidden markov model</kwd>
      <kwd>Rust</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Research Foundation-Flanders (FWO)</institution>
        </funding-source>
        <award-id>12I5220N</award-id>
        <principal-award-recipient>
          <name>
            <surname>Mesuere</surname>
            <given-names>Bart</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par9">Studying environmental communities of archaea, bacteria, eukaryotes, and viruses is hampered by problems with isolating and culturing most of these organisms in lab conditions [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR5">5</xref>]. Metagenomics has therefore become a routine technique to bypass the cultivation step with a combination of high-throughput DNA sequencing and computational methods [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR7">7</xref>]. Non-targeted sequencing of genomes in environmental samples, called shotgun metagenomics, in particular allows profiling of both the taxonomic composition and the functional potential of the samples [<xref ref-type="bibr" rid="CR8">8</xref>]. Identification of protein coding sequences from shotgun metagenomic reads has therefore become an important precursor to gain insight in the taxonomic and functional diversity of an environmental community [<xref ref-type="bibr" rid="CR9">9</xref>].</p>
    <p id="Par10">One approach for shotgun metagenomics gene prediction is assembling reads into longer contiguous sequences, called contigs, prior to running traditional gene prediction tools [<xref ref-type="bibr" rid="CR10">10</xref>]. This eases gene prediction, but assembling reads from complex samples with many species in different abundances is a challenging problem. It requires special-purpose algorithms that can be slow, produce artificial contigs, and miss low-abundance genomes [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR12">12</xref>]. Direct gene prediction on individual reads can mitigate assembly problems, speed up computations, and enable profiling of low-abundance organisms that cannot be assembled de novo. But, it does have to face partial protein coding fragments with missing start/stop codons and read errors [<xref ref-type="bibr" rid="CR8">8</xref>]. The choice between assembly-based versus read-based gene prediction may depend on the sample type and the research question at hand.</p>
    <p id="Par11">Various gene prediction tools specialize in directly calling short reads [<xref ref-type="bibr" rid="CR13">13</xref>–<xref ref-type="bibr" rid="CR16">16</xref>]. FragGeneScan (FGS) is the most accurate and popular tool that is currently available [<xref ref-type="bibr" rid="CR17">17</xref>]. It uses a hidden Markov model (HMM) that incorporates codon usage bias, start/stop codon patterns, and sequencing error models to predict complete or partial genes in short error-prone reads. Back in 2010, the gene prediction model of FGS was implemented in C and Perl [<xref ref-type="bibr" rid="CR18">18</xref>]. Multithreading support was added in release 1.19 (August 2014) and most Perl code was replaced with C functions in release 1.30 (April 2016). Because FGS was rather slow, a team of researchers at the University of British Columbia (Canada) forked FGS (presumably from release 1.19) to implement FragGeneScan-Plus (FGS+): a pure C implementation with speedups for single threaded execution and better scaling for multithreading [<xref ref-type="bibr" rid="CR19">19</xref>].</p>
    <p id="Par12">Both FGS and FGS+ now have pure C implementations that support parallel execution, but their latest releases suffer from their own issues. FGS implements multithreading in a very inefficient way, making it much slower than FGS+. The implementation doesn’t preserve input order, breaking for example the synchronisation between pair-end read files without an extra sorting step in postprocessing. Bugs have also been introduced when replacing Perl code with C functions. In addition, out-of-bound memory access may corrupt its results and cause the software to crash.</p>
    <p id="Par13">FGS+ has inherited inefficient memory usage from FGS and made it worse by copying immutable data structures to individual threads and introducing leaks in the allocated memory. Its multithreading model is overly complex and may deadlock due to race conditions in thread semaphores especially when using a larger number of threads. Although FGS+ is faster than FGS, its results may significantly deviate due to bugs introduced in the reimplementation and missing bug fixes from later FGS versions. For example, FGS+ systematically makes wrong translations of genes encoded on the reverse strand, may result in out-of-bound memory access when copying FASTA headers from a dynamically allocated global array to thread-specific arrays that are statically allocated, uses fixed-length string buffers of 1MB for DNA sequences that overflow for complete genomes, and also crashes when reading from standard input and writing to standard output. A list of problematic invocations is included in Additional file <xref rid="MOESM1" ref-type="media">1</xref>. In conclusion, FGS generates more accurate results but is slower, whereas FGS+ is considerably faster but generates wrong output.</p>
    <p id="Par14">The source code of FGS and FGS+ is no longer actively maintained, but as metagenomics datasets continue to grow in size, we still need faster gene predictors. In this manuscript we present FragGeneScanRs (FGSrs), a reliable, high-performance, and accurate Rust implementation of the FGS gene prediction model. We ran a benchmark to show that FGSrs produces the same results as FGS and is faster than both FGS and FGS+.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p id="Par15">FGSrs is implemented in Rust, a programming language known for its focus on speed and memory-efficiency. In addition, segmentation faults that occur while running FGS or FGS+ are automatically avoided because memory-safety and thread-safety are guaranteed by Rust’s type system and ownership model. Its zero-cost abstractions yield more readable code and put optimizations in the hands of the compiler.</p>
    <p id="Par16">We started off with a Rust implementation that was equivalent to FGS release 1.31. Afterwards, we gradually optimized performance and improved the quality of the software, while monitoring equivalence with the original implementation. We outline some of these optimizations and improvements in what follows and refer to the source code and its documentation for more details.</p>
    <p id="Par17">FGS uses statically allocated 300 KB buffers for different representations of reads and 100 KB buffers for protein translations. By using dynamically allocated buffers that grow when needed instead, we avoid static buffer overflows, increase speed, and reduce the memory footprint.</p>
    <p id="Par18">FGS stores default training data for its HMM in separate text files. We include a binary representation of default data in the executable during compilation, but still support passing custom training data as command line arguments. This improves usability by reducing dependencies during installation of the software and allowing to execute FGSrs with default training data anywhere on the system without the need to run FGS in its own directory or explicitly pass the path to the default training files (new option -r).</p>
    <p id="Par19">The HMM configurations used by FGS are immutable after initialization, but the original implementation wastes memory by copying them to each thread. We store this data in shared memory that threads can access concurrently. We use mutexes for protected access to shared input and output file handles. This avoids the need to split input in chunks upfront, have threads that store results per chunk in a separate file, and merge these files afterwards. This eliminates disk overhead and speeds up I/O.</p>
    <p id="Par20">HMM gene regions have six inhomogeneous sets of states that represent matches, insertions and deletions for two successive codons in a read. FGS processes the six states in a loop, combined with conditional execution to handle topological differences between state transitions. Unrolling these loops not only makes the condition-less code more readable, it is also significantly faster. We have further improved readability of the code by replacing #define constants in C with Rust enum types.</p>
    <p id="Par21">Where FGS uses row-major order to store dynamic programming matrices, we switched to column-major order for improved locality when accessing matrix elements in the Viterbi algorithm. This results in a speedup because the reordered memory layout causes less cache misses.</p>
    <p id="Par22">FGS outputs the DNA sequence, its translated amino acid sequence, and additional metadata for each coding region found in a read, with optional formatting to indicate insertions and deletions in the DNA sequence. This requires FGS to compute and store the DNA sequence twice during the backtracking step at the end of the Viterbi algorithms. Once for reconstructing the formatted DNA sequence and once for reconstructing the unformatted DNA sequence. We produce a unified representation and delay formatting until output is generated. We also note that a bug was introduced in FGS (release 1.30) when the backtracking step was converted from Perl to C, which generates DNA and protein sequences for complete genomes that are incorrect.</p>
  </sec>
  <sec id="Sec3">
    <title>Results</title>
    <p id="Par23">The FGSrs command line interface is backward compatible with FGS, so it can be used as a faster and memory-friendly drop-in replacement for FGS in bioinformatics pipelines. FGSrs also has some additional features that enable more flexible usage. We support the conventional standard input and output channels as alternatives for passing files as arguments to the -s and -o options. This enables embedding FGSrs in POSIX pipes without storing intermediate results on the file system. Storage locations for generated DNA sequences (option -n), translated amino acid sequences (option -a) and metadata (option -m) can also be specified individually, which may give additional speedups because unspecified information does not need to be computed. Where FGS and FGS+ report gene predictions out-of-order, FGSrs by default preserves read order. The priority queue that guarantees in-order reporting comes with a small overhead on speed and memory usage, but can be disabled with the option -u.<fig id="Fig1"><label>Fig. 1</label><caption><p>Processing speed for single threaded execution of FGS, FGS+ and FGSrs on short (80 bp) and long (1328 bp) reads. FGS and FGSrs generate DNA sequences, protein translations and metadata, whereas FGS+ only generates protein translations because the software crashes when other output is generated. FGS and FGS+ report gene predictions out-of-order, where default in-order reporting was used for FGSrs</p></caption><graphic xlink:href="12859_2022_4736_Fig1_HTML" id="MO1"/></fig><fig id="Fig2"><label>Fig. 2</label><caption><p>Scaling for multithreaded execution of FGS, FGS+ and FGSrs on long reads (1328 bp), computed as the speedup of concurrent execution with <italic>t</italic> threads (<italic>x</italic>-axis) over single threaded execution. Dash line shows the theoretical upper bound for the speedup. Race conditions consistently halt the execution of FGS+ above 10 threads. FGS and FGSrs generate DNA sequences, protein translations and metadata, whereas FGS+ only generates protein translations because the software crashes when other output is generated. FGS and FGS+ report gene predictions out-of-order, where default in-order reporting was used for FGSrs</p></caption><graphic xlink:href="12859_2022_4736_Fig2_HTML" id="MO2"/></fig><fig id="Fig3"><label>Fig. 3</label><caption><p>Memory footprint for multithreaded execution of FGS, FGS+ and FGSrs on long reads (1328 bp). Total memory footprint (heap, stack and memory-mapped file I/O) measured using the Massif heap profiler of Valgrind [<xref ref-type="bibr" rid="CR20">20</xref>] with –pages-as-heap option. Race conditions consistently halt the execution of FGS+ above 10 threads. FGS and FGSrs generate DNA sequences, protein translations and metadata, whereas FGS+ only generates protein translations because the software crashes when other output is generated. FGS and FGS+ report gene predictions out-of-order, where default in-order reporting was used for FGSrs</p></caption><graphic xlink:href="12859_2022_4736_Fig3_HTML" id="MO3"/></fig></p>
    <p id="Par24">We ran two benchmarks on a 16-core Intel<inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\circledR$$\end{document}</tex-math><mml:math id="M2"><mml:mo>®</mml:mo></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq1.gif"/></alternatives></inline-formula> Xeon<inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\circledR$$\end{document}</tex-math><mml:math id="M4"><mml:mo>®</mml:mo></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq2.gif"/></alternatives></inline-formula> CPU E5-2650 v2 at 2.60 GHz, to evaluate the performance improvements of FGSrs (release 1.0.0) over FGS (release 1.31) and FGS+ (git version 91b0ab6). The first benchmark uses the sample datasets included in the FGS and FGSrs repositories as input data and measurements are averaged over 5 runs. When all three implementations are executed single threaded (Fig. <xref rid="Fig1" ref-type="fig">1</xref>), FGSrs processes short reads (80 bp) <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$22.6\times$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:mn>22.6</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq3.gif"/></alternatives></inline-formula> faster than FGS and <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1.2\times$$\end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:mn>1.2</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq4.gif"/></alternatives></inline-formula> faster than FGS+. Long reads (1328 bp) are processed <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$4.2\times$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mn>4.2</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq5.gif"/></alternatives></inline-formula> times faster than FGS and <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1.6\times$$\end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mn>1.6</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq6.gif"/></alternatives></inline-formula> faster than FGS+. The bulk of the runtime is consumed by the Viterbi algorithm, having a time complexity of <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$O(s^2 \times n)$$\end{document}</tex-math><mml:math id="M14"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq7.gif"/></alternatives></inline-formula> with <italic>s</italic> the number of HMM states and <italic>n</italic> the length of the sequence that needs to be processed. Because the HMM of the gene prediction model has a fixed number of states (<inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$s=49$$\end{document}</tex-math><mml:math id="M16"><mml:mrow><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mn>49</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq8.gif"/></alternatives></inline-formula>), we can thus expect runtime to grow linearly for reads that are even longer. FGSrs processes the complete genome sequence of <italic>Escherichia coli</italic> str. K-12 subst. MG1665 (NC_000913; 4,639,675 bp) <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2.2\times$$\end{document}</tex-math><mml:math id="M18"><mml:mrow><mml:mn>2.2</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq9.gif"/></alternatives></inline-formula> faster than FGS and <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$347.6\times$$\end{document}</tex-math><mml:math id="M20"><mml:mrow><mml:mn>347.6</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq10.gif"/></alternatives></inline-formula> faster than FGS+. The latter measurement essentially shows that FGS+ is not fit for processing complete genomes in practice. FGSrs and FGS+ scale better for multithreaded execution than FGS (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Increasing the thread count from 1 to 8 results in a speedup factor of 6.5 for both FGSrs and FGS+ and only 5.4 for FGS. The difference increases for higher thread counts and the execution even consistently halts due to race conditions for FGS+ when using more than 10 threads. FGSrs and FGS have a comparable memory footprint of about <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(80 + 70t)$$\end{document}</tex-math><mml:math id="M22"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>80</mml:mn><mml:mo>+</mml:mo><mml:mn>70</mml:mn><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq11.gif"/></alternatives></inline-formula> MB for <italic>t</italic> threads (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). FGS+ consumes more memory with about <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(265 + 85t)$$\end{document}</tex-math><mml:math id="M24"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>265</mml:mn><mml:mo>+</mml:mo><mml:mn>85</mml:mn><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4736_Article_IEq12.gif"/></alternatives></inline-formula> MB for <italic>t</italic> threads. However, the memory requirements are not a limiting factor to run any of these tools on a standard laptop, with 4 threads needing between 350MB and 520MB RAM.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Average execution time and standard deviation for various read lengths</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Average read length</th><th align="left">FGS Mean [s]</th><th align="left">FGS+ Mean [s]</th><th align="left">FGSrs Mean [s]</th></tr></thead><tbody><tr><td align="left">100</td><td char="±" align="char">4.843 ± 0.018</td><td char="±" align="char">0.491 ± 0.002</td><td char="±" align="char">0.396 ± 0.004</td></tr><tr><td align="left">200</td><td char="±" align="char">5.966 ± 0.028</td><td char="±" align="char">0.842 ± 0.001</td><td char="±" align="char">0.748 ± 0.002</td></tr><tr><td align="left">300</td><td char="±" align="char">7.020 ± 0.011</td><td char="±" align="char">1.168 ± 0.001</td><td char="±" align="char">1.103 ± 0.012</td></tr><tr><td align="left">400</td><td char="±" align="char">8.073 ± 0.020</td><td char="±" align="char">1.487 ± 0.002</td><td char="±" align="char">1.451 ± 0.002</td></tr><tr><td align="left">500</td><td char="±" align="char">9.109 ± 0.016</td><td char="±" align="char">1.803 ± 0.004</td><td char="±" align="char">1.795 ± 0.002</td></tr><tr><td align="left">600</td><td char="±" align="char">10.122 ± 0.021</td><td char="±" align="char">2.115 ± 0.002</td><td char="±" align="char">2.154 ± 0.015</td></tr><tr><td align="left">700</td><td char="±" align="char">11.137 ± 0.026</td><td char="±" align="char">2.448 ± 0.007</td><td char="±" align="char">2.505 ± 0.008</td></tr><tr><td align="left">800</td><td char="±" align="char">12.196 ± 0.020</td><td char="±" align="char">2.790 ± 0.005</td><td char="±" align="char">2.859 ± 0.010</td></tr><tr><td align="left">900</td><td char="±" align="char">13.218 ± 0.023</td><td char="±" align="char">3.132 ± 0.003</td><td char="±" align="char">3.198 ± 0.010</td></tr><tr><td align="left">1000</td><td char="±" align="char">14.309 ± 0.255</td><td char="±" align="char">3.474 ± 0.018</td><td char="±" align="char">3.547 ± 0.005</td></tr><tr><td align="left">2000</td><td char="±" align="char">24.443 ± 0.025</td><td char="±" align="char">7.021 ± 0.020</td><td char="±" align="char">7.052 ± 0.024</td></tr><tr><td align="left">3000</td><td char="±" align="char">34.655 ± 0.038</td><td char="±" align="char">10.913 ± 0.014</td><td char="±" align="char">10.545 ± 0.025</td></tr><tr><td align="left">4000</td><td char="±" align="char">45.037 ± 0.051</td><td char="±" align="char">14.841 ± 0.020</td><td char="±" align="char">14.042 ± 0.022</td></tr><tr><td align="left">5000</td><td char="±" align="char">55.315 ± 0.059</td><td char="±" align="char">18.756 ± 0.034</td><td char="±" align="char">17.525 ± 0.039</td></tr><tr><td align="left">6000</td><td char="±" align="char">65.537 ± 0.118</td><td char="±" align="char">22.997 ± 0.298</td><td char="±" align="char">21.007 ± 0.028</td></tr><tr><td align="left">7000</td><td char="±" align="char">75.791 ± 0.058</td><td char="±" align="char">27.099 ± 0.080</td><td char="±" align="char">24.521 ± 0.068</td></tr><tr><td align="left">8000</td><td char="±" align="char">86.172 ± 0.202</td><td char="±" align="char">31.440 ± 0.051</td><td char="±" align="char">27.980 ± 0.043</td></tr><tr><td align="left">9000</td><td char="±" align="char">96.354 ± 0.347</td><td char="±" align="char">35.858 ± 0.040</td><td char="±" align="char">31.489 ± 0.055</td></tr><tr><td align="left">10,000</td><td char="±" align="char">106.509 ± 0.104</td><td char="±" align="char">40.513 ± 0.071</td><td char="±" align="char">34.962 ± 0.050</td></tr></tbody></table></table-wrap></p>
    <p id="Par25">The second benchmark uses a collection of data sets simulated using Mason [<xref ref-type="bibr" rid="CR21">21</xref>]. Each data set contains 10K Illumina reads of varying read length simulated from <italic>Geobacter anodireducens</italic> str. SD-1. The results for these datasets may be found in Table <xref rid="Tab1" ref-type="table">1</xref>. More details and a comparison of the predictive performance of FGS and FGSrs on one of these data sets may be found in Additional file <xref rid="MOESM2" ref-type="media">2</xref>.</p>
  </sec>
  <sec id="Sec4">
    <title>Conclusions</title>
    <p id="Par26">In conclusion we can state that FGSrs is a reliable implementation of the FGS gene prediction model that is an order of magnitude faster than the original implementation. Its command line interface is backward compatible with extensions for more flexible usage. The source code of FGSrs is freely available from GitHub under the GPL-3.0 license (https://github.com/unipept/FragGeneScanRs), with instructions for installation, usage and other documentation.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec5">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2022_4736_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Examples of input problematic for FGS+. A PDF file describing in detail some examples of input problematic for FGS+</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2022_4736_MOESM2_ESM.pdf">
            <caption>
              <p><bold>Additional file 2.</bold> Performance on simulated reads. Detailed benchmark results on a collection of simulated data sets</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>base pair</term>
        <def>
          <p id="Par4">(bp)</p>
        </def>
      </def-item>
      <def-item>
        <term>FragGeneScan</term>
        <def>
          <p id="Par5">(FGS)</p>
        </def>
      </def-item>
      <def-item>
        <term>FragGeneScan+</term>
        <def>
          <p id="Par6">(FGS+)</p>
        </def>
      </def-item>
      <def-item>
        <term>FragGeneScanRs</term>
        <def>
          <p id="Par7">(FGSrs)</p>
        </def>
      </def-item>
      <def-item>
        <term>Hidden Markov Model</term>
        <def>
          <p id="Par8">(HMM)</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank the students of the Computational Biology class of 2019-2020 for scrutinizing issues with the code of FGS and FGS+.</p>
    <sec id="d32e939">
      <title>Availability and requirements</title>
      <p id="Par27">
        <list list-type="bullet">
          <list-item>
            <p id="Par28"><bold>Project name</bold> FragGeneScanRs</p>
          </list-item>
          <list-item>
            <p id="Par29"><bold>Project home page</bold> https://github.com/unipept/FragGeneScanRs</p>
          </list-item>
          <list-item>
            <p id="Par30"><bold>Operating system(s)</bold> Platform independent</p>
          </list-item>
          <list-item>
            <p id="Par31"><bold>Programming language</bold> Rust</p>
          </list-item>
          <list-item>
            <p id="Par32"><bold>Other requirements</bold> Rust edition 2018 or higher</p>
          </list-item>
          <list-item>
            <p id="Par33"><bold>License</bold> GNU GPL</p>
          </list-item>
          <list-item>
            <p id="Par34"><bold>Any restrictions to use by non-academics</bold> None</p>
          </list-item>
        </list>
      </p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>BM, PD and FVDJ contributed to the conception of the software. FVDJ created the new software used in the work. BM, PD and FVDJ drafted the work or substantively revised it. All contributors agree to be accountable for all aspects of the work in ensuring that questions related to the accuracy of integrety of any part of the work are appropriately investigated and resolved. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the Research Foundation–Flanders (FWO) [12I5220N to B.M.]. The funding body did not play any role in the design of the study, or collection, analysis and interpretation of data, or in writing the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The datasets generated and/or analysed during the current study are available in the GitHub repository, https://github.com/unipept/FragGeneScanRs/tree/main/example.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethics approval and consent to participate</title>
      <p id="Par35">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par36">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par37">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Locey</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>Lennon</surname>
            <given-names>JT</given-names>
          </name>
        </person-group>
        <article-title>Scaling laws predict global microbial diversity</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2016</year>
        <volume>113</volume>
        <issue>21</issue>
        <fpage>5970</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1521291113</pub-id>
        <?supplied-pmid 27140646?>
        <pub-id pub-id-type="pmid">27140646</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rappé</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Giovannoni</surname>
            <given-names>SJ</given-names>
          </name>
        </person-group>
        <article-title>The uncultured microbial majority</article-title>
        <source>Annu Rev Microbiol</source>
        <year>2003</year>
        <volume>57</volume>
        <issue>1</issue>
        <fpage>369</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1146/annurev.micro.57.030502.090759</pub-id>
        <?supplied-pmid 14527284?>
        <pub-id pub-id-type="pmid">14527284</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pedrós-Alió</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Manrubia</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>The vast unknown microbial biosphere</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2016</year>
        <volume>113</volume>
        <issue>24</issue>
        <fpage>6585</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1606105113</pub-id>
        <?supplied-pmid 27302946?>
        <pub-id pub-id-type="pmid">27302946</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hofer</surname>
            <given-names>U</given-names>
          </name>
        </person-group>
        <article-title>The majority is uncultured</article-title>
        <source>Nat Rev Microbiol</source>
        <year>2018</year>
        <volume>16</volume>
        <fpage>716</fpage>
        <lpage>717</lpage>
        <pub-id pub-id-type="doi">10.1038/s41579-018-0097-x</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Hahn MW, Koll U, Schmidt J. Isolation and Cultivation of Bacteria, pp. 313–351. Springer, Cham (2019). 10.1007/978-3-030-16775-2_10.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hugenholtz</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Tyson</surname>
            <given-names>GW</given-names>
          </name>
        </person-group>
        <article-title>Metagenomics</article-title>
        <source>Nature</source>
        <year>2008</year>
        <volume>455</volume>
        <fpage>481</fpage>
        <lpage>483</lpage>
        <pub-id pub-id-type="doi">10.1038/455481a</pub-id>
        <?supplied-pmid 18818648?>
        <pub-id pub-id-type="pmid">18818648</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Thomas T, Gilbert J, Meyer F. MCS), Univ. of New South Wales, S.: Metagenomics - a guide from sampling to data analysis. Microbial Informatics and experimentation <bold>2</bold>(3) (2012). 10.1186/2042-5783-2-3</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quince</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Simpson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Loman</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Segata</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Shotgun metagenomics, from sampling to analysis</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>9</issue>
        <fpage>833</fpage>
        <lpage>844</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3935</pub-id>
        <?supplied-pmid 28898207?>
        <pub-id pub-id-type="pmid">28898207</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sharpton</surname>
            <given-names>TJ</given-names>
          </name>
        </person-group>
        <article-title>An introduction to the analysis of shotgun metagenomic data</article-title>
        <source>Front Plant Sci</source>
        <year>2014</year>
        <volume>5</volume>
        <fpage>209</fpage>
        <pub-id pub-id-type="doi">10.3389/fpls.2014.00209</pub-id>
        <?supplied-pmid 24982662?>
        <pub-id pub-id-type="pmid">24982662</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Breitwieser</surname>
            <given-names>FP</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>A review of methods and databases for metagenomic classification and assembly</article-title>
        <source>Brief Bioinform</source>
        <year>2017</year>
        <volume>20</volume>
        <issue>4</issue>
        <fpage>1125</fpage>
        <lpage>36</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbx120</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ghurye</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Cepeda-Espinoza</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Metagenomic assembly: overview, challenges and applications</article-title>
        <source>Yale J Biol Med</source>
        <year>2016</year>
        <volume>89</volume>
        <fpage>353</fpage>
        <lpage>362</lpage>
        <?supplied-pmid 27698619?>
        <pub-id pub-id-type="pmid">27698619</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vollmers</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wiegand</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kaster</surname>
            <given-names>A-K</given-names>
          </name>
        </person-group>
        <article-title>Comparing and evaluating metagenome assembly tools from a microbiologist’s perspective - not only size matters!</article-title>
        <source>PLoS ONE</source>
        <year>2017</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0169662</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hyatt</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>LoCascio</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Hauser</surname>
            <given-names>LJ</given-names>
          </name>
          <name>
            <surname>Uberbacher</surname>
            <given-names>EC</given-names>
          </name>
        </person-group>
        <article-title>Gene and translation initiation site prediction in metagenomic sequences</article-title>
        <source>Bioinformatics.</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>17</issue>
        <fpage>2223</fpage>
        <lpage>30</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts429</pub-id>
        <?supplied-pmid 22796954?>
        <pub-id pub-id-type="pmid">22796954</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hoff</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>Lingner</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Meinicke</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Tech</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Orphelia: predicting genes in metagenomic sequencing reads</article-title>
        <source>Nucleic Acids Res</source>
        <year>2009</year>
        <volume>37</volume>
        <issue>suppl2</issue>
        <fpage>101</fpage>
        <lpage>105</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkp327</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhu</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lomsadze</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Borodovsky</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Ab initio gene identification in metagenomic sequences</article-title>
        <source>Nucleic Acids Res</source>
        <year>2010</year>
        <volume>38</volume>
        <issue>12</issue>
        <fpage>132</fpage>
        <lpage>132</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkq275</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Noguchi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Taniguchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Itoh</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>MetaGeneAnnotator: detecting species-specific patterns of ribosomal binding site for precise gene prediction in anonymous prokaryotic and phage genomes</article-title>
        <source>DNA Res</source>
        <year>2008</year>
        <volume>15</volume>
        <issue>6</issue>
        <fpage>387</fpage>
        <lpage>96</lpage>
        <pub-id pub-id-type="doi">10.1093/dnares/dsn027</pub-id>
        <?supplied-pmid 18940874?>
        <pub-id pub-id-type="pmid">18940874</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trimble</surname>
            <given-names>WL</given-names>
          </name>
          <name>
            <surname>Keegan</surname>
            <given-names>KP</given-names>
          </name>
          <name>
            <surname>D’Souza</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wilke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Wilkening</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gilbert</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Short read reading-frame predictors are not created equal: sequence error causes loss of signal</article-title>
        <source>BMC Bioinform</source>
        <year>2012</year>
        <pub-id pub-id-type="doi">10.1186/1471-2105-13-183</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rho</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tang</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>FragGeneScan: predicting genes in short and error-prone reads</article-title>
        <source>Nucleic Acids Res</source>
        <year>2010</year>
        <volume>38</volume>
        <issue>20</issue>
        <fpage>191</fpage>
        <lpage>191</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkq747</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Kim D, Hahn AS, Wu S-J, Hanson NW, Konwar KM, Hallam SJ. Fraggenescan-plus for scalable high-throughput short-read open reading frame prediction. In: 2015 IEEE Conference on Computational Intelligence in Bioinformatics and Computational Biology (CIBCB), pp. 1–8 (2015). 10.1109/CIBCB.2015.7300341</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Nethercote N, Seward J. Valgrind: A framework for heavyweight dynamic binary instrumentation. In: 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’07), pp. 89–100. Association for Computing Machinery, New York, NY, USA (2007). 10.1145/1250734.1250746.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Holtgrewe M. Mason - a read simulator for second generation sequencing data. Technical Report FU Berlin (2010)</mixed-citation>
    </ref>
  </ref-list>
</back>
