<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7203745</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btaa072</article-id>
    <article-id pub-id-type="publisher-id">btaa072</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Structural Bioinformatics</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>atomium—a Python structure parser</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Ireland</surname>
          <given-names>Sam M</given-names>
        </name>
        <xref ref-type="corresp" rid="btaa072-cor1"/>
        <!--<email>sam.ireland.09@ucl.ac.uk</email>-->
        <xref ref-type="aff" rid="btaa072-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-2835-2572</contrib-id>
        <name>
          <surname>Martin</surname>
          <given-names>Andrew C R</given-names>
        </name>
        <xref ref-type="corresp" rid="btaa072-cor1"/>
        <!--<email>andrew.martin@ucl.ac.uk</email>-->
        <xref ref-type="aff" rid="btaa072-aff1"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Cowen</surname>
          <given-names>Lenore</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btaa072-aff1"><institution>Division of Biosciences, Institute of Structural and Molecular Biology, University College London</institution>, London WC1E 6BT, <country country="GB">UK</country></aff>
    <author-notes>
      <corresp id="btaa072-cor1">To whom correspondence should be addressed. <email>andrew@bioinf.org.uk</email> or <email>andrew.martin@ucl.ac.uk</email> or <email>sam.ireland.09@ucl.ac.uk</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>5</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2020-02-11">
      <day>11</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>36</volume>
    <issue>9</issue>
    <fpage>2750</fpage>
    <lpage>2754</lpage>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>9</month>
        <year>2019</year>
      </date>
      <date date-type="rev-recd">
        <day>13</day>
        <month>1</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>03</day>
        <month>2</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btaa072.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>Structural biology relies on specific file formats to convey information about macromolecular structures. Traditionally this has been the PDB format, but increasingly newer formats, such as PDBML, mmCIF and MMTF are being used. Here we present atomium, a modern, lightweight, Python library for parsing, manipulating and saving PDB, mmCIF and MMTF file formats. In addition, we provide a web service, pdb2json, which uses atomium to give a consistent JSON representation to the entire Protein Data Bank.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>atomium is implemented in Python and its performance is equivalent to the existing library BioPython. However, it has significant advantages in features and API design. atomium is available from <ext-link ext-link-type="uri" xlink:href="http://atomium.bioinf.org.uk">atomium.bioinf.org.uk</ext-link> and pdb2json can be accessed at <ext-link ext-link-type="uri" xlink:href="http://pdb2json.bioinf.org.uk">pdb2json.bioinf.org.uk</ext-link></p>
      </sec>
      <sec id="s3">
        <title>Supplementary information</title>
        <p><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/btaa072#supplementary-data">Supplementary data</ext-link> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Wellcome Trust PhD Studentship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>203756/Z/16/A</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="5"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Structural biology is the study of biological macromolecules at the molecular level, specifically the arrangement of their atoms in space, and how this atomic structure dictates their functions.</p>
    <p>For any computational analysis of these structures, a representation of them must be stored on disk, and from the early days of structural biology, the PDB (Protein Data Bank) file format was used to represent these structures (<xref rid="btaa072-B2" ref-type="bibr">Bernstein <italic>et al.</italic>, 1977</xref>). This format uses 80-character lines, with fields defined by position along that line, to represent information about the atoms in a structure. This includes information about the atoms themselves (their coordinates, names and connectivity), information about their organization (residue and chain information) and meta information about the structure such as how it was generated, who generated it and the experimental conditions.</p>
    <p>In the case of the majority of structures, which are generated by X-ray crystallography, the coordinates of the atoms in these files represent the asymmetric unit—the repeating unit of the crystals. This may not be the biologically relevant structure, so these files contain biological assembly instructions: transformation matrices which are applied to the polymers in the structure to recreate the biologically relevant structure.</p>
    <p>Over time, the limitations of the PDB file format have become apparent (<xref rid="btaa072-B12" ref-type="bibr">Westbrook and Fitzgerald, 2005</xref>). Most seriously, the numeric atom identifiers are defined by a fixed-width field of five characters, meaning that the maximum atom ID is 99999, limiting the number of atoms a single file can contain. Initially this problem was not frequently encountered and, where it was, the structure was split over several files. Eventually, however, new file formats were introduced.</p>
    <p>The mmCIF file format was introduced in 1997 as an extension to the existing Crystallographic Information File format. It uses a space-separated, linked table format to hold much more information than PDB files, and with no upper limit on structure size (<xref rid="btaa072-B3" ref-type="bibr">Bourne <italic>et al.</italic>, 1997</xref>; <xref rid="btaa072-B6" ref-type="bibr">Deshpande <italic>et al.</italic>, 2005</xref>). The PDBML format uses XML to represent structures (<xref rid="btaa072-B11" ref-type="bibr">Westbrook <italic>et al.</italic>, 2005</xref>). Most recently, a binary form of mmCIF optimized for transmission over the web, MMTF, has also been introduced (<xref rid="btaa072-B4" ref-type="bibr">Bradley <italic>et al.</italic>, 2017</xref>). The PDB file format has now formally been deprecated in favour of mmCIF, although it remains in widespread use.</p>
    <p>Computational tools for processing these file formats and processing the models they represent are of great importance to structural biology. There are various examples for different languages, such as BioJava for Java (<xref rid="btaa072-B8" ref-type="bibr">Lafita <italic>et al.</italic>, 2019</xref>) and BiopLib for C (<xref rid="btaa072-B9" ref-type="bibr">Porter and Martin, 2015</xref>). These libraries provide the user with a standard interface for analysing very diverse structures, by representing them in terms of a small number of object types, such as atoms, chains and residues, and provide a layer of abstraction that makes more complex tasks such as creating scoring functions more straightforward. Python, a common programming language in Bioinformatics, has traditionally used the general-purpose library BioPython to parse these structure files (<xref rid="btaa072-B5" ref-type="bibr">Cock <italic>et al.</italic>, 2009</xref>). However, there are limitations to this library, as will be outlined below.</p>
    <p>Here we present atomium, a modern, lightweight, fast parser of .pdb, .cif and .mmtf files. It can read from, and save to, these file types and has powerful tools for processing and manipulating the structures they contain. It also makes PDB structures available in the JSON format using the pdb2json web tool, which is a wrapper around atomium. As JSON is a very widely used data representation format (particularly in transmission over the web), and as JSON parsing is part of the standard library of most programming languages, this additional tool makes the data contained in the PDB more easily accessible to those less familiar with the traditional file formats.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <sec>
      <title>2.1 atomium library structure</title>
      <p>The inner workings of atomium can broadly be divided into two areas: the core structure classes for actually representing molecular structures, and the functions for parsing data from various file types and creating ‘models’ (i.e. data structures) from them.</p>
      <p>The core structure classes are how atomium represents molecular structures. These can in theory be used to create structures manually by creating each atom explicitly although, in practice, structure creation will usually be done by the parsers. There is a class for the top-level models themselves (the container that all the other structures inhabit) and for each of the sub-structure types usually encountered in PDB files. Consequently, there are classes for atoms, residues, ligands (non-polymer molecules) and chains (<xref ref-type="fig" rid="btaa072-F1">Fig. 1</xref>).</p>
      <fig id="btaa072-F1" orientation="portrait" position="float">
        <label>Fig. 1.</label>
        <caption>
          <p>The relationship of structure classes in atomium, representing the hierarchy of types. While the structures can be created from scratch, this hierarchy has been designed to reflect the hierarchy of object types in PDB and mmCIF files</p>
        </caption>
        <graphic xlink:href="btaa072f1"/>
      </fig>
      <p>In every case where a structure has a collection of sub-structures within it (a chain’s residues, a residue’s atoms, etc.), these sub-structures are stored as a special atomium object called a StructureSet. These store the objects internally as a mapping of the structures’ identifiers (IDs) to lists of the structures so that lookup by ID can be done extremely quickly, but for all other purposes they behave as unordered sets. IDs are mapped to lists of structures rather than individual structures because it was necessary to allow duplicate IDs, usually found in biological assemblies.</p>
    </sec>
    <sec>
      <title>2.2 atomium functionality</title>
      <p>All structure classes can also use atomium’s filtering syntax. The objects can be filtered by any property, nested sub-property, by the regular expression of any string property (allowing for substring searches for example) or by numerical comparators of any numerical property (greater than, less than, etc.). For example, one can obtain all atoms of a given name, below or above a given charge threshold, or belonging to any residue of a given name or set of names (see <xref rid="btaa072-T1" ref-type="table">Table 1</xref>).</p>
      <table-wrap id="btaa072-T1" orientation="portrait" position="float">
        <label>Table 1.</label>
        <caption>
          <p>Examples of the filtering syntax that all atomium structures have by virtue of implementing the <monospace>StructureClass</monospace> metaclass</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Command</th>
              <th align="left" rowspan="1" colspan="1">Result</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms()</monospace>
              </td>
              <td rowspan="1" colspan="1">All atoms</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms(element=’N’)</monospace>
              </td>
              <td rowspan="1" colspan="1">All nitrogen atoms</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms(mass__gt=14)</monospace>
              </td>
              <td rowspan="1" colspan="1">Atoms with mass greater than 14</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms(name__regex=’CA—CB’)</monospace>
              </td>
              <td rowspan="1" colspan="1">CA and CB atoms</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms(het__name__regex=’CYS—HIS’)</monospace>
              </td>
              <td rowspan="1" colspan="1">Atoms in cysteine and histidine residues</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <monospace>model.atoms(chain__length__lt=100)</monospace>
              </td>
              <td rowspan="1" colspan="1">Atoms in chains shorter than 100 residues</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Among other operations, the atomic structures (a chain, a residue, a ligand, etc.) can all be transformed geometrically by translating or rotating; two atomic structures can be compared by measuring the RMSD between them, one can specify any atom or atomic structure and search for other atoms and atomic structures in the model which are, for example, within a given radius, or which have a particular property. For instance, the user can identify all sub-structures in a 5 Å radius of a given metal atom which are not water molecules, or identify all residues within 3 Å of a ligand that have a particular name. The documentation lists the full feature sets, and these are summarized in <xref rid="btaa072-T2" ref-type="table">Table 2</xref>.</p>
      <table-wrap id="btaa072-T2" orientation="portrait" position="float">
        <label>Table 2</label>
        <caption>
          <p>Summary of the features that atomium sub-structures have, and the API for using them</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Feature</th>
              <th align="left" rowspan="1" colspan="1">API</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Mass calculation</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.mass</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Relative elemental makeup</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.formula</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Centre of mass</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.center_of_mass</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Radius of gyration</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.radius_of_gyration</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">RMSD</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.rmsd_with(other)</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Grid generation</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.grid()</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Atom proximity</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.nearby_atoms(n)</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Translation</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.translate()</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Rotation</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.rotate</monospace>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Water removal</td>
              <td rowspan="1" colspan="1">
                <monospace>structure.dehydrate()</monospace>
              </td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>As stated earlier, while the user is free to create these structures manually by accessing these classes directly, it is generally more convenient to create them by parsing structure files. atomium can read .pdb, .cif and .mmtf files. In each case, the overall process is the same:</p>
      <list list-type="order">
        <list-item>
          <p>Obtain the file contents as a string, either from the local filesystem, or remotely from the RCSB PDB servers (<xref rid="btaa072-B10" ref-type="bibr">Rose <italic>et al.</italic>, 2010</xref>) (via HTTP) or a server (via SSH).</p>
        </list-item>
        <list-item>
          <p>Determine which file type it is by looking at the file extension or, if not possible, by looking at file contents.</p>
        </list-item>
        <list-item>
          <p>Convert the filestring to a Python dictionary whose structure is specific to that file type.</p>
        </list-item>
        <list-item>
          <p>Convert that dictionary to a standard atomium data dictionary, whose structure is the same regardless of the file type origin.</p>
        </list-item>
        <list-item>
          <p>Convert that data dictionary to an atomium File object with one or more models within it (NMR structures typically contain multiple models). Only one atom in a set of multiple occupancy atoms is used for the final model—currently the set with the alternate location identifier that comes first alphabetically (almost always <monospace>A</monospace>) is used, but future versions will allow this to be changed. Missing residue information is stored as a dictionary in the File object; this information comes from <monospace>pdbx_unobs_or_zero_occ_residues</monospace> rows and REMARK 465 records in mmCIF and PDB files, respectively.</p>
        </list-item>
      </list>
      <p>Finally, atomium has the built-in ability to generate ‘biological assemblies’ from the coordinates given in PDB files. In the majority of structures, which are generated by X-ray crystallography, the coordinates of the atoms represent the asymmetric unit—the repeating unit of the crystals. This may not be the biologically relevant structure, so these files contain biological assembly instructions: transformation matrices which are applied to the polymers in the structure to recreate the biologically relevant structure. atomium can generate new models from the asymmetric unit coordinates using a single function.</p>
    </sec>
    <sec>
      <title>2.3 pdb2json</title>
      <p>This process for parsing (summarized in <xref ref-type="fig" rid="btaa072-F2">Fig. 2</xref>) has a number of advantages over just trying to go from filestring to parsed object in one step. Making the three file types converge at one data structure (the atomium data dictionary) prevents duplication of effort involved in going from ‘data’ to ‘Python structure’. It also means that every file can have a consistent dictionary representation, which means that they can all be represented as JSON if desired. It is also easier for testing, as each stage in this (relatively complex) parsing process can more easily be tested in isolation.</p>
      <fig id="btaa072-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>An overview of how parsing of the three file types is done. Because the three file types converge on a single data dictionary, all three file types can be represented as JSON</p>
        </caption>
        <graphic xlink:href="btaa072f2"/>
      </fig>
      <p>As already noted, the process of parsing a structure file involves turning the raw filestring (or binary bytestring in the case of MMTF) into two successive Python dictionaries, before then being turned into a Python object. Initially this choice of Python dictionary as internal representation was a decision made to make development easier. However, Python dictionaries have a structure very similar to JSON, a data format that is frequently used for sending data over the web in a very human readable way, as it is essentially just nested key-value pairs. Thus, if the data dictionary is simply converted to JSON using Python’s built-in JSON library, atomium becomes a tool for turning any PDB structure into JSON.</p>
      <p>pdb2json provides this facility. This is a simple, lightweight Django (v2.1, djangoproject.com) web app which uses atomium to take any PDB code and return the resultant structure as JSON. This is done using a URL, for example, <monospace>/2SOD/</monospace> will return the JSON for the PDB 2SOD. It is currently available at pdb2json.bioinf.org.uk/.</p>
      <p>The service is therefore an HTTP alternative to the FTP service mmJSON by PDBj (<xref rid="btaa072-B1" ref-type="bibr">Bekker <italic>et al.</italic>, 2016</xref>), which provides FTP downloads of mmCIF structures only, and without the additional processing of the raw mmCIF table structures that pdb2json provides.</p>
      <p>By default, pdb2json tells atomium to use the .cif representation for parsing, but this can be altered using, for example, /<monospace>2SOD.pdb/</monospace>. The structure of the JSON returned will be the same since atomium creates the same data dictionary regardless of file type, but some values may be different. For example, many .pdb files have titles, etc. in capitals whereas .cif files use title case, and atom IDs may be numbered slightly different.</p>
      <p>If users so wish, they can obtain the initial file-type-specific Python dictionary as JSON by adding an argument called ‘file’ to the URL with no value, using (for example) the notation <monospace>/2SOD/?</monospace><monospace>file</monospace>. This is generally of limited interest in the case of .pdb and .mmtf, except as a means of checking the original file contents pre-processing, but in the case of .cif, it can be very useful. This is because every attribute of the structure will be accessible in this dictionary, so if the subset of attributes atomium pulls out of files to annotate its final representation is not sufficient, other attributes can be obtained from this representation. For example, atomium File objects have the R-free and R-work attributes, but there are many metrics for these calculations in the original file, such as the number of reflections used to generate these numbers. pdb2json allows access to these metrics too.</p>
      <p>PDB structures can be large and some are extremely large indeed. The user may not wish to download the JSON for an entire structure when they only need a single metric or set of metrics. Therefore, pdb2json allows the user to traverse the keys of the JSON structure using the supplied URL, if the user knows the identifiers for the relevant objects. For example, while <monospace>/2SOD/</monospace> will return the JSON for the entire structure, <monospace>/2SOD/quality/</monospace> will return only the quality sub-dictionary that was part of the original JSON object. This traversal can be as deep as the user wishes. For example, <monospace>/2SOD/models/0/non-polymer/O.153/atoms/</monospace><monospace>4382</monospace> will return information about a single zinc atom. In this case, this URL is the structure 2SOD, but only its first model (they are zero indexed), the non-polymer structure with ID O.153 in that model and the atom with ID 4382 in that non-polymer. This requires knowing the identifier of the atom and its containing HET record, but if these conditions are met, much smaller HTTP responses can be requested.</p>
      <p>If JSON conversion is required offline, a pdb2json.py script is also provided in the atomium library itself. This is a simple utility which imports atomium, loads a file saved on disk, converts it to JSON and saves it.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>atomium is currently at version 1.0.3, the 22nd release. It is downloadable using the Python package manager PyPI and pip (<monospace>pip3 install atomium</monospace>), or by cloning the repository from GitHub directly (<monospace>github.com/samirelanduk/atomium</monospace>). The master branch always points to the most recent stable release, with new features being developed on separate branches.</p>
    <p>The speed of parsing (raw coordinates without assembly generation, as BioPython cannot do this) is comparable with BioPython for the .pdb file format. The two Python libraries were also compared with the C library BiopLib which, as might be expected, parsed the structures faster, particularly at higher atom counts (see <xref ref-type="fig" rid="btaa072-F3">Fig. 3a</xref>). The parsing time for the three file formats in atomium are of a similar order of magnitude, with .cif taking the longest (see <xref ref-type="fig" rid="btaa072-F3">Fig. 3b</xref>). In all five cases, the relationship between the number of atoms and the time taken to parse is linear and, for all comparisons, care was taken to ensure the same kinds of parsing were being done—no biological assembly generation, proper relationship parsing and assigning for the sub-structures, etc.</p>
    <fig id="btaa072-F3" orientation="portrait" position="float">
      <label>Fig. 3.</label>
      <caption>
        <p>(<bold>a</bold>) A comparison of parsing speed between atomium, BioPython (both Python) and BiopLib (C) for the PDB file format. With occasional deviations, the two Python libraries are broadly equivalent. As expected, BiopLib is faster, particularly at higher atom counts, as it is written in a compiled language. (<bold>b</bold>) Time taken to parse the same 1000 randomly chosen single-model structures in the three file formats using atomium. Time as a function of atom count is linear and it can be seen that mmCIF structures take the longest, followed by PDB structures and MMTF structures</p>
      </caption>
      <graphic xlink:href="btaa072f3"/>
    </fig>
    <p>The SnakeViz profile visualization tool (SnakeViz v2.0.1, <monospace>github.com/jiffyclub/snakeviz</monospace>) can identify bottlenecks in parsing code, which has been useful in optimizing the atomium codebase. The increased time for .cif parsing can be partly explained using this tool as it identifies a bottleneck in scanning the lines of the file for embedded quotation marks. Because the file format allows for quite complicated nested quotation marks in lines, the algorithm used to handle them can be relatively time consuming and is a significant proportion of the overall parse time. The older PDB file format, for all its other deficiencies, has no such problem and nor does the newer binary MMTF format. <xref ref-type="supplementary-material" rid="sup1">Supplementary Figures S1–S3</xref> show ‘profiles’ for each parse process, identifying which sub-functions take up most time in the overall process.</p>
    <p>atomium has been used in the creation of the ZincBind database (<xref rid="btaa072-B7" ref-type="bibr">Ireland and Martin, 2019</xref>), where its biological assembly processing capabilities were invaluable in identifying inter-chain zinc binding sites.</p>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>Currently the general-purpose bioinformatics library, BioPython, is generally the structure parsing tool of choice for the Python programming language, but atomium offers three key advantages:</p>
    <p>First, from a purely practical feature-set point of view, at the time of writing, BioPython does not have the ability to process the information contained in structure files’ biological assembly instructions, or create new models from them. This is a serious problem when dealing with structures whose asymmetric unit is markedly different from the biological assembly. For example, the insulin structure 1ZEH contains one subunit of the insulin hexamer, and the biological assembly instructions are required to make the true hexamer. BioPython cannot generate these structures by itself, which makes it unsuitable for examining interactions between chains. Atomium, however, can generate these with a single function, using the NumPy library optimized for matrix calculations. The structures generated from them will have duplicated IDs, but can still be selected individually by assigning novel names to them—particularly in the case of chain objects with no names assigned to them initially. While atomium does lack some features that BioPython offers, such as solvent accessible surface and residue depth, the future addition of such features is straightforward given the structural representation in atomium.</p>
    <p>Second, and more philosophically, atomium adheres more closely to the Pythonic tenet that a piece of software should focus on doing one thing only and doing that one thing well. BioPython is a powerful, but general purpose, bioinformatics library with modules for many different bioinformatics applications. In contrast, atomium focuses solely on structural biology and specifically on the parsing, representation and saving of macromolecules. Its API, package structure, testing suite and documentation are all optimized around this purpose. On that basis, there is a strong argument that atomium itself should not be extended to include features such as solvent accessibility calculation since these are outside the remit of parsing and representing macromolecular structure.</p>
    <p>Third, atomium has a simpler API than BioPython. There is no need to create a separate parser object; the whole parsing step can be done with the top-level functions <monospace>atomium.open</monospace> and <monospace>atomium.fetch</monospace>.</p>
    <p>Finally, the addition of the pdb2json web server around atomium allows for access to the parsed contents of any PDB file through the browser in the widely accessible JSON format, removing the need for specialized parsers altogether if the user so wishes.</p>
  </sec>
  <sec>
    <title>5 Conclusions</title>
    <p>The atomium PDB parser is a novel, lightweight Python library which can handle three of the principal file types of structural biology, save changes made to them and generate the structures contained in their biological assembly instructions for more biologically realistic models. It contains powerful querying abilities for the models, as well as other useful metrics and tools.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by a Wellcome Trust PhD Studentship [203756/Z/16/A to S.M.I.].</p>
    <p><italic>Conflict of Interest:</italic> none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btaa072_Supplementary_Data</label>
      <media xlink:href="btaa072_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btaa072-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bekker</surname><given-names>G.-J.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Molmil: a molecular viewer for the PDB and beyond</article-title>. <source>J. Cheminformatics</source>, <volume>8</volume>, <fpage>42</fpage>.</mixed-citation>
    </ref>
    <ref id="btaa072-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bernstein</surname><given-names>F.C.</given-names></name></person-group><etal>et al</etal> (<year>1977</year>) 
<article-title>The Protein Data Bank: a computer-based archival file for macromolecular structures</article-title>. <source>J. Mol. Biol</source>., <volume>112</volume>, <fpage>535</fpage>–<lpage>542</lpage>.<pub-id pub-id-type="pmid">875032</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B3">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Bourne</surname><given-names>P.E.</given-names></name></person-group><etal>et al</etal> (<year>1997</year>) <chapter-title>[30] Macromolecular crystallographic information file</chapter-title> In: <source>Macromolecular Crystallography Part B, Vol. 277 of Methods in Enzymology</source>. 
<publisher-name>Carter Jr.,C.W. and Sweet,R.M. (eds.) Academic Press</publisher-name>, Cambridge, Massachusetts, pp. <fpage>571</fpage>–<lpage>590</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa072-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bradley</surname><given-names>A.R.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>MMTF—an efficient file format for the transmission, visualization, and analysis of macromolecular structures</article-title>. <source>PLoS Comput. Biol</source>., <volume>13</volume>, <fpage>e1005575</fpage>.<pub-id pub-id-type="pmid">28574982</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cock</surname><given-names>P.J.A.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>BioPython: freely available Python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1422</fpage>–<lpage>1423</lpage>.<pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Deshpande</surname><given-names>N.</given-names></name></person-group><etal>et al</etal> (<year>2005</year>) 
<article-title>The RCSB Protein Data Bank: a redesigned query system and relational database based on the mmCIF schema</article-title>. <source>Nucleic Acids Res</source>., <volume>33</volume> (Suppl. 1), <fpage>D233</fpage>–<lpage>D237</lpage>.<pub-id pub-id-type="pmid">15608185</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ireland</surname><given-names>S.M.</given-names></name>, <name name-style="western"><surname>Martin</surname><given-names>A.C.R.</given-names></name></person-group> (<year>2019</year>) 
<article-title>ZincBind—the database of zinc binding sites</article-title>. <source>Database</source>, <volume>2019</volume>, baz006.</mixed-citation>
    </ref>
    <ref id="btaa072-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lafita</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>Biojava 5: a community driven open-source bioinformatics library</article-title>. <source>PLoS Comput. Biol</source>., <volume>15</volume>, <fpage>e1006791</fpage>.<pub-id pub-id-type="pmid">30735498</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Porter</surname><given-names>C.T.</given-names></name>, <name name-style="western"><surname>Martin</surname><given-names>A.C.R.</given-names></name></person-group> (<year>2015</year>) 
<article-title>BiopLib and BiopTools—a C programming library and toolset for manipulating protein structure</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>4017</fpage>–<lpage>4019</lpage>.<pub-id pub-id-type="pmid">26323716</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Rose</surname><given-names>P.W.</given-names></name></person-group><etal>et al</etal> (<year>2010</year>) 
<article-title>The RCSB Protein Data Bank: redesigned web site and web services</article-title>. <source>Nucleic Acids Res</source>., <volume>39</volume> (Suppl. 1), <fpage>D392</fpage>–<lpage>D401</lpage>.<pub-id pub-id-type="pmid">21036868</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Westbrook</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2005</year>) 
<article-title>PDBML: the representation of archival macromolecular structure data in XML</article-title>. <source>Bioinformatics</source>, <volume>21</volume>, <fpage>988</fpage>–<lpage>992</lpage>.<pub-id pub-id-type="pmid">15509603</pub-id></mixed-citation>
    </ref>
    <ref id="btaa072-B12">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Westbrook</surname><given-names>J.D.</given-names></name>, <name name-style="western"><surname>Fitzgerald</surname><given-names>P.M.D.</given-names></name></person-group> (<year>2005</year>) 
<article-title>The PDB format, mmCIF formats, and other data formats</article-title>. In: <source>Structural Bioinformatics, Methods of Biochemical Analysis</source>, Vol. 44. Bourne,P.E. and Weissig,H. (eds.) 
<publisher-name>John Wiley &amp; Sons, Ltd</publisher-name>, Hoboken New Jersey. Chapter 8, pp. <fpage>159</fpage>–<lpage>179</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
