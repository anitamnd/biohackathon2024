<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7069206</article-id>
    <article-id pub-id-type="publisher-id">3429</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-3429-6</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>A big data approach to metagenomics for all-food-sequencing</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Kobus</surname>
          <given-names>Robin</given-names>
        </name>
        <address>
          <email>kobus@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Abuín</surname>
          <given-names>José M.</given-names>
        </name>
        <address>
          <email>josemanuel.abuin@usc.es</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Müller</surname>
          <given-names>André</given-names>
        </name>
        <address>
          <email>muellan@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hellmann</surname>
          <given-names>Sören Lukas</given-names>
        </name>
        <address>
          <email>lukas.hellmann@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pichel</surname>
          <given-names>Juan C.</given-names>
        </name>
        <address>
          <email>juancarlos.pichel@usc.es</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pena</surname>
          <given-names>Tomás F.</given-names>
        </name>
        <address>
          <email>tf.pena@usc.es</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hildebrandt</surname>
          <given-names>Andreas</given-names>
        </name>
        <address>
          <email>andreas.hildebrandt@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hankeln</surname>
          <given-names>Thomas</given-names>
        </name>
        <address>
          <email>hankeln@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Schmidt</surname>
          <given-names>Bertil</given-names>
        </name>
        <address>
          <email>bertil.schmidt@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 1941 7111</institution-id><institution-id institution-id-type="GRID">grid.5802.f</institution-id><institution>Department of Computer Science, Johannes Gutenberg University, </institution></institution-wrap>Mainz, 55099 Germany </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0180 6901</institution-id><institution-id institution-id-type="GRID">grid.410922.c</institution-id><institution>IPCA, Polytechnic Institute of Cávado and Ave, </institution></institution-wrap>Barcelos, 4750-810 Portugal </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000000109410645</institution-id><institution-id institution-id-type="GRID">grid.11794.3a</institution-id><institution>CiTIUS, Universidade de Santiago de Compostela, </institution></institution-wrap>Santiago de Compostela, 15782 Spain </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 1941 7111</institution-id><institution-id institution-id-type="GRID">grid.5802.f</institution-id><institution>Molecular Genetics and Genome Analysis, Institute of Organismal and Molecular Evolution, Johannes Gutenberg University, </institution></institution-wrap>Mainz, 55099 Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>12</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>102</elocation-id>
    <history>
      <date date-type="received">
        <day>19</day>
        <month>8</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>24</day>
        <month>2</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">All-Food-Sequencing (AFS) is an untargeted metagenomic sequencing method that allows for the detection and quantification of food ingredients including animals, plants, and microbiota. While this approach avoids some of the shortcomings of targeted PCR-based methods, it requires the comparison of sequence reads to large collections of reference genomes. The steadily increasing amount of available reference genomes establishes the need for efficient big data approaches.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We introduce an alignment-free <italic>k</italic>-mer based method for detection and quantification of species composition in food and other complex biological matters. It is orders-of-magnitude faster than our previous alignment-based AFS pipeline. In comparison to the established tools CLARK, Kraken2, and Kraken2+Bracken it is superior in terms of false-positive rate and quantification accuracy. Furthermore, the usage of an efficient database partitioning scheme allows for the processing of massive collections of reference genomes with reduced memory requirements on a workstation (AFS-MetaCache) or on a Spark-based compute cluster (MetaCacheSpark).</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">We present a fast yet accurate screening method for whole genome shotgun sequencing-based biosurveillance applications such as food testing. By relying on a big data approach it can scale efficiently towards large-scale collections of complex eukaryotic and bacterial reference genomes. AFS-MetaCache and MetaCacheSpark are suitable tools for broad-scale metagenomic screening applications. They are available at <ext-link ext-link-type="uri" xlink:href="https://muellan.github.io/metacache/afs.html">https://muellan.github.io/metacache/afs.html</ext-link>
(C++ version for a workstation) and <ext-link ext-link-type="uri" xlink:href="https://github.com/jmabuin/MetaCacheSpark">https://github.com/jmabuin/MetaCacheSpark</ext-link>
(Spark version for big data clusters).</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Next-generation sequencing</kwd>
      <kwd>Metagenomics</kwd>
      <kwd>Species identification</kwd>
      <kwd>Eukaryotic genomes</kwd>
      <kwd>Locality sensitive hashing</kwd>
      <kwd>Big data</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100001659</institution-id>
            <institution>Deutsche Forschungsgemeinschaft</institution>
          </institution-wrap>
        </funding-source>
        <award-id>HySim</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100003329</institution-id>
            <institution>Ministerio de Econom?a y Competitividad</institution>
          </institution-wrap>
        </funding-source>
        <award-id>RTI2018-093336-B-C21</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100010801</institution-id>
            <institution>Xunta de Galicia</institution>
          </institution-wrap>
        </funding-source>
        <award-id>ED481B 2018/013 and ED431C 2018/19</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Federal O?ce for Agriculture and Food</institution>
        </funding-source>
        <award-id>2816503814</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Monitoring of food ingredients is becoming an increasingly important task. Relevant issues include correct labeling, fraud detection, and assessment of health risks [<xref ref-type="bibr" rid="CR1">1</xref>]. This motivates the need for analytical methods that allow for accurate determination and quantification of food ingredients ideally spanning all kingdoms of life including animals, plants, bacteria, fungi, and possibly even viruses.</p>
    <p>Quantitative real-time polymerase chain reaction (qPCR) [<xref ref-type="bibr" rid="CR2">2</xref>] and droplet digital PCR (ddPCR) [<xref ref-type="bibr" rid="CR3">3</xref>] are DNA-based technologies for food control that are widely used in practice. Unfortunately, these methods are limited by the number of target species within a single assay and thus are not suitable for broad-scale species screening. Similar restrictions apply to approaches based on sequencing of species-specific DNA bar codes [<xref ref-type="bibr" rid="CR4">4</xref>].</p>
    <p>High-throughput sequencing of total metagenomic DNA from biological samples provides the possibility to screen for a wide range of species as it does not require any prior definition of possible target species. However, subsequent bioinformatic analysis of large amounts of sequence-reads is required to identify and quantify actual food components. Our All-Food-Seq (AFS) pipeline [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR6">6</xref>] maps each sequenced read to a number of reference genomes and then determines species composition and relative quantities based on a read counting procedure. Evaluation based on simulated as well as real data has demonstrated that AFS can detect anticipated species in food products and achieve quantification accuracy comparable to qPCR.</p>
    <p>However, the AFS pipeline relies on applying a read alignment tool (such as BWA [<xref ref-type="bibr" rid="CR7">7</xref>–<xref ref-type="bibr" rid="CR9">9</xref>], Bowtie2 [<xref ref-type="bibr" rid="CR10">10</xref>], or CUSHAW [<xref ref-type="bibr" rid="CR11">11</xref>]) for each considered reference genome. Thus, runtime scales linearly with the number of considered genomes. For example, the quantification of a typical short read dataset consisting of a few million reads using ten mammalian and avian reference genomes with the BWA-based AFS pipeline already requires several hours on a standard workstation (not including the time for index construction). For broader scale screening of many species a much larger amount of reference genomes would be required, making this approach unfeasible.</p>
    <p>More recently, a number of innovative techniques for fast taxonomic labeling in the field of bacterial metagenomics have been proposed. Wood and Salzberg [<xref ref-type="bibr" rid="CR12">12</xref>] demonstrated that a <italic>k</italic>-mer-based exact matching approach can achieve high read classification accuracy while being around three orders-of-magnitude faster than the alignment tool MegaBLAST. It relies on building a database of all substrings of length <italic>k</italic> of each considered (bacterial) reference genome. A read is classified by querying the database using each of its <italic>k</italic>-mers as query. If a query returns a match a counter for the corresponding reference genome(s) is incremented. Finally, a read is taxonomically labeled based on high-scoring counters. Recent benchmark studies [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>] demonstrated that <italic>k</italic>-mer based tools such as Kraken [<xref ref-type="bibr" rid="CR12">12</xref>], Kraken2+Bracken [<xref ref-type="bibr" rid="CR15">15</xref>], CLARK [<xref ref-type="bibr" rid="CR16">16</xref>], and MetaCache [<xref ref-type="bibr" rid="CR17">17</xref>] can produce superior read assignment accuracy compared to several other tools including MetaPhlAn [<xref ref-type="bibr" rid="CR18">18</xref>], mOTU [<xref ref-type="bibr" rid="CR19">19</xref>], QIIME [<xref ref-type="bibr" rid="CR20">20</xref>], and Kaiju [<xref ref-type="bibr" rid="CR21">21</xref>] for selected bacterial metagenomic datasets. While being accurate, the major drawback of the <italic>k</italic>-mer based approach is high main memory consumption and long database construction times. For typical bacterial reference genome sets the databases used by Kraken and CLARK already consume several hundreds of gigabytes in size. The significantly higher complexities of eukaryotic reference genomes relevant for monitoring food ingredients therefore make an extension of this method to food-monitoring challenging.</p>
    <p>Here, we present a novel computational method for broad-scale detection and quantification of species composition in food and other complex biological matters. It is based on our recently introduced MetaCache [<xref ref-type="bibr" rid="CR17">17</xref>] bacterial metagenomic read classification algorithm. We employ a big data technique called minhashing to subsample <italic>k</italic>-mers in an intelligent way, thereby reducing the amount of stored <italic>k</italic>-mers by an order-of-magnitude. In this paper we show how this method can be extended from the taxonomic labeling of bacterial reads to the detection and quantification of ingredients in food samples that can span various kingdoms of life. MetaCache is augmented with the ability to estimate the abundance of organisms at a selectable taxonomic level as well as the possibility to filter out target references based on sequence coverage. Furthermore, we combine the minhashing algorithm used by MetaCache with efficient partitioning schemes. This allows us to employ databases that index large collections of reference genomes efficiently in terms of both construction times and memory consumption. We present two partitioning schemes and provide corresponding implementations for standard workstations based on C++ (AFS-MetaCache) and for big data clusters based on Apache Spark (MetaCacheSpark). Both version can be used as substitutes for the alignment tools previously employed in the AFS pipeline.</p>
    <p>Our experimental results using a number of sequenced calibrator sausages of known species composition show that AFS-MetaCache runs orders-of-magnitude faster than the alignment-based AFS pipeline while yielding similar results. Furthermore, AFS-MetaCache and MetaCacheSpark yield lower false-positive rates and higher quantification accuracy compared to Kraken2, Kraken2+Bracken, and CLARK. They also provide faster database construction times and competitive query speeds. Our database partitioning scheme allows the reduction of peak main memory consumption on a single workstation or a cluster node significantly and therefore enables scalability to growing genome collections.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Approach</title>
      <p>Many tools in metagenomics struggle to keep pace with the increasing amount of available reference genomes. We address this issue by aiming at species identification and quantification at a large scale by using a combination of two big data techniques.</p>
      <p>Minhashing: We adopt <italic>minhashing</italic>– a locality sensitive hashing (LSH) based data subsampling technique. It has been successfully applied by search engines to detect near duplicate web pages [<xref ref-type="bibr" rid="CR22">22</xref>] but has recently gained popularity in bioinformatics with example applications including genome assembly [<xref ref-type="bibr" rid="CR23">23</xref>], sequence clustering [<xref ref-type="bibr" rid="CR24">24</xref>], and privacy-preserving read mapping [<xref ref-type="bibr" rid="CR25">25</xref>]. Mash Screen [<xref ref-type="bibr" rid="CR26">26</xref>] also employs minhashing for metagenomic analysis. While it allows to identify genomes contained in a sample, Mash Screen is not able to classify individual reads or quantify abundances by itself. Partitioning: Because the RAM of a single workstation or a cluster node can become insufficient to hold a complete reference database, we employ a partitioning scheme to divide reference sequences into multiple chunks. The partitions can be queried successively on a single workstation or among multiple worker nodes of a distributed compute cluster. In order to support these two types of compute resources we have developed (<italic>i</italic>) AFS-MetaCache: a C++ version for individual workstations, and (<italic>ii</italic>) MetaCacheSpark: a distributed version based on the big data analytics engine Apache Spark [<xref ref-type="bibr" rid="CR27">27</xref>] for compute clusters.
</p>
    </sec>
    <sec id="Sec4">
      <title>Database construction</title>
      <p>Consider a collection <italic>G</italic> of <italic>m</italic> genomic sequences (reference genomes). Each reference genome is divided into windows of size <italic>l</italic> which overlap by <italic>k</italic>−1 base-pairs. Typically, <italic>l</italic> is of similar size to the anticipated read length (e.g. <italic>l</italic>=128 for Illumina data as default). For each window a <italic>sketch</italic> is calculated using minhashing. A sketch consists of the <italic>s</italic> smallest <italic>k</italic>-mers (in strand-neutral canonical representation) contained in the window with respect to an applied hash function <italic>h</italic><sub>1</sub>. Thus, the sketching procedure selects only a subset of <italic>k</italic>-mers to be inserted into the database used for similarity computation. Assuming unique <italic>k</italic>-mers, the subsampling factor can be determined as <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$S = \frac {l-k+1}{s}$\end{document}</tex-math><mml:math id="M2"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>l</mml:mi><mml:mo>−</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="12859_2020_3429_Article_IEq1.gif"/></alternatives></inline-formula>; i.e. for typical values such as <italic>s</italic>=8, <italic>k</italic>=16, and <italic>l</italic>=128 this corresponds to a data reduction by over an order-of-magnitude (<italic>S</italic>=14.125). Besides providing data reduction, minhashing also exhibits a desirable mathematical property when comparing two sketches: The relative intersection ratio between two sketched windows approximates the true Jaccard index evaluated on the whole <italic>k</italic>-mer space [<xref ref-type="bibr" rid="CR22">22</xref>].</p>
      <p>The hash table (database) for a given collection of reference genomes is constructed using open addressing. The entries of the hash table consist of key-target-list pairs. An associated hash function <italic>h</italic><sub>2</sub> maps <italic>k</italic>-mers to slots in the hash table. If an identified slot is empty or occupied with the same <italic>k</italic>-mer, the corresponding <italic>k</italic>-mer is inserted as key and the corresponding location (genome ID, window ID) is appended to the target-list. If the slot is occupied by a different <italic>k</italic>-mer quadratic probing is used to iterate to the next slot. Target lists have a pre-defined maximum length. If the maximum length is reached, the corresponding <italic>k</italic>-mer is considered uninformative and deleted from the hash table at the end of the construction.</p>
      <p>In the big data scenario we need to consider cases where the database is too large to fit into the RAM of a single workstation or a cluster node. Hence, it needs to be split into multiple parts which can be queried successively or distributed among multiple worker nodes of a cluster. Partitioning divides the collection of reference genomes <italic>G</italic> of total base-pair length <italic>M</italic> into disjoint buckets <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$G = \bigcup _{i=1}^{n}G^{i}$\end{document}</tex-math><mml:math id="M4"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:munderover><mml:mrow><mml:mo>⋃</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:munderover><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msup></mml:math><inline-graphic xlink:href="12859_2020_3429_Article_IEq2.gif"/></alternatives></inline-formula> of roughly equal size; i.e. <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$G^{i} = \{ G^{i}_{1}, \ldots, G^{i}_{n_{i}}\}$\end{document}</tex-math><mml:math id="M6"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup><mml:mo>}</mml:mo></mml:math><inline-graphic xlink:href="12859_2020_3429_Article_IEq3.gif"/></alternatives></inline-formula> where <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$ N_{i} = \sum _{j=1}^{n_{i}} \left | G^{i}_{j} \right | \approx M/n$\end{document}</tex-math><mml:math id="M8"><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:munderover><mml:mfenced close="|" open="|" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced><mml:mo>≈</mml:mo><mml:mi>M</mml:mi><mml:mo>/</mml:mo><mml:mi>n</mml:mi></mml:math><inline-graphic xlink:href="12859_2020_3429_Article_IEq4.gif"/></alternatives></inline-formula>. The partition size <italic>N</italic><sub><italic>i</italic></sub> can be chosen depending on the available main memory resources and the subsampling factor <italic>S</italic>. For each partition <italic>G</italic><sup><italic>i</italic></sup> a separate hash table (database) is constructed by the aforementioned method. Our partitioning scheme is illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref>(a) and database construction in Fig. <xref rid="Fig1" ref-type="fig">1</xref>(b).
<fig id="Fig1"><label>Fig. 1</label><caption><p>Workflow: (<bold>a</bold>) Partitioning: reference sequences are divided into the sets <italic>G</italic><sup>1</sup> and <italic>G</italic><sup>2</sup>. Each reference is further partitioned into slightly overlapping windows <italic>w</italic><sub><italic>i</italic></sub>. (<bold>b</bold>) Database construction: the <italic>s</italic> smallest <italic>k</italic>-mers of each window are computed and inserted into the database. (<bold>c</bold>) Classification: a database is queried with the <italic>s</italic> smallest <italic>k</italic>-mers of a read. The returned hits are used to count the number of hits within each window. Target reference genomes are identified by high scores in the window count statistics. In case of several partitions, the top hits from querying each database need to be merged in order to assign a read to a reference genome. After all reads have been processed, coverage check and quantification are performed</p></caption><graphic xlink:href="12859_2020_3429_Fig1_HTML" id="MO1"/></fig>
</p>
      <sec id="Sec5">
        <title>Single workstation</title>
        <p>AFS-MetaCache constructs a separate database for each partition of reference sequences <italic>G</italic><sup><italic>i</italic></sup> and stores it as a database file on disk. We also allow to add sequences to previously constructed databases. This makes it easy to modify the set of reference genomes by either swapping out database partitions or including more sequences.</p>
      </sec>
      <sec id="Sec6">
        <title>Spark</title>
        <p>Apache Spark is a distributed memory computing engine [<xref ref-type="bibr" rid="CR27">27</xref>]. It is able to process a large quantity of input data in parallel thanks to the combination of the Hadoop Distributed File System (HDFS) and Resilient Distributed Datasets (RDDs). These two features are used by MetaCacheSpark. Our algorithm consists of four phases that are illustrated in Fig. <xref rid="Fig2" ref-type="fig">2</xref>.
<list list-type="order"><list-item><p>Reference genome sequences are loaded from HDFS and distributed proportionally among the Spark executors. In this way, each executor will contain a different subset of sequences to work with.
</p></list-item><list-item><p>With these sequences loaded into memory, the Spark executors perform the described minhashing algorithm. Results are stored in a executor-local C++ hash table, similar to the one used by AFS-MetaCache.</p></list-item><list-item><p>We apply a map-reduce operation where the map operator receives the number of items belonging to the same key in each executor, and the reduction phase sums up the number of items calculating a global count. If the global item count per key exceeds a given threshold (by default 254), the corresponding items are deleted from all the executor-local hash tables.</p></list-item><list-item><p>Each hash table is written to a database file stored in HDFS.</p></list-item></list></p>
        <p>At the end of the process, each executor will contain one, and only one, hash table. Note that a key can be present in several hash tables. However, items belonging to the same target ID (i.e., to the same reference sequence) will be present only in one hash table (this is important for the subsequent read assignment phase).</p>
        <p>Furthermore, both versions have a pre-processing phase prior to database construction that builds a taxonomic tree of the considered reference genomes.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Database construction algorithm used by MetaCacheSpark</p></caption><graphic xlink:href="12859_2020_3429_Fig2_HTML" id="MO2"/></fig>
</p>
      </sec>
    </sec>
    <sec id="Sec7">
      <title>Individual read assignment</title>
      <p>In order to assign reads to reference genome(s) minhashing is applied to any given read <italic>R</italic> in the same way as to a reference genome window using the hash function <italic>h</italic><sub>1</sub>. The produced sketch is used to query a loaded hash table using the hash function <italic>h</italic><sub>2</sub>. Each query returns a (possibly empty) target list. The target lists are merged into a sparse two-dimensional data structure (called <italic>window count statistic</italic>) by accumulating identical (genome ID, window ID) pairs. High values in the window count statistic indicate a match of the read in the corresponding genome. The counts are sorted in descending order and the targets with the highest counts are considered in order to classify a read. This process is illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref>(c).</p>
      <p>However, a match of a paired-end (or even a single-end) read typically corresponds to a region in the genome that overlaps the borders of two or more windows in this genome. Thus, we accumulate the counters spanning a contiguous range of several neighboring windows to find the ranges with maximum hit counts. The considered read is assigned to the genome containing the best final count if it is significantly higher than the second best. If the count difference is small, the read is assigned to the lowest common ancestor (LCA) of multiple candidate genomes which are in a similar count range using the provided taxonomic tree.</p>
      <sec id="Sec8">
        <title>Single workstation</title>
        <p>AFS-MetaCache reads the database partitions from disk and queries them with the set of reads in succession. Subsequently, the individual results are merged to determine the final classification for each read. We further support multi-threading by processing chunks of reads independently in order to exploit multiple CPU cores.</p>
      </sec>
      <sec id="Sec9">
        <title>Spark</title>
        <p>Two inputs are needed: the database files created in the build phase and the input reads to be processed. The MetaCacheSpark algorithm consists of four steps (see Fig. <xref rid="Fig3" ref-type="fig">3</xref>):
<list list-type="order"><list-item><p>Each hash table is loaded into the main memory of one executor. Furthermore, the taxonomy is loaded only in the Spark driver.
</p></list-item><list-item><p>All executors read a block of <italic>N</italic> input reads to be processed from HDFS. Note that every executor needs to read all of them since the hash table is distributed. While reading the input sequences, each executor queries its local hash table to compute the (local) classification candidates with their corresponding hits. This process returns a set of key-value pairs, where the key is the ID of the read being processed, and the value is a list of possible candidates with their corresponding hit counts.</p></list-item><list-item><p>The next step is a reduction phase. Here, partial results from each executor are grouped using read IDs as keys. The driver then collects the <italic>N</italic> results and performs the assignment of reads to reference genomes (classification). This step uses the Spark function <italic>reduceByKey()</italic>, and it requires a <italic>shuffle</italic>.</p></list-item><list-item><p>Classification results from the previous step are written to the output file in HDFS. The algorithm goes back to Step 2 to process the next chunk of reads.</p></list-item></list>
<fig id="Fig3"><label>Fig. 3</label><caption><p>Individual read classification algorithm used by the MetaCacheSpark</p></caption><graphic xlink:href="12859_2020_3429_Fig3_HTML" id="MO3"/></fig>
</p>
        <p>It is also important to note that:
<list list-type="bullet"><list-item><p>There is a guarantee that items belonging to the same reference sequence during the build phase are present in the same local hash table. Otherwise, calculating the hits in Step 2 would involve a distributed operation (such as <italic>groupByKey()</italic>) that would cause severe performance degradation.</p></list-item><list-item><p>To gain speed, we further support multi-threading. Each thread processes a different set of input reads by means of a map-reduce job that corresponds to Steps 3 and 4.</p></list-item><list-item><p>The reduction generates a lot of traffic over the network and requires an expensive shuffle operation. In order to reduce the associated communication overhead, we have introduced an optional parameter (<italic>H</italic>) that is used to discard all candidates in Step 2 and Step 3 with less than <italic>H</italic> hits. However, if this parameter is used, results can be slightly different compared to the single workstation version.</p></list-item></list></p>
      </sec>
    </sec>
    <sec id="Sec10">
      <title>Coverage filter</title>
      <p>False positive read assignments can be caused by shared regions of DNA among multiple reference genomes [<xref ref-type="bibr" rid="CR28">28</xref>]. We use coverage information to detect some of these cases as follows.</p>
      <p>Before assigning reads to classification targets we can filter the list of candidate genomes identified during the read assignment phase by checking the coverage per genome as follows. We analyze which windows of a target genome are covered by reads from the dataset. If the percentage of covered windows of a genome is much lower compared to other genomes, it is likely to be a false positive and will be deleted from the list of possible target genomes. In fact we delete a quantile (e.g. 10%) of the target genomes with the lowest coverage. The reads are then classified with respect to the remaining genomes.</p>
      <p>Note that this strategy is only applicable if the number of reads is large enough to cover significant parts of the genomes. In our experience it proofed especially efficient in case of bacterial genomes which are orders of magnitudes smaller than animal or plant genomes.</p>
    </sec>
    <sec id="Sec11">
      <title>Quantification</title>
      <p>In addition to the per-read classification we are able to estimate the abundances of organisms contained in a dataset at a specific taxonomical rank. For each taxon which occurs in the dataset we count the number of reads assigned to it. We then build a taxonomic tree containing all found taxa.</p>
      <p>Taxa on lower levels than the requested taxonomic rank are pruned and their read counts are added to their respective parents, while reads from taxa on higher levels are distributed among their children in proportion to the weights of the sub-trees rooted at each child. After the redistribution the estimated number of reads and abundance percentages are returned as outputs.</p>
    </sec>
  </sec>
  <sec id="Sec12" sec-type="results">
    <title>Results</title>
    <sec id="Sec13">
      <title>Datasets</title>
      <p>In order to measure performance and accuracy of our approach in comparison to other metagenomic tools, we have created databases of varying size containing different organisms. Food-related genomes (selection of main ingredients) used for database construction are listed in Table <xref rid="Tab1" ref-type="table">1</xref> while the considered bacteria, viruses, and archaea from NCBI RefSeq (Release 90) are summarized in Table <xref rid="Tab2" ref-type="table">2</xref>. The created databases with their included reference genomes are described in Table <xref rid="Tab3" ref-type="table">3</xref>.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Food-related reference genomes used for database construction</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Item</bold></th><th align="left"><bold>Name</bold></th><th align="left"><bold>ID</bold></th><th align="left"><bold>Size on disk</bold></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Sus scrofa (pig)</td><td align="left">GCF_000003025.6</td><td align="left">2.4GB</td></tr><tr><td align="left">2</td><td align="left">Equus caballus (horse)</td><td align="left">GCF_002863925.1</td><td align="left">2.4GB</td></tr><tr><td align="left">3</td><td align="left">Meleagris gallopavo (turkey)</td><td align="left">GCF_000146605.2</td><td align="left">1.2GB</td></tr><tr><td align="left">4</td><td align="left">Mus musculus (house mouse)</td><td align="left">GCF_000001635.26</td><td align="left">2.7GB</td></tr><tr><td align="left">5</td><td align="left">Gallus gallus (chicken)</td><td align="left">GCF_000002315.5</td><td align="left">1.1GB</td></tr><tr><td align="left">6</td><td align="left">Ovis aries (sheep)</td><td align="left">GCF_000298735.2</td><td align="left">2.5GB</td></tr><tr><td align="left">7</td><td align="left">Rattus norvegicus (Norway rat)</td><td align="left">GCF_000001895.5</td><td align="left">2.8GB</td></tr><tr><td align="left">8</td><td align="left">Bos taurus (cattle)</td><td align="left">GCF_002263795.1</td><td align="left">2.6GB</td></tr><tr><td align="left">9</td><td align="left">Bubalus bubalis (water buffalo)</td><td align="left">GCF_003121395.1</td><td align="left">2.6GB</td></tr><tr><td align="left">10</td><td align="left">Cervus elaphus hippelaphus (red deer)</td><td align="left">GCA_002197005.1</td><td align="left">3.3GB</td></tr><tr><td align="left">11</td><td align="left">Capreolus capreolus (Western roe deer)</td><td align="left">GCA_000751575.1</td><td align="left">3.0GB</td></tr><tr><td align="left">12</td><td align="left">Struthio camelus australis (African ostrich)</td><td align="left">GCA_000698965.1</td><td align="left">1.2GB</td></tr><tr><td align="left">13</td><td align="left">Anas platyrhynchos (mallard)</td><td align="left">GCF_003850225.1</td><td align="left">1.1GB</td></tr><tr><td align="left">14</td><td align="left">Capra hircus (goat)</td><td align="left">GCF_001704415.1</td><td align="left">2.8GB</td></tr><tr><td align="left">15</td><td align="left">Oryctolagus cuniculus (rabbit)</td><td align="left">GCF_000003625.3</td><td align="left">2.6GB</td></tr><tr><td align="left">16</td><td align="left">Cavia aperea (Brazilian guinea pig)</td><td align="left">GCA_000688575.1</td><td align="left">2.6GB</td></tr><tr><td align="left">17</td><td align="left">Camelus ferus (Wild Bactrian camel)</td><td align="left">GCF_000311805.1</td><td align="left">1.9GB</td></tr><tr><td align="left">18</td><td align="left">Canis lupus familiaris (dog)</td><td align="left">GCF_000002285.3</td><td align="left">2.3GB</td></tr><tr><td align="left">19</td><td align="left">Felis catus (domestic cat)</td><td align="left">GCF_000181335.3</td><td align="left">2.4GB</td></tr><tr><td align="left">20</td><td align="left">Homo sapiens (human)</td><td align="left">GCF_000001405.38</td><td align="left">3.1GB</td></tr><tr><td align="left">21</td><td align="left">Equus asinus (ass)</td><td align="left">GCA_001305755.1</td><td align="left">2.3GB</td></tr><tr><td align="left">22</td><td align="left">Rangifer tarandus (reindeer)</td><td align="left">GCA_004026565.1</td><td align="left">2.9GB</td></tr><tr><td align="left">23</td><td align="left">Phasianus colchicus (Ring-necked pheasant)</td><td align="left">GCA_004143745.1</td><td align="left">987MB</td></tr><tr><td align="left">24</td><td align="left">Glycine max (soybean)</td><td align="left">GCF_000004515.5</td><td align="left">946MB</td></tr><tr><td align="left">25</td><td align="left">Zea mays (maize)</td><td align="left">GCF_000005005.2</td><td align="left">2.1GB</td></tr><tr><td align="left">26</td><td align="left">Triticum aestivum (bread wheat)</td><td align="left">GCA_900519105.1</td><td align="left">14.0GB</td></tr><tr><td align="left">27</td><td align="left">Secale cereale (rye)</td><td align="left">GCA_900079665.1</td><td align="left">1.8GB</td></tr><tr><td align="left">28</td><td align="left">Hordeum vulgare (barley)</td><td align="left">GCA_004114815.1</td><td align="left">3.8GB</td></tr><tr><td align="left">29</td><td align="left">Oryza sativa Japonica Group (Japanese rice)</td><td align="left">GCF_001433935.1</td><td align="left">362MB</td></tr><tr><td align="left">30</td><td align="left">Arachis hypogaea (peanut)</td><td align="left">GCF_003086295.1</td><td align="left">2.4GB</td></tr><tr><td align="left">31</td><td align="left">Saccharomyces cerevisiae S288C (baker’s yeast)</td><td align="left">GCA_000146045.2</td><td align="left">12MB</td></tr><tr><td align="left"><bold>Total</bold></td><td align="left"/><td align="left"/><td align="left"><bold>74GB</bold></td></tr></tbody></table></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption><p>Reference genomes from NCBI RefSeq (Release 90) used for database construction</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Organism</bold></th><th align="left"><bold>Number of references</bold></th><th align="left"><bold>Size on disk</bold></th></tr></thead><tbody><tr><td align="left">Bacteria</td><td align="left">10838</td><td align="left">41.0GB</td></tr><tr><td align="left">Viral</td><td align="left">7857</td><td align="left">269MB</td></tr><tr><td align="left">Archaea</td><td align="left">269</td><td align="left">656MB</td></tr><tr><td align="left"><bold>Total</bold></td><td align="left"><bold>18964</bold></td><td align="left"><bold>41.9GB</bold></td></tr></tbody></table></table-wrap><table-wrap id="Tab3"><label>Table 3</label><caption><p>Data sets used for database construction</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Name</bold></th><th align="left"><bold>Number of species</bold></th><th align="left"><bold>Size on disk</bold></th></tr></thead><tbody><tr><td align="left"><bold>AFS10</bold></td><td align="justify">Animal genomes from 1 to 10</td><td align="left">22.3GB</td></tr><tr><td align="left"><bold>AFS20</bold></td><td align="justify">Animal genomes from 1 to 20</td><td align="left">45.8GB</td></tr><tr><td align="left"><bold>AFS20RS90</bold></td><td align="justify">Animal genomes from 1 to 20 plus NCBI RefSeq (Release 90)</td><td align="left">87.5GB</td></tr><tr><td align="left"><bold>AFS31</bold></td><td align="justify">Animal genomes from 1 to 31</td><td align="left">76.8GB</td></tr><tr><td align="left"><bold>AFS31RS90</bold></td><td align="justify">Animal genomes from 1 to 31 plus NCBI RefSeq (Release 90)</td><td align="left">118.5GB</td></tr></tbody></table></table-wrap>
</p>
      <p>We use ten short read datasets sequenced from calibrator sausage samples containing admixtures of a set of food relevant ingredients (chicken, turkey, pork, beef, horse, sheep) on an Illumina HiSeq machine (downloaded from ENA project ID PRJNA271645 (Kal_D and KAL_D) and PRJEB34001 (all other data)). Table <xref rid="Tab4" ref-type="table">4</xref> shows the read datasets together with the corresponding percentage of meat components used during preparation. The samples comprise meat proportions ranging from 0.5% to 80% and can be subdivided into two categories: Kal A-E consist only of mammalian meat, while KLyo A-D represent Lyoner-like sausages containing poultry in addition to mammals [<xref ref-type="bibr" rid="CR29">29</xref>, <xref ref-type="bibr" rid="CR30">30</xref>]. The dataset KAL_D is identical to Kal_D but sequenced with higher coverage.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Calibrator sausage datasets and their meat composition</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Name</bold></th><th align="left"><bold>#Reads (paired-end)</bold></th><th align="left"><bold>Cattle</bold></th><th align="left"><bold>Sheep</bold></th><th align="left"><bold>Pig</bold></th><th align="left"><bold>Horse</bold></th><th align="left"><bold>Chicken</bold></th><th align="left"><bold>Turkey</bold></th></tr></thead><tbody><tr><td align="left">KLyo_A</td><td align="justify">401K</td><td align="left">14.0%</td><td align="left">0.0%</td><td align="left">80.0%</td><td align="left">0.0%</td><td align="left">0.5%</td><td align="left">5.5%</td></tr><tr><td align="left">KLyo_B</td><td align="justify">302K</td><td align="left">36.0%</td><td align="left">0.0%</td><td align="left">58.0%</td><td align="left">0.0%</td><td align="left">2.0%</td><td align="left">4.0%</td></tr><tr><td align="left">KLyo_C</td><td align="justify">507K</td><td align="left">58.0%</td><td align="left">0.0%</td><td align="left">36.0%</td><td align="left">0.0%</td><td align="left">4.0%</td><td align="left">2.0%</td></tr><tr><td align="left">KLyo_D</td><td align="justify">417K</td><td align="left">80.0%</td><td align="left">0.0%</td><td align="left">14.0%</td><td align="left">0.0%</td><td align="left">5.5%</td><td align="left">0.5%</td></tr><tr><td align="left">Kal_A</td><td align="justify">830K</td><td align="left">1.0%</td><td align="left">9.0%</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr><tr><td align="left">Kal_B</td><td align="justify">977K</td><td align="left">9.0%</td><td align="left">1.0%</td><td align="left">55.0%</td><td align="left">35.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr><tr><td align="left">Kal_C</td><td align="justify">404K</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr><tr><td align="left">Kal_D</td><td align="justify">403K</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">9.0%</td><td align="left">1.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr><tr><td align="left">Kal_E</td><td align="justify">289K</td><td align="left">55.0%</td><td align="left">35.0%</td><td align="left">1.0%</td><td align="left">9.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr><tr><td align="left">KAL_D</td><td align="justify">26,114K</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">9.0%</td><td align="left">1.0%</td><td align="left">0.0%</td><td align="left">0.0%</td></tr></tbody></table></table-wrap>
</p>
    </sec>
    <sec id="Sec14">
      <title>Quantification accuracy</title>
      <p>Tables <xref rid="Tab5" ref-type="table">5</xref> and <xref rid="Tab6" ref-type="table">6</xref> show the quantification results returned by the tested tools (AFS-MetaCache (v.0.5.3), MetaCacheSpark, CLARK (v.1.2.6), Kraken2 (v.2.0.7-beta), and Kraken2 with subsequent abundance estimation by Bracken v.2.0.0 – all executed with default parameters) using AFS20 as reference database. Besides showing the quantification for each included meat component, we also show the (false positive) results for water buffalo (closely related to cattle) and goat (closely related to sheep). In addition, we provide the sum of all false positive (<italic>Σ</italic> FP) read classifications over all of the detected reference genomes that were not included in the sample. In addition, the sum of the deviations of the measured proportions to the real sausage composition (<italic>Σ</italic> Dev) as well as the averages over all tested datasets are shown.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Quantification results for the Klyo samples using the reference dataset AFS20 and the average result for AFS31RS90</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Dataset</bold></th><th align="left"><bold>Classifier</bold></th><th align="left"><bold>Cattle</bold></th><th align="left"><bold>Pig</bold></th><th align="left"><bold>W.Buf.</bold></th><th align="left"><bold>Goat</bold></th><th align="left"><bold>Chicken</bold></th><th align="left"><bold>Turkey</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> FP</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> Dev</bold></th></tr></thead><tbody><tr><td align="left">KLyo_A</td><td align="left">Expected</td><td align="left">14.0%</td><td align="left">80.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left">0.50%</td><td align="left">5.50%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">16.6%</td><td align="left">71.5%</td><td align="left">0.04%</td><td align="left">0.02%</td><td align="left">0.60%</td><td align="left">4.64%</td><td align="left"><bold>0.28</bold>%</td><td align="left"><bold>12.39</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">16.9%</td><td align="left">71.2%</td><td align="left">0.04%</td><td align="left">0.02%</td><td align="left">0.60%</td><td align="left">4.64%</td><td align="left">0.32%</td><td align="left">12.99%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">16.4%</td><td align="left">70.4%</td><td align="left">0.20%</td><td align="left">0.09%</td><td align="left">0.62%</td><td align="left">4.61%</td><td align="left">0.51%</td><td align="left">13.55%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">15.9%</td><td align="left">70.0%</td><td align="left">0.27%</td><td align="left">0.11%</td><td align="left">0.65%</td><td align="left">4.59%</td><td align="left">0.87%</td><td align="left">13.82%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">17.6%</td><td align="left">70.3%</td><td align="left">0.30%</td><td align="left">0.14%</td><td align="left">0.66%</td><td align="left">4.63%</td><td align="left">0.97%</td><td align="left">15.33%</td></tr><tr><td align="left">KLyo_B</td><td align="left">Expected</td><td align="left">36.0%</td><td align="left">58.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left">2.00%</td><td align="left">4.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">37.6%</td><td align="left">51.0%</td><td align="left">0.12%</td><td align="left">0.04%</td><td align="left">2.05%</td><td align="left">2.99%</td><td align="left"><bold>0.50</bold>%</td><td align="left">10.16%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">37.9%</td><td align="left">50.5%</td><td align="left">0.12%</td><td align="left">0.04%</td><td align="left">2.06%</td><td align="left">3.02%</td><td align="left">0.60%</td><td align="left">11.11%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">35.9%</td><td align="left">50.4%</td><td align="left">0.47%</td><td align="left">0.19%</td><td align="left">2.10%</td><td align="left">3.01%</td><td align="left">1.03%</td><td align="left"><bold>9.84</bold>%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">34.5%</td><td align="left">49.9%</td><td align="left">0.68%</td><td align="left">0.24%</td><td align="left">2.12%</td><td align="left">2.99%</td><td align="left">1.57%</td><td align="left">12.11%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">39.1%</td><td align="left">50.2%</td><td align="left">0.32%</td><td align="left">0.78%</td><td align="left">2.15%</td><td align="left">3.02%</td><td align="left">1.84%</td><td align="left">13.93%</td></tr><tr><td align="left">KLyo_C</td><td align="left">Expected</td><td align="left">58.0%</td><td align="left">36.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left">4.00%</td><td align="left">2.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">57.7%</td><td align="left">27.1%</td><td align="left">0.16%</td><td align="left">0.06%</td><td align="left">3.56%</td><td align="left">1.16%</td><td align="left"><bold>0.95</bold>%</td><td align="left"><bold>11.47</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">57.7%</td><td align="left">26.9%</td><td align="left">0.16%</td><td align="left">0.06%</td><td align="left">3.63%</td><td align="left">1.18%</td><td align="left">0.95%</td><td align="left">11.48%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">54.1%</td><td align="left">25.9%</td><td align="left">0.69%</td><td align="left">0.29%</td><td align="left">3.58%</td><td align="left">1.16%</td><td align="left">1.88%</td><td align="left">17.11%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">52.2%</td><td align="left">25.7%</td><td align="left">0.95%</td><td align="left">0.36%</td><td align="left">3.57%</td><td align="left">1.17%</td><td align="left">2.58%</td><td align="left">19.94%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">58.6%</td><td align="left">25.8%</td><td align="left">1.07%</td><td align="left">0.46%</td><td align="left">3.60%</td><td align="left">1.18%</td><td align="left">2.89%</td><td align="left">14.90%</td></tr><tr><td align="left">KLyo_D</td><td align="left">Expected</td><td align="left">80.0%</td><td align="left">14.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left">5.50%</td><td align="left">0.50%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">74.7%</td><td align="left">10.9%</td><td align="left">0.23%</td><td align="left">0.08%</td><td align="left">4.66%</td><td align="left">0.33%</td><td align="left"><bold>0.93</bold>%</td><td align="left">10.27%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">74.7%</td><td align="left">10.8%</td><td align="left">0.23%</td><td align="left">0.08%</td><td align="left">4.69%</td><td align="left">0.33%</td><td align="left">1.09%</td><td align="left">10.58%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">70.8%</td><td align="left">10.8%</td><td align="left">0.94%</td><td align="left">0.39%</td><td align="left">4.73%</td><td align="left">0.35%</td><td align="left">1.94%</td><td align="left">15.27%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">68.0%</td><td align="left">10.7%</td><td align="left">1.26%</td><td align="left">0.48%</td><td align="left">4.70%</td><td align="left">0.36%</td><td align="left">2.42%</td><td align="left">18.62%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">77.6%</td><td align="left">10.8%</td><td align="left">1.45%</td><td align="left">0.62%</td><td align="left">4.76%</td><td align="left">0.36%</td><td align="left">2.87%</td><td align="left"><bold>9.35</bold>%</td></tr><tr><td align="left">Average</td><td align="left">AFS-MC</td><td align="left"/><td align="left"/><td align="left"><bold>0.14</bold>%</td><td align="left"><bold>0.05</bold>%</td><td align="left"/><td align="left"/><td align="left"><bold>0.67</bold>%</td><td align="left"><bold>11.07</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left"/><td align="left"/><td align="left"><bold>0.14</bold>%</td><td align="left"><bold>0.05</bold>%</td><td align="left"/><td align="left"/><td align="left">0.74%</td><td align="left">11.54%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left"/><td align="left"/><td align="left">0.58%</td><td align="left">0.24%</td><td align="left"/><td align="left"/><td align="left">1.34%</td><td align="left">13.94%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left"/><td align="left"/><td align="left">0.79%</td><td align="left">0.30%</td><td align="left"/><td align="left"/><td align="left">1.86%</td><td align="left">16.12%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left"/><td align="left"/><td align="left">0.71%</td><td align="left">0.50%</td><td align="left"/><td align="left"/><td align="left">2.14%</td><td align="left">13.38%</td></tr><tr><td align="left">AFS31RS90</td><td align="left">AFS-MC</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"><bold>0.58</bold>%</td><td align="left"><bold>13.97</bold>%</td></tr><tr><td align="left">Average</td><td align="left">MCSpark</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left">0.59%</td><td align="left">14.08%</td></tr></tbody></table><table-wrap-foot><p>AFS-MC: AFS-MetaCache, MC-Spark: MetaCacheSpark, K2+Brack: Kraken2 with subsequent Bracken, W.Buf: Water Buffalo, <italic>Σ</italic> FP: Sum of all false positive read classifications, <italic>Σ</italic> Dev: Sum of absolute deviations to the given meat composition (best results for each dataset in bold)</p></table-wrap-foot></table-wrap><table-wrap id="Tab6"><label>Table 6</label><caption><p>Quantification results for the Kal samples using the reference dataset AFS20 and the average result for AFS31RS90</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Dataset</bold></th><th align="left"><bold>Classifier</bold></th><th align="left"><bold>Cattle</bold></th><th align="left"><bold>Sheep</bold></th><th align="left"><bold>Pig</bold></th><th align="left"><bold>Horse</bold></th><th align="left"><bold>W.Buf.</bold></th><th align="left"><bold>Goat</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> FP</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> Dev</bold></th></tr></thead><tbody><tr><td align="left">Kal_A</td><td align="left">Expected</td><td align="left">1.00%</td><td align="left">9.0%</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">1.25%</td><td align="left">11.0%</td><td align="left">30.5%</td><td align="left">54.1%</td><td align="left">0.01%</td><td align="left">0.29%</td><td align="left"><bold>0.42</bold>%</td><td align="left">8.13%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">1.27%</td><td align="left">11.1%</td><td align="left">30.3%</td><td align="left">54.1%</td><td align="left">0.01%</td><td align="left">0.29%</td><td align="left">0.45%</td><td align="left">8.42%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">1.29%</td><td align="left">9.1%</td><td align="left">31.1%</td><td align="left">54.0%</td><td align="left">0.09%</td><td align="left">0.89%</td><td align="left">1.15%</td><td align="left"><bold>6.43</bold>%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">1.23%</td><td align="left">8.7%</td><td align="left">30.9%</td><td align="left">53.9%</td><td align="left">0.08%</td><td align="left">0.96%</td><td align="left">1.31%</td><td align="left">6.99%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">1.43%</td><td align="left">10.3%</td><td align="left">31.0%</td><td align="left">54.0%</td><td align="left">0.10%</td><td align="left">1.12%</td><td align="left">1.53%</td><td align="left">8.24%</td></tr><tr><td align="left">Kal_B</td><td align="left">Expected</td><td align="left">9.0%</td><td align="left">1.00%</td><td align="left">55.0%</td><td align="left">35.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">10.5%</td><td align="left">1.42%</td><td align="left">49.3%</td><td align="left">35.6%</td><td align="left">0.03%</td><td align="left">0.06%</td><td align="left"><bold>0.27</bold>%</td><td align="left">8.43%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">10.6%</td><td align="left">1.42%</td><td align="left">49.1%</td><td align="left">35.7%</td><td align="left">0.03%</td><td align="left">0.06%</td><td align="left">0.30%</td><td align="left">8.92%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">10.3%</td><td align="left">1.26%</td><td align="left">50.0%</td><td align="left">35.8%</td><td align="left">0.17%</td><td align="left">0.18%</td><td align="left">0.56%</td><td align="left"><bold>7.85</bold>%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">10.0%</td><td align="left">1.21%</td><td align="left">49.6%</td><td align="left">35.7%</td><td align="left">0.20%</td><td align="left">0.20%</td><td align="left">1.03%</td><td align="left">8.40%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">11.0%</td><td align="left">1.40%</td><td align="left">35.8%</td><td align="left">49.7%</td><td align="left">0.22%</td><td align="left">0.23%</td><td align="left">1.09%</td><td align="left">9.60%</td></tr><tr><td align="left">Kal_C</td><td align="left">Expected</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">25.0%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">23.3%</td><td align="left">29.6%</td><td align="left">19.2%</td><td align="left">23.0%</td><td align="left">0.06%</td><td align="left">0.73%</td><td align="left"><bold>1.08</bold>%</td><td align="left">15.28%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">23.5%</td><td align="left">29.6%</td><td align="left">19.0%</td><td align="left">22.9%</td><td align="left">0.06%</td><td align="left">0.73%</td><td align="left">1.18%</td><td align="left">15.32%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">23.4%</td><td align="left">25.6%</td><td align="left">19.4%</td><td align="left">23.2%</td><td align="left">0.45%</td><td align="left">2.56%</td><td align="left">3.38%</td><td align="left"><bold>12.98</bold>%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">22.7%</td><td align="left">24.7%</td><td align="left">19.4%</td><td align="left">23.1%</td><td align="left">0.49%</td><td align="left">2.69%</td><td align="left">3.48%</td><td align="left">13.65%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">24.8%</td><td align="left">27.8%</td><td align="left">19.4%</td><td align="left">23.2%</td><td align="left">0.54%</td><td align="left">3.02%</td><td align="left">3.89%</td><td align="left">14.35%</td></tr><tr><td align="left">Kal_D</td><td align="left">Expected</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">9.00%</td><td align="left">1.00%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">32.9%</td><td align="left">51.5%</td><td align="left">7.14%</td><td align="left">1.14%</td><td align="left">0.09%</td><td align="left">1.50%</td><td align="left"><bold>2.07</bold>%</td><td align="left"><bold>9.62</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">33.2%</td><td align="left">51.2%</td><td align="left">7.03%</td><td align="left">1.13%</td><td align="left">0.09%</td><td align="left">1.49%</td><td align="left">2.23%</td><td align="left">9.91%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">32.8%</td><td align="left">43.1%</td><td align="left">7.31%</td><td align="left">1.16%</td><td align="left">0.72%</td><td align="left">4.40%</td><td align="left">5.69%</td><td align="left">21.61%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">31.6%</td><td align="left">41.3%</td><td align="left">7.26%</td><td align="left">1.16%</td><td align="left">0.79%</td><td align="left">4.62%</td><td align="left">5.77%</td><td align="left">24.75%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">35.8%</td><td align="left">48.4%</td><td align="left">7.28%</td><td align="left">1.16%</td><td align="left">0.89%</td><td align="left">5.40%</td><td align="left">6.70%</td><td align="left">15.96%</td></tr><tr><td align="left">Kal_E</td><td align="left">Expected</td><td align="left">55.0%</td><td align="left">35.0%</td><td align="left">1.00%</td><td align="left">9.00%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">50.4%</td><td align="left">33.7%</td><td align="left">0.99%</td><td align="left">7.80%</td><td align="left">0.12%</td><td align="left">0.96%</td><td align="left"><bold>1.52</bold>%</td><td align="left"><bold>8.55</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">50.7%</td><td align="left">33.4%</td><td align="left">0.97%</td><td align="left">7.73%</td><td align="left">0.12%</td><td align="left">0.95%</td><td align="left">1.66%</td><td align="left">8.82%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">50.7%</td><td align="left">28.7%</td><td align="left">1.02%</td><td align="left">7.81%</td><td align="left">0.84%</td><td align="left">3.07%</td><td align="left">4.43%</td><td align="left">16.26%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">49.2%</td><td align="left">27.6%</td><td align="left">1.00%</td><td align="left">7.80%</td><td align="left">0.99%</td><td align="left">3.28%</td><td align="left">4.58%</td><td align="left">18.96%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">54.1%</td><td align="left">31.4%</td><td align="left">1.00%</td><td align="left">7.81%</td><td align="left">1.10%</td><td align="left">3.71%</td><td align="left">5.15%</td><td align="left">10.86%</td></tr><tr><td align="left">KAL_D</td><td align="left">Expected</td><td align="left">35.0%</td><td align="left">55.0%</td><td align="left">9.00%</td><td align="left">1.00%</td><td align="left">0.00%</td><td align="left">0.00%</td><td align="left"/><td align="left"/></tr><tr><td align="left"/><td align="left">AFS-MC</td><td align="left">30.3%</td><td align="left">49.6%</td><td align="left">7.27%</td><td align="left">1.16%</td><td align="left">0.08%</td><td align="left">1.25%</td><td align="left">1.38%</td><td align="left"><bold>13.36</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left">30.4%</td><td align="left">49.5%</td><td align="left">7.25%</td><td align="left">1.16%</td><td align="left">0.08%</td><td align="left">1.26%</td><td align="left"><bold>1.36</bold>%</td><td align="left"><bold>13.36</bold>%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left">30.8%</td><td align="left">43.3%</td><td align="left">7.51%</td><td align="left">1.20%</td><td align="left">0.86%</td><td align="left">4.57%</td><td align="left">6.30%</td><td align="left">23.85%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left">29.6%</td><td align="left">41.3%</td><td align="left">7.47%</td><td align="left">1.19%</td><td align="left">0.95%</td><td align="left">4.98%</td><td align="left">7.03%</td><td align="left">27.86%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left">33.5%</td><td align="left">48.7%</td><td align="left">7.58%</td><td align="left">1.19%</td><td align="left">1.08%</td><td align="left">5.84%</td><td align="left">8.07%</td><td align="left">17.44%</td></tr><tr><td align="left">Average</td><td align="left">AFS-MC</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"><bold>0.07</bold>%</td><td align="left"><bold>0.80</bold>%</td><td align="left"><bold>1.12</bold>%</td><td align="left"><bold>10.56</bold>%</td></tr><tr><td align="left"/><td align="left">MCSpark</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"><bold>0.07</bold>%</td><td align="left"><bold>0.80</bold>%</td><td align="left">1.20%</td><td align="left">10.79%</td></tr><tr><td align="left"/><td align="left">CLARK</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left">0.51%</td><td align="left">2.61%</td><td align="left">3.59%</td><td align="left">14.83%</td></tr><tr><td align="left"/><td align="left">Kraken2</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left">0.58%</td><td align="left">2.79%</td><td align="left">3.87%</td><td align="left">16.77%</td></tr><tr><td align="left"/><td align="left">K2+Brack</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left">0.66%</td><td align="left">3.22%</td><td align="left">4.41%</td><td align="left">12.74%</td></tr><tr><td align="left">AFS31RS90</td><td align="left">AFS-MC</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"><bold>1.84</bold>%</td><td align="left"><bold>13.38</bold>%</td></tr><tr><td align="left">Average</td><td align="left">MCSpark</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"><bold>1.84</bold>%</td><td align="left">13.63%</td></tr></tbody></table><table-wrap-foot><p>AFS-MC: AFS-MetaCache, MC-Spark: MetaCacheSpark, K2+Brack: Kraken2 with subsequent Bracken, W.Buf: Water Buffalo, <italic>Σ</italic> FP: Sum of all false positive read classifications, <italic>Σ</italic> Dev: Sum of absolute deviations to the given meat composition (best results for each dataset in bold)</p></table-wrap-foot></table-wrap>
</p>
      <p>In terms of sensitivity, all methods are able to detect the included meat components. In addition, several tools detect false positive signals; e.g., Kraken2+Bracken detects over 1% of water buffalo in KLyo_C and KLyo_D and over 3% of goat in Kal_C, Kal_D, and Kal_E. False positive quantities in these cases correlate with the amount of beef and the amount of sheep present in the respective sample. Overall, AFS-MetaCache achieves the lowest FP-rates for each tested dataset with an average FP-sum per sample of only 0.67% for the Klyo samples and 1.12% for the Kal samples. This is much lower compared to CLARK (1.34% for Klyo, 3.59% for Kal), Kraken2 (1.86% for Klyo, 3.87% for Kal), and Kraken2+Bracken (2.14% for Klyo, 4.41% for Kal). The relative differences become even more significant when looking at some of the individual FP signals. In the Klyo samples (Table <xref rid="Tab5" ref-type="table">5</xref>) AFS-MetaCache only detects negligible amounts of goat (0.05% on average) and water buffalo (0.14%), while the amounts detected by CLARK, Kraken2, and Kraken2+Bracken are higher by factors of 4.2 and 4.8, 5.6 and 6.0, and 5.1 and 10.0, respectively. Similar results can be observed for the Kal samples (Table <xref rid="Tab6" ref-type="table">6</xref>): AFS-MetaCache only detects 0.07% of water buffalo meat on average and 0.80% of goat meat on average, while the amounts detected by CLARK, Kraken2, and Kraken2+Bracken are higher by factors of 7.3 and 3.3, 8.3 and 3.5, and 9.4 and 4.0, respectively.</p>
      <p>In terms of deviation from the expected foodstuff ingredients, AFS-MetaCache shows the lowest average of the sums of absolute differences for both Klyo (11.07%) samples and Kal samples (10.56%). Kraken2+Bracken (13.38% and 12.74%) has smaller deviations on average than Kraken2 alone (16.12% and 16.77%), showing that quantification after read assignment is beneficial.</p>
      <p>As can be seen in Tables <xref rid="Tab5" ref-type="table">5</xref> and <xref rid="Tab6" ref-type="table">6</xref> there are small differences between the results of AFS-MetaCache and MetaCacheSpark. They are caused by the constraint list of target genomes with highest scores (tophits) of MetaCacheSpark and by the different ordering of targets with the same score. The differences could be reduced by increasing the tophits list size, but we decided for a smaller list in favor of faster querying speeds.</p>
      <p>When scanning the calibrator sausage read datasets with AFS-MetaCache using the bigger AFS31 and AFS31RS90 databases, we can make the following observations: (1) More <italic>k</italic>-mers are removed from the hash table due to overflowing target lists. Therefore, the number of classified reads is reduced and total deviation increases slightly. (2) Additional false positive targets are introduced, but the total number of false positives is reduced for the Klyo datasets (excluding bacteria).</p>
      <p>A benefit of screening for microbiota and eukaryotic foodstuff species at the same time is a lower false positive rate. Usually reads of a dataset are queried against either one or the other and only the remaining unclassified reads are investigated further. This can lead to false assumptions about the data. In our experiments some reads are falsely classified as Triticum aestivum (bread wheat) when using the AFS31 database. With the AFS31RS90 database, however, those reads are identified as bacterial or unspecific (classified as the lowest common ancestor of bread wheat and bacteria).</p>
    </sec>
    <sec id="Sec15">
      <title>Runtime and memory consumption for non-Partitioned databases</title>
      <p>Runtime and memory consumption where the whole database can fit into the available main memory are measured on a system with a dual Xeon E5-2630v4 (2.2 GHz, 2×10 cores) CPU with 512 GB of DDR4 RAM. We have compared the speed and the peak memory consumption during database construction and classification of the default versions of AFS-MetaCache (v.0.5.3), CLARK (v.1.2.6), Kraken2 (v2.0.7-beta), and Kraken2 with subsequent abundance estimation by Bracken v.2.0.0 (Kraken2+Bracken) using 40 threads. Table <xref rid="Tab7" ref-type="table">7</xref> shows the results for the reference genome datasets listed in Table <xref rid="Tab3" ref-type="table">3</xref> and the KAL_D read dataset (26 million paired-end reads of length 101 bp) for classification. Note, that the time to load the databases is excluded when measuring query speed for all programs to make the results independent of dataset size.
<table-wrap id="Tab7"><label>Table 7</label><caption><p>Runtimes and peak memory consumption for non-partitioned database construction (build) and querying for different data sets on a workstation with 512 GB RAM</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Data set</bold></th><th align="left"/><th align="left"><bold>AFS-MetaCache</bold></th><th align="left"><bold>CLARK</bold></th><th align="left"><bold>Kraken2</bold></th><th align="left"><bold>Kraken2+Bracken</bold></th></tr></thead><tbody><tr><td align="left">AFS20</td><td align="left">Build time</td><td align="left"><bold>1h 11m</bold></td><td align="left">15h 37m</td><td align="left">1h 27m</td><td align="left">5h 32m</td></tr><tr><td align="left"/><td align="left">Build memory</td><td align="left"><bold>64 GB</bold></td><td align="left">428 GB</td><td align="left">69 GB</td><td align="left">147 GB</td></tr><tr><td align="left"/><td align="left">Query time</td><td align="left">136 s</td><td align="left">93 s</td><td align="left"><bold>37 s</bold></td><td align="left">111 s</td></tr><tr><td align="left"/><td align="left">Query speed</td><td align="left">11.5 MR/m</td><td align="left">16.9 MR/m</td><td align="left"><bold>43.2 MR/m</bold></td><td align="left">14.2 MR/m</td></tr><tr><td align="left"/><td align="left">Query memory</td><td align="left"><bold>50 GB</bold></td><td align="left">152 GB</td><td align="left">54 GB</td><td align="left">54 GB</td></tr><tr><td align="left">AFS31</td><td align="left">Build time</td><td align="left"><bold>1h 47m</bold></td><td align="left">-</td><td align="left">3h 19min</td><td align="left">11h 41min</td></tr><tr><td align="left"/><td align="left">Build memory</td><td align="left"><bold>91 GB</bold></td><td align="left">-</td><td align="left">107 GB</td><td align="left">296 GB</td></tr><tr><td align="left"/><td align="left">Query time</td><td align="left">175 s</td><td align="left">-</td><td align="left"><bold>44 s</bold></td><td align="left">58 s</td></tr><tr><td align="left"/><td align="left">Query speed</td><td align="left">8.9 MR/m</td><td align="left">-</td><td align="left"><bold>35.9 MR/m</bold></td><td align="left">27.0 MR/m</td></tr><tr><td align="left"/><td align="left">Query memory</td><td align="left">78 GB</td><td align="left">-</td><td align="left"><bold>72 GB</bold></td><td align="left"><bold>72 GB</bold></td></tr><tr><td align="left">AFS20RS90</td><td align="left">Build time</td><td align="left"><bold>1h 42m</bold></td><td align="left">-</td><td align="left">2h 58m</td><td align="left">8h 53m</td></tr><tr><td align="left"/><td align="left">Build memory</td><td align="left">110 GB</td><td align="left">-</td><td align="left"><bold>94 GB</bold></td><td align="left">168 GB</td></tr><tr><td align="left"/><td align="left">Query time</td><td align="left">180 s</td><td align="left">-</td><td align="left"><bold>43 s</bold></td><td align="left">117 s</td></tr><tr><td align="left"/><td align="left">Query speed</td><td align="left">8.7 MR/m</td><td align="left">-</td><td align="left"><bold>37.0 MR/m</bold></td><td align="left">13.5 MR/m</td></tr><tr><td align="left"/><td align="left">Query memory</td><td align="left">94 GB</td><td align="left">-</td><td align="left"><bold>79 GB</bold></td><td align="left"><bold>79 GB</bold></td></tr><tr><td align="left">AFS31RS90</td><td align="left">Build time</td><td align="left"><bold>3h 10m</bold></td><td align="left">-</td><td align="left">5h 55min</td><td align="left">17h 44min</td></tr><tr><td align="left"/><td align="left">Build memory</td><td align="left">135 GB</td><td align="left">-</td><td align="left"><bold>134 GB</bold></td><td align="left">329 GB</td></tr><tr><td align="left"/><td align="left">Query time</td><td align="left">217 s</td><td align="left">-</td><td align="left"><bold>49 s</bold></td><td align="left">61 s</td></tr><tr><td align="left"/><td align="left">Query speed</td><td align="left">7.2 MR/m</td><td align="left">-</td><td align="left"><bold>32.1 MR/m</bold></td><td align="left">25.7 MR/m</td></tr><tr><td align="left"/><td align="left">Query memory</td><td align="left">117 GB</td><td align="left">-</td><td align="left"><bold>97 GB</bold></td><td align="left"><bold>97 GB</bold></td></tr></tbody></table><table-wrap-foot><p>Query speeds are measured for the KAL_D dataset in terms of million reads per minute (MR/m). For the cases with “-” the corresponding program exceeds the main memory capacity of 512 GB. Fastest runtimes and lowest memory consumption for each dataset are indicated in bold</p></table-wrap-foot></table-wrap>
</p>
      <p>AFS-MetaCache is fastest for database construction for all tested data sets. Furthermore, it requires least memory for constructing the database for AFS20 and AFS31, but requires slightly more memory than Kraken2 for AFS20RS90 and AFS31RS90.</p>
      <p>Kraken2 is fastest in terms of query (classification) speed. If Kraken2 is executed with subsequent quantification by Bracken, corresponding runtimes increase. Even though query speeds of MetaCache-AFS are slowest, corresponding execution times are still competitive (only around three minutes for the largest data set (KAL_D)).</p>
      <p>For common data set sizes in food control applications runtimes for database construction (a few hours) are typically much higher than for the classification stage (a few minutes). Since the amount of relevant reference genomes is increasing rapidly corresponding databases have to be constructed or extended frequently. Thus, fast built times are of high importance. Besides having the fastest database construction time, AFS-MetaCache is also the only tool that supports the functionality of extending an existing database.</p>
    </sec>
    <sec id="Sec16">
      <title>Runtime and memory consumption for partitioned databases</title>
      <p>In this subsection we evaluate the ability of AFS-MetaCache and MetaCacheSpark to reduce the consumed main memory by partitioning the database into smaller chunks. AFS-MetaCache is again evaluated on a workstation with a dual Xeon E5-2630v4 CPU and 512 GB of DDR4 RAM. MetaCacheSpark has been tested on a big data cluster composed of 12 Dell EMC PowerEdge R730 servers, each one with a dual Xeon E5-2630v4 (2.2GHz 10 cores) CPU with 384 GB RAM and 32 TB HDDs running Java version Openjdk 1.8.0_201, gcc 7.3.1, Spark 2.2.0, and Hadoop 2.7.3.</p>
      <p>Table <xref rid="Tab8" ref-type="table">8</xref> shows the speed and memory consumption of AFS-MetaCache and MetaCacheSpark for partitioned database construction and querying using the AFS31RS90 reference genome dataset and the KAL_D dataset. Using four partitions, AFS-MetaCache can reduce the main memory consumption from 135 GB to only 52 GB while the construction time only slightly increases from 3h 10m to 3h 45m. In addition, memory consumption for classification is reduced from 117 GB to 39 GB. However, the corresponding query speed decreases from 7.2 MR/m to 2.5 MR/m since the partitions have to be queried by all reads in succession and the individual results need to be merged.
<table-wrap id="Tab8"><label>Table 8</label><caption><p>Partitioned build time and query speed for AFS31RS90 database</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Tool</bold></th><th align="left"><bold>Build time</bold></th><th align="left"><bold>Max. Memory</bold></th><th align="left"><bold>Query Speed</bold></th><th align="left"><bold>Max. Memory</bold></th></tr></thead><tbody><tr><td align="left">AFS-MetaCache (1 part.)</td><td align="left">3h 10min</td><td align="left">135 GB</td><td align="left">7.2 MR/m</td><td align="left">117 GB</td></tr><tr><td align="left">AFS-MetaCache (2 part.)</td><td align="left">3h 04min</td><td align="left">82 GB</td><td align="left">3.1 MR/m</td><td align="left">70 GB</td></tr><tr><td align="left">AFS-MetaCache (4 part.)</td><td align="left">3h 45min</td><td align="left">52 GB</td><td align="left">2.5 MR/m</td><td align="left">39 GB</td></tr><tr><td align="left">MetaCacheSpark (8Ex-32Th)</td><td align="left">2h 57min</td><td align="left">175 GB</td><td align="left">4.3 MR/m</td><td align="left">76 GB</td></tr><tr><td align="left">MetaCacheSpark (16Ex-16Th)</td><td align="left">1h 57min</td><td align="left">100 GB</td><td align="left">3.4 MR/m</td><td align="left">48 GB</td></tr><tr><td align="left">MetaCacheSpark (32Ex-8Th)</td><td align="left">1h 25min</td><td align="left">69 GB</td><td align="left">2.2 MR/m</td><td align="left">37 GB</td></tr><tr><td align="left">MetaCacheSpark (64Ex-4Th)</td><td align="left">1h 03min</td><td align="left">45 GB</td><td align="left">1.4 MR/m</td><td align="left">29 GB</td></tr></tbody></table><table-wrap-foot><p>Query speed measured for dataset KAL_D in million reads per minute (MR/m). For MetaCacheSpark, the number of executors and threads per executor are indicated</p></table-wrap-foot></table-wrap>
</p>
      <p>The results show that memory requirements per node and build time for MetaCacheSpark both decrease when increasing the number of executors. As the number of executors increases, the benefits of using the Spark version are revealed. For 64 executors the AFS31RS90 database can be built in around one hour using 45 GB of memory per node. This is 3 ×, 3.6 ×, 5.6 ×, 16.9 × faster than AFS-MetaCache, 4-partitioned AFS-MetaCache, Kraken2 and Kraken2+Bracken, respectively. Important reductions in the memory consumed per node can also be observed.</p>
      <p>MetaCacheSpark consumes less memory in the classification phase than in the build phase. Some additional memory is required to store query hits. However, this memory can be re-used with each batch of sequences being classified. As a trade-off to fast build time and low memory consumption per node, the query speeds of MetaCacheSpark are lower compared to non-partitioned AFS-MetaCache. This can be explained by the necessity to perform a costly shuffle operation for the reduce-by-key function. Its cost increases with the number of executors as can be seen in Table <xref rid="Tab8" ref-type="table">8</xref>: query speed reduces from 4.2 MR/m with 8 executors to 1.4 MR/m with 64. Nevertheless, runtimes are still acceptable in application scenarios where relevant read datasets are small compared to the utilized databases.</p>
    </sec>
    <sec id="Sec17">
      <title>Comparison to previous aFS pipeline</title>
      <p>To compare AFS-MetaCache to our previous alignment-based AFS pipeline the same dual-socket workstation as before is used. Runtimes and memory consumption of both approaches are shown in Table <xref rid="Tab9" ref-type="table">9</xref>. For the small genome dataset AFS10 the previous AFS pipeline already takes several hours to construct the index. Querying of the KAL_D dataset takes even more than 10 hours. For bigger numbers of reference genomes this approach becomes unfeasible because the runtime scales linearly with the number reference genomes. On the other hand, AFS-MetaCache takes less than an hour for database construction of AFS10 while the query speed improves by more than two orders of magnitude. As shown before even larger databases like AFS31 can be built by AFS-MetaCache in just a few hours and query speed drops by less than a factor of two.
<table-wrap id="Tab9"><label>Table 9</label><caption><p>Runtimes and peak memory consumption for database construction (build) and querying for AFS10</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Data set</bold></th><th align="left"/><th align="left"><bold>AFS-MetaCache</bold></th><th align="left"><bold>AFS-previous</bold></th></tr></thead><tbody><tr><td align="left">AFS10</td><td align="left">Build time</td><td align="left"><bold>47m</bold></td><td align="left">7h 0m</td></tr><tr><td align="left"/><td align="left">Build memory</td><td align="left">35 GB</td><td align="left"><bold>5GB</bold></td></tr><tr><td align="left"/><td align="left">Query speed</td><td align="left"><bold>17.1 MR/m</bold></td><td align="left">0.04 MR/m</td></tr><tr><td align="left"/><td align="left">Query memory</td><td align="left">30 GB</td><td align="left"><bold>6GB</bold></td></tr></tbody></table><table-wrap-foot><p>Query speeds are measured for the KAL_D dataset in terms of million reads per minute (MR/m)</p></table-wrap-foot></table-wrap>
</p>
      <p>The average quantification results for the Klyo and Kal samples produced by AFS-MetaCache and the previous AFS pipeline are shown in Table <xref rid="Tab10" ref-type="table">10</xref>. The <italic>k</italic>-mer based AFS-MetaCache is able to match quantification accuracy of the previous alignment-based pipeline for the KLyo datasets. The average deviation to the meat components is even lower for AFS-MetaCache. For the Kal datasets AFS-MetaCache reduces the false positive rate while the average deviation increases slightly. However, it is still possible to identify the correct components with the benefit of less false positives.
<table-wrap id="Tab10"><label>Table 10</label><caption><p>Average quantification results for the Klyo and Kal samples using the reference dataset AFS10</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Dataset</bold></th><th align="left"><bold>Classifier</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> FP</bold></th><th align="left"><bold><italic>Σ</italic></bold><bold> Dev</bold></th></tr></thead><tbody><tr><td align="left">KLyo Average</td><td align="left">AFS-MC</td><td align="left"><bold>0.37</bold>%</td><td align="left"><bold>10.71</bold>%</td></tr><tr><td align="left"/><td align="left">AFS-prev</td><td align="left"><bold>0.37</bold>%</td><td align="left">10.80%</td></tr><tr><td align="left">Kal &amp; KAL_D Average</td><td align="left">AFS-MC</td><td align="left"><bold>0.19</bold>%</td><td align="left">8.43%</td></tr><tr><td align="left"/><td align="left">AFS-prev</td><td align="left">0.33%</td><td align="left"><bold>6.65</bold>%</td></tr></tbody></table><table-wrap-foot><p>AFS-MC: AFS-MetaCache, AFS-prev: previous AFS pipeline, <italic>Σ</italic> FP: Sum of all false positive read classifications, <italic>Σ</italic> Dev: Sum of absolute deviations to the given meat composition</p></table-wrap-foot></table-wrap>
</p>
    </sec>
    <sec id="Sec18">
      <title>Detection of microbiota</title>
      <p>A major strength of next generation sequencing when applied to foodstuffs, is its theoretically infinite range of species that can be detected. We therefore analyzed the microbiota detected by AFS-MetaCache and MetaCacheSpark in more detail. A visualization of the AFS-MetaCache results using Krona [<xref ref-type="bibr" rid="CR31">31</xref>] for the dataset KLyo_C using the AFS31RS90 reference data set is shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. The results of Kraken2 and Bracken agree on the most prominent bacteria as shown in Table <xref rid="Tab11" ref-type="table">11</xref>. The detected bacterial genera Brochothrix, Pseudomonas, and Psychrobacter are well known representatives in foodstuffs. In some sausages a very high amount of the species Brochothrix thermosphacta and even the corresponding Brochothrix phage BL3 could be found, possibly indicating meat spoilage. Furthermore, in several cases a significant amount of Actinoalloteichus was initially detected which has no known relation to foodstuff. However, after application of the coverage filter these matches could be detected as false positives and were removed.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Visualization of the AFS-MetaCache results using Krona [<xref ref-type="bibr" rid="CR31">31</xref>] for the dataset KLyo_C using the AFS31RS90 reference data set</p></caption><graphic xlink:href="12859_2020_3429_Fig4_HTML" id="MO4"/></fig><table-wrap id="Tab11"><label>Table 11</label><caption><p>Detected bacteria in dataset KLyo_C using reference dataset AFS31RS90</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><bold>Genus</bold></th><th align="left"><bold>AFS-MetaCache</bold></th><th align="left"><bold>Kraken2</bold></th><th align="left"><bold>Kraken2+Bracken</bold></th></tr></thead><tbody><tr><td align="left">Brochothrix</td><td align="left">1.94%</td><td align="left">1.94%</td><td align="left">1.98%</td></tr><tr><td align="left">Pseudomonas</td><td align="left">1.23%</td><td align="left">1.73%</td><td align="left">1.92%</td></tr><tr><td align="left">Psychrobacter</td><td align="left">0.59%</td><td align="left">1.43%</td><td align="left">1.45%</td></tr></tbody></table><table-wrap-foot><p>Genera with less 500 than hits (&lt;0.1<italic>%</italic> of the dataset) are omitted</p></table-wrap-foot></table-wrap>
</p>
      <p>Figures <xref rid="Fig5" ref-type="fig">5</xref> and <xref rid="Fig6" ref-type="fig">6</xref> show the corresponding genome coverage diagrams for Actinoalloteichus and Brochothrix thermosphacta for the KLyo_C read dataset. The highly uneven genome coverage of Actinoalloteichus is taken as an indicator by AFS-MetaCache for a false-positive species identification. The Brochothrix genome is evenly covered by reads and is thus classified as a true positive.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Genome coverage of Actinoalloteichus for the dataset KLyo_C. The sparse coverage is an indicator for false positives</p></caption><graphic xlink:href="12859_2020_3429_Fig5_HTML" id="MO5"/></fig><fig id="Fig6"><label>Fig. 6</label><caption><p>Genome coverage of Brochothrix thermosphacta for the dataset KLyo_C. The even coverage is an indicator for true positives</p></caption><graphic xlink:href="12859_2020_3429_Fig6_HTML" id="MO6"/></fig>
</p>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="discussion">
    <title>Discussion</title>
    <p>The determination and quantification of food ingredients is an important issue in official food control [<xref ref-type="bibr" rid="CR1">1</xref>]. Furthermore, microbiological contamination or the presence of non-declared allergenic food components establishes the need for a broad-scale screening method that allows for precise determination and quantification of ingredients ideally spanning all kingdoms of life including plants, animals, fungi, and bacteria. DNA-based methods like quantitative real-time PCR are established technologies for analyzing foodstuff. However, they have the drawback of being limited to a set of target species within a single assay that need to be defined beforehand. The usage of next-generation sequencing of total genomic DNA from biological samples followed by bioinformatics analyses based on comparisons to available reference genomes can overcome this limitation. Our previous alignment-based AFS-pipeline was found suitable to screen for species in processed food samples [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR6">6</xref>]. However, the utilized algorithms put limitations on the number species to be screened and on the computational throughput.</p>
    <p>Here, we have presented AFS-MetaCache and MetaCacheSpark as new computational methods for the efficient detection and quantification of species composition in food samples from sequencing reads. Being based on an alignment-free exact <italic>k</italic>-mer matching approach, we gain significant speed compared to our previous alignment-based AFS method at the expense of a higher memory consumption for constructing and querying reference genome databases. We apply an intelligent subsampling technique based on minhashing within local windows to reduce the database size. Further reductions of peak memory consumption can be achieved by the introduced partitioning schemes either for single workstations (AFS-MetaCache) or for big data clusters (MetaCacheSpark) at the expense of query speed. Applications of our previous alignment-based AFS pipeline have been limited to around ten complex genomes. With AFS-MetaCache we are able to significantly extend this limit, which is of high importance since the amount of available reference genomes continues to grow rapidly [<xref ref-type="bibr" rid="CR32">32</xref>, <xref ref-type="bibr" rid="CR33">33</xref>]. Thus, our results are particularly encouraging since AFS-MetaCache and MetaCacheSpark are fastest in terms of database construction times. Corresponding peak memory consumption is competitive and can be even further reduced by the partitioned version of AFS-MetaCache on a single workstation or by using MetaCacheSpark on a big data cluster.</p>
    <p>While AFS-Metacache can achieve higher query speed than MetaCacheSpark, it takes some manual setup for the partitioned version. MetaCacheSpark on the other hand allows for faster database creation and can easily be deployed on existing Spark infrastructure, while being faster than the partitioned version of AFS-Metacache. Spark, while being fault tolerant, also enables to use a cluster of lower powered computers than we used for our benchmarks.</p>
    <p>Within this study we have applied our approach on a broad set of reference samples, containing admixtures of a set of food relevant ingredients (chicken, turkey, pork, beef, horse, sheep). The results demonstrate that our approach is able to reliably detect the components even at the 0.5% level. The comparison to the established metagenomics tools Kraken2, CLARK, and Kraken2+Bracken shows that AFS-MetaCache and MetaCacheSpark are superior in terms of false positive (FP) rates. In particular for pairs of closely related genomes AFS-MetaCache can achieve almost an order-of-magnitude lower FP-rates. These results demonstrate that our classification approach based on counting <italic>k</italic>-mer matches within small windows is effective compared to simply counting <italic>k</italic>-mer matches over an entire genome (as used by CLARK and Kraken) and to an alignment-based approach (as used by the our previous AFS pipeline). Our results also show that AFS-MetaCache achieves the lowest sum of absolute deviations to the included food ingredients. As different types of tissue can contain different concentrations of DNA (matrix effect), deviations could possibly be further reduced by a subsequent normalization procedure that takes tissue ratios into account.</p>
    <p>Applications of AFS-MetaCache and MetaCacheSpark are not limited to the study of foodstuff but can be used to analyze high throughput sequencing datasets of metagenomic DNA from other complex biological samples as well, including diverse environmental materials, in-vitro cell cultures, and biopharmaca.</p>
  </sec>
  <sec id="Sec20" sec-type="conclusion">
    <title>Conclusion</title>
    <p>We have presented a fast screening and quantification method together with two corresponding publicly available implementations (AFS-MetaCache and MetaCacheSpark) for whole genome shotgun sequencing-based biosurveillance applications such as food testing. By relying on a big data approach our approach can scale efficiently towards large-scale collections of complex eukaryotic and bacterial reference genomes making both tools suitable for broad-scale metagenomic screening applications.</p>
  </sec>
  <sec id="Sec21">
    <title>Availability and requirements</title>
    <p>Project name: AFS-MetaCache Project home page: <ext-link ext-link-type="uri" xlink:href="https://muellan.github.io/metacache/afs.html">https://muellan.github.io/metacache/afs.html</ext-link>Operating system(s): Linux Programming language: C++ Other requirements: gccLicense: GPL-3Any restrictions to use by non-academics: according to license</p>
    <p>Project name: MetaCacheSpark Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/jmabuin/MetaCacheSpark">https://github.com/jmabuin/MetaCacheSpark</ext-link><ext-link ext-link-type="uri" xlink:href="https://github.com/jmabuin/MetaCacheSpark">https://github.com/jmabuin/MetaCacheSpark</ext-link>Operating system(s): Linux Programming language: Java and C++ Other requirements: Openjdk, gcc, Spark, HadoopLicense: GPL-3Any restrictions to use by non-academics: according to license</p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>AFS</term>
        <def>
          <p>All-Food-Sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>ddPCR</term>
        <def>
          <p>Droplet digital real-time polymerase chain reaction</p>
        </def>
      </def-item>
      <def-item>
        <term>HDFS</term>
        <def>
          <p>Hadoop distributed file system</p>
        </def>
      </def-item>
      <def-item>
        <term>LCA</term>
        <def>
          <p>Lowest common ancestor</p>
        </def>
      </def-item>
      <def-item>
        <term>LSH</term>
        <def>
          <p>Locality sensitive hashing</p>
        </def>
      </def-item>
      <def-item>
        <term>qPCR</term>
        <def>
          <p>Quantitative real-time polymerase chain reaction</p>
        </def>
      </def-item>
      <def-item>
        <term>RDD</term>
        <def>
          <p>Resilient distributed datasets</p>
        </def>
      </def-item>
      <def-item>
        <term><italic>Σ</italic>FP</term>
        <def>
          <p>Sum of all false positive read classifications</p>
        </def>
      </def-item>
      <def-item>
        <term><italic>Σ</italic> Dev</term>
        <def>
          <p>Sum of absolute deviations</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>RK, JA, and AM implemented and tested the software. RK, JA, and SH performed the experiments. BS, TH, and AH wrote the draft of the manuscript. BS proposed the project. BS, TH, AH, JP, and TP supervised the project. RK, JA, AM, SH, JP, TP, TH, and BS edited the manuscript and analyzed the results. The author(s) read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was partially supported by the Deutsche Forschungsgemeinschaft (DFG), Project HySim, the MINECO under award RTI2018-093336-B-C21, Xunta de Galicia under awards ED481B 2018/013 and ED431C 2018/19, the European Regional Development Fund, and by the Federal Office for Agriculture and Food. The funders had no role in study design, data collection, interpretation of data, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Esteki</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Regueiro</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Simal-Gándara</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Tackling fraudsters with global strategies to expose fraud in the food chain</article-title>
        <source>Compr Rev Food Sci Food Saf</source>
        <year>2019</year>
        <volume>18</volume>
        <issue>2</issue>
        <fpage>425</fpage>
        <lpage>40</lpage>
        <pub-id pub-id-type="doi">10.1111/1541-4337.12419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köppel</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ruf</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rentsch</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Multiplex real-time pcr for the detection and quantification of dna from beef, pork, horse and sheep</article-title>
        <source>Eur Food Res Technol</source>
        <year>2011</year>
        <volume>232</volume>
        <issue>1</issue>
        <fpage>151</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1007/s00217-010-1371-y</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köppel</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ganeshan</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>van Velsen</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schmid</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Graf</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hochegger</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Digital duplex versus real-time pcr for the determination of meat proportions from sausages containing pork and beef</article-title>
        <source>Eur Food Res Technol</source>
        <year>2019</year>
        <volume>245</volume>
        <issue>1</issue>
        <fpage>151</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1007/s00217-018-3147-8</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tillmar</surname>
            <given-names>AO</given-names>
          </name>
          <name>
            <surname>Dell’Amico</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Welander</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Holmlund</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>A universal method for species identification of mammals utilizing next generation sequencing for the analysis of dna mixtures</article-title>
        <source>PloS ONE</source>
        <year>2013</year>
        <volume>8</volume>
        <issue>12</issue>
        <fpage>83761</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0083761</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ripp</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Krombholz</surname>
            <given-names>CF</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>All-food-seq (afs): a quantifiable screen for species in biological samples by deep dna sequencing</article-title>
        <source>BMC Genomics</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>639</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-15-639</pub-id>
        <pub-id pub-id-type="pmid">25081296</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <mixed-citation publication-type="other">Liu Y, Ripp F, Koeppel R, et al.Afs: identification and quantification of species composition by metagenomic sequencing. Bioinformatics. 2017:822. 10.1093/bioinformatics/btw822.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>14</issue>
        <fpage>1754</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate long-read alignment with Burrows-Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>5</issue>
        <fpage>589</fpage>
        <lpage>95</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp698</pub-id>
        <pub-id pub-id-type="pmid">20080505</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <mixed-citation publication-type="other">Li H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. arXiv:1303.3997v2. 2013.</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Maskell</surname>
            <given-names>DL</given-names>
          </name>
        </person-group>
        <article-title>Cushaw: a cuda compatible short read aligner to large genomes based on the burrows–wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>14</issue>
        <fpage>1830</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts276</pub-id>
        <pub-id pub-id-type="pmid">22576173</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wood</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Kraken: ultrafast metagenomic sequence classification using exact alignments</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>R46</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-3-r46</pub-id>
        <pub-id pub-id-type="pmid">24580807</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">Lindgreen S, Adair KL, Gardner P. An evaluation of the accuracy and speed of metagenome analysis tools. Sci Rep. 2016; 6(19233). 10.1038/srep19233.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <mixed-citation publication-type="other">Seppey M, Manni M, Zdobnov EM. Lemmi: A live evaluation of computational methods for metagenome investigation. bioRxiv. 2019. https://doi.org/10.1101/507731. http://arxiv.org/abs/https://www.biorxiv.org/content/early/2019/04/16/507731.full.pdf.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Breitwieser</surname>
            <given-names>FP</given-names>
          </name>
          <name>
            <surname>Thielen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Bracken: estimating species abundance in metagenomics data</article-title>
        <source>PeerJ Comput Sci</source>
        <year>2017</year>
        <volume>3</volume>
        <fpage>104</fpage>
        <pub-id pub-id-type="doi">10.7717/peerj-cs.104</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ounit</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wanamaker</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Close</surname>
            <given-names>TJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>CLARK: fast and accurate classification of metagenomic and genomic sequences using discriminative k-mers</article-title>
        <source>BMC Genomics</source>
        <year>2015</year>
        <volume>16</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>13</lpage>
        <pub-id pub-id-type="doi">10.1186/s12864-015-1419-2</pub-id>
        <pub-id pub-id-type="pmid">25553907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Müller</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hundt</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hildebrandt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hankeln</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Metacache: context-aware classification of metagenomic reads using minhashing</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <issue>23</issue>
        <fpage>3740</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx520</pub-id>
        <pub-id pub-id-type="pmid">28961782</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Truong</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Franzosa</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Tickle</surname>
            <given-names>TL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>MetaPhlAn2 for enhanced metagenomic taxonomic profiling</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>10</issue>
        <fpage>902</fpage>
        <lpage>3</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3589</pub-id>
        <pub-id pub-id-type="pmid">26418763</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sunagawa</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mende</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Zeller</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Izquierdo-Carrasco</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Berger</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Kultima</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Coelho</surname>
            <given-names>LP</given-names>
          </name>
          <name>
            <surname>Arumugam</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tap</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>HB</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Metagenomic species profiling using universal phylogenetic marker genes</article-title>
        <source>Nat Methods</source>
        <year>2013</year>
        <volume>10</volume>
        <issue>12</issue>
        <fpage>1196</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.2693</pub-id>
        <pub-id pub-id-type="pmid">24141494</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Caporaso</surname>
            <given-names>JG</given-names>
          </name>
          <name>
            <surname>Kuczynski</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Stombaugh</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bittinger</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Qiime allows analysis of high-throughput community sequencing data</article-title>
        <source>Nat Methods</source>
        <year>2010</year>
        <volume>7</volume>
        <issue>5</issue>
        <fpage>335</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.f.303</pub-id>
        <pub-id pub-id-type="pmid">20383131</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Menzel</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ng</surname>
            <given-names>KL</given-names>
          </name>
          <name>
            <surname>Krogh</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive taxonomic classification for metagenomics with kaiju</article-title>
        <source>Nat Commun</source>
        <year>2016</year>
        <volume>7</volume>
        <fpage>11257</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms11257</pub-id>
        <pub-id pub-id-type="pmid">27071849</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Broder</surname>
            <given-names>Andrei Z.</given-names>
          </name>
        </person-group>
        <article-title>Identifying and Filtering Near-Duplicate Documents</article-title>
        <source>Combinatorial Pattern Matching</source>
        <year>2000</year>
        <publisher-loc>Berlin, Heidelberg</publisher-loc>
        <publisher-name>Springer Berlin Heidelberg</publisher-name>
        <fpage>1</fpage>
        <lpage>10</lpage>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assembling large genomes with single-molecule sequencing and locality-sensitive hashing</article-title>
        <source>Nat Biotech</source>
        <year>2015</year>
        <volume>33</volume>
        <fpage>623</fpage>
        <lpage>30</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3238</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Melsted</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Mallonee</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Mash: fast genome and metagenome distance estimation using minhash</article-title>
        <source>Genome Biol</source>
        <year>2016</year>
        <volume>17</volume>
        <issue>1</issue>
        <fpage>132</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0997-x</pub-id>
        <pub-id pub-id-type="pmid">27323842</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Popic</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Batzoglou</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>A hybrid cloud read aligner based on minhash and kmer voting that preserves privacy</article-title>
        <source>Nat Commun</source>
        <year>2017</year>
        <volume>8</volume>
        <fpage>15311</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms15311</pub-id>
        <pub-id pub-id-type="pmid">28508884</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Starrett</surname>
            <given-names>GJ</given-names>
          </name>
          <name>
            <surname>Sappington</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kostic</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Buck</surname>
            <given-names>CB</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Mash screen: high-throughput sequence containment estimation for genome discovery</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>232</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1841-x</pub-id>
        <pub-id pub-id-type="pmid">31690338</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zaharia</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Xin</surname>
            <given-names>RS</given-names>
          </name>
          <name>
            <surname>Wendell</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Das</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Armbrust</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dave</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Meng</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Rosen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Venkataraman</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Franklin</surname>
            <given-names>MJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Apache spark: a unified engine for big data processing</article-title>
        <source>Commun ACM</source>
        <year>2016</year>
        <volume>59</volume>
        <issue>11</issue>
        <fpage>56</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1145/2934664</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dadi</surname>
            <given-names>TH</given-names>
          </name>
          <name>
            <surname>Renard</surname>
            <given-names>BY</given-names>
          </name>
          <name>
            <surname>Wieler</surname>
            <given-names>LH</given-names>
          </name>
          <name>
            <surname>Semmler</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Slimm: species level identification of microorganisms from metagenomes</article-title>
        <source>PeerJ</source>
        <year>2017</year>
        <volume>5</volume>
        <fpage>3138</fpage>
        <pub-id pub-id-type="doi">10.7717/peerj.3138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köppel</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ruf</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rentsch</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Multiplex real-time pcr for the detection and quantification of dna from beef, pork, horse and sheep</article-title>
        <source>Eur Food Res Technol</source>
        <year>2011</year>
        <volume>232</volume>
        <issue>1</issue>
        <fpage>151</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1007/s00217-010-1371-y</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eugster</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ruf</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rentsch</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Köppel</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Quantification of beef, pork, chicken and turkey proportions in sausages: use of matrix-adapted standards and comparison of single versus multiplex pcr in an interlaboratory trial</article-title>
        <source>Eur Food Res Technol</source>
        <year>2009</year>
        <volume>230</volume>
        <issue>1</issue>
        <fpage>55</fpage>
        <pub-id pub-id-type="doi">10.1007/s00217-009-1138-5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Interactive metagenomic visualization in a web browser</article-title>
        <source>BMC Bioinformatics</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>385</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-385</pub-id>
        <pub-id pub-id-type="pmid">21961884</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stephens</surname>
            <given-names>ZD</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>SY</given-names>
          </name>
          <name>
            <surname>Faghri</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>RH</given-names>
          </name>
          <name>
            <surname>Zhai</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Efron</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Iyer</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Sinha</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>GE</given-names>
          </name>
        </person-group>
        <article-title>Big data: astronomical or genomical?</article-title>
        <source>PLoS Biol</source>
        <year>2015</year>
        <volume>13</volume>
        <issue>7</issue>
        <fpage>1002195</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pbio.1002195</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schmidt</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hildebrandt</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Next-generation sequencing: big data meets high performance computing</article-title>
        <source>Drug Discov Today</source>
        <year>2017</year>
        <volume>22</volume>
        <issue>4</issue>
        <fpage>712</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1016/j.drudis.2017.01.014</pub-id>
        <pub-id pub-id-type="pmid">28163155</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
