<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10761765</article-id>
    <article-id pub-id-type="publisher-id">44484</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-023-44484-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>rworkflows</italic>: automating reproducible practices for the R community</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5949-2191</contrib-id>
        <name>
          <surname>Schilder</surname>
          <given-names>Brian M.</given-names>
        </name>
        <address>
          <email>brian_schilder@alumni.brown.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2487-8753</contrib-id>
        <name>
          <surname>Murphy</surname>
          <given-names>Alan E.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6807-3180</contrib-id>
        <name>
          <surname>Skene</surname>
          <given-names>Nathan G.</given-names>
        </name>
        <address>
          <email>n.skene@imperial.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/041kmwe10</institution-id><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>Department of Brain Sciences, </institution><institution>Faculty of Medicine, Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>UK Dementia Research Institute at Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>15</volume>
    <elocation-id>149</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Crown 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Despite calls to improve reproducibility in research, achieving this goal remains elusive even within computational fields. Currently, &gt;50% of R packages are distributed exclusively through GitHub. While the trend towards sharing open-source software has been revolutionary, GitHub does not have any default built-in checks for minimal coding standards or software usability. This makes it difficult to assess the current quality R packages, or to consistently use them over time and across platforms. While GitHub-native solutions are technically possible, they require considerable time and expertise for each developer to write, implement, and maintain. To address this, we develop <italic>rworkflows</italic>; a suite of tools to make robust continuous integration and deployment (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link>). <italic>rworkflows</italic> can be implemented by developers of all skill levels using a one-time R function call which has both sensible defaults and extensive options for customisation. Once implemented, any updates to the GitHub repository automatically trigger parallel workflows that install all software dependencies, run code checks, generate a dedicated documentation website, and deploy a publicly accessible containerised environment. By making the <italic>rworkflows</italic> suite free, automated, and simple to use, we aim to promote widespread adoption of reproducible practices across a continually growing R community.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Reproducibility is essential for the progress of research, yet achieving it remains elusive even in computational fields. Here, authors develop the <italic>rworkflows</italic> suite, making robust CI/CD workflows easy and freely accessible to all R package developers.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Computational platforms and environments</kwd>
      <kwd>Standards</kwd>
      <kwd>Software</kwd>
      <kwd>Research management</kwd>
      <kwd>Peer review</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>UK Dementia Research Institute (UK DRI) Future Leaders Fellowship MR/T04327X/1</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Limited 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">Reproducibility is essential to the progress of research. Yet, &gt;70% of researchers reported being unable to reproduce previously published results, according to a 2016 survey by <italic>Nature</italic><sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. There are a variety of reasons contributing to this including pressure to publish, selective reporting, and methods not being reported in sufficient detail to replicate. Due to the programmatic nature of data analysis, there are unique opportunities to systematically maximise reproducibility and methodological transparency in this domain. Despite this, surveys of PubMed and GitHub have revealed that between 68 and 70% of bioinformatics resources were never used beyond the original publication<sup><xref ref-type="bibr" rid="CR2">2</xref>,<xref ref-type="bibr" rid="CR3">3</xref></sup>. Contributing factors may include a lack of coding standards, changing software dependencies, insufficient documentation, and discontinued maintenance post-publication. While general guidelines have been proposed for making software FAIR (Findable, Accessible, Interoperable and Reusable)<sup><xref ref-type="bibr" rid="CR4">4</xref></sup>, exclusively placing the burden on individual developers to design and implement FAIR solutions is insufficient to stimulate substantial progress in this direction<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>. Instead, providing tools to automate FAIR protocols that can be easily applied to a wide variety of software applications with minimal effort and maximal reward for the individual developer are more likely to receive widespread adoption by the scientific community.</p>
    <p id="Par4">Within the sciences, especially bioinformatics and computational biology, R<sup><xref ref-type="bibr" rid="CR6">6</xref></sup> has become one of the most commonly used programming languages<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR7">7</xref></sup>. Initiatives such as The Comprehensive R Archive Network (CRAN), Bioconductor (Bioc)<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref></sup>, rOpenSci<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR11">11</xref></sup>, and R-Forge have made great strides towards improving the accessibility and robustness of R packages through establishing centralised repositories that require certain coding/reproducibility standards. There are R functions to check whether a given package meets best-practice coding standards include <italic>rcmdcheck</italic> (for CRAN standards)<sup><xref ref-type="bibr" rid="CR12">12</xref></sup><italic>, BiocCheck</italic> (for Bioc standards)<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>, and <italic>pkgcheck</italic> (for rOpenSci standards)<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>. However, initially learning how to set up R packages such that they are compatible with these standards, and manually rerunning checks to ensure they continue to meet these standards, incur non-trivial costs in terms of both time and effort. Even if all checks pass on one’s local machine, this does not guarantee that the same software will run as expected on a different Operating System (OS) (e.g. due to version/availability conflicts across many software dependencies). Most journals, funders, and institutions do not systematically check software for any meaningful quality or reproducibility standards, nor do they check for continued maintenance. It is therefore usually left to each research group to decide how rigorously they test their software, a process which is often opaque to users. Presently, many softwares are exclusively distributed through GitHub, due to the ease of doing so and the perceived challenges of submitting to dedicated R package repositories such as CRAN/Bioc/rOpenSci. Unlike these dedicated R package repositories, GitHub does not require R packages (or any other software) to meet any quality standards, or even install or run. In the absence of additional safeguards, this leaves even more opportunities for such softwares to fail or produce erroneous results. This is problematic for not only developers when assessing the quality and fail points of their own software, but for all stakeholders in the R community, including users, research groups, companies, or any downstream entity that relies on results generated by these software.</p>
    <p id="Par5">A prevalent culture of openly sharing software source code and study-specific analysis scripts on public repositories has undoubtedly helped shift the computational community towards a more transparent, collaborative, and open-source model. Over the last decade, GitHub has rapidly overtaken all other code repositories as by far the most widely used in the fields of bioinformatics and computational biology (&gt;90% in 2017)<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. In that time, there has been extensive integration of GitHub with other resources such as Zenodo (for example, <italic>rworkflows</italic> Zenodo releases<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>) and Figshare, enabling the assignment of persistent Digital Object Identifiers (DOIs) with public source code (see <italic>Supplementary Information: Links</italic> for more details). At the same time, there have been considerable developments in the scope and depth of tools built directly into the GitHub architecture, including the relatively recent addition of GitHub Actions (GHA). GHA allows any user to run customised Continuous Integration/Deployment (CI/CD) workflows directly on GitHub servers for free and can be triggered simply by pushing updates to one’s GitHub repository as usual. These workflows can call upon other bundled scripts hosted elsewhere on GitHub to perform sets of related steps, called “actions”. These actions can be triggered to automatically launch by user-selected events, including pushes and pull requests. This ensures that every time a change is made to the underlying code, the software continues to work as expected across multiple OS with a fresh install of all dependencies. However, setting up these workflows currently takes considerable time, effort, and technical expertise.</p>
    <p id="Par6">In an effort to promote FAIRness, as well as enhance software usability and longevity, we developed <italic>rworkflows</italic>: a robust, reusable, flexible and automated CI/CD suite specifically for the development of R packages (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The <italic>rworkflows</italic> suite includes three main components: (1) the <italic>templateR</italic> template: a CRAN/Bioc-compatible R package template that automatically generates essential documentation using package metadata, (2) the <italic>rworkflows</italic> R package: a lightweight CRAN package to automatically setup short, customisable workflows that trigger the <italic>rworkflows</italic> action and (3) the <italic>rworkflows</italic> action: an open-source action available on the GHA Marketplace (see Methods for a more detailed description of each step in the <italic>rworkflows</italic> action). Importantly, the <italic>rworkflows</italic> action is designed to work with any R package out-of-the-box and can be set up by a one-time call to the R function <italic>use_workflow()</italic>. This means users do not need to manually edit any workflow scripts, obviating the need to invest time in learning GHA-specific syntax or configuration. In addition, the <italic>rworkflows</italic> action produces three main resources. First, a fully containerised installation of the R package and all of its dependencies are automatically created and pushed to a container registry (e.g. GitHub Container Registry, Docker Hub) so that users can easily install local copies of the fully setup environment as either Docker or Singularity containers. Second, it creates a dedicated documentation website entirely from <italic>README</italic> files, in-code <italic>roxygen</italic> notes<sup><xref ref-type="bibr" rid="CR16">16</xref></sup> and vignettes<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, and then deploys the website to the associated GitHub repository via GitHub Pages. Finally, a variety of status reports can be directly displayed in the <italic>README</italic>/landing page of the GitHub repository as badges, such as whether all GHA have been passed, code coverage reports (i.e. what percentage of the total code has been tested), number of downloads, last commit date<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, and more. This allows maintainers and users to immediately assess the current state of the software package.<fig id="Fig1"><label>Fig. 1</label><caption><title>The <italic>rworkflows</italic> suite.</title><p>Example usage of <italic>rworkflows</italic>. <bold>a</bold> Create package: create a new R package by forking and cloning the <italic>templateR</italic> template, or use an existing R package. <bold>b</bold> Add workflow: Install the rworkflows R package and use the <italic>use_workflows()</italic> command to generate a workflow <italic>yaml</italic> file in the correct folder structure. Arguments to customise the workflow are detailed in the documentation website. <bold>c</bold> Trigger action: trigger the rworkflows GitHub Action by pushing to GitHub. <bold>d</bold> Run the R package through the workflow on three different OS platforms in parallel. <bold>e</bold> Inspect the results of the workflow run. If one or more workflows fail, an email is automatically sent to the user. <bold>f</bold> If issues are found, make fixes to the software and push again to retrigger the <italic>rworkflows</italic> action. <bold>g</bold> When all workflows have passed, the documentation website is built using <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup> and deployed via GitHub Pages. The containerised R package is then deployed to Docker Hub. Badges embedded into markdown or HTML files (e.g. <italic>README</italic> documentation) will also be automatically updated to reflect the R package’s current status. In this figure, a version of the “R” logo with modified colours is used under the terms of the Creative Commons Attribution-ShareAlike 4.0 International license (CC-BY-SA 4.0) (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</ext-link>). The “container” logo was created by Pause08 and is freely available for reuse via Flaticon (<ext-link ext-link-type="uri" xlink:href="https://www.flaticon.com/free-icon/container_860142">https://www.flaticon.com/free-icon/container_860142</ext-link>). The Codecov logo is used with permission from Codecov. <italic>pkgdown</italic> is provided under an MIT license (<ext-link ext-link-type="uri" xlink:href="https://github.com/r-lib/pkgdown/blob/main/LICENSE.md">https://github.com/r-lib/pkgdown/blob/main/LICENSE.md</ext-link>).</p></caption><graphic xlink:href="41467_2023_44484_Fig1_HTML" id="d32e445"/></fig></p>
    <p id="Par7">In an effort to assist the development community in adopting <italic>rworkflows</italic> and make it a <italic>de facto</italic> standard for R package maintainers, we have already begun to expand its user base by making Pull Requests to GitHub repositories of R packages. In particular, we have focused on R packages that have a large user base (e.g. <italic>Seurat</italic><sup><xref ref-type="bibr" rid="CR19">19</xref>,<xref ref-type="bibr" rid="CR20">20</xref></sup>, <italic>Signac</italic><sup><xref ref-type="bibr" rid="CR21">21</xref></sup>, <italic>ArchR</italic><sup><xref ref-type="bibr" rid="CR22">22</xref></sup> or are core Bioc dependencies that thousands of other softwares rely upon (e.g. <italic>GenomicRanges</italic><sup><xref ref-type="bibr" rid="CR23">23</xref></sup>, <italic>GenomicFiles</italic><sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, <italic>BSgenome</italic><sup><xref ref-type="bibr" rid="CR25">25</xref></sup>, <italic>rtracklayer</italic><sup><xref ref-type="bibr" rid="CR26">26</xref></sup>, <italic>RSamtools</italic><sup><xref ref-type="bibr" rid="CR27">27</xref></sup>, <italic>VariantAnnotation</italic><sup><xref ref-type="bibr" rid="CR28">28</xref></sup>). We also present evidence that over 51% of all R packages currently in existence are exclusively distributed via GitHub. This further emphasises the need for robust, GitHub-based quality control/documentation standards that can be frictionlessly utilised by non-experts.</p>
    <p id="Par8">Finally, in collaboration with a multi-national community of developers we have created a step-by-step tutorial guiding users on how to create Bioc R packages using tools including <italic>rworkflows</italic>: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html">https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html</ext-link></p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>rworkflows adoption</title>
      <p id="Par9">To date, <italic>rworkflows</italic> has been successfully implemented in over 149 R repositories (including forks), and downloaded over 3700 times at an average rate of &gt;300 downloads/month. This includes packages both internal and external to our own research group, as well as the <italic>rworkflows</italic> R package itself. To illustrate this, we created a graph illustrating many of the R packages that currently use <italic>rworkflows</italic>, or depend on packages that do (i.e. second-order dependents) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). As a proxy of <italic>rworkflows</italic>’s downstream impact on the R development community, metadata was systematically gathered from GitHub. Totals across 58 dependents there were: 3089 stars, 758 forks, and 5,0482 downloads (across all distribution repositories).<fig id="Fig2"><label>Fig. 2</label><caption><title>Reverse dependency graph.</title><p>A reverse dependency graph showing all R package GitHub repositories (blue nodes) that currently utilise the <italic>rworkflows</italic> action (first-order dependents) or depend on a package that does (second-order dependents). All data was captured from October 24, 2023. An interactive, periodically updated version of this graph is also available online (see Data availability section).</p></caption><graphic xlink:href="41467_2023_44484_Fig2_HTML" id="d32e554"/></fig></p>
      <p id="Par10">An interactive and periodically updated version of this graph on the dedicated <italic>rworkflows</italic> documentation website (see Data availability section). This online version also displays the metadata for each repository when users hover the cursor over the respective node.</p>
    </sec>
    <sec id="Sec4">
      <title>GitHub as a package distributor</title>
      <p id="Par11">Most developers who distribute their R packages through dedicated repositories like CRAN, Bioc or rOpenSci still maintain a copy of their software on GitHub for the purposes of development, collaboration and transparency. However many packages go through a lengthy period of development (months to years) before being eventually accepted to one of the dedicated R package repositories. In fact, many developers may never submit their packages to these dedicated repositories, and depending on where and if they publish their work, these packages can be introduced into the scientific community without ever being thoroughly tested. As more software becomes exclusively distributed on GitHub, there is an increased need for GitHub-native solutions which make CI/CD seamless. Since there are currently few to no set standards imposed by journals or GitHub, it is incumbent upon the R developer community to provide tools which not only make best-practice coding, documentation and CI/CD easy to implement, but immediately beneficial enough to incentivise developers to widely adopt these practices.</p>
      <p id="Par12">To evaluate the magnitude of need for GitHub-based solutions in the R community, we gathered comprehensive data on where repositories R packages are hosted (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). An upset plot was generated to visualise how many R packages are distributed via one or multiple repositories. Of the 50,685 R packages we identified, 39.3% (19,932) are available via CRAN, 6.9% (3515) are available via Bioc, 0.63% (318) are available via rOpenSci, 4.3% (2176) are available via R-Forge, and 62.3% (31,592) are available on GitHub. Of particular note, 51% (25,883) of all R packages are exclusively distributed through GitHub. This is likely a very conservative underestimate, as the data on GitHub R packages comes from a static snapshot previously collected in February 2018, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. Thus, over half of all R packages are currently not vetted by dedicated R package distributors and are instead left to the developers to determine their own standards and strategies for reproducibility.<fig id="Fig3"><label>Fig. 3</label><caption><title>Repositories through which R packages are distributed.</title><p>Upset plot of how R packages are distributed through base R, dedicated R packages repositories (CRAN, Bioc, rOpenSci, R-Forge), or code repositories (GitHub). Rows indicate the total number of R packages available through a given distributor. Columns with single dots indicate the number of R packages that are exclusively available through one repository. Columns with multiple dots indicate the number of R packages available via two or more repositories. The number of R packages exclusively distributed through GitHub is highlighted in red.</p></caption><graphic xlink:href="41467_2023_44484_Fig3_HTML" id="d32e576"/></fig></p>
    </sec>
    <sec id="Sec5">
      <title>Comparisons with usethis/biocthis</title>
      <p id="Par13">It should be noted that there have been at least two other efforts to implement reproducible workflows for R package development via GHA, namely the R packages <italic>usethis</italic><sup><xref ref-type="bibr" rid="CR29">29</xref></sup> and its Bioc-oriented derivative <italic>biocthis</italic><sup><xref ref-type="bibr" rid="CR30">30</xref></sup>. While <italic>rworkflows</italic> was heavily influenced by <italic>these packages</italic>, there are several key differences. First, <italic>rworkflows</italic> operates primarily as an action which is merely called upon by a short workflow script that supplies certain parameters, whereas both <italic>usethis</italic> and <italic>biocthis can only</italic> generate static workflow scripts that dictate each step of the workflow in the file itself. This distinction becomes important when updates need to be made (e.g. new system dependencies, changes to R function implementations, deprecation of certain subactions). Actions such as <italic>rworkflows</italic> need only be updated on the centralised Github repository (see Code availability section), which then propagates to all users who call the <italic>rworkflows</italic> action, even if they implemented <italic>rworkflows</italic> in their package prior to the changes. In contrast, static workflow scripts must be updated by every user individually, and repeated for each GitHub repository. This issue compounds on itself when tasks are split into multiple workflow scripts, as is the case for <italic>usethis</italic>. In some cases, it may take a while for users to infer that the errors they’re experiencing are due to changes in the VM provided by the GHA server (for example), rather than something the user is doing wrong, or eventually abandon using the workflow entirely. That said, if users wish to create a more customised workflow that diverges from the <italic>rworkflows</italic> action (and only use it as an initial basis for their script), a full workflow version can be created with <italic>rworkflows::use_workflow(name</italic>=<italic>”rworkflows_static”)</italic>, which offers functionality analogous to that of <italic>biocthis</italic>.</p>
      <p id="Par14">Second, <italic>u</italic>sers can easily control which version of the <italic>rworkflows</italic> action to use with the <italic>tag</italic> argument to indicate a branch (e.g. “master” for the latest version) or release tag (e.g. “v1” for a stable release version tied to a specific commit). Workflow-based strategies like <italic>usethis</italic>/<italic>biocthis</italic> do not enable users to to use different versions of the same workflow, unless they reinstall a different release of the package. In the case of <italic>biocthis</italic>, users must also reinstall all other Bioc packages each time they want to use a different version of the workflow due to Bioc’s strongly enforced version control standards.</p>
      <p id="Par15">Third, <italic>rworkflows</italic> offers greater customisability via over 35 fully documented arguments (see documentation website for details: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>) that can be supplied to the <italic>use_workflow</italic> function (with sensible defaults that work out-of-the-box). For example, these arguments allow users to easily choose trigger branches, trigger events, runner OS, code check types as well as the option to support <italic>act</italic><sup><xref ref-type="bibr" rid="CR31">31</xref></sup>, a separate software for running and troubleshooting actions locally before launching them to GitHub. In comparison, the analogous <italic>biocthis::use_bioc_github_action()</italic> function currently has 7 arguments and more limited customisability (<italic>biocthis</italic> v1.12.0).</p>
      <p id="Par16">Fourth, <italic>rworkflows</italic> currently has 92% code coverage via unit tests, whereas <italic>biocthis</italic> (v1.12.0) and <italic>usethis</italic> (v2.2.2) currently have 80% and 57% code coverage, respectively (though this could improve in the future). Having high code coverage helps to improve package robustness and reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>.</p>
      <p id="Par17">Fifth, <italic>rworkflows</italic> obviates the need for a user-supplied Dockerfile as it creates one on the fly instead (see section Container usage). This level of abstraction serves to expand the usage of containers to those who do not know how to successfully set them up manually, or are unfamiliar with the Docker-specific syntax necessary to do so. None of this is to say that the <italic>biocthis</italic> package is obsolete, but rather that it offers other complementary features such as more fine-grained control over template creation than the all-in-one strategy adopted by <italic>templateR</italic>, as well as automated code styling.</p>
      <p id="Par18">Finally, unlike static workflows, all the repositories in which centralised GitHub actions (e.g. <italic>rworkflows</italic>) have been implemented are automatically recorded by GitHub. These can be accessed under the Insights tab of the action’s GitHub repository, providing greater insight into the scope of usage and impact of the action (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
    </sec>
    <sec id="Sec6">
      <title>Comparisons with Bioconductor servers</title>
      <p id="Par19">The <italic>rworkflows</italic> suite is not mutually exclusive to the package checking services provided by Bioc, which regularly run standardised checks on multiple OS. To the contrary, <italic>rworkflows</italic> fills an important gap for developers of Bioc packages who wish to comprehensively test their package before pushing to the upstream Bioc copy, as the upstream copy can take several days to rerun checks. Having an intermediate checking solution via GitHub provides feedback within minutes or hours, as opposed to days, thus greatly accelerating the development cycle. While Bioc does provide a dedicated Docker container with several prerequisite software installed (e.g. <italic>BiocManager</italic>, <italic>BiocCheck</italic>), these containers do not have any other Bioc packages installed. In fact, by default <italic>rworkflows</italic> uses the Bioc Docker container as a base and then builds upon it to generate a package-specific containerised environment ready for distribution to users. This greatly speeds up the time it takes for any given user to successfully install and start using the developer’s R package.</p>
    </sec>
    <sec id="Sec7">
      <title>Use case: MAGMA.Celltyping</title>
      <p id="Par20">To demonstrate how <italic>rworkflows</italic> can be helpful in practice, we use the R package <italic>MAGMA.Celltyping</italic> (developed and maintained by our lab) as an example<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>. Since first implementing <italic>rworkflows</italic>, it has revealed a number of vulnerabilities, missing documentation, and bugs within <italic>MAGMA.Celltyping</italic> (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=">https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=</ext-link>). Some of these bugs were only visible when run within a particular version of R (e.g. development) or on a particular OS type. For example, the way we constructed file paths was not robust on Windows OS, and would lead to the software being unable to find key resources on that platform (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues/92">https://github.com/neurogenomics/MAGMA_Celltyping/issues/92</ext-link>). As none of the developers use Windows machines, this would have been left for users to discover these bugs and (hopefully) report them. In the meantime, some users may have abandoned using our tool without our knowledge. Moreover, running code coverage tests has enabled us to identify potential weak points in our code and design tests that are capable of better assessing these. Whenever we make changes to our code, the coverage badge in the README automatically updates so that we (and our users) know how robust we can expect our tool to be (currently at 75% coverage in v2.0.11, with plans to improve this further). Finally, users of <italic>MAGMA.Celltyping</italic> can now bypass all installation and dependency issues with containers automatically generated by <italic>rworkflows</italic>. The instructions for setting up Docker/Singularity containers were also automatically generated by <italic>rworkflows</italic> (<italic>rworkflows::use_vignette_docker()</italic>), wherein the process of setting up <italic>MAGMA.Celltyping</italic> on any computing environment is reduced to a single copy-and-paste step (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker">https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker</ext-link>).</p>
    </sec>
  </sec>
  <sec id="Sec8" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par21">Most developers would agree that the FAIR principles are noble goals worthy of striving towards. However, the costs associated with putting these principles into practice (e.g. time, learning curves, lack of computational resources) often deter developers from ever effectively implementing them. Therefore, there is a dire need to reduce the burden put on individual developers by automating reproducibe practices, while at the same time increasing the amount of useful output generated by such practices. This will greatly improve the overall cost/benefit ratio of conducting reproducible science, which will in turn incentivise widespread adoption of FAIR and open practices. <italic>rworkflows</italic> aims to do exactly this, by enabling greatly simplified implementation of a robust GitHub-native testing, documentation, and containerisation pipeline through a single R function. This makes <italic>rworkflows</italic> usable by even novice programmers and requires exceedingly minimal local computing power. Furthermore, <italic>rworkflows</italic> can be used in either public or private repositories, extending its utility to pre-production or intellectual property-sensitive packages.</p>
    <p id="Par22">There are no doubt hundreds of invaluable and high-quality R packages that are not hosted on CRAN/Bioc/rOpenSci. Nevertheless, assessing package usability is currently a process of trial and error, which amounts to a huge number of wasted hours compounded across thousands of users. <italic>rworkflows</italic> attempts to make these distinctions more visible and immediately accessible, all while helping to make all R packages meet a set of minimum standards (or at least transparently advertise that they dont yet).</p>
    <p id="Par23">Peer-reviewed journals, as well as repositories like CRAN, Bioc, and rOpenSci, rely almost entirely on volunteer community members to review and approve software packages for official release<sup><xref ref-type="bibr" rid="CR11">11</xref>,<xref ref-type="bibr" rid="CR37">37</xref></sup>. Each additional cycle in the review–response process due to common and avoidable issues can incur substantial and unnecessary delay. This is only exacerbated by the limited time and considerable demands both parties are faced with<sup><xref ref-type="bibr" rid="CR38">38</xref>,<xref ref-type="bibr" rid="CR39">39</xref></sup>. <italic>rworkflows</italic> serves to significantly reduce the burden of back-and-forth troubleshooting by decreasing the prevalence of installation errors (through containerisation), coding bugs (through package checks), and miscommunications (through documentation). As the exponentially expanding scientific literature continues to outpace the proportion of qualified researchers willing to volunteer as reviewers<sup><xref ref-type="bibr" rid="CR39">39</xref></sup>, making this process more efficient will become increasingly critical for the sustainability of timely, high-quality peer-reviewed research<sup><xref ref-type="bibr" rid="CR37">37</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup>. Therefore, journals may wish to consider requiring tools such as <italic>rworkflows</italic> to be implemented as a prerequisite for progressing the review process.</p>
    <p id="Par24">Code coverage is one particularly useful metric for assessing package robustness. While the precise measurement of code coverage varies slightly from one implementation to another, it can generally be summarised as the percentage of lines in your software’s code that are run during unit tests (e.g. using the <italic>testthat</italic> or <italic>RUnit</italic> frameworks). This takes into account that code within conditional statements may not be run in all scenarios, and thus encourages developers to test the same code using multiple sets of parameters. Assuming that the tests themselves are valid, a code coverage of 92% could be interpreted as “92% of its code has been systematically tested and is working as intended”. Thus, code coverage can serve as a useful, continuous measure of package robustness as it reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>. The <italic>rworkflows</italic> action automatically runs code coverage tests via <italic>covr</italic><sup><xref ref-type="bibr" rid="CR41">41</xref></sup> and uploads a report to the browser-based Codecov or Coverall services where users can interactively explore which portions of their code are currently not being thoroughly tested. Finally, the <italic>rworkflows::use_badges</italic> function (which builds upon the <italic>badger</italic> package) allows developers to easily advertise both discrete metrics (passing on CRAN/Bioc, passing <italic>rworkflows</italic> checks) and continuous metrics (code coverage percentage) on their GitHub landing pages.</p>
    <p id="Par25">Providing containerised environments with all necessary dependencies pre-installed and an interactive development platform (i.e. <italic>RStudio</italic><sup><xref ref-type="bibr" rid="CR42">42</xref></sup>) eliminates virtually all installation troubleshooting. This also helps reduce the burden of maintaining software across hundreds to thousands of users, each with one or more slightly different computing environments. As an additional incentive to developers, continued maintenance of bioinformatics tools post-publication is associated with multiple metrics of impact including increased citations<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. <italic>rworkflows</italic> also allows users to control which versions of R, Bioc, and Python they wish to have installed within the container. By default, it uses the most up-to-date development versions of R/Bioc so that developers can stay ahead of the curve and identify issues in future versions before they have been released to the public. This is important, as it prevents situations where developers are suddenly faced with many bugs that are already affecting a large number of users and must be fixed urgently.</p>
    <p id="Par26">Beyond the initial publication of an R package, <italic>rworkflows</italic> offers a variety of benefits for different stakeholders. Automating clean and consistent documentation website generation without any additional effort encourages developers to keep their documentation up to date and accessible. Having thorough documentation is not only an invaluable resource for new users, but also trainees in the developers’ own lab, or even when reteaching themselves after a long period of not being active on the project.</p>
    <p id="Par27">In that same vein, we recognise the importance of ensuring <italic>rworkflows</italic> itself is maintained and extended well into the foreseeable future. We are committed to securing this vision, out of a desire to make this resource continually available to the R community as well as our reliance on <italic>rworkflows</italic> for all of our R packages. It is for this very reason that the <italic>rworkflows</italic> action was designed to, whenever possible, use subactions from well-established developer organisations (e.g. GitHub, R Consortium, Posit, Bioc) as they have the highest likelihood of being maintained in the long term. In addition, we have already begun to explore multiple avenues towards open-source longevity including (but not limited to) seeking official support/collaboration with software repositories, user contributions, crowd-funding, corporate sponsorship, and grants for sustainable software development. All members of the community are encouraged to voice their ideas/concerns/opinions by participating in the dedicated “Longevity” Discussion board (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/discussions">https://github.com/neurogenomics/rworkflows/discussions</ext-link>). In any case, we are dedicated to ensuring <italic>rworkflows</italic> remains open source, well maintained, and free. Additional features already in development include interactive debugging within the GitHub-hosted <italic>r</italic><italic>workflows</italic> action environment, maximising VM storage capacity for resource-intensive R packages, and improved parameter flexibility throughout.</p>
    <p id="Par28">To conclude, the <italic>rworkflows</italic> suite offers an essential toolkit for developers and users of any experience level. This includes developers who (1) currently (or plan to) distribute their R packages through repositories like CRAN/Bioc/rOpenSci and want to run quality checks before resubmitting a new version for official release, (2) wish to exclusively distribute their code through GitHub while maintaining a high level of coding standards, (3) want to keep the documentation updated without constant manual upkeep of a website and/or (4) want to distribute their software in a fully reproducible Docker/Singularity container. Furthermore, the <italic>rworkflows</italic> action is designed to be both easy to use and flexible (through customisable parameters), thus enabling developers to utilise it in whatever way best suits their project-specific goals In practice, this can range from checking for basic installability/usability of an R package, all the way to extensive evaluation of consortia-specific coding and documentation standards with fully automated container deployment. Therefore, <italic>rworkflows</italic> fills a gap that an increasing number of R developers find themselves in by reducing the burden of effectively implementing FAIR practices, and increasing its immediate benefits for developers and users alike. Finally, to further expand its accessibility we have provided a series of YouTube videos walking new users through the theory and practice of <italic>rworkflows</italic> (<ext-link ext-link-type="uri" xlink:href="https://youtube.com/@NeurogenomicsLab">https://youtube.com/@NeurogenomicsLab</ext-link>).</p>
  </sec>
  <sec id="Sec9">
    <title>Methods</title>
    <sec id="Sec10">
      <title>templateR template</title>
      <p id="Par29">For users who are creating a new R package from scratch, we have provided a CRAN/Bioc-compatible template (<italic>templateR)</italic>. To get started, one simply forks the template by navigating to the GitHub repository (see Code availability section), clicking “Use this template”, and cloning a copy of the new R package to begin editing it (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The user need only replace key metadata fields (e.g. Package, Title, Description, URL) in the <italic>DESCRIPTION</italic> file (a required file for all R packages). What makes this template unique is that all other components of the package (README, vignettes, unit test setup scripts) are programmatically autofilled based on the <italic>DESCRIPTION</italic> file. This strategy greatly minimises redundant and error-prone aspects of R package documentation.</p>
      <p id="Par30">Alternatively, users can start with any pre-existing R package and skip directly to the next step: using <italic>rworkflows</italic> R package. In either case, we have created a companion Wiki page to help guide users who are unfamiliar with the Bioc standards and offer a variety of tips and tricks to make this process easier, which we continue to maintain (see Code availability section).</p>
    </sec>
    <sec id="Sec11">
      <title>rworkflows R package</title>
      <p id="Par31">The <italic>rworkflows</italic> R package is available on both CRAN and GitHub (see Code availability). Workflow scripts (written in <italic>yaml</italic> format) placed within a specific subdirectory within the GitHub repository (<italic>.github/workflows/*.yml</italic>), dictate which actions are triggered under which conditions. For those not familiar with creating GHA workflows, learning the GHA-specific expressions and idiosyncrasies can be a time-consuming and iterative process. Instead, we have abstracted this step away by autogenerating workflow scripts from a single R command in the dedicated R package: <italic>use_workflow()</italic>. This creates a fully functional workflow file in the correct subdirectory even with no arguments supplied, and only needs to be run once per R package (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). For greater flexibility, users can supply the function with their preferred arguments to generate (or regenerate) a customised workflow script to trigger the <italic>rworkflows</italic> action. By default, the workflow will trigger the <italic>rworkflows</italic> action (see <italic>rworkflows</italic> action section below) upon pushes or pull requests to the remote GitHub repository. For minor pushes (e.g. fixing a typo in the <italic>README</italic> text), one can avoid triggering the action by simply adding the string “[skip ci]” to the commit message. Triggers can be set to activate for specific GitHub branches only (e.g. “main”, “master”, “devel”) or even <italic>regex</italic> expressions (e.g. “RELEASE_**”), which can be quite helpful for developing Bioc packages with regular release updates without having to modify the workflow script each time. Users can even write multiple workflows to the same repository, setting each to trigger via different branches and/or with different parameters (e.g. use the RELEASE_3_18 version of the Bioc docker container when pushing to the RELEASE_3_18 branch). For step-by-step instructions we provide a vignette specifically geared towards Bioc developers (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link>). Finally, the <italic>use_workflow()</italic> allows users to control exactly which specific release of the <italic>rworkflows</italic> action they wish to trigger (via the <italic>tag</italic> argument). For a full description of all arguments of the <italic>use_workflow()</italic> function, please refer to the documentation website (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>).</p>
      <p id="Par32">In addition, the <italic>rworkflows</italic> R package contains other useful functions for developers, including <italic>use_badges()</italic>, which dynamically generates badges indicating various aspects of the software package’s status to the documentation pages (e.g. the <italic>README</italic> file). It also provides the function <italic>use_dockerfile()</italic>, which writes a Docker recipe file (i.e. Dockerfile) to create a Docker image with the user’s R package (and all of its dependencies) pre-installed). Note that this same function is called automatically in step 8 of the <italic>rworkflows</italic> action, but if a pre-existing Dockerfile in the current working directory is detected, this step is skipped and the pre-existing Dockerfile is used instead. Thus, if preferred, users can have more customised control over how their Docker container is configured. Finally, <italic>use_readme(), use_vignette_docker()</italic> and <italic>use_vignette_getstarted()</italic> can generate autofiled templates for each of these R package documentation components respectively.</p>
    </sec>
    <sec id="Sec12">
      <title>rworkflows action</title>
      <p id="Par33">Once triggered by a workflow, the <italic>rworkflows</italic> action launches three virtual machines (VMs) in parallel to test the R package across multiple OS, including Linux, Mac, and Windows. Within each VM, the following steps are performed (Fig. <xref rid="Fig1" ref-type="fig">1d</xref>):<list list-type="order"><list-item><p id="Par34">Install system: Installs all OS-specific system dependencies that account for a variety of different functionalities that R users may require.</p></list-item><list-item><p id="Par35">Install R: Installs all R dependencies for the R package being tested. Three rounds dependency installation are attempted using slightly different methods to ensure robustness of this procedure without requiring the user to manually troubleshoot this step.</p></list-item><list-item><p id="Par36">Install LaTeX: Install a specific version of LaTeX and any extra LaTeX packages (controlled by the arguments <italic>has_latex</italic>, <italic>tinytex_installer</italic>, <italic>tinytex_version</italic>, and <italic>pandoc_version</italic>).</p></list-item><list-item><p id="Par37">Install conda: Install <italic>conda</italic>, <italic>miniconda</italic>, miniforge, or <italic>mamba</italic> (controlled by the arguments <italic>miniforge_variant</italic>, and <italic>miniforge_version</italic>). Users can additionally provide a yaml file (via the <italic>environment_file</italic> argument) with specifications for a <italic>conda</italic> environment to build and/or activate before all other downstream code checks. This greatly simplifies the installation of not only python packages (which some R packages may use as a backend) but also various extra tools and system dependencies not installed in previous steps. Finally, rworkflows provide a helper R function, <italic>construct_conda_yml()</italic>, for creating new <italic>conda</italic> yaml files for those who are unfamiliar with the formatting requirements.</p></list-item><list-item><p id="Par38">CRAN checks: Run CRAN checks via <italic>rcmdcheck()</italic>. When <italic>run_rcmdcheck</italic> = <italic>TRUE</italic>, all checks must pass in order for the GHA to succeed. This step uses CRAN standards by default, but can run <italic>rcmdcheck</italic> without CRAN standards by setting the argument <italic>as_cran</italic> = <italic>FALSE</italic>.</p></list-item><list-item><p id="Par39">Bioc checks: Run Bioc checks via <italic>BiocCheck()</italic>. When <italic>run_bioc</italic> = <italic>TRUE</italic>, all checks must pass in order for the action to succeed.</p></list-item><list-item><p id="Par40">Unit tests: Runs unit tests implemented via the <italic>testthat</italic><sup><xref ref-type="bibr" rid="CR43">43</xref></sup> and/or <italic>RUnit</italic><sup><xref ref-type="bibr" rid="CR44">44</xref></sup> R packages and generates a downloadable report of the results.</p></list-item><list-item><p id="Par41">Code coverage: Runs code coverage tests and uploads the results to Codecov.</p></list-item><list-item><p id="Par42">Build website: (Re)builds the documentation website from <italic>README</italic> files, in-line <italic>roxygen</italic> notes, and vignettes using the <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup>. It then deploys the website via GitHub Pages in a new branch named “gh-pages” in the same repository. Deploying the website via a separate branch is advantageous as it avoids accidentally adding large HTML/CSS/JavaScript source files and libraries to the R package itself (which can slow down its installation and performance in some situations).</p></list-item><list-item><p id="Par43">Push container: Pushes a container to a container registry with your R package, all of its dependencies, and an interactive Rstudio interface pre-installed. Included in <italic>templateR</italic> is an auto-filled vignette for how to create a local Docker or SIngularity container. If you’ve selected a non-default container registry (e.g. Docker Hub), this step requires a valid authentication token from the relevant registry, which can be stored as a GitHub Secrets variable. This ensures that only users with appropriate push permissions to a given registry account can update the container there.</p></list-item></list></p>
      <p id="Par44">Steps 6-8 are only run on the Linux VM to avoid redundancy and avoid conflicts due to simultaneous pushes to their respective repositories (i.e. Codecov, GitHub, Docker Hub).</p>
    </sec>
    <sec id="Sec13">
      <title>Container usage</title>
      <p id="Par45">Containerisation is especially useful when distributing R packages to many users using a wide variety of OS platforms, including high-performance computing (HPC) clusters which may have software installation restrictions for non-root users. Once the <italic>rworkflows</italic> action has successfully completed at least once on the Linux VM, both developers can create Docker and/or Singularity images from the container hosted on a container registry. By default, rworkflows pushes to the GitHub Container Registry, which has the advantage of not requiring any additional accounts or credentials and automatically appearing directly on the associated GitHub repository landing page (under the section “Packages”). Alternatively, users may specify any preferred container registry (e.g. Docker Hub) using the <italic>docker_registry</italic> argument.</p>
      <p id="Par46">If <italic>templateR</italic> was used as a template, a vignette detailing a step-by-step reproducible example is autogenerated. A rendered version of this vignette can be accessed via the dedicated GitHub Pages site, and a link to this vignette is automatically rendered within the <italic>templateR</italic> template <italic>README</italic> file (see Code availability section) under the “Documentation → Docker/Singularity” subheader.</p>
    </sec>
    <sec id="Sec14">
      <title>rworkflows adoption</title>
      <p id="Par47">Metadata was gathered from the GitHub application programming interface (API) for each repository using the R packages <italic>echodeps</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. This was used to both identify which packages are currently using the <italic>rworkflows</italic> action (i.e. dependents), and to gather relevant metadata on each of the repositories. Of particular interest were the following metrics; stars (the number of users that bookmarked the GitHub repo with a star), unique clones (the number of unique instances that the GitHub repo was downloaded from Github), and unique views (the number unique instances the GitHub repo was viewed in a web browser). Here, “unique” means the number of distinct internet protocol (IP) addresses. Sums of each of these metrics across all were computed to represent the total downstream impact of <italic>rworkflows</italic>. All dependents were visualised as nodes in a directed acyclic graph, connecting to an additional node representing the <italic>rworkflows</italic> action (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
      <p id="Par48">To identify the R packages with the highest potential for downstream impact on other packages, we collected data on the number of downloads for every package in CRAN and Bioc using <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. We then selected the packages with the greatest numbers of downloads and prioritised them for making Pull Requests on their respective GitHub repos to implement <italic>rworkflows</italic>.</p>
      <p id="Par49">An R markdown script to fully reproduce these analyses, as well as an interactive version of the graph with additional metadata, is available as a vignette on the official <italic>rworkflows</italic> GitHub Pages documentation website (See the Code availability section for link).</p>
    </sec>
    <sec id="Sec15">
      <title>GitHub as a package distributor</title>
      <p id="Par50">To comprehensively assess which repositories R packages are distributed via, we collected metadata on all known R packages from base R, CRAN, Bioc, rOpenSci, R-Forge, and GitHub using the package <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. The total and intersection between packages in each of these repositories were then computed and visualised using the R package <italic>UpSetR</italic><sup><xref ref-type="bibr" rid="CR46">46</xref></sup> (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p>
      <p id="Par51">It should be noted that the data on GitHub-hosted R packages comes from a static snapshot previously collected in February 2018 via the <italic>echogithub</italic> dependency <italic>githubinstall</italic><sup><xref ref-type="bibr" rid="CR47">47</xref></sup>, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. This means that our estimates of the proportion of R packages that are distributed exclusively through GitHub are almost certainly an underestimate. An R markdown script to fully reproduce these analyses is available as a vignette on the <italic>rworkflows</italic> documentation website (See the Code availability section).</p>
    </sec>
    <sec id="Sec16">
      <title>Statistics and reproducibility</title>
      <p id="Par52">For the <italic>rworkflows</italic> adoption analysis the total number of GitHub stars, forks, and downloads were summed across all first- and second-order dependents of <italic>rworkflows</italic>. All analysis code can be found on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/vignettes">GitHub</ext-link>.</p>
    </sec>
    <sec id="Sec17">
      <title>Reporting summary</title>
      <p id="Par53">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Portfolio Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec18">
      <title>Supplementary information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2023_44484_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2023_44484_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="41467_2023_44484_MOESM3_ESM.pdf">
            <caption>
              <p>Reporting Summary</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-023-44484-5.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank the development/maintenance teams at GitHub, Bioconductor, and CRAN, as well as the respective contributors of the GitHub Actions that <italic>rworkflows</italic> depends on. We would also like to thank key early adopters of rworkflows for their invaluable feedback and direct contributions; in particular Jacques Serizay, Ali Sajid Imami, and Vince Carey. For the purpose of open access, we have applied a creative commons attribution (CC BY) licence (where permitted by UKRI, ‘open government licence’ or ‘creative commons attribution no-derivatives (CC BY-ND) licence’ may be stated instead) to any author accepted manuscript version arising. This work was supported by a UK Dementia Research Institute (UK DRI) Future Leaders Fellowship [MR/T04327X/1] and the UK DRI which receives its funding from UK DRI Ltd., funded by the UK Medical Research Council, Alzheimer’s Society and Alzheimer’s Research UK. MR/T04327X/1; NGS</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>B.M.S. wrote the software described herein, with contributions from A.E.M. B.M.S. wrote the manuscript, with contributions from A.E.M. N.G.S. provided general project guidance.</p>
  </notes>
  <notes notes-type="peer-review">
    <title>Peer review</title>
    <sec id="FPar1">
      <title>Peer review information</title>
      <p id="Par54"><italic>Nature Communications</italic> thanks the anonymous reviewer(s) for their contribution to the peer review of this work. A peer review file is available.</p>
    </sec>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>All code and data to reproduce the analyses performed in this study is shared publicly on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/tree/master/reports">GitHub</ext-link>. The latest release of <italic>rworkflows</italic> has been assigned the following <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/records/10066453">Zenodo</ext-link>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>Each component of <italic>rworkflows</italic> is freely available on GitHub<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. <italic>templateR</italic> R package template: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/templateR">https://github.com/neurogenomics/templateR</ext-link><italic>rworkflows</italic> R package: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link><italic>rworkflows</italic> GitHub Action: <ext-link ext-link-type="uri" xlink:href="https://github.com/marketplace/actions/rworkflows">https://github.com/marketplace/actions/rworkflows</ext-link><italic>rworkflows</italic> Docker container: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows">https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows</ext-link> rworkflows Bioconductor vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link><italic>rworkflows</italic> Docker/Singularity container vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/docker">https://neurogenomics.github.io/rworkflows/articles/docker</ext-link><italic>rworkflows</italic> dependency graph vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/depgraph">https://neurogenomics.github.io/rworkflows/articles/depgraph</ext-link> R package repository distribution vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/repos">https://neurogenomics.github.io/rworkflows/articles/repos</ext-link>.</p>
  </notes>
  <notes id="FPar2" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par55">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baker</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>1500 scientists lift the lid on reproducibility</article-title>
        <source>Nature</source>
        <year>2016</year>
        <volume>533</volume>
        <fpage>452</fpage>
        <lpage>454</lpage>
        <pub-id pub-id-type="doi">10.1038/533452a</pub-id>
        <?supplied-pmid 27225100?>
        <pub-id pub-id-type="pmid">27225100</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Duck</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A survey of bioinformatics database and software usage through mining the literature</article-title>
        <source>PLoS One</source>
        <year>2016</year>
        <volume>11</volume>
        <fpage>e0157989</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0157989</pub-id>
        <?supplied-pmid 27331905?>
        <pub-id pub-id-type="pmid">27331905</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Russell</surname>
            <given-names>PH</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Ananthan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Harnke</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>NE</given-names>
          </name>
        </person-group>
        <article-title>A large-scale analysis of bioinformatics code on GitHub</article-title>
        <source>PLoS ONE</source>
        <year>2018</year>
        <volume>13</volume>
        <fpage>e0205898</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0205898</pub-id>
        <?supplied-pmid 30379882?>
        <pub-id pub-id-type="pmid">30379882</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>
        <source>Sci. Data</source>
        <year>2016</year>
        <volume>3</volume>
        <fpage>160018</fpage>
        <pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id>
        <?supplied-pmid 26978244?>
        <pub-id pub-id-type="pmid">26978244</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Clarke</surname>
            <given-names>DJB</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>FAIRshake: Toolkit to Evaluate the FAIRness of Research Digital Resources</article-title>
        <source>Cell Syst.</source>
        <year>2019</year>
        <volume>9</volume>
        <fpage>417</fpage>
        <lpage>421</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cels.2019.09.011</pub-id>
        <?supplied-pmid 31677972?>
        <pub-id pub-id-type="pmid">31677972</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ihaka</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>R: a language for data analysis and graphics</article-title>
        <source>J. Comput. Graph. Stat.</source>
        <year>1996</year>
        <volume>5</volume>
        <fpage>299</fpage>
        <lpage>314</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Giorgi, F. M., Ceraolo, C. &amp; Mercatelli, D. The R language: an engine for bioinformatics and data science. <italic>Life</italic><bold>12</bold>, 648 (2022).</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gentleman</surname>
            <given-names>RC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol.</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R80</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
        <?supplied-pmid 15461798?>
        <pub-id pub-id-type="pmid">15461798</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat. Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boettiger</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chamberlain</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Building software, building community: lessons from the rOpenSci</article-title>
        <source>Proj. J. Open Res. Softw.</source>
        <year>2015</year>
        <volume>3</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.5334/jors.bu</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A community of practice around peer review for long-term research software sustainability</article-title>
        <source>Comput. Sci. Eng.</source>
        <year>2019</year>
        <volume>21</volume>
        <fpage>59</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2018.2882753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hornik</surname>
            <given-names>KAre</given-names>
          </name>
        </person-group>
        <article-title>There too many R packages?</article-title>
        <source>AJS</source>
        <year>2012</year>
        <volume>41</volume>
        <fpage>59</fpage>
        <lpage>66</lpage>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Bioconductor, Shepherd, L. &amp; Ramos, M. <italic>BiocCheck: Bioconductor-Specific Package Checks</italic>. 10.18129/B9.bioc.BiocCheck. (2022)</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Wujciak-Jens, M. P. M. S. <italic>pkgcheck: Check Whether a Package is Ready for Submission to rOpenSci’s Peer-review System</italic>. (rOpenSci, 2022).</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Murphy, A. E. &amp; Skene, N. G. <italic>neurogenomics/rworkflows.</italic>10.5281/zenodo.10066453 (2023).</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Wickham, H., Danenberg, P., Csárdi, G. &amp; Eugster, M. roxygen2: In-Line Documentation for R, 2020. <italic>R package version</italic>.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Wickham, H. &amp; Hesselberth, J. <italic>pkgdown: Make Static HTML Documentation for a Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Yu, G. <italic>badger: Badge for R Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hao</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrated analysis of multimodal single-cell data</article-title>
        <source>Cell</source>
        <year>2021</year>
        <volume>184</volume>
        <fpage>3573</fpage>
        <lpage>3587.e29</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2021.04.048</pub-id>
        <?supplied-pmid 34062119?>
        <pub-id pub-id-type="pmid">34062119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Farrell</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Gennert</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schier</surname>
            <given-names>AF</given-names>
          </name>
          <name>
            <surname>Regev</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Spatial reconstruction of single-cell gene expression data</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2015</year>
        <volume>33</volume>
        <fpage>495</fpage>
        <lpage>502</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3192</pub-id>
        <?supplied-pmid 25867923?>
        <pub-id pub-id-type="pmid">25867923</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stuart</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Srivastava</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Madad</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lareau</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Single-cell chromatin state analysis with Signac</article-title>
        <source>Nat. Methods</source>
        <year>2021</year>
        <volume>18</volume>
        <fpage>1333</fpage>
        <lpage>1341</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-021-01282-5</pub-id>
        <?supplied-pmid 34725479?>
        <pub-id pub-id-type="pmid">34725479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Granja</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ArchR is a scalable software package for integrative single-cell chromatin accessibility analysis</article-title>
        <source>Nat. Genet.</source>
        <year>2021</year>
        <volume>53</volume>
        <fpage>403</fpage>
        <lpage>411</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-021-00790-6</pub-id>
        <?supplied-pmid 33633365?>
        <pub-id pub-id-type="pmid">33633365</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Software for computing and annotating genomic ranges</article-title>
        <source>PLoS Comput. Biol.</source>
        <year>2013</year>
        <volume>9</volume>
        <fpage>e1003118</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003118</pub-id>
        <?supplied-pmid 23950696?>
        <pub-id pub-id-type="pmid">23950696</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Maintainer, B. P. et al. <italic>GenomicFiles: Distributed Computing by File or by Range</italic>. (2019).</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pagès, H. <italic>BSgenome: Software Infrastructure for Efficient Representation of Full Genomes and Their SNPs</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>rtracklayer: an R package for interfacing with genome browsers</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1841</fpage>
        <lpage>1842</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp328</pub-id>
        <?supplied-pmid 19468054?>
        <pub-id pub-id-type="pmid">19468054</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">M. Morgan, H. Pagès, V. Obenchain, N. Hayden N. <italic>Rsamtools: Binary alignment (BAM)</italic>, <italic>FASTA, variant call (BCF), and tabix file import</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Obenchain</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>VariantAnnotation: a Bioconductor package for exploration and annotation of genetic variants</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>2076</fpage>
        <lpage>2078</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu168</pub-id>
        <?supplied-pmid 24681907?>
        <pub-id pub-id-type="pmid">24681907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wickham, H., Bryan, J. &amp; Barrett, M. Usethis: Automate package and project setup. (2020).</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Collado-Torres, L. <italic>Biocthis: Automate Package and Project Setup for Bioconductor Packages</italic>. 10.18129/B9.bioc. (2022)</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Lee, C. <italic>act: run your GitHub actions locally</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Meinke, K. Code Coverage and Test Automation: State of the Art. Preprint ar <italic>arXiv</italic>10.48550/arXiv.2108.11723 (2021).</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hilton, M., Bell, J. &amp; Marinov, D. A large-scale study of test coverage evolution. in <italic>Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering</italic> 53–63 (Association for Computing Machinery). 10.1145/3238147.3238183. (2018)</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Ivanković, M., Petrović, G., Just, R. &amp; Fraser, G. Code coverage at Google. in <italic>Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering</italic> 955–963 (Association for Computing Machinery). 10.1145/3338906.3340459, (2019)</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Kochhar, P. S., Thung, F. &amp; Lo, D. Code coverage and test suite effectiveness: Empirical study with real bugs in large systems. in <italic>2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)</italic> 560–564. 10.1109/SANER.2015.7081877. (2015)</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Skene</surname>
            <given-names>NG</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genetic identification of brain cell types underlying schizophrenia</article-title>
        <source>Nat. Genet.</source>
        <year>2018</year>
        <volume>50</volume>
        <fpage>825</fpage>
        <lpage>833</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-018-0129-5</pub-id>
        <?supplied-pmid 29785013?>
        <pub-id pub-id-type="pmid">29785013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Vesper, I. <italic>Peer Reviewers Unmasked: Largest Global Survey Reveals Trends</italic>. (Nature Publishing Group, UK, 2018). 10.1038/d41586-018-06602-y.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Woolston, C. <italic>How Burnout and Imposter Syndrome Blight Scientific Careers</italic>. (Nature Publishing Group, UK, 2021). 10.1038/d41586-021-03042-z.</mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Milojević</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Radicchi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Walsh</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Changing demographics of scientific careers: the rise of the temporary workforce</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2018</year>
        <volume>115</volume>
        <fpage>12616</fpage>
        <lpage>12623</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1800478115</pub-id>
        <?supplied-pmid 30530691?>
        <pub-id pub-id-type="pmid">30530691</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Petrescu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krishen</surname>
            <given-names>AS</given-names>
          </name>
        </person-group>
        <article-title>The evolving crisis of the peer-review process</article-title>
        <source>J. Mark. Anal.</source>
        <year>2022</year>
        <volume>10</volume>
        <fpage>185</fpage>
        <lpage>186</lpage>
        <pub-id pub-id-type="doi">10.1057/s41270-022-00176-5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <mixed-citation publication-type="other">Hester, J. <italic>covr: Test coverage for packages</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Posit. <italic>RStudio: Integrated Development Environment for R</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wickham</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Testthat: get started with testing</article-title>
        <source>R. J.</source>
        <year>2011</year>
        <volume>3</volume>
        <fpage>5</fpage>
        <pub-id pub-id-type="doi">10.32614/RJ-2011-002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Matthias Burger, Klaus Juenemann, Thomas Koenig, Roman Zenka. <italic>RUnit: R Unit Test Framework</italic>. (2018).</mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Humphrey, J. &amp; Raj, T. echolocatoR: an automated end-to-end statistical and functional genomic fine-mapping pipeline. <italic>Bioinformatics</italic>10.1093/bioinformatics/btab658. (2021).</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Conway</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Lex</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gehlenborg</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>UpSetR: an R package for the visualization of intersecting sets and their properties</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <fpage>2938</fpage>
        <lpage>2940</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx364</pub-id>
        <?supplied-pmid 28645171?>
        <pub-id pub-id-type="pmid">28645171</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Makiyama, K. <italic>githubinstall: A Helpful Way to Install R Packages Hosted on GitHub</italic>. (2018).</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10761765</article-id>
    <article-id pub-id-type="publisher-id">44484</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-023-44484-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>rworkflows</italic>: automating reproducible practices for the R community</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5949-2191</contrib-id>
        <name>
          <surname>Schilder</surname>
          <given-names>Brian M.</given-names>
        </name>
        <address>
          <email>brian_schilder@alumni.brown.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2487-8753</contrib-id>
        <name>
          <surname>Murphy</surname>
          <given-names>Alan E.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6807-3180</contrib-id>
        <name>
          <surname>Skene</surname>
          <given-names>Nathan G.</given-names>
        </name>
        <address>
          <email>n.skene@imperial.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/041kmwe10</institution-id><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>Department of Brain Sciences, </institution><institution>Faculty of Medicine, Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>UK Dementia Research Institute at Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>15</volume>
    <elocation-id>149</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Crown 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Despite calls to improve reproducibility in research, achieving this goal remains elusive even within computational fields. Currently, &gt;50% of R packages are distributed exclusively through GitHub. While the trend towards sharing open-source software has been revolutionary, GitHub does not have any default built-in checks for minimal coding standards or software usability. This makes it difficult to assess the current quality R packages, or to consistently use them over time and across platforms. While GitHub-native solutions are technically possible, they require considerable time and expertise for each developer to write, implement, and maintain. To address this, we develop <italic>rworkflows</italic>; a suite of tools to make robust continuous integration and deployment (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link>). <italic>rworkflows</italic> can be implemented by developers of all skill levels using a one-time R function call which has both sensible defaults and extensive options for customisation. Once implemented, any updates to the GitHub repository automatically trigger parallel workflows that install all software dependencies, run code checks, generate a dedicated documentation website, and deploy a publicly accessible containerised environment. By making the <italic>rworkflows</italic> suite free, automated, and simple to use, we aim to promote widespread adoption of reproducible practices across a continually growing R community.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Reproducibility is essential for the progress of research, yet achieving it remains elusive even in computational fields. Here, authors develop the <italic>rworkflows</italic> suite, making robust CI/CD workflows easy and freely accessible to all R package developers.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Computational platforms and environments</kwd>
      <kwd>Standards</kwd>
      <kwd>Software</kwd>
      <kwd>Research management</kwd>
      <kwd>Peer review</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>UK Dementia Research Institute (UK DRI) Future Leaders Fellowship MR/T04327X/1</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Limited 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">Reproducibility is essential to the progress of research. Yet, &gt;70% of researchers reported being unable to reproduce previously published results, according to a 2016 survey by <italic>Nature</italic><sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. There are a variety of reasons contributing to this including pressure to publish, selective reporting, and methods not being reported in sufficient detail to replicate. Due to the programmatic nature of data analysis, there are unique opportunities to systematically maximise reproducibility and methodological transparency in this domain. Despite this, surveys of PubMed and GitHub have revealed that between 68 and 70% of bioinformatics resources were never used beyond the original publication<sup><xref ref-type="bibr" rid="CR2">2</xref>,<xref ref-type="bibr" rid="CR3">3</xref></sup>. Contributing factors may include a lack of coding standards, changing software dependencies, insufficient documentation, and discontinued maintenance post-publication. While general guidelines have been proposed for making software FAIR (Findable, Accessible, Interoperable and Reusable)<sup><xref ref-type="bibr" rid="CR4">4</xref></sup>, exclusively placing the burden on individual developers to design and implement FAIR solutions is insufficient to stimulate substantial progress in this direction<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>. Instead, providing tools to automate FAIR protocols that can be easily applied to a wide variety of software applications with minimal effort and maximal reward for the individual developer are more likely to receive widespread adoption by the scientific community.</p>
    <p id="Par4">Within the sciences, especially bioinformatics and computational biology, R<sup><xref ref-type="bibr" rid="CR6">6</xref></sup> has become one of the most commonly used programming languages<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR7">7</xref></sup>. Initiatives such as The Comprehensive R Archive Network (CRAN), Bioconductor (Bioc)<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref></sup>, rOpenSci<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR11">11</xref></sup>, and R-Forge have made great strides towards improving the accessibility and robustness of R packages through establishing centralised repositories that require certain coding/reproducibility standards. There are R functions to check whether a given package meets best-practice coding standards include <italic>rcmdcheck</italic> (for CRAN standards)<sup><xref ref-type="bibr" rid="CR12">12</xref></sup><italic>, BiocCheck</italic> (for Bioc standards)<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>, and <italic>pkgcheck</italic> (for rOpenSci standards)<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>. However, initially learning how to set up R packages such that they are compatible with these standards, and manually rerunning checks to ensure they continue to meet these standards, incur non-trivial costs in terms of both time and effort. Even if all checks pass on one’s local machine, this does not guarantee that the same software will run as expected on a different Operating System (OS) (e.g. due to version/availability conflicts across many software dependencies). Most journals, funders, and institutions do not systematically check software for any meaningful quality or reproducibility standards, nor do they check for continued maintenance. It is therefore usually left to each research group to decide how rigorously they test their software, a process which is often opaque to users. Presently, many softwares are exclusively distributed through GitHub, due to the ease of doing so and the perceived challenges of submitting to dedicated R package repositories such as CRAN/Bioc/rOpenSci. Unlike these dedicated R package repositories, GitHub does not require R packages (or any other software) to meet any quality standards, or even install or run. In the absence of additional safeguards, this leaves even more opportunities for such softwares to fail or produce erroneous results. This is problematic for not only developers when assessing the quality and fail points of their own software, but for all stakeholders in the R community, including users, research groups, companies, or any downstream entity that relies on results generated by these software.</p>
    <p id="Par5">A prevalent culture of openly sharing software source code and study-specific analysis scripts on public repositories has undoubtedly helped shift the computational community towards a more transparent, collaborative, and open-source model. Over the last decade, GitHub has rapidly overtaken all other code repositories as by far the most widely used in the fields of bioinformatics and computational biology (&gt;90% in 2017)<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. In that time, there has been extensive integration of GitHub with other resources such as Zenodo (for example, <italic>rworkflows</italic> Zenodo releases<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>) and Figshare, enabling the assignment of persistent Digital Object Identifiers (DOIs) with public source code (see <italic>Supplementary Information: Links</italic> for more details). At the same time, there have been considerable developments in the scope and depth of tools built directly into the GitHub architecture, including the relatively recent addition of GitHub Actions (GHA). GHA allows any user to run customised Continuous Integration/Deployment (CI/CD) workflows directly on GitHub servers for free and can be triggered simply by pushing updates to one’s GitHub repository as usual. These workflows can call upon other bundled scripts hosted elsewhere on GitHub to perform sets of related steps, called “actions”. These actions can be triggered to automatically launch by user-selected events, including pushes and pull requests. This ensures that every time a change is made to the underlying code, the software continues to work as expected across multiple OS with a fresh install of all dependencies. However, setting up these workflows currently takes considerable time, effort, and technical expertise.</p>
    <p id="Par6">In an effort to promote FAIRness, as well as enhance software usability and longevity, we developed <italic>rworkflows</italic>: a robust, reusable, flexible and automated CI/CD suite specifically for the development of R packages (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The <italic>rworkflows</italic> suite includes three main components: (1) the <italic>templateR</italic> template: a CRAN/Bioc-compatible R package template that automatically generates essential documentation using package metadata, (2) the <italic>rworkflows</italic> R package: a lightweight CRAN package to automatically setup short, customisable workflows that trigger the <italic>rworkflows</italic> action and (3) the <italic>rworkflows</italic> action: an open-source action available on the GHA Marketplace (see Methods for a more detailed description of each step in the <italic>rworkflows</italic> action). Importantly, the <italic>rworkflows</italic> action is designed to work with any R package out-of-the-box and can be set up by a one-time call to the R function <italic>use_workflow()</italic>. This means users do not need to manually edit any workflow scripts, obviating the need to invest time in learning GHA-specific syntax or configuration. In addition, the <italic>rworkflows</italic> action produces three main resources. First, a fully containerised installation of the R package and all of its dependencies are automatically created and pushed to a container registry (e.g. GitHub Container Registry, Docker Hub) so that users can easily install local copies of the fully setup environment as either Docker or Singularity containers. Second, it creates a dedicated documentation website entirely from <italic>README</italic> files, in-code <italic>roxygen</italic> notes<sup><xref ref-type="bibr" rid="CR16">16</xref></sup> and vignettes<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, and then deploys the website to the associated GitHub repository via GitHub Pages. Finally, a variety of status reports can be directly displayed in the <italic>README</italic>/landing page of the GitHub repository as badges, such as whether all GHA have been passed, code coverage reports (i.e. what percentage of the total code has been tested), number of downloads, last commit date<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, and more. This allows maintainers and users to immediately assess the current state of the software package.<fig id="Fig1"><label>Fig. 1</label><caption><title>The <italic>rworkflows</italic> suite.</title><p>Example usage of <italic>rworkflows</italic>. <bold>a</bold> Create package: create a new R package by forking and cloning the <italic>templateR</italic> template, or use an existing R package. <bold>b</bold> Add workflow: Install the rworkflows R package and use the <italic>use_workflows()</italic> command to generate a workflow <italic>yaml</italic> file in the correct folder structure. Arguments to customise the workflow are detailed in the documentation website. <bold>c</bold> Trigger action: trigger the rworkflows GitHub Action by pushing to GitHub. <bold>d</bold> Run the R package through the workflow on three different OS platforms in parallel. <bold>e</bold> Inspect the results of the workflow run. If one or more workflows fail, an email is automatically sent to the user. <bold>f</bold> If issues are found, make fixes to the software and push again to retrigger the <italic>rworkflows</italic> action. <bold>g</bold> When all workflows have passed, the documentation website is built using <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup> and deployed via GitHub Pages. The containerised R package is then deployed to Docker Hub. Badges embedded into markdown or HTML files (e.g. <italic>README</italic> documentation) will also be automatically updated to reflect the R package’s current status. In this figure, a version of the “R” logo with modified colours is used under the terms of the Creative Commons Attribution-ShareAlike 4.0 International license (CC-BY-SA 4.0) (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</ext-link>). The “container” logo was created by Pause08 and is freely available for reuse via Flaticon (<ext-link ext-link-type="uri" xlink:href="https://www.flaticon.com/free-icon/container_860142">https://www.flaticon.com/free-icon/container_860142</ext-link>). The Codecov logo is used with permission from Codecov. <italic>pkgdown</italic> is provided under an MIT license (<ext-link ext-link-type="uri" xlink:href="https://github.com/r-lib/pkgdown/blob/main/LICENSE.md">https://github.com/r-lib/pkgdown/blob/main/LICENSE.md</ext-link>).</p></caption><graphic xlink:href="41467_2023_44484_Fig1_HTML" id="d32e445"/></fig></p>
    <p id="Par7">In an effort to assist the development community in adopting <italic>rworkflows</italic> and make it a <italic>de facto</italic> standard for R package maintainers, we have already begun to expand its user base by making Pull Requests to GitHub repositories of R packages. In particular, we have focused on R packages that have a large user base (e.g. <italic>Seurat</italic><sup><xref ref-type="bibr" rid="CR19">19</xref>,<xref ref-type="bibr" rid="CR20">20</xref></sup>, <italic>Signac</italic><sup><xref ref-type="bibr" rid="CR21">21</xref></sup>, <italic>ArchR</italic><sup><xref ref-type="bibr" rid="CR22">22</xref></sup> or are core Bioc dependencies that thousands of other softwares rely upon (e.g. <italic>GenomicRanges</italic><sup><xref ref-type="bibr" rid="CR23">23</xref></sup>, <italic>GenomicFiles</italic><sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, <italic>BSgenome</italic><sup><xref ref-type="bibr" rid="CR25">25</xref></sup>, <italic>rtracklayer</italic><sup><xref ref-type="bibr" rid="CR26">26</xref></sup>, <italic>RSamtools</italic><sup><xref ref-type="bibr" rid="CR27">27</xref></sup>, <italic>VariantAnnotation</italic><sup><xref ref-type="bibr" rid="CR28">28</xref></sup>). We also present evidence that over 51% of all R packages currently in existence are exclusively distributed via GitHub. This further emphasises the need for robust, GitHub-based quality control/documentation standards that can be frictionlessly utilised by non-experts.</p>
    <p id="Par8">Finally, in collaboration with a multi-national community of developers we have created a step-by-step tutorial guiding users on how to create Bioc R packages using tools including <italic>rworkflows</italic>: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html">https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html</ext-link></p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>rworkflows adoption</title>
      <p id="Par9">To date, <italic>rworkflows</italic> has been successfully implemented in over 149 R repositories (including forks), and downloaded over 3700 times at an average rate of &gt;300 downloads/month. This includes packages both internal and external to our own research group, as well as the <italic>rworkflows</italic> R package itself. To illustrate this, we created a graph illustrating many of the R packages that currently use <italic>rworkflows</italic>, or depend on packages that do (i.e. second-order dependents) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). As a proxy of <italic>rworkflows</italic>’s downstream impact on the R development community, metadata was systematically gathered from GitHub. Totals across 58 dependents there were: 3089 stars, 758 forks, and 5,0482 downloads (across all distribution repositories).<fig id="Fig2"><label>Fig. 2</label><caption><title>Reverse dependency graph.</title><p>A reverse dependency graph showing all R package GitHub repositories (blue nodes) that currently utilise the <italic>rworkflows</italic> action (first-order dependents) or depend on a package that does (second-order dependents). All data was captured from October 24, 2023. An interactive, periodically updated version of this graph is also available online (see Data availability section).</p></caption><graphic xlink:href="41467_2023_44484_Fig2_HTML" id="d32e554"/></fig></p>
      <p id="Par10">An interactive and periodically updated version of this graph on the dedicated <italic>rworkflows</italic> documentation website (see Data availability section). This online version also displays the metadata for each repository when users hover the cursor over the respective node.</p>
    </sec>
    <sec id="Sec4">
      <title>GitHub as a package distributor</title>
      <p id="Par11">Most developers who distribute their R packages through dedicated repositories like CRAN, Bioc or rOpenSci still maintain a copy of their software on GitHub for the purposes of development, collaboration and transparency. However many packages go through a lengthy period of development (months to years) before being eventually accepted to one of the dedicated R package repositories. In fact, many developers may never submit their packages to these dedicated repositories, and depending on where and if they publish their work, these packages can be introduced into the scientific community without ever being thoroughly tested. As more software becomes exclusively distributed on GitHub, there is an increased need for GitHub-native solutions which make CI/CD seamless. Since there are currently few to no set standards imposed by journals or GitHub, it is incumbent upon the R developer community to provide tools which not only make best-practice coding, documentation and CI/CD easy to implement, but immediately beneficial enough to incentivise developers to widely adopt these practices.</p>
      <p id="Par12">To evaluate the magnitude of need for GitHub-based solutions in the R community, we gathered comprehensive data on where repositories R packages are hosted (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). An upset plot was generated to visualise how many R packages are distributed via one or multiple repositories. Of the 50,685 R packages we identified, 39.3% (19,932) are available via CRAN, 6.9% (3515) are available via Bioc, 0.63% (318) are available via rOpenSci, 4.3% (2176) are available via R-Forge, and 62.3% (31,592) are available on GitHub. Of particular note, 51% (25,883) of all R packages are exclusively distributed through GitHub. This is likely a very conservative underestimate, as the data on GitHub R packages comes from a static snapshot previously collected in February 2018, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. Thus, over half of all R packages are currently not vetted by dedicated R package distributors and are instead left to the developers to determine their own standards and strategies for reproducibility.<fig id="Fig3"><label>Fig. 3</label><caption><title>Repositories through which R packages are distributed.</title><p>Upset plot of how R packages are distributed through base R, dedicated R packages repositories (CRAN, Bioc, rOpenSci, R-Forge), or code repositories (GitHub). Rows indicate the total number of R packages available through a given distributor. Columns with single dots indicate the number of R packages that are exclusively available through one repository. Columns with multiple dots indicate the number of R packages available via two or more repositories. The number of R packages exclusively distributed through GitHub is highlighted in red.</p></caption><graphic xlink:href="41467_2023_44484_Fig3_HTML" id="d32e576"/></fig></p>
    </sec>
    <sec id="Sec5">
      <title>Comparisons with usethis/biocthis</title>
      <p id="Par13">It should be noted that there have been at least two other efforts to implement reproducible workflows for R package development via GHA, namely the R packages <italic>usethis</italic><sup><xref ref-type="bibr" rid="CR29">29</xref></sup> and its Bioc-oriented derivative <italic>biocthis</italic><sup><xref ref-type="bibr" rid="CR30">30</xref></sup>. While <italic>rworkflows</italic> was heavily influenced by <italic>these packages</italic>, there are several key differences. First, <italic>rworkflows</italic> operates primarily as an action which is merely called upon by a short workflow script that supplies certain parameters, whereas both <italic>usethis</italic> and <italic>biocthis can only</italic> generate static workflow scripts that dictate each step of the workflow in the file itself. This distinction becomes important when updates need to be made (e.g. new system dependencies, changes to R function implementations, deprecation of certain subactions). Actions such as <italic>rworkflows</italic> need only be updated on the centralised Github repository (see Code availability section), which then propagates to all users who call the <italic>rworkflows</italic> action, even if they implemented <italic>rworkflows</italic> in their package prior to the changes. In contrast, static workflow scripts must be updated by every user individually, and repeated for each GitHub repository. This issue compounds on itself when tasks are split into multiple workflow scripts, as is the case for <italic>usethis</italic>. In some cases, it may take a while for users to infer that the errors they’re experiencing are due to changes in the VM provided by the GHA server (for example), rather than something the user is doing wrong, or eventually abandon using the workflow entirely. That said, if users wish to create a more customised workflow that diverges from the <italic>rworkflows</italic> action (and only use it as an initial basis for their script), a full workflow version can be created with <italic>rworkflows::use_workflow(name</italic>=<italic>”rworkflows_static”)</italic>, which offers functionality analogous to that of <italic>biocthis</italic>.</p>
      <p id="Par14">Second, <italic>u</italic>sers can easily control which version of the <italic>rworkflows</italic> action to use with the <italic>tag</italic> argument to indicate a branch (e.g. “master” for the latest version) or release tag (e.g. “v1” for a stable release version tied to a specific commit). Workflow-based strategies like <italic>usethis</italic>/<italic>biocthis</italic> do not enable users to to use different versions of the same workflow, unless they reinstall a different release of the package. In the case of <italic>biocthis</italic>, users must also reinstall all other Bioc packages each time they want to use a different version of the workflow due to Bioc’s strongly enforced version control standards.</p>
      <p id="Par15">Third, <italic>rworkflows</italic> offers greater customisability via over 35 fully documented arguments (see documentation website for details: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>) that can be supplied to the <italic>use_workflow</italic> function (with sensible defaults that work out-of-the-box). For example, these arguments allow users to easily choose trigger branches, trigger events, runner OS, code check types as well as the option to support <italic>act</italic><sup><xref ref-type="bibr" rid="CR31">31</xref></sup>, a separate software for running and troubleshooting actions locally before launching them to GitHub. In comparison, the analogous <italic>biocthis::use_bioc_github_action()</italic> function currently has 7 arguments and more limited customisability (<italic>biocthis</italic> v1.12.0).</p>
      <p id="Par16">Fourth, <italic>rworkflows</italic> currently has 92% code coverage via unit tests, whereas <italic>biocthis</italic> (v1.12.0) and <italic>usethis</italic> (v2.2.2) currently have 80% and 57% code coverage, respectively (though this could improve in the future). Having high code coverage helps to improve package robustness and reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>.</p>
      <p id="Par17">Fifth, <italic>rworkflows</italic> obviates the need for a user-supplied Dockerfile as it creates one on the fly instead (see section Container usage). This level of abstraction serves to expand the usage of containers to those who do not know how to successfully set them up manually, or are unfamiliar with the Docker-specific syntax necessary to do so. None of this is to say that the <italic>biocthis</italic> package is obsolete, but rather that it offers other complementary features such as more fine-grained control over template creation than the all-in-one strategy adopted by <italic>templateR</italic>, as well as automated code styling.</p>
      <p id="Par18">Finally, unlike static workflows, all the repositories in which centralised GitHub actions (e.g. <italic>rworkflows</italic>) have been implemented are automatically recorded by GitHub. These can be accessed under the Insights tab of the action’s GitHub repository, providing greater insight into the scope of usage and impact of the action (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
    </sec>
    <sec id="Sec6">
      <title>Comparisons with Bioconductor servers</title>
      <p id="Par19">The <italic>rworkflows</italic> suite is not mutually exclusive to the package checking services provided by Bioc, which regularly run standardised checks on multiple OS. To the contrary, <italic>rworkflows</italic> fills an important gap for developers of Bioc packages who wish to comprehensively test their package before pushing to the upstream Bioc copy, as the upstream copy can take several days to rerun checks. Having an intermediate checking solution via GitHub provides feedback within minutes or hours, as opposed to days, thus greatly accelerating the development cycle. While Bioc does provide a dedicated Docker container with several prerequisite software installed (e.g. <italic>BiocManager</italic>, <italic>BiocCheck</italic>), these containers do not have any other Bioc packages installed. In fact, by default <italic>rworkflows</italic> uses the Bioc Docker container as a base and then builds upon it to generate a package-specific containerised environment ready for distribution to users. This greatly speeds up the time it takes for any given user to successfully install and start using the developer’s R package.</p>
    </sec>
    <sec id="Sec7">
      <title>Use case: MAGMA.Celltyping</title>
      <p id="Par20">To demonstrate how <italic>rworkflows</italic> can be helpful in practice, we use the R package <italic>MAGMA.Celltyping</italic> (developed and maintained by our lab) as an example<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>. Since first implementing <italic>rworkflows</italic>, it has revealed a number of vulnerabilities, missing documentation, and bugs within <italic>MAGMA.Celltyping</italic> (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=">https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=</ext-link>). Some of these bugs were only visible when run within a particular version of R (e.g. development) or on a particular OS type. For example, the way we constructed file paths was not robust on Windows OS, and would lead to the software being unable to find key resources on that platform (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues/92">https://github.com/neurogenomics/MAGMA_Celltyping/issues/92</ext-link>). As none of the developers use Windows machines, this would have been left for users to discover these bugs and (hopefully) report them. In the meantime, some users may have abandoned using our tool without our knowledge. Moreover, running code coverage tests has enabled us to identify potential weak points in our code and design tests that are capable of better assessing these. Whenever we make changes to our code, the coverage badge in the README automatically updates so that we (and our users) know how robust we can expect our tool to be (currently at 75% coverage in v2.0.11, with plans to improve this further). Finally, users of <italic>MAGMA.Celltyping</italic> can now bypass all installation and dependency issues with containers automatically generated by <italic>rworkflows</italic>. The instructions for setting up Docker/Singularity containers were also automatically generated by <italic>rworkflows</italic> (<italic>rworkflows::use_vignette_docker()</italic>), wherein the process of setting up <italic>MAGMA.Celltyping</italic> on any computing environment is reduced to a single copy-and-paste step (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker">https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker</ext-link>).</p>
    </sec>
  </sec>
  <sec id="Sec8" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par21">Most developers would agree that the FAIR principles are noble goals worthy of striving towards. However, the costs associated with putting these principles into practice (e.g. time, learning curves, lack of computational resources) often deter developers from ever effectively implementing them. Therefore, there is a dire need to reduce the burden put on individual developers by automating reproducibe practices, while at the same time increasing the amount of useful output generated by such practices. This will greatly improve the overall cost/benefit ratio of conducting reproducible science, which will in turn incentivise widespread adoption of FAIR and open practices. <italic>rworkflows</italic> aims to do exactly this, by enabling greatly simplified implementation of a robust GitHub-native testing, documentation, and containerisation pipeline through a single R function. This makes <italic>rworkflows</italic> usable by even novice programmers and requires exceedingly minimal local computing power. Furthermore, <italic>rworkflows</italic> can be used in either public or private repositories, extending its utility to pre-production or intellectual property-sensitive packages.</p>
    <p id="Par22">There are no doubt hundreds of invaluable and high-quality R packages that are not hosted on CRAN/Bioc/rOpenSci. Nevertheless, assessing package usability is currently a process of trial and error, which amounts to a huge number of wasted hours compounded across thousands of users. <italic>rworkflows</italic> attempts to make these distinctions more visible and immediately accessible, all while helping to make all R packages meet a set of minimum standards (or at least transparently advertise that they dont yet).</p>
    <p id="Par23">Peer-reviewed journals, as well as repositories like CRAN, Bioc, and rOpenSci, rely almost entirely on volunteer community members to review and approve software packages for official release<sup><xref ref-type="bibr" rid="CR11">11</xref>,<xref ref-type="bibr" rid="CR37">37</xref></sup>. Each additional cycle in the review–response process due to common and avoidable issues can incur substantial and unnecessary delay. This is only exacerbated by the limited time and considerable demands both parties are faced with<sup><xref ref-type="bibr" rid="CR38">38</xref>,<xref ref-type="bibr" rid="CR39">39</xref></sup>. <italic>rworkflows</italic> serves to significantly reduce the burden of back-and-forth troubleshooting by decreasing the prevalence of installation errors (through containerisation), coding bugs (through package checks), and miscommunications (through documentation). As the exponentially expanding scientific literature continues to outpace the proportion of qualified researchers willing to volunteer as reviewers<sup><xref ref-type="bibr" rid="CR39">39</xref></sup>, making this process more efficient will become increasingly critical for the sustainability of timely, high-quality peer-reviewed research<sup><xref ref-type="bibr" rid="CR37">37</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup>. Therefore, journals may wish to consider requiring tools such as <italic>rworkflows</italic> to be implemented as a prerequisite for progressing the review process.</p>
    <p id="Par24">Code coverage is one particularly useful metric for assessing package robustness. While the precise measurement of code coverage varies slightly from one implementation to another, it can generally be summarised as the percentage of lines in your software’s code that are run during unit tests (e.g. using the <italic>testthat</italic> or <italic>RUnit</italic> frameworks). This takes into account that code within conditional statements may not be run in all scenarios, and thus encourages developers to test the same code using multiple sets of parameters. Assuming that the tests themselves are valid, a code coverage of 92% could be interpreted as “92% of its code has been systematically tested and is working as intended”. Thus, code coverage can serve as a useful, continuous measure of package robustness as it reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>. The <italic>rworkflows</italic> action automatically runs code coverage tests via <italic>covr</italic><sup><xref ref-type="bibr" rid="CR41">41</xref></sup> and uploads a report to the browser-based Codecov or Coverall services where users can interactively explore which portions of their code are currently not being thoroughly tested. Finally, the <italic>rworkflows::use_badges</italic> function (which builds upon the <italic>badger</italic> package) allows developers to easily advertise both discrete metrics (passing on CRAN/Bioc, passing <italic>rworkflows</italic> checks) and continuous metrics (code coverage percentage) on their GitHub landing pages.</p>
    <p id="Par25">Providing containerised environments with all necessary dependencies pre-installed and an interactive development platform (i.e. <italic>RStudio</italic><sup><xref ref-type="bibr" rid="CR42">42</xref></sup>) eliminates virtually all installation troubleshooting. This also helps reduce the burden of maintaining software across hundreds to thousands of users, each with one or more slightly different computing environments. As an additional incentive to developers, continued maintenance of bioinformatics tools post-publication is associated with multiple metrics of impact including increased citations<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. <italic>rworkflows</italic> also allows users to control which versions of R, Bioc, and Python they wish to have installed within the container. By default, it uses the most up-to-date development versions of R/Bioc so that developers can stay ahead of the curve and identify issues in future versions before they have been released to the public. This is important, as it prevents situations where developers are suddenly faced with many bugs that are already affecting a large number of users and must be fixed urgently.</p>
    <p id="Par26">Beyond the initial publication of an R package, <italic>rworkflows</italic> offers a variety of benefits for different stakeholders. Automating clean and consistent documentation website generation without any additional effort encourages developers to keep their documentation up to date and accessible. Having thorough documentation is not only an invaluable resource for new users, but also trainees in the developers’ own lab, or even when reteaching themselves after a long period of not being active on the project.</p>
    <p id="Par27">In that same vein, we recognise the importance of ensuring <italic>rworkflows</italic> itself is maintained and extended well into the foreseeable future. We are committed to securing this vision, out of a desire to make this resource continually available to the R community as well as our reliance on <italic>rworkflows</italic> for all of our R packages. It is for this very reason that the <italic>rworkflows</italic> action was designed to, whenever possible, use subactions from well-established developer organisations (e.g. GitHub, R Consortium, Posit, Bioc) as they have the highest likelihood of being maintained in the long term. In addition, we have already begun to explore multiple avenues towards open-source longevity including (but not limited to) seeking official support/collaboration with software repositories, user contributions, crowd-funding, corporate sponsorship, and grants for sustainable software development. All members of the community are encouraged to voice their ideas/concerns/opinions by participating in the dedicated “Longevity” Discussion board (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/discussions">https://github.com/neurogenomics/rworkflows/discussions</ext-link>). In any case, we are dedicated to ensuring <italic>rworkflows</italic> remains open source, well maintained, and free. Additional features already in development include interactive debugging within the GitHub-hosted <italic>r</italic><italic>workflows</italic> action environment, maximising VM storage capacity for resource-intensive R packages, and improved parameter flexibility throughout.</p>
    <p id="Par28">To conclude, the <italic>rworkflows</italic> suite offers an essential toolkit for developers and users of any experience level. This includes developers who (1) currently (or plan to) distribute their R packages through repositories like CRAN/Bioc/rOpenSci and want to run quality checks before resubmitting a new version for official release, (2) wish to exclusively distribute their code through GitHub while maintaining a high level of coding standards, (3) want to keep the documentation updated without constant manual upkeep of a website and/or (4) want to distribute their software in a fully reproducible Docker/Singularity container. Furthermore, the <italic>rworkflows</italic> action is designed to be both easy to use and flexible (through customisable parameters), thus enabling developers to utilise it in whatever way best suits their project-specific goals In practice, this can range from checking for basic installability/usability of an R package, all the way to extensive evaluation of consortia-specific coding and documentation standards with fully automated container deployment. Therefore, <italic>rworkflows</italic> fills a gap that an increasing number of R developers find themselves in by reducing the burden of effectively implementing FAIR practices, and increasing its immediate benefits for developers and users alike. Finally, to further expand its accessibility we have provided a series of YouTube videos walking new users through the theory and practice of <italic>rworkflows</italic> (<ext-link ext-link-type="uri" xlink:href="https://youtube.com/@NeurogenomicsLab">https://youtube.com/@NeurogenomicsLab</ext-link>).</p>
  </sec>
  <sec id="Sec9">
    <title>Methods</title>
    <sec id="Sec10">
      <title>templateR template</title>
      <p id="Par29">For users who are creating a new R package from scratch, we have provided a CRAN/Bioc-compatible template (<italic>templateR)</italic>. To get started, one simply forks the template by navigating to the GitHub repository (see Code availability section), clicking “Use this template”, and cloning a copy of the new R package to begin editing it (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The user need only replace key metadata fields (e.g. Package, Title, Description, URL) in the <italic>DESCRIPTION</italic> file (a required file for all R packages). What makes this template unique is that all other components of the package (README, vignettes, unit test setup scripts) are programmatically autofilled based on the <italic>DESCRIPTION</italic> file. This strategy greatly minimises redundant and error-prone aspects of R package documentation.</p>
      <p id="Par30">Alternatively, users can start with any pre-existing R package and skip directly to the next step: using <italic>rworkflows</italic> R package. In either case, we have created a companion Wiki page to help guide users who are unfamiliar with the Bioc standards and offer a variety of tips and tricks to make this process easier, which we continue to maintain (see Code availability section).</p>
    </sec>
    <sec id="Sec11">
      <title>rworkflows R package</title>
      <p id="Par31">The <italic>rworkflows</italic> R package is available on both CRAN and GitHub (see Code availability). Workflow scripts (written in <italic>yaml</italic> format) placed within a specific subdirectory within the GitHub repository (<italic>.github/workflows/*.yml</italic>), dictate which actions are triggered under which conditions. For those not familiar with creating GHA workflows, learning the GHA-specific expressions and idiosyncrasies can be a time-consuming and iterative process. Instead, we have abstracted this step away by autogenerating workflow scripts from a single R command in the dedicated R package: <italic>use_workflow()</italic>. This creates a fully functional workflow file in the correct subdirectory even with no arguments supplied, and only needs to be run once per R package (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). For greater flexibility, users can supply the function with their preferred arguments to generate (or regenerate) a customised workflow script to trigger the <italic>rworkflows</italic> action. By default, the workflow will trigger the <italic>rworkflows</italic> action (see <italic>rworkflows</italic> action section below) upon pushes or pull requests to the remote GitHub repository. For minor pushes (e.g. fixing a typo in the <italic>README</italic> text), one can avoid triggering the action by simply adding the string “[skip ci]” to the commit message. Triggers can be set to activate for specific GitHub branches only (e.g. “main”, “master”, “devel”) or even <italic>regex</italic> expressions (e.g. “RELEASE_**”), which can be quite helpful for developing Bioc packages with regular release updates without having to modify the workflow script each time. Users can even write multiple workflows to the same repository, setting each to trigger via different branches and/or with different parameters (e.g. use the RELEASE_3_18 version of the Bioc docker container when pushing to the RELEASE_3_18 branch). For step-by-step instructions we provide a vignette specifically geared towards Bioc developers (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link>). Finally, the <italic>use_workflow()</italic> allows users to control exactly which specific release of the <italic>rworkflows</italic> action they wish to trigger (via the <italic>tag</italic> argument). For a full description of all arguments of the <italic>use_workflow()</italic> function, please refer to the documentation website (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>).</p>
      <p id="Par32">In addition, the <italic>rworkflows</italic> R package contains other useful functions for developers, including <italic>use_badges()</italic>, which dynamically generates badges indicating various aspects of the software package’s status to the documentation pages (e.g. the <italic>README</italic> file). It also provides the function <italic>use_dockerfile()</italic>, which writes a Docker recipe file (i.e. Dockerfile) to create a Docker image with the user’s R package (and all of its dependencies) pre-installed). Note that this same function is called automatically in step 8 of the <italic>rworkflows</italic> action, but if a pre-existing Dockerfile in the current working directory is detected, this step is skipped and the pre-existing Dockerfile is used instead. Thus, if preferred, users can have more customised control over how their Docker container is configured. Finally, <italic>use_readme(), use_vignette_docker()</italic> and <italic>use_vignette_getstarted()</italic> can generate autofiled templates for each of these R package documentation components respectively.</p>
    </sec>
    <sec id="Sec12">
      <title>rworkflows action</title>
      <p id="Par33">Once triggered by a workflow, the <italic>rworkflows</italic> action launches three virtual machines (VMs) in parallel to test the R package across multiple OS, including Linux, Mac, and Windows. Within each VM, the following steps are performed (Fig. <xref rid="Fig1" ref-type="fig">1d</xref>):<list list-type="order"><list-item><p id="Par34">Install system: Installs all OS-specific system dependencies that account for a variety of different functionalities that R users may require.</p></list-item><list-item><p id="Par35">Install R: Installs all R dependencies for the R package being tested. Three rounds dependency installation are attempted using slightly different methods to ensure robustness of this procedure without requiring the user to manually troubleshoot this step.</p></list-item><list-item><p id="Par36">Install LaTeX: Install a specific version of LaTeX and any extra LaTeX packages (controlled by the arguments <italic>has_latex</italic>, <italic>tinytex_installer</italic>, <italic>tinytex_version</italic>, and <italic>pandoc_version</italic>).</p></list-item><list-item><p id="Par37">Install conda: Install <italic>conda</italic>, <italic>miniconda</italic>, miniforge, or <italic>mamba</italic> (controlled by the arguments <italic>miniforge_variant</italic>, and <italic>miniforge_version</italic>). Users can additionally provide a yaml file (via the <italic>environment_file</italic> argument) with specifications for a <italic>conda</italic> environment to build and/or activate before all other downstream code checks. This greatly simplifies the installation of not only python packages (which some R packages may use as a backend) but also various extra tools and system dependencies not installed in previous steps. Finally, rworkflows provide a helper R function, <italic>construct_conda_yml()</italic>, for creating new <italic>conda</italic> yaml files for those who are unfamiliar with the formatting requirements.</p></list-item><list-item><p id="Par38">CRAN checks: Run CRAN checks via <italic>rcmdcheck()</italic>. When <italic>run_rcmdcheck</italic> = <italic>TRUE</italic>, all checks must pass in order for the GHA to succeed. This step uses CRAN standards by default, but can run <italic>rcmdcheck</italic> without CRAN standards by setting the argument <italic>as_cran</italic> = <italic>FALSE</italic>.</p></list-item><list-item><p id="Par39">Bioc checks: Run Bioc checks via <italic>BiocCheck()</italic>. When <italic>run_bioc</italic> = <italic>TRUE</italic>, all checks must pass in order for the action to succeed.</p></list-item><list-item><p id="Par40">Unit tests: Runs unit tests implemented via the <italic>testthat</italic><sup><xref ref-type="bibr" rid="CR43">43</xref></sup> and/or <italic>RUnit</italic><sup><xref ref-type="bibr" rid="CR44">44</xref></sup> R packages and generates a downloadable report of the results.</p></list-item><list-item><p id="Par41">Code coverage: Runs code coverage tests and uploads the results to Codecov.</p></list-item><list-item><p id="Par42">Build website: (Re)builds the documentation website from <italic>README</italic> files, in-line <italic>roxygen</italic> notes, and vignettes using the <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup>. It then deploys the website via GitHub Pages in a new branch named “gh-pages” in the same repository. Deploying the website via a separate branch is advantageous as it avoids accidentally adding large HTML/CSS/JavaScript source files and libraries to the R package itself (which can slow down its installation and performance in some situations).</p></list-item><list-item><p id="Par43">Push container: Pushes a container to a container registry with your R package, all of its dependencies, and an interactive Rstudio interface pre-installed. Included in <italic>templateR</italic> is an auto-filled vignette for how to create a local Docker or SIngularity container. If you’ve selected a non-default container registry (e.g. Docker Hub), this step requires a valid authentication token from the relevant registry, which can be stored as a GitHub Secrets variable. This ensures that only users with appropriate push permissions to a given registry account can update the container there.</p></list-item></list></p>
      <p id="Par44">Steps 6-8 are only run on the Linux VM to avoid redundancy and avoid conflicts due to simultaneous pushes to their respective repositories (i.e. Codecov, GitHub, Docker Hub).</p>
    </sec>
    <sec id="Sec13">
      <title>Container usage</title>
      <p id="Par45">Containerisation is especially useful when distributing R packages to many users using a wide variety of OS platforms, including high-performance computing (HPC) clusters which may have software installation restrictions for non-root users. Once the <italic>rworkflows</italic> action has successfully completed at least once on the Linux VM, both developers can create Docker and/or Singularity images from the container hosted on a container registry. By default, rworkflows pushes to the GitHub Container Registry, which has the advantage of not requiring any additional accounts or credentials and automatically appearing directly on the associated GitHub repository landing page (under the section “Packages”). Alternatively, users may specify any preferred container registry (e.g. Docker Hub) using the <italic>docker_registry</italic> argument.</p>
      <p id="Par46">If <italic>templateR</italic> was used as a template, a vignette detailing a step-by-step reproducible example is autogenerated. A rendered version of this vignette can be accessed via the dedicated GitHub Pages site, and a link to this vignette is automatically rendered within the <italic>templateR</italic> template <italic>README</italic> file (see Code availability section) under the “Documentation → Docker/Singularity” subheader.</p>
    </sec>
    <sec id="Sec14">
      <title>rworkflows adoption</title>
      <p id="Par47">Metadata was gathered from the GitHub application programming interface (API) for each repository using the R packages <italic>echodeps</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. This was used to both identify which packages are currently using the <italic>rworkflows</italic> action (i.e. dependents), and to gather relevant metadata on each of the repositories. Of particular interest were the following metrics; stars (the number of users that bookmarked the GitHub repo with a star), unique clones (the number of unique instances that the GitHub repo was downloaded from Github), and unique views (the number unique instances the GitHub repo was viewed in a web browser). Here, “unique” means the number of distinct internet protocol (IP) addresses. Sums of each of these metrics across all were computed to represent the total downstream impact of <italic>rworkflows</italic>. All dependents were visualised as nodes in a directed acyclic graph, connecting to an additional node representing the <italic>rworkflows</italic> action (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
      <p id="Par48">To identify the R packages with the highest potential for downstream impact on other packages, we collected data on the number of downloads for every package in CRAN and Bioc using <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. We then selected the packages with the greatest numbers of downloads and prioritised them for making Pull Requests on their respective GitHub repos to implement <italic>rworkflows</italic>.</p>
      <p id="Par49">An R markdown script to fully reproduce these analyses, as well as an interactive version of the graph with additional metadata, is available as a vignette on the official <italic>rworkflows</italic> GitHub Pages documentation website (See the Code availability section for link).</p>
    </sec>
    <sec id="Sec15">
      <title>GitHub as a package distributor</title>
      <p id="Par50">To comprehensively assess which repositories R packages are distributed via, we collected metadata on all known R packages from base R, CRAN, Bioc, rOpenSci, R-Forge, and GitHub using the package <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. The total and intersection between packages in each of these repositories were then computed and visualised using the R package <italic>UpSetR</italic><sup><xref ref-type="bibr" rid="CR46">46</xref></sup> (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p>
      <p id="Par51">It should be noted that the data on GitHub-hosted R packages comes from a static snapshot previously collected in February 2018 via the <italic>echogithub</italic> dependency <italic>githubinstall</italic><sup><xref ref-type="bibr" rid="CR47">47</xref></sup>, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. This means that our estimates of the proportion of R packages that are distributed exclusively through GitHub are almost certainly an underestimate. An R markdown script to fully reproduce these analyses is available as a vignette on the <italic>rworkflows</italic> documentation website (See the Code availability section).</p>
    </sec>
    <sec id="Sec16">
      <title>Statistics and reproducibility</title>
      <p id="Par52">For the <italic>rworkflows</italic> adoption analysis the total number of GitHub stars, forks, and downloads were summed across all first- and second-order dependents of <italic>rworkflows</italic>. All analysis code can be found on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/vignettes">GitHub</ext-link>.</p>
    </sec>
    <sec id="Sec17">
      <title>Reporting summary</title>
      <p id="Par53">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Portfolio Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec18">
      <title>Supplementary information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2023_44484_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2023_44484_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="41467_2023_44484_MOESM3_ESM.pdf">
            <caption>
              <p>Reporting Summary</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-023-44484-5.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank the development/maintenance teams at GitHub, Bioconductor, and CRAN, as well as the respective contributors of the GitHub Actions that <italic>rworkflows</italic> depends on. We would also like to thank key early adopters of rworkflows for their invaluable feedback and direct contributions; in particular Jacques Serizay, Ali Sajid Imami, and Vince Carey. For the purpose of open access, we have applied a creative commons attribution (CC BY) licence (where permitted by UKRI, ‘open government licence’ or ‘creative commons attribution no-derivatives (CC BY-ND) licence’ may be stated instead) to any author accepted manuscript version arising. This work was supported by a UK Dementia Research Institute (UK DRI) Future Leaders Fellowship [MR/T04327X/1] and the UK DRI which receives its funding from UK DRI Ltd., funded by the UK Medical Research Council, Alzheimer’s Society and Alzheimer’s Research UK. MR/T04327X/1; NGS</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>B.M.S. wrote the software described herein, with contributions from A.E.M. B.M.S. wrote the manuscript, with contributions from A.E.M. N.G.S. provided general project guidance.</p>
  </notes>
  <notes notes-type="peer-review">
    <title>Peer review</title>
    <sec id="FPar1">
      <title>Peer review information</title>
      <p id="Par54"><italic>Nature Communications</italic> thanks the anonymous reviewer(s) for their contribution to the peer review of this work. A peer review file is available.</p>
    </sec>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>All code and data to reproduce the analyses performed in this study is shared publicly on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/tree/master/reports">GitHub</ext-link>. The latest release of <italic>rworkflows</italic> has been assigned the following <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/records/10066453">Zenodo</ext-link>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>Each component of <italic>rworkflows</italic> is freely available on GitHub<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. <italic>templateR</italic> R package template: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/templateR">https://github.com/neurogenomics/templateR</ext-link><italic>rworkflows</italic> R package: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link><italic>rworkflows</italic> GitHub Action: <ext-link ext-link-type="uri" xlink:href="https://github.com/marketplace/actions/rworkflows">https://github.com/marketplace/actions/rworkflows</ext-link><italic>rworkflows</italic> Docker container: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows">https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows</ext-link> rworkflows Bioconductor vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link><italic>rworkflows</italic> Docker/Singularity container vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/docker">https://neurogenomics.github.io/rworkflows/articles/docker</ext-link><italic>rworkflows</italic> dependency graph vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/depgraph">https://neurogenomics.github.io/rworkflows/articles/depgraph</ext-link> R package repository distribution vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/repos">https://neurogenomics.github.io/rworkflows/articles/repos</ext-link>.</p>
  </notes>
  <notes id="FPar2" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par55">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baker</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>1500 scientists lift the lid on reproducibility</article-title>
        <source>Nature</source>
        <year>2016</year>
        <volume>533</volume>
        <fpage>452</fpage>
        <lpage>454</lpage>
        <pub-id pub-id-type="doi">10.1038/533452a</pub-id>
        <?supplied-pmid 27225100?>
        <pub-id pub-id-type="pmid">27225100</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Duck</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A survey of bioinformatics database and software usage through mining the literature</article-title>
        <source>PLoS One</source>
        <year>2016</year>
        <volume>11</volume>
        <fpage>e0157989</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0157989</pub-id>
        <?supplied-pmid 27331905?>
        <pub-id pub-id-type="pmid">27331905</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Russell</surname>
            <given-names>PH</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Ananthan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Harnke</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>NE</given-names>
          </name>
        </person-group>
        <article-title>A large-scale analysis of bioinformatics code on GitHub</article-title>
        <source>PLoS ONE</source>
        <year>2018</year>
        <volume>13</volume>
        <fpage>e0205898</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0205898</pub-id>
        <?supplied-pmid 30379882?>
        <pub-id pub-id-type="pmid">30379882</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>
        <source>Sci. Data</source>
        <year>2016</year>
        <volume>3</volume>
        <fpage>160018</fpage>
        <pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id>
        <?supplied-pmid 26978244?>
        <pub-id pub-id-type="pmid">26978244</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Clarke</surname>
            <given-names>DJB</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>FAIRshake: Toolkit to Evaluate the FAIRness of Research Digital Resources</article-title>
        <source>Cell Syst.</source>
        <year>2019</year>
        <volume>9</volume>
        <fpage>417</fpage>
        <lpage>421</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cels.2019.09.011</pub-id>
        <?supplied-pmid 31677972?>
        <pub-id pub-id-type="pmid">31677972</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ihaka</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>R: a language for data analysis and graphics</article-title>
        <source>J. Comput. Graph. Stat.</source>
        <year>1996</year>
        <volume>5</volume>
        <fpage>299</fpage>
        <lpage>314</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Giorgi, F. M., Ceraolo, C. &amp; Mercatelli, D. The R language: an engine for bioinformatics and data science. <italic>Life</italic><bold>12</bold>, 648 (2022).</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gentleman</surname>
            <given-names>RC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol.</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R80</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
        <?supplied-pmid 15461798?>
        <pub-id pub-id-type="pmid">15461798</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat. Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boettiger</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chamberlain</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Building software, building community: lessons from the rOpenSci</article-title>
        <source>Proj. J. Open Res. Softw.</source>
        <year>2015</year>
        <volume>3</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.5334/jors.bu</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A community of practice around peer review for long-term research software sustainability</article-title>
        <source>Comput. Sci. Eng.</source>
        <year>2019</year>
        <volume>21</volume>
        <fpage>59</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2018.2882753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hornik</surname>
            <given-names>KAre</given-names>
          </name>
        </person-group>
        <article-title>There too many R packages?</article-title>
        <source>AJS</source>
        <year>2012</year>
        <volume>41</volume>
        <fpage>59</fpage>
        <lpage>66</lpage>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Bioconductor, Shepherd, L. &amp; Ramos, M. <italic>BiocCheck: Bioconductor-Specific Package Checks</italic>. 10.18129/B9.bioc.BiocCheck. (2022)</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Wujciak-Jens, M. P. M. S. <italic>pkgcheck: Check Whether a Package is Ready for Submission to rOpenSci’s Peer-review System</italic>. (rOpenSci, 2022).</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Murphy, A. E. &amp; Skene, N. G. <italic>neurogenomics/rworkflows.</italic>10.5281/zenodo.10066453 (2023).</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Wickham, H., Danenberg, P., Csárdi, G. &amp; Eugster, M. roxygen2: In-Line Documentation for R, 2020. <italic>R package version</italic>.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Wickham, H. &amp; Hesselberth, J. <italic>pkgdown: Make Static HTML Documentation for a Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Yu, G. <italic>badger: Badge for R Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hao</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrated analysis of multimodal single-cell data</article-title>
        <source>Cell</source>
        <year>2021</year>
        <volume>184</volume>
        <fpage>3573</fpage>
        <lpage>3587.e29</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2021.04.048</pub-id>
        <?supplied-pmid 34062119?>
        <pub-id pub-id-type="pmid">34062119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Farrell</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Gennert</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schier</surname>
            <given-names>AF</given-names>
          </name>
          <name>
            <surname>Regev</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Spatial reconstruction of single-cell gene expression data</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2015</year>
        <volume>33</volume>
        <fpage>495</fpage>
        <lpage>502</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3192</pub-id>
        <?supplied-pmid 25867923?>
        <pub-id pub-id-type="pmid">25867923</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stuart</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Srivastava</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Madad</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lareau</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Single-cell chromatin state analysis with Signac</article-title>
        <source>Nat. Methods</source>
        <year>2021</year>
        <volume>18</volume>
        <fpage>1333</fpage>
        <lpage>1341</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-021-01282-5</pub-id>
        <?supplied-pmid 34725479?>
        <pub-id pub-id-type="pmid">34725479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Granja</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ArchR is a scalable software package for integrative single-cell chromatin accessibility analysis</article-title>
        <source>Nat. Genet.</source>
        <year>2021</year>
        <volume>53</volume>
        <fpage>403</fpage>
        <lpage>411</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-021-00790-6</pub-id>
        <?supplied-pmid 33633365?>
        <pub-id pub-id-type="pmid">33633365</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Software for computing and annotating genomic ranges</article-title>
        <source>PLoS Comput. Biol.</source>
        <year>2013</year>
        <volume>9</volume>
        <fpage>e1003118</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003118</pub-id>
        <?supplied-pmid 23950696?>
        <pub-id pub-id-type="pmid">23950696</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Maintainer, B. P. et al. <italic>GenomicFiles: Distributed Computing by File or by Range</italic>. (2019).</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pagès, H. <italic>BSgenome: Software Infrastructure for Efficient Representation of Full Genomes and Their SNPs</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>rtracklayer: an R package for interfacing with genome browsers</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1841</fpage>
        <lpage>1842</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp328</pub-id>
        <?supplied-pmid 19468054?>
        <pub-id pub-id-type="pmid">19468054</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">M. Morgan, H. Pagès, V. Obenchain, N. Hayden N. <italic>Rsamtools: Binary alignment (BAM)</italic>, <italic>FASTA, variant call (BCF), and tabix file import</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Obenchain</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>VariantAnnotation: a Bioconductor package for exploration and annotation of genetic variants</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>2076</fpage>
        <lpage>2078</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu168</pub-id>
        <?supplied-pmid 24681907?>
        <pub-id pub-id-type="pmid">24681907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wickham, H., Bryan, J. &amp; Barrett, M. Usethis: Automate package and project setup. (2020).</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Collado-Torres, L. <italic>Biocthis: Automate Package and Project Setup for Bioconductor Packages</italic>. 10.18129/B9.bioc. (2022)</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Lee, C. <italic>act: run your GitHub actions locally</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Meinke, K. Code Coverage and Test Automation: State of the Art. Preprint ar <italic>arXiv</italic>10.48550/arXiv.2108.11723 (2021).</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hilton, M., Bell, J. &amp; Marinov, D. A large-scale study of test coverage evolution. in <italic>Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering</italic> 53–63 (Association for Computing Machinery). 10.1145/3238147.3238183. (2018)</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Ivanković, M., Petrović, G., Just, R. &amp; Fraser, G. Code coverage at Google. in <italic>Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering</italic> 955–963 (Association for Computing Machinery). 10.1145/3338906.3340459, (2019)</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Kochhar, P. S., Thung, F. &amp; Lo, D. Code coverage and test suite effectiveness: Empirical study with real bugs in large systems. in <italic>2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)</italic> 560–564. 10.1109/SANER.2015.7081877. (2015)</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Skene</surname>
            <given-names>NG</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genetic identification of brain cell types underlying schizophrenia</article-title>
        <source>Nat. Genet.</source>
        <year>2018</year>
        <volume>50</volume>
        <fpage>825</fpage>
        <lpage>833</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-018-0129-5</pub-id>
        <?supplied-pmid 29785013?>
        <pub-id pub-id-type="pmid">29785013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Vesper, I. <italic>Peer Reviewers Unmasked: Largest Global Survey Reveals Trends</italic>. (Nature Publishing Group, UK, 2018). 10.1038/d41586-018-06602-y.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Woolston, C. <italic>How Burnout and Imposter Syndrome Blight Scientific Careers</italic>. (Nature Publishing Group, UK, 2021). 10.1038/d41586-021-03042-z.</mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Milojević</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Radicchi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Walsh</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Changing demographics of scientific careers: the rise of the temporary workforce</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2018</year>
        <volume>115</volume>
        <fpage>12616</fpage>
        <lpage>12623</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1800478115</pub-id>
        <?supplied-pmid 30530691?>
        <pub-id pub-id-type="pmid">30530691</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Petrescu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krishen</surname>
            <given-names>AS</given-names>
          </name>
        </person-group>
        <article-title>The evolving crisis of the peer-review process</article-title>
        <source>J. Mark. Anal.</source>
        <year>2022</year>
        <volume>10</volume>
        <fpage>185</fpage>
        <lpage>186</lpage>
        <pub-id pub-id-type="doi">10.1057/s41270-022-00176-5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <mixed-citation publication-type="other">Hester, J. <italic>covr: Test coverage for packages</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Posit. <italic>RStudio: Integrated Development Environment for R</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wickham</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Testthat: get started with testing</article-title>
        <source>R. J.</source>
        <year>2011</year>
        <volume>3</volume>
        <fpage>5</fpage>
        <pub-id pub-id-type="doi">10.32614/RJ-2011-002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Matthias Burger, Klaus Juenemann, Thomas Koenig, Roman Zenka. <italic>RUnit: R Unit Test Framework</italic>. (2018).</mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Humphrey, J. &amp; Raj, T. echolocatoR: an automated end-to-end statistical and functional genomic fine-mapping pipeline. <italic>Bioinformatics</italic>10.1093/bioinformatics/btab658. (2021).</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Conway</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Lex</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gehlenborg</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>UpSetR: an R package for the visualization of intersecting sets and their properties</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <fpage>2938</fpage>
        <lpage>2940</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx364</pub-id>
        <?supplied-pmid 28645171?>
        <pub-id pub-id-type="pmid">28645171</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Makiyama, K. <italic>githubinstall: A Helpful Way to Install R Packages Hosted on GitHub</italic>. (2018).</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10761765</article-id>
    <article-id pub-id-type="publisher-id">44484</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-023-44484-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>rworkflows</italic>: automating reproducible practices for the R community</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5949-2191</contrib-id>
        <name>
          <surname>Schilder</surname>
          <given-names>Brian M.</given-names>
        </name>
        <address>
          <email>brian_schilder@alumni.brown.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2487-8753</contrib-id>
        <name>
          <surname>Murphy</surname>
          <given-names>Alan E.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6807-3180</contrib-id>
        <name>
          <surname>Skene</surname>
          <given-names>Nathan G.</given-names>
        </name>
        <address>
          <email>n.skene@imperial.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/041kmwe10</institution-id><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>Department of Brain Sciences, </institution><institution>Faculty of Medicine, Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution>UK Dementia Research Institute at Imperial College London, </institution></institution-wrap>London, W12 0BZ UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>1</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>15</volume>
    <elocation-id>149</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Crown 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Despite calls to improve reproducibility in research, achieving this goal remains elusive even within computational fields. Currently, &gt;50% of R packages are distributed exclusively through GitHub. While the trend towards sharing open-source software has been revolutionary, GitHub does not have any default built-in checks for minimal coding standards or software usability. This makes it difficult to assess the current quality R packages, or to consistently use them over time and across platforms. While GitHub-native solutions are technically possible, they require considerable time and expertise for each developer to write, implement, and maintain. To address this, we develop <italic>rworkflows</italic>; a suite of tools to make robust continuous integration and deployment (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link>). <italic>rworkflows</italic> can be implemented by developers of all skill levels using a one-time R function call which has both sensible defaults and extensive options for customisation. Once implemented, any updates to the GitHub repository automatically trigger parallel workflows that install all software dependencies, run code checks, generate a dedicated documentation website, and deploy a publicly accessible containerised environment. By making the <italic>rworkflows</italic> suite free, automated, and simple to use, we aim to promote widespread adoption of reproducible practices across a continually growing R community.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Reproducibility is essential for the progress of research, yet achieving it remains elusive even in computational fields. Here, authors develop the <italic>rworkflows</italic> suite, making robust CI/CD workflows easy and freely accessible to all R package developers.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Computational platforms and environments</kwd>
      <kwd>Standards</kwd>
      <kwd>Software</kwd>
      <kwd>Research management</kwd>
      <kwd>Peer review</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>UK Dementia Research Institute (UK DRI) Future Leaders Fellowship MR/T04327X/1</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Nature Limited 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">Reproducibility is essential to the progress of research. Yet, &gt;70% of researchers reported being unable to reproduce previously published results, according to a 2016 survey by <italic>Nature</italic><sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. There are a variety of reasons contributing to this including pressure to publish, selective reporting, and methods not being reported in sufficient detail to replicate. Due to the programmatic nature of data analysis, there are unique opportunities to systematically maximise reproducibility and methodological transparency in this domain. Despite this, surveys of PubMed and GitHub have revealed that between 68 and 70% of bioinformatics resources were never used beyond the original publication<sup><xref ref-type="bibr" rid="CR2">2</xref>,<xref ref-type="bibr" rid="CR3">3</xref></sup>. Contributing factors may include a lack of coding standards, changing software dependencies, insufficient documentation, and discontinued maintenance post-publication. While general guidelines have been proposed for making software FAIR (Findable, Accessible, Interoperable and Reusable)<sup><xref ref-type="bibr" rid="CR4">4</xref></sup>, exclusively placing the burden on individual developers to design and implement FAIR solutions is insufficient to stimulate substantial progress in this direction<sup><xref ref-type="bibr" rid="CR5">5</xref></sup>. Instead, providing tools to automate FAIR protocols that can be easily applied to a wide variety of software applications with minimal effort and maximal reward for the individual developer are more likely to receive widespread adoption by the scientific community.</p>
    <p id="Par4">Within the sciences, especially bioinformatics and computational biology, R<sup><xref ref-type="bibr" rid="CR6">6</xref></sup> has become one of the most commonly used programming languages<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR7">7</xref></sup>. Initiatives such as The Comprehensive R Archive Network (CRAN), Bioconductor (Bioc)<sup><xref ref-type="bibr" rid="CR8">8</xref>,<xref ref-type="bibr" rid="CR9">9</xref></sup>, rOpenSci<sup><xref ref-type="bibr" rid="CR10">10</xref>,<xref ref-type="bibr" rid="CR11">11</xref></sup>, and R-Forge have made great strides towards improving the accessibility and robustness of R packages through establishing centralised repositories that require certain coding/reproducibility standards. There are R functions to check whether a given package meets best-practice coding standards include <italic>rcmdcheck</italic> (for CRAN standards)<sup><xref ref-type="bibr" rid="CR12">12</xref></sup><italic>, BiocCheck</italic> (for Bioc standards)<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>, and <italic>pkgcheck</italic> (for rOpenSci standards)<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>. However, initially learning how to set up R packages such that they are compatible with these standards, and manually rerunning checks to ensure they continue to meet these standards, incur non-trivial costs in terms of both time and effort. Even if all checks pass on one’s local machine, this does not guarantee that the same software will run as expected on a different Operating System (OS) (e.g. due to version/availability conflicts across many software dependencies). Most journals, funders, and institutions do not systematically check software for any meaningful quality or reproducibility standards, nor do they check for continued maintenance. It is therefore usually left to each research group to decide how rigorously they test their software, a process which is often opaque to users. Presently, many softwares are exclusively distributed through GitHub, due to the ease of doing so and the perceived challenges of submitting to dedicated R package repositories such as CRAN/Bioc/rOpenSci. Unlike these dedicated R package repositories, GitHub does not require R packages (or any other software) to meet any quality standards, or even install or run. In the absence of additional safeguards, this leaves even more opportunities for such softwares to fail or produce erroneous results. This is problematic for not only developers when assessing the quality and fail points of their own software, but for all stakeholders in the R community, including users, research groups, companies, or any downstream entity that relies on results generated by these software.</p>
    <p id="Par5">A prevalent culture of openly sharing software source code and study-specific analysis scripts on public repositories has undoubtedly helped shift the computational community towards a more transparent, collaborative, and open-source model. Over the last decade, GitHub has rapidly overtaken all other code repositories as by far the most widely used in the fields of bioinformatics and computational biology (&gt;90% in 2017)<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. In that time, there has been extensive integration of GitHub with other resources such as Zenodo (for example, <italic>rworkflows</italic> Zenodo releases<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>) and Figshare, enabling the assignment of persistent Digital Object Identifiers (DOIs) with public source code (see <italic>Supplementary Information: Links</italic> for more details). At the same time, there have been considerable developments in the scope and depth of tools built directly into the GitHub architecture, including the relatively recent addition of GitHub Actions (GHA). GHA allows any user to run customised Continuous Integration/Deployment (CI/CD) workflows directly on GitHub servers for free and can be triggered simply by pushing updates to one’s GitHub repository as usual. These workflows can call upon other bundled scripts hosted elsewhere on GitHub to perform sets of related steps, called “actions”. These actions can be triggered to automatically launch by user-selected events, including pushes and pull requests. This ensures that every time a change is made to the underlying code, the software continues to work as expected across multiple OS with a fresh install of all dependencies. However, setting up these workflows currently takes considerable time, effort, and technical expertise.</p>
    <p id="Par6">In an effort to promote FAIRness, as well as enhance software usability and longevity, we developed <italic>rworkflows</italic>: a robust, reusable, flexible and automated CI/CD suite specifically for the development of R packages (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The <italic>rworkflows</italic> suite includes three main components: (1) the <italic>templateR</italic> template: a CRAN/Bioc-compatible R package template that automatically generates essential documentation using package metadata, (2) the <italic>rworkflows</italic> R package: a lightweight CRAN package to automatically setup short, customisable workflows that trigger the <italic>rworkflows</italic> action and (3) the <italic>rworkflows</italic> action: an open-source action available on the GHA Marketplace (see Methods for a more detailed description of each step in the <italic>rworkflows</italic> action). Importantly, the <italic>rworkflows</italic> action is designed to work with any R package out-of-the-box and can be set up by a one-time call to the R function <italic>use_workflow()</italic>. This means users do not need to manually edit any workflow scripts, obviating the need to invest time in learning GHA-specific syntax or configuration. In addition, the <italic>rworkflows</italic> action produces three main resources. First, a fully containerised installation of the R package and all of its dependencies are automatically created and pushed to a container registry (e.g. GitHub Container Registry, Docker Hub) so that users can easily install local copies of the fully setup environment as either Docker or Singularity containers. Second, it creates a dedicated documentation website entirely from <italic>README</italic> files, in-code <italic>roxygen</italic> notes<sup><xref ref-type="bibr" rid="CR16">16</xref></sup> and vignettes<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, and then deploys the website to the associated GitHub repository via GitHub Pages. Finally, a variety of status reports can be directly displayed in the <italic>README</italic>/landing page of the GitHub repository as badges, such as whether all GHA have been passed, code coverage reports (i.e. what percentage of the total code has been tested), number of downloads, last commit date<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>, and more. This allows maintainers and users to immediately assess the current state of the software package.<fig id="Fig1"><label>Fig. 1</label><caption><title>The <italic>rworkflows</italic> suite.</title><p>Example usage of <italic>rworkflows</italic>. <bold>a</bold> Create package: create a new R package by forking and cloning the <italic>templateR</italic> template, or use an existing R package. <bold>b</bold> Add workflow: Install the rworkflows R package and use the <italic>use_workflows()</italic> command to generate a workflow <italic>yaml</italic> file in the correct folder structure. Arguments to customise the workflow are detailed in the documentation website. <bold>c</bold> Trigger action: trigger the rworkflows GitHub Action by pushing to GitHub. <bold>d</bold> Run the R package through the workflow on three different OS platforms in parallel. <bold>e</bold> Inspect the results of the workflow run. If one or more workflows fail, an email is automatically sent to the user. <bold>f</bold> If issues are found, make fixes to the software and push again to retrigger the <italic>rworkflows</italic> action. <bold>g</bold> When all workflows have passed, the documentation website is built using <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup> and deployed via GitHub Pages. The containerised R package is then deployed to Docker Hub. Badges embedded into markdown or HTML files (e.g. <italic>README</italic> documentation) will also be automatically updated to reflect the R package’s current status. In this figure, a version of the “R” logo with modified colours is used under the terms of the Creative Commons Attribution-ShareAlike 4.0 International license (CC-BY-SA 4.0) (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</ext-link>). The “container” logo was created by Pause08 and is freely available for reuse via Flaticon (<ext-link ext-link-type="uri" xlink:href="https://www.flaticon.com/free-icon/container_860142">https://www.flaticon.com/free-icon/container_860142</ext-link>). The Codecov logo is used with permission from Codecov. <italic>pkgdown</italic> is provided under an MIT license (<ext-link ext-link-type="uri" xlink:href="https://github.com/r-lib/pkgdown/blob/main/LICENSE.md">https://github.com/r-lib/pkgdown/blob/main/LICENSE.md</ext-link>).</p></caption><graphic xlink:href="41467_2023_44484_Fig1_HTML" id="d32e445"/></fig></p>
    <p id="Par7">In an effort to assist the development community in adopting <italic>rworkflows</italic> and make it a <italic>de facto</italic> standard for R package maintainers, we have already begun to expand its user base by making Pull Requests to GitHub repositories of R packages. In particular, we have focused on R packages that have a large user base (e.g. <italic>Seurat</italic><sup><xref ref-type="bibr" rid="CR19">19</xref>,<xref ref-type="bibr" rid="CR20">20</xref></sup>, <italic>Signac</italic><sup><xref ref-type="bibr" rid="CR21">21</xref></sup>, <italic>ArchR</italic><sup><xref ref-type="bibr" rid="CR22">22</xref></sup> or are core Bioc dependencies that thousands of other softwares rely upon (e.g. <italic>GenomicRanges</italic><sup><xref ref-type="bibr" rid="CR23">23</xref></sup>, <italic>GenomicFiles</italic><sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, <italic>BSgenome</italic><sup><xref ref-type="bibr" rid="CR25">25</xref></sup>, <italic>rtracklayer</italic><sup><xref ref-type="bibr" rid="CR26">26</xref></sup>, <italic>RSamtools</italic><sup><xref ref-type="bibr" rid="CR27">27</xref></sup>, <italic>VariantAnnotation</italic><sup><xref ref-type="bibr" rid="CR28">28</xref></sup>). We also present evidence that over 51% of all R packages currently in existence are exclusively distributed via GitHub. This further emphasises the need for robust, GitHub-based quality control/documentation standards that can be frictionlessly utilised by non-experts.</p>
    <p id="Par8">Finally, in collaboration with a multi-national community of developers we have created a step-by-step tutorial guiding users on how to create Bioc R packages using tools including <italic>rworkflows</italic>: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html">https://bioconductor.github.io/bioc_mentorship_docs/bioc-package.html</ext-link></p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>rworkflows adoption</title>
      <p id="Par9">To date, <italic>rworkflows</italic> has been successfully implemented in over 149 R repositories (including forks), and downloaded over 3700 times at an average rate of &gt;300 downloads/month. This includes packages both internal and external to our own research group, as well as the <italic>rworkflows</italic> R package itself. To illustrate this, we created a graph illustrating many of the R packages that currently use <italic>rworkflows</italic>, or depend on packages that do (i.e. second-order dependents) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). As a proxy of <italic>rworkflows</italic>’s downstream impact on the R development community, metadata was systematically gathered from GitHub. Totals across 58 dependents there were: 3089 stars, 758 forks, and 5,0482 downloads (across all distribution repositories).<fig id="Fig2"><label>Fig. 2</label><caption><title>Reverse dependency graph.</title><p>A reverse dependency graph showing all R package GitHub repositories (blue nodes) that currently utilise the <italic>rworkflows</italic> action (first-order dependents) or depend on a package that does (second-order dependents). All data was captured from October 24, 2023. An interactive, periodically updated version of this graph is also available online (see Data availability section).</p></caption><graphic xlink:href="41467_2023_44484_Fig2_HTML" id="d32e554"/></fig></p>
      <p id="Par10">An interactive and periodically updated version of this graph on the dedicated <italic>rworkflows</italic> documentation website (see Data availability section). This online version also displays the metadata for each repository when users hover the cursor over the respective node.</p>
    </sec>
    <sec id="Sec4">
      <title>GitHub as a package distributor</title>
      <p id="Par11">Most developers who distribute their R packages through dedicated repositories like CRAN, Bioc or rOpenSci still maintain a copy of their software on GitHub for the purposes of development, collaboration and transparency. However many packages go through a lengthy period of development (months to years) before being eventually accepted to one of the dedicated R package repositories. In fact, many developers may never submit their packages to these dedicated repositories, and depending on where and if they publish their work, these packages can be introduced into the scientific community without ever being thoroughly tested. As more software becomes exclusively distributed on GitHub, there is an increased need for GitHub-native solutions which make CI/CD seamless. Since there are currently few to no set standards imposed by journals or GitHub, it is incumbent upon the R developer community to provide tools which not only make best-practice coding, documentation and CI/CD easy to implement, but immediately beneficial enough to incentivise developers to widely adopt these practices.</p>
      <p id="Par12">To evaluate the magnitude of need for GitHub-based solutions in the R community, we gathered comprehensive data on where repositories R packages are hosted (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). An upset plot was generated to visualise how many R packages are distributed via one or multiple repositories. Of the 50,685 R packages we identified, 39.3% (19,932) are available via CRAN, 6.9% (3515) are available via Bioc, 0.63% (318) are available via rOpenSci, 4.3% (2176) are available via R-Forge, and 62.3% (31,592) are available on GitHub. Of particular note, 51% (25,883) of all R packages are exclusively distributed through GitHub. This is likely a very conservative underestimate, as the data on GitHub R packages comes from a static snapshot previously collected in February 2018, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. Thus, over half of all R packages are currently not vetted by dedicated R package distributors and are instead left to the developers to determine their own standards and strategies for reproducibility.<fig id="Fig3"><label>Fig. 3</label><caption><title>Repositories through which R packages are distributed.</title><p>Upset plot of how R packages are distributed through base R, dedicated R packages repositories (CRAN, Bioc, rOpenSci, R-Forge), or code repositories (GitHub). Rows indicate the total number of R packages available through a given distributor. Columns with single dots indicate the number of R packages that are exclusively available through one repository. Columns with multiple dots indicate the number of R packages available via two or more repositories. The number of R packages exclusively distributed through GitHub is highlighted in red.</p></caption><graphic xlink:href="41467_2023_44484_Fig3_HTML" id="d32e576"/></fig></p>
    </sec>
    <sec id="Sec5">
      <title>Comparisons with usethis/biocthis</title>
      <p id="Par13">It should be noted that there have been at least two other efforts to implement reproducible workflows for R package development via GHA, namely the R packages <italic>usethis</italic><sup><xref ref-type="bibr" rid="CR29">29</xref></sup> and its Bioc-oriented derivative <italic>biocthis</italic><sup><xref ref-type="bibr" rid="CR30">30</xref></sup>. While <italic>rworkflows</italic> was heavily influenced by <italic>these packages</italic>, there are several key differences. First, <italic>rworkflows</italic> operates primarily as an action which is merely called upon by a short workflow script that supplies certain parameters, whereas both <italic>usethis</italic> and <italic>biocthis can only</italic> generate static workflow scripts that dictate each step of the workflow in the file itself. This distinction becomes important when updates need to be made (e.g. new system dependencies, changes to R function implementations, deprecation of certain subactions). Actions such as <italic>rworkflows</italic> need only be updated on the centralised Github repository (see Code availability section), which then propagates to all users who call the <italic>rworkflows</italic> action, even if they implemented <italic>rworkflows</italic> in their package prior to the changes. In contrast, static workflow scripts must be updated by every user individually, and repeated for each GitHub repository. This issue compounds on itself when tasks are split into multiple workflow scripts, as is the case for <italic>usethis</italic>. In some cases, it may take a while for users to infer that the errors they’re experiencing are due to changes in the VM provided by the GHA server (for example), rather than something the user is doing wrong, or eventually abandon using the workflow entirely. That said, if users wish to create a more customised workflow that diverges from the <italic>rworkflows</italic> action (and only use it as an initial basis for their script), a full workflow version can be created with <italic>rworkflows::use_workflow(name</italic>=<italic>”rworkflows_static”)</italic>, which offers functionality analogous to that of <italic>biocthis</italic>.</p>
      <p id="Par14">Second, <italic>u</italic>sers can easily control which version of the <italic>rworkflows</italic> action to use with the <italic>tag</italic> argument to indicate a branch (e.g. “master” for the latest version) or release tag (e.g. “v1” for a stable release version tied to a specific commit). Workflow-based strategies like <italic>usethis</italic>/<italic>biocthis</italic> do not enable users to to use different versions of the same workflow, unless they reinstall a different release of the package. In the case of <italic>biocthis</italic>, users must also reinstall all other Bioc packages each time they want to use a different version of the workflow due to Bioc’s strongly enforced version control standards.</p>
      <p id="Par15">Third, <italic>rworkflows</italic> offers greater customisability via over 35 fully documented arguments (see documentation website for details: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>) that can be supplied to the <italic>use_workflow</italic> function (with sensible defaults that work out-of-the-box). For example, these arguments allow users to easily choose trigger branches, trigger events, runner OS, code check types as well as the option to support <italic>act</italic><sup><xref ref-type="bibr" rid="CR31">31</xref></sup>, a separate software for running and troubleshooting actions locally before launching them to GitHub. In comparison, the analogous <italic>biocthis::use_bioc_github_action()</italic> function currently has 7 arguments and more limited customisability (<italic>biocthis</italic> v1.12.0).</p>
      <p id="Par16">Fourth, <italic>rworkflows</italic> currently has 92% code coverage via unit tests, whereas <italic>biocthis</italic> (v1.12.0) and <italic>usethis</italic> (v2.2.2) currently have 80% and 57% code coverage, respectively (though this could improve in the future). Having high code coverage helps to improve package robustness and reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>.</p>
      <p id="Par17">Fifth, <italic>rworkflows</italic> obviates the need for a user-supplied Dockerfile as it creates one on the fly instead (see section Container usage). This level of abstraction serves to expand the usage of containers to those who do not know how to successfully set them up manually, or are unfamiliar with the Docker-specific syntax necessary to do so. None of this is to say that the <italic>biocthis</italic> package is obsolete, but rather that it offers other complementary features such as more fine-grained control over template creation than the all-in-one strategy adopted by <italic>templateR</italic>, as well as automated code styling.</p>
      <p id="Par18">Finally, unlike static workflows, all the repositories in which centralised GitHub actions (e.g. <italic>rworkflows</italic>) have been implemented are automatically recorded by GitHub. These can be accessed under the Insights tab of the action’s GitHub repository, providing greater insight into the scope of usage and impact of the action (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
    </sec>
    <sec id="Sec6">
      <title>Comparisons with Bioconductor servers</title>
      <p id="Par19">The <italic>rworkflows</italic> suite is not mutually exclusive to the package checking services provided by Bioc, which regularly run standardised checks on multiple OS. To the contrary, <italic>rworkflows</italic> fills an important gap for developers of Bioc packages who wish to comprehensively test their package before pushing to the upstream Bioc copy, as the upstream copy can take several days to rerun checks. Having an intermediate checking solution via GitHub provides feedback within minutes or hours, as opposed to days, thus greatly accelerating the development cycle. While Bioc does provide a dedicated Docker container with several prerequisite software installed (e.g. <italic>BiocManager</italic>, <italic>BiocCheck</italic>), these containers do not have any other Bioc packages installed. In fact, by default <italic>rworkflows</italic> uses the Bioc Docker container as a base and then builds upon it to generate a package-specific containerised environment ready for distribution to users. This greatly speeds up the time it takes for any given user to successfully install and start using the developer’s R package.</p>
    </sec>
    <sec id="Sec7">
      <title>Use case: MAGMA.Celltyping</title>
      <p id="Par20">To demonstrate how <italic>rworkflows</italic> can be helpful in practice, we use the R package <italic>MAGMA.Celltyping</italic> (developed and maintained by our lab) as an example<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>. Since first implementing <italic>rworkflows</italic>, it has revealed a number of vulnerabilities, missing documentation, and bugs within <italic>MAGMA.Celltyping</italic> (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=">https://github.com/neurogenomics/MAGMA_Celltyping/issues?q=</ext-link>). Some of these bugs were only visible when run within a particular version of R (e.g. development) or on a particular OS type. For example, the way we constructed file paths was not robust on Windows OS, and would lead to the software being unable to find key resources on that platform (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/MAGMA_Celltyping/issues/92">https://github.com/neurogenomics/MAGMA_Celltyping/issues/92</ext-link>). As none of the developers use Windows machines, this would have been left for users to discover these bugs and (hopefully) report them. In the meantime, some users may have abandoned using our tool without our knowledge. Moreover, running code coverage tests has enabled us to identify potential weak points in our code and design tests that are capable of better assessing these. Whenever we make changes to our code, the coverage badge in the README automatically updates so that we (and our users) know how robust we can expect our tool to be (currently at 75% coverage in v2.0.11, with plans to improve this further). Finally, users of <italic>MAGMA.Celltyping</italic> can now bypass all installation and dependency issues with containers automatically generated by <italic>rworkflows</italic>. The instructions for setting up Docker/Singularity containers were also automatically generated by <italic>rworkflows</italic> (<italic>rworkflows::use_vignette_docker()</italic>), wherein the process of setting up <italic>MAGMA.Celltyping</italic> on any computing environment is reduced to a single copy-and-paste step (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker">https://neurogenomics.github.io/MAGMA_Celltyping/articles/docker</ext-link>).</p>
    </sec>
  </sec>
  <sec id="Sec8" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par21">Most developers would agree that the FAIR principles are noble goals worthy of striving towards. However, the costs associated with putting these principles into practice (e.g. time, learning curves, lack of computational resources) often deter developers from ever effectively implementing them. Therefore, there is a dire need to reduce the burden put on individual developers by automating reproducibe practices, while at the same time increasing the amount of useful output generated by such practices. This will greatly improve the overall cost/benefit ratio of conducting reproducible science, which will in turn incentivise widespread adoption of FAIR and open practices. <italic>rworkflows</italic> aims to do exactly this, by enabling greatly simplified implementation of a robust GitHub-native testing, documentation, and containerisation pipeline through a single R function. This makes <italic>rworkflows</italic> usable by even novice programmers and requires exceedingly minimal local computing power. Furthermore, <italic>rworkflows</italic> can be used in either public or private repositories, extending its utility to pre-production or intellectual property-sensitive packages.</p>
    <p id="Par22">There are no doubt hundreds of invaluable and high-quality R packages that are not hosted on CRAN/Bioc/rOpenSci. Nevertheless, assessing package usability is currently a process of trial and error, which amounts to a huge number of wasted hours compounded across thousands of users. <italic>rworkflows</italic> attempts to make these distinctions more visible and immediately accessible, all while helping to make all R packages meet a set of minimum standards (or at least transparently advertise that they dont yet).</p>
    <p id="Par23">Peer-reviewed journals, as well as repositories like CRAN, Bioc, and rOpenSci, rely almost entirely on volunteer community members to review and approve software packages for official release<sup><xref ref-type="bibr" rid="CR11">11</xref>,<xref ref-type="bibr" rid="CR37">37</xref></sup>. Each additional cycle in the review–response process due to common and avoidable issues can incur substantial and unnecessary delay. This is only exacerbated by the limited time and considerable demands both parties are faced with<sup><xref ref-type="bibr" rid="CR38">38</xref>,<xref ref-type="bibr" rid="CR39">39</xref></sup>. <italic>rworkflows</italic> serves to significantly reduce the burden of back-and-forth troubleshooting by decreasing the prevalence of installation errors (through containerisation), coding bugs (through package checks), and miscommunications (through documentation). As the exponentially expanding scientific literature continues to outpace the proportion of qualified researchers willing to volunteer as reviewers<sup><xref ref-type="bibr" rid="CR39">39</xref></sup>, making this process more efficient will become increasingly critical for the sustainability of timely, high-quality peer-reviewed research<sup><xref ref-type="bibr" rid="CR37">37</xref>,<xref ref-type="bibr" rid="CR40">40</xref></sup>. Therefore, journals may wish to consider requiring tools such as <italic>rworkflows</italic> to be implemented as a prerequisite for progressing the review process.</p>
    <p id="Par24">Code coverage is one particularly useful metric for assessing package robustness. While the precise measurement of code coverage varies slightly from one implementation to another, it can generally be summarised as the percentage of lines in your software’s code that are run during unit tests (e.g. using the <italic>testthat</italic> or <italic>RUnit</italic> frameworks). This takes into account that code within conditional statements may not be run in all scenarios, and thus encourages developers to test the same code using multiple sets of parameters. Assuming that the tests themselves are valid, a code coverage of 92% could be interpreted as “92% of its code has been systematically tested and is working as intended”. Thus, code coverage can serve as a useful, continuous measure of package robustness as it reduces the chances that the code will break in various use cases<sup><xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref></sup>. The <italic>rworkflows</italic> action automatically runs code coverage tests via <italic>covr</italic><sup><xref ref-type="bibr" rid="CR41">41</xref></sup> and uploads a report to the browser-based Codecov or Coverall services where users can interactively explore which portions of their code are currently not being thoroughly tested. Finally, the <italic>rworkflows::use_badges</italic> function (which builds upon the <italic>badger</italic> package) allows developers to easily advertise both discrete metrics (passing on CRAN/Bioc, passing <italic>rworkflows</italic> checks) and continuous metrics (code coverage percentage) on their GitHub landing pages.</p>
    <p id="Par25">Providing containerised environments with all necessary dependencies pre-installed and an interactive development platform (i.e. <italic>RStudio</italic><sup><xref ref-type="bibr" rid="CR42">42</xref></sup>) eliminates virtually all installation troubleshooting. This also helps reduce the burden of maintaining software across hundreds to thousands of users, each with one or more slightly different computing environments. As an additional incentive to developers, continued maintenance of bioinformatics tools post-publication is associated with multiple metrics of impact including increased citations<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. <italic>rworkflows</italic> also allows users to control which versions of R, Bioc, and Python they wish to have installed within the container. By default, it uses the most up-to-date development versions of R/Bioc so that developers can stay ahead of the curve and identify issues in future versions before they have been released to the public. This is important, as it prevents situations where developers are suddenly faced with many bugs that are already affecting a large number of users and must be fixed urgently.</p>
    <p id="Par26">Beyond the initial publication of an R package, <italic>rworkflows</italic> offers a variety of benefits for different stakeholders. Automating clean and consistent documentation website generation without any additional effort encourages developers to keep their documentation up to date and accessible. Having thorough documentation is not only an invaluable resource for new users, but also trainees in the developers’ own lab, or even when reteaching themselves after a long period of not being active on the project.</p>
    <p id="Par27">In that same vein, we recognise the importance of ensuring <italic>rworkflows</italic> itself is maintained and extended well into the foreseeable future. We are committed to securing this vision, out of a desire to make this resource continually available to the R community as well as our reliance on <italic>rworkflows</italic> for all of our R packages. It is for this very reason that the <italic>rworkflows</italic> action was designed to, whenever possible, use subactions from well-established developer organisations (e.g. GitHub, R Consortium, Posit, Bioc) as they have the highest likelihood of being maintained in the long term. In addition, we have already begun to explore multiple avenues towards open-source longevity including (but not limited to) seeking official support/collaboration with software repositories, user contributions, crowd-funding, corporate sponsorship, and grants for sustainable software development. All members of the community are encouraged to voice their ideas/concerns/opinions by participating in the dedicated “Longevity” Discussion board (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/discussions">https://github.com/neurogenomics/rworkflows/discussions</ext-link>). In any case, we are dedicated to ensuring <italic>rworkflows</italic> remains open source, well maintained, and free. Additional features already in development include interactive debugging within the GitHub-hosted <italic>r</italic><italic>workflows</italic> action environment, maximising VM storage capacity for resource-intensive R packages, and improved parameter flexibility throughout.</p>
    <p id="Par28">To conclude, the <italic>rworkflows</italic> suite offers an essential toolkit for developers and users of any experience level. This includes developers who (1) currently (or plan to) distribute their R packages through repositories like CRAN/Bioc/rOpenSci and want to run quality checks before resubmitting a new version for official release, (2) wish to exclusively distribute their code through GitHub while maintaining a high level of coding standards, (3) want to keep the documentation updated without constant manual upkeep of a website and/or (4) want to distribute their software in a fully reproducible Docker/Singularity container. Furthermore, the <italic>rworkflows</italic> action is designed to be both easy to use and flexible (through customisable parameters), thus enabling developers to utilise it in whatever way best suits their project-specific goals In practice, this can range from checking for basic installability/usability of an R package, all the way to extensive evaluation of consortia-specific coding and documentation standards with fully automated container deployment. Therefore, <italic>rworkflows</italic> fills a gap that an increasing number of R developers find themselves in by reducing the burden of effectively implementing FAIR practices, and increasing its immediate benefits for developers and users alike. Finally, to further expand its accessibility we have provided a series of YouTube videos walking new users through the theory and practice of <italic>rworkflows</italic> (<ext-link ext-link-type="uri" xlink:href="https://youtube.com/@NeurogenomicsLab">https://youtube.com/@NeurogenomicsLab</ext-link>).</p>
  </sec>
  <sec id="Sec9">
    <title>Methods</title>
    <sec id="Sec10">
      <title>templateR template</title>
      <p id="Par29">For users who are creating a new R package from scratch, we have provided a CRAN/Bioc-compatible template (<italic>templateR)</italic>. To get started, one simply forks the template by navigating to the GitHub repository (see Code availability section), clicking “Use this template”, and cloning a copy of the new R package to begin editing it (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The user need only replace key metadata fields (e.g. Package, Title, Description, URL) in the <italic>DESCRIPTION</italic> file (a required file for all R packages). What makes this template unique is that all other components of the package (README, vignettes, unit test setup scripts) are programmatically autofilled based on the <italic>DESCRIPTION</italic> file. This strategy greatly minimises redundant and error-prone aspects of R package documentation.</p>
      <p id="Par30">Alternatively, users can start with any pre-existing R package and skip directly to the next step: using <italic>rworkflows</italic> R package. In either case, we have created a companion Wiki page to help guide users who are unfamiliar with the Bioc standards and offer a variety of tips and tricks to make this process easier, which we continue to maintain (see Code availability section).</p>
    </sec>
    <sec id="Sec11">
      <title>rworkflows R package</title>
      <p id="Par31">The <italic>rworkflows</italic> R package is available on both CRAN and GitHub (see Code availability). Workflow scripts (written in <italic>yaml</italic> format) placed within a specific subdirectory within the GitHub repository (<italic>.github/workflows/*.yml</italic>), dictate which actions are triggered under which conditions. For those not familiar with creating GHA workflows, learning the GHA-specific expressions and idiosyncrasies can be a time-consuming and iterative process. Instead, we have abstracted this step away by autogenerating workflow scripts from a single R command in the dedicated R package: <italic>use_workflow()</italic>. This creates a fully functional workflow file in the correct subdirectory even with no arguments supplied, and only needs to be run once per R package (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). For greater flexibility, users can supply the function with their preferred arguments to generate (or regenerate) a customised workflow script to trigger the <italic>rworkflows</italic> action. By default, the workflow will trigger the <italic>rworkflows</italic> action (see <italic>rworkflows</italic> action section below) upon pushes or pull requests to the remote GitHub repository. For minor pushes (e.g. fixing a typo in the <italic>README</italic> text), one can avoid triggering the action by simply adding the string “[skip ci]” to the commit message. Triggers can be set to activate for specific GitHub branches only (e.g. “main”, “master”, “devel”) or even <italic>regex</italic> expressions (e.g. “RELEASE_**”), which can be quite helpful for developing Bioc packages with regular release updates without having to modify the workflow script each time. Users can even write multiple workflows to the same repository, setting each to trigger via different branches and/or with different parameters (e.g. use the RELEASE_3_18 version of the Bioc docker container when pushing to the RELEASE_3_18 branch). For step-by-step instructions we provide a vignette specifically geared towards Bioc developers (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link>). Finally, the <italic>use_workflow()</italic> allows users to control exactly which specific release of the <italic>rworkflows</italic> action they wish to trigger (via the <italic>tag</italic> argument). For a full description of all arguments of the <italic>use_workflow()</italic> function, please refer to the documentation website (<ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/reference/use_workflow.html">https://neurogenomics.github.io/rworkflows/reference/use_workflow.html</ext-link>).</p>
      <p id="Par32">In addition, the <italic>rworkflows</italic> R package contains other useful functions for developers, including <italic>use_badges()</italic>, which dynamically generates badges indicating various aspects of the software package’s status to the documentation pages (e.g. the <italic>README</italic> file). It also provides the function <italic>use_dockerfile()</italic>, which writes a Docker recipe file (i.e. Dockerfile) to create a Docker image with the user’s R package (and all of its dependencies) pre-installed). Note that this same function is called automatically in step 8 of the <italic>rworkflows</italic> action, but if a pre-existing Dockerfile in the current working directory is detected, this step is skipped and the pre-existing Dockerfile is used instead. Thus, if preferred, users can have more customised control over how their Docker container is configured. Finally, <italic>use_readme(), use_vignette_docker()</italic> and <italic>use_vignette_getstarted()</italic> can generate autofiled templates for each of these R package documentation components respectively.</p>
    </sec>
    <sec id="Sec12">
      <title>rworkflows action</title>
      <p id="Par33">Once triggered by a workflow, the <italic>rworkflows</italic> action launches three virtual machines (VMs) in parallel to test the R package across multiple OS, including Linux, Mac, and Windows. Within each VM, the following steps are performed (Fig. <xref rid="Fig1" ref-type="fig">1d</xref>):<list list-type="order"><list-item><p id="Par34">Install system: Installs all OS-specific system dependencies that account for a variety of different functionalities that R users may require.</p></list-item><list-item><p id="Par35">Install R: Installs all R dependencies for the R package being tested. Three rounds dependency installation are attempted using slightly different methods to ensure robustness of this procedure without requiring the user to manually troubleshoot this step.</p></list-item><list-item><p id="Par36">Install LaTeX: Install a specific version of LaTeX and any extra LaTeX packages (controlled by the arguments <italic>has_latex</italic>, <italic>tinytex_installer</italic>, <italic>tinytex_version</italic>, and <italic>pandoc_version</italic>).</p></list-item><list-item><p id="Par37">Install conda: Install <italic>conda</italic>, <italic>miniconda</italic>, miniforge, or <italic>mamba</italic> (controlled by the arguments <italic>miniforge_variant</italic>, and <italic>miniforge_version</italic>). Users can additionally provide a yaml file (via the <italic>environment_file</italic> argument) with specifications for a <italic>conda</italic> environment to build and/or activate before all other downstream code checks. This greatly simplifies the installation of not only python packages (which some R packages may use as a backend) but also various extra tools and system dependencies not installed in previous steps. Finally, rworkflows provide a helper R function, <italic>construct_conda_yml()</italic>, for creating new <italic>conda</italic> yaml files for those who are unfamiliar with the formatting requirements.</p></list-item><list-item><p id="Par38">CRAN checks: Run CRAN checks via <italic>rcmdcheck()</italic>. When <italic>run_rcmdcheck</italic> = <italic>TRUE</italic>, all checks must pass in order for the GHA to succeed. This step uses CRAN standards by default, but can run <italic>rcmdcheck</italic> without CRAN standards by setting the argument <italic>as_cran</italic> = <italic>FALSE</italic>.</p></list-item><list-item><p id="Par39">Bioc checks: Run Bioc checks via <italic>BiocCheck()</italic>. When <italic>run_bioc</italic> = <italic>TRUE</italic>, all checks must pass in order for the action to succeed.</p></list-item><list-item><p id="Par40">Unit tests: Runs unit tests implemented via the <italic>testthat</italic><sup><xref ref-type="bibr" rid="CR43">43</xref></sup> and/or <italic>RUnit</italic><sup><xref ref-type="bibr" rid="CR44">44</xref></sup> R packages and generates a downloadable report of the results.</p></list-item><list-item><p id="Par41">Code coverage: Runs code coverage tests and uploads the results to Codecov.</p></list-item><list-item><p id="Par42">Build website: (Re)builds the documentation website from <italic>README</italic> files, in-line <italic>roxygen</italic> notes, and vignettes using the <italic>pkgdown</italic><sup><xref ref-type="bibr" rid="CR17">17</xref></sup>. It then deploys the website via GitHub Pages in a new branch named “gh-pages” in the same repository. Deploying the website via a separate branch is advantageous as it avoids accidentally adding large HTML/CSS/JavaScript source files and libraries to the R package itself (which can slow down its installation and performance in some situations).</p></list-item><list-item><p id="Par43">Push container: Pushes a container to a container registry with your R package, all of its dependencies, and an interactive Rstudio interface pre-installed. Included in <italic>templateR</italic> is an auto-filled vignette for how to create a local Docker or SIngularity container. If you’ve selected a non-default container registry (e.g. Docker Hub), this step requires a valid authentication token from the relevant registry, which can be stored as a GitHub Secrets variable. This ensures that only users with appropriate push permissions to a given registry account can update the container there.</p></list-item></list></p>
      <p id="Par44">Steps 6-8 are only run on the Linux VM to avoid redundancy and avoid conflicts due to simultaneous pushes to their respective repositories (i.e. Codecov, GitHub, Docker Hub).</p>
    </sec>
    <sec id="Sec13">
      <title>Container usage</title>
      <p id="Par45">Containerisation is especially useful when distributing R packages to many users using a wide variety of OS platforms, including high-performance computing (HPC) clusters which may have software installation restrictions for non-root users. Once the <italic>rworkflows</italic> action has successfully completed at least once on the Linux VM, both developers can create Docker and/or Singularity images from the container hosted on a container registry. By default, rworkflows pushes to the GitHub Container Registry, which has the advantage of not requiring any additional accounts or credentials and automatically appearing directly on the associated GitHub repository landing page (under the section “Packages”). Alternatively, users may specify any preferred container registry (e.g. Docker Hub) using the <italic>docker_registry</italic> argument.</p>
      <p id="Par46">If <italic>templateR</italic> was used as a template, a vignette detailing a step-by-step reproducible example is autogenerated. A rendered version of this vignette can be accessed via the dedicated GitHub Pages site, and a link to this vignette is automatically rendered within the <italic>templateR</italic> template <italic>README</italic> file (see Code availability section) under the “Documentation → Docker/Singularity” subheader.</p>
    </sec>
    <sec id="Sec14">
      <title>rworkflows adoption</title>
      <p id="Par47">Metadata was gathered from the GitHub application programming interface (API) for each repository using the R packages <italic>echodeps</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. This was used to both identify which packages are currently using the <italic>rworkflows</italic> action (i.e. dependents), and to gather relevant metadata on each of the repositories. Of particular interest were the following metrics; stars (the number of users that bookmarked the GitHub repo with a star), unique clones (the number of unique instances that the GitHub repo was downloaded from Github), and unique views (the number unique instances the GitHub repo was viewed in a web browser). Here, “unique” means the number of distinct internet protocol (IP) addresses. Sums of each of these metrics across all were computed to represent the total downstream impact of <italic>rworkflows</italic>. All dependents were visualised as nodes in a directed acyclic graph, connecting to an additional node representing the <italic>rworkflows</italic> action (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
      <p id="Par48">To identify the R packages with the highest potential for downstream impact on other packages, we collected data on the number of downloads for every package in CRAN and Bioc using <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. We then selected the packages with the greatest numbers of downloads and prioritised them for making Pull Requests on their respective GitHub repos to implement <italic>rworkflows</italic>.</p>
      <p id="Par49">An R markdown script to fully reproduce these analyses, as well as an interactive version of the graph with additional metadata, is available as a vignette on the official <italic>rworkflows</italic> GitHub Pages documentation website (See the Code availability section for link).</p>
    </sec>
    <sec id="Sec15">
      <title>GitHub as a package distributor</title>
      <p id="Par50">To comprehensively assess which repositories R packages are distributed via, we collected metadata on all known R packages from base R, CRAN, Bioc, rOpenSci, R-Forge, and GitHub using the package <italic>echogithub</italic><sup><xref ref-type="bibr" rid="CR45">45</xref></sup>. The total and intersection between packages in each of these repositories were then computed and visualised using the R package <italic>UpSetR</italic><sup><xref ref-type="bibr" rid="CR46">46</xref></sup> (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p>
      <p id="Par51">It should be noted that the data on GitHub-hosted R packages comes from a static snapshot previously collected in February 2018 via the <italic>echogithub</italic> dependency <italic>githubinstall</italic><sup><xref ref-type="bibr" rid="CR47">47</xref></sup>, whereas all the CRAN/Bioc/rOpenSci/R-Forge data is fully up-to-date. This means that our estimates of the proportion of R packages that are distributed exclusively through GitHub are almost certainly an underestimate. An R markdown script to fully reproduce these analyses is available as a vignette on the <italic>rworkflows</italic> documentation website (See the Code availability section).</p>
    </sec>
    <sec id="Sec16">
      <title>Statistics and reproducibility</title>
      <p id="Par52">For the <italic>rworkflows</italic> adoption analysis the total number of GitHub stars, forks, and downloads were summed across all first- and second-order dependents of <italic>rworkflows</italic>. All analysis code can be found on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/vignettes">GitHub</ext-link>.</p>
    </sec>
    <sec id="Sec17">
      <title>Reporting summary</title>
      <p id="Par53">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Portfolio Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec18">
      <title>Supplementary information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="41467_2023_44484_MOESM1_ESM.pdf">
            <caption>
              <p>Supplementary Information</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="41467_2023_44484_MOESM2_ESM.pdf">
            <caption>
              <p>Peer Review File</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="41467_2023_44484_MOESM3_ESM.pdf">
            <caption>
              <p>Reporting Summary</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-023-44484-5.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank the development/maintenance teams at GitHub, Bioconductor, and CRAN, as well as the respective contributors of the GitHub Actions that <italic>rworkflows</italic> depends on. We would also like to thank key early adopters of rworkflows for their invaluable feedback and direct contributions; in particular Jacques Serizay, Ali Sajid Imami, and Vince Carey. For the purpose of open access, we have applied a creative commons attribution (CC BY) licence (where permitted by UKRI, ‘open government licence’ or ‘creative commons attribution no-derivatives (CC BY-ND) licence’ may be stated instead) to any author accepted manuscript version arising. This work was supported by a UK Dementia Research Institute (UK DRI) Future Leaders Fellowship [MR/T04327X/1] and the UK DRI which receives its funding from UK DRI Ltd., funded by the UK Medical Research Council, Alzheimer’s Society and Alzheimer’s Research UK. MR/T04327X/1; NGS</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>B.M.S. wrote the software described herein, with contributions from A.E.M. B.M.S. wrote the manuscript, with contributions from A.E.M. N.G.S. provided general project guidance.</p>
  </notes>
  <notes notes-type="peer-review">
    <title>Peer review</title>
    <sec id="FPar1">
      <title>Peer review information</title>
      <p id="Par54"><italic>Nature Communications</italic> thanks the anonymous reviewer(s) for their contribution to the peer review of this work. A peer review file is available.</p>
    </sec>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>All code and data to reproduce the analyses performed in this study is shared publicly on <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/tree/master/reports">GitHub</ext-link>. The latest release of <italic>rworkflows</italic> has been assigned the following <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/records/10066453">Zenodo</ext-link>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>Each component of <italic>rworkflows</italic> is freely available on GitHub<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>. <italic>templateR</italic> R package template: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/templateR">https://github.com/neurogenomics/templateR</ext-link><italic>rworkflows</italic> R package: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows">https://github.com/neurogenomics/rworkflows</ext-link><italic>rworkflows</italic> GitHub Action: <ext-link ext-link-type="uri" xlink:href="https://github.com/marketplace/actions/rworkflows">https://github.com/marketplace/actions/rworkflows</ext-link><italic>rworkflows</italic> Docker container: <ext-link ext-link-type="uri" xlink:href="https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows">https://github.com/neurogenomics/rworkflows/pkgs/container/rworkflows</ext-link> rworkflows Bioconductor vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/bioconductor.html">https://neurogenomics.github.io/rworkflows/articles/bioconductor.html</ext-link><italic>rworkflows</italic> Docker/Singularity container vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/docker">https://neurogenomics.github.io/rworkflows/articles/docker</ext-link><italic>rworkflows</italic> dependency graph vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/depgraph">https://neurogenomics.github.io/rworkflows/articles/depgraph</ext-link> R package repository distribution vignette: <ext-link ext-link-type="uri" xlink:href="https://neurogenomics.github.io/rworkflows/articles/repos">https://neurogenomics.github.io/rworkflows/articles/repos</ext-link>.</p>
  </notes>
  <notes id="FPar2" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par55">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baker</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>1500 scientists lift the lid on reproducibility</article-title>
        <source>Nature</source>
        <year>2016</year>
        <volume>533</volume>
        <fpage>452</fpage>
        <lpage>454</lpage>
        <pub-id pub-id-type="doi">10.1038/533452a</pub-id>
        <?supplied-pmid 27225100?>
        <pub-id pub-id-type="pmid">27225100</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Duck</surname>
            <given-names>G</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A survey of bioinformatics database and software usage through mining the literature</article-title>
        <source>PLoS One</source>
        <year>2016</year>
        <volume>11</volume>
        <fpage>e0157989</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0157989</pub-id>
        <?supplied-pmid 27331905?>
        <pub-id pub-id-type="pmid">27331905</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Russell</surname>
            <given-names>PH</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Ananthan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Harnke</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>NE</given-names>
          </name>
        </person-group>
        <article-title>A large-scale analysis of bioinformatics code on GitHub</article-title>
        <source>PLoS ONE</source>
        <year>2018</year>
        <volume>13</volume>
        <fpage>e0205898</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0205898</pub-id>
        <?supplied-pmid 30379882?>
        <pub-id pub-id-type="pmid">30379882</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>
        <source>Sci. Data</source>
        <year>2016</year>
        <volume>3</volume>
        <fpage>160018</fpage>
        <pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id>
        <?supplied-pmid 26978244?>
        <pub-id pub-id-type="pmid">26978244</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Clarke</surname>
            <given-names>DJB</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>FAIRshake: Toolkit to Evaluate the FAIRness of Research Digital Resources</article-title>
        <source>Cell Syst.</source>
        <year>2019</year>
        <volume>9</volume>
        <fpage>417</fpage>
        <lpage>421</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cels.2019.09.011</pub-id>
        <?supplied-pmid 31677972?>
        <pub-id pub-id-type="pmid">31677972</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ihaka</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>R: a language for data analysis and graphics</article-title>
        <source>J. Comput. Graph. Stat.</source>
        <year>1996</year>
        <volume>5</volume>
        <fpage>299</fpage>
        <lpage>314</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Giorgi, F. M., Ceraolo, C. &amp; Mercatelli, D. The R language: an engine for bioinformatics and data science. <italic>Life</italic><bold>12</bold>, 648 (2022).</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gentleman</surname>
            <given-names>RC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol.</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R80</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
        <?supplied-pmid 15461798?>
        <pub-id pub-id-type="pmid">15461798</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat. Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boettiger</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chamberlain</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Building software, building community: lessons from the rOpenSci</article-title>
        <source>Proj. J. Open Res. Softw.</source>
        <year>2015</year>
        <volume>3</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.5334/jors.bu</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ram</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A community of practice around peer review for long-term research software sustainability</article-title>
        <source>Comput. Sci. Eng.</source>
        <year>2019</year>
        <volume>21</volume>
        <fpage>59</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2018.2882753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hornik</surname>
            <given-names>KAre</given-names>
          </name>
        </person-group>
        <article-title>There too many R packages?</article-title>
        <source>AJS</source>
        <year>2012</year>
        <volume>41</volume>
        <fpage>59</fpage>
        <lpage>66</lpage>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Bioconductor, Shepherd, L. &amp; Ramos, M. <italic>BiocCheck: Bioconductor-Specific Package Checks</italic>. 10.18129/B9.bioc.BiocCheck. (2022)</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Wujciak-Jens, M. P. M. S. <italic>pkgcheck: Check Whether a Package is Ready for Submission to rOpenSci’s Peer-review System</italic>. (rOpenSci, 2022).</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Murphy, A. E. &amp; Skene, N. G. <italic>neurogenomics/rworkflows.</italic>10.5281/zenodo.10066453 (2023).</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Wickham, H., Danenberg, P., Csárdi, G. &amp; Eugster, M. roxygen2: In-Line Documentation for R, 2020. <italic>R package version</italic>.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Wickham, H. &amp; Hesselberth, J. <italic>pkgdown: Make Static HTML Documentation for a Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Yu, G. <italic>badger: Badge for R Package</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hao</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrated analysis of multimodal single-cell data</article-title>
        <source>Cell</source>
        <year>2021</year>
        <volume>184</volume>
        <fpage>3573</fpage>
        <lpage>3587.e29</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2021.04.048</pub-id>
        <?supplied-pmid 34062119?>
        <pub-id pub-id-type="pmid">34062119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Farrell</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Gennert</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schier</surname>
            <given-names>AF</given-names>
          </name>
          <name>
            <surname>Regev</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Spatial reconstruction of single-cell gene expression data</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2015</year>
        <volume>33</volume>
        <fpage>495</fpage>
        <lpage>502</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3192</pub-id>
        <?supplied-pmid 25867923?>
        <pub-id pub-id-type="pmid">25867923</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stuart</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Srivastava</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Madad</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lareau</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Single-cell chromatin state analysis with Signac</article-title>
        <source>Nat. Methods</source>
        <year>2021</year>
        <volume>18</volume>
        <fpage>1333</fpage>
        <lpage>1341</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-021-01282-5</pub-id>
        <?supplied-pmid 34725479?>
        <pub-id pub-id-type="pmid">34725479</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Granja</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ArchR is a scalable software package for integrative single-cell chromatin accessibility analysis</article-title>
        <source>Nat. Genet.</source>
        <year>2021</year>
        <volume>53</volume>
        <fpage>403</fpage>
        <lpage>411</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-021-00790-6</pub-id>
        <?supplied-pmid 33633365?>
        <pub-id pub-id-type="pmid">33633365</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Software for computing and annotating genomic ranges</article-title>
        <source>PLoS Comput. Biol.</source>
        <year>2013</year>
        <volume>9</volume>
        <fpage>e1003118</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003118</pub-id>
        <?supplied-pmid 23950696?>
        <pub-id pub-id-type="pmid">23950696</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Maintainer, B. P. et al. <italic>GenomicFiles: Distributed Computing by File or by Range</italic>. (2019).</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pagès, H. <italic>BSgenome: Software Infrastructure for Efficient Representation of Full Genomes and Their SNPs</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lawrence</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>rtracklayer: an R package for interfacing with genome browsers</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1841</fpage>
        <lpage>1842</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp328</pub-id>
        <?supplied-pmid 19468054?>
        <pub-id pub-id-type="pmid">19468054</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">M. Morgan, H. Pagès, V. Obenchain, N. Hayden N. <italic>Rsamtools: Binary alignment (BAM)</italic>, <italic>FASTA, variant call (BCF), and tabix file import</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Obenchain</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>VariantAnnotation: a Bioconductor package for exploration and annotation of genetic variants</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>2076</fpage>
        <lpage>2078</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu168</pub-id>
        <?supplied-pmid 24681907?>
        <pub-id pub-id-type="pmid">24681907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Wickham, H., Bryan, J. &amp; Barrett, M. Usethis: Automate package and project setup. (2020).</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Collado-Torres, L. <italic>Biocthis: Automate Package and Project Setup for Bioconductor Packages</italic>. 10.18129/B9.bioc. (2022)</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Lee, C. <italic>act: run your GitHub actions locally</italic>. (2022).</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Meinke, K. Code Coverage and Test Automation: State of the Art. Preprint ar <italic>arXiv</italic>10.48550/arXiv.2108.11723 (2021).</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hilton, M., Bell, J. &amp; Marinov, D. A large-scale study of test coverage evolution. in <italic>Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering</italic> 53–63 (Association for Computing Machinery). 10.1145/3238147.3238183. (2018)</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Ivanković, M., Petrović, G., Just, R. &amp; Fraser, G. Code coverage at Google. in <italic>Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering</italic> 955–963 (Association for Computing Machinery). 10.1145/3338906.3340459, (2019)</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Kochhar, P. S., Thung, F. &amp; Lo, D. Code coverage and test suite effectiveness: Empirical study with real bugs in large systems. in <italic>2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)</italic> 560–564. 10.1109/SANER.2015.7081877. (2015)</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Skene</surname>
            <given-names>NG</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genetic identification of brain cell types underlying schizophrenia</article-title>
        <source>Nat. Genet.</source>
        <year>2018</year>
        <volume>50</volume>
        <fpage>825</fpage>
        <lpage>833</lpage>
        <pub-id pub-id-type="doi">10.1038/s41588-018-0129-5</pub-id>
        <?supplied-pmid 29785013?>
        <pub-id pub-id-type="pmid">29785013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Vesper, I. <italic>Peer Reviewers Unmasked: Largest Global Survey Reveals Trends</italic>. (Nature Publishing Group, UK, 2018). 10.1038/d41586-018-06602-y.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Woolston, C. <italic>How Burnout and Imposter Syndrome Blight Scientific Careers</italic>. (Nature Publishing Group, UK, 2021). 10.1038/d41586-021-03042-z.</mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Milojević</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Radicchi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Walsh</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Changing demographics of scientific careers: the rise of the temporary workforce</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2018</year>
        <volume>115</volume>
        <fpage>12616</fpage>
        <lpage>12623</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1800478115</pub-id>
        <?supplied-pmid 30530691?>
        <pub-id pub-id-type="pmid">30530691</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Petrescu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krishen</surname>
            <given-names>AS</given-names>
          </name>
        </person-group>
        <article-title>The evolving crisis of the peer-review process</article-title>
        <source>J. Mark. Anal.</source>
        <year>2022</year>
        <volume>10</volume>
        <fpage>185</fpage>
        <lpage>186</lpage>
        <pub-id pub-id-type="doi">10.1057/s41270-022-00176-5</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <mixed-citation publication-type="other">Hester, J. <italic>covr: Test coverage for packages</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Posit. <italic>RStudio: Integrated Development Environment for R</italic>. (2023).</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wickham</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Testthat: get started with testing</article-title>
        <source>R. J.</source>
        <year>2011</year>
        <volume>3</volume>
        <fpage>5</fpage>
        <pub-id pub-id-type="doi">10.32614/RJ-2011-002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Matthias Burger, Klaus Juenemann, Thomas Koenig, Roman Zenka. <italic>RUnit: R Unit Test Framework</italic>. (2018).</mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Schilder, B. M., Humphrey, J. &amp; Raj, T. echolocatoR: an automated end-to-end statistical and functional genomic fine-mapping pipeline. <italic>Bioinformatics</italic>10.1093/bioinformatics/btab658. (2021).</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Conway</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Lex</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gehlenborg</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>UpSetR: an R package for the visualization of intersecting sets and their properties</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <fpage>2938</fpage>
        <lpage>2940</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx364</pub-id>
        <?supplied-pmid 28645171?>
        <pub-id pub-id-type="pmid">28645171</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Makiyama, K. <italic>githubinstall: A Helpful Way to Install R Packages Hosted on GitHub</italic>. (2018).</mixed-citation>
    </ref>
  </ref-list>
</back>
