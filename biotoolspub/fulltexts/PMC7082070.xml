<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS Comput. Biol</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">ploscomp</journal-id>
    <journal-title-group>
      <journal-title>PLoS Computational Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1553-734X</issn>
    <issn pub-type="epub">1553-7358</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7082070</article-id>
    <article-id pub-id-type="pmid">32150540</article-id>
    <article-id pub-id-type="publisher-id">PCOMPBIOL-D-19-00602</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pcbi.1007651</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Mathematics</subject>
          <subj-group>
            <subject>Calculus</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>DNA</subject>
            <subj-group>
              <subject>DNA replication</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Nucleic acids</subject>
            <subj-group>
              <subject>DNA</subject>
              <subj-group>
                <subject>DNA replication</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>DNA</subject>
            <subj-group>
              <subject>DNA damage</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Nucleic acids</subject>
            <subj-group>
              <subject>DNA</subject>
              <subj-group>
                <subject>DNA damage</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Proteins</subject>
            <subj-group>
              <subject>Post-Translational Modification</subject>
              <subj-group>
                <subject>Phosphorylation</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Immunology</subject>
          <subj-group>
            <subject>Immune System Proteins</subject>
            <subj-group>
              <subject>Immune Receptors</subject>
              <subj-group>
                <subject>T Cell Receptors</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Medicine and Health Sciences</subject>
        <subj-group>
          <subject>Immunology</subject>
          <subj-group>
            <subject>Immune System Proteins</subject>
            <subj-group>
              <subject>Immune Receptors</subject>
              <subj-group>
                <subject>T Cell Receptors</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Proteins</subject>
            <subj-group>
              <subject>Immune System Proteins</subject>
              <subj-group>
                <subject>Immune Receptors</subject>
                <subj-group>
                  <subject>T Cell Receptors</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Cell Biology</subject>
          <subj-group>
            <subject>Signal Transduction</subject>
            <subj-group>
              <subject>Immune Receptors</subject>
              <subj-group>
                <subject>T Cell Receptors</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Proteins</subject>
            <subj-group>
              <subject>T Cell Receptors</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Neuroscience</subject>
          <subj-group>
            <subject>Cognitive Science</subject>
            <subj-group>
              <subject>Cognitive Psychology</subject>
              <subj-group>
                <subject>Language</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Psychology</subject>
          <subj-group>
            <subject>Cognitive Psychology</subject>
            <subj-group>
              <subject>Language</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Social Sciences</subject>
        <subj-group>
          <subject>Psychology</subject>
          <subj-group>
            <subject>Cognitive Psychology</subject>
            <subj-group>
              <subject>Language</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Biochemical Simulations</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Computational Biology</subject>
          <subj-group>
            <subject>Biochemical Simulations</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Cell biology</subject>
          <subj-group>
            <subject>Chromosome biology</subject>
            <subj-group>
              <subject>Chromatin</subject>
              <subj-group>
                <subject>Chromatin modification</subject>
                <subj-group>
                  <subject>DNA methylation</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>Epigenetics</subject>
            <subj-group>
              <subject>Chromatin</subject>
              <subj-group>
                <subject>Chromatin modification</subject>
                <subj-group>
                  <subject>DNA methylation</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>Gene expression</subject>
            <subj-group>
              <subject>Chromatin</subject>
              <subj-group>
                <subject>Chromatin modification</subject>
                <subj-group>
                  <subject>DNA methylation</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>DNA</subject>
            <subj-group>
              <subject>DNA modification</subject>
              <subj-group>
                <subject>DNA methylation</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Biochemistry</subject>
          <subj-group>
            <subject>Nucleic acids</subject>
            <subj-group>
              <subject>DNA</subject>
              <subj-group>
                <subject>DNA modification</subject>
                <subj-group>
                  <subject>DNA methylation</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>Epigenetics</subject>
            <subj-group>
              <subject>DNA modification</subject>
              <subj-group>
                <subject>DNA methylation</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and life sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>Gene expression</subject>
            <subj-group>
              <subject>DNA modification</subject>
              <subj-group>
                <subject>DNA methylation</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>The Beacon Calculus: A formal method for the flexible and concise modelling of biological systems</article-title>
      <alt-title alt-title-type="running-head">The Beacon Calculus: A method for the flexible and concise modelling of biological systems</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-0326-8200</contrib-id>
        <name>
          <surname>Boemo</surname>
          <given-names>Michael A.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Project administration</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Visualization</role>
        <role content-type="http://credit.casrai.org/">Writing – original draft</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="cor001">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-8705-8488</contrib-id>
        <name>
          <surname>Cardelli</surname>
          <given-names>Luca</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2001-076X</contrib-id>
        <name>
          <surname>Nieduszynski</surname>
          <given-names>Conrad A.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Funding acquisition</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff003">
          <sup>3</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <label>1</label>
      <addr-line>Department of Pathology, University of Cambridge, Cambridge, United Kingdom</addr-line>
    </aff>
    <aff id="aff002">
      <label>2</label>
      <addr-line>Department of Computer Science, University of Oxford, Oxford, United Kingdom</addr-line>
    </aff>
    <aff id="aff003">
      <label>3</label>
      <addr-line>Genome Damage and Stability Centre, University of Sussex, Brighton, United Kingdom</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Marucci</surname>
          <given-names>Lucia</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>University of Bristol, UNITED KINGDOM</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p>The authors have declared that no competing interests exist.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>mb915@cam.ac.uk</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>9</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <volume>16</volume>
    <issue>3</issue>
    <elocation-id>e1007651</elocation-id>
    <history>
      <date date-type="received">
        <day>17</day>
        <month>4</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>1</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2020 Boemo et al</copyright-statement>
      <copyright-year>2020</copyright-year>
      <copyright-holder>Boemo et al</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pcbi.1007651.pdf"/>
    <abstract>
      <p>Biological systems are made up of components that change their actions (and interactions) over time and coordinate with other components nearby. Together with a large state space, the complexity of this behaviour can make it difficult to create concise mathematical models that can be easily extended or modified. This paper introduces the Beacon Calculus, a process algebra designed to simplify the task of modelling interacting biological components. Its breadth is demonstrated by creating models of DNA replication dynamics, the gene expression dynamics in response to DNA methylation damage, and a multisite phosphorylation switch. The flexibility of these models is shown by adapting the DNA replication model to further include two topics of interest from the literature: cooperative origin firing and replication fork barriers. The Beacon Calculus is supported with the open-source simulator bcs (<ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>) to allow users to develop and simulate their own models.</p>
    </abstract>
    <abstract abstract-type="summary">
      <title>Author summary</title>
      <p>Simulating a model of a biological system can suggest ideas for future experiments and help ensure that conclusions about a mechanism are consistent with data. The Beacon Calculus is a new language that makes modelling simple by allowing users to simulate a biological system in only a few lines of code. This simplicity is critical as it allows users the freedom to come up with new ideas and rapidly test them. Models written in the Beacon Calculus are also easy to modify and extend, allowing users to add new features to the model or incorporate it into a larger biological system. We demonstrate the breadth of applications in this paper by applying the Beacon Calculus to DNA replication and DNA damage repair, both of which have implications for genome stability and cancer. We also apply it to multisite phosphorylation, which is important for cellular signalling. To enable users to create their own models, we created the open-source Beacon Calculus simulator bcs (<ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>) which is easy to install and is well-supported by documentation and examples.</p>
    </abstract>
    <funding-group>
      <award-group id="award001">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100000268</institution-id>
            <institution>Biotechnology and Biological Sciences Research Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>BB/N016858/1</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2001-076X</contrib-id>
          <name>
            <surname>Nieduszynski</surname>
            <given-names>Conrad A.</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <award-group id="award002">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100004440</institution-id>
            <institution>Wellcome Trust</institution>
          </institution-wrap>
        </funding-source>
        <award-id>110064/Z/15/Z</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2001-076X</contrib-id>
          <name>
            <surname>Nieduszynski</surname>
            <given-names>Conrad A.</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <funding-statement>This work was supported by Biotechnology and Biological Sciences Research Council (<ext-link ext-link-type="uri" xlink:href="https://bbsrc.ukri.org/">https://bbsrc.ukri.org/</ext-link>) grant BB/N016858/1 and Wellcome Trust (<ext-link ext-link-type="uri" xlink:href="https://wellcome.ac.uk/">https://wellcome.ac.uk/</ext-link>) Investigator Award 110064/Z/15/Z to CAN. Additional funding and support is provided by the St. Cross College Emanoel Lee Junior Research Fellowship to MAB, as well as funds to MAB from the Department of Pathology, University of Cambridge. No funders had a role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="4"/>
      <table-count count="0"/>
      <page-count count="22"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>PLOS Publication Stage</meta-name>
        <meta-value>vor-update-to-uncorrected-proof</meta-value>
      </custom-meta>
      <custom-meta>
        <meta-name>Publication Update</meta-name>
        <meta-value>2020-03-19</meta-value>
      </custom-meta>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>All software described in this study is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>All software described in this study is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>.</p>
  </notes>
</front>
<body>
  <disp-quote>
    <p>This is a <italic>PLOS Computational Biology</italic> Methods paper.</p>
  </disp-quote>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>The ability to quickly create flexible and concise models of biological systems makes mathematical modelling more practical, enables rapid hypothesis testing, and increases the likelihood that modelling will be used to ensure that conclusions drawn from experiments are consistent with data. Process calculi (or process algebras) are valuable tools for assessing the performance, reliability, and behaviour of a system. Each component in a system is abstracted as a process that can perform actions. Communication actions allow processes to interact with one another to perform coordinated behaviours. The semantics of a process calculus sets rigorous rules that govern which actions that processes can perform, enabling formal reasoning about whether a system is ever capable of performing (or not performing) a certain sequence of actions. While process calculi have been historically developed to formally reason about programs and algorithms, they are applicable to any concurrent system (such as biological systems).</p>
    <p>There have been many process calculi developed in recent decades: The calculus of communicating systems (CCS) [<xref rid="pcbi.1007651.ref001" ref-type="bibr">1</xref>] and communicating sequential processes (CSP) [<xref rid="pcbi.1007651.ref002" ref-type="bibr">2</xref>] are early and foundational examples of process calculi where “reachability”, or whether a system can ever perform a certain set of actions, can be determined using the language’s structural operational semantics. Performance Evaluation Process Algebra (PEPA) assigned a rate to each action so that the system could be mapped onto a continuous time Markov chain (CTMC) [<xref rid="pcbi.1007651.ref003" ref-type="bibr">3</xref>, <xref rid="pcbi.1007651.ref004" ref-type="bibr">4</xref>]. Once expressed as a CTMC, the system can be simulated by generating random paths through the CTMC’s states. It also becomes possible to determine the probability that a behaviour occurs within a specified amount of time, and the system’s asymptotic behaviour can be determined using the CTMC’s stationary distribution [<xref rid="pcbi.1007651.ref005" ref-type="bibr">5</xref>]. Tools have been developed to map the PEPA language onto a CTMC and perform this analysis, including the PEPA workbench [<xref rid="pcbi.1007651.ref006" ref-type="bibr">6</xref>], the PEPA Eclipse plug-in [<xref rid="pcbi.1007651.ref007" ref-type="bibr">7</xref>], and a PEPA-to-PRISM compiler [<xref rid="pcbi.1007651.ref008" ref-type="bibr">8</xref>].</p>
    <p>PEPA has been expanded in a number of ways: Bio-PEPA [<xref rid="pcbi.1007651.ref009" ref-type="bibr">9</xref>] is an extension for the simulation and verification of biochemical networks and can be analysed via the accompanying Eclipse plugin or the Bio-PEPA workbench [<xref rid="pcbi.1007651.ref010" ref-type="bibr">10</xref>]. PEPAk is an extension of PEPA that includes process parameters and gated actions [<xref rid="pcbi.1007651.ref011" ref-type="bibr">11</xref>, <xref rid="pcbi.1007651.ref012" ref-type="bibr">12</xref>]. PEPA has also been used as an inscription language for stochastic Petri nets, providing a natural framework for modelling mobile systems [<xref rid="pcbi.1007651.ref013" ref-type="bibr">13</xref>].</p>
    <p>The <italic>π</italic>-calculus encodes models of concurrent processes using a notion of naming, whereby processes can use channels to communicate channel names to dynamically change which processes can communicate with one another [<xref rid="pcbi.1007651.ref014" ref-type="bibr">14</xref>]. The stochastic <italic>π</italic>-calculus is an extension of the <italic>π</italic>-calculus that has been used for performance modelling in a number of biological applications [<xref rid="pcbi.1007651.ref015" ref-type="bibr">15</xref>]. SPiM is a stochastic <italic>π</italic>-calculus simulator for large numbers of interacting biological molecules [<xref rid="pcbi.1007651.ref016" ref-type="bibr">16</xref>]. In addition, several studies have use the stochastic <italic>π</italic>-calculus to model regulatory networks in biology, for example [<xref rid="pcbi.1007651.ref017" ref-type="bibr">17</xref>–<xref rid="pcbi.1007651.ref020" ref-type="bibr">20</xref>].</p>
    <p>This paper introduces the Beacon Calculus, which makes it simple and concise to encode models of complex biological systems. It is a tool that builds upon the intuitive syntax of PEPA and mobility in the <italic>π</italic>-calculus to produce models that are shorter, simpler, and more flexible than they would be if they were encoded in either of these languages. The following section gives a description of the language by way of examples (a formal description of the language is given in <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>). To demonstrate breadth, results are presented for Beacon Calculus models of three different biological systems from the literature, each of which highlights one of the language’s main features: a model of DNA replication dynamics that fits replication timing data, a model of the gene expression response to DNA methylation damage in which the model qualitatively matches single-cell tracking experiments, and a stochastic version of an established deterministic multisite phosphorylation model from the literature.</p>
  </sec>
  <sec sec-type="results" id="sec002">
    <title>Results</title>
    <p>This section begins with an introduction to the Beacon Calculus by way of examples. Usage is demonstrated by gradually building upon a simple model of a bimolecular reaction <italic>A</italic> + <italic>B</italic> ↔ <italic>AB</italic>, leading to a complex yet concise model that uses many of the language’s features. (An additional introductory example describing kinesin stepping down a microtubule is provided in <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>). In addition to the Beacon Calculus itself, a contribution of this paper is bcs, an open-source Beacon Calculus simulator (<ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>). To make it clear how to translate theory to practice, all examples are given in bcs source code so that they can be simulated and experimented with. A more formal and precise specification of the language and its semantics is given in <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>. Following an outline of the language, the Beacon Calculus is then applied to three diverse areas of biological research: DNA replication, DNA damage response, and multisite phosphorylation.</p>
    <sec id="sec003">
      <title>Language overview</title>
      <p>Models are written in the Beacon Calculus by representing components in a system as processes that can perform actions. Processes can make an exclusive choice between multiple actions, execute multiple actions in parallel, and perform actions in a sequence. These three simple but powerful combinators are common amongst many process algebras and are used in CCS, PEPA, the <italic>π</italic>-calculus, and others [<xref rid="pcbi.1007651.ref021" ref-type="bibr">21</xref>]. The Beacon Calculus is a stochastic process calculus where each action is specified as an ordered pair together with the rate at which it is performed. The ordered pairs <monospace>{a,ra}</monospace> and <monospace>{b,rb}</monospace> specify rates for actions <monospace>a</monospace> and <monospace>b</monospace>, respectively. The following three examples of process definitions show how each combinator is used:</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>P = {a,ra}.{b,rb}</monospace> uses the unary prefix operator “<monospace>{a,ra}._</monospace>” to denote a sequence of actions whereby action <monospace>a</monospace> is performed at rate <monospace>ra</monospace> and, once it has finished, action <monospace>b</monospace> is performed at rate <monospace>rb</monospace>.</p>
        </list-item>
        <list-item>
          <p><monospace>P = {a,ra} + {b,rb}</monospace> uses the choice operator “+” to denote the exclusive choice between performing action <monospace>a</monospace> and rate <monospace>ra</monospace> and performing action <monospace>b</monospace> at rate <monospace>rb</monospace>. The probability of choosing action <monospace>a</monospace> is <inline-formula id="pcbi.1007651.e001"><alternatives><graphic xlink:href="pcbi.1007651.e001.jpg" id="pcbi.1007651.e001g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M1"><mml:mfrac><mml:mrow><mml:mi>r</mml:mi><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mo>+</mml:mo><mml:mi>r</mml:mi><mml:mi>b</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>, and the probability of choosing action <monospace>b</monospace> is <inline-formula id="pcbi.1007651.e002"><alternatives><graphic xlink:href="pcbi.1007651.e002.jpg" id="pcbi.1007651.e002g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M2"><mml:mfrac><mml:mrow><mml:mi>r</mml:mi><mml:mi>b</mml:mi></mml:mrow><mml:mrow><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mo>+</mml:mo><mml:mi>r</mml:mi><mml:mi>b</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>.</p>
        </list-item>
        <list-item>
          <p><monospace>P = {a,ra} || {b,rb}</monospace> uses the parallel operator “<monospace>||</monospace>” to denote that actions <monospace>a</monospace> and <monospace>b</monospace> are performed in parallel at their respective rates.</p>
        </list-item>
      </list>
      <p>Prefix binds stronger than choice, and choice binds stronger than parallel execution. For example, in the following process
<disp-formula id="pcbi.1007651.e003"><alternatives><graphic xlink:href="pcbi.1007651.e003.jpg" id="pcbi.1007651.e003g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M3"><mml:mrow><mml:mi mathvariant="monospace">P</mml:mi><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">a</mml:mi><mml:mo>,</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>ra</mml:mtext></mml:mstyle><mml:mo>}</mml:mo><mml:mo>|</mml:mo><mml:mo>|</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">b</mml:mi><mml:mo>,</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>rb</mml:mtext></mml:mstyle><mml:mo>}</mml:mo><mml:mo>.</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">c</mml:mi><mml:mo>,</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>rc</mml:mtext></mml:mstyle><mml:mo>}</mml:mo><mml:mo>+</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">d</mml:mi><mml:mo>,</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>rd</mml:mtext></mml:mstyle><mml:mo>}</mml:mo><mml:mo>.</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">e</mml:mi><mml:mo>,</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>re</mml:mtext></mml:mstyle><mml:mo>}</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
process <monospace>P</monospace> makes an exclusive choice between performing action <monospace>b</monospace> at rate <monospace>rb</monospace> and performing action <monospace>d</monospace> at rate <monospace>rd</monospace>. If <monospace>b</monospace> is chosen, <monospace>P</monospace> then performs action <monospace>c</monospace> at rate <monospace>rc</monospace> while if action <monospace>d</monospace> is chosen, <monospace>P</monospace> performs action <monospace>e</monospace> at rate <monospace>re</monospace>. All the while, <monospace>P</monospace> can perform action <monospace>a</monospace> at rate <monospace>ra</monospace> in parallel.</p>
      <p>A process can have a finite sequence of parameters which, in practice, is often used to encode the process’s location, a quantity, or a state (though there are many other uses as well). A process <monospace>P</monospace> with parameters <monospace>i1,i2,…,in</monospace> is denoted using the notation <monospace>P[i1,i2,…,in]</monospace>. Processes can change their parameters through recursion. This is often used when a process moves (if the parameter models a location), modifies how much of something it has (if the parameter models a quantity), or otherwise changes state in some way that should influence the process’s later behaviour. For example, the following model describes a process that successively increments <monospace>i</monospace> by one and doubles <monospace>j</monospace>:
<disp-formula id="pcbi.1007651.e006"><graphic xlink:href="pcbi.1007651.e006.jpg" id="pcbi.1007651.e006g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>In this model, process <monospace>A</monospace> has the two parameters <monospace>i</monospace> and <monospace>j</monospace>. The system begins with one copy of <monospace>A</monospace> with values <monospace>i=0</monospace> and <monospace>j=1</monospace> (Line 7). Each time <monospace>A</monospace> performs the action <monospace>changeParameters</monospace> at rate <monospace>r</monospace>, the value of <monospace>i</monospace> is increased by one and the value of <monospace>j</monospace> is doubled.</p>
      <p>If this model were run in bcs, <monospace>A</monospace> would continue changing the values of <monospace>i</monospace> and <monospace>j</monospace> until it hit the maximum number of transitions allowed by the software. To create effective models, it is often necessary to specify that a process should only perform an action if the parameter values meet a certain condition. A process can change its behaviour according to its parameter values by using a gate, which is a condition that must be satisfied for a process to perform an action. Gated actions are written using the notation
<disp-formula id="pcbi.1007651.e004"><alternatives><graphic xlink:href="pcbi.1007651.e004.jpg" id="pcbi.1007651.e004g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M4"><mml:mrow><mml:mo>[</mml:mo><mml:mo>&lt;</mml:mo><mml:mstyle mathvariant="monospace"><mml:mtext>condition</mml:mtext></mml:mstyle><mml:mo>&gt;</mml:mo><mml:mo>]</mml:mo><mml:mo>-</mml:mo><mml:mo>&gt;</mml:mo><mml:mo>{</mml:mo><mml:mi mathvariant="monospace">a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="monospace">r</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
where action <monospace>a</monospace> can only be performed if the condition is true. The Beacon Calculus simulator supports the following operators in the expression for the gate condition:</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>&lt;=</monospace>, less than or equal to,</p>
        </list-item>
        <list-item>
          <p><monospace>&lt;</monospace>, less than,</p>
        </list-item>
        <list-item>
          <p><monospace>&gt;=</monospace>, greater than or equal to,</p>
        </list-item>
        <list-item>
          <p><monospace>&gt;</monospace>, greater than,</p>
        </list-item>
        <list-item>
          <p><monospace>==</monospace>, equal to,</p>
        </list-item>
        <list-item>
          <p><monospace>!=</monospace>, not equal to,</p>
        </list-item>
        <list-item>
          <p><monospace>&amp;</monospace>, logical and,</p>
        </list-item>
        <list-item>
          <p><monospace>|</monospace>, logical or,</p>
        </list-item>
        <list-item>
          <p><monospace>~</monospace>, logical not.</p>
        </list-item>
      </list>
      <p>For example, suppose <monospace>A</monospace> should continue while <monospace>i&lt;5</monospace> and <monospace>j&lt;10</monospace>. This can be expressed as follows:
<disp-formula id="pcbi.1007651.e007"><graphic xlink:href="pcbi.1007651.e007.jpg" id="pcbi.1007651.e007g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>Once the condition specified in the gate no longer holds, <monospace>A</monospace> can no longer perform the action <monospace>changeParameters</monospace>. When a process can no longer perform any actions, it is said to be deadlocked and is removed from the system. If all processes in the system are deadlocked, the simulation stops. In this case, the simulation will stop when <monospace>A</monospace> has parameter values <monospace>i=4</monospace> and <monospace>j=16</monospace>.</p>
      <p>In order for the Beacon Calculus to be useful for biological applications, a process must be able to react in some way to the actions of other processes; they must be able to communicate with one another via special actions. Handshakes are a common type of synchronous communication in many process algebras whereby two separate processes each perform an action at the same time. In the Beacon Calculus, two processes handshake when the following two actions are performed together:</p>
      <list list-type="bullet">
        <list-item>
          <p>A handshake send is written <monospace>{@c![i],rs}</monospace>; it denotes a handshake that is offered on channel <monospace>c</monospace> that transmits parameter <monospace>i</monospace>.</p>
        </list-item>
        <list-item>
          <p>A handshake receive is written <monospace>{@c?[Ω](x),rr}</monospace>; it denotes a handshake that can be received on channel <monospace>c</monospace> so long as the parameter from the sending handshake is a member of the set <monospace>Ω</monospace>. The particular parameter received is bound to the variable <monospace>x</monospace> and can be used subsequently by the process.</p>
        </list-item>
      </list>
      <p>A handshake always occurs between exactly two processes at a rate equal to the product of the handshake receive rate and the handshake send rate. A handshake send and a handshake receive must always be performed together. If a process is ready to send a handshake but there is no other process that can receive the handshake, then the first process must wait until another process is ready to perform the handshake receive. There is no crosstalk between channels, meaning two processes cannot handshake by performing actions <monospace>{@c|[i],rs}</monospace> and <monospace>{@d?[Ω](x),rr}</monospace> because the channel names do not match. The following example shows how two reactants <monospace>A</monospace> and <monospace>B</monospace> undergo one-dimensional diffusion where they can react via a handshake when they are in the same position:
<disp-formula id="pcbi.1007651.e008"><graphic xlink:href="pcbi.1007651.e008.jpg" id="pcbi.1007651.e008g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>This model has two reactants, <monospace>A</monospace> and <monospace>B</monospace>, undergoing one-dimensional diffusion. <monospace>A</monospace> starts at position <monospace>i=5</monospace> and <monospace>B</monospace> starts at <monospace>i=-5</monospace> (Line 12). Both processes make a choice between stepping left at rate <monospace>r</monospace> or stepping right at rate <monospace>r</monospace> (Line 5,7). The rates are equal so the diffusion is unbiased, but biased diffusion could be introduced by making the rate for one direction higher than the other. When both <monospace>A</monospace> and <monospace>B</monospace> are at the same position, their parameters match and a handshake is possible over channel <monospace>react</monospace> at rate <monospace>rr*1=rr</monospace> (Lines 6,8). The probability of the handshake is <inline-formula id="pcbi.1007651.e005"><alternatives><graphic xlink:href="pcbi.1007651.e005.jpg" id="pcbi.1007651.e005g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M5"><mml:mfrac><mml:mrow><mml:mi>r</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn><mml:mo>·</mml:mo><mml:mi>r</mml:mi><mml:mo>+</mml:mo><mml:mi>r</mml:mi><mml:mi>r</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>. If the handshake is chosen, <monospace>A</monospace> and <monospace>B</monospace> react to form <monospace>AB</monospace> (Line 8). Once formed, <monospace>AB</monospace> unbinds to reform <monospace>A</monospace> and <monospace>B</monospace> at rate <monospace>r</monospace> (Line 9).</p>
      <p>In the previous model, some of the code is redundant: processes <monospace>A</monospace> and <monospace>B</monospace> behave similarly, yet the <monospace>moveLeft</monospace> and <monospace>moveRight</monospace> actions are typed out in each case. The code can be made more concise by using parameters so that there is a reactant process <monospace>R</monospace> at position given by parameter <monospace>x</monospace> with an identity encoded by parameter <monospace>i</monospace>. Process <monospace>A</monospace> becomes reactant <monospace>R</monospace> with <monospace>i=0</monospace> and <monospace>B</monospace> becomes reactant <monospace>R</monospace> with <monospace>i=1</monospace>. This can be expressed as follows, which is equivalent to the previous model:
<disp-formula id="pcbi.1007651.e009"><graphic xlink:href="pcbi.1007651.e009.jpg" id="pcbi.1007651.e009g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>Here, the reactant <monospace>R</monospace> undergoes one-dimensional diffusion (Line 5). If it has parameter <monospace>i=0</monospace> (Line 6) then it can react with a reactant that has parameter <monospace>i=1</monospace> to form <monospace>AB</monospace> (Line 7).</p>
      <p>While the handshake receive in the previous example could only receive a single value, handshake receives can accept a set of possible values. A set is specified in the Beacon Calculus simulator using the following operations. Examples are written for each to show the set (right) encoded by each Beacon Calculus expression (left). Note that set subtraction binds more strongly than set intersection, which in turn binds more strongly than set union.</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>..</monospace>, range,
<list list-type="bullet"><list-item><p><monospace>0..3</monospace> ≡ {0, 1, 2, 3}</p></list-item><list-item><p><monospace>-1..2</monospace> ≡ {−1, 0, 1, 2}</p></list-item></list></p>
        </list-item>
        <list-item>
          <p><monospace>U</monospace>, set union,
<list list-type="bullet"><list-item><p><monospace>0..3 U 6..7</monospace> ≡ {0, 1, 2, 3, 6, 7}</p></list-item><list-item><p><monospace>-1 U 0..3</monospace> ≡ {−1, 0, 1, 2, 3}</p></list-item></list></p>
        </list-item>
        <list-item>
          <p><monospace>I</monospace>, set intersection,
<list list-type="bullet"><list-item><p><monospace>0..10 I 8..15</monospace> ≡ {8, 9, 10}</p></list-item><list-item><p><monospace>0..2 U 8..15 I 4..9</monospace> ≡ {0, 1, 2, 8, 9}</p></list-item></list></p>
        </list-item>
        <list-item>
          <p><monospace>\</monospace>, set subtraction.
<list list-type="bullet"><list-item><p><monospace>0..5\3</monospace> ≡ {0, 1, 2, 4, 5}</p></list-item><list-item><p><monospace>0..5\8</monospace> ≡ {0, 1, 2, 3, 4, 5}</p></list-item></list></p>
        </list-item>
      </list>
      <p>If a handshake receive can accept multiple values, the receiving process can bind the value it receives to a variable for later use. The process may, for instance, use this value in a rate expression or as a parameter. The binding variable can be used in the rate expression to indicate how different values can be received at different rates; it can bias which value in the set is received. For example, suppose it is more likely that two kinesin motors impede each other as they get closer to one another. The two definitions for kinesin below, <monospace>B1</monospace> and <monospace>B2</monospace>, are equivalent.
<disp-formula id="pcbi.1007651.e010"><graphic xlink:href="pcbi.1007651.e010.jpg" id="pcbi.1007651.e010g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>While handshakes allow two processes to perform a coordinated action simultaneously, beacons provide the means for asynchronous communication. In practice, beacons can be used to communicate the state change of a process globally to all other processes in the system. Using beacons, a process can efficiently indicate to a number of other processes that a task has been accomplished (shown in the following example) or keep track of tasks that have been done over time (shown in the DNA replication example to follow). A process can launch a beacon on a channel that transmits a parameter; the beacon stays active until it is explicitly killed by a process. While active, the beacon can be received any number of times by any process (including the process that launched it). Processes can also check whether a particular beacon is active and only carry on if there is no active beacon with a given channel and parameter.</p>
      <list list-type="bullet">
        <list-item>
          <p>A beacon launch is written <monospace>{c![i], rs}</monospace>; it denotes a beacon that is launched on channel <monospace>c</monospace> that transmits parameter <monospace>i</monospace>.</p>
        </list-item>
        <list-item>
          <p>A beacon kill is written <monospace>{c#[i], rs}</monospace>; it denotes an action that kills a beacon on channel <monospace>c</monospace> transmitting parameter <monospace>i</monospace> if one exists. If one does not exist, the action is still performed but the set of active beacons does not change. Once a beacon is killed, it can no longer be received unless it is re-launched by a process.</p>
        </list-item>
        <list-item>
          <p>A beacon receive is written <monospace>{c?[Ω](x), rs}</monospace>; it denotes an action that can only be performed if there is an active beacon on channel <monospace>c</monospace> transmitting a parameter <monospace>i</monospace> in <monospace>Ω</monospace>. The parameter received is bound to <monospace>x</monospace> and can be used subsequently in the process.</p>
        </list-item>
        <list-item>
          <p>A beacon check is written <monospace>{~c?[Ω], rs}</monospace>; it denotes an action that can only be performed if there is no active beacon on channel <monospace>c</monospace> transmitting a parameter in <monospace>Ω</monospace>.</p>
        </list-item>
      </list>
      <p>In the following example, a “clock” process <monospace>C</monospace> changes between two states, 1 and 2, at rate <monospace>rs</monospace>. When the process changes state, it launches a beacon on channel <monospace>state</monospace> with the value corresponding to the new state (Line 10). The unbinding rate of <monospace>AB</monospace> depends on the value of the parameter transmitted by the beacon: process <monospace>AB</monospace> uses the range operator to receive a value of either 1 or 2 on channel <monospace>state</monospace> and binds that value to <monospace>s</monospace> (Line 11). The value of <monospace>s</monospace> is used in the rate of the beacon receive so that if <monospace>C</monospace> is in state 1, <monospace>AB</monospace> dissociates at rate <monospace>r*1</monospace>. Likewise, <monospace>AB</monospace> dissociates at rate <monospace>r*2</monospace> if <monospace>C</monospace> is in state 2. This allows <monospace>C</monospace> to autonomously change its state and, in doing so, easily affect the behaviour of other processes.
<disp-formula id="pcbi.1007651.e011"><graphic xlink:href="pcbi.1007651.e011.jpg" id="pcbi.1007651.e011g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>Thus far, these examples have used strings as handshake or beacon channel names which transmitted a single parameter value. These names can also be comma-separated lists, where each entry is an expression of parameters and/or global variables. This allows a process to dynamically change the channel name, and therefore the other processes it can interact with. Likewise, rather than transmitting a single value and receiving a set of values, handshakes and beacons can transmit a comma-separated list of values and receive a comma-separated list of sets. To illustrate with a two-process model where the only possible action is a handshake:
<disp-formula id="pcbi.1007651.e012"><graphic xlink:href="pcbi.1007651.e012.jpg" id="pcbi.1007651.e012g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>Processes <monospace>P</monospace> and <monospace>Q</monospace> will handshake over the channel name <monospace>3,4</monospace> because <monospace>P</monospace> transmits the values <monospace>2,9</monospace> such that <monospace>2</monospace> lies within the range <monospace>i-1..i+1</monospace> (where <monospace>i=1</monospace>) and <monospace>9</monospace> is equal to <monospace>j+8</monospace> (where <monospace>j=1</monospace>). Process <monospace>Q</monospace> will then bind the value <monospace>2</monospace> to variable <monospace>a</monospace> and the value <monospace>9</monospace> to variable <monospace>b</monospace>. However, if the handshake send by process <monospace>P</monospace> were changed to <monospace>{@x+2,y/2![x,y+1], 1}</monospace> or <monospace>{@x+1![x,y+1], 1}</monospace>, the handshake no longer takes place as the channel names do not match. Likewise, <monospace>{@x+1,y/2![x,y+1,x], 1}</monospace> would also not result in a handshake as the comma-separated list of parameters must be of the same length between the handshake send and handshake receive.</p>
      <p>The ability to use comma-separated lists of values and expressions for handshakes and beacons is particularly important for models where multiple dimensions are considered. The following example returns to the bimolecular reaction <italic>A</italic>+ <italic>B</italic> ↔ <italic>AB</italic>:
<disp-formula id="pcbi.1007651.e013"><graphic xlink:href="pcbi.1007651.e013.jpg" id="pcbi.1007651.e013g" mimetype="image" position="anchor" orientation="portrait"/></disp-formula></p>
      <p>In this model, a reactant <monospace>R</monospace> has x- and y-coordinates defined by its parameters <monospace>x</monospace> and <monospace>y</monospace>, as well as a number of times it was modified <monospace>m</monospace>. There is a process <monospace>M</monospace> with parameter <monospace>i</monospace> that will remove a modification from <monospace>R</monospace> if <monospace>i=0</monospace> and add a modification to <monospace>R</monospace> if <monospace>i=1</monospace> (Line 13). A reactant <monospace>R</monospace> can diffuse (Lines 7-8), and it can be modified or unmodified via a handshake with <monospace>M</monospace> which increments or decrements the value of its parameter <monospace>m</monospace> (Lines 9-10). The value of <monospace>m</monospace> is used as a channel name to transmit the x- and y-values of <monospace>R</monospace> so that only reactants that are nearby and have the same number of modifications can react to create <monospace>AB</monospace> (Lines 11-12).</p>
      <p>The models in this subsection were necessarily arteficial to introduce the Beacon Calculus by way of simple examples, but the following three subsections show the Beacon Calculus applied to three different areas of biological research: DNA replication, DNA damage response, and multisite phosphorylation ultrasensitivity. These diverse examples demonstrate the breadth of applications for the Beacon Calculus and each example showcases a key feature. In the DNA replication model, replication forks use beacons to efficiently coordinate which parts of the chromosome have and have not been replicated. The DNA damage model uses parameters to keep count of damage and repair proteins, showing how to model a population of cells that grows and changes over time. The multisite phosphorylation model shows how receiving a set of possible values in a handshake receive can reduce the number of process definitions required in a model.</p>
    </sec>
    <sec id="sec004">
      <title>DNA replication</title>
      <p>The mechanisms underlying DNA replication are detailed in a recent review [<xref rid="pcbi.1007651.ref022" ref-type="bibr">22</xref>] and are briefly summarised here to provide the necessary background for the model. In budding yeast (<italic>S. cerevisiae</italic>), DNA replication initiates during S-phase of the cell cycle from discrete sites on the chromosome known as origins of replication. To maintain genomic integrity, the genome must be fully replicated exactly once per cell cycle. The regulatory mechanism responsible for maintaining this integrity uses an origin recognition complex that binds to the origin and recruits additional proteins to form a pre-replicative complex (pre-RC) in late M-phase and G1-phase when cyclin-dependent kinase (CDK) levels in the cell are low. By the the end of G1, CDK levels have risen (and remain high for the remainder of the cell cycle) so that no new origins can assemble a pre-RC. Those origins that have assembled a pre-RC by S-phase are said to be licensed. The chromosome is replicated when these licensed origins “fire” during S-phase to create bidirectional replication forks that travel along the chromosome in opposite directions from the origin. Forks terminate when they meet a fork travelling in the opposite direction or reach the end of a chromosome.</p>
      <p>A random subset (but typically not all) of a chromosome’s origins initiate replication in S-phase and multiple forks can be active at the same time (<xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1a</xref>). The probability with which origins are licensed is not uniform; some origins are more likely to assemble a pre-RC than others. In addition, of those origins that are licensed, some fire characteristically early in S-phase while others tend to fire late. Therefore, DNA replication is a stochastic process: the set of active origins and the origins responsible for replicating each position on the chromosome will differ from cell-to-cell. Despite this heterogeneity, DNA replication is a remarkably reliable process where errors such as replication fork collapse are rare.</p>
      <fig id="pcbi.1007651.g001" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1007651.g001</object-id>
        <label>Fig 1</label>
        <caption>
          <title>Replication timing from Beacon Calculus simulations.</title>
          <p><bold>(a)</bold> Diagram of ongoing DNA replication in the same chromosome segment of three different cells. Replication can begin from four discrete locations (origins of replication). Each cell successfully replicates its DNA despite having different patterns of origin activation. <bold>(b)</bold> DNA replication model written in the Beacon Calculus. <bold>(c)</bold> Curves showing the mean time at which each position on <italic>S. cerevisiae</italic> chromosome II was replicated, taken from the Beacon Calculus model where each origin has a licensing probability and firing time from [<xref rid="pcbi.1007651.ref024" ref-type="bibr">24</xref>] (blue), the Beacon Calculus model where all origins are licensed and have the same firing rate of 0.015 (red), and experimental data from [<xref rid="pcbi.1007651.ref025" ref-type="bibr">25</xref>] (grey). The Beacon Calculus results are averaged over 500 simulations and shaded regions show the standard error of the mean. The system line has been truncated for clarity (see <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>).</p>
        </caption>
        <graphic xlink:href="pcbi.1007651.g001"/>
      </fig>
      <p>The stochastic nature of DNA replication makes it well-suited to modelling with the Beacon Calculus: the difference in behaviour between simulations mirrors the heterogeneity between replicating cells, and communication via beacons enables origins and forks to keep track of which chromosomal positions have been replicated. DNA replication is simulated using the Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref>. The model is comprised of three process definitions: rightward-moving forks <monospace>FR</monospace>, leftward-moving forks <monospace>FL</monospace>, and origins of replication <monospace>ORI</monospace>. The chromosome is of length <monospace>L</monospace>, and each of these three processes have a single parameter <monospace>i</monospace> which is taken to be a position on the chromosome between 1 and <monospace>L</monospace>. Origins have two additional parameters: a licensing probability <monospace>q</monospace> and a firing rate <monospace>fire</monospace>. The processes keep track of which chromosomal positions have already been replicated by using beacons: When a fork replicates position <monospace>i</monospace>, it launches a beacon on channel <monospace>chr</monospace> with parameter <monospace>i</monospace>.</p>
      <p>The behaviour of an <monospace>ORI</monospace> process is encoded on Line 6 of <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref>. An origin is licensed or not licensed, which is modelled by the choice between the actions <monospace>licensed</monospace> and <monospace>nlicensed</monospace>. If the origin is not licensed, the origin can perform no further actions; it is said to be deadlocked. If the origin is licensed, it fires by performing a beacon check action on channel <monospace>chr</monospace> at its position <monospace>i</monospace> to ensure that it only fires if that chromosomal position has not yet been replicated by another fork. Once the origin fires, the <monospace>ORI</monospace> process continues on as two parallel processes: a rightward-moving fork (<monospace>FR</monospace>, Line 8) and a leftward-moving fork (<monospace>FL</monospace>, Line 9). The forks first launch a beacon on channel <monospace>chr</monospace> with their position to indicate to all other forks and origins that the position has been replicated. After launching the beacon, forks use a gate to ensure they have not yet reached the end of the chromosome. If they have not, the forks verify that the position ahead has not yet been replicated by performing a beacon check on that position. If there is no active beacon at that location, the position has not yet been replicated and the fork moves forward by increasing (for <monospace>FR</monospace>) or decreasing (for <monospace>FL</monospace>) the position parameter <monospace>i</monospace>. Like all processes in the Beacon Calculus, fork movement is stochastic, but forks will tend to the same average velocity over long timescales. Replication has finished when all processes have deadlocked. The initial processes in the system (Line 12) are all <monospace>ORI</monospace> processes with positions corresponding to 34 known origin locations on <italic>S. cerevisiae</italic> chromosome II [<xref rid="pcbi.1007651.ref023" ref-type="bibr">23</xref>]. As shown in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1c</xref>, when the initial processes in the system are set to be origins with the positions, licensing probabilities, and firing rates from the literature [<xref rid="pcbi.1007651.ref024" ref-type="bibr">24</xref>], simulations of the Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> give good agreement (<italic>R</italic><sup>2</sup> = 0.76) with established replication timing profiles [<xref rid="pcbi.1007651.ref025" ref-type="bibr">25</xref>].</p>
      <p>The simplicity of the DNA replication model in the Beacon Calculus makes it quick and simple to test biological hypotheses. For example, the licensing probability, affinity for firing factors, and the spatial distribution of origins across the chromosome will all have an effect on the replication timing profile; the model can be easily modified to investigate the effect of the spatial distribution of origins alone. The red curve in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1c</xref> shows the timing profile for a modified version of the model where all origins are licensed and the firing rate of all origins is set to the same value. While the timing profile does not match the data as well (<italic>R</italic><sup>2</sup> = 0.49), the main features of the replication profile are still captured. This suggests that the primary factor influencing the replication timing profile is the spatial distribution of origins, and that an origin’s affinity for licensing and firing factors play a more minor role. As will be shown subsequently, making other minor modifications to the the Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> allows for modelling cooperative origin firing and replication fork progression through fork barriers. More broadly, this modelling strategy is applicable to coordinated movement by biological components within a reference frame.</p>
    </sec>
    <sec id="sec005">
      <title>Cellular response to DNA damage</title>
      <p>To show how the Beacon Calculus can be used to model systems at the population level, this section models the <italic>E. coli</italic> DNA methylation damage system studied in [<xref rid="pcbi.1007651.ref026" ref-type="bibr">26</xref>]. The effective identification and repair of DNA damage is essential to genome integrity. Unrepaired methylation damage is particularly cytotoxic and mutagenic [<xref rid="pcbi.1007651.ref027" ref-type="bibr">27</xref>]. In <italic>E. coli</italic>, DNA methylation damage is repaired by the Ada methyltransferase protein: Ada repairs the damage by transferring a methyl group from <italic>O</italic><sup>6</sup>-Methylguanine or <italic>O</italic><sup>4</sup>-Methylthymidine to itself [<xref rid="pcbi.1007651.ref028" ref-type="bibr">28</xref>]. The resulting methylated Ada (meAda) significantly upregulates transcription of the <italic>ada</italic> gene, creating a positive feedback loop that increases Ada levels. This leads to a spike in Ada level following DNA repair which is reduced back to basal levels over generations by successive cell divisions (<xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2a</xref>).</p>
      <fig id="pcbi.1007651.g002" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1007651.g002</object-id>
        <label>Fig 2</label>
        <caption>
          <title>DNA damage from Beacon Calculus simulations.</title>
          <p><bold>(a)</bold> Cells undergo DNA damage (red) and may carry it forward for generations before an Ada molecule (blue) is generated to repair it. Ada is methylated (gold) as it repairs DNA damage creating a positive feedback loop whereby methylated Ada upregulates transcription of the <italic>ada</italic> gene. Ada levels are reduced through successive cell divisions. <bold>(b)</bold> DNA damage model written in the Beacon Calculus. <bold>(c-d)</bold> Average total Ada and meAda per cell over time. Each trace corresponds to a simulation of a growing population of cells for <bold>(c)</bold> low DNA damage (<italic>k</italic><sub><italic>dmg</italic></sub> = 0.0001) and <bold>(d)</bold> high DNA damage (<italic>k</italic><sub><italic>dmg</italic></sub> = 0.01). In each of panels <bold>(c-d)</bold>, 25 simulations are shown. Values for <monospace>k_basal</monospace> and <monospace>k_division</monospace> are from [<xref rid="pcbi.1007651.ref026" ref-type="bibr">26</xref>] while <monospace>k_me</monospace> is from [<xref rid="pcbi.1007651.ref030" ref-type="bibr">30</xref>]. Values for <monospace>k_dmg</monospace> and <monospace>kMax</monospace> were approximated based on the results in [<xref rid="pcbi.1007651.ref031" ref-type="bibr">31</xref>].</p>
        </caption>
        <graphic xlink:href="pcbi.1007651.g002"/>
      </fig>
      <p>A cell keeps Ada levels low in order to perform a delicate balancing act: Excessive Ada levels are thought to be cytotoxic [<xref rid="pcbi.1007651.ref029" ref-type="bibr">29</xref>], but the cell must still produce enough Ada to repair DNA methylation damage in a timely fashion. This is accomplished by expressing the <italic>ada</italic> gene at very low levels such that on average only one Ada protein is produced per generation [<xref rid="pcbi.1007651.ref026" ref-type="bibr">26</xref>]. Such a low rate of production means that due to stochasticity, DNA damage may go unrepaired for one or more generations before an Ada protein is produced to repair it (<xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2a</xref>).</p>
      <p>A stochastic model can provide insight into this repair system by showing the Ada response in rare but important situations where DNA methylation damage has gone unrepaired for several generations (see, for example, the complementary model in [<xref rid="pcbi.1007651.ref030" ref-type="bibr">30</xref>]). By varying the DNA damage rate, a model can also predict how the repair system responds to both high and low rates of DNA methylation damage. The Beacon Calculus makes modelling this system straightforward by representing an <italic>E. coli</italic> cell as a process that can repair DNA damage and divide into two daughter cells (<xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2b</xref>). The cell process keeps track of DNA damage and Ada levels using parameters and the value of these parameters can scale the rate at which the process performs certain actions.</p>
      <p>The process <monospace>CELL</monospace> is defined on Line 9 of the Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2b</xref>. <monospace>CELL</monospace> has parameters that keep track of three quantities: the number of Ada molecules (<monospace>A</monospace>), the number of methylated Ada molecules (<monospace>mA</monospace>), and the number of sites where DNA has been damaged (<monospace>d</monospace>). The cell can generate an Ada molecule with action <monospace>generate_Ada</monospace> (Line 9). The parameter <monospace>mA</monospace> is used in the rate calculation of this action so that Ada is generated at a basal rate if <monospace>mA=0</monospace>, but the rate scales to saturation with the value of <monospace>mA</monospace> to reflect the upgregulation of the <italic>ada</italic> gene by meAda. If the cell has DNA damage and at least one Ada molecule to repair it, <monospace>CELL</monospace> can fix the damage by first performing action <monospace>generate_meAda</monospace> and then converting Ada to meAda (Line 10). Damage repair requires interaction between Ada and a methylated base, so the rate of this action scales with the value of <monospace>d</monospace> and <monospace>A</monospace>. The cell’s DNA is damaged at a static rate (Line 11) which increments parameter <monospace>d</monospace>.</p>
      <p>The cell can divide at the mean rate of replication for <italic>E. coli</italic> cells (Line 12). When cell division begins, the <monospace>CELL</monospace> process carries on as a new process <monospace>DIV</monospace> for a dividing cell. The <monospace>DIV</monospace> process (Line 14) encodes how Ada, methylated Ada, and damage are segregated between two daughter cells. In addition to the original three parameters of the dividing cell, this process has four additional parameters: the amount of Ada and meAda that segregates to one daughter cell (<monospace>A1</monospace> and <monospace>M1</monospace>, respectively) and the amount of Ada and meAda that segregates to the second daughter cell (<monospace>A2</monospace> and <monospace>M2</monospace>). These new parameters each start at zero (Line 12). For each Ada and methylated Ada molecule in the parent cell (Lines 14 and 16, respectively) a random choice is made as to which daughter cell inherits the protein. When a choice has been made for each molecule of Ada and meAda, the <monospace>DIV</monospace> process starts two new daughter <monospace>CELL</monospace> processes (Lines 18-19).</p>
      <p>The initial condition for each simulation is a single cell with no Ada and no DNA methylation damage (Line 22). As the cell divides, the system is comprised of an exponentially growing population of the initial cell’s descendents. Computing the average Ada per cell for this exponentially growing colony shows that the amount of Ada stays near the basal average amount of 1.25 molecules per cell when the rate of DNA damage is low (<xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2c</xref>, highest spike at 5 Ada molecules per cell). Some colonies exhibited sharp spikes in Ada levels caused by DNA damage that had gone unrepaired for several generations. However, this happened infrequently and the elevated Ada levels tended back towards zero as the Ada was diluted by successive cell divisions. When the rate of DNA damage was high, the spikes in Ada level were higher in magnitude (<xref ref-type="fig" rid="pcbi.1007651.g002">Fig 2d</xref>, highest spike at 350 Ada molecules per cell). In addition, Ada levels stayed elevated over time and did not tend back towards zero. These observations are qualitatively consistent with the results from [<xref rid="pcbi.1007651.ref026" ref-type="bibr">26</xref>] of Ada levels in individual <italic>E. coli</italic> cells under both high and low DNA damage conditions.</p>
      <p>Communication between processes in the Beacon Calculus means that the model can be easily extended to incorporate cell-to-cell interactions or cell-to-environment interactions using handshakes and beacons. More generally, the Beacon Calculus makes it simple to model a growing and changing population. While this example focused on how a population of cells responds to DNA damage, a similar approach can be taken to model more diverse applications such as the spread of disease through a population.</p>
    </sec>
    <sec id="sec006">
      <title>Multisite phosphorylation</title>
      <p>Cellular signalling relies on post-translational modifications and, in many instances, substrates are modified on multiple sites. This is thought to confer specific information processing functions such as switch-like responses [<xref rid="pcbi.1007651.ref031" ref-type="bibr">31</xref>–<xref rid="pcbi.1007651.ref033" ref-type="bibr">33</xref>] (see [<xref rid="pcbi.1007651.ref034" ref-type="bibr">34</xref>] for a review). One example is the reversible phosphorylation of membrane-anchored receptors or adaptors by extrinsic kinases and phosphatases, which applies to a large class of receptors known as non-catalytic tyrosine-phosphorylated receptors (NTRs) of which the T-cell antigen receptor (TCR) is a member [<xref rid="pcbi.1007651.ref035" ref-type="bibr">35</xref>]. NTRs are known to have multiple phosphorylation sites (20 in the case of TCRs) and are phosphorylated and dephosphorylated by kinases and phosphatases that are also confined to the plasma membrane. Given that these receptors often control cellular responses, their phosphorylation is tightly regulated and consequently, will be highly sensitive to the relative concentration or activity of their regulating kinases and phosphatases. This leads to so-called ultrasensitivity, where an input signal produces very little output signal as long as the input remains below a certain threshold, but causes a high output signal once the threshold is exceeded. This results in a sigmoidal input-output curve, typically with a very steep inflection. Ultrasensitivity represents an important way in which biomolecular processes remain robust to noise.</p>
      <p>The Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g003">Fig 3</xref> is similar to, and inspired by, the model by Dushek <italic>et al.</italic> who modelled the phosphorylation of TCRs when they were phosphorylated by kinase Lck and dephosphorylated by phosphatase CD45 [<xref rid="pcbi.1007651.ref036" ref-type="bibr">36</xref>]. The model shown here corroborates the authors’ findings: In order to achieve ultrasensitivity, an enzyme must dwell for a short period after modifying the phosphorylation of a receptor.</p>
      <fig id="pcbi.1007651.g003" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1007651.g003</object-id>
        <label>Fig 3</label>
        <caption>
          <title>T-cell antigen receptor ultrasensitivity from Beacon Calculus simulations.</title>
          <p><bold>(a)</bold> An enzyme enters the proximity of a receptor, binds to the receptor, and phosphorylates the receptor if the enzyme is a kinase or dephosphorylates the receptor if the enzyme is a phosphatase. <bold>(b)</bold> T-cell antigen receptor model written in the Beacon Calculus with parameters taken from [<xref rid="pcbi.1007651.ref036" ref-type="bibr">36</xref>]. <bold>(c)</bold> The fraction of phosphorylated receptors is ultrasensitive to the relative concentration of kinase and phosphatase when the enzyme dwells after modifying a receptor (green) but loses ultrasensitivity if the dwell is removed (blue). Points (shown with standard deviation) are the average of 50 simulations taken after the system reaches a steady state.</p>
        </caption>
        <graphic xlink:href="pcbi.1007651.g003"/>
      </fig>
      <p>Each TCR can be phosphorylated 20 times. When an enzyme enters the proximity of a receptor, it can either bind to the receptor or leave (<xref ref-type="fig" rid="pcbi.1007651.g003">Fig 3a</xref>). The enzyme can phosphorylate the receptor if it is a kinase or dephosphorylate the receptor if it is a phosphatase. Once the enzyme phosphorylates or dephosphorylates the receptor, there is a period of inactivity (or a dwell) before the enzyme can bind to the receptor again. The number of phosphorylation sites, together with the action of two types of enzyme, leads to a high number of distinct species in the system; this can make a differential equation model cumbersome to write down and integrate. The Beacon Calculus makes modelling this system straightforward by representing enzymes and receptors as processes, whereby receptor processes keep track of their phosphorylation and the type of enzyme bound to them using parameters.</p>
      <p>A model in the Beacon Calculus for TCR phosphorylation is shown in <xref ref-type="fig" rid="pcbi.1007651.g003">Fig 3b</xref>. Each <monospace>ENZYME</monospace> process (Line 13) has parameter <monospace>e</monospace>, whereby the enzyme is a phosphatase if <monospace>e=1</monospace> or else it is a kinase if <monospace>e=0</monospace>. A receptor process <monospace>R</monospace> (Line 14) has parameter <monospace>p</monospace> which keeps track of the number of times the receptor has been phosphorylated. An enzyme enters the proximity of a receptor via a handshake on channel <monospace>proximalEnzyme</monospace>, whereby the enzyme transmits its parameter <monospace>e</monospace> to the receptor to indicate whether it is a kinase or a phosphatase. After the handshake, the enzyme deadlocks while the receptor carries on as a new process <monospace>R_PROX</monospace> (Line 15) that encodes the behaviour of a receptor with an enzyme in close proximity. The reverse reaction can occur if <monospace>R_PROX</monospace> performs action <monospace>enzLeave</monospace> (Line 15) where <monospace>R_PROX</monospace> then carries on as <monospace>R</monospace> and <monospace>ENZYME</monospace> in parallel. If the enzyme is a kinase and the receptor is not fully phosphorylated, the enzyme can bind at a rate proportional to how many sites on the receptor are unphosphorylated (Line 16). If the enzyme is a phosphatase, the enzyme binds at a rate proportional to how many sites on the receptor are phosphorylated (Line 17). When <monospace>R_PROX</monospace> binds an enzyme, it carries on as process <monospace>R_BOUND</monospace>. In this new process, the enzyme can either unbind (Line 21), phosphorylate the receptor if the bound enzyme is a kinase (Line 22), or dephosphorylate the receptor if the bound enzyme is a phosphatase (Line 23). If the enzyme phosphorylates or dephosphorylates the receptor, the bound receptor <monospace>R_BOUND</monospace> carries on as process <monospace>R_CAT</monospace> in which the enzyme is proximal to the receptor but briefly inert. The enzyme can either leave (Line 18) or rebind once the inert period is over (Line 19-20).</p>
      <p>The above model is similar to that of [<xref rid="pcbi.1007651.ref036" ref-type="bibr">36</xref>], and the results agree with the authors’ findings (<xref ref-type="fig" rid="pcbi.1007651.g003">Fig 3c</xref>). When the enzyme dwells after modifying the phosphorylation of a receptor, the fraction of receptors that are phosphorylated is ultrasensitive with respect to the relative concentration of kinase and phosphatase; it displays switch-like behaviour. If the dwell is removed and all other parameter values are kept constant, the ultrasensitivity is lost. While the Beacon Calculus is able to reproduce an established model in only a few lines of code, the language also makes it simple to expand upon the model. For example, the model in <xref ref-type="fig" rid="pcbi.1007651.g003">Fig 3b</xref> can be extended to model groups of receptors on different areas of the membrane. A group of receptors can use beacons to signal a state change in that group which can cause other groups located elsewhere to respond.</p>
    </sec>
    <sec id="sec007">
      <title>Extensions to the DNA replication model</title>
      <p>To demonstrate the flexibility of models written in the Beacon Calculus, the DNA replication model from <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1</xref> is extended to include two topics of interest from the field: cooperative origin firing and the effect of a replication fork barrier.</p>
      <p>It has been hypothesised that the probability of a replication origin firing increases if a nearby origin fires [<xref rid="pcbi.1007651.ref037" ref-type="bibr">37</xref>]. This may be due to stoichiometrically limiting firing factors which are more likely to interact with an origin if they have already interacted with another origin nearby. The Beacon Calculus model in <xref ref-type="fig" rid="pcbi.1007651.g004">Fig 4a</xref> extends the DNA replication model so that when an origin fires, it launches a beacon on channel <monospace>coop</monospace> transmitting its location to induce firing of nearby origins. If an origin has not yet fired, it can fire at rate <monospace>fire</monospace> which is taken to be the origin’s base affinity for firing factors (Line 7). The modified model includes an additional pathway to firing where an origin can receive a beacon on channel <monospace>coop</monospace> that is transmitting a parameter within 50 kb of the origin’s location (Line 8). The rate at which this beacon is received is inversely proportional to the distance between the origin and the transmitted parameter. If the beacon is received, the origin fires, launches its own beacon on channel <monospace>coop</monospace> transmitting its position to other origins, and starts two replication forks from its position. Therefore, origin firing is either due to the origin’s natural affinity for firing factors or due to another origin firing nearby (if there is one).</p>
      <fig id="pcbi.1007651.g004" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1007651.g004</object-id>
        <label>Fig 4</label>
        <caption>
          <title>Extensions to the DNA replication model.</title>
          <p>The DNA replication model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> is modified to include either <bold>(a)</bold> cooperative origin firing or <bold>(b)</bold> fork progression through a replication fork barrier. All changes to the model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> are highlighted in blue. <bold>(c)</bold> Results from <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> compared with the simulated models from <bold>(a)</bold> and <bold>(b)</bold> where each curve is the average over 500 simulations. Shading shows the standard error of the mean. The system line has been truncated for clarity (see <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>). The stall rate <monospace>sr</monospace> was chosen to be on average ten times slower than it takes a fork to move 1 kb.</p>
        </caption>
        <graphic xlink:href="pcbi.1007651.g004"/>
      </fig>
      <p>When proteins bind tightly to DNA, they may act as a replication fork barrier (RFB) that can stall replication forks moving in a particular direction. One role of RFBs is preventing collisions between replication and transcription machinery [<xref rid="pcbi.1007651.ref038" ref-type="bibr">38</xref>]. This is incorporated into the Beacon Calculus model as shown in 5b. First, the location of the fork barrier is specified on the chromosome (Line 5) along with the rate of the stall (Line 6). If a rightward moving fork makes it to this position, it stalls (Line 12) before it ultimately recovers and continues stepping.</p>
      <p>Simulations of the models shown in <xref ref-type="fig" rid="pcbi.1007651.g004">Fig 4a and 4b</xref> are shown in <xref ref-type="fig" rid="pcbi.1007651.g004">Fig 4c</xref>. The replication fork barrier causes a sharp change to the timing profile near the location of the replication fork barrier at chromosomal coordinate <monospace>i=200</monospace> while the cooperative firing behaviour makes the whole chromosome replicate slightly earlier. However, the additional parameters added in these two models were not fit to data; these two extensions are only intended to demonstrate the ease with which Beacon Calculus models can be extended. With further parametrisation, however, these extensions can be useful in making meaningful biological predictions about DNA replication systems.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec008">
    <title>Discussion</title>
    <p>Process calculi are a natural framework in which to model biological systems, but they are an underutilised tool within systems biology; to the authors’ knowledge, process calculi have never before been applied to DNA replication, DNA methylation damage, or receptor ultrasensitivity. The Beacon Calculus makes it quick and easy to create models of systems where processes can change both their actions and interactions over time. Beacons make it simple for a process to influence the actions of all other processes in the system. This paper has shown how this paradigm is used to model both the complex behaviour of cells and macromolecular structures in only a few lines of code.</p>
    <p>A language that makes it simple and concise to encode biological models has advantages beyond saving time: it changes the way the tool is used. Simplicity increases confidence that the user has actually encoded what they think they have encoded and have not introduced bugs into the model. It also leads to models that are easy to change, modify, and extend. This flexibility encourages experimentation where hypotheses can be rapidly tested, and any conclusions drawn from laboratory experiments investigated, to ensure that they are consistent with the biological data.</p>
    <p>The features in the Beacon Calculus are all geared toward models that are quick to encode and easy to modify. As shown above, the DNA replication model in <xref ref-type="fig" rid="pcbi.1007651.g001">Fig 1b</xref> can be modified to include features of interest from the literature such as cooperative origin firing and a replication fork barrier that stalls replication forks at a particular chromosomal coordinate. The flexibility of the Beacon Calculus means that these changes are straightforward to incorporate and come at the expense of only one or two lines of code.</p>
    <p>While this paper has shown that the Beacon Calculus can easily produce flexible and concise models of biological systems from the current literature, it is not appropriate for every task. <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref> compares the Beacon Calculus with the stochastic <italic>π</italic>-calculus [<xref rid="pcbi.1007651.ref015" ref-type="bibr">15</xref>, <xref rid="pcbi.1007651.ref016" ref-type="bibr">16</xref>, <xref rid="pcbi.1007651.ref018" ref-type="bibr">18</xref>], Kappa [<xref rid="pcbi.1007651.ref039" ref-type="bibr">39</xref>–<xref rid="pcbi.1007651.ref041" ref-type="bibr">41</xref>], Bio-PEPA [<xref rid="pcbi.1007651.ref009" ref-type="bibr">9</xref>], BioNetGen [<xref rid="pcbi.1007651.ref042" ref-type="bibr">42</xref>, <xref rid="pcbi.1007651.ref043" ref-type="bibr">43</xref>], PySB [<xref rid="pcbi.1007651.ref044" ref-type="bibr">44</xref>], ML-Rules [<xref rid="pcbi.1007651.ref045" ref-type="bibr">45</xref>, <xref rid="pcbi.1007651.ref046" ref-type="bibr">46</xref>], and Simmune [<xref rid="pcbi.1007651.ref047" ref-type="bibr">47</xref>, <xref rid="pcbi.1007651.ref048" ref-type="bibr">48</xref>]. For each of these tools, examples are described where they may be more appropriate than the Beaocn Calculus. In general, rule-based languages may be the better choice for applications where the complex, combinatorial assembly of biomolecules is important. This is particularly important for applications involving large protein-protein interaction networks and modification of species by ligands. In addition, while it is possible to create species within a compartment with Beacon Calculus parameters, tools such as Bio-PEPA, ML-Rules, and Simmune deal with this much more naturally. The Beacon Calculus finds its niche in applications where system components must be able to easily coordinate with each other or with a global reference frame (such as in the DNA replication model) or adapt behaviour in response to complex and changing environmental conditions (such as a cell responding to DNA damage or multisite phosphorylation).</p>
    <p>There are many applications throughout biology where the Beacon Calculus can be an ideal tool for modelling and simulation. This paper illustrated three examples from cell biology and molecular biology, but modelling at the population level is possible as well. A stochastic version of the SIR model for a population’s response to an infectious disease would be straightforward: each individual is a process, whether they are susceptible, infected, or recovered from an infection is kept track of with a parameter, a response to nearby individuals could be modelled using the ability of handshake receives to accept a range of parameters, and beacons could be used to signal some state change within a city or area as the disease evolves. There are a wide range of applications within biology, and while the Beacon Calculus was developed for biological applications, there is nothing biology-specific in the language; it can be used for applications in engineering and other fields.</p>
    <p>One of the biggest challenges in creating a simulation tool is ensuring the user is simulating what they think they are simulating; if the user has made an error encoding the model, this can lead to incorrect conclusions being drawn about the underlying biology. An advantage of process algebras is that the language’s semantics, together with automated theorem proving techniques, can be used to prove whether a certain combination of actions is ever possible in the model. In the DNA replication model, for example, a user may wish to verify that replication forks cannot step through each other in the model that they have encoded. If this action is possible, then there is an error in the model and the simulation results will not accurately reflect the biological reality. A planned extension of the bcs tool is allowing the user to specify certain actions or properties that should not be allowed in the model. The tool will check these properties before beginning the simulations to ensure that they are not possible, giving the user greater confidence in the validity of the result.</p>
    <p>The Beacon Calculus is a language that makes it fast and easy to encode concise, flexible models of biological systems. It is particularly well-suited for systems where interactions between components change over time, where components need to change the state of many other components, or where components need to respond to events happening within a certain region. Its breadth is demonstrated by creating models of DNA replication and DNA damage repair from the literature, as well as creating a stochastic version of an established deterministic multisite phosphorylation model. To support the language, a contribution of this work is an open-source simulator called bcs which, together with the provided examples, makes it easy for users to create and simulate their own models.</p>
  </sec>
  <sec sec-type="materials|methods" id="sec009">
    <title>Materials and methods</title>
    <p>An open-source Beacon Calculus simulator (bcs) is provided to simulate models written in the Beacon Calculus (<ext-link ext-link-type="uri" xlink:href="https://github.com/MBoemo/bcs.git">https://github.com/MBoemo/bcs.git</ext-link>). The software uses a modified Gillespie algorithm to simulate paths through the model [<xref rid="pcbi.1007651.ref049" ref-type="bibr">49</xref>]. For each simulation, the software outputs a table of actions sorted in order of ascending time. Each row specifies a time, the action performed at that time, and the process that performed the action (as well as its parameter values at the time when the action was performed). While there is basic plotting capability included with the software, the output was designed to be easy to parse so that it can be reformatted into plots that are appropriate for the biological system being modelled. For the results in this paper, the Beacon Calculus output has been reformatted into plots that are common in the examples’ respective fields. To make it clear how to use the bcs software to simulate biological models, all of the examples in this paper are written in bcs source code. Benchmarks for the run time of simulations are specified in <xref ref-type="supplementary-material" rid="pcbi.1007651.s001">S1 Text</xref>.</p>
  </sec>
  <sec sec-type="supplementary-material" id="sec010">
    <title>Supporting information</title>
    <supplementary-material content-type="local-data" id="pcbi.1007651.s001">
      <label>S1 Text</label>
      <caption>
        <title>Supporting information.</title>
        <p>A formal definition of the Beacon Calculus language, comparisons with other methods, additional information about the DNA replication model, bcs benchmarks, and additional examples.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pcbi.1007651.s001.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>The authors are grateful to Omer Dushek (Sir William Dunn School of Pathology, University of Oxford) and Stephan Uphoff (Department of Biochemistry, University of Oxford) for helpful discussions and guidance on the multisite phosphorylation and DNA damage examples, respectively.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="pcbi.1007651.ref001">
      <label>1</label>
      <mixed-citation publication-type="book"><name><surname>Milner</surname><given-names>R</given-names></name>. <source>A Calculus of Communicating Systems</source>. <publisher-name>Springer-Verlag</publisher-name>; <year>1980</year>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref002">
      <label>2</label>
      <mixed-citation publication-type="book"><name><surname>Hoare</surname><given-names>C.A.R</given-names></name>. <source>Communicating Sequential Processes</source>. <publisher-name>Prentice Hall</publisher-name>; <year>1985</year>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref003">
      <label>3</label>
      <mixed-citation publication-type="book"><name><surname>Hillston</surname><given-names>J</given-names></name>. <source>A Compositional Approach to Performance Modelling</source>. <publisher-name>University of Edinburgh</publisher-name>; <year>1994</year>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref004">
      <label>4</label>
      <mixed-citation publication-type="book"><name><surname>Hillston</surname><given-names>J</given-names></name>. <chapter-title>Compositional Markovian Modelling Using a Process Algebra</chapter-title> In: <name><surname>Stewart</surname><given-names>WJ</given-names></name>, editor. <source>Computations with Markov Chains</source>. <publisher-loc>Boston, MA</publisher-loc>: <publisher-name>Springer US</publisher-name>; <year>1995</year> p. <fpage>177</fpage>–<lpage>196</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref005">
      <label>5</label>
      <mixed-citation publication-type="book"><name><surname>Kwiatkowska</surname><given-names>M</given-names></name>., <name><surname>Norman</surname><given-names>G.</given-names></name>, <name><surname>Parker</surname><given-names>D</given-names></name>. In: <name><surname>Bernardo</surname><given-names>M</given-names></name>, <name><surname>Hillston</surname><given-names>J</given-names></name>, editors. <source>Stochastic Model Checking</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2007</year> p. <fpage>220</fpage>–<lpage>270</lpage>. Available from: <pub-id pub-id-type="doi">10.1007/978-3-540-72522-0_6</pub-id>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref006">
      <label>6</label>
      <mixed-citation publication-type="book"><name><surname>Gilmore</surname><given-names>S</given-names></name>., <name><surname>Hillston</surname><given-names>J</given-names></name>. <chapter-title>The PEPA workbench: A tool to support a process algebra-based approach to performance modelling</chapter-title> In: <name><surname>Haring</surname><given-names>G</given-names></name>, <name><surname>Kotsis</surname><given-names>G</given-names></name>, editors. <source>Computer Performance Evaluation Modelling Techniques and Tools</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>1994</year> p. <fpage>353</fpage>–<lpage>368</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref007">
      <label>7</label>
      <mixed-citation publication-type="journal"><name><surname>Tribastone</surname><given-names>M</given-names></name>., <name><surname>Duguid</surname><given-names>A</given-names></name>., <name><surname>Gilmore</surname><given-names>S</given-names></name>. <article-title>The PEPA Eclipse Plugin</article-title>. <source>SIGMETRICS Perform Eval Rev</source>. <year>2009</year>;<volume>36</volume>(<issue>4</issue>):<fpage>28</fpage>–<lpage>33</lpage>. <pub-id pub-id-type="doi">10.1145/1530873.1530880</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref008">
      <label>8</label>
      <mixed-citation publication-type="other">Gilmore S. PEPA-to-PRISM Compiler. <ext-link ext-link-type="uri" xlink:href="http://www.prismmodelchecker.org/other-downloads.php">http://www.prismmodelchecker.org/other-downloads.php</ext-link>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref009">
      <label>9</label>
      <mixed-citation publication-type="journal"><name><surname>Ciocchetta</surname><given-names>F</given-names></name>., <name><surname>Hillston</surname><given-names>J</given-names></name>. <article-title>Bio-PEPA: A framework for the modelling and analysis of biological systems</article-title>. <source>Theoretical Computer Science</source>. <year>2009</year>;<volume>410</volume>(<issue>33</issue>):<fpage>3065</fpage>–<lpage>3084</lpage>. <pub-id pub-id-type="doi">10.1016/j.tcs.2009.02.037</pub-id>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref010">
      <label>10</label>
      <mixed-citation publication-type="other"><ext-link ext-link-type="uri" xlink:href="http://homepages.inf.ed.ac.uk/jeh/Bio-PEPA/Tools.html">http://homepages.inf.ed.ac.uk/jeh/Bio-PEPA/Tools.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref011">
      <label>11</label>
      <mixed-citation publication-type="book"><name><surname>Clark</surname><given-names>G</given-names></name>., <name><surname>Sanders</surname><given-names>W.H</given-names></name>. <chapter-title>Implementing a Stochastic Process Algebra within the Möbius Modeling Framework</chapter-title> In: <name><surname>de Alfaro</surname><given-names>L</given-names></name>, <name><surname>Gilmore</surname><given-names>S</given-names></name>, editors. <source>Process Algebra and Probabilistic Methods. Performance Modelling and Verification</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2001</year> p. <fpage>200</fpage>–<lpage>215</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref012">
      <label>12</label>
      <mixed-citation publication-type="other">Clark G., Courtney T., Daly D., Deavours D., Derisavi S., Doyle J.M., Sanders W.H., Webster P. The Möbius modeling tool. In: Proceedings 9th International Workshop on Petri Nets and Performance Models; 2001. p. 241–250.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref013">
      <label>13</label>
      <mixed-citation publication-type="book"><name><surname>Gilmore</surname><given-names>S</given-names></name>., <name><surname>Hillston</surname><given-names>J</given-names></name>., <name><surname>Kloul</surname><given-names>L</given-names></name>. <chapter-title>PEPA Nets</chapter-title> In: <name><surname>Calzarossa</surname><given-names>MC</given-names></name>, <name><surname>Gelenbe</surname><given-names>E</given-names></name>, editors. <source>Performance Tools and Applications to Networked Systems</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2004</year> p. <fpage>311</fpage>–<lpage>335</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref014">
      <label>14</label>
      <mixed-citation publication-type="journal"><name><surname>Milner</surname><given-names>R</given-names></name>., <name><surname>Parrow</surname><given-names>J</given-names></name>., <name><surname>Walker</surname><given-names>D</given-names></name>. <article-title>A Calculus of Mobile Processes</article-title>. <source>Information and Computation</source>. <year>1992</year>;<volume>100</volume>:<fpage>1</fpage>–<lpage>40</lpage>. <pub-id pub-id-type="doi">10.1016/0890-5401(92)90009-5</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref015">
      <label>15</label>
      <mixed-citation publication-type="journal"><name><surname>Priami</surname><given-names>C</given-names></name>. <article-title>Stochastic <italic>π</italic>-Calculus</article-title>. <source>The Computer Journal</source>. <year>1995</year>;<volume>38</volume>:<fpage>578</fpage>–<lpage>589</lpage>. <pub-id pub-id-type="doi">10.1093/comjnl/38.7.578</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref016">
      <label>16</label>
      <mixed-citation publication-type="book"><name><surname>Phillips</surname><given-names>A</given-names></name>., <name><surname>Cardelli</surname><given-names>L</given-names></name>. <chapter-title>Efficient, Correct Simulation of Biological Processes in the Stochastic Pi-calculus</chapter-title> In: <name><surname>Calder</surname><given-names>M</given-names></name>, <name><surname>Gilmore</surname><given-names>S</given-names></name>, editors. <source>Computational Methods in Systems Biology</source>. <publisher-name>Springer</publisher-name>; <year>2007</year> p. <fpage>184</fpage>–<lpage>199</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref017">
      <label>17</label>
      <mixed-citation publication-type="book"><name><surname>Kuttler</surname><given-names>C</given-names></name>., <name><surname>Niehren</surname><given-names>J</given-names></name>. <chapter-title>Gene Regulation in the Pi-Calculus: Simulating Cooperativity at the Lambda Switch</chapter-title> In: <name><surname>Priami</surname><given-names>C</given-names></name>, <name><surname>Ingólfsdóttir</surname><given-names>A</given-names></name>, <name><surname>Mishra</surname><given-names>B</given-names></name>, <name><surname>Riis Nielson</surname><given-names>H</given-names></name>, editors. <source>Transactions on Computational Systems Biology VII</source>. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>2006</year> p. <fpage>24</fpage>–<lpage>55</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref018">
      <label>18</label>
      <mixed-citation publication-type="journal"><name><surname>Priami</surname><given-names>C</given-names></name>., <name><surname>Regev</surname><given-names>A</given-names></name>., <name><surname>Shapiro</surname><given-names>E</given-names></name>., <name><surname>Silverman</surname><given-names>W</given-names></name>. <article-title>Application of a stochastic name-passing calculus to representation and simulation of molecular processes</article-title>. <source>Information Processing Letters</source>. <year>2001</year>;<volume>80</volume>(<issue>1</issue>):<fpage>25</fpage>–<lpage>31</lpage>. <pub-id pub-id-type="doi">10.1016/S0020-0190(01)00214-9</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref019">
      <label>19</label>
      <mixed-citation publication-type="book"><name><surname>Blossey</surname><given-names>R</given-names></name>., <name><surname>Cardelli</surname><given-names>L</given-names></name>., <name><surname>Phillips</surname><given-names>A</given-names></name>. <chapter-title>A Compositional Approach to the Stochastic Dynamics of Gene Networks</chapter-title> In: <name><surname>Priami</surname><given-names>C</given-names></name>, <name><surname>Cardelli</surname><given-names>L</given-names></name>, <name><surname>Emmott</surname><given-names>S</given-names></name>, editors. <source>Transactions on Computational Systems Biology IV</source>. <publisher-name>Springer</publisher-name>
<publisher-loc>Berlin Heidelberg</publisher-loc>; <year>2006</year> p. <fpage>99</fpage>–<lpage>122</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref020">
      <label>20</label>
      <mixed-citation publication-type="other">Regev A., Wilverman W., Shapiro E. In: Representation and simulation of biochemical processes using the <italic>π</italic>-calculus process algebra; 2000. p. 459–470.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref021">
      <label>21</label>
      <mixed-citation publication-type="book"><name><surname>Baeten</surname><given-names>J.C.M</given-names></name>., <name><surname>Basten</surname><given-names>T</given-names></name>., <name><surname>Reniers</surname><given-names>M.A</given-names></name>. <source>Process Algebra: Equational Theories of Communicating Processes</source>. <edition>1st ed</edition><publisher-loc>New York, NY, USA</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>; <year>2009</year>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref022">
      <label>22</label>
      <mixed-citation publication-type="journal"><name><surname>Fragkos</surname><given-names>M</given-names></name>., <name><surname>Ganier</surname><given-names>O</given-names></name>., <name><surname>Coulombe</surname><given-names>P</given-names></name>., <name><surname>Méchali</surname><given-names>M</given-names></name>. <article-title>DNA replication origin activation in space and time</article-title>. <source>Nature Reviews Molecular Cell Biology</source>. <year>2015</year>;<volume>16</volume>:<fpage>360</fpage>–<lpage>374</lpage>. <pub-id pub-id-type="doi">10.1038/nrm4002</pub-id><?supplied-pmid 25999062?><pub-id pub-id-type="pmid">25999062</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref023">
      <label>23</label>
      <mixed-citation publication-type="journal"><name><surname>Siow</surname><given-names>C.C</given-names></name>., <name><surname>Nieduszynska</surname><given-names>S.R</given-names></name>., <name><surname>Müller</surname><given-names>C.A</given-names></name>., <name><surname>Nieduszynski</surname><given-names>C.A</given-names></name>. <article-title>OriDB, the DNA replication origin database updated and extended</article-title>. <source>Nucleic Acids Research</source>. <year>2011</year>;<volume>40</volume>:<fpage>D682</fpage>–<lpage>D686</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkr1091</pub-id><?supplied-pmid 22121216?><pub-id pub-id-type="pmid">22121216</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref024">
      <label>24</label>
      <mixed-citation publication-type="journal"><name><surname>de Moura</surname><given-names>A.P.S</given-names></name>., <name><surname>Retkute</surname><given-names>R</given-names></name>., <name><surname>Hawkins</surname><given-names>M</given-names></name>., <name><surname>Nieduszynski</surname><given-names>C.A</given-names></name>. <article-title>Mathematical modelling of whole chromosome replication</article-title>. <source>Nucleic Acids Research</source>. <year>2010</year>;<volume>38</volume>(<issue>17</issue>):<fpage>5623</fpage>–<lpage>5633</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkq343</pub-id><?supplied-pmid 20457753?><pub-id pub-id-type="pmid">20457753</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref025">
      <label>25</label>
      <mixed-citation publication-type="journal"><name><surname>Müller</surname><given-names>C.A</given-names></name>., <name><surname>Hawkins</surname><given-names>M</given-names></name>., <name><surname>Retkute</surname><given-names>R</given-names></name>., <name><surname>Malla</surname><given-names>S</given-names></name>., <name><surname>Wilson</surname><given-names>R</given-names></name>., <name><surname>Blythe</surname><given-names>M.J</given-names></name>., <name><surname>Nakato</surname><given-names>R</given-names></name>., <name><surname>Komata</surname><given-names>M</given-names></name>., <name><surname>Shirahige</surname><given-names>K</given-names></name>., <name><surname>de Moura</surname><given-names>A.P</given-names></name>., <name><surname>Nieduszynski</surname><given-names>C.A</given-names></name>. <article-title>The dynamics of genome replication using deep sequencing</article-title>. <source>Nucleic Acids Research</source>. <year>2014</year>;<volume>42</volume>:<fpage>e3</fpage><pub-id pub-id-type="doi">10.1093/nar/gkt878</pub-id><?supplied-pmid 24089142?><pub-id pub-id-type="pmid">24089142</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref026">
      <label>26</label>
      <mixed-citation publication-type="journal"><name><surname>Uphoff</surname><given-names>S</given-names></name>., <name><surname>Lord</surname><given-names>N.D</given-names></name>., <name><surname>Okumus</surname><given-names>B</given-names></name>., <name><surname>Potvin-Trottier</surname><given-names>L</given-names></name>., <name><surname>Sherratt</surname><given-names>D.J</given-names></name>., <name><surname>Paulsson</surname><given-names>J</given-names></name>. <article-title>Stochastic activation of a DNA damage response causes cell-to-cell mutation rate variation</article-title>. <source>Science</source>. <year>2016</year>;<volume>351</volume>:<fpage>1094</fpage>–<lpage>1097</lpage>. <pub-id pub-id-type="doi">10.1126/science.aac9786</pub-id><?supplied-pmid 26941321?><pub-id pub-id-type="pmid">26941321</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref027">
      <label>27</label>
      <mixed-citation publication-type="journal"><name><surname>Bignami</surname><given-names>M</given-names></name>., <name><surname>O’Driscoll</surname><given-names>M</given-names></name>., <name><surname>Aquilina</surname><given-names>G</given-names></name>., <name><surname>Karran</surname><given-names>P</given-names></name>. <article-title>Unmasking a killer: DNA O<sup>6</sup>-methylguanine and the cytotoxicity of methylating agents</article-title>. <source>Mutation Research/Reviews in Mutation Research</source>. <year>2000</year>;<volume>462</volume>:<fpage>71</fpage>–<lpage>82</lpage>. <pub-id pub-id-type="doi">10.1016/S1383-5742(00)00016-8</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref028">
      <label>28</label>
      <mixed-citation publication-type="journal"><name><surname>Sedgwick</surname><given-names>B</given-names></name>., <name><surname>Lindahl</surname><given-names>T</given-names></name>. <article-title>Recent progress on the Ada response for inducible repair of DNA alkylation damage</article-title>. <source>Oncogene</source>. <year>2002</year>;<volume>21</volume>:<fpage>8886</fpage>–<lpage>8894</lpage>. <pub-id pub-id-type="doi">10.1038/sj.onc.1205998</pub-id><?supplied-pmid 12483506?><pub-id pub-id-type="pmid">12483506</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref029">
      <label>29</label>
      <mixed-citation publication-type="journal"><name><surname>Fu</surname><given-names>D</given-names></name>., <name><surname>Calvo</surname><given-names>J.A</given-names></name>., <name><surname>Samson</surname><given-names>L.D</given-names></name>. <article-title>Balancing repair and tolerance of DNA damage caused by alkylating agents</article-title>. <source>Nature Reviews Cancer</source>. <year>2012</year>;<volume>12</volume>:<fpage>104</fpage>–<lpage>120</lpage>. <pub-id pub-id-type="doi">10.1038/nrc3185</pub-id><?supplied-pmid 22237395?><pub-id pub-id-type="pmid">22237395</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref030">
      <label>30</label>
      <mixed-citation publication-type="journal"><name><surname>Uphoff</surname><given-names>S</given-names></name>. <article-title>A quantitative model explains single-cell dynamics of the adaptive response in Escherichia coli</article-title>. <source>Biophysical Journal</source>. <year>2019</year>;<volume>117</volume>:<fpage>1156</fpage>–<lpage>1165</lpage>. <pub-id pub-id-type="doi">10.1016/j.bpj.2019.08.009</pub-id><?supplied-pmid 31466698?><pub-id pub-id-type="pmid">31466698</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref031">
      <label>31</label>
      <mixed-citation publication-type="journal"><name><surname>Thomson</surname><given-names>M</given-names></name>., <name><surname>Gunawardena</surname><given-names>J</given-names></name>. <article-title>Unlimited multistability in multisite phosphorylation systems</article-title>. <source>Nature</source>. <year>2009</year>;<volume>460</volume>:<fpage>274</fpage>–<lpage>277</lpage>. <pub-id pub-id-type="doi">10.1038/nature08102</pub-id><?supplied-pmid 19536158?><pub-id pub-id-type="pmid">19536158</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref032">
      <label>32</label>
      <mixed-citation publication-type="journal"><name><surname>Gunawardena</surname><given-names>J</given-names></name>. <article-title>Multisite protein phosphorylation makes a good threshold but can be a poor switch</article-title>. <source>PNAS</source>. <year>2005</year>;<volume>102</volume>:<fpage>14617</fpage>–<lpage>14622</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.0507322102</pub-id><?supplied-pmid 16195377?><pub-id pub-id-type="pmid">16195377</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref033">
      <label>33</label>
      <mixed-citation publication-type="journal"><name><surname>Ferrell</surname><given-names>J.E</given-names></name>., <name><surname>Ha</surname><given-names>S.H</given-names><suffix>Jr</suffix></name>. <article-title>Ultrasensitivity part II: multisite phosphorylation, stoichiometric inhibitors, and positive feedback</article-title>. <source>Trends in Biochemical Sciences</source>. <year>2014</year>;<volume>39</volume>:<fpage>556</fpage>–<lpage>569</lpage>. <pub-id pub-id-type="doi">10.1016/j.tibs.2014.09.003</pub-id><?supplied-pmid 25440716?><pub-id pub-id-type="pmid">25440716</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref034">
      <label>34</label>
      <mixed-citation publication-type="journal"><name><surname>Salazar</surname><given-names>C</given-names></name>., <name><surname>Höfer</surname><given-names>T</given-names></name>. <article-title>Multisite protein phosphorylation—from molecular mechanisms to kinetic models</article-title>. <source>The FEBS Journal</source>. <year>2009</year>;<volume>276</volume>:<fpage>3177</fpage>–<lpage>3198</lpage>. <pub-id pub-id-type="doi">10.1111/j.1742-4658.2009.07027.x</pub-id><?supplied-pmid 19438722?><pub-id pub-id-type="pmid">19438722</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref035">
      <label>35</label>
      <mixed-citation publication-type="journal"><name><surname>Dushek</surname><given-names>O</given-names></name>., <name><surname>Goyette</surname><given-names>J</given-names></name>., <name><surname>van der Merwe</surname><given-names>A</given-names></name>. <article-title>Non-catalytic tyrosine-phosphorylated receptors</article-title>. <source>Immunological Reviews</source>. <year>2012</year>;<volume>250</volume>:<fpage>258</fpage>–<lpage>276</lpage>. <pub-id pub-id-type="doi">10.1111/imr.12008</pub-id><?supplied-pmid 23046135?><pub-id pub-id-type="pmid">23046135</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref036">
      <label>36</label>
      <mixed-citation publication-type="journal"><name><surname>Dushek</surname><given-names>O</given-names></name>., <name><surname>van der Merwe</surname><given-names>P.A</given-names></name>., <name><surname>Shahrezaei</surname><given-names>V</given-names></name>. <article-title>Ultrasensitivity in multisite phosphorylation of membrane-anchored proteins</article-title>. <source>Biophysical Journal</source>. <year>2011</year>;<volume>100</volume>:<fpage>1189</fpage>–<lpage>1197</lpage>. <pub-id pub-id-type="doi">10.1016/j.bpj.2011.01.060</pub-id><?supplied-pmid 21354391?><pub-id pub-id-type="pmid">21354391</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref037">
      <label>37</label>
      <mixed-citation publication-type="journal"><name><surname>Patel</surname><given-names>P.K</given-names></name>., <name><surname>Arcangioli</surname><given-names>B</given-names></name>., <name><surname>Baker</surname><given-names>S.P</given-names></name>., <name><surname>Bensimon</surname><given-names>A</given-names></name>., <name><surname>Rhind</surname><given-names>N</given-names></name>. <article-title>DNA replication origins fire stochastically in fission yeast</article-title>. <source>Molecular Biology of the Cell</source>. <year>2006</year>;<volume>17</volume>:<fpage>308</fpage>–<lpage>316</lpage>. <pub-id pub-id-type="doi">10.1091/mbc.E05-07-0657</pub-id><?supplied-pmid 16251353?><pub-id pub-id-type="pmid">16251353</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref038">
      <label>38</label>
      <mixed-citation publication-type="journal"><name><surname>Rothstein</surname><given-names>R</given-names></name>., <name><surname>Michel</surname><given-names>B</given-names></name>., <name><surname>Gangloff</surname><given-names>S</given-names></name>. <article-title>Replication fork pausing and recombination or “gimme a break”</article-title>. <source>Genes &amp; Development</source>. <year>2000</year>;<volume>14</volume>:<fpage>1</fpage>–<lpage>10</lpage>.<pub-id pub-id-type="pmid">10640269</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref039">
      <label>39</label>
      <mixed-citation publication-type="journal"><name><surname>Danos</surname><given-names>V</given-names></name>., <name><surname>Feret</surname><given-names>J</given-names></name>., <name><surname>Fontana</surname><given-names>W</given-names></name>., <name><surname>Harmer</surname><given-names>R</given-names></name>., <name><surname>Krivine</surname><given-names>J</given-names></name>. <article-title>Rule-based modelling of cellular signalling</article-title>. In: <source>CONCUR. LNCS</source>. <year>2007</year>;<volume>4703</volume>:<fpage>17</fpage>–<lpage>41</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref040">
      <label>40</label>
      <mixed-citation publication-type="journal"><name><surname>Danos</surname><given-names>V</given-names></name>., <name><surname>Feret</surname><given-names>J</given-names></name>., <name><surname>Fontana</surname><given-names>W</given-names></name>., <name><surname>Harmer</surname><given-names>R</given-names></name>., <name><surname>Krivine</surname><given-names>J</given-names></name>. <article-title>Rule-based modelling and model perturbation</article-title>. <source>Trans. on Comput. Syst. Biol</source>. <year>2009</year>;<volume>5750</volume>:<fpage>116</fpage>–<lpage>137</lpage>.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref041">
      <label>41</label>
      <mixed-citation publication-type="journal"><name><surname>Boutillier</surname><given-names>P</given-names></name>., <name><surname>Maasha</surname><given-names>M</given-names></name>., <name><surname>Li</surname><given-names>X</given-names></name>., <name><surname>Medina-Abarca</surname><given-names>H.F</given-names></name>., <name><surname>Krivine</surname><given-names>J</given-names></name>., <name><surname>Feret</surname><given-names>J</given-names></name>., <name><surname>Cristescu</surname><given-names>I</given-names></name>., <name><surname>Forbes</surname><given-names>A.G</given-names></name>., <name><surname>Fontana</surname><given-names>W</given-names></name>. <article-title>The Kappa platform for rule-based modelling</article-title>. <source>Bioinformatics</source>. <year>2018</year>;<volume>34</volume>:<fpage>i583</fpage>–<lpage>i592</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/bty272</pub-id><?supplied-pmid 29950016?><pub-id pub-id-type="pmid">29950016</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref042">
      <label>42</label>
      <mixed-citation publication-type="journal"><name><surname>Blinov</surname><given-names>M.L</given-names></name>., <name><surname>Faeder</surname><given-names>J.R</given-names></name>., <name><surname>Goldstein</surname><given-names>B</given-names></name>., <name><surname>Hlavacek</surname><given-names>W.S</given-names></name>. <article-title>BioNetGen: software for rule-based modeling of signal transduction based on the interactions of molecular domains</article-title>. <source>Bioinformatics</source>. <year>2004</year>;<volume>20</volume>:<fpage>3289</fpage>–<lpage>3291</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/bth378</pub-id><?supplied-pmid 15217809?><pub-id pub-id-type="pmid">15217809</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref043">
      <label>43</label>
      <mixed-citation publication-type="journal"><name><surname>Harris</surname><given-names>L.A</given-names></name>., <name><surname>Hogg</surname><given-names>J.S</given-names></name>., <name><surname>Tapia</surname><given-names>J</given-names></name>., <name><surname>Sekar</surname><given-names>J.A.P</given-names></name>., <name><surname>Gupta</surname><given-names>S</given-names></name>., <name><surname>Korsunsky</surname><given-names>I</given-names></name>., <name><surname>Arora</surname><given-names>A</given-names></name>., <name><surname>Barua</surname><given-names>D</given-names></name>., <name><surname>Sheehan</surname><given-names>R.P</given-names></name>., <name><surname>Faeder</surname><given-names>J.R</given-names></name>. <article-title>BioNetGen 2.2: advances in rule-based modeling</article-title>. <source>Bioinformatics</source>. <year>2016</year>;<volume>32</volume>:<fpage>3366</fpage>–<lpage>3368</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btw469</pub-id><?supplied-pmid 27402907?><pub-id pub-id-type="pmid">27402907</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref044">
      <label>44</label>
      <mixed-citation publication-type="journal"><name><surname>Lopez</surname><given-names>C.F</given-names></name>., <name><surname>Muhlich</surname><given-names>J.L</given-names></name>., <name><surname>Bachman</surname><given-names>J.A</given-names></name>., <name><surname>Sorger</surname><given-names>P.K</given-names></name>. <article-title>Programming biological models in Python using PySB</article-title>. <source>Mol. Syst. Biol</source>. <year>2013</year>;<volume>9</volume>:<fpage>646</fpage><pub-id pub-id-type="doi">10.1038/msb.2013.1</pub-id><?supplied-pmid 23423320?><pub-id pub-id-type="pmid">23423320</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref045">
      <label>45</label>
      <mixed-citation publication-type="journal"><name><surname>Maus</surname><given-names>C</given-names></name>., <name><surname>Rybacki</surname><given-names>S</given-names></name>., <name><surname>Uhrmacher</surname><given-names>A.M</given-names></name>. <article-title>Rule-based multi-level modeling of cell biological systems</article-title>. <source>BMC Systems Biology</source>. <year>2011</year>;<volume>5</volume>:<fpage>166</fpage><pub-id pub-id-type="doi">10.1186/1752-0509-5-166</pub-id><?supplied-pmid 22005019?><pub-id pub-id-type="pmid">22005019</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref046">
      <label>46</label>
      <mixed-citation publication-type="other">Helms T., Maus C., Haack F., Uhrmacher A.M. Muti-level modeling and simulation of cell biological systems with ML-Rules—A tutorial. In: Proceedings of the Winter Simulation Conference 2014. 177-191.</mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref047">
      <label>47</label>
      <mixed-citation publication-type="journal"><name><surname>Zhang</surname><given-names>F</given-names></name>., <name><surname>Angermann</surname><given-names>B.R</given-names></name>., <name><surname>Meier-Schellersheim</surname><given-names>M</given-names></name>. <article-title>The Simmune Modeler visual interface for creating signaling networks based on bi-molecular interactions</article-title>. <source>Bioinformatics</source>. <year>2013</year>;<volume>29</volume>:<fpage>1229</fpage>–<lpage>1230</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btt134</pub-id><?supplied-pmid 23508970?><pub-id pub-id-type="pmid">23508970</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref048">
      <label>48</label>
      <mixed-citation publication-type="journal"><name><surname>Angermann</surname><given-names>B.R</given-names></name>., <name><surname>Klauschen</surname><given-names>F</given-names></name>., <name><surname>Garcia</surname><given-names>A.D</given-names></name>., <name><surname>Prustel</surname><given-names>T</given-names></name>., <name><surname>Zhang</surname><given-names>F</given-names></name>., <name><surname>Germain</surname><given-names>R.N</given-names></name>., <name><surname>Meier-Schellersheim</surname><given-names>M</given-names></name>. <article-title>Computational modeling of cellular signaling processes embedded into dynamic spatial contexts</article-title>. <source>Nature Methods</source>. <year>2012</year>;<volume>9</volume>:<fpage>283</fpage>–<lpage>289</lpage>. <pub-id pub-id-type="doi">10.1038/nmeth.1861</pub-id><?supplied-pmid 22286385?><pub-id pub-id-type="pmid">22286385</pub-id></mixed-citation>
    </ref>
    <ref id="pcbi.1007651.ref049">
      <label>49</label>
      <mixed-citation publication-type="journal"><name><surname>Gillespie</surname><given-names>D.T</given-names></name>. <article-title>Exact stochastic simulation of coupled chemical reactions</article-title>. <source>The Journal of Physical Chemistry</source>. <year>1977</year>;<volume>81</volume>:<fpage>2340</fpage>–<lpage>2361</lpage>. <pub-id pub-id-type="doi">10.1021/j100540a008</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
