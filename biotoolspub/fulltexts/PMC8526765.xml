<?DTDIdentifier.IdentifierValue -//ES//DTD journal article DTD version 5.6.0//EN//XML?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName art560.dtd?>
<?SourceDTD.Version 5.6.0?>
<?ConverterInfo.XSLTName elsevier2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?origin publisher?>
<?FILEmeta_MCPRO100149 xml ?>
<?FILEmain xml ?>
<?FILEmain pdf ?>
<?FILEgr1 jpg ?>
<?FILEgr2 jpg ?>
<?FILEgr3 jpg ?>
<?FILEgr4 jpg ?>
<?FILEfx1 jpg ?>
<?FILEsi1 svg ?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Mol Cell Proteomics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Mol Cell Proteomics</journal-id>
    <journal-title-group>
      <journal-title>Molecular &amp; Cellular Proteomics : MCP</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1535-9476</issn>
    <issn pub-type="epub">1535-9484</issn>
    <publisher>
      <publisher-name>American Society for Biochemistry and Molecular Biology</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8526765</article-id>
    <article-id pub-id-type="pii">S1535-9476(21)00121-3</article-id>
    <article-id pub-id-type="doi">10.1016/j.mcpro.2021.100149</article-id>
    <article-id pub-id-type="publisher-id">100149</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technological Innovation and Resources</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>AlphaTims: Indexing Trapped Ion Mobility Spectrometry–TOF Data for Fast and Easy Accession and Visualization</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="au1">
        <name>
          <surname>Willems</surname>
          <given-names>Sander</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author" id="au2">
        <name>
          <surname>Voytik</surname>
          <given-names>Eugenia</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author" id="au3">
        <name>
          <surname>Skowronek</surname>
          <given-names>Patricia</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author" id="au4">
        <name>
          <surname>Strauss</surname>
          <given-names>Maximilian T.</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">1</xref>
        <xref rid="aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author" id="au5">
        <name>
          <surname>Mann</surname>
          <given-names>Matthias</given-names>
        </name>
        <email>mmann@biochem.mpg.de</email>
        <xref rid="aff1" ref-type="aff">1</xref>
        <xref rid="aff3" ref-type="aff">3</xref>
        <xref rid="cor1" ref-type="corresp">∗</xref>
      </contrib>
      <aff id="aff1"><label>1</label>Department of Proteomics and Signal Transduction, Max Planck Institute of Biochemistry, Martinsried, Germany</aff>
      <aff id="aff2"><label>2</label>OmicEra Diagnostics GmbH, Planegg, Germany</aff>
      <aff id="aff3"><label>3</label>Faculty of Health Sciences, NNF Center for Protein Research, University of Copenhagen, Copenhagen, Denmark</aff>
    </contrib-group>
    <author-notes>
      <corresp id="cor1"><label>∗</label>For correspondence: Matthias Mann <email>mmann@biochem.mpg.de</email></corresp>
    </author-notes>
    <pub-date pub-type="pmc-release">
      <day>17</day>
      <month>9</month>
      <year>2021</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on <pub-date
						pub-type="epub">.-->
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>17</day>
      <month>9</month>
      <year>2021</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>100149</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>7</month>
        <year>2021</year>
      </date>
      <date date-type="rev-recd">
        <day>9</day>
        <month>9</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2021 The Authors</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).</license-p>
      </license>
    </permissions>
    <abstract id="abs0010">
      <p>High-resolution MS-based proteomics generates large amounts of data, even in the standard LC–tandem MS configuration. Adding an ion mobility dimension vastly increases the acquired data volume, challenging both analytical processing pipelines and especially data exploration by scientists. This has necessitated data aggregation, effectively discarding much of the information present in these rich datasets. Taking trapped ion mobility spectrometry (TIMS) on a quadrupole TOF (Q-TOF) platform as an example, we developed an efficient indexing scheme that represents all data points as detector arrival times on scales of minutes (LC), milliseconds (TIMS), and microseconds (TOF). In our open-source AlphaTims package, data are indexed, accessed, and visualized by a combination of tools of the scientific Python ecosystem. We interpret unprocessed data as a sparse four-dimensional matrix and use just-in-time compilation to machine code with Numba, accelerating our computational procedures by several orders of magnitude while keeping to familiar indexing and slicing notations. For samples with more than six billion detector events, a modern laptop can load and index raw data in about a minute. Loading is even faster when AlphaTims has already saved indexed data in an HDF5 file, a portable scientific standard used in extremely large-scale data acquisition. Subsequently, data accession along any dimension and interactive visualization happens in milliseconds. We have found AlphaTims to be a key enabling tool to explore high-dimensional LC-TIMS-Q-TOF data and have made it freely available as an open-source Python package with a stand-alone graphical user interface at <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims" id="intref0010">https://github.com/MannLabs/alphatims</ext-link> or as part of the AlphaPept ‘ecosystem’.</p>
    </abstract>
    <abstract abstract-type="graphical" id="abs0015">
      <title>Graphical Abstract</title>
      <fig id="undfig1" position="anchor">
        <graphic xlink:href="fx1"/>
      </fig>
    </abstract>
    <abstract abstract-type="author-highlights" id="abs0020">
      <title>Highlights</title>
      <p>
        <list list-type="simple" id="ulist0010">
          <list-item id="u0015">
            <label>•</label>
            <p id="p0015">Efficient indexing of billions of five-dimensional data points in seconds.</p>
          </list-item>
          <list-item id="u0020">
            <label>•</label>
            <p id="p0020">Fast accession of arbitrary LC-TIMS-QTOF data slices in milliseconds.</p>
          </list-item>
          <list-item id="u0025">
            <label>•</label>
            <p id="p0025">Easy and fast visualization of LC-TIMS-QTOF data along multiple axes.</p>
          </list-item>
          <list-item id="u0030">
            <label>•</label>
            <p id="p0030">Freely available GUI, CLI, and Python module on Windows, Linux, and macOS.</p>
          </list-item>
        </list>
      </p>
    </abstract>
    <abstract abstract-type="teaser" id="abs0025">
      <title>In Brief</title>
      <p>AlphaTims efficiently indexes five-dimensional LC-TIMS-Q-TOF data containing billions of datapoints in a matter of seconds. Owing to this indexing, retrieving the retention time, ion mobility, quadrupole <italic>m/z</italic>, TOF <italic>m/z</italic>, and intensity values of millions of ions along arbitrary dimensions takes only milliseconds. Subsequent visualization of these coordinates is then achieved with similar timings. AlphaTims is a freely available open-source package with a graphical user interface, command-line interface, or Python module for all major operating systems.</p>
    </abstract>
    <kwd-group id="kwrds0010">
      <title>Keywords</title>
      <kwd>MS</kwd>
      <kwd>TOF</kwd>
      <kwd>data indexing</kwd>
      <kwd>data visualization</kwd>
      <kwd>data accession</kwd>
      <kwd>AlphaPept</kwd>
    </kwd-group>
    <kwd-group id="kwrds0015">
      <title>Abbreviations</title>
      <kwd>CLI, command-line interface</kwd>
      <kwd>DIA, data-independent acquisition</kwd>
      <kwd>GUI, graphical user interface</kwd>
      <kwd>JIT, just-in-time</kwd>
      <kwd>MS/MS, tandem MS</kwd>
      <kwd>PASEF, parallel cccumulation–serial fragmentation</kwd>
      <kwd>PyPi, Python Package Index</kwd>
      <kwd>Q, quadrupole</kwd>
      <kwd>SPD, samples per day</kwd>
      <kwd>tdf, TIMS data format</kwd>
      <kwd>TIC, total ion current</kwd>
      <kwd>TIMS, trapped ion mobility spectrometry</kwd>
      <kwd>XIC, extracted ion chromatogram</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <p id="p0035">The increasing amounts and complexity of data present a fundamental challenge of data accession in different scientific fields. MS, a leading analytical method in clinical and (bio)chemical research, is no exception. This issue is compounded when coupling MS with other techniques such as LC and ion mobility spectrometry (<xref rid="bib1" ref-type="bibr">1</xref>), which allow separating analytes efficiently in scientific domains such as proteomics, lipidomics, and metabolomics (<xref rid="bib2" ref-type="bibr">2</xref>, <xref rid="bib3" ref-type="bibr">3</xref>, <xref rid="bib4" ref-type="bibr">4</xref>). In our laboratory, this is exemplified by TOF mass analyzers and trapped ion mobility spectrometry (TIMS) (<xref rid="bib5" ref-type="bibr">5</xref>, <xref rid="bib6" ref-type="bibr">6</xref>, <xref rid="bib7" ref-type="bibr">7</xref>). Typically, analytes are first separated throughout LC gradient times of several minutes or hours. After ionization, they enter a TIMS tunnel where they are trapped and separated in approximately 100 ms. This step discretizes continuous LC separation into ion packets with undistinguishable chromatographic retention time values, and this smallest unit of LC separation is defined as a frame. After TIMS separation, a quadrupole (Q) usually provides selection for tandem MS (MS/MS) before ions reach the TOF accelerator. Ion packets are then sent orthogonally into the TOF analyzer at regular intervals of about 100 μs by an electrodynamic pusher. As mentioned previously, such a pusher event discretizes continuous TIMS separation into ion packets with undistinguishable ion mobility (1/<italic>K</italic><sub>0</sub>), and this smallest unit of TIMS separation is defined as a scan. Finally, a detector at the end of the TOF accelerator discretizes continuous ion arrival times into TOF peaks of a few hundred picoseconds wide. This combination of analytical techniques, in brief LC-TIMS-Q-TOF, has received much attention since the introduction of the timsTOF Pro instrument (Bruker Daltonics).</p>
  <p id="p0040">The parallel accumulation–serial fragmentation (PASEF) method synchronizes ion mobility separation with Q selection, combining high-throughput with high sensitivity in both data-dependent acquisition and data-independent acquisition (DIA) (<xref rid="bib5" ref-type="bibr">5</xref>, <xref rid="bib8" ref-type="bibr">8</xref>). Despite its very high data-acquisition rate, the full mass resolution is maintained in the MS or MS/MS mode by coupling the high-resolution TOF mass analyzer to a GHz detector. This rapid detection rate in combination with high sensitivity often leads to billions of detector events per sample. While the actual measurements are intensity values of ion species, the exact time of a detector event can be directly converted to the TOF <italic>m/z</italic>, Q <italic>m/z</italic>, ion mobility, and chromatographic retention time values.</p>
  <p id="p0045">As a consequence of the resulting large data size, the accession and further visualization of LC-TIMS-Q-TOF data have proven to be challenging and slow in practice. During the last years, the single solution in the field was provided by the manufacturer’s closed-source library, integrated into Bruker’s proprietary software Compass DataAnalysis. To achieve reasonable data size and access times, this involved preprocessing steps, including data binning. However, this requires choosing parameters such as bin sizes somewhat arbitrarily and, in general, conceals the actual measurements. Consequently, the results depend on this preprocessing, and validation at the level of raw data is impractical.</p>
  <p id="p0050">Very recently, this led to parallel developments tackling some of these issues. The notable examples are OpenTIMS (<xref rid="bib9" ref-type="bibr">9</xref>), an open-source C++ library with bindings for the Python and R languages to read Bruker data, and MSFragger in combination with IonQuant, which allows to identify and quantify proteins rapidly without the need to preprocess raw data (<xref rid="bib10" ref-type="bibr">10</xref>). However, these tools were developed using specific applications in mind. We reasoned that fast and generic accession in arbitrary dimensions of the data would need to be optimized for speed, usability, and extensibility. This combination would enable community-driven developments to tackle current bottlenecks such as novel implementations of feature-finding algorithms, retrieval of extracted ion chromatograms (XICs) for DIA analysis, or fast interactive data visualization of raw MS data.</p>
  <p id="p0055">Here, we present AlphaTims, a user-friendly software tool, that drastically accelerates accession and visualization of raw LC-TIMS-Q-TOF data compared with the vendor’s software. It provides an indexing procedure in such a way that the unprocessed data are interpreted as a sparse four-dimensional matrix. This matrix is specifically designed for LC-TIMS-Q-TOF data, allowing fast retrieval of arbitrary data slices along all of the available dimensions in milliseconds. It is implemented in pure Python with only a few dependencies to make it readable, flexible, and lightweight. This makes it easily adoptable and adaptable by the community. At the same time, it matches the performance of programs written in the C programming language, by using the popular packages NumPy for array manipulation and Numba for just-in-time (JIT) compilation to machine code (<xref rid="bib11" ref-type="bibr">11</xref>, <xref rid="bib12" ref-type="bibr">12</xref>). AlphaTims can save an indexed dataset as a single portable high-performance hierarchical data format (HDF5) file (<xref rid="bib13" ref-type="bibr">13</xref>), which has proven its efficiency and extensibility in various scientific fields and has also been used in MS-based proteomics before (<xref rid="bib14" ref-type="bibr">14</xref>, <xref rid="bib15" ref-type="bibr">15</xref>, <xref rid="bib16" ref-type="bibr">16</xref>). This further accelerates data access and allows us to store arbitrary metadata and downstream processing results. We then use Datashader, an optimized rendering Python package to plot millions of data points on standard hardware (<xref rid="bib17" ref-type="bibr">17</xref>), in combination with Panel and Bokeh (Python packages to build user-friendly dashboards to access and visualize data) to extend the usability of AlphaTims to a broader audience regardless of computational expertise. AlphaTims is a modular tool that is also a part of the AlphaPept (<xref rid="bib18" ref-type="bibr">18</xref>) (<ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphapept" id="intref0015">https://github.com/MannLabs/alphapept</ext-link>) ‘ecosystem’ developed in our department, which provides tools for the different facets of MS-based computational proteomics. It can be used as a fully stand-alone graphical user interface (GUI), command-line interface (CLI), or Python module for Windows, macOS, and Linux and is freely available under an Apache license at <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims" id="intref0020">https://github.com/MannLabs/alphatims</ext-link>.</p>
  <sec id="sec1">
    <title>Experimental Procedures</title>
    <sec id="sec1.1">
      <title>Sample Preparation</title>
      <p id="p0060">Human cervical cancer cells (HeLa, S3, and ATCC) were cultured in Dulbecco's modified Eagle's medium with 10% fetal bovine serum, 20 mM glutamine, and 1% penicillin-streptomycin (all Life Technologies Ltd). The cells were collected using centrifugation, washed with PBS, flash-frozen in liquid nitrogen, and stored at −80 °C.</p>
      <p id="p0065">Following the in-StageTip protocol (<xref rid="bib19" ref-type="bibr">19</xref>), cell lysis, reduction, and alkylation with chloroacetamide were carried out simultaneously in a lysis buffer (PreOmics). The resultant dried peptides were reconstituted in double-distilled water comprising 2 vol% acetonitrile and 0.1 vol% TFA to a concentration of 200 ng/μl and further diluted with double-distilled water containing 0.1 vol% formic acid. The manufacturer's instructions were followed to load approximately 50 ng or 200 ng peptides onto Evotips (Evosep).</p>
    </sec>
    <sec id="sec1.2">
      <title>LC</title>
      <p id="p0070">Purified tryptic digests were separated with either a predefined ‘200 samples per day’ (SPD) method (6-min gradient time, 50 ng peptides) or a predefined 60 SPD method (21-min gradient time, 200 ng peptides) on an Evosep One LC system (Evosep) (<xref rid="bib20" ref-type="bibr">20</xref>). A fused silica 10-μm ID emitter (Bruker Daltonics) was placed inside a nanoelectrospray source (CaptiveSpray source, Bruker Daltonics). For the 200 SPD method, the emitter was connected to a 4-cm × 150-μm reverse-phase column, packed with 3-μm C<sub>18</sub> beads, and for the 60 SPD method, to an 8-cm × 150-μm reverse-phase column, packed with 1.5-μm C<sub>18</sub> beads (PepSep). Mobile phases were water and acetonitrile, buffered with 0.1% formic acid.</p>
      <p id="p0075">In addition, 400-ng peptides were separated over a 120-min gradient time on a 50-cm in-house reverse-phase column with an inner diameter of 75 μm, packed with 1.9-μm C<sub>18</sub> beads (Dr Maisch ReproSil-Pur AQ) and a laser-pulled electrospray emitter. The column was heated to 60 °C in an oven compartment. The binary LC system consisted water as buffer A and acetonitrile/water (80%/20%, v/v) as buffer B, both buffers containing 0.1% formic acid (Easy-nLC 1200, Thermo Scientific). The gradients started with a buffer B concentration of 3%. In 95 min, the buffer B concentration was increased to 30%, in 5 min to 60%, and in 5 min to 95%. A buffer B concentration of 95% was held for 5 min before decreasing to 5% in 5 min and re-equilibrating for further 5 min. All steps of the gradients were performed at a flow rate of 300 nl min<sup>−1</sup>.</p>
    </sec>
    <sec id="sec1.3">
      <title>MS</title>
      <p id="p0080">LC was coupled online to a TIMS Q-TOF instrument (timsTOF Pro, Bruker Daltonics) with ddaPASEF and diaPASEF (<xref rid="bib7" ref-type="bibr">7</xref>, <xref rid="bib8" ref-type="bibr">8</xref>) <italic>via</italic> a CaptiveSpray nano-electrospray ion source. For both acquisition modes, the ion mobility dimension was calibrated with three Agilent ESI-L Tuning Mix ions (<italic>m/z</italic>, 1/<italic>K</italic><sub>0</sub>: 622.0289 Th, 0.9848 Vs cm<sup>−2</sup>; 922.0097 Th, 1.1895 Vs cm<sup>−2</sup>; 1221.9906 Th, 1.3820 Vs cm<sup>−2</sup>). Furthermore, the collision energy was decreased linearly from 59 eV at 1/<italic>K</italic><sub>0</sub> = 1.6 Vs cm<sup>−2</sup> to 20 eV at 1/<italic>K</italic><sub>0</sub> = 0.6 Vs cm<sup>−2</sup>.</p>
      <p id="p0085">For the ddaPASEF method, each topN acquisition cycle consisted four PASEF MS/MS frames for the 200 SPD and 60 SPD methods and ten PASEF MS/MS frames for the 120-min gradient time. The accumulation and ramp times were set to 100 ms. Singly charged precursors were excluded from fragmentation using a polygon filter in the (<italic>m/z</italic>, 1/<italic>K</italic><sub>0</sub>) plane. Furthermore, all precursors that reached the target value of 20,000 were excluded for 0.4 min. Precursors were isolated using a Q window of 2 Th for <italic>m/z</italic> &lt;700 and 3 Th for <italic>m/z</italic> &gt;700. For diaPASEF, we used the ‘high-speed’ method (<italic>m/z</italic> range: 400–1000 Th, 1/<italic>K</italic><sub>0</sub> range: 0.6–1.6 Vs cm<sup>−2</sup>, diaPASEF windows: 8 × 25 Th), as described (<xref rid="bib8" ref-type="bibr">8</xref>).</p>
      <p id="p0090">A seventh sample was acquired with identical settings as the 60 SPD ddaPASEF method. To intentionally introduce anomalies, the TOF was calibrated with an offset of 1 Da, and the air supply through the CaptiveSpray nano-electrospray source filter was blocked between minute 12 and 13.</p>
    </sec>
    <sec id="sec1.4">
      <title>AlphaTims Development</title>
      <p id="p0095">The AlphaTims source code is freely available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims" id="intref0025">https://github.com/MannLabs/alphatims</ext-link>) under an Apache license. The Python code (alphatims folder) is divided into two core modules: bruker.py provides the TimsTOF class and all functions to create, index, and access objects from this class, whereas the utils.py module provides generic utilities for logging, compilation, parallelization, and I/O. Three additional modules implement all functionality for plotting, GUI, and the CLI.</p>
      <p id="p0100">In addition to the core Python code, the GitHub repository includes much introductory and background information. This includes (1) an extensive README for navigation, installation, and usage instructions, (2) a Jupyter Notebook folder (nbs) with a Python tutorial and a performance notebook to reproduce all timings as presented in this article, (3) a documentation folder (docs) to create all documentation for the Bruker, utils, and plotting modules hosted on <ext-link ext-link-type="uri" xlink:href="https://alphatims.readthedocs.io" id="intref0030">https://alphatims.readthedocs.io</ext-link>, (4) a miscellaneous folder (misc) facilitating manual creation of new GUI releases and Python Package Index (PyPi) releases on <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/alphatims" id="intref0035">https://pypi.org/project/alphatims</ext-link>, (5) a .github folder to perform continuous integration including testing and automatic releasing of new versions, and (6) a requirement folder to handle all dependencies.</p>
      <p id="p0105">AlphaTims is developed in pure Python and only has seven core dependencies: (1) h5py to handle HDF5 files, (2) Numba for JIT compilation, (3) Pandas for tabular results, (4) pyzstd for generic decompression of Bruker binary data, and (5–7) tqdm, psutil, and click for CLI support. All plotting capabilities and the GUI are enabled by four additional packages: (1) Bokeh for visualizations and the dashboard, (2) hvPlot to connect Pandas DataFrames with Bokeh, (3) Datashader for fast rendering of visualizations, and (4) selenium for browser support. As an alternative to <italic>m/z</italic> and 1/<italic>K</italic><sub>0</sub> estimation, we also provide the option to retrieve calibrated values with Bruker libraries on Windows and Linux machines. Additional requirement files exist purely for legacy code and to facilitate development with dependencies such as, for example, PyInstaller to create the stand-alone GUI or twine to release new versions on PyPi.</p>
    </sec>
    <sec id="sec1.5">
      <title>Computational System</title>
      <p id="p0110">All development and testing of AlphaTims was done on a MacBook Pro (13-inch, 2020) with a 2.3 GHz Quad-Core Intel Core i7 processor, 32 GB 3733 MHz LPDDR4X memory, and 2 TB Flash storage running macOS Catalina version 10.15.7. Functionality on Linux and Windows was tested through continuous integration on default GitHub virtual machines running Ubuntu 20.04 and Windows Server 2019 (<ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners" id="intref0040">https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners</ext-link>).</p>
    </sec>
  </sec>
  <sec id="sec2">
    <title>Results and Discussion</title>
    <p id="p0115">To better explain the indexing procedure at the heart of AlphaTims, we shortly summarize the data structures used in the vendor’s software in their TIMS data format (tdf). A ‘.d folder’ contains two primary files to store raw LC-TIMS-Q-TOF data acquired with the timsTOF Pro (Bruker Daltonics) (<xref rid="fig1" ref-type="fig">Fig. 1</xref><italic>A</italic>). The first of these is the analysis.tdf file, an ordinary SQLite database, that contains all metadata from the acquisition. It furthermore stores summarized information for each individual frame (ion packet with the same retention time values) and, if applicable, at which scans (ion packet with the same ion mobility values) the Q isolation window was changed. The second file, analysis.tdf_bin, contains all raw detector events and their intensity values as compressed binary data.<fig id="fig1"><label>Fig. 1</label><caption><p><bold>Schematic of AlphaTims’ indexing and data accession.</bold><italic>A</italic>, data dimensions: the timsTOF instrument acquires detector events after separation and selection in four different dimensions. After passing through the LC, TIMS, and quadrupole, an ion beam enters the TOF accelerator where a pusher event (synchronized with the LC, TIMS, and quadrupole) sends ions in an orthogonal direction toward the detector. LC, trapped ion mobility spectrometry (TIMS), and TOF coordinates can be represented as discrete indices (frame, scan, and TOF indices) or as continuous values (retention time [RT]), ion mobility, and TOF <italic>m/z</italic> values). <italic>B</italic>, indexing procedure: AlphaTims uses several arrays to store LC-TIMS-Q-TOF data. First, the intensity values are stored in a compressed sparse row matrix (intensity matrix) with TOF indices as columns and indices of pusher events as rows (push index pointers/indptr). Each unique pusher event corresponds to a unique combination of a frame and scan index, according to the formula <inline-formula><mml:math id="M1" altimg="si1.svg"><mml:mrow><mml:mi>p</mml:mi><mml:mi>u</mml:mi><mml:mi>s</mml:mi><mml:msub><mml:mi>h</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:mi>f</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mi>e</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">⋅</mml:mo><mml:mo>#</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula>. Note that the scan-frame matrix presented here is purely a visual aid and is not stored explicitly, as the unique relationship between frame, scan, and push indices makes this redundant. An additional sparse array stores the push indices where the quadrupole settings are changed (quad change indices). For instance, in the first frame (<italic>blue</italic>), the quadrupole is not changed, whereas it is changed once the second frame (<italic>green</italic>) starts and another time within this frame (<italic>e.g.</italic>, diaPASEF with two windows per frame). An array of equal length denotes which <italic>m/z</italic> values (<italic>lower</italic> and <italic>upper bounds</italic>) are selected with the quadrupole at each of these indices. <italic>C</italic>, array storage: owing to the indexing, AlphaTims only needs to store a few arrays of variable size (each <italic>square</italic> represents an order of magnitude). The reference arrays containing mobility, retention time, and TOF <italic>m/z</italic> values take between a thousand and one million elements. While the quadrupole arrays are mostly dependent on the LC gradient length (in minutes), these arrays are generally also less than one million elements. The largest arrays are those that represent the sparse intensity matrix: push indptr, intensity values, and TOF indices, with the latter two arrays frequently containing billions of elements. Finally, a few bytes are used to store relevant metadata. <italic>D</italic>, accession procedure: data accession with AlphaTims can be performed in any dimension. This can be done by providing ranges of interest either as indices or as values. In case of the latter, LC, TIMS, and TOF values are always converted to the closest index by fast binary searches in their corresponding arrays. All of the selected LC and TIMS indices are then converted to push indices by the formula <inline-formula><mml:math id="M2" altimg="si1.svg"><mml:mrow><mml:mi>p</mml:mi><mml:mi>u</mml:mi><mml:mi>s</mml:mi><mml:msub><mml:mi>h</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:mi>f</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mi>e</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">⋅</mml:mo><mml:mo>#</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula>. Because the quadrupole <italic>m/z</italic> array is not ordered, a linear pass over all quadrupole <italic>m/z</italic> values is required to determine which quadrupole index pointers are valid, and only those that overlap with the previously selected push indices are retained. For each individually selected push index, a binary search retrieves all TOF indices that satisfy the requested TOF range. Finally, all selected detector events are filtered with a single pass over their corresponding intensity values to obtain the final set of detector events that satisfies the multidimensional range of interest.</p></caption><graphic xlink:href="gr1"/></fig></p>
    <sec id="sec2.1">
      <title>Indexing Procedure and Performance</title>
      <p id="p0120">AlphaTims represents relevant data from a ‘.d folder’ in multiple NumPy arrays. First, it decompresses the binary analysis.tdf_bin file to read all detector events and corresponding intensity values. While Bruker stores detector events and intensity values in a single homogeneous array, AlphaTims separates them into three distinct arrays. In the first, the (nonzero) intensity values of all detector events are stored in order of their acquisition time. A second array of equal length then stores their TOF indices as offsets for each individual pusher event. To indicate when pusher events happened, AlphaTims defines a third dense array that stores the number of detector events that are registered per pusher event. By taking the cumulative sum of this latter array, pointers are created to indicate the start and end indices of individual pusher events in the two former arrays. Together, these three arrays unambiguously define a compressed sparse row matrix (<xref rid="bib21" ref-type="bibr">21</xref>) with indices of pusher events as rows, TOF indices as columns, and intensity values as values (<xref rid="fig1" ref-type="fig">Fig. 1</xref><italic>B</italic>).</p>
      <p id="p0125">Next, AlphaTims retrieves the unique number of frames, scans, and TOF indices from the analysis.tdf SQL database, and from an array containing all retention time values. On Windows and Linux, arrays with ion mobility and TOF <italic>m/z</italic> values are retrieved from Bruker libraries that are integrated into AlphaTims. These Bruker libraries are unavailable on macOS; however, as a work-around, we provide an estimation of these values based on the start values and end values as provided in the analysis.tdf SQL database. As there are typically 600 frames per minute, 1000 scans per frame, and 400,000 detector events per pusher event, the size of these three arrays is neglectable compared with the total number of detector events that frequently surpasses a billion.</p>
      <p id="p0130">Finally, another sparse array is created to indicate at which push indices the Q settings change. In ddaPASEF, this happens on average ten times per frame to select different precursors. In diaPASEF, this depends on the acquisition scheme and desired cycle time. Typically, each frame of a recurring diaPASEF acquisition cycle is split up into eight window groups that all have different Q settings. This array of Q change indices is accompanied by two other arrays of equal length. The first of these is two-dimensional and defines the lower and upper Q <italic>m/z</italic> values selected by the Q. The second defines the precursor index. For DIA, the precursor indices are equal to the diaPASEF window group.</p>
      <p id="p0135">AlphaTims collects all these arrays, together with global and frame-specific metadata from the analysis.tdf file, and stores this as an alphatims.bruker.TimsTOF object into working memory (<xref rid="fig1" ref-type="fig">Fig. 1</xref><italic>C</italic>). Because a single detector event takes up 6 bytes (an UInt32 for the TOF index and an UInt16 for the intensity) and their respective arrays generally dwarf all others, the required working memory (in gigabytes) is roughly equal to six times the number of detector events (in billions). The alphatims.bruker.TimsTOF object acts as a fully indexed sparse four-dimensional matrix with associated metadata.</p>
      <p id="p0140">To facilitate fast reuse of this object and avoid recreation of the indices, it can be stored on disk as a portable HDF5 file with Python’s h5py package. This is possible on all operating systems, but TOF <italic>m/z</italic> and ion mobility values of HDF5 files created on macOS can differ from Windows and Linux owing to the availability of the Bruker libraries, as mentioned above. By default, the HDF5 file size is equal to the required working memory, but compression can be used to decrease this roughly two-fold. While compression slows down loading and saving of HDF5 files approximately from 2 to 10 times, an AlphaTims object in working memory is always decompressed and interactive accession is thus unaffected. These (de)compressed HDF5 files can always be (de)compressed and resaved, making them ideal for file transfer or archiving. A major benefit of such file transfer is that HDF5 files created on Windows or Linux can be transferred to macOS, thereby utilizing the <italic>m/z</italic> and ion mobility values from the Bruker libraries on all operating systems instead of requiring the aforementioned estimation. Note that not all HDF5 formats are interchangeable with the HDF5 format of AlphaTims. This is primarily because these formats were developed in the past as more general community standards for arbitrary MS data and therefore explicitly store (meta)data per individual spectrum. In contrast, AlphaTims HDF5 files are very efficient as we can assume they contain homogenous LC–ion mobility spectrometry–Q-TOF data that are stored in only a few arrays with a single set of indices and metadata.</p>
      <p id="p0145">To assess the performance of AlphaTims’ indexing procedure, we acquired HeLa samples with gradients of 6, 21, and 120 min in both ddaPASEF and diaPASEF modes (<xref rid="sec1" ref-type="sec">Experimental Procedures</xref>). At the shortest time dimension, a single pusher event could record almost 400,000 TOF detection events in an <italic>m/z</italic> range of 100 to 1700 Th. Separation in the TIMS tunnel lasted 100 ms and is composed of 1000 of these pusher events, covering a 1/<italic>K</italic><sub>0</sub> range of 0.6 to 1.6 Vs cm<sup>−2</sup>. Up to 240 billion events could thus have been recorded per minute; however, in practice, no run acquired more than 0.03% of these potential detector events, and the data can be considered sparse (<xref rid="fig2" ref-type="fig">Fig. 2</xref>).<fig id="fig2"><label>Fig. 2</label><caption><p><bold>Time performance of AlphaTims.</bold> Different HeLa samples were acquired in both ddaPASEF (<italic>full outline</italic>) and diaPASEF (<italic>dotted outline</italic>) with gradient lengths of 6, 21, and 120 min (<xref rid="sec1" ref-type="sec">Experimental Procedures</xref>). When a raw Bruker ‘.d folder’ is read, AlphaTims needs to decompress, import, and index all detector events (<italic>blue</italic>). Once this is performed, the indexed dataset can be saved as an HDF5 file (<italic>green</italic>). When an HDF5 file is read instead of a raw Bruker ‘.d folder’, no decompression or indexing is required (<italic>orange</italic>). Multiple detector events of each run were retrieved by slicing each dimension individually. The retrieved detector events correspond to an LC slice with 100 ≤ <italic>retention time</italic> (<italic>s</italic>) &lt; 100.5 (<italic>red</italic>), a TIMS slice with <italic>scan index</italic> = 450 (<italic>purple</italic>), a quadrupole slice with 700.0 ≤ <italic>quad m/z value</italic> &lt;710.0 (<italic>brown</italic>), and a TOF slice with 621.9 ≤ <italic>TOF m/z value</italic> &lt; 622.1 (<italic>pink</italic>). All timings were obtained with Python timeit function for robust and reproducible results that were averaged over at least seven repeats. See <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims/blob/master/nbs/performance.ipynb" id="intref0065">https://github.com/MannLabs/alphatims/blob/master/nbs/performance.ipynb</ext-link> for exact numbers. TIMS, trapped ion mobility spectrometry.</p></caption><graphic xlink:href="gr2"/></fig></p>
      <p id="p0150">On a laptop (<xref rid="sec1" ref-type="sec">Experimental Procedures</xref>), reading all detector events into working memory and indexing them took AlphaTims less than a second for the smallest run and less than 90 s even for the largest run with 6.4 billion detector events. In contrast, opening any of these runs with Bruker’s Compass DataAnalysis software (v5.3) required at least double the time on a Windows desktop with overall better specifications. To speed up data import even further and allow modification or addition of downstream results, AlphaTims also allows exporting the indexed data as a portable HDF5 file, which only takes seconds. When these HDF5 files are imported, no decompression and indexing is required, making them roughly three times faster to load than raw Bruker ‘.d folders’. While reading .d folders with AlphaTims benefits from multiple CPUs to speed up decompression, loading from HDF5 files is only limited by disk reading speed. Regardless, the required time to load or save either a .d folder or HDF5 file is approximately linear in function of the number of detector events and independent of LC gradient or acquisition scheme.</p>
      <p id="p0155">Currently, reading and indexing data is done after acquisition. Given that these steps take only a fraction of the time it takes to acquire the data, we hypothesize that it would also be possible to index data that are being acquired in real time. This would only require to know the TOF and TIMS dimensions upfront, which are parameters that indeed are determined before acquisition. All other arrays are sorted in function of time and can thus easily be created in real time with dynamic buffer arrays. Such live indexing would not require storage of unindexed data and avoids wasting acquisition time on samples with poor quality.</p>
    </sec>
    <sec id="sec2.2">
      <title>Accession Procedure and Performance</title>
      <p id="p0160">Once data are imported and indexed, an alphatims.bruker.TimsTOF object can be accessed in all dimensions with traditional Python slices or ‘fancy index slicing’ from NumPy (<xref rid="bib12" ref-type="bibr">12</xref>) (<xref rid="fig1" ref-type="fig">Fig. 1</xref><italic>D</italic>). The order of the dimensions in such an object is equal to the order of their respective components in the timsTOF Pro: LC, TIMS, Q, TOF, and detector. Typically, the user defines a range of interest that is translated into a slice with a single index or by a (start and stop) tuple. When decimal values are provided for the LC, TIMS, or TOF dimension instead of indices, AlphaTims always assumes them to represent retention time, ion mobility, or TOF <italic>m/z</italic> values. By default, these are converted to the closest integers representing frame, scan, or TOF indices by looking them up in their appropriate arrays with a fast binary search. In the case of Q <italic>m/z</italic> values, precursor indices, or intensities, no translation is necessary.</p>
      <p id="p0165">Once a multidimensional slice of interest is defined, AlphaTims first selects all the possible push indices that satisfy the LC and TIMS dimensions and converts these to push indices with the formula <inline-formula><mml:math id="M3" altimg="si1.svg"><mml:mrow><mml:mi>p</mml:mi><mml:mi>u</mml:mi><mml:mi>s</mml:mi><mml:msub><mml:mi>h</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">=</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">+</mml:mo><mml:mi>f</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mi>e</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo linebreak="goodbreak" linebreakstyle="after">⋅</mml:mo><mml:mo>#</mml:mo><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula>. As these push indices are ordered, they are located in the Q change index array in a single iteration. Only those push indices with a valid Q <italic>m/z</italic> value are selected, and for each of them, appropriate TOF indices are retrieved from the sparse intensity matrix. As the TOF indices are ordered per individual pusher event, a binary search quickly retrieves all TOF indices that satisfy the requested TOF slice. Finally, it is checked which of all the selected detector events have an intensity value that satisfies the detector slice. The results are then returned as a Pandas (<ext-link ext-link-type="uri" xlink:href="http://pandas.sf.net" id="intref0045">http://pandas.sf.net</ext-link>) DataFrame whose columns describe all indices and values, or—if desired—as a NumPy array with indices of detector events.</p>
      <p id="p0170">For each of the six HeLa samples (<xref rid="sec1" ref-type="sec">Experimental Procedures</xref>), we tested four different slices: an LC slice with retention time values between 100 and 100.5 s, a TIMS slice with a scan index of 450 providing all mass spectra at the corresponding ion mobility, a Q slice with only fragments from a precursor range between 700 and 710 Th, and finally, a TOF slice with <italic>m/z</italic> values between 621.9 and 622.1 (<xref rid="fig2" ref-type="fig">Fig. 2</xref>). As expected, samples with longer gradients, and thus more detector events, also yield more detector events when sliced in the TIMS and TOF dimensions. While this is also true for the Q dimension, the effect of being a ddaPASEF or diaPASEF method is stronger than the gradient length in these examples. This is not surprising because the Q selected just 2 or 3 Th in ddaPASEF, whereas the selected windows in diaPASEF were always 25 Th.</p>
      <p id="p0175">Next, we evaluated the time that was needed to access all of the previous data slices with AlphaTims. Owing to the indexing structure, the index of any pusher event can be converted to a frame and scan index with a simple linear formula and vice versa (<xref rid="fig1" ref-type="fig">Fig. 1</xref><italic>D</italic>). As such, it can be expected that accession in these dimensions should be very fast as no actual searching is involved. Indeed, even retrieving five million detector events with slicing in the LC or TIMS dimension is carried out in just 0.2 s (<xref rid="fig2" ref-type="fig">Fig. 2</xref>). Moreover, the time required to slice in these dimensions only depends on the number of detector events that are retrieved and only indirectly on the gradient length or acquisition scheme. Slicing in the Q dimension is very similar. While slightly slower than the LC or TIMS dimensions, there is a comparable linear dependency for the required slicing time that is purely a function of the number of detector events that are retrieved. This slowdown is due to additional filtering of Q change indices from the sparse array. As this Q index pointer array itself is very sparse (on average, 1% nonzero elements when compared with the number of pusher events), the impact of this additional filtering is small. However, slicing in the TOF dimension is roughly an order of magnitude slower than slicing in any other dimension, primarily caused by the fact that every pusher event needs to be filtered individually, as the TOF dimension is indexed per pusher event. When TOF slicing is combined with other dimensions, fewer selected pusher events are selected, which makes even this slowest step instantaneous to the user. As the time required for TOF slicing is still linearly dependent only on the number of retrieved detector events, AlphaTims is very scalable even to long gradients, very complex samples, and data acquisition schemes.</p>
    </sec>
    <sec id="sec2.3">
      <title>Using AlphaTims</title>
      <p id="p0180">AlphaTims is freely available as an open-source Python package with an Apache license on Windows, macOS, and Linux. To enable the usage for a wide audience regardless of computational background, it can be operated in any of the three following modes: a stand-alone GUI, a stand-alone CLI, or directly as a Python module.</p>
    </sec>
    <sec id="sec2.4">
      <title>GUI Mode</title>
      <p id="p0185">A simple installer for the AlphaTims GUI can be downloaded from our GitHub page, requiring just a few mouse clicks. Both the installation and usage of AlphaTims have been made as intuitive as possible, but a comprehensive GUI manual is also available with in-depth step-by-step explanations and screenshots.</p>
      <p id="p0190">The GUI allows interactive exploration of unprocessed LC-TIMS-Q-TOF data conveniently in browsers such as Google Chrome or Mozilla Firefox. It was programmed in pure Python and uses only a few libraries of Python’s Holoviz visualization ecosystem. These include Holoviews itself and Bokeh to visualize different plots such as the total ion current (TIC), Datashader for fast rendering of these plots, and Panel to combine the plots with control widgets into an interactive dashboard (<xref rid="sec1" ref-type="sec">Experimental Procedures</xref>). With the control widgets, the user can slice the data simultaneously in multiple dimensions as described previosuly (<xref rid="sec2.2" ref-type="sec">Accession Procedure and Performance</xref>). The selected coordinates can then be projected on either a single axis to show mass spectra, ion mobilograms, or XICs or on multiple axes to create heatmaps in the LC, TIMS, and TOF dimensions.</p>
      <p id="p0195">Having reduced the visualization of LC-TIMS-Q-TOF to a fast and straightforward task, it can be incorporated in a wide variety of practical applications. In the following text, we demonstrate this on the example of visual quality control. For this purpose, we intentionally acquired a sample with a few anomalies (including a large offset of the mass scale and temporary pressure change in the CaptiveSpray source) to see if we could indeed quickly detect any issues. There were 0.7 billion detector events in this 21-min ddaPASEF run. The data could be imported with a single mouse click, and the TIC was visible within 10 s of opening the AlphaTims GUI. This immediately revealed an anomaly, namely the drop in ion current between minute 12 and 13 that we had engineered beforehand (<xref rid="fig3" ref-type="fig">Fig. 3</xref><italic>A</italic>). Without having done any processing at all, the user is forewarned about unreliable intensity values in that region. We then used the frame widget to select the first 100 frames and projected intensity values on the TOF and TIMS dimensions, showing the expected relation for <italic>m/z</italic> and ion mobility values of differently charged precursors (<xref rid="fig3" ref-type="fig">Fig. 3</xref><italic>B</italic>). As an important quality metric, the user can assess the stability of added calibrant ions (1222.0 Th, 1.38 Vs cm<sup>−2</sup>), which is expected to be continuously present throughout the whole run. By resetting the selected frames to the whole range and modifying just two values of the TOF widget, we selected all ions in the <italic>m/z</italic> region between 1221.0 and 1225.0 Th. By adjusting the heatmap axes to show chromatographic retention time values on the <italic>x</italic>-axis and <italic>m/z</italic> values on the <italic>y</italic>-axis, we expect to see a continuous signal throughout the whole gradient for the calibrant spray with an <italic>m/z</italic> value of 1222.0 Th. However, there is a continuous and steady signal for an <italic>m/z</italic> value of 1223.5 Th instead, accompanied by a less-intense isotope at 1224.5 Th (<xref rid="fig3" ref-type="fig">Fig. 3</xref><italic>C</italic>). Based on these observations, we deduce that the TOF <italic>m/z</italic> values are greatly misscalibrated (as intended for this sample) and that the reported <italic>m/z</italic> values are too unreliable for further analysis. Next, we changed the <italic>y</italic>-axis of the heatmap to show the ion mobility values and inspect the detected ion at 1223.5 ± 0.1 Th during the complete LC gradient. This clearly revealed another issue between minute 12 and 13. Normally, the ion mobility value of the calibrant spray should remain constant at a value of 1.38 Vs cm<sup>−2</sup>, but in this case, the apparent value drops to 1.1 Vs cm<sup>−2</sup> for a full minute (as a result of the purposely altered gas flow) (<xref rid="fig3" ref-type="fig">Fig. 3</xref><italic>D</italic>). This coincides with the previously detected drop in the TIC, meaning that not only the intensity but also the other coordinates are unreliable in this timeframe. Thus, a brief assessment of the data in less than 30 s with just a few user inputs already detected and pinpointed the main issues with data quality. Other quality assessments to analyze, for example, fragmentation efficiency of ddaPASEF samples or positioning of Q selections in diaPASEF samples do not require much more effort and quickly become routine even for inexperienced users.<fig id="fig3"><label>Fig. 3</label><caption><p><bold>Quality control</bold><bold>(QC)</bold><bold>with the AlphaTims graphical user interface.</bold><italic>A</italic>, total ion current: after importing a sample, the total ion current (TIC) is immediately available without requiring any additional user input. In this case, a clear drop in intensity between minute 12 and 13 is visible. <italic>B</italic>, relation between ion mobility and <italic>m/z</italic> values: by selecting the first 100 frames, the expected relation between <italic>m/z</italic> and ion mobility values of different charge states becomes clear. <italic>C</italic>, TOF calibration: by resetting the frames and adjusting the TOF selection and plot axis widgets, the expected <italic>m/z</italic> value of a calibrant spray is visualized throughout the whole gradient. The expected value of 1222.0 Th is not present, but, instead, a value of 1223.5 Th is displayed. <italic>D</italic>, ion mobility spectrometry stability: when the TOF selection is narrowed to 1223.5 ± 0.1 Th and the <italic>y</italic>-axis is changed to 1/<italic>K</italic><sub>0</sub> values, a discontinuity in ion mobility is detected between minute 12 and 13.</p></caption><graphic xlink:href="gr3"/></fig></p>
    </sec>
    <sec id="sec2.5">
      <title>CLI Mode</title>
      <p id="p0200">Although it is very easy to use, AlphaTims’ GUI requires manual input for visualization. For users who wish to automate repetitive tasks, the AlphaTims CLI provides the same functionality as the GUI. Instead of manually updating control widgets, all settings and values can be provided to the command-line either directly or with a simple script. As there is no need to display an interactive dashboard, this mode is even faster and more versatile than the GUI. More complex data slices can be selected than with the GUI, while all results can still be exported. This includes visualizations in png, or html format, csv tables with selected ion coordinates, and alternative formats of the whole sample such as portable HDF5 files and mascot generic format files. All of these commands and their options are fully documented in the CLI, and a brief tutorial is available on GitHub.</p>
    </sec>
    <sec id="sec2.6">
      <title>Python Mode</title>
      <p id="p0205">Although the CLI is more flexible than the GUI, it is impossible for us to implement all the imaginable use cases of AlphaTims. Instead, we also make it available as a Python module and leave it to the end user to implement any additional functionality or incorporate it into other Python projects. AlphaTims can be installed from PyPi as a Python module with the standard pip module of Python 3.8. There is both a lightweight version available with just a few dependencies that purely focuses on data indexing and accession and an extended version with more dependencies that includes the complete visualization library as used for the GUI and CLI.</p>
      <p id="p0210">Enabling AlphaTims in other Python scripts or Jupyter notebooks requires a single line of code that imports the module. Some convenience functions enable logging or set the number of available threads for multithreading and ensure transparent, reproducible, and efficient usage of AlphaTims. All functions of AlphaTims are implemented in pure Python and fully documented to facilitate flexibility, readability, and usability. However, functions that are computationally intensive have been decorated with Numba to use JIT compilation to machine code. This enables a performance similar to the fastest low-level languages such as C.</p>
      <p id="p0215">Importing and indexing data is carried out with a single command that returns an alphatims.bruker.TimsTOF object, which can be treated as a four-dimensional matrix. Inspired by the slicing approach in NumPy, one of the fundamental Python libraries for scientific computing, AlphaTims provides slicing in multiple dimensions simultaneously as described previously (<xref rid="sec2.2" ref-type="sec">Accession Procedure and Performance</xref>). As a result, AlphaTims data slices can take advantage of the vast amount of Python packages that act on Pandas DataFrames as well.</p>
      <p id="p0220">To demonstrate the basic usage of AlphaTims in Python, we have provided a brief Jupyter Notebook tutorial on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims/blob/master/nbs/tutorial.ipynb" id="intref0050">https://github.com/MannLabs/alphatims/blob/master/nbs/tutorial.ipynb</ext-link>). This notebook explains how to set up AlphaTims and enable logging for transparent and reproducible data analysis, import samples and export indexed HDF5 files for faster reanalysis, select individual data points and data slices, and visualize data to create similar plots as with the GUI or CLI. The final part of the tutorial includes an example to show how AlphaTims can be used to investigate a specific peptide in diaPASEF data based on a spectral library created with, for instance, AlphaPept, Skyline, or Spectronaut (<xref rid="bib18" ref-type="bibr">18</xref>, <xref rid="bib22" ref-type="bibr">22</xref>, <xref rid="bib23" ref-type="bibr">23</xref>).</p>
      <p id="p0225">The above example illustrates a use case of AlphaTims in Jupyter Notebooks that have become a standard in modern data science (<xref rid="fig4" ref-type="fig">Fig. 4</xref>). AlphaTims and Bruker diaPASEF data are first imported, and then, all coordinates of both the precursor and all fragments of a specific peptide are defined. With a simple custom Python function, all detector events that match these coordinates within a certain tolerance can be retrieved and visualized in an interactive plot. Traditionally, such an interactive plot represents only the XICs of the selected precursor and its fragments, but this ignores the TIMS dimension. In contrast, with AlphaTims in this Jupyter Notebook, we can easily provide heatmaps in both the LC and TIMS dimensions for the precursor and all fragments, thereby illustrating the benefit of using TIMS data for peak capacity and interference removal. Using this extra information allows us to manually verify that the peptide of the spectral library is both quantitatively and qualitatively present in the diaPASEF data as well.<fig id="fig4"><label>Fig. 4</label><caption><p><bold>A section of a Jupyter Notebook using AlphaTims as a Python module.</bold> Jupyter Notebooks allow to structure and execute Python code in individual cells. In the last part of the AlphaTims tutorial, data from a diaPASEF sample is imported (cell "in [20]"). The same sample was also acquired in ddaPASEF, and a spectral library was generated with AlphaPept. Relevant coordinates of the peptide YNDTFWK were retrieved from this spectral library and defined in the tutorial (cell "in [21]"). A function ‘inspect_peptide’ was defined (cell "in [22]", see AlphaTims’ Python tutorial at <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims/blob/master/nbs/tutorial.ipynb" id="intref0070">https://github.com/MannLabs/alphatims/blob/master/nbs/tutorial.ipynb</ext-link>), allowing to visualize extracted ion chromatograms (XICs) for the doubly charged precursor and all fragments of this peptide (cells "in [23]" and "out [23]"). Based on the these XICs, some interference seems to be present for the precursor signal of this peptide. However, when the precursor and fragments of this peptide are visualized as a heatmap in both the LC and TIMS dimensions, it becomes clear that this interference is fully resolved in the TIMS dimension (cell "in [24]" and "out [24]"). TIMS, trapped ion mobility spectrometry.</p></caption><graphic xlink:href="gr4"/></fig></p>
    </sec>
  </sec>
  <sec id="sec3">
    <title>Conclusion</title>
    <p id="p0230">The composition of a wide variety of (bio)chemical samples can be determined with LC-TIMS-Q-TOF, which acquires the intensity values of ions with billions of detector events that are convertible to chromatographic retention time, ion mobility, Q <italic>m/z</italic>, and TOF <italic>m/z</italic> values. Although there are several tools that use these data for specialized applications, a generic software tool that is optimized for speed, usability, and extensibility—thereby enabling community-driven developments—was lacking.</p>
    <p id="p0235">AlphaTims indexes unprocessed data in mere seconds, thereby making it equivalent to a sparse four-dimensional matrix. This allows to subsequently access the unprocessed data in milliseconds, regardless of the original complexity of the dataset. Owing to this fast accession, AlphaTims also requires only milliseconds to provide interactive data visualizations along any dimension, including XICs, ion mobilograms, mass spectra, TICs, or two-dimensional heatmaps. AlphaTims is easy to install and use on all major operating systems, without requiring any computational expertise. It can be used as a stand-alone GUI, CLI, or Python module and includes extensive help in the form of a README file, test data, a Python tutorial, CLI manual, and a GUI manual. It is a fully open-source package with a minimal number of dependencies and is freely available under an Apache license at <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims" id="intref0055">https://github.com/MannLabs/alphatims</ext-link>.</p>
    <p id="p0240">Owing to the documented and freely available code base, AlphaTims can easily be integrated in other community projects. As an example, we are already actively integrating it in accelerated DIA workflows and AlphaViz, a new software tool in the AlphaPept ‘ecosystem’ that visualizes identified peptides within raw data. Furthermore, we also envision to expand the AlphaTims source code and include for instance other vendors, a low-memory mode with optimized usage of HDF5 files, a multisample mode to directly compare different runs, or even on-the-fly indexing of data that are being generated in real time.</p>
  </sec>
  <sec sec-type="data-availability" id="sec4">
    <title>Data Availability</title>
    <p id="p0245">AlphaTims is a fully open-source package and is freely available with an Apache license at <ext-link ext-link-type="uri" xlink:href="https://github.com/MannLabs/alphatims" id="intref0060">https://github.com/MannLabs/alphatims</ext-link>. The results in this article were obtained with AlphaTims, version 0.2.8. The mass spectrometry proteomics data have been deposited to the ProteomeXchange Consortium <italic>via</italic> the PRIDE (<xref rid="bib24" ref-type="bibr">24</xref>) partner repository with the dataset identifier PXD027359.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p id="p0250">M. M. is an indirect investor in Evosep. All other authors declare that they have no conflicts of interest with the contents of this article.</p>
  </sec>
</body>
<back>
  <ref-list id="cebib0010">
    <title>References</title>
    <ref id="bib1">
      <label>1</label>
      <element-citation publication-type="journal" id="sref1">
        <person-group person-group-type="author">
          <name>
            <surname>Gabelica</surname>
            <given-names>V.</given-names>
          </name>
          <name>
            <surname>Shvartsburg</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Afonso</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Barran</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Benesch</surname>
            <given-names>J.L.P.</given-names>
          </name>
          <name>
            <surname>Bleiholder</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Bowers</surname>
            <given-names>M.T.</given-names>
          </name>
          <name>
            <surname>Bilbao</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Bush</surname>
            <given-names>M.F.</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>J.L.</given-names>
          </name>
          <name>
            <surname>Campuzano</surname>
            <given-names>I.D.G.</given-names>
          </name>
          <name>
            <surname>Causon</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Clowers</surname>
            <given-names>B.H.</given-names>
          </name>
          <name>
            <surname>Creaser</surname>
            <given-names>C.S.</given-names>
          </name>
          <name>
            <surname>De Pauw</surname>
            <given-names>E.</given-names>
          </name>
        </person-group>
        <article-title>Recommendations for reporting ion mobility mass spectrometry measurements</article-title>
        <source>Mass Spectrom. Rev.</source>
        <volume>38</volume>
        <year>2019</year>
        <fpage>291</fpage>
        <lpage>320</lpage>
        <pub-id pub-id-type="pmid">30707468</pub-id>
      </element-citation>
    </ref>
    <ref id="bib2">
      <label>2</label>
      <element-citation publication-type="journal" id="sref2">
        <person-group person-group-type="author">
          <name>
            <surname>Ridgeway</surname>
            <given-names>M.E.</given-names>
          </name>
          <name>
            <surname>Lubeck</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Jordens</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>M.A.</given-names>
          </name>
        </person-group>
        <article-title>Trapped ion mobility spectrometry: A short review</article-title>
        <source>Int. J. Mass Spectrom.</source>
        <volume>425</volume>
        <year>2018</year>
        <fpage>22</fpage>
        <lpage>35</lpage>
      </element-citation>
    </ref>
    <ref id="bib3">
      <label>3</label>
      <element-citation publication-type="journal" id="sref3">
        <person-group person-group-type="author">
          <name>
            <surname>Vasilopoulou</surname>
            <given-names>C.G.</given-names>
          </name>
          <name>
            <surname>Sulek</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Brunner</surname>
            <given-names>A.D.</given-names>
          </name>
          <name>
            <surname>Meitei</surname>
            <given-names>N.S.</given-names>
          </name>
          <name>
            <surname>Schweiger-Hufnagel</surname>
            <given-names>U.</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>S.W.</given-names>
          </name>
          <name>
            <surname>Barsch</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
        </person-group>
        <article-title>Trapped ion mobility spectrometry and PASEF enable in-depth lipidomics from minimal sample amounts</article-title>
        <source>Nat. Commun.</source>
        <volume>11</volume>
        <year>2020</year>
        <fpage>331</fpage>
        <pub-id pub-id-type="pmid">31949144</pub-id>
      </element-citation>
    </ref>
    <ref id="bib4">
      <label>4</label>
      <element-citation publication-type="journal" id="sref4">
        <person-group person-group-type="author">
          <name>
            <surname>Luo</surname>
            <given-names>M.-D.</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Z.-W.</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>Z.-J.</given-names>
          </name>
        </person-group>
        <article-title>The application of ion mobility-mass spectrometry in untargeted metabolomics: From separation to identification</article-title>
        <source>J. Anal. Test.</source>
        <volume>4</volume>
        <year>2020</year>
        <fpage>163</fpage>
        <lpage>174</lpage>
      </element-citation>
    </ref>
    <ref id="bib5">
      <label>5</label>
      <element-citation publication-type="journal" id="sref5">
        <person-group person-group-type="author">
          <name>
            <surname>Beck</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Michalski</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Raether</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Lubeck</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Kaspar</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Goedecke</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Baessmann</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Hornburg</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Paron</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Kulak</surname>
            <given-names>N.A.</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>The impact II, a very high-resolution quadrupole time-of-flight instrument (QTOF) for deep shotgun proteomics</article-title>
        <source>Mol. Cell. Proteomics</source>
        <volume>14</volume>
        <year>2015</year>
        <fpage>2014</fpage>
        <lpage>2029</lpage>
        <pub-id pub-id-type="pmid">25991688</pub-id>
      </element-citation>
    </ref>
    <ref id="bib6">
      <label>6</label>
      <element-citation publication-type="journal" id="sref6">
        <person-group person-group-type="author">
          <name>
            <surname>Fernandez-Lima</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Kaplan</surname>
            <given-names>D.A.</given-names>
          </name>
          <name>
            <surname>Suetering</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>M.A.</given-names>
          </name>
        </person-group>
        <article-title>Gas-phase separation using a trapped ion mobility spectrometer</article-title>
        <source>Int. J. Ion Mobil. Spectrom.</source>
        <volume>14</volume>
        <year>2011</year>
        <fpage>93</fpage>
        <lpage>98</lpage>
      </element-citation>
    </ref>
    <ref id="bib7">
      <label>7</label>
      <element-citation publication-type="journal" id="sref7">
        <person-group person-group-type="author">
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Brunner</surname>
            <given-names>A.D.</given-names>
          </name>
          <name>
            <surname>Koch</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Koch</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Lubeck</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Krause</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Goedecke</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Decker</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Kosinski</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>M.A.</given-names>
          </name>
          <name>
            <surname>Bache</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Hoerning</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Räther</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>Online parallel accumulation–serial fragmentation (PASEF) with a novel trapped ion mobility mass spectrometer</article-title>
        <source>Mol. Cell. Proteomics</source>
        <volume>17</volume>
        <year>2018</year>
        <fpage>2534</fpage>
        <lpage>2545</lpage>
        <pub-id pub-id-type="pmid">30385480</pub-id>
      </element-citation>
    </ref>
    <ref id="bib8">
      <label>8</label>
      <element-citation publication-type="journal" id="sref8">
        <person-group person-group-type="author">
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Brunner</surname>
            <given-names>A.D.</given-names>
          </name>
          <name>
            <surname>Frank</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Ha</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Bludau</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Voytik</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Kaspar-Schoenefeld</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Lubeck</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Raether</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Bache</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Aebersold</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Collins</surname>
            <given-names>B.C.</given-names>
          </name>
          <name>
            <surname>Röst</surname>
            <given-names>H.L.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>diaPASEF: Parallel accumulation–serial fragmentation combined with data-independent acquisition</article-title>
        <source>Nat. Methods</source>
        <volume>17</volume>
        <year>2020</year>
        <fpage>1229</fpage>
        <lpage>1236</lpage>
        <pub-id pub-id-type="pmid">33257825</pub-id>
      </element-citation>
    </ref>
    <ref id="bib9">
      <label>9</label>
      <element-citation publication-type="journal" id="sref9">
        <person-group person-group-type="author">
          <name>
            <surname>Łącki</surname>
            <given-names>M.K.</given-names>
          </name>
          <name>
            <surname>Startek</surname>
            <given-names>M.P.</given-names>
          </name>
          <name>
            <surname>Brehmer</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Distler</surname>
            <given-names>U.</given-names>
          </name>
          <name>
            <surname>Tenzer</surname>
            <given-names>S.</given-names>
          </name>
        </person-group>
        <article-title>OpenTIMS, TimsPy, and TimsR: Open and easy access to timsTOF raw data</article-title>
        <source>J. Proteome Res.</source>
        <volume>20</volume>
        <year>2021</year>
        <fpage>2122</fpage>
        <lpage>2129</lpage>
        <pub-id pub-id-type="pmid">33724840</pub-id>
      </element-citation>
    </ref>
    <ref id="bib10">
      <label>10</label>
      <element-citation publication-type="journal" id="sref10">
        <person-group person-group-type="author">
          <name>
            <surname>Yu</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Haynes</surname>
            <given-names>S.E.</given-names>
          </name>
          <name>
            <surname>Teo</surname>
            <given-names>G.C.</given-names>
          </name>
          <name>
            <surname>Avtonomov</surname>
            <given-names>D.M.</given-names>
          </name>
          <name>
            <surname>Polasky</surname>
            <given-names>D.A.</given-names>
          </name>
          <name>
            <surname>Nesvizhskii</surname>
            <given-names>A.I.</given-names>
          </name>
        </person-group>
        <article-title>Fast quantitative analysis of timsTOF PASEF data with MSFragger and IonQuant</article-title>
        <source>Mol. Cell. Proteomics</source>
        <volume>19</volume>
        <year>2020</year>
        <fpage>1575</fpage>
        <lpage>1585</lpage>
        <pub-id pub-id-type="pmid">32616513</pub-id>
      </element-citation>
    </ref>
    <ref id="bib11">
      <label>11</label>
      <element-citation publication-type="book" id="sref11">
        <person-group person-group-type="author">
          <name>
            <surname>Lam</surname>
            <given-names>S.K.</given-names>
          </name>
          <name>
            <surname>Pitrou</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>SeibertNumba</surname>
            <given-names>S.</given-names>
          </name>
        </person-group>
        <part-title>A LLVM-based Python JIT compiler</part-title>
        <source>Proceedings of the Second Workshop on the LLVM Compiler Infrastructure in HPC - LLVM ’15</source>
        <year>2015</year>
        <publisher-name>ACM Press</publisher-name>
        <publisher-loc>Times Square, New York City</publisher-loc>
      </element-citation>
    </ref>
    <ref id="bib12">
      <label>12</label>
      <element-citation publication-type="journal" id="sref12">
        <person-group person-group-type="author">
          <name>
            <surname>Harris</surname>
            <given-names>C.R.</given-names>
          </name>
          <name>
            <surname>Millman</surname>
            <given-names>K.J.</given-names>
          </name>
          <name>
            <surname>van der Walt</surname>
            <given-names>S.J.</given-names>
          </name>
          <name>
            <surname>Gommers</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Virtanen</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Cournapeau</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Wieser</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Berg</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>N.J.</given-names>
          </name>
          <name>
            <surname>Kern</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Picus</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Hoyer</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>van Kerkwijk</surname>
            <given-names>M.H.</given-names>
          </name>
          <name>
            <surname>Brett</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <source>Nature</source>
        <volume>585</volume>
        <year>2020</year>
        <fpage>357</fpage>
        <lpage>362</lpage>
        <pub-id pub-id-type="pmid">32939066</pub-id>
      </element-citation>
    </ref>
    <ref id="bib13">
      <label>13</label>
      <element-citation publication-type="book" id="sref13">
        <person-group person-group-type="author">
          <name>
            <surname>Folk</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Heber</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Koziol</surname>
            <given-names>Q.</given-names>
          </name>
          <name>
            <surname>Pourmal</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>D.</given-names>
          </name>
        </person-group>
        <part-title>An overview of the HDF5 technology suite and its applications</part-title>
        <source>Proceedings of the EDBT/ICDT 2011 Workshop on Array Databases - AD ’11</source>
        <year>2011</year>
        <publisher-name>ACM Press</publisher-name>
        <publisher-loc>Times Square, New York City</publisher-loc>
      </element-citation>
    </ref>
    <ref id="bib14">
      <label>14</label>
      <element-citation publication-type="journal" id="sref14">
        <person-group person-group-type="author">
          <name>
            <surname>Wilhelm</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Kirchner</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Steen</surname>
            <given-names>J.A.</given-names>
          </name>
          <name>
            <surname>Steen</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>mz5: Space- and time-efficient storage of mass spectrometry data sets</article-title>
        <source>Mol. Cell. Proteomics</source>
        <volume>11</volume>
        <year>2012</year>
        <comment>O111.011379</comment>
      </element-citation>
    </ref>
    <ref id="bib15">
      <label>15</label>
      <element-citation publication-type="journal" id="sref15">
        <person-group person-group-type="author">
          <name>
            <surname>Askenazi</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Ben Hamidane</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Graumann</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>The arc of mass spectrometry exchange formats is long, but it bends toward HDF5</article-title>
        <source>Mass Spectrom. Rev.</source>
        <volume>36</volume>
        <year>2017</year>
        <fpage>668</fpage>
        <lpage>673</lpage>
        <pub-id pub-id-type="pmid">27741559</pub-id>
      </element-citation>
    </ref>
    <ref id="bib16">
      <label>16</label>
      <element-citation publication-type="journal" id="sref16">
        <person-group person-group-type="author">
          <name>
            <surname>Bhamber</surname>
            <given-names>R.S.</given-names>
          </name>
          <name>
            <surname>Jankevics</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Deutsch</surname>
            <given-names>E.W.</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>A.R.</given-names>
          </name>
          <name>
            <surname>Dowsey</surname>
            <given-names>A.W.</given-names>
          </name>
        </person-group>
        <article-title>mzMLb: A future-proof raw mass spectrometry data format based on standards-compliant mzML and optimized for speed and storage requirements</article-title>
        <source>J. Proteome Res.</source>
        <volume>20</volume>
        <year>2020</year>
        <fpage>172</fpage>
        <lpage>183</lpage>
        <pub-id pub-id-type="pmid">32864978</pub-id>
      </element-citation>
    </ref>
    <ref id="bib17">
      <label>17</label>
      <element-citation publication-type="book" id="sref17">
        <person-group person-group-type="author">
          <name>
            <surname>Cottam</surname>
            <given-names>J.A.</given-names>
          </name>
          <name>
            <surname>Lumsdaine</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>P.</given-names>
          </name>
        </person-group>
        <part-title>Abstract rendering: Out-of-core rendering for information visualization</part-title>
        <person-group person-group-type="editor">
          <name>
            <surname>Wong</surname>
            <given-names>P.C.</given-names>
          </name>
          <name>
            <surname>Kao</surname>
            <given-names>D.L.</given-names>
          </name>
          <name>
            <surname>Hao</surname>
            <given-names>M.C.</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>C.</given-names>
          </name>
        </person-group>
        <series>Visualization and Data Analysis 2014</series>
        <volume>9017</volume>
        <year>2013</year>
        <publisher-name>SPIE</publisher-name>
        <publisher-loc>Bellingham, WA</publisher-loc>
      </element-citation>
    </ref>
    <ref id="bib18">
      <label>18</label>
      <element-citation publication-type="journal" id="sref18">
        <comment>[preprint]</comment>
        <person-group person-group-type="author">
          <name>
            <surname>Strauss</surname>
            <given-names>M.T.</given-names>
          </name>
          <name>
            <surname>Bludau</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Zeng</surname>
            <given-names>W.-F.</given-names>
          </name>
          <name>
            <surname>Voytik</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Ammar</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Schessner</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Ilango</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Gill</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Willems</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>AlphaPept, a modern and open framework for MS-based proteomics</article-title>
        <source>bioRxiv</source>
        <year>2021</year>
        <pub-id pub-id-type="doi">10.1101/2021.07.23.453379</pub-id>
      </element-citation>
    </ref>
    <ref id="bib19">
      <label>19</label>
      <element-citation publication-type="journal" id="sref19">
        <person-group person-group-type="author">
          <name>
            <surname>Kulak</surname>
            <given-names>N.A.</given-names>
          </name>
          <name>
            <surname>Pichler</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Paron</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Nagaraj</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>Minimal, encapsulated proteomic-sample processing applied to copy-number estimation in eukaryotic cells</article-title>
        <source>Nat. Methods</source>
        <volume>11</volume>
        <year>2014</year>
        <fpage>319</fpage>
        <lpage>324</lpage>
        <pub-id pub-id-type="pmid">24487582</pub-id>
      </element-citation>
    </ref>
    <ref id="bib20">
      <label>20</label>
      <element-citation publication-type="journal" id="sref20">
        <person-group person-group-type="author">
          <name>
            <surname>Bache</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Geyer</surname>
            <given-names>P.E.</given-names>
          </name>
          <name>
            <surname>Bekker-Jensen</surname>
            <given-names>D.B.</given-names>
          </name>
          <name>
            <surname>Hoerning</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Falkenby</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Treit</surname>
            <given-names>P.V.</given-names>
          </name>
          <name>
            <surname>Doll</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Paron</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Müller</surname>
            <given-names>J.B.</given-names>
          </name>
          <name>
            <surname>Meier</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Olsen</surname>
            <given-names>J.V.</given-names>
          </name>
          <name>
            <surname>Vorm</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Mann</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>A novel LC system embeds analytes in pre-formed gradients for rapid, ultra-robust proteomics</article-title>
        <source>Mol. Cell. Proteomics</source>
        <volume>17</volume>
        <year>2018</year>
        <fpage>2284</fpage>
        <lpage>2296</lpage>
        <pub-id pub-id-type="pmid">30104208</pub-id>
      </element-citation>
    </ref>
    <ref id="bib21">
      <label>21</label>
      <element-citation publication-type="journal" id="sref21">
        <person-group person-group-type="author">
          <name>
            <surname>Eisenstat</surname>
            <given-names>S.C.</given-names>
          </name>
          <name>
            <surname>Gursky</surname>
            <given-names>M.C.</given-names>
          </name>
          <name>
            <surname>Schultz</surname>
            <given-names>M.H.</given-names>
          </name>
          <name>
            <surname>Sherman</surname>
            <given-names>A.H.</given-names>
          </name>
        </person-group>
        <article-title>Yale sparse matrix package I: The symmetric codes</article-title>
        <source>Int. J. Numer. Methods Eng.</source>
        <volume>18</volume>
        <year>1982</year>
        <fpage>1145</fpage>
        <lpage>1151</lpage>
      </element-citation>
    </ref>
    <ref id="bib22">
      <label>22</label>
      <element-citation publication-type="journal" id="sref22">
        <person-group person-group-type="author">
          <name>
            <surname>Egertson</surname>
            <given-names>J.D.</given-names>
          </name>
          <name>
            <surname>MacLean</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Xuan</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>MacCoss</surname>
            <given-names>M.J.</given-names>
          </name>
        </person-group>
        <article-title>Multiplexed peptide analysis using data-independent acquisition and Skyline</article-title>
        <source>Nat. Protoc.</source>
        <volume>10</volume>
        <year>2015</year>
        <fpage>887</fpage>
        <lpage>903</lpage>
        <pub-id pub-id-type="pmid">25996789</pub-id>
      </element-citation>
    </ref>
    <ref id="bib23">
      <label>23</label>
      <element-citation publication-type="journal" id="sref23">
        <person-group person-group-type="author">
          <name>
            <surname>Muntel</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Gandhi</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Verbeke</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Bernhardt</surname>
            <given-names>O.M.</given-names>
          </name>
          <name>
            <surname>Treiber</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Bruderer</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Reiter</surname>
            <given-names>L.</given-names>
          </name>
        </person-group>
        <article-title>Surpassing 10 000 identified and quantified proteins in a single run by optimizing current LC-MS instrumentation and data analysis strategy</article-title>
        <source>Mol. Omics</source>
        <volume>15</volume>
        <year>2019</year>
        <fpage>348</fpage>
        <lpage>360</lpage>
        <pub-id pub-id-type="pmid">31465043</pub-id>
      </element-citation>
    </ref>
    <ref id="bib24">
      <label>24</label>
      <element-citation publication-type="journal" id="sref24">
        <person-group person-group-type="author">
          <name>
            <surname>Perez-Riverol</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Csordas</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Bai</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Bernal-Llinares</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Hewapathirana</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Kundu</surname>
            <given-names>D.J.</given-names>
          </name>
          <name>
            <surname>Inuganti</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Griss</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Mayer</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Eisenacher</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Pérez</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Uszkoreit</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Pfeuffer</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Sachsenberg</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Yilmaz</surname>
            <given-names>S.</given-names>
          </name>
        </person-group>
        <article-title>The PRIDE database and related tools and resources in 2019: Improving support for quantification data</article-title>
        <source>Nucleic Acids Res.</source>
        <volume>47</volume>
        <year>2019</year>
        <fpage>D442</fpage>
        <lpage>D450</lpage>
        <pub-id pub-id-type="pmid">30395289</pub-id>
      </element-citation>
    </ref>
  </ref-list>
  <ack id="ack0010">
    <title>Acknowledgments</title>
    <p id="p0255">We would like to thank Sven Brehmer and Sascha Winter from Bruker Daltonics for explaining the binary layout of analysis.tdf_bin files. Additional feedback from Nagarjuna Nagaraj and other Bruker Daltonics colleagues is also much appreciated. Laura Sanchez and colleagues (University of California, Santa Cruz) provided very constructive feedback on the bioRxiv article. Finally, we are grateful for the feedback and support from within our own department, in particular Marvin Thielert, Andreas Brunner, Florian Meier, Igor Paron, Sophia Steigerwald, and all members of the bioinformatics team and interest group.</p>
    <sec id="sec43543">
      <title>Funding and additional information</title>
      <p id="p0265g">This study was supported by <funding-source id="gs1">The Max-Planck Society for Advancement of Science</funding-source> and by the <funding-source id="gs2">Bavarian State Ministry of Health and Care</funding-source> through the research project DigiMed Bayern (www.digimed-bayern.de).</p>
    </sec>
    <sec id="sec5">
      <title>Author contributions</title>
      <p id="p0260">S. W. and M. M. conceptualization; S. W. and E. V. formal analysis; S. W., E. V., P. S., M. T. S., and M. M. investigation; S. W., E. V., P. S., M. T. S., and M. M. writing – original draft.</p>
    </sec>
  </ack>
</back>
