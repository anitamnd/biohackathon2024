<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Biomed Semantics</journal-id>
    <journal-id journal-id-type="iso-abbrev">J Biomed Semantics</journal-id>
    <journal-title-group>
      <journal-title>Journal of Biomedical Semantics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1480</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3558448</article-id>
    <article-id pub-id-type="publisher-id">2041-1480-4-4</article-id>
    <article-id pub-id-type="pmid">23311574</article-id>
    <article-id pub-id-type="doi">10.1186/2041-1480-4-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>MAPI: a software framework for distributed biomedical applications</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Karlsson</surname>
          <given-names>Johan</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>tjkarlsson@uma.es</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A2">
        <name>
          <surname>Trelles</surname>
          <given-names>Oswaldo</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>ortrelles@uma.es</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Computer Architecture Department, University of Málaga, Complejo Tecnológico, Campus de Teatinos, Málaga, 29080, Spain</aff>
    <pub-date pub-type="collection">
      <year>2013</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>1</month>
      <year>2013</year>
    </pub-date>
    <volume>4</volume>
    <fpage>4</fpage>
    <lpage>4</lpage>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>1</month>
        <year>2012</year>
      </date>
      <date date-type="accepted">
        <day>16</day>
        <month>12</month>
        <year>2012</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright ©2013 Karlsson and Trelles; licensee Biomed Cental Ltd.</copyright-statement>
      <copyright-year>2013</copyright-year>
      <copyright-holder>Karlsson and Trelles; licensee Biomed Cental Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.jbiomedsem.com/content/4/1/4"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>The amount of web-based resources (databases, tools etc.) in biomedicine has increased, but the integrated usage of those resources is complex due to differences in access protocols and data formats. However, distributed data processing is becoming inevitable in several domains, in particular in biomedicine, where researchers face rapidly increasing data sizes. This big data is difficult to process locally because of the large processing, memory and storage capacity required.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>This manuscript describes a framework, called MAPI, which provides a uniform representation of resources available over the Internet, in particular for Web Services. The framework enhances their interoperability and collaborative use by enabling a uniform and remote access. The framework functionality is organized in modules that can be combined and configured in different ways to fulfil concrete development requirements.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>The framework has been tested in the biomedical application domain where it has been a base for developing several clients that are able to integrate different web resources. The MAPI binaries and documentation are freely available at <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/mapi">http://www.bitlab-es.com/mapi</ext-link> under the Creative Commons Attribution-No Derivative Works 2.5 Spain License. The MAPI source code is available by request (GPL v3 license).</p>
      </sec>
    </abstract>
    <kwd-group>
      <kwd>Service-oriented architectures</kwd>
      <kwd>Web-service integration</kwd>
      <kwd>Software framework</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The World Wide Web (WWW) has emerged as a gallery of resources, such as Web Services (WS) and datasets, which can be discovered, combined and exploited to enhance our capacity of producing new knowledge. One prominent example is the BioCatalogue [<xref ref-type="bibr" rid="B1">1</xref>] repository with metadata describing over 2200 WS (November 2011).</p>
    <p>The potential of using WS to support biomedical research has been widely reported. For example, in [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>], WS are used to establish genome-disease associations which are necessary for patient genome sequencing to support determination of diagnosis or therapy. In [<xref ref-type="bibr" rid="B4">4</xref>], semantics are used to enrich the patient record system, in particular for tasks related to drug prescription (drug interactions, medical insurance coverage for the drug etc.). The authors show how web-services can be used to communicate information between the legacy systems and databases.</p>
    <p>However, sending the output from a WS to another WS (i.e. as workflows or pipelines) is complex because of differences in WS communication protocols (varying from SOAP [<xref ref-type="bibr" rid="B5">5</xref>] to WS using REST [<xref ref-type="bibr" rid="B6">6</xref>] principles) and data formats (for example FASTA [<xref ref-type="bibr" rid="B7">7</xref>], GenBank [<xref ref-type="bibr" rid="B8">8</xref>] and FASTQ [<xref ref-type="bibr" rid="B9">9</xref>]). WS metadata describing tool inputs and outputs and syntax description of formats (datatypes) in shared repositories simplifies the development of user-friendly client software that can combine WS as workflows [<xref ref-type="bibr" rid="B10">10</xref>]. With such metadata, it is also possible to apply tools such as ReadSeq [<xref ref-type="bibr" rid="B11">11</xref>] to automatically transform biological sequence data between formats.</p>
    <p>This paper describes a software framework (MAPI) which provides support for WS integration. MAPI addresses the following aspects of WS integration and usage:
</p>
    <p>· Management and discovery of WS instances in metadata registries</p>
    <p>· Unification of WS metadata</p>
    <p>· WS invocation (execution) and data format conversion.</p>
    <p>In [<xref ref-type="bibr" rid="B12">12</xref>] we showed how MAPI facilitates client development by allowing the developers to focus on GUI aspects. This paper gives complementary background and details, in particular with respect to the metadata schema in MAPI (see Section “Common (shared) model”) and aspects related to addressing heterogeneity in WS and user data (see Section “Seamless data format transformation”). Additionally, this paper exemplifies the usage of MAPI functions for a simple use case (see Section “Use Case– Homologous Protein Finder”) and discusses the role of MAPI in biomedical settings where there are strong requirements for security (see Section “Potential of using WS in biomedicine”).</p>
    <p>We will discuss the role of MAPI in the biomedicine domain where a wide variety of formats, protocols and tools are used [<xref ref-type="bibr" rid="B13">13</xref>]. As a proof of concept, MAPI provides support for BioMOBY WS [<xref ref-type="bibr" rid="B14">14</xref>], WSDL – described SOAP WS (for example, from European Bioinformatics Institute, EBI [<xref ref-type="bibr" rid="B15">15</xref>] and DNA Data Bank of Japan, DDBJ [<xref ref-type="bibr" rid="B16">16</xref>]), Taverna [<xref ref-type="bibr" rid="B17">17</xref>] workflows, WS from INB [<xref ref-type="bibr" rid="B18">18</xref>] and ACGT [<xref ref-type="bibr" rid="B19">19</xref>] projects.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <p>This section gives an overview of the MAPI software framework and its novel characteristics. The MAPI framework covers functionality related to service-oriented architectures, in particular management of metadata for WS, datatypes, data, files and users. We will describe the modules (components) and their overall functionality.</p>
    <sec>
      <title>BioMOBY datatype taxonomy</title>
      <p>It is quite common that the results from one WS invocation must be further analyzed using other web-services. The standard BioMOBY [<xref ref-type="bibr" rid="B14">14</xref>] aims to simplify this task by defining a shared datatype taxonomy and a standardized web-service protocol. The taxonomy follows the object-oriented paradigm where data types are related to other data types. Data types can inherit parts from another data type and add additional structure/attributes by including (containing) or consisting of arrays of other data types. For example, the datatype GenericSequence from the datatype taxonomy of BioMOBY MobyCentral inherits from VirtualSequence the attributes id (String) and namespace (String) and length (Integer). GenericSequence adds a new attribute called SequenceString (String) which contains the actual sequence characters.</p>
    </sec>
    <sec>
      <title>Modules</title>
      <p>MAPI modules and their metadata schemas are based on concepts related to WS (e.g., tool, datatype, endpoint, parameter, etc.) and relationships between WS concepts (e.g., the datatype of a parameter). For details about the schemas, please see Figure <xref ref-type="fig" rid="F1">1</xref> and Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>: Supplementary material (“Internal data models”).
</p>
      <fig id="F1" position="float">
        <label>Figure 1</label>
        <caption>
          <p><bold>MAPI architecture. </bold>The figure shows the different software components which comprise the overall framework. Each module has one or several accesses. The Workers, Formatters and Loaders enable the Execution and Data modules to invoke services following different service protocols and data formats respectively.</p>
        </caption>
        <graphic xlink:href="2041-1480-4-4-1"/>
      </fig>
      <p>The following modules are available:
</p>
      <p>• <italic>Tool</italic>: A tool is an abstract grouping of software components used to solve a specific type of problem. Several types of tools are supported in this module; examples include locally available applications (on a client machine), remotely accessible WS or even complex workflows. Each tool has one or more operations. Each operation has one or more input/output parameters. Each parameter is associated with a specific datatype.</p>
      <p>• <italic>ToolLocation</italic>: Each Tool instance can have one or many ToolLocation instances representing service endpoints (mirrors). Note that the instances can specify different WS communication protocols (for example BioMOBY or SOAP) for the same abstract Tool. Multiple endpoints help to create robust and fault-tolerant clients because it is possible to call another endpoint when one or more are not available. The module also provides access to information about the host machine of the endpoint (such as memory, bandwidth etc.).</p>
      <p>• <italic>Datatype</italic>: This module manages the shared taxonomy of datatypes. Using such taxonomy is essential for WS interoperability because it obligates WS providers to adhere to the taxonomy. By declaring that a WS works with a specific datatype in the ontology, WS providers guarantee that the WS is able to process data of a specific datatype (or compatible datatypes based on inheritance as declared in the taxonomy). MAPI has taken the approach used in BioMOBY a as base for the DataType module: inheritance (IS relation) and HAS and HASA relations.</p>
      <p>• <italic>Functional categories</italic>: This module organizes functional categories in taxonomy. A functional category is a keyword with semantic properties that can be hierarchically arranged. The arrangement is structured in such a way that each resource can be annotated with one or more keywords, from descriptions that range from very specific to generic.</p>
      <p>• <italic>Namespaces</italic>: The namespace module stores information about data provenance (data sources). Namespaces provide a method to place resources in context by qualifying elements and attribute names.</p>
      <p>• <italic>Data</italic>: This module deals with the management of structured data. Internally, the module transforms user data from different data formats to a common, structured data format (as defined in the datatype module). Clients can programmatically extract different parts of the structured data (using components called Loaders) and/or export data to different formats (using components called Formatters).</p>
      <p>• <italic>File System</italic>: This module provides an abstract view of files and folders and permits client software to read and write files/directories regardless of where or how they are physically stored.</p>
      <p>• <italic>Execution</italic>: This module provides mechanisms to invoke the tools defined in the Tool and ToolLocation modules. The set of supported tools can be extended by independent plug-ins called Workers and are in charge of actually invoking the tools.</p>
      <p>• <italic>Statistics</italic>: This module is used to record and provide statistics about tool usage. This information can be used to analyze the behavior of endpoints (mirrors), identify which endpoints is most frequently used etc. in order to implement more efficient scheduling algorithms.</p>
      <p>• <italic>Users</italic>: This module provides the functionality required for handling information about persons (users, data owners or tool providers) and institutions associated with resources. The main strength of this module is its ability to combine with any of the others modules to produce ‘secure versions’, where the access to information (read/write) is restricted based on user rights.</p>
    </sec>
    <sec>
      <title>Functionality</title>
      <p>The functionality of each module has been designed around the resource it manages (e.g., users, files, tools, data types). Each module provides methods for accessing, querying and editing metadata. The main functionalities of the modules are:</p>
      <p>1. <italic>Retrieval of Resources/Information</italic> (all modules): metadata for a specific resource or all resources (lists) can be retrieved.</p>
      <p>2. <italic>Filtering</italic> (all modules): all lists of resources retrieved by the modules can additionally be filtered so that the resources satisfy different criteria (extendable by writing new filters).</p>
      <p>3. <italic>Hierarchical Browsing</italic> (File system and Functional categories): for modules that handle resources organized in a taxonomy, the framework provides the functions needed to browse the resources as a tree and change the parent/child relations of the resources (i.e. modifying the taxonomy).</p>
      <p>4. <italic>General Editing</italic> (all the modules): every module has methods for adding new resources. In the same way, resources can be deleted and it is possible to configure whether dependent resources will also be deleted in a cascade fashion or whether deletion will be rejected while the dependences exist. Finally, the values of resource attributes can be modified.</p>
      <p>5. <italic>Compatibility Search</italic> (Tools, Data and Datatypes): the framework provides functions for finding compatible WS based on the parameter datatypes.</p>
      <p>6. <italic>Data Formatting</italic> (Data): the data module has functions for managing the formatters available in the system and converting user data between different formats.</p>
      <p>7. <italic>Task Invocation</italic> (Execution): The Execution module manages sub-components (workers) which are able to execute/invoke different types of tools (WS, workflows etc.).</p>
      <p>8. <italic>Task Querying</italic> (Execution): This module lets software developers query status and obtain results/statistics from service executions.</p>
      <p>A detailed list of the functionality of each module is available at <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/mapi/">http://www.bitlab-es.com/mapi/</ext-link>.</p>
    </sec>
    <sec>
      <title>Model characteristics</title>
      <p>This section describes the main characteristics of the MAPI framework. The design of MAPI has been focused on providing a common and generic model of WS metadata, with the minimal set of metadata necessary to construct client software.</p>
    </sec>
    <sec>
      <title>A flexible modular model</title>
      <p>Models for different aspects of WS metadata are separated in different modules and can be combined to adapt to a specific requirement. Because some modules require information from another module, the modules are not totally independent. For example, the Tool module requires the Datatype module to provide the definition of data types used for the parameters of tools defined in the Tool module.</p>
      <p>Each module has two layers: Access and Interface. The Access layer is in charge of mapping the information from the data model used in the source repository to the model used in MAPI, while the Interface defines the protocol and programmatic method used by clients to access the functionality of the module (i.e. the public API).</p>
      <p>Communication between these two layers is carried out using a common, internal interface.</p>
      <p>In addition to the two main layers, it is possible to add more layers (following the same internal interface) to supply new features, such as a cache. Adding more layers does not affect the Interface layer (for example, software clients only need to update the configuration to enable caching).</p>
      <p>This separation in layers allows flexible clients to be developed. This can be seen in Figure <xref ref-type="fig" rid="F2">2</xref>, where two different clients share the same access code but are configured to use a different set of tools.
</p>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p><bold>Setup for two clients. </bold>Two clients have instantiated MAPI modules. Client 1 has two instances of the Tool Module, one where the Interface layer communicates with repository A through Access A and another where it communicates with repository B through Access B. Client 2 only has one instance which communicates to Repository B through Access B. Note that the interface for both clients is always the same, regardless whether they are communicating with repository A or B. The Access B code is also the same for both clients (i.e. the access needs to be developed only once). The specific configuration in each client is controlled through the configuration file. Note that it is necessary to use more modules than only the Tool Module (which needs, at least, the ToolLocation, DataType and FunctionalCategory modules). However, for simplification we only show instances of the Tool Module.</p>
        </caption>
        <graphic xlink:href="2041-1480-4-4-2"/>
      </fig>
    </sec>
    <sec>
      <title>Common (shared) model</title>
      <p>By allowing software developers to work with a shared and common model of WS metadata, it becomes much simpler to construct client software which is able to work with different types of WS because the complexity and heterogeneity in service-oriented architectures are dealt with by MAPI, not by the client software code directly.</p>
      <p>Configurations for several taxonomies are supplied with the standard distribution of MAPI (for example, the main BioMOBY MobyCentral taxonomy <ext-link ext-link-type="uri" xlink:href="http://www.biomoby.org">http://www.biomoby.org</ext-link> or the INB taxonomy <ext-link ext-link-type="uri" xlink:href="http://www.inab.org">http://www.inab.org</ext-link>). However, please note that MAPI is not limited to using a specific datatype or functional category taxonomy since writing new configurations can extend the set of taxonomies available for MAPI.</p>
      <p>Similar conditions apply to functional categories. In itself, MAPI does not specify any functional categories but can be configured to use external sources, such as those found in BioMOBY MobyCentral. For example, a user interested in finding services performing a certain task could browse the service tree using a graphical tool which, in turn, uses MAPI functions getFunctionalCategoryRoots to obtain the roots of the taxonomy and recursively call the getChildren and getTools methods for the FunctionalCategory instance to obtain the functional category instances (children) which inherit from the instance and the tools annotated with the instance respectively. Client software uses the same API calls to obtain this information, regardless of which service catalogue is used. MAPI will use the relevant access depending on the configuration.</p>
    </sec>
    <sec>
      <title>Extensibility of data model</title>
      <p>Naturally, it is not realistic to establish a data model which successfully predicts all future requirements and WS standards. Therefore, the data model in MAPI is extensible. Additional modules can be implemented for new concepts without affecting existing modules. If some feature is necessary for an existing module, it is possible to extend the existing module (with a new module) and add the new feature (i.e. feature inheritance between modules).</p>
    </sec>
    <sec>
      <title>Seamless data format transformation</title>
      <p>As has been mentioned earlier, biomedicine is an example of a research field where a multitude of tools produce and consume many different data formats. One example of such dispersion is a multitude of formats for biological sequence data. This dispersion limits the feasibility of interconnecting WS which require or produce data in different sequence formats.</p>
      <p>The data module in MAPI represents structured user data with methods to read, navigate and modify the data structure (this can be compared to APIs to navigate and modify XML DOM trees).</p>
      <p>Modifications to the data structure can be applied automatically with two types of MAPI components, Loaders and Formatters. Both types of components are applied based on the datatype taxonomy (inheritance) without user intervention. Components configured to work on a specific parent datatype will also be applied to any data of child datatypes.</p>
      <p>Loaders are able to modify the data structure (as defined in the datatype module) of user data. This enables data to be represented in a generic way, but still be compatible with requirements of particular data standards. For example, in BioMOBY, sequences contain several fields besides the actual sequence data: every data object in BioMOBY must have two attributes (identifier and namespace), and every sequence must also contain explicitly the length of the sequence data. When MAPI loads raw sequence data and is asked to produce this data in the BioMOBY format, two loaders are applied seamlessly (without the need for programmers to specify this) to include the required attributes and calculate/add the length of the sequence data. The loader component which adds the two required attributes is always invoked for all BioMOBY data (it is configured to be applied to any data which inherits from the base class; in essence all BioMOBY data). It is possible to develop new loaders and to configure when they are used.</p>
      <p>Formatters, also extensible and configurable, are responsible for the serialization of the generic data structure to the actual data format (for example, BioMOBY data is serialized as XML).</p>
      <p>Efforts to provide mechanisms for data format transformation exist (see for example [<xref ref-type="bibr" rid="B11">11</xref>]), but the approach in MAPI is – to our knowledge – unique in the sense that software developers can specify a set of formatters and loaders (in essence a set of rules) which are applied seamlessly when connecting services.</p>
    </sec>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>This section will discuss some aspects of the design and implementation of MAPI. The first part provides a case study and gives an overview of the features provided by other systems in comparison with MAPI. The second part comments on different types of service and data heterogeneity, and the mechanisms that MAPI provides to address this.</p>
    <sec>
      <title>Clients implemented using MAPI</title>
      <p>MAPI is a software framework aiming to simplify WS integration and client development. The usefulness of MAPI in practice for biomedicine is therefore best represented in higher-level clients implemented using MAPI. In [<xref ref-type="bibr" rid="B12">12</xref>], we showed how the MAPI framework can be used to build complex clients. One notable example is jORCA [<xref ref-type="bibr" rid="B20">20</xref>] which uses MAPI in different ways: for example the Datatypes, Namespaces and WS trees are built using the DataTypes, Namespaces, Tools and FunctionalCategory modules. In this sub-section, please refer to Table <xref ref-type="table" rid="T1">1</xref> for functionalities referenced. For each module, jORCA asks for the list of tools, datatypes and namespaces (functionality 1) and for relations with the FunctionalCategories (functionality 3). jORCA also makes use of the Filtering functionality (functionality 2) for the quick-search tool; and using the ToolModule, jORCA is able to quickly retrieve the list of compatible tools for a selected datatype (functionality 5). The Execution module along with the ToolLocation module is essential to execute and monitor tools in a transparent way to the final user (functionality 7 and 8).
</p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Features available in different systems. Legend: [✓] Supported; [NA] Not Available; [L] Limited; [OG] On-Going</p>
        </caption>
        <table frame="hsides" rules="groups" border="1">
          <colgroup>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
            <col align="left"/>
          </colgroup>
          <thead valign="top">
            <tr>
              <th align="left">
                <bold>Functionality</bold>
              </th>
              <th align="left">
                <bold>MAPI</bold>
              </th>
              <th align="left">
                <bold>BioMOBY</bold>
              </th>
              <th align="left">
                <bold>Globus</bold>
              </th>
              <th align="left">
                <bold>UDDI</bold>
              </th>
              <th align="left">
                <bold>Feta</bold>
              </th>
              <th align="left">
                <bold>WSMX</bold>
              </th>
              <th align="left">
                <bold>SADI</bold>
              </th>
            </tr>
          </thead>
          <tbody valign="top">
            <tr>
              <td align="left" valign="bottom">1. Retrieval resources<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">2. Querying<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">3. Filtering<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">4. Compatibility search<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">5. Retrieval information<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">6. Browsing tree<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">7. Data Formatting<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">8. Task invocation<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">9. Task query<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">10. Task scheduling<hr/></td>
              <td align="left" valign="bottom">OG<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">11. Adding resources<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">12. Delete resources<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">13. General aditing<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">NA<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">L<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
              <td align="left" valign="bottom">✓<hr/></td>
            </tr>
            <tr>
              <td align="left">14. Support reasoners</td>
              <td align="left">OG</td>
              <td align="left">✓</td>
              <td align="left">NA</td>
              <td align="left">NA</td>
              <td align="left">✓</td>
              <td align="left">✓</td>
              <td align="left">✓</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>The functions for information retrieval and filtering can be used to implement software for WS discovery and composition, such as Magallanes [<xref ref-type="bibr" rid="B21">21</xref>]. Magallanes is a discovery engine that uses MAPI to access information (functionality 1) stored in different repositories. MAPI also makes intensive use of the search for compatible WS with a datatype in the Tool module for the automatic generation of workflows (functionality 5). Magallanes is also available as a plugin for jORCA.</p>
    </sec>
    <sec>
      <title>Use case – homologous protein finder</title>
      <p>In this scenario, a bioinformatician has obtained a protein sequence and wishes to know whether this protein has been isolated in another species or even if the protein has any isoform into the same species being studied. The bioinformatician knows the protein identifier and wishes to search in a database for additional information. This example is obviously basic and only involves retrieving the sequence from a database and then comparing that sequence against other known sequences but the purpose of this use case is to illustrate the usage of MAPI functionality (API calls).</p>
    </sec>
    <sec>
      <title>Actors</title>
      <p>• WS provider</p>
      <p>• Bioinformatician</p>
    </sec>
    <sec>
      <title>Steps</title>
      <p>1. The WS provider deploys two BioMOBY WS with the following metadata:</p>
      <p>a. Name <italic>getAminoAcidSequence</italic>: input <italic>id</italic> type <italic>Object</italic>, output <italic>sequence</italic> type <italic>AminoAcidSequence</italic></p>
      <p>b. <italic>Name runRPSBlast</italic>: input <italic>sequence</italic> type <italic>GenericSequence</italic>, output <italic>blast_report</italic> type <italic>BLAST-Text</italic></p>
      <p>2. The WS provider registers (see Figure <xref ref-type="fig" rid="F3">3</xref>) the corresponding WS metadata using the Flipper application [<xref ref-type="bibr" rid="B22">22</xref>] which, in turn, uses the following MAPI functions ToolModule:newTool, Tool:addOperation, Tool:addParameter (in that order) to add an abstract definition of the WS and ToolLocationModule:newToolLocation to add specific details related to the protocol (in this case BioMOBY), such as the endpoint where the WS was deployed.
</p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Registering a service using Flipper. </bold>This shows the metadata necessary for registering the service runRPSBlast. The application Flipper used in this screenshot utilizes MAPI functions to register the service in a BioMOBY service registry.</p>
        </caption>
        <graphic xlink:href="2041-1480-4-4-3"/>
      </fig>
      <p>3. The bioinformatician uses the WS client jORCA (please see Section “Clients implemented using MAPI”). She searches for a potential path from input datatype <italic>Object</italic>, output datatype <italic>BLAST-Text</italic>. This is performed by the Magallanes components (see Figure <xref ref-type="fig" rid="F4">4</xref>) which, using MAPI functions, obtains a representation of the output datatype (DataTypeModule:getDataType), asks the ToolModule which tools produce an instance of this datatype (using calls to ToolModule:getToolList, Tool:getOperations, Operation:getParameters to obtain instances of Parameter), looks at the datatypes of those parameters etc. until it finds an optimum “path” between the requested input and output datatypes. In this case, the datatypes differ slightly (the input datatype of <italic>runRPSBlast</italic> is not the same as the output datatype of <italic>getAminoAcidSequence</italic>). However, since tools in BioMOBY can accept data instances with subtypes of their declared input datatypes, Magallanes can determine that the services are compatible using calls to DataType:isSubtypeOf (<italic>AminoAcidSequence</italic> is a subtype of <italic>GenericSequence</italic>). The datatype ontology from INB is a good example of an ontology that would give good results for this service composition. Obviously this pipeline is very simple (only two services) but a more advanced example, together with details about this procedure, can be found in [<xref ref-type="bibr" rid="B21">21</xref>]. More complex service compositions could be imagined for other services and datatypes where the formats differ (in this specific example both services required BioMOBY formatted XML). In more complex cases, MAPI would apply Formatters and Loaders to (if possible) make the data compatible for the next service in the pipeline. Please see the MAPI API documentation and example code snippets in additional files from [<xref ref-type="bibr" rid="B9">9</xref>] for further details on this process.
</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Discovering a workflow using Magallanes. </bold>This shows how a pipeline can be generated using Magallanes. The application uses MAPI functions to discover the workflow. In many cases, there are several possible paths (compatible services). In those cases, the user can select the most appropriate service (see [<xref ref-type="bibr" rid="B17">17</xref>] for details). Please note that MAPI recognizes that the services <italic>getAminoAcidSequence</italic> and <italic>runRPSBlast</italic> can be connected even if the output datatype of <italic>getAminoAcidSequence</italic> is <italic>AminoAcidSequence</italic> and the input datatype of <italic>runRPSBlast</italic> is <italic>GenericSequence</italic>. This is possible because of the inheritance relation between the datatypes (<italic>AminoAcidSequence</italic> ISA <italic>GenericSequence</italic>).</p>
        </caption>
        <graphic xlink:href="2041-1480-4-4-4"/>
      </fig>
      <p>4. Once the tool composition (i.e. pipeline) has been identified, the bioinformatician can enact the pipeline from within jORCA. jORCA knows which input parameters are necessary by using MAPI to obtain the necessary parameters for the first WS using the MAPI function Operation:generateInterface.</p>
      <p>5. Once the bioinformatician has provided the necessary input (see Figure <xref ref-type="fig" rid="F5">5</xref>) and started execution with jORCA, the relevant MAPI worker for the service will be called automatically when calling the ExecutionModule:addTask method.
</p>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>Enacting a workflow using jORCA. </bold>This shows how the workflow generated in Figure <xref ref-type="fig" rid="F4">4</xref> can be enacted using jORCA. The user is required to enter the initial input data for <italic>getAminoAcidSequence</italic> and can, if necessary, modify secondary parameters to fine-tune the enactment.</p>
        </caption>
        <graphic xlink:href="2041-1480-4-4-5"/>
      </fig>
      <p>6. Once running, jORCA will continuously ask the Task object produced by the previous addTask method for the status and, eventually, the results.</p>
      <p>This brief example shows the main functionality of MAPI with regards to WS registration, discovery and invocation.</p>
    </sec>
    <sec>
      <title>Dealing with heterogeneity</title>
      <p>The main goal of the MAPI framework is to enhance interoperability and compatibility between different technologies by acting as a bridge for their combined use. It is necessary to consider the following aspects in order to combine WS:</p>
      <p>1. Syntactic heterogeneity: differences in data formats and service protocols</p>
      <p>2. Semantic heterogeneity: differences in the meaning of concepts</p>
      <p>MAPI provides metadata which can be used for syntax-based searches (plain-text descriptions of WS functionality) and searches based on semantics (classification of functionalities or WS input/output datatypes). Such datatype metadata can be used to dynamically compose different WS into workflows.</p>
      <p>If we combine WS which use and produce data in different formats, we have to take into account several aspects:
</p>
      <p>• Different names/identifiers, which could be handled in MAPI by adding another Access layer where the identifiers are mapped. For example, most DDBJ [<xref ref-type="bibr" rid="B16">16</xref>] service parameters were declared in their WSDL as plain strings. Therefore, we have annotated the parameters with (semantic) datatypes used in the INB service registry in the Access layer implemented for this repository. This enables clients to perform more exact WS discovery (and WS composition).</p>
      <p>• Differences in data structure and format, which could be handled by the use of Loaders in MAPI. Loaders are able to modify the structure of a given datatype in order to adapt it to a new structure. For example, as was noted earlier, sequences in BioMOBY contain information about the length of the sequence, whereas standard formats such as FASTA do not. When using the BioMOBY datatype taxonomy in MAPI, sequences in FASTA format are loaded and structured according to the datatype model for sequences (one part with the sequence and another with the calculated length of the sequence). We have several implementations of heuristics based on rules and regular expressions [<xref ref-type="bibr" rid="B23">23</xref>], which can recognize biological sequences in different formats. Other heuristics can be specified to recognize further formats like PDB formats, Blast- or ClustalW-outputs. These heuristics allow software clients to recognize raw input data and suggest a reasonable classification to the user. Similar efforts have been undertaken with shim-services in myGrid [<xref ref-type="bibr" rid="B24">24</xref>].</p>
    </sec>
    <sec>
      <title>Limitations</title>
      <p>In this section, we will discuss limitations in the MAPI approach and give examples of specific solutions.</p>
    </sec>
    <sec>
      <title>Model differences</title>
      <p>To add support for new standards or systems, it is necessary to map the new information to be added to the model of the module in question. For example, for mapping WSDL-described WS, it was necessary to map the contents in WSDL to the Tool, ToolLocation and Datatype modules (this task took one person approximately one week to complete these accesses). Note that once the code has been developed, it can be re-used for different services: for example, MAPI uses the same access to obtain metadata about EBI web-services as it does for WABI web-services.</p>
      <p>However, in some cases, it is not possible to make a complete mapping from the original source to MAPI. For example, in the data model of MAPI, all WS are considered to have operations but BioMOBY WS do not conceptually provide operations. Therefore, we created a virtual operation in the MAPI representation of BioMOBY WS. So far, we have not encountered major problems related to modelling differences when developing access components for new service types.</p>
    </sec>
    <sec>
      <title>Functionality differences</title>
      <p>As can be seen in Table <xref ref-type="table" rid="T1">1</xref>, it is difficult to agree on a general set of features for all systems. For example, in the case of BioMOBY, metadata editing is not supported in the API. Therefore, the BioMOBY access provides this functionality by de-registering and registering the metadata instance again with the modified information in a transparent way for the software developer. This method raises the possibility of information inconsistency because the resource can be related with other resources. In this case, de-registering temporarily leaves the repository in an inconsistent state. However, as de-registering and subsequent re-registering is almost immediate, no information inconsistency in the BioMOBY repository has been reported so far.</p>
    </sec>
    <sec>
      <title>Format conversions</title>
      <p>MAPI supports plug-ins, which facilitate the interoperation of data in multiple formats. This is possible with many formats, but in some cases the conversion is incomplete since the target format does not support the complete data. For example, a gene sequence can be extracted from a GenBank record and then exported as a BioMOBY object, but the process cannot be reversed since the information discarded from the GenBank record cannot be recovered. This problem is, however, not specific to MAPI and is impossible to avoid because the data formats support different amounts of information.</p>
      <p>Format conversion simplifies the integration of heterogeneous WS in many cases, but the approach with loaders/formatters is not possible in all cases. For example, because the Loaders load the full user data into the main memory, huge data sets are not feasible because of memory limitations. However, this depends on the loader implementation. MAPI only provides the interface and does allow extensions of the functionality. For larger data sets, it would be possible to implement a loader which only loads parts of the data “on-demand” into memory and avoids loading the entire dataset at once.</p>
    </sec>
    <sec>
      <title>Future work</title>
      <p>In our opinion, WS for biomedical applications must support user authentication, transport encryption, call-by-references and long-running data processing.</p>
      <p>Initial work has been started for MAPI to support these requirements. MAPI now support RESTful WS protocol deployed on cloud computing platforms through a new worker implementation [<xref ref-type="bibr" rid="B25">25</xref>]. This worker is able to communicate with the WS using user credentials (please see the MAPI tutorial pages for more information about this worker). The worker does not send data directly to the WS but instead sends a data reference which the WS uses to retrieve and process the data. Because some data processing can take considerable time, the communication with the service is split in several steps, submitting the input data references, polling for status and, finally, retrieving the resulting data references. These new developments for MAPI show the flexibility of the suggested architecture: registering service parameters as “data references” and supporting a new WS protocol.</p>
    </sec>
    <sec>
      <title>Alternatives to MAPI</title>
      <p>In order to illustrate the coverage of MAPI (in terms of functionality) in comparison with the state-of-the-art frameworks, we evaluated several software frameworks with similar functionalities (see Table <xref ref-type="table" rid="T1">1</xref>): BioMOBY, Globus [<xref ref-type="bibr" rid="B26">26</xref>], UDDI [<xref ref-type="bibr" rid="B27">27</xref>], Feta [<xref ref-type="bibr" rid="B28">28</xref>], WSMX [<xref ref-type="bibr" rid="B29">29</xref>] and SADI [<xref ref-type="bibr" rid="B30">30</xref>]. Many frameworks do not support all functionalities. For example, the API of BioMOBY datatypes only supports querying for the derived datatypes of a certain datatype but not for the parent datatypes (functionality 3). WS can be tagged in standard UDDI systems to indicate functionally, but such tags are not organized hierarchically (functionality 3). It is therefore difficult to use Table <xref ref-type="table" rid="T1">1</xref> as a direct way to compare MAPI with the state-of-the-art and it should instead be used as an indication of the functionality coverage of the frameworks in question.</p>
      <p>As we mentioned previously, the BioMOBY framework inspired MAPI. SADI, a recent evolution of BioMOBY, aims to simplify publication and integration of stateless, independent and transformative WS in bioinformatics. SADI advocates a set of best-practices and guidelines which simplify WS composition (chaining). Among those sets of best-practices we can note that SADI WS use HTTP standard operations (for example submitting data is a POST operation and WS descriptions can be obtained via a GET operation). These WS descriptions basically follow the MyGrid/BioMOBY pattern but with references to OWL ontologies for the input/output parameters. The WS descriptions are also available at a public registry which provides a central point for client software during discovery of available SADI WS. SADI WS accept and return RDF messages which are instances of the OWL classes declared in the service descriptions. One side-effect is that SADI WS calls can be made “by reference” simply by letting the instance contain a URI to some external data source.</p>
      <p>In many ways, SADI extends the BioMOBY standard; it uses the same service description class as BioMOBY/MyGrid but has moved from using SOAP as a protocol to HTTP standard operations (GET, POST) and to sending RDF data instead of the non-standardized formatting of BioMOBY. Service parameters are annotated with the semantic datatype like in BioMOBY, but are generalized to use any ontology. SADI defines its core metadata according to BioMOBY/MyGrid, which is also the inspiration for the MAPI core metadata set.</p>
      <p>It is difficult to compare SADI and MAPI because they fundamentally aim at different things: SADI is a set of best-practice guidelines and reference implementations aiming to simplify publishing semantically well-described services, while MAPI is a software framework for building clients wishing to use different types of WS standards and metadata registries. MAPI is designed to work with any web-service or service metadata registry regardless of the protocol, while SADI recommends a specific protocol.</p>
      <p>Another popular tool for computational analysis of genomic data is the Galaxy platform [<xref ref-type="bibr" rid="B31">31</xref>]. The aim of Galaxy differs from MAPI; the former provides a web-based workbench for storing and sharing data aimed at end-users (bioinformaticians), while the latter is a framework, which provides a uniform representation of resources available over the Internet, in particular for Web Services. One goal of Galaxy is to make computation accessible for end-users without programming knowledge. MAPI requires programming knowledge and is aimed at software developers developing programs. Much, but not all, of the functionality of Galaxy is provided in MAPI by external software clients such as jORCA and Flipper which both use MAPI. jORCA, for example, also aims to be accessible and useful for non-programmers. Like Galaxy, jORCA presents tools in a standardized interface. In the case of jORCA, this is possible because it uses the standard view of tools in MAPI where all tools are presented the same.</p>
      <p>However, a detailed discussion is outside of the scope of this paper. For a more complete summary of the functionality of external software clients for MAPI, we refer to their respective papers (jORCA [<xref ref-type="bibr" rid="B20">20</xref>], Magallanes [<xref ref-type="bibr" rid="B21">21</xref>]).</p>
      <p>In Additional file <xref ref-type="supplementary-material" rid="S2">2</xref>: Supplementary Material (“Comparing WSMX with MAPI”), we discuss the approach taken in WSMX compared to the one of MAPI.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusions</title>
    <p>Internet has boosted the development of numerous resources that are remotely accessible in diverse application domains. For this reason, the need for discovering the right WS for data processing is increasingly urgent and so is the ability to uniformly invoke different WS and combine them to create complex workflows.</p>
    <p>In this paper, we have described a framework for developing clients which integrate different resources and systems. This work is an effort toward integrating different tools, repositories and data sources into a unique, flexible and extensible system. To meet these objectives, the system masks the differences in the information structure used by the different resources and provides a uniform representation of such resources to the software developer.</p>
    <p>The framework is organized into independent modules which can be combined in different ways. This design is flexible, extensible and proportional. It is flexible in the sense that it can be used to model different types of systems. It is extensible in the sense that new descriptors and even new modules can be developed to provide new functionalities or access new resources. Finally, it is proportional in the sense that developers only need to install those modules which implement the needed functionality.</p>
    <p>Every module consists of at least two layers: one layer for reading and writing metadata from their original source (Access) and another layer to expose the data in a uniform way (Interface). The inclusion of new implementations of Access and Interfaces allows the extension to new repositories or new concepts respectively.</p>
    <p>Our framework also addresses data heterogeneity (from the point of view of data formats). MAPI attempts to simplify the use of data in different data formats in the following ways:
</p>
    <p>• A configurable and extensible set of heuristics can be used to recognize the data format of user provided data.</p>
    <p>• A configurable and extensible set of formatters/loaders which are able to read a user data file in a given format and access/modify data in a structured way (mapped to the MAPI internal data model as defined in the datatype module).</p>
    <p>This is only a partial solution to data heterogeneity and we recognize that this is still an open problem.</p>
    <p>As a proof of concept, MAPI provides support for BioMOBY WS, WSDL–described SOAP WS (for example, from European Bioinformatics Institute, EBI and DNA Data Bank of Japan, DDBJ), Taverna workflows, WS from the INB and ACGT projects.</p>
    <p>MAPI modules have been successfully used to implement a set of tools targeted at the biomedical domain, a field which uses a large number of formats, protocols and types of tools. These tools range from the simplest, such as a format parser or a file browser, to the more complex, such as a complete tool for the discovery of WS (Magallanes) or a full software suite for the execution of tools (jORCA).</p>
    <p>We plan to extend MAPI with access to WS registries such as BioCatalogue [<xref ref-type="bibr" rid="B1">1</xref>] and the SADI registry and metadata [<xref ref-type="bibr" rid="B30">30</xref>]. Additionally, we are planning to develop a worker component to invoke SADI WS.</p>
    <p>WS support machine-to-machine interoperability over a network. However, a weakness of this approach is that WS can differ in their definition, invocation protocols, communication and data formats, preventing service interoperability. MAPI contributes to the ‘high level’ integration of bioinformatics WS by offering a unique model to represent WS and providing the functionality to create client software able to work with different types of WS.</p>
    <sec>
      <title>Availability and requirements</title>
      <p><bold>Project name:</bold> Modular API (MAPI)</p>
      <p>
        <bold>Project home page:</bold>
        <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/mapi/">http://www.bitlab-es.com/mapi/</ext-link>
      </p>
      <p><bold>Operating system(s):</bold> Platform independent</p>
      <p><bold>Programming language:</bold> Java</p>
      <p><bold>Other requirements:</bold> None</p>
      <p><bold>Licence:</bold> MAPI binaries and documentation are under the <italic>Creative Commons Attribution-No Derivative Works 2.5 Spain</italic> license and MAPI source code is available under <italic>GPL v3</italic> license.</p>
      <p><bold>Any restrictions to use by non-academics:</bold> None</p>
    </sec>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interest.</p>
  </sec>
  <sec>
    <title>Authors’ contributions</title>
    <p>JK has coordinated the manuscript and the adaption of MAPI for the ACGT project [<xref ref-type="bibr" rid="B19">19</xref>]. OT has coordinated and organized the entire development process. Both authors have been involved in the drafting of the manuscript, read and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>Supplementary Material Internal Data Model. </bold>This document describes in detail the metadata model used in MAPI.</p>
      </caption>
      <media xlink:href="2041-1480-4-4-S1.pdf" mimetype="application" mime-subtype="pdf">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S2">
      <caption>
        <title>Additional file 2</title>
        <p><bold>Supplementary Material Comparing WSMX with MAPI. </bold>This document describes in detail the metadata model used in MAPI and a comparison of WSMX and MAPI.</p>
      </caption>
      <media xlink:href="2041-1480-4-4-S2.pdf" mimetype="application" mime-subtype="pdf">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>This work has been partially supported by the Spanish National Institute of Bioinformatics (INB) and the RIRAAF network (RD07/0064/0017).</p>
    <p>We would also like to thank our colleagues for their contributions and comments which have helped to improve MAPI, in particular Javier Rios, Maximiliano Garcia, Oscar Torreño, Victoria Martin Requena and Sergio Ramirez.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Bhagat</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Tanoh</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Nzuobontane</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Laurent</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Orlowski</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Roos</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Wolstencroft</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Aleksejevs</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Stevens</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Pettifer</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Lopez</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Goble</surname>
          <given-names>CA</given-names>
        </name>
        <article-title>BioCatalogue: a universal catalogue of web services for the life sciences</article-title>
        <source>Nucleic Acids Res</source>
        <year>2010</year>
        <volume>38</volume>
        <issue>suppl 2</issue>
        <fpage>689</fpage>
        <lpage>694</lpage>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Siegel</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Channin</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Integrating the healthcare enterprise: a primer</article-title>
        <source>Radiographics</source>
        <year>2001</year>
        <volume>21</volume>
        <issue>5</issue>
        <fpage>1339</fpage>
        <pub-id pub-id-type="pmid">11553841</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wolinsky</surname>
          <given-names>H</given-names>
        </name>
        <article-title>The thousand-dollar genome. Genetic brinkmanship or personalized medicine?</article-title>
        <source>EMBO Rep</source>
        <year>2007</year>
        <volume>8</volume>
        <issue>10</issue>
        <fpage>900</fpage>
        <pub-id pub-id-type="doi">10.1038/sj.embor.7401070</pub-id>
        <pub-id pub-id-type="pmid">17906669</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="other">
        <name>
          <surname>Sheth</surname>
          <given-names>A</given-names>
        </name>
        <etal/>
        <article-title>Active semantic electronic medical record</article-title>
        <source>Proceedings of the 5th International Semantic Web Conference</source>
        <year>2006</year>
        <fpage>913</fpage>
        <lpage>926</lpage>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="other">
        <collab>SOAP</collab>
        <source>Specification</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.w3.org/TR/soap/">http://www.w3.org/TR/soap/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Fielding</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Taylor</surname>
          <given-names>R</given-names>
        </name>
        <article-title>Principled design of the modern web architecture</article-title>
        <source>ACM Trans Internet Technol</source>
        <year>2002</year>
        <volume>2</volume>
        <issue>2</issue>
        <fpage>115</fpage>
        <lpage>150</lpage>
        <pub-id pub-id-type="doi">10.1145/514183.514185</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="other">
        <collab>FASTA</collab>
        <source>format</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://zhanglab.ccmb.med.umich.edu/FASTA/">http://zhanglab.ccmb.med.umich.edu/FASTA/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Bilofsky</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Burks</surname>
          <given-names>C</given-names>
        </name>
        <article-title>The GenBank® genetic sequence data bank</article-title>
        <source>Nucleic Acids Res</source>
        <year>1988</year>
        <volume>16</volume>
        <issue>5</issue>
        <fpage>1861</fpage>
        <lpage>1863</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/16.5.1861</pub-id>
        <pub-id pub-id-type="pmid">3353225</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Cock</surname>
          <given-names>PJ</given-names>
        </name>
        <name>
          <surname>Fields</surname>
          <given-names>CJ</given-names>
        </name>
        <name>
          <surname>Goto</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Heuer</surname>
          <given-names>ML</given-names>
        </name>
        <name>
          <surname>Rice</surname>
          <given-names>PM</given-names>
        </name>
        <article-title>The Sanger FASTQ file format for sequences with quality scores, and the Solexa/Illumina FASTQ variants</article-title>
        <source>Nucleic Acids Res</source>
        <year>2010</year>
        <volume>38</volume>
        <issue>6</issue>
        <fpage>1767</fpage>
        <lpage>1771</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkp1137</pub-id>
        <pub-id pub-id-type="pmid">20015970</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Karlsson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Martín-Requena</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Ríos</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <article-title>Workflow composition and enactment using jORCA</article-title>
        <source>Lect Notes Comput Sci</source>
        <year>2010</year>
        <volume>6415</volume>
        <fpage>328</fpage>
        <lpage>339</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-642-16558-0_28</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="other">
        <name>
          <surname>Gilbert</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Sequence file format conversion with command-line readseq</article-title>
        <source>Curr Protoc Bioinformatics</source>
        <year>2002</year>
        <comment>Appendix 1E. [<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1002/0471250953.bia01es00">http://dx.doi.org/10.1002/0471250953.bia01es00</ext-link>]</comment>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ramirez</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Karlsson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <article-title>MAPI: towards the integrated exploitation of bioinformatics web services</article-title>
        <source>BMC Bioinforma</source>
        <year>2011</year>
        <volume>12</volume>
        <fpage>419</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-419</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Perez-Iratxeta</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Andrade-Navarro</surname>
          <given-names>MA</given-names>
        </name>
        <name>
          <surname>Wren</surname>
          <given-names>JD</given-names>
        </name>
        <article-title>Evolving research trends in bioinformatics</article-title>
        <source>Brief Bioinform</source>
        <year>2007</year>
        <volume>8</volume>
        <issue>2</issue>
        <fpage>88</fpage>
        <lpage>95</lpage>
        <pub-id pub-id-type="pmid">17077138</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wilkinson</surname>
          <given-names>MD</given-names>
        </name>
        <etal/>
        <article-title>Interoperability with Moby 1.0 - it’s better than sharing your toothbrush</article-title>
        <source>Brief Bioinform</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>3</issue>
        <fpage>220</fpage>
        <lpage>231</lpage>
        <pub-id pub-id-type="pmid">18238804</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Labarga</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Valentin</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Anderson</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Lopez</surname>
          <given-names>R</given-names>
        </name>
        <article-title>Web services at the European Bioinformatics Institute</article-title>
        <source>Nucleic Acids Res</source>
        <year>2007</year>
        <volume>35</volume>
        <issue>suppl 2</issue>
        <fpage>6</fpage>
        <lpage>11</lpage>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kwon</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Shigemoto</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Kuwana</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Sugawara</surname>
          <given-names>H</given-names>
        </name>
        <article-title>Web API for biology with a workflow navigation system</article-title>
        <source>Nucleic Acids Res</source>
        <year>2009</year>
        <volume>37</volume>
        <issue>2</issue>
        <fpage>11</fpage>
        <lpage>16</lpage>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Oinn</surname>
          <given-names>T</given-names>
        </name>
        <etal/>
        <article-title>Taverna: a tool for the composition and enactment of bioinformatics workflows</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <issue>17</issue>
        <fpage>3045</fpage>
        <lpage>3054</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth361</pub-id>
        <pub-id pub-id-type="pmid">15201187</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="other">
        <collab>Instituto Nacional de Bioinformática</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.inab.org">http://www.inab.org</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="other">
        <collab>Advancing Clinico Genomic Trials</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://eu-acgt.org/">http://eu-acgt.org/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Martín-Requena</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Ríos</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>García</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Ramírez</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <article-title>jORCA: easily integrating bioinformatics Web Service</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>4</issue>
        <fpage>553</fpage>
        <lpage>559</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp709</pub-id>
        <pub-id pub-id-type="pmid">20047879</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Rios</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Karlsson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <article-title>Magallanes: A web services discovery and automatic workflow composition tool</article-title>
        <source>BMC Bioinforma</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>1</issue>
        <fpage>334</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-334</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="other">
        <collab>Flipper</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.bitlab-es.com/flipper/">http://www.bitlab-es.com/flipper/</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="other">
        <name>
          <surname>Martínez</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Gordon</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Sensen</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <comment><bold><italic>Towards closing the gap between user data and standardized input, </italic></bold><italic>Network Tools and Applications in Biology (NETTAB 2009;</italic> 2009.</comment>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="other">
        <name>
          <surname>Hull</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Stevens</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Lord</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Wroe</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Goble</surname>
          <given-names>C</given-names>
        </name>
        <source>Treating shimantic web syndrome with ontologies</source>
        <series>AKT Workshop on Semantic Web Services</series>
        <year>2004</year>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="other">
        <name>
          <surname>Karlsson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Torreño</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Ramet</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Klambauer</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Cano</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Trelles</surname>
          <given-names>O</given-names>
        </name>
        <article-title>Enabling large-scale bioinformatics data analysis with cloud computing</article-title>
        <source>ISPA 2012 International Workshop on Heterogeneous Architectures and Computing</source>
        <year>2012</year>
        <fpage>640</fpage>
        <lpage>645</lpage>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="other">
        <name>
          <surname>Foster</surname>
          <given-names>I</given-names>
        </name>
        <article-title>The globus toolkit for grid computing</article-title>
        <source>Proceedings of First IEEE/ACM International Symposium on Cluster Computing and the Grid</source>
        <year>2001</year>
        <fpage>2</fpage>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="other">
        <collab>OASIS UDDI</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.oasis-open.org/standards#uddiv3.0.2">http://www.oasis-open.org/standards#uddiv3.0.2</ext-link>
        </comment>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Lord</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Alper</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Wroe</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Goble</surname>
          <given-names>CA</given-names>
        </name>
        <article-title>Feta: A light-weight architecture for user oriented semantic service discovery</article-title>
        <source>Proc Eur Semant Web Conf</source>
        <year>2005</year>
        <volume>3532</volume>
        <fpage>17</fpage>
        <lpage>31</lpage>
      </mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="other">
        <name>
          <surname>Oren</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Wahler</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Schreder</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Balaban</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Zaremba</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Demonstrating WSMX–least cost supply management</article-title>
        <source>Proceedings of the Workshop on WSMO Implementations</source>
        <year>2004</year>
      </mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wilkinson</surname>
          <given-names>MD</given-names>
        </name>
        <name>
          <surname>Vandervalk</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>McCarthy</surname>
          <given-names>L</given-names>
        </name>
        <article-title>The Semantic Automated Discovery and Integration (SADI) web service design-pattern, API and reference implementation</article-title>
        <source>J Biomed Semant</source>
        <year>2011</year>
        <volume>2</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.1186/2041-1480-2-8</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Goecks</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Nekrutenko</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Taylor</surname>
          <given-names>J</given-names>
        </name>
        <collab>The Galaxy Team</collab>
        <article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>R86</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id>
        <pub-id pub-id-type="pmid">20738864</pub-id>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
