<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PeerJ</journal-id>
    <journal-id journal-id-type="iso-abbrev">PeerJ</journal-id>
    <journal-id journal-id-type="publisher-id">peerj</journal-id>
    <journal-title-group>
      <journal-title>PeerJ</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2167-8359</issn>
    <publisher>
      <publisher-name>PeerJ Inc.</publisher-name>
      <publisher-loc>San Diego, USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9921987</article-id>
    <article-id pub-id-type="publisher-id">14779</article-id>
    <article-id pub-id-type="doi">10.7717/peerj.14779</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Bioinformatics</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Computational Biology</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Molecular Biology</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Complet+: a computationally scalable method to improve completeness of large-scale protein sequence clustering</article-title>
    </title-group>
    <contrib-group>
      <contrib id="author-1" contrib-type="author">
        <name>
          <surname>Nguyen</surname>
          <given-names>Rachel</given-names>
        </name>
        <xref rid="aff-1" ref-type="aff">1</xref>
      </contrib>
      <contrib id="author-2" contrib-type="author">
        <name>
          <surname>Sokhansanj</surname>
          <given-names>Bahrad A.</given-names>
        </name>
        <xref rid="aff-1" ref-type="aff">1</xref>
      </contrib>
      <contrib id="author-3" contrib-type="author">
        <name>
          <surname>Polikar</surname>
          <given-names>Robi</given-names>
        </name>
        <xref rid="aff-2" ref-type="aff">2</xref>
      </contrib>
      <contrib id="author-4" contrib-type="author" corresp="yes">
        <name>
          <surname>Rosen</surname>
          <given-names>Gail L.</given-names>
        </name>
        <email>empr3ss@gmail.com</email>
        <xref rid="aff-1" ref-type="aff">1</xref>
      </contrib>
      <aff id="aff-1"><label>1</label><institution>Drexel University</institution>, <city>Philadelphia</city>, <country>United States of America</country></aff>
      <aff id="aff-2"><label>2</label><institution>Rowan University</institution>, <city>Glassboro</city>, <state>NJ</state>, <country>United States of America</country></aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Gokara</surname>
          <given-names>Mahesh</given-names>
        </name>
      </contrib>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>8</day>
      <month>2</month>
      <year iso-8601-date="2023">2023</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2023</year>
    </pub-date>
    <volume>11</volume>
    <elocation-id>e14779</elocation-id>
    <history>
      <date date-type="received" iso-8601-date="2022-08-02">
        <day>2</day>
        <month>8</month>
        <year iso-8601-date="2022">2022</year>
      </date>
      <date date-type="accepted" iso-8601-date="2023-01-03">
        <day>3</day>
        <month>1</month>
        <year iso-8601-date="2023">2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>©2023 Nguyen et al.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <copyright-holder>Nguyen et al.</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, reproduction and adaptation in any medium and for any purpose provided that it is properly attributed. For attribution, the original author(s), title, publication source (PeerJ) and either DOI or URL of the article must be cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="https://peerj.com/articles/14779"/>
    <abstract>
      <p>A major challenge for clustering algorithms is to balance the trade-off between homogeneity, <italic toggle="yes">i.e.</italic>, the degree to which an individual cluster includes only related sequences, and completeness, the degree to which related sequences are broken up into multiple clusters. Most algorithms are conservative in grouping sequences with other sequences. Remote homologs may fail to be clustered together and instead form unnecessarily distinct clusters. The resulting clusters have high homogeneity but completeness that is too low. We propose Complet+, a computationally scalable post-processing method to increase the completeness of clusters without an undue cost in homogeneity. Complet+ proves to effectively merge closely-related clusters of protein that have verified structural relationships in the SCOPe classification scheme, improving the completeness of clustering results at little cost to homogeneity. Applying Complet+ to clusters obtained using MMseqs2’s clusterupdate achieves an increased V-measure of 0.09 and 0.05 at the SCOPe superfamily and family levels, respectively. Complet+ also creates more biologically representative clusters, as shown by a substantial increase in Adjusted Mutual Information (AMI) and Adjusted Rand Index (ARI) metrics when comparing predicted clusters to biological classifications. Complet+ similarly improves clustering metrics when applied to other methods, such as CD-HIT and linclust. Finally, we show that Complet+ runtime scales linearly with respect to the number of clusters being post-processed on a COG dataset of over 3 million sequences. Code and supplementary information is available on Github: <ext-link xlink:href="https://github.com/EESI/Complet-Plus" ext-link-type="uri">https://github.com/EESI/Complet-Plus</ext-link>.</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>Protein clustering</kwd>
      <kwd>Protein families</kwd>
      <kwd>Homology</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="fund-1">
        <funding-source>NSF grants</funding-source>
        <award-id>#1936791</award-id>
        <award-id>#1919691</award-id>
        <award-id>#1936782</award-id>
        <award-id>#2107108</award-id>
      </award-group>
      <funding-statement>This work is supported by NSF grants #1936791, #1919691, #1936782, and #2107108. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <p>A critical step in many bioinformatics pipelines is clustering similar nucleotide (DNA or RNA) and protein sequences, such as clustering marker genes that may represent similar taxa or clustering peptides that may have structural homology or similar functions. In biological applications, the number of sequences that must be clustered is extremely large. Annotated protein sequence databases contain hundreds of thousands (of experimentally validated) and tens to hundreds of millions (of predicted) sequences. Metagenome sequencing experiments routinely generate hundreds of millions of reads. As a result, bioinformatics demands scalable clustering methods. Clustering methods generally have a trade-off of increased sensitivity with slower speed, making the protein clustering a challenging problem. Protein clusters are groups of similar (homologous) proteins that most likely share the same or similar function. Clustering procedures must allow compression of information in comparison to the non-clustered representation and may have different resolution levels (<italic toggle="yes">e.g.</italic>, phyla/genus for taxa or superfamily/family for protein).</p>
    <p>One of the key challenges in many biological applications is to generate clusters which correspond to the “true” groupings of sequences in the application. For example, if the task is to identify the phyla present in a data set of DNA sequences, ideally clusters should correspond to groups of phyla. If the task is to identify protein families or superfamilies—the focus of this article—then ideally clusters should correspond to protein families. This would then permit clusters to be used for the labeling of unknown sequences. For example, if an unknown protein clusters with proteins from a given family, then the clustering result may be used to predict that the unknown protein is a member of that family. As described above, however, protein sequence data sets are very large, and as a result the sensitivity-speed trade-off requires lowering sensitivity, resulting in relatively tight clusters: clusters that are made up of biologically similar proteins, but with groups of biologically similar proteins, such as a family or superfamily, split up into multiple clusters. In other words, the resulting clusters have relatively high <italic toggle="yes">homogeneity</italic> but relatively low <italic toggle="yes">completeness</italic>.</p>
    <p>Optimizing homogeneity over completeness poses a barrier for certain important applications—two examples of which are described here. First, a common use case for clustering is to label otherwise unidentified sequences, such as hypothetical ORFs identified from a metagenomic sequencing data set. Hypothetical ORFs that are most proximate to a cluster, or cluster together with known proteins, can be labeled according to the majority—otherwise, their cluster membership can be determined with consensus. However, clustering methods with low completeness may generate lots of clusters with only one member (singletons) or with only two or a few members—which may not have reliable consensus annotation. Second, clusters can be used to identify and organize groups of sequence homologs, for example to predict functional categories of proteins or groups of proteins with common evolutionary histories. Low-completeness clusters fail in this task as well, particularly as homologs become more remote or when the levels of organization become higher, for example in identifying the members of the same superfamily as opposed to family of protein sequences (<xref rid="ref-19" ref-type="bibr">Paccanaro, Casbon &amp; Saqi, 2006</xref>; <xref rid="ref-2" ref-type="bibr">Bernardes et al., 2015</xref>). Increasing completeness would require either a slower (more sensitive) clustering method—not feasible for most biological sequence applications—or developing a method to robustly and reliably combine clusters in a way that increases completeness without excess cost in homogeneity. Notably, any decrease in homogeneity means a risk of false positives, where a cluster includes members that are biologically dissimilar to each other.</p>
    <p>In this article, we introduce Complet+, a novel method to increase the completeness of clusters obtained using large-scale biological sequence clustering methods. Complet+ addresses a key problem with large-scale clustering methods, such as mmSeqs2 clustering and CD-HIT. Because large-scale clustering tools generally use some kind of iterative or heuristic method, like iterative greedy clustering, they will generally not generate a measure of identity between representative sequences of clusters. Complet+ utilizes the fast search capabilities of MMSeqs2 to identify reciprocal hits between the representative sequences, which may be used to reform clusters and (1) reduce the number of singletons and small clusters and (2) create larger clusters that better represent superfamilies composed of remote homologs, proteins that share a very distant evolutionary origin. This article begins with a background of the relevant methods and then describes the Complet+ algorithm and the computational experiments used to demonstrate and validate Complet+ on extended Structural Classification of Proteins (SCOPe) families and superfamilies of proteins with structural homology (<xref rid="ref-3" ref-type="bibr">Chandonia et al., 2021</xref>). We show that Complet+ can effectively increase completeness with a small or negligible cost to homogeneity on clusters generated using MMSeqs2’s default cascade clustering method, singe-step clustering, incremental clustering with MMSeqs2’s <monospace>clusterupdate</monospace> module (<xref rid="ref-24" ref-type="bibr">Steinegger &amp; Söding, 2017</xref>), <monospace>linclust</monospace> (a linear-time clustering method) (<xref rid="ref-25" ref-type="bibr">Steinegger &amp; Söding, 2018</xref>), and the popular clustering tool for very large-size sequence datasets, CD-HIT (<xref rid="ref-15" ref-type="bibr">Li &amp; Godzik, 2006</xref>). We also show that Complet+ can result in clusters that are far more representative of the true SCOPe family and, in particular, superfamily organization. Finally, we demonstrate that Complet+ is scalable, with linear-time performance with respect to the number of clusters using the same clustering method, and with a manageable cost when used on methods that generate highly similar clusters.</p>
  </sec>
  <sec>
    <title>Background</title>
    <sec>
      <title>Sequence clustering</title>
      <p>The large scale and complexity of nucleotide and protein sequence data have motivated the development of clustering methods specifically to address these applications. CD-HIT was one of the first such large-scale clustering methods for DNA and protein sequences (<xref rid="ref-15" ref-type="bibr">Li &amp; Godzik, 2006</xref>). CD-HIT’s essential innovation was to estimate similarity between sequences using k-mers (or short words) rather than performing costly <inline-formula><alternatives><inline-graphic xlink:href="peerj-11-14779-i001.jpg"/><tex-math id="tex-ieqn-1">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{O}(mn)$\end{document}</tex-math><mml:math id="mml-ieqn-1" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>m</mml:mi><mml:mi>n</mml:mi></mml:mfenced></mml:mrow></mml:math></alternatives></inline-formula> sequence alignment, <italic toggle="yes">via</italic> dynamic programming, or a heuristically-sped up version like BLAST. CD-HIT can be used for a wide range of applications due to its versatility, but one particular application—16S rRNA clustering for <italic toggle="yes">de novo</italic> taxonomic grouping (a.k.a open-reference OTU picking)—immediately became an important application due to the volume of such data being generated (<xref rid="ref-4" ref-type="bibr">Chen et al., 2013</xref>). Competing clustering methods soon emerged, each taking a different approach to speed-accuracy tradeoffs, such as UCLUST (<xref rid="ref-6" ref-type="bibr">Edgar, 2010</xref>). Historically, however, these tradeoffs have been evaluated to address 16S rRNA sequence clustering, which has particular issues with accuracy that do not apply to protein clustering (<xref rid="ref-17" ref-type="bibr">Nguyen et al., 2016</xref>; <xref rid="ref-23" ref-type="bibr">Schloss &amp; McMahon, 2021</xref>).</p>
      <p>Protein sequence clustering methods are similarly being investigated with an even wider gap between speed and accuracy (<xref rid="ref-12" ref-type="bibr">Hauser, Steinegger &amp; Söding, 2016</xref>). There are two categories of clustering algorithms: alignment-based and alignment-free. The traditional alignment-based methods, CD-HIT (<xref rid="ref-15" ref-type="bibr">Li &amp; Godzik, 2006</xref>), UCLUST (<xref rid="ref-6" ref-type="bibr">Edgar, 2010</xref>), and BlastClust (<xref rid="ref-16" ref-type="bibr">NCBI, 0000</xref>) can also be used for proteins in addition to 16S rRNA. Futher developments of Markov Clustering (MCL) techniques were innovated (<xref rid="ref-7" ref-type="bibr">Enright, Van Dongen &amp; Ouzounis, 2002</xref>; <xref rid="ref-28" ref-type="bibr">Wong &amp; Ragan, 2008</xref>). However MCL techniques, as well as other alignment-based techniques, are computationally expensive. Alignment-free based techniques are emerging, with MMSeqs2 (<xref rid="ref-24" ref-type="bibr">Steinegger &amp; Söding, 2017</xref>) being the most popular, and with emerging techniques in deep learning and embeddings (<xref rid="ref-14" ref-type="bibr">Karim et al., 2020</xref>). MMSeqs2 clustering is widely used in a range of applications, including clustering known and unknown genes in metagenomes (<xref rid="ref-26" ref-type="bibr">Vanni et al., 2022</xref>).</p>
      <sec>
        <title>MMseqs2</title>
        <p>Many-versus-many sequence searching (MMseqs2) is a software suite that offers a wide array of tools for sequence alignment (<xref rid="ref-24" ref-type="bibr">Steinegger &amp; Söding, 2017</xref>) and clustering (<xref rid="ref-25" ref-type="bibr">Steinegger &amp; Söding, 2018</xref>; <xref rid="ref-12" ref-type="bibr">Hauser, Steinegger &amp; Söding, 2016</xref>) of both nucleotide and protein sequences. It has high sensitivity and is efficient in both computation time and hardware resources, as it is optimized for multi-threaded use. It is also highly scalable and excels at working with large datasets. In this study, we examine MMseqs2’s sequence alignment and clustering tools.</p>
        <p>Sequence alignment (<xref rid="ref-24" ref-type="bibr">Steinegger &amp; Söding, 2017</xref>) is performed using MMseqs2’s <monospace>search</monospace> module, and is comprised of three steps: a k-mer match step, a vectorized ungapped alignment, and a gapped (also known as Smith-Waterman) alignment. The k-mer match step drastically reduces the number of Smith-Waterman alignments, and is a main contributor to the <monospace>search</monospace> module’s high speed.</p>
        <p>A search is characterized by many criteria and parameters, one of the more notable ones being its sensitivity. A search run with a low sensitivity setting will be fast, but it will find less hits than a search using a high sensitivity setting. The <monospace>search</monospace> module also offers the ability to restrict the output to alignments that are within a specified significance threshold (also known as expectation-value, or e-value).</p>
        <p>Two major modules within MMseqs2 for clustering are: <monospace>linclust</monospace>, a linear method, and <monospace>cluster</monospace>, a cascaded method that begins with <monospace>linclust</monospace> before performing additional prefiltering, alignment, and clustering. Both clustering modules are unsupervised and their results are independent of the order sequences are presented in. (MMseqs2 further offers the option of simple clustering in a single step without cascading, but that is not its default operation.)</p>
        <p>MMseqs2’s implementation of linear clustering is the <monospace>linclust</monospace> module (<xref rid="ref-25" ref-type="bibr">Steinegger &amp; Söding, 2018</xref>). The computational runtime of <monospace>linclust</monospace> scales linearly with the number of input sequences. The <monospace>linclust</monospace> algorithm begins by grouping sequences that share a k-mer, selecting the longest of sequence of each group as the center (or representative sequence). Every sequence is then compared(using Smith-Waterman alignment) to every representative it shares a k-mer with, and if it passes the clustering criteria it is recruited into the cluster.</p>
        <p>The cascaded clustering module is the default setting of the <monospace>cluster</monospace> module in MMseqs2 (<xref rid="ref-25" ref-type="bibr">Steinegger &amp; Söding, 2018</xref>). The cascaded clustering method first runs the <monospace>linclust</monospace> module to produce an initial clustering. It then performs a prefiltering step followed by a Smith-Waterman alignment of the sequence pairs that passed. Next, an initial clustering with low sensitivity and high significance threshold is done, which results in a quick clustering that only yields matches with high sequence identity. It then repeats the process beginning at the prefiltering step, instead using the first step’s cluster representative sequences rather than all sequences. It also uses a higher sensitivity than the first step. The process is repeated a third time using the sensitivity specified by the user, and the results are finally merged. Cascaded clustering can be performed with as many as seven steps, but three is the default.</p>
        <p>The <monospace>cluster</monospace> module’s sensitivity setting is similar to search’s sensitivity setting: a low sensitivity clustering will be faster than one at the highest sensitivity, but the result will be comprised of many more clusters due to finding less hits. The <monospace>cluster-reassign</monospace> option will recompute the clusters’ representative sequences at each clustering step. Otherwise, <monospace>cluster</monospace> will use the representative sequence initially chosen for each cluster at each step.</p>
        <p>The <monospace>cluster</monospace> module’s <monospace>single-step-clustering</monospace> option changes the workflow to perform the prefiltering, alignment, and clustering of the sequences using the user’s specified criteria at the first and single step, as opposed to gradually over the course of three steps like <monospace>cluster</monospace>.</p>
      </sec>
    </sec>
    <sec>
      <title>Incremental learning and the cluster updating workflow in mmSeqs2</title>
      <p>Incremental learning is a developing approach to handling the rapid growth of massive amounts of biological sequence data, particularly in the era of next-generation sequencing. Classically, a database needs to be <italic toggle="yes">de novo</italic> clustered or a supervised machine learning classifier needs to be fully retrained each time a sequence database is updated with new examples. An incremental approach can instead learn fundamental features and classes of the data continuously as new examples are added (<xref rid="ref-30" ref-type="bibr">Zhao, Cristian &amp; Rosen, 2020</xref>). Both supervised and semi-supervised methods have been proposed for classifying sequences (<xref rid="ref-18" ref-type="bibr">Ozdogan et al., 2021</xref>; <xref rid="ref-30" ref-type="bibr">Zhao, Cristian &amp; Rosen, 2020</xref>; <xref rid="ref-5" ref-type="bibr">Dash et al., 2021</xref>). One incrementalization approach is to reduce the time required for sequence alignment by saving information and running only on new increments (<xref rid="ref-5" ref-type="bibr">Dash et al., 2021</xref>). Another is to incrementally update gene/genome classifiers, such as NBC++ (<xref rid="ref-30" ref-type="bibr">Zhao, Cristian &amp; Rosen, 2020</xref>) and Struo2 (<xref rid="ref-29" ref-type="bibr">Youngblut &amp; Ley, 2021</xref>). Our group has begun to explore incrementalization methods for unsupervised methods that update the cluster representatives, and semi-supervised methods that rely on clustering information in combination with learning classifiers for both taxa and protein sequence classification (<xref rid="ref-11" ref-type="bibr">Halac et al., 2021</xref>; <xref rid="ref-18" ref-type="bibr">Ozdogan et al., 2021</xref>).</p>
      <p>MMseqs2 (<xref rid="ref-25" ref-type="bibr">Steinegger &amp; Söding, 2018</xref>) is one of the most commonly used software suites for protein sequences in academic and commercial applications. It is the only one that offers incremental cluster updating. The <monospace>clusterupdate</monospace> module allows the user to update a previous clustering result following the addition or removal of sequences. When updating the clustering result, the module keeps the sequences’ identifiers consistent within the original clustering’s databases. It also shares many of the settings the cluster module offers, most notably the sensitivity setting. The <monospace>clusterupdate</monospace> module first compares the new sequences to existing ones with a supervised process. Then, when sequences which are not similar enough to any of the existing clusters are added, they are compared to each other in an unsupervised process, with some becoming representatives of new clusters.</p>
    </sec>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>All tests were performed utilizing a single CPU thread and 16 GB of memory.</p>
    <sec>
      <title>Protein data sets</title>
      <sec>
        <title>Structural classification of proteins (SCOP)</title>
        <p>Developed by MRC Laboratory of Molecular Biology, the SCOP database classifies proteins first by their secondary structure, followed by their evolutionary relationships primarily through manual curation until work on it ceased June 2009 (<xref rid="ref-13" ref-type="bibr">Hubbard et al., 1997</xref>). Its development was continued with the release of SCOP—extended (SCOPe) database (<xref rid="ref-8" ref-type="bibr">Fox, Brenner &amp; Chandonia, 2013</xref>) in March 2012 by Berkeley Lab and UC Berkeley, who continue to expand it with a combination of manual curation and automated methods. The data itself are the genetic domain sequences of proteins within PDB SEQRES records.</p>
        <p>As of version 2.08, SCOPe contains 302,566 protein domain sequences in total. The topmost level of classification is sequence class, followed by fold, superfamily, and lastly family. SCOPe 2.08 is encompassed by seven classes, 1,257 folds, 2,067 superfamilies, and 5,084 families (<xref rid="ref-3" ref-type="bibr">Chandonia et al., 2021</xref>). For this study, we only evaluate the clustering results on the superfamily and family levels of classification.</p>
      </sec>
      <sec>
        <title>Clusters of orthologus genes (COG)</title>
        <p>The COG database (<xref rid="ref-9" ref-type="bibr">Galperin et al., 2019</xref>) groups protein functional domains into COG’s according to their orthologous relationships. Each COG thus represents a general function. For example, glutamyl- or glutaminyl-tRNA synthetase proteins are classified under COG0008. Each of these COGs are further defined by one or more functional groups, there being 26 functional groups total. The current release as of May 12, 2022 includes 3,456,089 functional domains encompassed by 4877 COGs (<xref rid="ref-10" ref-type="bibr">Galperin et al., 2021</xref>).</p>
      </sec>
      <sec>
        <title>Swiss-Prot COG</title>
        <p>The Swiss-Prot database (<xref rid="ref-1" ref-type="bibr">Bairoch &amp; Apweiler, 1999</xref>) is a subset of the Uniprot. The database is composed of manually-annotated records with information extracted from literature and curator-evaluated computational analysis. We filter the COG annotations using only these manually-annotated proteins to obtain biologically-verified COGs. The Swiss-Prot COG subset contains 122,202 functional domain sequences encompassed by 3,858 COGs.</p>
      </sec>
    </sec>
    <sec>
      <title>The Complet+ algorithm</title>
      <p>The Complet+ algorithm builds on unsupervised clustering results by aligning cluster representatives (<italic toggle="yes">via</italic> MMSeqs2 search) and merging clusters that are reciprocal hits within a particular e-value. In the results, we show that Complet+ can be used on any base algorithm, thus it implements “incremental learning” without needing all previous data (just cluster representatives and a mapping of sequences to clusters), and it runs in less time than rerunning a more sensitive clustering algorithm from scratch. Also, currently, there are no other postprocessing algorithms that improve completeness without having to be rerun, from scratch, on all the data. Therefore, Complet+ fills a niche in optimizing clustering for completeness in an incremental learning manner.</p>
      <p>Complet+ takes any (1) FASTA file of representative (or all) sequences and (2) clustering algorithm results as input after they have been converted to a particular TSV format, which is a simple two-column data file of sequence IDs and the IDs of their cluster representatives. For example, MMseqs2 results are obtained from MMseqs2’s <monospace>createtsv</monospace> command, but Complet+ is compatible with any clustering data file regardless of its source, provided it is converted into the same format. The FASTA file of the sequences only needs to contain the sequences of the cluster representatives, but if there are additional sequences, the algorithm extracts the relevant ones. Representative sequence extraction is performed through the use of grep, a command-line tool used for searching patterns within files. The representative sequences, as described in the cluster data file’s first column, are all extracted to a new FASTA file. The clustering data file is used again in the relabeling step (<xref rid="fig-1" ref-type="fig">Fig. 1</xref>).</p>
      <p>With this FASTA file of representative sequences, Complet+ then performs a pairwise sequence alignment between all representatives by using the MMseqs2 search function, with the pairwise combinations as query and target arguments. We found that the homogeneity-completeness was optimized at the highest sensitivity option, <italic toggle="yes">s</italic> = 7.5, of the MMseqs2 <monospace>search</monospace> function. As shown in the Cascade-C+ results in the Results and Discussion Section, a Complet+ <monospace>search</monospace> sensitivity of 7.5 (<italic toggle="yes">s</italic> = 7.5) increased the Default completeness by 5.99% (while lowering homogeneity by 0.05%), while a Complet+ <monospace>search</monospace> sensitivity of 5.7 (<italic toggle="yes">s</italic> = 5.7) only increased the Default completeness by 3.63% (while lowering homogeneity by 0.02%). The other settings, such as e-value threshold and query-coverage, were left at the default values of 0.001 and 0.8, respectively. Also, Complet+ can even improve upon Cascade Clustering and Connected Component (CC) clustering with the max sensitivity of 7.5. The algorithm employed by Complet+ is similar to connected component clustering (cluster mode 1 in MMSeqs2), but has an even looser constraint to improve completeness. The looser constraint is that instead of connecting nodes that are best reciprocal hits by raw score, Complet+ looks for all reciprocal hits that fall within a user-defined e-value. From the reciprocal hits, we are able to deduce which clusters are similar to each other, in order to merge them <italic toggle="yes">via</italic> the following described process.</p>
      <fig position="float" id="fig-1">
        <object-id pub-id-type="doi">10.7717/peerj.14779/fig-1</object-id>
        <label>Figure 1</label>
        <caption>
          <title>Example pipeline depicting Complet+ usage.</title>
          <p>Not all files required and produced by the MMseqs2 tools and Complet+ are depicted, merely the most prominent ones, for clarity. The pipeline depicted only includes one clusterupdate module use following the initial clustering with the cluster module, but the tests discussed later feature more successive increments with clusterupdate.</p>
        </caption>
        <graphic xlink:href="peerj-11-14779-g001" position="float"/>
      </fig>
      <p>After the pairwise alignments of the cluster representatives are obtained, the alignment results are sorted from lowest e-value to highest and then filtered, retaining only sequences that are reciprocal hits within the specified e-value to the algorithm. Reciprocal hits are pairs of sequences where one is in the top hits of the other and vice-versa when queried against all sequences (in this case, all the cluster representatives). Alignment results that are self-hits (where the query and target sequences are the same sequence) are filtered out. <xref rid="fig-2" ref-type="fig">Figure 2</xref> depicts how only the reciprocal hits are retained following the alignment filtering step. It is important to note that the reciprocal hits need not be the “reciprocal best hits”, or best-scoring hits for the sequences. A sequence can and likely will have multiple sequences to which it is reciprocal.</p>
      <p>We observed that the reciprocal hits obtained through this method formed clusters of their own. A given representative sequence would usually have between two and six reciprocal hits, following the sequence alignment. Those reciprocal hits would tend to only be reciprocal hits to each other. <xref rid="fig-3" ref-type="fig">Figure 3</xref> visualizes these reciprocal-hit results and the clustering observed. As evident in the visualization, these reciprocal hits form numerous isolated groups akin to clusters. We relabel the members of these clusters with the ID of one of the members in order to merge them.</p>
      <fig position="float" id="fig-2">
        <object-id pub-id-type="doi">10.7717/peerj.14779/fig-2</object-id>
        <label>Figure 2</label>
        <caption>
          <title>The Complet+ algorithm.</title>
          <p>The alignment files contain additional data columns, including the one containing each alignment’s e-value (not depicted) that is used in the alignment sorting and filtering step.</p>
        </caption>
        <graphic xlink:href="peerj-11-14779-g002" position="float"/>
      </fig>
      <fig position="float" id="fig-3">
        <object-id pub-id-type="doi">10.7717/peerj.14779/fig-3</object-id>
        <label>Figure 3</label>
        <caption>
          <title>Gephi visualization of the MMseqs2 search of the representative sequences.</title>
          <p>Depicted are the reciprocal hits resulting from the sequence alignment. Each dot represents a representative sequence. Dots in close proximity indicate a reciprocal hit. Groups of close reciprocal hits are effectively clusters. Complet+ merges these clusters to improve completeness. Circled in red is one such cluster. Every representative sequence within this circle is a reciprocal hit to at least one other representative sequence in the circle. Complet+ merges these representative sequences, resulting in a single cluster Every single sequence in the image has a reciprocal hit; a dot that appears to be a single sequence is actually two or more dots on top of each other.</p>
        </caption>
        <graphic xlink:href="peerj-11-14779-g003" position="float"/>
      </fig>
      <p>Beginning with the first representative sequence in the file, all subsequent representative sequences with which a sequence is reciprocal are relabeled as the original representative sequence. Complet+ then iterates through each of those reciprocal hits’ own reciprocal hits, which are also relabeled as that first sequence. Complet+ traverses through the data in this recursive fashion, ignoring representative sequences that have already been passed. All of the members of that original representative sequence are hence identified and relabeled. Complet+ repeats this process for every representative sequence in the file, ignoring those that have already been seen. This process results in a list of new representative sequences which each former representative sequence and its cluster members are relabeled to. The old cluster ID and Complet+ cluster ID, corresponding to each sequence ID are then saved into the Complet+ output, seen in <xref rid="fig-1" ref-type="fig">Fig. 1</xref>.</p>
      <p>The algorithm then passes through the data file of the MMseqs2 clustering results. If a sequence’s representative is on the aforementioned relabeling list, that sequence is relabeled with the new representative sequence ID. The resulting clustering data file contains the data from the original clustering file, in addition to the new cluster representative of each sequence (<xref rid="table-1" ref-type="table">Table 1</xref>).</p>
    </sec>
    <sec>
      <title>Clustering metrics</title>
      <p>To evaluate the performance of both MMseqs2 and our post-processing algorithm, we used Scikit-learn’s cluster metrics library (<xref rid="ref-20" ref-type="bibr">Pedregosa et al., 2011</xref>) to calculate homogeneity, completeness, adjusted mutual information score (AMI), and adjusted Rand index (ARI).</p>
      <sec>
        <title>Homogeneity and completeness</title>
        <p>Homogeneity and completeness are two metrics often used together—and can also be combined into a V-measure—to evaluate clustering results (<xref rid="ref-22" ref-type="bibr">Rosenberg &amp; Hirschberg, 2007</xref>). Homogeneity is a measure of a clustering purity: a clustering result has perfect homogeneity (of 1) if all members of any given cluster are truly of the same class. Homogeneity score is penalized (reduced) if its clusters contain members that are of different classes. A clustering result has perfect completeness (of 1) if all members of each class are within the same cluster. Completeness score is penalized (reduced) if any class members are split amongst multiple clusters. Finally, V-measure is the harmonic mean between homogeneity and completeness and is also known as the normalized mutual information metric (<xref rid="ref-22" ref-type="bibr">Rosenberg &amp; Hirschberg, 2007</xref>; <xref rid="ref-20" ref-type="bibr">Pedregosa et al., 2011</xref>).</p>
        <table-wrap position="float" id="table-1">
          <object-id pub-id-type="doi">10.7717/peerj.14779/table-1</object-id>
          <label>Table 1</label>
          <caption>
            <title>The output of Complet+.</title>
            <p>The file retains the representative sequence ID for each sequence’s old cluster label, allowing simple comparison between the old and new labels.</p>
          </caption>
          <alternatives>
            <graphic xlink:href="peerj-11-14779-g011" position="float"/>
            <table frame="hsides" rules="groups">
              <colgroup span="1">
                <col span="1"/>
                <col span="1"/>
                <col span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th rowspan="1" colspan="1">Old cluster ID</th>
                  <th rowspan="1" colspan="1">Sequence ID</th>
                  <th rowspan="1" colspan="1">Complet+ cluster ID</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
                <tr>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                  <td rowspan="1" colspan="1">d1pv2c_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
                <tr>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                  <td rowspan="1" colspan="1">d1pv2d_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
                <tr>
                  <td rowspan="1" colspan="1">d1n57a_</td>
                  <td rowspan="1" colspan="1">d1n57a_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
                <tr>
                  <td rowspan="1" colspan="1">d1n57a_</td>
                  <td rowspan="1" colspan="1">d1izya_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
                <tr>
                  <td rowspan="1" colspan="1">d1n57a_</td>
                  <td rowspan="1" colspan="1">d1izza_</td>
                  <td rowspan="1" colspan="1">d1u9ca_</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
      </sec>
      <sec>
        <title>Adjusted Mutual Information (AMI) and Adjusted Rand Index (ARI)</title>
        <p>The mutual information score (MI) is an information theoretic measure of agreement between two clusterings. In our case, the two clusterings are the true clusters (as determined by ground-truth classes) and the predicted clusters. The AMI is obtained by correcting MI for chance (<xref rid="ref-27" ref-type="bibr">Vinh, Epps &amp; Bailey, 2009</xref>). The Rand index (RI) is a measure of similarity between two clusterings. ARI is the RI adjusted for chance (<xref rid="ref-27" ref-type="bibr">Vinh, Epps &amp; Bailey, 2009</xref>). While superficially similar, AMI and ARI in fact reflect different relationships between predicted clusters and ground-truth classifications depending on whether the clustering solutions are balanced or imbalanced. A balanced clustering solution is one of equally-sized clusters, whereas an imbalanced solution’s cluster sizes vary greatly. An imbalanced solution is more likely to present clusters that are pure, due to likely having more small clusters than a balanced solution. Specifically, AMI tends to give higher scores to (or is biased towards) unbalanced clustering solutions, while ARI is biased towards those that are balanced (<xref rid="ref-21" ref-type="bibr">Romano et al., 2015</xref>).</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Results and Discussion</title>
    <p>A primary goal of Complet+ is to serve as a versatile approach that can be used with any clustering algorithm. Therefore, we evaluated Complet+ on a variety of initial clustering algorithms. We also evaluated Complet+ on both classical single-batch analysis and the incremental multi-batch analysis used for incremental learning applications: specifically, single-batch clustering tests, two 5-batch incremental learning tests, and a 50-batch incremental learning test.</p>
    <p>In single-batch clustering, Complet+ is run after the SCOPe dataset is clustered with a single cluster call (using variety of methods provided by mmSeqs2, as well as CD-HIT). Complet+ was then run on the resulting clustering output. In addition, two batch partitioning test data sets were created to help further evaluate the performance and scalability of the method as described below: (1) for each of the five batches, ∼20% of the new classes (previously unseen by the clustering method) were added to each batch, and (2) each of the sequences in the five batches were randomly chosen. Both tests result in five folds of approximately equal number of proteins. To evaluate incremental learning applications, we create a simulated scenario by inputting the first batch to MMseqs2’s default cascaded <monospace>cluster</monospace> module, then sequentially adding each of the remaining four groups to the database using MMseqs2’s <monospace>clusterupdate</monospace> module. Complet+ is then run on the MMseqs2’s clustering results from each of these five steps. Using a cross-validation approach, this is repeated an additional four times, for a total of five folds. For the new classes and random partitioned data, the clustering metrics were averaged (and standard deviation was calculated) across the five folds. Clustering metrics were calculated between predicted labels (the clustering result) and true labels (SCOPe family/superfamily).</p>
    <sec>
      <title>Complet+ improves clustering metrics</title>
      <sec>
        <title>Applying Complet+ to MMseqs2 clustering and CD-HIT</title>
        <p>We first show that Complet+ significantly reduces the number of singletons and small clusters that are formed. <xref rid="fig-4" ref-type="fig">Figure 4</xref> shows the reduction in the number of small clusters when applying Complet+ to the results of mmSeqs’ single-step clustering on the SCOPe data set. There is a significant reduction in the number of singletons, and consistent reductions of up to 50% in the numbers of clusters with few representatives. While not shown on the graph, Complet+ also generates larger clusters than default methods.</p>
        <p>Overall, CD-HIT produces numerous clusters, clustering the 303,000 SCOPe sequences down to about 204,000 clusters. The proliferation of clusters is evident in CD-HIT’s low completeness score shown in <xref rid="fig-5" ref-type="fig">Fig. 5</xref>. MMseqs2 generated fewer clusters than CD-HIT, its <monospace>linclust</monospace> module producing about 30,000 clusters, and the cascaded clustering tests generated between 9,000 and 10,000 clusters. These results are shown in <xref rid="fig-5" ref-type="fig">Figs. 5A</xref> and <xref rid="fig-5" ref-type="fig">5B</xref>. All default results had excellent homogeneity scores as well, at or above 0.95.</p>
        <p><xref rid="fig-5" ref-type="fig">Figures 5A</xref> and <xref rid="fig-5" ref-type="fig">5B</xref> show the homogeneity/completeness, AMI, and ARI for the single-batch tests using MMSeqs2 and CD-HIT. For all tests, Complet+ was able to substantially improve completeness without measurable loss in homogeneity at the superfamily level and minimal loss at the family levels of classification. The composite of homogeneity and completeness, also known as the V-measure (not shown in the graph but but can be calculated from the homogeneity and completeness) is substantially higher when applying Complet+ at the superfamily-level when averaged across all single-batch tests: 0.80 <italic toggle="yes">vs.</italic> 0.89. The increase in V-measure is less pronounced but still favorable at the family-level: 0.86 <italic toggle="yes">vs.</italic> 0.91. As indicated by <xref rid="fig-5" ref-type="fig">Figs. 5A</xref> and <xref rid="fig-5" ref-type="fig">5B</xref>, the V-measure increase is due to the homogeneity of the default Complet+ clustering remaining mostly unchanged, while completeness increasing.</p>
        <p>The lower homogeneity of both Default and Complet+ results at the family <italic toggle="yes">versus</italic> superfamily level are expected. There are many more families than superfamilies. If there is a mis-clustering at the superfamily-level, it will be reflected on the family level as well, but not vice versa. On the other hand, completeness is higher on the family level because there are more families than superfamilies. Both Default and Complet+ are conservative with their clustering, having a tendency to create multiple smaller clusters over large ones, which then results in lower completeness. Furthermore, since the superfamily is the larger clade above family, the score is more penalized when evaluated on the superfamily level.</p>
        <fig position="float" id="fig-4">
          <object-id pub-id-type="doi">10.7717/peerj.14779/fig-4</object-id>
          <label>Figure 4</label>
          <caption>
            <title>Number of clusters having one (singletons) through ten members for the MMSeqs single-step clustering before and after applying Complet+.</title>
          </caption>
          <graphic xlink:href="peerj-11-14779-g004" position="float"/>
        </fig>
        <fig position="float" id="fig-5">
          <object-id pub-id-type="doi">10.7717/peerj.14779/fig-5</object-id>
          <label>Figure 5</label>
          <caption>
            <title>The homogeneity, completeness, AMI, and ARI of the single-batch tests.</title>
            <p>(A) All tests aside from “CD-HIT” use MMseqs2 the clustering module stated. The sensitivity specified in parentheses refers to the MMseqs2 <monospace>search</monospace> run by Complet+, not the clustering sensitivity, which was the default value of 4.0 where applicable. Overall, Complet+ substantially improves each test case’s completeness at little expense to homogeneity. The loss in homogeneity is more notable when evaluating the clustering results on the family-level of classification, however still to a lesser degree than the increase in completeness. Complet+ also improves the AMI and ARI of each clustering to varying degrees, having a generally greater improvement. (B) The two leftmost tests are Complet+ run at minimum, and maximum MMseqs2 search sensitivity, each on the same Default <monospace>linclust</monospace> test results. The two following tests are identical aside from one using the cluster-reassign setting. The last test is the Connected Component (CC) clustering method of MMSeqs2, run at the highest sensitivity. Like the results in (A), AMI and ARI are improved with each case while completeness is also improved without significant loss of homogeneity.</p>
          </caption>
          <graphic xlink:href="peerj-11-14779-g005" position="float"/>
        </fig>
        <p>As shown in <xref rid="fig-5" ref-type="fig">Figs. 5A</xref> and <xref rid="fig-5" ref-type="fig">Fig. 5B</xref>, Complet+ also results in an increase in both AMI and ARI when compared to the Default clustering. Regardless of how low the Default AMI score was, Complet+ was able to improve it to a score above 0.8. The improvement to ARI was also notable across most test cases, where Complet+ scores were higher relative to the Default scores. For both Default and Complet+, AMI was notably higher than ARI in most cases, which was expected due to AMI’s previously discussed bias towards datasets with unbalanced ground-truth classes.</p>
        <p>We can see from the plots in <xref rid="fig-5" ref-type="fig">Fig. 5</xref> that while there is improvement in completeness over connected clustering, the overal AMI/ARI are quite similar. In fact, for family-level, the difference in AMI is only by 1%. Upon further investigation, this small yet overall improvement can be seen for all sensitivity levels, as shown in the connected component with Complet+ supplementary graph on the Github page (<ext-link xlink:href="https://github.com/EESI/Complet-Plus/blob/main/figures/connected_component_study/cc_fam_superfam.pdf" ext-link-type="uri">https://github.com/EESI/Complet-Plus/blob/main/figures/connected_component_study/cc_fam_superfam.pdf</ext-link>). Examining the homogeneity/completeness in scatterplot form, <xref rid="fig-6" ref-type="fig">Fig. 6</xref> illustrates that improvement in completeness is still a few percentage points at the cost of a fraction of a percentage point in homogeneity for even the highest sensitivity of 7.5. Interestingly, for sensitivity of 4 (in the supplementary graphs, <ext-link xlink:href="https://github.com/EESI/Complet-Plus/blob/main/figures/connected_component_study" ext-link-type="uri">https://github.com/EESI/Complet-Plus/blob/main/figures/connected_component_study</ext-link>), the default+Complet+ is similar in performance to connected component clustering—however, improved completeness can be gained by running Complet+ on connected clustering. While these algorithms are similar, due to the incremental learning nature of Complet+, it can usually make some improvements given general similarities of the cluster representatives.</p>
        <fig position="float" id="fig-6">
          <object-id pub-id-type="doi">10.7717/peerj.14779/fig-6</object-id>
          <label>Figure 6</label>
          <caption>
            <title>Homogeneity/Completeness scatterplots demonstrating base-algorithm + Complet+ <italic toggle="yes">vs.</italic> base algorithms (Default, Connected Component clustering both with highest sensitivity of 7.5).</title>
            <p>Complet+ can improve completeness of each algorithm by a greater amount than is lost in homogeneity. By merging clusters whose representatives are reciprocal hits (given an e-value threshold) of each other allows more clusters to be merged than stricter connected node criteria by the CC algorithm.</p>
          </caption>
          <graphic xlink:href="peerj-11-14779-g006" position="float"/>
        </fig>
        <p>Finally, we can see that the improvements in completeness are notable but overall improvement is less at higher sensitivities. The runtime of both the default MMseqs2 and Complet+ significantly increase as the sensitivity increases, as shown with the connected component (CC) clustering runtimes <italic toggle="yes">vs.</italic> sensitivity for the two algorithms shown in <xref rid="fig-7" ref-type="fig">Fig. 7</xref>.</p>
        <fig position="float" id="fig-7">
          <object-id pub-id-type="doi">10.7717/peerj.14779/fig-7</object-id>
          <label>Figure 7</label>
          <caption>
            <title>Algorithm runtime <italic toggle="yes">vs.</italic> sensitivity levels for MMSeqs2 and Complet+.</title>
            <p>Both algorithms’ runtimes increase polynomially.</p>
          </caption>
          <graphic xlink:href="peerj-11-14779-g007" position="float"/>
        </fig>
      </sec>
      <sec>
        <title>Batch incremental learning using MMseqs2 <monospace><bold>clusterupdate</bold></monospace></title>
        <p>The results of incremental tests are consistent with the single-batch tests. As <xref rid="fig-8" ref-type="fig">Fig. 8</xref> shows, applying Complet+ results in an increase in completeness significantly greater than any concomitant reduction in homogeneity for incremental clustering (<italic toggle="yes">i.e.,</italic> V-measure is higher) as well. Notably, in <xref rid="fig-8" ref-type="fig">Fig. 8</xref>, the new classes (class-partitioned) results have a higher variance than that of the random partitioning. This is due to the difference in the data partitioning; in the case of the new classes test, 20% of the classes are added in each batch. In the case of the randomly-partitioned test, 20% of the data is added in each batch so the algorithm has seen the vast majority of the classes within the very first batch. MMseqs2 performs best when clustering incoming sequences if their true class is already represented in the database. This is consistent with the low variance seen in the metrics of the randomly-partitioned results. In the class-partitioned test, it is possible that some incoming classes may be similar to classes that have already been seen. Such sequences may then be clustered with existing clusters rather than being placed into new clusters. The batch that these clusters are in will vary between the tests, potentially causing increased variance in clustering metrics.</p>
        <fig position="float" id="fig-8">
          <object-id pub-id-type="doi">10.7717/peerj.14779/fig-8</object-id>
          <label>Figure 8</label>
          <caption>
            <title>Homogeneity, completeness, AMI, and ARI of the superfamily- <italic toggle="yes">vs.</italic> family- level for both (A) “new classes” and (B) “random” test batching partitions (for five batches) for MMSeqs <monospace>cluster</monospace> and <monospace>clusterupdate</monospace> followed by Complet+.</title>
            <p>The tick labeled “All” on the graphs represents clustering all sequences in one single batch. Overall, Complet+ increases MMSeqs2 completeness by substantially more than it reduces homogeneity relative to the default MMseqs2-generated clusters. Using Complet+ results in an increased AMI and ARI at both family and super-family levels. Also, we can see that discovery of new classes yield a large variance in performance as opposed to the base algorithm obtaining most classes in the first batch. The variance is due to the number of actual families or super-families (“true” clusters). (C &amp; D) Number of true and predicted clusters for default MMseqs2 and Complet+. The number of true clusters is always lower than what Default MMseqs2 finds, and Complet+ is able to reduce them 10–20% by merging proteins that belong to the same family/superfamily.</p>
          </caption>
          <graphic xlink:href="peerj-11-14779-g008" position="float"/>
        </fig>
        <p>For the class-partitioned incremental tests, the metrics of Batch 1 clustering were lower than those of the single-batch clustering. With each successive batch, homogeneity/completeness, and AMI increased, and by the last batch they were nearly as high as the metrics of the single-batch test. ARI slightly decreased with successive batches indicating a bias in clustering sequences together rather than making false positives/negatives randomly (which ARI rewards). As previously explained, AMI is the better measure for ground truth clusterings that are unbalanced, and ARI is better for balanced ground truth clusterings. Both SCOPe and Swiss-Prot COG are unbalanced datasets and thus favored by AMI. With the random tests, the metrics of the MMseqs2 <monospace>clusterupdate</monospace> algorithm never reached the single-batch metrics—however, Complet+ relatively stayed the same. The homogeneity and completeness of both the new class and random tests were relatively close in value by the final batch.</p>
        <p>To further evaluate the potential applicability of Complet+, we also tested it on the aforementioned MMSeqs2 clustering methods and CD-HIT on the Swiss-Prot COG database. Full results are provided at our GitHub site for this article, (<ext-link xlink:href="https://github.com/EESI/Complet-Plus" ext-link-type="uri">https://github.com/EESI/Complet-Plus</ext-link>.) In brief, when applying Complet+, the Swiss-Prot COG (only the Swiss-Prot portion of the COG database) class-partitioned test saw similar improvements in V-measure across the board. However, single-batch and random-partitioned tests do not show the same level of improvement. While Complet+ increased the completeness of the Default clusterings, the losses in homogeneity were greater than those observed in the SCOPe tests. This result is likely due to nearly identical sequences being classified in different COGs. Accordingly, schemes like COG, which classify sequences apart despite a high degree of similarity, are not well suited for Complet+.</p>
      </sec>
    </sec>
    <sec>
      <title>Complet+ is computationally scalable</title>
      <p>Batch learning, which is a type of incremental learning, demands that an algorithm should scale linearly with increasing data. We therefore ran several types of experiments to examine the runtime performance of Complet+. Taking the runtimes of all the different modes in SCOPe from (<xref rid="fig-5" ref-type="fig">Figs. 5A</xref> and <xref rid="fig-5" ref-type="fig">5B</xref>), we plotted the run times <italic toggle="yes">vs.</italic> # of clusters input into the algorithm, shown in <xref rid="fig-9" ref-type="fig">Fig. 9</xref>. We fit a power law to the curves, and SCOPe runtime-inputclusters follows an <italic toggle="yes">x</italic><sup>1.36</sup> while the Swissprot COG curve follows <italic toggle="yes">x</italic><sup>1.2</sup>. While it can be interpreted that Complet+ runs polynomial in time as a function of the number of input clusters, there is additional computational complexity. The time is due to the number of input clusters as well as the representative sequence similarity. If more representative sequences are similar than other clustering algorithms, the search will take more time. This is the case with the furthest blue and red point along the <italic toggle="yes">x</italic>-axis, which are due to the algorithm <monospace>linclust</monospace>. <monospace>linclust</monospace> yields cluster representatives that are more similar to each other, and therefore, adds another variable in the time complexity. We then conducted another experiment that considered the large dataset of 3 million proteins from the COG database shown in <xref rid="fig-10" ref-type="fig">Fig. 10</xref>. After splitting it into 50 batches and <bold>only</bold> using the <monospace>clusterupdate</monospace> algorithm, the curve (in green) fits a <italic toggle="yes">x</italic><sup>1</sup> power law which is exactly linear in time to the number of clusters. Therefore, if the same underlying algorithm is used, Complet+ is linear in time given the number of input clusters; otherwise, the relationship between representative sequences also needs to be taken into account between the algorithms.</p>
      <fig position="float" id="fig-9">
        <object-id pub-id-type="doi">10.7717/peerj.14779/fig-9</object-id>
        <label>Figure 9</label>
        <caption>
          <title>The Complet+ time <italic toggle="yes">vs.</italic> the number of clusters produced by a variety of algorithm modes in MMseqs2.</title>
          <p>Some algorithms deviate from the line on the log–log plot due to the output cluster representatives and the different relationships between them (<italic toggle="yes">e.g.</italic>: cascaded tends to produce more less similar representatives while <monospace>linclust</monospace> produces more similar ones). Using the same type of algorithm on the 50-batch large dataset, Complet+ scales linearly <italic toggle="yes">vs.</italic> the number of input clusters.</p>
        </caption>
        <graphic xlink:href="peerj-11-14779-g009" position="float"/>
      </fig>
      <fig position="float" id="fig-10">
        <object-id pub-id-type="doi">10.7717/peerj.14779/fig-10</object-id>
        <label>Figure 10</label>
        <caption>
          <title>Runtimes of MMseqs2 cascade clustering of sequences in a single batch and 50 increments of MMseqs2 clusterupdate, shown for a 3 million protein sequence data set from the COG database, with and without running Complet+ at each step.</title>
          <p>While Complet+ takes significantly longer than MMseqs2 clusterupdate, it scales linearly to the number of input clusters.</p>
        </caption>
        <graphic xlink:href="peerj-11-14779-g010" position="float"/>
      </fig>
      <p>Complet+ demonstrates linear time performance on the 50-batch incremental experiment on the full COG database in <xref rid="fig-10" ref-type="fig">Fig. 10</xref>. Because the current implementation of Complet+ can take 80% to 175% of the original MMseqs2 <monospace>cluster</monospace> time, we questioned the scalability of the method. As mentioned, the time that Complet+ takes is a function of how many clusters that the original algorithm (<italic toggle="yes">i.e.,</italic> MMseqs2 <monospace>clusterupdate</monospace>) produces, and the distances between cluster representative sequences. Also, cascaded clustering produces many fewer clusters than <monospace>linclust</monospace> or single-step clustering, and therefore, running Complet+ halves in time. Complet+ takes less time than the default cascaded algorithm, shown in the single-batch “All” bar of <xref rid="fig-10" ref-type="fig">Fig. 10</xref>. Complet+ does take longer than <monospace>clusterupdate</monospace> on all sequences. However, in incremental learning settings, where batches of sequences are being incrementally added, Complet+ is shown again in <xref rid="fig-10" ref-type="fig">Fig. 10</xref> (in addition to the green curve in <xref rid="fig-9" ref-type="fig">Fig. 9</xref>) to increase linearly with the amount of input clusters. Therefore, Complet+ is scalable to large datasets in an incremental setting.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusions</title>
    <p>Complet+ offers a transparent and easy-to-use solution for merging clusters to improve completeness and reduce the number of potentially redundant, similar clusters. Complet+ demonstrates consistent improvements to completeness with low penalty to homogeneity, all the while possessing linear scalability. Running Complet+ substantially reduces the number of singletons and very small clusters, which is critical for improving the performance of unsupervised methods for biological analysis. Complet+ also produces more biologically representative clusters: achieving a substantial increase in AMI and ARI metrics, which compare predicted clusters to biological classifications. Complet+ is also a versatile tool, improving clustering metrics on clusters generated using a wide range of algorithms, including MMseqs2’s single-step, cascade clustering, connected component clustering, and <monospace>clusterupdate</monospace> modules, as well as <monospace>linclust</monospace> and CD-HIT. Finally, we show that Complet+ is linearly scalable with respect to the number of clusters being post-processed, by testing it on a COG dataset of over 3 million sequences. The software and source code are available at <ext-link xlink:href="https://github.com/EESI/Complet-Plus" ext-link-type="uri">https://github.com/EESI/Complet-Plus</ext-link>.</p>
  </sec>
</body>
<back>
  <ack>
    <p>We would like to thank Drexel University’s University Research Computing Facility (URCF) for providing hardware where some of the computations were run. We thank Evan Yan for helping with the command line interface and compiling the Complet+ Docker container.</p>
  </ack>
  <sec sec-type="additional-information">
    <title>Additional Information and Declarations</title>
    <fn-group content-type="competing-interests">
      <title>Competing Interests</title>
      <fn id="conflict-1" fn-type="COI-statement">
        <p>The authors declare there are no competing interests.</p>
      </fn>
    </fn-group>
    <fn-group content-type="author-contributions">
      <title>Author Contributions</title>
      <fn id="contribution-1" fn-type="con">
        <p><xref rid="author-1" ref-type="contrib">Rachel Nguyen</xref> conceived and designed the experiments, performed the experiments, analyzed the data, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-2" fn-type="con">
        <p><xref rid="author-2" ref-type="contrib">Bahrad A. Sokhansanj</xref> conceived and designed the experiments, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-3" fn-type="con">
        <p><xref rid="author-3" ref-type="contrib">Robi Polikar</xref> conceived and designed the experiments, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-4" fn-type="con">
        <p><xref rid="author-4" ref-type="contrib">Gail L Rosen</xref> conceived and designed the experiments, analyzed the data, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
    </fn-group>
    <fn-group content-type="other">
      <title>Data Availability</title>
      <fn id="addinfo-1">
        <p>The following information was supplied regarding data availability:</p>
        <p>The code is available at Github: <ext-link xlink:href="https://github.com/EESI/Complet-Plus" ext-link-type="uri">https://github.com/EESI/Complet-Plus</ext-link>;</p>
        <p>rtn28, gailrosen, &amp; ev4nyan. (2022). EESI/Complet-Plus: Complet-Plus v1.0 (1.0). Zenodo. <ext-link xlink:href="https://doi.org/10.5281/zenodo.7449402" ext-link-type="uri">https://doi.org/10.5281/zenodo.7449402</ext-link>.</p>
      </fn>
    </fn-group>
  </sec>
  <ref-list content-type="authoryear">
    <title>References</title>
    <ref id="ref-1">
      <label>Bairoch &amp; Apweiler (1999)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bairoch</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Apweiler</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <year iso-8601-date="1999">1999</year>
        <article-title>The SWISS-PROT protein sequence data bank and its supplement TrEMBL in 1999</article-title>
        <source>Nucleic Acids Research</source>
        <volume>27</volume>
        <issue>1</issue>
        <fpage>49</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/27.1.49</pub-id>
        <pub-id pub-id-type="pmid">9847139</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-2">
      <label>Bernardes et al. (2015)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bernardes</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Vieira</surname>
            <given-names>FR</given-names>
          </name>
          <name>
            <surname>Costa</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Zaverucha</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2015">2015</year>
        <article-title>Evaluation and improvements of clustering algorithms for detecting remote homologous protein families</article-title>
        <source>BMC Bioinformatics</source>
        <volume>16</volume>
        <issue>1</issue>
        <fpage>34</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-014-0445-4</pub-id>
        <pub-id pub-id-type="pmid">25651949</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-3">
      <label>Chandonia et al. (2021)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chandonia</surname>
            <given-names>J-M</given-names>
          </name>
          <name>
            <surname>Guan</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Fox</surname>
            <given-names>NK</given-names>
          </name>
          <name>
            <surname>Brenner</surname>
            <given-names>SE</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>SCOPe: improvements to the structural classification of proteins—extended database to facilitate variant interpretation and machine learning</article-title>
        <source>Nucleic Acids Research</source>
        <volume>50</volume>
        <issue>D1</issue>
        <fpage>D553</fpage>
        <lpage>D559</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1054</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-4">
      <label>Chen et al. (2013)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>CK</given-names>
          </name>
          <name>
            <surname>Cheng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Zhao</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2013">2013</year>
        <article-title>A comparison of methods for clustering 16S rRNA sequences into OTUs</article-title>
        <source>PLOS ONE</source>
        <volume>8</volume>
        <issue>8</issue>
        <fpage>1</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0070837</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-5">
      <label>Dash et al. (2021)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dash</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rahman</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Hines</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>W-c</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>iBLAST: incremental BLAST of new sequences via automated e-value correction</article-title>
        <source>PLOS ONE</source>
        <volume>16</volume>
        <issue>4</issue>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0249410</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-6">
      <label>Edgar (2010)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2010">2010</year>
        <article-title>Search and clustering orders of magnitude faster than BLAST</article-title>
        <source>Bioinformatics</source>
        <volume>26</volume>
        <issue>19</issue>
        <fpage>2460</fpage>
        <lpage>2461</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq461</pub-id>
        <pub-id pub-id-type="pmid">20709691</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-7">
      <label>Enright, Van Dongen &amp; Ouzounis (2002)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Enright</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Van Dongen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ouzounis</surname>
            <given-names>CA</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2002">2002</year>
        <article-title>An efficient algorithm for large-scale detection of protein families</article-title>
        <source>Nucleic Acids Research</source>
        <volume>30</volume>
        <issue>7</issue>
        <fpage>1575</fpage>
        <lpage>1584</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/30.7.1575</pub-id>
        <pub-id pub-id-type="pmid">11917018</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-8">
      <label>Fox, Brenner &amp; Chandonia (2013)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fox</surname>
            <given-names>NK</given-names>
          </name>
          <name>
            <surname>Brenner</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Chandonia</surname>
            <given-names>J-M</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2013">2013</year>
        <article-title>SCOPe: structural classification of Proteins—extended, integrating SCOP and ASTRAL data and classification of new structures</article-title>
        <source>Nucleic Acids Research</source>
        <volume>42</volume>
        <issue>D1</issue>
        <fpage>D304</fpage>
        <lpage>D309</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkt1240</pub-id>
        <pub-id pub-id-type="pmid">24304899</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-9">
      <label>Galperin et al. (2019)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Galperin</surname>
            <given-names>MY</given-names>
          </name>
          <name>
            <surname>Kristensen</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Makarova</surname>
            <given-names>KS</given-names>
          </name>
          <name>
            <surname>Wolf</surname>
            <given-names>YI</given-names>
          </name>
          <name>
            <surname>Koonin</surname>
            <given-names>EV</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>Microbial genome analysis: the COG approach</article-title>
        <source>Briefings in Bioinformatics</source>
        <volume>20</volume>
        <issue>4</issue>
        <fpage>1063</fpage>
        <lpage>1070</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbx117</pub-id>
        <pub-id pub-id-type="pmid">28968633</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-10">
      <label>Galperin et al. (2021)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Galperin</surname>
            <given-names>MY</given-names>
          </name>
          <name>
            <surname>Wolf</surname>
            <given-names>YI</given-names>
          </name>
          <name>
            <surname>Makarova</surname>
            <given-names>KS</given-names>
          </name>
          <name>
            <surname>Vera Alvarez</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Landsman</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Koonin</surname>
            <given-names>EV</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>COG database update: focus on microbial diversity, model organisms, and widespread pathogens</article-title>
        <source>Nucleic Acids Research</source>
        <volume>49</volume>
        <issue>D1</issue>
        <fpage>D274</fpage>
        <lpage>D281</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkaa1018</pub-id>
        <pub-id pub-id-type="pmid">33167031</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-11">
      <label>Halac et al. (2021)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Halac</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sokhansanj</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Trimble</surname>
            <given-names>WL</given-names>
          </name>
          <name>
            <surname>Coard</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sabin</surname>
            <given-names>NC</given-names>
          </name>
          <name>
            <surname>Ozdogan</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Polikar</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rosen</surname>
            <given-names>GL</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>Incremental amp; semi-supervised learning for functional analysis of protein sequences</article-title>
        <conf-name>2021 IEEE symposium series on computational intelligence (SSCI)</conf-name>
        <conf-loc>Piscataway</conf-loc>
        <conf-sponsor>IEEE</conf-sponsor>
        <fpage>01</fpage>
        <lpage>08</lpage>
        <pub-id pub-id-type="doi">10.1109/SSCI50451.2021.9659958</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-12">
      <label>Hauser, Steinegger &amp; Söding (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hauser</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>MMseqs software suite for fast and deep clustering and searching of large protein sequence sets</article-title>
        <source>Bioinformatics</source>
        <volume>32</volume>
        <issue>9</issue>
        <fpage>1323</fpage>
        <lpage>1330</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw006</pub-id>
        <pub-id pub-id-type="pmid">26743509</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-13">
      <label>Hubbard et al. (1997)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hubbard</surname>
            <given-names>TJP</given-names>
          </name>
          <name>
            <surname>Murzin</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Brenner</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Chothia</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <year iso-8601-date="1997">1997</year>
        <article-title>SCOP: a structural classification of proteins database</article-title>
        <source>Nucleic Acids Research</source>
        <volume>25</volume>
        <issue>1</issue>
        <fpage>236</fpage>
        <lpage>239</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/25.1.236</pub-id>
        <pub-id pub-id-type="pmid">9016544</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-14">
      <label>Karim et al. (2020)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Karim</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Beyan</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Zappa</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Costa</surname>
            <given-names>IG</given-names>
          </name>
          <name>
            <surname>Rebholz-Schuhmann</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Cochez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Decker</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <article-title>Deep learning-based clustering approaches for bioinformatics</article-title>
        <source>Briefings in Bioinformatics</source>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>393</fpage>
        <lpage>415</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbz170</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-15">
      <label>Li &amp; Godzik (2006)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Godzik</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <article-title>Cd-hit: a fast program for clustering and comparing large sets of protein or nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <volume>22</volume>
        <issue>13</issue>
        <fpage>1658</fpage>
        <lpage>1659</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl158</pub-id>
        <pub-id pub-id-type="pmid">16731699</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-16">
      <label>NCBI (0000)</label>
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <collab>National Center for Biotechnology Information (NCBI)</collab>
        </person-group>
        <article-title>Documentation of the BLASTCLUST-algorithm</article-title>
        <uri xlink:href="ftp://ftp.ncbi.nih.gov/blast/documents/blastclust.html">ftp://ftp.ncbi.nih.gov/blast/documents/blastclust.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-17">
      <label>Nguyen et al. (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nguyen</surname>
            <given-names>N-P</given-names>
          </name>
          <name>
            <surname>Warnow</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>A perspective on 16S rRNA operational taxonomic unit clustering using sequence similarity</article-title>
        <source>NPJ Biofilms and Microbiomes</source>
        <volume>2</volume>
        <fpage>16004</fpage>
        <pub-id pub-id-type="doi">10.1038/npjbiofilms.2016.4</pub-id>
        <pub-id pub-id-type="pmid">28721243</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-18">
      <label>Ozdogan et al. (2021)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Ozdogan</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sabin</surname>
            <given-names>NC</given-names>
          </name>
          <name>
            <surname>Gracie</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Portley</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Halac</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Coard</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Trimble</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Sokhansanj</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Rosen</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Polikar</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>Incremental and semi-supervised learning of 16S-rRNA genes for taxonomic classification</article-title>
        <conf-name>2021 IEEE symposium series on computational intelligence (SSCI)</conf-name>
        <conf-loc>Piscataway</conf-loc>
        <conf-sponsor>IEEE</conf-sponsor>
        <fpage>1</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1109/SSCI50451.2021.9660093</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-19">
      <label>Paccanaro, Casbon &amp; Saqi (2006)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paccanaro</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Casbon</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Saqi</surname>
            <given-names>MAS</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <article-title>Spectral clustering of protein sequences</article-title>
        <source>Nucleic Acids Research</source>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>1571</fpage>
        <lpage>1580</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkj515</pub-id>
        <pub-id pub-id-type="pmid">16547200</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-20">
      <label>Pedregosa et al. (2011)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pedregosa</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Varoquaux</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Gramfort</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Michel</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Thirion</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Grisel</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Blondel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Prettenhofer</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Weiss</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Dubourg</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Vanderplas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Passos</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cournapeau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Brucher</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Perrot</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Duchesnay</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2011">2011</year>
        <article-title>Scikit-Learn: machine learning in Python</article-title>
        <source>Journal of Machine Learning Research</source>
        <volume>12</volume>
        <fpage>2825</fpage>
        <lpage>2830</lpage>
      </element-citation>
    </ref>
    <ref id="ref-21">
      <label>Romano et al. (2015)</label>
      <element-citation publication-type="workingpaper">
        <person-group person-group-type="author">
          <name>
            <surname>Romano</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Vinh</surname>
            <given-names>NX</given-names>
          </name>
          <name>
            <surname>Bailey</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Verspoor</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2015">2015</year>
        <article-title>Adjusting for chance clustering comparison measures</article-title>
        <source>arXiv</source>
        <pub-id pub-id-type="doi">10.48550/ARXIV.1512.01286</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-22">
      <label>Rosenberg &amp; Hirschberg (2007)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Rosenberg</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hirschberg</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2007">2007</year>
        <article-title>V-Measure: a conditional entropy-based external cluster evaluation measure</article-title>
        <conf-name>Proceedings of the 2007 joint conference on empirical methods in natural language processing and computational natural language learning (EMNLP-CoNLL)</conf-name>
        <conf-sponsor>Association for Computational Linguistics</conf-sponsor>
        <conf-loc>Prague, Czech Republic</conf-loc>
        <fpage>410</fpage>
        <lpage>420</lpage>
      </element-citation>
    </ref>
    <ref id="ref-23">
      <label>Schloss &amp; McMahon (2021)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schloss</surname>
            <given-names>PD</given-names>
          </name>
          <name>
            <surname>McMahon</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>Amplicon sequence variants artificially split bacterial genomes into separate clusters</article-title>
        <source>MSphere</source>
        <volume>6</volume>
        <issue>4</issue>
        <elocation-id>e00191–21</elocation-id>
        <pub-id pub-id-type="doi">10.1128/mSphere.00191-21</pub-id>
        <pub-id pub-id-type="pmid">34287003</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-24">
      <label>Steinegger &amp; Söding (2017)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nature Biotechnology</source>
        <volume>35</volume>
        <issue>11</issue>
        <fpage>1026</fpage>
        <lpage>1028</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-25">
      <label>Steinegger &amp; Söding (2018)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Clustering huge protein sequence sets in linear time</article-title>
        <source>Nature Communications</source>
        <volume>9</volume>
        <fpage>2542</fpage>
        <pub-id pub-id-type="doi">10.1038/s41467-018-04964-5</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-26">
      <label>Vanni et al. (2022)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vanni</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Schechter</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Acinas</surname>
            <given-names>SG</given-names>
          </name>
          <name>
            <surname>Barberán</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Buttigieg</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Casamayor</surname>
            <given-names>EO</given-names>
          </name>
          <name>
            <surname>Delmont</surname>
            <given-names>TO</given-names>
          </name>
          <name>
            <surname>Duarte</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Eren</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Finn</surname>
            <given-names>RD</given-names>
          </name>
          <name>
            <surname>Kottmann</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mitchell</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sánchez</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Siren</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gloeckner</surname>
            <given-names>FO</given-names>
          </name>
          <name>
            <surname>Fernàndez-Guerra</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2022">2022</year>
        <article-title>Unifying the known and unknown microbial coding sequence space</article-title>
        <source>ELife</source>
        <volume>11</volume>
        <person-group person-group-type="editor">
          <name>
            <surname>Brown</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Storz</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <elocation-id>e67667</elocation-id>
        <pub-id pub-id-type="doi">10.7554/eLife.67667</pub-id>
        <pub-id pub-id-type="pmid">35356891</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-27">
      <label>Vinh, Epps &amp; Bailey (2009)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Vinh</surname>
            <given-names>NX</given-names>
          </name>
          <name>
            <surname>Epps</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bailey</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2009">2009</year>
        <article-title>Information theoretic measures for clusterings comparison: is a correction for chance necessary?</article-title>
        <conf-name>Proceedings of the 26th annual international conference on machine learning, ICML ’09</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>1073</fpage>
        <lpage>1080</lpage>
        <pub-id pub-id-type="doi">10.1145/1553374.1553511</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-28">
      <label>Wong &amp; Ragan (2008)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wong</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ragan</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2008">2008</year>
        <article-title>MACHOS: markov clusters of homologous subsequences</article-title>
        <source>Bioinformatics</source>
        <volume>24</volume>
        <issue>13</issue>
        <fpage>i77</fpage>
        <lpage>i85</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn144</pub-id>
        <pub-id pub-id-type="pmid">18586748</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-29">
      <label>Youngblut &amp; Ley (2021)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Youngblut</surname>
            <given-names>ND</given-names>
          </name>
          <name>
            <surname>Ley</surname>
            <given-names>RE</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>Struo2: efficient metagenome profiling database construction for ever-expanding microbial genome datasets</article-title>
        <source>PeerJ</source>
        <volume>9</volume>
        <elocation-id>e12198</elocation-id>
        <pub-id pub-id-type="doi">10.7717/peerj.12198</pub-id>
        <pub-id pub-id-type="pmid">34616633</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-30">
      <label>Zhao, Cristian &amp; Rosen (2020)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhao</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Cristian</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rosen</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <article-title>Keeping up with the genomes: efficient learning of our increasing knowledge of the tree of life</article-title>
        <source>BMC Bioinformatics</source>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>412</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-020-03744-7</pub-id>
        <pub-id pub-id-type="pmid">32957925</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
