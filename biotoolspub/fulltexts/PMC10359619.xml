<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10359619</article-id>
    <article-id pub-id-type="pmid">37399090</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad415</article-id>
    <article-id pub-id-type="publisher-id">btad415</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Gene Expression</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PyWGCNA: a Python package for weighted gene co-expression network analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Rezaie</surname>
          <given-names>Narges</given-names>
        </name>
        <aff><institution>Department of Developmental and Cell Biology, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
        <aff><institution>Center for Complex Biological Systems, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-9240-0102</contrib-id>
        <name>
          <surname>Reese</surname>
          <given-names>Farilie</given-names>
        </name>
        <aff><institution>Department of Developmental and Cell Biology, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
        <aff><institution>Center for Complex Biological Systems, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-4259-6362</contrib-id>
        <name>
          <surname>Mortazavi</surname>
          <given-names>Ali</given-names>
        </name>
        <aff><institution>Department of Developmental and Cell Biology, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
        <aff><institution>Center for Complex Biological Systems, UC Irvine</institution>, Irvine, CA 92697, <country country="US">United States</country></aff>
        <xref rid="btad415-cor1" ref-type="corresp"/>
        <!--ali.mortazavi@uci.edu-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Mathelier</surname>
          <given-names>Anthony</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad415-cor1">Corresponding author. Department of Developmental and Cell Biology and Center for Complex Biological Systems, 2300 Biological Sciences 3, UC Irvine, Irvine, CA 92697, United States. E-mail: <email>ali.mortazavi@uci.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-07-03">
      <day>03</day>
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>03</day>
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>7</issue>
    <elocation-id>btad415</elocation-id>
    <history>
      <date date-type="received">
        <day>23</day>
        <month>8</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>12</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>16</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>30</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>20</day>
        <month>7</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad415.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Weighted gene co-expression network analysis (WGCNA) is frequently used to identify modules of genes that are co-expressed across many RNA-seq samples. However, the current R implementation is slow, is not designed to compare modules between multiple WGCNA networks, and its results can be hard to interpret as well as to visualize. We introduce the PyWGCNA Python package, which is designed to identify co-expression modules from large RNA-seq datasets. PyWGCNA has a faster implementation than the R version of WGCNA and several additional downstream analysis modules for functional enrichment analysis using GO, KEGG, and REACTOME, inter-module analysis of protein–protein interactions, as well as comparison of multiple co-expression modules to each other and/or external lists of genes such as marker genes from single cell.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We apply PyWGCNA to two distinct datasets of brain bulk RNA-seq from MODEL-AD to identify modules associated with the genotypes. We compare the resulting modules to each other to find shared co-expression signatures in the form of modules with significant overlap across the datasets.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>The PyWGCNA library for Python 3 is available on PyPi at pypi.org/project/PyWGCNA and on GitHub at github.com/mortazavilab/PyWGCNA. The data underlying this article are available in GitHub at github.com/mortazavilab/PyWGCNA/tutorials/5xFAD_paper.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Institutes of Health</institution>
            <institution-id institution-id-type="DOI">10.13039/100000002</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>U54 AG054349</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="4"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Weighted gene co-expression network analysis (WGCNA) is a widely used method for describing the correlation patterns of genes across a large set of samples (<xref rid="btad415-B6" ref-type="bibr">Langfelder and Horvath 2008</xref>). WGCNA can be used to find modules of highly correlated genes, to summarize modules, to relate modules to one another as well as to external traits, and calculate module membership. Correlation networks facilitate network-based gene screening methods that can be used to identify candidate biomarkers or therapeutic targets. These methods have been successfully applied in many biological contexts, such as cancer, mouse genetics, and analysis of human data. The WGCNA package (<xref rid="btad415-B6" ref-type="bibr">Langfelder and Horvath 2008</xref>) is implemented in the popular R language. As sequencing datasets grow larger and more complex, it is important to have a scalable implementation of WGCNA.</p>
    <p>We introduce PyWGCNA, which is designed to perform WGCNA and downstream analytical tasks natively in Python (<xref rid="btad415-F1" ref-type="fig">Fig. 1A</xref>). PyWGCNA supports co-expression network analysis of large, high-dimensional gene or transcript expression datasets that are time or memory inefficient in R. PyWGCNA can directly perform functional enrichment analysis including Gene Ontology (GO), KEGG, and REACTOME on co-expression modules to characterize the functional activity of each module. PyWGCNA also supports addition or removal of data to allow for iterative improvement on network construction as new samples become available or need to be taken out. Finally, PyWGCNA can compare co-expression modules from multiple networks with one another to assess module reproducibility or with marker genes from scRNA-seq clusters to assess functional activity or cell-type specificity of each module. We demonstrate PyWGCNA’s utility in identifying co-expression modules associated with genotype in bulk RNA-seq from MODEL-AD (<ext-link xlink:href="http://www.model-ad.org" ext-link-type="uri">www.model-ad.org</ext-link>) using 5xFAD and 3xTg-AD mouse models of Alzheimer’s disease (AD) and matching WT mice.</p>
    <fig position="float" id="btad415-F1">
      <label>Figure 1.</label>
      <caption>
        <p>PyWGCNA steps and output example. (A) Overview of PyWGCNA. (B) Average runtime of PyWGCNA and R version of WGCNA versus the number of features used in downsampled datasets in triplicate. (C) Coral and (D) white module eigengene expression profile from 5xFAD mouse model summarized by genotype. Above, the top three rows display the metadata for each dataset including sex, tissue, and age. Below, the bar plot represents module eigengene expression by genotype for each dataset with individual sample module eigengene expression shown as points. GO analysis of the genes in 5xFAD (E) coral and (F) white modules, respectively. (G) Bubble plot of module overlap test results between 5xFAD and 3xTg-AD mouse models of familial AD. The dot size represents the fraction of shared genes between each pair of modules and non-gray color denotes the significance of the overlap between modules. (H) Comparison graph of 5xFAD and 3xTg-AD modules mouse models of familial AD for those with &gt;0.05 Jaccard similarity. The thickness of lines shows the Jaccard index value.</p>
      </caption>
      <graphic xlink:href="btad415f1" position="float"/>
    </fig>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <sec>
      <title>2.1 Identifying co-expression modules</title>
      <sec>
        <title>2.1.1 Data preprocessing and initialization of the PyWGCNA object</title>
        <p>The PyWGCNA object stores user-specified network parameters such as the network type and major outputs such as the adjacency matrix. PyWGCNA can be initialized from data in csv, tsv or AnnData (<xref rid="btad415-B8" ref-type="bibr">Virshup <italic toggle="yes">et al.</italic> 2021</xref>) format. We recommend prior preprocessing and normalization of input gene or transcript expression data, including any necessary batch correction. Gene/transcript expression data and metadata about each gene or sample are stored within the object in AnnData format. PyWGCNA can remove overly sparse genes/transcripts or samples and lowly expressed genes/transcripts, as well as outlier samples based on hierarchical clustering and user-defined thresholds.</p>
      </sec>
      <sec>
        <title>2.1.2 Finding co-expression modules</title>
        <p>PyWGCNA follows an identical approach to the reference WGCNA R package, differing only in default parameter choices. First, PyWGCNA constructs a co-expression matrix by calculating the correlation between each pair of genes/transcripts from the preprocessed expression data. It then constructs a co-expression network based on soft power thresholding the correlation matrix followed by computing the topological overlap matrix to produce the final network. Finally, PyWGCNA identifies co-expressed modules of genes/transcripts by hierarchically clustering the network and performing a dynamic tree cut.</p>
      </sec>
      <sec>
        <title>2.1.3 Downstream analysis and visualization of co-expression modules</title>
        <p>PyWGCNA provides several options for downstream analysis and visualization of co-expression modules. It can perform module-trait correlation, compute and summarize module eigengene expression across sample metadata categories, detecting hug genes in each module, and perform functional enrichment analysis in each module using databases such as GO, KEGG, and REACTOME (<xref rid="btad415-B4" ref-type="bibr">Gillespie <italic toggle="yes">et al.</italic> 2022</xref>) via GSEApy (<xref rid="btad415-B2" ref-type="bibr">Fang <italic toggle="yes">et al.</italic> 2023</xref>) and BioMart (<xref rid="btad415-B1" ref-type="bibr">Cunningham <italic toggle="yes">et al.</italic> 2022</xref>). PyWGCNA can also recover known and predicted protein–protein interactions within each module using the STRING database (<xref rid="btad415-B7" ref-type="bibr">Szklarczyk <italic toggle="yes">et al.</italic> 2021</xref>). Each of these analysis options comes with easy-to-use plotting tools to visualize the results. Additional plotting tools include interactive module network visualization with options for selecting genes to display in each module.</p>
      </sec>
    </sec>
    <sec>
      <title>2.2 Assessing co-expression module overlap between PyWGCNA objects or to single-cell data</title>
      <p>PyWGCNA can compare co-expression modules from multiple PyWGCNA objects by computing the Jaccard similarity coefficient and the proportion of common genes for each pair of modules between objects. The statistical significance of the overlap is assessed using Fisher’s exact test. Using the same strategy, PyWGCNA can find the overlap between co-expression modules and different gene lists such as marker genes from single-cell RNA-seq, which can reveal the cell-type specificity of each co-expression module. In both cases, the results from these tests can be easily visualized using PyWGCNA (<xref rid="btad415-F1" ref-type="fig">Fig. 1A</xref>).</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>In order to compare the performance of PyWGCNA and the R reference of WGCNA, we used expression data for both gene-level (from bulk short-read RNA-seq) and transcript-level (from bulk long-read RNA-seq) expression datasets of 100 samples from the ENCODE portal (<ext-link xlink:href="http://www.encodeproject.org" ext-link-type="uri">www.encodeproject.org</ext-link>). We produced 15 subset datasets with a reduced number of genes or transcripts to calculate how runtime changes as the number of features increases. For each subset, we ran PyWGCNA and R WGCNA three times each on the same number of CPUs (32 cores) and memory allocation (300 GB). We found that while both packages had similar performance up to 16 000 genes, PyWGCNA was twice as fast on larger datasets. Furthermore, we were able to identify modules for 96 000 transcripts with PyWGCNA but were not able to compute a co-expression network in R with the same dataset due to memory constraints (<xref rid="btad415-F1" ref-type="fig">Fig. 1B</xref>).</p>
    <p>We then applied PyWGCNA to 192 bulk RNA-seq samples of cortex and hippocampus of the 5xFAD mouse model and matching C57BL/6J mice at four ages (4, 8, 12, and 18 months) in both sexes (<xref rid="btad415-B3" ref-type="bibr">Forner <italic toggle="yes">et al.</italic> 2021</xref>). PyWGCNA recovered 17 gene co-expression modules that are associated with age, genotype, tissue, and sex. The coral module is strongly correlated with age progression in the 5xFAD genotype (<italic toggle="yes">P</italic>-value &lt; 0.05) as illustrated by the module eigengene expression (<xref rid="btad415-F1" ref-type="fig">Fig. 1C</xref>), while the white module is significantly correlated with the hippocampus in both genotypes (<xref rid="btad415-F1" ref-type="fig">Fig. 1D</xref>). The 5xFAD coral module contains 1335 genes, which are significantly enriched for GO terms related to immune response and neutrophil activation (<xref rid="btad415-F1" ref-type="fig">Fig. 1E</xref>). This module includes well-known microglial activation genes such as Cst7, Tyrobp, and Trem2. In contrast, the 5xFAD white module (435 genes) was enriched in GO terms such as cilium movement, organization, and assembly (<xref rid="btad415-F1" ref-type="fig">Fig. 1F</xref>).</p>
    <p>We also applied PyWGCNA to 38 bulk RNA-seq hippocampus female samples from the 3xTg-AD mouse model and matching WT mice at three ages (4, 12, and 18 months) (<xref rid="btad415-B5" ref-type="bibr">Javonillo <italic toggle="yes">et al.</italic> 2022</xref>). This analysis yielded 17 modules that are correlated with age or genotype. The dark gray module (380 genes) is strongly correlated with the 3xTg-AD genotype mice and the 18-month time point. GO analysis reveals that this module is also significantly enriched for genes related to neutrophil degranulation and immune response with genes such as Csf1, Tyrobp, and Trem2.</p>
    <p>To assess the similarity between modules found in the 5xFAD and 3xTg-AD experiments, we used PyWGCNA to perform module overlap tests. We find several modules with significant overlap that are also enriched for similar functions (<xref rid="btad415-F1" ref-type="fig">Fig. 1G and H</xref>). As expected, based on their functional enrichment, the 5xFAD coral module and the 3xTg-AD dark gray module significantly overlap one another, suggesting that the co-expression network within these modules is conserved across the two familial AD mouse models. The 3xTg-AD white module (434 genes) has a strong correlation with 18-month samples and is also enriched in cilium movement. This module significantly overlaps with the 5xFAD white module (<xref rid="btad415-F1" ref-type="fig">Fig. 1H</xref>).</p>
  </sec>
  <sec>
    <title>4 Summary</title>
    <p>We have developed a Python package based on the original R implementation of WGCNA. PyWGCNA is capable of handling larger datasets and provides an additional set of well-documented functions. There are several additional downstream functions for the analysis and visualization tools for results such as functional enrichment analysis and identifying protein–protein interactions, as well as multi ways comparison between multiple PyWGCNA networks or with any other gene list. For example, the PyWGCNA Jaccard similarity-based gene list overlap test allows for associating specific cell types to individual modules for further interpretation of the possible functions of these modules. We expect such comparative analyses to grow as the number of datasets grows exponentially. We hope that this package will fill a gap in the Python bioinformatics community.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Author contributions</title>
    <p>A.M. and N.R. designed the study; A.M., N.R., and F.R. wrote the article. N.R. wrote the package and documentation.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by National Institutes of Health [U54 AG054349 to A.M.].</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad415-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cunningham</surname><given-names>F</given-names></string-name>, <string-name><surname>Allen</surname><given-names>JE</given-names></string-name>, <string-name><surname>Allen</surname><given-names>J</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Ensembl 2022</article-title>. <source>Nucleic Acids Res</source>  <year>2022</year>;<volume>50</volume>:<fpage>D988</fpage>–<lpage>95</lpage>.<pub-id pub-id-type="pmid">34791404</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fang</surname><given-names>Z</given-names></string-name>, <string-name><surname>Liu</surname><given-names>X</given-names></string-name>, <string-name><surname>Peltz</surname><given-names>G.</given-names></string-name></person-group>  <article-title>GSEApy: a comprehensive package for performing gene set enrichment analysis in Python</article-title>. <source>Bioinformatics</source>  <year>2023</year>;<volume>39</volume>:<fpage>btac757</fpage>.<pub-id pub-id-type="pmid">36426870</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Forner</surname><given-names>S</given-names></string-name>, <string-name><surname>Kawauchi</surname><given-names>S</given-names></string-name>, <string-name><surname>Balderrama-Gutierrez</surname><given-names>G</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Systematic phenotyping and characterization of the 5xFAD mouse model of Alzheimer’s disease</article-title>. <source>Sci Data</source>  <year>2021</year>;<volume>8</volume>:<fpage>270</fpage>.<pub-id pub-id-type="pmid">34654824</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gillespie</surname><given-names>M</given-names></string-name>, <string-name><surname>Jassal</surname><given-names>B</given-names></string-name>, <string-name><surname>Stephan</surname><given-names>R</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>The reactome pathway knowledgebase 2022</article-title>. <source>Nucleic Acids Res</source>  <year>2022</year>;<volume>50</volume>:<fpage>D687</fpage>–<lpage>92</lpage>.<pub-id pub-id-type="pmid">34788843</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Javonillo</surname><given-names>DI</given-names></string-name>, <string-name><surname>Tran</surname><given-names>KM</given-names></string-name>, <string-name><surname>Phan</surname><given-names>J</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>Systematic phenotyping and characterization of the 3xTg-AD mouse model of Alzheimer’s disease</article-title>. <source>Front Neurosci</source>  <year>2022</year>;<volume>15</volume>:<fpage>785276</fpage>.<pub-id pub-id-type="pmid">35140584</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Langfelder</surname><given-names>P</given-names></string-name>, <string-name><surname>Horvath</surname><given-names>S.</given-names></string-name></person-group>  <article-title>WGCNA: an R package for weighted correlation network analysis</article-title>. <source>BMC Bioinformatics</source>  <year>2008</year>;<volume>9</volume>:<fpage>559</fpage>.<pub-id pub-id-type="pmid">19114008</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Szklarczyk</surname><given-names>D</given-names></string-name>, <string-name><surname>Gable</surname><given-names>AL</given-names></string-name>, <string-name><surname>Nastou</surname><given-names>KC</given-names></string-name></person-group>  <etal>et al</etal>  <article-title>The STRING database in 2021: customizable protein–protein networks, and functional characterization of user-uploaded gene/measurement sets</article-title>. <source>Nucleic Acids Res</source>  <year>2021</year>;<volume>49</volume>:<fpage>D605</fpage>–<lpage>12</lpage>.<pub-id pub-id-type="pmid">33237311</pub-id></mixed-citation>
    </ref>
    <ref id="btad415-B8">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Virshup</surname><given-names>I</given-names></string-name>, <string-name><surname>Rybakov</surname><given-names>S</given-names></string-name>, <string-name><surname>Theis</surname><given-names>FJ</given-names></string-name></person-group>  <etal>et al</etal>  <year>2021</year>. anndata: annotated data. bioRxiv, <ext-link xlink:href="http://biorxiv.org/lookup/doi/10.1101/2021.12.16.473007" ext-link-type="uri">http://biorxiv.org/lookup/doi/10.1101/2021.12.16.473007</ext-link>, 18 August 2022, preprint: not peer reviewed.</mixed-citation>
    </ref>
  </ref-list>
</back>
