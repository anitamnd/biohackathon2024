<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8428581</article-id>
    <article-id pub-id-type="pmid">33693556</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btab156</article-id>
    <article-id pub-id-type="publisher-id">btab156</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Compact and evenly distributed <italic toggle="yes">k</italic>-mer binning for genomic sequences</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Nyström-Persson</surname>
          <given-names>Johan</given-names>
        </name>
        <xref rid="btab156-cor1" ref-type="corresp"/>
        <aff><institution>JNP Solutions</institution>, Yokoami, Sumida-ku, Tokyo 130-0015, <country country="JP">Japan</country></aff>
        <aff><institution>Department of R&amp;D, Lifematics Inc</institution>., Kanda Jinbocho, Chiyoda-ku, Tokyo 101-0051, <country country="JP">Japan</country></aff>
        <!--johan@jnpersson.com-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Keeble-Gagnère</surname>
          <given-names>Gabriel</given-names>
        </name>
        <aff><institution>Department of Agriculture Victoria Research, AgriBio, Centre for AgriBioscience</institution>, Bundoora, VIC 3083, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zawad</surname>
          <given-names>Niamat</given-names>
        </name>
        <aff><institution>Department of R&amp;D, Lifematics Inc</institution>., Kanda Jinbocho, Chiyoda-ku, Tokyo 101-0051, <country country="JP">Japan</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Robinson</surname>
          <given-names>Peter</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btab156-cor1">To whom correspondence should be addressed. <email>johan@jnpersson.com</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>01</day>
      <month>9</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-03-08">
      <day>08</day>
      <month>3</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>08</day>
      <month>3</month>
      <year>2021</year>
    </pub-date>
    <volume>37</volume>
    <issue>17</issue>
    <fpage>2563</fpage>
    <lpage>2569</lpage>
    <history>
      <date date-type="received">
        <day>13</day>
        <month>10</month>
        <year>2020</year>
      </date>
      <date date-type="rev-recd">
        <day>15</day>
        <month>2</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>03</day>
        <month>3</month>
        <year>2021</year>
      </date>
      <date date-type="editorial-decision">
        <day>28</day>
        <month>2</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btab156.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>The processing of <italic toggle="yes">k</italic>-mers (subsequences of length <italic toggle="yes">k</italic>) is at the foundation of many sequence processing algorithms in bioinformatics, including <italic toggle="yes">k</italic>-mer counting for genome size estimation, genome assembly, and taxonomic classification for metagenomics. Minimizers—ordered <italic toggle="yes">m</italic>-mers where <italic toggle="yes">m </italic>&lt;<italic toggle="yes"> k</italic>—are often used to group <italic toggle="yes">k</italic>-mers into bins as a first step in such processing. However, minimizers are known to generate bins of very different sizes, which can pose challenges for distributed and parallel processing, as well as generally increase memory requirements. Furthermore, although various minimizer orderings have been proposed, their practical value for improving tool efficiency has not yet been fully explored.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present Discount, a distributed <italic toggle="yes">k</italic>-mer counting tool based on Apache Spark, which we use to investigate the behaviour of various minimizer orderings in practice when applied to metagenomics data. Using this tool, we then introduce the universal frequency ordering, a new combination of frequency-sampled minimizers and universal <italic toggle="yes">k</italic>-mer hitting sets, which yields both evenly distributed binning and small bin sizes. We show that this ordering allows Discount to perform distributed <italic toggle="yes">k</italic>-mer counting on a large dataset in as little as 1/8 of the memory of comparable approaches, making it the most efficient out-of-core distributed <italic toggle="yes">k</italic>-mer counting method available.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Discount is GPL licensed and available at <ext-link xlink:href="https://github.com/jtnystrom/discount" ext-link-type="uri">https://github.com/jtnystrom/discount</ext-link>. The data underlying this article are available in the article and in its online supplementary material.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <counts>
      <page-count count="7"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>The analysis of <italic toggle="yes">k</italic>-mers, short sequence fragments of a fixed length <italic toggle="yes">k</italic>, is foundational to many methods and algorithms in bioinformatics, including genome assembly (<xref rid="btab156-B13" ref-type="bibr">Koren <italic toggle="yes">et al.</italic>, 2017</xref>), <italic toggle="yes">k</italic>-mer counting (<xref rid="btab156-B7" ref-type="bibr">Erbert <italic toggle="yes">et al.</italic>, 2017</xref>; <xref rid="btab156-B12" ref-type="bibr">Kokot <italic toggle="yes">et al.</italic>, 2017</xref>; <xref rid="btab156-B18" ref-type="bibr">Rizk <italic toggle="yes">et al.</italic>, 2013</xref>), variant calling (<xref rid="btab156-B1" ref-type="bibr">Audano <italic toggle="yes">et al.</italic>, 2018</xref>) and metagenomic classification (<xref rid="btab156-B22" ref-type="bibr">Wood and Salzberg, 2014</xref>). Due to the proliferation of next-generation sequencing (NGS) data and other types of omics data, such <italic toggle="yes">k</italic>-mer data analysis needs are constantly increasing. This has led to the need for ever more efficient algorithms and methods in this area. The <italic toggle="yes">k</italic>-mer analysis of large datasets is often computationally challenging. For example, when <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>55, for the usual DNA alphabet {A, C, G, T} there exists a total of 4<sup>55</sup> (approximately <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mn>1.3</mml:mn><mml:mo>×</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mrow><mml:mn>33</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>) possible such <italic toggle="yes">k</italic>-mers. This large data space, usually much too large to represent in memory or on disk in its entirety, is a major source of the complexity of <italic toggle="yes">k</italic>-mer analysis. One commonly used strategy for overcoming this complexity is <italic toggle="yes">k</italic>-mer binning. Since only a small fraction of all possible <italic toggle="yes">k</italic>-mers are seen in practice for a given dataset, one aims to subdivide the data that is actually encountered into reasonably sized parts and base data processing (such as counting, manipulation, lookup of associated data) on these.</p>
    <p>Binning is often done by grouping <italic toggle="yes">k</italic>-mers according to their <italic toggle="yes">minimizers</italic>, a technique first introduced in biological applications by <xref rid="btab156-B19" ref-type="bibr">Roberts <italic toggle="yes">et al.</italic> (2004)</xref>. Minimizers are obtained by ordering all <italic toggle="yes">m</italic>-mers <italic toggle="yes">M<sub>i</sub></italic> for some fixed <italic toggle="yes">m</italic>, where <italic toggle="yes">m </italic>&lt;<italic toggle="yes"> k</italic>, in some way: <inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mn>0</mml:mn></mml:msub><mml:mo>&lt;</mml:mo><mml:msub><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>&lt;</mml:mo><mml:mo>…</mml:mo><mml:mo>&lt;</mml:mo><mml:msub><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>. We say that <italic toggle="yes">M<sub>i</sub></italic> is smaller than <italic toggle="yes">M<sub>j</sub></italic> if <italic toggle="yes">i </italic>&lt;<italic toggle="yes"> j</italic>. Each <italic toggle="yes">k</italic>-mer is then classified according to the smallest minimizer in it. Often, consecutive <italic toggle="yes">k</italic>-mers in a longer sequence will share the same <italic toggle="yes">m</italic>-minimizer. Thus, an input sequence may be split into <italic toggle="yes">super-mers</italic>, maximally long substrings where all <italic toggle="yes">k</italic>-mers share the same minimizer. This allows for the partitioning of super-mers into bins, where each bin corresponds to a minimizer, which effectively yields a hash table for <italic toggle="yes">k</italic>-mers. Grouping <italic toggle="yes">k</italic>-mers together in this way can also provide a compact representation, since super-mers are much more space efficient than representing each <italic toggle="yes">k</italic>-mer by itself.</p>
    <p>Various minimizer orderings exist. Although simple to implement and reason about, the basic lexicographic ordering proposed by Roberts leads to very unbalanced bins in practice. This can lead to higher memory usage and to a slowdown in general, since algorithms on larger bins can be more expensive to run.</p>
    <p>The <italic toggle="yes">k</italic>-mer counter KMC2 (<xref rid="btab156-B4" ref-type="bibr">Deorowicz <italic toggle="yes">et al.</italic>, 2015</xref>) introduced <italic toggle="yes">minimizer signatures</italic>, which order <italic toggle="yes">m</italic>-mers lexicographically, except that in order to reduce data skew, <italic toggle="yes">m</italic>-mers starting with AAA or ACA are given lower priority, and <italic toggle="yes">m</italic>-mers containing AA anywhere are also avoided, except for AA at the start. This helps spread out the <italic toggle="yes">k</italic>-mers somewhat and avoid certain very unbalanced bins. This ordering is also used by Gerbil (<xref rid="btab156-B7" ref-type="bibr">Erbert <italic toggle="yes">et al.</italic>, 2017</xref>), and by FastKmer (<xref rid="btab156-B9" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic>, 2019</xref>) in a modified form with some additional rules.</p>
    <p>The <italic toggle="yes">frequency-counted</italic> ordering was first introduced by <xref rid="btab156-B2" ref-type="bibr">Chikhi <italic toggle="yes">et al.</italic> (2014)</xref> for the purpose of efficient de Bruijn Graph representation. A similar approach (weighted minimizers) was also used by <xref rid="btab156-B11" ref-type="bibr">Jain <italic toggle="yes">et al.</italic> (2020)</xref> for long read mapping. In this ordering, rare minimizers, based on occurrence in the actual dataset in each case, are given higher priority than common minimizers.</p>
    <p>Finally, the concept of <italic toggle="yes">compact universal k-mer hitting sets</italic> was recently introduced by <xref rid="btab156-B16" ref-type="bibr">Orenstein <italic toggle="yes">et al.</italic> (2016</xref>, <xref rid="btab156-B17" ref-type="bibr">2017</xref>). For any given sequence of length <italic toggle="yes">k</italic> to be hit by (include) at least one sequence of length <italic toggle="yes">m</italic> in some set of <italic toggle="yes">m</italic>-mers, it is not necessary to include every <italic toggle="yes">m</italic>-mer in the set. Small sets that hit every <italic toggle="yes">k</italic>-length sequence can be precomputed. Such a set can be turned into an ordering by giving all <italic toggle="yes">m</italic>-mers not in the set lower priority, effectively excluding them. Although generating optimal universal sets is an NP-hard problem, the recently introduced PASHA (<xref rid="btab156-B6" ref-type="bibr">Ekim <italic toggle="yes">et al.</italic>, 2020</xref>) algorithm is able to generate near-optimal sets relatively quickly.</p>
    <p>Although many different orderings with diverse characteristics have been proposed, it is still not clear which ordering should be preferred in practice, and many recent innovations have not yet been fully explored. Thus, to help identify the best methods for large scale omics data analysis, a practical evaluation of the various possible orderings when applied to demanding tasks is needed.</p>
    <p>When evaluating minimizer orderings with the aim of improving software efficiency, the following measurements are useful to consider.
</p>
    <list list-type="bullet">
      <list-item>
        <p><bold>Maximum bin size.</bold> This directly impacts performance. For tools that perform out-of-core sequential processing of bins, often the minimum memory requirement is that each bin should be able to fit in memory in its entirety. Moreover, larger bins may increase the total runtime due to the superlinear cost of algorithms such as sorting, as well as the amount of temporary data structures being allocated.</p>
      </list-item>
      <list-item>
        <p><bold>Flatness of distribution.</bold> This can be measured in various ways. Since the impact of outsized large bins is much more significant than that of small bins, we focus on the proportion of <italic toggle="yes">k</italic>-mers stored in the largest 0.5% of bins. We also give the max/mean ratio of bin sizes.</p>
      </list-item>
      <list-item>
        <p><bold>Length of super-mers/compactness.</bold> Longer super-mers give a more compact representation in memory and on disk, or for network transmission in a distributed setting. Equivalently, one may measure the average distance between minimizers (the inverse of their <italic toggle="yes">density</italic>), or the total number of super-mers (inversely proportional to their average length for a given dataset) (More precisely, the total number of <italic toggle="yes">k</italic>-mers represented by <italic toggle="yes">n</italic> super-mers of length <italic toggle="yes">L</italic> (in letters) is <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:mrow><mml:mi>n</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>L</mml:mi><mml:mo>−</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, since each super-mer has to overlap another by <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> letters. Thus, the larger <italic toggle="yes">L</italic>, the smaller the fraction of pure overlap data <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> in the super-mer, and the more efficient the storage.).</p>
      </list-item>
      <list-item>
        <p><bold>Number of bins.</bold> Many tools currently in use also try to limit the number of bins. For example, the KMC2 authors argue that one goal of a good minimizer ordering should be that ‘the number of bins should be neither too large nor too small’ (<xref rid="btab156-B4" ref-type="bibr">Deorowicz <italic toggle="yes">et al.</italic>, 2015</xref>). However, while limiting the number of bins is reasonable when each bin is stored in a separate file, alternative system designs allow a large number of bins to be stored together in a small number of files. Furthermore, a larger number of fine grained bins has advantages in subsequent processing. Many algorithms, such as sorting, have a lower per-item cost when applied to smaller lists of items, e.g. quicksort has a best case runtime of <inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo> </mml:mo><mml:mtext>log</mml:mtext><mml:mo> </mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and a worst case of <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. Thus, in addition to the goals stated above, we believe that the ability to generate a large number of small (but evenly distributed) bins is a desirable goal, especially if this can also be done while keeping super-mers long.</p>
      </list-item>
    </list>
    <p><xref rid="btab156-B15" ref-type="bibr">Marçais <italic toggle="yes">et al.</italic> (2017)</xref> provided a systematic study of the minimizer behaviour in practice of various widely used tools. They compared existing tools with universal sets generated by DOCKS (<xref rid="btab156-B16" ref-type="bibr">Orenstein <italic toggle="yes">et al.</italic>, 2016</xref>) for the parameters <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>7, <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>11, for a synthetic dataset as well as for the human genome. They reported the average bin size, the max/mean ratio for bins, and the mean distance between minimizers. The number of bins studied was in each case <inline-formula id="IE8"><mml:math id="IM8" display="inline" overflow="scroll"><mml:mrow><mml:mo>≤</mml:mo><mml:mn>16</mml:mn><mml:mo>,</mml:mo><mml:mn>384</mml:mn></mml:mrow></mml:math></inline-formula>.</p>
    <p>Various minimizer orderings were evaluated by <xref rid="btab156-B7" ref-type="bibr">Erbert <italic toggle="yes">et al.</italic> (2017)</xref>, in the context of the F. vesca genome for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>6, <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>28. In addition to the KMC2/signature ordering, lexicographic ordering, randomized ordering and the CGAT (lexicographic, but with C &lt; G &lt; A &lt; T) ordering, they also studied <italic toggle="yes">distance from pivot</italic> (dfp), which is a modified version of the frequency-counted ordering that attempts to avoid very small bins. For this comparison, they only reported the maximum bin size and the total number of super-mers. Although compactness was measured, measurements such as the bin size distribution, or the number of bins generated in each case, were not reported.</p>
    <p>In omics data analysis, metagenomics data has much higher complexity compared to single-species omics data, owing to the large number of distinct <italic toggle="yes">k</italic>-mers, and hence represents a challenging use case. Here, we systematically study, using two metagenomics datasets, the use of six different minimizer orderings to generate a large number of <italic toggle="yes">k</italic>-mer bins. We consider cases in the order of 10<sup>5</sup> to 10<sup>6</sup> bins. As far as we know, this is the first time that these minimizer orderings have been comparatively evaluated for a large number of bins, or with metagenomics data. As part of our study we propose a new ordering, <italic toggle="yes">the universal frequency ordering</italic>, which yields a very even distribution and long super-mers.</p>
    <p>With the increasing size and complexity of omics datasets, and the high resource requirements of some omics tools, there is an increasing need for distributed algorithms (<xref rid="btab156-B8" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic>, 2017</xref>). For distributed processing, being able to subdivide the workload evenly is even more important than for single-machine processing, since communication and synchronization costs, such as shuffling over the network, can be significant. One of the more popular and widely accepted frameworks for distributed data processing in recent years is Apache Spark (<xref rid="btab156-B21" ref-type="bibr">The Apache Software Foundation, 2020</xref>) (Spark for short), which brings a general programming model to the Hadoop distributed filesystem.</p>
    <p>As a case study for the performance benefits of minimizer orderings, we are particularly interested in the problem of <italic toggle="yes">k</italic>-mer counting (<xref rid="btab156-B14" ref-type="bibr">Manekar and Sathe, 2018</xref>). In itself, this method can be used for purposes such as abundance filtering and genome size estimation, and it can also be a necessary foundation for more complex methods, such as de Bruijn Graph compaction, genome assembly and metagenomic classification. Thus, in order to evaluate the various minimizer orderings, we implement a new distributed <italic toggle="yes">k</italic>-mer counting tool on Spark, called Discount. Discount can function as a pure <italic toggle="yes">k</italic>-mer counter, but can also double as a minimizer analysis tool, reporting detailed statistics about super-mers and <italic toggle="yes">k</italic>-mers in each bin. This allows us to freely evaluate various orderings on a realistic workload. Discount is freely available (on GitHub at <ext-link xlink:href="https://github.com/jtnystrom/discount" ext-link-type="uri">https://github.com/jtnystrom/discount</ext-link>) and GPL licensed.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>In order to study minimizer orderings as well as their effect on practical tasks, we have implemented a distributed <italic toggle="yes">k</italic>-mer counting tool, Discount, on Apache Spark. Here, we briefly describe the design of this tool. Spark applications operate on <italic toggle="yes">RDDs</italic> (resilient distributed datasets), which are distributed collections of data, divided into some number of partitions. An application can execute some number of <italic toggle="yes">stages</italic> that operate on such partitions in parallel on a cluster. </p>
    <p>In order to read FASTA and FASTQ files efficiently into Spark, we use the FastDoop library (<xref rid="btab156-B8" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic>, 2017</xref>). Next, the following stages are applied (<xref rid="btab156-F1" ref-type="fig">Fig. 1</xref>).</p>
    <fig position="float" id="btab156-F1">
      <label>Fig. 1.</label>
      <caption>
        <p>Internal stages of the Discount application. Here, we show a toy example with <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>3 (minimizer length) and <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>5 (<italic toggle="yes">k</italic>-mer length)</p>
      </caption>
      <graphic xlink:href="btab156f1" position="float"/>
    </fig>
    <list list-type="bullet">
      <list-item>
        <p><bold>Sampling (optional).</bold> When sampling is used, a fraction (our default is 1%) of reads is sampled to obtain an estimate of minimizer frequencies in the data.</p>
      </list-item>
      <list-item>
        <p><bold>Hashing.</bold> Genomic reads are split into super-mers. If desired, the minimizer frequency estimate from the previous stage, and optionally also a user-supplied universal hitting set, are used to configure the minimizer ordering. The resulting super-mers are encoded in the commonly used compact form of two bits per letter. Super-mers are shuffled into their assigned bins (i.e. by minimizer) such that each bin is located in its entirety in one partition, and thus on a single machine in a Spark cluster.</p>
      </list-item>
      <list-item>
        <p><bold>Processing.</bold> In <italic toggle="yes">k</italic>-mer counting mode, in each bin super-mers are broken up into individual <italic toggle="yes">k</italic>-mers, sorted and counted. Optionally, a counts table or histogram is written to disk. Otherwise, only summary statistics is collected and aggregated, and then presented to the user. In minimizer analysis mode, a summary of the contents of bins is output in a table containing each bin’s number of super-mers, distinct <italic toggle="yes">k</italic>-mers and total <italic toggle="yes">k</italic>-mers. This allows for further downstream evaluation of the selected minimizer ordering’s behaviour and characteristics.</p>
      </list-item>
    </list>
    <p>We use Discount to study the following minimizer orderings. As baselines for comparison, one may take the signature ordering, which is used by many tools in practice, and the naive random ordering.</p>
    <p><bold>Signature.</bold> We implement minimizer signatures according to the rules described in <xref rid="btab156-B4" ref-type="bibr">Deorowicz <italic toggle="yes">et al.</italic> (2015)</xref>. See the introduction for details.</p>
    <p><bold>Random.</bold> A random ordering obtained by XORing each <italic toggle="yes">m</italic>-mer with a random constant. This ordering is different each time Discount runs.</p>
    <p><bold>Frequency-sampled.</bold> Here, we order minimizers from rare to common based on their estimated abundance in the actual dataset. For efficiency, we sample 1% of the data and use frequencies obtained from this fraction. Ties between equally frequent minimizers are resolved by ordering them lexicographically.</p>
    <p><bold>Universal lexicographic.</bold> We used the PASHA (<xref rid="btab156-B6" ref-type="bibr">Ekim <italic toggle="yes">et al.</italic>, 2020</xref>) tool to generate compact universal hitting sets for <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>28, 55 and <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>9, 10. For this ordering, we exclude those minimizers that are not in the universal set, and the included minimizers are ordered lexicographically (A &lt; C &lt; G &lt; T). For example, for <inline-formula id="IE9"><mml:math id="IM9" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>28</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>, the set includes 1 67 178 <italic toggle="yes">m</italic>-mers and number of bins created would not be greater than this number. The sizes of our other generated sets are: 44 143 (<inline-formula id="IE10"><mml:math id="IM10" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>28</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>9</mml:mn></mml:mrow></mml:math></inline-formula>), 1 31 773 (<inline-formula id="IE11"><mml:math id="IM11" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>55</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>) and 34 719 (<inline-formula id="IE12"><mml:math id="IM12" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>55</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>9</mml:mn></mml:mrow></mml:math></inline-formula>).</p>
    <p><bold>Universal random.</bold> A random ordering on the universal sets used above, obtained by XORing each <italic toggle="yes">m</italic>-mer with a random constant. This ordering is different each time Discount runs.</p>
    <p><bold>Universal frequency.</bold> We propose a novel ordering, obtained by combining the frequency-sampled ordering and the universal set ordering. This ordering is established by sorting the universal sets used above according to the 1% sampled frequency count in the data. As above, ties between equally frequent minimizers are resolved lexicographically.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>We applied Discount to two short read NGS datasets: (i) part of a cow rumen metagenomic study (<xref rid="btab156-B10" ref-type="bibr">Hess <italic toggle="yes">et al.</italic>, 2011</xref>) (SRA run SRR094926), and (ii) part of the Tara Oceans marine metagenome study (<xref rid="btab156-B20" ref-type="bibr">Sunagawa <italic toggle="yes">et al.</italic>, 2015</xref>) (SRA run ERR599052). First, we used the first 100 million reads of both datasets (<xref rid="btab156-T1" ref-type="table">Table 1</xref>) to study the properties of the various orderings. As FASTQ files, each of these partial datasets is approximately 30 GB in size.</p>
    <table-wrap position="float" id="btab156-T1">
      <label>Table 1.</label>
      <caption>
        <p>Datasets</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th colspan="2" align="left" rowspan="1">Partial (100 million reads)<hr/></th>
            <th colspan="2" align="left" rowspan="1">Full<hr/></th>
          </tr>
          <tr>
            <th rowspan="1" colspan="1">Dataset</th>
            <th rowspan="1" colspan="1">k</th>
            <th rowspan="1" colspan="1">Total</th>
            <th rowspan="1" colspan="1">Distinct</th>
            <th rowspan="1" colspan="1">Total</th>
            <th rowspan="1" colspan="1">Distinct</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Cow rumen</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE13">
                <mml:math id="IM13" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>7.39</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE14">
                <mml:math id="IM14" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>5.09</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE15">
                <mml:math id="IM15" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>7.23</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE16">
                <mml:math id="IM16" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>2.94</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">55</td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE17">
                <mml:math id="IM17" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>4.69</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE18">
                <mml:math id="IM18" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>3.73</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE19">
                <mml:math id="IM19" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>4.59</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE20">
                <mml:math id="IM20" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>2.50</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Marine</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE21">
                <mml:math id="IM21" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>7.26</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE22">
                <mml:math id="IM22" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>3.73</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE23">
                <mml:math id="IM23" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>3.89</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE24">
                <mml:math id="IM24" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>1.14</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">55</td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE25">
                <mml:math id="IM25" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>4.57</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE26">
                <mml:math id="IM26" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>3.04</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mn>9</mml:mn>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE27">
                <mml:math id="IM27" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>2.44</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
            <td rowspan="1" colspan="1">
              <inline-formula id="IE28">
                <mml:math id="IM28" display="inline" overflow="scroll">
                  <mml:mrow>
                    <mml:mn>1.04</mml:mn>
                    <mml:mo>×</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mn>10</mml:mn>
                        </mml:mrow>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mrow>
                </mml:math>
              </inline-formula>
            </td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn1">
          <p><italic toggle="yes">Note</italic>: Number of <italic toggle="yes">k</italic>-mers in the datasets used for minimizer ordering evaluation (partial) and <italic toggle="yes">k</italic>-mer counting (full) in this work.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>We collected bin statistics for the various orderings (shown in <xref rid="btab156-T2" ref-type="table">Table 2</xref>). For each ordering, the total size of the largest 0.5% of bins gives an indication of the evenness of distribution (the smaller, the better). The signature ordering resulted in an uneven distribution, but produced long super-mers. The universal lexicographic and universal random orderings produced even longer super-mers, and were slightly more evenly distributed. The frequency ordering greatly improved evenness, but super-mers were much shorter. Finally, the universal frequency ordering produced the best max/mean ratio, the best evenness, and also almost as long super-mers as the signature ordering. <xref rid="btab156-F2" ref-type="fig">Figure 2</xref> shows density plots of the bin size distributions for the two datasets. The frequency ordering had a larger area under the curve since it generated a much larger number of mostly very small bins. Universal frequency bin sizes were mainly concentrated in a single peak.</p>
    <fig position="float" id="btab156-F2">
      <label>Fig. 2.</label>
      <caption>
        <p>Density plots of <italic toggle="yes">k</italic>-mer bin distributions. Please see <xref rid="btab156-T2" ref-type="table">Table 2</xref> for further details. Additional plots for <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>55 are available in <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref></p>
      </caption>
      <graphic xlink:href="btab156f2" position="float"/>
    </fig>
    <table-wrap position="float" id="btab156-T2">
      <label>Table 2.</label>
      <caption>
        <p>Minimizer ordering measurements</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th colspan="4" rowspan="1">Bin sizes (total k-mers)<hr/></th>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <th rowspan="1" colspan="1">k</th>
            <th rowspan="1" colspan="1">m</th>
            <th rowspan="1" colspan="1">Ordering</th>
            <th rowspan="1" colspan="1">Bins</th>
            <th rowspan="1" colspan="1">Mean</th>
            <th rowspan="1" colspan="1">Max</th>
            <th rowspan="1" colspan="1">Max/mean</th>
            <th rowspan="1" colspan="1">Std.dev</th>
            <th rowspan="1" colspan="1">Avg s.mer</th>
            <th rowspan="1" colspan="1">Top 0.5%</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="10" rowspan="1">
              <bold>Cow rumen metagenome dataset</bold>
            </td>
          </tr>
          <tr>
            <td rowspan="6" colspan="1">28</td>
            <td rowspan="6" colspan="1">10</td>
            <td rowspan="1" colspan="1">random</td>
            <td rowspan="1" colspan="1">4 02 181</td>
            <td rowspan="1" colspan="1">18 373.98</td>
            <td rowspan="1" colspan="1">14 08 363</td>
            <td rowspan="1" colspan="1">76.65</td>
            <td rowspan="1" colspan="1">44 412.59</td>
            <td rowspan="1" colspan="1">9.28</td>
            <td rowspan="1" colspan="1">11.66%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">frequency</td>
            <td rowspan="1" colspan="1">9 85 599</td>
            <td rowspan="1" colspan="1">7 497.64</td>
            <td rowspan="1" colspan="1">2 02 535</td>
            <td rowspan="1" colspan="1">27.01</td>
            <td rowspan="1" colspan="1">8 965.39</td>
            <td rowspan="1" colspan="1">5.75</td>
            <td rowspan="1" colspan="1">3.25%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">signature</td>
            <td rowspan="1" colspan="1">4 15 899</td>
            <td rowspan="1" colspan="1">17 767.94</td>
            <td rowspan="1" colspan="1">13 52 062</td>
            <td rowspan="1" colspan="1">76.10</td>
            <td rowspan="1" colspan="1">40 958.18</td>
            <td rowspan="1" colspan="1">9.02</td>
            <td rowspan="1" colspan="1">8.81%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal lex</td>
            <td rowspan="1" colspan="1">1 66 577</td>
            <td rowspan="1" colspan="1">44 361.86</td>
            <td rowspan="1" colspan="1">18 93 021</td>
            <td rowspan="1" colspan="1">42.67</td>
            <td rowspan="1" colspan="1">59 794.00</td>
            <td rowspan="1" colspan="1">9.84</td>
            <td rowspan="1" colspan="1">4.87%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal rand</td>
            <td rowspan="1" colspan="1">1 67 115</td>
            <td rowspan="1" colspan="1">44 219.05</td>
            <td rowspan="1" colspan="1">45 30 489</td>
            <td rowspan="1" colspan="1">102.46</td>
            <td rowspan="1" colspan="1">61 420.43</td>
            <td rowspan="1" colspan="1">9.42</td>
            <td rowspan="1" colspan="1">5.21%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal freq</td>
            <td rowspan="1" colspan="1">1 67 172</td>
            <td rowspan="1" colspan="1">44 203.97</td>
            <td rowspan="1" colspan="1">3 94 768</td>
            <td rowspan="1" colspan="1">8.93</td>
            <td rowspan="1" colspan="1">18 921.38</td>
            <td rowspan="1" colspan="1">9.27</td>
            <td rowspan="1" colspan="1">1.14%</td>
          </tr>
          <tr>
            <td rowspan="6" colspan="1">55</td>
            <td rowspan="6" colspan="1">10</td>
            <td rowspan="1" colspan="1">random</td>
            <td rowspan="1" colspan="1">2 59 619</td>
            <td rowspan="1" colspan="1">18 070.26</td>
            <td rowspan="1" colspan="1">18 71 228</td>
            <td rowspan="1" colspan="1">103.55</td>
            <td rowspan="1" colspan="1">55 389.36</td>
            <td rowspan="1" colspan="1">16.15</td>
            <td rowspan="1" colspan="1">13.04%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">frequency</td>
            <td rowspan="1" colspan="1">8 89 414</td>
            <td rowspan="1" colspan="1">5 274.69</td>
            <td rowspan="1" colspan="1">2 87 304</td>
            <td rowspan="1" colspan="1">54.47</td>
            <td rowspan="1" colspan="1">8 857.77</td>
            <td rowspan="1" colspan="1">11.31</td>
            <td rowspan="1" colspan="1">5.01%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">signature</td>
            <td rowspan="1" colspan="1">2 09 023</td>
            <td rowspan="1" colspan="1">22 444.34</td>
            <td rowspan="1" colspan="1">18 29 255</td>
            <td rowspan="1" colspan="1">81.50</td>
            <td rowspan="1" colspan="1">53 684.77</td>
            <td rowspan="1" colspan="1">16.13</td>
            <td rowspan="1" colspan="1">9.28%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal lex</td>
            <td rowspan="1" colspan="1">1 23 308</td>
            <td rowspan="1" colspan="1">38 046.05</td>
            <td rowspan="1" colspan="1">30 67 656</td>
            <td rowspan="1" colspan="1">80.63</td>
            <td rowspan="1" colspan="1">69 920.79</td>
            <td rowspan="1" colspan="1">16.28</td>
            <td rowspan="1" colspan="1">7.29%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal rand</td>
            <td rowspan="1" colspan="1">1 25 272</td>
            <td rowspan="1" colspan="1">37 449.57</td>
            <td rowspan="1" colspan="1">42 76 472</td>
            <td rowspan="1" colspan="1">114.19</td>
            <td rowspan="1" colspan="1">71 767.70</td>
            <td rowspan="1" colspan="1">16.16</td>
            <td rowspan="1" colspan="1">7.68%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal freq</td>
            <td rowspan="1" colspan="1">1 31 704</td>
            <td rowspan="1" colspan="1">35 620.66</td>
            <td rowspan="1" colspan="1">3 12 687</td>
            <td rowspan="1" colspan="1">8.78</td>
            <td rowspan="1" colspan="1">23 950.62</td>
            <td rowspan="1" colspan="1">15.97</td>
            <td rowspan="1" colspan="1">1.51%</td>
          </tr>
          <tr>
            <td colspan="10" rowspan="1">
              <bold>Marine metagenome dataset</bold>
            </td>
          </tr>
          <tr>
            <td rowspan="6" colspan="1">28</td>
            <td rowspan="6" colspan="1">10</td>
            <td rowspan="1" colspan="1">random</td>
            <td rowspan="1" colspan="1">5 36 419</td>
            <td rowspan="1" colspan="1">13 534.92</td>
            <td rowspan="1" colspan="1">74 08 859</td>
            <td rowspan="1" colspan="1">547.39</td>
            <td rowspan="1" colspan="1">69 815.50</td>
            <td rowspan="1" colspan="1">7.64</td>
            <td rowspan="1" colspan="1">19.95%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">frequency</td>
            <td rowspan="1" colspan="1">1 002 163</td>
            <td rowspan="1" colspan="1">7 244.72</td>
            <td rowspan="1" colspan="1">82 931</td>
            <td rowspan="1" colspan="1">11.45</td>
            <td rowspan="1" colspan="1">7173.75</td>
            <td rowspan="1" colspan="1">5.12</td>
            <td rowspan="1" colspan="1">2.52%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">signature</td>
            <td rowspan="1" colspan="1">415 718</td>
            <td rowspan="1" colspan="1">17 464.70</td>
            <td rowspan="1" colspan="1">51 79 699</td>
            <td rowspan="1" colspan="1">296.58</td>
            <td rowspan="1" colspan="1">68 689.92</td>
            <td rowspan="1" colspan="1">9.20</td>
            <td rowspan="1" colspan="1">19.92%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal lex</td>
            <td rowspan="1" colspan="1">1 66 520</td>
            <td rowspan="1" colspan="1">43 600.70</td>
            <td rowspan="1" colspan="1">88 15 602</td>
            <td rowspan="1" colspan="1">202.19</td>
            <td rowspan="1" colspan="1">1 19 830.20</td>
            <td rowspan="1" colspan="1">9.78</td>
            <td rowspan="1" colspan="1">13.74%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal rand</td>
            <td rowspan="1" colspan="1">1 66 895</td>
            <td rowspan="1" colspan="1">43 502.73</td>
            <td rowspan="1" colspan="1">50 85 446</td>
            <td rowspan="1" colspan="1">116.90</td>
            <td rowspan="1" colspan="1">97 268.02</td>
            <td rowspan="1" colspan="1">9.45</td>
            <td rowspan="1" colspan="1">11.86%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal freq</td>
            <td rowspan="1" colspan="1">1 67 173</td>
            <td rowspan="1" colspan="1">43 430.39</td>
            <td rowspan="1" colspan="1">5 35 913</td>
            <td rowspan="1" colspan="1">12.34</td>
            <td rowspan="1" colspan="1">26 234.79</td>
            <td rowspan="1" colspan="1">9.00</td>
            <td rowspan="1" colspan="1">2.02%</td>
          </tr>
          <tr>
            <td rowspan="6" colspan="1">55</td>
            <td rowspan="6" colspan="1">10</td>
            <td rowspan="1" colspan="1">random</td>
            <td rowspan="1" colspan="1">2 08 541</td>
            <td rowspan="1" colspan="1">21 896.81</td>
            <td rowspan="1" colspan="1">48 26 566</td>
            <td rowspan="1" colspan="1">220.42</td>
            <td rowspan="1" colspan="1">78 406.11</td>
            <td rowspan="1" colspan="1">15.88</td>
            <td rowspan="1" colspan="1">17.23%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">frequency</td>
            <td rowspan="1" colspan="1">9 93 329</td>
            <td rowspan="1" colspan="1">4597.05</td>
            <td rowspan="1" colspan="1">68 616</td>
            <td rowspan="1" colspan="1">14.93</td>
            <td rowspan="1" colspan="1">6635.20</td>
            <td rowspan="1" colspan="1">10.41</td>
            <td rowspan="1" colspan="1">4.25%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">signature</td>
            <td rowspan="1" colspan="1">1 96 514</td>
            <td rowspan="1" colspan="1">23 236.93</td>
            <td rowspan="1" colspan="1">55 94 282</td>
            <td rowspan="1" colspan="1">240.75</td>
            <td rowspan="1" colspan="1">83 778.67</td>
            <td rowspan="1" colspan="1">16.05</td>
            <td rowspan="1" colspan="1">18.17%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal lex</td>
            <td rowspan="1" colspan="1">1 23 364</td>
            <td rowspan="1" colspan="1">37 015.51</td>
            <td rowspan="1" colspan="1">1 42 23 589</td>
            <td rowspan="1" colspan="1">384.26</td>
            <td rowspan="1" colspan="1">1 42 466.09</td>
            <td rowspan="1" colspan="1">16.03</td>
            <td rowspan="1" colspan="1">18.92%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal rand</td>
            <td rowspan="1" colspan="1">1 23 921</td>
            <td rowspan="1" colspan="1">36 849.14</td>
            <td rowspan="1" colspan="1">59 36 297</td>
            <td rowspan="1" colspan="1">161.10</td>
            <td rowspan="1" colspan="1">98 391.61</td>
            <td rowspan="1" colspan="1">16.32</td>
            <td rowspan="1" colspan="1">15.54%</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">universal freq</td>
            <td rowspan="1" colspan="1">1 31 765</td>
            <td rowspan="1" colspan="1">34 655.50</td>
            <td rowspan="1" colspan="1">1 02 733</td>
            <td rowspan="1" colspan="1">2.96</td>
            <td rowspan="1" colspan="1">15 219.88</td>
            <td rowspan="1" colspan="1">15.62</td>
            <td rowspan="1" colspan="1">1.16%</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn2">
          <p><italic toggle="yes">Note</italic>: Results obtained when using Discount to break up each dataset into binned super-mers. Here, <italic toggle="yes">m</italic> represents the minimizer length, so that for an unconstrained ordering, there would be a theoretical maximum of <inline-formula id="IE29"><mml:math id="IM29" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mn>4</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> different minimizers (bins). Bin sizes are measured as the total number of <italic toggle="yes">k</italic>-mers in each bin prior to counting distinct items (i.e. as the sum of super-mer lengths in that bin). The average super-mer length is measured as a number of <italic toggle="yes">k</italic>-mers. The rightmost column gives the proportion of <italic toggle="yes">k</italic>-mers in the largest 0.5% of bins. Data for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>9 may be found in <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref>.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>Since they depend on a random constant, the random ordering and the universal random ordering were in practice different specific orderings for each run of Discount. The average super-mer length for the random ordering on the marine dataset (<italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>28) is an outlier (7.64) and shows the volatility of this ordering.</p>
    <p>As for the sampling fraction for the frequency-sampled orderings, in practice we have found that 1% of reads produced consistent results, and can be sampled quickly. Increasing the fraction to 10% had only very minor effects in terms of the metrics we study here.</p>
    <p>Next, we compared the performance of <italic toggle="yes">k</italic>-mer counting on Discount with FastKmer (<xref rid="btab156-B9" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic>, 2019</xref>). FastKmer is a highly efficient distributed <italic toggle="yes">k</italic>-mer counting tool based on Spark, which uses a variant of the signature ordering. For this comparison, we applied the two tools to the full data from run SRR094926, cow rumen metagenomics data (see above), from which we previously used only 100 million reads (<xref rid="btab156-T1" ref-type="table">Table 1</xref>). The size of this dataset is about 314 GB as uncompressed FASTQ files.</p>
    <p>We ran the benchmarks on the Google Cloud Platform (GCP) using three different configurations (<xref rid="btab156-T3" ref-type="table">Table 3</xref>). In each case, four worker machines with sixteen cores each were used, and the cluster master machine was an n1-standard-4 machine with four CPUs. All machines were from the Google Cloud N1 series, with Intel Xeon CPUs running at 2.7–3.2 GHz (all-core turbo frequency). The version of Apache Spark used was 2.4.6. For FastKmer, we used four n1-highmem-16 machines, for a total of 64 CPUs and 256 GB executor RAM (since FastKmer would not run with less memory). The FastKmer authors’ recommended best settings from <xref rid="btab156-B9" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic> (2019)</xref> were used: <inline-formula id="IE30"><mml:math id="IM30" display="inline" overflow="scroll"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mi>b</mml:mi><mml:mo>=</mml:mo><mml:mn>8192</mml:mn></mml:mrow></mml:math></inline-formula>. However, we increased parallelism (partitions) from the recommended 320 to 2000, since this gave better performance in our setting. For FastKmer, the number of bins was limited to 8192 as recommended. We also tried larger numbers but did not see a performance improvement. For Discount, the universal frequency ordering was used with the same universal sets as in the previous section, <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>10. The number of bins was not constrained and most likely exceeded the number shown in <xref rid="btab156-T2" ref-type="table">Table 2</xref> (but would not have been larger than 1 67 178, the size of the universal set).</p>
    <table-wrap position="float" id="btab156-T3">
      <label>Table 3.</label>
      <caption>
        <p>Resource configurations used for performance measurements</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Benchmark</th>
            <th rowspan="1" colspan="1">Worker machine type</th>
            <th rowspan="1" colspan="1">Workers</th>
            <th rowspan="1" colspan="1">Cores</th>
            <th rowspan="1" colspan="1">RAM (GB)</th>
            <th rowspan="1" colspan="1">Executor RAM (GB)</th>
            <th rowspan="1" colspan="1">Partitions (parallelism)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">FastKmer</td>
            <td rowspan="1" colspan="1">n1-highmem-16</td>
            <td rowspan="1" colspan="1">4</td>
            <td rowspan="1" colspan="1">64</td>
            <td rowspan="1" colspan="1">416</td>
            <td rowspan="1" colspan="1">256</td>
            <td rowspan="1" colspan="1">2000</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Discount high memory</td>
            <td rowspan="1" colspan="1">n1-standard-16</td>
            <td rowspan="1" colspan="1">4</td>
            <td rowspan="1" colspan="1">64</td>
            <td rowspan="1" colspan="1">240</td>
            <td rowspan="1" colspan="1">87</td>
            <td rowspan="1" colspan="1">4000</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Discount low memory</td>
            <td rowspan="1" colspan="1">n1-highcpu-16</td>
            <td rowspan="1" colspan="1">4</td>
            <td rowspan="1" colspan="1">64</td>
            <td rowspan="1" colspan="1">57.6</td>
            <td rowspan="1" colspan="1">34</td>
            <td rowspan="1" colspan="1">14 000</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn3">
          <p><italic toggle="yes">Note</italic>: Cores and memory (RAM) are reported as totals for all worker machines.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>The two applications were performing very similar tasks: outputting a final table with counts for each <italic toggle="yes">k</italic>-mer. Generating this table involves allocating a large amount of strings and writing the data to disk. Hence, this benchmark shows the overall performance effects of non-trivial processing of <italic toggle="yes">k</italic>-mer bins. The outputs from the two applications were identical, except that FastKmer unified <italic toggle="yes">k</italic>-mers with their reverse complements, unlike Discount.</p>
    <p>In a Spark cluster, not all the memory available on the machines is assigned to Spark executors (which run the actual tasks), since some memory is reserved for the operating system, task management and other functions. For the Discount high memory case, we limited executor memory to test the efficiency of our method. Thus, the total executor memory in that case was only 87 GB across all four machines. For the Discount low memory case, we increased the number of Spark partitions, making them smaller to further limit memory pressure. We also reduced the maximum MapReduce split size (for the underlying file inputs) from the default 128–64 MB.</p>
    <p>We measured the time required by running Discount as well as FastKmer on the full dataset (<xref rid="btab156-T4" ref-type="table">Table 4</xref>). Since FastKmer is internally divided into two main stages, we break down its runtime in the same way as we do for Discount. However, the precise algorithms used by these stages are different between the two applications. To test scaling to a larger number of worker machines, we also ran the Discount high memory case on sixteen worker machines with four CPUs each. Performance did not change significantly from the four machine case.</p>
    <table-wrap position="float" id="btab156-T4">
      <label>Table 4.</label>
      <caption>
        <p>Performance comparison</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th colspan="4" rowspan="1">Runtime (min)<hr/></th>
            <th rowspan="1" colspan="1">GB</th>
          </tr>
          <tr>
            <th rowspan="1" colspan="1">Case</th>
            <th rowspan="1" colspan="1">k</th>
            <th rowspan="1" colspan="1">m</th>
            <th rowspan="1" colspan="1">Sample</th>
            <th rowspan="1" colspan="1">Hash</th>
            <th rowspan="1" colspan="1">Process</th>
            <th rowspan="1" colspan="1">Total</th>
            <th rowspan="1" colspan="1">Shuffle</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">FastKmer</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">21</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">78</td>
            <td rowspan="1" colspan="1">125.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">55</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">18</td>
            <td rowspan="1" colspan="1">43</td>
            <td rowspan="1" colspan="1">60</td>
            <td rowspan="1" colspan="1">73.1</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Discount high memory</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">1.4</td>
            <td rowspan="1" colspan="1">12</td>
            <td rowspan="1" colspan="1">43</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">159.4</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">55</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">1.4</td>
            <td rowspan="1" colspan="1">8.9</td>
            <td rowspan="1" colspan="1">39</td>
            <td rowspan="1" colspan="1">51</td>
            <td rowspan="1" colspan="1">89.5</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Discount low memory</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">2.0</td>
            <td rowspan="1" colspan="1">16</td>
            <td rowspan="1" colspan="1">60</td>
            <td rowspan="1" colspan="1">79</td>
            <td rowspan="1" colspan="1">172.9</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">55</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">1.7</td>
            <td rowspan="1" colspan="1">11</td>
            <td rowspan="1" colspan="1">49</td>
            <td rowspan="1" colspan="1">63</td>
            <td rowspan="1" colspan="1">100.3</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn4">
          <p><italic toggle="yes">Note</italic>: Cow rumen full dataset. For Discount, the universal frequency ordering was used. FastKmer does not have a sampling stage, so no timing is reported. The shuffle data, which is stored on disk when not needed in memory, corresponds to all generated super-mers, binned and partitioned. These are shuffled across the network to the correct machine between the hashing stage and the processing stage. The size, which is sensitive to super-mer length and to the number of partitions, is a total across all of the machines.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>We also measured, for the cow rumen dataset and <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>28, the memory usage of each minimizer ordering, to be able to separate their performance benefits from other factors (<xref rid="btab156-T5" ref-type="table">Table 5</xref>). When the memory pressure of Java VM applications, such as Discount, increases, the application spends a higher percentage of its CPU time in garbage collection (GC). We adjusted the total heap size in 16 GB increments from a baseline to find the smallest size that would allow Discount to spend at most 15% of its time in GC. The worst performing orderings in this comparison, universal lexicographic and universal random, were already relatively frugal. The lowest memory usage was achieved by the frequency ordering (71 GB), with universal frequency a close second (87 GB).</p>
    <table-wrap position="float" id="btab156-T5">
      <label>Table 5.</label>
      <caption>
        <p>Memory usage of different orderings</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th colspan="3" rowspan="1">Time (min)<hr/></th>
            <th colspan="2" rowspan="1">GB<hr/></th>
          </tr>
          <tr>
            <th rowspan="1" colspan="1">Ordering</th>
            <th rowspan="1" colspan="1">k</th>
            <th rowspan="1" colspan="1">m</th>
            <th rowspan="1" colspan="1">Hash</th>
            <th rowspan="1" colspan="1">Process</th>
            <th rowspan="1" colspan="1">Total</th>
            <th rowspan="1" colspan="1">Shuffle</th>
            <th rowspan="1" colspan="1">Memory</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Frequency</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">19</td>
            <td rowspan="1" colspan="1">39</td>
            <td rowspan="1" colspan="1">60</td>
            <td rowspan="1" colspan="1">259.7</td>
            <td rowspan="1" colspan="1">71</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Frequency</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">9</td>
            <td rowspan="1" colspan="1">14</td>
            <td rowspan="1" colspan="1">44</td>
            <td rowspan="1" colspan="1">60</td>
            <td rowspan="1" colspan="1">219.9</td>
            <td rowspan="1" colspan="1">135</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Random</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">14</td>
            <td rowspan="1" colspan="1">42</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">165.7</td>
            <td rowspan="1" colspan="1">119</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Signature</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">13</td>
            <td rowspan="1" colspan="1">43</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">163.9</td>
            <td rowspan="1" colspan="1">135</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Universal lex</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">12</td>
            <td rowspan="1" colspan="1">44</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">151.4</td>
            <td rowspan="1" colspan="1">151</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Universal rand</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">12</td>
            <td rowspan="1" colspan="1">43</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">150.2</td>
            <td rowspan="1" colspan="1">151</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Universal freq</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">10</td>
            <td rowspan="1" colspan="1">12</td>
            <td rowspan="1" colspan="1">43</td>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">159.4</td>
            <td rowspan="1" colspan="1">87</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn5">
          <p><italic toggle="yes">Note</italic>: Cow rumen full dataset. Executor memory required to run with less than 15% of CPU time spent in garbage collection. Other settings were the same as in the <italic toggle="yes">Discount high memory</italic> case.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>Finally, we compared the performance of Discount with the traditional, non-distributed <italic toggle="yes">k</italic>-mer counters KMC3 and Jellyfish to evaluate the benefits of distributed processing. For KMC3 and Jellyfish we used a single machine with the same total resources as total of the four Discount worker machines—240 GB RAM and 64 cores—to examine the effect of distributing the workload (<xref rid="btab156-T6" ref-type="table">Table 6</xref>). The machine had a single 4 TB HDD disk, and the Discount workers had one 1 TB disk each. As before, we measured the task of generating a full table with the counts of all <italic toggle="yes">k</italic>-mers. The total time required was about twice as long for KMC3 (114 min versus 57) and more than four times as long for Jellyfish (252 min). However, the benefit is task dependent: when only generating summary statistics for a dataset, we found that KMC3 was faster than Discount. Full details of the commands used are given in the <xref rid="sup1" ref-type="supplementary-material">supplementary materials</xref>.</p>
    <table-wrap position="float" id="btab156-T6">
      <label>Table 6.</label>
      <caption>
        <p>Comparison with non-distributed k-mer counters</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="char" char="." span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1"/>
            <th colspan="3" rowspan="1">Runtime (min)<hr/></th>
            <th rowspan="1" colspan="1">GB</th>
          </tr>
          <tr>
            <th rowspan="1" colspan="1">Case</th>
            <th rowspan="1" colspan="1">k</th>
            <th rowspan="1" colspan="1">Count</th>
            <th rowspan="1" colspan="1">Dump</th>
            <th rowspan="1" colspan="1">Total</th>
            <th rowspan="1" colspan="1">Temp data</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Jellyfish</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">124</td>
            <td rowspan="1" colspan="1">128</td>
            <td rowspan="1" colspan="1">252</td>
            <td rowspan="1" colspan="1">302</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">KMC3</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1">86</td>
            <td rowspan="1" colspan="1">114</td>
            <td rowspan="1" colspan="1">165</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Discount</td>
            <td rowspan="1" colspan="1">28</td>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1"/>
            <td rowspan="1" colspan="1">57</td>
            <td rowspan="1" colspan="1">159</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn6">
          <p><italic toggle="yes">Note</italic>: Cow rumen full dataset. The total size of the generated <italic toggle="yes">k</italic>-mer counts table was 851 GB. For comparison, we reproduce the Discount high memory case from <xref rid="btab156-T4" ref-type="table">Table 4</xref>. Its stages are not directly comparable with the count and dump operations.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>In this work, first, we compared six minimizer orderings when applied to two partial metagenomics datasets: random, signature, frequency, universal lexicographic, universal random and universal frequency. The signature ordering has been a practical choice for many tools since it yields relatively long super-mers and avoids certain large bins. However, it produces a high 0.5% bin fraction: up to 19.92% for the marine dataset for <inline-formula id="IE31"><mml:math id="IM31" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>28</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>.</p>
    <p>The universal lexicographic and universal random orderings yielded even longer super-mers. However, they were only slightly more evenly distributed. The frequency-sampled ordering dramatically improved evenness of distribution, as well as the size of the maximum bin, but at the expense of a much larger number of bins for a given value of <italic toggle="yes">m</italic>. As <xref rid="btab156-F2" ref-type="fig">Figure 2</xref> shows, this ordering yielded a large amount of small bins. For some applications, having to maintain so many very small bins will lead to undesirable overhead. Moreover, super-mers are very short, meaning that the bins cannot be stored efficiently in this form.</p>
    <p>The universal frequency ordering consistently obtained the best evenness of distribution, the lowest max/mean ratio, and also restored the long super-mers. For example, for the marine dataset, <inline-formula id="IE32"><mml:math id="IM32" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>55</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula>, for a bin number comparable to the universal lexicographic ordering, the 0.5% bin fraction was reduced from 18.92% to 1.16%. Super-mers were almost as long as for the signature and universal cases. Thus, for a given number of desired bins, this ordering provided the best balance of long super-mers and an even distribution.</p>
    <p>Next, we applied the universal frequency ordering to distributed <italic toggle="yes">k</italic>-mer counting, to test a practical application. We evaluated a high memory as well as a low memory scenario while comparing against FastKmer, an existing similar <italic toggle="yes">k</italic>-mer counter. For the former, although the amount of executor memory assigned to Discount was only 34% of what was assigned to FastKmer, Discount ran faster. We believe that this reflects various costs of processing larger bins. For example, both FastKmer and Discount have to sort all <italic toggle="yes">k</italic>-mers in each bin as part of counting, and the cost of sorting increases more than linearly as the array to be sorted grows longer. For the low memory scenario, we carefully tuned Spark to test the limits of our approach. Discount was running on a low memory machine type, with a total of 64 CPUs and only 34 GB total executor memory, around 1/8 of the FastKmer memory. Even with this minimal resource allocation, Discount ran at nearly the same speed as FastKmer.</p>
    <p>We also evaluated the effects on runtime and memory usage of each minimizer ordering for <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>28 on the cow rumen dataset. Generally, orderings that produced a greater number of smaller bins required less memory than the ones producing fewer and larger bins. A notable exception was the universal frequency ordering, which had the second lowest memory usage, despite generating a number of bins similar to those yielded by the universal lexicographic and universal random orderings. We include the frequency ordering for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>9 to show the effect of this parameter. For this ordering, increasing <italic toggle="yes">m</italic> to 10 produced around four times more bins (2 52 033 versus 9 85 599, details in <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref>). This by itself reduced the memory requirement substantially.</p>
    <p>Although the frequency ordering had the lowest memory usage, this is largely because it was able to generate around six times more bins than the universal frequency ordering (<xref rid="btab156-T2" ref-type="table">Table 2</xref>), which is second lowest. It also does this while generating much shorter super-mers, which inflates the size of the shuffle data. If this additional memory usage reduction is desired, universal frequency for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>11 may be a better choice than frequency for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>10.</p>
    <p>Finally, we compared the performance of Discount with the non-distributed <italic toggle="yes">k</italic>-mer counters KMC3 and Jellyfish. Since the task was to generate a full <italic toggle="yes">k</italic>-mer counts table, which is more than 800 GB in size, disk I/O became a limiting factor, and Discount thus benefited from having access to four disks operating independently on separate machines, as well as from inputs and outputs being stored on a distributed filesystem in the cloud. A full investigation of the performance of Discount on large clusters is beyond the scope of this work. However, since a typical single machine can only support a small number of disks, but Spark clusters can have thousands of worker nodes, Discount should be an attractive choice for very large datasets.</p>
    <p>Distributed <italic toggle="yes">k</italic>-mer counters can be divided into two categories: out-of-core, (which keep some data on disk) and in-core methods (which keep all data in memory). FastKmer and Discount are both in the former category, since Spark relies on the ability to spill data to disk when necessary. Given the comparison between FastKmer and other tools such as KCH, ADAM and BioPig in <xref rid="btab156-B9" ref-type="bibr">Ferraro Petrillo <italic toggle="yes">et al.</italic> (2019)</xref>, which are also out-of-core, this would make Discount both the fastest and the most memory efficient distributed <italic toggle="yes">k</italic>-mer counter in this category. On machines with a given amount of memory, the maximum amount of data that Discount can analyse should be much larger than for comparable existing tools.</p>
    <p>In the present work, we have only studied selected minimizer orderings of interest, and we leave a broader comparison with other binning methods for future work. For example, <xref rid="btab156-B5" ref-type="bibr">Efe (2018)</xref> suggests a method based on sums of integers associated with the letters of a <italic toggle="yes">k</italic>-mer.</p>
    <p>Many <italic toggle="yes">k</italic>-mer processing tools unify each <italic toggle="yes">k</italic>-mer with its reverse complement, treating them as the same value. This is made possible in part by restricting minimizers and super-mers in certain ways. Unfortunately, with our minimizer ordering this kind of optimization is not currently possible. This has been recognised as an open problem for universal sets (<xref rid="btab156-B15" ref-type="bibr">Marçais <italic toggle="yes">et al.</italic>, 2017</xref>). In general, research in universal <italic toggle="yes">k</italic>-mer sets is currently ongoing (<xref rid="btab156-B3" ref-type="bibr">DeBlasio <italic toggle="yes">et al.</italic>, 2019</xref>; <xref rid="btab156-B23" ref-type="bibr">Zheng <italic toggle="yes">et al.</italic>, 2020</xref>), and future results may further improve the universal frequency ordering.</p>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>In this work, we have investigated the formation of binned super-mers from genomic sequences by using minimizers, a common technique in omics data analysis tools. To support the investigation, we implemented a new distributed <italic toggle="yes">k</italic>-mer counting tool, Discount, which also has minimizer ordering analysis functionality. We sought to achieve an even distribution of bin sizes, aiming for improvements such as memory usage reduction, efficient storage on disk and increasing the overall processing speed. By combining frequency-sampled minimizers with universal <italic toggle="yes">k</italic>-mer sets, we obtained the universal frequency ordering. To the best of our knowledge, the present work is the first time this combined ordering has been used. Relative to minimizer signatures, the fraction of <italic toggle="yes">k</italic>-mers stored in the largest 0.5% of bins was reduced by as much as from 18.17% to 1.16% (for <italic toggle="yes">m </italic>=<italic toggle="yes"> </italic>10, <italic toggle="yes">k </italic>=<italic toggle="yes"> </italic>55, marine dataset) while still yielding long super-mers. Furthermore, the cost of sampling is small: for the full dataset, only around 5% of the runtime was spent sampling 1% of the reads. Using Discount, compared with the fastest existing out-of-core distributed <italic toggle="yes">k</italic>-mer counting tool, we were able to count <italic toggle="yes">k</italic>-mers in a metagenomic dataset at comparable speed using only 14% of the memory. Considering these benefits, we believe that frequency-sampled universal minimizers would significantly improve the performance of many tools that use minimizers to construct binned super-mers, and that this should be a preferred strategy for producing evenly sized bins. With this minimizer ordering, Discount expands the practical boundaries of analysis of very large omics datasets.</p>
  </sec>
  <sec>
    <title>Financial Support</title>
    <p>none declared.</p>
    <p><italic toggle="yes">Conflict of Interest:</italic> none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btab156_Supplementary_Data</label>
      <media xlink:href="btab156_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>J.N.P. was grateful to Shandar Ahmad for discussions and for the invitation to visit Jawaharlal Nehru University, New Delhi, in 2018 through the GIAN programme. The authors are grateful to the anonymous reviewers and to Yuji Kosugi for comments on the draft.</p>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btab156-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Audano</surname><given-names>P.A.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2018</year>) 
<article-title>Mapping-free variant calling using haplotype reconstruction from k-mer frequencies</article-title>. <source>Bioinformatics</source>, <volume>34</volume>, <fpage>1659</fpage>–<lpage>1665</lpage>.<pub-id pub-id-type="pmid">29186321</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Chikhi</surname><given-names>R.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2014</year>) <part-title>On the representation of de Bruijn graphs</part-title>. In: Sharan R. (eds) <italic toggle="yes">Research in Computational Molecular Biology. RECOMB 2014. Lecture Notes in Computer Science</italic>, Vol. 8394, pp. <fpage>35</fpage>–<lpage>55</lpage>. Springer, Cham.</mixed-citation>
    </ref>
    <ref id="btab156-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>DeBlasio</surname><given-names>D.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2019</year>) Practical universal k-mer sets for minimizer schemes. In <italic toggle="yes">ACM-BCB 2019 - Proceedings of the 10th ACM International Conference on Bioinformatics, Computational Biology and Health Informatics</italic>, pp. <fpage>167</fpage>–<lpage>176</lpage>. Association for Computing Machinery, New York, NY, USA.</mixed-citation>
    </ref>
    <ref id="btab156-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Deorowicz</surname><given-names>S.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2015</year>) 
<article-title>KMC 2: fast and resource-frugal k-mer counting</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>1569</fpage>–<lpage>1576</lpage>.<pub-id pub-id-type="pmid">25609798</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B5">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Efe</surname><given-names>K.</given-names></string-name></person-group> (<year>2018</year>) Robust K-mer partitioning for parallel counting. In <italic toggle="yes">BIOINFORMATICS 2018 - 9th International Conference on Bioinformatics Models, Methods and Algorithms, Proceedings; Part of 11th International Joint Conference on Biomedical Engineering Systems and Technologies, BIOSTEC 2018</italic>, Vol. 3, pp. <fpage>146</fpage>–<lpage>153</lpage>.</mixed-citation>
    </ref>
    <ref id="btab156-B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Ekim</surname><given-names>B.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <part-title>A randomized parallel algorithm for efficiently finding near-optimal universal hitting sets</part-title>. In: <person-group person-group-type="editor"><string-name><surname>Schwartz</surname><given-names>R.</given-names></string-name></person-group> (ed.) <source>Research in Computational Molecular Biology</source>. 
<publisher-name>Springer International Publishing</publisher-name>, 
<publisher-loc>Cham</publisher-loc>., pp. <fpage>37</fpage>–<lpage>53</lpage>.</mixed-citation>
    </ref>
    <ref id="btab156-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Erbert</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>Gerbil: a fast and memory-efficient k-mer counter with GPU-support</article-title>. <source>Algorithms Mol. Biol</source>., <volume>12</volume>, <fpage>1</fpage>–<lpage>12</lpage>.<pub-id pub-id-type="pmid">28289437</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ferraro Petrillo</surname><given-names>U.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>Fastdoop: a versatile and efficient library for the input of fasta and fastq files for mapreduce hadoop bioinformatics applications</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>1575</fpage>–<lpage>1577</lpage>.<pub-id pub-id-type="pmid">28093410</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ferraro Petrillo</surname><given-names>U.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2019</year>) 
<article-title>Analyzing big datasets of genomic sequences: fast and scalable collection of k-mer statistics</article-title>. <source>BMC Bioinformatics</source>, <volume>20</volume>, <fpage>1</fpage>–<lpage>14</lpage>.<pub-id pub-id-type="pmid">30606105</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hess</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2011</year>) 
<article-title>Metagenomic discovery of biomass-degrading genes and genomes from cow rumen</article-title>. <source>Science</source>, <volume>331</volume>, <fpage>463</fpage>–<lpage>467</lpage>.<pub-id pub-id-type="pmid">21273488</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jain</surname><given-names>C.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) 
<article-title>Weighted minimizer sampling improves long read mapping</article-title>. <source>Bioinformatics (Oxford, England)</source>, <volume>36</volume>, <fpage>i111</fpage>–<lpage>i118</lpage>.<pub-id pub-id-type="pmid">32657365</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kokot</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>KMC 3: counting and manipulating k-mer statistics</article-title>. <source>Bioinformatics (Oxford, England)</source>, <volume>33</volume>, <fpage>2759</fpage>–<lpage>2761</lpage>.<pub-id pub-id-type="pmid">28472236</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Koren</surname><given-names>S.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>Canu: scalable and accurate long-read assembly via adaptive <italic toggle="yes">κ</italic>-mer weighting and repeat separation</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>722</fpage>–<lpage>736</lpage>.<pub-id pub-id-type="pmid">28298431</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Manekar</surname><given-names>S.C.</given-names></string-name>, <string-name><surname>Sathe</surname><given-names>S.R.</given-names></string-name></person-group> (<year>2018</year>) 
<article-title>A benchmark study of k-mer counting methods for high-throughput sequencing</article-title>. <source>GigaScience</source>, <volume>7</volume>, <fpage>1</fpage>–<lpage>13</lpage>.</mixed-citation>
    </ref>
    <ref id="btab156-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Marçais</surname><given-names>G.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>Improving the performance of minimizers and winnowing schemes</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>i110</fpage>–<lpage>i117</lpage>.<pub-id pub-id-type="pmid">28881970</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B16">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Orenstein</surname><given-names>Y.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2016</year>) <part-title>Compact universal k-mer hitting sets</part-title>. In: Frith M., Storm Pedersen, C. (eds) <source>Algorithms in Bioinformatics. WABI 2016. Lecture Notes in Computer Science</source>, Vol. 9838, pp. <fpage>257</fpage>–<lpage>268</lpage>. Springer, Cham.</mixed-citation>
    </ref>
    <ref id="btab156-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Orenstein</surname><given-names>Y.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2017</year>) 
<article-title>Designing small universal k-mer hitting sets for improved analysis of high-throughput sequencing</article-title>. <source>PLoS Comput. Biol</source>., <volume>13</volume>, <fpage>e1005777-15</fpage>.<pub-id pub-id-type="pmid">28968408</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rizk</surname><given-names>G.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2013</year>) 
<article-title>DSK: k -mer counting with very low memory usage</article-title>. <source>Bioinformatics</source>, <volume>29</volume>, <fpage>652</fpage>–<lpage>653</lpage>.<pub-id pub-id-type="pmid">23325618</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Roberts</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2004</year>) 
<article-title>Reducing storage requirements for biological sequence comparison</article-title>. <source>Bioinformatics</source>, <volume>20</volume>, <fpage>3363</fpage>–<lpage>3369</lpage>.<pub-id pub-id-type="pmid">15256412</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sunagawa</surname><given-names>S.</given-names></string-name></person-group>  <etal>et al</etal>; Tara Oceans Coordinators. (<year>2015</year>) 
<article-title>Structure and function of the global ocean microbiome</article-title>. <source>Science</source>, <volume>348</volume>, <fpage>1261359</fpage>–<lpage>1261310</lpage>.<pub-id pub-id-type="pmid">25999513</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B21">
      <mixed-citation publication-type="other">The Apache Software Foundation (<year>2020</year>) <italic toggle="yes">Apache Spark.</italic>  <ext-link xlink:href="http://spark.apache.org" ext-link-type="uri">http://spark.apache.org</ext-link> (11 October 2020, date last accessed).</mixed-citation>
    </ref>
    <ref id="btab156-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wood</surname><given-names>D.E.</given-names></string-name>, <string-name><surname>Salzberg</surname><given-names>S.L.</given-names></string-name></person-group> (<year>2014</year>) 
<article-title>Kraken: ultrafast metagenomic sequence classification using exact alignments</article-title>. <source>Genome Biol</source>., <volume>15</volume>, <fpage>R46</fpage>.<pub-id pub-id-type="pmid">24580807</pub-id></mixed-citation>
    </ref>
    <ref id="btab156-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zheng</surname><given-names>H.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) 
<article-title>Improved design and analysis of practical minimizers</article-title>. <source>Bioinformatics (Oxford, England)</source>, <volume>36</volume>, <fpage>i119</fpage>–<lpage>i127</lpage>.<pub-id pub-id-type="pmid">32657376</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
