<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7488116</article-id>
    <article-id pub-id-type="pmid">32912315</article-id>
    <article-id pub-id-type="publisher-id">2154</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-020-02154-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>GetOrganelle: a fast and versatile toolkit for accurate de novo assembly of organelle genomes</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Jin</surname>
          <given-names>Jian-Jun</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Yu</surname>
          <given-names>Wen-Bin</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Yang</surname>
          <given-names>Jun-Bo</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Song</surname>
          <given-names>Yu</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>dePamphilis</surname>
          <given-names>Claude W.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff5">5</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7093-9564</contrib-id>
        <name>
          <surname>Yi</surname>
          <given-names>Ting-Shuang</given-names>
        </name>
        <address>
          <email>tingshuangyi@mail.kib.ac.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Li</surname>
          <given-names>De-Zhu</given-names>
        </name>
        <address>
          <email>dzl@mail.kib.ac.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.9227.e</institution-id><institution-id institution-id-type="ISNI">0000000119573309</institution-id><institution>Germplasm Bank of Wild Species, Kunming Institute of Botany, </institution><institution>Chinese Academy of Sciences, </institution></institution-wrap>Kunming, Yunnan 650201 China </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.458477.d</institution-id><institution-id institution-id-type="ISNI">0000 0004 1799 1066</institution-id><institution>Center for Integrative Conservation, </institution><institution>Xishuangbanna Tropical Botanical Garden, Chinese Academy of Sciences, </institution></institution-wrap>Mengla, Yunnan 666303 China </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.9227.e</institution-id><institution-id institution-id-type="ISNI">0000000119573309</institution-id><institution>Center of Conservation Biology, Core Botanical Gardens, </institution><institution>Chinese Academy of Sciences, </institution></institution-wrap>Mengla, Yunnan 666303 China </aff>
      <aff id="Aff4"><label>4</label>Southeast Asia Biodiversity Research Institute, Chinese Academy of Sciences, Yezin, Nay Pyi Taw 05282 Myanmar </aff>
      <aff id="Aff5"><label>5</label><institution-wrap><institution-id institution-id-type="GRID">grid.29857.31</institution-id><institution-id institution-id-type="ISNI">0000 0001 2097 4281</institution-id><institution>Department of Biology, </institution><institution>The Pennsylvania State University, </institution></institution-wrap>University Park, PA 16801 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>10</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>10</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>241</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>1</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>24</day>
        <month>8</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">GetOrganelle is a state-of-the-art toolkit to accurately assemble organelle genomes from whole genome sequencing data. It recruits organelle-associated reads using a modified “baiting and iterative mapping” approach, conducts de novo assembly, filters and disentangles the assembly graph, and produces all possible configurations of circular organelle genomes. For 50 published plant datasets, we are able to reassemble the circular plastomes from 47 datasets using GetOrganelle. GetOrganelle assemblies are more accurate than published and/or NOVOPlasty-reassembled plastomes as assessed by mapping. We also assemble complete mitochondrial genomes using GetOrganelle. GetOrganelle is freely released under a GPL-3 license (<ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelle">https://github.com/Kinggerm/GetOrganelle</ext-link>).</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Assembler</kwd>
      <kwd>Assembly graph</kwd>
      <kwd>Plastome</kwd>
      <kwd>Mitogenome</kwd>
      <kwd>Organelle genome</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Strategic Priority Research Program of the Chinese Academy of Sciences</institution>
        </funding-source>
        <award-id>XDB31000000</award-id>
        <principal-award-recipient>
          <name>
            <surname>Li</surname>
            <given-names>De-Zhu</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100001809</institution-id>
            <institution>National Natural Science Foundation of China</institution>
          </institution-wrap>
        </funding-source>
        <award-id>31720103903</award-id>
        <award-id>31870196</award-id>
        <principal-award-recipient>
          <name>
            <surname>Yu</surname>
            <given-names>Wen-Bin</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Chinese Academy of Sciences Large-scale Scientific Facilities</institution>
        </funding-source>
        <award-id>2017-LSFGBOWS-02</award-id>
        <award-id>2017-LSFGBOWS-02</award-id>
        <principal-award-recipient>
          <name>
            <surname>Yang</surname>
            <given-names>Jun-Bo</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>De-Zhu</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>the open research project of “Cross-Cooperative Team” of the Germplasm Bank of Wild Species, Kunming Institute of Botany, Chinese Academy of Sciences</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>CAS 135 Program</institution>
        </funding-source>
        <award-id>2017XTBG-T03</award-id>
        <principal-award-recipient>
          <name>
            <surname>Yu</surname>
            <given-names>Wen-Bin</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par2">The plastid genome (plastome, including the chloroplast and other plastid forms) and mitochondrial genome (mitogenome or chondriome) represent the portions of endosymbiotic organelle inheritance in eukaryotes that have remained in the organelle without being transferred to the nucleus or lost. The plastomes of photosynthetic eukaryotes are generally 120–150 kb in size and typically map as a highly conserved circular and quadripartite structure, with a pair of inverted repeat regions (IRs) that separate the large single copy (LSC) region from the small single copy (SSC) region [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. Mitogenomes exist in nearly all eukaryotic organisms and vary greatly in genome size and form. To date, six main types of mitogenome organization have been recognized [<xref ref-type="bibr" rid="CR3">3</xref>]. Animal mitogenomes map as a single circle molecule, ranging from 11 to 28 kb in size and either lacking introns (i.e., type I) or including introns (types II–VI). Fungi and plants have single circular mitogenomes with introns from 19 to 1000 kb in size (type II), or a large and homogenous circular molecule from 20 to 1000 kb in size with small circular plasmid-like molecules (type III), or homogenous linear molecules from 1 to 200 kb in size (type V). Because of their near universal presence and high copy numbers in the cell (individual organelles contain numerous plastome and/or mitogenome copies), organelle DNA markers and genome sequences are easily obtained and have been extensively used for phylogenetic and evolutionary analyses [<xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR8">8</xref>] and DNA barcoding [<xref ref-type="bibr" rid="CR9">9</xref>–<xref ref-type="bibr" rid="CR12">12</xref>]. Since the rapid advances of high-throughput sequencing technologies, sequencing costs have decreased tremendously in recent years. Due to the high copy numbers of organelle genome in a single cell, it is feasible to get enough reads from the low coverage whole genome sequencing (WGS) data to assemble complete organelle genomes [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>].</p>
    <p id="Par3">To date, there are ca. 8400 embryophyte plastomes, ca. 65000 animal mitogenomes, ca. 1300 fungi mitogenomes, and ca. 300 plants mitogenomes available in GenBank (accessed on May 15, 2020). Multiple processes or pipelines for assembling organelle genomes have been described, but their assembly qualities vary widely. For example, SPAdes [<xref ref-type="bibr" rid="CR15">15</xref>], SOAPdenovo2 [<xref ref-type="bibr" rid="CR16">16</xref>], and CLC Genomics Workbench (<ext-link ext-link-type="uri" xlink:href="https://www.qiagenbioinformatics.com/">https://www.qiagenbioinformatics.com/</ext-link>) have been widely used to assemble the WGS data, after which the organelle genomic scaffolds/contigs were selected or filtered out using a reference genome for further concatenation [<xref ref-type="bibr" rid="CR17">17</xref>] or post-assembly gap filling and closing [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR19">19</xref>]. However, these approaches are not only computationally intensive but also error-prone for inexperienced users and complicated samples [<xref ref-type="bibr" rid="CR20">20</xref>]. The IOGA (Iterative Organellar Genome Assembly) pipeline [<xref ref-type="bibr" rid="CR21">21</xref>] conducts de novo plastome assembly by incorporating Bowtie2 [<xref ref-type="bibr" rid="CR22">22</xref>], SOAPdenovo2, SPAdes, and other dependencies for recruiting plastid-associated reads, but the plastomic scaffolds/contigs created in this process need to be finalized by other programs. Fast-Plast (<ext-link ext-link-type="uri" xlink:href="https://github.com/mrmckain/Fast-Plast">https://github.com/mrmckain/Fast-Plast</ext-link>), NOVOPlasty [<xref ref-type="bibr" rid="CR23">23</xref>], and ORG.asm (<ext-link ext-link-type="uri" xlink:href="https://git.metabarcoding.org/org-asm/org-asm/org-asm">https://git.metabarcoding.org/org-asm/org-asm/org-asm</ext-link>) were proposed as fast tools to conduct de novo assembly of complete organelle genomes from WGS data. However, these tools have not been systematically evaluated until a recent preprint was posted at bioRxiv [<xref ref-type="bibr" rid="CR24">24</xref>]. Freudenthal et al. [<xref ref-type="bibr" rid="CR24">24</xref>] presented a benchmark comparison of seven chloroplast assembly pipelines/toolkits and found significant differences among those assemblers. In their tests, our toolkit, GetOrganelle (<ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelle">https://github.com/Kinggerm/GetOrganelle</ext-link>), significantly outperformed all other assemblers in consistency (unlike consistency under different parameters in this paper), accuracy, and success rate. Nevertheless, the broad application and versatile options of GetOrganelle were not explored by Freudenthal et al. [<xref ref-type="bibr" rid="CR24">24</xref>]. Additionally, organelle genomes may produce flip-flop configurations or other assembly isomers mediated by repeats [<xref ref-type="bibr" rid="CR25">25</xref>–<xref ref-type="bibr" rid="CR27">27</xref>]; these outcomes are not addressed by any of the abovementioned pipelines/toolkits, except GetOrganelle. This capability also was not investigated by Freudenthal et al. [<xref ref-type="bibr" rid="CR24">24</xref>].</p>
    <p id="Par4">The GetOrganelle toolkit includes a number of scripts and libraries for recruiting target organelle reads from WGS read data, manipulating and disentangling assembly graphs, and generating reliable organelle genomes, accompanied by labeled assembly graphs for user-friendly manual completion and correction (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The from-reads-to-organelle process can be completed using the script “get_organelle_from_reads.py” with a single line command, which serves as the main workflow of GetOrganelle. This script exploits Bowtie2, BLAST [<xref ref-type="bibr" rid="CR28">28</xref>], and SPAdes, as well as the Python libraries Numpy, Scipy, and Sympy as dependencies. It starts with recruitment of initial target-associated reads by using Bowtie2 and taking target genome(s) or sequence(s) as the seed; the initial target-associated reads (seed-mapped reads) are treated as “baits” to get more target-associated reads through multiple extension iterations, which is similar in concept to those of the MITObim [<xref ref-type="bibr" rid="CR29">29</xref>] and IOGA [<xref ref-type="bibr" rid="CR21">21</xref>] pipelines. However, the core algorithm of GetOrganelle for read extension uses a hashing approach, which cuts the reads into substrings (“Words”) with a uniform length (“Word size”), and adds them to a hash table (“Accepted Words,” AW). During each extension iteration, the AW dynamically increases as new target-associated (overlapped) reads are cut and added as Words. Then, the total target-associated reads are de novo assembled into a FASTA assembly Graph (“FASTG”) file using SPAdes. Non-target contigs in the FASTG assembly are further automatically identified and trimmed by their connections, coverages, and BLAST hit information using a target-gene-based “label” database. The slimmed FASTG file is used to calculate all possible paths of the complete target organelle genome based on the graph characteristics and the coverages of the contigs (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>). In some cases, when the assemblies cannot be solved as a circular path or are too complicated to be solved, GetOrganelle will conservatively export the target contigs/scaffolds. Meanwhile, the slimmed assembly graph (FASTG) and selected target assembly graph (GFA) can also be visualized by Bandage [<xref ref-type="bibr" rid="CR30">30</xref>] to assess the completeness of the final graph, or export selected contigs/scaffolds, or manually remove “noisy” and non-target contig/scaffold connections. The semi-manually cleaned assembly graph can then be used to get the complete target genome or the target contigs/scaffolds using the script “get_organelle_from_assembly.py.” In this study, we have illustrated the mechanism and workflow of GetOrganelle. Moreover, we tested GetOrganelle with a wide range of parameters and samples of plants, animals, and fungi in assembling plastomes and mitogenomes and provide a detailed comparison of the assemblies of NOVOPlasty, the assemblies of GetOrganelle, and the published plastomes.
<fig id="Fig1"><label>Fig. 1</label><caption><p>The workflow of the GetOrganelle toolkit. The thumbnails inside data objects show an example of plastome assembly. The solid arrows denote the data processing flows and associated directions, with their width proportional to general computational burden. All green solid arrows together describe a complete run from reads to organelle genome(s), which is encapsulated in a single command using the script “get_organelle_from_reads.py”</p></caption><graphic xlink:href="13059_2020_2154_Fig1_HTML" id="MO1"/></fig><fig id="Fig2"><label>Fig. 2</label><caption><p>An example of exstimating the multiplicities of contigs and exporting all configurations from a target-complete assembly graph in GetOrganelle (steps 5b and 5c of the script “get_organelle_from_reads.py”)</p></caption><graphic xlink:href="13059_2020_2154_Fig2_HTML" id="MO2"/></fig></p>
  </sec>
  <sec id="Sec2">
    <title>Results</title>
    <sec id="Sec3">
      <title>Reassembling plastomes from 50 published plant datasets using GetOrganelle</title>
      <p id="Par5">GetOrganelle reassembled the complete circular plastome(s) from 47 out of the 50 plant datasets (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1), including samples with typical IRs, contracted IRs, no IRs, and large direct repeats (DRs) (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Of the remaining three species, two species (<italic>Ginkgo biloba</italic> L., ERR2206741 and <italic>Salvinia cucullata</italic> Roxb., SRR6478596) had two break points in the LSC/SSC region, and one species (<italic>Musa balbisiana</italic> Colla, SRR2057084) consisted of 14 plastome fragments (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1; see details at <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1). The GetOrganelle-reassembled complete circular plastomes were identical to the published ones in 14 samples, and different from published plastomes by fewer than five site-differences and/or less than 100-bp differences in 30 other samples (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1, Table S2). Most of the differences were due to repeats or indels. Read mapping generally supported the GetOrganelle-reassembled plastomes more than the published plastomes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>; Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2). For example, the IR boundary regions of <italic>Laurus nobilis</italic> L. (SRA: SRR5602602; GBK: KY085912.1), which showed significant assembly differences between the published and GetOrganelle-reassembled plastomes, had a smooth mapping plot for the GetOrganelle plastome but a drastically fluctuating mapping plot for the published one (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1). Those differences can also be monitored from the summarized mapping quality (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2), where the GetOrganelle-reassembled plastome had similar matched depth to the published plastome (221.60 vs 221.65), with a much smaller standard deviation (31.43 vs 37.88), and a smaller error rate (1.16% vs 1.17%) with a much smaller deviation (1.11% vs 1.56%) (see the “<xref rid="Sec17" ref-type="sec">Methods</xref>” section for the calculation).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Selected assembly graphs of plastome show quadripartite structures with typical IRs, contracted IRs and large DRs, and no large repeats</p></caption><graphic xlink:href="13059_2020_2154_Fig3_HTML" id="MO3"/></fig><fig id="Fig4"><label>Fig. 4</label><caption><p>Comparisons of four sets of runs using GetOrganelle and four sets of runs using NOVOPlasty when assembling 50 public plant datasets. The labels along the bottom denote the program and key settings for each set of 50 runs. The dots in the upper boxplot show the time cost in seconds for finishing each run. The dots in the middle boxplot show the maximum memory usage in gigabytes for finishing each run. The bottom histogram shows the number of circularized genomes for each set</p></caption><graphic xlink:href="13059_2020_2154_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par6">Evaluations of assembling the 50 plant datasets showed that the mean memory, the mean duration, and the number of circularized genomes all decreased with the word size ratio (WSR, defined as the Word size over the effective mean read length) adjusted from 0.6 to 0.8 (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Runs in an “auto” mode using an automatically estimated word size for read extension generated circular plastomes in 39 samples ranked as the highest success ratio among the tested parameter sets, though “auto” mode also had the most intense computational usage in both mean memory and duration (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Eight more datasets were assembled into complete circular plastome(s) by adjusting the Word size for extension, and/or adjusting the <italic>k-</italic>mer values for de novo assembly using SPAdes, and/or using other empirical options (see details at <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1).
<fig id="Fig5"><label>Fig. 5</label><caption><p>Evaluating assembly qualities of GetOrganelle plastomes, NOVOPlasty plastomes, and published plastomes using read mapping</p></caption><graphic xlink:href="13059_2020_2154_Fig5_HTML" id="MO5"/></fig></p>
      <p id="Par7">GetOrganelle exported all possible configurations mediated by potential flip-flop recombination induced by IRs [<xref ref-type="bibr" rid="CR31">31</xref>] or other shorter repeats. When a complete circular plastome was obtained, GetOrganelle generally outputted consistent assemblies with the same raw reads using different parameters. In the 50 plant datasets, there were 33 samples that resulted in complete circular plastomes reassembled from multiple runs using different parameters of GetOrganelle. Twenty-five out of 33 samples produced identical assemblies using different parameters. Five out of 33 samples (SRA: SRR5602586, SRR5602590, SRR5602594, SRR5602605, SRR6932851; we will use the SRA number to represent the relevant samples thereafter) had assemblies that diverged where there were 1- or 2-bp indels. For SRR5028199, the plastome of the GetOrganelle-W0.6 run is longer than the plastome of any other three runs in a 19-bp repeat (“GAAAAGAAAGAATGAGAAA”). For SRR5602597, the plastome of the GetOrganelle-W0.8 run is shorter than the plastome of any other three runs in a 36-bp repeat and a 273-bp indel/repeats. For SRR5602577, the plastome of the GetOrganelle-W0.8 run is shorter than the customized run in a 6-bp poly-A/T indel.</p>
    </sec>
    <sec id="Sec4">
      <title>Reassembling plastomes from 50 published datasets using NOVOPlasty</title>
      <p id="Par8">For reassembling plastomes from the same 50 plant datasets (see Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1) using NOVOPlasty, only 15 samples were “claimed circular” (i.e., eight for <italic>k-</italic>mer 23, ten for <italic>k-</italic>mer 31, eight for <italic>k-</italic>mer 39, and seven for <italic>k-</italic>mer 47) (Fig. <xref rid="Fig4" ref-type="fig">4</xref>; Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2). Of the “claimed circular” samples, three samples had gaps or ambiguous sites in K23 runs, six samples had gaps or ambiguous sites in K31 runs, five samples had gaps or ambiguous sites in K39 runs, and five samples had gaps or ambiguous sites in K47 runs (see details at <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1). In addition, some claimed circular samples were not really circularized. For example, there are two contigs in both the K31 run of SRR5602581 and the K47 run of SRR5602590. Some claimed circularized runs (such as the K23/K31 runs of SRR2037123, and the K23 run of SRR5602581) were problematic because the lengths of assemblies deviated strongly from both the published plastomes and the reassembled plastomes using GetOrganelle. In the case of SRR2037123, NOVOPlasty lost the entire large single copy region between a pair of direct repeats and produced a plastome that was “reduced” in size by 60,647 bp (46.7%). Of the remaining 12 samples for which NOVOPlasty obtained reasonable lengths, the read mapping qualities for NOVOPlasty assemblies were good though generally not better than those of GetOrganelle, especially in the error rate (Fig. <xref rid="Fig4" ref-type="fig">4</xref>; Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2). Only three datasets (SRA: ERR1917165, ERR964904, and SRR5602589) were assembled by NOVOPlasty into plastomes that were identical to the published ones (Additional file 2: Table S2).</p>
      <p id="Par9">The average duration of NOVOPlasty runs increased as the <italic>k-</italic>mer values increased from 23, through 31 and 39, to 47 (marked as K23, K31, K39, K47 runs separately), while the average memory cost was very close among the four <italic>k-</italic>mer values (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). The average duration of NOVOPlasty K23 and K31 runs was generally shorter than that of GetOrganelle runs. The average duration of K39 runs was similar to that of GetOrganelle-W0.8 runs. The average duration of K47 runs was longer than that of GetOrganelle runs except for GetOrganelle-auto runs. The average memory cost of the NOVOPlasty runs was lower than those of GetOrganelle-W0.60 and GetOrganelle-auto runs, but greater than those of GetOrganelle-W0.7 and GetOrganelle-W0.8.</p>
      <p id="Par10">Additionally, the assemblies of NOVOPlasty are largely inconsistent and varied greatly when using different <italic>k-</italic>mer values. In nine samples, NOVOPlasty obtained the complete circular plastome in multiple runs. However, NOVOPlasty generated consistent assemblies using four <italic>k</italic>-mer values in only three samples (SRA: ERR1917165, SRR5602589, and SRR5602602) out of the nine.</p>
    </sec>
    <sec id="Sec5">
      <title>Assembling mitogenomes using GetOrganelle and NOVOPlasty</title>
      <p id="Par11">For 56 animal mitogenome datasets, GetOrganelle and NOVOPlasty successfully assembled 29 and 23 complete circularized mitogenomes, respectively, with the overlap of 19 datasets (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S3). Of the 19 datasets, GetOrganelle and NOVOPlasty generated mitogenomes of similar sizes (≤ 2 bp differences) in 14 samples. GetOrganelle failed to call any animal mitogenome contigs in four samples, while NOVOPlasty used the same seed but failed in nine samples.</p>
      <p id="Par12">The average number of genes (number of genes here refers to number of gene hits based on BLAST search; the same below) is 10.61 for GetOrganelle animal mitogenome assemblies, and 8.38 for NOVOPlasty assemblies. In 10 samples that GetOrganelle succeeded and NOVOPlasty failed, NOVOPlasty assemblies called 70 genes in total while GetOrganelle called 114 genes. In those four samples that NOVOPlasty succeeded but GetOrganelle failed, GetOrganelle assemblies called 31 genes in total while NOVOPlasty assemblies called 45 genes.</p>
      <p id="Par13">For 50 fungal mitogenome datasets, GetOrganelle and NOVOPlasty successfully assembled 24 and 26 complete circularized mitogenomes, respectively, with 21 being assembled by both programs (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S4). Concerning the generated complete mitogenome size, GetOrganelle and NOVOPlasty generated closely similar sizes (&lt; 15-bp difference) from 19 of the samples. In SRR5804015 that both GetOrganelle and NOVOPlasty claimed circularized results, NOVOPlasty lost a contig of 9606 bp in between a pair of direct repeats and lost seven functional genes such as <italic>nad1</italic> and <italic>apt6</italic>.</p>
      <p id="Par14">The average number of genes is 17.32 for GetOrganelle fungal mitogenome assemblies, and 12.76 for NOVOPlasty assemblies. In three fungal samples (SRR5803930, SRR5804127, and SRR5804147) that GetOrganelle succeeded and NOVOPlasty failed, NOVOPlasty generated highly fragmented contigs with unreasonable total lengths and only 15 genes in total, comparing to 48 genes from three GetOrganelle assemblies. On the contrary, in those five samples that NOVOPlasty succeeded but GetOrganelle failed, GetOrganelle generated a nearly complete or comparable result with NOVOPlasty, losing only one gene out of the 94 genes detected in five NOVOPlasty assemblies.</p>
    </sec>
    <sec id="Sec6">
      <title>Features of GetOrganelle</title>
      <p id="Par15">To explore the influences of parameters and seed, we assembled reads of an angiosperm species, <italic>Haberlea rhodopensis</italic> Friz. [5M 100-bp paired-end Illumina reads; GenBank Sequence Reads Archive accession number (SRA): SRR4428742], using the complete plastome or a short plastomic fragment <italic>rbcL</italic> gene of a gymnosperm species, <italic>Gnetum parvifolium</italic> (Warb.) W.C. Cheng [GenBank accession (GBK): NC_011942.1] as the seed (Fig. <xref rid="Fig6" ref-type="fig">6</xref>, Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2, Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S5). The runs for all tested WSR, except for 0.9, assembled an identical complete plastome, no matter whether the initial seed was a complete plastome or a short plastomic fragment <italic>rbcL</italic> gene, and regardless of whether pre-grouping (an ad hoc speeding-up algorithm, see more in the “<xref rid="Sec17" ref-type="sec">Methods</xref>” section) was enabled or not.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Assessing the plastome assembly performance characteristics of GetOrganelle using online reads of an angiosperm species, <italic>Haberlea rhodopensis</italic> (SRA: SRR4428742) as the dataset, using the complete plastome of a gymnosperm species, <italic>Gnetum parvifolium</italic> (GBK: NC_011942.1) as the seed. The assessment was conducted across a range of Word sizes (in the form of WSR, after the flag “-w” along the <italic>x</italic> axis). The green marks denote using the pre-grouping value 200,000 (after the flag “-P”), while the gray marks denote that the pre-grouping was disabled. The cross marks denote using the minimum number of rounds of extension iterations for achieving a complete plastome or stabilizing the incomplete plastome result, while the solid circle marks denote using unlimited number of rounds (“-R 1000” in practice). From top to bottom, for assembling raw reads into the same complete plastome (or the same incomplete result in all runs of “-w 0.90”), the five subgraphs present the total computational time cost in seconds, the maximum memory cost in gigabytes, the actual number of rounds GetOrganelle took, the number of target plastid reads GetOrganelle recruited, and the number of non-target reads GetOrganelle recruited, respectively</p></caption><graphic xlink:href="13059_2020_2154_Fig6_HTML" id="MO6"/></fig></p>
      <p id="Par16">The run duration of GetOrganelle varied as the WSR set from 0.30 to 0.90 (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). The duration of the runs with unlimited number of rounds (lines with circle marks in Fig. <xref rid="Fig2" ref-type="fig">2</xref>) increased drastically when the WSRs were 0.65 and 0.70. The duration of the runs with minimum number of rounds and pre-grouping disabled (gray line with cross marks) decreased when the WSR ranged from 0.30 to 0.65, while it increased with WSR ranging from 0.70 to 0.90. The time cost of the runs with the minimum number of rounds and pre-grouping enabled (green line with cross marks) decreased when the WSR ranged from 0.30 to 0.55, but it did not increase when using large WSRs. The maximum memory occupation generally decreased when the WSR was smaller than 0.65 and remained unchanged when the WSR reached 0.65. A too large WSR, such as 0.90 in our test, risked producing an incomplete result.</p>
      <p id="Par17">When testing with unlimited number of rounds, the runs with pre-grouping enabled (gray line with circle marks) and the runs with pre-grouping disabled (gray line with cross marks) recruited exactly the same number of the final accepted reads (Fig. <xref rid="Fig6" ref-type="fig">6</xref>); thus, they generated the same final assemblies and similar computational durations and memory costs. However, when considering the runs with minimum rounds, the pre-grouping runs generally needed significantly fewer rounds of extension (&lt; 6) to recruit most of the target-associated reads to achieve a complete plastome or to stabilize an incomplete result. Extension beyond the first five rounds is mostly to recruit non-target reads. By cutting off the latter unnecessary rounds of extension with minimum rounds (lines with cross marks), the pre-grouping runs (green line with cross marks) can reduce both time and memory cost, sometimes significantly.</p>
    </sec>
  </sec>
  <sec id="Sec7">
    <title>Discussion</title>
    <sec id="Sec8">
      <title>Accuracy of the published/reassembled plastomes</title>
      <p id="Par18">GetOrganelle-reassembled plastomes contained identical sequences to the published plastomes in 14 of 50 plant samples, including a lycopod species, <italic>Selaginella kraussiana</italic> (Kunze) A. Braun (SRR2037123) that was reported to have large DRs [<xref ref-type="bibr" rid="CR32">32</xref>]. Read mapping plots of GetOrganelle-reassembled complete or near complete plastomes are generally smooth. In contrast, the NOVOPlasty-reassembled plastomes (e.g., ERR964904, SRR2037123, SRR5602581, as mentioned above) had unreasonably shorter lengths, but were claimed to be circularized. In addition, read mapping plots (see <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison/tree/master/eval/Published">https://github.com/Kinggerm/GetOrganelleComparison/tree/master/eval/Published</ext-link> version 1.1.1) showed that some published plastomes (e.g., SRR1145775, SRR2057084, SRR5602601, SRR5602602, SRR6478596, SRR7630500) have incorrect IR boundaries or contig overlaps as revealed by the local coverages dramatically increasing or decreasing in the regions or sites.</p>
      <p id="Par19">Our evaluation using read mapping (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2) showed that 37 of 50 assemblies generated by GetOrganelle had the best-ranked matched depths (smaller average and smaller deviation). For three samples (SRR2057084, SRR6478596, ERR2206741), GetOrganelle failed to generate a circular plastome. For SRR2037123, NOVOPlasty had the best-ranked matched depths but produced a problematic assembly. Of the remaining ten samples that GetOrganelle did not have the best-ranked matched depths, all the GetOrganelle-reassembled plastomes have the best-ranked error rate (smaller average and smaller deviation) and the best-ranked or nearly-best-ranked number of mapped reads.</p>
      <p id="Par20">Our evaluation using read mapping (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2) showed that 45 assemblies using GetOrganelle had the best-ranked error rate; the remaining five assemblies, of which three assemblies were not circular, had values very close to the best-ranked ones. However, many published plastomes (e.g., SRR5602575-SRR5602578, SRR5602581-SRR5602584, SRR5602587, SRR5602588, SRR5602592, SRR5602593, SRR5602595, SRR5602597, SRR5602598, SRR5602599, SRR5602600, SRR5602609, SRR5602610, SRR6932851, SRR7630500) have nucleotide sites that are incongruent with the consensus of most mapping reads, as revealed by extremely high mismatch/indel rates at some sites, identifiable as extremely outlier points in the mapping plot.</p>
      <p id="Par21">Our results also showed that GetOrganelle had outstanding consistency, indicating that exact parameter settings are not required to obtain an accurate assembly. Of the 33 samples reassembled to complete circular plastome by multiple runs, there are 30 samples that had identical or nearly identical (≤ 2 bp difference) results using different parameter values. There are three main reasons for the discrepancies in the remaining few samples. First, a large Word size recruits significantly fewer reads (e.g., -w 0.8 in SRR5602597) or may even cause an incomplete result (e.g., -w 0.8 in SRR5028199, SRR5602590, and SRR5602594, and -w 0.9 in the performance test). Second, there were small repeats that could not be precisely identified by low local coverage, which might be the reason for inconsistency in SRR5028199. Third, there were polymorphisms in the data causing an incomplete result, such as in SRR5602577 recovered by the auto mode.</p>
      <p id="Par22">Our results also suggest that using read mapping quality is an easy and important approach of evaluating organelle genome assemblies. We tested 50 plant datasets here, not only to show that GetOrganelle has higher accuracy for assemblies than other currently available assembly toolkits, but also to argue for the necessity for all plastome providers to make raw data available to the public (e.g., SRA); this will allow assemblies to be reproduced, evaluated, and amended to benefit future comparative analyses of organelle genomes [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
    </sec>
    <sec id="Sec9">
      <title>Large inverted, direct repeats and “weird” plastome assembly</title>
      <p id="Par23">The entanglement of repeats is one of the challenges in assembling plastomes, though none of the reported plastome assemblers has addressed this challenge. The largest repeat in a canonical plastome is a pair of generally identical inverted sequences that usually contain the ribosomal DNA genes, and is known simply as the inverted repeat (IR). Given that flip-flop recombination mediated by the IRs is common [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR34">34</xref>], a genuine de novo assembler such as GetOrganelle should export at least two configurations when IRs exist. Even if we assume that there was only one configuration in vivo, short sequencing reads theoretically cannot tell the difference between those two configurations when IRs exist. However, for example, NOVOPlasty produces, when successful, only one representative of the plastome structure, which risks misleading less experienced researchers to treat SSC orientations as an important inversion [<xref ref-type="bibr" rid="CR34">34</xref>].</p>
      <p id="Par24">A key issue concerning IR recovery in plastid genome assembly is the identification of the IR boundaries. A traditional assembly method, which uses CLC or another assembler to make sequence contigs and complete the circular assembly based on a reference, is prone to create a plastome with a similar IR length/boundary as the reference. In that case, PCR verification was required for the four boundaries of a canonical quadripartite plastome in conventional assemblies. The concept of the necessity of PCR verification still overshadows many empirical studies in the NGS age. However, our graph-based method for completing the circular plastome uses the original contig connections that are supported by actual read overlaps. When sufficient read coverages (e.g., 100×) support the contig connections between the boundaries, there would be neither need for PCR verification or read mapping for IR boundary identification. Based on the nature of the overlap of short reads, the credibility of the IR boundaries is actually the same as that of other parts of the plastome. For a genuine organelle genome de novo assembler, the IR boundaries can be constructed purely from read information rather than any references, the same as any other region of the genome. As evidence, GetOrganelle correctly recovered the extreme contraction or loss of a large pair of IRs in <italic>Juniperus cedrus</italic> Webb &amp; Berthel. (SRR1145775) and two <italic>Picea</italic> species (ERR268390, SRR5028199). Another interesting example is that GetOrganelle successfully assembled the plastome of <italic>Selaginella kraussiana</italic> (SRR2037123) with two large DRs, without being supplied prior knowledge of the IRs or DRs. However, for the same sample, NOVOPlasty only achieved part of the complete plastome, lost one copy of the large DRs and one large single copy region, and claimed it to be circular (another similar inaccurate NOVOPlasty result was the mitogenome assembly of SRR5804015). Our reassembled plastome is identical to the published one (MH549643.1), which was assembled using Velvet and SPAdes, and then verified using PCR [<xref ref-type="bibr" rid="CR32">32</xref>]. For an IR lacking species, such as a species in the IR-lacking clade of Fabaceae, GetOrganelle could correctly generate a plastome without IRs, with a single circle assembly graph as visualized by Bandage (e.g., R. Zhang et al., unpublished data).</p>
      <p id="Par25">It is a challenge to assemble some “weird” plastomes (e.g., reduced plastomes, plastomes with gene translocations, IR expansions, contractions, or losses) using some traditional methodologies [<xref ref-type="bibr" rid="CR20">20</xref>]. For example, non-photosynthetic plants typically have reduced plastomes, pseudogenes, inversions, and gene translocations [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR35">35</xref>, <xref ref-type="bibr" rid="CR36">36</xref>]. We successfully assembled a complete and yet highly reduced plastome without IRs for the holoparasite <italic>Cytinus hypocistis</italic> (L.) L. (ERR964904) using a customized strategy, excluding contigs with an obvious false hit. We also were able to assemble circular plastomes for many holoparasites from Balanophoraceae, Convolvulaceae (e.g., <italic>Cuscuta</italic> spp.), Lennoaceae, and Orobanchaceae, as well as hundreds of hemiparasites using GetOrganelle (W.-B. Yu et al., unpublished data). Another type of “weird” plastomes are those carrying insertions of mitochondrial DNA, such as carrot [<xref ref-type="bibr" rid="CR37">37</xref>], milkweed [<xref ref-type="bibr" rid="CR38">38</xref>], and bamboo plastomes [<xref ref-type="bibr" rid="CR39">39</xref>]. For such plastomes, we also assembled accurate plastomes with the mitochondrial insertions (additional tests via <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1; based on 20M reads of SRR2147183 and 30M reads of SRR4243000) using GetOrganelle without any prior hints of that insertion. In the “embplant_pt” mode, GetOrganelle keeps both chloroplast contigs and mitochondrial contigs in the post-slimmed assembly graph, so that chloroplast and mitochondrial contigs can be more accurately and reasonably distinguished based on not only blast hit, but also contig coverage and contig connections. If there is strong coverage or graph character evidence for a mitochondrial insertion to be an indispensable part of the plastome, GetOrganelle will keep that insertion.</p>
    </sec>
    <sec id="Sec10">
      <title>Mitogenome assembly of fungi and animals</title>
      <p id="Par26">Despite similar mitogenome circularizing ratio, using the same seed, GetOrganelle was generally better over NOVOPlasty in obtaining mitogenome contigs and genes, even in samples with a relatively low mitogenome coverage (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S3, S4). Besides, in the fungal mitogenome assembly of SRR5804015, NOVOPlasty lost a contig of 9606 bp with seven functional genes in between a pair of direct repeats, in addition to the large-scale loss in the <italic>Selaginella kraussiana</italic> (SRR2037123) plastome assembly. The early termination of sequence extension might be an issue underlying the algorithm of NOVOPlasty.</p>
      <p id="Par27">The mitogenomes of fungi and animals usually have a much higher nucleotide substitution rate than plastomes [<xref ref-type="bibr" rid="CR40">40</xref>, <xref ref-type="bibr" rid="CR41">41</xref>]. Therefore, unlike assembling plastomes, a relatively closely related seed or label database would be indispensable for assembling and identifying mitogenomes using the extension and assembly strategy of GetOrganelle. If GetOrganelle fails using the default database for animals or fungi mitogenome assembly, we suggested that users rerun the same sample using their own seed and label databases.</p>
      <p id="Par28">Although GetOrganelle has demonstrated success at separating different organelle components (e.g., separating plastome and mitogenome components in complex assembly graphs in samples such as SRR5602593 and ERR1917165) and repeat resolution, this ability of GetOrganelle largely relies on an accurate assembly graph output by SPAdes. The only run in these tests that violated this prerequisite was the fungal mitogenome assembly of SRR5802125, which generated abnormal connections that in turn distorted the multiplicity estimations of contigs. Although the assemblies using both tools obtained the same gene hits, the contig multiplicities estimated by GetOrganelle are obviously disproportionate to the contig coverages. This issue could be solved by incorporating different assembly engines and reporting the disproportionality of contig multiplicities over the contig coverages to warn users, a feature planned for a future version of GetOrganelle.</p>
    </sec>
    <sec id="Sec11">
      <title>Other small repeats, broken graph, and manual completion</title>
      <p id="Par29">When attempting to solve the organelle genome structure, other small repeats can cause awkward tangles in the assembly graph. Plastomes of some plant clades have been reported to have multiple short repeats, such as some clades in Ericaceae [<xref ref-type="bibr" rid="CR42">42</xref>, <xref ref-type="bibr" rid="CR43">43</xref>], Geraniaceae [<xref ref-type="bibr" rid="CR44">44</xref>], and Pinaceae [<xref ref-type="bibr" rid="CR26">26</xref>, <xref ref-type="bibr" rid="CR45">45</xref>]. Most plant mitogenomes contain a high number of short repeats [<xref ref-type="bibr" rid="CR46">46</xref>–<xref ref-type="bibr" rid="CR48">48</xref>]. In contrast, mitogenomes in animals and most fungi are contracted and generally lack repeats [<xref ref-type="bibr" rid="CR49">49</xref>]. However, in our trial analyses, we did discover a few samples of fungi (e.g., SRR5801935, <italic>Macrolepiota dolichaula</italic> (Berk. &amp; Broome) Pegler &amp; R.W. Rayner, SRR5802125, <italic>Collybia</italic> sp., and SRR5804018 <italic>Grifola frondosa</italic> (Dicks.) Gray) and animals (e.g., SRR136494, <italic>Mayetiola destructor</italic> Say, SRR4340274, <italic>Daphnia magna</italic> Straus, SRR1298377, <italic>Halyomorpha halys</italic> Stål) that have multiple repeats, which may result in isomeric assemblies. Organelle genomes with many short or long sequence repeats, such as the plastomes of Chlamydomonas and some Ericaceae and Geraniaceae species, may be intractable for short-read sequencing data. With such genomes, GetOrganelle may generate tens of thousands of circular sequences or highly fragmented contigs; long read data such as PacBio HiFi data may provide a solution for improved automated assembly in these difficult cases.</p>
      <p id="Par30">One common feature of organelle genomes is tandem repeats, which can be visualized as whirls in the assembly graph. The main challenge with disentangling tandem repeats in an assembly graph is determining the multiplicity (copy number) of the contigs. Many bacterial genome assemblers use the minimum or the greedy algorithm for detecting multiplicity, which is simply assuming every tandem repeat contig has multiplicity two and constructing the assembly as a path that traverses the repeat twice [<xref ref-type="bibr" rid="CR50">50</xref>–<xref ref-type="bibr" rid="CR52">52</xref>]. GetOrganelle disentangles the tandem repeats based on both the connection information and the contig coverage, a more reality-based approach, which has a better chance of success if the target organelle genome has some tandem repeats of more than two copies and the reads are of sufficiently high coverage to overcome the error (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Other repeats, such as short inverted repeats other than the large IRs, cause not only assembly graph tangles, but could also mediate recombination, potentially producing isomers in the same individual [<xref ref-type="bibr" rid="CR25">25</xref>–<xref ref-type="bibr" rid="CR27">27</xref>, <xref ref-type="bibr" rid="CR53">53</xref>]. For researchers studying plastome rearrangement and recombination dynamics, GetOrganelle is the right tool to exhaust the limits of the assembly graph and presents all possible configurations, such as plastomes of <italic>Juniperus cedrus</italic> (SRA: SRR1145775) and <italic>Picea</italic> species (ERR268390, SRR5028199) and mitogenomes of some fungal (SRR5801935, SRR5804018) and animal species (SRR4340274, SRR136494). Currently, the potential configurations mediated by short repeats need to be confirmed by read pair mapping or PCR verification. With the development of long insert size libraries and long-read sequencing platforms (e.g., PacBio), these data can be added for improving repeat resolution and configuration confirmation. A function that incorporates long library reads or long-read sequencing data in estimating the proportion of all candidate isomers is planned for future versions of GetOrganelle.</p>
      <p id="Par31">Some assembly graphs may not be organelle-sufficient (broken graph) or are too complicated to estimate multiplicity. In such cases, users are recommended to perform manual completion or manual multiplicity estimation with the simplified assembly graph using Bandage, along with the target-hit-contig table from the concomitant, cognominal TAB-formatted file. An advantage of manual completion is that it is possible to detect sequence interchange between the nuclear genome, mitogenome, and plastome. This is especially the case when multiple organelle genome mode is selected for plant datasets. The result could be a tangly assembly graph mixed with plastome, mitogenome, and plastome-mitogenome-shared contigs. If de novo assembly and manual completion cannot yield a complete sequence of the plastome, gap filling and PCR verification are needed [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR42">42</xref>].</p>
    </sec>
    <sec id="Sec12">
      <title>Seed and label database in GetOrganelle</title>
      <p id="Par32">GetOrganelle does not rely on having a closely related plastome for successful assembly; in fact, it is possible to accurately assemble the plastome from short reads of an angiosperm species, <italic>Haberlea rhodopensis</italic>, with high and homogeneously distributed plastid coverage, using the plastome of a gymnosperm species, <italic>Gnetum parvifolium</italic>, as the initial seed. For the same set of reads, using a short, conserved DNA fragment (<italic>rbcL</italic>) as the seed is sufficient to recruit almost all target-associated reads to assemble a complete plastome, but less efficient. The reason for this is that the seed is only used for read mapping to collect the initial target-associated reads, after which the seed will no longer be used (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). GetOrganelle then uses the initial target-associated reads to recruit more target-associated reads using multiple rounds of extension, which is mainly based on the nature of the read overlaps with the previously recruited target-associated reads, rather than using the seed as a reference in assembly process. Nevertheless, using the organelle genome of a non-related species as the seed can only be applied to plastome seed recruitment, but not to animal and fungal mitogenome seed recruitment due to their high divergences owing to rapid rates of sequence evolution (see the section <xref rid="Sec10" ref-type="sec">“Mitogenome assembly of fungi and animals</xref>”).</p>
      <p id="Par33">Since the label database (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) in GetOrganelle is used to provide a supervision signal for labeling contigs prior to semi-supervised learning, the label database should come from conserved regions, such as coding regions, but not necessarily a complete set of genes. After labeling, GetOrganelle uses an integrated strategy (see the “<xref rid="Sec17" ref-type="sec">Methods</xref>” section) to identify target contigs, which largely relies on the contig coverages and assembly graph characteristics. Thus, the label database of gene fragments has limited influence on the final organelle-complete graph output and would have only a minor effect on the scaffolding of organelle contigs, except for cases where the assemblies have no hits against the database.</p>
    </sec>
    <sec id="Sec13">
      <title>Word size in GetOrganelle</title>
      <p id="Par34">Word size, like the <italic>k-</italic>mer in De Bruijn graph-based assembly, is important to the feasibility and efficiency of read extension, but it differs from <italic>k-</italic>mer in providing the overlap threshold for data filtering. The smaller the Word size is, the lower the threshold is. The use of Word size not only does examine the nature of connection between any two target reads, but also in a way assesses the connection strength by the coverage. Even if the plastome shares similar sequence with mitogenome or nuclear genome, the reads of those non-target genomes would not be largely recruited due to the low coverage, meaning that any two reads of those non-target reads are less likely to be connected in the shallow coverage WGS data.</p>
      <p id="Par35">The Word size is generally negatively correlated with memory usage (Fig. <xref rid="Fig6" ref-type="fig">6</xref>), while <italic>k</italic>-mer is generally positively correlated with memory usage. Memory cost decreases when the Word size increases because the larger the overlap threshold (causing fewer reads to be connected and recruited based on the overlap), the smaller the word space during extension. Thus, <italic>k-</italic>mer only influences the assembly process, while the Word size influences the extension process, the numbers of reads to be recruited, and the assembly process. For many real datasets, because the plastome might share homologous regions with non-target genomes [<xref ref-type="bibr" rid="CR37">37</xref>–<xref ref-type="bibr" rid="CR39">39</xref>], a small Word size means that a relaxed threshold would not promptly stop the extension when the extension was walking through the non-target genomes. In the case shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref>, using a WSR &lt; 0.65 wastes computational resources.</p>
      <p id="Par36">The duration of a whole assembly run is affected by the Word size in various ways (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Generally, with unlimited number of rounds, there are two significant but antagonistic effects shaping the curve of the duration against the Word size (or in the form of WSR). The first one is the “slowing-speed effect”, meaning that a larger Word size means smaller steps in extension and consumes more rounds and more time to recruit the same set of reads. The second one is the “reducing-data effect,” meaning that a larger Word size also results in a briefer extension period with fewer non-target reads, reducing the run time in de novo assembly and other downstream calculation. In the performance test (Fig. <xref rid="Fig6" ref-type="fig">6</xref>), a typical manifestation of both effects was where the time cost remarkably increased at WSRs in 0.65 and 0.70, which was caused by the relatively slow speed in extension and a relatively high amount of non-target reads to recruit. In this test, using the minimum number of rounds could cut off most non-target reads and eliminate the “reducing-data effect” in a slow-paced extension (a relatively large WSR, i.e., ≥ 0.65 in the pre-grouping disabled case and ≥ 0.55 in the pre-grouping enabled case), but cut off less non-target reads as the WSR become smaller (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Therefore, when pre-grouping was disabled and the minimum rounds were run, the plot of duration against WSR was not a monotonic rising curve (“slowing-speed effect”) but suffered the “reducing-data effect” when the WSR &lt; 0.65 (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Using the pre-grouping algorithm could generally eliminate the “slowing-speed effect”. Consequently, in this test, the time cost is nearly constant when the WSR ≥ 0.55, but still suffers the “reducing-data effect” when the WSR &lt; 0.55 (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). In empirical studies, the minimum number of rounds required is unknown. Using the pre-grouping algorithm with a sufficient value (i.e., empirically 2E5 for normal plastome percent), five rounds of extension typically recruited target reads covering the whole plastome (although 15 rounds were required in a very few cases with extremely low plastome coverage (data not shown)).</p>
      <p id="Par37">The optimal Word size is dictated by read length, read quality, total number of reads, percentage of organelle DNA content, heterogeneity of organelle base coverage, and other factors. If there is no user-assigned Word size value, “get_organelle_from_reads.py” will automatically estimate an optimal Word size value using a set of customized empirical functions based on the characteristics of the dataset. The automatically estimated Word size tends to be small to enhance the success rate, but possibly at the cost of increasing the computational burden (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Importantly, though, the automatically estimated Word size does not guarantee the best performance in assembly results (see eight plastome samples with customized parameters in our tests) nor in computational costs.</p>
    </sec>
    <sec id="Sec14">
      <title><italic>k</italic>-mer in GetOrganelle</title>
      <p id="Par38">GetOrganelle uses SPAdes as the core de novo assembler, which allows the user to use a <italic>k</italic>-mer gradient for assembly. One advantage of this is that SPAdes combines the assemblies from multiple <italic>k-</italic>mers. In our tested 50 plant datasets, the most successful assemblies were the results of the largest <italic>k-</italic>mers that the data permitted, which is 127 for read length ≥ 150 bp or 91 for read length up to 100 bp. Someone might draw a specious conclusion that the base coverage is usually high enough to use the largest <italic>k</italic>-mer for assembling the complete plastome or mitogenome from WGS data. However, except for those with low base coverage for the plastome (e.g., SRR5602610, ca. 14×), plastome assembly still suffered from the base coverage heterogeneity or read error, which create regions where large <italic>k-</italic>mers do not overlap. For example, if only one large <italic>k-</italic>mer value was used for each run (i.e., 91 for read length ca. 100 bp and 127 for read length ≥ 150 bp), some samples (tests not shown) would not assemble a complete circular plastome, while by using a <italic>k-</italic>mer gradient, those samples achieved a complete plastome at the same large <italic>k-</italic>mer.</p>
      <p id="Par39">Another advantage of using a <italic>k</italic>-mer gradient is that GetOrganelle could iteratively attempt to disentangle the assembly graph of each <italic>k-</italic>mer from the largest to the smallest, then find a larger one with the organelle-sufficient graph. A larger <italic>k-</italic>mer value is preferable when there are longer repeats and coverage is sufficiently high. However, when the largest <italic>k-</italic>mer used in the analysis does not obtain the complete circular plastome/mitogenome, the assembly graph of a smaller <italic>k-</italic>mer is checked automatically. The “GetOrganelle-auto” runs of SRR5602587 and SRR5028199 benefitted from this design.</p>
    </sec>
    <sec id="Sec15">
      <title>Computational consumption of GetOrganelle</title>
      <p id="Par40">Freudenthal et al. [<xref ref-type="bibr" rid="CR24">24</xref>] showed that GetOrganelle has moderate efficiency in both time and memory usage among tested assemblers. However, they only used the default options for evaluation, which are designed to have high chloroplast genome completion rate, rather than high computational efficiency. If the aim of studies is not to assemble complete organelle genomes, researchers could easily adjust the options, such as increasing the Word size or turning on “--fast” to significantly speed up assembly and reduce memory usage, and still keep both the success rate and assembly quality at a higher level than those of other assemblers (additional tests via <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1). However, we do not recommend these options. Firstly, in the current version of GetOrganelle, the complete circular assemblies are better than incomplete results, justifying a reasonable tradeoff of assembly accuracy against computation speed. Secondly, extremely high Word size may generate higher error rate in assemblies with two cases in the 50 plant datasets (i.e., GetOrganelle-W0.8 runs of SRR5602577 and SRR5602597).</p>
    </sec>
  </sec>
  <sec id="Sec16">
    <title>Conclusions</title>
    <p id="Par41">GetOrganelle is a fast and versatile toolkit for de novo assembly of complete and accurate organelle genomes using low coverage WGS data. Our evaluations show that the GetOrganelle toolkit can efficiently and accurately assemble different types of organelle genomes from a broad range of organisms. In general, compared with NOVOPlasty, GetOrganelle has far better success rates for assembling plastomes while consuming similar or even less computational resources. Additionally, GetOrganelle-reassembled plastomes generally have much higher accuracy than those reassembled by NOVOPlasty or published ones that were assembled by various tools in accordance with the read mapping evaluation. GetOrganelle can also generate all possible configurations when plastomes or mitogenomes have flip-flop configurations or other isomers mediated by repeats.</p>
    <p id="Par42">Potential applications of GetOrganelle include quickly extracting organelle genomes from whole genome assemblies and evaluating organelle genome quality. Assembling organelle genomes from metagenomic data would also be possible by using a customized database and scheme. The maximum extending length option enables rough control of the length of the target assembly, which could be used to quickly assemble interesting loci or genes from the metagenomic and transcriptomic data. Additionally, the Python Classes and Functions defined in GetOrganelleLib could be used to manipulate and disentangle non-organelle assembly graphs.</p>
    <p id="Par43">Currently, GetOrganelle exports all possible configurations without using library information of the paired-end reads. However, the long insert size library or long-read sequencing data can be used for repeat resolution and configuration verification. A function that could use this information and estimate the proportion of all the potential isomers (configurations) is expected in a future version of GetOrganelle. Improvements in the seed databases and the label databases are also expected, which should result in better parameter estimation and higher success rates in assembling mitogenomes.</p>
  </sec>
  <sec id="Sec17">
    <title>Methods</title>
    <sec id="Sec18">
      <title>Workflow of organelle genome assembly using GetOrganelle</title>
      <p id="Par44">GetOrganelle v1.6.2 consists of two major scripts (“get_organelle_from_reads.py” and “get_organelle_from_assembly.py”) and 17 minor scripts (under the directory “Utilities”; for processing or evaluating organelle assemblies) (Fig. <xref rid="Fig1" ref-type="fig">1</xref>), a series of libraries (under the directory “GetOrganelleLib”; including default seed database, default label database, and Python Classes/Functions), and dependencies (under the directory “GetOrganelleDep”; including Bowtie2, SPAdes, BLAST+). The major script “get_organelle_from_reads.py” could pipe all 5 steps described below (also see green solid arrows in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) together using a single line command to assemble organelle genome(s) from raw reads. The major script “get_organelle_from_assembly.py” could extract organelle genome(s) from assembly graphs generated using SPAdes [<xref ref-type="bibr" rid="CR15">15</xref>] or Velvet [<xref ref-type="bibr" rid="CR54">54</xref>] (steps 4–5; also see blue solid arrows in Fig. <xref rid="Fig1" ref-type="fig">1</xref>).</p>
      <sec id="Sec19">
        <title>Step 1. Mapping reads to seed and assembling seed-mapped reads for parameter estimation</title>
        <p id="Par45">The initial step of assembling target organelle genome(s) from reads via GetOrganelle (“get_organelle_from_reads.py”) uses Bowtie2 to map reads to seed sequence(s) (i.e., the default seed database), which may include complete reference organelle genome(s) or organelle fragment(s) (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, green solid arrow 1). Currently, the default seed of GetOrganelle (under the directory “GetOrganelleLib/SeedDatabase”) covers embryophyte plastomes, non-embryophyte plastomes, embryophyte mitogenomes, embryophyte nuclear ribosomal DNA, animal mitogenomes, and fungal mitogenomes (in the option referred as “embplant_pt,” “other_pt,” “embplant_mt,” “embplant_nr,” “animal_mt,” “fungus_mt,” respectively). These mapped reads are here called seed-mapped reads (stored at *.initial.fq).</p>
        <p id="Par46">The seed-mapped reads will be treated as initial “baits” to recruit more target-associated reads in the next step. In the “auto” mode (see the last paragraph of step 2 below), the seed-mapped reads will be also coarsely assembled into seed contigs, which will be used for parameter estimation in step 2.</p>
      </sec>
      <sec id="Sec20">
        <title>Step 2. Recruiting more target-associated reads through extending iterations</title>
        <p id="Par47">After creating “baits,” GetOrganelle (“get_organelle_from_reads.py”) recruits new target-associated reads by comparing candidate reads to “baits” and updating the “baits” with overlapped new reads (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, green solid arrow 2). In this extension process, the key comparison method for determining overlaps is classic substring hashing. Substring(s) are referred as Word(s) here to distinguish them from <italic>k</italic>-mers, a similar concept in the assembly process. The uniform length of the Words is thus named as Word size.</p>
        <p id="Par48">Before the core extension iterations, “get_organelle_from_reads.py” creates an index and assigns unique ids for each set of duplicated reads to avoid repeatedly calculating (information stored at file “temp.indices.1”). Those reads with duplicates can also be used for downstream “pre-grouping”. Pre-grouping is an algorithm for speeding up target-read recruitment. This algorithm is based on the idea that it would be more efficient to firstly compare reads that are more likely to be target-associated. Given that the organelle genomes usually have more copies, and hence higher base coverage than most non-organelle chromosomes, the duplicated reads are more likely to be organelle-associated than non-duplicated reads. The “get_organelle_from_reads.py” script will group a certain number of duplicated reads (after option “-P”) into groups based on read overlap using the same substring hashing method mentioned above. Any groups, including those with only a single read, will have a hash table storing Words chopped from all reads of this group. Any two groups sharing at least a single Word in their hash table will be merged. After pre-grouping, a group resembles a set of connected pseudo-contigs (information stored at file “temp.indices.2”). During the following extension iterations, once a read is accepted as a target-associated read, all other reads (ids) in the same group will be marked as acceptable.</p>
        <p id="Par49">The “get_organelle_from_reads.py” script begins the core extension iterations with constructing a hash table, by cutting the initial reads (“baits”) into Words and adding those initial Words to the hash table (AW). If a Word of a candidate read hits the AW, all Words of this read are also added to AW, and the index of this read will be marked as accepted (Accepted Index, AI). As mentioned above, all other read ids in the same group will be treated as accepted. During each iteration (round), “get_organelle_from_reads.py” goes through all candidate reads one by one to check whether a read is acceptable. After a user-specified number of rounds or when no new read has been accepted in a complete round, “get_organelle_from_reads.py” will stop the extension process and output all accepted reads (stored at file “filtered_*.fq”). For low memory machines or testing purposes, accepted reads per round can be outputted separately after each round (followed with flag “--out-per-round”) along with AW emptied after each round.</p>
        <p id="Par50">Word size (followed with flag “-w”), like <italic>k-</italic>mer length in assembly, is crucial to the feasibility and efficiency of this process. The best Word size for extension is affected by read length, read quality, total number of reads, percentage of organelle genome reads, heterogeneity of organelle base coverage, and other factors. In the “auto” mode when there is no user-assigned Word size value, “get_organelle_from_reads.py” will automatically estimate a proper Word size with a set of empirically customized functions, based on the data characteristics.</p>
      </sec>
      <sec id="Sec21">
        <title>Step 3. Conducting de novo assembly</title>
        <p id="Par51">The recruited target-associated reads will be then automatically assembled using SPAdes (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, green solid arrow 3). Both paired and unpaired reads will be used. The outputs of each <italic>k-</italic>mer of SPAdes include an assembly graph (FASTG format), which records the connections of contigs as a graph with some allelic polymorphism and assembly uncertainty. Other assemblers that are able to generate the assembly graph, such as Velvet, may be used for completing this step, but are not yet implemented in GetOrganelle. The intermediate results are stored in the subfolder “filtered_spades”.</p>
      </sec>
      <sec id="Sec22">
        <title>Step 4. Roughly filtering for target-like contigs</title>
        <p id="Par52">Because sequences are often shared among plastomes, mitogenomes, and nuclear genomes, the accepted reads from step 2 sometimes unavoidably include non-target reads. As a consequence, the output assembly graph might also include non-target contigs. However, previously reported tools did not account for or adequately addressed this concern.</p>
        <p id="Par53">GetOrganelle searches for the target-like contigs from the original assembly graph file by jointly using the contig label table, contig connections, and contig coverages (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, green solid arrow 4 and blue solid arrow 1). To create the contig label table, GetOrganelle takes the contigs in the assembly graph as the queries, conducts the BLAST search against a local label database (see next paragraph), generates the BLAST hit table, and converts the generated BLAST hit table into the contig label table, which records the gene identities and organelle types of those BLAST matches. By conservatively deleting non-target contigs, GetOrganelle outputs a simplified assembly graph file, along with a concomitant cognominal TAB-formatted file recording the contig label table (with the extension “.csv” to be in conformity with Bandage). This step is completed automatically by the two major scripts or can be independently executed using the script “slim_fastg.py”.</p>
        <p id="Par54">For GetOrganelle, the default label database of a certain organelle is made from the coding regions of that organelle genome. We created six default label databases that correspond to the six types of organelle genome in the seed databases. A contig that hit the target organelle database will be labeled with gene identity in the “.csv” file and called target-hit-contig here. Any contig that is directly or indirectly connecting to that target-hit-contig is called a target-associated-contig. Here, we define a group of interconnected contigs as a connected component of the assembly graph. GetOrganelle by default retains all connected components with target-hit-contig(s). Additionally, in the embplant_pt or embplant_mt mode, GetOrganelle by default retains both plastome and mitogenome connected components for downstream clustering contigs by coverage. Generally, this roughly filtering step is designed to be conserved and avoiding removing true target contigs.</p>
      </sec>
      <sec id="Sec23">
        <title>Step 5. Identifying target contigs and exporting all configurations</title>
        <p id="Par55">GetOrganelle then uses the simplified assembly graph file and the contig label table to (5a) further accurately identify (narrow down to) target organelle contigs, (5b) estimate multiplicities (copy number) of contigs in an organelle-only graph, and (5c) export all possible distinctive path(s) [stored as FASTA file(s)] from the organelle assembly graph (stored as a cognominal GFA format file) (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, green solid arrow 5 and blue solid arrow 2). Each path represents a possible configuration of the target organelle genome. This step is fulfilled by the two major scripts or can be separately executed using the script “disentangle_organelle_assembly.py”. In case of organelle genome with a large number of repeats, GetOrganelle sets up an option for limiting the calculation time of disentangling to avoid generating inexhaustible combinations. When the major scripts failed to export circular sequence(s) from the assembly graph for the reasons enumerated below in step 5′ or because of the time limit, they will execute a second run to export the contigs, which would be mainly the target-hit-contigs.</p>
        <p id="Par56">Three concepts need to be clarified:
<list list-type="order"><list-item><p id="Par57">An “organelle-sufficient graph” is an assembly graph with contigs completely covers one complete organelle genome.</p></list-item><list-item><p id="Par58">An “organelle-only graph” is an assembly graph only with true contigs of one organelle genome.</p></list-item><list-item><p id="Par59">An “organelle-equivalent graph” is both an organelle-sufficient graph and an organelle-only graph.</p></list-item></list></p>
        <p id="Par60">GetOrganelle requires three assumptions to disentangle the assembly and declare the result as a complete circular organelle:
<list list-type="bullet"><list-item><p id="Par61"><italic>Assumption 1</italic>: All configurations, if there are more than two, of the target organelle genome are compositionally identical. This assumption limits the multiplicities of contigs to be the same among different configurations. In other words, polymers are found in real plastid DNA molecules [<xref ref-type="bibr" rid="CR55">55</xref>], whereas GetOrganelle can only export the monomer form; potential sub-genomic configurations are currently not implemented in the current version. If there are parallel contigs caused by nucleotide polymorphism, all subgraphs composed of any of those polymorphisms will be disentangled independently. Therefore, all configurations of each subgraph will be compositionally identical.</p></list-item><list-item><p id="Par62"><italic>Assumption 2</italic>: The topology of each organelle genome will be represented as a single circular molecule. This assumption holds when the real organelle genome is a circular molecule or organized in polymers (most plastomes, and type I and type II mitogenomes) and the assembly graph is an organelle-sufficient graph. If this assumption is violated, GetOrganelle only exports the target contigs.</p></list-item><list-item><p id="Par63"><italic>Assumption 3</italic>: The coverage values of contigs of the same organelle genome are generally proportional to their multiplicities (copy numbers). Therefore, coverage values of contigs with the same multiplicity of the same organelle genome generally are consistent.</p></list-item></list></p>
        <sec id="FPar1">
          <title>5a. Further identifying target organelle contigs</title>
          <p id="Par64">Using the BLAST hit information alone to identify target organelle contigs is risky. Some contigs, including mitochondrial contigs that have short sequence of plastome origin or target-like shallow-depth contaminant contigs, would be labeled incorrectly as target-hit-contigs (false positive). On the other hand, some sequences might be true target contigs but are too short or divergent from sequences in the label database to be labeled as target-hit-contigs (false negative). Therefore, we used additional information to improve the identification of target contigs, such as the assembly graph characters (Assumptions 1 and 2) and contig coverage values (Assumption 3). GetOrganelle uses an integrated strategy that iteratively uses all or part of the following modules to approach this task until no more changes are going to be made to the assembly graph.
<list list-type="order"><list-item><p id="Par65">Using the BLAST hit information to roughly cluster contigs with target labels. Specifically, GetOrganelle first calculates a customized hit weight value (HW) for each BLAST hit record (gene identity label restored from the contig label table). For records representing the same gene in the local BLAST database, only the record with the best HW is kept as the only valid hitting record for that gene. The HW of a hit record is simply defined as the product of the hitting length of the query (HL) and query contig coverage (QC) (HW = HL * QC). Given our experience that the false positive hits generally correspond to shorter length and shallower depth contigs, HW can be a criterion for excluding the false positive hit records. Each gene in the BLAST database is thus aligned to no more than one contig in the assembly graph. Then, GetOrganelle calculates a customized contig weight value (CW) of a target organelle genome for each contig as CW<sub>target</sub> =  ∑ HW<sub>target</sub>. For example, the plastid CW for a contig is defined as the sum of the HWs of all plastid gene hit records of that contig, while the mitochondrial CW for the same contig is defined as the sum of the HWs of all mitochondrial gene hit records of the same contig. For a contig, if the target CW is much larger (default factor: 3 times) than the non-target organelle CW, this contig would be labeled as a target-anchor contig (very likely to be a true target contig), and vice versa. Using the HW and CW, GetOrganelle roughly eliminates most non-target contigs with false positive BLAST hits.</p></list-item><list-item><p id="Par66">Adding more target labels to some target contigs that do not hit the label database according to assembly graph characters. Based on Assumption 2, any configuration of the target organelle genome is a single circular molecule. As a result, in an organelle-sufficient graph, both ends of any true target contig should be connected to at least one true target contig. If the tail end of a true target contig, Contig A (marked as A<sub>tail</sub>) has only one edge that connects A<sub>tail</sub> and the head end of another unknown contig, Contig B (B<sub>head</sub>), then Contig B should be a true target contig. However, in a real assembly graph with missing contigs (incomplete organelle genome), Contig B may be missing and the unknown contig connected to A<sub>tail</sub> may be a non-target contig. In consideration of complicated situations like this, only when Contig B is between two target-anchor contigs (Contig A and Contig C) with the sequence (A<sub>tail</sub>-B<sub>head</sub>-B<sub>tail</sub>-C<sub>head</sub>), and when A<sub>tail</sub> only connects to B<sub>head</sub> and C<sub>head</sub> only connects to B<sub>tail</sub>, GetOrganelle labels Contig B as a target-anchor contig with CW = 0.</p></list-item><list-item><p id="Par67">Using coverage values of contigs to remove contigs with coverage value that significantly deviates from the target-anchor contigs. Based on Assumption 3, GetOrganelle uses the Gaussian mixture distribution to approximate the coverage values of all contigs in the simplified assembly graph, which is a mixture of different organelle contigs and nuclear contigs. In most cases of empirical plant genome skimming data, the plastome has significantly higher coverage than the mitogenome, the coverage of which in turn is higher than the nuclear genome except for highly repeated regions. Therefore, in a plant WGS dataset, the coverage values of plastid and mitochondrial and nuclear contigs are expected to be classified into different Gaussian components of the Gaussian mixture distribution. GetOrganelle could thus delete the contigs with coverage value far from the target coverage distribution. Specifically, GetOrganelle applies an EM (Expectation-Maximization) algorithm with the semi-supervised learning and the weighted Gaussian mixture model to cluster the coverage values of all candidate contigs. Here, the semi-supervised learning means that the coverage values of the target-anchor contigs (the labeled data) are not updated during EM iterations. The coverage value of a contig in the Gaussian mixture model is weighted by the length of the contig.</p></list-item><list-item><p id="Par68">Removing contigs isolated from the main target connected component that includes the target-anchor contigs. Based on Assumption 2, true target contigs in an organelle-sufficient assembly graph should occur in one connected component. Thus, for a real organelle-sufficient assembly graph, GetOrganelle retains the connected component with the most target-anchor contigs and deletes other such connected components. Specifically, GetOrganelle calculates a customized target weight value (TW) for each connected component of the assembly graph. The TW of a connected component is defined as the sum of the target CWs of all contigs in that connected component. Assuming organelle-sufficiency, GetOrganelle sorts connected components by their TWs, finds the connected component with the significantly largest TW (100 times larger than the second largest TW by default), and removes the contigs of other connected components from the assembly graph. If GetOrganelle fails to find such a connected component, disentangling the assembly graph as a circular organelle genome fails and GetOrganelle reverts to “linear mode.” In a “linear mode”, when GetOrganelle tries to disentangle the assembly graph as contigs or scaffolds, several connected components with large TW are retained, and only the connected components with TWs 10,000 times (by default) less than the largest TW will be removed.</p></list-item><list-item><p id="Par69">Removing tip contigs. A tip contig is a contig with one or both ends that do not connect to any other contigs in the assembly graph nor to itself as circular. Based on Assumption 2, an organelle-equivalent graph will not contain any tip contig, because any partial sequence of a circular DNA molecule will have both upstream and downstream sequences. GetOrganelle will check whether a tip contig is a target-anchor contig before removing it. If the tip contig is a target-anchor contig, it is likely that Assumption 2 is violated, and in most cases, the assembly graph is not an organelle-sufficient graph but rather “a broken organelle graph”.</p></list-item></list></p>
        </sec>
        <sec id="FPar2">
          <title>5b. Estimating the multiplicities of contigs in an organelle-only graph</title>
          <p id="Par70">There are sources of information resources for estimating multiplicities for contigs in GetOrganelle. One is contig coverage value (<italic>k</italic>-mer coverage in practice but referred to as coverage in this paragraph). According to Assumption 3, we could roughly estimate the multiplicity of each contig based on its coverage. Given that any contig in an organelle-only graph would have at least one copy, GetOrganelle first assumes all contigs have the multiplicity of one and estimates a primary value of the average coverage of the target genome. Then, GetOrganelle optimizes the multiplicities of all contigs by dividing the coverage value of a contig by the average coverage and rounding the result to the nearest integer. GetOrganelle iteratively optimizes the average coverage of the target genome and the multiplicities of the contigs, with the constraint that the genome average coverage should not be below the minimum coverage of all contigs according to Assumption 1. Here, the stabilized multiplicities estimated on the base of the coverage values of contigs are called observed multiplicities (O<sub>C<italic>i</italic></sub>, with <sub>C<italic>i</italic></sub> denoting the contig name) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
          <p id="Par71">Another type of information comes from the graph characteristics, which offers a set of hard constraints for the multiplicities of contigs (M<sub>C<italic>i</italic></sub>, with <sub>C<italic>i</italic></sub> denoting the contig name). Using the Python library Sympy, GetOrganelle creates a set of linear equations to characterize the multiplicity relationship among connected contigs. In detail, there are mainly four constraints to build this set of equations. First, the multiplicity of a self-loop contig has no constraints. Second, if Contig A is not a tip contig nor a self-loop contig, M<sub>CA</sub> is equal to the sum of the multiplicities of the contigs connected to A<sub>head</sub> and equal to the sum of the multiplicities of the contigs connected to A<sub>tail</sub>. Third, the multiplicity of a tip contig is arbitrarily set to 1 to avoid over-estimation, although this risks failure in solving the equations. Last, in considering symmetry of large inverted repeats (such as IRs in plastome), the multiplicity of a sequential repeat contig is constrained to be an integer multiple of the multiplicity of one of its nearby contigs, e.g., the multiplicity of a sequential repeat inside the IR region of a plastome assembly graph must be an even number and no smaller than 4. This set of equations would be then simplified using Sympy.solve. The multiplicity values of all contigs would be represented as linear expression of several free variables.</p>
          <p id="Par72">By minimizing the difference of the multiplicities based on the above two types of information using least square, meaning minimizing <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ {\sum}_{i=0}^{\mathrm{n}}{\left({\mathrm{M}}_{\mathrm{C}i}-{\mathrm{O}}_{\mathrm{C}i}\right)}^2 $$\end{document}</tex-math><mml:math id="M2" display="inline"><mml:msubsup><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mi mathvariant="normal">n</mml:mi></mml:msubsup><mml:msup><mml:mfenced close=")" open="("><mml:mrow><mml:msub><mml:mi mathvariant="normal">M</mml:mi><mml:mrow><mml:mi mathvariant="normal">C</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi mathvariant="normal">O</mml:mi><mml:mrow><mml:mi mathvariant="normal">C</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mn>2</mml:mn></mml:msup></mml:math><inline-graphic xlink:href="13059_2020_2154_Article_IEq1.gif"/></alternatives></inline-formula>, GetOrganelle achieved the values of those freedom variables, therefore all the M<sub>C<italic>i</italic></sub> (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
        </sec>
        <sec id="FPar3">
          <title>5c. Exporting all possible distinctive path(s)</title>
          <p id="Par73">GetOrganelle then exhaustively searches for all possible paths from this organelle-only graph with contig multiplicities. Each configuration combination would be saved as an independent FASTA file, with the same sequence-name style to manual completion using Bandage [<xref ref-type="bibr" rid="CR30">30</xref>] (see below). A circular sequence would also be marked “(circular)” in the sequence name. For plastomes with repeats inside the large IRs, there would be 6 paths, meaning 6 potential isomers (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>; another similar but more complicated example is SRR5602601 with 12 paths). However, in considering symmetry, only those isomers with identical large IRs (path1 &amp; 2 in Fig. <xref rid="Fig2" ref-type="fig">2</xref>) are biologically possible paths. In these cases, GetOrganelle would mark these results with identical IRs as the first repeat pattern in the file name.</p>
        </sec>
      </sec>
      <sec id="Sec24">
        <title>Step 5′. Manual completion</title>
        <p id="Par74">If GetOrganelle fails to export a complete circular organelle genome, because of insufficient target assembly graph, too short a disentangling run time, too many possible configuration sequences, or misidentification of target contigs, manual completion is needed to clean “noisy” and non-target contig/scaffold connections (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, gray solid arrow 4 and 5). The simplified assembly graph can be visualized using Bandage [<xref ref-type="bibr" rid="CR30">30</xref>]. Meanwhile, the concomitant annotation “csv” file can be imported into Bandage and added to the graph as labels, which helps to manually identify target-like contigs/scaffolds. The semi-manually cleaned assembly graph can be then finalized using another main script “get_organelle_from_assembly.py” (Fig. <xref rid="Fig1" ref-type="fig">1</xref>) or be manually exported from the cleaned assembly graph using Bandage.</p>
      </sec>
    </sec>
    <sec id="Sec25">
      <title>Assessing the performance characteristics of GetOrganelle</title>
      <p id="Par75">To investigate the performance characteristics of GetOrganelle, we varied relevant parameters of the program: word size values (as the form of WSR, i.e., 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9), the number of rounds (unlimited vs. minimum), and pre-grouping either activated (-P 2E5, i.e., using the top 2E5 duplicated reads to conduct the pre-grouping) or disabled (-P 0). The minimum number of rounds mode is defined as fewest rounds of extension iterations required to obtain a complete plastome or stabilizing an incomplete plastome.</p>
      <p id="Par76">We used these various settings to assemble the plastome of the angiosperm species <italic>Haberlea rhodopensis</italic> Friv. (Gesneriaceae) from a reduced published dataset (500 Mb, SRA: SRR4428742), with the complete plastome of a gymnosperm species, <italic>Gnetum parvifolium</italic> (Warb.) W.C.Cheng (GBK: NC_011942.1) as the seed. We additionally use only the <italic>rbcL</italic> gene sequence of <italic>Gnetum parvifolium</italic> (GBK: NC_011942.1) as the seed and the WSR of 0.75 to assemble the same dataset.</p>
      <p id="Par77">To assess the characteristics of recruited reads per round, the option “--out-per-round” was specified for the script “get_organelle_from_reads.py”. The script “round_statistics.py” was used to assess the increasing cover percent of the organelle genome using a read mapping approach. Using Bowtie2, this script maps reads of each round to the final assembled plastomes and calculates the percentage of bases in the plastome that are covered by mapped reads over a certain coverage threshold (the defaults were 0 and 10). The minimum number of rounds occurs when the percentage of covered bases reaches 100% or stays unchanged and when the final assembly is stabilized. Besides, if Python library Matplotlib is available, the script “round_statistics.py” could generate the base coverage across the organelle genome plot for each extension round to visualize the extension process.</p>
    </sec>
    <sec id="Sec26">
      <title>De novo assembly of the plastomes of 50 plant datasets using GetOrganelle and NOVOPlasty</title>
      <p id="Par78">To evaluate the working efficiency and assembly success, we selected 50 datasets of vascular plants with raw reads from the GenBank Sequence Reads Archive (SRA) (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1). The 50 vascular plants represented 42 species of angiosperms (from eight major clades, 21 orders and 29 families), four species of gymnosperms, three species of ferns, and one species of lycophytes. Notably, the raw reads of these 50 samples are associated with published plastomes [<xref ref-type="bibr" rid="CR56">56</xref>–<xref ref-type="bibr" rid="CR59">59</xref>], allowing comparison with newly reassembled plastome using GetOrganelle. Since 2018, NOVOPlasty has received more than 400 citations for assembly chloroplast genome in Google Scholar (accessed 31 Dec 2019) and became one of the most widely used tools for plastome assembly. We thus reassembled 50 samples using NOVOPlasty for comparisons.</p>
      <p id="Par79">The data resources are paired-end reads. The read length varied from 100 to 300 bp (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1). In all tests, if the tested data included fewer than 10,000,000 reads for each end, we used all the reads; if the data included more than 10,000,000 reads of each end, we only select the first 10,000,000 reads for each end. We set up four testing groups, i.e., three groups with different word size values (w = 0.6, 0.7, 0.8) (i.e., GetOrganelle-W0.6, GetOrganelle-W0.7, GetOrganelle-W0.8) and an auto-estimated word size group (i.e., GetOrganelle-auto). The extension rounds of all tests were set to 10. All other options including the seed were set to default. Because incomplete assemblies are unsuitable for comparing mapping qualities in the next part, we additionally added extra runs for eight samples, in which GetOrganelle-auto could not achieve complete plastomes, with customized options (GetOrganelle-customized) for mapping quality comparison. A detailed record of commands, as well as the final results and log files recording the memory usage and time cost of all the tests are available at <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> (version 1.1.1).</p>
      <p id="Par80">Plastomes from the same 50 datasets were also reassembled by NOVOPlasty using four <italic>k-</italic>mer values, i.e., 23, 31, 39, and 47. The config file of NOVOPlasty was downloaded from the NOVOPlasty GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/ndierckx/NOVOPlasty/blob/master/config.txt">https://github.com/ndierckx/NOVOPlasty/blob/master/config.txt</ext-link>), with “Type” as “chloro,” “Genome Range” as 15,000–180,000, “Save assembled reads” as “yes,” “Seed Input” as the same seed as running GetOrganelle, and “Read Length” as the mean read length of each sample (seed Additional file <xref rid="MOESM2" ref-type="media">2</xref>), with all other parameters unchanged.</p>
    </sec>
    <sec id="Sec27">
      <title>Read mapping to evaluate plastome assemblies</title>
      <p id="Par81">The script “evaluate_assembly_using_mapping.py” was used to evaluate circular/non-circular assemblies (Fig. <xref rid="Fig1" ref-type="fig">1</xref>, gray solid arrow 8). It uses Bowtie2 to map reads to circular/non-circular assemblies; parses the SAM file; counts the number of mapped paired and unpaired reads; counts matched bases for each site (M), mismatched bases for each site (X), insertions between any two sites (I), and deletions for each site (D); and calculates the average and standard deviation of matched depth (ΣM and var(M)), average and standard deviation of mismatched depth (ΣX and var(X)), average and standard deviation of insertions between any two reference sites (ΣI and var(I)), and average and standard deviation of deletions per reference site (ΣD and var(D)) for each contig and the whole assembly. If ΣM &gt; 0, a customized error rate would be also calculated as (ΣX + ΣI + ΣD)/ΣM with a customized deviation as (var(X) + var(I) + var(D))/ΣM. If “--draw” is chosen, the script “evaluate_assembly_using_mapping.py” generates the plot of M/X/I/D at each site/site-interval across the whole assembly using Python library Matplotlib. For reproducibility when using the same random seed, a circular assembled sequence was relinearized to make sure that biologically the same circular plastome would have identical start and end since identical linear sequence. By default, Bowtie2 does not support mapping reads to a circular sequence, the script “evaluate_assembly_using_mapping.py” gets around this problem by adding an extra fragment of the head of the original sequence to the tail, and counting the mapping statistics (M/X/I/D) of the sites in the extra fragment back to the statistics of the head part of the original sequence.</p>
      <p id="Par82">The script “evaluate_assembly_using_mapping.py” was used to assess all the assembled plastomes. The abnormal characters, such as “*” and “-” in the FASTA-format assemblies of NOVOPlasty, were replaced with “N.” NOVOPlasty would also produce multiple completely different sequences with the same sequence name in the assemblies, which would be also modified with different names before assessment. For NOVOPlasty, the evaluation statistics of each sample were based on the best result among those using different <italic>k-</italic>mer values. Here the best result is determined in turn by being true circularized, the largest number of mapped paired reads, the largest number of mapped unpaired reads, the largest matched depth, the smallest error rate, the smallest deviation of matched depth, and the smallest deviation of error rate. For GetOrganelle, except for 8 samples that were generated using the customized parameters, other evaluation statistics were based on the assemblies from the “GetOrganelle-auto” runs.</p>
      <p id="Par83">For each sample, when comparing the evaluation statistics of different assemblies, the “best” mapped reads (the hat mark in Table S3) is defined as the largest number of mapped paired reads or equal-largest number of mapped paired reads with the largest number of mapped unpaired reads; the “best” mapped depth is defined as the largest matched depth or equal-largest matched depth with the smallest deviation of matched depth; the “best” error rate is defined as the smallest error rate or equal-smallest error rate with the smallest deviation of error rate.</p>
    </sec>
    <sec id="Sec28">
      <title>De novo assembly and evaluation of the mitogenomes using GetOrganelle and NOVOPlasty</title>
      <p id="Par84">In total, 56 animal (the test samples of MitoZ [<xref ref-type="bibr" rid="CR14">14</xref>], see Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S3) and 50 fungal samples (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S4) were used to test the capability of GetOrganelle to assemble mitogenomes. The mitogenomes of plants generally have a relatively slow nucleotide substitution rate [<xref ref-type="bibr" rid="CR9">9</xref>, <xref ref-type="bibr" rid="CR60">60</xref>]; therefore, it is feasible for GetOrganelle to achieve sufficient reads to construct the mitogenome-sufficient assembly graph even with a remotely related seed, provided that there is enough coverage. However, there are two main challenges for short-read sequencing data to confirm the mitogenome architecture. Firstly, lots of repeats in the plant mitogenome cause the awkward tangles in the assembly graph [<xref ref-type="bibr" rid="CR47">47</xref>, <xref ref-type="bibr" rid="CR61">61</xref>, <xref ref-type="bibr" rid="CR62">62</xref>]. Secondly, most of plant mitogenomes are not one single circular structure; rather they often consist of one large circular molecule and small circular plasmid-like molecules (type III), or homogenous linear molecules (type V) [<xref ref-type="bibr" rid="CR63">63</xref>]. There are also frequent horizontal transfers from plastome to mitogenome. In this case, when the coverage of the plastome is much higher than that of mitogenome, the multiplicity of shared contigs would be hard to estimate. When the coverage of the plastome is similar to that of the mitogenome, the parallel contigs in between the shared contigs would be difficult to distinguish. Thus, we did not include plant mitogenome testing due to the general infeasibility of assembling complete circularized plant mitogenome from WGS data.</p>
      <p id="Par85">The data resources are paired-end reads. The read length varied from 92 to 301 bp (see Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S3, Table S4). In animal tests, if the tested data included fewer than 75,000,000 reads for each end, we used all the reads; if the data was more than 75,000,000 reads of each end, we only used the first 75,000,000 reads for each end. The same maximum number of reads for fungi was 15,000,000. All GetOrganelle tests were performed with default settings with the <italic>k-</italic>mer values set to 21,43,65,87,127. All NOVOPlasty test were performed with the default <italic>k</italic>-mer 39 (also been the best <italic>k</italic>-mer in the plastome analysis). Commands, results, and log files of all the tests are available at <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> (version 1.1.1).</p>
      <p id="Par86">The script “slim_fastg.py” was used to evaluate mitogenome assemblies by generating the gene hits table. “slim_fastg.py” could conduct a BLAST search against the label database and generate a concomitant cognominal TAB-formatted file recording many hitting information of contigs. By summarizing the gene hits of each contig, we calculated the number of gene hits for each assembly.</p>
    </sec>
    <sec id="Sec29">
      <title>Computer resources for testing</title>
      <p id="Par87">All assemblies were executed on an Intel Xeon CPU machine containing 144 cores of 2.40 GHz, a total of 3 TB of RAM (64 GB RAM is sufficient for all tests, while the 3 TB RAM makes it possible to run different tests simultaneously), and set up with Linux (Linux version 3.10.0-514.el7.x86 (Red Hat 4.8.5-11)). The testing environment also includes Python v3.6.5, Perl v5.16.3, GetOrganelle v1.6.2, Bowtie2 v2.3.5.1, SPAdes v3.13.0, BLAST 2.2.30+, Numpy v1.13.3, Scipy v0.19.1, Sympy v1.1.1, Matplotlib v3.0.2, Psutil v5.4.7, and NOVOPlasty 2.7.2 [<xref ref-type="bibr" rid="CR23">23</xref>]. GetOrganelle is capable of multi-processing in mapping and assembly process, which was disabled in this test for comparable with NOVOPlasty. Tests can be reproduced by accessing zenodo (doi: 10.5281/zenodo.3943877) or Github (<ext-link ext-link-type="uri" xlink:href="https://github.org/Kinggerm/GetOrganelleComparison">https://github.org/Kinggerm/GetOrganelleComparison</ext-link> version 1.1.1).</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec30">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2020_2154_MOESM1_ESM.docx">
            <caption>
              <p><bold>Additional file 1: Figure S1.</bold> Reads mapping comparisons among the plastomes reassembled using GetOrganelle and NOVOPlasty, and the plastome from GenBank (KY085912) based on the same raw data SRR5602602 (<italic>Laurus nobilis</italic> L.). <bold>Figure S2.</bold> The covering positions and corresponding coverages at the plastome of newly captured reads during each round using GetOrganelle, with different arguments. A whole plastome and an <italic>rbcL</italic> region (right) from a gymnosperm species <italic>Gnetum parvifolium</italic> (Warb.) W.C.Cheng (GenBank nucleotide accession number: NC_011942.1) as the seed to assemble the plastome of an angiosperm species <italic>Haberlea rhodopensis</italic> from an online WGS dataset (GenBank SRA accession number: SRR4428742).</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="13059_2020_2154_MOESM2_ESM.xlsx">
            <caption>
              <p><bold>Additional file 2: Table S1.</bold> The sampling and basic assembly information of 50 plant samples. <bold>Table S2.</bold> Evaluation of the published plastomes, GetOrganelle reassembled plastomes and NOVOPlasty reassembled plastomes of same GenBank SRA accession number using reads mapping. <bold>Table S3.</bold> The sampling and basic assembly information of 56 animal samples using GetOrganelle and NOVOPlasty. <bold>Table S4.</bold> The sampling and basic assembly information of 50 fungi samples using GetOrganelle and NOVOPlasty. <bold>Table S5.</bold> Performance characteristics of GetOrganelle using the plastome of a gymnosperm species Gnetum parvifolium (Warb.) W.C.Cheng (GenBank SRA accession number: NC_011942.1) as the seed to assemble the plastome of an angiosperm species Haberlea rhodopensis from an online WGS dataset (GenBank SRA accession number: SRR4428742).</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="13059_2020_2154_MOESM3_ESM.docx">
            <caption>
              <p><bold>Additional file 3.</bold> Review history.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>Jian-Jun Jin and Wen-Bin Yu contributed equally to this work.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s13059-020-02154-5.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>We are grateful to Chao-Nan Fu, Han-Tao Qin, Yang Pan, Xiao-Jian Qu, Shuo Wang, Rong Zhang, Fei Zhao, and many more users for giving tests or suggestions on the toolkit; to Paula E. Ralph and Christopher P. Randle for their valuable comments and suggestions on the manuscript; and to the support from the Germplasm Bank of Wild Species, Kunming Institute of Botany, Chinese Academy of Sciences, and the HPC Platform of the Public Technology Service Center, Xishuangbanna Tropical Botanical Garden, Chinese Academy of Sciences.</p>
    <sec id="FPar4">
      <title>Review history</title>
      <p id="Par88">The review history is available as Additional file <xref rid="MOESM3" ref-type="media">3</xref>.</p>
    </sec>
    <sec id="FPar5">
      <title>Peer review information</title>
      <p id="Par89">Tim Sands was the primary editor of this article and managed its editorial process and peer review in collaboration with the rest of the editorial team.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>J-JJ, W-BY, T-SY, and D-ZL conceived the research; J-JJ wrote the toolkit code; J-JJ and W-BY analyzed the data; J-JJ, W-BY, and T-SY wrote the draft manuscript. All authors revised and approved the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This study was supported by grants from the Strategic Priority Research Program of the Chinese Academy of Sciences (CAS) (XDB31000000), the National Natural Science Foundation of China [key international (regional) cooperative research project No.31720103903], the CAS Large-scale Scientific Facilities (2017-LSFGBOWS-02), the open research project of “Cross-Cooperative Team” of the Germplasm Bank of Wild Species, Kunming Institute of Botany, Chinese Academy of Sciences, the National Natural Science Foundation of China (31870196), and the CAS 135 Program (2017XTBG-T03).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Project name: GetOrganelle</p>
    <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelle">https://github.com/Kinggerm/GetOrganelle</ext-link></p>
    <p>Archived version: 1.6.2 [<xref ref-type="bibr" rid="CR64">64</xref>]</p>
    <p>Operating system: Linux/MacOS</p>
    <p>Programming language: Python 2.7.11 or higher, or 3.5.1 or higher</p>
    <p>Other requirements: spades &gt;=3.9, bowtie2 &gt;=2.3, blast &gt;=2.3, numpy &gt;=1.16.4, scipy &gt;=1.3.0, sympy &gt;=1.4</p>
    <p>License: GPL-3</p>
    <p>See Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S1, S3, &amp; S4 for publicly archived datasets analyzed in this study.</p>
    <p>The commands and results of all analysis are available in zenodo via doi: 10.5281/zenodo.3943877 [<xref ref-type="bibr" rid="CR65">65</xref>], also in <ext-link ext-link-type="uri" xlink:href="https://github.com/Kinggerm/GetOrganelleComparison">https://github.com/Kinggerm/GetOrganelleComparison</ext-link> (version 1.1.1).</p>
  </notes>
  <notes id="FPar6">
    <title>Ethics approval and consent to participate</title>
    <p id="Par90">Not applicable.</p>
  </notes>
  <notes id="FPar7">
    <title>Consent for publication</title>
    <p id="Par91">Not applicable.</p>
  </notes>
  <notes id="FPar8" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par92">The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bock</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Knoop</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <source>Genomics of chloroplasts and mitochondria</source>
        <year>2012</year>
        <publisher-loc>Berlin</publisher-loc>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tonti-Filippini</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nevill</surname>
            <given-names>PG</given-names>
          </name>
          <name>
            <surname>Dixon</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Small</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>What can we do with 1000 plastid genomes?</article-title>
        <source>Plant J</source>
        <year>2017</year>
        <volume>90</volume>
        <fpage>808</fpage>
        <lpage>818</lpage>
        <?supplied-pmid 28112435?>
        <pub-id pub-id-type="pmid">28112435</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolesnikov</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Gerasimov</surname>
            <given-names>ES</given-names>
          </name>
        </person-group>
        <article-title>Diversity of mitochondrial genome organization</article-title>
        <source>Biochem Mosc</source>
        <year>2012</year>
        <volume>77</volume>
        <fpage>1424</fpage>
        <lpage>1435</lpage>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Soltis</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Cellinese</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Wurdack</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>Tank</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Brockington</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Refulio-Rodriguez</surname>
            <given-names>NF</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>JB</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Carlsward</surname>
            <given-names>BS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Angiosperm phylogeny: 17 genes, 640 taxa</article-title>
        <source>Am J Bot</source>
        <year>2011</year>
        <volume>98</volume>
        <fpage>704</fpage>
        <lpage>730</lpage>
        <?supplied-pmid 21613169?>
        <pub-id pub-id-type="pmid">21613169</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moore</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Soltis</surname>
            <given-names>PS</given-names>
          </name>
          <name>
            <surname>Bell</surname>
            <given-names>CD</given-names>
          </name>
          <name>
            <surname>Burleigh</surname>
            <given-names>JG</given-names>
          </name>
          <name>
            <surname>Soltis</surname>
            <given-names>DE</given-names>
          </name>
        </person-group>
        <article-title>Phylogenetic analysis of 83 plastid genes further resolves the early diversification of eudicots</article-title>
        <source>P Natl Acad Sci USA.</source>
        <year>2010</year>
        <volume>107</volume>
        <fpage>4623</fpage>
        <lpage>4628</lpage>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gitzendanner</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Soltis</surname>
            <given-names>PS</given-names>
          </name>
          <name>
            <surname>Yi</surname>
            <given-names>T-S</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>D-Z</given-names>
          </name>
          <name>
            <surname>Soltis</surname>
            <given-names>DE</given-names>
          </name>
        </person-group>
        <article-title>Plastome phylogenetics: 30 years of inferences into plant evolution</article-title>
        <source>Adv Bot Res</source>
        <year>2018</year>
        <volume>85</volume>
        <fpage>293</fpage>
        <lpage>313</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>S-D</given-names>
          </name>
          <name>
            <surname>Jin</surname>
            <given-names>J-J</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>S-Y</given-names>
          </name>
          <name>
            <surname>Chase</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Soltis</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>H-T</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>J-B</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>D-Z</given-names>
          </name>
          <name>
            <surname>Yi</surname>
            <given-names>T-S</given-names>
          </name>
        </person-group>
        <article-title>Diversification of Rosaceae since the Late Cretaceous based on plastid phylogenomics</article-title>
        <source>New Phytol</source>
        <year>2017</year>
        <volume>214</volume>
        <fpage>1355</fpage>
        <lpage>1367</lpage>
        <?supplied-pmid 28186635?>
        <pub-id pub-id-type="pmid">28186635</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>HT</given-names>
          </name>
          <name>
            <surname>Yi</surname>
            <given-names>TS</given-names>
          </name>
          <name>
            <surname>Gao</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>JB</given-names>
          </name>
          <name>
            <surname>Gitzendanner</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Fritsch</surname>
            <given-names>PW</given-names>
          </name>
          <name>
            <surname>Cai</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Origin of angiosperms and the puzzle of the Jurassic gap</article-title>
        <source>Nat Plants</source>
        <year>2019</year>
        <volume>5</volume>
        <fpage>461</fpage>
        <lpage>470</lpage>
        <?supplied-pmid 31061536?>
        <pub-id pub-id-type="pmid">31061536</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>CBOL Plant Working Group</collab>
        </person-group>
        <article-title>A DNA barcode for land plants</article-title>
        <source>P Natl Acad Sci USA.</source>
        <year>2009</year>
        <volume>106</volume>
        <fpage>12794</fpage>
        <lpage>12797</lpage>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hollingsworth</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Graham</surname>
            <given-names>SW</given-names>
          </name>
          <name>
            <surname>Little</surname>
            <given-names>DP</given-names>
          </name>
        </person-group>
        <article-title>Choosing and using a plant DNA barcode</article-title>
        <source>PLoS One</source>
        <year>2011</year>
        <volume>6</volume>
        <fpage>e19254</fpage>
        <?supplied-pmid 21637336?>
        <pub-id pub-id-type="pmid">21637336</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>China Plant BOL Group</collab>
        </person-group>
        <article-title>Comparative analysis of a large dataset indicates that internal transcribed spacer (ITS) should be incorporated into the core barcode for seed plants</article-title>
        <source>P Natl Acad Sci USA</source>
        <year>2011</year>
        <volume>108</volume>
        <fpage>19641</fpage>
        <lpage>19646</lpage>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hebert</surname>
            <given-names>PDN</given-names>
          </name>
          <name>
            <surname>Cywinska</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ball</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>de Waard</surname>
            <given-names>JR</given-names>
          </name>
        </person-group>
        <article-title>Biological identifications through DNA barcodes</article-title>
        <source>P Roy Soc Lond B Biol</source>
        <year>2003</year>
        <volume>270</volume>
        <fpage>313</fpage>
        <lpage>321</lpage>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Twyford</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Ness</surname>
            <given-names>RW</given-names>
          </name>
        </person-group>
        <article-title>Strategies for complete plastid genome sequencing</article-title>
        <source>Mol Ecol Resour</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>858</fpage>
        <lpage>868</lpage>
        <?supplied-pmid 27790830?>
        <pub-id pub-id-type="pmid">27790830</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Meng</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>MitoZ: a toolkit for animal mitochondrial genome assembly, annotation and visualization</article-title>
        <source>Nucleic Acids Res</source>
        <year>2019</year>
        <volume>47</volume>
        <fpage>e63</fpage>
        <?supplied-pmid 30864657?>
        <pub-id pub-id-type="pmid">30864657</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>Lesin</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Nikolenko</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Pham</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>AD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <fpage>455</fpage>
        <lpage>477</lpage>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Luo</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>He</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pan</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SOAPdenovo2: an empirically improved memory-efficient short-read <italic>de novo</italic> assembler</article-title>
        <source>GigaScience.</source>
        <year>2012</year>
        <volume>1</volume>
        <fpage>1</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="pmid">23587310</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Madan</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>CAP3: a DNA sequence assembly program</article-title>
        <source>Genome Res</source>
        <year>1999</year>
        <volume>9</volume>
        <fpage>868</fpage>
        <lpage>877</lpage>
        <?supplied-pmid 10508846?>
        <pub-id pub-id-type="pmid">10508846</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paulino</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Vandervalk</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Raymond</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Sealer: a scalable gap-closing application for finishing draft genomes</article-title>
        <source>BMC Bioinformatics.</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>230</fpage>
        <?supplied-pmid 26209068?>
        <pub-id pub-id-type="pmid">26209068</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Toward almost closed genomes with GapFiller</article-title>
        <source>Genome Biol</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>R56</fpage>
        <?supplied-pmid 22731987?>
        <pub-id pub-id-type="pmid">22731987</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wicke</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Naumann</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Molecular evolution of plastid genomes in parasitic flowering plants</article-title>
        <source>Adv Bot Res</source>
        <year>2018</year>
        <volume>85</volume>
        <fpage>315</fpage>
        <lpage>347</lpage>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bakker</surname>
            <given-names>FT</given-names>
          </name>
          <name>
            <surname>Lei</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mohammadin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wei</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Kerke</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gravendeel</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Nieuwenhuis</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Staats</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Alquezar-Planas</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Holmer</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Herbarium genomics: plastome sequence assembly from a range of herbarium specimens using an Iterative Organelle Genome Assembly pipeline</article-title>
        <source>Biol J Linnean Soc</source>
        <year>2016</year>
        <volume>117</volume>
        <fpage>33</fpage>
        <lpage>43</lpage>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat Meth</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>357</fpage>
        <lpage>359</lpage>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dierckxsens</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Mardulyn</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Smits</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>NOVOPlasty: <italic>de novo</italic> assembly of organelle genomes from whole genome data</article-title>
        <source>Nucleic Acids Res</source>
        <year>2017</year>
        <volume>45</volume>
        <fpage>e18</fpage>
        <?supplied-pmid 28204566?>
        <pub-id pub-id-type="pmid">28204566</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Freudenthal JA, Pfaff S, Terhoeven N, Korte A, Ankenbrand MJ, Foerster F. The landscape of chloroplast genome assembly tools. bioRxiv. 2019; 10.1101/665869v1.</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Qu</surname>
            <given-names>X-J</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>C-S</given-names>
          </name>
          <name>
            <surname>Chaw</surname>
            <given-names>S-M</given-names>
          </name>
          <name>
            <surname>Yi</surname>
            <given-names>T-S</given-names>
          </name>
        </person-group>
        <article-title>Insights into the existence of isomeric plastomes in Cupressoideae (Cupressaceae)</article-title>
        <source>Genome Biol Evol.</source>
        <year>2017</year>
        <volume>9</volume>
        <fpage>1110</fpage>
        <lpage>1119</lpage>
        <?supplied-pmid 28431152?>
        <pub-id pub-id-type="pmid">28431152</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tsumura</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Suyama</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Yoshimura</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Chloroplast DNA inversion polymorphism in populations of <italic>Abies</italic> and <italic>Tsuga</italic></article-title>
        <source>Mol Biol Evol</source>
        <year>2000</year>
        <volume>17</volume>
        <fpage>1302</fpage>
        <lpage>1312</lpage>
        <?supplied-pmid 10958847?>
        <pub-id pub-id-type="pmid">10958847</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Grewe</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Cobo-Clark</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Fan</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Duan</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Adams</surname>
            <given-names>RP</given-names>
          </name>
          <name>
            <surname>Schwarzbach</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Mower</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Predominant and substoichiometric isomers of the plastid genome coexist within <italic>Juniperus</italic> plants and have shifted multiple times during cupressophyte evolution</article-title>
        <source>Genome Biol Evol</source>
        <year>2014</year>
        <volume>6</volume>
        <fpage>580</fpage>
        <lpage>590</lpage>
        <?supplied-pmid 24586030?>
        <pub-id pub-id-type="pmid">24586030</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Camacho</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Coulouris</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Avagyan</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Papadopoulos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bealer</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>TL</given-names>
          </name>
        </person-group>
        <article-title>BLAST+: architecture and applications</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>421</fpage>
        <?supplied-pmid 20003500?>
        <pub-id pub-id-type="pmid">20003500</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hahn</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bachmann</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Chevreux</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Reconstructing mitochondrial genomes directly from genomic next-generation sequencing reads—a baiting and iterative mapping approach</article-title>
        <source>Nucleic Acids Res</source>
        <year>2013</year>
        <volume>41</volume>
        <fpage>e129</fpage>
        <?supplied-pmid 23661685?>
        <pub-id pub-id-type="pmid">23661685</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Schultz</surname>
            <given-names>MB</given-names>
          </name>
          <name>
            <surname>Zobel</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Bandage: interactive visualization of <italic>de novo</italic> genome assemblies</article-title>
        <source>Bioinformatics.</source>
        <year>2015</year>
        <volume>31</volume>
        <fpage>3350</fpage>
        <lpage>3352</lpage>
        <?supplied-pmid 26099265?>
        <pub-id pub-id-type="pmid">26099265</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Palmer</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <article-title>Chloroplast DNA exists in two orientations</article-title>
        <source>Nature.</source>
        <year>1983</year>
        <volume>301</volume>
        <fpage>92</fpage>
        <lpage>93</lpage>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mower</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>P-F</given-names>
          </name>
          <name>
            <surname>Grewe</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Michael</surname>
            <given-names>TP</given-names>
          </name>
          <name>
            <surname>VanBuren</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Qiu</surname>
            <given-names>Y-L</given-names>
          </name>
        </person-group>
        <article-title>Lycophyte plastid genomics: extreme variation in GC, gene and intron content and multiple inversions between a direct and inverted orientation of the rRNA repeat</article-title>
        <source>New Phytol</source>
        <year>2019</year>
        <volume>222</volume>
        <fpage>1061</fpage>
        <lpage>1075</lpage>
        <?supplied-pmid 30556907?>
        <pub-id pub-id-type="pmid">30556907</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sanitá Lima</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Woods</surname>
            <given-names>LC</given-names>
          </name>
          <name>
            <surname>Cartwright</surname>
            <given-names>MW</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>DR</given-names>
          </name>
        </person-group>
        <article-title>The (in) complete organelle genome: exploring the use and nonuse of available technologies for characterizing mitochondrial and plastid chromosomes</article-title>
        <source>Mol Ecol Resour</source>
        <year>2016</year>
        <volume>16</volume>
        <fpage>1279</fpage>
        <lpage>1286</lpage>
        <?supplied-pmid 27482846?>
        <pub-id pub-id-type="pmid">27482846</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Walker</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Jansen</surname>
            <given-names>RK</given-names>
          </name>
          <name>
            <surname>Zanis</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Emery</surname>
            <given-names>NC</given-names>
          </name>
        </person-group>
        <article-title>Sources of inversion variation in the small single copy (SSC) region of chloroplast genomes</article-title>
        <source>Am J Bot</source>
        <year>2015</year>
        <volume>102</volume>
        <fpage>1751</fpage>
        <lpage>1752</lpage>
        <?supplied-pmid 26546126?>
        <pub-id pub-id-type="pmid">26546126</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Graham</surname>
            <given-names>SW</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>VKY</given-names>
          </name>
          <name>
            <surname>Merckx</surname>
            <given-names>VSFT</given-names>
          </name>
        </person-group>
        <article-title>Plastomes on the edge: the evolutionary breakdown of mycoheterotroph plastid genomes</article-title>
        <source>New Phytol</source>
        <year>2017</year>
        <volume>214</volume>
        <fpage>48</fpage>
        <lpage>55</lpage>
        <?supplied-pmid 28067952?>
        <pub-id pub-id-type="pmid">28067952</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Su</surname>
            <given-names>H-J</given-names>
          </name>
          <name>
            <surname>Barkman</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Hao</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Naumann</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Skippington</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Wafula</surname>
            <given-names>EK</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>J-M</given-names>
          </name>
          <name>
            <surname>Palmer</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>de Pamphilis</surname>
            <given-names>CW</given-names>
          </name>
        </person-group>
        <article-title>Novel genetic code and record-setting AT-richness in the highly reduced plastid genome of the holoparasitic plant <italic>Balanophora</italic></article-title>
        <source>P Natl Acad Sci USA</source>
        <year>2019</year>
        <volume>116</volume>
        <fpage>934</fpage>
        <lpage>943</lpage>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goremykin</surname>
            <given-names>VV</given-names>
          </name>
          <name>
            <surname>Salamini</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Velasco</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Viola</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Mitochondrial DNA of <italic>Vitis vinifera</italic> and the issue of rampant horizontal gene transfer</article-title>
        <source>Mol Biol Evol</source>
        <year>2009</year>
        <volume>1</volume>
        <fpage>99</fpage>
        <lpage>110</lpage>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Straub</surname>
            <given-names>SCK</given-names>
          </name>
          <name>
            <surname>Cronn</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Edwards</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Fishbein</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liston</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Horizontal transfer of DNA from the mitochondrial to the plastid genome and its subsequent evolution in milkweeds (Apocynaceae)</article-title>
        <source>Genome Biol Evol.</source>
        <year>2013</year>
        <volume>10</volume>
        <fpage>1872</fpage>
        <lpage>1885</lpage>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">Ma PF, Zhang YX, Guo ZH, Li DZ. Evidence for horizontal transfer of mitochondrial DNA to the plastid genome in a bamboo genus. Sci Rep. 2015;11608.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>James</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Piganeau</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Eyre-Walker</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>The rate of adaptive evolution in animal mitochondria</article-title>
        <source>Mol Ecol</source>
        <year>2016</year>
        <volume>25</volume>
        <fpage>67</fpage>
        <lpage>78</lpage>
        <?supplied-pmid 26578312?>
        <pub-id pub-id-type="pmid">26578312</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aguileta</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>de Vienne</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Ross</surname>
            <given-names>ON</given-names>
          </name>
          <name>
            <surname>Hood</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Giraud</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Petit</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Gabaldón</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>High variability of mitochondrial gene order among fungi</article-title>
        <source>Genome Biol Evol.</source>
        <year>2014</year>
        <volume>6</volume>
        <fpage>451</fpage>
        <lpage>465</lpage>
        <?supplied-pmid 24504088?>
        <pub-id pub-id-type="pmid">24504088</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Logacheva</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Schelkunov</surname>
            <given-names>MI</given-names>
          </name>
          <name>
            <surname>Shtratnikova</surname>
            <given-names>VY</given-names>
          </name>
          <name>
            <surname>Matveeva</surname>
            <given-names>MV</given-names>
          </name>
          <name>
            <surname>Penin</surname>
            <given-names>AA</given-names>
          </name>
        </person-group>
        <article-title>Comparative analysis of plastid genomes of non-photosynthetic Ericaceae and their photosynthetic relatives</article-title>
        <source>Sci Rep</source>
        <year>2016</year>
        <volume>6</volume>
        <fpage>30042</fpage>
        <?supplied-pmid 27452401?>
        <pub-id pub-id-type="pmid">27452401</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fajardo</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Senalik</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ames</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Steffan</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Harbut</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Polashock</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Vorsa</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Gillespie</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kron</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Zalapa</surname>
            <given-names>JE</given-names>
          </name>
        </person-group>
        <article-title>Complete plastid genome sequence of Vaccinium macrocarpon: structure, gene content, and rearrangements revealed by next generation sequencing</article-title>
        <source>Tree Genet Genomes</source>
        <year>2013</year>
        <volume>9</volume>
        <fpage>489</fpage>
        <lpage>498</lpage>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weng</surname>
            <given-names>M-L</given-names>
          </name>
          <name>
            <surname>Blazier</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Govindu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Jansen</surname>
            <given-names>RK</given-names>
          </name>
        </person-group>
        <article-title>Reconstruction of the ancestral plastid genome in Geraniaceae reveals a correlation between genome rearrangements, repeats, and nucleotide substitution rates</article-title>
        <source>Mol Biol Evol</source>
        <year>2014</year>
        <volume>31</volume>
        <fpage>645</fpage>
        <lpage>659</lpage>
        <?supplied-pmid 24336877?>
        <pub-id pub-id-type="pmid">24336877</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Sullivan AR, Schiffthaler B, Thompson SL, Street NR, Wang X-R. Interspecific plastome recombination reflects ancient reticulate evolution in <italic>Picea</italic> (Pinaceae). Mol Biol Evol. 2017.</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Grewe</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Fan</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Young</surname>
            <given-names>GJ</given-names>
          </name>
          <name>
            <surname>Knoop</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Palmer</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Mower</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title><italic>Ginkgo</italic> and <italic>Welwitschia</italic> mitogenomes reveal extreme contrasts in gymnosperm mitochondrial evolution</article-title>
        <source>Mol Biol Evol</source>
        <year>2016</year>
        <volume>33</volume>
        <fpage>1448</fpage>
        <lpage>1460</lpage>
        <?supplied-pmid 26831941?>
        <pub-id pub-id-type="pmid">26831941</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Jackman SD, Coombe L, Warren RL, Kirk H, Trinh E, McLeod T, Pleasance S, Pandoh P, Zhao Y, Coope RJ, et al. Largest complete mitochondrial genome of a gymnosperm, Sitka spruce (<italic>Picea sitchensis</italic>), indicates complex physical structure. bioRxiv. 2019;doi:10.1101/601104.</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gualberto</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Mileshina</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Wallet</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Niazi</surname>
            <given-names>AK</given-names>
          </name>
          <name>
            <surname>Weber-Lotfi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Dietrich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>The plant mitochondrial genome: dynamics and maintenance</article-title>
        <source>Biochimie.</source>
        <year>2014</year>
        <volume>100</volume>
        <fpage>107</fpage>
        <lpage>120</lpage>
        <?supplied-pmid 24075874?>
        <pub-id pub-id-type="pmid">24075874</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boore</surname>
            <given-names>JL</given-names>
          </name>
        </person-group>
        <article-title>Animal mitochondrial genomes</article-title>
        <source>Nucleic Acids Res</source>
        <year>1999</year>
        <volume>27</volume>
        <fpage>1767</fpage>
        <lpage>1780</lpage>
        <?supplied-pmid 148383?>
        <pub-id pub-id-type="pmid">10101183</pub-id>
      </element-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kuśmirek</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Nowak</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title><italic>De novo</italic> assembly of bacterial genomes with repetitive DNA regions by dnaasm application</article-title>
        <source>BMC Bioinformatics.</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>273</fpage>
        <?supplied-pmid 30021513?>
        <pub-id pub-id-type="pmid">30021513</pub-id>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Short read fragment assembly of bacterial genomes</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>324</fpage>
        <lpage>330</lpage>
        <?supplied-pmid 18083777?>
        <pub-id pub-id-type="pmid">18083777</pub-id>
      </element-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Gorrie</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Unicycler: resolving bacterial genome assemblies from short and long sequencing reads</article-title>
        <source>PLoS Comput Biol</source>
        <year>2017</year>
        <volume>13</volume>
        <fpage>e1005595</fpage>
        <?supplied-pmid 28594827?>
        <pub-id pub-id-type="pmid">28594827</pub-id>
      </element-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wang</surname>
            <given-names>Y-H</given-names>
          </name>
          <name>
            <surname>Wicke</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Jin</surname>
            <given-names>J-J</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>S-Y</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>S-D</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>D-Z</given-names>
          </name>
          <name>
            <surname>Yi</surname>
            <given-names>T-S</given-names>
          </name>
        </person-group>
        <article-title>Plastid genome evolution in the early-diverging legume subfamily Cercidoideae (Fabaceae)</article-title>
        <source>Front Plant Sci</source>
        <year>2018</year>
        <volume>9</volume>
        <fpage>138</fpage>
        <?supplied-pmid 29479365?>
        <pub-id pub-id-type="pmid">29479365</pub-id>
      </element-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
        </person-group>
        <article-title>Using the Velvet <italic>de novo</italic> assembler for short-read sequencing technologies</article-title>
        <source>Curr Protoc Bioinformatics</source>
        <year>2010</year>
        <volume>31</volume>
        <fpage>11.15.11</fpage>
        <lpage>11.15.12</lpage>
      </element-citation>
    </ref>
    <ref id="CR55">
      <label>55.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lilly</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Havey</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Jackson</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Cytogenomic analyses reveal the structural plasticity of the chloroplast genome in higher plants</article-title>
        <source>Plant Cell</source>
        <year>2001</year>
        <volume>13</volume>
        <fpage>245</fpage>
        <lpage>254</lpage>
        <?supplied-pmid 11226183?>
        <pub-id pub-id-type="pmid">11226183</pub-id>
      </element-citation>
    </ref>
    <ref id="CR56">
      <label>56.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Ramachandran</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Wen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Duke</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Metzman</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>McLaughlin</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Ottesen</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Timme</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Handy</surname>
            <given-names>SM</given-names>
          </name>
        </person-group>
        <article-title>Development of a reference standard library of chloroplast genome sequences, GenomeTrakrCP</article-title>
        <source>Planta Med</source>
        <year>2017</year>
        <volume>83</volume>
        <fpage>1420</fpage>
        <lpage>1430</lpage>
        <?supplied-pmid 28651291?>
        <pub-id pub-id-type="pmid">28651291</pub-id>
      </element-citation>
    </ref>
    <ref id="CR57">
      <label>57.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Roquet</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Coissac</surname>
            <given-names>É</given-names>
          </name>
          <name>
            <surname>Cruaud</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Boleda</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Boyer</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Alberti</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gielly</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Taberlet</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Thuiller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Van Es</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lavergne</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Understanding the evolution of holoparasitic plants: the complete plastid genome of the holoparasite <italic>Cytinus hypocistis</italic> (Cytinaceae)</article-title>
        <source>Ann Bot</source>
        <year>2016</year>
        <volume>118</volume>
        <fpage>885</fpage>
        <lpage>896</lpage>
        <?supplied-pmid 27443299?>
        <pub-id pub-id-type="pmid">27443299</pub-id>
      </element-citation>
    </ref>
    <ref id="CR58">
      <label>58.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Bianba</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Zheng</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Characterization of the complete chloroplast genome of <italic>Juniperus cedrus</italic> (Cupressaceae)</article-title>
        <source>Mitochondrial DNA Part A</source>
        <year>2016</year>
        <volume>27</volume>
        <fpage>4355</fpage>
        <lpage>4356</lpage>
      </element-citation>
    </ref>
    <ref id="CR59">
      <label>59.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ivanova</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Sablok</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Daskalova</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Zahmanova</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Apostolova</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Yahubyan</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Baev</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Chloroplast genome analysis of resurrection tertiary relict <italic>Haberlea rhodopensis</italic> highlights genes important for desiccation stress response</article-title>
        <source>Front Plant Sci</source>
        <year>2017</year>
        <volume>8</volume>
        <fpage>204</fpage>
        <?supplied-pmid 28265281?>
        <pub-id pub-id-type="pmid">28265281</pub-id>
      </element-citation>
    </ref>
    <ref id="CR60">
      <label>60.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wolfe</surname>
            <given-names>KH</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>WH</given-names>
          </name>
          <name>
            <surname>Sharp</surname>
            <given-names>PM</given-names>
          </name>
        </person-group>
        <article-title>Rates of nucleotide substitution vary greatly among plant mitochondrial, chloroplast, and nuclear DNAs</article-title>
        <source>P Natl Acad Sci USA.</source>
        <year>1987</year>
        <volume>84</volume>
        <fpage>9054</fpage>
        <lpage>9058</lpage>
      </element-citation>
    </ref>
    <ref id="CR61">
      <label>61.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gualberto</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Newton</surname>
            <given-names>KJ</given-names>
          </name>
        </person-group>
        <article-title>Plant mitochondrial genomes: dynamics and mechanisms of mutation</article-title>
        <source>Annu Rev Plant Biol</source>
        <year>2017</year>
        <volume>68</volume>
        <fpage>225</fpage>
        <lpage>252</lpage>
        <?supplied-pmid 28226235?>
        <pub-id pub-id-type="pmid">28226235</pub-id>
      </element-citation>
    </ref>
    <ref id="CR62">
      <label>62.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Maréchal</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Brisson</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Recombination and the maintenance of plant organelle genome stability</article-title>
        <source>New Phytol</source>
        <year>2010</year>
        <volume>186</volume>
        <fpage>299</fpage>
        <lpage>317</lpage>
        <?supplied-pmid 20180912?>
        <pub-id pub-id-type="pmid">20180912</pub-id>
      </element-citation>
    </ref>
    <ref id="CR63">
      <label>63.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rice</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Alverson</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Richardson</surname>
            <given-names>AO</given-names>
          </name>
          <name>
            <surname>Young</surname>
            <given-names>GJ</given-names>
          </name>
          <name>
            <surname>Sanchez-Puerta</surname>
            <given-names>MV</given-names>
          </name>
          <name>
            <surname>Munzinger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Barry</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Boore</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>de Pamphilis</surname>
            <given-names>CW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Horizontal transfer of entire genomes via mitochondrial fusion in the angiosperm <italic>Amborella</italic></article-title>
        <source>Science.</source>
        <year>2013</year>
        <volume>342</volume>
        <fpage>1468</fpage>
        <lpage>1473</lpage>
        <?supplied-pmid 24357311?>
        <pub-id pub-id-type="pmid">24357311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR64">
      <label>64.</label>
      <mixed-citation publication-type="other">Jin J-J. GetOrganelle (version 1.6.2). Software Zenodo 10.5281/zenodo.3859358 (2020).</mixed-citation>
    </ref>
    <ref id="CR65">
      <label>65.</label>
      <mixed-citation publication-type="other">Jin J-J, Yu W-B. GetOrganelleComparison (version v1.1.1). Datasets Zenodo 10.5281/zenodo.3943877 (2020).</mixed-citation>
    </ref>
  </ref-list>
</back>
