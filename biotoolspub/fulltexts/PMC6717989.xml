<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6717989</article-id>
    <article-id pub-id-type="publisher-id">1758</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-019-1758-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Cytoscape Automation: empowering workflow-based network analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Otasek</surname>
          <given-names>David</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Morris</surname>
          <given-names>John H.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bouças</surname>
          <given-names>Jorge</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pico</surname>
          <given-names>Alexander R.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-7065-7786</contrib-id>
        <name>
          <surname>Demchak</surname>
          <given-names>Barry</given-names>
        </name>
        <address>
          <email>bdemchak@ucsd.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2107 4242</institution-id><institution-id institution-id-type="GRID">grid.266100.3</institution-id><institution>Department of Medicine, </institution><institution>University of California, </institution></institution-wrap>La Jolla, San Diego, CA 92093 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2297 6811</institution-id><institution-id institution-id-type="GRID">grid.266102.1</institution-id><institution>University of California, San Francisco, </institution></institution-wrap>San Francisco, CA 94143 USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0373 6590</institution-id><institution-id institution-id-type="GRID">grid.419502.b</institution-id><institution>Bioinformatics Core Facility, </institution><institution>Max Planck Institute for Biology of Ageing, </institution></institution-wrap>Cologne, Germany </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0572 7110</institution-id><institution-id institution-id-type="GRID">grid.249878.8</institution-id><institution>Gladstone Institutes, </institution></institution-wrap>San Francisco, CA 94158 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>185</elocation-id>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>2</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>9</day>
        <month>7</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s). 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Cytoscape is one of the most successful network biology analysis and visualization tools, but because of its interactive nature, its role in creating reproducible, scalable, and novel workflows has been limited. We describe Cytoscape Automation (CA), which marries Cytoscape to highly productive workflow systems, for example, Python/R in Jupyter/RStudio. We expose over 270 Cytoscape core functions and 34 Cytoscape apps as REST-callable functions with standardized JSON interfaces backed by Swagger documentation. Independent projects to create and publish Python/R native CA interface libraries have reached an advanced stage, and a number of automation workflows are already published.</p>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (10.1186/s13059-019-1758-4) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Workflow</kwd>
      <kwd>Reproducibility</kwd>
      <kwd>Cytoscape</kwd>
      <kwd>Interoperability</kwd>
      <kwd>REST</kwd>
      <kwd>Microservice</kwd>
      <kwd>Service-oriented architecture</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000057</institution-id>
            <institution>National Institute of General Medical Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>P41 GM103504</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000051</institution-id>
            <institution>National Human Genome Research Institute</institution>
          </institution-wrap>
        </funding-source>
        <award-id>R01 HG009979</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">As a platform for network biologic analysis, Cytoscape [<xref ref-type="bibr" rid="CR1">1</xref>] has proven to be enormously popular, with over 17,600 downloads worldwide each month, 5000 startups each day, and over 1000 direct citations per year. Investigators can interactively explore complex *omics datasets via analysis and visualization functions provided by Cytoscape and a large and vibrant community of app contributors. However, interactive use has proven inadequate for precisely reproducing or sharing complex analyses or for scaling to high volume or production analysis. Moreover, while Cytoscape apps provide highly performant and relevant network biology functionality, the specialized programming talent and relatively long development times they require can make them uneconomical for delivering complex and evolving workflows. Finally, as an interactive tool, Cytoscape is not positioned to add value to emerging workflows that integrate one or more external data acquisition and analysis tools (e.g., Galaxy [<xref ref-type="bibr" rid="CR2">2</xref>], Taverna [<xref ref-type="bibr" rid="CR3">3</xref>], and libraries provided in repositories such as PyPI [<xref ref-type="bibr" rid="CR4">4</xref>] and Bioconductor [<xref ref-type="bibr" rid="CR5">5</xref>]).</p>
    <p id="Par3">As shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, Cytoscape Automation [<xref ref-type="bibr" rid="CR6">6</xref>] is a new Cytoscape feature that addresses these issues by extending the existing CyREST [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR8">8</xref>] app, which empowers bioinformaticians to create reproducible workflows expressed in robust and well-known programming languages (e.g., Python, R, Javascript) using familiar programming environments (e.g., Jupyter and RStudio). Under Cytoscape Automation, workflows can use CyREST to issue commands to Cytoscape and automation-enabled apps via the REST protocol, which encodes data as JSON documents. Both REST and JSON are already in wide use in client/server computing, are accessible from most programming languages, are immediately understood by most bioinformaticians, and are easy to learn given the massive body of relevant training materials, examples, and extant community.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the Cytoscape Automation ecosystem. Reproducible workflows (as Python/R/Javascript or Cytoscape Command scripts) and datasets control Cytoscape through Cytoscape Automation. Results can be created either directly from Cytoscape or from Python/R/Javascript themselves</p></caption><graphic xlink:href="13059_2019_1758_Fig1_HTML" id="MO1"/></fig></p>
    <p id="Par4">This paper focuses on using Cytoscape Automation from Python and R because they are widely used and understood by bioinformaticists and because they already have well-documented repositories of bioinformatic functions that enable researchers to create reliable, flexible, and performant bioinformatic workflows quickly and easily. Our py2cytoscape [<xref ref-type="bibr" rid="CR9">9</xref>] (for Python) and RCy3 [<xref ref-type="bibr" rid="CR10">10</xref>] (for R) libraries provide easy access to Cytoscape and app functionality and are available in these repositories, too. Library download statistics reported by GitHub, PyPI, and Bioconductor indicate that researcher interest in Cytoscape Automation is strong—500 downloads/month for py2Cytoscape and 800 downloads/month for RCy3.</p>
    <p id="Par5">Critically, Cytoscape Automation creates new standards that encourage Cytoscape core and app authors to expose Cytoscape functvionality via REST-based API calls backed by state-of-the-art documentation based on the widely used Swagger [<xref ref-type="bibr" rid="CR11">11</xref>] documentation framework. Swagger is purpose-built to improve workflow author productivity in a REST context by presenting complete CyREST endpoint documentation, organizing endpoints by category, and assisting in workflow prototyping via an easy click-to-run web-based interface.</p>
    <p id="Par6">As a result, novel network biologic workflows can now be quickly and cheaply delivered as integrations of Cytoscape functions, complex custom analyses, and best-of-breed external tools and language-specific libraries.</p>
    <p id="Par7">In this paper, we explain the key features of Cytoscape Automation, including how they work, how Cytoscape app developers can make automation-enabled apps, and how workflow authors can leverage Cytoscape Automation to create and evolve their workflows. As a reference material, we provide the substantial Cytoscape Automatic Wiki [<xref ref-type="bibr" rid="CR12">12</xref>], which contains articles on context, implementation details, FAQs, best practices, and sample scripts and apps to help workflow authors become quickly productive and help Cytoscape app authors produce new automation-capable apps or upgrade existing ones.</p>
    <p id="Par8">As an illustration aid, we use the running example of Cytoscape Diffusion [<xref ref-type="bibr" rid="CR13">13</xref>], which uses network propagation to find new nodes (e.g., genes) that are most relevant to a set of well-understood nodes. Diffusion is particularly apt because it shows how to define real-world CyREST endpoints that are well documented, consume network and customization parameters, and produce actionable results.</p>
    <p id="Par9">In this paper, the “<xref rid="Sec2" ref-type="sec">Design</xref>” section describes the components of Cytoscape Automation and explains their use. The “<xref rid="Sec9" ref-type="sec">Implementation</xref>” section outlines the details of CyREST construction, and the “<xref rid="Sec15" ref-type="sec">Results</xref>” section presents concrete examples of Cytoscape Automation benefits. The “<xref rid="Sec18" ref-type="sec">Discussion</xref>” section compares Cytoscape Automation to other biological workflow environments. Finally, the “<xref rid="Sec22" ref-type="sec">Future development</xref>” section calls for additional contributions that can expand Cytoscape Automation to improve workflow economics even further.</p>
    <p id="Par10">Note that this paper describes CyREST v3.8, which is included with Cytoscape v3.7.0 as a core app, meaning that it is automatically synchronized with Cytoscape by the Cytoscape developer team. Cytoscape Automation requires CyREST v3.8, and we highly recommend that users running Cytoscape versions earlier than v3.7.0 upgrade to v3.7.0. As CyREST evolves, it will be disseminated in new Cytoscape releases and via the Cytoscape App store. CyREST follows semantic versioning guidelines [<xref ref-type="bibr" rid="CR14">14</xref>], thereby guaranteeing that updates will not break the workflows or automation-enabled apps as it evolves. We highly recommend that independent app developers conform their apps’ evolution to semantic versioning principles, too.</p>
  </sec>
  <sec id="Sec2">
    <title>Design</title>
    <p id="Par11">The leap from the original CyREST implementation to address the broader scope of the Cytoscape Automation initiative required new features and upgraded approaches in a number of technical areas:
<list list-type="simple"><list-item><label>❶</label><p id="Par12">New CyREST access to Cytoscape apps</p></list-item><list-item><label>❷</label><p id="Par13">New CyREST access to Cytoscape Command script operations</p></list-item><list-item><label>❸</label><p id="Par14">Improved documentation infrastructure and content standards</p></list-item><list-item><label>❹</label><p id="Par15">New interactive CyREST call prototyping</p></list-item><list-item><label>❺</label><p id="Par16">Consistent mechanisms for calling CyREST and receiving return values</p></list-item><list-item><label>❻</label><p id="Par17">Improved coverage of core Cytoscape functionality</p></list-item></list></p>
    <p id="Par18">Figure <xref rid="Fig2" ref-type="fig">2</xref> shows the relationship between the Cytoscape Desktop and Cytoscape Automation workflows. The Cytoscape Desktop includes both the Cytoscape core (including CyCommands and CyREST) and apps sourced from the Cytoscape App store. Automation workflows execute outside of Cytoscape but use CyREST to leverage Cytoscape features. Figure <xref rid="Fig2" ref-type="fig">2</xref> is annotated to show the components important in each facet of the Cytoscape Automation design, which are described in this section.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Relationship between the Cytoscape Desktop (including CyREST, Cytoscape apps and Cytoscape core) and Cytoscape Automation workflows. Dotted lines indicate command/data flows that pre-date Cytoscape Automation. Solid lines indicate flows created for Cytoscape Automation. New components are in green</p></caption><graphic xlink:href="13059_2019_1758_Fig2_HTML" id="MO2"/></fig></p>
    <p id="Par19">Note that for a workflow to access Cytoscape functionality, Cytoscape must be running and accessible via HTTP calls from the workflow execution environment.</p>
    <p id="Par20">Note that calling a CyREST endpoint requires the use of REST interface functions found in most modern languages. While all CyREST endpoints are accessible in this manner, we have created harmonization libraries for R and Python (described in the “<xref rid="Sec9" ref-type="sec">Implementation</xref>” section) to enable quick and easy access to common Cytoscape Automation features. However, direct CyREST calls are required for all other endpoints, including those supplied by Cytoscape apps—see the “Python and R Harmonization Libraries” section for details.</p>
    <sec id="Sec3">
      <title>New CyREST access to Cytoscape apps ❶</title>
      <p id="Par21">A large part of Cytoscape’s utility to researchers is provided by apps—their inclusion in Cytoscape Automation, facilitated by CyREST, greatly expands the functionality that can be leveraged via scripting workflows. Apps that support automation (called Automation Apps) can expose functionality either via a Function or Command interface [<xref ref-type="bibr" rid="CR15">15</xref>].</p>
      <p id="Par22">A Function interface enables a script to pass complex parameters and receive return results of arbitrary length and complexity. While Functions can be called from scripting languages such as Python, R, and Javascript, they cannot be called from the Cytoscape Command Tool [<xref ref-type="bibr" rid="CR16">16</xref>].</p>
      <p id="Par23">To create a Function in an existing app, the app author must add a new function that defines a CyREST endpoint using JAX-RS [<xref ref-type="bibr" rid="CR17">17</xref>] annotations and which executes app-related code—most likely code that implements existing app functionality. The JAX-RS annotations define the endpoint name, the HTTP protocol [<xref ref-type="bibr" rid="CR18">18</xref>], and the parameters to be passed. For example:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figa_HTML" id="MO3"/>
      <p id="Par24">This defines the diffuse_with_options endpoint that accepts three parameters (networkSUID, networkViewSUID, and diffusionParameters) and returns a CIResponse structure. The @PUT annotation defines the HTTP method (as PUT), and the @Path annotation defines the endpoint path (/diffusion/v1/{networkSUID}/views/{networkViewSUID}/diffuse_with_options), which the client appends to CyREST’s base URL (http://localhost:1234) when calling diffuse_with_options. The @Produces and @Consumes annotations define the PUT payload and response as JSON [<xref ref-type="bibr" rid="CR19">19</xref>].</p>
      <p id="Par25">An actual CyREST URL that calls diffuse_with_options might appear as http://localhost:1234/diffusion/v1/53/views/744/diffuse_with_options and would include JSON corresponding to the DiffusionParameters class as the HTTP PUT payload. For diffuse_with_options, a sample DiffusionParameters payload is:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figb_HTML" id="MO4"/>
      <p id="Par26">As shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>, at runtime, CyREST’s JAX-RS connector parses the URL to extract the networkSUID and networkViewSUID values and parses the PUT payload to create a DiffusionParameters instance. JAX-RS calls the diffuse_with_options function with these values, which performs a diffusion operation and returns a CIResponse instance. Finally, JAX-RS encodes the CIResponse into JSON and returns it to the caller.</p>
      <p id="Par27">The process for exposing app features as Commands is different, as explained below.</p>
    </sec>
    <sec id="Sec4">
      <title>New CyREST access to Cytoscape Command script operations ❷</title>
      <p id="Par28">A Command interface enables a script to execute Cytoscape Commands analogous to commands executed within a Unix or Windows terminal, and they offer similar argument structure and execution. Command executions can pass simple parameters and can return results of predefined length.</p>
      <p id="Par29">Users can execute Commands as single lines (via Cytoscape’s Command Tool [<xref ref-type="bibr" rid="CR16">16</xref>]) or as scripts (either via Cytoscape <bold>Tools</bold> → <bold>Execute Command File</bold> menu or on the Cytoscape command line via the -S parameter). Scripting languages such as Python, R, and Javascript can execute them via CyREST using an HTTP POST operation and passing Command parameters as a JSON object. The endpoint path begins with /v1/commands and is followed by the Command namespace and the command name. A fully formed URL and POST payload for the diffuse_advanced Command is:</p>
      <p id="Par30">http://localhost:1234/v1/commands/diffusion/diffuse_advanced</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figc_HTML" id="MO5"/>
      <p id="Par31">As shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>, the Commands system leverages the Cytoscape Tunable/Task system [<xref ref-type="bibr" rid="CR20">20</xref>] (i.e., CyCommands Manager and Cytoscape Core) originally defined to collect execution parameters via a dialog box and then execute a Java function. The function consumes the parameters, performs the Command operation, and possibly returns a result as a fetchable task state.</p>
      <p id="Par32">To create a Command in an existing app, the app author must first register the Command’s namespace and name in a TaskFactory via the app’s CyActivator. The name must be the name of a public function within the app, and the app author must add @Tunable annotations to the function to define Command parameters.</p>
      <p id="Par33">If an app already exposes a function as a Tunable/Task, enabling the function to be called as a Command can be as simple as registering the TaskFactory with a suitable namespace and name. If an app does not use Tunable/Tasks, it may be easier to expose app features as Functions (as described above).</p>
      <p id="Par34">Note that in CyREST previous to Cytoscape v3.6, Commands were available via an HTTP GET operation, where parameters passed on the URL (e.g., ?time = 0.1) and the result form and content was not JSON, and they varied with the Command. The GET form has been deprecated in favor of POST to allow more parameters and to enable JSON-structured parameters and return results.</p>
    </sec>
    <sec id="Sec5">
      <title>Improved documentation infrastructure and content standards ❸</title>
      <p id="Par35">In the process of implementing Python and R support libraries and providing support for researchers producing scripting workflows, we found that the coverage and quality of CyREST’s Miredot-based [<xref ref-type="bibr" rid="CR21">21</xref>] API documentation was a major impediment to productivity. We replaced Miredot with the popular Swagger [<xref ref-type="bibr" rid="CR11">11</xref>] framework, which organizes CyREST endpoints by category, provides for more complete documentation, and presents an easy click-to-run web interface. This allowed us to more rigorously define and enforce the documentation standards that define an endpoint contract, including the context, purpose, caveats, parameters, and return results for each endpoint. Swagger also facilitates the documentation of structures (called <italic>models</italic>) pertinent to parameters and return results.</p>
      <p id="Par36">To access Swagger for Functions, use Cytoscape’s <bold>Help → Automation → CyREST API</bold> menu. For Commands, use <bold>Help → Automation → CyREST Command API</bold>.</p>
      <p id="Par37">For each Function and Command implemented in Cytoscape Core, we audited the documentation to verify that it contained meaningful and actionable content for each Swagger section according to best practices. Similarly, Automation App authors wrote their Swagger page documentation to the same standards.</p>
      <p id="Par38">For Functions, the CyREST Swagger Connector (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>) synthesizes an endpoint’s Swagger documentation from text embedded in annotations attached to endpoint code. For Functions, a basic contract is defined by the @ApiOperation and @ApiParam annotations, which describe the endpoint generally and its parameters specifically. For the diffuse_with_options Function, these annotations might appear as follows:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figd_HTML" id="MO6"/>
      <p id="Par39">In the @ApiOperation annotation, the value attribute contains a short description; the notes attribute contains the context, purpose, and caveats, and the response attribute identifies the model (i.e., class) for the return result. The @ApiParam annotation applies to each parameter, whether it is part of the URL (e.g., networkSUID and networkViewSUID) or the PUT payload (e.g., diffusionParameters). The value attribute describes the parameter, while the required attribute indicates whether the parameter must be present. Additional annotations describe possible results and models.</p>
      <p id="Par40">Figure <xref rid="Fig3" ref-type="fig">3</xref> shows a sample Swagger page corresponding to the diffusion_with_options Function above.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Sample Swagger page for diffuse_with_options, including markups for key areas. The <italic>Try it out!</italic> button calls Cytoscape to execute this CyREST function</p></caption><graphic xlink:href="13059_2019_1758_Fig3_HTML" id="MO7"/></fig></p>
      <p id="Par41">For Commands, the CyREST Swagger and Commands Connectors (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>) synthesize a similar page from OSGi properties and annotated fields within a TaskFactory. Command-level descriptions, for example, are synthesized from attributes supplied in the TaskFactory properties when the task is created in CyActivator:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Fige_HTML" id="MO8"/>
      <p id="Par42">Parameter-level descriptions are synthesized using @Tunable annotations applied to variables within each TaskFactory:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figf_HTML" id="MO9"/>
    </sec>
    <sec id="Sec6">
      <title>New interactive CyREST call prototyping ❹</title>
      <p id="Par43">A significant cost in most workflow authoring processes is experimentation with library functions to determine what types of calls achieve workflow goals. The Swagger documentation system addresses this in an innovative way by enabling a user to formulate and submit a CyREST endpoint call directly from the endpoint’s Swagger page.</p>
      <p id="Par44">Using the example in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, once the user fills the endpoint’s parameter values, provided by the included Example Value, clicking on the <italic>Try it out!</italic> button results in a well-formed diffuse_with_options call to Cytoscape, which performs a diffusion and returns a result (as shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref>). If the diffusion fails, an error result is returned. By experimentation, and without <italic>any</italic> programming skills, a user can quickly understand and productively use a CyREST endpoint, which informs the correct composition of a REST call using the workflow language’s REST interface.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Sample Swagger results from using the <italic>Try it out!</italic> button to execute a CyREST call. The page shows the CyREST call that incorporates user-specified parameter values and the JSON-formatted call results</p></caption><graphic xlink:href="13059_2019_1758_Fig4_HTML" id="MO10"/></fig></p>
      <p id="Par45">Note that parameters for some endpoints are references to Cytoscape objects represented by SUIDs (e.g., POST /diffusion/v1/{networkSUID}/views/{networkViewSUID}/diffuse_with_options). A user can discover Cytoscape SUIDs by using Swagger to execute query endpoints (e.g., GET /v1/networks/currentNetwork).</p>
    </sec>
    <sec id="Sec7">
      <title>Consistent mechanisms for calling CyREST and receiving return values ❺</title>
      <p id="Par46">To improve workflow author productivity, we created conventions for the data returned by CyREST endpoints and we revitalized the Python and R harmonization libraries (called py2cytoscape and RCy3).</p>
      <p id="Par47">But for minor exceptions, all CyREST endpoints now return their results in a standard JSON data structure called CIResponse [<xref ref-type="bibr" rid="CR22">22</xref>], which has two main elements: data and errors. If the endpoint is successful, the endpoint returns its result in data and leaves errors empty—the exact result is endpoint-dependent and is described in the endpoint’s Swagger page. For example:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figg_HTML" id="MO11"/>
      <p id="Par48">If the endpoint fails, it leaves data empty and returns errors, where errors[0] describes the endpoint error, and subsequent errors entries describe failures in any nested services that caused the endpoint failure, similar to a Java stack trace. For example:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figh_HTML" id="MO12"/>
      <p id="Par49">The status contains an HTTP status describing the error. Type contains a URN unique to the endpoint and error (shortened here for readability, but actually containing “urn:cytoscape:ci:diffusion-app:v1:diffuse_with_options:2”), and the message describes the error in prose. If the caller needs to take action for one type of error as compared to another, it should compare the type value, not the message content. The link value is returned but is not used.</p>
      <p id="Par50">The separation of data and errors enables callers to centralize their CyREST calling code, thereby easing coding and maintenance burden on workflow and harmonization library authors. A centralized CyREST caller should return the data value and throw an exception if an error is received.</p>
    </sec>
    <sec id="Sec8">
      <title>Improved coverage of core Cytoscape functionality ❻</title>
      <p id="Par51">Under Cytoscape Automation, the exposure of Cytoscape’s API via CyREST expanded from 113 available operations to 157. These new operations, as well as the data they consume and produce, are consistent with previous implementations. This API consistency follows the same Semantic Versioning [<xref ref-type="bibr" rid="CR23">23</xref>] best practices laid out for Cytoscape core development.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Implementation</title>
    <p id="Par52">The technical foundation of Cytoscape Automation is CyREST, which was first implemented by [<xref ref-type="bibr" rid="CR7">7</xref>]. While Cytoscape Automation includes CyREST, it also includes harmonization libraries that enable Python and R workflows to easily make CyREST calls. In this section, we describe the implementation of all of these components. While Swagger is integral to Cytoscape Automation, too, it is a separate (free) product maintained separately.</p>
    <sec id="Sec10">
      <title>Defining endpoints</title>
      <p id="Par53">Originally, CyREST used an embedded Grizzly HTTP server [<xref ref-type="bibr" rid="CR24">24</xref>] to publish Java resources annotated using the Jersey JAX-RS library [<xref ref-type="bibr" rid="CR25">25</xref>] as REST endpoints. CyREST continues to support app Functions defined by JAX-RS-based endpoint annotations, though the Grizzly server and Jersey library were replaced by the OSGi JAX-RS Connector library (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>) combined with the Jetty server contributed by Cytoscape’s Karaf [<xref ref-type="bibr" rid="CR26">26</xref>] component. This connector library listens for services registered within the OSGi environment (e.g., Cytoscape Automation-enabled apps), recognizes any that have been provided with JAX-RS annotations, and then processes them the same way as CyREST’s internal JAX-RS resources.</p>
      <p id="Par54">By definition, Cytoscape apps have the capability to register services within Cytoscape’s OSGi environment. As described in the “<xref rid="Sec2" ref-type="sec">Design</xref>” section above, adding REST endpoints is a matter of creating JAX-RS-annotated classes and methods and registering them as services. When the app registers services with OSGi, the OSGi JAX-RS Connector library recognizes the annotated endpoints and adds them to its Cytoscape Automation repository as Functions.</p>
      <p id="Par55">Cytoscape apps are also capable of registering Cytoscape Commands. A Cytoscape Command is an implementation of the Cytoscape TaskFactory interface which is registered as a service with OSGi. Any command added to Cytoscape’s CyCommand Manager is available to the Commands Connector, which consumes HTTP parameters, and passes them to the CyCommand Manager to perform the Command operation.</p>
    </sec>
    <sec id="Sec11">
      <title>Interfacing to Swagger</title>
      <p id="Par56">As described above, an app author should provide Swagger annotations to define the Swagger documentation for app Functions (as described in the “<xref rid="Sec2" ref-type="sec">Design</xref>” section above). The Swagger Connector (see Fig. <xref rid="Fig2" ref-type="fig">2</xref>) harvests these annotations when the user requests via Cytoscape’s <bold>Help → Automation → CyREST API</bold> menu and then composes a Swagger-defined JSON object that represents both the endpoint category list and the endpoint documentation pages themselves. To display the app’s functions in a Swagger page, Cytoscape launches a browser to load the Swagger UI (hosted by Cytoscape itself as http://localhost:1234/v1/swaggerUI/swagger-ui/index.html), providing the JSON object as a parameter (as the http://localhost:1234/v1/swagger.json URL).</p>
      <p id="Par57">A parallel mechanism offers Swagger documentation for Commands, accessible via Cytoscape’s <bold>Help → Automation → CyREST Command API</bold> menu. App authors should provide OSGi properties and TaskFactory-annotated fields to define the Swagger documentation for app Commands. The CyCommands Manager provides this documentation to the Commands Connector, which translates that documentation to Swagger-defined JSON. To display the app’s Commands in a Swagger page, Cytoscape launches a browser to load the Swagger UI mentioned, this time providing the command JSON as a parameter (as the http://localhost:1234/v1/commands/swagger.json URL).</p>
      <p id="Par58">Note that Swagger document shows pages for all endpoints that were defined when the JSON object was retrieved by the Swagger UI. If the user installs or uninstalls additional apps, the user can refresh the browser window to re-fetch and view the corresponding updated Swagger JSON object.</p>
      <p id="Par59">Note, too, that the Swagger JSON object is available to any application that would like to enumerate the endpoints exposed by CyREST.</p>
    </sec>
    <sec id="Sec12">
      <title>Upward compatibility with previous CyREST</title>
      <p id="Par60">While Cytoscape Automation incorporates CyREST endpoint conventions described above, endpoints supplied by previous CyREST versions did not. Particularly, they did not return results in the CIResponse structure (described in the “<xref rid="Sec2" ref-type="sec">Design</xref>” section).</p>
      <p id="Par61">The older CyREST Function endpoints returned a variety of JSON. To provide better and more uniform service, CyREST now offers the option of wrapping these endpoints’ return values in a CIResponse structure if the caller sets the CIWrapping: true HTTP header in the REST call. For example, the old-style response for GET http://localhost:1234/v1/networks.names is shown in green, and the CIResponse wrapper is shown in red:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figi_HTML" id="MO13"/>
      <p id="Par62">Also, all Command endpoints previously used the HTTP GET method, which relies on endpoint parameters being supplied as part of the REST URL. (Current conventions call for using the POST/PUT methods, which allow parameters to be expressed as JSON and passed as the HTTP payload.) The GET-based Command endpoints returned unformatted plaintext and could not effectively convey the details of any errors encountered.</p>
      <p id="Par63">CyREST continues to support the original GET Command endpoints, and any data they return, though the GET endpoints are deprecated. For every Command, a POST method using JSON parameters and JSON return (wrapped in a CIResponse object) has been added. The default Command Swagger references these POST methods exclusively to encourage their use while CyREST still supports the deprecated GET implementation.</p>
    </sec>
    <sec id="Sec13">
      <title>Calling endpoints</title>
      <p id="Par64">Cytoscape Automation simplifies Python- and R-based access to CyREST endpoints via harmonization libraries separately created, documented, and maintained by the Cytoscape community. The harmonization libraries provide language-specific and language-appropriate access to Cytoscape by wrapping one or more CyREST endpoints. As we add more CyREST endpoints, we believe the Cytoscape community will add functionality to take advantage of them. (Until new functionality is added to the libraries, direct CyREST calls via language-specific REST libraries remain necessary, as described below.)</p>
      <p id="Par65">The Python library (called py2cytoscape [<xref ref-type="bibr" rid="CR27">27</xref>]) is available via PyPI. The lead developer is Jorge Boucas.</p>
      <p id="Par66">The R library (called RCy3 [<xref ref-type="bibr" rid="CR28">28</xref>]) is available via BioConductor. The lead developer is Alexander Pico.</p>
      <p id="Par67">CyREST endpoints not covered by harmonization libraries can be called directly using REST protocols documented via Swagger. Endpoints contributed by installable apps (e.g., aMatReader) can either be called directly or, if implementing Commands (e.g., Diffusion), by generalized functions included in the harmonization libraries.</p>
      <p id="Par68">For example, a call to an aMatReader app function in Python would be made directly using CyREST, while a call to a Diffusion app function could be made either directly or via py2cytoscape:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figj_HTML" id="MO14"/>
      <p id="Par69">A call to the same aMatReader app function in R would be made directly using CyREST, while a call to a Diffusion app function could be made either directly or via RCy3:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figk_HTML" id="MO15"/>
      <p id="Par70">For apps that implement Commands, we provide a standard way to call their functions without necessitating the app-specific harmonization libraries, thus diminishing the need for direct CyREST calls. We also encourage app authors or community members to create and disseminate customized or extended app-specific libraries as well.</p>
    </sec>
    <sec id="Sec14">
      <title>Workflow examples</title>
      <p id="Par71">The Cytoscape community has created and published a number of sample workflows [<xref ref-type="bibr" rid="CR29">29</xref>] based on both the Python and R harmonization libraries.</p>
      <p id="Par72">The following are the Python examples [<xref ref-type="bibr" rid="CR30">30</xref>]:</p>
      <p id="Par73"><italic>Advanced cancer networks and data</italic>—retrieve disease networks from a public database and apply gene expression and tumor mutation datasets for network analysis and visualization. Network files and images are generated in multiple formats for sharing and publishing.</p>
      <p id="Par74"><italic>Network Assisted Genomic Analysis (NAGA)</italic>—re-prioritizes significant single nucleotide polymorphisms (SNPs) to genes using network diffusion methods including random walk and heat diffusion.</p>
      <p id="Par75"><italic>Advanced View API</italic>—demonstrates how users can manipulate Cytoscape network views directly from Python code.</p>
      <p id="Par76">The following are the R/notebook examples [<xref ref-type="bibr" rid="CR31">31</xref>]:</p>
      <p id="Par77"><italic>Cytoscape Automation with RCy3</italic>—three use cases are demonstrated including querying existing interaction databases with a set of genes to create a network, creating a correlation network using aMatReader, and a basic enrichment analysis.</p>
      <p id="Par78"><italic>Cancer networks and data</italic>—retrieve disease networks from a public database and apply gene expression and tumor mutation datasets for network analysis and visualization. Network files and images are generated in multiple formats for sharing and publishing.</p>
      <p id="Par79"><italic>AP-MS network analysis</italic>—describes how to use data from an affinity purification-mass spectrometry experiment to generate relevant interaction networks, enriching the networks with information from public resources, analyzing the networks, and creating effective visualizations.</p>
      <p id="Par80">The following are the examples from the 2017 CyREST Challenge [<xref ref-type="bibr" rid="CR32">32</xref>]:</p>
      <p id="Par81"><italic>Konig_SBML_Time_Course_Python</italic>—Python-based dynamic visualization of SBML kinetic models in Cytoscape.</p>
      <p id="Par82"><italic>Grimes_CFN_CCCN_R</italic>—R-based visualization of a cluster-filtered network (CFN) and a co-cluster correlation network (CCCN).</p>
      <p id="Par83"><italic>Isserlin_PPI_network_pipeline_R</italic>—R-based visualization of all interactions in a ligand-receptor network.</p>
      <p id="Par84">In the future, we hope to provide a standard way for workflow authors to create and disseminate workflows they create.</p>
    </sec>
  </sec>
  <sec id="Sec15">
    <title>Results</title>
    <p id="Par85">Cytoscape Automation was first released as part of Cytoscape v3.6 on November 15, 2017, and has been downloaded and installed over 300,000 times since then. In that period, Cytoscape was started over 550,000 times. Additionally, demand for our Cytoscape Automation workshops has been brisk. To date, though, we have no statistics on workflows created, workflows executed, or CyREST endpoints called. We hope to collect these in the future. However, since updating RCy3 to work with CyREST and releasing as version 2.0 in April 2018, it has risen to rank near the top 200 packages in Bioconductor, averaging ~ 800 downloads per month (up from ~ 200). py2cytoscape sees about 500 downloads/month from GitHub and the PyPI Python package index.</p>
    <sec id="Sec16">
      <title>External workflows enabled</title>
      <p id="Par86">The Cytoscape community has used Cytoscape Automation to create Python and R workflows that successfully load network data, profile it, perform complex layouts and styles, then return renderings.</p>
      <p id="Par87">Figure <xref rid="Fig5" ref-type="fig">5</xref>a shows one result of the Python “advanced cancer networks and data” workflow referenced above. It loads ovarian cancer and breast cancer disease networks by calling Cytoscape’s String app [<xref ref-type="bibr" rid="CR33">33</xref>], determines a relevant gene neighborhood by calling Cytoscape’s Diffusion app [<xref ref-type="bibr" rid="CR34">34</xref>], and ends up with a styled and laid out subnetwork of critical breast cancer genes.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Results of Cytoscape Automation workflow execution in Python and R. <bold>a</bold> Uses multiple Cytoscape apps to load and analyze two data sets, then combines them to show critical genes. <bold>b</bold> Uses multiple R libraries and analyses to create a network that is then laid out and styled in Cytoscape</p></caption><graphic xlink:href="13059_2019_1758_Fig5_HTML" id="MO16"/></fig></p>
      <p id="Par88">Figure <xref rid="Fig5" ref-type="fig">5</xref>b shows the result of the R “Isserlin_PPI_network_pipeline_R” workflow referenced above. It is a ligand-receptor network showing a number of interactions. The workflow reads ligands and receptors from Biomart by calling R libraries. Interactions are fetched from iRefIndex, Biogrid, and Pathway Commons and removes duplicate interactions. After expression analysis, it constructs a representative JSON-encoded network, sends it to Cytoscape, performs a different force-directed layout on each cell type, and creates styles to differentiate cell types, protein types, and significance.</p>
      <p id="Par89">The two workflows demonstrate that Cytoscape and its apps can be integrated with Python and R best-of-breed libraries to create novel and repeatable results. Because these workflows are defined by code, they can be audited and evolved in an orderly and predictable manner. Assuming consistent input data, correct and consistent results are attained on every run (though, not necessarily identical results if non-deterministic algorithms such as some layouts are in the workflow). Without Cytoscape Automation, attaining these qualities would have required a new Cytoscape app that would have required specialized Java coding skills and several weeks to develop.</p>
      <p id="Par90">Both workflows show how multiple Cytoscape steps can be staged in sequence to reproduce multiple repeatable results. Figure <xref rid="Fig5" ref-type="fig">5</xref>a is actually one of ten different images produced by the “advanced cancer networks and data” workflow, which performs over 40 different Cytoscape operations and a number of intermediate calculations. The workflow executes in under 2 min on a common workstation. If performed by hand (as would be necessary without Cytoscape Automation), the time required would have been over 20 min, and given the complexity of assessing attribute values and styling networks by hand, it is unlikely that even a skilled Cytoscape operator could have produced all images consistently. This demonstrates how Cytoscape Automation enables workflows that are practically impossible under human operation and does so in a timely manner.</p>
      <p id="Par91">Note that additional R-oriented vignettes are available at the RCy3 Bioconductor site.</p>
      <p id="Par92">Note that these workflows use languages common in data sciences, but a different class of workflows can be written in Javascript and deployed inside of web apps running inside standard browsers. For example, the NDEx website [<xref ref-type="bibr" rid="CR35">35</xref>] uses direct Javascript-based calls to CyREST endpoints in order to enable a user to download a network from the NDEx database into a running Cytoscape instance—the transfer is initiated when the user clicks on a network page’s Cytoscape icon. From there, a user can use Cytoscape to explore, analyze, and visualize shared networks, thus sparing the NDEx authors from having to duplicate Cytoscape features in the NDEx website. In this mode, Cytoscape Automation achieves application integration not previously economical.</p>
    </sec>
    <sec id="Sec17">
      <title>Cytoscape Automation apps</title>
      <p id="Par93">In December 2017, we launched a campaign calling on all Cytoscape app writers to upgrade their existing apps to enable Automation calls, referring them to an extensive Wiki and FAQ document written to inform and enable their work. To date, Automation features have been added to 4 core apps (delivered with Cytoscape, listed in underlined italics) and 34 App Store apps:
<table-wrap id="Taba"><table frame="hsides" rules="groups"><tbody><tr><td>aMatReader</td><td>cyChart</td><td>eXamine</td><td>RINalyzer</td></tr><tr><td>AutoAnnotate</td><td><italic><underline>CyNDEx-2</underline></italic></td><td>GeneMANIA</td><td>RINspector</td></tr><tr><td>BridgeDb</td><td>Cyni Toolbox</td><td>ID Mapper</td><td>setsApp</td></tr><tr><td>cddApp</td><td>Cyrface</td><td>KEGGScape</td><td>stringApp</td></tr><tr><td>chemViz2</td><td>CyTargetLinker</td><td>MCODE</td><td>structureViz2</td></tr><tr><td>ClueGO</td><td>CytoCopteR</td><td>Omics Visualizer</td><td>Synapse Client</td></tr><tr><td>clusterMaker2</td><td><italic><underline>Diffusion</underline></italic></td><td>PathLinker</td><td>WikiPathways</td></tr><tr><td><italic><underline>copycatLayout</underline></italic></td><td>DisGeNET-app</td><td>PSFC</td><td>WordCloud</td></tr><tr><td>CyAnimator</td><td>enhancedGraphics</td><td>ReactomeFIPlugIn</td><td>yFiles</td></tr><tr><td><italic><underline>cyBrowser</underline></italic></td><td>EnrichmentMap</td><td/><td/></tr></tbody></table></table-wrap></p>
      <p id="Par94">While each app documents its endpoints via Swagger pages, significant discussion and examples are presented in separate publications in F1000 Research’s Cytoscape Automation app collection [<xref ref-type="bibr" rid="CR36">36</xref>].</p>
      <p id="Par95">Note that core apps follow semantic versioning guidelines, thereby guaranteeing that updates will not break workflows supported in previous versions. To the extent that other apps follow these guidelines, they commit to the same guarantee.</p>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <p id="Par96">Existing biological workflow systems (e.g., Galaxy, Taverna, GenePattern [<xref ref-type="bibr" rid="CR37">37</xref>], bioKepler [<xref ref-type="bibr" rid="CR38">38</xref>], and implementations of Common Workflow Language [<xref ref-type="bibr" rid="CR39">39</xref>]) are capable of executing workflows on networks, but they do not leverage functionality available in Cytoscape and its apps. Their forte is the execution of a wide range of biological analysis tools and in a portable and scalable way across a variety of software and hardware environments. In contrast, Cytoscape Automation leverages a wide range of <italic>network-specialized</italic> Cytoscape and app features using a single Cytoscape instance running on a workstation, though a wide range of biological analysis tools can also be executed.</p>
    <sec id="Sec19">
      <title>Cytoscape Automation and workflow systems</title>
      <p id="Par97">In most workflow systems (including general programming languages such as Python, R, and Javascript and biological workflow engines such as Galaxy, Taverna, and CWL engines), workflows are constructed by calling a utility or library function, using its result in some calculation or transformation (called interstitial code), passing the result to a different utility or library function, and so on. Often, the workflow itself maintains state as variables, and the utilities and library functions are stateless—their output depends solely on their inputs. Workflows based on Cytoscape Automation are different because Cytoscape maintains network state and Cytoscape Automation functions create, query, or change networks—workflows calling Cytoscape Automation functions have state <italic>shared</italic> between the workflow and Cytoscape.</p>
      <p id="Par98">Cytoscape Automation functions support sequential calls in a single thread of execution, emulating operations performed by a human—the function does not return a result to its caller until the function is finished. Additionally, functions implemented entirely within the Cytoscape core are guaranteed to execute without soliciting input from a user, thereby enabling unsupervised execution. Functions implemented in Cytoscape apps <italic>should</italic> provide this guarantee, but that choice is left to the app author. (Note that the workflow itself remains free to solicit user or other external input as appropriate.)</p>
      <p id="Par99">While workflow systems are free to execute Cytoscape Automation workflows comprised of multiple parallel threads, Cytoscape Automation itself makes no guarantees regarding the order of function execution or termination and does not guarantee that function executions will not conflict with each other. For example, executing a network layout at the same time as updating network attributes may produce an unpredictable layout. Similarly, simultaneous calls to update network attributes may have unpredictable (and harmful!) effects on the network attributes.</p>
      <p id="Par100">As a rule of thumb, workflows should themselves serialize all operations performed on a single network. Simultaneous execution involving <italic>different</italic> networks will produce consistent and correct results without being serialized. Functions implemented in Cytoscape apps <italic>should</italic> support these rules, too, but doing so requires the author to have written them to be re-entrant (e.g., independent of global variables).</p>
      <p id="Par101">While Cytoscape Automation does not directly support checkpointing or re-execution features found in some workflow engines, it can assist a workflow author in simulating these features. The state of all networks can be saved and restored to/from a local file (using the POST and GET operations on the /v1/session endpoint) or to/from an NDEx repository (using the POST and GET /cyndex2/v1/networks endpoints). Note that restoring a network changes all Cytoscape IDs associated with collections, networks, views, nodes, edges, and every other property, thereby invalidating any IDs maintained as state by a workflow—a workflow author should take care to refresh this state via appropriate Cytoscape Automation queries after a restore operation.</p>
      <p id="Par102">Cytoscape Automation does not provide history, provenance, and other metafunctions associated with workflow execution. It relies on the workflow system to provide these features.</p>
      <p id="Par103">The following example shows how a general purpose language (e.g., Python) can be used to create a workflow that shares state with Cytoscape and use interstitial code to perform novel functions and create new Cytoscape state. Cytoscape is called to create a network of ovarian cancer genes from the STRING database, then interstitial code fetches STRING’s gene annotations from Cytoscape and creates a list of genes in the top 25th quantile of top scoring diseases. Finally, Cytoscape is called again to create a network using that gene list:</p>
      <graphic position="anchor" xlink:href="13059_2019_1758_Figl_HTML" id="MO17"/>
      <p id="Par104">Systems that define a workflow as a pipeline of functional blocks linked together by data flows (e.g., GenePattern [<xref ref-type="bibr" rid="CR37">37</xref>], as shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref>) are challenged to maintain state or provide interstitial code such as the top quartile calculation. To the extent such systems enable the authorship of new functional blocks, Cytoscape Automation workflows can be implemented using a general purpose language and then incorporated (and reused) as a functional block.
<fig id="Fig6"><label>Fig. 6</label><caption><p>A three-step GenePattern workflow shown by the GenePattern Pipeline Editor. The Illumina Expression File Creator step creates a GCT file from a zip of Illumina IDAT files. The Preprocess Dataset step normalizes the GCT data, and the Hierarchical Clustering step performs clustering on genes. The second step was created by GenePattern staff to avoid adding parameters to the first or third steps</p></caption><graphic xlink:href="13059_2019_1758_Fig6_HTML" id="MO18"/></fig></p>
      <p id="Par105">Note that GenePattern Notebook [<xref ref-type="bibr" rid="CR40">40</xref>] is a new Jupyter-based workflow system that can use general programming languages to orchestrate existing analyses and use their results to create complex control flows and data-dependent processing. GenePattern Notebooks can use Cytoscape Automation (including the py2cytoscape harmonization library) to create Cytoscape workflows and integrate them with other analytics.</p>
    </sec>
    <sec id="Sec20">
      <title>Workflow publishing</title>
      <p id="Par106">Biological workflow systems vary in how they envision their communities sharing workflows. GenePattern Notebook provides a web-based repository that allows users to check in a workflow and then share it with others or the public. Such notebooks can be imported directly within the GenePattern Notebook development system. Taverna enables sharing through the myExperiment [<xref ref-type="bibr" rid="CR41">41</xref>] social network. Other systems advise that workflows be stored and shared in a version control system (VCS) such as GitHub.</p>
      <p id="Par107">Common practice in the Cytoscape Automation community is to store workflows and artifacts in GitHub and reference them from academic papers or include them as supplementary material as appropriate. This is particularly feasible because such workflows are contained in easily readable text files for which GitHub viewers (e.g., nbviewer) are available, GitHub enables sharing and versioning of workflows, GitHub has become a common tool in many biologists’ toolbelt, and GitHub can be readily searched. The 2017 CyREST Challenge produced several such examples.</p>
      <p id="Par108">A working example is a 2019 Bader Lab pathway enrichment analysis paper [<xref ref-type="bibr" rid="CR42">42</xref>] where R-based Cytoscape Automation is delivered as supplementary material (protocol 3), and the full workflow is delivered in the GitHub repository named in its “Data availability” section. Note, too, that the paper’s “Procedure” section recites a long list of manual steps, much of which can be replaced in a less ambiguous, more reproducible way by automated workflows.</p>
    </sec>
    <sec id="Sec21">
      <title>User experience</title>
      <p id="Par109">Cytoscape Automation functionality is delivered in all Cytoscape downloads (over 17,600 per month), and in the interests of privacy, usage of individual features is not counted. Furthermore, given the typically long lag between research and paper publishing, we are only now starting to see published papers that leverage automation. Instead, we infer user interest and feedback through automation library downloads, tutorial attendance, and online posts.</p>
      <p id="Par110">Since the original Cytoscape Automation tutorial at the ISMB/Prague 2017, six more major multi-hour public tutorials have been delivered by the National Resource for Network Biology (<ext-link ext-link-type="uri" xlink:href="http://nrnb.org">nrnb.org</ext-link>). All tutorials were well and enthusiastically attended, with an average attendance of 40, and most of the class completed class exercises without difficulty.</p>
      <p id="Par111">Since January 2018, the Cytoscape help desk has tallied 68 threads relating to Cytoscape Automation, out of 710 total threads (approximately 9.5% of total worldwide support). In the same period, 76 issues were posted on the project’s GitHub, and 49 were closed (64%).</p>
      <p id="Par112">Note that the definition of the RCy3 harmonization library for automation (~ 800 downloads per month) was designed by a working group of 13 users and 5 Cytoscape core developers. The Cytoscape Automation design was responsive to the RCy3 design, and two users (e.g., Isserlin [<xref ref-type="bibr" rid="CR42">42</xref>]) have since published research papers in which Cytoscape Automation was part of their methodology. They chose to implement Cytoscape Automation workflows because they already knew the workflow languages (Python and R) and were <italic>already</italic> using them and associated libraries to implement parts of their experiment protocol. Their workflows also reproduced their Cytoscape-focused steps and automated numerous tedious and error-prone steps via both Cytoscape Automation calls and interstitial code.</p>
      <p id="Par113">Finally, as further evidence of its usefulness in reproducibility, Cytoscape Automation is currently used to test automation-enabled apps (Diffusion [<xref ref-type="bibr" rid="CR43">43</xref>] and CyNDEx-2 [<xref ref-type="bibr" rid="CR44">44</xref>]) as well as Cytoscape itself.</p>
    </sec>
  </sec>
  <sec id="Sec22">
    <title>Future development</title>
    <p id="Par114">Cytoscape Automation features will continue towards providing frictionless interaction between all components of Cytoscape’s ecosystem of authors, services, and applications, particularly in the following areas:
<table-wrap id="Tabb"><table frame="hsides" rules="groups"><tbody><tr><td>Additional apps</td><td>- Upgrade additional core and store apps to support Automation calls</td></tr><tr><td>App Store support</td><td><p>- Improve identification of Automation-supporting apps</p><p>- Provide documentation of API calls in the app’s store page</p><p>- Provide access to app-specific R and Python harmonization libraries</p></td></tr><tr><td>Workflow publishing</td><td>- Create a repository of workflows for use and evolution</td></tr><tr><td>App testing harness</td><td>- Create a workflow-based framework for testing Automation endpoints</td></tr></tbody></table></table-wrap></p>
    <p id="Par115">While Cytoscape core developers will improve the infrastructure components, most value will be contributed by the Cytoscape community as it enables Automation in more apps and creates workflows that leverage Automation.</p>
    <p id="Par116">Note that the execution of Cytoscape functionality (as both core features and apps) without requiring user intervention is a milestone in the path to our long-term goal of creating the so-called headless Cytoscape, which can execute as a stand-alone service independent of a keyboard, mouse, or display.</p>
  </sec>
  <sec id="Sec23">
    <title>Summary</title>
    <p id="Par117">In this paper, we showed how Cytoscape Automation extends Cytoscape to enable reproducible, shareable, and extensible network biology workflows that can be economically built using common programming languages (e.g., Python, R, and Javascript) in common environments (e.g., Jupyter and RStudio).</p>
    <p id="Par118">The key to Cytoscape Automation is its improvements to facilities already offered in CyREST. We created standards that (1) enable Commands and Cytoscape apps to be called through CyREST and (2) encourage high-quality documentation of CyREST endpoints using state-of-the-art documentation systems (such as Swagger) and interactive call prototyping. As a result, there are now 34 Cytoscape apps that can be called via CyREST, and over 150 Cytoscape Functions and 120 Commands have been documented.</p>
    <p id="Par119">Using the specific examples in this paper and on the Cytoscape Wiki, an app author can add Cytoscape Automation to an existing app, and a bioinformatician can create novel network biologic workflows as orchestrations of Cytoscape functions, complex custom analyses, and best-of-breed external tools and language-specific libraries.</p>
    <p id="Par120">We expect that Cytoscape Automation will enable the exchange and rapid evolution of workflows that integrate Cytoscape-based network analysis and visualization. The services, software, and documentation resources that comprise the Cytoscape Automation ecosystem will play an integral role in making these workflows scalable, replicable, and of high value.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional file</title>
    <sec id="Sec24">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2019_1758_MOESM1_ESM.docx">
            <label>Additional file 1:</label>
            <caption>
              <p> Review history. (DOCX 13 kb)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Sample workflows were contributed by Ruth Isserlin, Mark Grimes, and Matthias König, winners of the 2017 CyREST Competition. RCy3 was created by Alexander Pico, Tanja Muetze, Georgi Kolishovski, and Paul Shannon. Py2cytoscape was created by Keiichiro Ono and Jorge Bouças. The entire Cytoscape core development team improved the Cytoscape Commands documentation, and the greater Cytoscape app developer community created the collection of Automation-enabled apps. The authors particularly appreciate the reviewers’ thorough and insightful comments and suggestions, all of which substantially improved this article.</p>
    <sec id="FPar1">
      <title>Review history</title>
      <p id="Par121">The review history is available as Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>DO implemented the Cytoscape Automation (including CyREST and Wiki material). SM implemented the Commands portions of Cytoscape. AP and JB implemented the R and Python harmonization libraries. DO, AP, and BD authored this paper. BD led and supervised the Cytoscape Automation project. All authors have seen and agreed to the final content of the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported with funding from the National Resource for Network Biology (NRNB) award number P41 GM103504 and National Human Genome Research Institute (NHGRI) award number R01 HG009979, both assigned to Trey Ideker.</p>
    <p>We confirm that the funders had no role in the study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>CyREST software is available as part of Cytoscape: <ext-link ext-link-type="uri" xlink:href="https://cytoscape.org/download.html">https://cytoscape.org/download.html</ext-link> [<xref ref-type="bibr" rid="CR45">45</xref>]</p>
    <p>Latest source code of cyREST: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cyREST">https://github.com/cytoscape/cyREST</ext-link> [<xref ref-type="bibr" rid="CR46">46</xref>]</p>
    <p>Fixed source code reference for CyREST (v3.8): 10.5281/zenodo.2798856 [<xref ref-type="bibr" rid="CR47">47</xref>]</p>
    <p>The Cytoscape Automation examples: <ext-link ext-link-type="uri" xlink:href="http://automation.cytoscape.org">http://automation.cytoscape.org</ext-link> [<xref ref-type="bibr" rid="CR12">12</xref>]</p>
    <p>The Cytoscape Automation FAQ and Wiki: <ext-link ext-link-type="uri" xlink:href="http://automation.cytoscape.org">http://automation.cytoscape.org</ext-link> [<xref ref-type="bibr" rid="CR12">12</xref>]</p>
    <p>The Cytoscape Automation RCy3 harmonization library source: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/RCy3">https://github.com/cytoscape/RCy3</ext-link> [<xref ref-type="bibr" rid="CR48">48</xref>]</p>
    <p>The Cytoscape Automation RCy3 official release: <ext-link ext-link-type="uri" xlink:href="https://www.bioconductor.org/packages/release/bioc/html/RCy3.html">https://www.bioconductor.org/packages/release/bioc/html/RCy3.html</ext-link> [<xref ref-type="bibr" rid="CR10">10</xref>]</p>
    <p>The Cytoscape Automation py2cytoscape harmonization library source: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/py2cytoscape">https://github.com/cytoscape/py2cytoscape</ext-link> [<xref ref-type="bibr" rid="CR9">9</xref>]</p>
    <p>The Cytoscape Automation Python official release: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/py2cytoscape">https://pypi.org/project/py2cytoscape</ext-link> [<xref ref-type="bibr" rid="CR27">27</xref>]</p>
    <p>License for cyREST, py2cytoscape, and all example workflows: MIT: <ext-link ext-link-type="uri" xlink:href="http://opensource.org/licenses/MIT">http://opensource.org/licenses/MIT</ext-link> [<xref ref-type="bibr" rid="CR49">49</xref>]</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p id="Par122">Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p id="Par123">Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par124">The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shannon</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Markiel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ozier</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Baliga</surname>
            <given-names>NS</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Ramage</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Cytoscape: a software environment for integrated models of biomolecular interaction networks</article-title>
        <source>Genome Res</source>
        <year>2003</year>
        <volume>13</volume>
        <fpage>2498</fpage>
        <lpage>2504</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.1239303</pub-id>
        <pub-id pub-id-type="pmid">14597658</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Afgan</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Baker</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>van den Beek</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Blankenberg</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bouvier</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Čech</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update</article-title>
        <source>Nucleic Acids Res</source>
        <year>2016</year>
        <volume>44</volume>
        <fpage>W3</fpage>
        <lpage>W10</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw343</pub-id>
        <pub-id pub-id-type="pmid">27137889</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wolstencroft</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Haines</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Fellows</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Williams</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Withers</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Owen</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Taverna workflow suite: designing and executing workflows of Web Services on the desktop, web or in the cloud</article-title>
        <source>Nucleic Acids Res</source>
        <year>2013</year>
        <volume>41</volume>
        <fpage>W557</fpage>
        <lpage>W561</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkt328</pub-id>
        <pub-id pub-id-type="pmid">23640334</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">PyPI – the Python Package Index. In: PyPI. Available: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/">https://pypi.org/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gentleman</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Bates</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Bolstad</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Dettling</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dudoit</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R80</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
        <pub-id pub-id-type="pmid">15461798</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Cytoscape Automation Overview. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation">https://github.com/cytoscape/cytoscape-automation</ext-link>. [cited 18 Apr 2018]</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ono</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Muetze</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kolishovski</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Shannon</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Demchak</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>CyREST: turbocharging Cytoscape access for external tools via a RESTful API</article-title>
        <source>F1000Res.</source>
        <year>2015</year>
        <volume>4</volume>
        <fpage>478</fpage>
        <pub-id pub-id-type="doi">10.12688/f1000research.6767.1</pub-id>
        <pub-id pub-id-type="pmid">26672762</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Richardson</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Amundsen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ruby</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <source>RESTful Web APIs: services for a changing world. “O’Reilly Media, Inc.”</source>
        <year>2013</year>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Bouças J. py2cytoscape. In: Github. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/py2cytoscape">https://github.com/cytoscape/py2cytoscape</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Pico A, Muetze T, Shannon P, Isserlin R, Pai S, Gustavson J, et al. RCy3. In: Bioconductor. Available: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/release/bioc/html/RCy3.html">https://bioconductor.org/packages/release/bioc/html/RCy3.html</ext-link>. [cited 10 May 2018].</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">World’s Most Popular API Framework | Swagger. In: World’s Most Popular API Framework | Swagger. Available: <ext-link ext-link-type="uri" xlink:href="https://swagger.io/">https://swagger.io/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Pico A, Hanspers K, Isserlin R, Otasek D, Demchak B. Cytoscape Automation. In: GitHub. Available: <ext-link ext-link-type="uri" xlink:href="http://automation.cytoscape.org">http://automation.cytoscape.org</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Carlin</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Demchak</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Pratt</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Sage</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ideker</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Network propagation in the cytoscape cyberinfrastructure</article-title>
        <source>PLoS Comput Biol</source>
        <year>2017</year>
        <volume>13</volume>
        <fpage>e1005598</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005598</pub-id>
        <pub-id pub-id-type="pmid">29023449</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Preston-Werner T. Semantic Versioning 2.0.0. In: Semantic Versioning. Available: <ext-link ext-link-type="uri" xlink:href="https://semver.org/">https://semver.org/</ext-link>. [cited 18 Apr 2018]</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Cytoscape Automation FAQ - What is the difference between Commands and Functions? In: Google Docs. Available: <ext-link ext-link-type="uri" xlink:href="https://docs.google.com/document/d/1QTrT-9ylhI4OX5DkauMo2ujLIqeg3WDUDwl77KLtfVY/edit#bookmark=id.2sda98tk63j8">https://docs.google.com/document/d/1QTrT-9ylhI4OX5DkauMo2ujLIqeg3WDUDwl77KLtfVY/edit#bookmark=id.2sda98tk63j8</ext-link>. [cited 18 Apr 2018]</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Command Tool — Cytoscape user manual 3.6.0 documentation. Available: <ext-link ext-link-type="uri" xlink:href="http://manual.cytoscape.org/en/3.6.0/Command_Tool.html">http://manual.cytoscape.org/en/3.6.0/Command_Tool.html</ext-link>. [cited 18 Apr 2018]</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">JSR 370: JavaTM API for RESTful Web Services (JAX-RS 2.1) Specification. Available: <ext-link ext-link-type="uri" xlink:href="https://www.jcp.org/en/jsr/detail?id=370">https://www.jcp.org/en/jsr/detail?id=370</ext-link>. [cited 18 Jul 2019]</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Gourley D, Totty B, Sayer M, Aggarwal A, Reddy S. HTTP: the definitive guide. Sebastopol: “O’Reilly Media, Inc.”; 2002.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Bassett L. Introduction to JavaScript object notation: a to-the-point guide to JSON. Sebastopol: “O’Reilly Media, Inc.”; 2015.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Morris</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Cytoscape 3.3 Developers Tutorial</article-title>
        <source>Cytoscape 3.3 developers tutorial</source>
        <year>2015</year>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Miredot | REST API Documentation Generator for Java. In: Miredot | REST API Documentation Generator for Java. Available: <ext-link ext-link-type="uri" xlink:href="http://www.miredot.com/">http://www.miredot.com/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">CIResponse. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation/wiki/App-Developers:-Cytoscape-Function-Best-Practices#ciresponse">https://github.com/cytoscape/cytoscape-automation/wiki/App-Developers:-Cytoscape-Function-Best-Practices#ciresponse</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Preston-Werner T. Semantic Versioning 2.0.0. Available: <ext-link ext-link-type="uri" xlink:href="https://semver.org/">https://semver.org/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Project Grizzly. 13 Apr 2018. Available: <ext-link ext-link-type="uri" xlink:href="https://javaee.github.io/grizzly/">https://javaee.github.io/grizzly/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Jersey - RESTful Web Services in Java. 10 Apr 2018. Available: <ext-link ext-link-type="uri" xlink:href="https://jersey.github.io/">https://jersey.github.io/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Apache Karaf. Available: <ext-link ext-link-type="uri" xlink:href="http://karaf.apache.org/">http://karaf.apache.org/</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Bouças J. py2cytoscape. In: PyPI. Available: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/py2cytoscape/">https://pypi.org/project/py2cytoscape/</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">RCy3. In: Bioconductor. Available: <ext-link ext-link-type="uri" xlink:href="https://www.bioconductor.org/packages/release/bioc/html/RCy3.html">https://www.bioconductor.org/packages/release/bioc/html/RCy3.html</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Cytoscape Automation for Script Writers. Github; Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation/tree/master/for-scripters">https://github.com/cytoscape/cytoscape-automation/tree/master/for-scripters</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Python Notebooks. Github; Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation/wiki#python-notebooks">https://github.com/cytoscape/cytoscape-automation/wiki#python-notebooks</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Workshops and Use Cases. Github; Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation/wiki#workshops-and-use-cases">https://github.com/cytoscape/cytoscape-automation/wiki#workshops-and-use-cases</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">2017 CyREST Challenge. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cytoscape-automation/tree/master/for-scripters/challenge-2017">https://github.com/cytoscape/cytoscape-automation/tree/master/for-scripters/challenge-2017</ext-link>. [cited 6 May 2019]</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Morris J, Jensen L, Doncheva N. stringApp. Available: <ext-link ext-link-type="uri" xlink:href="http://apps.cytoscape.org/apps/stringapp">http://apps.cytoscape.org/apps/stringapp</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Ono K, Sage E, Carlin D. Diffusion. Available: <ext-link ext-link-type="uri" xlink:href="http://apps.cytoscape.org/apps/diffusion">http://apps.cytoscape.org/apps/diffusion</ext-link>. [cited 10 May 2018]</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">NDEx WebApp v2.4.0. Available: <ext-link ext-link-type="uri" xlink:href="http://ndexbio.org">http://ndexbio.org</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">F1000Research. The Cytoscape Automation App article collection. Available: <ext-link ext-link-type="uri" xlink:href="https://f1000research.com/gateways/cytoscapeapps/automation">https://f1000research.com/gateways/cytoscapeapps/automation</ext-link>. [cited 7 May 2019]</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Reich</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liefeld</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gould</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lerner</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Tamayo</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Mesirov</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>GenePattern 2.0</article-title>
        <source>Nat Genet</source>
        <year>2006</year>
        <volume>38</volume>
        <fpage>500</fpage>
        <lpage>501</lpage>
        <pub-id pub-id-type="doi">10.1038/ng0506-500</pub-id>
        <pub-id pub-id-type="pmid">16642009</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Altintas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Crawl</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <source>Challenges and approaches for distributed workflow-driven analysis of large-scale biological data: vision paper. Proceedings of the 2012 Joint EDBT/ICDT Workshops</source>
        <year>2012</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
        <fpage>73</fpage>
        <lpage>78</lpage>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Amstutz</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Crusoe</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Tijanić</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Chilton</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Heuer</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <source>Common workflow language</source>
        <year>2016</year>
        <volume>v1</volume>
        <fpage>0</fpage>
        <pub-id pub-id-type="doi">10.6084/m9.figshare.3115156.v2</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <mixed-citation publication-type="other">Gene Pattern Notebook – GenePattern Notebook. Available: <ext-link ext-link-type="uri" xlink:href="http://genepattern-notebook.org/">http://genepattern-notebook.org/</ext-link>. [cited 9 May 2019]</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Roure</surname>
            <given-names>DD</given-names>
          </name>
          <name>
            <surname>Goble</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Stevens</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Designing the myExperiment virtual research environment for the social sharing of workflows. Third IEEE International Conference on e-Science and Grid Computing (e-Science 2007)</source>
        <year>2007</year>
        <fpage>603</fpage>
        <lpage>610</lpage>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Reimand</surname>
            <given-names>Jüri</given-names>
          </name>
          <name>
            <surname>Isserlin</surname>
            <given-names>Ruth</given-names>
          </name>
          <name>
            <surname>Voisin</surname>
            <given-names>Veronique</given-names>
          </name>
          <name>
            <surname>Kucera</surname>
            <given-names>Mike</given-names>
          </name>
          <name>
            <surname>Tannus-Lopes</surname>
            <given-names>Christian</given-names>
          </name>
          <name>
            <surname>Rostamianfar</surname>
            <given-names>Asha</given-names>
          </name>
          <name>
            <surname>Wadi</surname>
            <given-names>Lina</given-names>
          </name>
          <name>
            <surname>Meyer</surname>
            <given-names>Mona</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>Jeff</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>Changjiang</given-names>
          </name>
          <name>
            <surname>Merico</surname>
            <given-names>Daniele</given-names>
          </name>
          <name>
            <surname>Bader</surname>
            <given-names>Gary D.</given-names>
          </name>
        </person-group>
        <article-title>Pathway enrichment analysis and visualization of omics data using g:Profiler, GSEA, Cytoscape and EnrichmentMap</article-title>
        <source>Nature Protocols</source>
        <year>2019</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>482</fpage>
        <lpage>517</lpage>
        <pub-id pub-id-type="doi">10.1038/s41596-018-0103-9</pub-id>
        <pub-id pub-id-type="pmid">30664679</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <mixed-citation publication-type="other">diffusion. Github; Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/diffusion">https://github.com/cytoscape/diffusion</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">cy-ndex-2. Github; Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cy-ndex-2">https://github.com/cytoscape/cy-ndex-2</ext-link>. [cited 16 May 2019]</mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Ono K. Download Cytoscape. In: Cytoscape.org. Available: <ext-link ext-link-type="uri" xlink:href="https://cytoscape.org/download.html">https://cytoscape.org/download.html</ext-link>. [cited 3 Jul 2019]</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <mixed-citation publication-type="other">Otasek D, Ono K. cyREST. In: Github. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/cyREST">https://github.com/cytoscape/cyREST</ext-link>. [cited 3 Jul 2019]</mixed-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Otasek D, Ono K. CyREST: REST API App for Cytoscape. In: Zenodo. 2018. doi:10.5281/zenodo.2798856.</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <mixed-citation publication-type="other">Pico A. RCy3. In: Github. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/cytoscape/RCy3">https://github.com/cytoscape/RCy3</ext-link>. [cited 3 Jul 2019]</mixed-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <mixed-citation publication-type="other">opensource.org. The MIT License | Open Source Initiative. Available: <ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses/MIT">https://opensource.org/licenses/MIT</ext-link>. [cited 3 Jul 2019]</mixed-citation>
    </ref>
  </ref-list>
</back>
