<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">plosone</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6860437</article-id>
    <article-id pub-id-type="publisher-id">PONE-D-19-14733</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0225196</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Artificial Intelligence</subject>
          <subj-group>
            <subject>Machine Learning</subject>
            <subj-group>
              <subject>Deep Learning</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Artificial Intelligence</subject>
          <subj-group>
            <subject>Machine Learning</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Source Code</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Source Code</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Data Visualization</subject>
          <subj-group>
            <subject>Infographics</subject>
            <subj-group>
              <subject>Graphs</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Social Sciences</subject>
        <subj-group>
          <subject>Political Science</subject>
          <subj-group>
            <subject>National Security</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Neuroscience</subject>
          <subj-group>
            <subject>Cognitive Science</subject>
            <subj-group>
              <subject>Cognition</subject>
              <subj-group>
                <subject>Memory</subject>
                <subj-group>
                  <subject>Memory Recall</subject>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Neuroscience</subject>
          <subj-group>
            <subject>Learning and Memory</subject>
            <subj-group>
              <subject>Memory</subject>
              <subj-group>
                <subject>Memory Recall</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Applications</subject>
          <subj-group>
            <subject>Web-Based Applications</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Networks</subject>
          <subj-group>
            <subject>Internet</subject>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>TAP: A static analysis model for PHP vulnerabilities based on token and deep learning technology</article-title>
      <alt-title alt-title-type="running-head">A static analysis model for PHP vulnerabilities</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Fang</surname>
          <given-names>Yong</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Han</surname>
          <given-names>Shengjun</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Data curation</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Writing – original draft</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5871-946X</contrib-id>
        <name>
          <surname>Huang</surname>
          <given-names>Cheng</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="cor001">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wu</surname>
          <given-names>Runpu</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Data curation</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <label>1</label>
      <addr-line>College of Cybersecurity, Sichuan University, Chengdu 610065, China</addr-line>
    </aff>
    <aff id="aff002">
      <label>2</label>
      <addr-line>China Information Technology Security Evaluation Center, Beijing 100085, China</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Wang</surname>
          <given-names>Hua</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>Victoria University, AUSTRALIA</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>opcodesec@gmail.com</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>11</month>
      <year>2019</year>
    </pub-date>
    <volume>14</volume>
    <issue>11</issue>
    <elocation-id>e0225196</elocation-id>
    <history>
      <date date-type="received">
        <day>24</day>
        <month>5</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>30</day>
        <month>10</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2019 Fang et al</copyright-statement>
      <copyright-year>2019</copyright-year>
      <copyright-holder>Fang et al</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pone.0225196.pdf"/>
    <abstract>
      <p>With the widespread usage of Web applications, the security issues of source code are increasing. The exposed vulnerabilities seriously endanger the interests of service providers and customers. There are some models for solving this problem. However, most of them rely on complex graphs generated from source code or regex patterns based on expert experience. In this paper, TAP, which is based on token mechanism and deep learning technology, was proposed as an analysis model to discover the vulnerabilities of PHP: Hypertext Preprocessor (PHP) Web programs conveniently and easily. Based on the token mechanism of PHP language, a custom tokenizer was designed, and it unifies tokens, supports some features of PHP and optimizes the parsing. Besides, the tokenizer also implements parameter iteration to achieve data flow analysis. On the Software Assurance Reference Dataset(SARD) and SQLI-LABS dataset, we trained the deep learning model of TAP by combining the word2vec model with Long Short-Term Memory (LSTM) network algorithm. According to the experiment on the dataset of CWE-89, TAP not only achieves the 0.9941 Area Under the Curve(AUC), which is better than other models, but also achieves the highest accuracy: 0.9787. Further, compared with RIPS, TAP shows much better in multiclass classification with 0.8319 Kappa and 0.0840 hamming distance.</p>
    </abstract>
    <funding-group>
      <award-group id="award001">
        <funding-source>
          <institution>Key Research and Development Plan Project of Sichuan Province</institution>
        </funding-source>
        <award-id>No.2019YFG0407</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5871-946X</contrib-id>
          <name>
            <surname>Huang</surname>
            <given-names>Cheng</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <award-group id="award002">
        <funding-source>
          <institution>Sichuan University Postdoc Research Foundation</institution>
        </funding-source>
        <award-id>19XJ0002</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5871-946X</contrib-id>
          <name>
            <surname>Huang</surname>
            <given-names>Cheng</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <funding-statement>This work is supported in part by Key Research and Development Plan Project of Sichuan Province (No.2019YFG0407), and Sichuan University Postdoc Research Foundation under Grant 19XJ0002. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="10"/>
      <table-count count="7"/>
      <page-count count="19"/>
    </counts>
    <custom-meta-group>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>All relevant data are available from GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/das-lab/TAP">https://github.com/das-lab/TAP</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>All relevant data are available from GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/das-lab/TAP">https://github.com/das-lab/TAP</ext-link>.</p>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>At present, the Internet plays an important role in politics, economy, culture and social life. There are various security issues in different emerging Internet environments, such as Internet applications [<xref rid="pone.0225196.ref001" ref-type="bibr">1</xref>], cloud computing [<xref rid="pone.0225196.ref002" ref-type="bibr">2</xref>], crowdsourcing [<xref rid="pone.0225196.ref003" ref-type="bibr">3</xref>] and so on. With the rapid growth of open-source website applications, cyber threats are also emerging. According to an F5 Labs research on 433 major malicious attack incidents spanning 12 years, Web applications are the origin of 53% of malicious attacks [<xref rid="pone.0225196.ref004" ref-type="bibr">4</xref>]. Therefore, in order to resist intruders effectively, the security of the Web applications should be ensured at first.</p>
    <p>There are 55.2% of Alexa top 10 million websites built on the content management system (CMS). WordPress, Joomla! and Drupal are the top three most popular CMSs, and their market share is 69% [<xref rid="pone.0225196.ref005" ref-type="bibr">5</xref>]. They are all PHP programs and the global usage of PHP programs is more extensive with the addition of other PHP Web applications. Unfortunately, some PHP programmers lack the basic knowledge of secure programming, and some vulnerabilities are difficult to detect, even for programmers with security experience.</p>
    <p>PHP is so widely used on the Internet that any few security problems may cause a global disaster. PHPMailer is probably the most popular PHP email module in the world, which is used by many open-source projects like WordPress, Drupal, Joomla! and so on. However, there was a severe security problem—CVE-2017-5223 [<xref rid="pone.0225196.ref006" ref-type="bibr">6</xref>], which could allow any attackers to read servers’ local files. It affects the file content security of millions of websites servers around the world, and it would even further affect the administrative security of the servers. Another PHPMailer’s vulnerability—CVE-2016-10033 [<xref rid="pone.0225196.ref007" ref-type="bibr">7</xref>], could allow hackers to execute arbitrary code and threaten the security of systems directly. The National Vulnerability Database (NVD) even assigned it a 9.8/10 (CRITICAL) rating because of its great harm.</p>
    <p>As a programming language for millions of websites, the security issue of PHP programs cannot be ignored. In the past, the security of PHP programs was assured by manual auditing, which was not only complex but also wasting time and labor. Moreover, manual auditing can not cope well with the current large open-source codes. At present, the common method is the regex pattern, and it depends on vulnerability detective features extracted from human experts’ experience. Representative tools include RIPS [<xref rid="pone.0225196.ref008" ref-type="bibr">8</xref>] and Pixy [<xref rid="pone.0225196.ref009" ref-type="bibr">9</xref>]. Those tools are much faster than traditional manual auditing, but they require features to address vulnerabilities, which is often not feasible for some complicated vulnerabilities. With the development of machine learning, more and more scholars began to seek methods in machine learning and deep learning fields. They usually manually extracted some features for traditional machine learning models or defined lots of sensitive taint functions to auxiliary detect vulnerabilities.</p>
    <sec id="sec002">
      <title>Our contributions</title>
      <p>In this paper, we proposed a static PHP source code analysis model named TAP, which bases on token and deep learning technology. TAP neither requires to extract any features vectors manually, nor defines any sensitive taint functions. In order to facilitate the processing of machine learning models, a custom tokenizer was designed. The major contributions of this paper are summarized as follows:</p>
      <list list-type="bullet">
        <list-item>
          <p>In this paper, a custom tokenizer was designed based on the token mechanism of PHP. The tokenizer not only can parse source codes into tokens with more available information, but also deal with some features of PHP well.</p>
        </list-item>
        <list-item>
          <p>This paper proposed a new convenient method of performing data flow analysis. Source codes are transformed into abstract operation sequences by iterating parameter change without executing any codes.</p>
        </list-item>
        <list-item>
          <p>In this paper, TAP, which is based on the token mechanism and deep learning technology, was proposed as an analysis model to discover the PHP vulnerabilities. As far as we know, TAP is the only deep learning model that can deal with more than 7 categories of PHP vulnerabilities well. According to our experimental evaluation, TAP achieves 0.9941 AUC and 0.9787 accuracies on the CWE-89 dataset. Compared with contrasts, TAP shows much better with 0.8319 Kappa in multiclass classification.</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec id="sec003">
    <title>Related work</title>
    <p>There are two major categories in the field of source-code static analysis. One is making tools based on expert knowledge and experience, and another is applying machine learning technology to detect vulnerabilities automatically.</p>
    <p>There are some well-known traditional tools. Pixy [<xref rid="pone.0225196.ref009" ref-type="bibr">9</xref>] combines flow-sensitive, interprocedural with context-sensitive techniques for detecting vulnerabilities. But Pixy only focuses on cross-site scripting(XSS), the authors of Pixy consider that Pixy can detect other taint-style vulnerabilities like Structured Query Language(SQL) injection and command injection by some engineering effort. RIPS [<xref rid="pone.0225196.ref008" ref-type="bibr">8</xref>] is different from Pixy which must run in Java environment, RIPS is a PHP program that uses the inbuilt PHP tokenizer functions, and it focuses on sensitive functions and taint inputs data flow analysis. SAFERPHP [<xref rid="pone.0225196.ref010" ref-type="bibr">10</xref>] combines taint analysis with control-flow graph (CFG) [<xref rid="pone.0225196.ref011" ref-type="bibr">11</xref>] to find some semantic vulnerabilities like missing authorization problems and Denial-of-Service(DoS).</p>
    <p>It is very inconvenient to keep on updating new detective modules for these tools. While there appear new attack skills, experts must immediately find the features of vulnerabilities and update the sensitive functions lists. For example, RIPS added some PHP magic methods in the watch list for the Property-Oriented Programming (POP) vulnerability in an update [<xref rid="pone.0225196.ref012" ref-type="bibr">12</xref>].</p>
    <p>In recent years, data mining and machine learning have made a lot of progress in the fields of exploiting vulnerabilities. An earlier study was based on code similarity for C programs, Yamaguchi et al. [<xref rid="pone.0225196.ref013" ref-type="bibr">13</xref>] embedded Application Program Interface(API) usage patterns in a vector space and applied Principal Component Analysis(PCA) to detect similar vulnerabilities in the same type structure as the provided original sample. Soon later, Yamaguchi et al. [<xref rid="pone.0225196.ref014" ref-type="bibr">14</xref>] put forward the concept of Code Property Graphs (CPGs) which is a joint representation of a program’s syntax, control flow, and data flow. Based on this theory, Backs et al. [<xref rid="pone.0225196.ref015" ref-type="bibr">15</xref>] transformed PHP code into CPGs and identified vulnerabilities via graph traversals. Russell et al. [<xref rid="pone.0225196.ref016" ref-type="bibr">16</xref>] created a custom C/C++ lexer. Then they combined feature-extraction approaches of random forest(RF) [<xref rid="pone.0225196.ref017" ref-type="bibr">17</xref>] and Convolutional Neural Network (CNN) [<xref rid="pone.0225196.ref018" ref-type="bibr">18</xref>] to develop a function-level vulnerability detection model. VulDeePecker [<xref rid="pone.0225196.ref019" ref-type="bibr">19</xref>] is a vulnerability detection system based on deep learning. It focuses on library/API function calls and uses custom code gadgets to transform C/C++ codes into vectors. Through experiments, the authors found Bidirectional LSTM (BiLSTM) network [<xref rid="pone.0225196.ref020" ref-type="bibr">20</xref>] achieved the best effect. NAVEX [<xref rid="pone.0225196.ref021" ref-type="bibr">21</xref>] checks the sinks, sanitizations, traversal types and attack strings according to the prescribed dictionaries. Then, it obtains the data stream by traversing the generated CPGs. Especially, NAVEX combines dynamic execution methods to generate concrete exploits. NAVEX can detect SQL injection, XSS, Execution After Redirect(EAR) [<xref rid="pone.0225196.ref022" ref-type="bibr">22</xref>] and command injection vulnerabilities.</p>
    <p>Most of the above tools and models are limited to testing a few vulnerabilities, and some of them use an auxiliary sink list to find possible vulnerability functions. The sink list mechanism needs experts to find the feature functions triggered by the vulnerability in time when a new vulnerability occurs. It is the same problem as traditional tools. Most scholars are inclined to generate complex graphs. However, the cost of building a graph structure is very high, and most generator is based on third-party tools. For solving those problems, we designed TAP which is based on the token mechanism and obtains multiclass vulnerabilities knowledge automatically only by inputting vulnerable and safe samples.</p>
  </sec>
  <sec sec-type="materials|methods" id="sec004">
    <title>Methods</title>
    <p>We put forward some tokenized methods to deal with PHP code and data flow. The flow chart of TAP is shown in the <xref ref-type="fig" rid="pone.0225196.g001">Fig 1</xref>. According to features of PHP, our custom tokenizer particularly parses strings, numbers and functions based on the PHP original token mechanism. After unifying tokens, the tokenizer iterates variables to achieve data flow analysis, and it will only preserve lines of code with functions. Then we use word2vec model to obtain vectors and use the LSTM network to train TAP. Finally, TAP can recognize more than 7 categories of vulnerabilities.</p>
    <fig id="pone.0225196.g001" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g001</object-id>
      <label>Fig 1</label>
      <caption>
        <title>Overview of TAP.</title>
      </caption>
      <graphic xlink:href="pone.0225196.g001"/>
    </fig>
    <p>The PHP inbuilt function <italic>token_get_all()</italic> can parse code into PHP tokens by Zend engine [<xref rid="pone.0225196.ref023" ref-type="bibr">23</xref>]. Each PHP keywords and symbols will be translated into a word which begins with a capital letter T. As shown in the <xref ref-type="fig" rid="pone.0225196.g002">Fig 2</xref>, function <italic>token_get_all()</italic> can recognize HTML code, comments and composite symbols, and it can also locate the line where the code appears. But this function will parse any strings into the same token <italic>T_CONSTANT_ENCAPSED_STRING</italic>, and it is adverse to extract information from strings because of losses of any string content details. The same is true of numbers.</p>
    <fig id="pone.0225196.g002" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g002</object-id>
      <label>Fig 2</label>
      <caption>
        <title>Example of PHP inbuilt function.</title>
      </caption>
      <graphic xlink:href="pone.0225196.g002"/>
    </fig>
    <p>Besides, function <italic>token_get_all()</italic> only recognizes PHP keywords and few of functions. Other functions and identifiers like class names are all parsed into token <italic>T_STRING</italic> [<xref rid="pone.0225196.ref024" ref-type="bibr">24</xref>], and it will be very difficult for the deep learning model to recognize PHP code. Thus it is necessary to optimize standard PHP tokenizer.</p>
    <sec id="sec005">
      <title>Parsing strings</title>
      <p>According to our previous knowledge about vulnerabilities, we deem that the boundary symbols of strings are more likely to associate with SQL injection and other vulnerabilities than the contents of whole strings. So the custom tokenizer scans every string to extract boundary symbols. For example, a constant string <italic>SELECT * FROM A where A.B =’</italic> will be only parsed into <italic>T_CONSTANT_ENCAPSED_STRING</italic> by inbuilt function <italic>token_get_all()</italic>, but the tokenizer of TAP will parse it into <italic>T_CONSTANT_ENCAPSED_STRING</italic>’ for emphasizing the single quote.</p>
      <p>Besides, there is a PHP specific case that variables will be parsed when they are between double quotation marks. So the boundary symbol does not only mean the first and last characters of strings, but also means the characters adjacent to variables between double quotation marks.</p>
      <p>As shown in <xref ref-type="fig" rid="pone.0225196.g003">Fig 3</xref>, <italic>$sql1</italic> and <italic>$sql2</italic> are the different expressions of the same SQL query sentence. PHP inbuilt function <italic>token_get_all()</italic> parsed them into different token sequences. In particular, <italic>$sql1</italic> has extra delimiter quotation marks for strings which are meaningless. This inconsistency would cause the model to handle codes incorrectly.</p>
      <fig id="pone.0225196.g003" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g003</object-id>
        <label>Fig 3</label>
        <caption>
          <title>Comparison of parsing different boundary situations.</title>
        </caption>
        <graphic xlink:href="pone.0225196.g003"/>
      </fig>
      <p>Our tokenizer can perfectly recognize different boundary situations and the special characters of the boundary. Besides, our tokenizer unifies tokens of various forms for facilitating identification.</p>
    </sec>
    <sec id="sec006">
      <title>Parsing numbers</title>
      <p>Integer type numbers are usually used in config options, and lots of misconfigure issues just because of a wrong integer. But if all integers are parsed into the same token <italic>T_LNUMBER</italic>, our model will have no idea what the real config options are and cannot locate this type of vulnerability. For solving this problem, we decide to keep the original value of integer type number, which means the tokenizer of TAP will not parse integers and integer type variables into tokens.</p>
    </sec>
    <sec id="sec007">
      <title>Parsing functions</title>
      <p>Function <italic>token_get_all()</italic> cannot obtain the information of function names, because all function names are parsed into token <italic>T_STRING</italic>. We use function <italic>function_exists()</italic> to judge whether they are defined functions or not. Next, our tokenizer will keep the function name when it is a defined function or its token is <italic>T_STRING</italic>. Besides, several functions of old versions are abolished by upgrading PHP 7, so we collect and remain abandoned functions which are not recognized by PHP 7’s function <italic>function_exists()</italic> for downward compatibility.</p>
    </sec>
    <sec id="sec008">
      <title>Unifying tokens</title>
      <p>The names of functions are different from each other, in fact, some functions implement similar or even the same purpose. For preventing the deep learning model from getting entangled in the different names of the same functions, we maintain a list that is used to unify the similar functions’ tokens. The whole list is shown in <xref rid="pone.0225196.t001" ref-type="table">Table 1</xref>.</p>
      <table-wrap id="pone.0225196.t001" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t001</object-id>
        <label>Table 1</label>
        <caption>
          <title>List of uniform tokens.</title>
        </caption>
        <alternatives>
          <graphic id="pone.0225196.t001g" xlink:href="pone.0225196.t001"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Uniform tokens</th>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Token names or function names</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_IGNORE</td>
                <td align="center" rowspan="1" colspan="1">T_DOC_COMMENT, T_COMMENT, T_INLINE_HTML, T_WHITESPACE, T_OPEN_TAG, T_CLOSE_TAG</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_ASSIGNMENT</td>
                <td align="center" rowspan="1" colspan="1">T_AND_EQUAL, T_CONCAT_EQUAL, T_DIV_EQUAL, T_MINUS_EQUAL, T_MOD_EQUAL, T_MUL_EQUAL, T_OR_EQUAL, T_PLUS_EQUAL, T_SL_EQUAL, T_SR_EQUAL, T_XOR_EQUAL</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_COMPARISON</td>
                <td align="center" rowspan="1" colspan="1">T_IS_EQUAL, T_IS_GREATER_OR_EQUAL, T_IS_IDENTICAL, T_IS_NOT_EQUAL, T_IS_NOT_IDENTICAL, T_IS_SMALLER_OR_EQUAL</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_INCLUDES</td>
                <td align="center" rowspan="1" colspan="1">T_INCLUDE, T_INCLUDE_ONCE, T_REQUIRE, T_REQUIRE_ONCE</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_ECHO</td>
                <td align="center" rowspan="1" colspan="1">T_PRINT, T_ECHO, T_EXIT, T_OPEN_TAG_WITH_ECHO, print_r, printf, vprintf, trigger_error, user_error, odbc_result_all, ifx_htmltbl_result</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_INPUT</td>
                <td align="center" rowspan="1" colspan="1">$_GET, $_POST, $_COOKIE, $_REQUEST, $_FILES, $_SERVER, $HTTP_GET_VARS, $HTTP_POST_VARS, $HTTP_COOKIE_VARS, $HTTP_REQUEST_VARS, $HTTP_POST_FILES, $HTTP_SERVER_VARS, $HTTP_RAW_POST_DATA, $argc, $argv, get_headers, getallheaders, get_browser, import_request_variables</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_PREG</td>
                <td align="center" rowspan="1" colspan="1">preg_filter, preg_grep, preg_last_error, preg_match_all, preg_match, preg_quote, eregi, preg_replace_callback, preg_replace, ereg_replace, ereg, eregi_replace,</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_EXEC</td>
                <td align="center" rowspan="1" colspan="1">backticks, exec, expect_popen, passthru, pcntl_exec, popen, eval, proc_open, shell_exec, system,</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">T_SQL</td>
                <td align="center" rowspan="1" colspan="1">dba_insert, dba_fetch, dba_delete, dbx_query, odbc_do, odbc_exec, odbc_execute, db2_exec, db2_execute, fbsql_db_query, fbsql_query, ibase_query, ibase_execute, ifx_query, ifx_do, ingres_query, ingres_execute, ingres_unbuffered_query, msql_db_query, msql_query, mssql_query, sybase_unbuffered_query, mssql_execute, mysql_db_query, mysql_query, mysql_unbuffered_query, mysqli_stmt_execute, mysqli_query, mysqli_real_query, mysqli_master_query, oci_execute, ociexecute, ovrimos_exec, ovrimos_execute, ora_do, ora_exec, pg_query, pg_send_query, pg_send_query_params, pg_send_prepare, pg_prepare, sqlite_open, sqlite_popen, sqlite_array_query, arrayQuery, singleQuery, sqlite_query, sqlite_exec, sqlite_single_query, sqlite_unbuffered_query, sybase_query,</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
      </table-wrap>
      <p>For example, in the fifth line of the <xref rid="pone.0225196.t001" ref-type="table">Table 1</xref>, functions <italic>include()</italic>, <italic>include_once()</italic>, <italic>require()</italic> and <italic>require_once()</italic> are parsed into 4 different token names by PHP inbuilt function. However, they all implement the same purpose which is importing another local file, so our tokenizer parses them into the same token <italic>T_INCLUDES</italic>. We can not recognize all functions or variables through token names parsed by inbuilt function. Thus we have to combine token names with function names to unify tokens.</p>
      <p>As a special case, tokens which are unprofitable to analyze will be eliminated, the second line of <xref rid="pone.0225196.t001" ref-type="table">Table 1</xref> is the ignored tokens list.</p>
    </sec>
    <sec id="sec009">
      <title>Data flow analysis</title>
      <p>It is a nodus that tracking the variable change in static code analysis. The custom tokenizer records and iterates the changes of variables when a line of code is an assignment statement. It sounds like symbolic execution [<xref rid="pone.0225196.ref017" ref-type="bibr">17</xref>], but our method does not execute the PHP code and only records operations on variables. Our method not only reduces the difficulty of implementation and time cost but also achieves the work of data flow analysis. As shown in <xref ref-type="fig" rid="pone.0225196.g004">Fig 4</xref>, the variable <italic>$result</italic> only records that function <italic>mysql_query()</italic> processed <italic>$sql</italic> and <italic>$con</italic>, and it does not obtain the execution result of this line of codes.</p>
      <fig id="pone.0225196.g004" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g004</object-id>
        <label>Fig 4</label>
        <caption>
          <title>Example of variable iterations.</title>
        </caption>
        <graphic xlink:href="pone.0225196.g004"/>
      </fig>
      <p>According to our understanding of PHP codes, we found that one line of vulnerable codes must include at least one function, other code statements such as assignment and definition will not be directly linked to the vulnerabilities.</p>
      <p>Therefore, the tokenizer of TAP will only keep lines of codes with functions and substitute the iterative variable value for the corresponding variable name. These can conduce to the deep learning model dealing with parameter passing and discover the lines of codes directly related to vulnerabilities.</p>
      <p>The final result of TAP’s custom tokenizer is shown in <xref ref-type="fig" rid="pone.0225196.g005">Fig 5</xref>. Our tokenizer only remains the last line of codes because it executes a function. Moreover, it can be found that the tokenizer accurately recognizes the parameter content of the echo function is the second item of the array variable.</p>
      <fig id="pone.0225196.g005" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g005</object-id>
        <label>Fig 5</label>
        <caption>
          <title>Example of the TAP’s custom tokenizer.</title>
        </caption>
        <graphic xlink:href="pone.0225196.g005"/>
      </fig>
    </sec>
    <sec id="sec010">
      <title>Algorithm model</title>
      <sec id="sec011">
        <title>Embedding</title>
        <p>One-hot encoding is a primary embedding method that outputs a discrete sparse matrix. In essence, it is a bag of words model. One-hot encoding ignores the order of words and assumes that words are independent of each other. Word2vec [<xref rid="pone.0225196.ref025" ref-type="bibr">25</xref>] is a kind of word embeddings methods that can transform the corpus of text into a vector space by using a neural network. It can preserve the semantic and syntactic relationships.</p>
        <p>We consider that program language is similar to natural language. The meaning of words influences each other, and the sequence of words should be treated with caution because a different position of a word may make the meaning of a sentence opposite. Besides, our tokenizer parses user-defined functions as tokens. Vectors will be too sparse and cause dimensional disasters after one-hot encoding. Thus we choose word2vec rather than one-hot encoding.</p>
      </sec>
      <sec id="sec012">
        <title>Basic model</title>
        <p>CNN algorithm supposes that input and output are also independent, and elements are independent of each other. CNN is often used in image recognition field. Recurrent Neural Network(RNN) has an internal state to process input sequences, and it is suitable for sequencing data such as voice record, text data and so on. But there are the exploding and vanishing gradient problems in the RNN model.</p>
        <p>LSTM network [<xref rid="pone.0225196.ref026" ref-type="bibr">26</xref>] is an improved RNN [<xref rid="pone.0225196.ref027" ref-type="bibr">27</xref>] for dealing with long-term dependencies. There are an input gate, an output gate and a forget gate in an LSTM network unit to solve the exploding and vanishing gradient problems in traditional RNN. It means the LSTM model can remember more history information and distant words than RNN. Thus we consider that the LSTM network is more suitable for our datasets, the experience also proves it.</p>
      </sec>
    </sec>
  </sec>
  <sec id="sec013">
    <title>Experimental</title>
    <sec id="sec014">
      <title>Dataset</title>
      <sec id="sec015">
        <title>SARD</title>
        <p>Bertrand Stivalet and Elizabeth Fong [<xref rid="pone.0225196.ref028" ref-type="bibr">28</xref>] proposed a method to generate PHP test cases automatically. The generated PHP test cases were uploaded to the SARD, which is a subject of the National Institute of Standards and Technology(NIST) [<xref rid="pone.0225196.ref029" ref-type="bibr">29</xref>].</p>
        <p>All 42212 files are consisting of 29258 safe samples and 12954 unsafe samples in provided datasets. Those vulnerable samples contain 12 categories of Common Weakness Enumeration(CWE) vulnerabilities, such as CWE-78: OS Command Injection, CWE-79 Cross-site Scripting and so on. It is necessary for deep learning model to be offered sufficient data, so we had to discard three subsets of less than 10 samples, which are CWE-209: Information Exposure Through an Error Message, CWE-311: Missing Encryption of Sensitive Data and CWE-327: Use of a Broken or Risky Cryptographic Algorithm.</p>
        <p>The statistics of PHP test cases we used are shown in <xref rid="pone.0225196.t002" ref-type="table">Table 2</xref>. In our experiment, the datasets are divided into the training dataset, validation dataset and test dataset with the ratio of 7:1:2.</p>
        <table-wrap id="pone.0225196.t002" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t002</object-id>
          <label>Table 2</label>
          <caption>
            <title>The statistics of datasets.</title>
          </caption>
          <alternatives>
            <graphic id="pone.0225196.t002g" xlink:href="pone.0225196.t002"/>
            <table frame="box" rules="all" border="0">
              <colgroup span="1">
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">CWEs</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Safe samples</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Vulnerable samples</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Totals</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-78: OS Command Injection</td>
                  <td align="center" rowspan="1" colspan="1">1872</td>
                  <td align="center" rowspan="1" colspan="1">624</td>
                  <td align="center" rowspan="1" colspan="1">2496</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-79: Cross-site Scripting</td>
                  <td align="center" rowspan="1" colspan="1">5728</td>
                  <td align="center" rowspan="1" colspan="1">4352</td>
                  <td align="center" rowspan="1" colspan="1">10080</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-89: SQL Injection</td>
                  <td align="center" rowspan="1" colspan="1">8640</td>
                  <td align="center" rowspan="1" colspan="1">912</td>
                  <td align="center" rowspan="1" colspan="1">9552</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-90: LDAP Injection</td>
                  <td align="center" rowspan="1" colspan="1">1728</td>
                  <td align="center" rowspan="1" colspan="1">2112</td>
                  <td align="center" rowspan="1" colspan="1">3840</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-91: XML Injection</td>
                  <td align="center" rowspan="1" colspan="1">4784</td>
                  <td align="center" rowspan="1" colspan="1">1264</td>
                  <td align="center" rowspan="1" colspan="1">6048</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-95: Eval Injection</td>
                  <td align="center" rowspan="1" colspan="1">1296</td>
                  <td align="center" rowspan="1" colspan="1">336</td>
                  <td align="center" rowspan="1" colspan="1">1632</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-98: PHP Remote File Inclusion</td>
                  <td align="center" rowspan="1" colspan="1">2592</td>
                  <td align="center" rowspan="1" colspan="1">672</td>
                  <td align="center" rowspan="1" colspan="1">3264</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-601: Open Redirect</td>
                  <td align="center" rowspan="1" colspan="1">2208</td>
                  <td align="center" rowspan="1" colspan="1">2592</td>
                  <td align="center" rowspan="1" colspan="1">4800</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">CWE-862: Missing Authorization</td>
                  <td align="center" rowspan="1" colspan="1">400</td>
                  <td align="center" rowspan="1" colspan="1">80</td>
                  <td align="center" rowspan="1" colspan="1">480</td>
                </tr>
                <tr>
                  <td align="left" rowspan="1" colspan="1">Totals</td>
                  <td align="center" rowspan="1" colspan="1">29248</td>
                  <td align="center" rowspan="1" colspan="1">12944</td>
                  <td align="center" rowspan="1" colspan="1">42192</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
      </sec>
      <sec id="sec016">
        <title>SQLI-LABS</title>
        <p>SQLI-LABS is a CWE-89 SQL injection training application for the security researcher, and it contains SQL injection vulnerability in more than ten different situations. We have sorted out 69 sample files related to vulnerability. Also, the datasets are divided into the training dataset, validation dataset and test dataset with the ratio of 7:1:2.</p>
      </sec>
    </sec>
    <sec id="sec017">
      <title>Experiments</title>
      <p>To evaluate TAP, we performed experiments by using a Ubuntu server with a 4-core 3.6 GHz Intel Core i7-7700 processor, a 6GB GeForce GTX 1060 Graphics Processing Unit(GPU) and 16GB memory.</p>
      <p>First of all, we manually checked all the datasets and found many errors in the PHP test cases. As shown in the <xref rid="pone.0225196.t003" ref-type="table">Table 3</xref>, we found 800 variable misused errors in 800 files and replaced the undefined constant “checked_data” with the right variable “$tainted” which is a tainted input according to context. We found 192 handwriting errors in 96 files, “tainted” was wrongly written as “tained” in those files. In 192 safe sample files, we found another 960 handwriting errors that the assignment symbol in the array was written as “= &gt;” whose correct form is “=&gt;”. Another problem is quotation marks misuse errors. There are the curly double open quote and curly double close quote which the PHP program cannot recognize in 4 files.</p>
      <table-wrap id="pone.0225196.t003" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t003</object-id>
        <label>Table 3</label>
        <caption>
          <title>Errors found by manul check.</title>
        </caption>
        <alternatives>
          <graphic id="pone.0225196.t003g" xlink:href="pone.0225196.t003"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Errors</th>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Corrections</th>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Safe samples<break/>(errors/files)</th>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Vulnerable samples<break/>(errors/files)</th>
                <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Totals<break/>(errors/files)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="center" rowspan="1" colspan="1">checked_data</td>
                <td align="center" rowspan="1" colspan="1">$tainted</td>
                <td align="center" rowspan="1" colspan="1">448/448</td>
                <td align="center" rowspan="1" colspan="1">352/352</td>
                <td align="center" rowspan="1" colspan="1">800/800</td>
              </tr>
              <tr>
                <td align="center" rowspan="1" colspan="1">tained</td>
                <td align="center" rowspan="1" colspan="1">tainted</td>
                <td align="center" rowspan="1" colspan="1">192/96</td>
                <td align="center" rowspan="1" colspan="1">0/0</td>
                <td align="center" rowspan="1" colspan="1">192/96</td>
              </tr>
              <tr>
                <td align="center" rowspan="1" colspan="1">= &gt;</td>
                <td align="center" rowspan="1" colspan="1">= &gt;</td>
                <td align="center" rowspan="1" colspan="1">960/192</td>
                <td align="center" rowspan="1" colspan="1">0/0</td>
                <td align="center" rowspan="1" colspan="1">960/192</td>
              </tr>
              <tr>
                <td align="center" rowspan="1" colspan="1">”</td>
                <td align="center" rowspan="1" colspan="1">″</td>
                <td align="center" rowspan="1" colspan="1">4/2</td>
                <td align="center" rowspan="1" colspan="1">4/2</td>
                <td align="center" rowspan="1" colspan="1">8/4</td>
              </tr>
              <tr>
                <td align="center" rowspan="1" colspan="1">“</td>
                <td align="center" rowspan="1" colspan="1">″</td>
                <td align="center" rowspan="1" colspan="1">4/2</td>
                <td align="center" rowspan="1" colspan="1">4/2</td>
                <td align="center" rowspan="1" colspan="1">8/4</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
      </table-wrap>
      <p>We trained two models to compare the binary classification models and the multiclass classification models, respectively.</p>
      <sec id="sec018">
        <title>Binary classification model</title>
        <p>We compared TAP with other algorithms on CWE-89 samples of the SARD and SQLI-LABS vulnerability dataset to prove the superiority of TAP in the binary classification.</p>
        <p>After parsing, the word2vec model was trained based on training data. We thought every word had meaning even if it appeared only once, so parameter min_count is set to 1. The maximum distance between the current word and the prediction word in a sequence is 20. Each word will be translated into 256 dimensions via our word2vec model. To take into account the effect of all vectors, the maximum input length is set to 835 which is a litter larger than the maximum length of sequences. Since the LSTM network must input a fixed-length sequence, the insufficient input tokens will be padded with zeros.</p>
        <p>The number of safe samples is more than 9 times that of vulnerability samples. In fact, it is a very common situation in the real world, most of the codes are safe, and some type of vulnerabilities are rare. Imbalanced positive and negative samples will lead to a biased model, so the weight of each category should be adjusted. We increased the weight of categories with fewer samples and reduced the weight of categories with more samples. The weight is inversely proportional to the amount of data and all weights add up to 1.</p>
        <p>We added an LSTM network layer and a 50% dropout layer for preventing overfitting. The last layer is a 1 unit dense layer with “sigmoid” activation. We performed dozens of comparative experiments to evaluate the parameters and selected a few key parameters to make an intuitive graph as shown in the <xref ref-type="fig" rid="pone.0225196.g006">Fig 6</xref>. By comparing the results, we decided to adopt the following values of parameters. The dimension of vector is set to 256, the number of LSTM units is set to 128, the value of batch size is set to 512, the epochs are set to 60, the loss function is set to “mse”, the optimizer is “adam” and the number of learning rate is set to 0.0001.</p>
        <fig id="pone.0225196.g006" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g006</object-id>
          <label>Fig 6</label>
          <caption>
            <title>Control experiments of model parameters.</title>
          </caption>
          <graphic xlink:href="pone.0225196.g006"/>
        </fig>
      </sec>
      <sec id="sec019">
        <title>Multiclass classfication model</title>
        <p>TAP was compared with other tools on all categories of the SARD datasets to prove the ability of multiclass classifications.</p>
        <p>After correcting errors, all the datasets are divided into 10 categories, including 9 categories of CWE vulnerabilities and a safe category comprises all safe samples. Next, we parsed raw codes into tokens by our custom tokenizer.</p>
        <p>Other parameters are the same as the binary classifier model, except some config of neural network. The length of the longest input sequence is set to 350. Besides, this is a 10 categories classification problem, so the last output layer is a 10 units dense layer with “softmax” activation, and loss function is set to “categorical_crossentropy”.</p>
      </sec>
    </sec>
  </sec>
  <sec id="sec020">
    <title>Evaluation</title>
    <sec id="sec021">
      <title>Evaluation criteria</title>
      <sec id="sec022">
        <title>F1 score</title>
        <p>The F1 score is an important metric of evaluating security models [<xref rid="pone.0225196.ref030" ref-type="bibr">30</xref>]. It also takes into account the accuracy and recall rate of the classification model.</p>
        <p>First, we will introduce some basic concepts:</p>
        <p>True Positive(TP) is the number of samples where the predicted and the real label are both positive.</p>
        <p>False Positive(FP) is the number of samples where the predicted label is positive, but the real label is negative.</p>
        <p>True Negative(TN) is the number of samples where the predicted and the real label are both negative.</p>
        <p>False Negative(FN) is the number of samples where the predicted label is negative, but the real label is positive.</p>
        <p>The formulas for precision and recall are as follows:
<disp-formula id="pone.0225196.e001"><alternatives><graphic xlink:href="pone.0225196.e001.jpg" id="pone.0225196.e001g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M1"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mtext>Precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(1)</label></disp-formula>
<disp-formula id="pone.0225196.e002"><alternatives><graphic xlink:href="pone.0225196.e002.jpg" id="pone.0225196.e002g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M2"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mtext>Recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mi>P</mml:mi><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mi>N</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(2)</label></disp-formula></p>
        <p>Thus, the complete F1 score formula are as follows:
<disp-formula id="pone.0225196.e003"><alternatives><graphic xlink:href="pone.0225196.e003.jpg" id="pone.0225196.e003g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M3"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>F</mml:mi><mml:mn>1</mml:mn><mml:mo>=</mml:mo><mml:mn>2</mml:mn><mml:mo>·</mml:mo><mml:mfrac><mml:mrow><mml:mtext>precision</mml:mtext><mml:mo>·</mml:mo><mml:mtext>recall</mml:mtext></mml:mrow><mml:mrow><mml:mtext>precision</mml:mtext><mml:mo>+</mml:mo><mml:mtext>recall</mml:mtext></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(3)</label></disp-formula></p>
      </sec>
      <sec id="sec023">
        <title>ROC</title>
        <p>Receiver Operating Characteristic(ROC) [<xref rid="pone.0225196.ref031" ref-type="bibr">31</xref>] curve is usually used to evaluate the diagnostic ability of binary classifiers. The <italic>x</italic>-axis is the False Positive Rate(FPR) and the <italic>y</italic>-axis is the True Positive Rate(TPR). According to the predicted probability value and the real label of each test sample, different points predicted by the model can be obtained by adjusting the threshold. These points can be connected to a curve, which is called the ROC curve. The larger the AUC, the better the effect of the model.
<disp-formula id="pone.0225196.e004"><alternatives><graphic xlink:href="pone.0225196.e004.jpg" id="pone.0225196.e004g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M4"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mtext>TPR</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mtext>TP</mml:mtext><mml:mrow><mml:mtext>TP</mml:mtext><mml:mo>+</mml:mo><mml:mtext>FN</mml:mtext></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(4)</label></disp-formula>
<disp-formula id="pone.0225196.e005"><alternatives><graphic xlink:href="pone.0225196.e005.jpg" id="pone.0225196.e005g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M5"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mtext>FPR</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mtext>FP</mml:mtext><mml:mrow><mml:mtext>FP</mml:mtext><mml:mo>+</mml:mo><mml:mtext>TN</mml:mtext></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(5)</label></disp-formula></p>
      </sec>
      <sec id="sec024">
        <title>Confusion matrix</title>
        <p>Multiclass classification models usually use the confusion matrix to illustrate diagnostic ability. The confusion matrix is a unique table used to show the classification effect of models visually. The rows and columns of the table are the real categories and the categories predicted by the model, respectively. Assuming that <italic>x</italic>-axis is predicted category and <italic>y</italic>-axis is the real category, then the numbers in cells of row <italic>i</italic> and column <italic>j</italic> represent the number of samples that belongs to category <italic>i</italic> but are predicted to category <italic>j</italic>. Thus, the data on the diagonal from the top left to the bottom right shows that the number of correct classifications.</p>
        <p>In general, specific numerical values are filled in the form, and sometimes the regularized results can also be filled in. The regularized number in the cell of row <italic>i</italic> and column <italic>j</italic> is the number in the cell of row <italic>i</italic> and column <italic>j</italic> divides by the sum of the numbers of cells in row <italic>i</italic>.</p>
      </sec>
      <sec id="sec025">
        <title>Kappa statistic</title>
        <p>Kappa statistic is used for checking consistency and measuring classification accuracy. The calculation of the kappa coefficient is based on the confusion matrix.
<disp-formula id="pone.0225196.e006"><alternatives><graphic xlink:href="pone.0225196.e006.jpg" id="pone.0225196.e006g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M6"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>κ</mml:mi><mml:mo>≡</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>o</mml:mi></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>o</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(6)</label></disp-formula>
<italic>p</italic><sub><italic>o</italic></sub> is the overall classification accuracy. <italic>p</italic><sub><italic>e</italic></sub> represents the probability that the prediction results are consistent with the monitoring results by accident. Assuming that <italic>k</italic> is the total number of categories and <italic>N</italic> is the total number of samples, <italic>n</italic><sub><italic>ij</italic></sub> indicates the number of categories <italic>i</italic> but predicted to be <italic>j</italic>.
<disp-formula id="pone.0225196.e007"><alternatives><graphic xlink:href="pone.0225196.e007.jpg" id="pone.0225196.e007g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M7"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>o</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>N</mml:mi></mml:mfrac><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(7)</label></disp-formula>
<disp-formula id="pone.0225196.e008"><alternatives><graphic xlink:href="pone.0225196.e008.jpg" id="pone.0225196.e008g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M8"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mfrac><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(8)</label></disp-formula></p>
        <p>Kappa value ranges from -1 to 1, but it is generally between 0 and 1 to evaluate the effect [<xref rid="pone.0225196.ref032" ref-type="bibr">32</xref>]. The detailed evaluation standard is shown in <xref rid="pone.0225196.t004" ref-type="table">Table 4</xref>.</p>
        <table-wrap id="pone.0225196.t004" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t004</object-id>
          <label>Table 4</label>
          <caption>
            <title>Effect evaluation of Kappa statistic.</title>
          </caption>
          <alternatives>
            <graphic id="pone.0225196.t004g" xlink:href="pone.0225196.t004"/>
            <table frame="box" rules="all" border="0">
              <colgroup span="1">
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th align="center" rowspan="1" colspan="1">Kappa Statistic</th>
                  <th align="center" rowspan="1" colspan="1">&lt;0.00</th>
                  <th align="center" rowspan="1" colspan="1">0.00-0.20</th>
                  <th align="center" rowspan="1" colspan="1">0.21-0.40</th>
                  <th align="center" rowspan="1" colspan="1">0.41-0.60</th>
                  <th align="center" rowspan="1" colspan="1">0.61-0.80</th>
                  <th align="center" rowspan="1" colspan="1">0.81-1.00</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center" rowspan="1" colspan="1">Strength of Agreement</td>
                  <td align="center" rowspan="1" colspan="1">Poor</td>
                  <td align="center" rowspan="1" colspan="1">Slight</td>
                  <td align="center" rowspan="1" colspan="1">Fair</td>
                  <td align="center" rowspan="1" colspan="1">Moderate</td>
                  <td align="center" rowspan="1" colspan="1">Substantial</td>
                  <td align="center" rowspan="1" colspan="1">Almost Perfect</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
      </sec>
      <sec id="sec026">
        <title>Hamming distance</title>
        <p>Hamming distance measures the degree of inconsistency between the predicted categories and the real categories of samples. If <italic>y</italic> is a test dataset, <italic>y</italic><sub><italic>j</italic></sub> is the real value of a given sample of <italic>j</italic>-th label, <inline-formula id="pone.0225196.e009"><alternatives><graphic xlink:href="pone.0225196.e009.jpg" id="pone.0225196.e009g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M9"><mml:msub><mml:mover accent="true"><mml:mi>y</mml:mi><mml:mo>^</mml:mo></mml:mover><mml:mi>j</mml:mi></mml:msub></mml:math></alternatives></inline-formula> is the predicted value, <italic>n</italic> is the number of labels, and 1(<italic>x</italic>) is the indicator function, then the Hamming distance is
<disp-formula id="pone.0225196.e010"><alternatives><graphic xlink:href="pone.0225196.e010.jpg" id="pone.0225196.e010g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M10"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>H</mml:mi><mml:mi>a</mml:mi><mml:mi>m</mml:mi><mml:mi>m</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mover accent="true"><mml:mi>y</mml:mi><mml:mo>^</mml:mo></mml:mover><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>n</mml:mi></mml:mfrac><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mn>1</mml:mn><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mover accent="true"><mml:mi>y</mml:mi><mml:mo>^</mml:mo></mml:mover><mml:mi>j</mml:mi></mml:msub><mml:mo>≠</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(9)</label></disp-formula></p>
        <p>The distance is 0 when the prediction result is completely consistent with the true situation. When the prediction result is completely inconsistent with the true situation, the distance is 1; when the prediction result is partially correct, the distance is between 0 and 1. The smaller the value, the better.</p>
      </sec>
    </sec>
    <sec id="sec027">
      <title>Results and discussion</title>
      <sec id="sec028">
        <title>Comparison of binary classification models</title>
        <p>First, the custom tokenizer of TAP was compared with the inbuilt function of PHP on the CWE-89 dataset to prove the effectiveness of the custom tokenizer. The datasets includes the CWE-89 dataset of SARD and samples of SQLI-LABS. Since the length of the tokens parsed by the two models is different, the other parameters are the same except that the maximum input length.</p>
        <p>The AUC of builtin function <italic>token_get_all()</italic> is less than 0.5, so we reverse the result. The ROC curves of the two models are shown in the <xref ref-type="fig" rid="pone.0225196.g007">Fig 7</xref>. Besides, other evaluation criteria are listed in <xref rid="pone.0225196.t005" ref-type="table">Table 5</xref>, we can find that the custom tokenizer of TAP is much better than function <italic>token_get_all()</italic> in multiple metrics. In the vulnerable sample, the precision of <italic>token_get_all()</italic> model is perfectly 1, but the recall is almost zero. Thus the high precision is little significance, the F1 score also proves this.</p>
        <fig id="pone.0225196.g007" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g007</object-id>
          <label>Fig 7</label>
          <caption>
            <title>Comparison of TAP and token_get_all().</title>
          </caption>
          <graphic xlink:href="pone.0225196.g007"/>
        </fig>
        <table-wrap id="pone.0225196.t005" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t005</object-id>
          <label>Table 5</label>
          <caption>
            <title>Results comparison with TAP and token_get_all().</title>
          </caption>
          <alternatives>
            <graphic id="pone.0225196.t005g" xlink:href="pone.0225196.t005"/>
            <table frame="box" rules="all" border="0">
              <colgroup span="1">
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">Method</th>
                  <th align="center" colspan="3" rowspan="1">Safe samples</th>
                  <th align="center" colspan="3" rowspan="1">Vulnerable samples</th>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">accuracy</th>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">AUC</th>
                </tr>
                <tr>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Precision</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Recall</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">F1</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Precision</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Recall</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">F1</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center" rowspan="1" colspan="1">TAP</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9773</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9988</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9880</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9874</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.7970</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.8820</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9782</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9941</bold>
                  </td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">token_get_all()</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9047</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>1.0</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9499</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>1.0</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.0761</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.1415</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9055</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.7449</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
        <p>Next, we compared TAP with other models to prove the superiority of TAP. The models include BiLSTM, CNN, RNN, Gated Recurrent Unit(GRU), RIPS and WIRECAML [<xref rid="pone.0225196.ref033" ref-type="bibr">33</xref>]. WIRECAML is a static code analysis model based on machine learning and data-flow analysis. The author of WIRECAML compared WIRECAML with other machine learning algorithms such as random forest, logistic regression, naive Bayes and so on. WIRECAML performs best in all the machine learning algorithms, so we consider that WIRECAML represents one of the best static code analysis models based on machine learning. The hyper-parameters of TAP, BiLSTM, CNN, GRU and RNN are the same.</p>
        <p>We modified WIRECAML [<xref rid="pone.0225196.ref034" ref-type="bibr">34</xref>] program to keep the datasets consistent and obtain the required intermediate variables. WIRECAML predicts vulnerabilities per line of codes and gives an overall result. In order to get the predicted probability value of a single file, we select the maximum probability value of the source code file as the probability of the whole file.</p>
        <p>For evaluating RIPS [<xref rid="pone.0225196.ref035" ref-type="bibr">35</xref>], we ran RIPS on the test dataset and selected the detected SQL injection vulnerabilities as evaluation criteria without other possible vulnerabilities. Besides, RIPS does not judge vulnerability based on probability values, so we can not calculate the ROC and AUC of RIPS.</p>
        <p>The ROCs are shown in <xref ref-type="fig" rid="pone.0225196.g008">Fig 8</xref>. As we can see, the GRU model appears the worst, TAP which used the LSTM network algorithm is the best.</p>
        <fig id="pone.0225196.g008" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g008</object-id>
          <label>Fig 8</label>
          <caption>
            <title>ROC comparison of binary classification model.</title>
          </caption>
          <graphic xlink:href="pone.0225196.g008"/>
        </fig>
        <p>Other evaluation criteria are listed in <xref rid="pone.0225196.t006" ref-type="table">Table 6</xref>, the values in bold type are the best of the single standard. In the identification of security samples, the results of each model are good, but there is a big difference in the ability to identify vulnerable samples which we regard as more important. RIPS did not perform well on the test dataset, WIRECAML also had a low F1 score on vulnerable samples. GRU algorithm gets two perfect scores, but the F1 of vulnerable samples and AUC are too bad. The results of LSTM, BiLSTM and CNN are very similar. After comprehensive consideration, we consider that LSTM is the best.</p>
        <table-wrap id="pone.0225196.t006" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t006</object-id>
          <label>Table 6</label>
          <caption>
            <title>Evaluation criteria of binary classification model.</title>
          </caption>
          <alternatives>
            <graphic id="pone.0225196.t006g" xlink:href="pone.0225196.t006"/>
            <table frame="box" rules="all" border="0">
              <colgroup span="1">
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">Algorithms</th>
                  <th align="center" colspan="3" rowspan="1">Safe samples</th>
                  <th align="center" colspan="3" rowspan="1">Vulnerable samples</th>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">accuracy</th>
                  <th align="center" rowspan="2" style="border-bottom:thick" colspan="1">AUC</th>
                </tr>
                <tr>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Precision</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Recall</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">F1</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Precision</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Recall</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">F1</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center" rowspan="1" colspan="1">LSTM(TAP)</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9773</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9988</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9880</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9874</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.7970</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.8820</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9782</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9941</bold>
                  </td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">BiLSTM</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9740</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9902</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9856</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9061</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.8325</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8677</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9740</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9924</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">CNN</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>0.9789</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9942</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9865</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9412</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8122</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8719</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9756</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9883</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">GRU</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9020</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>1.0</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9485</td>
                  <td align="char" char="." rowspan="1" colspan="1">
                    <bold>1.0</bold>
                  </td>
                  <td align="char" char="." rowspan="1" colspan="1">0.1376</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.2419</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9035</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8764</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">RNN</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9324</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9896</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9601</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8022</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.3706</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.5069</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9262</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8777</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">WIRECAML</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9631</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9879</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9753</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8478</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.6393</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.7290</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9548</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9229</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">RIPS</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.9101</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8027</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8530</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.1496</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.3046</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.2007</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.7517</td>
                  <td align="center" rowspan="1" colspan="1">-</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
      </sec>
      <sec id="sec029">
        <title>Comparison of multiclass classification models</title>
        <p>In order to prove TAP’s ability to multiclass classification problems, we designed experiments on TAP and RIPS. We used RIPS to detect the 10 types of data subsets separately, and then manually counted and analyzed the results. The datasets are extremely imbalanced, the confusion matrix without normalization does not look intuitive and is not easy to evaluate the classification effect, so we use the normalized confusion matrix.</p>
        <p>The classification results of RIPS and TAP are shown in Figs <xref ref-type="fig" rid="pone.0225196.g009">9</xref> and <xref ref-type="fig" rid="pone.0225196.g010">10</xref>. RIPS mislabels some samples as vulnerabilities that are not included in the test dataset, and it also mislabels a single sample into multiclass vulnerabilities. In order to ensure the total number is correspond, we adjusted the number of mislabeled samples to the number which was obtained by subtracting the number of correctly identified samples from the total number of samples. For the samples with the safe label, we classify these mislabeled undefined vulnerabilities samples into CWE-862, and for the samples with the vulnerable label, we classify these mislabeled undefined vulnerabilities samples into safe. Because the built-in rules do not contain CWE-601 and CWE-862, RIPS mislabels all these two types of vulnerabilities. On the safe dataset, more than half of the samples are judged as vulnerable. On vulnerable dataset, most of them are judged as safe. It is obviously that RIPS cannot complete the multiclass classification task well on the test dataset with a very high misjudgment rate.</p>
        <fig id="pone.0225196.g009" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g009</object-id>
          <label>Fig 9</label>
          <caption>
            <title>Normalized confusion matrix of RIPS.</title>
          </caption>
          <graphic xlink:href="pone.0225196.g009"/>
        </fig>
        <fig id="pone.0225196.g010" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.g010</object-id>
          <label>Fig 10</label>
          <caption>
            <title>Normalized confusion matrix of TAP.</title>
          </caption>
          <graphic xlink:href="pone.0225196.g010"/>
        </fig>
        <p>Overall, the multiclass classification ability of TAP is well. However, lots of samples of CWE-862 are mislabeled, and even almost all CWE-95 samples are mislabeled. After analysis, we think the most likely reason is that the numbers of these two categories of datasets are too few compared to other categories. Another possible reason is that the training datasets of CWE-91 and CWE-95 are similar in content or form after parsing.</p>
        <p>Kappa and hamming distance of two models are shown in <xref rid="pone.0225196.t007" ref-type="table">Table 7</xref>. According to <xref rid="pone.0225196.t004" ref-type="table">Table 4</xref>, the Kappa of TAP indicates almost perfect, and the hamming distance is small enough. On the contrary, RIPS perform poorly both on Kappa and hamming distance.</p>
        <table-wrap id="pone.0225196.t007" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pone.0225196.t007</object-id>
          <label>Table 7</label>
          <caption>
            <title>Evaluation criteria of multiclass classification model.</title>
          </caption>
          <alternatives>
            <graphic id="pone.0225196.t007g" xlink:href="pone.0225196.t007"/>
            <table frame="box" rules="all" border="0">
              <colgroup span="1">
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
                <col align="left" valign="middle" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1"/>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Kappa</th>
                  <th align="center" style="border-bottom:thick" rowspan="1" colspan="1">Hamming Distance</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center" rowspan="1" colspan="1">TAP</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.8319</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.0840</td>
                </tr>
                <tr>
                  <td align="center" rowspan="1" colspan="1">RIPS</td>
                  <td align="char" char="." rowspan="1" colspan="1">-0.0985</td>
                  <td align="char" char="." rowspan="1" colspan="1">0.6965</td>
                </tr>
              </tbody>
            </table>
          </alternatives>
        </table-wrap>
      </sec>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec030">
    <title>Conclusion</title>
    <p>This paper presents a static PHP source code analysis model named TAP, which based on the deep learning algorithm. It can help security researchers find vulnerabilities quickly. There is a custom tokenizer in TAP based on PHP inbuilt token mechanism. The tokenizer improves the parsing ability, completes parameter iteration and analyzes data flow. Experiments show that our optimization is indeed effective and the LSTM-based model TAP is superior to CNN, RNN, GRU, BiLSTM, WIRECAML and RIPS in vulnerable binary classification and multiclass classification.</p>
    <p>For future work, we will support for processing object and more types of vulnerabilities. Besides, we want to extend TAP to the complex real-world environment.</p>
  </sec>
</body>
<back>
  <ref-list>
    <title>References</title>
    <ref id="pone.0225196.ref001">
      <label>1</label>
      <mixed-citation publication-type="book"><name><surname>Cheswick</surname><given-names>WR</given-names></name>, <name><surname>Bellovin</surname><given-names>SM</given-names></name>, <name><surname>Rubin</surname><given-names>AD</given-names></name>. <source>Firewalls and Internet security: repelling the wily hacker</source>. <publisher-name>Addison-Wesley Longman Publishing Co., Inc.</publisher-name>; <year>2003</year>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref002">
      <label>2</label>
      <mixed-citation publication-type="journal"><name><surname>Wang</surname><given-names>Y</given-names></name>, <name><surname>Shen</surname><given-names>Y</given-names></name>, <name><surname>Wang</surname><given-names>H</given-names></name>, <name><surname>Cao</surname><given-names>J</given-names></name>, <name><surname>Jiang</surname><given-names>X</given-names></name>. <article-title>MtMR: Ensuring MapReduce Computation Integrity with Merkle Tree-based Verifications</article-title>. <source>IEEE Transactions on Big Data</source>. <year>2016</year>;<volume>4</volume>(<issue>3</issue>):<fpage>418</fpage>–<lpage>431</lpage>. <pub-id pub-id-type="doi">10.1109/TBDATA.2016.2599928</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>Shu</surname><given-names>J</given-names></name>, <name><surname>Jia</surname><given-names>X</given-names></name>, <name><surname>Yang</surname><given-names>K</given-names></name>, <name><surname>Wang</surname><given-names>H</given-names></name>. <article-title>Privacy-preserving task recommendation services for crowdsourcing</article-title>. <source>IEEE Transactions on Services Computing</source>. <year>2018</year>;. <pub-id pub-id-type="doi">10.1109/TSC.2018.2791601</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref004">
      <label>4</label>
      <mixed-citation publication-type="other">F5 Labs 2018 Application Protection Report;. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.f5.com/content/dam/f5/f5-labs/articles/20180725_app_protect_report/F5_Labs_2018_Application_Protection_Report.pdf">https://www.f5.com/content/dam/f5/f5-labs/articles/20180725_app_protect_report/F5_Labs_2018_Application_Protection_Report.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref005">
      <label>5</label>
      <mixed-citation publication-type="other">Usage of content management systems for websites; 2019. Available from: <ext-link ext-link-type="uri" xlink:href="https://w3techs.com/technologies/overview/content_management/all/">https://w3techs.com/technologies/overview/content_management/all/</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref006">
      <label>6</label>
      <mixed-citation publication-type="other">CVE-2017-5223; 2017. Available from: <ext-link ext-link-type="uri" xlink:href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5223">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5223</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref007">
      <label>7</label>
      <mixed-citation publication-type="other">NVD—CVE-2016-10033; 2016. Available from: <ext-link ext-link-type="uri" xlink:href="https://nvd.nist.gov/vuln/detail/CVE-2016-10033">https://nvd.nist.gov/vuln/detail/CVE-2016-10033</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref008">
      <label>8</label>
      <mixed-citation publication-type="other">Dahse J, Schwenk J. RIPS-A static source code analyser for vulnerabilities in PHP scripts. In: Seminar Work (Seminer Çalismasi). Horst Görtz Institute Ruhr-University Bochum; 2010.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref009">
      <label>9</label>
      <mixed-citation publication-type="other">Jovanovic N, Kruegel C, Kirda E. Pixy: A static analysis tool for detecting web application vulnerabilities. In: 2006 IEEE Symposium on Security and Privacy (S&amp;P’06). IEEE; 2006. p. 6–pp.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref010">
      <label>10</label>
      <mixed-citation publication-type="other">Son S, Shmatikov V. SAFERPHP: Finding semantic vulnerabilities in PHP applications. In: Proceedings of the ACM SIGPLAN 6th Workshop on Programming Languages and Analysis for Security. ACM; 2011. p. 8.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref011">
      <label>11</label>
      <mixed-citation publication-type="journal"><name><surname>Tip</surname><given-names>F</given-names></name>. <article-title>A survey of program slicing techniques</article-title>. <source>Centrum voor Wiskunde en Informatica</source>; <year>1994</year>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref012">
      <label>12</label>
      <mixed-citation publication-type="other">Dahse J, Krein N, Holz T. Code reuse attacks in php: Automated pop chain generation. In: Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM; 2014. p. 42–53.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref013">
      <label>13</label>
      <mixed-citation publication-type="other">Yamaguchi F, Lindner F, Rieck K. Vulnerability extrapolation: assisted discovery of vulnerabilities using machine learning. In: Proceedings of the 5th USENIX conference on Offensive technologies. USENIX Association; 2011. p. 13–13.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref014">
      <label>14</label>
      <mixed-citation publication-type="other">Yamaguchi F, Golde N, Arp D, Rieck K. Modeling and discovering vulnerabilities with code property graphs. In: 2014 IEEE Symposium on Security and Privacy. IEEE; 2014. p. 590–604.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref015">
      <label>15</label>
      <mixed-citation publication-type="other">Backes M, Rieck K, Skoruppa M, Stock B, Yamaguchi F. Efficient and flexible discovery of php application vulnerabilities. In: 2017 IEEE european symposium on security and privacy (EuroS&amp;P). IEEE; 2017. p. 334–349.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref016">
      <label>16</label>
      <mixed-citation publication-type="other">Russell R, Kim L, Hamilton L, Lazovich T, Harer J, Ozdemir O, et al. Automated Vulnerability Detection in Source Code Using Deep Representation Learning. In: 2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA). IEEE; 2018. p. 757–762.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref017">
      <label>17</label>
      <mixed-citation publication-type="journal"><name><surname>King</surname><given-names>JC</given-names></name>. <article-title>Symbolic execution and program testing</article-title>. <source>Communications of the ACM</source>. <year>1976</year>;<volume>19</volume>(<issue>7</issue>):<fpage>385</fpage>–<lpage>394</lpage>. <pub-id pub-id-type="doi">10.1145/360248.360252</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref018">
      <label>18</label>
      <mixed-citation publication-type="journal"><name><surname>Lawrence</surname><given-names>S</given-names></name>, <name><surname>Giles</surname><given-names>CL</given-names></name>, <name><surname>Tsoi</surname><given-names>AC</given-names></name>, <name><surname>Back</surname><given-names>AD</given-names></name>. <article-title>Face recognition: A convolutional neural-network approach</article-title>. <source>IEEE transactions on neural networks</source>. <year>1997</year>;<volume>8</volume>(<issue>1</issue>):<fpage>98</fpage>–<lpage>113</lpage>. <pub-id pub-id-type="doi">10.1109/72.554195</pub-id><?supplied-pmid 18255614?><pub-id pub-id-type="pmid">18255614</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref019">
      <label>19</label>
      <mixed-citation publication-type="other">Li Z, Zou D, Xu S, Ou X, Jin H, Wang S, et al. VulDeePecker: A deep learning-based system for vulnerability detection. arXiv preprint arXiv:180101681. 2018;.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref020">
      <label>20</label>
      <mixed-citation publication-type="journal"><name><surname>Graves</surname><given-names>A</given-names></name>, <name><surname>Schmidhuber</surname><given-names>J</given-names></name>. <article-title>Framewise phoneme classification with bidirectional LSTM and other neural network architectures</article-title>. <source>Neural Networks</source>. <year>2005</year>;<volume>18</volume>(<issue>5-6</issue>):<fpage>602</fpage>–<lpage>610</lpage>. <pub-id pub-id-type="doi">10.1016/j.neunet.2005.06.042</pub-id><?supplied-pmid 16112549?><pub-id pub-id-type="pmid">16112549</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref021">
      <label>21</label>
      <mixed-citation publication-type="other">Alhuzali A, Gjomemo R, Eshete B, Venkatakrishnan V. NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications. In: 27th USENIX Security Symposium (USENIX Security 18); 2018. p. 377–392.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref022">
      <label>22</label>
      <mixed-citation publication-type="other">Doupé A, Boe B, Kruegel C, Vigna G. Fear the EAR: discovering and mitigating execution after redirect vulnerabilities. In: Proceedings of the 18th ACM conference on Computer and communications security. ACM; 2011. p. 251–262.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref023">
      <label>23</label>
      <mixed-citation publication-type="other">PHP: token_get_all—Manual;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.php.net/token-get-all">http://www.php.net/token-get-all</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref024">
      <label>24</label>
      <mixed-citation publication-type="other">PHP: List of Parser Tokens—Manual;. Available from: <ext-link ext-link-type="uri" xlink:href="http://php.net/manual/en/tokens.php">http://php.net/manual/en/tokens.php</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref025">
      <label>25</label>
      <mixed-citation publication-type="book"><name><surname>Mikolov</surname><given-names>T</given-names></name>, <name><surname>Sutskever</surname><given-names>I</given-names></name>, <name><surname>Chen</surname><given-names>K</given-names></name>, <name><surname>Corrado</surname><given-names>GS</given-names></name>, <name><surname>Dean</surname><given-names>J</given-names></name>. <chapter-title>Distributed representations of words and phrases and their compositionality</chapter-title> In: <source>Advances in neural information processing systems</source>; <year>2013</year> p. <fpage>3111</fpage>–<lpage>3119</lpage>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref026">
      <label>26</label>
      <mixed-citation publication-type="journal"><name><surname>Hochreiter</surname><given-names>S</given-names></name>, <name><surname>Schmidhuber</surname><given-names>J</given-names></name>. <article-title>Long short-term memory</article-title>. <source>Neural computation</source>. <year>1997</year>;<volume>9</volume>(<issue>8</issue>):<fpage>1735</fpage>–<lpage>1780</lpage>. <pub-id pub-id-type="doi">10.1162/neco.1997.9.8.1735</pub-id><?supplied-pmid 9377276?><pub-id pub-id-type="pmid">9377276</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref027">
      <label>27</label>
      <mixed-citation publication-type="other">Zaremba W, Sutskever I, Vinyals O. Recurrent neural network regularization. arXiv preprint arXiv:14092329. 2014;.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref028">
      <label>28</label>
      <mixed-citation publication-type="other">Stivalet B, Fong E. Large scale generation of complex and faulty PHP test cases. In: 2016 IEEE International conference on software testing, verification and validation (ICST). IEEE; 2016. p. 409–415.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref029">
      <label>29</label>
      <mixed-citation publication-type="other">Software Assurance Reference Dataset;. Available from: <ext-link ext-link-type="uri" xlink:href="https://samate.nist.gov/SARD/index.php">https://samate.nist.gov/SARD/index.php</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref030">
      <label>30</label>
      <mixed-citation publication-type="journal"><name><surname>Pendleton</surname><given-names>M</given-names></name>, <name><surname>Garcia-Lebron</surname><given-names>R</given-names></name>, <name><surname>Cho</surname><given-names>JH</given-names></name>, <name><surname>Xu</surname><given-names>S</given-names></name>. <article-title>A survey on systems security metrics</article-title>. <source>ACM Computing Surveys (CSUR)</source>. <year>2017</year>;<volume>49</volume>(<issue>4</issue>):<fpage>62</fpage>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref031">
      <label>31</label>
      <mixed-citation publication-type="journal"><name><surname>Fawcett</surname><given-names>T</given-names></name>. <article-title>An introduction to ROC analysis</article-title>. <source>Pattern recognition letters</source>. <year>2006</year>;<volume>27</volume>(<issue>8</issue>):<fpage>861</fpage>–<lpage>874</lpage>. <pub-id pub-id-type="doi">10.1016/j.patrec.2005.10.010</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0225196.ref032">
      <label>32</label>
      <mixed-citation publication-type="other">Landis JR, Koch GG. The measurement of observer agreement for categorical data. biometrics. 1977; p. 159–174.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref033">
      <label>33</label>
      <mixed-citation publication-type="other">Kronjee J, Hommersom A, Vranken H. Discovering software vulnerabilities using data-flow analysis and machine learning. In: Proceedings of the 13th International Conference on Availability, Reliability and Security. acm; 2018. p. 6.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref034">
      <label>34</label>
      <mixed-citation publication-type="other">jorkro/wirecaml: Weakness Identification Research Employing CFG Analysis and Machine Learning;. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/jorkro/wirecaml">https://github.com/jorkro/wirecaml</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0225196.ref035">
      <label>35</label>
      <mixed-citation publication-type="other">ripsscanner/rips: RIPS—A static source code analyser for vulnerabilities in PHP scripts;. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/ripsscanner/rips">https://github.com/ripsscanner/rips</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
