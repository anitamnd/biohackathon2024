<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">plosone</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5617173</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0185207</article-id>
    <article-id pub-id-type="publisher-id">PONE-D-17-09189</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Astronomical Sciences</subject>
          <subj-group>
            <subject>Celestial Objects</subject>
            <subj-group>
              <subject>Galaxies</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Software</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Information Technology</subject>
          <subj-group>
            <subject>Data Processing</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Information Technology</subject>
          <subj-group>
            <subject>Databases</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Software</subject>
          <subj-group>
            <subject>Open Source Software</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Science Policy</subject>
        <subj-group>
          <subject>Open Science</subject>
          <subj-group>
            <subject>Open Source Software</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Computer Applications</subject>
          <subj-group>
            <subject>Web-Based Applications</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Physical Sciences</subject>
        <subj-group>
          <subject>Physics</subject>
          <subj-group>
            <subject>Classical Mechanics</subject>
            <subj-group>
              <subject>Continuum Mechanics</subject>
              <subj-group>
                <subject>Fluid Mechanics</subject>
                <subj-group>
                  <subject>Fluid Dynamics</subject>
                  <subj-group>
                    <subject>Drag</subject>
                  </subj-group>
                </subj-group>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Escape Excel: A tool for preventing gene symbol and accession conversion errors</article-title>
      <alt-title alt-title-type="running-head">Escape Excel: A tool for preventing gene symbol and accession conversion errors</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-9302-3855</contrib-id>
        <name>
          <surname>Welsh</surname>
          <given-names>Eric A.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Data curation</role>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Validation</role>
        <role content-type="http://credit.casrai.org/">Writing – original draft</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="cor001">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Stewart</surname>
          <given-names>Paul A.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Writing – original draft</role>
        <role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
        <xref ref-type="aff" rid="aff002">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kuenzi</surname>
          <given-names>Brent M.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Supervision</role>
        <xref ref-type="aff" rid="aff003">
          <sup>3</sup>
        </xref>
        <xref ref-type="aff" rid="aff004">
          <sup>4</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Eschrich</surname>
          <given-names>James A.</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Formal analysis</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <xref ref-type="aff" rid="aff001">
          <sup>1</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <label>1</label>
      <addr-line>Cancer Informatics, H. Lee Moffitt Cancer Center &amp; Research Institute, Tampa, Florida, United States of America</addr-line>
    </aff>
    <aff id="aff002">
      <label>2</label>
      <addr-line>Department of Thoracic Oncology, H. Lee Moffitt Cancer Center &amp; Research Institute, Tampa, Florida, United States of America</addr-line>
    </aff>
    <aff id="aff003">
      <label>3</label>
      <addr-line>Department of Drug Discovery, H. Lee Moffitt Cancer Center &amp; Research Institute, Tampa, Florida, United States of America</addr-line>
    </aff>
    <aff id="aff004">
      <label>4</label>
      <addr-line>Cancer Biology, University of South Florida, Tampa, Florida, United States of America</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Heazlewood</surname>
          <given-names>Joshua L</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>The University of Melbourne, AUSTRALIA</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>Eric.Welsh@moffitt.org</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>9</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2017</year>
    </pub-date>
    <volume>12</volume>
    <issue>9</issue>
    <elocation-id>e0185207</elocation-id>
    <history>
      <date date-type="received">
        <day>8</day>
        <month>3</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>9</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2017 Welsh et al</copyright-statement>
      <copyright-year>2017</copyright-year>
      <copyright-holder>Welsh et al</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pone.0185207.pdf"/>
    <abstract>
      <sec id="sec001">
        <title>Background</title>
        <p>Microsoft Excel automatically converts certain gene symbols, database accessions, and other alphanumeric text into dates, scientific notation, and other numerical representations. These conversions lead to subsequent, irreversible, corruption of the imported text. A recent survey of popular genomic literature estimates that one-fifth of all papers with supplementary gene lists suffer from this issue.</p>
      </sec>
      <sec id="sec002">
        <title>Results</title>
        <p>Here, we present an open-source tool, Escape Excel, which prevents these erroneous conversions by generating an escaped text file that can be safely imported into Excel. Escape Excel is implemented in a variety of formats (<ext-link ext-link-type="uri" xlink:href="http://www.github.com/pstew/escape_excel">http://www.github.com/pstew/escape_excel</ext-link>), including a command line based Perl script, a Windows-only Excel Add-In, an OS X drag-and-drop application, a simple web-server, and as a Galaxy web environment interface. Test server implementations are accessible as a Galaxy interface (<ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org">http://apostl.moffitt.org</ext-link>) and simple non-Galaxy web server (<ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org:8000/">http://apostl.moffitt.org:8000/</ext-link>).</p>
      </sec>
      <sec id="sec003">
        <title>Conclusions</title>
        <p>Escape Excel detects and escapes a wide variety of problematic text strings so that they are not erroneously converted into other representations upon importation into Excel. Examples of problematic strings include date-like strings, time-like strings, leading zeroes in front of numbers, and long numeric and alphanumeric identifiers that should not be automatically converted into scientific notation. It is hoped that greater awareness of these potential data corruption issues, together with diligent escaping of text files prior to importation into Excel, will help to reduce the amount of Excel-corrupted data in scientific analyses and publications.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group id="award001">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000054</institution-id>
            <institution>National Cancer Institute</institution>
          </institution-wrap>
        </funding-source>
        <award-id>P30-CA076292-18</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-9302-3855</contrib-id>
          <name>
            <surname>Welsh</surname>
            <given-names>Eric A.</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <award-group id="award002">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000054</institution-id>
            <institution>National Cancer Institute</institution>
          </institution-wrap>
        </funding-source>
        <award-id>F99 CA212456</award-id>
        <principal-award-recipient>
          <name>
            <surname>Kuenzi</surname>
            <given-names>Brent M.</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <funding-statement>This research was supported in part (EAW) by National Cancer Institute (<ext-link ext-link-type="uri" xlink:href="https://grants.nih.gov/">https://grants.nih.gov/</ext-link>) Cancer Center Support Grant (CCSG) for NCI-designated Cancer Centers, award number P30-CA076292-18, and in part (BMK) by National Cancer Institute F99/K00 Predoctoral to Postdoctoral Transition Award, award number F99 CA212456. Views and opinions of, endorsements by, the author(s) do not reflect those of the National Cancer Institute. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript. There was no additional external funding received for this study.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="5"/>
      <table-count count="1"/>
      <page-count count="10"/>
    </counts>
    <custom-meta-group>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>Escape Excel, along with usage and installation documentation, is available at the following GitHub project: <ext-link ext-link-type="uri" xlink:href="https://github.com/pstew/escape_excel">https://github.com/pstew/escape_excel</ext-link>. Command line versions of Escape Excel (Perl script and Windows executable), the Windows Excel Add-In installer, OS X drag-and-drop application, and non-Galaxy web server are located in the release folder. Source code for Escape Excel is available within the development folder. The original text file of example strings used for generating S1 Table is included in the software distribution. The version of the Perl script current as of the date of manuscript submission is included in the online supplementary material S1 File. The Galaxy interface is available from the Galaxy Tool Shed (<ext-link ext-link-type="uri" xlink:href="https://toolshed.g2.bx.psu.edu/repos/pstew/escape_excel">https://toolshed.g2.bx.psu.edu/repos/pstew/escape_excel</ext-link>). A Galaxy test server implementation is accessible at <ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org">http://apostl.moffitt.org</ext-link>, as well as a non-Galaxy test server at <ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org:8000/">http://apostl.moffitt.org:8000/</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>Escape Excel, along with usage and installation documentation, is available at the following GitHub project: <ext-link ext-link-type="uri" xlink:href="https://github.com/pstew/escape_excel">https://github.com/pstew/escape_excel</ext-link>. Command line versions of Escape Excel (Perl script and Windows executable), the Windows Excel Add-In installer, OS X drag-and-drop application, and non-Galaxy web server are located in the release folder. Source code for Escape Excel is available within the development folder. The original text file of example strings used for generating S1 Table is included in the software distribution. The version of the Perl script current as of the date of manuscript submission is included in the online supplementary material S1 File. The Galaxy interface is available from the Galaxy Tool Shed (<ext-link ext-link-type="uri" xlink:href="https://toolshed.g2.bx.psu.edu/repos/pstew/escape_excel">https://toolshed.g2.bx.psu.edu/repos/pstew/escape_excel</ext-link>). A Galaxy test server implementation is accessible at <ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org">http://apostl.moffitt.org</ext-link>, as well as a non-Galaxy test server at <ext-link ext-link-type="uri" xlink:href="http://apostl.moffitt.org:8000/">http://apostl.moffitt.org:8000/</ext-link>.</p>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec004">
    <title>Introduction</title>
    <p>Auto-conversion of gene symbols and database accessions by the spreadsheet software Excel (Microsoft, Redmond WA) is a persistent issue in biomedical research. The first published account dates back to 2004, where gene symbols for the Septin family (SEPT1, SEPT2, etc.) and others were reported as automatically converted to date formats within the software (1-Sep, 2-Sep, etc.) [<xref rid="pone.0185207.ref001" ref-type="bibr">1</xref>]. Furthermore, Riken database accessions such as 2310009E13 were reported as converted to the floating-point format of 2.31E+13. A recent programmatic scan of literature [<xref rid="pone.0185207.ref002" ref-type="bibr">2</xref>] revealed that roughly 20% of the manuscripts surveyed are affected by gene symbol auto-conversions in their supplementary material, along with 40% of Excel files deposited in the NCBI Gene Expression Omnibus (GEO) [<xref rid="pone.0185207.ref003" ref-type="bibr">3</xref>]. Additional auto-conversions that occur include subsets of numbers with forward slashes or hyphens (converted to date format), numbers with colons (converted to time format), numbers followed by an A or P (converted to time format), and numbers containing leading zeros (leading zeros are dropped) [<xref rid="pone.0185207.ref004" ref-type="bibr">4</xref>]. Examples of problematic text strings are given in <xref ref-type="table" rid="pone.0185207.t001">Table 1</xref>.</p>
    <table-wrap id="pone.0185207.t001" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.t001</object-id>
      <label>Table 1</label>
      <caption>
        <title>Escaped vs. unescaped text import into excel.</title>
      </caption>
      <alternatives>
        <graphic id="pone.0185207.t001g" xlink:href="pone.0185207.t001"/>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col align="left" valign="middle" span="1"/>
            <col align="left" valign="middle" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th align="center" rowspan="1" colspan="1">Escaped</th>
              <th align="center" rowspan="1" colspan="1">Unescaped</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center" rowspan="1" colspan="1">00123456</td>
              <td align="center" rowspan="1" colspan="1">123456</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">1234567890123456789</td>
              <td align="center" rowspan="1" colspan="1">1234567890123450000</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">2610100E13</td>
              <td align="center" rowspan="1" colspan="1">26101000000000000000</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">SEPT7</td>
              <td align="center" rowspan="1" colspan="1">7-Sep</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">1/3</td>
              <td align="center" rowspan="1" colspan="1">3-Jan</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">1 A</td>
              <td align="center" rowspan="1" colspan="1">1:00 AM</td>
            </tr>
            <tr>
              <td align="center" rowspan="1" colspan="1">++ stain intensity</td>
              <td align="center" rowspan="1" colspan="1">#NAME?</td>
            </tr>
          </tbody>
        </table>
      </alternatives>
      <table-wrap-foot>
        <fn id="t001fn001">
          <p>Example strings are given that are auto-converted by Excel when imported from unescaped text files. The escaped text is protected and remains unconverted after import.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>In order to avoid unwanted auto-conversions, text files can be imported via the File-&gt;Open menu within the Excel program, which then guides the user through options that allow the user to decide which columns to treat as text and which to treat as other data types. However, this method is time consuming, becomes impractical for large numbers of columns, cannot handle columns of mixed data types, and does not allow for customization of any columns beyond the 256<sup>th</sup> column. Additionally, there is no option to select column data types when a text file is opened via "double clicking", "drag and drop", or "Open With" from the Windows file explorer or desktop. Thus, an automated method of escaping a text file prior to import in Excel, so as to protect vulnerable fields from unwanted auto-conversion, is necessary.</p>
  </sec>
  <sec sec-type="materials|methods" id="sec005">
    <title>Methods</title>
    <p>According to Microsoft, auto-conversion in Excel can be prevented by manually placing a single quotation (') in front of an entry as an escape character to force the cell to be interpreted as text [<xref rid="pone.0185207.ref004" ref-type="bibr">4</xref>]. However, if this method is used to escape a field within a file prior to importing into Excel, then the resulting field will contain an extra leading single quote after importation that must be dealt with. We have found that escaping a field within double quotes inside of an equation, such as = "<italic>text to escape</italic>", is able to protect strings from auto-conversion on text file import.</p>
    <p>Escape Excel scans a tab-delimited text file for entries that need to be escaped. These entries are identified using regular expressions. All fields are first cleaned by removing leading/trailing spaces, enclosing quotes, leading single quotes, and UTF-8 byte order marks. These can interfere with correct parsing of the escaped output field by Excel, as well as interfere with regular expression pattern matching. Entries that are identified as likely to undergo unwanted auto-conversion by Excel are then encapsulated in a text string within an equation (e.g., SEPT1 is escaped as = "SEPT1"). Starting the entry with an equals sign tells Excel to treat the field as an equation, and the quotes tell Excel that the equation consists solely of a string. Once Escape Excel is run on a file, the resulting output can be opened in Excel without auto-conversion issues.</p>
    <p specific-use="line">Pseudocode for the algorithm is as follows:</p>
    <p specific-use="line"> for each field within a line</p>
    <p specific-use="line">  # remove problematic characters</p>
    <p specific-use="line">  do</p>
    <p specific-use="line">   remove leading UTF-8 byte order mark</p>
    <p specific-use="line">   remove pre-existing Escape Excel escaping</p>
    <p specific-use="line">   remove enclosing double quotes</p>
    <p specific-use="line">   remove remaining leading double quotes</p>
    <p specific-use="line">   remove leading spaces</p>
    <p specific-use="line">   remove trailing spaces</p>
    <p specific-use="line">  while (any cleaning rule was applied)</p>
    <p specific-use="line">  # escape numbers</p>
    <p specific-use="line">  if field is a number</p>
    <p specific-use="line">   if escape leading zeroes flag setting</p>
    <p specific-use="line">    escape leading zeroes for integer numeric portion</p>
    <p specific-use="line">   end if</p>
    <p specific-use="line">   if escape scientific notation flag setting</p>
    <p specific-use="line">    escape scientific notation with ≥ 2 digits before decimal (i.e. 12E3)</p>
    <p specific-use="line">    escape numbers with &gt; 11 digits before decimal</p>
    <p specific-use="line">   end if</p>
    <p specific-use="line">  # escape everything else, if paranoid option was set</p>
    <p specific-use="line">  else if paranoid flag setting</p>
    <p specific-use="line">   escape everything that is not a number</p>
    <p specific-use="line">  # escape only potentially problematic fields</p>
    <p specific-use="line">  else</p>
    <p specific-use="line">   escape leading single quote</p>
    <p specific-use="line">   escape leading equals sign</p>
    <p specific-use="line">   escape leading +/- if followed by non +/- characters</p>
    <p specific-use="line">   if escape dates flag setting</p>
    <p specific-use="line">    escape anything that looks like a date and/or time of day</p>
    <p specific-use="line">   end if</p>
    <p specific-use="line">  end if</p>
    <p specific-use="line"> end for</p>
  </sec>
  <sec id="sec006">
    <title>Implementation</title>
    <p>The original implementation, from which all other implementations derive, is implemented as a Perl script. Thus, the Perl script requires a Perl interpreter to be installed, either on the server, or on the user's local machine, depending on the implementation. Usage information, along with non-default options for disabling certain classes of pattern matching rules, is displayed when the script is run on the command line with the—help option (<xref ref-type="fig" rid="pone.0185207.g001">Fig 1</xref>). If difficulties arise when parsing deprecated Mac-style carriage return only end-of-line characters on other platforms, a pipeable eol2eol.c program is included to assist with end-of-line conversions prior to data input. Usage information for eol2eol is displayed when eol2eol is run on the command line with the—help option.</p>
    <fig id="pone.0185207.g001" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.g001</object-id>
      <label>Fig 1</label>
      <caption>
        <title>Screen capture of escape excel command line tool help text.</title>
        <p>Unknown command line options, including—help, will abort the program with a brief usage statement, including command syntax and descriptions of supported option flags.</p>
      </caption>
      <graphic xlink:href="pone.0185207.g001"/>
    </fig>
    <p>A Windows-only Excel Add-In, which calls the Perl implementation, was implemented in Visual Basic as an.xlam file, and packaged with the InnoSetup installer (<ext-link ext-link-type="uri" xlink:href="http://www.jrsoftware.org/isinfo.php">http://www.jrsoftware.org/isinfo.php</ext-link>). The Add-In does not require the installation of a Perl interpreter, as the included escape_excel.exe executable consists of a self-extracting archive that runs the script in memory from within an embedded Perl interpreter, packaged with the pp PAR Packer (<ext-link ext-link-type="uri" xlink:href="http://search.cpan.org/dist/PAR-Packer/">http://search.cpan.org/dist/PAR-Packer/</ext-link>) using the Strawberry Perl interpreter (<ext-link ext-link-type="uri" xlink:href="http://strawberryperl.com/">http://strawberryperl.com/</ext-link>). The included eol2eol.exe program, called from within the Add-In in order to support carriage return only end-of-line characters, output by default in OS X versions of Excel, was compiled with the i686-pc-mingw32-gcc compiler under Cygwin (<ext-link ext-link-type="uri" xlink:href="https://www.cygwin.com/">https://www.cygwin.com/</ext-link>). The Excel Add-In will only run within Microsoft Windows versions of Microsoft Office, and requires a version of Office supporting the "Ribbon" menu interface (Office 2007 and newer). After installation, the Add-In can be run from the "Import with Escape Excel" icon in the newly-added right-most "Escape Excel" Ribbon tab, after which non-default options can be selected, followed by "Select File" to browse for the file to be imported (<xref ref-type="fig" rid="pone.0185207.g002">Fig 2</xref>).</p>
    <fig id="pone.0185207.g002" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.g002</object-id>
      <label>Fig 2</label>
      <caption>
        <title>Screen capture of escape excel windows excel Add-In.</title>
        <p>Installation of the Excel Add-In allows for automatic processing of a selected file with Escape Excel, followed by importation of the escaped file into Excel. The Add-In adds a new Escape Excel tab to the Ribbon, from which non-default options and the file to be imported are selected.</p>
      </caption>
      <graphic xlink:href="pone.0185207.g002"/>
    </fig>
    <p>An OS X only application (.app) was implemented by wrapping Escape Excel into an application bundle with an application binary to run the script using Platypus (<ext-link ext-link-type="uri" xlink:href="https://github.com/sveinbjornt/Platypus">https://github.com/sveinbjornt/Platypus</ext-link>). Once unzipped, there is no need to install the Escape Excel application, and it will run Escape Excel with default settings upon opening files with the application, or by drag and drop onto the application icon (<xref ref-type="fig" rid="pone.0185207.g003">Fig 3</xref>). Non-default options are not supported. Perl is required to run the application, however, Perl is typically packaged with Mac OS X. If needed, Perl can be installed by the user (<ext-link ext-link-type="uri" xlink:href="https://learn.perl.org/installing/osx.html">https://learn.perl.org/installing/osx.html</ext-link>).</p>
    <fig id="pone.0185207.g003" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.g003</object-id>
      <label>Fig 3</label>
      <caption>
        <title>Screen capture of escape excel OS X application.</title>
        <p>Files to be escaped can be drag-and-dropped onto the application, which will then automatically export escaped versions of the files.</p>
      </caption>
      <graphic xlink:href="pone.0185207.g003"/>
    </fig>
    <p>A simple web server was implemented in node.js (<ext-link ext-link-type="uri" xlink:href="https://nodejs.org">https://nodejs.org</ext-link>), using the Express web framework (<ext-link ext-link-type="uri" xlink:href="https://expressjs.com/">https://expressjs.com/</ext-link>). The web server displays an HTML form that allows the user to enable the different command-line options via HTML checkboxes (<xref ref-type="fig" rid="pone.0185207.g004">Fig 4</xref>). After configuring the options they would like to use, the user can then choose a file from their computer to upload to the server. After the user clicks submit, a POST request is made to /upload, where the file is streamed to the server as multi-part form data. This data is then streamed through escape_excel.pl by spawning a subprocess with the appropriate arguments and streaming the uploaded data through the process. The output of the escape_excel.pl subprocess is then streamed back to the user's web browser—causing their browser to download an escaped copy of the file (with the same name as the original file).</p>
    <fig id="pone.0185207.g004" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.g004</object-id>
      <label>Fig 4</label>
      <caption>
        <title>Screen capture of escape excel simple non-Galaxy web server.</title>
        <p>Non-default options are selected via checkboxes. The file to be escaped is selected via the Browse file requestor. Clicking on the Submit button will prompt the user to download or open the resulting escaped file.</p>
      </caption>
      <graphic xlink:href="pone.0185207.g004"/>
    </fig>
    <p>The Galaxy interface implementation requires installation under the Galaxy web platform. Galaxy requires UNIX/Linux or Mac OS X with Python 2.7 and git installed. Galaxy can be downloaded from the command prompt by typing "git clone <ext-link ext-link-type="uri" xlink:href="https://github.com/galaxyproject/galaxy.git">https://github.com/galaxyproject/galaxy.git</ext-link>”. Once cloned, "sh run.sh" will start the Galaxy instance. Galaxy will install any configuration files or Python modules needed. Once started, the Galaxy server can be accessed using a web browser at <ext-link ext-link-type="uri" xlink:href="http://localhost:8080/">http://localhost:8080/</ext-link> by default. Once running, an administrator can install Escape Excel in Galaxy from the Galaxy Tool Shed. Additional Galaxy installation documentation and help can be found at <ext-link ext-link-type="uri" xlink:href="https://galaxyproject.org/admin/get-galaxy/">https://galaxyproject.org/admin/get-galaxy/</ext-link>. A detailed usage tutorial is included within the Escape Excel interface, beneath the data processing form (<xref ref-type="fig" rid="pone.0185207.g005">Fig 5</xref>). Briefly, the process of escaping a file consists of uploading a file to the galaxy server (Upload Data, top left of the Tool pane), navigating to the Escape Excel tool (left side of the Tool pane) selecting the uploaded Source file to be escaped (top of middle pane), enabling any optional Escape Excel flags, clicking the Execute button, selecting the resulting escaped file from the top right History pane, then clicking on the disk icon beneath the selected results file to download the file.</p>
    <fig id="pone.0185207.g005" orientation="portrait" position="float">
      <object-id pub-id-type="doi">10.1371/journal.pone.0185207.g005</object-id>
      <label>Fig 5</label>
      <caption>
        <title>Screen capture of escape excel Galaxy web server interface.</title>
        <p>The results from an example data processing workflow are shown, ready for download (right pane), after uploading a file with the Upload Data tool (left pane) and processing the selected file with the Escape Excel tool (tool selected in the left pane, options selected in the middle pane). A step-by-step tutorial is provided underneath the form in the middle pane.</p>
      </caption>
      <graphic xlink:href="pone.0185207.g005"/>
    </fig>
  </sec>
  <sec sec-type="results" id="sec007">
    <title>Results</title>
    <p>We have released the above implementation as Escape Excel, a freely available tool written in Perl for escaping a text file so as to prevent auto-conversion of known problematic entries upon opening in Excel. Escape Excel is implemented as a command line based Perl script, a Windows-only Excel Add-In, an OS X drag-and-drop application, a simple web-server form, and in the Galaxy [<xref rid="pone.0185207.ref005" ref-type="bibr">5</xref>] web environment (see Availability of data and materials). A set of software validation examples of both Excel-safe text strings and strings that are escaped by the software are provided in supplemental <xref ref-type="supplementary-material" rid="pone.0185207.s001">S1 Table</xref>.</p>
    <p>The ability of Escape Excel to prevent the auto-conversion of gene symbols is of especial interest to genomic and transcriptomic data, due to its high prevalence in the scientific literature [<xref rid="pone.0185207.ref001" ref-type="bibr">1</xref>, <xref rid="pone.0185207.ref002" ref-type="bibr">2</xref>]. Using current official gene symbols for human and mouse (supplemental <xref ref-type="supplementary-material" rid="pone.0185207.s002">S2 Table</xref>), retrieved from GenBank on March 15<sup>th</sup> 2017, 34 out of 59726 human genes are auto-converted incorrectly by Excel upon text import, along with 29 out of 68260 mouse genes. Although these problematic gene symbols represent only ~0.05% of all genes, if 5% of all genes were, at random, identified as biologically interesting in a hypothetical experiment, then we would expect, on average, 1–2 human or mouse genes per experiment to be impacted by Excel corruption issues in the results. Although no longer official gene symbols, the deprecated problematic human/mouse aliases 2E4, 2E6, 2E12, 3E2, and 3e46 are left unescaped by Escape Excel, since these text strings could represent normal scientific notation in other contexts. Although all of the problematic human gene symbols, both past and present, are date-related auto-conversions, 37 mouse gene symbols (2 current, 35 aliases) are also impacted by scientific notation auto-conversions, such as 2610100E13, which largely stem from RIKEN identifiers.</p>
  </sec>
  <sec id="sec008">
    <title>Discussion and conclusions</title>
    <p>Some cleanup and alteration of the original input text is performed as part of the pre-processing step of the algorithm. Perl, as well as many other tools that import text files, are not aware of UTF-8 byte order marks, and thus treat them as literal characters. Some products, such as Microsoft SQL Server, export text files with UTF-8 byte order marks, which can lead to string corruption in software that is not aware of them. These superfluous byte order marks are thus removed to prevent potential problems in downstream applications, as well as regular expression matching. Pre-existing escaping from previous passages through Escape Excel, enclosing double quotes, leading double quotes, and leading/trailing spaces are also removed. This process avoids both problems with regular expression matching, as well as potential Excel parsing problems on either the escaped or unescaped output.</p>
    <p>The escaping pattern detection rules were all chosen due to Excel corruption issues that we have observed while analyzing various datasets during the course of our research. It is not uncommon, at least within databases at our institution, to use numerical identifiers which contain leading zeroes, zero-padded so as to reach a minimum field width (i.e. 001234). Loss of these leading zeroes during intermediate passages through Excel can result in many failed database queries, as the identifiers are no longer exact string matches to those within the database. Leading equals signs must be escaped to prevent Excel from attempting to evaluate the field as an equation. Excel will also attempt to treat fields such as "++ stain intensity" as an equation, rather than a text string representing the relative amount of staining on a tissue slide, so such fields must also be escaped. Excel will attempt to interpret anything that looks like a time of day (i.e. "1 A", from a series such as "1 A", "1 B", "1 C") into an internal time representation. Escaping has thus been extended to cover combinations of dates and times that Excel is known to treat as dates, so as to preserve original date formats as-is, as well as prevent unwanted conversion of regular text into dates. Leading single quotes must also be escaped to prevent Excel from potentially removing them during text manipulation within Excel.</p>
    <p>Escaping of very large whole numbers, as well as less common forms of scientific notation, is required due to common sample/assay identifiers encountered when dealing with various biological data and assays. Escaping of scientific notation with ≥ 2 digits before the decimal point (i.e. 12E3) is necessary for protecting various assays involving plates with sample wells arranged in a grid, where the row identifiers are letters and the column identifiers are numbers. The reported sample identifier from such assays is commonly composed of plate # + row letter + column #. Plate 11, row A, column 9 would result in an identifier of "11A9". This becomes a problem with plates consisting of five or more rows. Plate 11, row E, column 9 would result in "11E9", which Excel would load as the number "1.1E10". Similar problems arise with chip / plate / assay barcodes consisting of long strings of digits, such as 52070900777217100409406332354780 (the barcode of a microarray in one of our internal datasets). Excel automatically converts all whole numbers with ≥ 12 digits into scientific notation, resulting in irreversible identifier corruption unless reformatted to display non-scientific notation with zero decimal places prior to re-exporting to a text file (the reformatting salvaging only works for up to 15 digits of precision, after which all further digits are lost due to Excel's internal floating point representation of numbers).</p>
    <p>Most text-related functions in Excel will function properly on the escaped text equations, however, some features, such as Text-to-Columns, will require the escaped text to be copied and pasted as "Paste Values" to convert the equations back into regular text strings before they will work correctly. Although this additional step of converting the escaped text back into regular text is not frequently required, it would be desirable to escape the text in such a manner that the text-within-equations work-around is not required. One such possibility would be to output a Microsoft Office Excel XML file containing the escaped data with problematic fields specified as type "text". Predefinition of the type "text" for each problematic cell would prevent auto-formatting issues imposed by Excel. Although this could be used to import the problematic fields directly as text without going through an equation intermediate, there are several disadvantages to XML file output. The size of the file may increase significantly due to additional XML markup and formatting, which may be problematic for files of several hundred megabytes. The file would also no longer be in the form of a spreadsheet, which may reduce human readability. Although Escape Excel is envisioned to be run just prior to importing the file into Excel, thus obviating the need for compatibility outside of Excel, XML output would decrease compatibility with other software tools, including traditional UNIX row- and column- based command line utilities such as cut, paste, head, and tail, as well as other software that accepts tab-delimited input. We investigated implementation of an XML output version of the software, but encountered compatibility issues between different versions of Office, as well as introducing additional external XML writer library dependencies to the Perl and/or Python runtimes. Due to all of the aforementioned issues with XML output, we have decided to support only text-equation style field protection for now, although we may revisit XML support in future versions of the software.</p>
    <p>We have developed and implemented a method for preventing Excel from corrupting imported text files due to unwanted auto-conversions. After processing with the Escape Excel software, text files can be safely imported into Excel without auto-converting gene symbols into dates and other related auto-conversion silent data corruptions. This open source software is freely available, implemented in several different wrappers (command line tool, Windows Excel Add-In, OS X drag-and-drop application, Galaxy interface, and a simple web form for server deployment) for greater user accessibility. While this tool is unable to salvage existing data that has been corrupted by Excel auto-conversion, it is hoped that the availability of this tool will increase awareness of the problem and contribute to reducing its impact on published scientific data sets, analyses, and literature.</p>
  </sec>
  <sec sec-type="supplementary-material" id="sec009">
    <title>Supporting information</title>
    <supplementary-material content-type="local-data" id="pone.0185207.s001">
      <label>S1 Table</label>
      <caption>
        <title>Validation set for escape excel.</title>
        <p>Which fields should, or should not, be escaped are denoted by section header descriptions.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0185207.s001.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0185207.s002">
      <label>S2 Table</label>
      <caption>
        <title>List of human and mouse gene symbols.</title>
        <p>Symbols were imported as forced-text, unescaped auto-converted fields, and escaped fields. Columns F and G indicate problematic symbols.</p>
        <p>(XLSX)</p>
      </caption>
      <media xlink:href="pone.0185207.s002.xlsx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0185207.s003">
      <label>S1 File</label>
      <caption>
        <title>Implementation of the escape excel algorithm as a Perl script.</title>
        <p>(PL)</p>
      </caption>
      <media xlink:href="pone.0185207.s003.pl">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>BMK</term>
        <def>
          <p>Brent M. Kuenzi</p>
        </def>
      </def-item>
      <def-item>
        <term>CCSG</term>
        <def>
          <p>Cancer Center Support Grant</p>
        </def>
      </def-item>
      <def-item>
        <term>EAW</term>
        <def>
          <p>Eric A. Welsh</p>
        </def>
      </def-item>
      <def-item>
        <term>NCI</term>
        <def>
          <p>National Cancer Institute</p>
        </def>
      </def-item>
      <def-item>
        <term>PAS</term>
        <def>
          <p>Paul A. Stewart</p>
        </def>
      </def-item>
      <def-item>
        <term>UTF-8</term>
        <def>
          <p>Universal Transformation Format-8</p>
        </def>
      </def-item>
      <def-item>
        <term>XML</term>
        <def>
          <p>Extensible Markup Language</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <ref-list>
    <title>References</title>
    <ref id="pone.0185207.ref001">
      <label>1</label>
      <mixed-citation publication-type="journal"><name><surname>Zeeberg</surname><given-names>BR</given-names></name>, <name><surname>Riss</surname><given-names>J</given-names></name>, <name><surname>Kane</surname><given-names>DW</given-names></name>, <name><surname>Bussey</surname><given-names>KJ</given-names></name>, <name><surname>Uchio</surname><given-names>E</given-names></name>, <name><surname>Linehan</surname><given-names>WM</given-names></name>, <etal>et al</etal><article-title>Mistaken identifiers: gene name errors can be introduced inadvertently when using Excel in bioinformatics</article-title>. <source>BMC bioinformatics</source>. <year>2004</year>;<volume>5</volume>(<issue>1</issue>):<fpage>80</fpage>.<pub-id pub-id-type="pmid">15214961</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0185207.ref002">
      <label>2</label>
      <mixed-citation publication-type="journal"><name><surname>Ziemann</surname><given-names>M</given-names></name>, <name><surname>Eren</surname><given-names>Y</given-names></name>, <name><surname>El-Osta</surname><given-names>A</given-names></name>. <article-title>Gene name errors are widespread in the scientific literature</article-title>. <source>Genome biology</source>. <year>2016</year>;<volume>17</volume>(<issue>1</issue>):<fpage>177</fpage><comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s13059-016-1044-7">10.1186/s13059-016-1044-7</ext-link></comment><?supplied-pmid 27552985?><pub-id pub-id-type="pmid">27552985</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0185207.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>Barrett</surname><given-names>T</given-names></name>, <name><surname>Wilhite</surname><given-names>SE</given-names></name>, <name><surname>Ledoux</surname><given-names>P</given-names></name>, <name><surname>Evangelista</surname><given-names>C</given-names></name>, <name><surname>Kim</surname><given-names>IF</given-names></name>, <name><surname>Tomashevsky</surname><given-names>M</given-names></name>, <etal>et al</etal><article-title>NCBI GEO: archive for functional genomics data sets—update</article-title>. <source>Nucleic acids research</source>. <year>2012</year>;<volume>41</volume>(<issue>D1</issue>):<fpage>D991</fpage>–<lpage>D5</lpage>.<pub-id pub-id-type="pmid">23193258</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0185207.ref004">
      <label>4</label>
      <mixed-citation publication-type="other">Microsoft. Text or number converted to unintended number format in Excel: Microsoft; 2015. <ext-link ext-link-type="uri" xlink:href="https://support.microsoft.com/en-us/kb/214233">https://support.microsoft.com/en-us/kb/214233</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0185207.ref005">
      <label>5</label>
      <mixed-citation publication-type="journal"><name><surname>Afgan</surname><given-names>E</given-names></name>, <name><surname>Baker</surname><given-names>D</given-names></name>, <name><surname>Van den Beek</surname><given-names>M</given-names></name>, <name><surname>Blankenberg</surname><given-names>D</given-names></name>, <name><surname>Bouvier</surname><given-names>D</given-names></name>, <name><surname>Čech</surname><given-names>M</given-names></name>, <etal>et al</etal><article-title>The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update</article-title>. <source>Nucleic acids research</source>. <year>2016</year>;<volume>44</volume>(<issue>W1</issue>):<fpage>W3</fpage>–<lpage>W10</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkw343">10.1093/nar/gkw343</ext-link></comment><?supplied-pmid 27137889?><pub-id pub-id-type="pmid">27137889</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
