<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2755829</article-id>
    <article-id pub-id-type="pmid">19796405</article-id>
    <article-id pub-id-type="publisher-id">3376</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-10-S10-S8</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Bio-jETI: a framework for semantics-based service composition</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Lamprecht</surname>
          <given-names>Anna-Lena</given-names>
        </name>
        <address>
          <email>anna-lena.lamprecht@cs.tu-dortmund.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Margaria</surname>
          <given-names>Tiziana</given-names>
        </name>
        <address>
          <email>margaria@cs.uni-potsdam.de</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Steffen</surname>
          <given-names>Bernhard</given-names>
        </name>
        <address>
          <email>steffen@cs.tu-dortmund.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.5675.1</institution-id><institution-id institution-id-type="ISNI">0000000104169637</institution-id><institution>Chair for Programming Systems, </institution><institution>Dortmund University of Technology, </institution></institution-wrap>Dortmund, D-44227 Germany </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.11348.3f</institution-id><institution-id institution-id-type="ISNI">0000000109421117</institution-id><institution>Chair for Service and Software Engineering, </institution><institution>Potsdam University, </institution></institution-wrap>Potsdam, D-14882 Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>01</day>
      <month>10</month>
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>01</day>
      <month>10</month>
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2009</year>
    </pub-date>
    <volume>10</volume>
    <issue>Suppl 10</issue>
    <elocation-id>S8</elocation-id>
    <permissions>
      <copyright-statement>© Lamprecht et al; licensee BioMed Central Ltd. 2009</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/2.0/</ali:license_ref>
        <license-p>This article is published under license to BioMed Central Ltd. This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/2.0/">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>The development of bioinformatics databases, algorithms, and tools throughout the last years has lead to a highly distributed world of bioinformatics services. Without adequate management and development support, <italic>in silico</italic> researchers are hardly able to exploit the potential of building complex, specialized analysis processes from these services. The Semantic Web aims at thoroughly equipping individual data and services with machine-processable meta-information, while workflow systems support the construction of service compositions. However, even in this combination, <italic>in silico</italic> researchers currently would have to deal manually with the service interfaces, the adequacy of the semantic annotations, type incompatibilities, and the consistency of service compositions.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>In this paper, we demonstrate by means of two examples how Semantic Web technology together with an adequate domain modelling frees <italic>in silico</italic> researchers from dealing with interfaces, types, and inconsistencies. In Bio-jETI, bioinformatics services can be graphically combined to complex services without worrying about details of their interfaces or about type mismatches of the composition. These issues are taken care of at the semantic level by Bio-jETI's model checking and synthesis features. Whenever possible, they automatically resolve type mismatches in the considered service setting. Otherwise, they graphically indicate impossible/incorrect service combinations. In the latter case, the workflow developer may either modify his service composition using semantically similar services, or ask for help in developing the missing mediator that correctly bridges the detected type gap. Newly developed mediators should then be adequately annotated semantically, and added to the service library for later reuse in similar situations.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>We show the power of semantic annotations in an adequately modelled and semantically enabled domain setting. Using model checking and synthesis methods, users may orchestrate complex processes from a wealth of heterogeneous services without worrying about interfaces and (type) consistency. The success of this method strongly depends on a careful semantic annotation of the provided services and on its consequent exploitation for analysis, validation, and synthesis. We are convinced that these annotations will become standard, as they will become preconditions for the success and widespread use of (preferred) services in the Semantic Web.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Model Check</kwd>
      <kwd>Resource Description Framework</kwd>
      <kwd>Service Composition</kwd>
      <kwd>Synthesis Algorithm</kwd>
      <kwd>Computation Tree Logic</kwd>
    </kwd-group>
    <conference>
      <conf-name>Semantic Web Applications and Tools for Life Sciences, 2008</conf-name>
      <conf-loc>Edinburgh, UK</conf-loc>
      <conf-date>28 November 2008</conf-date>
    </conference>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2009</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Research projects in modern molecular biology rely on increasingly complex combinations of computational methods to handle the data that is produced in the life science laboratories. A variety of bioinformatics databases, algorithms and tools is available for specific analysis tasks. Their combination to solve a specific biological question defines more or less complex analysis <italic>workflows</italic> or <italic>processes</italic>. Software systems that facilitate their systematic development and automation [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR7">7</xref>] have found a great popularity in the community.</p>
    <p>More than in other domains the heterogeneous services world in bioinformatics demands for a methodology to classify and relate resources in a both human and machine accessible manner. The Semantic Web [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR9">9</xref>], which is meant to address exactly this challenge, is currently one of the most ambitious projects in computer science. Collective efforts have already lead to a basis of standards for semantic service descriptions and meta-information.</p>
    <p>Most importantly, the World Wide Web Consortium (W3C) set up a number of working groups addressing different technological aspects of the Semantic Web vision. Among their outcomes are the Semantic Annotations for WSDL (SAWSDL) recommendation [<xref ref-type="bibr" rid="CR10">10</xref>], the Resource Description Framework (RDF) specification [<xref ref-type="bibr" rid="CR11">11</xref>], and the Web Ontology Language (OWL) [<xref ref-type="bibr" rid="CR12">12</xref>]. While SAWSDL is designed to equip single entities with predicates, RDF and the more powerful OWL formally define relationships between the resources of a domain.</p>
    <p>Without a reasonably large set of semantically annotated (web) services, it is, however, difficult to evaluate the Semantic Web technologies with significant results and develop practical software for the client side. On the other hand, providers are not willing to put effort in annotating their services as long as they can not be confident which technologies will finally become established. Community initiatives like the Semantic Web Services (SWS) Challenge [<xref ref-type="bibr" rid="CR13">13</xref>] or the Semantic Service Selection Contest (S3C) [<xref ref-type="bibr" rid="CR14">14</xref>] address this problem. They provide collections of services, domain information and concrete scenarios that the different participants, being developers of methodologies for different Semantic Web aspects, have to deal with. In the scope of the S3 Contest, OPOSSum [<xref ref-type="bibr" rid="CR15">15</xref>, <xref ref-type="bibr" rid="CR16">16</xref>], an "online portal to collect and share SWS descriptions" [<xref ref-type="bibr" rid="CR16">16</xref>], was set up. It aims at collecting, sharing, editing, and comparing SWS descriptions within a community infrastructure in order to collaboratively evaluate and improve SWS formalisms. As of March 2009, however, OPOSSum does not list any bioinformatics services.</p>
    <p>An example of a knowledge base particularly capturing bioinformatics data types and services are the constantly evolving namespace, object and service ontologies of the BioMoby service registry [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR18">18</xref>]. BioMoby's aim is to "achieve a shared syntax, shared semantic, and discovery infrastructure suitable for bioinformat-ics" [<xref ref-type="bibr" rid="CR19">19</xref>] as a part of the Semantic Web. Originating from the early 2000s, the 1.0 MOBY-S(ervices) spec-ifications, however, do not adhere to the Semantic Web standards that have been developed in the last years. Consequently, the S(emantic)-MOBY branch of the project came into being to migrate to common technologies. It has recently been merged into the SSWAP (Simple Semantic Web Architecture and Protocol) [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR21">21</xref>] project, which aims at providing life science knowledge using standard RDF/OWL technology. SSWAP provides a number of own ontologies, but also incorporates third-party domain knowledge like the MOBY-S object and service ontologies.</p>
    <p>Generally, the development of ontologies in the bioinformatics community is already very promising. Projects like the Gene Ontology (GO) [<xref ref-type="bibr" rid="CR22">22</xref>] and the Open Biomedical Ontologies (OBO) [<xref ref-type="bibr" rid="CR23">23</xref>] have already become widely used and also, for instance, incorporated by the SSWAP project. The majority of publicly available ontologies in the bioinformatics domain is, however, designed for the classification of scientific terms and the description of actual data sets, and not for (technical) descriptions of service interfaces and data types.</p>
    <p>The lack of properly semantically annotated services has evidently already been recognized by the community, as different projects are commencing to address the issue. For instance, major service providers like the European Bioinformatics Institute (EBI) plan to extend their service infrastructure to provide meta-information conforming to Semantic Web standards. Other initiatives aim at setting up stand-alone collections of service URIs and corresponding annotations, without influencing the service infrastructures as such.</p>
    <p>While the provision of semantically annotated services is mainly the service providers' task, on the client side software is needed that fully utilizes the available semantic information in order to provide helpful tools to the <italic>in silico</italic> researcher. The challenge for user-side software is to abstract from the underlying Semantic Web technology again and provide the achievements in an intuitive fashion.</p>
    <p>A simple but useful feature building upon semantic information about services is the categorization of services according to different criteria. A corresponding functionality has already been available in the meanwhile discontinued BioSPICE Dashboard, where it was possible to arrange services by location, provider, function, or I/O type (see Figure <xref rid="Fig1" ref-type="fig">1</xref>). The BioSPICE project is a meanwhile abandoned initiative that focused on the development of computational models for intracellular processes. Besides the provision of mere "access to the most current computational tools for biologists" [<xref ref-type="bibr" rid="CR24">24</xref>], the work also aimed at integrating the services into a convenient graphical user environment, called the BioSPICE Dashboard. Thus, the need of multi-faceted service classification has been recognized several years ago, but until present services hardly provide appropriate meta-information.<fig id="Fig1"><label>Figure 1</label><caption><p><bold>BioSPICE Dashboard</bold>. Graphical user interface of the BioSPICE Dashboard [<xref ref-type="bibr" rid="CR24">24</xref>]. Services can be arranged according to the categories location, contributor, function, and I/O type (top left).</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig1_HTML" id="d32e555"/></fig></p>
    <p>More advanced examples of utilizing semantic information about services are, for instance, available in the scope of the SWS Challenge [<xref ref-type="bibr" rid="CR13">13</xref>]. Among others, projects like SWE-ET (Semantic Web Engineering Environment and Tools) [<xref ref-type="bibr" rid="CR25">25</xref>] and WSMX [<xref ref-type="bibr" rid="CR26">26</xref>] participate in the challenge, adressing both discovery and mediation scenarios for Semantic Web Services. However, these solutions demand quite some technical understanding from the user, which hampers the uptake by a larger biological user community.</p>
    <p>As an example from the bioinformatics domain, the BioMoby project provides a simple composition functionality for its services. [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR18">18</xref>]. With the MOBY-S Web Service Browser [<xref ref-type="bibr" rid="CR27">27</xref>] it is, e.g., possible to search for an appropriate next service, while in addition the sequence of actually executed tools is recorded and stored as a Taverna [<xref ref-type="bibr" rid="CR4">4</xref>] workflow. A substantial drawback of this approach is, however, its restriction to the services that are registered in the respective platform.</p>
    <p>In this paper, we present our approach to semantics-based service composition in the Bio-jETI platform [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR28">28</xref>]. By integration of automatic service composition functionality into an intuitive, graphical process management framework, we are able to maintain the usability of the latter for semantically aware workflow development. Furthermore, we can integrate services and domain knowledge from any kind of heterogeneous resource at any location, and are not restricted to any semantically annotated services of a particular platform.</p>
    <p>This manuscript is structured as follows: In the next section, Results and Discussion, we discuss two examples that we developed in Bio-jETI with the help of a semantics-aware workflow synthesis method and model checking: a simple phylogenetic analysis workflow and a more sophisticicated, highly customized phylogenetic analysis process based on Blast and ClustalW. Subsequently, the Conclusion deals with directives for the future development of our approach. Finally, the Methods section describes the applied techniques in greater detail.</p>
  </sec>
  <sec id="Sec2">
    <title>Results and discussion</title>
    <p>The approach to semantics-based service composition that we present in this paper builds upon the Bio-jETI [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR28">28</xref>] framework for model-based, graphical design, execution and management of bioinformatics analysis processes. It has been used in a number of different bioinformatics projects [<xref ref-type="bibr" rid="CR29">29</xref>–<xref ref-type="bibr" rid="CR32">32</xref>] and is continuously evolving as new service libraries and service and software technologies become established. Technically, Bio-jETI uses the jABC modeling framework [<xref ref-type="bibr" rid="CR33">33</xref>, <xref ref-type="bibr" rid="CR34">34</xref>] as an intuitive, graphical user interface and the jETI electronic tool integration platform [<xref ref-type="bibr" rid="CR35">35</xref>, <xref ref-type="bibr" rid="CR36">36</xref>] for dealing with remote services. Using the jABC technology, process models, called <italic>Service Logic Graphs</italic> (<italic>SLGs</italic>) are constructed graphically by placing process building blocks, called <italic>Service Independent Building Blocks</italic> (<italic>SIBs</italic>), on a canvas and connecting them according to the flow of control. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows a screenshot of the graphical user interface of the jABC. SLGs are directly executable by an interpreter component, and they can be compiled into a variety of target languages via the GeneSys code generation framework [<xref ref-type="bibr" rid="CR37">37</xref>]. As Figure <xref rid="Fig3" ref-type="fig">3</xref> (bottom) illustrates, GeneSys provides the means for transforming SLGs into native, stand-alone programm code (e.g., Java, C++) as well as into other workflow languages (e.g., BPEL).<fig id="Fig2"><label>Figure 2</label><caption><p><bold>Bio-jETI GUI</bold>. The jABC framework, which provides the graphical user interface for Bio-jETI, supports the orchestration of processes from heterogeneous services. Workflow models are constructed graphically by placing process building blocks from a library (top left) on a canvas (center) and connecting them by labeled branches to define the flow of control. The models are directly executable by an inbuilt interpreter component (right).</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig2_HTML" id="d32e654"/></fig><fig id="Fig3"><label>Figure 3</label><caption><p><bold>Relationship between SLTL and workflow languages</bold>. SLTL is designed to specify linear workflows on an abstract level. In conjunction with a set of services and adequate semantic information about the domain, it serves as input for the synthesis algorithm, which generates linear workflows according to the SLTL specification. The results are available as Bio-jETI SLGs, which can be further edited, combined, and refined. The SLGs can then be compiled into a number of different target languages by the GeneSys code generation framework.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig3_HTML" id="d32e665"/></fig></p>
    <p>Workflow development in Bio-jETI is already supported by several plugins of the jABC framework, for instance providing functionality for component validation or step-wise execution of the process model for debugging purposes. Now we are going to exploit further jABC technology, such as model checking and workflow synthesis, in order to enable Bio-jETI to support the development of processes in terms of service semantics.</p>
    <p>Model checking [<xref ref-type="bibr" rid="CR38">38</xref>, <xref ref-type="bibr" rid="CR39">39</xref>] can be used for reasoning about properties of process models. This can help to detect problems like undefined data identifiers, missing computations, or type mismatches. Solving these problems might require the introduction of further computational steps, for instance a series of conversion services in case of a data type mismatch. The approach here is to automate the creation of such process parts via workflow synthesis methodology [<xref ref-type="bibr" rid="CR40">40</xref>–<xref ref-type="bibr" rid="CR43">43</xref>] that allows for the automatic creation of (linear) workflows according to high-level, logical specifications. Figure <xref rid="Fig3" ref-type="fig">3</xref> (top) illustrates the relationship between our specification language SLTL (Semantic Linear Time Logic) and the actual Bio-jETI workflow models, the SLGs: Provided with a logical specification of the process and semantically annotated services, the workflow synthesis algorithm generates linear sequences of services, which can be further edited and combined into complex process models on the SLG level.</p>
    <p>For the study that we present in this paper we used a SIB collection offering various remote and local services. Examples for contained remote services are the data retrieval services provided by the EBI (European Bioinformatics Institute) [<xref ref-type="bibr" rid="CR44">44</xref>, <xref ref-type="bibr" rid="CR45">45</xref>], sequence analysis algorithms offered by BiBiServ (the Bielefeld Bioinformatics Server) [<xref ref-type="bibr" rid="CR46">46</xref>], web services hosted by the DDBJ (DNA Data Bank of Japan) [<xref ref-type="bibr" rid="CR47">47</xref>], and some tools of the EMBOSS suite [<xref ref-type="bibr" rid="CR48">48</xref>]. On the local side, there are specialized components such as visualizer for phylogenetic trees [<xref ref-type="bibr" rid="CR49">49</xref>] and more generic ones like SIBs that realize user interaction or functionality for file management. Table <xref rid="Tab1" ref-type="table">1</xref> lists the fragment of the library that is relevant for our examples.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Exemplary set of services. Fragment of a component library that we used in the examples. The table lists the names of the building blocks (SIBs) along with function descriptions and selected service predicates.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">SIB</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">
Archaeopteryx
</td><td align="left">Displays a phylogenetic tree [<xref ref-type="bibr" rid="CR49">49</xref>].</td></tr><tr><td/><td align="left">type:visualization, location:local, contributor:forester.org</td></tr><tr><td align="left">
BLAST
</td><td align="left">BLAST [<xref ref-type="bibr" rid="CR63">63</xref>] against a DDBJ database.</td></tr><tr><td/><td align="left">type:analysis, location:ddbj, contributor:ddbj</td></tr><tr><td align="left">
ClustalW
</td><td align="left">Runs ClustalW [<xref ref-type="bibr" rid="CR64">64</xref>].</td></tr><tr><td/><td align="left">type:analysis, location:ddbj, contributor:ddbj</td></tr><tr><td align="left">
Emma
</td><td align="left">EMBOSS [<xref ref-type="bibr" rid="CR48">48</xref>] interface to ClustalW.</td></tr><tr><td/><td align="left">type:analysis, location:ebi, contributor:emboss</td></tr><tr><td align="left">
ExtractPattern
</td><td align="left">Extracts all parts of a string that match a regular expression.</td></tr><tr><td/><td align="left">type:stringprocessing, location:local, contributor:jabc</td></tr><tr><td align="left">
GetDDBJEntry
</td><td align="left">Fetches an entry in at file format from a DDBJ database [<xref ref-type="bibr" rid="CR51">51</xref>].</td></tr><tr><td/><td align="left">type:dataretrieval, location:ddbj, contributor:ddbj</td></tr><tr><td align="left">
GetFASTA_DDBJEntry
</td><td align="left">Fetches an entry in FASTA format from a DDBJ database [<xref ref-type="bibr" rid="CR51">51</xref>].</td></tr><tr><td/><td align="left">type:dataretrieval, location:ddbj, contributor:ddbj</td></tr><tr><td align="left">List2String</td><td align="left">Concatenates all entries of a list.</td></tr><tr><td/><td align="left">type:stringprocessing, location:local, contributor:jabc</td></tr><tr><td align="left">
MatchString
</td><td align="left">Tries to match a string against a regular expression pattern.</td></tr><tr><td/><td align="left">type:condition, location:local, contributor:jabc</td></tr><tr><td align="left">
PutExpression
</td><td align="left">Stores a user-supplied context expression or its value into the execution context.</td></tr><tr><td/><td align="left">type:definition, location:local, contributor:jabc</td></tr><tr><td align="left">
PutInteger
</td><td align="left">Provides an integer value.</td></tr><tr><td/><td align="left">type:definition, location:local, contributor:jabc</td></tr><tr><td align="left">
RepeatLoop
</td><td align="left">Realizes a counting loop.</td></tr><tr><td/><td align="left">type:loop, location:local, contributor:jabc</td></tr><tr><td align="left">
ReplaceString
</td><td align="left">Replaces substrings of a string with another character sequence.</td></tr><tr><td/><td align="left">type:stringprocessing, location:local, contributor:jabc</td></tr><tr><td align="left">
ShowInputDialog
</td><td align="left">Input dialog, provides a string.</td></tr><tr><td/><td align="left">type:definition, location:local, contributor:jabc</td></tr><tr><td align="left">
WSDBFetch
</td><td align="left">Gets sequences from an EBI database [<xref ref-type="bibr" rid="CR44">44</xref>, <xref ref-type="bibr" rid="CR45">45</xref>].</td></tr><tr><td/><td align="left">type:dataretrieval, location:ebi, contributor:ebi</td></tr></tbody></table></table-wrap></p>
    <p>In the jABC, the SIBs are displayed to the user in a taxonomic view, classified according to their position in the file system (by default) or to any other useful criterion, like the provider or the kind of service. The SIBs have user-level documentation, explaining what the underlying tool or algorithm does, that is derived directly from the provider's service descriptions. In addition, the SIBs provide information about their input and output types via a specific interface. This is already an integral part of the semantic information that helps to systematically survey large SIB libraries and it is used by our process synthesis and model checking methods. It is, in addition, possible to add arbitrary annotations to the SIB instances and by doing so providing further (semantic) information that is taken into account by our formal methodologies.</p>
    <p>The knowledge base that is needed for the process synthesis consists, furthermore, of service and type taxonomies that classify the services and types, respectively. Taxonomies are simple ontologies that relate entities in terms of <italic>is-a</italic> and <italic>has-a</italic> relations. These classifications provide sufficient information for our synthesis methodologies.</p>
    <p>We assume simple taxonomies for our examples, which have the generic OWL type Thing at the root. Going downwards, classifications are introduced, for instance refining the generic type into integers and strings, whereas the latter is further distinguished into alignments, trees, sequences, tool outputs, and so on. Figure <xref rid="Fig4" ref-type="fig">4</xref> shows the service taxonomy for the services that we use in our examples, edited in the OntEd ontology editor plugin of the jABC. The corresponding type taxonomy classifying the involved data types is given in Figure <xref rid="Fig5" ref-type="fig">5</xref>.<fig id="Fig4"><label>Figure 4</label><caption><p><bold>Service taxonomy</bold>. Service taxonomy for the services that we use in our examples, edited in OntEd, the ontology editing plugin of the jABC.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig4_HTML" id="d32e1007"/></fig><fig id="Fig5"><label>Figure 5</label><caption><p><bold>Type taxonomy</bold>. Type taxonomy classifying the data types involved in our examples.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig5_HTML" id="d32e1018"/></fig></p>
    <p>The basic input and output information for the services is defined in terms of the data types contained in the type taxonomy. Table <xref rid="Tab2" ref-type="table">2</xref> lists the set of data types that is relevant for our examples. The services are characterized by input-output-pairs of types, where the input or output may well be empty (as it is the case, e.g., for ShowInputDialog and Archaeopteryx), respectively. Services may also provide multiple possible transformations and thus achieve polymorphism. For instance, BiBiServ's ClustalW can process sequences in FASTA or in SequenceML format, and produces a FASTA or AlignmentML output, accordingly.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Exemplary set of types. The set of data types that was used in the example processes.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">
Accession
</td><td align="left">Single accession number.</td></tr><tr><td align="left">
AccessionList
</td><td align="left">Iteratable (java.util.)list of accession numbers.</td></tr><tr><td align="left">
Accessions
</td><td align="left">Concatenation of accession numbers, separated by some character.</td></tr><tr><td align="left">
Alignment
</td><td align="left">Multiple sequence alignment.</td></tr><tr><td align="left">
BlastResult
</td><td align="left">Tool output of BLAST.</td></tr><tr><td align="left">
ClustalWResult
</td><td align="left">Tool output of ClustalW.</td></tr><tr><td align="left">
Counter
</td><td align="left">Counter, i.e. positive integer value.</td></tr><tr><td align="left">
DDBJEntry
</td><td align="left">DDBJ entry in flat file format.</td></tr><tr><td align="left">
Limit
</td><td align="left">Limit, i.e. positive integer value.</td></tr><tr><td align="left">
Sequence
</td><td align="left">Single or multiple nucleic or amino acid sequences.</td></tr><tr><td align="left">
Tree
</td><td align="left">Phylogenetic tree.</td></tr></tbody></table></table-wrap></p>
    <sec id="Sec3">
      <title>Example 1: a simple phylogenetic analysis workflow</title>
      <p>When developing bioinformatics analysis workflows, users often have a clear idea about the inputs and final results, while their conception of the process that actually produces the desired outputs is only vague. Figure <xref rid="Fig5" ref-type="fig">5</xref> (upper left) shows a stub for a workflow: the start SIB (left) is an input dialog for a nucleic or amino acid sequence, which is followed by a SIB running a BLAST query with the sequence having been input in order to find homologous sequences. The workflow ends by invoking Archaeopteryx to display a phylogenetic tree (right). The configuration of the SIBs is sound at the component level, as the Local Checker plugin (producing the small overlay icons top left) confirms. However, there are errors regarding the correct configuration of the model as a whole, as the required input type for Archaeopteryx, some phylogenetic tree format, is not produced previously in the process. This is detected by our model checker GEAR (indicated by a red overlay icon with a white cross in the top right corner of the SIBs), that checks a temporal formula covering the following constraint (please refer to the Methods section for details on the model checking procedure):<disp-formula id="Equ1"><graphic xlink:href="12859_2009_Article_3376_Equa_HTML.gif" position="anchor"/></disp-formula></p>
      <p>An experienced bioinformatician might be aware of the problem immediately, due to his familiarity with the involved tools. This is, however, only a small workflow. An automatic, semantically supported detection of misconfigurations and modeling errors unfolds its full potential when processes become more complex, and it is not feasible for the <italic>in silico</italic> researcher to dive into the documentations of all services or to explore their behaviour by trial-and-error executions.</p>
      <p>Once detected, there are different ways to fix the problem. One can look for replacements for one of the involved SIBs that essentially compute the same results, but provide them in a data format that fits in the surrounding process. Another approach, assuming that the user has chosen these services for good reason, is to search for a sequence of additional services that resolve the mismatch and insert them into the process. Such data mediation sub-workflows are usually linear. They can consist of type conversions that simply adapt the involved data, or also of real computational services when the match can not be realized so easily.</p>
      <p>As a means for resolving the violation of property *, the example process model stub implies a process specification adequate as input for our workflow synthesis algorithm (please refer to the Methods section for details). In a high-level formulation, it reads:<disp-formula id="Equ2"><graphic xlink:href="12859_2009_Article_3376_Equb_HTML.gif" position="anchor"/></disp-formula></p>
      <p>Utilizing the semantically annotated SIB collection and domain information from above, and computing the shortest service combination that satisfies the specification, our synthesis algorithm proposes the following simple four-step workflow for the above query (bottom left in Figure <xref rid="Fig6" ref-type="fig">6</xref>):<fig id="Fig6"><label>Figure 6</label><caption><p><bold>Example 1</bold>. A simple phylogenetic analysis process. The upper left shows an erroneous stub for a simple phylogenetic analysis process, it lacks a sequence of services leading from a BLAST result to a phylogenetic tree. Below is the appropriate sequence of services that is proposed by our synthesis algorithm. The complete and correct analysis process is shown on the right.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig6_HTML" id="d32e1206"/></fig></p>
      <p>
        <list list-type="order">
          <list-item>
            <p>Extract the IDs of the hits from the BLAST result (using a regular expression).</p>
          </list-item>
          <list-item>
            <p>Turn the matches into a comma-separated list.</p>
          </list-item>
          <list-item>
            <p>Call DBFetch (fetching the corresponding sequences from a database).</p>
          </list-item>
          <list-item>
            <p>Run emma (computing a multiple sequence alignment and phylogenetic tree).</p>
          </list-item>
        </list>
      </p>
      <p>The generated sequence of SIBs can now be inserted into the process stub and all parameters configured appropriately. As Figure <xref rid="Fig6" ref-type="fig">6</xref> (right) shows, neither the local nor the model checking does reveal errors any more. The process is now ready for execution. Figure <xref rid="Fig7" ref-type="fig">7</xref> illustrates the corresponding runtime behaviour: the workflow starts by asking the user for a query sequence, then performs a similarity search, data retrieval and sequence analysis before it finally displays the resulting phylogenetic tree.<fig id="Fig7"><label>Figure 7</label><caption><p><bold>Execution of example 1</bold>. Execution of the simple phylogenetic analysis process. The execution begins with an interactive step, where a dialog is displayed in which the query sequence is entered (top). After some non-interactive steps, the finally available phylogenetic tree is displayed using Archaeopteryx (bottom).</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig7_HTML" id="d32e1253"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>Example 2: Blast-ClustalW workflow</title>
      <p>A simple phylogenetic analysis like in the previous example is an often recurring element of complex <italic>in silico</italic> experiments. In many cases, however, a customized, more specific processing of intermediate results is required, like in the Blast-ClustalW workflow [<xref ref-type="bibr" rid="CR50">50</xref>] that is one of the DDBJ's sample workflows for the Web API for bioinformatics [<xref ref-type="bibr" rid="CR51">51</xref>]. It is the archetype for our second example.</p>
      <p>The Blast-ClustalW workflow [<xref ref-type="bibr" rid="CR50">50</xref>] has the same inputs and outputs as the simple phylogenetic workflow from example 1: It finds homologuous sequences for an input DNA sequence via BLAST and computes a hypothesis about the phylogenetic relationship of the obtained sequences (using ClustalW). The proposed analysis procedure consists of four major computation steps (the blue rectangles in Figure <xref rid="Fig8" ref-type="fig">8</xref>, whereby steps 2 and 3 have to be repeated for each Blast hit that is taken into account (not evident from the figure):<fig id="Fig8"><label>Figure 8</label><caption><p><bold>Blast-ClustalW workflow</bold>. Blast-ClustalW workflow as sketched by the DDBJ (following [<xref ref-type="bibr" rid="CR50">50</xref>]).</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig8_HTML" id="d32e1289"/></fig></p>
      <p>
        <list list-type="order">
          <list-item>
            <p>Call the Blast web service to search the DDBJ database for homologues of a nucleic acid sequence. The input is a 16S RNA sequence in FASTA format, the output lists the database IDs of the similar sequences and basic information about the local alignment, e.g. its range within the sequences.</p>
          </list-item>
          <list-item>
            <p>Call the GetEntry web service with a database ID from the Blast output to retrieve the corresponding database entry.</p>
          </list-item>
          <list-item>
            <p>Extract accession number, organism name and sequence from the database entry. Trim the sequence to the relevant region using the start and end positions of the local alignment that are available from the BLAST result.</p>
          </list-item>
          <list-item>
            <p>Call the ClustalW web service to compute a global alignment and a phylogenetic tree for the prepared sequences.</p>
          </list-item>
        </list>
      </p>
      <p>Due to the loop that is required for repeating steps 2 and 3 a certain number of times, this process can not be created completely by our current synthesis algorithm, which is restricted to produce linear sequences of services. It is, however, possible to predefine a sparse process model in which the looping behaviour and other crucial parts are manually predefined, and to subsequently fill in linear parts of the process automatically.</p>
      <p>Figure <xref rid="Fig9" ref-type="fig">9</xref> (top) shows an advanced, but still incomplete model of the Blast-ClustalW workflow. Like in example 1, the process begins with displaying a dialog for entering the query sequence (start SIB top left). The result of the subsequent Blast web service invocation is split into the separate results (SIB get blast hits). Before the loop is entered, a maximum is set for number of hits that is to be considered in the analysis. For this defined maximum number of hits, the loop's body is executed. The current hit is split into its seperate elements, e.g. accession number, score, and the start and end position of the local alignment that produced by BLAST within the whole sequence. The accession number is used to check whether the sequence corresponding to the current hit has already been added to the analysis in order to avoid duplicate sequences. If a duplicate is detected, the maximimum number of hits is incremented, so that another hit can be taken into account. Otherwise, the corresponding entry is fetched from the database using the DDBJ's GetEntry web service (SIB getFASTA_DDBJEntry). The SIBs extract organism and extract sequence are then applied to extract the corresponding information from the DDBJ entry by means of a regular expression. The sequence is formatted, i.e. whitespaces removed, and the start and end positions that are known from the BLAST result are used to cut the subsequence that actually contributed to the local alignment during the BLAST search. The prepared sequence is then added to the analysis (SIB append sequence). Note that in contrast to the original representation of Figure <xref rid="Fig8" ref-type="fig">8</xref>, we see here the structure and the data-driven loops of the actual workflow. Finally, the resulting phylogenetic tree is displayed by Archaeopteryx.<fig id="Fig9"><label>Figure 9</label><caption><p><bold>Example 2</bold>. The more complex Blast-ClustalW workflow. The model checking detects three errors for the original process (top). To bridge the gap between the available sequences and the required tree, the emma web service can be inserted, computing a multiple alignment and providing the corresponding phylogenetic tree. No mediating sequence can be found that converts DDBJ entry into FASTA format, but it is possible to get this format when the also available DDBJ accession number is used as input (center). The complete process (bottom) has an additional SIB emma and has substituted getFASTA_DDBJEntry by getDDBJEntry.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig9_HTML" id="d32e1372"/></fig></p>
      <p>At this state of the process, the local checking of the components detects no errors, but the model checker reveals problems (overlay icons top right): As in the previous example, the SIB Archaeopteryx uses a variable tree, which is not defined before. Moreover, the SIBs extract organism and extract sequence use a variable ddbjentry, which is defined with an incompatible type. Details on the model checking procedure can be found in the Methods section.</p>
      <p>To resolve the first problem, we proceed similar as in example 1, by providing the synthesis algorithm with a temporal formula that asks for a sequence of services that takes a set of sequences as input (which is the last intermediate result that is computed previous to Archaeopteryx in the process) and produces a phylogenetic tree (the input that Archaeopteryx expects). As Figure <xref rid="Fig9" ref-type="fig">9</xref> (center) shows, a single call to emma is one of the (shortest) sequences that fulfils this request.</p>
      <p>The second problem is the presence of a type ddbjfasta where the type ddbjentry is expected. To solve this mismatch, we ask our synthesis algorithm for a way to derive the latter from the former. It returns with an empty result (see Figure <xref rid="Fig9" ref-type="fig">9</xref>, center), which means that our SIB collection can not provide an appropriate sequence of services. We exclude the type ddbjfasta and the SIB getFASTA_DDBJEntry, by which is it produced, and try our luck with the type ddbjaccession, which has been defined last, as starting point for the synthesis. The answer is a service sequence consisting of the SIB getDDBJEntry (center), by which we can now substitute the improper data retrieval SIB from above.</p>
      <p>The bottom of Figure <xref rid="Fig9" ref-type="fig">9</xref> shows the completely assembled process. We omit to demonstrate its execution behaviour, as it is very similar to that of example 1.</p>
    </sec>
    <sec id="Sec5">
      <title>Discussion and perspectives</title>
      <p>By means of two examples, the previous sections demonstrated the local checking, model checking and workflow synthesis methodology that is currently available in the jABC framework and thus part of Bio-jETI. The Local Checker plugin provides domain-independent functionality and is already conveniently integrated in the framework. We are now working on a user-friendly integration of the domain-specific model checking and synthesis techniques, especially with regard to the bioinformatics application domain. This ongoing work spans three dimensions, which are discussed in the following sections: domain modeling, model checking, and model synthesis.</p>
      <sec id="Sec6">
        <title>Domain modeling</title>
        <p>This dimension is the heart of making information technology available to biologists, as it enables them to express their problems in their own language terms – on the basis of adequately designed ontologies. It raises the issue where the domain knowledge ideally comes from. It is, of course, possible for each user to define custom service and type taxonomies, allowing for exactly the generalization and refinement that is required for the special case. However, as the tools and algorithms that are used are mostly third-party services, it is desirable to automatically retrieve domain information from a public knowledge repository as well. Therefore we plan to incorporate knowledge from different publicly available ontologies, like BioMoby [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR18">18</xref>] and SSWAP [<xref ref-type="bibr" rid="CR20">20</xref>, <xref ref-type="bibr" rid="CR21">21</xref>], and to integrate it into the service and type taxonomies for use by our synthesis methodology.</p>
        <p>It is, of course, also necessary that the services themselves are equipped with meta-information in terms of these ontologies. Again, we are looking at BioMoby with interest: numerous institutions have registered their web services at Moby Central, describing functionality and data types in pre-defined structures using a common terminology. Although BioMoby does not yet use standardized description formalisms like SAWSDL, it is already clear that there is semantic information available that we can use as predicates for automatic service classification.</p>
        <p>Furthermore it will be interesting to consider the incorporation of more content-oriented ontologies like the Gene Ontology [<xref ref-type="bibr" rid="CR22">22</xref>] or the OBO (Open Biomedical Ontologies) [<xref ref-type="bibr" rid="CR23">23</xref>] into our process development framework. This would allow the software to not only support the process development on a technical level, but also in terms of the underlying biological and experimental questions. Additional sources of information, like the provenance ontologies of [<xref ref-type="bibr" rid="CR52">52</xref>] could be also easily exploited by our synthesis and verification methods.</p>
      </sec>
      <sec id="Sec7">
        <title>Model checking</title>
        <p>This dimension is meant to systematically and automatically provide biologists with the required IT knowledge in a seamless way, similar to a spell checker which hints at orthographical mistakes – perhaps already indicating a proposal for correction. Immediate concrete examples of detectable issues are (cf. the examples presented earlier):</p>
        <p>
          <list list-type="bullet">
            <list-item>
              <p>Missing resources: a process step is missing, so that a required resource is not fetched/produced.</p>
            </list-item>
            <list-item>
              <p>Mismatching data types: a certain service is not able to work on the data format provided by its predecessor.</p>
            </list-item>
          </list>
        </p>
        <p>However, this is only a first step. Based on adequate domain modeling, made explicit via ontologies/taxonomies, model checking can capture semantic properties to guarantee not only the executability of the biological analysis process but also a good deal of its purpose, and rules of best practice, like:</p>
        <p>
          <list list-type="bullet">
            <list-item>
              <p>All experimental data will eventually be stored in the project repository.</p>
            </list-item>
            <list-item>
              <p>Unexpected analysis results will always lead to an alert.</p>
            </list-item>
            <list-item>
              <p>Chargeable services will not be called before permission is given by the user.</p>
            </list-item>
          </list>
        </p>
        <p>On a more technical side, model checking allows us also to apply the mature process analysis methodology that has been established in programming language compilers in the last decades [<xref ref-type="bibr" rid="CR53">53</xref>] and has shown to be realizable via model checking [<xref ref-type="bibr" rid="CR54">54</xref>, <xref ref-type="bibr" rid="CR55">55</xref>]. By providing a predefined set of desirable process properties to the model checker we plan to achieve a thorough monitoring of safety and liveness properties within the framework. Similar to the built-in code checks that most Integrated (Software) Development Environments provide, this would help Bio-jETI users to avoid the most common mistakes at process design time. In addition, the list of verified properties is extendable by the user, and can thus be easily adapted to specific requirements of the application domain.</p>
      </sec>
      <sec id="Sec8">
        <title>Model synthesis</title>
        <p>This dimension can be seen as a step beyond model checking: The biologist does not have to care about data types at all – the synthesis automatically makes the match by inserting required transformation programs. This is similar to a spell checker which automatically corrects the text, thus freeing the writer from dealing with orthography at all. (In our model-based framework, things are well-founded, without the uncertainties of natural language. Please do not be put off by this example because of annoying experiences with spell checkers!)</p>
        <p>The potential of this technology goes even further: ultimately, biologists will be able to specify their requests in a very sparse way, e.g. by just giving the essential corner stones, and the synthesis will complete this request to a running process. In our text writing analogy, this might look like a mechanism that automatically generates syntactically and intentionally correct text from text fragments according to predefined rules that capture syntax and intention. For instance, the fragments "ten cars", "1000 Euro for shipping", "19% value added tax", "four days" and "Mercedes", may be sufficient to synthesize a letter in which a logistics company offers its services to Mercedes according to a specific request.</p>
        <p>Back to biology, the fragments "DNA sequences", "phylogenetic tree", and "visualization", may automatically lead to a process that fetches EBI sequence data, sends them in adequate form to a tool that is able to produce a phylogenetic tree, and then transfers the result to an adequate viewer. Typically there are many processes that solve such a request. Thus our synthesis algorithm provides the choice of producing a default solution according to a predefined heuristics, or to propose sets of alternative solutions for the biologist to select.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Conclusion</title>
    <p>We demonstrated by means of two examples how Semantic Web technology together with an adequate domain modelling frees <italic>in silico</italic> researchers from dealing with interfaces, types, and inconsistencies. In Bio-jETI, bioinformatics services can be graphically combined to complex services without worrying about details of their interfaces or about type mismatches of the composition. These issues are taken care of at the semantic level by Bio-jETI's model checking and synthesis features. Whenever possible, they automatically resolve type mismatches in the considered service setting. Otherwise, they graphically indicate impossible/incorrect service combinations. In the latter case, the workflow developer may either modify his service composition using semantically similar services, or ask for help in developing the missing mediator that correctly bridges the detected type gap. Newly developed mediators should then be adequately annotated semantically, and added to the service library for later reuse in similar situations.</p>
    <p>In the first example we developed a simple phylogenetic analysis workflow. The model checker detected a SIB trying to access a data item that has not been defined previously in the workflow, which indicates that necessary computation steps are missing. We used the synthesis algorithm to generate the sequence of these missing steps.</p>
    <p>The second example dealt with a more complex phylogenetic analysis workflow, involving several local steps processing intermediate data. Here, the model checker did not only detect missing computations, but also a type mismatch that lead to an incorrect process model. Again, the synthesis algorithm was used to find an appropriate intermediate sequence of services and an alternative to the erroneous part of the workflow, respectively.</p>
    <p>We believe that our model checking and synthesis technologies have great potential with respect to making highly heterogeneous services accessible to <italic>in silico</italic> researchers that need to design and manage complex bioinformatics analysis processes. Our approach aims at lowering the required technical knowledge according to the <italic>"easy for the many, difficult for the few"</italic> paradigm [<xref ref-type="bibr" rid="CR56">56</xref>]. After an adequate domain modeling, including the definition of the semantic rules to be checked by the model checker or to be exploited during model synthesis, biologists should ultimately be able to profitably and efficiently work with a world-wide distributed collection of tools and data, using their own domain language. This goal differentiates us from other workflow development frameworks like Kepler [<xref ref-type="bibr" rid="CR3">3</xref>] or Triana [<xref ref-type="bibr" rid="CR5">5</xref>], which can be seen as middleware systems that facilitate the development of grid applications in a workflow-oriented fashion. They require quite some technical knowledge. In Kepler, for instance, the workflow design involves choosing an appropriate <italic>Director</italic> for the execution, depending on, e.g., whether the workflow depends on time, requires multiple threads or distributed execution, or performs simple transformations. These aspects have to be taken into account for efficient execution of complex computiations, but not necessarily when dealing with the actual composition of services. This way, these frameworks address a bioinformatics user, and not the biologists themselves.</p>
    <p>We believe that Bio-jETI's control flow-oriented approach is suitable for adressing non-IT personnel: it allows them to continue to think in "Dos" and "Dont's", and steps and sequences of action in their own terms at their level of domain knowledge. In contrast, dataflow-oriented tools like Kepler [<xref ref-type="bibr" rid="CR3">3</xref>], Taverna [<xref ref-type="bibr" rid="CR4">4</xref>], or Triana [<xref ref-type="bibr" rid="CR5">5</xref>] require their users to change the perspective to a resource point of view, which, in fact, requires implicit (technical) knowlegde to profitably use them.</p>
    <p>The challenge for us is now to integrate the available semantic information and the semantically aware technologies into our process development framework in the most user-convenient way. One central issue is to find an appropriate level of abstraction from the underlying technology: we would like to provide a set of general, pre-defined analyses and synthesis patterns, but at the same time give experienced users a way to add specialized specifications. Another issue is how to integrate semantic information about the application domain and its services into this (partly) automated workflow development process, since such knowledge is essential to achieve adequate results.</p>
    <p>On the one hand, this requires predicates characterizing the single services, i.e. their function and their input/output behaviour. On the other hand, taxonomies or ontologies are required which provide the domain knowledge against which the services (their predicates) are classified. The majority of this information has to be delivered by the tool and database providers, covering semantics of services as well as semantics of data. The convenience on the client side will increase as the Semantic Web spreads and new standards become established.</p>
  </sec>
  <sec id="Sec10">
    <title>Methods</title>
    <p>This section describes the methodologies for process model verification and synthesis that we used for developing the presented examples.</p>
    <sec id="Sec11">
      <title>Process model verification via model checking</title>
      <p>Model checking provides a powerful mechanism to analyze and verify static aspects of (arbitrary) models. Generally speaking, it can be used to check whether a model <italic>M</italic> satisfies a property <italic>ϕ</italic>, usually written as<disp-formula id="Equ3"><graphic xlink:href="12859_2009_Article_3376_Equc_HTML.gif" position="anchor"/></disp-formula></p>
      <p>where <italic>ϕ</italic> is expressed in terms of a modal or temporal logic. Applying model checking to process models can help to detect problems in the design phase. It is in particular useful to analyze aspects of the whole model, where syntax or type checking at the component level is not sufficient. Examples for errors whose detection requires awareness of the whole model are manifold, ranging from undefined variables or simple type mismatches to computational gaps and incomplete processes. The list of properties against which the model is evaluated is easily extendable, since including a new constraint in the verification only requires to write a modal or temporal formula expressing the property of interest.</p>
      <p>The model checker GEAR [<xref ref-type="bibr" rid="CR39">39</xref>] allows to evaluate static properties of models within the jABC, basically using the <italic>Computation Tree Logic</italic> (CTL) [<xref ref-type="bibr" rid="CR57">57</xref>] to formulate appropriate constraints. CTL is a temporal, branching time logic designed to reason about models represented as directed graphs, and whose syntax can be described by the following BNF:<disp-formula id="Equ4"><graphic xlink:href="12859_2009_Article_3376_Equd_HTML.gif" position="anchor"/></disp-formula></p>
      <p>Thus, in addition to the operations and operands known from propositional logic, it comprises the modalities <italic>AF</italic>, <italic>EF</italic>, <italic>AG</italic>, <italic>EG</italic>, <italic>AU</italic>, and <italic>EU</italic>. The <italic>A</italic> s and <italic>E</italic> s are <italic>path-quantifiers</italic>, providing a universal (<italic>A</italic>) or existential (<italic>E</italic>) quantification over the paths beginning at a state. <italic>F</italic>, <italic>G</italic>, and <italic>U</italic> express <italic>linear-time modalities</italic> for the path, specifying that <italic>ϕ</italic> must hold finally (<italic>F</italic>), generally (<italic>G</italic>), or that <italic>ϕ</italic><sub>1</sub> has to be valid until <italic>ϕ</italic><sub>2</sub> finally holds (<italic>U</italic>). For example, the CTL formula<disp-formula id="Equ5"><graphic xlink:href="12859_2009_Article_3376_Eque_HTML.gif" position="anchor"/></disp-formula></p>
      <p>expresses that on all paths through the model that begin at the considered state, finally Rome is reached. As another example from routing, the formula<disp-formula id="Equ6"><graphic xlink:href="12859_2009_Article_3376_Equf_HTML.gif" position="anchor"/></disp-formula></p>
      <p>states that there is a path that is completely (globally) free of charge. That all routes should be toll-free until a particular place, say Rome, is reached, can expressed using the <italic>U</italic> ntil operator:<disp-formula id="Equ7"><graphic xlink:href="12859_2009_Article_3376_Equg_HTML.gif" position="anchor"/></disp-formula></p>
      <p>GEAR extends this variant of CTL further and includes additional overlined modalities representing a backward view, i.e. considering the paths that end at a given state. We apply it to our (bioinformatics) process models, the Service Logic Graphs (SLGs), where the entire processes are the models, the individual activities (the services, in the form of SIBs) are the nodes, and the edges express the conditional flow of control. As both nodes and edges are labeled, these models are formally so-called Kripke Transition Systems.</p>
      <p>Basis for the analysis of processes are the <italic>atomic propositions</italic>, simple properties that hold for single nodes of the process model. For instance, we can add an atomic proposition use(x) to a SIB to express that a data item x is used by the service, or def(x) to state that it is produced (defined). Furthermore we can assume to have information about the types of the input and output data, and denote that a used or defined item x is of type y by type(use(x)) = y and type(def(x)) = y, respectively. Figure <xref rid="Fig10" ref-type="fig">10</xref> shows the atomic propositions of the SIBs in example 1.<fig id="Fig10"><label>Figure 10</label><caption><p><bold>Atomic propositions of the SIBs in example 1</bold>. Atomic propositions of the process stub and complete process model of example 1. The propositions describe basic data flow properties, like defined and used variables and their types in terms of the data types of the taxonomy.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig10_HTML" id="d32e1732"/></fig></p>
      <p>As we have seen in the examples, a model property of interest for processes orchestrated from remote services could be<disp-formula id="Equ8"><graphic xlink:href="12859_2009_Article_3376_Equh_HTML.gif" position="anchor"/></disp-formula></p>
      <p>The dependence between the two parts of this requirement is a usual Boolean implication, the temporal constraint in the second part is expressed by the backward CTL modality <inline-formula id="IEq1"><inline-graphic xlink:href="12859_2009_Article_3376_IEq1_HTML.gif"/></inline-formula>:<disp-formula id="Equ9"><graphic xlink:href="12859_2009_Article_3376_Equi_HTML.gif" position="anchor"/></disp-formula></p>
      <p>While this is sufficient to ensure that the variable x has been defined at all, it does not say anything about type correctness. Since the name x, however, could be used to refer to different data throughout the process, it is reasonable to extend the above constraint and to include the type of the used variable. In example 1, we considered, for instance, a variable of tree of type Tree:</p>
      <p><italic>If a service uses a data item</italic> tree <italic>of type</italic> tree, tree <italic>must have been defined before with precisely this type, without having been overwritten since</italic>.<disp-formula id="Equ10"><graphic xlink:href="12859_2009_Article_3376_Equj_HTML.gif" position="anchor"/></disp-formula></p>
      <p>The corresponding CTL formula is:<disp-formula id="Equ11"><graphic xlink:href="12859_2009_Article_3376_Equk_HTML.gif" position="anchor"/></disp-formula></p>
      <p>The model checking reveals a property violation, as can be seen in Figures <xref rid="Fig6" ref-type="fig">6</xref> (top left) and 10 (top): the rightmost SIB is marked by a red overlay icon in the upper right corner, indicating that the property is violated at that node. The reason is that the process does not provide the appropriate input type for the tree visualizer. The same formula can be applied analogously to other variables with other types, as we did, for instance, in our second example.</p>
    </sec>
    <sec id="Sec12">
      <title>Process synthesis</title>
      <p>By <italic>process synthesis</italic> we refer to techniques that construct workflows from sets of services according to logical specifications [<xref ref-type="bibr" rid="CR58">58</xref>]. The algorithm that we use for our approach is based on a modal logic that combines relative time with descriptions and taxonomic classifications of types and services [<xref ref-type="bibr" rid="CR40">40</xref>]. It was implemented for the ABC and ETI platforms [<xref ref-type="bibr" rid="CR43">43</xref>, <xref ref-type="bibr" rid="CR59">59</xref>], and lately also used within the jABC framework. We applied it, for instance, in the SWS Challenge [<xref ref-type="bibr" rid="CR13">13</xref>] to synthesize a mediator process converting between different message formats that were used by the web service providers in the scenario of [<xref ref-type="bibr" rid="CR60">60</xref>, <xref ref-type="bibr" rid="CR61">61</xref>].</p>
      <p>In the following we describe how to apply our synthesis method, i.e. 1) how the domain knowledge forms a configuration universe, 2) how a modal logic can be used for workflow specification, and 3) what the algorithm can finally derive from this information. Note that we focus on usage here, details on the underlying logics and algorithms can be found in [<xref ref-type="bibr" rid="CR40">40</xref>, <xref ref-type="bibr" rid="CR59">59</xref>].</p>
      <sec id="Sec13">
        <title>The configuration universe</title>
        <p>The domain knowledge that has to be provided for our synthesis algorithm comprises basically three sets: types, services, and transitions. The set of types that is available in the domain form the static aspects, i.e. type constraints that are used as atomic propositions by the underlying logic. The set of services represents the dynamic aspects of the domain, which can be used as actions by the logic. According to the observation that tools and algorithms can simply be seen as transformations that take an input and produce a corresponding output [<xref ref-type="bibr" rid="CR59">59</xref>], the set of transitions is given in triples of the form <italic>(input, service, output)</italic>. Together, types, services, and transitions form the configuration universe, in which each (finite) path represents a possible workflow. Figure <xref rid="Fig11" ref-type="fig">11</xref> illustrates a configuration universe that is implied by the SIBs and data types of our examples. The synthesis algorithm searches the configuration universe for a path satisfying a particular specification.<fig id="Fig11"><label>Figure 11</label><caption><p><bold>Fragment of the configuration universe</bold>. Fragment of the configuration universe based on the services and types from Tables 1 and 2. Paths through the configuration universe represent possible sequences of services. Note that the configuration universe is able to express service polymorphisms: the service ExtractPattern, for instance, can be applied to different inputs, and produces different outputs, accordingly.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig11_HTML" id="d32e1854"/></fig></p>
        <p>In addition, the domain knowledge can be extended further by hierarchically organizing types and services in taxonomies, i.e. simple ontologies that relate entities in terms of <italic>is-a</italic> and <italic>has-a</italic> relations. The types and service taxonomies for our examples are given in Figures <xref rid="Fig4" ref-type="fig">4</xref> and <xref rid="Fig5" ref-type="fig">5</xref>. The taxonomies are considered by the synthesis algorithm when evaluating type or service constraints.</p>
      </sec>
      <sec id="Sec14">
        <title>The specification language</title>
        <p>Our workflow specification language, which we call SLTL (for Semantic Linear Time Logic), can be seen as a linear-time variant of CTL (see previous section) or interpreted version of the Propositional Linear Time Logic. SLTL is described by the following BNF:<disp-formula id="Equ12"><graphic xlink:href="12859_2009_Article_3376_Equl_HTML.gif" position="anchor"/></disp-formula></p>
        <p>where <italic>t</italic><sub><italic>c</italic></sub>and <italic>s</italic><sub><italic>c</italic></sub>express type and service constraints, respectively.</p>
        <p>Thus, SLTL combines static, dynamic, and temporal constraints. The static constraints are the taxonomic expressions (boolean connectives) over the types or classes of the type taxonomy. Analogously, the dynamic constraints are the taxonomic expressions over the services or classes of the service taxonomy. The temporal constraints are covered by the modal structure of the logic, suitable to express the order in which services can be combined.</p>
        <p>A formal definition of the semantics of SLTL can be found in [<xref ref-type="bibr" rid="CR40">40</xref>]. Intuitively, true is satisfied by every sequence of services, and <italic>t</italic><sub><italic>c</italic></sub>by every sequence whose first component has an input interface satisfying <italic>t</italic><sub><italic>c</italic></sub>. Negation and disjunction are interpreted in the usual fashion. The construct ⟨<italic>s</italic><sub><italic>c</italic></sub>⟩<italic>ϕ</italic> is satisfied if the first component satisfies <italic>s</italic><sub><italic>c</italic></sub>, and the continuation of the service sequence satsifies <italic>ϕ</italic>. A formula of the form <italic>Gϕ</italic> requires that <italic>ϕ</italic> is satisfied <bold>G</bold> enerally, and <italic>ϕUψ</italic> expresses that the property <italic>ϕ</italic> holds for all services of the sequence, <bold>U</bold> ntil a position is reached whare the corresponding continuation satisfies the property <italic>ϕ</italic>.</p>
        <p>It is convenient to derive further operators from these basic constructs. The boolean disjunction<disp-formula id="Equ13"><graphic xlink:href="12859_2009_Article_3376_Equm_HTML.gif" position="anchor"/></disp-formula></p>
        <p>and the Eventually operator<disp-formula id="Equ14"><graphic xlink:href="12859_2009_Article_3376_Equn_HTML.gif" position="anchor"/></disp-formula></p>
        <p>are two common examples.</p>
        <p>Coming to concrete examples of workflow specifications, the synthesis algorithm can be used to generate linear workflows just on the basis of an intial type (e.g. BlastResult) and a final type (e.g. Tree) via the following SLTL formula:<disp-formula id="Equ15"><graphic xlink:href="12859_2009_Article_3376_Equo_HTML.gif" position="anchor"/></disp-formula></p>
        <p>As we have seen in the workflow examples, already this simple query has a real practical impact, as it allows to autmatically resolve type mismachtes.</p>
        <p>As another example, it is possible to query for an explicit sequence of services, let's say an input dialog asking for an accession number followed by the retrieval of the corresponding sequence from a database and a BLAST query:<disp-formula id="Equ16"><graphic xlink:href="12859_2009_Article_3376_Equp_HTML.gif" position="anchor"/></disp-formula></p>
        <p>Note that the service constraints in the formula are not concrete service names, but terms from the service taxonomy that define higher-order service categories. The synthesis algorithm takes care of instantiating the result with concrete services.</p>
      </sec>
      <sec id="Sec15">
        <title>The synthesis algorithm</title>
        <p>The synthesis algorithm interprets SLTL formulas over paths of the configuration universe, i.e. provided with a specification, it searches the configuration universe for (finite) corresponding paths. The algorithm is based on a tableau method, of which a detailed description is given in [<xref ref-type="bibr" rid="CR40">40</xref>]. It automatically generates all, all minimal, or all shortest service compositions that satisfy a specification, according to the selected synthesis mode. The algorithm's output is the basis for the final assembly of the corresponding SLG.</p>
        <p>The presently available implementation of the algorithm had been developed for use within the ABC, the jABC's predecessor that has been written in C++. In order to make it accessible from within the Java-based jABC framework, we integrated it using the jETI technology. The complete synthesis process is then defined by an SLG, as shown in Figure <xref rid="Fig12" ref-type="fig">12</xref>: The main process (top) triggers the execution of the synthesis and displays the solution that is returned. Then, it assembles the SLG corresponding to this solution and displays it on a canvas, where it can be used for further process development. The actual synthesis is carried out by the sub-process (bottom): It captures the available domain knowledge by collecting information about the available services (SIB CollectModules) and types (LoadSymbolicTypes) while evaluating the workflow specification (GenerateQuery). The collected information is stored in a specific database file (GenerateLola) and sent to the synthesis algorithm, which computes one shortes solution (SynthOneShort). The generated sequence of services is then converted into the jABC's graph format (PL2jABC) in order to allow further processing within the framework.<fig id="Fig12"><label>Figure 12</label><caption><p><bold>Synthesis SLG</bold>. Complete synthesis process, realized as jABC SLG. The main process (top) triggers the execution of the synthesis and displays the solution that is returned. Then, it assembles the SLG corresponding to this solution and displays it on a canvas, where it can be used for further process development. The actual synthesis is carried out by the sub-process (bottom): It captures the available domain knowledge and evaluates the workflow specification. The collected information is stored in a specific database file and sent to the synthesis algorithm, which computes one shortest solution (SynthOneShort). The generated sequence of services is then converted into the jABC's graph format in order to allow further processing within the framework.</p></caption><graphic xlink:href="12859_2009_Article_3376_Fig12_HTML" id="d32e2032"/></fig></p>
        <p>We are currently re-implemening the algorithm in Java, making it suitable for seamless integration into the jABC framework. Also, we will add functionality for facilitating the synthesis procedure for the user, for instance by providing a graphical interface supporting the domain modeling and formula patterns for the specification of workflows. Furthermore, we plan to incorporate alternative methods for the composition of services, such as an algorithm based on MoSeL [<xref ref-type="bibr" rid="CR62">62</xref>] or different tools that are available in the Plan-jETI collection of planning algorithms.</p>
      </sec>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>List of abbreviations</title>
    <def-list>
      <def-item>
        <term>API</term>
        <def>
          <p>Application Programming Interface</p>
        </def>
      </def-item>
      <def-item>
        <term>BLAST</term>
        <def>
          <p>Basic Local Alignment Search Tool</p>
        </def>
      </def-item>
      <def-item>
        <term>BNF</term>
        <def>
          <p>Backus-Naur Form</p>
        </def>
      </def-item>
      <def-item>
        <term>BiBiServ</term>
        <def>
          <p>Bielefeld Bioinformatics Server</p>
        </def>
      </def-item>
      <def-item>
        <term>CTL</term>
        <def>
          <p>Computation Tree Logic</p>
        </def>
      </def-item>
      <def-item>
        <term>DDBJ</term>
        <def>
          <p>DNA Data Bank of Japan</p>
        </def>
      </def-item>
      <def-item>
        <term>DNA</term>
        <def>
          <p>DeoxyriboNucleic Acid</p>
        </def>
      </def-item>
      <def-item>
        <term>EBI</term>
        <def>
          <p>European Bioinformatics Institute</p>
        </def>
      </def-item>
      <def-item>
        <term>EMBOSS</term>
        <def>
          <p>European Molecular Biology Open Software Suite</p>
        </def>
      </def-item>
      <def-item>
        <term>GEAR</term>
        <def>
          <p>Game-based Easy And Reversed model checking tool</p>
        </def>
      </def-item>
      <def-item>
        <term>GO</term>
        <def>
          <p>Gene Ontology</p>
        </def>
      </def-item>
      <def-item>
        <term>GUI</term>
        <def>
          <p>Graphical User Interface</p>
        </def>
      </def-item>
      <def-item>
        <term>IT</term>
        <def>
          <p>Information Technology</p>
        </def>
      </def-item>
      <def-item>
        <term>(j)ABC</term>
        <def>
          <p>Application Building Center (Java implementation)</p>
        </def>
      </def-item>
      <def-item>
        <term>(j)ETI</term>
        <def>
          <p>Electronic Tool Integration platform (Java implementation)</p>
        </def>
      </def-item>
      <def-item>
        <term>LTL</term>
        <def>
          <p>Linear Time Logic</p>
        </def>
      </def-item>
      <def-item>
        <term>MoSeL</term>
        <def>
          <p>Monadic Second order Logic</p>
        </def>
      </def-item>
      <def-item>
        <term>OBO</term>
        <def>
          <p>Open Bioinformatics Ontologies</p>
        </def>
      </def-item>
      <def-item>
        <term>OWL</term>
        <def>
          <p>Web Ontology Language</p>
        </def>
      </def-item>
      <def-item>
        <term>RDF</term>
        <def>
          <p>Resource Description Framework RNA: RiboNucleic Acid</p>
        </def>
      </def-item>
      <def-item>
        <term>S3C</term>
        <def>
          <p>Semantic Service Selection Contest</p>
        </def>
      </def-item>
      <def-item>
        <term>SAWSDL</term>
        <def>
          <p>Semantic Annotations for WSDL</p>
        </def>
      </def-item>
      <def-item>
        <term>SIB</term>
        <def>
          <p>Service-Independent Building block</p>
        </def>
      </def-item>
      <def-item>
        <term>SLG</term>
        <def>
          <p>Service Logic Graph</p>
        </def>
      </def-item>
      <def-item>
        <term>SLTL</term>
        <def>
          <p>Semantic Linear Time Logic SSWAP: Simple Semantic Web Architecture and Protocol</p>
        </def>
      </def-item>
      <def-item>
        <term>SWS</term>
        <def>
          <p>Semantic Web Services</p>
        </def>
      </def-item>
      <def-item>
        <term>URI</term>
        <def>
          <p>Uniform Resource Identifier</p>
        </def>
      </def-item>
      <def-item>
        <term>W3C</term>
        <def>
          <p>World Wide Web Consortium</p>
        </def>
      </def-item>
      <def-item>
        <term>WSDL</term>
        <def>
          <p>Web Service Description Language.</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors' contributions</bold>
      </p>
      <p>AL developed the presented examples and drafted the manuscript. TM and BS have been developing the concept of the jABC and jETI platforms since 1993, first in the area of formal verification tools, then in the area of Semantic Web services. They have revised and edited the manuscript. All authors read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Many thanks to Stefan Naujokat for technical support with the synthesis tools and algorithms.</p>
    <p>This article has been published as part of <italic>BMC Bioinformatics</italic> Volume 10 Supplement 10, 2009: Semantic Web Applications and Tools for Life Sciences, 2008. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/10?issue=S10">http://www.biomedcentral.com/1471-2105/10?issue=S10</ext-link>.</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bausch</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Pautasso</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Alonso</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>BioOpera: Cluster-aware Computing</article-title>
        <source>Proceedings of the 4th IEEE International Conference on Cluster Computing (Cluster)</source>
        <year>2002</year>
        <fpage>99</fpage>
        <lpage>106</lpage>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eker</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Janneck</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Taming heterogeneity – the Ptolemy approach</article-title>
        <source>Proceedings of the IEEE</source>
        <year>2003</year>
        <volume>91</volume>
        <fpage>127</fpage>
        <lpage>144</lpage>
        <pub-id pub-id-type="doi">10.1109/JPROC.2002.805829</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Altintas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Berkley</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Jaeger</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Kepler: An Extensible System for Design and Execution of Scientific Workflows</article-title>
        <source>16th Intl Conf on Scientific and Statistical Database Management (SSDBM'04)</source>
        <year>2004</year>
        <fpage>21</fpage>
        <lpage>23</lpage>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oinn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Addis</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ferris</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Taverna: a tool for the composition and enactment of bioinformatics workflows</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <issue>17</issue>
        <fpage>3045</fpage>
        <lpage>3054</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth361</pub-id>
        <?supplied-pmid 15201187?>
        <pub-id pub-id-type="pmid">15201187</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Taylor</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Shields</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Harrison</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>The Triana Workflow Environment: Architecture and Applications</article-title>
        <source>Workflows for e-Science</source>
        <year>2007</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>320</fpage>
        <lpage>339</lpage>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tang</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Chua</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Ho</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Wildfire: distributed, Grid-enabled workflow construction and execution</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>69</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-69</pub-id>
        <?supplied-pmid 15788106?>
        <pub-id pub-id-type="pmid">15788106</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kubzcak</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Bio-jETI: a Service Integration, Design, and Provisioning Platform for Orchestrated Bioinformatics Processes</article-title>
        <source>BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>Suppl 4</issue>
        <fpage>S12</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S4-S12</pub-id>
        <?supplied-pmid 18460173?>
        <pub-id pub-id-type="pmid">18460173</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berners-Lee</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hendler</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lassila</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>The Semantic Web – A new form of Web content that is meaningful to computers will unleash a revolution of new possibilities</article-title>
        <source>Scientific American</source>
        <year>2001</year>
        <volume>284</volume>
        <issue>5</issue>
        <fpage>34</fpage>
        <lpage>43</lpage>
        <pub-id pub-id-type="doi">10.1038/scientificamerican0501-34</pub-id>
        <pub-id pub-id-type="pmid">11396337</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other"><bold>W3C Semantic Web Activity</bold>[<ext-link ext-link-type="uri" xlink:href="http://www.w3.org/2001/sw/">http://www.w3.org/2001/sw/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other"><bold>Semantic Annotations for WSDL Working Group</bold>[<ext-link ext-link-type="uri" xlink:href="http://www.w3.org/2002/ws/sawsdl/">http://www.w3.org/2002/ws/sawsdl/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other"><bold>Resource Description Framework (RDF)/W3C Semantic Web Activity</bold>[<ext-link ext-link-type="uri" xlink:href="http://www.w3.org/RDF/">http://www.w3.org/RDF/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other"><bold>Web Ontology Language OWL/W3C Semantic Web Activity</bold>[<ext-link ext-link-type="uri" xlink:href="http://www.w3.org/2004/OWL/">http://www.w3.org/2004/OWL/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other"><bold>SWS Challenge Website</bold>[<ext-link ext-link-type="uri" xlink:href="http://sws-challenge.org">http://sws-challenge.org</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other"><bold>International Contest S3 on Semantic Service Selection</bold>[<ext-link ext-link-type="uri" xlink:href="http://www-ags.dfki.uni-sb.de/~klusch/s3/index.html">http://www-ags.dfki.uni-sb.de/~klusch/s3/index.html</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other"><bold>OPOSSum Online Portal for Semantic Services</bold>[<ext-link ext-link-type="uri" xlink:href="http://fusion.cs.uni-jena.de/opossum/">http://fusion.cs.uni-jena.de/opossum/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Küuster</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>König-Ries</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Krug</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>OPOSSum – An Online Portal to Collect and Share SWS Descriptions</article-title>
        <source>Proceedings of the 2008 IEEE International Conference on Semantic Computing</source>
        <year>2008</year>
        <fpage>480</fpage>
        <lpage>481</lpage>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Links</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>BioMOBY: an open source biological web services proposal</article-title>
        <source>Briefings in Bioinformatics</source>
        <year>2002</year>
        <volume>3</volume>
        <issue>4</issue>
        <fpage>331</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/3.4.331</pub-id>
        <?supplied-pmid 12511062?>
        <pub-id pub-id-type="pmid">12511062</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Senger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kawas</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Interoperability with Moby 1.0-it's better than sharing your toothbrush!</article-title>
        <source>Briefings in Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>3</issue>
        <fpage>220</fpage>
        <lpage>31</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbn003</pub-id>
        <?supplied-pmid 18238804?>
        <pub-id pub-id-type="pmid">18238804</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Gessler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Farmer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stein</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>The BioMOBY Project Explores Open-Source, Simple, Extensible Protocols for Enabling Biological Database Interoperability</article-title>
        <source>Proceedings of the Virtual Conference on Genomics and Bioinformatics</source>
        <year>2003</year>
        <volume>3</volume>
        <fpage>17</fpage>
        <lpage>27</lpage>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gessler</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <source>SSWAP – Simple Semantic Web Architecture and Protocol</source>
        <year>2009</year>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other"><bold>Simple Semantic Web Architecture and Protocol</bold>2009. [<ext-link ext-link-type="uri" xlink:href="http://sswap.info">http://sswap.info</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ashburner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ball</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Blake</surname>
            <given-names>JA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Gene ontology: tool for the unification of biology</article-title>
        <source>Nature Genetics</source>
        <year>2000</year>
        <volume>25</volume>
        <fpage>25</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/75556</pub-id>
        <?supplied-pmid 10802651?>
        <pub-id pub-id-type="pmid">10802651</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ashburner</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The OBO Foundry: coordinated evolution of ontologies to support biomedical data integration</article-title>
        <source>Nat Biotech</source>
        <year>2007</year>
        <volume>25</volume>
        <issue>11</issue>
        <fpage>1251</fpage>
        <lpage>1255</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt1346</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Garvey</surname>
            <given-names>TD</given-names>
          </name>
          <name>
            <surname>Lincoln</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pedersen</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>BioSPICE: access to the most current computational tools for biologists</article-title>
        <source>Omics: A Journal of Integrative Biology</source>
        <year>2003</year>
        <volume>7</volume>
        <issue>4</issue>
        <fpage>411</fpage>
        <lpage>420</lpage>
        <pub-id pub-id-type="doi">10.1089/153623103322637715</pub-id>
        <?supplied-pmid 14683613?>
        <pub-id pub-id-type="pmid">14683613</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Brambilla</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Celino</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cerizza</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Valle</surname>
            <given-names>ED</given-names>
          </name>
          <name>
            <surname>Facca</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>A Software Engineering Approach to Design and Development of Semantic Web Service Applications</article-title>
        <source>The Semantic Web – ISWC</source>
        <year>2006</year>
        <publisher-loc>Berlin/Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>172</fpage>
        <lpage>186</lpage>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Haselwanter</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kotinurmi</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Moran</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Vitvar</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Zaremba</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>WSMX: A Semantic Service Oriented Middleware for B2B Integration</article-title>
        <source>Service-Oriented Computing – ICSOC</source>
        <year>2006</year>
        <publisher-loc>Berlin/Heidelberg</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>477</fpage>
        <lpage>483</lpage>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Dibernardo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pottinger</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wilkinson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Semi-automatic web service composition for the life sciences using the BioMoby semantic web framework</article-title>
        <source>Journal of Biomedical Informatics</source>
        <year>2008</year>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other"><bold>Bio-jETI Website</bold>[<ext-link ext-link-type="uri" xlink:href="http://biojeti.cs.tu-dortmund.de/">http://biojeti.cs.tu-dortmund.de/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kubczak</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Njoku</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Model-based Design of Distributed Collaborative Bioinformatics Processes in the jABC</article-title>
        <source>Proceedings of ICECCS, IEEE Computer Society</source>
        <year>2006</year>
        <fpage>169</fpage>
        <lpage>176</lpage>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Kubczak</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Fritsch</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Biological LC/MS Preprocessing and Analysis with jABC, jETI and xcms</article-title>
        <source>Leveraging Applications of Formal Methods, Verification and Validation, ISoLA 2006</source>
        <year>2006</year>
        <fpage>303</fpage>
        <lpage>308</lpage>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lamprecht</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GeneFisher-P: variations of GeneFisher as processes in Bio-jETI</article-title>
        <source>BMC Bioinformatics</source>
        <year>2008</year>
        <volume>9</volume>
        <issue>Suppl 4</issue>
        <fpage>S13</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S4-S13</pub-id>
        <?supplied-pmid 18460174?>
        <pub-id pub-id-type="pmid">18460174</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Lamprecht</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Seven Variations of an Alignment Workflow – An Illustration of Agile Process Design and Management in Bio-jETI</article-title>
        <source>Bioinformatics Research and Applications</source>
        <year>2008</year>
        <publisher-loc>LNBI, Atlanta, Georgia</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>445</fpage>
        <lpage>456</lpage>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Nagel</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Jörges</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kubczak</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Model-Driven Development with the jABC</article-title>
        <source>Hardware and Software, Verification and Testing</source>
        <year>2006</year>
        <fpage>92</fpage>
        <lpage>108</lpage>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other"><bold>jABC Website</bold>[<ext-link ext-link-type="uri" xlink:href="http://www.jabc.de">http://www.jabc.de</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Nagel</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>jETI: A Tool for Remote Tool Integration</article-title>
        <source>Tools and Algorithms for the Construction and Analysis of Systems</source>
        <year>2005</year>
        <publisher-loc>Springer Berlin/Heidelberg</publisher-loc>
        <publisher-name>LNCS</publisher-name>
        <fpage>557</fpage>
        <lpage>562</lpage>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kubczak</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Naujokat</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>The FMICS-jETI Platform: Status and Perspectives</article-title>
        <source>ISoLA 2nd IEEE-EASST International Symposium On Leveraging Applications of formal methods, verification, and validation, Paphos (CY), Proceedings</source>
        <year>2006</year>
        <fpage>414</fpage>
        <lpage>418</lpage>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jörges</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Genesys: Service-Oriented Construction of Property Conform Code Generators</article-title>
        <source>Innovations in System and Software Engineering</source>
        <year>2009</year>
        <volume>4</volume>
        <issue>4</issue>
        <fpage>361</fpage>
        <lpage>384</lpage>
        <pub-id pub-id-type="doi">10.1007/s11334-008-0071-2</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Clarke</surname>
            <given-names>EM</given-names>
          </name>
          <name>
            <surname>Grumberg</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Peled</surname>
            <given-names>DA</given-names>
          </name>
        </person-group>
        <source>Model Checking</source>
        <year>1999</year>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bakera</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Renner</surname>
            <given-names>CD</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Verification, Diagnosis and Adaptation: Tool supported enhancement of the model-driven verification process</article-title>
        <source>ISoLA</source>
        <year>2007</year>
        <fpage>85</fpage>
        <lpage>97</lpage>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Freitag</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <source>Module Configuration by Minimal Model Construction</source>
        <year>1993</year>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Beeck</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Automatic synthesis of linear process models from temporal constraints: An incremental approach</article-title>
        <source>ACM/SIGPLAN Int. Workshop on Automated Analysis of Software (AAS'97)</source>
        <year>1997</year>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Backtracking-Free Design Planning by Automatic Synthesis in METAFrame</article-title>
        <source>Fundamental Approaches to Software Engineering</source>
        <year>1998</year>
        <fpage>188</fpage>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>LTL Guided Planning: Revisiting Automatic Tool Composition in ETI</article-title>
        <source>Proceedings of the 31st IEEE Software Engineering Workshop</source>
        <year>2007</year>
        <fpage>214</fpage>
        <lpage>226</lpage>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Pillai</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Silventoinen</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kallio</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SOAP-based services provided by the European Bioinformatics Institute</article-title>
        <source>Nucleic Acids Research</source>
        <year>2005</year>
        <fpage>W25</fpage>
        <lpage>8</lpage>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Labarga</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Valentin</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lopez</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Web Services at the European Bioinformatics Institute</article-title>
        <source>Nucleic Acids Research</source>
        <year>2007</year>
        <fpage>W6</fpage>
        <lpage>11</lpage>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hartmeier</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Krüger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Giegerich</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Webservices and Workflows on the Bielefeld Bioinformatics Server: Practices and Problems</article-title>
        <source>Proceedings of the Workshop on Network Tools and Applications in Biology (NETTAB), Pisa, Italy</source>
        <year>2007</year>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Miyazaki</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sugawara</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ikeo</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Gojobori</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Tateno</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>DDBJ in the stream of various biological data</article-title>
        <source>Nucleic Acids Research</source>
        <year>2004</year>
        <fpage>D31</fpage>
        <lpage>4</lpage>
      </element-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rice</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Longden</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Bleasby</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>EMBOSS: the European Molecular Biology Open Software Suite</article-title>
        <source>Trends in Genetics: TIG</source>
        <year>2000</year>
        <volume>16</volume>
        <issue>6</issue>
        <fpage>276</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1016/S0168-9525(00)02024-2</pub-id>
        <?supplied-pmid 10827456?>
        <pub-id pub-id-type="pmid">10827456</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zmasek</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>ATV: display and manipulation of annotated phylogenetic trees</article-title>
        <source>Bioinformatics (Oxford, England)</source>
        <year>2001</year>
        <volume>17</volume>
        <issue>4</issue>
        <fpage>383</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/17.4.383</pub-id>
      </element-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shigemoto</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Kuwana</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Sugawara</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <source>Blast-ClustalW workflow</source>
        <year>2009</year>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <mixed-citation publication-type="other"><bold>Web API for Biology (WABI)</bold>[<ext-link ext-link-type="uri" xlink:href="http://xml.nig.ac.jp/">http://xml.nig.ac.jp/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sahoo</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Sheth</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Henson</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Semantic Provenance for eScience: Managing the Deluge of Scientific Data</article-title>
        <source>IEEE Internet Computing</source>
        <year>2008</year>
        <volume>12</volume>
        <issue>4</issue>
        <fpage>46</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1109/MIC.2008.86</pub-id>
      </element-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Aho</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Sethi</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ullman</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <source>Compilers: Principles, Techniques, and Tools</source>
        <year>2007</year>
      </element-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Data Flow Analysis as Model Checking</article-title>
        <source>TACS '91: Proceedings of the International Conference on Theoretical Aspects of Computer Software</source>
        <year>1991</year>
        <fpage>346</fpage>
        <lpage>365</lpage>
      </element-citation>
    </ref>
    <ref id="CR55">
      <label>55.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Schmidt</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Program Analysis as Model Checking of Abstract Interpretations</article-title>
        <source>Proceedings of the 5th International Symposium on Static Analysis</source>
        <year>1998</year>
        <fpage>351</fpage>
        <lpage>380</lpage>
      </element-citation>
    </ref>
    <ref id="CR56">
      <label>56.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Service is in the Eyes of the Beholder</article-title>
        <source>IEEE Computer</source>
        <year>2007</year>
      </element-citation>
    </ref>
    <ref id="CR57">
      <label>57.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Clarke</surname>
            <given-names>EM</given-names>
          </name>
          <name>
            <surname>Grumberg</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Peled</surname>
            <given-names>DA</given-names>
          </name>
        </person-group>
        <source>Model Checking</source>
        <year>1999</year>
        <fpage>27</fpage>
        <lpage>32</lpage>
      </element-citation>
    </ref>
    <ref id="CR58">
      <label>58.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Manna</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wolper</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Synthesis of Communicating Processes from Temporal Logic Specifications</article-title>
        <source>ACM Trans Program Lang Syst</source>
        <year>1984</year>
        <volume>6</volume>
        <fpage>68</fpage>
        <lpage>93</lpage>
        <pub-id pub-id-type="doi">10.1145/357233.357237</pub-id>
      </element-citation>
    </ref>
    <ref id="CR59">
      <label>59.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Freitag</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Zukowski</surname>
            <given-names>U</given-names>
          </name>
        </person-group>
        <article-title>An Approach to Intelligent Software Library Management</article-title>
        <source>Proceedings of the 4th International Conference on Database Systems for Advanced Applications (DASFAA)</source>
        <year>1995</year>
        <fpage>71</fpage>
        <lpage>78</lpage>
      </element-citation>
    </ref>
    <ref id="CR60">
      <label>60.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Bakera</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Raffelt</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Steffen</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Synthesizing the Mediator with jABC/ABC</article-title>
        <source>EON</source>
        <year>2008</year>
        <publisher-loc>CEUR Workshop Proceedings, Tenerife, Spain</publisher-loc>
        <publisher-name>CEUR-WS.org</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR61">
      <label>61.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Kubczak</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kaiser</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lemcke</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Knuth</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Abductive Synthesis of the Mediator Scenario with jABC and GEM</article-title>
        <source>EON</source>
        <year>2008</year>
        <publisher-loc>CEUR Workshop Proceedings, Tenerife, Spain</publisher-loc>
        <publisher-name>CEUR-WS.org</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR62">
      <label>62.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Kelb</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Margaria</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Mendler</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gsottberger</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>MOSEL: A flexible toolset for monadic second-order logic</article-title>
        <source>PROCEEDINGS OF CAV'97, LNCS 1254</source>
        <year>1997</year>
        <fpage>183</fpage>
        <lpage>202</lpage>
      </element-citation>
    </ref>
    <ref id="CR63">
      <label>63.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>Journal of Molecular Biology</source>
        <year>1990</year>
        <volume>215</volume>
        <issue>3</issue>
        <fpage>403</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR64">
      <label>64.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thompson</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Higgins</surname>
            <given-names>DG</given-names>
          </name>
          <name>
            <surname>Gibson</surname>
            <given-names>TJ</given-names>
          </name>
        </person-group>
        <article-title>CLUSTAL W: improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties and weight matrix choice</article-title>
        <source>Nucleic Acids Research</source>
        <year>1994</year>
        <volume>22</volume>
        <issue>22</issue>
        <fpage>4673</fpage>
        <lpage>80</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/22.22.4673</pub-id>
        <?supplied-pmid 7984417?>
        <pub-id pub-id-type="pmid">7984417</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
