<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Chem Inf Comput Sci</journal-id>
    <journal-id journal-id-type="iso-abbrev">J Chem Inf Comput Sci</journal-id>
    <journal-title-group>
      <journal-title>Journal of Chemical Information and Computer Sciences</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">0095-2338</issn>
    <publisher>
      <publisher-name>American Chemical Society</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4901983</article-id>
    <article-id pub-id-type="doi">10.1021/ci025584y</article-id>
    <article-id pub-id-type="publisher-id">jcics-2003-43-493</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Articles</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>The Chemistry Development Kit (CDK): An Open-Source Java Library for Chemo-and Bioinformatics</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Steinbeck</surname>
          <given-names>Christoph</given-names>
        </name>
        <xref ref-type="corresp" rid="c1-jcics-2003-43-493">*</xref>
        <xref ref-type="author-notes" rid="fn1-jcics-2003-43-493">†</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Han</surname>
          <given-names>Yongquan</given-names>
        </name>
        <xref ref-type="author-notes" rid="fn1-jcics-2003-43-493">†</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kuhn</surname>
          <given-names>Stefan</given-names>
        </name>
        <xref ref-type="author-notes" rid="fn1-jcics-2003-43-493">†</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Horlacher</surname>
          <given-names>Oliver</given-names>
        </name>
        <xref ref-type="author-notes" rid="fn2-jcics-2003-43-493">‡</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Luttmann</surname>
          <given-names>Edgar</given-names>
        </name>
        <xref ref-type="author-notes" rid="fn3-jcics-2003-43-493">§</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Willighagen</surname>
          <given-names>Egon</given-names>
        </name>
        <xref ref-type="author-notes" rid="fn4-jcics-2003-43-493">#</xref>
      </contrib>
      <aff id="af1-jcics-2003-43-493">Max-Planck-Institute of Chemical Ecology, Jena, Germany, TheraSTrat AG, Allschwil, Switzerland, Institute of Organic Chemistry, University of Paderborn, Germany, and Nijmegen, The Netherlands</aff>
    </contrib-group>
    <author-notes>
      <corresp id="c1-jcics-2003-43-493"><label>*</label>Corresponding author present address: Cologne University Bioinformatics Center (CUBIC), Cologne, Germany. Phone: +49 (0)221 470 7426; fax: +49 (0)221 470 5092; e-mail: <email>c.steinbeck@uni-koeln.de</email>.</corresp>
      <fn id="fn1-jcics-2003-43-493">
        <label>†</label>
        <p>Max-Planck-Institute of Chemical Ecology.</p>
      </fn>
      <fn id="fn2-jcics-2003-43-493">
        <label>‡</label>
        <p>TheraSTrat AG.</p>
      </fn>
      <fn id="fn3-jcics-2003-43-493">
        <label>§</label>
        <p>University of Paderborn.</p>
      </fn>
      <fn id="fn4-jcics-2003-43-493">
        <label>#</label>
        <p>Nijmegen.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>3</month>
      <year>2003</year>
    </pub-date>
    <volume>43</volume>
    <issue>2</issue>
    <fpage>493</fpage>
    <lpage>500</lpage>
    <history>
      <date date-type="received">
        <day>17</day>
        <month>8</month>
        <year>2002</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2003 American Chemical Society</copyright-statement>
      <copyright-year>2003</copyright-year>
      <license>
        <license-p>This is an open access article published under a Creative Commons Attribution (CC-BY) License, which permits unrestricted use, distribution and reproduction in any medium, provided the author and source are cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>The Chemistry Development Kit (CDK) is a freely available open-source Java library for Structural Chemo-and Bioinformatics. Its architecture and capabilities as well as the development as an open-source project by a team of international collaborators from academic and industrial institutions is described. The CDK provides methods for many common tasks in molecular informatics, including 2D and 3D rendering of chemical structures, I/O routines, SMILES parsing and generation, ring searches, isomorphism checking, structure diagram generation, etc. Application scenarios as well as access information for interested users and potential contributors are given.</p>
    </abstract>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>1. INTRODUCTION</title>
    <p>Whoever pursues the endeavor of creating a larger software package in chemoinformatics or computational chemistry from scratch will soon be confronted with the Syssiphus task of implementing the standard repertoire of chemoinformatical algorithms and components invented during the last 20 or 30 years. The obvious workaround for this problem are commercially available chemoinformatics libraries that have been developed by companies such as MDL Information Systems, Inc., Daylight Chemical Information Systems, Inc., Advanced Chemistry Development, and certainly many others. A scientist in an academic environment, however, often feels obliged to openly share his results with the scientific community. Using proprietary components for software development makes it impossible to do so.</p>
    <p>Generally, scientific software is too often closed source, leaving the user with a black box performing magical operations. Perceived as being counterproductive for the overall scientific progress, this trend fortunately seems to change. Sharing of ideas and results within communities is probably the most central paradigm in science. By publishing his results a scientist allows his colleagues to verify and build upon his results, thereby advancing the particular field as a whole [If I have seen further it is by standing on the shoulders of giants. - Isaac Newton]. One of the motivations for such contributions, besides the pure scientific curiosity, is, of course, the gain of social recognition and reputation among his peers.</p>
    <p>In recent years the ideas sketched above have been part of the open-source revolution that took place in the world of software development, most widely recognized through the great success of the free Unix-like operating system GNU/Linux, a collaborative work of many individuals and organizations, including the Free Software Foundation lead by Richard Stallman and the Finish computer science student Linus Torvalds who started the project. According to several essays on this subject, open-source software, for which, by definition, the source code is always freely available to the public,<xref rid="b1-jcics-2003-43-493" ref-type="bibr">1</xref> has a number of intriguing benefits.</p>
    <p>Most importantly, if the community of users is large enough and everyone can look at the sources and change them, it should not take too long until a particular software error is found and fixed. “Given enough eyeballs, all bugs are shallow”, as Eric Raymond put it in his widely recognized essay “The Cathedral and the Bazaar”,<xref rid="b2-jcics-2003-43-493" ref-type="bibr">2</xref> in which he analyses the mechanisms and principles of the open source movement.</p>
    <p>Further, other scientists can easily build on existing results. Credit can still be given in the appropriate form, because open-source software is by no means freeware or in the public domain. Quite the contrary, the package as a whole as well as each piece of source code is labeled with a clear copyright notice, stating the name of the copyright holder and the nature of the license. This copyright notice must not be removed. Additional comments, however, regarding the changes and improvements made by others can, of course, be added. Substantial improvements to an existing piece of code by someone other than the copyright holder will usually lead to something like team formation, including appropriate copyright changes. This is especially important for academic scientists, who need to be able to point out their contributions to a particular field.</p>
    <p>Considering the virtues of open-source software on one hand and the scientific tradition on the other hand, we started the CDK project under terms of a liberal open-source license.<xref rid="b3-jcics-2003-43-493" ref-type="bibr">3</xref> We use SourceForge,<xref rid="b4-jcics-2003-43-493" ref-type="bibr">4</xref> a Web based open-source development platform, for coordinating the contributions from about 10 developers from about five different countries. A greater number of people have subscribed to the developers mailing list and either listen silently or contribute by making feature requests or critical comments. SourceForge provides all the tools which are generally considered to be indispensable components for coordinating the contributions from developers and users in larger software projects, as there are Webspace, mailing lists, bug trackers, software versioning systems, release managers, etc.</p>
    <p>This article is not only to describe the CDK project in scientific and software-technological terms but also to promote the underlying development model. The authors think that these principles form a paradigm for scientific software development where scientists can truly exploit the benefits of the Internet for a distributed collaboration that would not have been possible in pre-Internet times.</p>
    <p>We are explicitly not claiming to give a general overview of chemical open source software. This will form an article of its own. However, we will give a synopsis on open source Java software in the following section instead.</p>
    <p>The interested reader is cordially invited to visit the CDK project pages at <ext-link ext-link-type="uri" xlink:href="http://cdk.sourceforge.net">http://cdk.sourceforge.net</ext-link>, get in touch with the developers, make use of the CDK package, and ultimately to extend its functionality.</p>
  </sec>
  <sec>
    <title>2. OPEN SOURCE JAVA SOFTWARE IN CHEMISTRY</title>
    <p>A number of libraries written in Java are freely available in binary form, but they do not include access to use and extend the source code.<xref rid="b5-jcics-2003-43-493" ref-type="bibr">5</xref>–<xref rid="b7-jcics-2003-43-493" ref-type="bibr">7</xref> Libraries for other computer languages have been described in the literature but are, to our knowledge, not available to the public.<xref rid="b8-jcics-2003-43-493" ref-type="bibr">8</xref></p>
    <p>To give an overview of the open source activitities in chemistry, we analyzed the open source projects registered at SourceForge.<xref rid="b4-jcics-2003-43-493" ref-type="bibr">4</xref> This Website has about 40 projects registered in the field of molecular chemistry, as found with a search on keywords such as molecule, molecular, chemistry, and chemical. Many projects are inactive: some are only registered but show no activity at all, and some showed activity in the past but never released software in binary form or source code. The number of active projects is about 25–30.</p>
    <p>Of these projects 14 were found that use the Java programming language. Three of these are inactive for a long period and do not provide downloads. Two are succeeded by this project,<xref rid="b9-jcics-2003-43-493" ref-type="bibr">9</xref>,<xref rid="b10-jcics-2003-43-493" ref-type="bibr">10</xref> and four are based on CDK.<xref rid="b11-jcics-2003-43-493" ref-type="bibr">11</xref>–<xref rid="b15-jcics-2003-43-493" ref-type="bibr">15</xref> Four projects are interesting to note: MolMaster having a BSD license<xref rid="b16-jcics-2003-43-493" ref-type="bibr">16</xref> and including visualization of isosurfaces, jVisualizer having the GPL license<xref rid="b17-jcics-2003-43-493" ref-type="bibr">17</xref> for analyzing NMR couplings, CML having an Artistic License<xref rid="b18-jcics-2003-43-493" ref-type="bibr">18</xref> with tools around the Chemical Markup Language,<xref rid="b19-jcics-2003-43-493" ref-type="bibr">19</xref> and JOELib having the GPL license<xref rid="b20-jcics-2003-43-493" ref-type="bibr">20</xref> with an extensive file IO library based on OpenBabel<xref rid="b21-jcics-2003-43-493" ref-type="bibr">21</xref> and a library for molecular descriptors. Note that the first two are not really libraries but applications instead. CMLDOM and JOELib, however, are libraries with similar functionality for storing chemical content in memory.</p>
  </sec>
  <sec>
    <title>3. THE ORIGIN OF THE CDK</title>
    <p>The CDK originated as a support project for a couple of different chemoinformatics software packages, namely a structure editor,<xref rid="b11-jcics-2003-43-493" ref-type="bibr">11</xref> a Web database for organic compounds and their NMR chemical shifts,<xref rid="b14-jcics-2003-43-493" ref-type="bibr">14</xref> a program for computer assisted structure elucidation,<xref rid="b22-jcics-2003-43-493" ref-type="bibr">22</xref> and a 3D structure viewer and analyzer,<xref rid="b13-jcics-2003-43-493" ref-type="bibr">13</xref> which is still being ported to the CDK.</p>
    <p>The authors of these programs generally agree on the benefits of the programming language Java, as there are as follows: clear object-oriented design, platform-independency, and the fact that it has become an important standard for client- and server-side applications on the Web. Since most of the scientifically interesting applications in chemistry have a computationally demanding kernel, they benefit from a client/server architecture because the server part can then be run on a powerful machine, while a user-friendly (Web-) interface can be used on whatever client machine the user chooses. These demands can be met much easier if one can still resort to a single programming language for the implementation and so we consider Java to be the programming language of choice not only for chemoinformatics and computational chemistry but also for scientific applications in general.</p>
    <p>Concerns are frequently raised with respect to the performance of Java. However, the language structure itself, compared for example with C++, provides no good reason for Java having a generally lower performance than other languages more frequently used in high performance computing. Indeed, great efforts have been made to increase Java runtime performance and so, today, given a proper implementation and using the right runtime environment, server-side Java code does not need to be slower than C++ with the same scope. We would like to point the reader’s attention to a whole issue of the IBM systems journal dedicated to the subject of high performance computing in Java.<xref rid="b23-jcics-2003-43-493" ref-type="bibr">23</xref></p>
  </sec>
  <sec>
    <title>4. DEVELOPMENT MODEL</title>
    <p>To participate in CDK development, the interested individual needs to register with SourceForge (SF) to receive a free SF account and subscribe to the developers mailing list <email>cdk-devel@lists.sourceforge.net</email>. He or she then contacts one of the project administrators, who then adds the new member to the project’s developers list. Besides good Java programming skills, a working knowledge for the Concurrent Versions System (CVS) is needed. CVS is the most widely used system for version management in the Open Source community, which greatly facilitates the coordination of multiple developers working on the same source tree.</p>
    <p>It is quite common in computer science to write a requirements specification before coding is started. Such a specification describes the intended behavior of the software (classes in this case) and can be used by developers to check the implementation and by users to see how those classes can be used. When the CDK was designed, such specification was only partly made using Unified Modeling Language (UML) diagrams.<xref rid="b24-jcics-2003-43-493" ref-type="bibr">24</xref> Currently we use Requests For Comment (RFC) documents for proposing a new specification to which the CDK library must conform. These RFC, which are a long time Internet standard for decision making, are discussed on the developers mailing list after which they are marked as final after majority voting.</p>
  </sec>
  <sec>
    <title>5. PROJECT CONVENTIONS</title>
    <p>In Java, source code is organized in so-called packages, which often (but not neccessarily) follow a naming scheme of something like an inverted Internet address. Putting a class such as Atom into a uniquely named package prevents class name collisions in cases where another library, used together with the CDK, also contains an Atom class with different function. Since the CDK is part of the OpenScience project,<xref rid="b25-jcics-2003-43-493" ref-type="bibr">25</xref> the CDK source tree is organized in packages under the org.openscience.cdk root package. Frequently, a new developer is interested in adding a particular functionality to the CDK, for example the capability for isomorphism and automorphism checking. He discusses the implications of his endeavor with the others CDK developers on the mailing list. Taking into account the suggestions, caveats, etc., of his codevelopers, he would then create a new subpackage org.openscience.cdk.isomorphism and add his contribution under this part of the source tree.</p>
    <p>An important part of the CDK development effort is Unit Testing, which is based on the idea of writing easily repeatable tests for smallest units of the software package in question. Whenever a programmer adds a new module with new functionality to the CDK source tree, he is expected to add a test to the org.openscience.cdk.tests package, adhering to a particular naming convention. The unit testing itself is based on the JUnit package,<xref rid="b26-jcics-2003-43-493" ref-type="bibr">26</xref> which makes it easy to run a fully unattended test for the whole CDK package. This has proven to be of great value for such a distributed programming effort like the CDK. Especially if a developer changes something within the CDK core classes, a full JUnit test run of the CDK tests will show him within a few seconds whether his changes broke something or not. Further, each of these little test snippets is an instructive example on how to use a particular CDK module.</p>
    <p>Indispensable for a library is documentation. The CDK is documented using the JavaDoc system—an integral part of the Java programming language. Using special tags, the code is documented directly in the source code, from which documentation can be produced automatically in various formats, most importantly as Web pages. We are using source code metrics to constantly measure the amount of documented source code statements, and we try to keep this percentage as high as possible. In addition to the JavaDoc API documentation, the user is guided by a few introductory manuals.</p>
    <p>It should also be mentioned that the CDK’s software architecture has been independently chosen as subject of an M.Sc. thesis at the Technion (Israel Institute of Technology),<xref rid="b27-jcics-2003-43-493" ref-type="bibr">27</xref> focusing on automated methods for code inspection and review. This is a common industrial process by which source code is usually read manually to find errors, potential improvements, dependencies, etc. The thesis focuses on automizing the formal concept analysis using concept lattices<xref rid="b28-jcics-2003-43-493" ref-type="bibr">28</xref> for the review of individual java classes. Concept analysis is a mathematical classification technique, which is used for different problems in software research. This methodology is applied in three stages: (1) understanding the public interface of the class for use as a black box, (2) trying to reason about the design and possible errors in the class based on its lattice, and (3) inspecting actual source code. The first two stages are done without even having the source code: the methods and fields are determined by reverse engineering of the compiled class files. We have already received valuable input from this related project which will help us to resolve design flaws in our library.</p>
  </sec>
  <sec>
    <title>6. DESCRIPTION OF THE LIBRARY’S FUNCTIONALITY</title>
    <sec>
      <title>6.1. The Core Classes</title>
      <p>The classes contained in the root section of the CDK’s package hierarchy are all formalized representations of basic chemical concepts such as atoms, bonds, molecules, etc. <xref ref-type="fig" rid="f1-jcics-2003-43-493">Figure 1</xref> shows an UML diagram explaining the inheritance hierarchy and the dependencies between the fundamental classes of the CDK. The UML diagrams shown in this article depict the relationship of only the core classes. They are thus edited and do only show a subset of their true interclass relationships. They show the central role of the ChemObject class, which is the superclass of all other classes and provides methods for storing even complex properties for any derived CDK object.</p>
      <p>The first and probably most obvious inheritance chain to be mentioned in the core classes it that of Atom extending AtomType extending Isotope extending Element. This is not only logical from a chemical point of view but also provides the basis for a simple mechanism for the creation of Atoms, AtomTypes, Isotopes, and Elements based on subclasses of a single IsotopeFactory tool class, which will be discussed below. Placing the Atom in a long chain of inheritance provides central access points to the different levels of information. While the Element, for example, provides access to the symbol or the atomic number, some AtomType can further distinguish between the state of hybridization of an Atom or some other distinction a force field might need.</p>
      <p>A further level of abstraction is incorporated by the AtomContainer and the ElectronContainer. The Electron-Container forms the base for constructs such as Bonds and Orbitals, whereas the AtomContainer is the envisioned storage for Atoms together with their Bonds and is the superclass for Rings, Molecules, and Substructures.</p>
      <p>To support higher level concepts such as molecular ensembles or reactions, the CDK core is complemented by classes which group molecules into higher order constructs, like SetOfMolecules, ChemSequence, ChemModel, and ChemFile.</p>
      <p>For clarity, the relationship of ChemObject and the AtomContainer has been moved to an additional UML diagram shown in <xref ref-type="fig" rid="f2-jcics-2003-43-493">Figure 2</xref>.</p>
      <p>It shows how Molecules are contained in a SetOfMolecules, which is part of a ChemModel. ChemModels are meant to store the molecular information of the state of a chemical systems at a given point in time. To allow for the modeling of changes in time, we introduced the possibility of arranging various ChemModels into a ChemSequence. The ChemFile class is designed as the top level container, which can contain all the concepts stored in a chemical document among which one or more ChemSequences.</p>
      <p>The Polymer class extends Molecule and provides convenient access to the Monomers it consists of. The Monomer itself is implemented as an AtomContainer. A subclass of Polymer is the BioPolymer used for representing protein and DNA molecules. The Polymer design allows BioPolymers to treat each amino acid as an AtomContainer.</p>
    </sec>
    <sec>
      <title>6.2. 2D Structure Graphical Handling</title>
      <p>The ability to display and manipulate 2D drawings of chemical structures is one of the most important features of any chemoinformatics-related program. This includes the capability of generating coordinates for those chemical structures which have for example been generated by structure generator as coordinateless, chemical graphs. The details for this latter step are discussed in Section 6.4.</p>
      <p>The Model-View-Controller paradigm (see for example ref <xref rid="b29-jcics-2003-43-493" ref-type="bibr">29</xref>) is used in the CDK library design wherever applicable. The classes for 2D structure graphical handling, for example, work on top of a ChemModel whose content they display and manipulate. A Renderer2D class produces a 2D drawing comparable to those produced by the major commercially available products. This view can be customized by altering the standard settings of a Renderer2DModel object. If the pure display is to be complemented by an option to manipulate the drawing, a Controler2D can be added to the setup. Its settings, again, are determined by a Controler2DModel and can be altered, for example, by using setDrawNumbers(true) in order to display atom numbers annotated to the structure. The Controler2D is an adapter to the available input devices, typically mouse and keyboard, and translates input into changes to the underlying models, which again are reflected by changes in the view produced by the Renderer2D. A simple resulting application is shown in <xref ref-type="fig" rid="f3-jcics-2003-43-493">Figure 3</xref>.</p>
    </sec>
    <sec>
      <title>6.3. 3D Structure Handling</title>
      <p>To provide high performance 3D graphics, the Java3D API is used within the CDK. This, however, makes CDK-based 3D applications no longer platform independent. This dependency originates from Java3D API relying on OpenGL or DirectX for the sake of higher performance. SUN microsystems does only provide the Java3D for Windows (both OpenGL and DirectX), Solaris and SGI IRIX, whereas a Linux version is developed by Blackdown<xref rid="b30-jcics-2003-43-493" ref-type="bibr">30</xref> and available for a variety of architectures.</p>
      <p>In regard to loosing the platform independency the CDK does also contain classes for 3D rendering which are not based upon the Java3D API. Together with the separation of the rendering classes, due to the Model-View-Controller paradigm, this leads to the following four fundamental classes for 3D rendering: Renderer3D, Renderer3DModel, AcceleratedRenderer3D, and AcceleratedRenderer3DModel, the latter two based upon Java3D.</p>
    </sec>
    <sec>
      <title>6.4. Structure Diagram Layout</title>
      <p>Key fields of chemoinformatics, like virtual combinatorial chemistry, virtual screening, or computer-assisted structure elucidation, frequently handle chemical structures as one-dimensional graphs. These graphs are, for example, products of structure generators which use graph theoretical techniques to exhaustively and irredundantly generate all constistitutional isomers which are in agreement with a given molecular formula. In any of these programs, however, comes the point where, after a selection during a virtual screening, for example, the successful candidate structure(s) needs(s) to be presented to a chemist. At this point, a tool is needed that generates 2D or 3D coordinates to produce the kind of depiction a chemist is used to. This process has been termed Structure Diagram Generation.<xref rid="b31-jcics-2003-43-493" ref-type="bibr">31</xref> While 3D model builders such as CORINA<xref rid="b32-jcics-2003-43-493" ref-type="bibr">32</xref> are on our wishlist for the future and have not yet been implemented, the CDK features a 2D structure diagram generator, which has been written from scratch and which can easily be seen as one of the finest and most useful parts of the CDK, since most of its applications require structure diagram generation at several stages.</p>
    </sec>
    <sec>
      <title>6.5. Graph Invariants</title>
      <p>This package contains a few classes for the computation of graph invariants such as Wiener Indices,<xref rid="b33-jcics-2003-43-493" ref-type="bibr">33</xref> Morgan’s extended connectivity (EC) indices,<xref rid="b34-jcics-2003-43-493" ref-type="bibr">34</xref> and others.<xref rid="b35-jcics-2003-43-493" ref-type="bibr">35</xref> Morgan’s EC indices are, for example, used for canonical labeling of compounds. This package is likely to be one of the hot spot for future developments, since many chemoinformatics applications, like (quantitative) structure activity relationship ((Q)SAR) computations, do often rely on calculating various combinations of graph invariants of different types.</p>
    </sec>
    <sec>
      <title>6.6. Structure Generators</title>
      <p>This package holds some simple structure generators which are used by the SENECA system for computer-assisted structure elucidation.<xref rid="b22-jcics-2003-43-493" ref-type="bibr">22</xref> The class SingleRandomStructureGenerator can be used to generate a totally random structure from the constitutional space given by a certain molecular formula. Based on this randomly generated structure one can then use RandomGenerator to make small, random moves in constitution space, based on an algorithm suggested by Faulon.<xref rid="b36-jcics-2003-43-493" ref-type="bibr">36</xref> If such a generator is combined with a target function and simulated annealing protocol, one can effectively search constitution space for structures with certain desired properties, provided that these properties can be reliably backcalculated from a given constitutional formula.</p>
      <p>To be able to build a structure generator for chemical graphs based on evolutionary algorithms (like the well-known genetic algorithm), we also included a CrossOverMachine, which accepts two chemical graphs in the form of Atom-Containers and produces two offsprings. Genetic Algorithms are population based methods which produce new offsprings for the next generation by a carefully chosen combination of mutation and crossover procedures, applied to the current population. The CrossOverMachine does thus complement the mutation operation used in the RandomGenerator class.</p>
    </sec>
    <sec>
      <title>6.7. Ring Searches</title>
      <p>John Figueras’ fast algorithm for finding the Smallest Set of Smallest Rings (SSSR) has been implemented and is used for example by the structure diagram generation package.<xref rid="b37-jcics-2003-43-493" ref-type="bibr">37</xref> Especially large condensed ring systems, for which the process of coordinate generation could take up to a minute due to a slow depth first ring perception algorithm in older systems,<xref rid="b38-jcics-2003-43-493" ref-type="bibr">38</xref> can now be layed out within fractions of a second as shown in <xref ref-type="fig" rid="f4-jcics-2003-43-493">Figure 4</xref>. Further this package contains a class for partioning a given ring systems into AtomContainers, one for each ring.</p>
      <p>In other applications, like aromaticity detection, for example, it is essential to compute the Set of All Rings (SAR). While procedures have been published to produce the SAR from a SSSR, it is computationally more efficient to use specialized algorithms for this purpose. The CDK contains an implementation of a fast and efficient algorithm given by Hanser et al.<xref rid="b39-jcics-2003-43-493" ref-type="bibr">39</xref></p>
    </sec>
    <sec>
      <title>6.8. Aromaticity Detection</title>
      <p>There are various definitions of aromaticity and at least as many ways of detecting aromaticity according to these definitions. This package is the intended container for all of them and does currently hold an implementation of a HueckelAromaticityDetector class. Based on the SAR detection algorithm by Hanser et al. (see section 6.7) this class starts with the largest detected ring, counts the number of alternating double or triple bond electrons, and does also take into account free electron pairs of heteroatoms. It then checks whether the ring contains 4<italic>n</italic> + 2 <italic>π</italic>-electrons, according to the well-known Hückel rule. The ring, all its atoms, and bonds are marked as aromatic, and the search continues with the remaining rings of equal or smaller size, leaving out those rings that are completely part of an already detected larger aromatic system.</p>
    </sec>
    <sec>
      <title>6.9. Isomorphism</title>
      <p>Being able to determine if two chemical structures are identical or whether one structure is a subgraph of another structure is one of the most important capabilities of a chemoinformatics library. The Isomorphism subpackage contains a versatile module for Maximum Common Substructure (MCSS) Searches. Since MCSS determination is the most general case of graph matching, it can be used to determine structure identity and to do subgraph matching and maximum common substructure searches.</p>
    </sec>
    <sec>
      <title>6.10. File Input/Output</title>
      <p>File input and output is generalized in CDK. All file i/o classes implement either ChemObjectReader or ChemObjectWriter. Each file format is represented by two separate classes implementing one of these interfaces.</p>
      <p>CDK currently supports IO classes for XYZ, MDL molfile,<xref rid="b40-jcics-2003-43-493" ref-type="bibr">40</xref> PDB,<xref rid="b41-jcics-2003-43-493" ref-type="bibr">41</xref> and CML.<xref rid="b42-jcics-2003-43-493" ref-type="bibr">42</xref> The latter format was developed by Murray-Rust and Rzepa as the first XML based file format for chemical content. The CDK contains both an input and output class for this format. The CML input reader uses an alternative to Murray-Rust’s DOM approach and is based on SAX.<xref rid="b43-jcics-2003-43-493" ref-type="bibr">43</xref></p>
    </sec>
    <sec>
      <title>6.11. Interaction with other Java Libraries</title>
      <p>Besides file i/o, CDK supports a second method to exchange data with other programs and libraries. The interface to other libraries makes it possible to combine methods from both libraries giving access to a larger set of functionality. CDK provides direct conversion of CDK classes to JOELib<xref rid="b20-jcics-2003-43-493" ref-type="bibr">20</xref> classes. Support for CMLDOM<xref rid="b19-jcics-2003-43-493" ref-type="bibr">19</xref> is planned.</p>
    </sec>
    <sec>
      <title>6.12. SMILES</title>
      <p>Simplified Molecular Line Entry Specification (SMILES) provides string representations of molecular constitutions.<xref rid="b44-jcics-2003-43-493" ref-type="bibr">44</xref> Due to their compactness and relative simplicity they are now widely used as an interchange format for coordinateless molecular structures. Based on a specification for unique (canonical) SMILES,<xref rid="b45-jcics-2003-43-493" ref-type="bibr">45</xref> it is also possible to perform graph isomorphism checks. The CDK features a generator for canonical SMILES, written to comply with the rules published by the Daylight Inc. founders. While the SMILES generator implements all of the published SMILES standard including chirality, the SMILES parser in the CDK package only complies to the (slightly extended) Super Simplified SMILES specification<xref rid="b46-jcics-2003-43-493" ref-type="bibr">46</xref> which is sufficient to code most organic structures.</p>
    </sec>
    <sec>
      <title>6.13. Fingerprints</title>
      <p>Fingerprinting is nowadays an indispensable tool for judging molecular similarity, as a prefilter for isomorphism checking and thus for structure searching in databases. Here as well as in the case of SMILES an own subpackage for this class of algorithms is justified because there are various ways of computing fingerprints. By allowing the addition of different fingerprinters instead of just having one monolithic org.openscience.cdk.tools.Fingerprinter we give the user the freedom of choosing whatever methods yields the best performance for his case. The Fingerprinter class in the CDK produces Daylight-type fingerprints.<xref rid="b47-jcics-2003-43-493" ref-type="bibr">47</xref> It works by running a breadth-first search, starting at each atom in the molecule, thereby producing string representations of paths up to the length of six atoms. For each of theses SMILES-like strings, hash codes are computed, using the standard string hashing algorithm provided by the Java language. With these hash codes, a pseudorandom number generator with a default working range of [0–1023] is seeded and the first random number is retrieved. This number indicates a position in a fingerprint bitstring of length 1024, which is then set to “1”. Based on the entirety of all computed paths from the molecule, a molecular fingerprint is obtained in the form of this bitstring.</p>
    </sec>
    <sec>
      <title>6.14. Tools</title>
      <p>The tools package contains utility classes for all those cases that did not justify the creation of a dedicated package. The IsotopeFactory, for example, can return pre-configured instances of Elements and Isotopes for a given element symbol or a given atomic mass.</p>
      <p>The ConnectivityChecker class tests whether a given chemical graph is connected, i.e., whether there is a bond path between every possible pair of atoms in the graph and, in the case of a nonconnected graph, it can return a Vector with the disjunct pieces of the graph, stored in AtomContainer objects. Related to ConnectivityChecker is the Path-Tools class which, for example, provides methods for finding the shortest path between to given atoms in a molecule.</p>
      <p>The MFAnalyser class has methods of returning the molecular formula of a given Molecule object and for creating an unbonded AtomContainer object from a given molecular formula string. The HOSECodeGenerator produces HOSE codes<xref rid="b48-jcics-2003-43-493" ref-type="bibr">48</xref> for each atom in a given AtomContainer. By feeding these HOSE codes into the BremserOneSphere-HOSECodePredictor class, one can predict expectation ranges for carbon-13 NMR chemical shifts.<xref rid="b49-jcics-2003-43-493" ref-type="bibr">49</xref></p>
    </sec>
  </sec>
  <sec sec-type="results">
    <title>7. RESULTS</title>
    <p>The CDK is now the basis for a number of software projects. The chemical editor JChemPaint<xref rid="b11-jcics-2003-43-493" ref-type="bibr">11</xref> which takes advantage of the CDK and for which the CDK’s Model-View-Controller mechanisms have been implemented is again just a support tool for higher level applications such as the Web database NMRShiftDB for organic compounds and their NMR chemical shifts, or SENECA, a program for computer assisted structure elucidation.<xref rid="b22-jcics-2003-43-493" ref-type="bibr">22</xref></p>
    <p>While allowing the fast assembly of such large monolithic applications such as SENECA or NMRShiftDB, the true strength of the CDK lies in its ability to serve as a chemoinformatician’s workbench. By just writing a few lines of code, one can quickly test new ideas or modify existing CDK based applications to make them suit other needs.</p>
    <p>The following code snippet illustrates how one can quickly parse a list of SMILES strings into AtomContainers, produce 2D coordinates, and display the results in a MoleculeList-Viewer.</p>
  </sec>
  <sec>
    <title>8. CONCLUSION</title>
    <p>We have presented details of a new open-source Java library facilitating the implementation of software packages in chemoinformatics. The CDK is freely available<xref rid="b50-jcics-2003-43-493" ref-type="bibr">50</xref> under the terms of the GNU Lesser General Public License (LGPL)<xref rid="b3-jcics-2003-43-493" ref-type="bibr">3</xref>. The source code may thus be downloaded and improved or adapted for specific needs. In contrast to the famous GNU General Public License (GPL)<xref rid="b51-jcics-2003-43-493" ref-type="bibr">51</xref> the LGPL allows for the use of the CDK in proprietary software packages. While any use of the CDK for proprietary and closed-source project is thus welcome, we also highly appreciate feedback and any potential backflow. Companies are using the CDK for commercial projects, such as SafeBase, a theragenomics knowledge management system on adverse drug reactions.<xref rid="b52-jcics-2003-43-493" ref-type="bibr">52</xref> At the IBM Germany Development Lab in Böblingen an Extreme Blue internship project group has been started to write a CDK-based open source 2D/3D editor for chemical structures. The company IXELIS, situated in Strasbourg, France, is working on a global semantic information system applied to scientific knowledge and has contributed the MCSS code, which came into existence during their work with the CDK.</p>
    <p>Further, our chemoinformatics software kit is the basis for other open-source projects, like the SENECA system for computer-assisted structure elucidation<xref rid="b22-jcics-2003-43-493" ref-type="bibr">22</xref> and NMRShiftDB,<xref rid="b14-jcics-2003-43-493" ref-type="bibr">14</xref> a free database of organic chemicals and their NMR data.</p>
    <p>Besides its proven usability in research and production quality scientific software, the CDK has also become a valuable tool for teaching chemoinformatics. At least one of our authors (C.S.) is using the software package in lectures to demonstrate many standard chemoinformatics algorithms on the functionality level as well as on the source code level. Due to the inherent modularization of the object oriented language Java, most of the classes and methods are concise and easy to understand.</p>
    <p>It should be mentioned that we have experienced, albeit on a smaller scale than the large open-source projects, the benefits and the fascination of the principles mentioned in the Introduction. Based on this experience, this article is also supposed to promote these ideas and to attract further contributors for our project. The inspiring experience is that as soon as a certain amount of material has accumulated and a certain amount of publicity has been gained, an open-source project becomes something like a self-runner, contributors start adding their own subprojects, and new ideas are integrated which would probably never have been borne in mind if the CDK were created by a single organization and even individual. Of course, such a development model also has disadvantages. It is probably much more difficult to adhere to certain quality standards, to respond to deadlines (but on the other hand, there rarely are any in such small projects), and to do strategic planning. It has been shown, however, that these problems can be overcome.</p>
  </sec>
</body>
<back>
  <ack>
    <title>ACKNOWLEDGMENT</title>
    <p>The authors would like to thank all members of the CDK project for their contributions, corrections, and helpful comments.</p>
  </ack>
  <ref-list>
    <title>REFERENCES AND NOTES</title>
    <ref id="b1-jcics-2003-43-493">
      <label>1</label>
      <element-citation publication-type="webpage">
        <collab>The Open Source Initiative (OSI)</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org">http://www.opensource.org</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b2-jcics-2003-43-493">
      <label>2</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Raymond</surname>
            <given-names>ES</given-names>
          </name>
        </person-group>
        <source>The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary</source>
        <publisher-name>O’Reilly and Associates</publisher-name>
        <publisher-loc>Sebastopol, CA</publisher-loc>
        <year>1999</year>
      </element-citation>
    </ref>
    <ref id="b3-jcics-2003-43-493">
      <label>3</label>
      <element-citation publication-type="webpage">
        <source>GNU Lesser General Public License – GNU Project – Free Software Foundation (FSF)</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.gnu.org/licenses/lgpl.html">http://www.gnu.org/licenses/lgpl.html</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b4-jcics-2003-43-493">
      <label>4</label>
      <element-citation publication-type="webpage">
        <collab>SourceForge.net</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.sf.net/">http://www.sf.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b5-jcics-2003-43-493">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rzepa</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Tonge</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>VChemLab: A Virtual Chemistry Laboratory. The Storage, Retrieval, and Display of Chemical Information Using Standard Internet Tools</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1998</year>
        <volume>38</volume>
        <fpage>1048</fpage>
        <lpage>1053</lpage>
      </element-citation>
    </ref>
    <ref id="b6-jcics-2003-43-493">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Csizmadia</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>JChem: Java Applets and Modules Supporting Chemical Database Handling from Web Browsers</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2000</year>
        <volume>40</volume>
        <fpage>323</fpage>
        <lpage>324</lpage>
        <pub-id pub-id-type="pmid">10761134</pub-id>
      </element-citation>
    </ref>
    <ref id="b7-jcics-2003-43-493">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Blauch</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Java Classes for Managing Chemical Information and Solving Generalized Equilibrium Problems</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2002</year>
        <volume>42</volume>
        <fpage>143</fpage>
        <lpage>146</lpage>
        <pub-id pub-id-type="pmid">11911681</pub-id>
      </element-citation>
    </ref>
    <ref id="b8-jcics-2003-43-493">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bauerschmidt</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gasteiger</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Overcoming the limitations of a connection table description: A universal representation of chemical species</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1997</year>
        <volume>37</volume>
        <fpage>705</fpage>
        <lpage>714</lpage>
      </element-citation>
    </ref>
    <ref id="b9-jcics-2003-43-493">
      <label>9</label>
      <element-citation publication-type="webpage">
        <collab>The CompChem libraries</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://compchem.sourceforge.net/">http://compchem.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b10-jcics-2003-43-493">
      <label>10</label>
      <element-citation publication-type="webpage">
        <collab>The JMDraw Structure Diagram Generation Engine</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://jmdraw.sourceforge.net/">http://jmdraw.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b11-jcics-2003-43-493">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinbeck</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Krause</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Willighagen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>JChemPaint – Using the Collaborative Forces of the Internet to Develop a Free Editor for 2D Chemical Structures</article-title>
        <source>Molecules</source>
        <year>2000</year>
        <volume>5</volume>
        <fpage>93</fpage>
        <lpage>98</lpage>
      </element-citation>
    </ref>
    <ref id="b12-jcics-2003-43-493">
      <label>12</label>
      <element-citation publication-type="webpage">
        <collab>The JChemPaint Structure Editor</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://jmdraw.sourceforge.net/">http://jmdraw.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b13-jcics-2003-43-493">
      <label>13</label>
      <element-citation publication-type="webpage">
        <collab>The Jmol 3D Molecular Visualization Software</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://jmol.sourceforge.net/">http://jmol.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b14-jcics-2003-43-493">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kuhn</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Krause</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Steinbeck</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>NMRShiftDB – An Open-Access, Open-Submission, Open-Source Database for Organic Structures and their NMR data</article-title>
        <year>2002</year>
        <comment>Manuscript in preparation</comment>
      </element-citation>
    </ref>
    <ref id="b15-jcics-2003-43-493">
      <label>15</label>
      <element-citation publication-type="webpage">
        <collab>The NMRShiftDB NMR Database</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.nmrshiftdb.org/">http://www.nmrshiftdb.org/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b16-jcics-2003-43-493">
      <label>16</label>
      <element-citation publication-type="webpage">
        <collab>The MolMaster Molecular Visualization Package</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://molmaster.sourceforge.net/">http://molmaster.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b17-jcics-2003-43-493">
      <label>17</label>
      <element-citation publication-type="webpage">
        <collab>The JVisualizer NMR Analysis Package</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://jvisualizer.sourceforge.net/">http://jvisualizer.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b18-jcics-2003-43-493">
      <label>18</label>
      <element-citation publication-type="webpage">
        <source>The Chemical Markup Language Supporting Software Pages</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://cml.sourceforge.net/">http://cml.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b19-jcics-2003-43-493">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Murray-Rust</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Rzepa</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Chemical Markup XML, and the Worldwide Web. 2. Information Objects and the CMLDOM</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2001</year>
        <volume>41</volume>
        <fpage>1113</fpage>
        <lpage>1123</lpage>
        <pub-id pub-id-type="pmid">11604012</pub-id>
      </element-citation>
    </ref>
    <ref id="b20-jcics-2003-43-493">
      <label>20</label>
      <element-citation publication-type="webpage">
        <source>JOELib – a java based computational chemistry package</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://joelib.sourceforge.net/">http://joelib.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b21-jcics-2003-43-493">
      <label>21</label>
      <element-citation publication-type="webpage">
        <source>The OpenBabel Chemical File Format Conversion Package</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://openbabel.sourceforge.net/">http://openbabel.sourceforge.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b22-jcics-2003-43-493">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinbeck</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>SENECA: A Platform-Independent, Distributed and Parallel System for Computer-Assisted Structure Elucidation in Organic Chemistry</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>2001</year>
        <volume>41</volume>
        <fpage>1500</fpage>
        <lpage>1507</lpage>
        <pub-id pub-id-type="pmid">11749575</pub-id>
      </element-citation>
    </ref>
    <ref id="b23-jcics-2003-43-493">
      <label>23</label>
      <element-citation publication-type="book">
        <source>IBM Systems Journal – Java Performance</source>
        <year>2000</year>
      </element-citation>
    </ref>
    <ref id="b24-jcics-2003-43-493">
      <label>24</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Stevens</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pooley</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Using UML: software engineering with objects and components</source>
        <series>Object Technology Series Addison-Wesley</series>
        <comment>1999 Updated edition for UML1.3: first published 1998 (as Pooley and Stevens)</comment>
      </element-citation>
    </ref>
    <ref id="b25-jcics-2003-43-493">
      <label>25</label>
      <element-citation publication-type="webpage">
        <collab>The OpenScience Project</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.openscience.org/">http://www.openscience.org/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b26-jcics-2003-43-493">
      <label>26</label>
      <element-citation publication-type="webpage">
        <collab>JUnit, Testing Resources for Extreme Programming</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.junit.org/">http://www.junit.org/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b27-jcics-2003-43-493">
      <label>27</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Dekel</surname>
            <given-names>U</given-names>
          </name>
        </person-group>
        <publisher-name>Personal Communication</publisher-name>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b28-jcics-2003-43-493">
      <label>28</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Ganter</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wille</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <source>Concept Analysis: Mathematical Foundations</source>
        <publisher-loc>Springer-Verlag</publisher-loc>
        <publisher-name>Berlin-Heidelberg</publisher-name>
        <year>1999</year>
      </element-citation>
    </ref>
    <ref id="b29-jcics-2003-43-493">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krasner</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Pope</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>A Cookbook for using the Model-View-Controller User Interface Paradigm in Smalltalk-80</article-title>
        <source>JOOP</source>
        <year>1988</year>
        <fpage>29</fpage>
        <lpage>49</lpage>
      </element-citation>
    </ref>
    <ref id="b30-jcics-2003-43-493">
      <label>30</label>
      <element-citation publication-type="webpage">
        <source>Java-Linux</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.blackdown.org/">http://www.blackdown.org/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b31-jcics-2003-43-493">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Helson</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Structure Diagram Generation</article-title>
        <source>Rev Comput Chem</source>
        <year>1999</year>
        <volume>13</volume>
        <fpage>313</fpage>
        <lpage>398</lpage>
      </element-citation>
    </ref>
    <ref id="b32-jcics-2003-43-493">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gasteiger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rudolph</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sadowski</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Automatic Generation of 3D-Atomic Coordinates for Organic Molecules</article-title>
        <source>Tetrahedron Comput Method</source>
        <year>1990</year>
        <volume>4</volume>
        <fpage>537</fpage>
        <lpage>547</lpage>
      </element-citation>
    </ref>
    <ref id="b33-jcics-2003-43-493">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wiener</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Correlation of Heat of Isomerization and Difference in Heat of Vaporization of Isomers Among Paraffin Hydrocarbons</article-title>
        <source>J Am Chem Soc</source>
        <year>1947</year>
        <volume>69</volume>
        <fpage>17</fpage>
        <lpage>20</lpage>
        <pub-id pub-id-type="pmid">20291038</pub-id>
      </element-citation>
    </ref>
    <ref id="b34-jcics-2003-43-493">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Morgan</surname>
            <given-names>HL</given-names>
          </name>
        </person-group>
        <article-title>The Generation of a Unique Machine Description for Chemical Structures – A Technique Developed at Chemical Abstracts Service</article-title>
        <source>J Chem Doc</source>
        <year>1965</year>
        <volume>5</volume>
        <fpage>107</fpage>
        <lpage>113</lpage>
      </element-citation>
    </ref>
    <ref id="b35-jcics-2003-43-493">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hu</surname>
            <given-names>CY</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>On highly discriminating molecular topological index</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1996</year>
        <volume>36</volume>
        <fpage>82</fpage>
        <lpage>90</lpage>
      </element-citation>
    </ref>
    <ref id="b36-jcics-2003-43-493">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Faulon</surname>
            <given-names>J-L</given-names>
          </name>
        </person-group>
        <article-title>Stochastic Generator of Chemical Structure. 2. Using Simulated Annealing To Search the Space of Constitutional Isomers</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1996</year>
        <volume>36</volume>
        <fpage>731</fpage>
        <lpage>740</lpage>
      </element-citation>
    </ref>
    <ref id="b37-jcics-2003-43-493">
      <label>37</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Figueras</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Ring Perception Using Breadth-First Search</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1996</year>
        <volume>36</volume>
        <fpage>986</fpage>
        <lpage>991</lpage>
      </element-citation>
    </ref>
    <ref id="b38-jcics-2003-43-493">
      <label>38</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bley</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Brandt</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dengler</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Frank</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ugi</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Constitutional Formulae generated from Connectivity Information: the Program MDRAW</article-title>
        <source>J Chem Res (M)</source>
        <year>1991</year>
        <fpage>2601</fpage>
        <lpage>2689</lpage>
      </element-citation>
    </ref>
    <ref id="b39-jcics-2003-43-493">
      <label>39</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hanser</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Jauffret</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kaufmann</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>A new algorithm for exhaustive ring perception in a molecular graph</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1996</year>
        <volume>36</volume>
        <fpage>1146</fpage>
        <lpage>1152</lpage>
      </element-citation>
    </ref>
    <ref id="b40-jcics-2003-43-493">
      <label>40</label>
      <note>
        <p>Description of Several Chemical Structure File Formats Used by Computer Programs Developed at Molecular Design Limited, 1992 An updated online version of this document can be found on <ext-link ext-link-type="uri" xlink:href="http://www.mdli.com/downloads/literature/ctfile.pdf">http://www.mdli.com/downloads/literature/ctfile.pdf</ext-link>.</p>
      </note>
    </ref>
    <ref id="b41-jcics-2003-43-493">
      <label>41</label>
      <element-citation publication-type="book">
        <source>Protein Data Bank Atomic Coordinate and Bibliographic Entry Format Description</source>
        <year>1985</year>
      </element-citation>
    </ref>
    <ref id="b42-jcics-2003-43-493">
      <label>42</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Murray-Rust</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Rzepa</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Chemical Markup XML, and the Worldwide Web. 1. Basic Principles</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1999</year>
        <volume>39</volume>
        <fpage>928</fpage>
        <lpage>942</lpage>
      </element-citation>
    </ref>
    <ref id="b43-jcics-2003-43-493">
      <label>43</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Willighagen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Processing CML conventions in Java</article-title>
        <source>Internet J Chem</source>
        <year>2001</year>
        <volume>4</volume>
        <fpage>4</fpage>
      </element-citation>
    </ref>
    <ref id="b44-jcics-2003-43-493">
      <label>44</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weininger</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>SMILES, a Chemical Language and Information System. 1. Introduction to Methodology and Encoding Rules</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1988</year>
        <volume>28</volume>
        <fpage>31</fpage>
        <lpage>36</lpage>
      </element-citation>
    </ref>
    <ref id="b45-jcics-2003-43-493">
      <label>45</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weininger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Weininger</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Weininger</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>SMILES. 2. Algorithm for Generation of Unique SMILES Notation</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1989</year>
        <volume>29</volume>
        <fpage>97</fpage>
        <lpage>101</lpage>
      </element-citation>
    </ref>
    <ref id="b46-jcics-2003-43-493">
      <label>46</label>
      <element-citation publication-type="webpage">
        <source>SMILES Home Page</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/smiles/">http://www.daylight.com/dayhtml/smiles/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b47-jcics-2003-43-493">
      <label>47</label>
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name>
            <surname>James</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Weininger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Delany</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <source>Daylight Theory Manual</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.toc.html">http://www.daylight.com/dayhtml/doc/theory/theory.toc.html</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2000</year>
      </element-citation>
    </ref>
    <ref id="b48-jcics-2003-43-493">
      <label>48</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bremser</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>HOSE – A Novel Substructure Code</article-title>
        <source>Anal Chim Act</source>
        <year>1978</year>
        <volume>103</volume>
        <fpage>355</fpage>
        <lpage>365</lpage>
      </element-citation>
    </ref>
    <ref id="b49-jcics-2003-43-493">
      <label>49</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bremser</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Expectation Ranges of 13-C NMR Chemical Shifts</article-title>
        <source>Magn Reson Chem</source>
        <year>1985</year>
        <volume>23</volume>
        <fpage>271</fpage>
        <lpage>275</lpage>
      </element-citation>
    </ref>
    <ref id="b50-jcics-2003-43-493">
      <label>50</label>
      <element-citation publication-type="webpage">
        <collab>The Chemical Development Kit</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://cdk.sf.net/">http://cdk.sf.net/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b51-jcics-2003-43-493">
      <label>51</label>
      <element-citation publication-type="webpage">
        <collab>GNU General Public License – GNU Project – Free Software Foundation (FSF)</collab>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.gnu.org/licenses/gpl.html">http://www.gnu.org/licenses/gpl.html</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
    <ref id="b52-jcics-2003-43-493">
      <label>52</label>
      <element-citation publication-type="webpage">
        <source>TheraSTrat – Taking drug safety a step further</source>
        <comment>
          <ext-link ext-link-type="uri" xlink:href="http://www.therastrat.com/">http://www.therastrat.com/</ext-link>
        </comment>
        <date-in-citation>accessed on Aug 2002</date-in-citation>
        <year>2002</year>
      </element-citation>
    </ref>
  </ref-list>
</back>
<floats-group>
  <fig id="f1-jcics-2003-43-493" position="float">
    <label>Figure 1</label>
    <caption>
      <p>UML diagram, showing the inheritance hierarchy and the dependencies of the fundamental classes within the CDK.</p>
    </caption>
    <graphic xlink:href="jcics-2003-43-493f1"/>
  </fig>
  <fig id="f2-jcics-2003-43-493" position="float">
    <label>Figure 2</label>
    <caption>
      <p>UML diagram, showing the inheritance hierarchy and the dependencies of classes group based on the AtomContainer concept.</p>
    </caption>
    <graphic xlink:href="jcics-2003-43-493f2"/>
  </fig>
  <fig id="f3-jcics-2003-43-493" position="float">
    <label>Figure 3</label>
    <caption>
      <p>Renderer2D and Controller2D cooperating in a simple, CDK-based version of JChemPaint. JChemPaint supports internationalization, with this example showing a dutch interface.</p>
    </caption>
    <graphic xlink:href="jcics-2003-43-493f3"/>
  </fig>
  <fig id="f4-jcics-2003-43-493" position="float">
    <label>Figure 4</label>
    <caption>
      <p>A rings system parsed from a SMILES, analyzed by Figueras’ SSSR algorithm and displayed by the MoleculeViewer class. The process takes 300 ms on a 600 MHz Pentium with Windows XP and JDK 1.3.1.</p>
    </caption>
    <graphic xlink:href="jcics-2003-43-493f4"/>
  </fig>
  <fig id="f5-jcics-2003-43-493" position="float">
    <label>Figure 5</label>
    <caption>
      <p>A CDK code snippet illustrating the use of SmilesParser and StructureDiagramGenerator is shown followed by its output.</p>
    </caption>
    <graphic xlink:href="jcics-2003-43-493f5"/>
  </fig>
</floats-group>
