<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="publisher-id">nar</journal-id>
    <journal-title-group>
      <journal-title>Nucleic Acids Research</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">0305-1048</issn>
    <issn pub-type="epub">1362-4962</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9841399</article-id>
    <article-id pub-id-type="pmid">36300617</article-id>
    <article-id pub-id-type="doi">10.1093/nar/gkac931</article-id>
    <article-id pub-id-type="publisher-id">gkac931</article-id>
    <article-categories>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00010</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>Narese/7</subject>
        <subject>Narese/24</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Methods Online</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Echtvar: compressed variant representation for rapid annotation and filtering of SNPs and indels</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1786-2216</contrib-id>
        <name>
          <surname>Pedersen</surname>
          <given-names>Brent S</given-names>
        </name>
        <!--bpederse@gmail.com-->
        <aff><institution>Center for Molecular Medicine, University Medical Center Utrecht</institution>, 3584 CX Utrecht, <country country="NL">The Netherlands</country></aff>
        <aff><institution>Oncode Institute</institution>, 3521 AL Utrecht, <country country="NL">The Netherlands</country></aff>
        <xref rid="COR1" ref-type="corresp"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>de Ridder</surname>
          <given-names>Jeroen</given-names>
        </name>
        <!--j.deridder-4@umcutrecht.nl-->
        <aff><institution>Center for Molecular Medicine, University Medical Center Utrecht</institution>, 3584 CX Utrecht, <country country="NL">The Netherlands</country></aff>
        <aff><institution>Oncode Institute</institution>, 3521 AL Utrecht, <country country="NL">The Netherlands</country></aff>
        <xref rid="COR2" ref-type="corresp"/>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="COR1">To whom correspondence should be addressed. Tel: +31 510 621 7299; Email: <email>bpederse@gmail.com</email></corresp>
      <corresp id="COR2">Correspondence may also be addressed to Jeroen de Ridder. Email: <email>j.deridder-4@umcutrecht.nl</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>11</day>
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-10-27">
      <day>27</day>
      <month>10</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>10</month>
      <year>2022</year>
    </pub-date>
    <volume>51</volume>
    <issue>1</issue>
    <fpage>e3</fpage>
    <lpage>e3</lpage>
    <history>
      <date date-type="accepted">
        <day>20</day>
        <month>10</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>15</day>
        <month>9</month>
        <year>2022</year>
      </date>
      <date date-type="received">
        <day>11</day>
        <month>5</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press on behalf of Nucleic Acids Research.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="gkac931.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Germline and somatic variants within an individual or cohort are interpreted with information from large cohorts. Annotation with this information becomes a computational bottleneck as population sets grow to terabytes of data. Here, we introduce <italic toggle="yes">echtvar</italic>, which efficiently encodes population variants and annotation fields into a compressed archive that can be used for rapid variant annotation and filtering. Most variants, represented by chromosome, position and alleles are encoded into 32-bits-half the size of previous encoding schemes and at least 4 times smaller than a naive encoding. The annotations, stored separately within the same archive, are also encoded and compressed. We show that <italic toggle="yes">echtvar</italic> is faster and uses less space than existing tools and that it can effectively reduce the number of candidate variants. We give examples on germ-line and somatic variants to document how <italic toggle="yes">echtvar</italic> can facilitate exploratory data analysis on genetic variants. <italic toggle="yes">Echtvar</italic> is available at <ext-link xlink:href="https://github.com/brentp/echtvar" ext-link-type="uri">https://github.com/brentp/echtvar</ext-link> under an MIT license.</p>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Vidi Fellowship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>639.072.715</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>TTW Perspectief program LettuceKnow</institution>
          </institution-wrap>
        </funding-source>
        <award-id>P17-19</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Dutch Research Council</institution>
            <institution-id institution-id-type="DOI">10.13039/501100003246</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>INTRODUCTION</title>
    <p>A site in the genome that differs from the reference, either as a somatic mutation or a germline variant must be decorated with additional information in order to be interpretable. Millions of sites in an individual will differ from the reference genome. Several pieces of information can be added to each variant to assist in determining which of those are relevant to disease. For instance, it is often critical to know the predicted effect on a gene—for example, does it create a new stop-codon in the sequence of an exon? Additionally, the frequency or absence of a variant in a large population database indicates potential constraint within the species (<xref rid="B1" ref-type="bibr">1</xref>). Likewise, the conservation of the site across species (<xref rid="B2" ref-type="bibr">2</xref>) indicates that a site might be important and should therefore experience selection and be removed from the population. Each of these pieces of information must be added to each variant in a call-set using an annotation tool.</p>
    <p>Tools that <italic toggle="yes">calculate</italic> the effect of a genetic variant on protein (and non-coding) sequence such as variant-effect predictor (VEP) (<xref rid="B3" ref-type="bibr">3</xref>), bcftools CSQ (<xref rid="B4" ref-type="bibr">4</xref>) and snpEff (<xref rid="B5" ref-type="bibr">5</xref>) are invaluable; but here, we focus on the annotation that involves <italic toggle="yes">searching</italic> for a particular variant or site in a database and annotating the variant with this information from the match in the database. Note that, as we will demonstrate, it is also possible to pre-calculate variant effects and store them in a database. This way of annotating variants is a fundamental building block in most genetics data analysis pipelines and plays a critical role in variant interpretation. For example it is very common to annotate with population allele frequency from the Genome Aggregation Database (gnomAD) (<xref rid="B6" ref-type="bibr">6</xref>) or other large population sets. Another example is the addition of a CADD (<xref rid="B7" ref-type="bibr">7</xref>) score for each variant in a Variant Call Format (VCF) file (<xref rid="B8" ref-type="bibr">8</xref>). While conceptually simple, the space and time efficiency of the annotation algorithms become critical as call-sets and annotation databases have grown substantially.</p>
    <p>As an example of the scale of the data, the Genome Aggregation Database (gnomAD) (<xref rid="B6" ref-type="bibr">6</xref>) v3.1.2, mentioned above, contains nearly 760 million variants, consuming &gt;2 terabytes of data. Storing this database can be onerous on an average compute cluster and hard to justify when the size of alignment and variant information for a trio that an investigator might wish to annotate is on the order of a few gigabytes of data. Further, attaching population information to each variant in this example trio would take additional compute to decompress and parse the huge gnomAD files, even when using an approach that combines index-jumping and streaming like VCFAnno (<xref rid="B9" ref-type="bibr">9</xref>). Likewise, the CADD (<xref rid="B7" ref-type="bibr">7</xref>) score includes a prediction for each of 3 possible single-base changes for each position in the human reference; this commonly-used annotation is 81 Gigabytes of compressed data and incurs substantial compute. Even annotations for only coding variants can be quite large. dbNSFP (<xref rid="B10" ref-type="bibr">10</xref>), for example, which aggregates many of these scores, totals around 30 Gigabytes of compressed data. Data this size requires new methods in order to be utilized with efficiency and ease, especially given their routine use in modern day genetics pipelines.</p>
    <p>Here, we introduce our command-line tool, <italic toggle="yes">echtvar</italic>, and show how the annotations and filtering performed by <italic toggle="yes">echtvar</italic> can dramatically and quickly reduce the number of candidate variants. We document speed and filtering capability in experiments looking at germline and somatic variants. These characteristics make <italic toggle="yes">echtvar</italic> a useful tool, especially for sequencing projects where speed is critical, such as for whole-genome neonatal projects (<xref rid="B11" ref-type="bibr">11</xref>).</p>
  </sec>
  <sec sec-type="materials|methods" id="SEC2">
    <title>MATERIALS AND METHODS</title>
    <sec id="SEC2-1">
      <title><italic toggle="yes">Echtvar</italic> encoding</title>
      <p><italic toggle="yes">Echtvar</italic> accepts a VCF (or BCF) (<xref rid="B8" ref-type="bibr">8</xref>) and a JSON configuration file that indicates which fields should be extracted from the INFO field of each variant and how they are stored in the <italic toggle="yes">echtvar</italic> ZIP archive. This archive partitions each chromosome into 1 048 576 (2<sup>20</sup>) base intervals (bins), which are stored in separate directories (Figure <xref rid="F1" ref-type="fig">1</xref>). The amount of data in memory for encoding and annotation is determined by the number of variants and fields within each bin. Each bin contains one 32-bit entry for each variant from the VCF. Small variants, those with a combined reference and alternate allele length of fewer than 5 bases, are encoded into 32 bits and stored directly in the primary table (Figure <xref rid="F1" ref-type="fig">1</xref>). Because each chromosome and 1 048 576 (2<sup>20</sup>) base interval is stored in a separate directory within the ZIP archive, only 20 bits are needed to indicate the position of the variant within that interval (Figure <xref rid="F1" ref-type="fig">1</xref>, upper right). The remaining 12 bits in a 32 bit integer can store the reference and alternate alleles of variants with a total length (REF + ALT) of fewer than 5 bases (Figure <xref rid="F1" ref-type="fig">1</xref>, upper-right). This is possible, because with 4 total nucleotides, we only need 2 bits to store each nucleotide, but we also need to store, within those 12 bits, the length of the reference and alternate alleles. Around 92% of variants in gnomAD (<xref rid="B6" ref-type="bibr">6</xref>) v3.1.2 fit into 32 bits. We have taken inspiration from this format encoding from VariantKey (<xref rid="B12" ref-type="bibr">12</xref>), a format that encodes the full position along with the chromosome into a 64-bit integer. Since most variants fit in 32 bits and we can store the chromosome outside of the encoded variant, we find this to be more compact with little tradeoff.</p>
      <fig position="float" id="F1">
        <label>Figure 1.</label>
        <caption>
          <p><italic toggle="yes">Echtvar</italic> encoding and annotation schema. <italic toggle="yes">Echtvar</italic> encodes small variants into 32-bit integers with the bits partitioned as in the top-right. Encoding simply partitions values to those bits which results in a 32-bit integer. The genomic bin determines the 1 048 576 bin and corresponding directory within the <italic toggle="yes">echtvar</italic> archive for a given query variant. During annotation, if the bin is different from the previous query variant, the data for that bin, including the primary (<italic toggle="yes">var32</italic>) table, the larger variants in the supplemental (<italic toggle="yes">big_vars</italic>) table, and the fields, are all read into memory. If the bin is the same, the values are already in memory. The encoded variant is then used in a binary search against the primary (<italic toggle="yes">var32</italic>) table to find the index of the variant. That index is then used to extract the corresponding fields. If the variant is not found in the table, user-specified default values are returned. Variants with a combined reference and alternate allele length greater than 4 bases will not fit into 32-bits and must be encoded and then searched in the large-variants, supplemental (<italic toggle="yes">big_vars</italic>) table. The binary search in that table again yields an index which is used to extract the associated fields. Those fields are then added to the query variant which is written to the output.</p>
        </caption>
        <graphic xlink:href="gkac931fig1" position="float"/>
      </fig>
      <p>For each long variant, a place-holder variant with empty reference and alternate allele is encoded and inserted into the primary variant file for that bin. In addition, variants that are 4 bases or larger (longer insertions or deletions) are stored in a different file within each bin in a still efficient format that uses a variable-length encoding to handle any size variant.</p>
      <p>Each field that is requested by the user, for example ‘AF’ for allele-frequency, is extracted and encoded into a file (for each bin) with the user-specified alias, such as ‘gnomAD_AF’. Within each of those value files, there is one value for each variant from the VCF that falls within that region. The configuration file can also specify a default value when that file is missing, and other modifications to default parameters. Upon encoding, the user-specified configuration file is stored in the ZIP archive.</p>
      <p>Within each bin, the encoded variants (and place-holder variants) are sorted to allow for fast searching. The variants are delta-encoded—so that only the difference between each 32 bit encoded variant and the one that precedes is stored. This requires the extra step of performing the cumulative (prefix) sum upon annotation, but improves compression. The delta-encoded variants are then further encoded with Stream VByte-encoding (<xref rid="B13" ref-type="bibr">13</xref>), which encodes integers to use between 1 and 4 bytes depending on the size of the value; a separate block of ‘control bytes’ indicates the number of bytes consumed by each integer. Since it is common to have many small numbers, especially in variant annotation where most variants are rare, this can effectively compress the data. In addition, the schema, where the control bytes are stored separately, allows modern processors to rapidly decode the data and allows skipping numbers without decoding them. Longer variants that do not fit within the 32 bits are encoded with bincode (<ext-link xlink:href="https://github.com/bincode-org/bincode" ext-link-type="uri">https://github.com/bincode-org/bincode</ext-link>) which internally uses compression and <italic toggle="yes">varint</italic> encoding. <italic toggle="yes">Varint</italic> encoding is similar to Stream VByte-encoding, except that the control bytes are stored with each encoded number.</p>
      <p>As each variant is encoded and inserted, the corresponding user-requested INFO fields are inserted into vectors such that there is a one-to-many correspondence between a variant and the fields. Each field vector will have exactly the same number of entries as the encoded variant vector. During iteration of the VCF, once a new 2<sup>20</sup> base bin is reached, the previous bin, including primary encoded variants, long variants, and all fields are written to separate files within the same ZIP directory for that bin. Fields also undergo Stream VByte-encoding; floating point values are first converted to integers by multiplying by a user-specified value. Upon annotation, the extracted integers are then divided by that same multiplier to regain nearly the same value. Higher multipliers give better precision but less compression. Integer values do not need to undergo this transformation but are limited to 32 bits.</p>
      <p><italic toggle="yes">Echtvar</italic> encodes string fields from a VCF into integers in the archive by using an extra lookup vector of the unique observed strings. For each unique string observed in any bin, <italic toggle="yes">echtvar</italic> inserts that string into the vector and stores the index of that vector for that variant. For low cardinality fields, for example, with only 10 unique values, this means that only integer values between 0 and 9 are saved in the field arrays. Once encoding of the entire file is complete, the string arrays are written to a single file per field. During later annotation, the string arrays are then used to convert from the integer stored per variant to the actual string value.</p>
    </sec>
    <sec id="SEC2-2">
      <title>Echtvar annotation</title>
      <p>To annotate a query VCF with an <italic toggle="yes">echtvar</italic> archive, the user specifies those two files along with an output path to write the annotated VCF (or BCF) file. All fields from the archive are added to the output file. For each variant in the query VCF, if the position is in a different bin than the previous variant, then the files for the new bin, including variants, long variants, and fields, are read into memory. As such, <italic toggle="yes">echtvar</italic> is fastest on files that are sorted by genomic position. This sorting is a requirement for the other tools we compare to. If the variant has a total length less than 5 bases, <italic toggle="yes">echtvar</italic> encodes the variant into a 32-bit integer and does a binary search against the primary variant table to find the index. Note that variants from the archive remain as integers and do not need to be decoded back into variants. The index from the binary search is then used to extract the values for each field and add them to the query variant (see Figure <xref rid="F1" ref-type="fig">1</xref>). Query variants with 5 or more total bases are encoded into the longer format and a binary search against the supplemental table containing the long variants is performed. That yields an object that contains an index which is then used to extract the value for each field in the archive. At this point, the extracted fields are then tested against a user-specified filter if one was given. If the filter passes (evaluates to true), then the fields are added to the query variant which is then written to the output file. The filter is evaluated using <italic toggle="yes">fasteval</italic>.</p>
    </sec>
    <sec id="SEC2-3">
      <title>Libraries used in <italic toggle="yes">echtvar</italic></title>
      <p>These methods are achieved with the help of a number of libraries. We use HTSLib (<xref rid="B14" ref-type="bibr">14</xref>) via rust-htslib (<ext-link xlink:href="https://github.com/rust-bio/rust-htslib" ext-link-type="uri">https://github.com/rust-bio/rust-htslib</ext-link>) to read, update and write the VCF files. We use fasteval (<ext-link xlink:href="https://github.com/likebike/fasteval" ext-link-type="uri">https://github.com/likebike/fasteval</ext-link>) to parse and evaluate the filter expressions, stream-vbyte-rust (<ext-link xlink:href="https://bitbucket.org/marshallpierce/stream-vbyte-rust/src" ext-link-type="uri">https://bitbucket.org/marshallpierce/stream-vbyte-rust/src</ext-link>) to perform the Stream VByte compression, bincode (<ext-link xlink:href="https://github.com/bincode-org/bincode" ext-link-type="uri">https://github.com/bincode-org/bincode</ext-link>) to compress large variants, and zip-rs (<ext-link xlink:href="https://github.com/zip-rs/zip" ext-link-type="uri">https://github.com/zip-rs/zip</ext-link>) to create the <italic toggle="yes">echtvar</italic> zip archive.</p>
    </sec>
    <sec id="SEC2-4">
      <title>Whole-Genome variants annotated with gnomAD: comparison with other tools</title>
      <p>We downloaded gnomAD v3.1.2. In order to make the comparison as fair as possible, we subset the files to contain only the 10 INFO fields of interest, and concatenate them into a single 20GB file. We used this to annotate variants from Genome in a Bottle (GiaB) for HG001 from: <ext-link xlink:href="https://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/NA12878_HG001/NISTv4.2.1/GRCh38/HG001_GRCh38_1_22_v4.2.1_benchmark.vcf.gz" ext-link-type="uri">https://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/NA12878_HG001/NISTv4.2.1/GRCh38/HG001_GRCh38_1_22_v4.2.1_benchmark.vcf.gz</ext-link></p>
      <p>We used bcftools (<xref rid="B4" ref-type="bibr">4</xref>) norm to decompose and normalize the variants to a consistent representation.</p>
      <p>All tools were added to a single docker image for reproducibility and versioning.</p>
      <p>For <italic toggle="yes">slivar</italic>, <italic toggle="yes">echtvar</italic> and <italic toggle="yes">varnote</italic> we performed the necessary encoding steps documented in the script linked below. Since these encodings are one-time costs, we did not compare the run times. We then evaluated the tools using the commands in: <ext-link xlink:href="https://github.com/brentp/echtvar/blob/main/paper/echtvar-paper.sh" ext-link-type="uri">https://github.com/brentp/echtvar/blob/main/paper/echtvar-paper.sh</ext-link></p>
      <p>We saved the times using /usr/bin/time -v and we also saved the total size of all files needed for the annotation.</p>
    </sec>
    <sec id="SEC2-5">
      <title>Filtering whole-genome variants</title>
      <p>We used the gnomAD v3.1.2 archive described above and the HG001 query VCF to evaluate the effect of filtering. We simply added the parameter:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>-i ‘gnomad_popmax_af &lt; 0.01’</monospace>
          </p>
        </list-item>
      </list>
      <p>to include only variants that met that expression. The <italic toggle="yes">gnomad_popmax_af</italic> filter is from the <italic toggle="yes">AF_popmax</italic> field in the original gnomAD VCFs that indicates the maximum allele frequency across each of the sub-populations in gnomAD. A variant contributing to a severe phenotype should be rare in all populations; using the maximum across populations allows us to apply that filter.</p>
    </sec>
    <sec id="SEC2-6">
      <title>Annotating with CADD</title>
      <p>We downloaded the CADD text file from: <ext-link xlink:href="https://kircherlab.bihealth.org/download/CADD/v1.6/GRCh38/" ext-link-type="uri">https://kircherlab.bihealth.org/download/CADD/v1.6/GRCh38/</ext-link>.</p>
      <p>In order to prevent common errors and automatically enforce certain restrictions, <italic toggle="yes">echtvar</italic> requires VCF format. Therefore, we wrote a simple script to convert the &gt;8 billion CADD variants in tab-separated value file to VCF: <ext-link xlink:href="https://github.com/brentp/echtvar/blob/main/examples/cadd/cadd2vcf.py" ext-link-type="uri">https://github.com/brentp/echtvar/blob/main/examples/cadd/cadd2vcf.py</ext-link>.</p>
      <p>We then converted the CADD VCF to an <italic toggle="yes">echtvar</italic> archive using the commands here: <ext-link xlink:href="https://github.com/brentp/echtvar/tree/main/examples/cadd" ext-link-type="uri">https://github.com/brentp/echtvar/tree/main/examples/cadd</ext-link>.</p>
      <p>Since CADD also distributes pre-calculated scores for a set of insertions and deletions found in gnomAD, we used this as an opportunity to add additional tests to verify that all insertions and deletions were indeed correctly annotated. We used the CADD <italic toggle="yes">echtvar</italic> archive to annotate the source file and verified that every indel was correctly annotated with itself.</p>
    </sec>
    <sec id="SEC2-7">
      <title>Filtering somatic variants with dbNSFP</title>
      <p>We annotated 1902 VCF files of somatic variants with dbNSFP version 4.3a. First, we converted dbNSFP to VCF format using this script from the <italic toggle="yes">echtvar</italic> repository: <ext-link xlink:href="https://github.com/brentp/echtvar/blob/main/scripts/dbnsfp.py" ext-link-type="uri">https://github.com/brentp/echtvar/blob/main/scripts/dbnsfp.py</ext-link>.</p>
      <p>We then converted the resulting VCF to an <italic toggle="yes">echtvar</italic> archive with the following command:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar encode dbNSFP.echtvar.zip dbNSFP.json $dbnsfp.vcf.gz</monospace>
          </p>
        </list-item>
      </list>
      <p>where dbNSFP.json contains:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>[{</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘field’: ‘SIFT_converted_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘alias’: ‘dbsnfp_SIFT_converted_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘multiplier’: 1000000</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>}, {</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘field’: ‘DANN_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘alias’: ‘dbsnfp_DANN_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘multiplier’: 1000000</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>}, {</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘field’: ‘GERP++_RS_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘alias’: ‘dbsnfp_GERPpp_RS_rankscore’,</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>‘multiplier’: 1000000</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>}]</monospace>
          </p>
        </list-item>
      </list>
      <p>Finally we annotated each ICGC VCF with the archive using:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno -e dbNSFP.echtvar.zip $vcf /dev/null \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-i ‘dbsnfp_SIFT_converted_rankscore &gt; 0.2 \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>|| dbsnfp_DANN_rankscore &gt; 0.2 \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>|| dbsnfp_GERPpp_RS_rankscore &gt; 0.2 ’</monospace>
          </p>
        </list-item>
      </list>
      <p>while saving the run-time. Full commands for this are in this script: <ext-link xlink:href="https://github.com/brentp/echtvar/blob/main/paper/icgc.sh" ext-link-type="uri">https://github.com/brentp/echtvar/blob/main/paper/icgc.sh</ext-link></p>
    </sec>
    <sec id="SEC2-8">
      <title>Gene and consequence of all single nucleotide variants</title>
      <p>We generated three variants for every position in the GRCh38 reference genome with a known reference and alternate allele. We then annotated with bcftools CSQ (<xref rid="B15" ref-type="bibr">15</xref>) and use the ‘split-vep’ plugin to insert the gene and consequence of the ‘worst’ impact for each variant. This will choose among multiple transcripts and extract the single transcript with the predicted worst consequence. We could also have used the union or some other reducing function. Once added to the VCF info field, these single worst consequence types and associated genes, one for each variant, were available to create an <italic toggle="yes">echtvar</italic> archive. <italic toggle="yes">Echtvar</italic> stores a list of each string and then stores the integer index into that list for each variant. Even for the gene field with more than 30 thousand unique values, there are only a few genes per megabase bin and consecutive values are nearly always similar. This means that the compression is extremely effective, yielding about 1.28 bits per variant (1.4 gigabytes/8.77 billion variants). The code for this process is here: <ext-link xlink:href="https://github.com/brentp/echtvar/tree/main/examples/CSQ-fields" ext-link-type="uri">https://github.com/brentp/echtvar/tree/main/examples/CSQ-fields</ext-link></p>
    </sec>
  </sec>
  <sec sec-type="results" id="SEC3">
    <title>RESULTS</title>
    <p>We first give a brief summary of the <italic toggle="yes">echtvar</italic> algorithm (this is expanded in the methods section), then we compare <italic toggle="yes">echtvar</italic> to other tools on a practical example–annotating a set of whole-genome germline variants with information from gnomAD. This demonstrates the speed and memory use of <italic toggle="yes">echtvar</italic> relative to other tools on a common, yet sizable, task. Then, on the same germline variants we show the filtering capabilities of <italic toggle="yes">echtvar</italic> which enable interactive, exploratory data-analysis. Next, we give an example of using <italic toggle="yes">echtvar</italic> to annotate somatic variants of thousands of samples from International Cancer Genome Consortium (ICGC) with values from dbNSFP (<xref rid="B10" ref-type="bibr">10</xref>). Finally, we create an archive of every possible single-nucleotide change (three changes for each nucleotide in the genome) for both impact (missense, synonymous etc.) and gene name.</p>
    <sec id="SEC3-1">
      <title>Brief algorithm overview</title>
      <p><italic toggle="yes">Echtvar</italic> chunks the genome, efficiently encodes variants into integers, and utilizes integer compression methods to facilitate compact variant representations that can be used for rapid annotation. Briefly, <italic toggle="yes">echtvar</italic> combines the following:</p>
      <list list-type="bullet">
        <list-item>
          <p>an encoding scheme that fits most variants, including position, reference, and alternate alleles into 32 bit integers,</p>
        </list-item>
        <list-item>
          <p>a chromosome and region chunking file-layout scheme that limits memory-use and improves compression,</p>
        </list-item>
        <list-item>
          <p>the Stream-VByte encoding scheme which can encode and decode billions of integers per second while reducing the space required by nearly 4 times for some field-types,</p>
        </list-item>
        <list-item>
          <p>use of the standard ZIP file format to allow random-access to each region,</p>
        </list-item>
        <list-item>
          <p>a command-line interface that allows users to create custom <italic toggle="yes">echtvar</italic> archives by extracting specific integer, float, and low-arity string fields from population databases,</p>
        </list-item>
        <list-item>
          <p>a tool to annotate and filter query variant files with values in <italic toggle="yes">echtvar</italic> archives.</p>
        </list-item>
      </list>
      <p>This combination of methods and utilities make <italic toggle="yes">echtvar</italic> a valuable tool for annotating and filtering genetic variants. It is, however, limited to variants with sequence-resolved reference and alternate alleles and does not include other formats or variants with symbolic alleles like ‘&lt;DEL&gt;’. We expand on the process of encoding and annotation in more detail in the methods.</p>
    </sec>
    <sec id="SEC3-2">
      <title>Comparison with other tools</title>
      <p>We compare <italic toggle="yes">echtvar</italic> speed, memory-use and archive size to bcftools annotate (<xref rid="B4" ref-type="bibr">4</xref>), VarNote (<xref rid="B16" ref-type="bibr">16</xref>), and slivar (<xref rid="B17" ref-type="bibr">17</xref>) on gnomAD v3.1.2 (<xref rid="B6" ref-type="bibr">6</xref>) annotating Genome in a Bottle calls for HG001 (<xref rid="B18" ref-type="bibr">18</xref>) which contains about 3.9 million SNP and indel whole-genome, germline calls.</p>
      <p><italic toggle="yes">Echtvar</italic> is the fastest tool (Figure <xref rid="F2" ref-type="fig">2A</xref>, <xref rid="F2" ref-type="fig">B</xref>) with the smallest annotation file-size footprint (Figure <xref rid="F2" ref-type="fig">2d</xref>) while using a small amount of memory (Figure <xref rid="F2" ref-type="fig">2C</xref>) for any modern server. <italic toggle="yes">Echtvar</italic> completes the task in 132.2 s with 68.1 megabytes of memory; the closest competitor is BCFtools which uses 396.7 s and 43.5 megabytes of memory. Note that <italic toggle="yes">echtvar</italic> uses only 7.3 gigabytes on disk while BCFtools uses 12.6 gigabytes. These sizes are close because we subset the gnomAD VCF to contain only fields of interest to make the comparison as fair as possible–the original VCF files are around 2 terabytes of data. The <italic toggle="yes">echtvar</italic> command used for this comparison was:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-e gnomad.v3.1.2.echtvar.v2.zip \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>$vcf $output_vcf</monospace>
          </p>
        </list-item>
      </list>
      <fig position="float" id="F2">
        <label>Figure 2.</label>
        <caption>
          <p>Comparison of <italic toggle="yes">echtvar</italic> speed, memory, and archive size with other annotation tools. A VCF with about 3.9 million variants was annotated with allele frequency, number of homozygous alternate alleles, and other fields from gnomAD v3.1.2. The first row shows wall-time, how long the programs took to complete (<bold>A</bold>) and user-time, how much processing time (across multiple threads) was used (<bold>B</bold>). The amount of memory used is shown in (<bold>C</bold>) with <italic toggle="yes">slivar</italic> taking much more memory than other tools. (<bold>D</bold>) The file size of the annotation files required. Since <italic toggle="yes">echtvar</italic> encodes the data, it can use smaller files than the original file. Original gnomAD file sizes are much larger, the values shown for <italic toggle="yes">bcftools</italic> and <italic toggle="yes">varnote</italic> are from a VCF or BCF subset to contain only the fields of interest for a more fair comparison.</p>
        </caption>
        <graphic xlink:href="gkac931fig2" position="float"/>
      </fig>
      <p>where ‘$vcf’ and ‘$output_vcf’ are placeholders for the input VCF to be annotated and the output file where results are written.</p>
    </sec>
    <sec id="SEC3-3">
      <title>Filtering whole-genome germline variants with gnomAD</title>
      <p>Next, we remove variants unless the highest allele frequency of any population in gnomAD v3.1.2 was less than 0.01. For this purpose, we used the same set of calls for HG001 along with the same <italic toggle="yes">echtvar</italic> annotations from the previous comparison. This can be achieved with the following <italic toggle="yes">echtvar</italic> command:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno -e gnomad.v3.1.2.echtvar.v2.zip $vcf $output_vcf \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-i ‘gnomad_popmax_af &lt; 0.01’</monospace>
          </p>
        </list-item>
      </list>
      <p>While exact filtering strategies will vary, this is a reasonable starting filter for rare-disease variants, where we expect candidate variants contributing to a severe phenotype to be rare. In doing this filtering, we reduced the <italic toggle="yes">echtvar</italic> run-time from 132 seconds (as in Figure <xref rid="F2" ref-type="fig">2</xref>) to 87 s (34%) and reduced the number of variants from around 3.95 million to 67 017 (98% reduction). The speed improvement is because fewer variants are written and writing to file is otherwise a bottleneck in the annotation step. The filtered variant set is 50 times smaller and so will potentially use 50 times less storage depending on the compression (4.2MB versus 127MB = = 30 times for this example), and less compute for intensive downstream tasks such as effect annotation, for example with Variant Effect Predictor (VEP) (<xref rid="B3" ref-type="bibr">3</xref>). Combining the annotation with filtering compounds the benefit of each of these steps and also highlights the utility of fast tools that leverage large population datasets such as gnomAD in prioritizing variants.</p>
    </sec>
    <sec id="SEC3-4">
      <title>Filtering recessive whole-genome germline variants</title>
      <p>In order to further show the capabilities of <italic toggle="yes">echtvar</italic>, we evaluate filtering for recessive variants where we expect that sites (variants) contributing to disease would have few samples from gnomAD that were homozygous for the variant. We therefore filtered to variants where the proportion of homozygous alternate samples across all populations was less than 0.5% of the number of total samples in that population. <italic toggle="yes">Echtvar</italic> supports this through the following command:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno -e gnomad.v3.1.2.echtvar.v2.zip $vcf $output_vcf \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-i ‘gnomad_popmax_nhomalt / (gnomad_popmax_an / 2) &lt; 0.005’</monospace>
          </p>
        </list-item>
      </list>
      <p>Note that we get the number of samples using the number of chromosomes (the ‘an’ suffix is for ‘number of alleles’ across the population) divided by 2 since we are considering only the autosomes. The left-hand side then gives the proportion of samples and we compare that to the right-hand size (0.005). This completes in around 90 s and writes 178 117 variants (95.5% of variants filtered). This example demonstrates the flexibility of the expressions which allow a variety of mathematical operations. It also highlights the advantage of such a fast tool. We can rapidly evaluate expressions of 4 million variants to decide on the exact filtering parameters. For example if the analyst were to decide that 178 thousand variants is too many, they could run again with a cutoff of 0.1% and have the results in about a minute and a half.</p>
    </sec>
    <sec id="SEC3-5">
      <title>Annotating with CADD</title>
      <p>CADD (<xref rid="B7" ref-type="bibr">7</xref>) is a very dense annotation set with a raw score and a PHRED score for each of the three possible single-base changes at each site in the genome. We created a 17 gigabyte <italic toggle="yes">echtvar</italic> archive from the 81 gigabyte file that contains over 8 billion variants obtained from the CADD site. This is a ∼4.8-fold size reduction from the compressed CADD file. In order to also evaluate the effect of larger indels that don’t fit into the 32-bit representation, we created an archive of the set of pre-scored indels from the CADD site,corresponding to the insertion and deletion variants found in gnomAD. This represents a likely worst-case scenario for <italic toggle="yes">echtvar</italic> as over 56% of these variants do not fit in the 32 bit representation. We find that, even in this worst-case scenario, the file size is still reduced from the original 1020 megabytes to 770 megabytes in the <italic toggle="yes">echtvar</italic> archive. We simultaneously annotated the whole genome variants with both the SNP and indel archives and filtered to variants with a CADD PHRED score over 15 using the command:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno -i ‘cadd_phred &gt; 15’ \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-e cadd.v1.6.hg38.zip \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-e cadd.v1.6.hg38.indels.zip \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>$input_bcf \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>$output_bcf</monospace>
          </p>
        </list-item>
      </list>
      <p>Note that we can annotate with both archives in the same command and that we are only writing the variants that meet the (-i) include expression. This reduces the set of candidate variants by more than 99% from nearly 4 million to 3512 at a rate of about 13 000 (input) variants per second.</p>
    </sec>
    <sec id="SEC3-6">
      <title>Filtering whole-genome somatic variants</title>
      <p>To demonstrate applicability in a somatic variant setting, we annotated and filtered each of 1902 VCF files of somatic variants from the International Cancer Genome Consortium (ICGC) with annotations from dbNSFP. We used the command:</p>
      <list list-type="simple">
        <list-item>
          <p>
            <monospace>echtvar anno -e dbNSFP.echtvar.zip $vcf /dev/null \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>-i ‘dbsnfp_SIFT_converted_rankscore &gt; 0.2 \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>|| dbsnfp_DANN_rankscore &gt; 0.2 \</monospace>
          </p>
        </list-item>
        <list-item>
          <p>
            <monospace>|| dbsnfp_GERPpp_RS_rankscore &gt; 0.2 ’</monospace>
          </p>
        </list-item>
      </list>
      <p>to annotate with dbNSFP and filter to variants that had at least one of the rank scores &gt;0.2. We chose these fields and expressions to highlight the flexibility and possibilities of <italic toggle="yes">echtvar</italic> rather than to address a specific question. Figure <xref rid="F3" ref-type="fig">3</xref> shows the time required to run this command for each file, along with the number of variants left after filtering. All commands finish in a few seconds and leave only a handful of variants in most cases. This demonstrates how one could rapidly evaluate different cutoffs to get to a reasonable number of variants of interest. While nearly all samples had &lt;50 variants that passed the filters, a few samples had &gt;100 variants (not shown in Figure <xref rid="F3" ref-type="fig">3B</xref>, which is truncated at 100). These could be samples that require further quality control. As <italic toggle="yes">echtvar</italic> readily achieves these calculations in a matter of seconds it would be possible to include them as broad quality control measures that require little extra compute.</p>
      <fig position="float" id="F3">
        <label>Figure 3.</label>
        <caption>
          <p>Histograms of run-time (<bold>A</bold>) and variants remaining after filtering (<bold>B</bold>) for 1902 VCFs containing somatic variants for a variety of cancer types from the ICGC. We annotated each VCF with data from dbNSFP version 4.3a and then filtered to variants with a high score in any of three of the annotated fields.</p>
        </caption>
        <graphic xlink:href="gkac931fig3" position="float"/>
      </fig>
    </sec>
    <sec id="SEC3-7">
      <title>Impact and gene name of every single-nucleotide change</title>
      <p>As an example of the utility, speed and compression of annotating with string fields, we generated a VCF with every possible single-nucleotide change for the HG38 human reference genome (three changes per position). We used bcftools CSQ (<xref rid="B15" ref-type="bibr">15</xref>) to annotate each variant with information including the gene, transcript and consequence type. Then we encoded the gene name and consequence type corresponding to the most deleterious consequence for each variant into echtvar archives. There were 27 unique consequence types and 33 581 unique gene names. The 8.77 billion variants were encoded into separate archives for consequence and gene; each of these was 1.4 gigabytes. This result of 1.28 bits per variant is possible because of the combination of the encoding and the zlib compression. We evaluated the speed and correctness of this annotation with string fields by annotating the 8.77 billion variant VCF with the archive for consequence and verifying that the annotated value matched the original value already contained in the VCF. The annotation averaged nearly 549 000 variants per second.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="SEC4">
    <title>DISCUSSION</title>
    <p>Variant annotations from large population sets are essential for virtually all variant interpretation and downstream analyses. We have introduced <italic toggle="yes">echtvar</italic> which uses genome-chunking and an encoding scheme that fits most SNP and indel variants into 32-bit integers to facilitate rapid and flexible annotation. We have shown that <italic toggle="yes">echtvar</italic> is often 3 times as fast as competing tools while using less space for the encoded data and very little memory. We also showed examples of using <italic toggle="yes">echtvar</italic> to simultaneously annotate and filter germline variants; first to those with low allele frequency in a population, then to those with a small percentage of homozygous samples and finally using dense CADD annotations. These are example analyses that are common in rare-disease research. We also showed how <italic toggle="yes">echtvar</italic> can be used to filter somatic variants. Finally, to demonstrate the compression capabilities of <italic toggle="yes">echvar</italic>, we generated all possible single-nucleotide variants and created an <italic toggle="yes">echtvar</italic> archive each for gene and consequence. This yielded a data footprint of only 1.2 bits per variant (including the consequence type). Taken together, all of these analyses demonstrate that the speed, compression and simplicity of <italic toggle="yes">echtvar</italic> make it a valuable tool for variant annotation and filtering and for exploratory data analysis.</p>
    <p>Because of the design and target use of <italic toggle="yes">echtvar</italic>, we have focused on annotating relatively large query variant sets, such as for WGS with even larger annotation sets. When the query set is smaller, the per-variant speed is lower. As a worst-case example, when annotating only a small subset of 967 high impact variants from the HG001 query set with the extremely dense CADD archive, <italic toggle="yes">echtvar</italic> annotated at ∼5 variants per second. This is because <italic toggle="yes">echtvar</italic> must do a lot of work to decompress a 2<sup>20</sup> base chunk for each query variant. In more dense query datasets, that cost is amortized, but this a consideration for smaller query sets.</p>
    <p>Future work could evaluate using 64-bit integers instead of 32-bit, as this would allow more variants to fit in the concise scheme at the cost of a larger average size. This increase in size could be mitigated by compression, but the delta-encoding, where each value is stored as the difference to the previous value, is less effective when fewer bits are used for compression. For example, if 20 bits are used for position, then two adjacent variants would differ by at least 44 bits, limiting the benefit of both delta-encoding and VByte compression. Other work could explore the trade-off in using bins with a fixed number of variables, rather than a fixed size. This would mean that an index for the starting position of each bin would need to be maintained but that each bin would have a similar size in memory; this could improve changes to <italic toggle="yes">echtvar</italic> that focus on parallelization which is another area for future research.</p>
    <p>We expect that the simplicity, speed, and utility of <italic toggle="yes">echtvar</italic> will make it a staple in variant annotation pipelines.</p>
    <p><italic toggle="yes">Echtvar</italic> is available under the liberal MIT license from <ext-link xlink:href="https://github.com/brentp/echtvar" ext-link-type="uri">https://github.com/brentp/echtvar</ext-link>. There is a static binary that will work immediately on modern linux systems.</p>
  </sec>
  <sec sec-type="data-availability" id="SEC5">
    <title>DATA AVAILABILITY</title>
    <p>All data used in the analyses for these papers is from public resources linked in the methods. Scripts to reproduce the analysis are in the echtvar github repository: <ext-link xlink:href="https://github.com/brentp/echtvar" ext-link-type="uri">https://github.com/brentp/echtvar</ext-link>.</p>
  </sec>
</body>
<back>
  <ack id="ACK1">
    <title>ACKNOWLEDGEMENTS</title>
    <p>We benefited from feedback from Sascha Brunner, Myrthe Jager, Arne van Hoeck, Fran Martinez and Fritz Sedlazeck.</p>
  </ack>
  <sec id="SEC6">
    <title>FUNDING</title>
    <p>Vidi Fellowship [639.072.715]; TTW Perspectief program LettuceKnow [P17-19], which are (partly) financed by the Dutch Research Council (NWO). Funding for open access charge: Research funds.</p>
    <p><italic toggle="yes">Conflict of interest statement</italic>. None declared.</p>
  </sec>
  <ref-list id="REF1">
    <title>REFERENCES</title>
    <ref id="B1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Havrilla</surname><given-names>J.M.</given-names></string-name>, <string-name><surname>Pedersen</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Layer</surname><given-names>R.M.</given-names></string-name>, <string-name><surname>Quinlan</surname><given-names>A.R.</given-names></string-name></person-group><article-title>A map of constrained coding regions in the human genome</article-title>. <source>Nature Genetics</source>. <year>2019</year>; <volume>51</volume>:<fpage>88</fpage>–<lpage>95</lpage>.<pub-id pub-id-type="pmid">30531870</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Davydov</surname><given-names>E.V.</given-names></string-name>, <string-name><surname>Goode</surname><given-names>D.L.</given-names></string-name>, <string-name><surname>Sirota</surname><given-names>M.</given-names></string-name>, <string-name><surname>Cooper</surname><given-names>G.M.</given-names></string-name>, <string-name><surname>Sidow</surname><given-names>A.</given-names></string-name>, <string-name><surname>Batzoglou</surname><given-names>S.</given-names></string-name></person-group><article-title>Identifying a high fraction of the human genome to be under selective constraint using GERP</article-title>. <source>PLoS Comput. Biol.</source><year>2010</year>; <volume>6</volume>:<fpage>e1001025</fpage>.<pub-id pub-id-type="pmid">21152010</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McLaren</surname><given-names>W.</given-names></string-name>, <string-name><surname>Gil</surname><given-names>L.</given-names></string-name>, <string-name><surname>Hunt</surname><given-names>S.E.</given-names></string-name>, <string-name><surname>Riat</surname><given-names>H.S.</given-names></string-name>, <string-name><surname>Ritchie</surname><given-names>G.R.S.</given-names></string-name>, <string-name><surname>Thormann</surname><given-names>A.</given-names></string-name>, <string-name><surname>Flicek</surname><given-names>P.</given-names></string-name>, <string-name><surname>Cunningham</surname><given-names>F.</given-names></string-name></person-group><article-title>The ensembl variant effect predictor</article-title>. <source>Genome Biol.</source><year>2016</year>; <volume>17</volume>:<fpage>122</fpage>.<pub-id pub-id-type="pmid">27268795</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Danecek</surname><given-names>P.</given-names></string-name>, <string-name><surname>Bonfield</surname><given-names>J.K.</given-names></string-name>, <string-name><surname>Liddle</surname><given-names>J.</given-names></string-name>, <string-name><surname>Marshall</surname><given-names>J.</given-names></string-name>, <string-name><surname>Ohan</surname><given-names>V.</given-names></string-name>, <string-name><surname>Pollard</surname><given-names>M.O.</given-names></string-name>, <string-name><surname>Whitwham</surname><given-names>A.</given-names></string-name>, <string-name><surname>Keane</surname><given-names>T.</given-names></string-name>, <string-name><surname>McCarthy</surname><given-names>S.A.</given-names></string-name>, <string-name><surname>Davies</surname><given-names>R.M.</given-names></string-name><etal>et al</etal>.</person-group><article-title>Twelve years of SAMtools and BCFtools</article-title>. <source>Gigascience</source>. <year>2021</year>; <volume>10</volume>:<fpage>giab008</fpage>.<pub-id pub-id-type="pmid">33590861</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cingolani</surname><given-names>P.</given-names></string-name>, <string-name><surname>Platts</surname><given-names>A.</given-names></string-name>, <string-name><surname>Wang</surname><given-names>L.L.</given-names></string-name>, <string-name><surname>Coon</surname><given-names>M.</given-names></string-name>, <string-name><surname>Nguyen</surname><given-names>T.</given-names></string-name>, <string-name><surname>Wang</surname><given-names>L.</given-names></string-name>, <string-name><surname>Land</surname><given-names>S.J.</given-names></string-name>, <string-name><surname>Lu</surname><given-names>X.</given-names></string-name>, <string-name><surname>Ruden</surname><given-names>D.M.</given-names></string-name></person-group><article-title>A program for annotating and predicting the effects of single nucleotide polymorphisms, snpeff</article-title>. <source>Fly</source>. <year>2012</year>; <volume>6</volume>:<fpage>80</fpage>–<lpage>92</lpage>.<pub-id pub-id-type="pmid">22728672</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Karczewski</surname><given-names>K.J.</given-names></string-name>, <string-name><surname>Francioli</surname><given-names>L.C.</given-names></string-name>, <string-name><surname>Tiao</surname><given-names>G.</given-names></string-name>, <string-name><surname>Cummings</surname><given-names>B.B.</given-names></string-name>, <string-name><surname>Alföldi</surname><given-names>J.</given-names></string-name>, <string-name><surname>Wang</surname><given-names>Q.</given-names></string-name>, <string-name><surname>Collins</surname><given-names>R.L.</given-names></string-name>, <string-name><surname>Laricchia</surname><given-names>K.M.</given-names></string-name>, <string-name><surname>Ganna</surname><given-names>A.</given-names></string-name>, <string-name><surname>Birnbaum</surname><given-names>D.P.</given-names></string-name><etal>et al</etal>.</person-group><article-title>The mutational constraint spectrum quantified from variation in 141,456 humans</article-title>. <source>Nature</source>. <year>2020</year>; <volume>581</volume>:<fpage>434</fpage>–<lpage>443</lpage>.<pub-id pub-id-type="pmid">32461654</pub-id></mixed-citation>
    </ref>
    <ref id="B7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rentzsch</surname><given-names>P.</given-names></string-name>, <string-name><surname>Witten</surname><given-names>D.</given-names></string-name>, <string-name><surname>Cooper</surname><given-names>G.M.</given-names></string-name>, <string-name><surname>Shendure</surname><given-names>J.</given-names></string-name>, <string-name><surname>Kircher</surname><given-names>M.</given-names></string-name></person-group><article-title>CADD: predicting the deleteriousness of variants throughout the human genome</article-title>. <source>Nucleic Acids Res.</source><year>2019</year>; <volume>47</volume>:<fpage>D886</fpage>–<lpage>D894</lpage>.<pub-id pub-id-type="pmid">30371827</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Danecek</surname><given-names>P.</given-names></string-name>, <string-name><surname>Auton</surname><given-names>A.</given-names></string-name>, <string-name><surname>Abecasis</surname><given-names>G.</given-names></string-name>, <string-name><surname>Albers</surname><given-names>C.A.</given-names></string-name>, <string-name><surname>Banks</surname><given-names>E.</given-names></string-name>, <string-name><surname>DePristo</surname><given-names>M.A.</given-names></string-name>, <string-name><surname>Handsaker</surname><given-names>R.E.</given-names></string-name>, <string-name><surname>Lunter</surname><given-names>G.</given-names></string-name>, <string-name><surname>Marth</surname><given-names>G.T.</given-names></string-name>, <string-name><surname>Sherry</surname><given-names>S.T.</given-names></string-name><etal>et al</etal>.</person-group><article-title>The variant call format and VCFtools</article-title>. <source>Bioinformatics</source>. <year>2011</year>; <volume>27</volume>:<fpage>2156</fpage>–<lpage>2158</lpage>.<pub-id pub-id-type="pmid">21653522</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pedersen</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Layer</surname><given-names>R.M.</given-names></string-name>, <string-name><surname>Quinlan</surname><given-names>A.R.</given-names></string-name></person-group><article-title>Vcfanno: fast, flexible annotation of genetic variants</article-title>. <source>Genome Biol.</source><year>2016</year>; <volume>17</volume>:<fpage>118</fpage>.<pub-id pub-id-type="pmid">27250555</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Liu</surname><given-names>X.</given-names></string-name>, <string-name><surname>Li</surname><given-names>C.</given-names></string-name>, <string-name><surname>Mou</surname><given-names>C.</given-names></string-name>, <string-name><surname>Dong</surname><given-names>Y.</given-names></string-name>, <string-name><surname>Tu</surname><given-names>Y.</given-names></string-name></person-group><article-title>2020) dbNSFP v4: a comprehensive database of transcript-specific functional predictions and annotations for human nonsynonymous and splice-site SNVs</article-title>. <source>Genome Med.</source><volume>12</volume>:<fpage>103</fpage>.<pub-id pub-id-type="pmid">33261662</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Farnaes</surname><given-names>L.</given-names></string-name>, <string-name><surname>Hildreth</surname><given-names>A.</given-names></string-name>, <string-name><surname>Sweeney</surname><given-names>N.M.</given-names></string-name>, <string-name><surname>Clark</surname><given-names>M.M.</given-names></string-name>, <string-name><surname>Chowdhury</surname><given-names>S.</given-names></string-name>, <string-name><surname>Nahas</surname><given-names>S.</given-names></string-name>, <string-name><surname>Cakici</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Benson</surname><given-names>W.</given-names></string-name>, <string-name><surname>Kaplan</surname><given-names>R.H.</given-names></string-name>, <string-name><surname>Kronick</surname><given-names>R.</given-names></string-name><etal>et al</etal>.</person-group><article-title>Rapid whole-genome sequencing decreases infant morbidity and cost of hospitalization</article-title>. <source>NPJ Genom. Med.</source><year>2018</year>; <volume>3</volume>:<fpage>10</fpage>.<pub-id pub-id-type="pmid">29644095</pub-id></mixed-citation>
    </ref>
    <ref id="B12">
      <label>12.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Asuni</surname><given-names>N.</given-names></string-name>, <string-name><surname>Wilder</surname><given-names>S.</given-names></string-name></person-group><article-title>VariantKey: a reversible numerical representation of human genetic variants</article-title>. <year>2019</year>; <comment>bioRxiv doi:</comment><comment>15 February 2019, preprint: not peer reviewed</comment><pub-id pub-id-type="doi">10.1101/473744</pub-id>.</mixed-citation>
    </ref>
    <ref id="B13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lemire</surname><given-names>D.</given-names></string-name>, <string-name><surname>Kurz</surname><given-names>N.</given-names></string-name>, <string-name><surname>Rupp</surname><given-names>C.</given-names></string-name></person-group><article-title>Stream VByte: faster byte-oriented integer compression</article-title>. <source>Inf. Process. Lett.</source><year>2018</year>; <volume>130</volume>:<fpage>1</fpage>–<lpage>6</lpage>.</mixed-citation>
    </ref>
    <ref id="B14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bonfield</surname><given-names>J.K.</given-names></string-name>, <string-name><surname>Marshall</surname><given-names>J.</given-names></string-name>, <string-name><surname>Danecek</surname><given-names>P.</given-names></string-name>, <string-name><surname>Li</surname><given-names>H.</given-names></string-name>, <string-name><surname>Ohan</surname><given-names>V.</given-names></string-name>, <string-name><surname>Whitwham</surname><given-names>A.</given-names></string-name>, <string-name><surname>Keane</surname><given-names>T.</given-names></string-name>, <string-name><surname>Davies</surname><given-names>R.M.</given-names></string-name></person-group><article-title>HTSlib: C library for reading/writing high-throughput sequencing data</article-title>. <source>Gigascience</source>. <year>2021</year>; <volume>10</volume>:<fpage>giab007</fpage>.<pub-id pub-id-type="pmid">33594436</pub-id></mixed-citation>
    </ref>
    <ref id="B15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Danecek</surname><given-names>P.</given-names></string-name>, <string-name><surname>McCarthy</surname><given-names>S.A.</given-names></string-name></person-group><article-title>BCFtools/csq: haplotype-aware variant consequences</article-title>. <source>Bioinformatics</source>. <year>2017</year>; <volume>33</volume>:<fpage>2037</fpage>–<lpage>2039</lpage>.<pub-id pub-id-type="pmid">28205675</pub-id></mixed-citation>
    </ref>
    <ref id="B16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Huang</surname><given-names>D.</given-names></string-name>, <string-name><surname>Yi</surname><given-names>X.</given-names></string-name>, <string-name><surname>Zhou</surname><given-names>Y.</given-names></string-name>, <string-name><surname>Yao</surname><given-names>H.</given-names></string-name>, <string-name><surname>Xu</surname><given-names>H.</given-names></string-name>, <string-name><surname>Wang</surname><given-names>J.</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>S.</given-names></string-name>, <string-name><surname>Nong</surname><given-names>W.</given-names></string-name>, <string-name><surname>Wang</surname><given-names>P.</given-names></string-name>, <string-name><surname>Shi</surname><given-names>L.</given-names></string-name><etal>et al</etal>.</person-group><article-title>Ultrafast and scalable variant annotation and prioritization with big functional genomics data</article-title>. <source>Genome Res.</source><year>2020</year>; <volume>30</volume>:<fpage>1789</fpage>–<lpage>1801</lpage>.<pub-id pub-id-type="pmid">33060171</pub-id></mixed-citation>
    </ref>
    <ref id="B17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pedersen</surname><given-names>B.S.</given-names></string-name>, <string-name><surname>Brown</surname><given-names>J.M.</given-names></string-name>, <string-name><surname>Dashnow</surname><given-names>H.</given-names></string-name>, <string-name><surname>Wallace</surname><given-names>A.D.</given-names></string-name>, <string-name><surname>Velinder</surname><given-names>M.</given-names></string-name>, <string-name><surname>Tristani-Firouzi</surname><given-names>M.</given-names></string-name>, <string-name><surname>Schiffman</surname><given-names>J.D.</given-names></string-name>, <string-name><surname>Tvrdik</surname><given-names>T.</given-names></string-name>, <string-name><surname>Mao</surname><given-names>R.</given-names></string-name>, <string-name><surname>Best</surname><given-names>D.H.</given-names></string-name><etal>et al</etal>.</person-group><article-title>Effective variant filtering and expected candidate variant yield in studies of rare human disease</article-title>. <source>NPJ Genom. Med.</source><year>2021</year>; <volume>6</volume>:<fpage>60</fpage>.<pub-id pub-id-type="pmid">34267211</pub-id></mixed-citation>
    </ref>
    <ref id="B18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wagner</surname><given-names>J.</given-names></string-name>, <string-name><surname>Olson</surname><given-names>N.D.</given-names></string-name>, <string-name><surname>Harris</surname><given-names>L.</given-names></string-name>, <string-name><surname>McDaniel</surname><given-names>J.</given-names></string-name>, <string-name><surname>Khan</surname><given-names>Z.</given-names></string-name>, <string-name><surname>Farek</surname><given-names>J.</given-names></string-name>, <string-name><surname>Mahmoud</surname><given-names>M.</given-names></string-name>, <string-name><surname>Stankovic</surname><given-names>A.</given-names></string-name>, <string-name><surname>Kovacevic</surname><given-names>V.</given-names></string-name>, <string-name><surname>Yoo</surname><given-names>B.</given-names></string-name><etal>et al</etal>.</person-group><article-title>Benchmarking challenging small variants with linked and long reads</article-title>. <source>Cell Genomics</source>. <year>2022</year>; <volume>2</volume>:<pub-id pub-id-type="doi">10.1016/j.xgen.2022.100128</pub-id>.</mixed-citation>
    </ref>
  </ref-list>
</back>
