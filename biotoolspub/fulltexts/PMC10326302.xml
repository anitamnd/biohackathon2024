<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10326302</article-id>
    <article-id pub-id-type="pmid">37369026</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad409</article-id>
    <article-id pub-id-type="publisher-id">btad409</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Plassembler: an automated bacterial plasmid assembly tool</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5885-4186</contrib-id>
        <name>
          <surname>Bouras</surname>
          <given-names>George</given-names>
        </name>
        <aff><institution>Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
        <aff><institution>The Department of Surgery – Otolaryngology Head and Neck Surgery, Central Adelaide Local Health Network</institution>, Adelaide, South Australia 5000, <country country="AU">Australia</country></aff>
        <xref rid="btad409-cor1" ref-type="corresp"/>
        <!--george.bouras@adelaide.edu.au-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sheppard</surname>
          <given-names>Anna E</given-names>
        </name>
        <aff><institution>School of Biological Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-2651-8719</contrib-id>
        <name>
          <surname>Mallawaarachchi</surname>
          <given-names>Vijini</given-names>
        </name>
        <aff><institution>Flinders Accelerator for Microbiome Exploration, College of Science and Engineering, Flinders University</institution>, <addr-line>Bedford Park</addr-line>, Adelaide, South Australia 5042, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vreugde</surname>
          <given-names>Sarah</given-names>
        </name>
        <aff><institution>Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
        <aff><institution>The Department of Surgery – Otolaryngology Head and Neck Surgery, Central Adelaide Local Health Network</institution>, Adelaide, South Australia 5000, <country country="AU">Australia</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Marschall</surname>
          <given-names>Tobias</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad409-cor1">Corresponding author. Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide, Adelaide, SA, Australia. E-mail: <email>george.bouras@adelaide.edu.au</email> (G.B.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-06-27">
      <day>27</day>
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>7</issue>
    <elocation-id>btad409</elocation-id>
    <history>
      <date date-type="received">
        <day>08</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>04</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>16</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>06</day>
        <month>7</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad409.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>With recent advances in sequencing technologies, it is now possible to obtain near-perfect complete bacterial chromosome assemblies cheaply and efficiently by combining a long-read-first assembly approach with short-read polishing. However, existing methods for assembling bacterial plasmids from long-read-first assemblies often misassemble or even miss bacterial plasmids entirely and accordingly require manual curation. Plassembler was developed to provide a tool that automatically assembles and outputs bacterial plasmids using a hybrid assembly approach. It achieves increased accuracy and computational efficiency compared to the existing gold standard tool Unicycler by removing chromosomal reads from the input read sets using a mapping approach.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>Plassembler is implemented in Python and is installable as a bioconda package using ‘conda install -c bioconda plassembler’. The source code is available on GitHub at <ext-link xlink:href="https://github.com/gbouras13/plassembler" ext-link-type="uri">https://github.com/gbouras13/plassembler</ext-link>. The full benchmarking pipeline can be found at <ext-link xlink:href="https://github.com/gbouras13/plassembler_simulation_benchmarking" ext-link-type="uri">https://github.com/gbouras13/plassembler_simulation_benchmarking</ext-link>, while the benchmarking input FASTQ and output files can be found at <ext-link xlink:href="https://doi.org/10.5281/zenodo.7996690" ext-link-type="uri">https://doi.org/10.5281/zenodo.7996690</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Adelaide Barbara Kidman Women’s Fellowship</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Advances in the accuracy of long-read sequencing have made near perfect bacterial genome assemblies attainable by combining long- and short-read sequencing technologies (<xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>). Until recently, short-read-first hybrid assembly methods were favoured using tools such as Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>), which implements short read assembly using SPAdes (<xref rid="btad409-B2" ref-type="bibr">Bankevich <italic toggle="yes">et al.</italic> 2012</xref>). As long-read sequencing accuracy has continued to improve, the current best practice favours long-read-first assemblies supplemented with short-read polishing using tools such as Trycycler (<xref rid="btad409-B34" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021b</xref>), Dragonflye (<ext-link xlink:href="https://github.com/rpetit3/dragonflye" ext-link-type="uri">https://github.com/rpetit3/dragonflye</ext-link>), or MicroPIPE (<xref rid="btad409-B21" ref-type="bibr">Murigneux <italic toggle="yes">et al.</italic> 2021</xref>).</p>
    <p>A limitation of long-read-first assemblies is that small (&lt;20 kb) plasmids are often missed by long read first assemblies, especially when ligation-based library preparation methods are used (<xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>). This may result in an incomplete picture of a sample’s plasmid mobilization and virulence potential, particularly for those with plasmids carrying antimicrobial resistance genes (<xref rid="btad409-B3" ref-type="bibr">Barry <italic toggle="yes">et al.</italic> 2019</xref>). In addition, long-read first assemblies often miss and misassemble small plasmids by doubling or tripling their length in assemblies (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>), requiring manual intervention and curation. Accordingly, current best practice recommends hybrid short-read first assembly to recover small plasmids (<xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>). However, this method is computationally inefficient, as all input reads are assembled, including the majority that constitute the bacterial chromosome.</p>
    <p>To improve computational efficiency, to increase accuracy, and to provide plasmid-only output that can be integrated with long-read-first pipelines chromosomal assemblies, we created Plassembler as a one-line tool that automatically outputs bacterial plasmid assemblies. Its increase in computational efficiency results from removing all reads that map to a quick draft bacterial chromosome assembly created using Flye (<xref rid="btad409-B17" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2019</xref>) by default or optionally with Raven (<xref rid="btad409-B29" ref-type="bibr">Vaser and Šikić 2021</xref>) before conducting hybrid assembly using Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>). Plassembler then matches each assembled plasmid contig to the PLSDB (<xref rid="btad409-B10" ref-type="bibr">Galata <italic toggle="yes">et al.</italic> 2019</xref>) and outputs plasmid copy-number statistics for both long and short-reads. Plassembler can also be used as a fast quality control tool to check that long and short-reads are derived from the same bacterial isolate, which may be particularly useful for users conducting long-read re-sequencing to complete the genomes of isolates previously sequenced with short reads only.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>The Plassembler workflow is outlined in <xref rid="btad409-F1" ref-type="fig">Fig. 1</xref>.</p>
    <fig position="float" id="btad409-F1">
      <label>Figure 1.</label>
      <caption>
        <p>Plassembler workflow. (A) Plassembler requires paired-end short reads and single-end long reads as input. (B) Long reads are filtered using chopper and short reads are filtered and trimmed using fastp. (C) Long-read-first assembly is conducted with Flye by default or optionally with Raven. (D) All long and short reads are mapped to the long-read-first assembly. All reads that are unmapped and all reads that map to putative plasmid contigs are extracted. (E) These reads are then assembled using Unicycler. (F) Plasmid copy number is estimated for each assembled plasmid contig. (G) Each plasmid contig is matched against the PLSDB using mash.</p>
      </caption>
      <graphic xlink:href="btad409f1" position="float"/>
    </fig>
    <sec>
      <title>2.1 Input</title>
      <p>Plassembler requires hybrid short paired-end and long read single-end FASTQ sequencing reads from the same bacterial isolate, along with a minimum size threshold for classifying chromosomal contigs specified using the ‘-c’ parameter as input (<xref rid="btad409-F1" ref-type="fig">Fig. 1A</xref>). Sufficient long-read sequencing depth is required to assemble chromosomal contigs that are larger than the provided threshold (see Section 2.3).</p>
    </sec>
    <sec>
      <title>2.2 Quality control</title>
      <p>Short-read paired-end FASTQs are filtered and trimmed using fastp (<xref rid="btad409-B4" ref-type="bibr">Chen <italic toggle="yes">et al.</italic> 2018</xref>). Long-read FASTQs are filtered using chopper (<xref rid="btad409-B7" ref-type="bibr">De Coster and Rademakers 2023</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1B</xref>). Plassembler provides the option of filtering the long reads by minimum read length using the ‘-m’ parameter (defaults to 500 bp) and by minimum quality using the ‘-q’ parameter (defaults to a Q-score of 9). Quality control can be skipped using the ‘–skip_qc’ parameter.</p>
    </sec>
    <sec>
      <title>2.3 Long-read-only assembly</title>
      <p>By default, Plassembler uses Flye (<xref rid="btad409-B17" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2019</xref>) to conduct a long-read-only assembly of the filtered long reads (<xref rid="btad409-F1" ref-type="fig">Fig. 1C</xref>). Flye was chosen as the default long-read assembler due to its high chromosome and plasmid recovery, accuracy, and fast runtime (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>). If the resulting assembly has at least one contig that is longer than the provided ‘-c’ chromosome length, then all such contigs are denoted as chromosomal and Plassembler continues. Otherwise, Plassembler will exit, asking the user to check the ‘-c’ parameter value input or to increase long-read sequencing depth to ensure a complete chromosome is assembled. If there are additional contigs assembled that are smaller than the provided ‘-c’ chromosome length, Plassembler denotes these as putative plasmid contigs. The ‘-c’ parameter defaults to 1 megabase, allowing for some assembly fragmentation while retaining even large plasmids.</p>
      <p>Alternatively, the long read assembler Raven (<xref rid="btad409-B29" ref-type="bibr">Vaser and Šikić 2021</xref>) can be instead of Flye using the ‘–use_raven’ parameter, which will likely decrease run-time at the potential cost of accuracy (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>). By default, Plassembler expects Oxford Nanopore Technologies long-reads as input, but can also be used with Pacific Biosciences long-reads using the ‘–pacbio_model’ parameter.</p>
      <table-wrap position="float" id="btad409-T1">
        <label>Table 1.</label>
        <caption>
          <p>Plassembler output files.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Output files</th>
              <th rowspan="1" colspan="1">Description of file contents</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">_plasmids.fasta</td>
              <td rowspan="1" colspan="1">Final plasmid assembly in FASTA format</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">_plasmids.gfa</td>
              <td rowspan="1" colspan="1">Final plasmid assembly graph in GFA format.</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">_summary.tsv</td>
              <td rowspan="1" colspan="1">Summary file with plasmid length, circularity, estimated copy number statistics for long and short reads (Mean, Standard Deviation, First and Third Quartiles), a column indicating whether the contig had a match in the PLSDB below a mash distance threshold of 0.1 and if so, all available PLSDB information about the top hit.</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">flye_output or raven_output</td>
              <td rowspan="1" colspan="1">Directory holding the output from Flye (default) or Raven (if ‘—use_raven’ is specified).</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">unicycler_output</td>
              <td rowspan="1" colspan="1">Directory holding the output from Unicycler</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <table-wrap position="float" id="btad409-T2">
        <label>Table 2.</label>
        <caption>
          <p>Benchmarked time and memory usage.<sup>a</sup></p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Threads</th>
              <th rowspan="1" colspan="1">Program</th>
              <th rowspan="1" colspan="1">Median wall clock time</th>
              <th rowspan="1" colspan="1">Min wall clock time</th>
              <th rowspan="1" colspan="1">Max wall clock time</th>
              <th rowspan="1" colspan="1">Median max memory</th>
              <th rowspan="1" colspan="1">Min max memory</th>
              <th rowspan="1" colspan="1">Max max memory</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">7012</td>
              <td rowspan="1" colspan="1">1926</td>
              <td rowspan="1" colspan="1">28 103</td>
              <td rowspan="1" colspan="1">3039</td>
              <td rowspan="1" colspan="1">2442</td>
              <td rowspan="1" colspan="1">5275</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">3893</td>
              <td rowspan="1" colspan="1">815</td>
              <td rowspan="1" colspan="1">22 106</td>
              <td rowspan="1" colspan="1">1764</td>
              <td rowspan="1" colspan="1">1307</td>
              <td rowspan="1" colspan="1">2464</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">32 619</td>
              <td rowspan="1" colspan="1">13 183</td>
              <td rowspan="1" colspan="1">66 880</td>
              <td rowspan="1" colspan="1">2804</td>
              <td rowspan="1" colspan="1">1404</td>
              <td rowspan="1" colspan="1">3784</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1563</td>
              <td rowspan="1" colspan="1">531</td>
              <td rowspan="1" colspan="1">4852</td>
              <td rowspan="1" colspan="1">4842</td>
              <td rowspan="1" colspan="1">2274</td>
              <td rowspan="1" colspan="1">7712</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">700</td>
              <td rowspan="1" colspan="1">132</td>
              <td rowspan="1" colspan="1">3051</td>
              <td rowspan="1" colspan="1">2579</td>
              <td rowspan="1" colspan="1">1587</td>
              <td rowspan="1" colspan="1">7891</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">4411</td>
              <td rowspan="1" colspan="1">2139</td>
              <td rowspan="1" colspan="1">10 003</td>
              <td rowspan="1" colspan="1">6568</td>
              <td rowspan="1" colspan="1">5610</td>
              <td rowspan="1" colspan="1">6826</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1019</td>
              <td rowspan="1" colspan="1">497</td>
              <td rowspan="1" colspan="1">2675</td>
              <td rowspan="1" colspan="1">5892</td>
              <td rowspan="1" colspan="1">3832</td>
              <td rowspan="1" colspan="1">15 086</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">430</td>
              <td rowspan="1" colspan="1">114</td>
              <td rowspan="1" colspan="1">1749</td>
              <td rowspan="1" colspan="1">3517</td>
              <td rowspan="1" colspan="1">2360</td>
              <td rowspan="1" colspan="1">15 195</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">2554</td>
              <td rowspan="1" colspan="1">1347</td>
              <td rowspan="1" colspan="1">5098</td>
              <td rowspan="1" colspan="1">12 967</td>
              <td rowspan="1" colspan="1">6509</td>
              <td rowspan="1" colspan="1">13 549</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <label>a</label>
            <p>60× coverage simulated reads from 20 samples. Wall clock time is expressed in seconds (s) and memory is expressed in megabytes (MB).</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <table-wrap position="float" id="btad409-T3">
        <label>Table 3.</label>
        <caption>
          <p>Benchmarked time and memory usage.<sup>a</sup></p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Threads</th>
              <th rowspan="1" colspan="1">Program</th>
              <th rowspan="1" colspan="1">Median wall clock time</th>
              <th rowspan="1" colspan="1">Min wall clock time</th>
              <th rowspan="1" colspan="1">Max wall clock time</th>
              <th rowspan="1" colspan="1">Median max memory</th>
              <th rowspan="1" colspan="1">Min max memory</th>
              <th rowspan="1" colspan="1">Max max memory</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">7063</td>
              <td rowspan="1" colspan="1">4559</td>
              <td rowspan="1" colspan="1">7865</td>
              <td rowspan="1" colspan="1">9921</td>
              <td rowspan="1" colspan="1">9116</td>
              <td rowspan="1" colspan="1">10 024</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">5918</td>
              <td rowspan="1" colspan="1">3430</td>
              <td rowspan="1" colspan="1">7028</td>
              <td rowspan="1" colspan="1">2623</td>
              <td rowspan="1" colspan="1">2214</td>
              <td rowspan="1" colspan="1">3039</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">48 325</td>
              <td rowspan="1" colspan="1">37 282</td>
              <td rowspan="1" colspan="1">58 823</td>
              <td rowspan="1" colspan="1">4671</td>
              <td rowspan="1" colspan="1">3583</td>
              <td rowspan="1" colspan="1">5832</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1493</td>
              <td rowspan="1" colspan="1">1250</td>
              <td rowspan="1" colspan="1">1688</td>
              <td rowspan="1" colspan="1">10 172</td>
              <td rowspan="1" colspan="1">9710</td>
              <td rowspan="1" colspan="1">10 897</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">1126</td>
              <td rowspan="1" colspan="1">709</td>
              <td rowspan="1" colspan="1">1356</td>
              <td rowspan="1" colspan="1">6626</td>
              <td rowspan="1" colspan="1">2872</td>
              <td rowspan="1" colspan="1">8374</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">7500</td>
              <td rowspan="1" colspan="1">4509</td>
              <td rowspan="1" colspan="1">9659</td>
              <td rowspan="1" colspan="1">7535</td>
              <td rowspan="1" colspan="1">7003</td>
              <td rowspan="1" colspan="1">8128</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">975</td>
              <td rowspan="1" colspan="1">779</td>
              <td rowspan="1" colspan="1">1163</td>
              <td rowspan="1" colspan="1">11 803</td>
              <td rowspan="1" colspan="1">10 344</td>
              <td rowspan="1" colspan="1">13 467</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">699</td>
              <td rowspan="1" colspan="1">397</td>
              <td rowspan="1" colspan="1">840</td>
              <td rowspan="1" colspan="1">6574</td>
              <td rowspan="1" colspan="1">3343</td>
              <td rowspan="1" colspan="1">14 784</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">3876</td>
              <td rowspan="1" colspan="1">2944</td>
              <td rowspan="1" colspan="1">5036</td>
              <td rowspan="1" colspan="1">14 041</td>
              <td rowspan="1" colspan="1">13 647</td>
              <td rowspan="1" colspan="1">14 062</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn2">
            <label>a</label>
            <p>60× coverage real reads from six samples from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>). Wall clock time is expressed in seconds (s) and memory is expressed in megabytes (MB).</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec>
      <title>2.4 Read mapping</title>
      <p>Plassembler then maps all long- and short-reads to the long-read-only assembly using Minimap2 (<xref rid="btad409-B18" ref-type="bibr">Li 2018</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1D</xref>). All unmapped reads and all reads that map to putative plasmid contigs are then extracted using SAMtools (<xref rid="btad409-B19" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>) and combined.</p>
    </sec>
    <sec>
      <title>2.5 Hybrid assembly and depth estimation</title>
      <p>Hybrid assembly is then conducted with Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>) to generate final plasmid contigs and assembly graphs (<xref rid="btad409-F1" ref-type="fig">Fig. 1E</xref>). Long- and short-read plasmid copy numbers and associated statistics are estimated by mapping all reads to the chromosome and final plasmid assemblies using Minimap2 (<xref rid="btad409-B18" ref-type="bibr">Li 2018</xref>) and the SAMtools depth function (<xref rid="btad409-B19" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>, <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1F</xref>).</p>
    </sec>
    <sec>
      <title>2.6 PLSDB mash distance calculation</title>
      <p>Finally, each assembled plasmid contig is compared to the 34 513 plasmids contained in PLSDB (<xref rid="btad409-B10" ref-type="bibr">Galata <italic toggle="yes">et al.</italic> 2019</xref>) using mash (<xref rid="btad409-F1" ref-type="fig">Fig. 1G</xref>). All matches below the maximum threshold of a mash distance of 0.1 are considered. For each contig, the PLSDB match with the lowest mash distance is kept as the top hit. Contigs that do not have a PLSDB match are denoted as such and are less likely to be true plasmid assemblies, particularly if they are not circular.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Output</title>
    <p>Plassembler’s output files are outlined in <xref rid="btad409-T1" ref-type="table">Table 1</xref>. The primary outputs of Plassembler are a _plasmids.fasta file and a _plasmids.gfa file. The _plasmids.fasta file is taken from the output of Unicycler and contains the final plasmid assemblies in FASTA format. This is suitable for downstream analysis using tools such as MOB-suite (<xref rid="btad409-B25" ref-type="bibr">Robertson and Nash 2018</xref>) and mge-cluster (<xref rid="btad409-B1" ref-type="bibr">Arredondo-Alonso <italic toggle="yes">et al.</italic> 2022</xref>). In addition, a ‘_plasmids.gfa’ file is generated containing the Unicycler assembly graphs that can be visualized using tools like Bandage (<xref rid="btad409-B152" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2015</xref>). In addition, plassembler provides a ‘_summary.tsv’ file. This file includes each plasmid’s length, estimated mean, first quartile, third quartile and standard deviation of each plasmid’s short-read and long-read depths, a column indicating whether each plasmid contig is circular and a column indicating whether the contig has a match in PLSDB under the maximum mash distance threshold of 0.1. If there is a hit, the ‘_summary.tsv’ file will also contain all available PLSDB information about the top hit.</p>
  </sec>
  <sec>
    <title>4 Benchmarking</title>
    <p>Benchmarking, implemented using a reproducible Snakemake pipeline (<xref rid="btad409-B151" ref-type="bibr">Mölder <italic toggle="yes">et al.</italic> 2021</xref>) powered by Snaketool (<xref rid="btad409-B24" ref-type="bibr">Roach <italic toggle="yes">et al.</italic> 2022</xref>), was conducted on an Intel<sup>®</sup> Core™ i7-10700K CPU @ 3.80 GHz on a machine running Ubuntu 20.04.6 LTS. To test the performance of Plassembler, we used simulated reads from 20 isolate assemblies from four different datasets. These consisted of:</p>
    <list list-type="order">
      <list-item>
        <p>six isolate assemblies and read sets from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) (available at <ext-link xlink:href="https://bridges.monash.edu/articles/dataset/Small_plasmid_Nanopore_data/13543754" ext-link-type="uri">https://bridges.monash.edu/articles/dataset/Small_plasmid_Nanopore_data/13543754</ext-link>) assembled with Trycycler and manually curated in that study.</p>
      </list-item>
      <list-item>
        <p>one <italic toggle="yes">Staphylococcus aureus</italic> isolate assembly (C222 SAMN32360844 in BioProject PRJNA914892 in the NCBI BioProject database, specifically SRR22859710 for ONT long reads and SRR22859843 for short reads) previously sequenced by us as an example of a bacterial isolate with one small plasmid (<xref rid="btad409-B15" ref-type="bibr">Houtak <italic toggle="yes">et al.</italic> 2023</xref>).</p>
      </list-item>
      <list-item>
        <p>twelve <italic toggle="yes">Enterobacteriaceae</italic> isolates with from <xref rid="btad409-B8" ref-type="bibr">De Maio <italic toggle="yes">et al.</italic> (2019)</xref> that contained at least one plasmid with accessible sample numbers in the European Nucleotide Archive. We used the subsampled Oxford Nanopore Technologies Unicycler assemblies as this was the best performing method in that study.</p>
      </list-item>
      <list-item>
        <p>one <italic toggle="yes">Klebsiella pneumoniae</italic> strain CAV1217 assembly as an example of a challenging isolate testing the ability of Plassembler to process multi-mapped reads. It has a 16 kb mobile genetic element present in both the chromosome and on a 44 kb plasmid (<xref rid="btad409-B20" ref-type="bibr">Mathers <italic toggle="yes">et al.</italic> 2017</xref>).</p>
      </list-item>
    </list>
    <p>We used Badread v0.3.0 (<xref rid="btad409-B30" ref-type="bibr">Wick 2019</xref>) and InSilicoSeq v1.5.4 (<xref rid="btad409-B11" ref-type="bibr">Gourlé <italic toggle="yes">et al.</italic> 2019</xref>) to generate simulated readsets from all ground truth assemblies. Long reads were simulated with the Nanopore 2020 error model, while short reads were simulated with the ‘novaseq’ error model. Both long and short read sets were simulated to a genome coverage of 60×.</p>
    <p>In addition to the simulated readsets, we tested the performance of Plassembler on real reads from the six isolates from (<xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>). Because these genomes were assembled using a highly accurate and independent approach to that used by Plassembler [Trycycler (<xref rid="btad409-B34" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021b</xref>) with manual curation], we considered that these assemblies could also be used as ground truth for testing the accuracy of Plassembler on the corresponding real readsets. Wick, Judd, Wyers, <italic toggle="yes">et al.</italic> have made all the details of their methodology available at <ext-link xlink:href="https://github.com/rrwick/Small-plasmid-Nanopore/blob/main/method.md" ext-link-type="uri">https://github.com/rrwick/Small-plasmid-Nanopore/blob/main/method.md</ext-link>. These isolates were sequenced in two technical replicates with two long-read sequencing methods. For our study, reads for both technical replicates and both sequencing chemistries were combined and subsampled to a depth of 60× using rasusa v0.7.0 (<xref rid="btad409-B13" ref-type="bibr">Hall 2022</xref>).</p>
    <p>To assess computational performance, Plassembler v1.1.0 (with Unicycler v0.5.0, SPAdes v3.15.5, Flye v2.9.2 and Raven v1.8.1) using both Flye and Raven was compared against Unicycler v0.5.0 (with SPAdes v3.15.5) in terms of speed and accuracy, using 1, 8, and 16 threads. To assess accuracy, Plassembler assemblies for the 20 simulated read sets (with a verifiable ground truth) and the six <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) real read sets (with an independent manually curated ground truth), were compared to the ground truth assemblies using QUAST to assess genome fraction, mismatches per 100 kb and indels per 100 kb (<xref rid="btad409-B12" ref-type="bibr">Gurevich <italic toggle="yes">et al.</italic> 2013</xref>).</p>
  </sec>
  <sec>
    <title>5 Results</title>
    <p>Plassembler was faster than Unicycler for every sample for the 20 simulated isolates and six real read sets samples for all thread counts, yielding a 3- to 10-fold speed improvement (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>) depending on the sample, thread count, and long-read assembler used. The decrease in wall-clock runtime was largest single-threaded. Plassembler and Unicycler both had comparable maximum memory usage.</p>
    <p>Plassembler was more accurate than Unicycler overall, recovering a higher average QUAST genome fraction than Unicycler against the simulated ground truth (<xref rid="btad409-T4" ref-type="table">Table 4</xref>). For the simulated reads, Plassembler missed fewer plasmids (one versus seven for Unicycler), but had a higher number of fragmented assemblies (four for Plassembler with Flye, five for Plassembler with Raven versus one for Unicycler). Unicycler also had one misassembly, while Plassembler did not have any. Rates of indels and mismatches were comparable and low for all three assembly methods.</p>
    <table-wrap position="float" id="btad409-T4">
      <label>Table 4.</label>
      <caption>
        <p>Benchmarked accuracy.<sup>a</sup></p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Program</th>
            <th rowspan="1" colspan="1">Complete plasmids</th>
            <th rowspan="1" colspan="1">Missed plasmids</th>
            <th rowspan="1" colspan="1">Incomplete plasmids</th>
            <th rowspan="1" colspan="1">Misassemblies</th>
            <th rowspan="1" colspan="1">Genome fraction</th>
            <th rowspan="1" colspan="1">Indels</th>
            <th rowspan="1" colspan="1">Mismatches</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Flye</td>
            <td rowspan="1" colspan="1">69</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">4</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">99.66 (mean), 99.94 (median), (97.68, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.37)</td>
            <td rowspan="1" colspan="1">0.91 (0, 11.12)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Raven</td>
            <td rowspan="1" colspan="1">68</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">5</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">99.47 (mean), 99.96 (median), (96.59, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.41)</td>
            <td rowspan="1" colspan="1">0.91 (0, 11.12)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Unicycler</td>
            <td rowspan="1" colspan="1">65</td>
            <td rowspan="1" colspan="1">7</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">93.81 (mean), 99.88 (median), (0, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.54)</td>
            <td rowspan="1" colspan="1">0.88 (0, 7.28)</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn3">
          <label>a</label>
          <p>60× coverage simulated reads from 20 samples. Median values indicated for Indels and Mismatches. Minimums and maximums in brackets. Indels and mismatches calculated per 100 kb. Results from eight threads.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>The difference in genome fraction is explained by Plassembler’s ability to recover small plasmids under 10 kb. In the simulated read sets Plassembler was able to recover small plasmids in <italic toggle="yes">Staphylococcus aureus</italic> C222 (2473 bp), <italic toggle="yes">Citrobacter koseri</italic> MINF 9D (9294 bp), <italic toggle="yes">Klebsiella oxytoca</italic> MSB1 2C (4574 bp), <italic toggle="yes">Klebsiella variicola</italic> INF345 (5783 bp), <italic toggle="yes">Enterobacter cloacae</italic> RBHSTW-00059 (2495 bp), and <italic toggle="yes">Klebsiella pneumonaie</italic> RBHSTW-00128 (3980 bp) that were missed by Unicycler (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
    <p>For the real read sets, Plassembler, and Unicycler had identical genome fractions and low indel and mismatch rates (<xref rid="btad409-T5" ref-type="table">Table 5</xref>). Similar to the simulated dataset, Plassembler recovered two additional small plasmids missed by Unicycler (<xref rid="btad409-T5" ref-type="table">Table 5</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S6</xref>) of lengths 1934 bp (<italic toggle="yes">K.variicola</italic> INF345) and 10 697 bp (<italic toggle="yes">K.oxytoca</italic> MSB1 2C). The 10 697 bp plasmid recovered in <italic toggle="yes">K.oxytoca</italic> MSB1 2C was not recovered using the long-read first assembly method by <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>). Annotation with Bakta v1.7.0 (<xref rid="btad409-B27" ref-type="bibr">Schwengers <italic toggle="yes">et al.</italic> 2021</xref>) revealed that this plasmid contains a Type III toxin-antitoxin system and other plasmid replication genes (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S10</xref>).</p>
    <table-wrap position="float" id="btad409-T5">
      <label>Table 5.</label>
      <caption>
        <p>Benchmarked accuracy.<sup>a</sup></p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Program</th>
            <th rowspan="1" colspan="1">Complete plasmids</th>
            <th rowspan="1" colspan="1">Additional recovered plasmids</th>
            <th rowspan="1" colspan="1">Missed plasmids</th>
            <th rowspan="1" colspan="1">Incomplete plasmids</th>
            <th rowspan="1" colspan="1">Misassemblies</th>
            <th rowspan="1" colspan="1">Genome fraction</th>
            <th rowspan="1" colspan="1">Indels</th>
            <th rowspan="1" colspan="1">Mismatches</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Flye</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.46 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.39 (0, 6.55)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Raven</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.64 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.78 (0, 7.28)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Unicycler</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.18 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.18 (0, 2.65)</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn4">
          <label>a</label>
          <p>Real 60× subsampled reads from six samples from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) Median values indicated for indels and mismatches. Minimums and maximums in brackets. Indels and mismatches calculated per 100 kb. Results from eight threads.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>Plassembler with Raven was consistently faster than Plassembler with Flye (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>). However, Plassembler with Raven had more fragmented assemblies in the simulated dataset (<xref rid="btad409-T4" ref-type="table">Table 4</xref>), due to worse performance of Raven in recovering draft assemblies of some plasmids compared to Flye (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>) (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
  </sec>
  <sec>
    <title>6 Discussion</title>
    <p>It has previously been shown that subsampling hybrid sequencing reads sets leads to increased plasmid recovery (<xref rid="btad409-B8" ref-type="bibr">De Maio <italic toggle="yes">et al.</italic> 2019</xref>). Plassembler’s removal of chromosomal reads before short-read first assembly has similar benefits in terms of small plasmid recovery, as small plasmid reads constitute a larger proportion of the overall read set.</p>
    <p>Flye and especially Raven assemblies commonly miss small plasmids (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>), emphasizing that a long-read first-assembly approach is inappropriate for recovering small plasmids, as reported in other studies (<xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>Long read first assemblies with Flye (run as a part of Plassembler) in the real read datasets multiplicated many small plasmids (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S6</xref>). Multiplication was also present, though less common, in the simulated datasets (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). As reported previously (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>), this indicates that multiplication in long read only plasmid assemblies may either reflect assembly errors or true plasmid multimerization (<xref rid="btad409-B6" ref-type="bibr">Crozat <italic toggle="yes">et al.</italic> 2014</xref>), but it is difficult to distinguish between the two.</p>
    <sec>
      <title>6.1 Other use cases and features</title>
      <p>Plassembler can be used to recover small plasmids from bacteria with multiple chromosomes, megaplasmids, or chromids. Plassembler will treat all long-read assembled contigs larger than the provided ‘-c’ parameter as chromosomal. As an example, Plassembler v1.1.0 was used to recover plasmids from <italic toggle="yes">Vibrio campellii</italic> DS40M4, has two chromosomes of sizes 3.33 and 1.88 Mb and a 77 353 bp plasmid (<xref rid="btad409-B5" ref-type="bibr">Colston <italic toggle="yes">et al.</italic> 2019</xref>). Illumina and ONT sequencing reads for <italic toggle="yes">V.campellii</italic> were downloaded using fastq-dl (<xref rid="btad409-B22" ref-type="bibr">Petit III and Hall</xref>) <ext-link xlink:href="https://github.com/rpetit3/fastq-dl" ext-link-type="uri">https://github.com/rpetit3/fastq-dl</ext-link>. Plassembler recovered the known 77 353 bp plasmid and an additional 5386 bp replicon (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S9</xref>), which blastn (<xref rid="btad409-B26" ref-type="bibr">Sayers <italic toggle="yes">et al.</italic> 2022</xref>) revealed was Enterobacteria phage phiX174, which is commonly used as a positive control in short-read sequencing runs and likely reflects contamination in this sample.</p>
      <p>Plassembler can also be used as a fast quality control tool to detect differences between long and short read sets even from closely related isolates. From readsets of different isolates from the same species, Plassembler will extract all short- and long-reads that are unmapped to the long-read-only assembly. The hybrid assembly of these reads will then contain sections of chromosomal sequence that are present in the short-read set genome but not the long read set genome. These will be represented as noncircular contigs in the Plassembler output, likely without a PLSDB mash hit. Therefore, if five or more such contigs are assembled, Plassembler will warn the user that their long- and short- read sets may not match. Examples of Plassembler output where read sets from two closely related but distinct <italic toggle="yes">S.aureus</italic> isolates (same sequence type), and also two more distantly related <italic toggle="yes">S.aureus</italic> isolates (different sequence types) can be found in <xref rid="sup1" ref-type="supplementary-material">Supplementary Tables S11 and S12</xref> (<xref rid="btad409-B9" ref-type="bibr">Enright <italic toggle="yes">et al.</italic> 2000</xref>, <xref rid="btad409-B15" ref-type="bibr">Houtak <italic toggle="yes">et al.</italic> 2023</xref>).</p>
      <p>In addition, users with existing plasmid and chromosome assemblies who wish to estimate long and short read plasmid copy numbers and match each plasmid to the PLSDB can use Plassembler. This is enabled using ‘plassembler assembled’, along with specifying the assembled chromosome using the ‘–input_chromosome’ and the plasmids using ‘–input_plasmids’.</p>
      <p>Plassembler can also be used to assemble other small extrachromosomal replicons in hybrid sequencing data, such as bacteriophages (<xref rid="btad409-B28" ref-type="bibr">Shen and Millard 2021</xref>) or phage-plasmids (<xref rid="btad409-B23" ref-type="bibr">Pfeifer <italic toggle="yes">et al.</italic> 2022</xref>), assuming they have not integrated into the chromosome. An example is the 5386bp Enterobacteria phage phiX174 Plassembler recovered from <xref rid="btad409-B5" ref-type="bibr">Colston <italic toggle="yes">et al.</italic> (2019)</xref> mentioned above.</p>
    </sec>
    <sec>
      <title>6.2 Limitations</title>
      <p>Plassembler is nondeterministic between threadcounts, which is caused by long-read assembler nondeterminism (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). This leads to different read sets being recovered in Plassembler’s mapping process, which occasionally produces differing plasmid assemblies. With Flye, nondeterminism also persisted even where the ‘–deterministic’ parameter was used (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S5</xref>).</p>
      <p>Plassembler requires sufficient long-read depth such that Flye or Raven can assemble complete chromosome-sized contigs. Plassembler therefore cannot be used with isolates with extremely low read depth. Unicycler should be used in this scenario.</p>
      <p>The known linear plasmid in <italic toggle="yes">K.variicola</italic> INF345 reported by <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) was incorrectly assembled by both Plassembler and Unicycler in simulated and real read sets, due to a terminal inverted repeat that is characteristic of linear plasmids (<xref rid="btad409-B14" ref-type="bibr">Hawkey <italic toggle="yes">et al.</italic> 2022</xref>) (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). It is likely that linear plasmids are better assembled using a long-read first approach.</p>
      <p>Another possible limitation of Plassembler is with small plasmids that contain a mobile genetic element (MGE) shared with the chromosome. If the long-read assembler fails to assemble the small plasmid, then the Plassembler assembly will be incomplete. This is because reads that map to the MGE on the plasmid will neither be unmapped to the chromosome nor map to plasmid contigs in the Plassembler mapping process. Based on our benchmarking, this is unlikely to be an issue for plasmids larger than 10 kb, as the long read assembler is likely to recover them. Plassember was able to accurately recover the 44 kb plasmid harbouring a 16 kb mobile genetic element (MGE) shared by both the chromosome and plasmid for <italic toggle="yes">K. pneumoniae</italic> CAV 1217 (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
    </sec>
  </sec>
  <sec>
    <title>7 Conclusion</title>
    <p>Plassembler assembles bacterial plasmids from hybrid sequencing datasets faster and more accurately than existing approaches. It recovers more small plasmids that other assemblers miss and can be easily combined with long-read-first chromosomal assembly workflows to generate accurate bacterial genome assemblies.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad409_Supplementary_Data</label>
      <media xlink:href="btad409_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The authors thank Ryan Wick for generously providing initial ideas on approaching plasmid assembly and Jan Gawor for the idea of including ‘plassembler assembled’ functionality. This work was supported with supercomputing resources provided by the Phoenix HPC service at the University of Adelaide.</p>
  </ack>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by a University of Adelaide Barbara Kidman Women’s Fellowship to A.E.S.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad409-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Arredondo-Alonso</surname><given-names>S</given-names></string-name>, <string-name><surname>Gladstone</surname><given-names>RA</given-names></string-name>, <string-name><surname>Pöntinen</surname><given-names>AK</given-names></string-name></person-group><etal>et al</etal> Consistent typing of plasmids with the mge-cluster pipeline. <italic toggle="yes">bioRxiv</italic><year>2022</year>, <pub-id pub-id-type="doi">10.1101/2022.12.16.520696</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad409-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bankevich</surname><given-names>A</given-names></string-name>, <string-name><surname>Nurk</surname><given-names>S</given-names></string-name>, <string-name><surname>Antipov</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>J Comput Biol</source><year>2012</year>;<volume>19</volume>:<fpage>455</fpage>–<lpage>77</lpage>.<pub-id pub-id-type="pmid">22506599</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Barry</surname><given-names>KE</given-names></string-name>, <string-name><surname>Wailan</surname><given-names>AM</given-names></string-name>, <string-name><surname>Sheppard</surname><given-names>AE</given-names></string-name></person-group><etal>et al</etal><article-title>Don’t overlook the little guy: an evaluation of the frequency of small plasmids co-conjugating with larger carbapenemase gene containing plasmids</article-title>. <source>Plasmid</source><year>2019</year>;<volume>103</volume>:<fpage>1</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">30928702</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chen</surname><given-names>S</given-names></string-name>, <string-name><surname>Zhou</surname><given-names>Y</given-names></string-name>, <string-name><surname>Chen</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>fastp: an ultra-fast all-in-one FASTQ preprocessor</article-title>. <source>Bioinformatics</source><year>2018</year>;<volume>34</volume>:<fpage>i884</fpage>–<lpage>90</lpage>.<pub-id pub-id-type="pmid">30423086</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Colston</surname><given-names>SM</given-names></string-name>, <string-name><surname>Hervey</surname><given-names>WJ</given-names></string-name>, <string-name><surname>Horne</surname><given-names>WC</given-names></string-name></person-group><etal>et al</etal><article-title>Complete genome sequence of <italic toggle="yes">Vibrio campbellii</italic> DS40M4</article-title>. <source>Microbiol Resour Announc</source><year>2019</year>;<volume>8</volume>:<fpage>e01187</fpage>-<lpage>18</lpage>.<pub-id pub-id-type="pmid">30701232</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Crozat</surname><given-names>E</given-names></string-name>, <string-name><surname>Fournes</surname><given-names>F</given-names></string-name>, <string-name><surname>Cornet</surname><given-names>F</given-names></string-name></person-group><etal>et al</etal><article-title>Resolution of multimeric forms of circular plasmids and chromosomes</article-title>. <source>Microbiol Spectr</source><year>2014</year>;<volume>2</volume>:<fpage>37</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>De Coster</surname><given-names>W</given-names></string-name>, <string-name><surname>Rademakers</surname><given-names>R.</given-names></string-name></person-group><article-title>NanoPack2: population-scale evaluation of long-read sequencing data</article-title>. <source>Bioinformatics</source><year>2023</year>;<volume>39</volume>:<fpage>btad311</fpage>.<pub-id pub-id-type="pmid">37171891</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>De Maio</surname><given-names>N</given-names></string-name>, <string-name><surname>Shaw</surname><given-names>LP</given-names></string-name>, <string-name><surname>Hubbard</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Comparison of long-read sequencing technologies in the hybrid assembly of complex bacterial genomes</article-title>. <source>Microb Genomics</source><year>2019</year>;<volume>5</volume>:<fpage>e000294</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Enright</surname><given-names>MC</given-names></string-name>, <string-name><surname>Day</surname><given-names>NP</given-names></string-name>, <string-name><surname>Davies</surname><given-names>CE</given-names></string-name></person-group><etal>et al</etal><article-title>Multilocus sequence typing for characterization of methicillin-resistant and methicillin-susceptible clones of <italic toggle="yes">Staphylococcus aureus</italic></article-title>. <source>J Clin Microbiol</source><year>2000</year>;<volume>38</volume>:<fpage>1008</fpage>–<lpage>15</lpage>.<pub-id pub-id-type="pmid">10698988</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Galata</surname><given-names>V</given-names></string-name>, <string-name><surname>Fehlmann</surname><given-names>T</given-names></string-name>, <string-name><surname>Backes</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>PLSDB: a resource of complete bacterial plasmids</article-title>. <source>Nucleic Acids Res</source><year>2019</year>;<volume>47</volume>:<fpage>D195</fpage>–<lpage>202</lpage>.<pub-id pub-id-type="pmid">30380090</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gourlé</surname><given-names>H</given-names></string-name>, <string-name><surname>Karlsson-Lindsjö</surname><given-names>O</given-names></string-name>, <string-name><surname>Hayer</surname><given-names>J</given-names></string-name></person-group><etal>et al</etal><article-title>Simulating Illumina metagenomic data with InSilicoSeq</article-title>. <source>Bioinformatics</source><year>2019</year>;<volume>35</volume>:<fpage>521</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">30016412</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gurevich</surname><given-names>A</given-names></string-name>, <string-name><surname>Saveliev</surname><given-names>V</given-names></string-name>, <string-name><surname>Vyahhi</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>QUAST: quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source><year>2013</year>;<volume>29</volume>:<fpage>1072</fpage>–<lpage>5</lpage>.<pub-id pub-id-type="pmid">23422339</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hall</surname><given-names>MB.</given-names></string-name></person-group><article-title>Rasusa: randomly subsample sequencing reads to a specified coverage</article-title>. <source>JOSS</source><year>2022</year>;<volume>7</volume>:<fpage>3941</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hawkey</surname><given-names>J</given-names></string-name>, <string-name><surname>Cottingham</surname><given-names>H</given-names></string-name>, <string-name><surname>Vyahhi</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Linear plasmids in Klebsiella and other Enterobacteriaceae</article-title>. <source>Microb Genomics</source><year>2022</year>;<volume>8</volume>:<fpage>000807</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B15">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Houtak</surname><given-names>G</given-names></string-name>, <string-name><surname>Bouras</surname><given-names>G</given-names></string-name>, <string-name><surname>Nepal</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal> The intra-host evolutionary landscape and pathoadaptation of persistent <italic toggle="yes">Staphylococcus aureus</italic> in chronic rhinosinusitis. bioRxiv, <pub-id pub-id-type="doi">10.1101/2023.03.28.534496</pub-id>, <year>2023</year>, preprint: not peer reviewed.</mixed-citation>
    </ref>
    <ref id="btad409-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Johnson</surname><given-names>J</given-names></string-name>, <string-name><surname>Soehnlen</surname><given-names>M</given-names></string-name>, <string-name><surname>Blankenship</surname><given-names>HM</given-names></string-name></person-group><etal>et al</etal><article-title>Long read genome assemblers struggle with small plasmids</article-title>. <source>Microb Genomics</source><year>2023</year>;<volume>9</volume>:<fpage>001024</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname><given-names>M</given-names></string-name>, <string-name><surname>Yuan</surname><given-names>J</given-names></string-name>, <string-name><surname>Lin</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>Assembly of long, error-prone reads using repeat graphs</article-title>. <source>Nat Biotechnol</source><year>2019</year>;<volume>37</volume>:<fpage>540</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">30936562</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group><article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>. <source>Bioinformatics</source><year>2018</year>;<volume>34</volume>:<fpage>3094</fpage>–<lpage>100</lpage>.<pub-id pub-id-type="pmid">29750242</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H</given-names></string-name>, <string-name><surname>Handsaker</surname><given-names>B</given-names></string-name>, <string-name><surname>Wysoker</surname><given-names>A</given-names></string-name></person-group>, <collab>1000 Genome Project Data Processing Subgroup</collab><etal>et al</etal><article-title>The sequence alignment/map format and SAMtools</article-title>. <source>Bioinformatics</source><year>2009</year>;<volume>25</volume>:<fpage>2078</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mathers</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Stoesser</surname><given-names>N</given-names></string-name>, <string-name><surname>Chai</surname><given-names>W</given-names></string-name></person-group><etal>et al</etal><article-title>Chromosomal integration of the Klebsiella pneumoniae Carbapenemase Gene, blaKPC, in Klebsiella species is elusive but not rare</article-title>. <source>Antimicrob Agents Chemother</source><year>2017</year>;<volume>61</volume>:<fpage>e01823</fpage>-<lpage>16</lpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B151">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mölder</surname><given-names>F</given-names></string-name>, <string-name><surname>Jablonski</surname><given-names>KP</given-names></string-name>, <string-name><surname>Letcher</surname><given-names>B</given-names></string-name></person-group><etal>et al</etal><article-title>Sustainable data analysis with Snakemake</article-title>. <source>F1000Research</source><year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad409-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Murigneux</surname><given-names>V</given-names></string-name>, <string-name><surname>Roberts</surname><given-names>LW</given-names></string-name>, <string-name><surname>Forde</surname><given-names>BM</given-names></string-name></person-group><etal>et al</etal><article-title>MicroPIPE: validating an end-to-end workflow for high-quality complete bacterial genome construction</article-title>. <source>BMC Genomics</source><year>2021</year>;<volume>22</volume>:<fpage>474</fpage>.<pub-id pub-id-type="pmid">34172000</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B22">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Petit</surname><given-names>RA</given-names><suffix>III</suffix></string-name>, <string-name><surname>Hall</surname><given-names>MB.</given-names></string-name></person-group> fastq-dl: efficiently download FASTQ files from SRA or ENA repositories. <ext-link xlink:href="https://github.com/rpetit3/fastq-dl" ext-link-type="uri">https://github.com/rpetit3/fastq-dl</ext-link>.</mixed-citation>
    </ref>
    <ref id="btad409-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pfeifer</surname><given-names>E</given-names></string-name>, <string-name><surname>Bonnin</surname><given-names>RA</given-names></string-name>, <string-name><surname>Rocha</surname><given-names>EPC</given-names></string-name></person-group><etal>et al</etal><article-title>Phage-plasmids spread antibiotic resistance genes through infection and lysogenic conversion</article-title>. <source>mBio</source><year>2022</year>;<volume>13</volume>:<fpage>e01851</fpage>-<lpage>22</lpage>.<pub-id pub-id-type="pmid">36154183</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Roach</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Pierce-Ward</surname><given-names>NT</given-names></string-name>, <string-name><surname>Suchecki</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Ten simple rules and a template for creating workflows-as-applications</article-title>. <source>PLoS Comput Biol</source><year>2022</year>;<volume>18</volume>:<fpage>e1010705</fpage>.<pub-id pub-id-type="pmid">36520686</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Robertson</surname><given-names>J</given-names></string-name>, <string-name><surname>Nash</surname><given-names>JHE.</given-names></string-name></person-group><article-title>MOB-suite: software tools for clustering, reconstruction and typing of plasmids from draft assemblies</article-title>. <source>Microb Genomics</source><year>2018</year>;<volume>4</volume>:<fpage>e000206</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sayers</surname><given-names>EW</given-names></string-name>, <string-name><surname>Bolton</surname><given-names>EE</given-names></string-name>, <string-name><surname>Brister</surname><given-names>JR</given-names></string-name></person-group><etal>et al</etal><article-title>Database resources of the national center for biotechnology information</article-title>. <source>Nucleic Acids Res</source><year>2022</year>;<volume>50</volume>:<fpage>D20</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">34850941</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schwengers</surname><given-names>O</given-names></string-name>, <string-name><surname>Jelonek</surname><given-names>L</given-names></string-name>, <string-name><surname>Dieckmann</surname><given-names>MA</given-names></string-name></person-group><etal>et al</etal><article-title>Bakta: rapid and standardized annotation of bacterial genomes via alignment-free sequence identification</article-title>. <source>Microb Genomics</source><year>2021</year>;<volume>7</volume>:<fpage>000685</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shen</surname><given-names>A</given-names></string-name>, <string-name><surname>Millard</surname><given-names>A.</given-names></string-name></person-group><article-title>Phage genome annotation: where to begin and end</article-title>. <source>Phage (New Rochelle)</source><year>2021</year>;<volume>2</volume>:<fpage>183</fpage>–<lpage>93</lpage>.<pub-id pub-id-type="pmid">36159890</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Vaser</surname><given-names>R</given-names></string-name>, <string-name><surname>Šikić</surname><given-names>M.</given-names></string-name></person-group><article-title>Time- and memory-efficient genome assembly with Raven</article-title>. <source>Nat Comput Sci</source><year>2021</year>;<volume>1</volume>:<fpage>332</fpage>–<lpage>6</lpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR.</given-names></string-name></person-group><article-title>Badread: simulation of error-prone long reads</article-title>. <source>JOSS</source><year>2019</year>;<volume>4</volume>:<fpage>1316</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Gorrie</surname><given-names>CL</given-names></string-name></person-group><etal>et al</etal><article-title>Unicycler: resolving bacterial genome assemblies from short and long sequencing reads</article-title>. <source>PLoS Comput Biol</source><year>2017</year>;<volume>13</volume>:<fpage>e1005595</fpage>.<pub-id pub-id-type="pmid">28594827</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Holt</surname><given-names>KE.</given-names></string-name></person-group><article-title>Benchmarking of long-read assemblers for prokaryote whole genome sequencing</article-title>. <source>F1000Res</source><year>2019</year>;<volume>8</volume>:<fpage>2138</fpage>.<pub-id pub-id-type="pmid">31984131</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Wyres</surname><given-names>KL</given-names></string-name></person-group><etal>et al</etal><article-title>Recovery of small plasmid sequences via Oxford Nanopore sequencing</article-title>. <source>Microb Genomics</source><year>2021a</year>;<volume>7</volume>:<fpage>000631</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Cerdeira</surname><given-names>LT</given-names></string-name></person-group><etal>et al</etal><article-title>Trycycler: consensus long-read assemblies for bacterial genomes</article-title>. <source>Genome Biol</source><year>2021b</year>;<volume>22</volume>:<fpage>266</fpage>.<pub-id pub-id-type="pmid">34521459</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Holt</surname><given-names>KE</given-names></string-name></person-group><etal>et al</etal><article-title>Assembling the perfect bacterial genome using Oxford Nanopore and Illumina sequencing</article-title>. <source>PLoS Comput Biol</source><year>2023</year>;<volume>19</volume>:<fpage>e1010905</fpage>.<pub-id pub-id-type="pmid">36862631</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B152">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Schultz</surname><given-names>MB</given-names></string-name>, <string-name><surname>Zobel</surname><given-names>J</given-names></string-name></person-group><etal>et al</etal><article-title>Bandage: interactive visualization of de novo genome assemblies</article-title>. <source>Bioinformatics</source><year>2015</year>;<volume>31</volume>:<fpage>3350</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">26099265</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10326302</article-id>
    <article-id pub-id-type="pmid">37369026</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad409</article-id>
    <article-id pub-id-type="publisher-id">btad409</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Plassembler: an automated bacterial plasmid assembly tool</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5885-4186</contrib-id>
        <name>
          <surname>Bouras</surname>
          <given-names>George</given-names>
        </name>
        <aff><institution>Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
        <aff><institution>The Department of Surgery – Otolaryngology Head and Neck Surgery, Central Adelaide Local Health Network</institution>, Adelaide, South Australia 5000, <country country="AU">Australia</country></aff>
        <xref rid="btad409-cor1" ref-type="corresp"/>
        <!--george.bouras@adelaide.edu.au-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sheppard</surname>
          <given-names>Anna E</given-names>
        </name>
        <aff><institution>School of Biological Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-2651-8719</contrib-id>
        <name>
          <surname>Mallawaarachchi</surname>
          <given-names>Vijini</given-names>
        </name>
        <aff><institution>Flinders Accelerator for Microbiome Exploration, College of Science and Engineering, Flinders University</institution>, <addr-line>Bedford Park</addr-line>, Adelaide, South Australia 5042, <country country="AU">Australia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vreugde</surname>
          <given-names>Sarah</given-names>
        </name>
        <aff><institution>Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide</institution>, Adelaide, South Australia 5005, <country country="AU">Australia</country></aff>
        <aff><institution>The Department of Surgery – Otolaryngology Head and Neck Surgery, Central Adelaide Local Health Network</institution>, Adelaide, South Australia 5000, <country country="AU">Australia</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Marschall</surname>
          <given-names>Tobias</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad409-cor1">Corresponding author. Adelaide Medical School, Faculty of Health and Medical Sciences, The University of Adelaide, Adelaide, SA, Australia. E-mail: <email>george.bouras@adelaide.edu.au</email> (G.B.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>7</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-06-27">
      <day>27</day>
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>7</issue>
    <elocation-id>btad409</elocation-id>
    <history>
      <date date-type="received">
        <day>08</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>04</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>16</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>6</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>06</day>
        <month>7</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad409.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>With recent advances in sequencing technologies, it is now possible to obtain near-perfect complete bacterial chromosome assemblies cheaply and efficiently by combining a long-read-first assembly approach with short-read polishing. However, existing methods for assembling bacterial plasmids from long-read-first assemblies often misassemble or even miss bacterial plasmids entirely and accordingly require manual curation. Plassembler was developed to provide a tool that automatically assembles and outputs bacterial plasmids using a hybrid assembly approach. It achieves increased accuracy and computational efficiency compared to the existing gold standard tool Unicycler by removing chromosomal reads from the input read sets using a mapping approach.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>Plassembler is implemented in Python and is installable as a bioconda package using ‘conda install -c bioconda plassembler’. The source code is available on GitHub at <ext-link xlink:href="https://github.com/gbouras13/plassembler" ext-link-type="uri">https://github.com/gbouras13/plassembler</ext-link>. The full benchmarking pipeline can be found at <ext-link xlink:href="https://github.com/gbouras13/plassembler_simulation_benchmarking" ext-link-type="uri">https://github.com/gbouras13/plassembler_simulation_benchmarking</ext-link>, while the benchmarking input FASTQ and output files can be found at <ext-link xlink:href="https://doi.org/10.5281/zenodo.7996690" ext-link-type="uri">https://doi.org/10.5281/zenodo.7996690</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Adelaide Barbara Kidman Women’s Fellowship</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Advances in the accuracy of long-read sequencing have made near perfect bacterial genome assemblies attainable by combining long- and short-read sequencing technologies (<xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>). Until recently, short-read-first hybrid assembly methods were favoured using tools such as Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>), which implements short read assembly using SPAdes (<xref rid="btad409-B2" ref-type="bibr">Bankevich <italic toggle="yes">et al.</italic> 2012</xref>). As long-read sequencing accuracy has continued to improve, the current best practice favours long-read-first assemblies supplemented with short-read polishing using tools such as Trycycler (<xref rid="btad409-B34" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021b</xref>), Dragonflye (<ext-link xlink:href="https://github.com/rpetit3/dragonflye" ext-link-type="uri">https://github.com/rpetit3/dragonflye</ext-link>), or MicroPIPE (<xref rid="btad409-B21" ref-type="bibr">Murigneux <italic toggle="yes">et al.</italic> 2021</xref>).</p>
    <p>A limitation of long-read-first assemblies is that small (&lt;20 kb) plasmids are often missed by long read first assemblies, especially when ligation-based library preparation methods are used (<xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>). This may result in an incomplete picture of a sample’s plasmid mobilization and virulence potential, particularly for those with plasmids carrying antimicrobial resistance genes (<xref rid="btad409-B3" ref-type="bibr">Barry <italic toggle="yes">et al.</italic> 2019</xref>). In addition, long-read first assemblies often miss and misassemble small plasmids by doubling or tripling their length in assemblies (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>), requiring manual intervention and curation. Accordingly, current best practice recommends hybrid short-read first assembly to recover small plasmids (<xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>). However, this method is computationally inefficient, as all input reads are assembled, including the majority that constitute the bacterial chromosome.</p>
    <p>To improve computational efficiency, to increase accuracy, and to provide plasmid-only output that can be integrated with long-read-first pipelines chromosomal assemblies, we created Plassembler as a one-line tool that automatically outputs bacterial plasmid assemblies. Its increase in computational efficiency results from removing all reads that map to a quick draft bacterial chromosome assembly created using Flye (<xref rid="btad409-B17" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2019</xref>) by default or optionally with Raven (<xref rid="btad409-B29" ref-type="bibr">Vaser and Šikić 2021</xref>) before conducting hybrid assembly using Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>). Plassembler then matches each assembled plasmid contig to the PLSDB (<xref rid="btad409-B10" ref-type="bibr">Galata <italic toggle="yes">et al.</italic> 2019</xref>) and outputs plasmid copy-number statistics for both long and short-reads. Plassembler can also be used as a fast quality control tool to check that long and short-reads are derived from the same bacterial isolate, which may be particularly useful for users conducting long-read re-sequencing to complete the genomes of isolates previously sequenced with short reads only.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>The Plassembler workflow is outlined in <xref rid="btad409-F1" ref-type="fig">Fig. 1</xref>.</p>
    <fig position="float" id="btad409-F1">
      <label>Figure 1.</label>
      <caption>
        <p>Plassembler workflow. (A) Plassembler requires paired-end short reads and single-end long reads as input. (B) Long reads are filtered using chopper and short reads are filtered and trimmed using fastp. (C) Long-read-first assembly is conducted with Flye by default or optionally with Raven. (D) All long and short reads are mapped to the long-read-first assembly. All reads that are unmapped and all reads that map to putative plasmid contigs are extracted. (E) These reads are then assembled using Unicycler. (F) Plasmid copy number is estimated for each assembled plasmid contig. (G) Each plasmid contig is matched against the PLSDB using mash.</p>
      </caption>
      <graphic xlink:href="btad409f1" position="float"/>
    </fig>
    <sec>
      <title>2.1 Input</title>
      <p>Plassembler requires hybrid short paired-end and long read single-end FASTQ sequencing reads from the same bacterial isolate, along with a minimum size threshold for classifying chromosomal contigs specified using the ‘-c’ parameter as input (<xref rid="btad409-F1" ref-type="fig">Fig. 1A</xref>). Sufficient long-read sequencing depth is required to assemble chromosomal contigs that are larger than the provided threshold (see Section 2.3).</p>
    </sec>
    <sec>
      <title>2.2 Quality control</title>
      <p>Short-read paired-end FASTQs are filtered and trimmed using fastp (<xref rid="btad409-B4" ref-type="bibr">Chen <italic toggle="yes">et al.</italic> 2018</xref>). Long-read FASTQs are filtered using chopper (<xref rid="btad409-B7" ref-type="bibr">De Coster and Rademakers 2023</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1B</xref>). Plassembler provides the option of filtering the long reads by minimum read length using the ‘-m’ parameter (defaults to 500 bp) and by minimum quality using the ‘-q’ parameter (defaults to a Q-score of 9). Quality control can be skipped using the ‘–skip_qc’ parameter.</p>
    </sec>
    <sec>
      <title>2.3 Long-read-only assembly</title>
      <p>By default, Plassembler uses Flye (<xref rid="btad409-B17" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2019</xref>) to conduct a long-read-only assembly of the filtered long reads (<xref rid="btad409-F1" ref-type="fig">Fig. 1C</xref>). Flye was chosen as the default long-read assembler due to its high chromosome and plasmid recovery, accuracy, and fast runtime (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>). If the resulting assembly has at least one contig that is longer than the provided ‘-c’ chromosome length, then all such contigs are denoted as chromosomal and Plassembler continues. Otherwise, Plassembler will exit, asking the user to check the ‘-c’ parameter value input or to increase long-read sequencing depth to ensure a complete chromosome is assembled. If there are additional contigs assembled that are smaller than the provided ‘-c’ chromosome length, Plassembler denotes these as putative plasmid contigs. The ‘-c’ parameter defaults to 1 megabase, allowing for some assembly fragmentation while retaining even large plasmids.</p>
      <p>Alternatively, the long read assembler Raven (<xref rid="btad409-B29" ref-type="bibr">Vaser and Šikić 2021</xref>) can be instead of Flye using the ‘–use_raven’ parameter, which will likely decrease run-time at the potential cost of accuracy (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>). By default, Plassembler expects Oxford Nanopore Technologies long-reads as input, but can also be used with Pacific Biosciences long-reads using the ‘–pacbio_model’ parameter.</p>
      <table-wrap position="float" id="btad409-T1">
        <label>Table 1.</label>
        <caption>
          <p>Plassembler output files.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Output files</th>
              <th rowspan="1" colspan="1">Description of file contents</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">_plasmids.fasta</td>
              <td rowspan="1" colspan="1">Final plasmid assembly in FASTA format</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">_plasmids.gfa</td>
              <td rowspan="1" colspan="1">Final plasmid assembly graph in GFA format.</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">_summary.tsv</td>
              <td rowspan="1" colspan="1">Summary file with plasmid length, circularity, estimated copy number statistics for long and short reads (Mean, Standard Deviation, First and Third Quartiles), a column indicating whether the contig had a match in the PLSDB below a mash distance threshold of 0.1 and if so, all available PLSDB information about the top hit.</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">flye_output or raven_output</td>
              <td rowspan="1" colspan="1">Directory holding the output from Flye (default) or Raven (if ‘—use_raven’ is specified).</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">unicycler_output</td>
              <td rowspan="1" colspan="1">Directory holding the output from Unicycler</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <table-wrap position="float" id="btad409-T2">
        <label>Table 2.</label>
        <caption>
          <p>Benchmarked time and memory usage.<sup>a</sup></p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Threads</th>
              <th rowspan="1" colspan="1">Program</th>
              <th rowspan="1" colspan="1">Median wall clock time</th>
              <th rowspan="1" colspan="1">Min wall clock time</th>
              <th rowspan="1" colspan="1">Max wall clock time</th>
              <th rowspan="1" colspan="1">Median max memory</th>
              <th rowspan="1" colspan="1">Min max memory</th>
              <th rowspan="1" colspan="1">Max max memory</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">7012</td>
              <td rowspan="1" colspan="1">1926</td>
              <td rowspan="1" colspan="1">28 103</td>
              <td rowspan="1" colspan="1">3039</td>
              <td rowspan="1" colspan="1">2442</td>
              <td rowspan="1" colspan="1">5275</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">3893</td>
              <td rowspan="1" colspan="1">815</td>
              <td rowspan="1" colspan="1">22 106</td>
              <td rowspan="1" colspan="1">1764</td>
              <td rowspan="1" colspan="1">1307</td>
              <td rowspan="1" colspan="1">2464</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">32 619</td>
              <td rowspan="1" colspan="1">13 183</td>
              <td rowspan="1" colspan="1">66 880</td>
              <td rowspan="1" colspan="1">2804</td>
              <td rowspan="1" colspan="1">1404</td>
              <td rowspan="1" colspan="1">3784</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1563</td>
              <td rowspan="1" colspan="1">531</td>
              <td rowspan="1" colspan="1">4852</td>
              <td rowspan="1" colspan="1">4842</td>
              <td rowspan="1" colspan="1">2274</td>
              <td rowspan="1" colspan="1">7712</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">700</td>
              <td rowspan="1" colspan="1">132</td>
              <td rowspan="1" colspan="1">3051</td>
              <td rowspan="1" colspan="1">2579</td>
              <td rowspan="1" colspan="1">1587</td>
              <td rowspan="1" colspan="1">7891</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">4411</td>
              <td rowspan="1" colspan="1">2139</td>
              <td rowspan="1" colspan="1">10 003</td>
              <td rowspan="1" colspan="1">6568</td>
              <td rowspan="1" colspan="1">5610</td>
              <td rowspan="1" colspan="1">6826</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1019</td>
              <td rowspan="1" colspan="1">497</td>
              <td rowspan="1" colspan="1">2675</td>
              <td rowspan="1" colspan="1">5892</td>
              <td rowspan="1" colspan="1">3832</td>
              <td rowspan="1" colspan="1">15 086</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">430</td>
              <td rowspan="1" colspan="1">114</td>
              <td rowspan="1" colspan="1">1749</td>
              <td rowspan="1" colspan="1">3517</td>
              <td rowspan="1" colspan="1">2360</td>
              <td rowspan="1" colspan="1">15 195</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">2554</td>
              <td rowspan="1" colspan="1">1347</td>
              <td rowspan="1" colspan="1">5098</td>
              <td rowspan="1" colspan="1">12 967</td>
              <td rowspan="1" colspan="1">6509</td>
              <td rowspan="1" colspan="1">13 549</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <label>a</label>
            <p>60× coverage simulated reads from 20 samples. Wall clock time is expressed in seconds (s) and memory is expressed in megabytes (MB).</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <table-wrap position="float" id="btad409-T3">
        <label>Table 3.</label>
        <caption>
          <p>Benchmarked time and memory usage.<sup>a</sup></p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Threads</th>
              <th rowspan="1" colspan="1">Program</th>
              <th rowspan="1" colspan="1">Median wall clock time</th>
              <th rowspan="1" colspan="1">Min wall clock time</th>
              <th rowspan="1" colspan="1">Max wall clock time</th>
              <th rowspan="1" colspan="1">Median max memory</th>
              <th rowspan="1" colspan="1">Min max memory</th>
              <th rowspan="1" colspan="1">Max max memory</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">7063</td>
              <td rowspan="1" colspan="1">4559</td>
              <td rowspan="1" colspan="1">7865</td>
              <td rowspan="1" colspan="1">9921</td>
              <td rowspan="1" colspan="1">9116</td>
              <td rowspan="1" colspan="1">10 024</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">5918</td>
              <td rowspan="1" colspan="1">3430</td>
              <td rowspan="1" colspan="1">7028</td>
              <td rowspan="1" colspan="1">2623</td>
              <td rowspan="1" colspan="1">2214</td>
              <td rowspan="1" colspan="1">3039</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">48 325</td>
              <td rowspan="1" colspan="1">37 282</td>
              <td rowspan="1" colspan="1">58 823</td>
              <td rowspan="1" colspan="1">4671</td>
              <td rowspan="1" colspan="1">3583</td>
              <td rowspan="1" colspan="1">5832</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">1493</td>
              <td rowspan="1" colspan="1">1250</td>
              <td rowspan="1" colspan="1">1688</td>
              <td rowspan="1" colspan="1">10 172</td>
              <td rowspan="1" colspan="1">9710</td>
              <td rowspan="1" colspan="1">10 897</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">1126</td>
              <td rowspan="1" colspan="1">709</td>
              <td rowspan="1" colspan="1">1356</td>
              <td rowspan="1" colspan="1">6626</td>
              <td rowspan="1" colspan="1">2872</td>
              <td rowspan="1" colspan="1">8374</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">7500</td>
              <td rowspan="1" colspan="1">4509</td>
              <td rowspan="1" colspan="1">9659</td>
              <td rowspan="1" colspan="1">7535</td>
              <td rowspan="1" colspan="1">7003</td>
              <td rowspan="1" colspan="1">8128</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Flye</td>
              <td rowspan="1" colspan="1">975</td>
              <td rowspan="1" colspan="1">779</td>
              <td rowspan="1" colspan="1">1163</td>
              <td rowspan="1" colspan="1">11 803</td>
              <td rowspan="1" colspan="1">10 344</td>
              <td rowspan="1" colspan="1">13 467</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Plassembler Raven</td>
              <td rowspan="1" colspan="1">699</td>
              <td rowspan="1" colspan="1">397</td>
              <td rowspan="1" colspan="1">840</td>
              <td rowspan="1" colspan="1">6574</td>
              <td rowspan="1" colspan="1">3343</td>
              <td rowspan="1" colspan="1">14 784</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">16</td>
              <td rowspan="1" colspan="1">Unicycler</td>
              <td rowspan="1" colspan="1">3876</td>
              <td rowspan="1" colspan="1">2944</td>
              <td rowspan="1" colspan="1">5036</td>
              <td rowspan="1" colspan="1">14 041</td>
              <td rowspan="1" colspan="1">13 647</td>
              <td rowspan="1" colspan="1">14 062</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn2">
            <label>a</label>
            <p>60× coverage real reads from six samples from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>). Wall clock time is expressed in seconds (s) and memory is expressed in megabytes (MB).</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec>
      <title>2.4 Read mapping</title>
      <p>Plassembler then maps all long- and short-reads to the long-read-only assembly using Minimap2 (<xref rid="btad409-B18" ref-type="bibr">Li 2018</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1D</xref>). All unmapped reads and all reads that map to putative plasmid contigs are then extracted using SAMtools (<xref rid="btad409-B19" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>) and combined.</p>
    </sec>
    <sec>
      <title>2.5 Hybrid assembly and depth estimation</title>
      <p>Hybrid assembly is then conducted with Unicycler (<xref rid="btad409-B31" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2017</xref>) to generate final plasmid contigs and assembly graphs (<xref rid="btad409-F1" ref-type="fig">Fig. 1E</xref>). Long- and short-read plasmid copy numbers and associated statistics are estimated by mapping all reads to the chromosome and final plasmid assemblies using Minimap2 (<xref rid="btad409-B18" ref-type="bibr">Li 2018</xref>) and the SAMtools depth function (<xref rid="btad409-B19" ref-type="bibr">Li <italic toggle="yes">et al.</italic> 2009</xref>, <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>) (<xref rid="btad409-F1" ref-type="fig">Fig. 1F</xref>).</p>
    </sec>
    <sec>
      <title>2.6 PLSDB mash distance calculation</title>
      <p>Finally, each assembled plasmid contig is compared to the 34 513 plasmids contained in PLSDB (<xref rid="btad409-B10" ref-type="bibr">Galata <italic toggle="yes">et al.</italic> 2019</xref>) using mash (<xref rid="btad409-F1" ref-type="fig">Fig. 1G</xref>). All matches below the maximum threshold of a mash distance of 0.1 are considered. For each contig, the PLSDB match with the lowest mash distance is kept as the top hit. Contigs that do not have a PLSDB match are denoted as such and are less likely to be true plasmid assemblies, particularly if they are not circular.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Output</title>
    <p>Plassembler’s output files are outlined in <xref rid="btad409-T1" ref-type="table">Table 1</xref>. The primary outputs of Plassembler are a _plasmids.fasta file and a _plasmids.gfa file. The _plasmids.fasta file is taken from the output of Unicycler and contains the final plasmid assemblies in FASTA format. This is suitable for downstream analysis using tools such as MOB-suite (<xref rid="btad409-B25" ref-type="bibr">Robertson and Nash 2018</xref>) and mge-cluster (<xref rid="btad409-B1" ref-type="bibr">Arredondo-Alonso <italic toggle="yes">et al.</italic> 2022</xref>). In addition, a ‘_plasmids.gfa’ file is generated containing the Unicycler assembly graphs that can be visualized using tools like Bandage (<xref rid="btad409-B152" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2015</xref>). In addition, plassembler provides a ‘_summary.tsv’ file. This file includes each plasmid’s length, estimated mean, first quartile, third quartile and standard deviation of each plasmid’s short-read and long-read depths, a column indicating whether each plasmid contig is circular and a column indicating whether the contig has a match in PLSDB under the maximum mash distance threshold of 0.1. If there is a hit, the ‘_summary.tsv’ file will also contain all available PLSDB information about the top hit.</p>
  </sec>
  <sec>
    <title>4 Benchmarking</title>
    <p>Benchmarking, implemented using a reproducible Snakemake pipeline (<xref rid="btad409-B151" ref-type="bibr">Mölder <italic toggle="yes">et al.</italic> 2021</xref>) powered by Snaketool (<xref rid="btad409-B24" ref-type="bibr">Roach <italic toggle="yes">et al.</italic> 2022</xref>), was conducted on an Intel<sup>®</sup> Core™ i7-10700K CPU @ 3.80 GHz on a machine running Ubuntu 20.04.6 LTS. To test the performance of Plassembler, we used simulated reads from 20 isolate assemblies from four different datasets. These consisted of:</p>
    <list list-type="order">
      <list-item>
        <p>six isolate assemblies and read sets from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) (available at <ext-link xlink:href="https://bridges.monash.edu/articles/dataset/Small_plasmid_Nanopore_data/13543754" ext-link-type="uri">https://bridges.monash.edu/articles/dataset/Small_plasmid_Nanopore_data/13543754</ext-link>) assembled with Trycycler and manually curated in that study.</p>
      </list-item>
      <list-item>
        <p>one <italic toggle="yes">Staphylococcus aureus</italic> isolate assembly (C222 SAMN32360844 in BioProject PRJNA914892 in the NCBI BioProject database, specifically SRR22859710 for ONT long reads and SRR22859843 for short reads) previously sequenced by us as an example of a bacterial isolate with one small plasmid (<xref rid="btad409-B15" ref-type="bibr">Houtak <italic toggle="yes">et al.</italic> 2023</xref>).</p>
      </list-item>
      <list-item>
        <p>twelve <italic toggle="yes">Enterobacteriaceae</italic> isolates with from <xref rid="btad409-B8" ref-type="bibr">De Maio <italic toggle="yes">et al.</italic> (2019)</xref> that contained at least one plasmid with accessible sample numbers in the European Nucleotide Archive. We used the subsampled Oxford Nanopore Technologies Unicycler assemblies as this was the best performing method in that study.</p>
      </list-item>
      <list-item>
        <p>one <italic toggle="yes">Klebsiella pneumoniae</italic> strain CAV1217 assembly as an example of a challenging isolate testing the ability of Plassembler to process multi-mapped reads. It has a 16 kb mobile genetic element present in both the chromosome and on a 44 kb plasmid (<xref rid="btad409-B20" ref-type="bibr">Mathers <italic toggle="yes">et al.</italic> 2017</xref>).</p>
      </list-item>
    </list>
    <p>We used Badread v0.3.0 (<xref rid="btad409-B30" ref-type="bibr">Wick 2019</xref>) and InSilicoSeq v1.5.4 (<xref rid="btad409-B11" ref-type="bibr">Gourlé <italic toggle="yes">et al.</italic> 2019</xref>) to generate simulated readsets from all ground truth assemblies. Long reads were simulated with the Nanopore 2020 error model, while short reads were simulated with the ‘novaseq’ error model. Both long and short read sets were simulated to a genome coverage of 60×.</p>
    <p>In addition to the simulated readsets, we tested the performance of Plassembler on real reads from the six isolates from (<xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021a</xref>). Because these genomes were assembled using a highly accurate and independent approach to that used by Plassembler [Trycycler (<xref rid="btad409-B34" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2021b</xref>) with manual curation], we considered that these assemblies could also be used as ground truth for testing the accuracy of Plassembler on the corresponding real readsets. Wick, Judd, Wyers, <italic toggle="yes">et al.</italic> have made all the details of their methodology available at <ext-link xlink:href="https://github.com/rrwick/Small-plasmid-Nanopore/blob/main/method.md" ext-link-type="uri">https://github.com/rrwick/Small-plasmid-Nanopore/blob/main/method.md</ext-link>. These isolates were sequenced in two technical replicates with two long-read sequencing methods. For our study, reads for both technical replicates and both sequencing chemistries were combined and subsampled to a depth of 60× using rasusa v0.7.0 (<xref rid="btad409-B13" ref-type="bibr">Hall 2022</xref>).</p>
    <p>To assess computational performance, Plassembler v1.1.0 (with Unicycler v0.5.0, SPAdes v3.15.5, Flye v2.9.2 and Raven v1.8.1) using both Flye and Raven was compared against Unicycler v0.5.0 (with SPAdes v3.15.5) in terms of speed and accuracy, using 1, 8, and 16 threads. To assess accuracy, Plassembler assemblies for the 20 simulated read sets (with a verifiable ground truth) and the six <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) real read sets (with an independent manually curated ground truth), were compared to the ground truth assemblies using QUAST to assess genome fraction, mismatches per 100 kb and indels per 100 kb (<xref rid="btad409-B12" ref-type="bibr">Gurevich <italic toggle="yes">et al.</italic> 2013</xref>).</p>
  </sec>
  <sec>
    <title>5 Results</title>
    <p>Plassembler was faster than Unicycler for every sample for the 20 simulated isolates and six real read sets samples for all thread counts, yielding a 3- to 10-fold speed improvement (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>) depending on the sample, thread count, and long-read assembler used. The decrease in wall-clock runtime was largest single-threaded. Plassembler and Unicycler both had comparable maximum memory usage.</p>
    <p>Plassembler was more accurate than Unicycler overall, recovering a higher average QUAST genome fraction than Unicycler against the simulated ground truth (<xref rid="btad409-T4" ref-type="table">Table 4</xref>). For the simulated reads, Plassembler missed fewer plasmids (one versus seven for Unicycler), but had a higher number of fragmented assemblies (four for Plassembler with Flye, five for Plassembler with Raven versus one for Unicycler). Unicycler also had one misassembly, while Plassembler did not have any. Rates of indels and mismatches were comparable and low for all three assembly methods.</p>
    <table-wrap position="float" id="btad409-T4">
      <label>Table 4.</label>
      <caption>
        <p>Benchmarked accuracy.<sup>a</sup></p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Program</th>
            <th rowspan="1" colspan="1">Complete plasmids</th>
            <th rowspan="1" colspan="1">Missed plasmids</th>
            <th rowspan="1" colspan="1">Incomplete plasmids</th>
            <th rowspan="1" colspan="1">Misassemblies</th>
            <th rowspan="1" colspan="1">Genome fraction</th>
            <th rowspan="1" colspan="1">Indels</th>
            <th rowspan="1" colspan="1">Mismatches</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Flye</td>
            <td rowspan="1" colspan="1">69</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">4</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">99.66 (mean), 99.94 (median), (97.68, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.37)</td>
            <td rowspan="1" colspan="1">0.91 (0, 11.12)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Raven</td>
            <td rowspan="1" colspan="1">68</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">5</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">99.47 (mean), 99.96 (median), (96.59, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.41)</td>
            <td rowspan="1" colspan="1">0.91 (0, 11.12)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Unicycler</td>
            <td rowspan="1" colspan="1">65</td>
            <td rowspan="1" colspan="1">7</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">93.81 (mean), 99.88 (median), (0, 100)</td>
            <td rowspan="1" colspan="1">0 (0, 1.54)</td>
            <td rowspan="1" colspan="1">0.88 (0, 7.28)</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn3">
          <label>a</label>
          <p>60× coverage simulated reads from 20 samples. Median values indicated for Indels and Mismatches. Minimums and maximums in brackets. Indels and mismatches calculated per 100 kb. Results from eight threads.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>The difference in genome fraction is explained by Plassembler’s ability to recover small plasmids under 10 kb. In the simulated read sets Plassembler was able to recover small plasmids in <italic toggle="yes">Staphylococcus aureus</italic> C222 (2473 bp), <italic toggle="yes">Citrobacter koseri</italic> MINF 9D (9294 bp), <italic toggle="yes">Klebsiella oxytoca</italic> MSB1 2C (4574 bp), <italic toggle="yes">Klebsiella variicola</italic> INF345 (5783 bp), <italic toggle="yes">Enterobacter cloacae</italic> RBHSTW-00059 (2495 bp), and <italic toggle="yes">Klebsiella pneumonaie</italic> RBHSTW-00128 (3980 bp) that were missed by Unicycler (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
    <p>For the real read sets, Plassembler, and Unicycler had identical genome fractions and low indel and mismatch rates (<xref rid="btad409-T5" ref-type="table">Table 5</xref>). Similar to the simulated dataset, Plassembler recovered two additional small plasmids missed by Unicycler (<xref rid="btad409-T5" ref-type="table">Table 5</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S6</xref>) of lengths 1934 bp (<italic toggle="yes">K.variicola</italic> INF345) and 10 697 bp (<italic toggle="yes">K.oxytoca</italic> MSB1 2C). The 10 697 bp plasmid recovered in <italic toggle="yes">K.oxytoca</italic> MSB1 2C was not recovered using the long-read first assembly method by <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>). Annotation with Bakta v1.7.0 (<xref rid="btad409-B27" ref-type="bibr">Schwengers <italic toggle="yes">et al.</italic> 2021</xref>) revealed that this plasmid contains a Type III toxin-antitoxin system and other plasmid replication genes (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S10</xref>).</p>
    <table-wrap position="float" id="btad409-T5">
      <label>Table 5.</label>
      <caption>
        <p>Benchmarked accuracy.<sup>a</sup></p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="char" char="." span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1">Program</th>
            <th rowspan="1" colspan="1">Complete plasmids</th>
            <th rowspan="1" colspan="1">Additional recovered plasmids</th>
            <th rowspan="1" colspan="1">Missed plasmids</th>
            <th rowspan="1" colspan="1">Incomplete plasmids</th>
            <th rowspan="1" colspan="1">Misassemblies</th>
            <th rowspan="1" colspan="1">Genome fraction</th>
            <th rowspan="1" colspan="1">Indels</th>
            <th rowspan="1" colspan="1">Mismatches</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Flye</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.46 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.39 (0, 6.55)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Plassembler Raven</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.64 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.78 (0, 7.28)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Unicycler</td>
            <td rowspan="1" colspan="1">20</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">2</td>
            <td rowspan="1" colspan="1">1</td>
            <td rowspan="1" colspan="1">0</td>
            <td rowspan="1" colspan="1">97.02 (mean), 100 (median), (82.14, 100)</td>
            <td rowspan="1" colspan="1">0.18 (0, 1.67)</td>
            <td rowspan="1" colspan="1">0.18 (0, 2.65)</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn4">
          <label>a</label>
          <p>Real 60× subsampled reads from six samples from <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) Median values indicated for indels and mismatches. Minimums and maximums in brackets. Indels and mismatches calculated per 100 kb. Results from eight threads.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>Plassembler with Raven was consistently faster than Plassembler with Flye (<xref rid="btad409-T2" ref-type="table">Tables 2</xref> and <xref rid="btad409-T3" ref-type="table">3</xref>). However, Plassembler with Raven had more fragmented assemblies in the simulated dataset (<xref rid="btad409-T4" ref-type="table">Table 4</xref>), due to worse performance of Raven in recovering draft assemblies of some plasmids compared to Flye (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>) (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
  </sec>
  <sec>
    <title>6 Discussion</title>
    <p>It has previously been shown that subsampling hybrid sequencing reads sets leads to increased plasmid recovery (<xref rid="btad409-B8" ref-type="bibr">De Maio <italic toggle="yes">et al.</italic> 2019</xref>). Plassembler’s removal of chromosomal reads before short-read first assembly has similar benefits in terms of small plasmid recovery, as small plasmid reads constitute a larger proportion of the overall read set.</p>
    <p>Flye and especially Raven assemblies commonly miss small plasmids (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>), emphasizing that a long-read first-assembly approach is inappropriate for recovering small plasmids, as reported in other studies (<xref rid="btad409-B35" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> 2023</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>Long read first assemblies with Flye (run as a part of Plassembler) in the real read datasets multiplicated many small plasmids (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S6</xref>). Multiplication was also present, though less common, in the simulated datasets (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). As reported previously (<xref rid="btad409-B32" ref-type="bibr">Wick and Holt 2019</xref>, <xref rid="btad409-B16" ref-type="bibr">Johnson <italic toggle="yes">et al.</italic> 2023</xref>), this indicates that multiplication in long read only plasmid assemblies may either reflect assembly errors or true plasmid multimerization (<xref rid="btad409-B6" ref-type="bibr">Crozat <italic toggle="yes">et al.</italic> 2014</xref>), but it is difficult to distinguish between the two.</p>
    <sec>
      <title>6.1 Other use cases and features</title>
      <p>Plassembler can be used to recover small plasmids from bacteria with multiple chromosomes, megaplasmids, or chromids. Plassembler will treat all long-read assembled contigs larger than the provided ‘-c’ parameter as chromosomal. As an example, Plassembler v1.1.0 was used to recover plasmids from <italic toggle="yes">Vibrio campellii</italic> DS40M4, has two chromosomes of sizes 3.33 and 1.88 Mb and a 77 353 bp plasmid (<xref rid="btad409-B5" ref-type="bibr">Colston <italic toggle="yes">et al.</italic> 2019</xref>). Illumina and ONT sequencing reads for <italic toggle="yes">V.campellii</italic> were downloaded using fastq-dl (<xref rid="btad409-B22" ref-type="bibr">Petit III and Hall</xref>) <ext-link xlink:href="https://github.com/rpetit3/fastq-dl" ext-link-type="uri">https://github.com/rpetit3/fastq-dl</ext-link>. Plassembler recovered the known 77 353 bp plasmid and an additional 5386 bp replicon (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S9</xref>), which blastn (<xref rid="btad409-B26" ref-type="bibr">Sayers <italic toggle="yes">et al.</italic> 2022</xref>) revealed was Enterobacteria phage phiX174, which is commonly used as a positive control in short-read sequencing runs and likely reflects contamination in this sample.</p>
      <p>Plassembler can also be used as a fast quality control tool to detect differences between long and short read sets even from closely related isolates. From readsets of different isolates from the same species, Plassembler will extract all short- and long-reads that are unmapped to the long-read-only assembly. The hybrid assembly of these reads will then contain sections of chromosomal sequence that are present in the short-read set genome but not the long read set genome. These will be represented as noncircular contigs in the Plassembler output, likely without a PLSDB mash hit. Therefore, if five or more such contigs are assembled, Plassembler will warn the user that their long- and short- read sets may not match. Examples of Plassembler output where read sets from two closely related but distinct <italic toggle="yes">S.aureus</italic> isolates (same sequence type), and also two more distantly related <italic toggle="yes">S.aureus</italic> isolates (different sequence types) can be found in <xref rid="sup1" ref-type="supplementary-material">Supplementary Tables S11 and S12</xref> (<xref rid="btad409-B9" ref-type="bibr">Enright <italic toggle="yes">et al.</italic> 2000</xref>, <xref rid="btad409-B15" ref-type="bibr">Houtak <italic toggle="yes">et al.</italic> 2023</xref>).</p>
      <p>In addition, users with existing plasmid and chromosome assemblies who wish to estimate long and short read plasmid copy numbers and match each plasmid to the PLSDB can use Plassembler. This is enabled using ‘plassembler assembled’, along with specifying the assembled chromosome using the ‘–input_chromosome’ and the plasmids using ‘–input_plasmids’.</p>
      <p>Plassembler can also be used to assemble other small extrachromosomal replicons in hybrid sequencing data, such as bacteriophages (<xref rid="btad409-B28" ref-type="bibr">Shen and Millard 2021</xref>) or phage-plasmids (<xref rid="btad409-B23" ref-type="bibr">Pfeifer <italic toggle="yes">et al.</italic> 2022</xref>), assuming they have not integrated into the chromosome. An example is the 5386bp Enterobacteria phage phiX174 Plassembler recovered from <xref rid="btad409-B5" ref-type="bibr">Colston <italic toggle="yes">et al.</italic> (2019)</xref> mentioned above.</p>
    </sec>
    <sec>
      <title>6.2 Limitations</title>
      <p>Plassembler is nondeterministic between threadcounts, which is caused by long-read assembler nondeterminism (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). This leads to different read sets being recovered in Plassembler’s mapping process, which occasionally produces differing plasmid assemblies. With Flye, nondeterminism also persisted even where the ‘–deterministic’ parameter was used (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S5</xref>).</p>
      <p>Plassembler requires sufficient long-read depth such that Flye or Raven can assemble complete chromosome-sized contigs. Plassembler therefore cannot be used with isolates with extremely low read depth. Unicycler should be used in this scenario.</p>
      <p>The known linear plasmid in <italic toggle="yes">K.variicola</italic> INF345 reported by <xref rid="btad409-B33" ref-type="bibr">Wick <italic toggle="yes">et al.</italic> (2021a</xref>) was incorrectly assembled by both Plassembler and Unicycler in simulated and real read sets, due to a terminal inverted repeat that is characteristic of linear plasmids (<xref rid="btad409-B14" ref-type="bibr">Hawkey <italic toggle="yes">et al.</italic> 2022</xref>) (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). It is likely that linear plasmids are better assembled using a long-read first approach.</p>
      <p>Another possible limitation of Plassembler is with small plasmids that contain a mobile genetic element (MGE) shared with the chromosome. If the long-read assembler fails to assemble the small plasmid, then the Plassembler assembly will be incomplete. This is because reads that map to the MGE on the plasmid will neither be unmapped to the chromosome nor map to plasmid contigs in the Plassembler mapping process. Based on our benchmarking, this is unlikely to be an issue for plasmids larger than 10 kb, as the long read assembler is likely to recover them. Plassember was able to accurately recover the 44 kb plasmid harbouring a 16 kb mobile genetic element (MGE) shared by both the chromosome and plasmid for <italic toggle="yes">K. pneumoniae</italic> CAV 1217 (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>).</p>
    </sec>
  </sec>
  <sec>
    <title>7 Conclusion</title>
    <p>Plassembler assembles bacterial plasmids from hybrid sequencing datasets faster and more accurately than existing approaches. It recovers more small plasmids that other assemblers miss and can be easily combined with long-read-first chromosomal assembly workflows to generate accurate bacterial genome assemblies.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad409_Supplementary_Data</label>
      <media xlink:href="btad409_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The authors thank Ryan Wick for generously providing initial ideas on approaching plasmid assembly and Jan Gawor for the idea of including ‘plassembler assembled’ functionality. This work was supported with supercomputing resources provided by the Phoenix HPC service at the University of Adelaide.</p>
  </ack>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by a University of Adelaide Barbara Kidman Women’s Fellowship to A.E.S.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad409-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Arredondo-Alonso</surname><given-names>S</given-names></string-name>, <string-name><surname>Gladstone</surname><given-names>RA</given-names></string-name>, <string-name><surname>Pöntinen</surname><given-names>AK</given-names></string-name></person-group><etal>et al</etal> Consistent typing of plasmids with the mge-cluster pipeline. <italic toggle="yes">bioRxiv</italic><year>2022</year>, <pub-id pub-id-type="doi">10.1101/2022.12.16.520696</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad409-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bankevich</surname><given-names>A</given-names></string-name>, <string-name><surname>Nurk</surname><given-names>S</given-names></string-name>, <string-name><surname>Antipov</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>J Comput Biol</source><year>2012</year>;<volume>19</volume>:<fpage>455</fpage>–<lpage>77</lpage>.<pub-id pub-id-type="pmid">22506599</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Barry</surname><given-names>KE</given-names></string-name>, <string-name><surname>Wailan</surname><given-names>AM</given-names></string-name>, <string-name><surname>Sheppard</surname><given-names>AE</given-names></string-name></person-group><etal>et al</etal><article-title>Don’t overlook the little guy: an evaluation of the frequency of small plasmids co-conjugating with larger carbapenemase gene containing plasmids</article-title>. <source>Plasmid</source><year>2019</year>;<volume>103</volume>:<fpage>1</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">30928702</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chen</surname><given-names>S</given-names></string-name>, <string-name><surname>Zhou</surname><given-names>Y</given-names></string-name>, <string-name><surname>Chen</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>fastp: an ultra-fast all-in-one FASTQ preprocessor</article-title>. <source>Bioinformatics</source><year>2018</year>;<volume>34</volume>:<fpage>i884</fpage>–<lpage>90</lpage>.<pub-id pub-id-type="pmid">30423086</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Colston</surname><given-names>SM</given-names></string-name>, <string-name><surname>Hervey</surname><given-names>WJ</given-names></string-name>, <string-name><surname>Horne</surname><given-names>WC</given-names></string-name></person-group><etal>et al</etal><article-title>Complete genome sequence of <italic toggle="yes">Vibrio campbellii</italic> DS40M4</article-title>. <source>Microbiol Resour Announc</source><year>2019</year>;<volume>8</volume>:<fpage>e01187</fpage>-<lpage>18</lpage>.<pub-id pub-id-type="pmid">30701232</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Crozat</surname><given-names>E</given-names></string-name>, <string-name><surname>Fournes</surname><given-names>F</given-names></string-name>, <string-name><surname>Cornet</surname><given-names>F</given-names></string-name></person-group><etal>et al</etal><article-title>Resolution of multimeric forms of circular plasmids and chromosomes</article-title>. <source>Microbiol Spectr</source><year>2014</year>;<volume>2</volume>:<fpage>37</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>De Coster</surname><given-names>W</given-names></string-name>, <string-name><surname>Rademakers</surname><given-names>R.</given-names></string-name></person-group><article-title>NanoPack2: population-scale evaluation of long-read sequencing data</article-title>. <source>Bioinformatics</source><year>2023</year>;<volume>39</volume>:<fpage>btad311</fpage>.<pub-id pub-id-type="pmid">37171891</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>De Maio</surname><given-names>N</given-names></string-name>, <string-name><surname>Shaw</surname><given-names>LP</given-names></string-name>, <string-name><surname>Hubbard</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Comparison of long-read sequencing technologies in the hybrid assembly of complex bacterial genomes</article-title>. <source>Microb Genomics</source><year>2019</year>;<volume>5</volume>:<fpage>e000294</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Enright</surname><given-names>MC</given-names></string-name>, <string-name><surname>Day</surname><given-names>NP</given-names></string-name>, <string-name><surname>Davies</surname><given-names>CE</given-names></string-name></person-group><etal>et al</etal><article-title>Multilocus sequence typing for characterization of methicillin-resistant and methicillin-susceptible clones of <italic toggle="yes">Staphylococcus aureus</italic></article-title>. <source>J Clin Microbiol</source><year>2000</year>;<volume>38</volume>:<fpage>1008</fpage>–<lpage>15</lpage>.<pub-id pub-id-type="pmid">10698988</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Galata</surname><given-names>V</given-names></string-name>, <string-name><surname>Fehlmann</surname><given-names>T</given-names></string-name>, <string-name><surname>Backes</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>PLSDB: a resource of complete bacterial plasmids</article-title>. <source>Nucleic Acids Res</source><year>2019</year>;<volume>47</volume>:<fpage>D195</fpage>–<lpage>202</lpage>.<pub-id pub-id-type="pmid">30380090</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gourlé</surname><given-names>H</given-names></string-name>, <string-name><surname>Karlsson-Lindsjö</surname><given-names>O</given-names></string-name>, <string-name><surname>Hayer</surname><given-names>J</given-names></string-name></person-group><etal>et al</etal><article-title>Simulating Illumina metagenomic data with InSilicoSeq</article-title>. <source>Bioinformatics</source><year>2019</year>;<volume>35</volume>:<fpage>521</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">30016412</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gurevich</surname><given-names>A</given-names></string-name>, <string-name><surname>Saveliev</surname><given-names>V</given-names></string-name>, <string-name><surname>Vyahhi</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>QUAST: quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source><year>2013</year>;<volume>29</volume>:<fpage>1072</fpage>–<lpage>5</lpage>.<pub-id pub-id-type="pmid">23422339</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hall</surname><given-names>MB.</given-names></string-name></person-group><article-title>Rasusa: randomly subsample sequencing reads to a specified coverage</article-title>. <source>JOSS</source><year>2022</year>;<volume>7</volume>:<fpage>3941</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hawkey</surname><given-names>J</given-names></string-name>, <string-name><surname>Cottingham</surname><given-names>H</given-names></string-name>, <string-name><surname>Vyahhi</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Linear plasmids in Klebsiella and other Enterobacteriaceae</article-title>. <source>Microb Genomics</source><year>2022</year>;<volume>8</volume>:<fpage>000807</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B15">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Houtak</surname><given-names>G</given-names></string-name>, <string-name><surname>Bouras</surname><given-names>G</given-names></string-name>, <string-name><surname>Nepal</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal> The intra-host evolutionary landscape and pathoadaptation of persistent <italic toggle="yes">Staphylococcus aureus</italic> in chronic rhinosinusitis. bioRxiv, <pub-id pub-id-type="doi">10.1101/2023.03.28.534496</pub-id>, <year>2023</year>, preprint: not peer reviewed.</mixed-citation>
    </ref>
    <ref id="btad409-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Johnson</surname><given-names>J</given-names></string-name>, <string-name><surname>Soehnlen</surname><given-names>M</given-names></string-name>, <string-name><surname>Blankenship</surname><given-names>HM</given-names></string-name></person-group><etal>et al</etal><article-title>Long read genome assemblers struggle with small plasmids</article-title>. <source>Microb Genomics</source><year>2023</year>;<volume>9</volume>:<fpage>001024</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname><given-names>M</given-names></string-name>, <string-name><surname>Yuan</surname><given-names>J</given-names></string-name>, <string-name><surname>Lin</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>Assembly of long, error-prone reads using repeat graphs</article-title>. <source>Nat Biotechnol</source><year>2019</year>;<volume>37</volume>:<fpage>540</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">30936562</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group><article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>. <source>Bioinformatics</source><year>2018</year>;<volume>34</volume>:<fpage>3094</fpage>–<lpage>100</lpage>.<pub-id pub-id-type="pmid">29750242</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H</given-names></string-name>, <string-name><surname>Handsaker</surname><given-names>B</given-names></string-name>, <string-name><surname>Wysoker</surname><given-names>A</given-names></string-name></person-group>, <collab>1000 Genome Project Data Processing Subgroup</collab><etal>et al</etal><article-title>The sequence alignment/map format and SAMtools</article-title>. <source>Bioinformatics</source><year>2009</year>;<volume>25</volume>:<fpage>2078</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mathers</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Stoesser</surname><given-names>N</given-names></string-name>, <string-name><surname>Chai</surname><given-names>W</given-names></string-name></person-group><etal>et al</etal><article-title>Chromosomal integration of the Klebsiella pneumoniae Carbapenemase Gene, blaKPC, in Klebsiella species is elusive but not rare</article-title>. <source>Antimicrob Agents Chemother</source><year>2017</year>;<volume>61</volume>:<fpage>e01823</fpage>-<lpage>16</lpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B151">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mölder</surname><given-names>F</given-names></string-name>, <string-name><surname>Jablonski</surname><given-names>KP</given-names></string-name>, <string-name><surname>Letcher</surname><given-names>B</given-names></string-name></person-group><etal>et al</etal><article-title>Sustainable data analysis with Snakemake</article-title>. <source>F1000Research</source><year>2021</year>.</mixed-citation>
    </ref>
    <ref id="btad409-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Murigneux</surname><given-names>V</given-names></string-name>, <string-name><surname>Roberts</surname><given-names>LW</given-names></string-name>, <string-name><surname>Forde</surname><given-names>BM</given-names></string-name></person-group><etal>et al</etal><article-title>MicroPIPE: validating an end-to-end workflow for high-quality complete bacterial genome construction</article-title>. <source>BMC Genomics</source><year>2021</year>;<volume>22</volume>:<fpage>474</fpage>.<pub-id pub-id-type="pmid">34172000</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B22">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Petit</surname><given-names>RA</given-names><suffix>III</suffix></string-name>, <string-name><surname>Hall</surname><given-names>MB.</given-names></string-name></person-group> fastq-dl: efficiently download FASTQ files from SRA or ENA repositories. <ext-link xlink:href="https://github.com/rpetit3/fastq-dl" ext-link-type="uri">https://github.com/rpetit3/fastq-dl</ext-link>.</mixed-citation>
    </ref>
    <ref id="btad409-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pfeifer</surname><given-names>E</given-names></string-name>, <string-name><surname>Bonnin</surname><given-names>RA</given-names></string-name>, <string-name><surname>Rocha</surname><given-names>EPC</given-names></string-name></person-group><etal>et al</etal><article-title>Phage-plasmids spread antibiotic resistance genes through infection and lysogenic conversion</article-title>. <source>mBio</source><year>2022</year>;<volume>13</volume>:<fpage>e01851</fpage>-<lpage>22</lpage>.<pub-id pub-id-type="pmid">36154183</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Roach</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Pierce-Ward</surname><given-names>NT</given-names></string-name>, <string-name><surname>Suchecki</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Ten simple rules and a template for creating workflows-as-applications</article-title>. <source>PLoS Comput Biol</source><year>2022</year>;<volume>18</volume>:<fpage>e1010705</fpage>.<pub-id pub-id-type="pmid">36520686</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Robertson</surname><given-names>J</given-names></string-name>, <string-name><surname>Nash</surname><given-names>JHE.</given-names></string-name></person-group><article-title>MOB-suite: software tools for clustering, reconstruction and typing of plasmids from draft assemblies</article-title>. <source>Microb Genomics</source><year>2018</year>;<volume>4</volume>:<fpage>e000206</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sayers</surname><given-names>EW</given-names></string-name>, <string-name><surname>Bolton</surname><given-names>EE</given-names></string-name>, <string-name><surname>Brister</surname><given-names>JR</given-names></string-name></person-group><etal>et al</etal><article-title>Database resources of the national center for biotechnology information</article-title>. <source>Nucleic Acids Res</source><year>2022</year>;<volume>50</volume>:<fpage>D20</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">34850941</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schwengers</surname><given-names>O</given-names></string-name>, <string-name><surname>Jelonek</surname><given-names>L</given-names></string-name>, <string-name><surname>Dieckmann</surname><given-names>MA</given-names></string-name></person-group><etal>et al</etal><article-title>Bakta: rapid and standardized annotation of bacterial genomes via alignment-free sequence identification</article-title>. <source>Microb Genomics</source><year>2021</year>;<volume>7</volume>:<fpage>000685</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shen</surname><given-names>A</given-names></string-name>, <string-name><surname>Millard</surname><given-names>A.</given-names></string-name></person-group><article-title>Phage genome annotation: where to begin and end</article-title>. <source>Phage (New Rochelle)</source><year>2021</year>;<volume>2</volume>:<fpage>183</fpage>–<lpage>93</lpage>.<pub-id pub-id-type="pmid">36159890</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Vaser</surname><given-names>R</given-names></string-name>, <string-name><surname>Šikić</surname><given-names>M.</given-names></string-name></person-group><article-title>Time- and memory-efficient genome assembly with Raven</article-title>. <source>Nat Comput Sci</source><year>2021</year>;<volume>1</volume>:<fpage>332</fpage>–<lpage>6</lpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR.</given-names></string-name></person-group><article-title>Badread: simulation of error-prone long reads</article-title>. <source>JOSS</source><year>2019</year>;<volume>4</volume>:<fpage>1316</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Gorrie</surname><given-names>CL</given-names></string-name></person-group><etal>et al</etal><article-title>Unicycler: resolving bacterial genome assemblies from short and long sequencing reads</article-title>. <source>PLoS Comput Biol</source><year>2017</year>;<volume>13</volume>:<fpage>e1005595</fpage>.<pub-id pub-id-type="pmid">28594827</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Holt</surname><given-names>KE.</given-names></string-name></person-group><article-title>Benchmarking of long-read assemblers for prokaryote whole genome sequencing</article-title>. <source>F1000Res</source><year>2019</year>;<volume>8</volume>:<fpage>2138</fpage>.<pub-id pub-id-type="pmid">31984131</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Wyres</surname><given-names>KL</given-names></string-name></person-group><etal>et al</etal><article-title>Recovery of small plasmid sequences via Oxford Nanopore sequencing</article-title>. <source>Microb Genomics</source><year>2021a</year>;<volume>7</volume>:<fpage>000631</fpage>.</mixed-citation>
    </ref>
    <ref id="btad409-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Cerdeira</surname><given-names>LT</given-names></string-name></person-group><etal>et al</etal><article-title>Trycycler: consensus long-read assemblies for bacterial genomes</article-title>. <source>Genome Biol</source><year>2021b</year>;<volume>22</volume>:<fpage>266</fpage>.<pub-id pub-id-type="pmid">34521459</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Judd</surname><given-names>LM</given-names></string-name>, <string-name><surname>Holt</surname><given-names>KE</given-names></string-name></person-group><etal>et al</etal><article-title>Assembling the perfect bacterial genome using Oxford Nanopore and Illumina sequencing</article-title>. <source>PLoS Comput Biol</source><year>2023</year>;<volume>19</volume>:<fpage>e1010905</fpage>.<pub-id pub-id-type="pmid">36862631</pub-id></mixed-citation>
    </ref>
    <ref id="btad409-B152">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>RR</given-names></string-name>, <string-name><surname>Schultz</surname><given-names>MB</given-names></string-name>, <string-name><surname>Zobel</surname><given-names>J</given-names></string-name></person-group><etal>et al</etal><article-title>Bandage: interactive visualization of de novo genome assemblies</article-title>. <source>Bioinformatics</source><year>2015</year>;<volume>31</volume>:<fpage>3350</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">26099265</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
