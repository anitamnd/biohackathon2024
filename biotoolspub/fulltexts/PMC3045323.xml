<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Syst Biol</journal-id>
    <journal-title-group>
      <journal-title>BMC Systems Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1752-0509</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3045323</article-id>
    <article-id pub-id-type="publisher-id">1752-0509-5-25</article-id>
    <article-id pub-id-type="pmid">21294924</article-id>
    <article-id pub-id-type="doi">10.1186/1752-0509-5-25</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Methodology Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>A new computational method to split large biochemical networks into coherent subnets</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes" id="A1">
        <name>
          <surname>Verwoerd</surname>
          <given-names>Wynand S</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>wynand.verwoerd@lincoln.ac.nz</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Centre for Advanced Computational Solutions, Dept WF &amp; Molecular Bioscience, Lincoln University, Ellesmere Junction Road, Christchurch, New Zealand</aff>
    <pub-date pub-type="collection">
      <year>2011</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>7</day>
      <month>2</month>
      <year>2011</year>
    </pub-date>
    <volume>5</volume>
    <fpage>25</fpage>
    <lpage>25</lpage>
    <history>
      <date date-type="received">
        <day>13</day>
        <month>9</month>
        <year>2010</year>
      </date>
      <date date-type="accepted">
        <day>7</day>
        <month>2</month>
        <year>2011</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright Â©2011 Verwoerd; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2011</copyright-year>
      <copyright-holder>Verwoerd; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1752-0509/5/25"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>Compared to more general networks, biochemical networks have some special features: while generally sparse, there are a small number of highly connected metabolite nodes; and metabolite nodes can also be divided into two classes: internal nodes with associated mass balance constraints and external ones without. Based on these features, reclassifying selected internal nodes (separators) to external ones can be used to divide a large complex metabolic network into simpler subnetworks. Selection of separators based on node connectivity is commonly used but affords little detailed control and tends to produce excessive fragmentation.</p>
        <p>The method proposed here (Netsplitter) allows the user to control separator selection. It combines local connection degree partitioning with global connectivity derived from random walks on the network, to produce a more even distribution of subnetwork sizes. Partitioning is performed progressively and the interactive visual matrix presentation used allows the user considerable control over the process, while incorporating special strategies to maintain the network integrity and minimise the information loss due to partitioning.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>Partitioning of a genome scale network of 1348 metabolites and 1468 reactions for <italic>Arabidopsis thaliana </italic>encapsulates 66% of the network into 10 medium sized subnets. Applied to the flavonoid subnetwork extracted in this way, it is shown that Netsplitter separates this naturally into four subnets with recognisable functionality, namely synthesis of lignin precursors, flavonoids, coumarin and benzenoids. A quantitative quality measure called <italic>efficacy </italic>is constructed and shows that the new method gives improved partitioning for several metabolic networks, including bacterial, plant and mammal species.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>For the examples studied the Netsplitter method is a considerable improvement on the performance of connection degree partitioning, giving a better balance of subnet sizes with the removal of fewer mass balance constraints. In addition, the user can interactively control which metabolite nodes are selected for cutting and when to stop further partitioning as the desired granularity has been reached. Finally, the blocking transformation at the heart of the procedure provides a powerful visual display of network structure that may be useful for its exploration independent of whether partitioning is required.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The genome scale metabolic network of small molecule reactions for cells (particularly eukaryotic cells) is sufficiently complex that it is hard to visualize, let alone interpret. Using conventional biochemical pathways is a bottom-up approach that helps to bridge the complexity gap between individual reactions and the complete network. But this still leaves scope for an intermediate level of granularity, namely subnets. A subnet allows the study of the interplay between pathways and reactions in a broader context, while still focussing attention on a limited biological functionality of interest.</p>
    <p>This line of thought has been pursued by many authors in the recent literature, together with algorithms that use a top-down approach utilising the inherent structure of the complete network to determine its natural subdivision points. In addition to the conceptual argument, there are also practical considerations that motivate this endeavour in particular contexts. The use of structural analysis tools such as elementary modes and extreme pathways [<xref ref-type="bibr" rid="B1">1</xref>], suffers from the problem of a combinatorial explosion [<xref ref-type="bibr" rid="B2">2</xref>] of the number of such modes in a complex network. In essence the problem is that if two small networks are joined together sequentially, each pathway in one can be joined to each pathway in the other. So reversing this and partitioning a large network into subnets is a useful strategy to keep mode numbers manageable. Alternatively, significant advances have also been made in large scale mode calculations in genome scale networks [<xref ref-type="bibr" rid="B3">3</xref>] and analyzing the results by sorting [<xref ref-type="bibr" rid="B4">4</xref>] or pattern matching [<xref ref-type="bibr" rid="B5">5</xref>] techniques. Whether such methods or partitioning is preferable depends on the goals of a particular project.</p>
    <p>Another significant context is flux balance analysis (FBA). There, knowledge of at least some measured fluxes is needed in order to calculate others by applying stoichiometric and other constraints. Current technology allows simultaneous measurement of about a dozen flux values or several hundred metabolite concentrations [<xref ref-type="bibr" rid="B6">6</xref>]. Optimization of an objective function such as biomass production has been used successfully to supplement the constraints for metabolic modelling of unicellular organisms, but the choice of objective for multicellular organisms is problematic and even for unicellular systems, maximising biomass is not always appropriate [<xref ref-type="bibr" rid="B7">7</xref>]. So in a study that focuses on a particular aspect of metabolism, it would be helpful if a way can be found to limit the FBA calculation to a "relevant" section of the network and avoid needing boundary conditions that only affect other metabolic aspects.</p>
    <p>Depending on the priority allocated to these three sets of considerations, different approaches have been advocated, and a recent review including the application of more general network theory approaches to biological networks, can be found in a recent article by Nayak and De [<xref ref-type="bibr" rid="B8">8</xref>].</p>
    <p>The conceptual network simplification problem is typically addressed by clustering- or community finding algorithms. A typical example is the Markov clustering (MCL) algorithm[<xref ref-type="bibr" rid="B9">9</xref>]. There, the focus is on identifying groups of nodes that are closely connected to each other, while intergroup connections are weaker by comparison. A clustering method somewhat similar to MCL has also been applied to metabolic networks [<xref ref-type="bibr" rid="B10">10</xref>]. This approach uses simulated annealing to process connectivity information to find modules with high connectivity within and minimal links between modules, but takes no account of mass balance constraints.</p>
    <p>However, clustering of this kind is not really appropriate for metabolic subnetworks. The most highly connected metabolites are commodity or currency compounds such as H<sub>2</sub>O and NADH, but generally (depending on the context) they are of least interest in terms of function. Conversely, the conventional pathways of biochemistry that should form the core of a functionally oriented partitioning are typically linear or circular and only weakly connected in terms of graph structure.</p>
    <p>An alternative approach to the conceptual clarification of biochemical network structure is as hierarchy trees, an approach advocated in the work of Holme, Huss and Jeong [<xref ref-type="bibr" rid="B11">11</xref>] and of Gagneur, Jackson and Casari [<xref ref-type="bibr" rid="B12">12</xref>]. However, such hierarchies are not very amenable to isolating a particular subnetwork for FBA or mode analysis.</p>
    <p>An approach that prioritises the appropriateness of a biochemical subnet for use in practical applications, was demonstrated by Schuster et al [<xref ref-type="bibr" rid="B13">13</xref>]. The approach is based on the observation that metabolite nodes in a biochemical network are of two distinct types: Internal nodes that have associated stoichiometric mass balance constraints, and external nodes that represent metabolite inflows and outflows from the environment and have no associated mass conservation. The external nodes define the periphery of the network, and so a new boundary that separates a subset of nodes from the rest can be created by reclassifying some of the internal nodes as external. Changing the status of a node from internal to external, can in a graphical network representation be seen as splitting it into two: one copy becomes a sink in one subnet, and the other a source in another subnet. This demonstrates another difference from clustering, where networks are usually partitioned by deleting links rather than splitting nodes. The selection criterion used [<xref ref-type="bibr" rid="B13">13</xref>], is that all internal metabolites that participate in more reactions than a chosen threshold value are made external. One rationale behind this criterion is that the many reactions that contribute to mass balance of such a highly connected metabolite are reasonably represented by considering it as buffered, in a subnet not containing all those reactions. Another is that this choice is particularly effective at avoiding the combinatorial explosion problem. And finally, for a high enough threshold, mainly carrier and commodity metabolites are selected that are not the focus of interest in a typical subnet.</p>
    <p>Using a threshold connectivity of 5, the metabolic network of <italic>Mycoplasma pneumoniae </italic>was found [<xref ref-type="bibr" rid="B13">13</xref>] to divide into 19 subnetworks, with identifiable biological functions. Similarly the human redox metabolism was found [<xref ref-type="bibr" rid="B14">14</xref>] to split into 7 subnetworks for the threshold value of 5. Although successful in these relatively small metabolic networks, a criticism expressed by several authors [<xref ref-type="bibr" rid="B11">11</xref>,<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B15">15</xref>] is that it relies totally on a local property, the degree of node connectivity, and takes no account of the global network structure. Compared to their method that uses the global "bow-tie" structure, Ma et al [<xref ref-type="bibr" rid="B15">15</xref>] found that while both methods classify most currency metabolites similarly, there are examples in their method of both internal metabolites with high connection degree and external metabolites with a low degree. It was also acknowledged in the original article [<xref ref-type="bibr" rid="B13">13</xref>] that the fully automated selection on connection degree alone can be improved by minor editing based on biochemical knowledge. Despite these reservations, connectivity selection is still implemented in the current version of the network analysis software application YANAsquare [<xref ref-type="bibr" rid="B16">16</xref>].</p>
    <p>The network splitting procedure presented in this article aims to incorporate the insights outlined above. In addition it provides flexibility to interactively guide how the splitting proceeds, based on the purpose and biochemical knowledge of the user, within the limits set by the inherent network structure.</p>
    <p>The formulation adopts internal/external reassignment as the splitting paradigm, but only uses the connectivity degree as a preliminary coarse filter to identify the most obvious external metabolites. This is optionally supplemented or refined by an explicit listing of metabolites that are/are not taken as external. The main algorithm uses random walks to explore long range network structure, in a similar way as MCL clustering [<xref ref-type="bibr" rid="B9">9</xref>]. However instead of the rigid automated cluster delineation produced by the "inflation" step of the MCL, the results are displayed to the user as a matrix that summarises network structure even for large networks in a powerful visual form. At the heart of the visualisation is a blocking transformation designed to express subtleties of the status of each node in relation to an underlying hierarchical clustering, in a way that resembles fuzzy clustering algorithms. Optimisation using linear programming delivers a small set of candidate externals, which the user can accept or reject and this process is repeated until acceptably small subnets are produced. In a final postprocessing step, externals that are not essential for the partitioning achieved, are reincorporated to ensure that the inevitable loss of mass balance information is kept to a minimum. The procedure described here has been implemented in a software application called Netsplitter, and is subsequently referred to as the "netsplitter algorithm".</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <sec>
      <title>General overview</title>
      <p>Processing of a metabolic network consisting of an unordered list of chemical reactions specified in the standard way by a matrix of stoichiometric coefficients, proceeds through four computational stages:</p>
      <p>1. Generating a matrix representation of the network connectivity structure from random walks, which expresses each internal metabolite as a distinct source or sink node in an associated directed acyclic graph ( DAG).</p>
      <p>2. Using hierarchical clustering and a blocking transformation to rearrange the DAG matrix into latent blocks that express the underlying partially separated subnets.</p>
      <p>3. Proposing prospective separator nodes for approval to the user, implementing the decision and recalculating the DAG with improved blocking, leading to the next round of separator selection.</p>
      <p>4. Post-processing to consolidate subnets by reincorporating superfluous externals and to reconstitute a stoichiometry matrix specification of each subnet from the DAG matrix blocks.</p>
      <p>Each of these stages is described in more detail in the following subsections, followed by introduction of a quantitative measure of effectiveness. Fuller justifications for some of the steps are supplied in a separate subsection at the end of Methods.</p>
    </sec>
    <sec>
      <title>Matrix representation of biochemical networks</title>
      <sec>
        <title>Random walks and probability matrices</title>
        <p>The procedure is based on representing the network as a matrix of probabilities that reflect random walks on a simple graph, similar to that used in the well-known Markov Clustering (MCL) algorithm [<xref ref-type="bibr" rid="B9">9</xref>]. However, since a metabolic network contains nodes of two distinct types (metabolite and reaction), the first task is to reduce the stoichiometry matrix (S-matrix) used conventionally to specify a metabolic network, to a probability matrix for a simple graph containing metabolite nodes only. For this step it suffices to treat the metabolic network as a bipartite graph, although it has been pointed out that metabolic networks are best considered hypergraphs [<xref ref-type="bibr" rid="B17">17</xref>].</p>
        <p>For a simple graph, one starts from a probability matrix <bold>P</bold><sub>1 </sub>where the elements in row <italic>i </italic>are the probabilities that a random walk starting from node <italic>i </italic>in the network will reach node <italic>j </italic>in a single step. For simplicity, equal probabilities are assigned to all links emanating from a particular node. To achieve this, one merely needs to normalise each row of the adjacency matrix <bold>C </bold>of the graph, by dividing each element by the sum of all elements in the row. The probability matrix <bold>P</bold><sub>N </sub>for a random walk of <italic>N </italic>steps, is calculated by raising <bold>P</bold><sub>1 </sub>to the <italic>N</italic>-th power. Walks of <italic>n </italic>â¤ <italic>N </italic>steps, will be included in this provided that there is a non-zero probability for a random walk step to "stay put" on a node; in other words self-loops are included in the adjacency matrix, or in matrix terms a multiple of the identity matrix is added before the row normalisation is carried out.</p>
        <p>If we start from a state where there is a single "random walker" on each node of the network at step 0, the probability associated with each walker has the value 1 for being localised on its starting node. Then <bold>P</bold><sub>1 </sub>represents propagation of this probability to nearest neighbour nodes in step 1, and generally the potentiating of the matrix can be visualised as the flow of probability through the network after increasing numbers of steps. This is expressed in MCL terminology by referring to potentiating as the "expansion" operation.</p>
        <p>As constructed, the matrix <bold>P</bold><sub>1 </sub>has non-negative elements with a row sum = 1, which makes it an example of a <italic>right stochastic matrix</italic>. From the theory of stochastic matrices [<xref ref-type="bibr" rid="B18">18</xref>], it is known that raising a matrix of this type to consecutive powers converges to a matrix denoted as <bold>P</bold><sub>â</sub>. In practice, for metabolic networks numerical convergence to an approximation of <bold>P</bold><sub>â </sub>is obtained for values of <italic>N </italic>in the low tens. A typical feature of this matrix is that many of its columns are zero vectors, implying that after a sufficient number of steps, the probability of finding a random walker on the node corresponding to that column approaches zero, regardless of the node from which the walker started at step 0. Such nodes therefore act as <italic>sources</italic>, while the remainder with non-zero columns are <italic>sink </italic>nodes. In a thought experiment with one walker starting from each node of the network at time 0, all walkers will congregate on the sink nodes after the number of steps needed for convergence. A binary version of <bold>P</bold><sub>â </sub>, obtained by replacing all non-zero elements by 1, can be interpreted as the adjacency matrix of a new graph, containing the same nodes as the original network, but in which all links connect sources directly to sinks in a star-like configuration. This is formally described as a directed acyclic graph, and is directed irrespective of whether any links in the original network were directed. In what follows, either <bold>P</bold><sub>â </sub>or its binary version is referred to as the DAG-matrix. Qualitatively the features described above are quite similar to those in the MCL, but note that in MCL terminology only the "expansion" operation (raising <bold>P</bold><sub>1 </sub>to a power) is applied while the "inflation" operation that is key to the MCL, is not used. Consequently the DAG obtained here does not usually separate into disconnected clusters, and needs to be further manipulated by the algorithm to extract subnetworks.</p>
        <p>The generalisation of the procedure outlined above to the bipartite metabolic network case, starts by defining two separate adjacency matrices <bold>CR </bold>and <bold>RC</bold>. For a network of <italic>m </italic>reactions and <italic>n </italic>metabolites, the S-matrix is (<italic>n </italic>Ã <italic>m</italic>) with rows representing metabolites and columns reactions. <bold>CR </bold>is similarly (<italic>n </italic>Ã <italic>m</italic>) and each row contains the adjacencies of a metabolite node that act as a substrate to each reaction column, while <bold>RC </bold>is (<italic>m </italic>Ã <italic>n</italic>) and gives the adjacencies of reaction products but with the roles of rows and columns reversed. Formally, these are constructed from <bold>S </bold>by the relations</p>
        <p>
          <disp-formula id="bmcM1.1">
            <label>(1.1)</label>
            <mml:math id="M1" name="1752-0509-5-25-i1" overflow="scroll">
              <mml:mrow>
                <mml:mi mathvariant="bold">C</mml:mi>
                <mml:mi mathvariant="bold">R</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mstyle scriptlevel="+1">
                  <mml:mfrac>
                    <mml:mn>1</mml:mn>
                    <mml:mn>2</mml:mn>
                  </mml:mfrac>
                </mml:mstyle>
                <mml:mrow>
                  <mml:mo>(</mml:mo>
                  <mml:mrow>
                    <mml:mrow>
                      <mml:mo>|</mml:mo>
                      <mml:mrow>
                        <mml:mi>S</mml:mi>
                        <mml:mi>i</mml:mi>
                        <mml:mi>g</mml:mi>
                        <mml:mi>n</mml:mi>
                        <mml:mo stretchy="false">(</mml:mo>
                        <mml:mi mathvariant="bold">S</mml:mi>
                        <mml:mo stretchy="false">)</mml:mo>
                      </mml:mrow>
                      <mml:mo>|</mml:mo>
                    </mml:mrow>
                    <mml:mo>â</mml:mo>
                    <mml:mi>S</mml:mi>
                    <mml:mi>i</mml:mi>
                    <mml:mi>g</mml:mi>
                    <mml:mi>n</mml:mi>
                    <mml:mo stretchy="false">(</mml:mo>
                    <mml:mi mathvariant="bold">S</mml:mi>
                    <mml:mo stretchy="false">)</mml:mo>
                  </mml:mrow>
                  <mml:mo>)</mml:mo>
                </mml:mrow>
                <mml:mtext>â</mml:mtext>
                <mml:mo>;</mml:mo>
                <mml:mtext>â</mml:mtext>
                <mml:mi mathvariant="bold">R</mml:mi>
                <mml:mi mathvariant="bold">C</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mstyle scriptlevel="+1">
                  <mml:mfrac>
                    <mml:mn>1</mml:mn>
                    <mml:mn>2</mml:mn>
                  </mml:mfrac>
                </mml:mstyle>
                <mml:mi>T</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mi>a</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mi>p</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mrow>
                  <mml:mo>(</mml:mo>
                  <mml:mrow>
                    <mml:mrow>
                      <mml:mo>|</mml:mo>
                      <mml:mrow>
                        <mml:mi>S</mml:mi>
                        <mml:mi>i</mml:mi>
                        <mml:mi>g</mml:mi>
                        <mml:mi>n</mml:mi>
                        <mml:mo stretchy="false">(</mml:mo>
                        <mml:mi mathvariant="bold">S</mml:mi>
                        <mml:mo stretchy="false">)</mml:mo>
                      </mml:mrow>
                      <mml:mo>|</mml:mo>
                    </mml:mrow>
                    <mml:mo>+</mml:mo>
                    <mml:mi>S</mml:mi>
                    <mml:mi>i</mml:mi>
                    <mml:mi>g</mml:mi>
                    <mml:mi>n</mml:mi>
                    <mml:mo stretchy="false">(</mml:mo>
                    <mml:mi mathvariant="bold">S</mml:mi>
                    <mml:mo stretchy="false">)</mml:mo>
                  </mml:mrow>
                  <mml:mo>)</mml:mo>
                </mml:mrow>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Here the Sign function takes the values -1, 0 or 1 and serves to ensure that <bold>CR </bold>and <bold>RC </bold>are nonnegative binary matrices. From these the probability matrix for the reduced metabolites-only network is calculated by</p>
        <p>
          <disp-formula id="bmcM1.2">
            <label>(1.2)</label>
            <mml:math id="M2" name="1752-0509-5-25-i2" overflow="scroll">
              <mml:mrow>
                <mml:msub>
                  <mml:mi mathvariant="bold">P</mml:mi>
                  <mml:mn>1</mml:mn>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:mi>R</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>w</mml:mi>
                <mml:mi>N</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mi>m</mml:mi>
                <mml:mrow>
                  <mml:mo>(</mml:mo>
                  <mml:mrow>
                    <mml:mi>R</mml:mi>
                    <mml:mi>o</mml:mi>
                    <mml:mi>w</mml:mi>
                    <mml:mi>N</mml:mi>
                    <mml:mi>o</mml:mi>
                    <mml:mi>r</mml:mi>
                    <mml:mi>m</mml:mi>
                    <mml:mrow>
                      <mml:mo>(</mml:mo>
                      <mml:mrow>
                        <mml:mi mathvariant="bold">C</mml:mi>
                        <mml:mi>R</mml:mi>
                      </mml:mrow>
                      <mml:mo>)</mml:mo>
                    </mml:mrow>
                    <mml:mo>â¢</mml:mo>
                    <mml:mi>R</mml:mi>
                    <mml:mi>o</mml:mi>
                    <mml:mi>w</mml:mi>
                    <mml:mi>N</mml:mi>
                    <mml:mi>o</mml:mi>
                    <mml:mi>r</mml:mi>
                    <mml:mi>m</mml:mi>
                    <mml:mrow>
                      <mml:mo>(</mml:mo>
                      <mml:mrow>
                        <mml:mi mathvariant="bold">R</mml:mi>
                        <mml:mi mathvariant="bold">C</mml:mi>
                      </mml:mrow>
                      <mml:mo>)</mml:mo>
                    </mml:mrow>
                    <mml:mo>+</mml:mo>
                    <mml:mn>0.25</mml:mn>
                    <mml:mtext>â</mml:mtext>
                    <mml:mi mathvariant="bold">I</mml:mi>
                  </mml:mrow>
                  <mml:mo>)</mml:mo>
                </mml:mrow>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Here the function RowNorm normalises each matrix row by a simple row sum, and converts the adjacency matrices to probability matrices. The summation implied in the matrix multiplication accumulates the probabilities for a random walk jump from metabolite node <italic>i </italic>to metabolite node <italic>j</italic>, over all reactions that connect them. Note that links in the metabolites-only network are directed in accordance with underlying reaction directions, whether these are reversible or not. In the added term, <bold>I </bold>represents an (<italic>n </italic>Ã <italic>n</italic>) identity matrix to account for selfloops, and its coefficient is chosen to scale their probabilities in accordance with typical values in a sparse network. The results for the DAG are found to be insensitive to the actual coefficient value. Unlike for a simple graph, the selfloops could not be introduced into the adjacency matrices because they are non-square and even if not, it would have destroyed the bipartite nature.</p>
        <p>Calculation of the DAG matrix proceeds by straightforward iterative potentiation of <bold>P</bold><sub>1</sub>, using convergence of the Frobenius norm of the matrix to within an absolute value of 10<sup>-10 </sup>as the criterion.</p>
      </sec>
      <sec>
        <title>Matrix implementation of partitioning</title>
        <p>Reclassifying an internal node as external to produce network partitioning, is implemented by deleting the corresponding row from <bold>CR </bold>and column from <bold>RC</bold>. This implies that at any stage the DAG matrix only represents internal metabolites, and as this changes during the course of the partitioning the DAG is regularly updated. A detailed account of this implementation is given in the justifications section further below.</p>
      </sec>
      <sec>
        <title>Preprocessing the DAG matrix</title>
        <p>The first step in processing the DAG matrix is to sort its columns so all non-zero columns are collected on the left and rows sorted in the same order, then deleting the zero columns. In this way, by definition only sink nodes remain in the column sequence and rows are sorted with all sinks appearing first, followed by all source nodes.</p>
        <p>To demonstrate the method, an example network consisting of 137 metabolites and 117 reactions is used in what follows. This network happens to be a subnet for flavonoid metabolism in <italic>Arabidopsis thaliana </italic>extracted from the Aracyc [<xref ref-type="bibr" rid="B19">19</xref>] database, but serves here merely as a realistic example of a small metabolic network. The specification of this network in SBML format is available as Additional File <xref ref-type="supplementary-material" rid="S1">1</xref>.</p>
        <p>Figure <xref ref-type="fig" rid="F1">1(a)</xref> shows the DAG matrix for this network using a colour scale to represent numerical values of the matrix elements. Of the original 137 metabolites, 66 have been identified as a structural external (i.e. it acts uniquely as either a substrate or a product in all reactions in which it participates) and eliminated. The remaining 71 internals are found to separate into 16 sinks and 55 source nodes.</p>
        <fig id="F1" position="float">
          <label>Figure 1</label>
          <caption>
            <p><bold>DAG matrix for demo network</bold>. Non-zero columns of the DAG matrix (a) with only structural externals recognised (b) after reclassifying 4 high connectivity internals as external. Colour scaling expresses random walk probabilities between source nodes (rows) and sink nodes (columns) of the network; comparison of (a) and (b) shows how connectivity structure is revealed by an appropriate high connectivity cutoff.</p>
          </caption>
          <graphic xlink:href="1752-0509-5-25-1"/>
        </fig>
        <p>The top square 16 Ã 16 submatrix is seen to be (block) diagonal. For the majority of single diagonal elements, this merely indicates the finite probability that a random walk starting from a sink node will end there as a result of a selfloop, while it will not terminate at any other sink. There are also a few small blocks; they represent small clusters of nodes that are fully connected and hence jointly act as a "supersink". This top square does not reflect much of the overall network structure and further manipulation centers on the lower part, i.e. the DAG matrix is further truncated to contain just the (<italic>nsources </italic>Ã <italic>nsinks</italic>) lower left submatrix of the original.</p>
        <p>Inspection of the lower 55 Ã 16 submatrix in Figure <xref ref-type="fig" rid="F1">1(a)</xref> shows very little internal structure on which to base network partitioning; almost all source nodes are connected to almost all sinks. The reason is that in a metabolic network there are typically a small number of ubiquitous metabolites such as carrier molecules that participate in many reactions. Sacrificing mass balance for these, is arguably not a serious loss of information, as an excess or lack of the molecule in the subnet can be assumed to be made up by other subnets. The common convention of presenting metabolic pathways as a backbone structure while suppressing secondary metabolites, is an implicit recognition that such crosslinking tends to obscure the underlying connectivity structure that is important to understand functional units in a metabolic network.</p>
        <p>Reclassifying just the four highest connectivity internal metabolites (Water, Coenzyme A, NADP and NADPH) in the demonstration network produces the drastic change shown by Figure <xref ref-type="fig" rid="F1">1(b)</xref>. The truncated DAG now exhibits clear structure, creating scope for further manipulation as described in the next section.</p>
        <p>A useful strategy to determine such a set of a priori ubiquitous metabolites is to simply choose a fixed threshold value and reclassify all internal metabolites with connectivities higher than the threshold, in order to reveal the connection structure. A threshold of 8 was found to work well for networks over a wide range of sizes, from about 100 metabolites upwards. Manual adjustment of the threshold can also be done as its effect is easily monitored by visual inspection of the truncated DAG as in Figure <xref ref-type="fig" rid="F1">1</xref>.</p>
        <p>Alternatively, an explicit list of commonly occurring ubiquitous metabolites can be used instead of a threshold, to avoid inadvertent reclassifications. The most efficient strategy was found to be a combination, using a threshold to automatically reclassify the most "obvious" carrier metabolites automatically, and supplementing this with an explicit list of less obvious ones.</p>
      </sec>
    </sec>
    <sec>
      <title>Rearranging the DAG matrix to identify subnets</title>
      <sec>
        <title>Subnetworks and matrix blocks</title>
        <p>The key insight needed to use the mathematical infrastructure described so far for network partitioning, is that separated subnets can be made to appear in the truncated DAG matrix as non-overlapping blocks.</p>
        <p>A block is defined as a rectangular submatrix, formed by the intersection of a horizontal band of rows and a vertical band of columns, and where any non-zero matrix elements in either band occur only inside the intersection (so elements in the bands outside of the block are all zero). It follows that the row and column ranges of a block does not overlap with those of any other block. So if it exhibits a non-trivial block structure, the full set of rows in the truncated DAG matrix will be partitioned with no overlap into two or more bands, and similarly the columns into the same number of bands. This definition does not require that blocks are arranged diagonally.</p>
        <p>The connection with disjoint subnets is established by noting that a non-zero element (<italic>i</italic>,<italic>j</italic>) in a particular block of the truncated DAG means that there is a finite probability, and hence a path through the network from source node <italic>i </italic>to sink node <italic>j </italic>in the same block. Conversely, the zero elements in the bands belonging to a particular block but outside that block, means that probability does not flow from source nodes in one block, to nodes in any other block; nor are sink nodes in one block fed by sources in any other block. So the collection of sources and sinks of each block, specifies the internal nodes of an isolated subnet.</p>
        <p>The truncated DAG as constructed so far will not show such block structure, but two operations are available to produce the block structure:</p>
        <p>â¢ Rows and columns may be reordered. There is no penalty to this, as the ordering of internal metabolites inherited from the S-matrix is arbitrary.</p>
        <p>â¢ Internal metabolites may be reclassified as external and deleted from the adjacency matrices. This carries a penalty, as information is lost - the mass balance of the metabolite is not enforced any more. The DAG matrix needs to be recalculated in this case and usually has a different allocation of sinks and sources.</p>
      </sec>
      <sec>
        <title>Rearrangement of rows and columns</title>
        <p>The first step is to rearrange rows and columns so that metabolites belonging to a block are grouped together. For computational efficiency, operations described here are performed on a binary version of the truncated DAG matrix, on the grounds that it is the connectivity of the network that is relevant rather than detailed probabilities from the random walk. In a binary matrix with simple rectangular blocks, all rows/columns in a particular block are identical but are orthogonal to those in any other block. However, the definition of a block given previously allows zero elements inside a block as well, so this is relaxed to say that rows/columns belonging to a block needs to be similar to each other but dissimilar from those in other blocks - i.e., it reduces to a vector clustering problem. The Sokal-Sneath vector dissimilarity is used to quantify this, as discussed in more detail in the justifications section.</p>
        <p>Using this measure the rearrangement problem reduces to one of finding row and column sequences that give optimal clustering. Of various standard clustering methods that were considered the hierarchical clustering method [<xref ref-type="bibr" rid="B20">20</xref>] was found to be most suitable.</p>
        <p>Hierarchical clustering, as expressed in a dendrogram representation, has the advantage that - unlike most other clustering methods - it gives a definite sequence (the ordering of leaves in the dendrogram) while not committing to a fixed number or size of clusters. These can be subsequently determined by choosing a cutoff level in the dendrogram, a property exploited in the next stage of the procedure.</p>
        <p>Figure <xref ref-type="fig" rid="F2">2</xref> shows the result of reordering rows and columns in the truncated binary version of the matrix of Figure <xref ref-type="fig" rid="F1">1(b)</xref> according to an agglomerative hierarchical clustering using single linkage and the Sokal-Sneath dissimilarity criterion. The figure shows a far better organised structure with black regions identifying associations between metabolites groups, but no separated blocks. This is expected - reordering alone can only isolate blocks if the underlying network (after removal of externals) was already divided into disjoint subnets.</p>
        <fig id="F2" position="float">
          <label>Figure 2</label>
          <caption>
            <p><bold>Rearranged binary</bold>. Binary truncated DAG matrix, reordered according to hierarchical clustering of rows and columns. Clustering groups nodes with similar long range connections together, so that black areas that form the cores of latent block structures appear.</p>
          </caption>
          <graphic xlink:href="1752-0509-5-25-2"/>
        </fig>
      </sec>
      <sec>
        <title>Blocking transformation</title>
        <p>The next challenge is to identify latent blocks that can be separated in further processing. A crucial decision to be made is the optimal number, size and shape of blocks. Reordering alone as in Figure <xref ref-type="fig" rid="F2">2</xref>, does not give any obvious clues to whether many small blocks or fewer large ones will best represent the network.</p>
        <p>The decision is facilitated by introducing a <italic>blocking transformation </italic>that expresses the extent to which the hierarchical clusters succeed in defining blocks. The transformation proceeds in five steps:</p>
        <p>1. Truncating the column dendrogram at a particular chosen level, defines a collection of consecutive column clusters such as <italic>C </italic>= (1-3,4-8,9,10-11,...). In the matrix, these clusters define vertical bands. In row <italic>i </italic>of the rearranged, truncated DAG matrix with elements <italic>p</italic><sub>ij</sub>, we make the replacement</p>
        <p>
          <disp-formula id="bmcM1.3">
            <label>(1.3)</label>
            <mml:math id="M3" name="1752-0509-5-25-i3" overflow="scroll">
              <mml:mrow>
                <mml:msub>
                  <mml:mi>p</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>â</mml:mo>
                <mml:msub>
                  <mml:mi>r</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:mfrac>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mo>â</mml:mo>
                        <mml:mrow>
                          <mml:mi>j</mml:mi>
                          <mml:mo>â</mml:mo>
                          <mml:msub>
                            <mml:mi>C</mml:mi>
                            <mml:mi>j</mml:mi>
                          </mml:msub>
                        </mml:mrow>
                      </mml:munder>
                      <mml:mrow>
                        <mml:msub>
                          <mml:mi>b</mml:mi>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mo>â</mml:mo>
                        <mml:mi>j</mml:mi>
                      </mml:munder>
                      <mml:mrow>
                        <mml:msub>
                          <mml:mi>b</mml:mi>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                </mml:mfrac>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Here <italic>b</italic><sub>ij </sub>are the binary matrix elements and <italic>C</italic><sub>j </sub>is the column cluster to which column <italic>j </italic>belongs.</p>
        <p>In the case of a perfectly blocked matrix, all non-zero elements in a row will belong to the same unique cluster and their values are left unchanged at 1. Any zero element in the same cluster is replaced by 1, i.e. any gaps inside the cluster are filled in. All row elements in the remaining clusters will be, and remain, zero.</p>
        <p>However, for an imperfectly blocked matrix, any non-zero element outside the range of a particular cluster will serve to dilute the common value of elements inside the cluster to a fractional value. Hence in a gray-scale representation the row appears as a sequence of bands in different shades of grey; the darkest grey identifies the cluster containing the largest fraction of non-zero elements.</p>
        <p>Applying this transformation to all rows of the matrix in Figure <xref ref-type="fig" rid="F2">2</xref> produces the row blocking matrix shown in Figure <xref ref-type="fig" rid="F3">3(a)</xref>. Analogously, columns are blocked next:</p>
        <p>2. Truncating the row dendrogram at a particular chosen level, defines a collection of consecutive row clusters <italic>C</italic><sub>i</sub>. In column <italic>j </italic>of the rearranged, truncated DAG matrix, we make the replacement</p>
        <p>
          <disp-formula id="bmcM1.4">
            <label>(1.4)</label>
            <mml:math id="M4" name="1752-0509-5-25-i4" overflow="scroll">
              <mml:mrow>
                <mml:msub>
                  <mml:mi>p</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>â</mml:mo>
                <mml:msub>
                  <mml:mi>c</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:mfrac>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mo>â</mml:mo>
                        <mml:mrow>
                          <mml:mi>i</mml:mi>
                          <mml:mo>â</mml:mo>
                          <mml:msub>
                            <mml:mi>C</mml:mi>
                            <mml:mi>i</mml:mi>
                          </mml:msub>
                        </mml:mrow>
                      </mml:munder>
                      <mml:mrow>
                        <mml:msub>
                          <mml:mi>b</mml:mi>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mo>â</mml:mo>
                        <mml:mi>i</mml:mi>
                      </mml:munder>
                      <mml:mrow>
                        <mml:msub>
                          <mml:mi>b</mml:mi>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                </mml:mfrac>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <fig id="F3" position="float">
          <label>Figure 3</label>
          <caption>
            <p><bold>Blocking matrices</bold>. Transformed versions of the truncated binary matrix, constructed by (a) blocking rows (b) blocking columns (c) superimposing row and column blocking matrices (d) reordering rows and columns to consolidate blocks. Grey shades in effect expresses the degree to which rows conform to column grouping and vice versa. Combining these and optimising the clustering, expresses subnet cores visually as dark areas and overlaps by lighter shades.</p>
          </caption>
          <graphic xlink:href="1752-0509-5-25-3"/>
        </fig>
        <p>Application of this transformation to all columns similarly gives the column blocking matrix shown in Figure <xref ref-type="fig" rid="F3">3(b)</xref>.</p>
        <p>In a perfectly blocked matrix, blocks based on grouping rows or columns are identical, but the demonstration example shows that for imperfect blocking the row and column blocking matrices are similar but not identical. The next step superimposes the information from the two separate hierarchies.</p>
        <p>3. Combine row and column blocking matrices by elementwise averaging:</p>
        <p>
          <disp-formula id="bmcM1.5">
            <label>(1.5)</label>
            <mml:math id="M5" name="1752-0509-5-25-i5" overflow="scroll">
              <mml:mrow>
                <mml:msub>
                  <mml:mi>s</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:mstyle scriptlevel="+1">
                  <mml:mfrac>
                    <mml:mn>1</mml:mn>
                    <mml:mn>2</mml:mn>
                  </mml:mfrac>
                </mml:mstyle>
                <mml:mo stretchy="false">(</mml:mo>
                <mml:msub>
                  <mml:mi>r</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>+</mml:mo>
                <mml:msub>
                  <mml:mi>c</mml:mi>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                    <mml:mi>j</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo stretchy="false">)</mml:mo>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>The combined blocking matrix obtained in this way is shown in Figure <xref ref-type="fig" rid="F3">3(c)</xref>. In this matrix, grey shades again indicate deviations from perfect blocking - whether by leakage of amplitude from hierarchical clusters or by discrepancies between row and column blocking. Black areas, on the other hand, identify areas where all evidence from the grouping procedures agrees and that can plausibly be taken as cores for blocks still to be further delineated. Moreover, the gap filling effect mentioned above serves to highlight the intrinsically rectangular shape of blocks.</p>
        <p>An important aspect of the algorithm has been glossed over above. The dendrograms used in steps 1 and 2 define hierarchical lists of distances between subclusters. It is by choice of a particular cutoff value in each list (defining the minimal distance for subclusters to be recognised as separate) that one can choose between many smaller clusters or fewer larger ones.</p>
        <p>To exploit that, a quantitative criterion <italic>Q </italic>for the optimal blocking has been defined as detailed in the justifications section, leading to the next step:</p>
        <p>4. Calculate <italic>Q </italic>from equation (1.8) after repeating steps 1-3 for each of the trial list of cutoff values, and select the one that maximises Q.</p>
        <p>The blocking matrices shown in Figure <xref ref-type="fig" rid="F3">3(a)-(c)</xref> are those that maximise Q for the demonstration network and represent the visual structure of Figure <xref ref-type="fig" rid="F2">2</xref> quite well.</p>
        <p>However, there is still one noticeable deficiency in Figure <xref ref-type="fig" rid="F3">3(c)</xref>. Some blocks appear split - for example, there are two medium grey horizontal lines in the lower half of Figure <xref ref-type="fig" rid="F3">3(c)</xref> that each clearly belongs with the large dark areas directly above it. The reason for this is a conflict between similarity at the fine-grained (element) level used when grouping, and the coarse-grained (block) level that applies after blocking. This is rectified by the final step of the blocking transformation.</p>
        <p>5. Consolidate blocks by reordering rows and columns according to hierarchical clustering now applied to the combined blocking matrix.</p>
        <p>As Figure <xref ref-type="fig" rid="F3">3(d)</xref> shows, the final result of the blocking transformation gives a succinct and visually appealing overview of the size, shape and location of blocks, as well as indicating areas that produce block overlap.</p>
        <p>Finally, in order to computationally process individual subnets, automated recognition of separated blocks is required. This is a fairly straightforward image processing problem, and a heuristic procedure based on the block definition given above is described in Additional file <xref ref-type="supplementary-material" rid="S2">2</xref>. A side effect of the heuristic is that matrix rows and columns are rearranged once more, aligning recognised blocks along the matrix diagonal.</p>
      </sec>
    </sec>
    <sec>
      <title>Selection of separation nodes</title>
      <p>Having prepared the DAG matrix to express any underlying partial block structure, the procedure now enters an iterative loop in which in each round, a small number of nodes are identified that when "cut" (i.e., the corresponding metabolite is reclassified as external), will lead to separation into subnets. The goal is to keep this set of separation nodes as small as possible, both to minimise the loss of mass balance information and to preserve as far as possible the local structure of the full network.</p>
      <p>For example, applying block recognition scanning to the matrix of Figure <xref ref-type="fig" rid="F3">3(d)</xref>, recognises only the full matrix as a single block. That is also visually apparent - there are four or more latent blocks highlighted in black, but none are fully separated as signified by grey areas.</p>
      <p>For a number of reasons, it is postulated that the lighter grey cells in the figure are the most promising candidates for removal to induce separation. One rationale is that by construction they reflect a status as exceptions while the majority of cells in their row or column belong to the same group and end up as dark grey. Also, they tend to result from cases where there is already separation from the perspective of the row grouping and only weak overlap from the column grouping, or vice versa. Middle grey, on the other hand reflects either strong evidence from one of the groupings, or moderate consensus that may solidify once the weakest overlaps are removed. Also, there is some analogy to the effects of the "inflation" step of the MCL. In that method, "inflation" is produced by taking the Hadamard power of a probability matrix; that tends to suppress low probabilities and leads to the "weakest" links between node clusters to be removed first. These arguments can be made more elaborate, but in the final analysis the justification lies in the result obtained. As detailed in the justifications section, linear programming is used to select a small number of metabolites that optimally cover the lighter grey cells in the blocking matrix and propose these to the user as candidate externals.</p>
      <p>An example is illustrated in Figure <xref ref-type="fig" rid="F4">4(a)</xref> where this is applied to the case of the consolidated blocking matrix in Figure <xref ref-type="fig" rid="F3">3(d)</xref>. The picture shows that two columns, i.e. metabolites that produce block overlaps (separation nodes), are identified by solving equation (1.9). These metabolites are made external, i.e. they are deleted from the adjacency matrices <bold>RC </bold>and <bold>CR</bold>, the DAG matrix recalculated and the blocking transformation repeated to identify further candidates in a second round, and this iteration is continued until either sufficiently fine-grained splitting has been achieved, or no more separation nodes are found.</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Eliminating separation nodes</bold>. Blocking matrices as presented to the user for selecting separation nodes in subsequent rounds. Rows and columns proposed for cutting are highlighted in colour. (a) First round (b) Round 5 (c) Final result, after seven rounds and restoring all blocks and reincorporation of superfluous externals. The four non-overlapping blocks represent separation into four subnetworks, the largest two still showing minor internal structure.</p>
        </caption>
        <graphic xlink:href="1752-0509-5-25-4"/>
      </fig>
      <p>Figure <xref ref-type="fig" rid="F4">4(b)</xref> shows the result in selection round 5. The blocking matrix still shows only one block, but has decreased in size, firstly because of the removal of separation nodes. Also, at each round the algorithm inspects the blocking matrix for any non-overlapping block that consists of a single row or column, like the two middle blocks shown in Figure <xref ref-type="fig" rid="F4">4(c)</xref>. Such blocks cannot be split further, and are therefore removed from the blocking process to be restored later.</p>
      <p>Another case of such irreducible blocks that is usually encountered, is the appearance in the DAG matrix of isolated sinks or "orphans". These appear as entries in the top, diagonal section of the DAG matrix with no accompanying source node entries in the corresponding column of the truncated matrix used for blocking. Such an orphan metabolite node signifies the simplest possible subnet, with only a single internal metabolite, and typically containing only two reactions. As these can obviously not be further split and the presence of an empty column complicates block recognition, they are best eliminated in each round from the adjacency matrices along with single row/column irreducible blocks.</p>
    </sec>
    <sec>
      <title>Postprocessing and reconstruction of subnetworks</title>
      <p>Once the iterative process of progressively selecting separation nodes has terminated, the main outcome is a list of internal metabolites, partitioned into disjoint subsets that belong to each block. The remaining metabolites constitute a list of external metabolites. This list may contain entries that are not, in fact, essential for block separation. For example, a metabolite may have been made external during initialisation on the grounds that it participates in a large number of reactions, but if all of those reactions belong to the same subnet it should be reinstated as an internal metabolite in this subnet. Also, it can happen that the effects of a metabolite selected early on in the progressive selection process, are superseded by one selected later. In the interests of maintaining maximal network integrity compatible with the separation, all such superfluous externals need to be reincorporated before finalising the subnets.</p>
      <p>This is done in a loop that inspects the stoichiometry matrix for each external metabolite on the list, to determine all internal metabolites to which it connects by reaction links in either direction in the bipartite representation. If all those belong to a single block, the external metabolite is reincorporated into that block. If they belong to a single block, except for a connection to one or more orphan metabolite nodes, those orphan nodes are also reincorporated into the block as detailed below. As this reincorporation loop changes the composition of the lists of internal and external metabolites, the loop is repeated iteratively until there is no further change in the composition of the lists.</p>
      <p>The approach that was chosen to select separation nodes progressively, a few at a time, has the advantage that it allows the user to steer the network splitting by accepting or rejecting proposed separation nodes and terminating the process at the desired level of granularity. However, a disadvantage is that the results may become dependent on the order in which separation nodes are identified. That is counteracted by performing a one-off blocking step in which the full list of external metabolites are applied simultaneously. This step is performed as part of the post-processing done after the selection process is finished; but the question arises whether it should be done before or after the reincorporation step. Each choice has some advantages, and the most robust result is in fact achieved by repeating the reincorporation step. So the full post-processing procedure consists of the 3-step sequence: a first reincorporation step, then the one-off blocking, followed by a second reincorporation. Figure <xref ref-type="fig" rid="F4">4(c)</xref> shows the effects of the reincorporation for the demonstration network.</p>
      <p>Once the partitioned list of internal metabolites is finalised by this post-processing, the individual subnets can be reconstructed in a straightforward way from the original stoichiometry matrix <bold>S</bold>. For each subnet, all reactions in which its internal metabolites participate are extracted from <bold>S </bold>and allocated to this subnet. All metabolites that participate in these reactions are collected; those not appearing on the list of internals for the subnet, are by definition the external metabolites of the subnet. The submatrix of <bold>S </bold>pertaining to the reactions and metabolites so identified is extracted and saved in appropriate format as a full specification of the subnetwork, which can be further analysed by standard network analysis or FBA software tools.</p>
      <p>By construction, the internal metabolites of different subnets are mutually exclusive sets. External metabolites, on the other hand, are often shared between subnets. In the vast majority of cases, there is also no overlap between external metabolites of any subnet and the internals of any other.</p>
      <p>There are, however, rare exceptions where an external of one subnet is in fact an internal of another. This phenomenon can be considered an artefact of the way that the algorithm mainly operates on a reduced metabolites-only simple graph. At this level where the blocking procedure is carried out, there is a strict distinction between internal and external metabolites; they form non-overlapping sets. However, when translated back to the underlying bipartite graph representation, cutting all metabolite nodes that were identified as external, can sometimes still leave subnets connected by a shared reaction node.</p>
      <p>A typical case is shown in Figure <xref ref-type="fig" rid="F5">5(a)</xref>, where subnets A and B are connected by reaction node R1 which has input reactants <italic>a </italic>and <italic>b </italic>respectively from each subnet. Figure <xref ref-type="fig" rid="F5">5(b)</xref> shows the metabolites-only representation, where splitting node <italic>c </italic>by making metabolite <italic>c </italic>external will separate the subnets. But then, after the blocking procedure, the external metabolites of each subnet are found by collecting metabolites that participate in all the reactions in which each internal metabolite is involved. In the case of subnet A, both nodes <italic>b </italic>and <italic>c </italic>are connected to its internal node <italic>a </italic>by reaction R1 and will be added to its list of externals; and conversely, for subnet B, metabolite <italic>b </italic>is internal while <italic>a </italic>and <italic>c </italic>become externals.</p>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>Example of internal-external overlap between subnets</bold>. Subnets A and B, connected by a common product of reaction R1. Metabolite nodes are shown as squares and the reaction node as an octagon. (a) Bipartite representation of the network (b) Reduced metabolites only network. In (b) subnets are fully separated by making <italic>c </italic>external, but in (a) reaction R1 is included in subnet A to ensure full representation of the network environment of internal node <italic>a </italic>.Hence node <italic>b </italic>acts as an external for subnet A, but as internal for subnet B.</p>
        </caption>
        <graphic xlink:href="1752-0509-5-25-5"/>
      </fig>
      <p>The existence of this kind of limited overlap between two subnets does not compromise the integrity of either as a coherent subnet: it remains true that for all internal metabolites in a subnet, all reactions in which they participate are included in the subnet, and so the mass conservation constraints of all internal metabolites are identical in the subnet and in the full network. However, it does uniquely create the complication that the same reaction is present in both subnets, which can lead to conflicting values for the flux through this reaction in separate FBA calculations for each subnet. To avoid that, it may be preferred to merge the two subnets into a larger one when this exceptional case arises.</p>
      <p>It should also be noted that for a similar reason the reincorporation of orphan metabolite nodes is slightly more complicated than outlined above. By definition, an orphan node is isolated from all other internal nodes in terms of probability flow, but it could still be connected by a unidirectional link towards the orphan. Consequently, incorporation of an orphan takes place in two steps. When an external connected to an orphan metabolite node is incorporated into a block, the orphan is first promoted to an external of that block. In the next round of the incorporation loop, it is then tested for links to internals of other blocks and only incorporated as an internal if no such links in either direction is found.</p>
    </sec>
    <sec>
      <title>Detailed justifications</title>
      <sec>
        <title>Internal and external metabolites and network partitioning</title>
        <p>Conventionally, external nodes are placed on the periphery when drawing a network to indicate that they form the interface between the metabolic system that the network represents and its environment. However, the distinction between nodes that are associated with mass balance constraints (internal metabolites), and those that are not (external metabolites) is not apparent when the network topology is simply specified as a list of reactions. Most external metabolites can be recognised computationally by the fact that an external metabolite is either taken up or delivered to the environment so that all network links impinging on an external node are directed away from or towards the node; but in cases where the metabolite is exchanged with the environment that distinction is lost.</p>
        <p>A convention commonly used in FBA of metabolic networks [<xref ref-type="bibr" rid="B1">1</xref>] to keep track of externals, is to order the rows of the S-matrix so that internal metabolites appear first and externals last. Then the lack of stoichiometry constraints for externals is easily implemented by using only the top (internals) section of the matrix for FBA calculations.</p>
        <p>Another feature of representing a chemical network by a bipartite graph, is that as reaction nodes represent a chemical transformation of one or more reactants, reaction nodes can never be external.</p>
        <p>These issues become relevant for partitioning a network, because in isolating a subnetwork a new periphery is created for it. Severing the connection between the subnet and the rest of the network, some metabolites are received from or/and delivered to the rest of the network. Their mass balance can no longer be guaranteed by the subnet alone; in other words, the status of these metabolites is changed from internal to external. From a graph theory perspective, partitioning corresponds most naturally to deleting a link of a graph. However, that will not do for the biochemical network; in the bipartite representation, that would make a reaction node external, and it makes even less sense in the metabolites-only simple graph representation where a link represents a sum over several reactions. In clustering methods such as MCL, each node is allocated to a particular cluster, but that would not make sense here either as a metabolite that is made external by partitioning belongs to both subnets - as a product of one, and substrate of the other subnet. Clearly the appropriate way to represent partitioning is to split the metabolite node into two, each becoming an external node in either subnet. This leaves all reaction nodes as internal and uniquely assigned to a subnet. The effect of splitting a node is to stop probability flow through the node, and the simplest way to implement that in the matrix representation, is to delete the corresponding row from <bold>P</bold><sub>1 </sub>and hence ultimately from the DAG.</p>
        <p>The problem of partitioning the network hence reduces to finding a suitable (by criteria to be formulated) subset of internal metabolites such that when deleted, the network divides into self-contained subnets with no probability flow between them.</p>
        <p>Recognising that the algorithmically found externals are due to be deleted in this way, it follows that metabolites that are already external in the full network should similarly be deleted from <bold>P</bold><sub>1 </sub>even before the partitioning starts. This step in fact corresponds to the restriction of FBA calculations to the internal rows of the S-matrix as mentioned before. However, in the procedure presented here rows are deleted from the adjacency matrices <bold>CR </bold>and <bold>RC </bold>while <bold>S </bold>is left intact, so that the reaction stoichiometries can be used to restore the externals to each subnet once partitioning is complete.</p>
      </sec>
      <sec>
        <title>Vector clustering</title>
        <p>A quantitative measure of dissimilarity <italic>d </italic>for binary vectors can be based on the formula</p>
        <p>
          <disp-formula id="bmcM1.6">
            <label>(1.6)</label>
            <mml:math id="M6" name="1752-0509-5-25-i6" overflow="scroll">
              <mml:mrow>
                <mml:mi>d</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mfrac>
                  <mml:mrow>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>01</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>10</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>01</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:mi>a</mml:mi>
                    <mml:mtext>â</mml:mtext>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>11</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:mi>b</mml:mi>
                    <mml:mtext>â</mml:mtext>
                    <mml:msub>
                      <mml:mi>n</mml:mi>
                      <mml:mrow>
                        <mml:mn>00</mml:mn>
                      </mml:mrow>
                    </mml:msub>
                  </mml:mrow>
                </mml:mfrac>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Here, corresponding elements in two equal length binary vectors are paired, and <italic>n</italic><sub>ij </sub>is the number of pairs with value (<italic>i</italic>,<italic>j</italic>). Commonly used such measures are known as Matching (<italic>a </italic>= 1, <italic>b </italic>= 1), Jaccard (<italic>a </italic>= 1, <italic>b </italic>= 0), Sokal-Sneath (<italic>a </italic>= 1/2, <italic>b </italic>= 0), Rogers-Tanimoto (<italic>a </italic>= 1/2, <italic>b </italic>= 1/2) and Dice (<italic>a </italic>= 2, <italic>b </italic>= 0) dissimilarities. Experimentation with all of these in the present context has shown that Matching and Rogers-Tanimoto give low contrast. Dice, Jaccard and Sokal-Sneath are similar but the best contrast and hence block identification is obtained with Sokal-Sneath dissimilarity.</p>
        <p>Hierarchical clustering in addition needs a measure for the distance between clusters (a "linkage criterion"), and again several common measures were tried: single linkage (minimum intercluster dissimilarity), complete (maximum intercluster dissimilarity), average dissimilarity, dissimilarity of cluster centroids or medians, and finally the Ward minimum variance criterion. Single linkage was found to be both fast to calculate and gives good contrast; average, centroid and median are slower but give similar results, while complete and Ward lead to excessive fragmentation of the network.</p>
        <p>Clustering of the combined blocking matrix in step 5 of the blocking transformation is performed broadly as described for the DAG. However since the combined blocking matrix can contain fractional values, the binary dissimilarity measure described by equation (1.6) is replaced by a generalisation of the Dice dissimilarity to real values and known as the Bray-Curtis distance between vectors <italic>a </italic>and <italic>b</italic>:</p>
        <p>
          <disp-formula id="bmcM1.7">
            <label>(1.7)</label>
            <mml:math id="M7" name="1752-0509-5-25-i7" overflow="scroll">
              <mml:mrow>
                <mml:mi>d</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mfrac>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:mo>â</mml:mo>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mo>|</mml:mo>
                          <mml:mrow>
                            <mml:msub>
                              <mml:mi>a</mml:mi>
                              <mml:mi>i</mml:mi>
                            </mml:msub>
                            <mml:mo>â</mml:mo>
                            <mml:msub>
                              <mml:mi>b</mml:mi>
                              <mml:mi>i</mml:mi>
                            </mml:msub>
                          </mml:mrow>
                          <mml:mo>|</mml:mo>
                        </mml:mrow>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:mo>â</mml:mo>
                      <mml:mrow>
                        <mml:mrow>
                          <mml:mo>|</mml:mo>
                          <mml:mrow>
                            <mml:msub>
                              <mml:mi>a</mml:mi>
                              <mml:mi>i</mml:mi>
                            </mml:msub>
                            <mml:mo>+</mml:mo>
                            <mml:msub>
                              <mml:mi>b</mml:mi>
                              <mml:mi>i</mml:mi>
                            </mml:msub>
                          </mml:mrow>
                          <mml:mo>|</mml:mo>
                        </mml:mrow>
                      </mml:mrow>
                    </mml:mstyle>
                  </mml:mrow>
                </mml:mfrac>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
      </sec>
      <sec>
        <title>Blocking quality</title>
        <p>Experimentation with various possibilities yielded the following scoring formula for the blocking quality <italic>Q </italic>of an (IÃJ) combined blocking matrix:</p>
        <p>
          <disp-formula id="bmcM1.8">
            <label>(1.8)</label>
            <mml:math id="M8" name="1752-0509-5-25-i8" overflow="scroll">
              <mml:mrow>
                <mml:mi>Q</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:msup>
                  <mml:mrow>
                    <mml:mrow>
                      <mml:mo>(</mml:mo>
                      <mml:mrow>
                        <mml:mfrac>
                          <mml:mrow>
                            <mml:mstyle displaystyle="true">
                              <mml:munder>
                                <mml:mo>â</mml:mo>
                                <mml:mrow>
                                  <mml:mi>i</mml:mi>
                                  <mml:mo>,</mml:mo>
                                  <mml:mi>j</mml:mi>
                                </mml:mrow>
                              </mml:munder>
                              <mml:mrow>
                                <mml:msub>
                                  <mml:mi>c</mml:mi>
                                  <mml:mrow>
                                    <mml:mi>i</mml:mi>
                                    <mml:mi>j</mml:mi>
                                  </mml:mrow>
                                </mml:msub>
                              </mml:mrow>
                            </mml:mstyle>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>I</mml:mi>
                            <mml:mtext>â</mml:mtext>
                            <mml:mi>J</mml:mi>
                            <mml:mo>â</mml:mo>
                            <mml:mi>W</mml:mi>
                          </mml:mrow>
                        </mml:mfrac>
                      </mml:mrow>
                      <mml:mo>)</mml:mo>
                    </mml:mrow>
                  </mml:mrow>
                  <mml:mn>2</mml:mn>
                </mml:msup>
                <mml:mfrac>
                  <mml:mi>W</mml:mi>
                  <mml:mrow>
                    <mml:mi>I</mml:mi>
                    <mml:mtext>â</mml:mtext>
                    <mml:mi>J</mml:mi>
                  </mml:mrow>
                </mml:mfrac>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Here, W is the total number of zero (white) elements in the matrix. The two factors in this formula express distinct features that seem qualitatively reasonable to judge the quality of the blocking matrix. The first, squared, factor would be 1 if all non-zero elements are 1 (black) and decreases when there are more and lighter grey cells; so it is a measure of "how black" the block parts of the matrix is. On its own, however, maximising this tends to favour a small number of large blocks because that makes it easier to capture all the non-zero values inside blocks. To counteract that, the second factor represents the fraction of cells that are white, so this tends to be maximised by keeping blocks as compact as possible. It clear that for a perfectly blocked matrix, a maximum <italic>Q </italic>value <italic>Q</italic><sub>max </sub>&lt; 1 will be achieved if the cutoff produces clustering that coincides exactly with the blocks.</p>
        <p>In an imperfectly blocked matrix, adjusting the dendrogram cutoff gives unpredictable fluctuations in the <italic>Q </italic>value and so a search method is necessary to maximise <italic>Q</italic>. Three strategies are employed to keep this manageable. First, as the number of recognised clusters only changes when the cutoff rises above an actual intercluster distance value in the dendrogram, the search space is restricted to a trial list of discrete cutoffs falling midway between values in the ordered intercluster distance list. Second, the same cutoff value is applied to both the row and column dendrograms. Although it constrains the flexibility of the search, this helps to avoid large disparities in the number of clusters for rows and columns (which ideally should be equal) despite the fact that the truncated DAG matrix generally has far more rows than columns. To implement that, the intercluster distance lists for rows and columns are merged before selecting midpoints. Finally, bearing in mind that distance values from equation (1.6) fall between 0 and 1, the discrete list of trial cutoffs is truncated to values in the range [0.2,0.7]. This avoids either very few or very many blocks that would not be desirable for subnet partitioning and rarely produce high <italic>Q </italic>scores anyway.</p>
      </sec>
      <sec>
        <title>Optimal selection of separator nodes</title>
        <p>To implement the recognition of light grey cells in the blocking matrix as most promising for eliminating block overlap while keeping the metabolites taken as external to a minimum, the strategy is to select the smallest set of rows and columns that together cover all matrix cells with values below a chosen threshold. The threshold is determined as the value that selects a total number of light grey cells, no more than a low multiple of the column dimension of the matrix. This gives a flexible threshold value adapted to the size and nature of the matrix, which will lead to only a few metabolites eliminated at a time before checking for adequate subnet separation.</p>
        <p>As any light grey cell could be eliminated by taking either its row or column metabolite external, the optimal selection from both sets is determined by reformulating this as an integer linear programming (ILP) problem. To set that up mathematically, introduce a binary column vector <bold>x </bold>of dimension = number of internal metabolites. Each vector element is 1 or 0 according to whether the corresponding metabolite is selected. The total number selected is obtained by premultiplying <bold>x </bold>with a row vector <bold>b </bold>of the same dimension with all elements equal to 1. The constraints are that for each light grey element <italic>s</italic><sub>ij </sub>included, either its row or column or both needs to be present in <bold>x</bold>. That is codified by a constraints matrix <bold>A </bold>in which each row corresponds to a light grey cell, and in such a row the only non-zero elements are 1's for the columns corresponding to <italic>i </italic>and <italic>j</italic>. Then the ILP problem is:</p>
        <p>
          <disp-formula id="bmcM1.9">
            <label>(1.9)</label>
            <mml:math id="M9" name="1752-0509-5-25-i9" overflow="scroll">
              <mml:mrow>
                <mml:mtext>Minimize</mml:mtext>
                <mml:mtext>â</mml:mtext>
                <mml:mi mathvariant="bold">b</mml:mi>
                <mml:mo>â</mml:mo>
                <mml:mi mathvariant="bold">x</mml:mi>
                <mml:mtext>â</mml:mtext>
                <mml:mtext>subjectÂ to</mml:mtext>
                <mml:mtext>â</mml:mtext>
                <mml:mi mathvariant="bold">A</mml:mi>
                <mml:mo>â</mml:mo>
                <mml:mi mathvariant="bold">x</mml:mi>
                <mml:mo>â¥</mml:mo>
                <mml:mi mathvariant="bold">b</mml:mi>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>This problem is to be solved in the domain of binary vectors, and is guaranteed to be feasible, since all constraints are satisfied by <bold>x </bold>= <bold>b</bold>. Solution by standard methods typically yields small sets of selected metabolites.</p>
      </sec>
    </sec>
    <sec>
      <title>A quantitative measure of overall splitting effectiveness</title>
      <p>The goal of subnet splitting is to reduce the complexity of interpretation (mentally or by further computation) by reducing the size of networks that need to be considered. It is shown here that a robust quantitative measure of how effective a particular splitting procedure is in achieving this goal can be developed under quite general assumptions.</p>
      <p>The original network constitutes the obvious lower limit of simplification. In the opposite extreme where the network is fragmented into subnets consisting of a single node each, no overall simplification has been achieved either: while the subnets are simple, their interconnections reconstitute exactly the original network. This suggests that to judge overall effectiveness, the subnets should be considered together with a "metanetwork" which is derived from the original network by contracting the internal nodes of each subnetwork to a single meta-node. It should then be possible to construct a measure that evaluates to zero at the two extremes, and reaches at least one maximum at a suitable intermediate network partitioning.</p>
      <p>To quantify the concept of simplification, it useful to introduce a monotonically increasing function <italic>f</italic>(<italic>n</italic>) that represents the effort to interpret a network with <italic>n </italic>internal nodes. Having split a network with <italic>N </italic>internal nodes into <italic>k </italic>subnets, each with <italic>n<sub>i </sub></italic>internal nodes, the metanet has <italic>k </italic>nodes and the total effort <italic>F </italic>to interpret the metanetwork and all the subnets is then given by</p>
      <p>
        <disp-formula id="bmcM1.10">
          <label>(1.10)</label>
          <mml:math id="M10" name="1752-0509-5-25-i10" overflow="scroll">
            <mml:mrow>
              <mml:mi>F</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mover accent="true">
                <mml:mi>n</mml:mi>
                <mml:mo>â</mml:mo>
              </mml:mover>
              <mml:mo>,</mml:mo>
              <mml:mi>k</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
              <mml:mo>=</mml:mo>
              <mml:mi>f</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mi>k</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
              <mml:mo>+</mml:mo>
              <mml:mi>W</mml:mi>
              <mml:munderover>
                <mml:mstyle displaystyle="true" mathsize="140%">
                  <mml:mo>â</mml:mo>
                </mml:mstyle>
                <mml:mrow>
                  <mml:mi>i</mml:mi>
                  <mml:mo>=</mml:mo>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
                <mml:mi>k</mml:mi>
              </mml:munderover>
              <mml:mtext>â</mml:mtext>
              <mml:mi>f</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:msub>
                <mml:mi>n</mml:mi>
                <mml:mi>i</mml:mi>
              </mml:msub>
              <mml:mo stretchy="false">)</mml:mo>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>and this is subject to the constraint <inline-formula><mml:math id="M11" name="1752-0509-5-25-i11" overflow="scroll"><mml:mrow><mml:mstyle displaystyle="true"><mml:mo>â</mml:mo><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:mstyle></mml:mrow></mml:math></inline-formula>. With a weight <italic>W </italic>= 1, equation (1.10) represents the effort to interpret the metanet and all subnets; choosing <italic>W </italic>= 1/<italic>k </italic>is relevant to the case where a single subnet and its interconnections to other subnets are of interest. The latter case is algebraically simplest so is considered first.</p>
      <p>The term "effort" is used to emphasize that this is not about network complexity as such. Many sophisticated measures of network or graph complexity have been defined by various authors, and network size usually does not play an important part in this - for example, both a square lattice and a fully connected network are conceptually simple, irrespective of size. Also, biochemical networks are known to be scale-free (having a power law distribution of node connectivity) and so complexity measures should give a similar value when applied to the full network and its subnetworks.</p>
      <p>For a given <italic>k</italic>, it follows by straightforward differentiation of equation (1.10) that the constrained minimisation of <italic>F </italic>is achieved by choosing all subnets of equal size, i.e. <italic>n</italic><sub>i </sub>= <italic>N</italic>/<italic>k </italic>, provided that <italic>f</italic>(<italic>n</italic>) is concave up, i.e. increases monotonically faster than <italic>n</italic>. This is quite reasonable, considering that the number of reaction links in a metabolic network rises approximately quadratically with the number of internal metabolites and the number of pathways to be interpreted much faster than that.</p>
      <p>Moreover, setting <italic>n</italic><sub>i </sub>= <italic>N</italic>/<italic>k </italic>into (1.10) shows that the minimum is achieved at the optimal number of subnets <italic>k </italic>= <inline-formula><mml:math id="M12" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula>, irrespective of the functional form of <italic>f</italic>. This result makes intuitive sense, as it implies that all subnets and the metanet have the same number <italic>n<sub>i </sub></italic>= <inline-formula><mml:math id="M13" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> of internal nodes, so the interpretative effort is spread equally across them all. The value of <italic>F </italic>at its minimum is given by the simple formula</p>
      <p>
        <disp-formula id="bmcM1.11">
          <label>(1.11)</label>
          <mml:math id="M14" name="1752-0509-5-25-i13" overflow="scroll">
            <mml:mrow>
              <mml:msub>
                <mml:mi>F</mml:mi>
                <mml:mi>l</mml:mi>
              </mml:msub>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mi>N</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
              <mml:mo>=</mml:mo>
              <mml:mn>2</mml:mn>
              <mml:mi>f</mml:mi>
              <mml:mrow>
                <mml:mo>(</mml:mo>
                <mml:mrow>
                  <mml:msqrt>
                    <mml:mi>N</mml:mi>
                  </mml:msqrt>
                </mml:mrow>
                <mml:mo>)</mml:mo>
              </mml:mrow>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>When <inline-formula><mml:math id="M15" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> is not integer, this minimum cannot actually be reached, but it still serves as a lower limit to the range of <italic>F</italic>, while the upper limit is obviously <italic>F</italic><sub>u</sub>(<italic>N</italic>) = <italic>f</italic>(<italic>N</italic>). In these terms the goal of partitioning can be formulated as finding a vector <inline-formula><mml:math id="M16" name="1752-0509-5-25-i14" overflow="scroll"><mml:mrow><mml:mover accent="true"><mml:mi>n</mml:mi><mml:mo>â</mml:mo></mml:mover><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mn>...</mml:mn><mml:msub><mml:mi>n</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> that comes as close as possible to <italic>F<sub>l</sub></italic>, having started from <italic>F</italic><sub>u</sub>. This leads to defining a performance measure (designated as the <italic>efficacy</italic>) as</p>
      <p>
        <disp-formula id="bmcM1.12">
          <label>(1.12)</label>
          <mml:math id="M17" name="1752-0509-5-25-i15" overflow="scroll">
            <mml:mrow>
              <mml:mi>E</mml:mi>
              <mml:mo>=</mml:mo>
              <mml:mn>100</mml:mn>
              <mml:mfrac>
                <mml:mrow>
                  <mml:mi>L</mml:mi>
                  <mml:mi>o</mml:mi>
                  <mml:mi>g</mml:mi>
                  <mml:mrow>
                    <mml:mo>[</mml:mo>
                    <mml:mrow>
                      <mml:mi>f</mml:mi>
                      <mml:mo stretchy="false">(</mml:mo>
                      <mml:mi>N</mml:mi>
                      <mml:mo stretchy="false">)</mml:mo>
                    </mml:mrow>
                    <mml:mo>]</mml:mo>
                  </mml:mrow>
                  <mml:mo>â</mml:mo>
                  <mml:mi>L</mml:mi>
                  <mml:mi>o</mml:mi>
                  <mml:mi>g</mml:mi>
                  <mml:mrow>
                    <mml:mo>[</mml:mo>
                    <mml:mrow>
                      <mml:mi>F</mml:mi>
                      <mml:mrow>
                        <mml:mo>(</mml:mo>
                        <mml:mrow>
                          <mml:mover accent="true">
                            <mml:mi>n</mml:mi>
                            <mml:mo>â</mml:mo>
                          </mml:mover>
                          <mml:mo>,</mml:mo>
                          <mml:mi>k</mml:mi>
                        </mml:mrow>
                        <mml:mo>)</mml:mo>
                      </mml:mrow>
                    </mml:mrow>
                    <mml:mo>]</mml:mo>
                  </mml:mrow>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>L</mml:mi>
                  <mml:mi>o</mml:mi>
                  <mml:mi>g</mml:mi>
                  <mml:mrow>
                    <mml:mo>[</mml:mo>
                    <mml:mrow>
                      <mml:mi>f</mml:mi>
                      <mml:mo stretchy="false">(</mml:mo>
                      <mml:mi>N</mml:mi>
                      <mml:mo stretchy="false">)</mml:mo>
                    </mml:mrow>
                    <mml:mo>]</mml:mo>
                  </mml:mrow>
                  <mml:mo>â</mml:mo>
                  <mml:mi>L</mml:mi>
                  <mml:mi>o</mml:mi>
                  <mml:mi>g</mml:mi>
                  <mml:mrow>
                    <mml:mo>[</mml:mo>
                    <mml:mrow>
                      <mml:mn>2</mml:mn>
                      <mml:mi>f</mml:mi>
                      <mml:mrow>
                        <mml:mo>(</mml:mo>
                        <mml:mrow>
                          <mml:msqrt>
                            <mml:mi>N</mml:mi>
                          </mml:msqrt>
                        </mml:mrow>
                        <mml:mo>)</mml:mo>
                      </mml:mrow>
                    </mml:mrow>
                    <mml:mo>]</mml:mo>
                  </mml:mrow>
                </mml:mrow>
              </mml:mfrac>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>This may be interpreted as the percentage of the distance between the upper and lower limits that has been achieved by a given partitioning, as measured on a logarithmic plot. Use of logarithmic scaling is not conceptually essential but helps to smooth the distribution of efficacy values when <italic>f </italic>is a fast-rising function.</p>
      <p>It is easily checked that <italic>E </italic>evaluates to zero for the original network and could even reach a slightly negative value for the case of complete fragmentation, while it gives 100% if the optimum <italic>k </italic>= <italic>n</italic><sub>i </sub>= <inline-formula><mml:math id="M18" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> is reached.</p>
      <p>To get concrete values, a power law assumption produces the required concave up behaviour while still allowing the actual rate of increase to be adjusted:</p>
      <p>
        <disp-formula id="bmcM1.13">
          <label>(1.13)</label>
          <mml:math id="M19" name="1752-0509-5-25-i16" overflow="scroll">
            <mml:mrow>
              <mml:mi>f</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mi>N</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
              <mml:mo>=</mml:mo>
              <mml:mi>Î±</mml:mi>
              <mml:msup>
                <mml:mi>N</mml:mi>
                <mml:mi>p</mml:mi>
              </mml:msup>
              <mml:mtext>â</mml:mtext>
              <mml:mo>;</mml:mo>
              <mml:mtext>â</mml:mtext>
              <mml:mi>p</mml:mi>
              <mml:mo>&gt;</mml:mo>
              <mml:mn>1</mml:mn>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>A value <italic>p </italic>= 2 to reflect the size of the adjacency matrix that fully specifies the network seems reasonable, but the choice is left open for now. The proportionality constant <italic>Î± </italic>cancels out in constructing (1.12) so is suppressed in what follows.</p>
      <p>The efficacy curves calculated from equations (1.12) and (1.13) for equal-sized subnets, at subnet counts <italic>k </italic>ranging from 1 to <italic>N</italic>, are shown in Figure <xref ref-type="fig" rid="F6">6</xref> for <italic>p </italic>= 1.5 and <italic>p </italic>= 10. With a smooth variation and quite a steep gradient, in particular near the optimal subnet count, <italic>E </italic>gives a sensitive measure of how well a particular network split performs in terms of its subnet count. The figure also shows that this behaviour is almost independent of the <italic>p</italic>-value, with higher values merely sharpening the maximum slightly.</p>
      <fig id="F6" position="float">
        <label>Figure 6</label>
        <caption>
          <p><bold>Efficacy curves</bold>. Efficacy % as function of subnet count <italic>k </italic>for equal size subnets from a network with <italic>N </italic>= 1000 internal nodes. Top (blue) curve is for a power law with <italic>p </italic>= 1.5, lower (red) curve for <italic>p </italic>= 10. The curve peaks sharply at <italic>k </italic>= <inline-formula><mml:math id="M20" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> but is insensitive to <italic>p</italic>.</p>
        </caption>
        <graphic xlink:href="1752-0509-5-25-6"/>
      </fig>
      <p>The main significance of the <italic>p</italic>-value is in determining the discrimination between partitionings with the same <italic>k</italic>, but homogeneous versus distributed subnet sizes. Raising the power value increases the dominance of larger subnets over smaller ones in the summation term of equation (1.10), which tends to lower the efficacy value for a split with a large spectrum of subnet sizes.. Experimenting with various networks has shown that for large networks <italic>p </italic>values in the range 6 to 8 are required to adequately discriminate between network splits that are dominated by large subnets, and those with more even size distributions. For small networks the available range of subnet sizes is correspondingly small and the value of <italic>p </italic>less important. The best results are obtained by adjusting <italic>p </italic>to the network size, and the following empirical formula performs this adequately:</p>
      <p>
        <disp-formula id="bmcM1.14">
          <label>(1.14)</label>
          <mml:math id="M21" name="1752-0509-5-25-i17" overflow="scroll">
            <mml:mrow>
              <mml:mi>p</mml:mi>
              <mml:mo>=</mml:mo>
              <mml:mn>0.25</mml:mn>
              <mml:msqrt>
                <mml:mi>N</mml:mi>
              </mml:msqrt>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>This formula is merely a calibration of the efficacy scale and has no fundamental significance. The results below illustrate its effects.</p>
      <p>It is finally noted that the efficacy measure is constructed quite independently of the Netsplitter method; as its only required input is a list of subnet sizes, it can equally well be applied to diverse partitioning algorithms.</p>
    </sec>
  </sec>
  <sec>
    <title>Results</title>
    <p>The results obtained from the Netsplitter procedure are illustrated by considering the problem of investigating the flavonoid metabolism of the model plant <italic>Arabidopsis thaliana</italic>. The complete network was obtained by extracting all stoichiometrically balanced reactions from the Aracyc 4.5 database as curated by the Arabidopsis Information Resource (TAIR) [<xref ref-type="bibr" rid="B19">19</xref>] and contains 1468 reactions and 1348 metabolites. Reaction directions and reversibilities were assigned in accordance with the pathways and enzymes tables of the database. It is not intended as a definitive metabolic network for the organism (no further curation e.g. using flux balance calculations was done) but for the demonstration purpose it is considered adequately representative of genome scale metabolic networks. The specification of this network in SBML format is available as Additional File <xref ref-type="supplementary-material" rid="S3">3</xref>.</p>
    <p>For comparison, Figure <xref ref-type="fig" rid="F7">7</xref> first shows the performance of the simple connection degree partitioning [<xref ref-type="bibr" rid="B13">13</xref>] for various threshold values. Visual representation of the DAG matrix is as in Figure <xref ref-type="fig" rid="F1">1</xref>, but elaborated here by the addition of a blue background that displays automatically recognised block limits.</p>
    <fig id="F7" position="float">
      <label>Figure 7</label>
      <caption>
        <p><bold>Matrix visualisation of simple connection degree network partitioning</bold>. DAG matrix for genome-scale network of <italic>Arabidopsis thaliana </italic>after applying connection degree partitioning with different cutoffs. Subnetworks are displayed as non-overlapping blocks (coloured pixels on blue background) for connectivity threshold value (a) 20 (b) 10 (c) 5 and (d) 4. Large values leave a monolithic unresolved block, while small cutoffs produce extensive fragmentation.</p>
      </caption>
      <graphic xlink:href="1752-0509-5-25-7"/>
    </fig>
    <p>For a large threshold value of 20, Figure <xref ref-type="fig" rid="F7">7(a)</xref> shows that only a few small blocks are split off from the main block that still contains more than 90% of all internal metabolites. As observed in the demonstration example, internal structure in this large block is not resolved. Reducing the cutoff threshold to a value of 5 used in previous work [<xref ref-type="bibr" rid="B13">13</xref>,<xref ref-type="bibr" rid="B14">14</xref>], the internal structure is well resolved but the main block still contains 20% of all metabolites. Reducing the threshold still further to 4 finally avoids the domination of a single large block, but at the cost of fragmenting the network into 164 very small blocks containing only 4 internal metabolites on average.</p>
    <p>Figure <xref ref-type="fig" rid="F8">8</xref> shows that the netsplitter algorithm achieves a much more even distribution of subnet sizes. Using the same initial threshold value of 10 shown in Figure <xref ref-type="fig" rid="F7">7(b)</xref> but supplementing this with a targeted list of general external metabolites as specified in Additional File <xref ref-type="supplementary-material" rid="S4">4</xref>, has the effect shown in Figure <xref ref-type="fig" rid="F8">8(a)</xref> of resolving the internal structure of the initial main block. The netsplitter algorithm exploits this internal structure to split it progressively. In its first round, a medium sized block which turns out to contain all flavonoid compounds is split off as seen in Figure <xref ref-type="fig" rid="F8">8(b)</xref>. For the purpose outlined above the procedure can be terminated at this point, and this subnet extracted for further study as was done to create the flavonoid demonstration network used above. However, if the procedure is allowed to run its course, the final result is shown in Figure <xref ref-type="fig" rid="F8">8(c)</xref>. There is a substantial improvement, in that rather than a single large block, there are several medium sized ones. Quantitatively, 66% of all internal metabolites are captured in the 10 largest blocks which range in size between 20 and 76 internal metabolites. There is still some fragmentation, with the remaining 34% spread over 68 small blocks containing 3.6 metabolites on average. Some fragmentation is probably inevitable when making cuts to a network, but future work will be aimed at reducing this to a minimum.</p>
    <fig id="F8" position="float">
      <label>Figure 8</label>
      <caption>
        <p><bold>Stages in partitioning the network by the netsplitter procedure</bold>. <italic>Arabidopsis thaliana </italic>network (a) After application of connectivity threshold 10 and external metabolite list only (b) After first round of separation node selection (c) Final result after 29 selection rounds. Most of the network is partitioned into medium sized to small subnets, with some fragmentation remaining.</p>
      </caption>
      <graphic xlink:href="1752-0509-5-25-8"/>
    </fig>
    <p>The reincorporation step is important to keep the number of externals as low as possible. For example, in the full <italic>Arabidopsis </italic>network, 17 of the 57 high connectivity externals and 12 of the 22 orphan metabolite nodes created by taking a connectivity degree threshold of 10, can be reincorporated without disturbing the block structure in Figure <xref ref-type="fig" rid="F8">8(a)</xref>. When the netsplitter algorithm is subsequently applied, these numbers are reduced because of the increased partitioning achieved, but in turn 112 of the 150 externals proposed during the course of externals selection rounds are in fact reincorporated in the final stage. Even in the case of the small flavonoid network where only a single separation round is needed producing 8 proposed externals, 6 of these get reincorporated leaving only two separation nodes. The overall effect is that in both cases less than 5% of the significant mass balance constraints in the full network are sacrificed to decompose it into subnetworks.</p>
    <p>It is also instructive to see the action of the netsplitter procedure in an explicit network diagram. The actual layout of the flavonoid demonstration network, for which stages in the procedure were traced out in matrix form in Figure <xref ref-type="fig" rid="F1">1</xref> to <xref ref-type="fig" rid="F4">4</xref>, is shown in Figure <xref ref-type="fig" rid="F9">9</xref>. A larger version of this figure identifying the metabolites is available as Additional File <xref ref-type="supplementary-material" rid="S5">5</xref>.</p>
    <fig id="F9" position="float">
      <label>Figure 9</label>
      <caption>
        <p><bold>Example flavonoid network split into four subnetworks</bold>. Simplified layout omitting commodity and currency metabolites, to show partitioning into 6 subnetworks by converting the two separator metabolites identified by Netsplitter from internal to external. Reactions are shown as arrows or small circles. Metabolites are shown as rectangles or ovals, colour coded as follows: white - external; yellow, green, blue, purple: subnetwork internals; red - separation nodes, light blue - orphan metabolite nodes. The reaction indicated by "X" is eliminated from the network because after conversion it only involves external metabolites. A fully labelled version of this figure is available in Additional File <xref ref-type="supplementary-material" rid="S5">5</xref>.</p>
      </caption>
      <graphic xlink:href="1752-0509-5-25-9"/>
    </fig>
    <p>The algorithm identifies two separation nodes in this case - the metabolites trans-cinnamate and coumaroyl-CoA (shown in red); cutting these, the network falls apart into four natural subnets, plus two small fragments or "orphans". By inspection of the metabolite names (not shown in the figure) the subnets can be identified as synthesis of flavonoids (purple), lignin precursors (green), benzenoids (blue) and coumarin (yellow). While in this relatively small network it may have been possible (although not easy) to identify these separators by inspection, it should be borne in mind that much of the work to group nodes coherently has already been done in the manual construction of the two-dimensional layout displayed. In a realistic example, the input to the algorithm is merely arbitrarily ordered lists of metabolites and reactions, making the task much harder.</p>
    <p>To place the results in a more general perspective, Table <xref ref-type="table" rid="T1">1</xref> compares efficacy values for various cutoff values in simple connectivity-based partitioning [<xref ref-type="bibr" rid="B13">13</xref>,<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B16">16</xref>], with Netsplitter results applied to four different networks of increasing size. In addition to the flavonoid demonstration network and the genome scale model plant <italic>Arabidopsis </italic>discussed in detail above, genome scale networks for a simple bacterial species and a mammal are included. The first of these is a metabolic model for <italic>M. pneumoniae </italic>recently published by Yus et al [<xref ref-type="bibr" rid="B21">21</xref>]. Details of the application of Netsplitter to this model has been published elsewhere [<xref ref-type="bibr" rid="B22">22</xref>] and is shown there to give a partitioning that is virtually identical to the assignment by Yus et al of pathways to functional blocks, based on biochemical knowledge. The second is a model for <italic>Mus musculus </italic>validated by FBA [<xref ref-type="bibr" rid="B23">23</xref>].</p>
    <table-wrap id="T1" position="float">
      <label>Table 1</label>
      <caption>
        <p>Efficacy values</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <th/>
            <th align="center">Flavonoid</th>
            <th align="center">
              <italic>M. pneumon</italic>
            </th>
            <th align="center"><italic>Arabid. t</italic>.</th>
            <th align="center">
              <italic>M. musculus</italic>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="center">S-matrix size</td>
            <td align="center">137 Ã 117</td>
            <td align="center">189 Ã 229</td>
            <td align="center">1468 Ã 1348</td>
            <td align="center">2016 Ã 2158</td>
          </tr>
          <tr>
            <td colspan="5">
              <hr/>
            </td>
          </tr>
          <tr>
            <td align="center"><italic>p</italic>-value</td>
            <td align="center">2.1</td>
            <td align="center">2.8</td>
            <td align="center">7.2</td>
            <td align="center">7.6</td>
          </tr>
          <tr>
            <td colspan="5">
              <hr/>
            </td>
          </tr>
          <tr>
            <td align="left">Threshold</td>
            <td align="center" colspan="2">
              <italic>High connectivity cutoff method</italic>
            </td>
            <td/>
            <td/>
          </tr>
          <tr>
            <td align="center">20</td>
            <td align="center">0</td>
            <td align="center">33</td>
            <td align="center">18</td>
            <td align="center">25</td>
          </tr>
          <tr>
            <td align="center">10</td>
            <td align="center">19</td>
            <td align="center">33</td>
            <td align="center">24</td>
            <td align="center">32</td>
          </tr>
          <tr>
            <td align="center">8</td>
            <td align="center">19</td>
            <td align="center">33</td>
            <td align="center">27</td>
            <td align="center">37</td>
          </tr>
          <tr>
            <td align="center">6</td>
            <td align="center">31</td>
            <td align="center">37</td>
            <td align="center">49</td>
            <td align="center">
              <bold>41</bold>
            </td>
          </tr>
          <tr>
            <td align="center">5</td>
            <td align="center">
              <bold>80</bold>
            </td>
            <td align="center">45</td>
            <td align="center">
              <bold>54</bold>
            </td>
            <td align="center">33</td>
          </tr>
          <tr>
            <td align="center">4</td>
            <td align="center">76</td>
            <td align="center">
              <bold>60</bold>
            </td>
            <td align="center">43</td>
            <td align="center">27</td>
          </tr>
          <tr>
            <td align="center">3</td>
            <td align="center">29</td>
            <td align="center">32</td>
            <td align="center">32</td>
            <td align="center">21</td>
          </tr>
          <tr>
            <td colspan="5">
              <hr/>
            </td>
          </tr>
          <tr>
            <td align="left">Netsplitter</td>
            <td align="center" colspan="3">
              <italic>Default automated externals and reincorporation</italic>
            </td>
            <td/>
          </tr>
          <tr>
            <td/>
            <td align="center">88</td>
            <td align="center">85</td>
            <td align="center">70</td>
            <td align="center">48</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <p>Values are shown as percentages, and peak values highlighted in bold. The p-value increases with network size as described in the text.</p>
      </table-wrap-foot>
    </table-wrap>
    <p>Considering first the connectivity based splitting, Table <xref ref-type="table" rid="T1">1</xref> illustrates that as expected, lower efficacies are calculated for large connectivity cutoffs where a large part of the network remains undivided, and also for small cutoffs where the network is fragmented. This produces an intermediate maximal efficacy, at cutoff values close to 5, in accordance with the values chosen empirically [<xref ref-type="bibr" rid="B13">13</xref>,<xref ref-type="bibr" rid="B14">14</xref>] on similar small networks. The p-values assigned by equation (1.14) fall well within the range between the curves in Figure <xref ref-type="fig" rid="F6">6</xref> in all cases.</p>
    <p>In judging efficacy percentages, its increased sensitivity near the optimum as illustrated in Figure <xref ref-type="fig" rid="F6">6</xref> should be borne in mind - e.g., a partitioning with an efficacy <italic>E </italic>= 80% is about six times closer to the optimal subnet size than one with <italic>E </italic>= 40%.</p>
    <p>While a single numerical score can hardly be expected to capture all the varied considerations (some subjective) of what constitutes the best partitioning, the more detailed graphical representation in Figure <xref ref-type="fig" rid="F10">10</xref> of the most interesting cases, suggests that <italic>E </italic>as calculated here does give a good overall quality indication.</p>
    <fig id="F10" position="float">
      <label>Figure 10</label>
      <caption>
        <p><bold>Stacked bar chart representation of network splits</bold>. Subnet sizes for different partitioning of genome size networks of three organisms. Yellow bars represent connectivity partitioning with the indicated cutoff values C, magenta bars the Netsplitter partitioning followed by a cyan reference bar that shows theoretical maximal efficacy partitioning of the original network. In each bar, each subnet is represented by a segment with height proportional to subnet size, and subnets have been sorted in order of increasing size towards the top. Fragmentation is indicated by dense stacking at the bottom. Decreasing the cutoff to split the monolithic bar at the top increases fragmentation, but Netsplitter results improves both aspects.</p>
      </caption>
      <graphic xlink:href="1752-0509-5-25-10"/>
    </fig>
    <p>In that figure, each bar segment corresponds to a subnet and the total height of each bar represents the total number of internal metabolites for that partitioning. Thus the height difference from the reference bar on the right, indicates the total number of internal metabolite mass balance constraints that have been sacrificed to achieve a particular split. The reference bar also shows the theoretical maximal efficacy <inline-formula><mml:math id="M22" name="1752-0509-5-25-i12" overflow="scroll"><mml:mrow><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> size partitioning of the original network. As this totally ignores the network topology, no actual partitioning can be expected to achieve that. But a reasonable aim would be for subnets to have this size on average without too large deviations on either side.</p>
    <p>Figure <xref ref-type="fig" rid="F10">10(a)</xref> illustrates that a large connectivity cutoff for the bacterial network (the first bar) gives the opposite effect, with one large block and a few very small ones, and this has a correspondingly low efficacy value of 33%. The cutoff <italic>C </italic>= 4 in this case splits the large block into medium sized ones approximating the reference value, but at the price of considerably increasing both the number of small blocks and the number of lost constraints, while achieving an efficacy of 60%. The Netsplitter result improves on both aspects and gives <italic>E </italic>= 85%.</p>
    <p>In the case of <italic>Arabidopsis</italic>, the <italic>C </italic>= 5 value that maximises <italic>E </italic>gives a couple of rather large blocks and many small ones, including fragments too small to be resolved graphically and appearing as black or grey areas at the bottom. Decreasing the cutoff to 4 worsens the fragmentation, and this is reflected in the <italic>E</italic>-values of 54% and 43% respectively. It is again visually obvious that the Netsplitter result improves on both of these by spanning the reference subnet size more effectively, and has a moderately high score of <italic>E </italic>= 70%. It has less fragmentation than either of the cutoff results, and it also retains more constraints than either.</p>
    <p>A rather similar situation is shown in Figure <xref ref-type="fig" rid="F10">10(c)</xref> for the case of <italic>M. musculus</italic>, The best cutoff value increases slightly to <italic>C </italic>= 6 for this larger network, but already shows large fragmentation reflected in <italic>E </italic>= 41% and again this worsens both visually and in terms of the calculated efficacy to <italic>E </italic>= 33% if <italic>C </italic>is reduced to 5. Visually, the Netsplitter result has a slightly better spread of sizes at the top and somewhat better but still significant fragmentation at the bottom, giving an only moderately improved efficacy score of 48%.</p>
    <p>In all cases, the efficacy score based on equation (1.14) accords quite well with observations from the more detailed graphical display.</p>
    <p>The analysis above of the performance of the netsplitter algorithm for the larger networks, shows that there is a decline with size but that this is not due to its efficiency in splitting, but rather that fragmentation becomes an increasing problem as networks grow. A direct approach to solve that is to introduce controlled merging of subnets and this will be further explored in a subsequent article.</p>
  </sec>
  <sec>
    <title>Discussion</title>
    <p>Previous work [<xref ref-type="bibr" rid="B24">24</xref>] has shown that graph theory algorithms to trace pathways through a network can give results in conflict with stoichiometric constraints. Netsplitter is not of this kind; graph analysis is merely used to identify a list of external metabolites, but network splitting is done directly on the stoichiometry matrix and (apart from the reclassifications) all the constraints that it expresses are maintained intact. Nevertheless, the concern may exist that e.g. elementary modes may be lost through the partitioning.</p>
    <p>A general counterargument is that removal of constraints cannot reduce the number of solutions to a problem. More specifically, consider for example a single mode that in the full network traverses two of the subsequent subnets. When the subnets are separated by reclassifying the metabolite node on their interface as external, the mode is correspondingly split into two parts. Since the original mode satisfied all constraints set by mass balances of internal compounds along its path, the two parts must separately continue to be viable. One part will now belong to the first subnet and terminate at the boundary node, which has become an unconstrained external sink and cannot affect its viability. The other will start at the corresponding unconstrained boundary source node in the second subnet and similarly remain viable because by construction the network context of internal metabolites nodes in each subnet is identical to that in the full network.</p>
    <p>A direct demonstration of this is obtained from a comparison of the null space of the internal stoichiometry matrix in the full network and in the subnetworks. As the flux vector of a mode lies in the null space, a reaction can only be active (i.e., participate in any of the modes) if there is a non-zero entry in at least one basis vector of the null space. For example, in the flavonoid demonstration network shown in Figure <xref ref-type="fig" rid="F9">9</xref>, there are 117 reactions, and calculation of the null space basis shows that 116 of those are active. Repeating this calculation for the internal stoichiometry matrix of each of the six subnets gives (42, 17, 5, 47, 2, 2) active reactions respectively in each subnet. As reactions are uniquely allocated to subnets in this case, the counts can be added to give a total of 115 reactions that are active collectively in the subnets. That leaves a discrepancy of one reaction, the one indicated by an "X" at the top of Figure <xref ref-type="fig" rid="F9">9</xref>. This reaction becomes excluded from the flux space because reclassification of the separator metabolite trans-cinnamate (indicated as the red oval node nearest the top) implies that after partitioning the reaction becomes irrelevant as it then only involves external metabolites. The single inactive reaction in the full network, ends up in subnet 4 and remains inactive there.</p>
    <p>Performing this null space analysis for genome scale networks such as those shown in Figure <xref ref-type="fig" rid="F10">10</xref> reveals the same behaviour in all cases. Reclassification can result in some reactions involving only external metabolites and consequent reduction of the flux space; but in the remainder, all reactions that are active in the full network remain active in the subnets, and inactive ones remain inactive in subnets as well. This confirms that subnets collectively support the same set of modes as the full network.</p>
    <p>The reduction of the flux space is another perspective on the desirability of keeping the set of external metabolites as small as possible, as is implemented in Netsplitter. Nevertheless, it is observed that the reactions eliminated are (like the one in Figure <xref ref-type="fig" rid="F9">9</xref>) mostly those at the periphery that only involve a single internal metabolite in the full network, and that their removal has a minimal effect on the structure of modes.</p>
    <p>Computing efficiency has been taken into account in several aspects of the Netsplitter procedure. Performing the main computation on a metabolites only simple graph rather than the bipartite representation, reduces matrix dimensions roughly by a factor of two, since the numbers of metabolites and reactions are usually similar. As about half of the metabolites are typically external, including only internals gives a further dimension reduction by a factor of about two. Focussing on the (<italic>nsources </italic>x <italic>nsinks</italic>) submatrix of the DAG gives a further reduction by a similar factor, enhanced also by using binary representations for clustering. Bearing in mind that matrix manipulations usually scale quadratically or worse, the overall reduction in complexity could approach two orders of magnitude.</p>
    <p>This is borne out by moderate computing times. The total running time observed for the demonstration network of 117 reactions Ã 137 metabolites is 1.25 seconds, while for a genome scale network of 2037 reactions and 2179 metabolites this increased to 59 seconds, on a Core 2 Duo PC with 4 Gb of memory running at 2.66 GHz. These values appear quite acceptable and indicate that the algorithm scales better than quadratic with network dimension. It may be possible to achieve better performance by rewriting the code in a compiled language, but as extensive use is made of sophisticated graph theory and user interface functions built into <italic>Mathematica</italic>, this would be a major undertaking. Experimentation with <italic>Mathematica </italic>options to compile the most computing-intensive sections of the code did not produce significant performance improvements, suggesting that the coding of these functions is already quite efficient.</p>
    <p>The procedure as presented is quite elaborate and requires considerable programming for its implementation. To facilitate its practical use, a software application "Netsplitter" has been developed as a <italic>Mathematica </italic>[<xref ref-type="bibr" rid="B25">25</xref>] notebook which is available for download [<xref ref-type="bibr" rid="B26">26</xref>]. This application provides an interactive interface that displays the progress of the subnet separation in the way illustrated by Figure <xref ref-type="fig" rid="F4">4</xref>, and offers additional facilities not discussed here such as the merging of selected subnets and display of subnet layouts. A more complete description of the software aspects and illustrations of its application to large scale networks, will be presented in a subsequent article.</p>
    <p>An intriguing observation made in applying Netsplitter, is the radical change in resolving network structure that results from excluding high connectivity metabolites. An example is seen by comparing Figure <xref ref-type="fig" rid="F1">1(a)</xref> and <xref ref-type="fig" rid="F1">1(b)</xref>.</p>
    <p>It is surmised that the reason for this behaviour can be understood from percolation theory [<xref ref-type="bibr" rid="B27">27</xref>]. In networks where only a random subset of the potential links in an infinite regular lattice are occupied (i.e., present in the actual network), it is found that there is a critical occupancy of potential links, termed the percolation threshold <italic>p</italic><sub>c</sub>. Long range paths that penetrate the entire network only exist for occupancies greater than <italic>p</italic><sub>c </sub>. Values [<xref ref-type="bibr" rid="B28">28</xref>] of <italic>p</italic><sub>c </sub>for a variety of lattices have been derived mathematically or numerically; for a simple infinite 2-dimensional square lattice this is 0.5 and typical values range between 0.3 and 0.6, including some non-regular or randomized lattices, while lower values are obtained in higher dimensions. The values also depend strongly on the coordination number <italic>z </italic>(i.e. the number of links impinging on a node). While a metabolic network is not a regular lattice nor necessarily 2-dimensional, a rough estimate of the occupancy can be made from the adjacency matrices by the formula</p>
    <p>
      <disp-formula id="bmcM1.15">
        <label>(1.15)</label>
        <mml:math id="M23" name="1752-0509-5-25-i18" overflow="scroll">
          <mml:mrow>
            <mml:mi>p</mml:mi>
            <mml:mo>=</mml:mo>
            <mml:mfrac>
              <mml:mrow>
                <mml:mstyle displaystyle="true">
                  <mml:mo>â</mml:mo>
                  <mml:mrow>
                    <mml:mi mathvariant="bold">C</mml:mi>
                    <mml:mi mathvariant="bold">R</mml:mi>
                    <mml:mo>â</mml:mo>
                    <mml:mi mathvariant="bold">R</mml:mi>
                    <mml:mi mathvariant="bold">C</mml:mi>
                  </mml:mrow>
                </mml:mstyle>
              </mml:mrow>
              <mml:mrow>
                <mml:mtext>â</mml:mtext>
                <mml:mi>z</mml:mi>
                <mml:mtext>â</mml:mtext>
                <mml:mi>N</mml:mi>
              </mml:mrow>
            </mml:mfrac>
          </mml:mrow>
        </mml:math>
      </disp-formula>
    </p>
    <p>where a simple sum over all matrix elements is taken, and N is the total number of nodes. Applying this to the example network, it is found that the removal of the four high connectivity metabolites produces a sharp drop in the value of the occupancy from a value of 0.630 for the network in Figure <xref ref-type="fig" rid="F1">1(a)</xref> to 0.295 for Figure <xref ref-type="fig" rid="F1">1(b)</xref>. This is consistent with the interpretation that the disappearance of long-range connectivity displayed by the figure, is caused by a drop of the occupancy number below an unknown percolation threshold. The same phenomenon has been observed in several other networks including those of genome-scale size discussed above.</p>
    <p>Based on this understanding, an automated strategy could be pursued to progressively reclassify the highest connectivity internal metabolites as external until there is a sharp drop in the <italic>p </italic>value calculated from equation (1.15). In practice, however, it works equally well to simply choose a fixed threshold value and reclassify all internal metabolites with connectivities higher than the threshold.</p>
    <p>Regarding the proposed efficacy measure, it was indicated above that it relies mainly on a general framework and even where a particular functional form such as the power law in equations (1.13) and (1.14) was postulated, its parameters merely readjust relative sensitivities to detailed features of the partitioning. This was further tested by experimenting with different functional forms such as an exponential dependence instead of a power law, taking <italic>W </italic>= 1 as might seem more plausible in equation (1.10), and even replacing the arithmetic mean term in that equation by a geometric mean expression. These changes were found to have marked effects on the complexity of the analysis, some of which could as a result only be done numerically. In the end the results were quite similar (but in some cases inferior in terms of smoothness and stability) and the simple option presented is deemed adequate.</p>
    <p>The efficacy score measures the degree of simplification achieved by a given network partitioning. As shown in its derivation this is mathematically maximised for equal sized subnets. That does not mean that equal sized subnets is the ideal partitioning outcome; simplification is not the only criterion by which to judge success. Clearly there would be no special functional or biological relevance to an equal sized partitioning. On the other hand the low efficacy opposite extreme (towards which simple degree-based partitioning tends for large networks) of a large monolithic block and small fragments, or even complete fragmentation, is also functionally meaningless. As the <italic>M. Pneumoniae </italic>example illustrates, good agreement with conventional pathway assignments accompanies a moderately high efficacy value. In this sense, despite the inherent limitations of a single number score to represent varied considerations for judging the success of splitting a network for a particular purpose, efficacy values are useful as an overall guideline. It is noted that the efficacy measure is only used after the fact, optimising it does not form any part of the Netsplitter algorithm.</p>
  </sec>
  <sec>
    <title>Conclusions</title>
    <p>The modularization of a large, complex biochemical network into subnets that can be associated with recognisable biological functions, can be helpful both in the conceptual understanding and interpretation of the network, and to reduce practical problems that arise in the application of analysis methods such as constraint-based modelling. The challenge in constructing an algorithm for this task is to accommodate both the objective structural properties of the network, and more subjective requirements such as the desire for a manageable number of subnets of roughly similar sizes. Also, while it is inevitable that some information will be lost when a subnet is isolated from its larger context, it is desirable to restrict this loss to information that is not subjectively relevant for a particular study.</p>
    <p>In the procedure proposed here, dealing with the information aspect is facilitated by selecting metabolite node cutting as the partitioning operation, since this pinpoints the nature of the information loss as removal of a mass balance constraint. Then the subjective requirements are met by allowing the flexibility to veto the selection of particular nodes to be cut, or to terminate partitioning at a suitable subnet size. Both local and long range network structure is taken into account by the use of random walks and clustering strategies, and finally information loss is minimised by using optimisation techniques in selecting candidate separation nodes and by explicit reincorporation of nodes not essential for the separation.</p>
    <p>The combination of these strategies succeeds in moderating the extremes of the subnet size distribution that results from partitioning based simply on connectivity degree.</p>
    <p>This point is illustrated by considering Figure <xref ref-type="fig" rid="F7">7(c)</xref> and <xref ref-type="fig" rid="F8">8(c)</xref> as alternative outcomes for somewhat similar levels of intervention with Figure <xref ref-type="fig" rid="F7">7(b)</xref> as a common starting point. Figure <xref ref-type="fig" rid="F7">7(c)</xref> shows how simply decreasing the connection degree threshold from 10 to 5, introduces 61 new externals and increases the block count by 70, but most of these are very small and a large block encompassing 20% of the network remains. In Figure <xref ref-type="fig" rid="F8">8(c)</xref> the netsplitter algorithm incurs a similar but smaller information loss of 52 new externals, but only forms 30 additional blocks and encapsulates 66% of the network in 10 medium sized blocks. This is clearly a much better cost:benefit ratio, although it is recognised that parts of the network are still dispersed into small fragments leaving room for future improvements.</p>
    <p>The efficacy measure <italic>E </italic>that was introduced encapsulates these considerations into a single quantitative quality score.</p>
    <p>At present, it seems that the most promising applications of subnet splitting would be to studies and interpretation of network structure, such as those based on elementary mode analysis, rather than for the more quantitative FBA. In this context, subnetworks can play an important role in reducing the often very large number of elementary modes in a large network. The use of subnets for FBA would similarly simplify the problem and allow the elimination of extraneous detail not relevant for study of a particular aspect of metabolism. However, the obstacle that arises is that it would usually be more difficult to fix the boundary conditions ( i.e. flux values for metabolite exchange with the environment) for a subnet than for the full network. At least for a single cell organism, full network boundary fluxes reflect overall nutrient uptake or waste elimination rates that are relatively easy to measure. Externals of a subnet are likely to include metabolites shared with another subnet and measuring the associated fluxes may require much more detailed metabolic measurements. In special cases, such as when the subnet is spatially localised e.g. to a particular cellular organelle, this might present less of a problem.</p>
    <p>A by-product of the matrix oriented approach used by the netsplitter algorithm, is the visually powerful display of network structure. Even for large networks for which a network layout diagram is totally unintelligible, features of network connectivity can be recognised at a glance from the colourscale plot of the truncated DAG matrix.</p>
    <p>Even more striking is the characterisation of fully and partially resolved subnetworks afforded by grayscale plots of the blocking matrices. The blocking transformation that was introduced as the basis for computational recognition and optimisation of blocks and their overlaps, serves this second purpose to visualise rather subtle structural network properties. Quite apart from the purpose to separate subnets, this visualisation should be a useful tool e.g. to explore the structure of large networks or to compare how related networks differ from one another.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The author declares that they have no competing interests.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>Demonstration model</bold>. Specification of the network model used for demonstration in the Methods section, as an SBML file.</p>
      </caption>
      <media xlink:href="1752-0509-5-25-S1.SBML" mimetype="text" mime-subtype="plain">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S2">
      <caption>
        <title>Additional file 2</title>
        <p><bold>Heuristic for block recognition</bold>. A description of the heuristic employed by Netsplitter for automated recognition of non-overlapping matrix blocks as defined in the text.</p>
      </caption>
      <media xlink:href="1752-0509-5-25-S2.DOC" mimetype="application" mime-subtype="msword">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S3">
      <caption>
        <title>Additional file 3</title>
        <p><bold>Genome scale Arabidopsis model</bold>. Specification of the network model extracted from Aracyc 4.5 and used for demonstration in the Methods section, as an SBML file.</p>
      </caption>
      <media xlink:href="1752-0509-5-25-S3.SBML" mimetype="text" mime-subtype="plain">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S4">
      <caption>
        <title>Additional file 4</title>
        <p><bold>External Metabolites</bold>. Listing of default external metabolites, specified as Biocyc compound ID's.</p>
      </caption>
      <media xlink:href="1752-0509-5-25-S4.TXT" mimetype="text" mime-subtype="plain">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S5">
      <caption>
        <title>Additional file 5</title>
        <p><bold>Demonstration network layout</bold>. The network layout shown in Figure <xref ref-type="fig" rid="F8">8</xref>, with all metabolite and reaction nodes labelled with their Biocyc ID's and names.</p>
      </caption>
      <media xlink:href="1752-0509-5-25-S5.XLS" mimetype="application" mime-subtype="vnd.ms-excel">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>The author gratefully acknowledges the hospitality of the University of Queensland, Brisbane where part of this work was completed.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="book">
        <name>
          <surname>Palsson</surname>
          <given-names>BO</given-names>
        </name>
        <source>Systems Biology - Properties of Reconstructed Networks</source>
        <year>2006</year>
        <publisher-name>New York: Cambridge University Press</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Klamt</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Stelling</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Combinatorial complexity of pathway analysis in metabolic networks</article-title>
        <source>Mol Biol Rep</source>
        <year>2002</year>
        <volume>29</volume>
        <fpage>233</fpage>
        <lpage>236</lpage>
        <pub-id pub-id-type="doi">10.1023/A:1020390132244</pub-id>
        <pub-id pub-id-type="pmid">12241063</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Terzer</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Stelling</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Large scale computation of elementary flux modes with bit pattern trees</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2229</fpage>
        <lpage>2235</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn401</pub-id>
        <pub-id pub-id-type="pmid">18676417</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>de Figueiredo</surname>
          <given-names>LF</given-names>
        </name>
        <name>
          <surname>Podhorski</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Rubio</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Kaleta</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Beasley</surname>
          <given-names>JE</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Planes</surname>
          <given-names>FJ</given-names>
        </name>
        <article-title>Computing the shortest elementary flux modes in genome-scale metabolic networks</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>3158</fpage>
        <lpage>3165</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp564</pub-id>
        <pub-id pub-id-type="pmid">19793869</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kaleta</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>de Figueiredo</surname>
          <given-names>LsF</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Can the whole be less than the sum of its parts? Pathway analysis in genome-scale metabolic networks using elementary flux patterns</article-title>
        <source>Genome Research</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>1872</fpage>
        <lpage>1883</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.090639.108</pub-id>
        <pub-id pub-id-type="pmid">19541909</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ruppin</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Papin</surname>
          <given-names>JA</given-names>
        </name>
        <name>
          <surname>de Figueiredo</surname>
          <given-names>LF</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Metabolic reconstruction, constraint-based analysis and game theory to probe genome-scale metabolic networks</article-title>
        <source>Current Opinion in Biotechnology</source>
        <year>2010</year>
        <volume>21</volume>
        <fpage>502</fpage>
        <lpage>510</lpage>
        <pub-id pub-id-type="doi">10.1016/j.copbio.2010.07.002</pub-id>
        <pub-id pub-id-type="pmid">20692823</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Teusink</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Wiersma</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Jacobs</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Notebaart</surname>
          <given-names>RA</given-names>
        </name>
        <name>
          <surname>Smid</surname>
          <given-names>EJ</given-names>
        </name>
        <article-title>Understanding the Adaptive Growth Strategy of <italic>Lactobacillus plantarum </italic>by <italic>In Silico </italic>Optimisation</article-title>
        <source>PLoS Comput Biol</source>
        <year>2009</year>
        <volume>5</volume>
        <fpage>e1000410</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000410</pub-id>
        <pub-id pub-id-type="pmid">19521528</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nayak</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>De</surname>
          <given-names>RK</given-names>
        </name>
        <article-title>An algorithm for modularization of MAPK and calcium signaling pathways: Comparative analysis among different species</article-title>
        <source>Journal of Biomedical Informatics</source>
        <year>2007</year>
        <volume>40</volume>
        <fpage>726</fpage>
        <lpage>749</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jbi.2007.05.007</pub-id>
        <pub-id pub-id-type="pmid">17591461</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Enright</surname>
          <given-names>AJ</given-names>
        </name>
        <name>
          <surname>Van Dongen</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Ouzounis</surname>
          <given-names>CA</given-names>
        </name>
        <article-title>An efficient algorithm for large-scale detection of protein families</article-title>
        <source>Nucl Acids Res</source>
        <year>2002</year>
        <volume>30</volume>
        <fpage>1575</fpage>
        <lpage>1584</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/30.7.1575</pub-id>
        <pub-id pub-id-type="pmid">11917018</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Guimera</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Nunes Amaral</surname>
          <given-names>LA</given-names>
        </name>
        <article-title>Functional cartography of complex metabolic networks</article-title>
        <source>Nature</source>
        <year>2005</year>
        <volume>433</volume>
        <fpage>895</fpage>
        <lpage>900</lpage>
        <pub-id pub-id-type="doi">10.1038/nature03288</pub-id>
        <pub-id pub-id-type="pmid">15729348</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Holme</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Huss</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Jeong</surname>
          <given-names>HW</given-names>
        </name>
        <article-title>Subnetwork hierarchies of biochemical pathways</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>532</fpage>
        <lpage>538</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg033</pub-id>
        <pub-id pub-id-type="pmid">12611809</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Gagneur</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Jackson</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Casari</surname>
          <given-names>G</given-names>
        </name>
        <article-title>Hierarchical analysis of dependency in metabolic networks</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>1027</fpage>
        <lpage>1034</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg115</pub-id>
        <pub-id pub-id-type="pmid">12761067</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Pfeiffer</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Moldenhauer</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Koch</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Dandekar</surname>
          <given-names>T</given-names>
        </name>
        <article-title>Exploring the pathway structure of metabolism: decomposition into subnetworks and application to <italic>Mycoplasma pneumoniae</italic></article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>351</fpage>
        <lpage>361</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.2.351</pub-id>
        <pub-id pub-id-type="pmid">11847093</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Schwarz</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Musch</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>von Kamp</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Engels</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Schirmer</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Dandekar</surname>
          <given-names>T</given-names>
        </name>
        <article-title>YANA - a software tool for analyzing flux modes, gene-expression and enzyme activities</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>135</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-135</pub-id>
        <pub-id pub-id-type="pmid">15929789</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ma</surname>
          <given-names>HW</given-names>
        </name>
        <name>
          <surname>Zhao</surname>
          <given-names>XM</given-names>
        </name>
        <name>
          <surname>Yuan</surname>
          <given-names>YJ</given-names>
        </name>
        <name>
          <surname>Zeng</surname>
          <given-names>AP</given-names>
        </name>
        <article-title>Decomposition of metabolic network into functional modules based on the global connectivity structure of reaction graph</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>1870</fpage>
        <lpage>1876</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth167</pub-id>
        <pub-id pub-id-type="pmid">15037506</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Schwarz</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Liang</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Kaleta</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Kuehnel</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Hoffmann</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Kuznetsov</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Hecker</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Griffiths</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Dandekar</surname>
          <given-names>T</given-names>
        </name>
        <article-title>Integrated network reconstruction, visualization and analysis using YANAsquare</article-title>
        <source>BMC Bioinformatics</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>313</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-313</pub-id>
        <pub-id pub-id-type="pmid">17725829</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Klamt</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Haus</surname>
          <given-names>U-U</given-names>
        </name>
        <name>
          <surname>Theis</surname>
          <given-names>F</given-names>
        </name>
        <article-title>Hypergraphs and Cellular Networks</article-title>
        <source>PLoS Comput Biol</source>
        <year>2009</year>
        <volume>5</volume>
        <fpage>e1000385</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000385</pub-id>
        <pub-id pub-id-type="pmid">19478865</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="other">
        <name>
          <surname>Berman</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Plemmons</surname>
          <given-names>RJ</given-names>
        </name>
        <source>Nonnegative Matrices in the Mathematical Sciences. SIAM</source>
        <year>1994</year>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Rhee</surname>
          <given-names>SY</given-names>
        </name>
        <name>
          <surname>Beavis</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Berardini</surname>
          <given-names>TZ</given-names>
        </name>
        <name>
          <surname>Chen</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Dixon</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Doyle</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Garcia-Hernandez</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Huala</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Lander</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Montoya</surname>
          <given-names>M</given-names>
        </name>
        <etal/>
        <article-title>The Arabidopsis Information Resource (TAIR): a model organism database providing a centralized, curated gateway to Arabidopsis biology, research materials and community</article-title>
        <source>Nucleic Acids Research</source>
        <year>2003</year>
        <volume>31</volume>
        <fpage>224</fpage>
        <lpage>228</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkg076</pub-id>
        <pub-id pub-id-type="pmid">12519987</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="book">
        <name>
          <surname>Hastie</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Tibshirani</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Friedman</surname>
          <given-names>J</given-names>
        </name>
        <source>The Elements of Statistical Learning</source>
        <year>2001</year>
        <publisher-name>New York: Springer</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yus</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Maier</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Michalodimitrakis</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>van Noort</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Yamada</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Chen</surname>
          <given-names>W-H</given-names>
        </name>
        <name>
          <surname>Wodke</surname>
          <given-names>JAH</given-names>
        </name>
        <name>
          <surname>Guell</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Martinez</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Bourgeois</surname>
          <given-names>R</given-names>
        </name>
        <etal/>
        <article-title>Impact of Genome Reduction on Bacterial Metabolism and Its Regulation</article-title>
        <source>Science</source>
        <year>2009</year>
        <volume>326</volume>
        <fpage>1263</fpage>
        <lpage>1268</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1177263</pub-id>
        <pub-id pub-id-type="pmid">19965476</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="book">
        <name>
          <surname>Verwoerd</surname>
          <given-names>WS</given-names>
        </name>
        <person-group person-group-type="editor">Fung GPC</person-group>
        <article-title>Dissecting metabolic networks into functional subnets</article-title>
        <source>A Practical Guide to Bioinformatics Analysis</source>
        <year>2010</year>
        <volume>0000</volume>
        <publisher-name>Brisbane: iConceptPress</publisher-name>
        <fpage>79</fpage>
        <lpage>98</lpage>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Quek</surname>
          <given-names>L-E</given-names>
        </name>
        <name>
          <surname>Nielsen</surname>
          <given-names>LK</given-names>
        </name>
        <article-title>On the Reconstruction of the <italic>Mus musculus </italic>Genome-Scale Metabolic Network Model</article-title>
        <source>Genome Informatics</source>
        <year>2008</year>
        <volume>21</volume>
        <fpage>89</fpage>
        <lpage>100</lpage>
        <comment>full_text</comment>
        <pub-id pub-id-type="pmid">19425150</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="journal">
        <name>
          <surname>de Figueiredo</surname>
          <given-names>LF</given-names>
        </name>
        <name>
          <surname>Schuster</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Kaleta</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Fell</surname>
          <given-names>DA</given-names>
        </name>
        <article-title>Can sugars be produced from fatty acids? A test case for pathway analysis tools</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>152</fpage>
        <lpage>158</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn621</pub-id>
        <pub-id pub-id-type="pmid">19117076</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="other">
        <article-title>
          <italic>Mathematica</italic>
        </article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.wolfram.com">http://www.wolfram.com</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="other">
        <name>
          <surname>Verwoerd</surname>
          <given-names>WS</given-names>
        </name>
        <source>Netsplitter (Version 1.2) [Mathematica Notebook]. Lincoln, New Zealand</source>
        <year>2010</year>
        <comment>[<ext-link ext-link-type="uri" xlink:href="http://www.bioinformatics.org/groups/?group_id=1067">http://www.bioinformatics.org/groups/?group_id=1067</ext-link>]</comment>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="book">
        <name>
          <surname>Grimmett</surname>
          <given-names>G</given-names>
        </name>
        <source>Percolation</source>
        <year>1999</year>
        <edition>2</edition>
        <publisher-name>New York: Springer</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="other">
        <article-title>Percolation threshold</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://en.wikipedia.org/wiki/Percolation_threshold">http://en.wikipedia.org/wiki/Percolation_threshold</ext-link>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
