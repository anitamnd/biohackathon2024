<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5035472</article-id>
    <article-id pub-id-type="publisher-id">1244</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-016-1244-x</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>rapidGSEA: Speeding up gene set enrichment analysis on multi-core CPUs and CUDA-enabled GPUs</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-7995-1858</contrib-id>
        <name>
          <surname>Hundt</surname>
          <given-names>Christian</given-names>
        </name>
        <address>
          <email>hundt@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hildebrandt</surname>
          <given-names>Andreas</given-names>
        </name>
        <address>
          <email>andreas.hildebrandt@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Schmidt</surname>
          <given-names>Bertil</given-names>
        </name>
        <address>
          <email>bertil.schmidt@uni-mainz.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1">Department of Computer Science, Johannes Gutenberg University, Staudingerweg 9, Mainz, 55128 Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>23</day>
      <month>9</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>23</day>
      <month>9</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2016</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>394</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>4</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>8</day>
        <month>9</month>
        <year>2016</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2016</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Gene Set Enrichment Analysis (GSEA) is a popular method to reveal significant dependencies between predefined sets of gene symbols and observed phenotypes by evaluating the deviation of gene expression values between cases and controls. An established measure of inter-class deviation, the enrichment score, is usually computed using a weighted running sum statistic over the whole set of gene symbols. Due to the lack of analytic expressions the significance of enrichment scores is determined using a non-parametric estimation of their null distribution by permuting the phenotype labels of the probed patients. Accordingly, GSEA is a time-consuming task due to the large number of required permutations to accurately estimate the nominal <italic>p</italic>-value – a circumstance that is even more pronounced during multiple hypothesis testing since its estimate is lower-bounded by the inverse number of samples in permutation space.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We present rapidGSEA – a software suite consisting of two tools for facilitating permutation-based GSEA: cudaGSEA and ompGSEA. cudaGSEA is a CUDA-accelerated tool using fine-grained parallelization schemes on massively parallel architectures while ompGSEA is a coarse-grained multi-threaded tool for multi-core CPUs. Nominal <italic>p</italic>-value estimation of 4,725 gene sets on a data set consisting of 20,639 unique gene symbols and 200 patients (183 cases + 17 controls) each probing one million permutations takes 19 hours on a Xeon CPU and less than one hour on a GeForce Titan X GPU while the established GSEA tool from the Broad Institute (broadGSEA) takes roughly 13 days.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>cudaGSEA outperforms broadGSEA by around two orders-of-magnitude on a single Tesla K40c or GeForce Titan X GPU. ompGSEA provides around one order-of-magnitude speedup to broadGSEA on a standard Xeon CPU. The rapidGSEA suite is open-source software and can be downloaded at <ext-link ext-link-type="uri" xlink:href="https://github.com/gravitino/cudaGSEA">https://github.com/gravitino/cudaGSEA</ext-link>as standalone application or package for the R framework.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>CUDA</kwd>
      <kwd>Gene set enrichment analysis</kwd>
      <kwd>Gene expression data</kwd>
      <kwd>Resampling statistics</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2016</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>High-throughput technologies such as microarray or next-generation sequencing enable researchers to routinely measure the expressions of tens of thousands of genes in many patients. Typically, long lists of interesting candidate genes are generated by subsequent computational analyses. However, interpreting these gene lists is challenging. Recognizing that genes act in concert to drive various biological processes, Gene Set Enrichment Analysis (GSEA) was introduced [<xref ref-type="bibr" rid="CR1">1</xref>] to summarize genomics data using a predefined gene set. Nowadays, GSEA is a heavily used tool in bioinformatics [<xref ref-type="bibr" rid="CR2">2</xref>] and has been successfully applied to gain insights into the biological function of diseases such as cancer and diabetes.</p>
    <p>However, the GSEA procedure can be highly time-consuming since significance of a calculated enrichment score is typically tested using a resampling strategy drawing large numbers of permutations. When a whole database of gene sets is used, the amount of required permutations is even higher in order to account for multiple hypothesis testing. Furthermore, size and availability of input data sets continue to increase driven by advances in high-throughput technologies [<xref ref-type="bibr" rid="CR3">3</xref>]. Thus, developing fast software solutions is of high importance to research. Previous work on accelerating gene set analysis has been limited to cloud computing [<xref ref-type="bibr" rid="CR4">4</xref>]. We present the rapidGSEA suite – an efficient parallelization of the GSEA method for commonly available multi-core CPUs and CUDA-enabled GPUs. By using a combination of parallelization techniques we can achieve speedups of one order-of-magnitude on Xeon CPUs and around two orders-of-magnitude on a single GPU compared to broadGSEA.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>This section is divided into three parts. First, we give a brief explanation of the sequential GSEA algorithm and its four major processing steps for estimating the nominal <italic>p</italic>-value of a determined enrichment score using a single gene set. Second, we introduce novel parallelization schemes for single and multiple gene set probing and their explicit implementation optimized for multi-core CPUs and CUDA-enabled GPUs. Finally, we describe the usage of our standalone application and the bundled package for the R framework.</p>
    <sec id="Sec3">
      <title>The sequential algorithm</title>
      <p>The traditional GSEA algorithm operates on a real-valued gene expression matrix <italic>D</italic>(<italic>g</italic><sub><italic>i</italic></sub>,<italic>p</italic><sub><italic>j</italic></sub>) of shape |<italic>G</italic>|×|<italic>P</italic>| where <italic>g</italic><sub><italic>i</italic></sub>∈<italic>G</italic> denotes |<italic>G</italic>| unique gene identifiers and <italic>p</italic><sub><italic>j</italic></sub>∈<italic>P</italic> enumerates |<italic>P</italic>| patient identifiers each labelled by a binary phenotype <italic>L</italic>(<italic>p</italic><sub><italic>j</italic></sub>)∈{0,1} encoding cases and controls. The computation of the enrichment score statistics can be split into four major stages:</p>
      <sec id="Sec4">
        <title>Computation of local deviation measures</title>
        <p>For each gene symbol <italic>g</italic><sub><italic>i</italic></sub> (each row of <italic>D</italic>) a local deviation score <italic>Δ</italic>(<italic>g</italic><sub><italic>i</italic></sub>) is computed that encodes the inter-class deviation between cases and controls. As an example, the difference of means between both classes can be employed to express their variability per gene: 
<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l} \Delta(g_{i}) &amp;= \mu_{i}^{(1)} - \mu_{i}^{(0)} \\ \mu_{i}^{(1)} &amp;= \sum\limits_{j=0}^{|P|-1} \frac{L(p_{j})}{m^{(1)}} D(g_{i}, p_{j})\\ \mu_{i}^{(0)} &amp;= \sum\limits_{j=0}^{|P|-1} \frac{1-L(p_{j})}{m^{(0)}} D(g_{i}, p_{j}) \end{array} $$ \end{document}</tex-math><mml:math id="M2"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"><mml:mi>Δ</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mtd><mml:mtd class="align-2"><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mtd><mml:mtd class="align-2"><mml:mo>=</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mfrac><mml:mrow><mml:mi>L</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:mfrac><mml:mi>D</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mtd><mml:mtd class="align-2"><mml:mo>=</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mfrac><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>L</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:mfrac><mml:mi>D</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>where <inline-formula id="IEq1"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$m^{(1)} = \sum _{j=0}^{|P|-1} L(p_{j})$\end{document}</tex-math><mml:math id="M4"><mml:msup><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mi>L</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq1.gif"/></alternatives></inline-formula> and <italic>m</italic><sup>(0)</sup>=|<italic>P</italic>|−<italic>m</italic><sup>(1)</sup> denote the number of patients in each class from the set {0,1}. Variations that combine intra-class means and standard deviations e.g. 
<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ \begin{aligned} \begin{array}{lll} \text{fold change:} &amp;\Delta(g_{i}) =\frac{\mu_{i}^{(1)}-\mu_{i}^{(0)}}{\sigma_{i}^{(1)}+\sigma_{i}^{(0)}} &amp;\text{,} \\ \text{t-test:} &amp;\Delta(g_{i}) = \frac{\mu_{i}^{(1)}-\mu_{i}^{(0)}}{\sqrt{\left(\sigma_{i}^{(1)}\right)^{2}+\left(\sigma_{i}^{(0)}\right)^{2}}}&amp; \end{array} \end{aligned}  $$ \end{document}</tex-math><mml:math id="M6"><mml:mtable><mml:mtr><mml:mtd><mml:mtable><mml:mtr><mml:mtd><mml:mtext>fold change:</mml:mtext></mml:mtd><mml:mtd><mml:mi>Δ</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mrow><mml:mrow><mml:msubsup><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:mfrac></mml:mtd><mml:mtd><mml:mtext>,</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>t-test:</mml:mtext></mml:mtd><mml:mtd><mml:mi>Δ</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:msup><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:msqrt></mml:mrow></mml:mfrac></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>are common choices for <italic>Δ</italic> in GSEA implementations. Please note that extensions from binary to real-valued phenotype profiles <inline-formula id="IEq2"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$L(p_{j}) \in \mathbb {R}$\end{document}</tex-math><mml:math id="M8"><mml:mi>L</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>∈</mml:mo><mml:mi>ℝ</mml:mi></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq2.gif"/></alternatives></inline-formula> using Euclidean distance, Pearson’s product-moment or Spearman’s rank-order correlation coefficient are straightforward [<xref ref-type="bibr" rid="CR1">1</xref>] and thus will not be discussed further in this paper.</p>
      </sec>
      <sec id="Sec5">
        <title>Gene ranking</title>
        <p>After computation of the local deviations, the indices <italic>i</italic>∈{0,…,|<italic>G</italic>|−1} enumerating the gene symbols <italic>g</italic><sub><italic>i</italic></sub> are reordered such that 
<disp-formula id="Equb"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l} \left(\Delta\left(g_{\sigma(0)}\right), \dots, \Delta\left(g_{\sigma(i)}\right), \dots\Delta\left(g_{\sigma(|G|-1)}\right)\right) \end{array} $$ \end{document}</tex-math><mml:math id="M10"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>Δ</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>Δ</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mi>Δ</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mo>|</mml:mo><mml:mi>G</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Equb.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>is a sorted (usually descending) sequence of local deviation scores. The sequence of reordered gene symbols <italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub> is called <italic>gene ranking</italic> according to <italic>Δ</italic> and will later be used to determine the enrichment score statistic. Figure <xref rid="Fig1" ref-type="fig">1</xref> illustrates the first and second stage of the GSEA algorithm.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Computation Scheme of Stages 1 and 2. Schematic overview depicting the computation of gene transcription differences (stage 1) and the gene ranking procedure (stage 2) of the sequential GSEA algorithm operation on a single set of phenotype labels (<italic>L</italic>(<italic>p</italic>
<sub><italic>j</italic></sub>))<sub><italic>j</italic></sub>=(0,0,0,1,1,1)</p></caption><graphic xlink:href="12859_2016_1244_Fig1_HTML" id="MO1"/></fig></p>
      </sec>
      <sec id="Sec6">
        <title>Enrichment score computation</title>
        <p>To elucidate significant differences in gene regulation across different phenotypes, it is generally insufficient to consider transcription differences <italic>Δ</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>) individually. Each gene can be significantly up- or down regulated by chance alone, or through correlation with processes such as the cell cycle. In principle, information can be gained from clustering genes according to their regulation [<xref ref-type="bibr" rid="CR5">5</xref>]. Interpretation of the resulting clusters, however, is often unclear. Instead, prior information about gene classes that are assumed to behave correlatedly (e.g. genes on a regulatory pathway), is used in the analysis. Today, this is typically achieved through the framework of GSEA, which considers the significance of the transcription profile of a set of gene symbols <italic>S</italic>⊂<italic>G</italic> as a whole as opposed to individual enrichment values.</p>
        <p>Let <italic>S</italic> be a gene set supposedly correlated to the observed phenotypes and <italic>σ</italic>(<italic>i</italic>) the aforementioned reordering of gene symbols. The <italic>enrichment score</italic><italic>E</italic><italic>S</italic>(<italic>S</italic>) is then determined as the maximal amplitude of a weighted running sum statistic <italic>ρ</italic>(<italic>k</italic>)∈[−1,1]: 
<disp-formula id="Equc"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l} ES(S) &amp;= \rho\left(\mathop{\text{argmax}}_{k} |\rho(k)| \right) \ \ \quad\text{where} \\ \rho(k) &amp;= \sum\limits_{i=0}^{k} \left\{ \begin{array}{lll} \frac{1}{\alpha} \cdot |\Delta(g_{\sigma(i)})|^{q} &amp; \text{if} &amp; g_{\sigma(i)} \in S \\ - \frac{1}{\beta} &amp; \text{if} &amp; g_{\sigma(i)} \notin S \end{array} \right. \end{array} $$ \end{document}</tex-math><mml:math id="M12"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"><mml:mtext mathvariant="italic">ES</mml:mtext><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mtd><mml:mtd class="align-2"><mml:mo>=</mml:mo><mml:mi>ρ</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mtext>argmax</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:mi>ρ</mml:mi><mml:mo>(</mml:mo><mml:mi>k</mml:mi><mml:mo>)</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:mfenced><mml:mspace width="1em"/><mml:mspace width="1em"/><mml:mspace width="1em"/><mml:mtext>where</mml:mtext><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"><mml:mi>ρ</mml:mi><mml:mo>(</mml:mo><mml:mi>k</mml:mi><mml:mo>)</mml:mo></mml:mtd><mml:mtd class="align-2"><mml:mo>=</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munderover><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>α</mml:mi></mml:mrow></mml:mfrac><mml:mo>·</mml:mo><mml:mo>|</mml:mo><mml:mi>Δ</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:msup><mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mrow><mml:mi>q</mml:mi></mml:mrow></mml:msup></mml:mtd><mml:mtd><mml:mtext>if</mml:mtext></mml:mtd><mml:mtd><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>β</mml:mi></mml:mrow></mml:mfrac></mml:mtd><mml:mtd><mml:mtext>if</mml:mtext></mml:mtd><mml:mtd><mml:msub><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>∉</mml:mo><mml:mi>S</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Equc.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>with precomputed constants <inline-formula id="IEq3"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\alpha = \sum _{g \in S} |\Delta (g)|^{q}$\end{document}</tex-math><mml:math id="M14"><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>g</mml:mi><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:munder><mml:mo>|</mml:mo><mml:mi>Δ</mml:mi><mml:mo>(</mml:mo><mml:mi>g</mml:mi><mml:mo>)</mml:mo><mml:msup><mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mrow><mml:mi>q</mml:mi></mml:mrow></mml:msup></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq3.gif"/></alternatives></inline-formula> and <italic>β</italic>=|<italic>G</italic>|−|<italic>S</italic>|. The exponent <italic>q</italic>≥0 is usually chosen from the set <inline-formula id="IEq4"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\{0, 1, \tfrac {3}{2}, 2\}$\end{document}</tex-math><mml:math id="M16"><mml:mo>{</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>}</mml:mo></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq4.gif"/></alternatives></inline-formula> and controls the leverage of the weights |<italic>Δ</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>)|. Please note that the special case <italic>q</italic>=0 is the well-known Kolmogorov-Smirnov statistic [<xref ref-type="bibr" rid="CR1">1</xref>]. Figure <xref rid="Fig2" ref-type="fig">2</xref> illustrates an example for the linear-weighted (<italic>q</italic>=1) computation of <italic>E</italic><italic>S</italic>(<italic>S</italic>) using a toy data set.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Computation Scheme of Stage 3. Schematic overview of the incremental computation of a linearly-weighted (<italic>p</italic>=1) Kolmogorov-Smirnov statistic operating on our toy data set. The enrichment score is determined by the maximum amplitude of the running sum <italic>ρ</italic>(<italic>k</italic>)</p></caption><graphic xlink:href="12859_2016_1244_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
      <sec id="Sec7">
        <title>Significance estimation</title>
        <p>Similar to Pearson’s correlation coefficient the enrichment score takes values in the interval [−1,1] with |<italic>E</italic><italic>S</italic>(<italic>S</italic>)|=1 indicating perfect (anti-)correlation and |<italic>E</italic><italic>S</italic>(<italic>S</italic>)|≈0 implying no dependency between <italic>S</italic> and the observed phenotypes in terms of the used deviation measure. When <italic>E</italic><italic>S</italic>(<italic>S</italic>)=±1 all gene symbols <italic>g</italic>∈<italic>S</italic> are situated at the top/bottom of the ranked gene list. In contrast, small values are observed if the gene symbols <italic>g</italic>∈<italic>S</italic> are scattered over the index domain and thus are unlikely to explain the phenotype distribution.</p>
        <p><italic>ES</italic> values have no intrinsic significance, though. A value of <italic>E</italic><italic>S</italic>(<italic>S</italic>)=0.857, as computed in our toy model in Fig. <xref rid="Fig2" ref-type="fig">2</xref>, might correspond to a high or low significance, depending on the probability to arrive at such a value by chance alone. Unfortunately, closed forms for the statistical distribution of enrichment score are inaccessible. Therefore, <italic>p</italic>-values are typically estimated by sampling the null distribution using a permutation of phenotype labels. Please note that while some GSEA implementations allow to permute gene identifiers instead of phenotype labels [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR6">6</xref>] to estimate the null distribution, phenotype permutation is often considered the more appropriate choice – genes are expected to feature statistical dependencies within a single patient, while probes gained from distinct patients are less likely to do so. Hence, in the following we only consider phenotype permutation.</p>
        <p>Figure <xref rid="Fig3" ref-type="fig">3</xref> depicts the enrichment score computation for a permutation <italic>π</italic>=(1 4) of the original list of six patients where the columns 1 and 4 of <italic>D</italic> have been swapped.<sup>1</sup> The resulting score <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>)=0.457&lt;0.857=<italic>E</italic><italic>S</italic>(<italic>S</italic>) suggests that the original value is considerably higher than a randomly sampled one. An exact computation of the <italic>p</italic>-value – due to absent closed forms for their distribution – would require us to calculate <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) for all |<italic>P</italic>|! permutations and finally determine the portion of values which are more extreme than <italic>E</italic><italic>S</italic>(<italic>S</italic>). GSEA implementations hence usually estimate <italic>p</italic>-values by sampling in the space of permutations since |<italic>P</italic>|! is too large even for a moderate number of patients.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Computation of Enrichment Scores on Permuted Phenotype Labels. Schematic overview of the incremental computation of the enrichment score statistics operating on our toy data set where the phenotypes of patient 1 and 4 have been swapped: <inline-formula id="IEq5"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\bigl (L(p_{\pi ^{(1)}(j)})\bigr)_{j} = (0, 1, 0, 1, 0, 1)$\end{document}</tex-math><mml:math id="M18"><mml:msub><mml:mrow><mml:mrow><mml:mo fence="true" mathsize="1.19em">(</mml:mo><mml:mrow><mml:mi>L</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>π</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msup><mml:mo>(</mml:mo><mml:mi>j</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo fence="true" mathsize="1.19em">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq5.gif"/></alternatives></inline-formula>
</p></caption><graphic xlink:href="12859_2016_1244_Fig3_HTML" id="MO3"/></fig></p>
        <p>When probing more than one gene set at once, <italic>p</italic>-value estimates have to be adjusted for multiple hypothesis testing. As an example, Bonferroni-corrected acceptance levels and family-wise error rates (FWER) are frequently used criteria to evaluate the significance of enrichment scores. The need for a large number of samples in the space of permutation is even more pronounced during multiple hypothesis testing: let <italic>e</italic>∈<italic>Π</italic> be the identity permutation in the set of <italic>n</italic> tested permutations <italic>Π</italic>. Then the <italic>p</italic>-value estimate for a fixed gene set <italic>S</italic> is strictly positive [<xref ref-type="bibr" rid="CR7">7</xref>] and lower-bounded by inverse sample size: 
<disp-formula id="Equd"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l} \hat p_{S} = \frac{1}{n}\sum\limits_{\pi\in\Pi} \left(|ES(S, \pi)| \geq |ES(S, e)| \right) \geq \frac{1}{n} \end{array} $$ \end{document}</tex-math><mml:math id="M20"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"><mml:msub><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mo>^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:mfrac><mml:munder><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:mi>π</mml:mi><mml:mo>∈</mml:mo><mml:mi>Π</mml:mi></mml:mrow></mml:munder><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mo>|</mml:mo><mml:mtext mathvariant="italic">ES</mml:mtext><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>π</mml:mi><mml:mo>)</mml:mo><mml:mo>|</mml:mo><mml:mo>≥</mml:mo><mml:mo>|</mml:mo><mml:mtext mathvariant="italic">ES</mml:mtext><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>e</mml:mi><mml:mo>)</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:mfenced><mml:mo>≥</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:mfrac></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Equd.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>The Molecular Signature Database v5.1 [<xref ref-type="bibr" rid="CR8">8</xref>] contains more than 13,000 gene sets divided into eight major collections. Thus, when testing all gene sets at a Bonferroni-adjusted significance level of <inline-formula id="IEq6"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\alpha = \frac {0.01}{13,000}$\end{document}</tex-math><mml:math id="M22"><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>0.01</mml:mn></mml:mrow><mml:mrow><mml:mn>13</mml:mn><mml:mo>,</mml:mo><mml:mn>000</mml:mn></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq6.gif"/></alternatives></inline-formula> we have to probe more than 1,300,000 permutations in order to allow the result <inline-formula id="IEq7"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\hat p_{S} &lt; \alpha $\end{document}</tex-math><mml:math id="M24"><mml:msub><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mo>^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>&lt;</mml:mo><mml:mi>α</mml:mi></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq7.gif"/></alternatives></inline-formula>. For the rest of the paper, we focus on the efficient computation of the enrichment score table <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) since <italic>p</italic>-value estimates and other statistics such as FWER can be determined using its entries in a post-processing phase.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>The parallel algorithm</title>
      <p>GSEA can be parallelized using coarse-grained computation schemes such as assigning threads to each permutation <italic>π</italic> or gene set <italic>S</italic> since all entries in <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) can be processed independently. This approach will be used in our multi-threaded shared memory implementation of GSEA (ompGSEA): The set of <italic>n</italic> probed permutations is split into <italic>m</italic> partitions each of approximate size <inline-formula id="IEq8"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\frac {n}{m}$\end{document}</tex-math><mml:math id="M26"><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq8.gif"/></alternatives></inline-formula> and afterwards <italic>m</italic> threads independently operate on the individual chunks. This can easily be achieved in shared memory architectures using OpenMP pragmas. Moreover, extensions to distributed memory architectures using the Message Passing Interface (MPI) are conceivable.</p>
      <p>However, CUDA-enabled accelerators can maintain up to several thousands of threads (e.g. Titan X/Tesla K40c: 3,072/2,880 cores) but only exhibit a limited amount of RAM (both GPUs provide 12 GB). As a result, fine-grained computation schemes that parallelize the aforementioned building blocks of the GSEA algorithm have to be employed to exploit the full compute capabilities of CUDA-enabled accelerators. In the following, we will present the fine-grained parallelization scheme for each processing stage separately.</p>
      <sec id="Sec9">
        <title>Computation of local deviation measures</title>
        <p>Many local deviation measures used in traditional GSEA e.g. <italic>difference of means</italic> or <italic>fold change</italic> can be expressed in terms of intra-class means and standard deviations. Therefore, we have to separately accumulate sums of expression values and their squares for each of the two phenotypes. Although efficient implementations for parallel reduction on CUDA-enabled accelerators are known [<xref ref-type="bibr" rid="CR9">9</xref>] we instead parallelize the loop over the gene symbols since each row of the data matrix <italic>D</italic> can be processed independently without the need for expensive synchronization as used in reduction algorithms. Moreover, the number of gene symbols will most likely exceed the number of probed patients and thus the loop over <italic>g</italic><sub><italic>i</italic></sub> is better suited for massively parallel computation. During the calculation of statistical moments we encounter two challenges:</p>
        <p>First, the numerically stable computation of standard deviations is known to be a stubborn task. On the one hand, when accumulating a large number of entries (here patients) one has to account for numeric stability using cancellation-compensation [<xref ref-type="bibr" rid="CR10">10</xref>] or two-pass algorithms for the standard deviations. On the other hand, when dealing with only a few patients one-pass or cancellation-compensated online algorithms for the standard deviation might be a proper trade-off between accuracy and speed [<xref ref-type="bibr" rid="CR11">11</xref>]. rapidGSEA exploits the C++ template engine to provide specialized and user-customizable accumulator functors adaptable to the task’s requirements.</p>
        <p>Second, the gene-wise computation of transcription differences <italic>Δ</italic>(<italic>g</italic><sub><italic>i</italic></sub>) accumulates statistical moments along the rows of the matrix <italic>D</italic>. Using a CUDA thread block of up to 1,024 CUDA threads for a fixed permutation of the phenotype array <italic>L</italic>(<italic>p</italic><sub><italic>π</italic>(<italic>j</italic>)</sub>) it is advisable to transpose <italic>D</italic> to guarantee coalesced access to global memory. More specifically, since a warp of 32 threads is executed simultaneously on the GPU their concurrent reads from the same column of <italic>D</italic> would result in excessive cache misses. In contrast, when transposing <italic>D</italic> the same access pattern causes consecutive threads to simultaneously access consecutive memory. This change from column-major-order to row-major-order traversal decreases the runtime of this processing step by one order-of-magnitude in our experiments. Since <italic>D</italic> usually tends to be smaller than 100 MB, we can use a standard bank conflict-free out-of-place algorithm for matrix transposition [<xref ref-type="bibr" rid="CR12">12</xref>]. Figure <xref rid="Fig4" ref-type="fig">4</xref> depicts the described computation scheme for two CUDA thread blocks each consisting of ten CUDA threads. Please note that the genes are distributed using a block-cyclic distribution if the number of genes exceed the number of threads.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Fine-Grained Parallelization of Stages 1 and 2. Parallelization of the deviation score computation operating on the transposed data matrix <italic>D</italic>
<sup><italic>T</italic></sup>. Each thread block draws a permutation by shuffling the original phenotype label list in shared memory. The threads within a thread block independently accumulate gene transcription differences for each gene symbol identifier (along columns) ensuring coalesced reads from global memory. Finally, the local deviation scores are sorted using the segmented radix sort primitive of CUB</p></caption><graphic xlink:href="12859_2016_1244_Fig4_HTML" id="MO4"/></fig></p>
        <p>The sampling of permutations can be accomplished using the pseudo random number generators (PRNG) from the cuRAND library [<xref ref-type="bibr" rid="CR13">13</xref>] bundled with the CUDA SDK. Unfortunately, cuRAND does not provide host-sided calls for the random number generators defined in the device API. Thus, we implemented the <italic>keep it simple stupid</italic> (KISS) PRNG [<xref ref-type="bibr" rid="CR14">14</xref>] for the CPU and GPU in order to provide consistent results across architectures. Both cuRAND’s <italic>xorwow</italic> PRNG and our KISS implementation pass all tests of the dieharder suite [<xref ref-type="bibr" rid="CR15">15</xref>]. The permutation of the phenotype labels <italic>L</italic>(<italic>p</italic><sub><italic>π</italic>(<italic>j</italic>)</sub>) is generated by reordering the original label list <italic>L</italic>(<italic>p</italic><sub><italic>j</italic></sub>) in shared memory using a Fisher-Yates shuffle.</p>
      </sec>
      <sec id="Sec10">
        <title>Gene ranking</title>
        <p>Up to this point, the transcription differences <italic>Δ</italic>(<italic>g</italic><sub><italic>i</italic></sub>) have been computed for a batch of permutations that fit into the RAM of the GPU. Unfortunately, we cannot directly apply a key-value sort to <italic>Δ</italic>(<italic>g</italic><sub><italic>i</italic></sub>) within the same kernel due to the 48 KB limitation of shared memory. Thus, after termination of the previous kernel, we call a device-wide key-value radix sort primitive cub::DeviceSegmentedRadixSort from the CUB [<xref ref-type="bibr" rid="CR9">9</xref>] library specifically optimized for the efficient sorting of segmented arrays. This approach is up to one order-of-magnitude faster than stacking single device-wide cub::DeviceRadixSort calls for each permutation or aliasing global memory to the block-wide cub::BlockRadixSort primitives. The number of concurrently sorted arrays has been set to 128 as a proper trade-off between runtime and memory consumption. At the end of this stage, we have stored the sorted deviation scores <italic>Δ</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>) and corresponding indices <italic>σ</italic>(<italic>i</italic>) for each of the probed permutations in global memory. Figure <xref rid="Fig4" ref-type="fig">4</xref> illustrates the described workflow.</p>
      </sec>
      <sec id="Sec11">
        <title>Enrichment score computation</title>
        <p>The computation scheme for the running sum statistic is similar to the processing of local deviation scores. For each permutation a CUDA thread block operates on a pair (<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>,<italic>Δ</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>)) of reordered gene symbols and gene transcription differences. The test whether a gene identifier is part of a gene set <italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>∈<italic>S</italic> is usually implemented with hash sets on CPUs. Efficient hashing algorithms on CUDA-enabled devices are stated in the literature [<xref ref-type="bibr" rid="CR16">16</xref>] which typically involve linked lists or binary search in sorted arrays in order to resolve collisions. However, we decided to encode the affiliation of a gene <italic>g</italic> with a binary bit mask <italic>b</italic>(<italic>g</italic>,<italic>S</italic>). The computation of the bit mask can be delegated to the CPU using STL hashes. Further, the corresponding execution time can be overlapped with the deviation score and gene ranking kernels. As a result, we can determine a gene’s affiliation on the GPU in constant time by reading the corresponding entry of the bit mask from global memory.</p>
        <p>Each thread <italic>k</italic> within a thread block processes one gene set <italic>S</italic><sub><italic>k</italic></sub>. Shared memory can be utilized to avoid slow accesses to global memory since all threads in a warp have to access the same entry from the bit mask <italic>b</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>,<italic>S</italic><sub><italic>k</italic></sub>) in random order. To achieve this, batches of 64 entries of reordered gene transcription differences <italic>Δ</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>) and bit mask entries <italic>b</italic>(<italic>g</italic><sub><italic>σ</italic>(<italic>i</italic>)</sub>,<italic>S</italic><sub><italic>k</italic></sub>) are consecutively loaded into shared memory (scratchpad) and afterwards processed in order. Due to the large number of genes we again use numerically stable Kahan summation [<xref ref-type="bibr" rid="CR10">10</xref>] in order to suppress cancellation in floating point arithmetic. Finally, the maximum amplitude of the weighted Kolmogorov-Smirnov statistic is written to the enrichment score table <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) and consecutively transferred to the host. Figure <xref rid="Fig5" ref-type="fig">5</xref> illustrates the described procedure.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Fine-Grained Parallelization of Stage 3. Parallelization of the enrichment score computation operating on the ranked genes and precomputed bit masks. Again, each thread block processes a permutation. The threads within a thread block independently accumulate the running sum statistic for each of the probed gene sets. Shared memory is utilized to suppress redundant reads from global memory</p></caption><graphic xlink:href="12859_2016_1244_Fig5_HTML" id="MO5"/></fig></p>
      </sec>
      <sec id="Sec12">
        <title>Significance estimation</title>
        <p>When only computing <italic>p</italic>-value estimates the counting of values in the tails of the null distribution could be accomplished on the GPU using the device-wide reduction primitive cub::DeviceSegmentedReduce from the CUB library. A similar approach for the computation of the FWER is conceivable. However, we decided to copy <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) to the host in order to provide the full information for consecutive analysis and visualization of sampled distributions.</p>
      </sec>
    </sec>
    <sec id="Sec13">
      <title>Bindings for the R language</title>
      <p>The core algorithm written in CUDA and C++11 is provided as standalone application and additionally as Rcpp-based [<xref ref-type="bibr" rid="CR17">17</xref>] package for R. The latter includes functions for the reading of gene expression tables (*.gct), class assignment labels (*.cls) and gene sets files (*.gmt) as well as methods for the querying and selection of the used GPU (see user manual).</p>
    </sec>
  </sec>
  <sec id="Sec14">
    <title>Results and discussion</title>
    <p>The performance of rapidGSEA is compared to the broadGSEA Java application in version 2.2.2 [<xref ref-type="bibr" rid="CR18">18</xref>] on the following platform: 
<list list-type="bullet"><list-item><p><bold>(CPU)</bold> Intel Xeon E5-2660 v3 @ 2.60 GHz GHz (10+10 HT) with 128 GB DDR4 RAM</p></list-item><list-item><p><bold>(GPU)</bold> NVIDIA GeForce GTX Titan X with 12 GB GDDR5 RAM, NVIDIA Tesla K40c with 12 GB GDDR5 RAM disabled ECC, NVCC ver. 7.5</p></list-item><list-item><p><bold>(Software)</bold> Ubuntu 14.04 LTS, GCC ver. 4.8.4, IcedTea ver. 2.6.3 OpenJDK 64-Bit Server VM</p></list-item></list></p>
    <p>In our experiments, we use gene expression data (GEO: Series GSE19429) consisting of 183 MDS patients and 17 healthy controls where the array spots have been collapsed to |<italic>G</italic>|=20,639 unique gene symbols by max pooling ambiguous mappings in the Affymetrix Human Genome U133 Plus 2.0 Array (GEO: Platform GPL570) [<xref ref-type="bibr" rid="CR19">19</xref>]. We further choose the smallest (H: hallmark, 50 gene sets) and the biggest (C: curated, 4726 gene sets) collection from the Molecular Signatures Database 5.0 [<xref ref-type="bibr" rid="CR8">8</xref>]. The number of tested permutations ranges from 1,024 up to 1,024<sup>2</sup> = 1,048,576 samples. Single-precision runs are executed on the GeForce GTX Titan X and double-precision experiments on the Tesla K40c GPU. If not stated otherwise, rapidGSEA and broadGSEA have been configured to read the input data from disk and afterwards to write the full enrichment score table <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) to the file system in order to ensure fair competition.</p>
    <sec id="Sec15">
      <title>Accuracy and compliance of enrichment scores</title>
      <p>We have evaluated the compliance of computed enrichment scores between broadGSEA and rapidGSEA using the identity permutation on the 50 gene sets of the Hallmark collection under the <italic>difference of classes</italic> measure. The deviation of computed enrichment scores between rapidGSEA and broadGSEA comply within six digits for both single and double-precision arithmetic (see Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Using identical floating point data types the computed scores of both rapidGSEA components, cudaGSEA and ompGSEA, are indistinguishable.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Compliance of computed enrichment scores. Histograms of the difference of computed enrichment scores between rapidGSEA and broadGSEA over the 50 gensets from the Hallmark collection. Both, single and double-precision residues comply within six digits</p></caption><graphic xlink:href="12859_2016_1244_Fig6_HTML" id="MO6"/></fig></p>
      <p>However, a comparison of computed histograms <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) is more complex due to different implementations of random number generators. Thus, we have approximated the probability density functions (PDFs) of the enrichment score distribution using <italic>n</italic>=1,024<sup>2</sup> permutations and <inline-formula id="IEq9"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\sqrt {n} = 1,024$\end{document}</tex-math><mml:math id="M28"><mml:msqrt><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msqrt><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>024</mml:mn></mml:math><inline-graphic xlink:href="12859_2016_1244_Article_IEq9.gif"/></alternatives></inline-formula> bins uniformly sampling the interval [−1,1]. Afterwards, the approximate cumulative distribution functions (CDFs) are computed by prefix summation. The maximum absolute difference of approximated CDFs, also know as Kolmogorov distance, 
<disp-formula id="Eque"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l} dist = \max\limits_{k} | CDF^{\mathrm{(rapidGSEA)}}_{k} - CDF^{\mathrm{(broadGSEA)}}_{k} | \end{array} $$ \end{document}</tex-math><mml:math id="M30"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"><mml:mtext mathvariant="italic">dist</mml:mtext><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>max</mml:mo></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munder><mml:mo>|</mml:mo><mml:mtext mathvariant="italic">CD</mml:mtext><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mstyle mathvariant="normal"><mml:mo>(</mml:mo><mml:mtext mathvariant="italic">rapidGSEA</mml:mtext><mml:mo>)</mml:mo></mml:mstyle></mml:mrow></mml:munderover><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">CD</mml:mtext><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mstyle mathvariant="normal"><mml:mo>(</mml:mo><mml:mtext mathvariant="italic">broadGSEA</mml:mtext><mml:mo>)</mml:mo></mml:mstyle></mml:mrow></mml:munderover><mml:mo>|</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2016_1244_Article_Eque.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>is then determined for each of the 50 gene sets. Note, the Kolmogorov distance is a reasonable choice since it determines the measurement error of the area under the PDF of the enrichment score distribution and thus relates to the error of the estimated <italic>p</italic>-value. Figure <xref rid="Fig7" ref-type="fig">7</xref> visualizes the described procedure for one gene set. The minimum/median/maximum absolute deviation between the approximated CDFs produced by rapidGSEA and broadGSEA over the 50 gene sets is given by 0.0005/0.0011/0.0018. When comparing two histograms both computed by broadGSEA with different seeds the same metrics yield 0.0006/0.0011/0.0018. Moreover, in 26 out of 50 cases rapidGSEA produces histograms with a smaller Kolmogorov distances to broadGSEA in contrast to 24 cases where both histograms produced by broadGSEA are more similar. Concluding, the deviations in estimated areas are reasonably small and mainly caused by different samples in permutation space.<sup>2</sup><fig id="Fig7"><label>Fig. 7</label><caption><p>Compliance of computed histograms of enrichment scores. Histograms of the computed enrichment scores of rapidGSEA and broadGSEA using <italic>n</italic>=1,024<sup>2</sup> permutations over one of the 50 gensets from the Hallmark collection. Both, the computed PDFs (<italic>left</italic> panel) and CDFs (<italic>middle</italic> panel) are visually almost indistinguishable. The absolute difference of CDFs (right panel) and thus the absolute error of <italic>p</italic>-values is bounded by less then 0.001 in this example</p></caption><graphic xlink:href="12859_2016_1244_Fig7_HTML" id="MO7"/></fig></p>
    </sec>
    <sec id="Sec16">
      <title>Scaling over multiple cores</title>
      <p>We perform a strong scalability test of our ompGSEA implementation over multiple cores of the Xeon CPU. Note, ompGSEA is part of the cudaGSEA binary and can be selected using the -cpu flag. The time needed to process the 50 gene sets defined in the H(allmark) collection is measured for a fixed input size of <italic>n</italic>=16,384 permutations and a variable number of threads. The experiments cover performance measurements for up to ten physical cores each executing a single thread and a hyper-threaded scenario where up to twenty threads are assigned to ten physical cores. When taking measurements on less than ten physical cores we enforce a thread’s affinity using the taskset command in order to avoid rescheduling by the operating system. The obtained runtimes are listed in Table <xref rid="Tab1" ref-type="table">1</xref> and illustrated in Fig. <xref rid="Fig8" ref-type="fig">8</xref>. The first experiment utilizing only physical cores reveals almost linear speedup for ompGSEA with an efficiency of roughly 77 <italic>%</italic> for ten cores. However, the hyper-threaded variant exhibits slightly super-linear behaviour for up to nine physical cores and an efficiency of 98 <italic>%</italic> for all cores. Throughout the rest of this paper all reported runtimes of ompGSEA refer to the hyper-threaded ten core scenario running approximately ten times faster than the corresponding single-core application. Please note that the time for writing the enrichment score table <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) to disk has been neglected during this benchmark.
<fig id="Fig8"><label>Fig. 8</label><caption><p>Scaling ompGSEA over multiple cores. Runtime in seconds (<italic>left</italic> panel) and speedup in comparison to single-threaded performance (<italic>right</italic> panel) using up to ten physical cores with and without hyperthreading</p></caption><graphic xlink:href="12859_2016_1244_Fig8_HTML" id="MO8"/></fig><table-wrap id="Tab1"><label>Table 1</label><caption><p>Scaling over multiple cores</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left"><bold>noHT</bold></td><td align="left"><bold>1</bold></td><td align="left"><bold>2</bold></td><td align="left"><bold>3</bold></td><td align="left"><bold>4</bold></td><td align="left"><bold>5</bold></td><td align="left"><bold>6</bold></td><td align="left"><bold>7</bold></td><td align="left"><bold>8</bold></td><td align="left"><bold>9</bold></td><td align="left"><bold>10</bold></td></tr><tr><td align="left">Runtime</td><td align="left">224.11</td><td align="left">116.06</td><td align="left">83.93</td><td align="left">65.11</td><td align="left">53.56</td><td align="left">45.21</td><td align="left">39.31</td><td align="left">34.87</td><td align="left">31.74</td><td align="left">28.94</td></tr><tr><td align="left">Speedup</td><td align="left">1.00</td><td align="left">1.93</td><td align="left">2.67</td><td align="left">3.44</td><td align="left">4.18</td><td align="left">4.96</td><td align="left">5.70</td><td align="left">6.43</td><td align="left">7.06</td><td align="left">7.74</td></tr><tr><td align="left">Efficiency</td><td align="left">1.00</td><td align="left">0.97</td><td align="left">0.89</td><td align="left">0.86</td><td align="left">0.84</td><td align="left">0.83</td><td align="left">0.81</td><td align="left">0.80</td><td align="left">0.78</td><td align="left">0.77</td></tr><tr><td align="left"><bold>HT</bold></td><td align="left"><bold>1</bold></td><td align="left"><bold>2</bold></td><td align="left"><bold>3</bold></td><td align="left"><bold>4</bold></td><td align="left"><bold>5</bold></td><td align="left"><bold>6</bold></td><td align="left"><bold>7</bold></td><td align="left"><bold>8</bold></td><td align="left"><bold>9</bold></td><td align="left"><bold>10</bold></td></tr><tr><td align="left">Runtime</td><td align="left">174.82</td><td align="left">91.09</td><td align="left">66.31</td><td align="left">52.09</td><td align="left">42.57</td><td align="left">35.58</td><td align="left">30.94</td><td align="left">27.55</td><td align="left">24.79</td><td align="left">22.85</td></tr><tr><td align="left">Speedup</td><td align="left">1.28</td><td align="left">2.46</td><td align="left">3.38</td><td align="left">4.30</td><td align="left">5.26</td><td align="left">6.30</td><td align="left">7.24</td><td align="left">8.13</td><td align="left">9.04</td><td align="left">9.81</td></tr><tr><td align="left">Efficiency</td><td align="left">1.28</td><td align="left">1.23</td><td align="left">1.13</td><td align="left">1.08</td><td align="left">1.05</td><td align="left">1.05</td><td align="left">1.03</td><td align="left">1.02</td><td align="left">1.00</td><td align="left">0.98</td></tr></tbody></table><table-wrap-foot><p>Runtime in seconds, speedup and parallelization efficiency using up to ten physical cores with disabled hyperthreading (noHT) and enabled hyperthreading (HT) for a fixed number of <italic>n</italic>=16,384 permutations on the Hallmark gene set collection</p></table-wrap-foot></table-wrap></p>
    </sec>
    <sec id="Sec17">
      <title>Comparison between rapidGSEA and broadGSEA</title>
      <p>The execution time of rapidGSEA and broadGSEA is measured on the aforementioned data set over a wide range of permutations (1,024 up to 1,024<sup>2</sup>) using the Hallmark (H: 50 gene sets) and Curated (C2: 4,725 gene sets) collections. The experiments include parsing of input files, memory transfers over PCIe when using CUDA and writing the enrichment score table <italic>E</italic><italic>S</italic>(<italic>S</italic>,<italic>π</italic>) to spinning disk. The obtained runtimes and speedups are listed in Table <xref rid="Tab2" ref-type="table">2</xref> and illustrated in Figs. <xref rid="Fig9" ref-type="fig">9</xref> and <xref rid="Fig10" ref-type="fig">10</xref>. Numbers in square brackets or dashed lines indicate linearly extrapolated runtimes for broadGSEA in log-log space for large amounts of permutations.
<fig id="Fig9"><label>Fig. 9</label><caption><p>Performance Comparison between rapidGSEA and broadGSEA on Hallmark Gene Set Collection (H). Runtime in seconds of rapidGSEA and broadGSEA (<italic>left</italic> panel) and speedups of rapidGSEA in comparison to broadGSEA (<italic>right</italic> panel) for up to 1,024<sup>2</sup> permutations on the Hallmark (H) collection consisting of 50 gene sets</p></caption><graphic xlink:href="12859_2016_1244_Fig9_HTML" id="MO9"/></fig><fig id="Fig10"><label>Fig. 10</label><caption><p>Performance Comparison between rapidGSEA and broadGSEA on Curated Gene Set Collection (C2). Runtime in seconds of rapidGSEA and broadGSEA (<italic>left</italic> panel) and speedups of rapidGSEA in comparison to broadGSEA (<italic>right</italic> panel) for up to 1,024<sup>2</sup> permutations on the Curated (C2) collection consisting of 4,725 gene sets. Please note that dashed lines indicate linearly extrapolated results in log-log space</p></caption><graphic xlink:href="12859_2016_1244_Fig10_HTML" id="MO10"/></fig><table-wrap id="Tab2"><label>Table 2</label><caption><p>Performance comparison between rapidGSEA and broadGSEA</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left"><bold>H (50)</bold></td><td align="left"><bold>1,024</bold></td><td align="left"/><td align="left"><bold>4,096</bold></td><td align="left"/><td align="left"><bold>16,384</bold></td><td align="left"/><td align="left"><bold>65,536</bold></td><td align="left"/><td align="left"><bold>262,144</bold></td><td align="left"/><td align="left"><bold>1,048,576</bold></td><td align="left"/></tr><tr><td align="left">broad Xeon</td><td align="left">83.6</td><td align="left"/><td align="left">307.1</td><td align="left"/><td align="left">1,149.0</td><td align="left"/><td align="left">4,681.0</td><td align="left"/><td align="left">18,301.0</td><td align="left"/><td align="left">70,946.8</td><td align="left"/></tr><tr><td align="left">rapid Xeon</td><td align="left">3.0</td><td align="left">(28)</td><td align="left">7.0</td><td align="left">(44)</td><td align="left">22.7</td><td align="left">(51)</td><td align="left">85.8</td><td align="left">(55)</td><td align="left">339.4</td><td align="left">(54)</td><td align="left">1,357.8</td><td align="left">(52)</td></tr><tr><td align="left">rapid Tesla</td><td align="left">1.8</td><td align="left">(45)</td><td align="left">2.7</td><td align="left">(112)</td><td align="left">6.5</td><td align="left">(176)</td><td align="left">21.9</td><td align="left">(214)</td><td align="left">83.7</td><td align="left">(219)</td><td align="left">329.9</td><td align="left">(215)</td></tr><tr><td align="left">rapid Titan</td><td align="left">1.6</td><td align="left">(54)</td><td align="left">1.9</td><td align="left">(164)</td><td align="left">3.1</td><td align="left">(367)</td><td align="left">8.3</td><td align="left">(564)</td><td align="left">28.2</td><td align="left">(648)</td><td align="left">105.2</td><td align="left">(674)</td></tr><tr><td align="left"><bold>C2 (4,725)</bold></td><td align="left"><bold>1,024</bold></td><td align="left"/><td align="left"><bold>4,096</bold></td><td align="left"/><td align="left"><bold>16,384</bold></td><td align="left"/><td align="left"><bold>65,536</bold></td><td align="left"/><td align="left"><bold>262,144</bold></td><td align="left"/><td align="left"><bold>1,048,576</bold></td><td align="left"/></tr><tr><td align="left">broad Xeon</td><td align="left">1,113.0</td><td align="left"/><td align="left">4,600.0</td><td align="left"/><td align="left">17,962.0</td><td align="left"/><td align="left">70,213.4</td><td align="left"/><td align="left">[274,464.0]</td><td align="left"/><td align="left">[1,072,878.9]</td><td align="left"/></tr><tr><td align="left">rapid Xeon</td><td align="left">89.3</td><td align="left">(12)</td><td align="left">282.9</td><td align="left">(16)</td><td align="left">1,084.8</td><td align="left">(17)</td><td align="left">4,266.2</td><td align="left">(16)</td><td align="left">17,069.0</td><td align="left">(16)</td><td align="left">68,682.3</td><td align="left">(16)</td></tr><tr><td align="left">rapid Tesla</td><td align="left">13.1</td><td align="left">(85)</td><td align="left">31.6</td><td align="left">(146)</td><td align="left">108.5</td><td align="left">(166)</td><td align="left">418.7</td><td align="left">(168)</td><td align="left">1,685.5</td><td align="left">(163)</td><td align="left">6,732.6</td><td align="left">(159)</td></tr><tr><td align="left">rapid Titan</td><td align="left">10.3</td><td align="left">(108)</td><td align="left">20.8</td><td align="left">(221)</td><td align="left">61.9</td><td align="left">(290)</td><td align="left">214.0</td><td align="left">(328)</td><td align="left">895.9</td><td align="left">(306)</td><td align="left">3,447.3</td><td align="left">(311)</td></tr></tbody></table><table-wrap-foot><p>Runtime in seconds and speedups of rapidGSEA compared to broadGSEA (round brackets) using up to <italic>n</italic>=1,024<sup>2</sup> permutations on the Hallmark (H: 50 gene sets) and Curated (C2: 4725 gene sets) collection. Please note that runtimes in square brackets indicate linearly extrapolated runtimes of broadGSEA in log-log space</p></table-wrap-foot></table-wrap></p>
      <p>Our multi-threaded implementation ompGSEA outperforms broadGSEA on both gene set collections (H and C2) by at least one order-of-magnitude. Note, although broadGSEA spawns more than twenty threads the majority remains idle during processing. Therefore, broadGSEA cannot benefit from the additional physical cores of the Xeon processor. The same behaviour can be observed on an Intel i7 i3970X CPU with six physical cores.</p>
      <p>Moreover, cudaGSEA outperforms broadGSEA by around two orders-of-magnitude with growing speedups for an increasing number of permutations. This can be explained by the thread occupancy of the used GPUs. Both, the GeForce Titan X and the Tesla K40c can store at once tens of thousands of permutations (roughly 70k/35k in single/double-precision) within their 12 GB of RAM. Thus, when probing a small number of permutations the majority of streaming multi-processors remain idle. Furthermore, the parsing of input files and dumping of results takes several seconds and cannot be parallelized on the GPU.</p>
    </sec>
  </sec>
  <sec id="Sec18" sec-type="conclusion">
    <title>Conclusions</title>
    <p>In this paper, we have introduced rapidGSEA – a software suite consisting of two tools for facilitating permutation-based GSEA: cudaGSEA and ompGSEA. cudaGSEA is a CUDA-accelerated tool using fine-grained parallelization schemes on massively parallel architectures while ompGSEA is a coarse-grained multi-threaded tool for multi-core CPUs. ompGSEA outperforms the state-of-the-art implementation of GSEA (broadGSEA) by at least one order-of-magnitude in terms of execution times while providing compliant results. Furthermore, cudaGSEA outperforms broadGSEA by around two orders-of-magnitude. The time for probing 1,048,576 permutations on a gene expression data set consisting of 20,639 unique gene symbols and 200 patients can drastically be reduced from roughly 13 days for broadGSEA to less than two hours using rapidGSEA on a commonly available Tesla K40c GPU in double-precision or less than one hour on a GeForce Titan X in single-precision.</p>
    <p>A possible direction of future research in order to further reduce runtimes is the parallelization of GSEA on a compute cluster with multiple GPUs attached to each node. Furthermore, extensions of GSEA to consider graph-based (Gene Graph Enrichment Analysis [<xref ref-type="bibr" rid="CR20">20</xref>]) or network-based (Network-based GSEA [<xref ref-type="bibr" rid="CR21">21</xref>]) correlations between gene symbols and observed phenotypes have gained increasing attention in recent years. It will be interesting to investigate how the parallelization techniques discussed in this paper can be applied to accelerate these extended enrichment methods.</p>
  </sec>
  <sec id="Sec19">
    <title>Availability and requirements</title>
    <p><bold>Project name:</bold> cudaGSEA <bold>Project home page:</bold> https://github.com/gravitino/cudaGSEA<bold>Operating system(s):</bold> Linux <bold>Programming language:</bold> C++, CUDA, R <bold>Other requirements:</bold> CUDA-capable GPU<bold>License:</bold> GNU LGPL <bold>Any restrictions to use by non-academics:</bold> None</p>
  </sec>
  <sec id="Sec20">
    <title>Endnotes</title>
    <p><sup>1</sup> Please note that throughout this manuscript, we use zero-based indexing.</p>
    <p><sup>2</sup> Individual results for each gene set can be found at the github repository of rapidGSEA.</p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>API</term>
        <def>
          <p>Application programming interface</p>
        </def>
      </def-item>
      <def-item>
        <term>CUDA</term>
        <def>
          <p>Compute unified device architecture</p>
        </def>
      </def-item>
      <def-item>
        <term>FWER</term>
        <def>
          <p>Family-wise error rate</p>
        </def>
      </def-item>
      <def-item>
        <term>GSEA</term>
        <def>
          <p>Gene set enrichment analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>MPI</term>
        <def>
          <p>Message passing interface</p>
        </def>
      </def-item>
      <def-item>
        <term>PCIe</term>
        <def>
          <p>Peripheral component interconnect express</p>
        </def>
      </def-item>
      <def-item>
        <term>PRNG</term>
        <def>
          <p>Pseudo random number generator</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <ack>
    <title>Acknowledgements</title>
    <p>Partial funding was gratefully provided by the Center for Computational Science in Mainz.</p>
    <sec id="d30e3459">
      <title>Authors’ contributions</title>
      <p>BS and AH conceived the study, and participated in its design and coordination. All authors contributed to the writing of the manuscript. CH wrote and evaluated the CPU and GPU implementations. All authors read and approved the final manuscript.</p>
    </sec>
    <sec id="d30e3464">
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec id="d30e3469">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="d30e3474">
      <title>Ethics approval and consent to participate</title>
      <p>Throughout this paper the used gene expression data set is anonymized and has been obtained from NCBI Gene Expression Omnibus (GEO: Series GSE19429). The data has exclusively been used for runtime measurements and compliance evaluation of computed enrichment score values between broadGSEA and rapidGSEA. The original source [<xref ref-type="bibr" rid="CR19">19</xref>] explicitly states approval granted by appropriate ethics committees: ’The study was approved by the ethics committees (Oxford C00.196, Bournemouth 9991/03/E, Duisburg 2283/03, Stockholm 410/03, Pavia 26264/2002) and informed consent was obtained.’</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">Subramanian, et al.Gene Set Enrichment Analysis: A Knowledge-Based Approach for Interpreting Genome-Wide Expression Profiles. Proc Natl Acad Sci. 2005; 102(43):15545–15550. doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1073/pnas.0506580102">http://dx.doi.org/10.1073/pnas.0506580102</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hung</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>TH</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>DeLisi</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Gene Set Enrichment Analysis: Performance Evaluation and Usage Guidelines</article-title>
        <source>Brief. Bioinform</source>
        <year>2012</year>
        <volume>13</volume>
        <issue>3</issue>
        <fpage>281</fpage>
        <lpage>91</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbr049</pub-id>
        <?supplied-pmid 21900207?>
        <pub-id pub-id-type="pmid">21900207</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <mixed-citation publication-type="other">Wang X, Cairns MJ. SeqGSEA: a Bioconductor Package for Gene Set Enrichment Analysis of RNA-Seq Data Integrating Differential Expression and Splicing. Bioinformatics. 2014; 30(12):1777–1779. doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/btu090">http://dx.doi.org/10.1093/bioinformatics/btu090</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Azuaje</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Gene set analysis in the cloud</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>2</issue>
        <fpage>294</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr630</pub-id>
        <?supplied-pmid 22084254?>
        <pub-id pub-id-type="pmid">22084254</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eisen</surname>
            <given-names>MB</given-names>
          </name>
          <name>
            <surname>Spellman</surname>
            <given-names>PT</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>PO</given-names>
          </name>
          <name>
            <surname>Botstein</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Cluster analysis and display of genome-wide expression patterns</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>1998</year>
        <volume>95</volume>
        <issue>25</issue>
        <fpage>14863</fpage>
        <lpage>14868</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.95.25.14863</pub-id>
        <?supplied-pmid 9843981?>
        <pub-id pub-id-type="pmid">9843981</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Backes</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Keller</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kuentzer</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kneissl</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Comtesse</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Elnakady</surname>
            <given-names>YA</given-names>
          </name>
          <name>
            <surname>Müller</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Meese</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Lenhof</surname>
            <given-names>HP</given-names>
          </name>
        </person-group>
        <article-title>GeneTrail-advanced gene set enrichment analysis</article-title>
        <source>Nucleic Acids Research</source>
        <year>2007</year>
        <volume>35</volume>
        <issue>suppl 2</issue>
        <fpage>186</fpage>
        <lpage>92</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkm323</pub-id>
        <pub-id pub-id-type="pmid">17158155</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <mixed-citation publication-type="other">Phipson B, Smyth GK. Permutation P-values Should Never Be Zero: Calculating Exact P-values When Permutations Are Randomly Drawn. Stat Appl Genet Mol Biol. 2010;9(1), Article 39. <ext-link ext-link-type="uri" xlink:href="http://www.degruyter.com/view/j/sagmb.2010.9.1/sagmb.2010.9.1.1585/sagmb.2010.9.1.1585.xml">http://www.degruyter.com/view/j/sagmb.2010.9.1/sagmb.2010.9.1.1585/sagmb.2010.9.1.1585.xml</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <mixed-citation publication-type="other">Molecular Signatures Database. Accessed 1 Apr 2016. <ext-link ext-link-type="uri" xlink:href="http://software.broadinstitute.org/gsea/msigdb">http://software.broadinstitute.org/gsea/msigdb</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <mixed-citation publication-type="other">CUB: CUDA Unbound Library. Accessed 1 Apr 2016. <ext-link ext-link-type="uri" xlink:href="https://nvlabs.github.io/cub/">https://nvlabs.github.io/cub/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <mixed-citation publication-type="other">Kahan W. Pracniques: Further Remarks on Reducing Truncation Errors. Commun. ACM. 1965; 8(1):40–8. doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/363707.363723">http://dx.doi.org/10.1145/363707.363723</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <mixed-citation publication-type="other">Chan TF, Golub GH, LeVeque RJ. Updating Formulae and a Pairwise Algorithm for Computing Sample Variances, Technical report. Stanford: Stanford University; 1979. <ext-link ext-link-type="uri" xlink:href="http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf">http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <mixed-citation publication-type="other">Ruetsch G, Micikevicius P. Optimize Matrix Transpose Technical report. Santa Clara: NVIDIA coporation; 2010. <ext-link ext-link-type="uri" xlink:href="http://docs.nvidia.com/cuda/samples/6_Advanced/transpose/doc/MatrixTranspose.pdf">http://docs.nvidia.com/cuda/samples/6_Advanced/transpose/doc/MatrixTranspose.pdf</ext-link>. Accessed 1 Apr 2016.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">cuRAND: NVIDIA CUDA Random Number Generation Library. [Accessed 1 Apr 2016. <ext-link ext-link-type="uri" xlink:href="https://developer.nvidia.com/curand">https://developer.nvidia.com/curand</ext-link>].</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Marsaglia</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Tsang</surname>
            <given-names>WW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Some difficult-to-pass tests of randomness</article-title>
        <source>J Stat Softw</source>
        <year>2002</year>
        <volume>7</volume>
        <issue>3</issue>
        <fpage>1</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.18637/jss.v007.i03</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <mixed-citation publication-type="other">dieharder: Random Number Generator Testing Suite. Accessed 1 Apr 2016. <ext-link ext-link-type="uri" xlink:href="https://www.phy.duke.edu/~rgb/General/dieharder.php">https://www.phy.duke.edu/~rgb/General/dieharder.php</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Alcantara</surname>
            <given-names>DAF</given-names>
          </name>
        </person-group>
        <source>Efficient hash tables on the gpu</source>
        <year>2011</year>
        <publisher-loc>Davis</publisher-loc>
        <publisher-name>University of California at Davis</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddelbuettel</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>François</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Rcpp: Seamless R and C++ Integration</article-title>
        <source>J Stat Softw</source>
        <year>2011</year>
        <volume>40</volume>
        <issue>8</issue>
        <fpage>1</fpage>
        <lpage>18</lpage>
        <pub-id pub-id-type="doi">10.18637/jss.v040.i08</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <mixed-citation publication-type="other">Broad Institute of MIT and Harvard. GSEA Java Package. 2016. <ext-link ext-link-type="uri" xlink:href="http://software.broadinstitute.org/gsea/downloads.jsp">http://software.broadinstitute.org/gsea/downloads.jsp</ext-link>. Accessed: 01 April 2016.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>Pellagatti</collab>
          <etal/>
        </person-group>
        <article-title>Deregulated Gene Expression Pathways in Myelodysplastic Syndrome Hematopoietic Stem Cells</article-title>
        <source>Leukemia</source>
        <year>2010</year>
        <volume>24</volume>
        <fpage>756</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1038/leu.2010.31</pub-id>
        <?supplied-pmid 20220779?>
        <pub-id pub-id-type="pmid">20220779</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Geistlinger</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Csaba</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Küffner</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mulder</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Zimmer</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>From sets to graphs: towards a realistic enrichment analysis of transcriptomic systems</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>13</issue>
        <fpage>366</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr228</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Glaab</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Baudot</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Krasnogor</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Valencia</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Enrichnet: network-based gene set enrichment analysis</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>18</issue>
        <fpage>451</fpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts389</pub-id>
        <pub-id pub-id-type="pmid">22171328</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
