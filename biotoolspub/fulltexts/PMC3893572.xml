<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Front Neuroinform</journal-id>
    <journal-id journal-id-type="iso-abbrev">Front Neuroinform</journal-id>
    <journal-id journal-id-type="publisher-id">Front. Neuroinform.</journal-id>
    <journal-title-group>
      <journal-title>Frontiers in Neuroinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1662-5196</issn>
    <publisher>
      <publisher-name>Frontiers Media S.A.</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3893572</article-id>
    <article-id pub-id-type="pmid">24474916</article-id>
    <article-id pub-id-type="doi">10.3389/fninf.2013.00041</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Neuroscience</subject>
        <subj-group>
          <subject>Original Research Article</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>LFPy: a tool for biophysical simulation of extracellular potentials generated by detailed model neurons</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Lindén</surname>
          <given-names>Henrik</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff2">
          <sup>2</sup>
        </xref>
        <xref ref-type="author-notes" rid="fn003">
          <sup>†</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hagen</surname>
          <given-names>Espen</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="author-notes" rid="fn003">
          <sup>†</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Łęski</surname>
          <given-names>Szymon</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Norheim</surname>
          <given-names>Eivind S.</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pettersen</surname>
          <given-names>Klas H.</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff4">
          <sup>4</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Einevoll</surname>
          <given-names>Gaute T.</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="author-notes" rid="fn001">
          <sup>*</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff1">
      <sup>1</sup>
      <institution>Department of Mathematical Sciences and Technology, Norwegian University of Life Sciences</institution>
      <country>Ås, Norway</country>
    </aff>
    <aff id="aff2">
      <sup>2</sup>
      <institution>Department of Computational Biology, School of Computer Science and Communication, Royal Institute of Technology (KTH)</institution>
      <country>Stockholm, Sweden</country>
    </aff>
    <aff id="aff3">
      <sup>3</sup>
      <institution>Department of Neurophysiology, Nencki Institute of Experimental Biology</institution>
      <country>Warsaw, Poland</country>
    </aff>
    <aff id="aff4">
      <sup>4</sup>
      <institution>CIGENE, Norwegian University of Life Sciences</institution>
      <country>Ås, Norway</country>
    </aff>
    <author-notes>
      <fn fn-type="edited-by">
        <p>Edited by: Andrew P. Davison, Centre National de la Recherche Scientifique, France</p>
      </fn>
      <fn fn-type="edited-by">
        <p>Reviewed by: Nicholas T. Carnevale, Yale University School of Medicine, USA; Shyam Diwakar, Amrita University, India</p>
      </fn>
      <corresp id="fn001">*Correspondence: Gaute T. Einevoll, Department of Mathematical Sciences and Technology, Norwegian University of Life Sciences, PO Box 5003, Ås 1432, Norway e-mail: <email xlink:type="simple">gaute.einevoll@nmbu.no</email></corresp>
      <fn fn-type="other" id="fn002">
        <p>This article was submitted to the journal Frontiers in Neuroinformatics.</p>
      </fn>
      <fn fn-type="present-address" id="fn003">
        <p>†These authors have contributed equally to this work.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>16</day>
      <month>1</month>
      <year>2014</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2013</year>
    </pub-date>
    <volume>7</volume>
    <elocation-id>41</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>9</month>
        <year>2013</year>
      </date>
      <date date-type="accepted">
        <day>09</day>
        <month>12</month>
        <year>2013</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2014 Lindén, Hagen, Łęski, Norheim, Pettersen and Einevoll.</copyright-statement>
      <copyright-year>2014</copyright-year>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/3.0/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (CC BY). The use, distribution or reproduction in other forums is permitted, provided the original author(s) or licensor are credited and that the original publication in this journal is cited, in accordance with accepted academic practice. No use, distribution or reproduction is permitted which does not comply with these terms.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>Electrical extracellular recordings, i.e., recordings of the electrical potentials in the extracellular medium between cells, have been a main work-horse in electrophysiology for almost a century. The high-frequency part of the signal (≳500 Hz), i.e., the <italic>multi-unit activity (MUA)</italic>, contains information about the firing of action potentials in surrounding neurons, while the low-frequency part, the <italic>local field potential (LFP)</italic>, contains information about how these neurons integrate synaptic inputs. As the recorded extracellular signals arise from multiple neural processes, their interpretation is typically ambiguous and difficult. Fortunately, a precise biophysical modeling scheme linking activity at the cellular level and the recorded signal has been established: the extracellular potential can be calculated as a weighted sum of all transmembrane currents in all cells located in the vicinity of the electrode. This computational scheme can considerably aid the modeling and analysis of MUA and LFP signals. Here, we describe <bold><monospace>LFPy</monospace></bold>, an open source Python package for numerical simulations of extracellular potentials. <bold><monospace>LFPy</monospace></bold> consists of a set of easy-to-use classes for defining cells, synapses and recording electrodes as Python objects, implementing this biophysical modeling scheme. It runs on top of the widely used NEURON simulation environment, which allows for flexible usage of both new and existing cell models. Further, calculation of extracellular potentials using the line-source-method is efficiently implemented. We describe the theoretical framework underlying the extracellular potential calculations and illustrate by examples how <bold><monospace>LFPy</monospace></bold> can be used both for simulating LFPs, i.e., synaptic contributions from single cells as well a populations of cells, and MUAs, i.e., extracellular signatures of action potentials.</p>
    </abstract>
    <kwd-group>
      <kwd>local field potential</kwd>
      <kwd>extracellular potential</kwd>
      <kwd>biophysics</kwd>
      <kwd>forward modeling</kwd>
      <kwd>compartmental modeling</kwd>
      <kwd>detailed morphology</kwd>
      <kwd>spike waveform</kwd>
      <kwd>Python</kwd>
    </kwd-group>
    <counts>
      <fig-count count="4"/>
      <table-count count="0"/>
      <equation-count count="7"/>
      <ref-count count="55"/>
      <page-count count="15"/>
      <word-count count="10983"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="s1">
    <title>1. Introduction</title>
    <p>A host of experimental techniques are now available for studies of neural activity in cortex. In addition to intracellular and extracellular recordings with various types of single- or multi-contact electrodes, several imaging techniques (e.g., two-photon calcium, intrinsic optical, voltage-sensitive dye) have been developed and refined in the last decade. To take full advantage of these new powerful techniques, proper links between the underlying neural activity and what is recorded in the experiments, must be established. Such quantitatively accurate links generally require detailed understanding of the underlying physics of neural activity measurements, as well as efficient mathematical modeling schemes (Brette and Destexhe, <xref rid="B7" ref-type="bibr">2012</xref>; Panzeri and Quian Quiroga, <xref rid="B45" ref-type="bibr">2013</xref>). Computational neuroscience has until now largely focused on how neurons and neural networks may process information, while less attention has been given to the relationship between the neural activity and measurable quantities. As the ultimate test of candidate theories in all natural sciences is comparison with experiments, we believe more focus on the latter is needed to bring the field forward. Not only must precise mathematical links between activity in neural networks and the various measurements be forged, efficient and easy-to-use neuroinformatics tools must be developed to facilitate such comparisons.</p>
    <p>The present paper describes a step toward this goal, that is, a new Python-based tool, <monospace>LFPy</monospace> (<ext-link ext-link-type="uri" xlink:href="http://compneuro.umb.no/LFPy">compneuro.umb.no/LFPy</ext-link>, <ext-link ext-link-type="uri" xlink:href="http://software.incf.org/software/lfpy">software.incf.org/software/lfpy</ext-link>), for modeling of extracellular potentials stemming from neural activity in brain tissue. While extracellular electrical recordings have been the main workhorse in electrophysiology for almost a century, the interpretation of such recordings is not trivial. The recorded extracellular potentials in general arise from a complicated sum of contributions from all transmembrane currents of the cells, predominantly neurons, in the vicinity of the electrode contact. The high-frequency part of the signal (≳500 Hz), the <italic>multi-unit activity</italic> (MUA), contains information about the firing of action potentials of neurons within a few tens of micrometers or so from the electrode contact (Buzsáki, <xref rid="B8" ref-type="bibr">2004</xref>; Pettersen and Einevoll, <xref rid="B49" ref-type="bibr">2008</xref>). The low-frequency part, the <italic>local field potential</italic> (LFP), contains information about the integration of synaptic inputs in populations of neurons within radii of hundreds of micrometers or more (Lindén et al., <xref rid="B35" ref-type="bibr">2011</xref>; Łęski et al., <xref rid="B33" ref-type="bibr">2013</xref>). Both the MUA and LFP are difficult signals to interpret (Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>; Buzsáki et al., <xref rid="B9" ref-type="bibr">2012</xref>; Einevoll et al., <xref rid="B13" ref-type="bibr">2012</xref>, <xref rid="B14" ref-type="bibr">2013a</xref>,<xref rid="B15" ref-type="bibr">b</xref>; Reimann et al., <xref rid="B53" ref-type="bibr">2013</xref>), and in order to take full advantage of the new generation of silicon-based multielectrodes recording from tens or hundreds of positions simultaneously, we need to develop and validate methods that can be used to infer information about the underlying neural network from these extracellular signals (Einevoll et al., <xref rid="B14" ref-type="bibr">2013a</xref>).</p>
    <p>A key advantage compared to other important measures of neural activity, such as fMRI, is that the ‘measurement physics’, i.e., the link between neural activity and what is measured, is well-understood. In fact, the last decade has seen the refinement of a well-founded biophysical forward-modeling scheme based on volume conduction theory (Rall and Shepherd, <xref rid="B52" ref-type="bibr">1968</xref>; Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>) to incorporate detailed reconstructed neuronal morphologies in precise calculations of extracellular potentials — both spikes (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Gold et al., <xref rid="B19" ref-type="bibr">2006</xref>, <xref rid="B18" ref-type="bibr">2007</xref>; Pettersen and Einevoll, <xref rid="B49" ref-type="bibr">2008</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>; Schomburg et al., <xref rid="B54" ref-type="bibr">2012</xref>; Reimann et al., <xref rid="B53" ref-type="bibr">2013</xref>), and LFPs (Einevoll et al., <xref rid="B16" ref-type="bibr">2007</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>; Lindén et al., <xref rid="B34" ref-type="bibr">2010</xref>, <xref rid="B35" ref-type="bibr">2011</xref>; Gratiy et al., <xref rid="B21" ref-type="bibr">2011</xref>; Schomburg et al., <xref rid="B54" ref-type="bibr">2012</xref>; Łęski et al., <xref rid="B33" ref-type="bibr">2013</xref>; Reimann et al., <xref rid="B53" ref-type="bibr">2013</xref>). The word ‘forward’ denotes that the extracellular potentials are modeled from known neural sources (as opposed to the ill-posed “inverse” problem of estimating the underlying sources from recorded potentials). According to the linear volume conduction theory, the extracellular potentials at the electrode contact can be calculated by adding contributions from the transmembrane currents (Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>). In a now frequently used two-step computational scheme, morphologically reconstructed neurons are first simulated with compartmental modeling using a simulation program such as NEURON (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>; Carnevale, <xref rid="B10" ref-type="bibr">2007</xref>) to provide transmembrane currents, and next the extracellular potentials are calculated based on these (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Pettersen et al., <xref rid="B51" ref-type="bibr">2012</xref>); (Einevoll et al., <xref rid="B14" ref-type="bibr">2013a</xref>,<xref rid="B15" ref-type="bibr">b</xref>).</p>
    <p>In <monospace>LFPy</monospace> these two steps are performed in an integrated Python environment employing the NEURON simulator (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>; Carnevale, <xref rid="B10" ref-type="bibr">2007</xref>; Hines et al., <xref rid="B25" ref-type="bibr">2009</xref>) under the hood, allowing full advantage of the plethora of packages available for the Python programming language. For example, existing multicompartmental neuron models, available from databases like ModelDB<xref ref-type="fn" rid="fn0001"><sup>1</sup></xref> (Hines et al., <xref rid="B27" ref-type="bibr">2004</xref>), can readily be adapted for use with the <monospace>LFPy</monospace>-package. An example of such analysis made simple with <monospace>LFPy</monospace> is shown in Figure <xref ref-type="fig" rid="F1">1</xref>, showing a spike, i.e., the extracellular signature of an action potential, from simulations using a recently published rat L5b model neuron by Hay et al. (<xref rid="B23" ref-type="bibr">2011</xref>) with <monospace>LFPy</monospace>. While the first released version of <monospace>LFPy</monospace> described here focuses on calculations of extracellular potentials around individual neurons, the tool is directly applicable also to populations of many such individual neurons, that is, model populations for which the synaptic input onto each neuron is described explicitly and do not necessarily follow from concurrent network simulations (Lindén et al., <xref rid="B35" ref-type="bibr">2011</xref>; Łęski et al., <xref rid="B33" ref-type="bibr">2013</xref>).</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p><bold>Calculated extracellular spike waveforms using <monospace>LFPy</monospace>. (A)</bold> Position-dependent extracellular spike waveforms during an action potential in a rat L5b pyramidal-cell model (Hay et al., <xref rid="B23" ref-type="bibr">2011</xref>) produced by executing <monospace>example2.py</monospace>, see section 4.2. Black dots correspond to the positions of the (virtual) electrode contact points. Spike traces at each position are normalized and color coded according to the magnitude of the negative peak. <bold>(B)</bold> Corresponding somatic membrane potential during the action potential. Vertical dashed lines illustrate temporal alignment with the maximum magnitude <italic>V</italic><sub>soma</sub>(<italic>t</italic>) and of an extracellular waveform <bold>(C)</bold> for the position denoted with an asterisk in <bold>(A)</bold>. Corresponding alignment with the maximum positive extracellular peak is illustrated by vertical dotted lines.</p>
      </caption>
      <graphic xlink:href="fninf-07-00041-g0001"/>
    </fig>
    <p>The paper is organized as follows: In section 2 we briefly review the biophysics underlying the forward-modeling scheme used in <monospace>LFPy</monospace>, in section 3 we give an overview over the different Python class-objects in <monospace>LFPy</monospace>, in section 4 we show several examples of the use of <monospace>LFPy</monospace>, more technical aspects of the package are described in section 5, while some concluding remarks are given in the final section 6.</p>
  </sec>
  <sec>
    <title>2. Biophysics behind LFP<sub>y</sub></title>
    <p>Extracellular potentials recorded inside the brain are generated by transmembrane currents from cells in the vicinity of electrode. To propagate from the membrane to the recording electrode, the signal has to pass through brain tissue consisting of a tightly packed matrix of neurons and glial cells embedded in a low-resistance extracellular medium filling less than one fifth of the total volume (Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>). The low resistance of the extracellular medium ensures that neighboring cells are typically electrically decoupled. Further, the difference between the extracellular potentials recorded at different positions will be small, typically much smaller than a millivolt, i.e., about two orders of magnitude smaller than the potential difference across the highly resistant cell membranes.</p>
    <p>The biophysical origin of the recorded signals is fortunately quite well-understood, and a well-founded computational scheme has been developed for the forward modeling of the signals. This scheme naturally divides into two consecutive steps: calculation of transmembrane currents stemming from activity in neurons (and glia cells, if relevant) followed by calculation of the extracellular potentials generated by these transmembrane currents. The calculations of extracellular potentials as implemented in <monospace>LFPy</monospace> are thus also organized in two steps:
<list list-type="order"><list-item><p>Calculation of transmembrane currents of each neuron, using multicompartmental model neurons derived from detailed morphological reconstructions of neurons within NEURON simulation environment (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>; Carnevale, <xref rid="B10" ref-type="bibr">2007</xref>).</p></list-item><list-item><p>Calculation of the extracellular potential from the transmembrane currents using a biophysical forward-modeling formalism derived within so called <italic>volume-conductor theory</italic> (Hämäläinen et al., <xref rid="B22" ref-type="bibr">1993</xref>; Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>).</p></list-item></list></p>
    <sec>
      <title>2.1. Multicompartmental modeling of transmembrane currents</title>
      <p>In the first step, multicompartment neuron models are used to calculate transmembrane currents. Figure <xref ref-type="fig" rid="F2">2A</xref> illustrates the principle behind the construction of such multicompartmental models where the neuron is divided into compartments, each so small that the electrical potential can be assumed to be the same throughout the compartment (Segev et al., <xref rid="B55" ref-type="bibr">1989</xref>; De Schutter, <xref rid="B12" ref-type="bibr">2009</xref>). Every compartment is described as an equivalent electrical circuit where the key dynamical variable is the membrane potential <italic>V</italic>, and the equation describing the dynamics of this variable follows from Kirchhoff's current law stating that the currents going into a circuit node have to sum to zero. For the case where the extracellular potential is assumed constant, the mathematical equation describing the temporal development of the membrane potential <italic>V<sub>n</sub></italic> of compartment <italic>n</italic> in Figure <xref ref-type="fig" rid="F2">2A</xref> is given by
<disp-formula id="E1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:msub><mml:mi>g</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>+</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>+</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>g</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>−</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>n</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mstyle displaystyle="true"><mml:munder><mml:mo>∑</mml:mo><mml:mi>j</mml:mi></mml:munder><mml:mrow><mml:msubsup><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>j</mml:mi></mml:msubsup></mml:mrow></mml:mstyle><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo></mml:mrow></mml:math></disp-formula></p>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p><bold>Illustration of biophysical modeling scheme and corresponding organization of <monospace>LFPy</monospace>-package. (A)</bold> Principle of multicompartmental modeling where a piece of an apical dendritic branch, in this example assumed purely passive with only capacitive and leak membrane currents, is divided into a set of compartments indexed by <italic>n</italic>. The circuit diagram shows the equivalent electric circuit of the compartment where the dynamics is governed by an equation set consisting of equations of the type shown in Equation (1). The net transmembrane current <italic>I<sub>n</sub>(t)</italic>, in this case the sum over the capacitive and leak membrane currents in compartment <italic>n</italic>, is then used in the forward-modeling schemes in Equations (3–5) to calculate extracellular potentials. <bold>(B)</bold>
<monospace>LFPy</monospace> is a Python package, dependent on <monospace>numpy</monospace>, <monospace>Cython</monospace> and NEURON, implementing this combined modeling scheme. Its main features are object-oriented representations of biophysically detailed neurons (<monospace>LFPy.Cell, LFPy.TemplateCell</monospace>), point-process mechanisms such as synapses or patch electrodes attached to different locations of the cell-objects (<monospace>LFPy.Synapse, LFPy.StimIntElectrode</monospace>), and an extracellular recording device allowing calculation of extracellular potentials at arbitrary locations (<monospace>LFPy.RecExtElectrode</monospace>).</p>
        </caption>
        <graphic xlink:href="fninf-07-00041-g0002"/>
      </fig>
      <p>The two terms on the left hand side of the equation represent intracellular ohmic currents between compartment <italic>n</italic> and the neighboring compartments <italic>n</italic> + 1 and <italic>n</italic> − 1. The first term on the right hand side represents currents due to capacitive properties of the cell membrane, while the second term represents currents due to various other membrane processes such as passive and active intrinsic ion channels and synaptic inputs. In the full multicompartmental model of a neuron there will be an equation of the type shown in Equation (1) for each compartment, and the equation set is solved numerically using dedicated simulation tools such as NEURON (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>; Carnevale, <xref rid="B10" ref-type="bibr">2007</xref>). The transmembrane current from each neuronal compartment <italic>n</italic> is then at each instant in time given by the right hand side of Equation (1), denoted by <italic>I<sub>n</sub></italic> in Figure <xref ref-type="fig" rid="F2">2A</xref>. There are different numerical strategies in terms of the spatial discretization of neuronal models, and in NEURON, the spatial discretization is equivalent to assuming that the transmembrane current density is uniformly distributed in each compartment so that second order accurate intracellular potentials between nodes can be found by linear interpolation (Hines and Carnevale, <xref rid="B24" ref-type="bibr">2001</xref>; Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>).</p>
      <p>Note that Kirchhoff's current law implies that the net transmembrane currents (including the capacitive current) coming out of a neuron at all times must equal zero. Thus with the neuron depicted in Figure <xref ref-type="fig" rid="F2">2A</xref> divided into <italic>N</italic> compartments, one must at all times have <inline-formula><mml:math id="M8"><mml:mrow><mml:mstyle displaystyle="true"><mml:msubsup><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:msubsup><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula>. Therefore a single-compartment neuron model cannot generate any extracellular potential since the net transmembrane current necessarily will be zero. The simplest model producing an extracellular potential is a two-compartment model where a transmembrane current entering the neuron at one compartment leaves at the other compartment. The simplest possible multipole configuration is thus the current <italic>dipole</italic> (Pettersen et al., <xref rid="B51" ref-type="bibr">2012</xref>).</p>
    </sec>
    <sec>
      <title>2.2. From transmembrane currents to extracellular potentials</title>
      <p>Given the numerical value and spatial position of all transmembrane currents, the extracellular potentials can be computed on the basis of <italic>volume conductor theory</italic>. Here the system can be envisioned as a three-dimensional smooth extracellular continuum with the transmembrane currents represented as <italic>volume current sources</italic> (Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>). In this framework the fundamental relationship between an extracellular potential ϕ(<italic>t</italic>) recorded at position <bold>r</bold> due to a transmembrane current <italic>I</italic><sub>0</sub>(<italic>t</italic>) at position <bold>r</bold><sub>0</sub> is given by (Hämäläinen et al., <xref rid="B22" ref-type="bibr">1993</xref>; Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>):
<disp-formula id="E2"><label>(2)</label><mml:math id="M2"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mi>σ</mml:mi></mml:mrow></mml:mfrac><mml:mfrac><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:mfrac><mml:mo> </mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p>
      <p>Here the extracellular potential ϕ is set to be zero infinitely far away from the transmembrane current, and σ is the <italic>extracellular conductivity</italic>, assumed to be <italic>real</italic>, <italic>scalar</italic> (the same in all directions) and <italic>homogeneous</italic> (the same everywhere in an infinite volume conductor). Equation (2) relies on two key assumptions:
<list list-type="order"><list-item><p>The <italic>quasistatic approximation</italic> of Maxwell's equations amounting to omitting terms with time derivatives of the electric (<bold>E</bold>) or magnetic fields (<bold>B</bold>) so that these field effectively decouple. For the frequencies inherent in neural activity, i.e., less than a few thousand hertz, this approximation seems to be well-justified [see, e.g., argument on p. 426 in Hämäläinen et al. (<xref rid="B22" ref-type="bibr">1993</xref>)].</p></list-item><list-item><p>The assumption of a <italic>linear</italic>, <italic>isotropic</italic>, <italic>homogeneous</italic> and <italic>ohmic</italic> extracellular medium, i.e., a linear relationship between the current density <bold>j</bold> and the electrical field <bold>E</bold>, <bold>j</bold> = σ<bold>E</bold>, where σ is a real scalar. The absence of an imaginary part of the conductivity σ implies that the capacitive effects of the extracellular tissue are assumed to be negligible compared to resistive effects. This appears to be well-fulfilled for the relevant frequencies in extracellular recordings (Nunez and Srinivasan, <xref rid="B43" ref-type="bibr">2006</xref>; Logothetis et al., <xref rid="B37" ref-type="bibr">2007</xref>). The fact that σ is a scalar reflects the assumption of isotropic and homogeneous medium.</p></list-item></list></p>
      <p>Note that while the present version of <monospace>LFPy</monospace> is based on these assumptions, the forward model in Equation (2) can be generalized to account for, for example, different conductivities in different directions (Nicholson and Freeman, <xref rid="B42" ref-type="bibr">1975</xref>; Logothetis et al., <xref rid="B37" ref-type="bibr">2007</xref>), discontinuities in conductivity at interfaces between gray and white matter or between the gray matter and the cortical surface (Pettersen et al., <xref rid="B48" ref-type="bibr">2006</xref>), or, if warranted, frequency-dependent and/or complex extracellular conductivities σ (Bédard et al., <xref rid="B6" ref-type="bibr">2004</xref>; Bédard and Destexhe, <xref rid="B5" ref-type="bibr">2012</xref>). For more discussion of the validity and possible generalizations of the present forward-modeling scheme, see Pettersen et al. (<xref rid="B51" ref-type="bibr">2012</xref>).</p>
      <p>Equation (2) applies to the situation with a single current <italic>I</italic><sub>0</sub>, but since contributions from several transmembrane current sources add linearly, the equation straightforwardly generalizes to a situation with many transmembrane current sources. With <italic>N point current sources</italic> the formula in Equation (2) generalizes to:
<disp-formula id="E3"><label>(3)</label><mml:math id="M3"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mi>σ</mml:mi></mml:mrow></mml:mfrac><mml:mstyle displaystyle="true"><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mi>n</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle><mml:mo> </mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p>
      <p>With a neuron divided into <italic>N</italic> compartments, the natural use of the formula in Equation (3) is to set <bold>r</bold><sub><italic>n</italic></sub> at the “mean” position of compartment <italic>n</italic>, e.g., at the center of a spherical soma compartment or the mid-point of a cylindrical dendritic compartment. This scheme corresponds to the so called <italic>point-source</italic> approximation (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>) since all transmembrane currents into the extracellular medium go through a single point. Another scheme, the <italic>line-source</italic> approximation, assumes the transmembrane currents from each cylindrical compartment to be evenly distributed along a line corresponding to the cylinder axis (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>). The analogous formula for the line-source approximation is obtained by integrating Equation (3) along the center-line axis along each compartment (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>):
<disp-formula id="E4"><label>(4)</label><mml:math id="M4"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi>ϕ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mi>σ</mml:mi></mml:mrow></mml:mfrac><mml:mstyle displaystyle="true"><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mstyle displaystyle="true"><mml:mrow><mml:mo>∫</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mi>n</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mrow></mml:mstyle></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mi>σ</mml:mi></mml:mrow></mml:mfrac><mml:mstyle displaystyle="true"><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mi>Δ</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mi>log</mml:mi><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:msqrt><mml:mrow><mml:msubsup><mml:mi>h</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>ρ</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:msqrt><mml:mo>−</mml:mo><mml:msub><mml:mi>h</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>ρ</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:msqrt><mml:mo>−</mml:mo><mml:msub><mml:mi>l</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mo> </mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p>Here Δ<italic>s<sub>n</sub></italic> denotes the length of the compartment, ρ<sub><italic>n</italic></sub> the distance perpendicular to the line compartment, <italic>h</italic><sub><italic>n</italic></sub> the longitudinal distance from the end of the compartment, and <italic>l</italic><sub><italic>n</italic></sub> = Δ<italic>s</italic><sub><italic>n</italic></sub> + <italic>h</italic><sub><italic>n</italic></sub> the longitudinal distance from the start of the compartment. In this and the above method, singularities are avoided by strictly preventing the denominators (i.e., |<bold>r</bold> − <bold>r</bold><sub><italic>n</italic></sub>|) to be <italic>less</italic> than the radius of the relevant cylindrical compartment. Both the point-source and the line-source approximation schemes are implemented in <monospace>LFPy</monospace>, together with a <italic>mixed</italic> method applicable for models with a single-compartment soma as the root section (defined to be compartment 1), effectively treating the soma as a sphere source:
<disp-formula id="E5"><label>(5)</label><mml:math id="M5"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi>ϕ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mtext> </mml:mtext><mml:mi>π</mml:mi><mml:mtext> </mml:mtext><mml:mi>σ</mml:mi></mml:mrow></mml:mfrac><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mn>1</mml:mn><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mo>+</mml:mo><mml:mrow><mml:mrow><mml:mstyle displaystyle="true"><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:mtext> </mml:mtext><mml:mn>2</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mi>Δ</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mi>log</mml:mi><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:msqrt><mml:mrow><mml:msubsup><mml:mi>h</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>ρ</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:msqrt><mml:mo>−</mml:mo><mml:msub><mml:mi>h</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>ρ</mml:mi><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:msqrt><mml:mo>−</mml:mo><mml:msub><mml:mi>l</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo> </mml:mo><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula></p>
      <p>The three methods described by Eqs. (3-5) are expected to give similar results in electrode positions far from the cell, while results may differ more for electrode positions close to the neuron's membrane (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>).</p>
      <p>Note that the modeling scheme as presented here is not fully self-consistent as the calculation of the transmembrane currents (Equation (1)) is done assuming constant potentials outside the neuron, which corresponds to assuming negligible resistivity in the extracellular medium. In contrast, a finite resistivity (~ 1/σ) is assumed in the forward models. This approximation ensures efficient forward modeling of extracellular potentials allowing, for example, for calculation of LFPs from populations of tens of thousands of neurons (Lindén et al., <xref rid="B35" ref-type="bibr">2011</xref>; Łęski et al., <xref rid="B33" ref-type="bibr">2013</xref>; Reimann et al., <xref rid="B53" ref-type="bibr">2013</xref>).</p>
      <p>The forward-modeling formulas in Eqs. (3-5) all predict potentials at points, while real recording electrodes of course have a physical extension. Finite-sized electrode appears to measure the average potential across the uninsulated electrode surface (Nelson and Pouget, <xref rid="B40" ref-type="bibr">2010</xref>), and here we thus approximate the potential recorded by an ideal electrode contact as the average potential across its surface <italic>S</italic> as:
<disp-formula id="E6"><label>(6)</label><mml:math id="M6"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi>ϕ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo>;</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:msub><mml:mi>A</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mstyle displaystyle="true"><mml:mrow><mml:msub><mml:mo>∬</mml:mo><mml:mi>S</mml:mi></mml:msub><mml:mi>ϕ</mml:mi></mml:mrow></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>′</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:msup><mml:mi>d</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:msup><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>′</mml:mo></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>                    </mml:mtext><mml:mo>≈</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>m</mml:mi></mml:mfrac><mml:mstyle displaystyle="true"><mml:msubsup><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:msubsup><mml:mrow><mml:msub><mml:mi>ϕ</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>r</mml:mi></mml:mstyle><mml:msup><mml:mi>i</mml:mi><mml:mo>′</mml:mo></mml:msup></mml:msub><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo> </mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
for <italic>m</italic> random locations <bold>r</bold>′<sub><italic>i</italic></sub> on the surface <italic>S</italic>, with surface area <italic>A<sub>S</sub></italic>, of the electrode contact. The surface <italic>S</italic> is by <monospace>LFPy</monospace> assumed to be flat and circular.</p>
    </sec>
  </sec>
  <sec>
    <title>3. Overview of LFP<sub>y</sub></title>
    <p>In this section we give a brief overview over the different classes available in <monospace>LFPy</monospace> as illustrated in Figure <xref ref-type="fig" rid="F2">2B</xref>.</p>
    <sec>
      <title>3.1. Representing cells in LFP<sub>y</sub></title>
      <p>The main class in <monospace>LFPy</monospace> is <monospace>LFPy.Cell</monospace>. It is used to create objects that represent individual model cells, and it serves as an interface with the NEURON simulation environment (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>; Carnevale, <xref rid="B10" ref-type="bibr">2007</xref>; Hines et al., <xref rid="B25" ref-type="bibr">2009</xref>). It is also necessary for interactions with other <monospace>LFPy</monospace> class-objects. Each <monospace>LFPy.Cell</monospace>-object stores information about the neuron model, most importantly references to all sections (branches) of the neuron and their geometry, and some parameters of the simulation.</p>
      <p>When creating a <monospace>LFPy.Cell</monospace> object, one can set various properties of the neuron model and specify the simulation. During initialization it will:
<list list-type="order"><list-item><p>Load the neuron geometry file,</p></list-item><list-item><p>Load additional model-specific files (e.g., defining active channels),</p></list-item><list-item><p>Assign biophysical properties and insert channel densities,</p></list-item><list-item><p>Split sections into appropriate numbers of compartments,</p></list-item><list-item><p>Assign all compartments an index at the global cell level (see Sec. 5.7),</p></list-item><list-item><p>Specify the position and orientation of the cell and its compartments in space, and</p></list-item><list-item><p>Specify simulation duration and temporal resolution.</p></list-item></list></p>
      <p>The standard way of creating a cell object is thus to call <monospace>LFPy.Cell()</monospace>, as in the example in section 4.1 below. However, some NEURON models make use of <italic>templates</italic> (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>), Ch. 13), and for such models one has to use the inherited class <monospace>LFPy.TemplateCell</monospace>, as described in section 4.2. <monospace>LFPy.Cell</monospace> will assign references to different sections in the top-level of the NEURON environment, while <monospace>LFPy.TemplateCell</monospace> will assign them to a specific <monospace>template</monospace>. Although several <monospace>LFPy.Cell</monospace> objects may exist simultaneously in Python, only <monospace>LFPy.TemplateCell</monospace> allows for multiple cell representations internally in NEURON. Nevertheless, simulations of networks of cells are currently not supported in <monospace>LFPy</monospace> for reasons discussed in section 5.6.</p>
      <p>After the cell object is created the user can interact with various methods and attributes implemented in the <monospace>LFPy.Cell</monospace> (or <monospace>LFPy.TemplateCell</monospace>) object. It is, for example, possible to position the cell, inspect properties of sections and compartments of the cell, and to specify which of the variables (membrane voltage, ionic currents) should be recorded during the simulation. Finally, the simulation is started by calling the <monospace>simulate()</monospace> method which initializes and executes the model in NEURON.</p>
    </sec>
    <sec>
      <title>3.2. Cell stimulation</title>
      <p><monospace>LFPy</monospace> provides two classes, <monospace>LFPy.Synapse</monospace> and <monospace>LFPy.StimIntElectrode</monospace> (cf. red dot in Figure <xref ref-type="fig" rid="F2">2B</xref>), which can be used to specify inputs to the cell. They manage synaptic currents triggered by input spike trains and intracellular patch-clamp electrodes, respectively, using NEURON point processes, such as <monospace>ExpSyn</monospace> and <monospace>IClamp</monospace> (but user-defined synapses or stimulation electrodes are possible through the use of <monospace>.mod</monospace>-files specified using the NEURON model description language NMODL (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>, Ch. 9)). One important difference between synapses and electrodes is that an electrode current is <italic>not</italic> a transmembrane current in that the current does not come from the extracellular space. This implies that the total current across the cell's membrane no longer will sum to zero, resulting in monopole contributions in the extracellular potential (as the injected current is not included when calculating the extracellular potential). Direct specification of inputs via NEURON is possible as in Hines et al. (<xref rid="B25" ref-type="bibr">2009</xref>), but the classes provided in <monospace>LFPy</monospace> are usually more convenient: they allow for easy placement of stimulation mechanisms at specified dendritic positions and for easy recording of stimulation currents and membrane voltages in the compartments they are attached to.</p>
    </sec>
    <sec>
      <title>3.3. Extracellular recording electrodes</title>
      <p>Extracellular recording electrode contacts are in <monospace>LFPy</monospace> represented by the <monospace>LFPy.RecExtElectrode</monospace> class (blue dots, Figure <xref ref-type="fig" rid="F2">2B</xref>). Creating an electrode object allows specification of the extracellular conductivity and arbitrary configurations of electrode contact points in 3D-space, and choosing either point contacts [i.e., employing Equations (3), (4) or (5)] or finite-size electrode contacts [i.e., Equation (6)].</p>
      <p>The <monospace>RecExtElectrode</monospace> class provides three different methods for calculating the extracellular potential. These are (1) the point-source approximation [Equation (3), keyword argument <monospace>method=“pointsource”</monospace>], (2) the line-source approximation [Equation (4), keyword argument <monospace>method=“linesource”</monospace>], and (3) the mixed method where the soma section is treated as a point source and dendritic compartments are treated as line sources [Equation (5), keyword argument <monospace>method=som_as_point</monospace>]. The last method should only be used if the soma is the root of the morphology and represented by a single compartment. If this is not the case, <monospace>LFPy</monospace> erroneously assigns a point current-source to another compartment.</p>
      <p>The extracellular potential can be calculated using <monospace>RecExtElectrode</monospace> either <italic>after</italic> the simulation using stored recorded membrane currents, or <italic>at run time</italic>, i.e., each time the NEURON simulation advances one time step (see section 5.9). The latter approach avoids the need for storing recorded membrane currents. We illustrate both methods in Examples below.</p>
      <p>As the methods for calculating the extracellular potential may be useful outside <monospace>LFPy</monospace>, the low-level implementations of Eqs. (3–5) are not contained within <monospace>RecExtElectrode</monospace>, but may be used directly by means of any of the functions <monospace>LFPy.lfpcalc.calc_lfp<sup>*</sup></monospace>. They take keyword arguments <monospace>cell, x, y, z, sigma</monospace>, respectively a <monospace>Cell</monospace>-like instance, extracellular coordinates and extracellular conductivity, and return the extracellular potentials calculated from recorded, transmembrane currents. In section 5.9 we discuss how to use <monospace>LFPy</monospace> with other methods for calculating the extracellular potentials, i.e., other forward models, than the ones currently provided and described in section 2.2.</p>
    </sec>
  </sec>
  <sec>
    <title>4. Examples</title>
    <p>We next consider a few simple examples on how <monospace>LFPy</monospace> can be used for calculations of extracellular potentials. (For installation instructions and other technical aspects please see section 5, and the online documentation<xref ref-type="fn" rid="fn0002"><sup>2</sup></xref>).</p>
    <sec>
      <title>4.1. Single synaptic input into passive pyramidal cell</title>
      <p>We start with a minimal example (<monospace>example1.py</monospace>), in which we set up a passive layer-5 pyramidal cell receiving input through a single synapse, run the simulation, and calculate the extracellular potential, similar to the setup used in Lindén et al. (<xref rid="B34" ref-type="bibr">2010</xref>).</p>
      <p>First we import <monospace>LFPy</monospace> and <monospace>numpy</monospace><xref ref-type="fn" rid="fn0003"><sup>3</sup></xref> (Jones et al., <xref rid="B30" ref-type="bibr">2001</xref>):</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0001.jpg" position="float"/>
      </p>
      <p>Then we define a dictionary with keyword arguments to be used with <monospace>LFPy.Cell</monospace>:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0002.jpg" position="float"/>
      </p>
      <p>The only mandatory entry is <monospace>morphology</monospace>, here pointing to a reconstructed neuron morphology<xref ref-type="fn" rid="fn0004"><sup>4</sup></xref> (Mainen and Sejnowski, <xref rid="B38" ref-type="bibr">1996</xref>) defined with NEURON's <monospace>HOC</monospace>-scripting language in a <monospace>hoc</monospace>-file. We also specify the start and end times of the simulation (in milliseconds). Several other options are available (such as specifying passive and active parameters of the cell), but for now we leave them at default values.</p>
      <p>We are now ready to create our cell instance using the <monospace>LFPy.Cell</monospace>-class:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0003.jpg" position="float"/>
      </p>
      <p>Here we use the <monospace>cell.set_rotation</monospace> method to align the apical dendritic branch with the <italic>z</italic>-axis (cf. section 5.3), providing rotation angles in <italic>radians</italic>.</p>
      <p>We next attach a synapse to our <monospace>cell</monospace>. Again, we define the synapse parameters in a dictionary, and use a method of the cell object to find an appropriate synapse location:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0004.jpg" position="float"/>
      </p>
      <p>We then create a <monospace>Synapse</monospace> object that is connected to our cell by passing <monospace>cell</monospace> as an argument, and activate it once at <italic>t</italic> = 20 ms by providing the <monospace>set_spike_times</monospace>-method with a <monospace>numpy</monospace>-array:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0005.jpg" position="float"/>
      </p>
      <p>We are now ready to initialize and simulate the postsynaptic response of the cell:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0006.jpg" position="float"/>
      </p>
      <p>Note the keyword arguments: <monospace>rec_imem=True</monospace> sets up the recording of transmembrane current (these are needed later to calculate the extracellular potential), while <monospace>rec_isyn=True</monospace> specifies that the synapse current(s) is recorded.</p>
      <p>The final step is to set up the extracellular electrode object. Again, we start by defining the parameters,</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0007.jpg" position="float"/>
      </p>
      <p>which sets the positions of two extracellular electrode contacts at (<italic>x, y, z</italic>) = (−130, 0, 0) and (−220,0,700) μm, respectively. The number of electrode contact points is defined by the length of the passed arrays containing the contact positions; this allows the user to flexibly define an arbitrary number of recording positions.</p>
      <p>By employing class <monospace>LFPy.RecExtElectrode</monospace>, we create a Python object representing the extracellular recording devices:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0008.jpg" position="float"/>
      </p>
      <p>Finally, we calculate the extracellular potential at the specified electrode locations:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0009.jpg" position="float"/>
      </p>
      <p>The resulting two extracellular potentials are stored in the <monospace>numpy</monospace>-array <monospace>electrode.LFP</monospace>, and the results for this example are shown in the left panels of Figure <xref ref-type="fig" rid="F3">3</xref>. This figure also shows equipotential lines in the <italic>xz</italic>−plane for the maximum potential magnitude, obtained by setting up a second <monospace>LFPy.RecExtElectrode</monospace> object representing a grid of recording positions.</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0010.jpg" position="float"/>
      </p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Extracellular potential generated by a single synaptic input produced by executing <monospace>example1.py</monospace></bold>. Extracellular potentials (<bold>middle</bold> and <bold>bottom left</bold> panels) generated at positions marked by green and blue dot, respectively, by a synaptic input current (<bold>upper left</bold> panel) injected in the apical dendrite at the position marked by red dot. The pyramidal cell corresponds to a layer-5 pyramidal cell from cat visual cortex with passive membranes but without adjustment of the membrane area to compensate for spines (Mainen and Sejnowski, <xref rid="B38" ref-type="bibr">1996</xref>). The contour plot shows equipotential lines for the maximum magnitude of the extracellular potential in the <italic>xz</italic>-plane.</p>
        </caption>
        <graphic xlink:href="fninf-07-00041-g0003"/>
      </fig>
    </sec>
    <sec>
      <title>4.2. Spiking pyramidal cell with custom <monospace>hoc</monospace> code</title>
      <p>In the next example the extracellular signature of an action potential generated by a layer-5 pyramidal cell model from Hay et al. (<xref rid="B23" ref-type="bibr">2011</xref>) is considered. This example (<monospace>example2.py</monospace>), whose outcome is depicted in Figure <xref ref-type="fig" rid="F1">1</xref>, describes a somewhat more advanced scenario, and serves to illustrate the following features:
<list list-type="order"><list-item><p>Use of <italic>network</italic>-ready models with the <monospace>LFPy.TemplateCell</monospace>-class,</p></list-item><list-item><p>Use of models with active conductances,</p></list-item><list-item><p>Use of NeuroLucida V3 morphology file format,</p></list-item><list-item><p>Definition of non-zero electrode contact surface area,</p></list-item><list-item><p>Calculation of extracellular potentials at run time.</p></list-item></list></p>
      <p>This example requires model files that can be obtained from ModelDB (Hines et al., <xref rid="B27" ref-type="bibr">2004</xref>) (model no. 139653<xref ref-type="fn" rid="fn0005"><sup>5</sup></xref>). By unzipping the downloaded model files, all necessary files should be available in the folder <monospace>L5bPCmodelsEH</monospace>, including the morphology file and <monospace>.mod</monospace>-files describing active membrane mechanisms using <monospace>NMODL</monospace>-syntax in <monospace>L5bPCmodelsEH/mod/</monospace>. The <monospace>.mod</monospace>-files must be compiled with the shell script <monospace>nrnivmodl</monospace> (or <monospace>mknrndll</monospace> on Windows machines) provided with NEURON, and loaded:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0011.jpg" position="float"/>
      </p>
      <p>We start by specifying the <monospace>LFPy.TemplateCell</monospace> keyword arguments:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0012.jpg" position="float"/>
      </p>
      <p>The following keyword arguments are specific to the <monospace>TemplateCell</monospace> class:
<list list-type="bullet"><list-item><p><monospace>templatefile</monospace>, a (<monospace>list</monospace> of) <monospace>HOC</monospace>-file(s), specifying the <monospace>template</monospace>-file(s) used for the cell object,</p></list-item><list-item><p><monospace>templatename</monospace>, a string with the name that <monospace>LFPy.templateCell</monospace> uses to access the underlying NEURON object, and</p></list-item><list-item><p><monospace>templateargs</monospace> (optional), that can be used to supply arguments to the <monospace>template</monospace>.</p></list-item></list></p>
      <p>Here, we allow the <monospace>template</monospace>-files to define the full set of membrane properties as well as the degree of cell compartmentalization [a brief description of <monospace>template</monospace> usage are given in section 5.5, but see also (Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>, Ch. 13)]. The membrane potential is however set to <monospace>v_init</monospace> in all sections when the model is initialized, and we override the default values for temporal resolution of the simulation. We are here starting the simulation at <italic>t</italic> = −159 ms to remove a start-up transient and a period of depolarization before the action potential is generated. Recordings of variables and estimations of extracellular potentials will however not occur until the time-step corresponding to <italic>t</italic> = 0 ms is reached.</p>
      <p>Since the cell is now defined using a <monospace>template</monospace> in NEURON, we employ <monospace>LFPy.TemplateCell</monospace> instead of <monospace>LFPy.Cell</monospace> to create the cell:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0013.jpg" position="float"/>
      </p>
      <p>To invoke an action potential in the model, we override the default reversal potential of the passive leak channel originally specified in <monospace>L5PCbiophys3.hoc</monospace>:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0014.jpg" position="float"/>
      </p>
      <p>For the extracellular recording device, we simulate the extracellular potentials in a two-dimensional, 9×9 evenly spaced grid with a contact spacing of 20 μm, and specify parameters for contact-surface averaging, including each contact's surface normal vector, common radius and the number of points to include in the estimation of the average potential (cf. Equation 6):</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0015.jpg" position="float"/>
      </p>
      <p>This time we tell <monospace>LFPy</monospace> to calculate the extracellular potentials at runtime, by passing the <monospace>electrode</monospace> object to <monospace>cell.simulate</monospace>:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0016.jpg" position="float"/>
      </p>
      <p>instead of passing <monospace>cell</monospace> to the <monospace>electrode</monospace> object as we did in the first example above (section 4.1). This assures that the transmembrane currents are discarded after every simulation time step, allowing for more efficient memory usage. Simulation results are shown in Figure <xref ref-type="fig" rid="F1">1</xref>.</p>
    </sec>
    <sec>
      <title>4.3. Using MPI for distributed simulations</title>
      <p>The present version of <monospace>LFPy</monospace> is primarily developed for the study of single cells, but under the present assumption that contributions to the extracellular potential from different cells add linearly (cf. section 2.2), it is straightforward to simulate large populations of cells and sum their contributions. While one option is to simulate cells one after the other, and subsequently sum their contributions, simulations on modern multi-core computers and supercomputers can facilitate greatly from parallelization, e.g., by running computations for different cells on different cores simultaneously. One common way of distributing such simulations is with the <monospace>Message Passing Interface</monospace><xref ref-type="fn" rid="fn0006"><sup>6</sup></xref> (MPI). Below we describe a simple procedure for calculating the extracellular potential from a population of pyramidal cells receiving input from a common pool of presynaptic spike trains. Each neuron is simulated independently, and we rely on MPI to communicate the simulation results of each individual neuron to the root process. This example (<monospace>example3.py</monospace>) illustrates how one can easily simulate extracellular potentials of large population of cells similar to the setup used in Lindén et al. (<xref rid="B35" ref-type="bibr">2011</xref>) and Łęski et al. (<xref rid="B33" ref-type="bibr">2013</xref>) with only a few additional lines of code added to the single cell simulation.</p>
      <p>In Python, we will use <monospace>mpi4py</monospace><xref ref-type="fn" rid="fn0007"><sup>7</sup></xref> to interact with the MPI environment:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0017.jpg" position="float"/>
      </p>
      <p>Here, we set the number of cells in the population identical to the number of MPI processes (<monospace>COMM.Get_size()</monospace>), and index each cell by the rank of the current process (<monospace>COMM.Get_rank()</monospace>). The number of processes is given as an argument to the MPI executable using the <monospace>-n</monospace> flag,</p>
      <preformat>
mpirun -n 6 python example3.py
</preformat>
      <p>which in this case will simulate extracellular potentials from a population of 6 cells, distributed over 6 different Python-processes. Each MPI process will execute the same script, but we can differentiate the instructions to different cells depending on their MPI rank, i.e., with the index returned by COMM.Get_rank(). Note that it is also straightforward to combine serial and parallel execution and to have a constant number of cells in the population, regardless of the number of MPI processes (not shown here).</p>
      <p>In the present example we want all cells to share the same pool of presynaptic spike trains, albeit with a different selection of input spike trains for each cell. We first generate the random presynaptic spike trains on each rank, and ensure that the spike-trains are equal for each process by setting the random seed of the <monospace>numpy</monospace> random number generator before creating the spike trains:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0018.jpg" position="float"/>
      </p>
      <p>Once the presynaptic spike trains have been created we define the position and rotation for all cells as in previous examples. We then draw a number of presynaptic spike trains for each neuron from the common pool. By setting the number of synapses (each receiving one presynaptic spike train from the pool) for each neuron we can adjust the level of input correlation to the population (Lindén et al., <xref rid="B35" ref-type="bibr">2011</xref>; Łęski et al., <xref rid="B33" ref-type="bibr">2013</xref>). We here choose 100 spike trains for each cell from the pool of 1000 spike trains, giving an input correlation of 0.1 (Lindén et al., <xref rid="B35" ref-type="bibr">2011</xref>). Since these random selections are now done for each cell independently, we assign unique random seeds on each rank:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0019.jpg" position="float"/>
      </p>
      <p>We then create the cell, set up synapses with activation times from the pool of spike trains, and simulate each cell as in the previous example with a single synaptic input (but here with 100 distributed synapses instead of one). Different Python-processes do not yet see each others simulation results, but we may communicate these to the root process (rank zero) using the <monospace>send</monospace>, <monospace>receive</monospace> and <monospace>reduce</monospace> commands provided by MPI:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0020.jpg" position="float"/>
      </p>
      <p>We can also use MPI to sum arrays directly:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0021.jpg" position="float"/>
      </p>
      <p>At this point, simulation results have been collected into <monospace>numpy</monospace>-arrays on the root process, containing both single-cell and summed contributions to the extracellular potential of the population, as shown in Figure <xref ref-type="fig" rid="F4">4</xref>.</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Simulation of extracellular potentials from a population of neurons using MPI</bold>. A population of pyramidal cells (<bold>Middle</bold> panel) receiving input spikes from a presynaptic pool of spike trains (<bold>Left</bold> panel) is simulated by distributing cells on different MPI processes and by collecting their individual contributions in the root MPI process. Summation of the individual contribution then gives the total population potential (<bold>Right</bold> panel). Results shown come from executing <monospace>example3.py</monospace>.</p>
        </caption>
        <graphic xlink:href="fninf-07-00041-g0004"/>
      </fig>
    </sec>
    <sec>
      <title>4.4. More examples</title>
      <p>Full simulation scripts for reproducing Figure <xref ref-type="fig" rid="F1">1</xref> (<monospace>example2.py</monospace>) , Figure <xref ref-type="fig" rid="F3">3</xref> (<monospace>example1.py</monospace>), and Figure <xref ref-type="fig" rid="F4">4</xref> (<monospace>example3.py</monospace>) can be obtained together with the <monospace>LFPy</monospace> source code (ref. section 5.2) in the folder <monospace>/path/to/LFPy/examples/</monospace>, along with additional example scripts.</p>
    </sec>
  </sec>
  <sec>
    <title>5. Technical aspects</title>
    <sec>
      <title>5.1. Requirements</title>
      <p><monospace>LFPy</monospace> is a package for the Python programming language<xref ref-type="fn" rid="fn0008"><sup>8</sup></xref> (Langtangen, <xref rid="B31" ref-type="bibr">2009</xref>), and has primarily been developed and tested on Python 2.7.x, and checked for forward compatibility with Python 3.x. <monospace>LFPy</monospace>
<italic>should</italic> work on any common 32- or 64-bit platform. The main development and testing platforms have been Debian<xref ref-type="fn" rid="fn0009"><sup>9</sup></xref> derivates and OS X, but <monospace>LFPy</monospace> should work equally well on other Unix-like operating systems and Windows. <monospace>LFPy</monospace> requires the Python packages <monospace>NumPy</monospace> and <monospace>Cython</monospace><xref ref-type="fn" rid="fn0010"><sup>10</sup></xref>. <monospace>Cython</monospace> allows building C-extensions from comparably slow Python code, which we employed to speed up time-consuming parts of the <monospace>LFPy</monospace> codebase, such as the low-level calculations in the line-source method (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>) and the <monospace>while</monospace>-loop advancing the simulation time step by time step. The <monospace>cProfile</monospace> module<xref ref-type="fn" rid="fn0011"><sup>11</sup></xref> has been used to identify bottlenecks in the code, and the corresponding code was then rewritten using <monospace>Cython</monospace>. If <monospace>Cython</monospace> is not installed, <monospace>LFPy</monospace> will fall back to equivalent but slower Python code. In order to enable all functionality and to run all the example scripts and <monospace>IPython</monospace> notebooks successfully, the <monospace>pylab</monospace> environment may be required [<monospace>NumPy</monospace>, <monospace>SciPy</monospace><xref ref-type="fn" rid="fn0012"><sup>12</sup></xref> (Jones et al., <xref rid="B30" ref-type="bibr">2001</xref>), <monospace>matplotlib</monospace><xref ref-type="fn" rid="fn0013"><sup>13</sup></xref> (Hunter, <xref rid="B29" ref-type="bibr">2007</xref>)], and in addition <monospace>h5py</monospace><xref ref-type="fn" rid="fn0014"><sup>14</sup></xref>, <monospace>mpi4py</monospace><xref ref-type="fn" rid="fn0015"><sup>15</sup></xref>, <monospace>IPython</monospace><xref ref-type="fn" rid="fn0016"><sup>16</sup></xref> (Pérez and Granger, <xref rid="B47" ref-type="bibr">2007</xref>) version 0.13 or newer with <monospace>IPython</monospace> notebook.</p>
      <p><monospace>LFPy</monospace> requires the NEURON simulation environment<xref ref-type="fn" rid="fn0017"><sup>17</sup></xref> (Hines and Carnevale, <xref rid="B24" ref-type="bibr">2001</xref>; Carnevale and Hines, <xref rid="B11" ref-type="bibr">2006</xref>) for calculation of the transmembrane currents from activity in multicompartment neuron models. Generic instructions on how to build NEURON as an extension to Python are found in Hines et al., (<xref rid="B25" ref-type="bibr">2009</xref>, Appendix), and we maintain some step-by-step instructions for Ubuntu Linux and OS X at the <monospace>LFPy</monospace> homepage<xref ref-type="fn" rid="fn0018"><sup>18</sup></xref>. Availability of the <monospace>neuron</monospace>-module can be checked by issuing:</p>
      <preformat>
 python -c “import neuron”
NEURON -- VERSION 7.3 (736+:19ad148877ff+) 19ad148877ff
Duke, Yale, and the BlueBrain Project -- Copyright
 1984-2012
See <ext-link ext-link-type="uri" xlink:href="http://www.neuron.yale.edu/credits.html">http://www.neuron.yale.edu/credits.html</ext-link>
</preformat>
      <p>While we normally recommend using the standard Python or the interactive <monospace>IPython</monospace> interpreters with LFPy, it is in principle possible to use the Python-interpreter supplied with the standard release of NEURON<xref ref-type="fn" rid="fn0019"><sup>19</sup></xref>, cf. Section 5.2.3.</p>
    </sec>
    <sec>
      <title>5.2. Installation and testing</title>
      <sec>
        <title>5.2.1. Easy install of <monospace>LFP<sub>y</sub></monospace></title>
        <p>‘Official’ releases of <monospace>LFPy</monospace> can be installed in one line from the Python Package index<xref ref-type="fn" rid="fn0020"><sup>20</sup></xref>, using either <monospace>easy_install</monospace> or <monospace>pip</monospace>, with or without administrative privileges:</p>
        <preformat>
$ pip install LFPy --user # or
$ sudo pip install LFPy
</preformat>
        <p>If <monospace>LFPy</monospace> was previously installed, add the <monospace>--upgrade</monospace> flag to force reinstall or upgrade.</p>
      </sec>
      <sec>
        <title>5.2.2. Installation from source</title>
        <p>The <monospace>LFPy</monospace> sources can be obtained either by downloading official releases, or by checking out the latest development code from the repository with <monospace>subversion</monospace><xref ref-type="fn" rid="fn0021"><sup>21</sup></xref>:</p>
        <preformat>
$ svn co \
<ext-link ext-link-type="uri" xlink:href="http://bebiservice.umb.no/svn-public/LFPy-release/">http://bebiservice.umb.no/svn-public/LFPy-release/</ext-link>
trunk LFPy
</preformat>
        <p><monospace>LFPy</monospace> can then be installed by executing the supplied <monospace>distutils</monospace>
<monospace>setup.py</monospace> script with or without administrative rights:</p>
        <preformat>
$ cd /path/to/LFPy/
$ python setup.py install --user # or
$ sudo python setup.py install
</preformat>
        <p><monospace>LFPy</monospace> can also be used from any folder containing the source code by either issuing or adding the following line to the <monospace>$HOME/.bashrc</monospace> or similar file:</p>
        <preformat>
$ export PYTHONPATH=PYTHONPATH/:/path/to/LFPy/:
</preformat>
        <p>The <monospace>Cython</monospace> extensions must then be built in-place by issuing:</p>
        <preformat>
$ python setup.py build_ext -i
</preformat>
      </sec>
      <sec>
        <title>5.2.3. Testing the installation</title>
        <p>If the installation finished without error, and other Python requirements are met (see section 5.1), the importing of <monospace>LFPy</monospace> using Python or NEURON as the interpreter, should print out some NEURON credits:</p>
        <preformat>
$ python -c “import LFPy” # or
$ nrngui -python -c “import LFPy”
NEURON – VERSION 7.3 (736+:19ad148877ff+)…
</preformat>
      </sec>
      <sec>
        <title>5.2.4. Unit tests</title>
        <p>If the <monospace>LFPy</monospace> source code has been obtained, a test suite built using the <monospace>unittest</monospace> module can be run as:</p>
        <preformat>
$ cd /path/to/LFPy/unittest
$ python testLFPy.py
</preformat>
        <p>The script will execute a series of tests, and summarize the results:</p>
        <preformat>
…
Ran 25 tests in 28.735 s

OK
</preformat>
        <p>The test suite initially calculates the extracellular potentials from a stick neuron with sinusoidal synaptic input applied to one end, obtained by numerically solving the analytical expression for the extracellular potential (Pettersen and Einevoll, <xref rid="B49" ref-type="bibr">2008</xref>), and subsequently compare with results obtained from equivalent <monospace>LFPy</monospace> simulations. If the discrepancy between the extracellular potentials from the analytical expression and <monospace>LFPy</monospace> simulations is sufficiently small (typically 3 running digits), tests will pass. Other tests check consistency at different time resolutions, and whether the outputs of the different calculation methods (Eqs. 3-5) converge in the far field, i.e., far away from the neuronal source.</p>
      </sec>
    </sec>
    <sec>
      <title>5.3. Morphology files</title>
      <p>The <monospace>morphology</monospace> keyword argument for <monospace>LFPy.Cell</monospace> should be a <monospace>.hoc</monospace>-file similar to those from the export dialog of the <monospace>Import3D</monospace> tool or from the <monospace>3D Neuron Viewer</monospace> application at NeuroMorpho.org<xref ref-type="fn" rid="fn0022"><sup>22</sup></xref> (Ascoli et al., <xref rid="B3" ref-type="bibr">2007</xref>), with the full 3D-specification of the neuron. However, the <monospace>Cell</monospace> class will also load SWC, NeuroLucida (v1 and v3), and NeuroML<xref ref-type="fn" rid="fn0023"><sup>23</sup></xref> (Gleeson et al., <xref rid="B17" ref-type="bibr">2010</xref>) files using the <monospace>Import3D</monospace> tool internally if such files are detected. The procedure loading the morphology also attempt to load a <monospace>.rot</monospace>-file alongside the morphology file itself, with default rotation angles typically applied to orient the apical dendritic tree along the positive <italic>z</italic>-axis pointing upwards (using the right-hand rule, the <italic>xy</italic>-plane is the horizontal plane). The morphology is rotated around the center of the soma. A <monospace>.rot</monospace> file is a pure text file containing three lines, each telling the rotation angle in radians around each axis, similar to:</p>
      <preformat>
x = 4.729
y = -3.166
z = 0
</preformat>
      <p>i.e., as generated by the script <monospace>/examples/create_</monospace><monospace>rot_file.py</monospace>.</p>
      <p>With the <monospace>cell</monospace> keyword argument <monospace>pt3d=True</monospace>, rotating or repositioning of <monospace>cell</monospace> is applied also to the pt3d information within NEURON.</p>
      <sec>
        <title>5.3.1. Visualization</title>
        <p>While <monospace>LFPy</monospace> does not provide specific plotting functionality, a <monospace>cell</monospace> may easily be visualized using, e.g., <monospace>matplotlib</monospace> and the following code:</p>
        <p>
          <graphic xlink:href="fninf-07-00041-i0022.jpg" position="float"/>
        </p>
      </sec>
    </sec>
    <sec>
      <title>5.4. Setting the biophysical properties</title>
      <p>The <monospace>custom_code</monospace> argument of the <monospace>Cell</monospace>-class can be used to pass additional biophysical properties of the model neuron. This argument should be used with <monospace>HOC</monospace>-language or Python-statements in <monospace>.hoc</monospace> or <monospace>.py</monospace> files, respectively. The path to the file should either be provided as strings, or a <monospace>list</monospace> pointing a set of files. The files typically contain procedures looping over the sections of the morphology, defining which membrane mechanisms and corresponding densities and properties are present on the section- or compartment level. Another option is to use <monospace>custom_fun</monospace> and <monospace>custom_fun_args</monospace> arguments of the <monospace>Cell</monospace> class to pass regular python functions and optionally arguments for these to set the biophysical properties of the model.</p>
      <p>A few example files (e.g., <monospace>/examples/example5.py</monospace> and <monospace>/examples/example6.py</monospace>) supplied with <monospace>LFPy</monospace>, make use of these different methods to specify the biophysical properties of a layer-5 cat pyramidal cell model adapted from Mainen and Sejnowski (<xref rid="B38" ref-type="bibr">1996</xref>), by using the relevant parts from the original model code from ModelDB<xref ref-type="fn" rid="fn0024"><sup>24</sup></xref>.</p>
      <p>Note that the default behavior of the <monospace>Cell</monospace> is to insert NEURON's <monospace>pas</monospace> and <monospace>extracellular</monospace> mechanisms across all sections, and set the number of compartments for each section according to the <monospace>d_lambda</monospace> rule, with distance between nodes no longer than a fraction <monospace>d_lambda</monospace>=0.1 of length constants λ<sub><italic>f</italic></sub> computed at <italic>f</italic> = 100 Hz (Hines and Carnevale, <xref rid="B24" ref-type="bibr">2001</xref>). This default behavior can be switched off with the <monospace>Cell</monospace> keyword arguments:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0023.jpg" position="float"/>
      </p>
      <p>In this case the passive properties, compartmentalization, and optionally the extracellular mechanism to enable calculation of extracellular potentials, <italic>must</italic> be set by the procedures that also set the remaining biophysics of the cell model, otherwise NEURON may fail to assess the equivalent circuit of the model neuron.</p>
      <p>If a model loaded in <monospace>LFPy</monospace> fails to reproduce the original model behavior, a simple way to verify that properties like temperature, morphology or channel densities are correct is to print and compare the properties of all compartments in both implementations:</p>
      <p>In <monospace>HOC</monospace>:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0024.jpg" position="float"/>
      </p>
      <p>In Python:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0025.jpg" position="float"/>
      </p>
      <p>Note that compiled <monospace>NMODL</monospace> files present in the working folder will be loaded by default, but such files located elsewhere have to be imported explicitly:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0026.jpg" position="float"/>
      </p>
      <p>Above, the morphology and specifications of the biophysical properties were given as keyword arguments to <monospace>LFPy.Cell</monospace>. Models existing in memory can in principle be executed by supplying the keyword arguments <monospace>morphology=None, delete_sections=False</monospace> in addition to the above <monospace>cell_parameters</monospace>, e.g., if a model is defined via the NEURON graphical or command line interface. Defining scripts with the full specification of the model loaded with <monospace>LFPy.Cell</monospace>, is, however, in most cases more tractable.</p>
    </sec>
    <sec>
      <title>5.5. Using cell templates</title>
      <p>As illustrated in Section 4.2, the <monospace>TemplateCell</monospace> class requires a template specification to assign section references. The template specification file should conform to the basic structure of the following example, assigning the somatic, dendritic and axonal sections of a reconstructed morphology to lists:</p>
      <preformat>
begintemplate LFPyCellTemplate
public soma, axon, dend, apic
public all, somatic, axonal, basal, apical
objref all, somatic, axonal, basal, apical
proc init() {
    all = new SectionList()
    somatic = new SectionList()
    axonal = new SectionList()
    basal = new SectionList()
    apical = new SectionList()
}
create soma[1], axon[1], dend[1], apic[1]
endtemplate LFPyCellTemplate
</preformat>
    </sec>
    <sec>
      <title>5.6. The <monospace>extracellular</monospace> mechanism and parallel NEURON</title>
      <p><monospace>LFPy</monospace> by default inserts the <monospace>extracellular</monospace> mechanism provided by NEURON in every compartment (which is useful to simulate the use of e.g., extracellular stimulation electrodes). This mechanism conveniently provides direct access to the total transmembrane current <italic>I<sub>n</sub></italic>, eliminating the need to individually extract all ionic, resistive, capacitive and synaptic transmembrane currents and sum them. While certain minor limitations for use of the <monospace>extracellular</monospace> mechanism together with the parallel capabilities of NEURON provided by <monospace>ParallelContext</monospace> exist, i.e., in combination with the multisplit-method and splitcell-method applied to dendritic trees of individual cells (Hines et al., <xref rid="B26" ref-type="bibr">2008</xref>), the present version of <monospace>LFPy</monospace> has not been written in a way that exploit NEURONs parallel capabilities. Therefore, LFPy does not support implicit parallel simulations of extracellular potentials with interconnected neurons. Within that scope, different cell-objects in general have to be distributed between different MPI-ranks, and their corresponding connections have to be communicated using the provided <monospace>ParallelContext</monospace> interface. Note that in the MPI example in Section 4.3, each cell exists independently without connections on different MPI ranks which does not require the NEURON <monospace>ParallelContext</monospace>.</p>
    </sec>
    <sec>
      <title>5.7. Indexed compartments and section references</title>
      <p><monospace>LFPy</monospace> extensively uses <monospace>numpy</monospace> array-operations for efficient calculation of extracellular potentials. Most data regarding specific compartments in the model neuron is therefore stored in <monospace>numpy</monospace>-arrays with length equal to the total number of compartments in the cell. This includes, for example, the start- and end coordinates of current sources along the <italic>x, y, z</italic>-dimensions and the transmembrane currents in each time step. Each compartment is in this representation assigned a specific (unique) index.</p>
      <p>However, the usual way to access compartments in NEURON is through section references and relative coordinates:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0027.jpg" position="float"/>
      </p>
      <p>i.e., there are no 'global' indices as in <monospace>LFPy</monospace> where instead the compartment indices, <monospace>idx</monospace>, correspond to a <italic>counter</italic> in a nested loop over all sections and compartments:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0028.jpg" position="float"/>
      </p>
      <p>Therefore, to ease this transition for users accustomed to working with specific models in NEURON, <monospace>LFPy.Cell</monospace> provides methods for getting indices corresponding to sections in the NEURON namespace</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0029.jpg" position="float"/>
      </p>
      <p>or conversely, getting section names and positions from compartment indices:</p>
      <p>
        <graphic xlink:href="fninf-07-00041-i0030.jpg" position="float"/>
      </p>
    </sec>
    <sec>
      <title>5.8. Constructing line sources</title>
      <p>Morphologically detailed neuron models resulting from histological reconstruction (De Schutter, <xref rid="B12" ref-type="bibr">2009</xref>), Ch. 8), typically specify sections with an arbitrary number of data points (<italic>x</italic>, <italic>y</italic>, <italic>z</italic>, <italic>d</italic>), i.e., 3D locations and diameters. For a section corresponding to a continuous piece of dendrite split into <italic>N</italic><sub>seg</sub> compartments, NEURON creates equivalent cables that correspond to the arc length as specified by the histological 3D-points, where the cables have equal length, but varying diameter, effectively with different electrotonic length constants. The total length of the compartments is equal to the total arc-length of the reconstructed section, but the detailed geometry is not needed for solving the cable equation. Compartments and their respective transmembrane currents must however be assigned a location and orientation in 3D space. In <monospace>LFPy</monospace>, the start and end-point coordinates of each straight line source are obtained using linear interpolation along the total arc-length of each section, so that for a section with <monospace>section.nseg==1</monospace> the line source is a straight line between the start and end-points of the section, for <monospace>section.nseg==2</monospace>, straight lines between the start, mid- and end-points of each section are used and so forth. As a consequence, the total length of the line sources will typically be less than the total arc length of the section depending on its geometry, but more histological information may be preserved with line sources by increasing the number of compartments per section. This reduction in morphological detail is implied in Figure <xref ref-type="fig" rid="F2">2A</xref>. The diameter and surface area of each compartment as reported by NEURON is preserved, however, such that the minimum allowable distance between a putative extracellular site and compartment axis will be equal to its radius. If conflicts are detected, the minimum radius employed in extracellular potential calculations is automatically set equal to the respective compartment radius.</p>
    </sec>
    <sec>
      <title>5.9. Fast and memory-efficient scheme for calculating extracellular potentials</title>
      <p>The traditional way of employing the forward formalism for calculation of extracellular potentials as described in section 2.2 is to first extract the membrane currents of a model neuron for the entire duration of the simulation time, and to store them temporarily either in memory or on file (Holt and Koch, <xref rid="B28" ref-type="bibr">1999</xref>; Gold et al., <xref rid="B19" ref-type="bibr">2006</xref>, <xref rid="B18" ref-type="bibr">2007</xref>; Pettersen et al., <xref rid="B50" ref-type="bibr">2008</xref>). The stored transmembrane currents may then be used to calculate the extracellular potentials offline. This is, however, a computationally inefficient and memory-consuming procedure. For example, storing all transmembrane currents of a 1000-compartment neuron model at 64-bit float precision for 1 s of simulation time running at 20 kHz temporal resolution, will require 160 MB of uncompressed binary storage (e.g. with <monospace>numpy.save()</monospace> or with <monospace>HDF5</monospace><xref ref-type="fn" rid="fn0025"><sup>25</sup></xref>), and as much as ~500 MB in a text file using <monospace>numpy.savetxt()</monospace> with <monospace>%.18e</monospace> formatting.</p>
      <p>As shown in section 4.2, this inefficient and memory-consuming process of intermediate storage of membrane currents can be omitted altogether. Assuming linear superposition of extracellular potentials from different current sources in extracellular media, <monospace>LFPy</monospace> can geometrically map the contribution from each compartment-current to any electrode contact point defined with the class <monospace>LFPy.RecExtElectrode</monospace>. This is done by temporarily substituting the cell's membrane currents with an (<italic>N, N</italic>) identity-matrix, and running the cell object and corresponding identity matrix through the <monospace>LFPy.RecExtElectrode</monospace> class, defining the geometry of an extracellular recording device with <italic>N</italic><sub>contacts</sub> contact points. The end result is an (<italic>N</italic>, <italic>N</italic><sub>contacts</sub>) coefficient matrix <bold>C</bold>, that only needs to be computed once. For simulations of extracellular potentials, the potentials at the different electrode contacts at every time step <italic>t<sub>i</sub></italic> is then simply given by the dot product
<disp-formula id="E7"><label>(7)</label><mml:math id="M7"><mml:mrow><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>Φ</mml:mi></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>C</mml:mi></mml:mstyle><mml:mtext> </mml:mtext><mml:mo>·</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold" mathsize="normal"><mml:mi>I</mml:mi></mml:mstyle><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo> </mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula>
where the vector <bold>I</bold>(<italic>t<sub>i</sub></italic>) of length <italic>N</italic> contains the respective membrane currents, and <bold>Φ</bold>(<italic>t<sub>i</sub></italic>) a vector with length <italic>N</italic><sub>contacts</sub> containing the extracellular potentials at time-step <italic>t<sub>i</sub></italic>. The memory requirements are potentially reduced by orders of magnitude (≈<italic>N</italic>/<italic>N</italic><sub>contacts</sub>) vs. in-memory storage of transmembrane currents, at the cost of calculating <bold>C</bold>. Any such array <bold>C</bold><sub>x</sub> (or <monospace>list</monospace> thereof) can readily be passed with keyword argument <monospace>dotprodcoeffs</monospace> to <monospace>cell.simulate()</monospace>. <monospace>LFPy</monospace> thereby facilitates additional computations relying on compartmental membrane currents, where <monospace>cell</monospace> and stimulus can still be used to set up the model.</p>
      <p><monospace>LFPy</monospace> will default to storing results in-memory, but simulation of extracellular potentials to <monospace>HDF5</monospace> directly with <monospace>h5py</monospace> is supported by setting <monospace>LFPy.Cell.simulate</monospace> keyword arguments <monospace>to_memory=False</monospace>, <monospace>to_file=True</monospace>, and <monospace>file_name=“some/file/name.h5”</monospace>.</p>
    </sec>
  </sec>
  <sec>
    <title>6. Discussion and outlook</title>
    <p>We have presented a new Python software package, <monospace>LFPy</monospace>, for calculation of extracellular potentials around morphologically reconstructed neurons. Despite its name, the software is not only applicable for calculation of <italic>local field potentials</italic> (LFPs), the low-frequency part of the extracellular potentials (cf. Example 1 in section 3.1). As the biophysical forward-modeling scheme is also applicable for the higher frequencies contained in electrical signals recorded in the brain, <monospace>LFPy</monospace> can equally efficiently be used for simulations of high-frequency signals such as extracellular spikes (cf. Example 2 in section 3.2).</p>
    <p>While the present version 1.0 of <monospace>LFPy</monospace> is focused on the calculation of single-neuron contributions to the extracellular potentials, the computational scheme generalizes directly to the calculation of signals from <italic>populations</italic> of neurons. This was illustrated in Example 3 in section 3.3 where also parallelization of the computational scheme by means of MPI was employed, however without communication between units. At present, <monospace>LFPy</monospace> is however less suitable for the investigation of extracellular potentials generated in genuine network models that require parallelization of the network activity. At present, this is a limitation in the current version of the software mainly in that the simulation control is incorporated as an <monospace>LFPy.Cell</monospace> class method, and that the class <monospace>LFPy.TemplateCell</monospace> (which allows for multiple simultaneous cell representations) is not using the capabilities of NEURON for assigning each cell to different MPI ranks. However, as simulation of extracellular signals from network activity likely will become increasingly important, we aim to implement solutions to these limitations in future versions of <monospace>LFPy</monospace>.</p>
    <p>The computational scheme presented here, and implemented in version 1.0 of <monospace>LFPy</monospace>, is based on the biophysical forward model in Equation (2). This formula inherently assumes an <italic>infinite</italic>, <italic>isotropic</italic>, <italic>homogeneous</italic>, and <italic>ohmic</italic> extracellular medium (Pettersen et al., <xref rid="B51" ref-type="bibr">2012</xref>). However, the scheme can be straightforwardly generalized to account for <italic>anisotropic</italic> conductivities (Nicholson and Freeman, <xref rid="B42" ref-type="bibr">1975</xref>; Logothetis et al., <xref rid="B37" ref-type="bibr">2007</xref>; Goto et al., <xref rid="B20" ref-type="bibr">2010</xref>), or jumps in conductivities at tissue interfaces (Pettersen et al., <xref rid="B48" ref-type="bibr">2006</xref>). Also, even if the conductivity σ is found to be frequency dependent, the forward modeling scheme can still be used for each frequency (Fourier) component separately. For further discussion of the validity and possible generalizations of the present scheme, see Pettersen et al. (<xref rid="B51" ref-type="bibr">2012</xref>). Finally, when the extracellular conductivities around the recording electrodes have such a complicated spatial structure that analytical formulas either do not exist or are unpractical [e.g., in cortical slice recordings with multielectrode arrays (MEAs) Bakker et al., <xref rid="B4" ref-type="bibr">2009</xref>], one can always solve the forward problem by means of <italic>finite element modeling</italic> (FEM) (Logg et al., <xref rid="B36" ref-type="bibr">2012</xref>; Ness et al., <xref rid="B41" ref-type="bibr">2012</xref>; Lempka and McIntyre, <xref rid="B32" ref-type="bibr">2013</xref>). A natural avenue of future work is to expand <monospace>LFPy</monospace> to account for such new situations as needs arises.</p>
    <p>Another natural application of <monospace>LFPy</monospace> is the investigation of effects from externally imposed electrical potentials in the extracellular medium, for example due to currents injected during deep-brain stimulation (DBS) (Oluigbo et al., <xref rid="B44" ref-type="bibr">2012</xref>) or induced by transcranial magnetic stimulation (TMS) or transcranial direct current stimulation (tDCS) (McKinley et al., <xref rid="B39" ref-type="bibr">2012</xref>). In fact, externally imposed spatiotemporally distributed extracellular potentials (Anastassiou et al., <xref rid="B1" ref-type="bibr">2010</xref>, <xref rid="B2" ref-type="bibr">2011</xref>; Pashut et al., <xref rid="B46" ref-type="bibr">2011</xref>) may already be included in the present version of <monospace>LFPy</monospace> (by use of <monospace>cell.insert_v_ext()</monospace>). However, effects from so called <italic>ephaptic</italic> coupling (Anastassiou et al., <xref rid="B2" ref-type="bibr">2011</xref>), where neurons mutually interact via extracellular potentials stemming from their own neuronal activity, is less amenable for investigation by the present version of <monospace>LFPy</monospace>.</p>
    <p>The development of neuroinformatics tools obviously benefits strongly from an active community of users providing feedback, and possibly even new code reflecting new applications. As we believe that detailed biophysical modeling of extracellular potentials must become an integral ingredient in the future interpretation of such signals, we are hopeful that the present launch of <monospace>LFPy</monospace> will signal the beginning of an active community of such modelers, preferably contributing to the joint development of this tool.</p>
    <sec>
      <title>Conflict of interest statement</title>
      <p>The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.</p>
    </sec>
  </sec>
</body>
<back>
  <ack>
    <p>We acknowledge support from the The Research Council of Norway (NOTUR, eNeuro, NevroNor), the EU Grant 269921 (BrainScaleS), the Polish Ministry of Science and Higher Education (grants N N303 542839 and IP2011 030971), and the International Neuroinformatics Coordinating Facility (INCF).</p>
  </ack>
  <fn-group>
    <fn id="fn0001">
      <p><sup>1</sup><ext-link ext-link-type="uri" xlink:href="http://senselab.med.yale.edu/modeldb/">http://senselab.med.yale.edu/modeldb/</ext-link>.</p>
    </fn>
    <fn id="fn0002">
      <p><sup>2</sup><ext-link ext-link-type="uri" xlink:href="http://compneuro.umb.no/LFPy">compneuro.umb.no/LFPy</ext-link>.</p>
    </fn>
    <fn id="fn0003">
      <p><sup>3</sup><ext-link ext-link-type="uri" xlink:href="http://numpy.scipy.org/">numpy.scipy.org</ext-link>.</p>
    </fn>
    <fn id="fn0004">
      <p><sup>4</sup><ext-link ext-link-type="uri" xlink:href="http://senselab.med.yale.edu/modeldb/ShowModel.asp?model=2488">senselab.med.yale.edu/modeldb/ShowModel.asp?model=2488</ext-link>.</p>
    </fn>
    <fn id="fn0005">
      <p><sup>5</sup><ext-link ext-link-type="uri" xlink:href="http://senselab.med.yale.edu/modeldb/ShowModel.asp?model=139653">senselab.med.yale.edu/modeldb/ShowModel.asp?model=139653</ext-link>.</p>
    </fn>
    <fn id="fn0006">
      <p><sup>6</sup><ext-link ext-link-type="uri" xlink:href="http://www.open-mpi.org/">www.open-mpi.org/</ext-link>.</p>
    </fn>
    <fn id="fn0007">
      <p><sup>7</sup><ext-link ext-link-type="uri" xlink:href="http://mpi4py.scipy.org/">mpi4py.scipy.org</ext-link>.</p>
    </fn>
    <fn id="fn0008">
      <p><sup>8</sup><ext-link ext-link-type="uri" xlink:href="http://www.python.org">www.python.org</ext-link>.</p>
    </fn>
    <fn id="fn0009">
      <p><sup>9</sup><ext-link ext-link-type="uri" xlink:href="http://www.debian.org">www.debian.org</ext-link>.</p>
    </fn>
    <fn id="fn0010">
      <p><sup>10</sup><ext-link ext-link-type="uri" xlink:href="http://www.cython.org/">www.cython.org</ext-link>.</p>
    </fn>
    <fn id="fn0011">
      <p><sup>11</sup><ext-link ext-link-type="uri" xlink:href="http://docs.python.org/2.7/library/profile">docs.python.org/2.7/library/profile</ext-link>.</p>
    </fn>
    <fn id="fn0012">
      <p><sup>12</sup><ext-link ext-link-type="uri" xlink:href="http://www.scipy.org">www.scipy.org</ext-link>.</p>
    </fn>
    <fn id="fn0013">
      <p><sup>13</sup><ext-link ext-link-type="uri" xlink:href="http://matplotlib.org">matplotlib.org</ext-link>.</p>
    </fn>
    <fn id="fn0014">
      <p><sup>14</sup><ext-link ext-link-type="uri" xlink:href="http://alfven.org/wp/hdf5-for-python/">alfven.org/wp/hdf5-for-python</ext-link>.</p>
    </fn>
    <fn id="fn0015">
      <p><sup>15</sup><ext-link ext-link-type="uri" xlink:href="http://mpi4py.scipy.org/">mpi4py.scipy.org</ext-link>.</p>
    </fn>
    <fn id="fn0016">
      <p><sup>16</sup><ext-link ext-link-type="uri" xlink:href="http://www.ipython.org/">www.ipython.org</ext-link>.</p>
    </fn>
    <fn id="fn0017">
      <p><sup>17</sup><ext-link ext-link-type="uri" xlink:href="http://www.neuron.yale.edu">www.neuron.yale.edu</ext-link>.</p>
    </fn>
    <fn id="fn0018">
      <p><sup>18</sup><ext-link ext-link-type="uri" xlink:href="http://compneuro.umb.no/LFPy">compneuro.umb.no/LFPy</ext-link>.</p>
    </fn>
    <fn id="fn0019">
      <p><sup>19</sup><ext-link ext-link-type="uri" xlink:href="http://www.neuron.yale.edu/neuron/download">www.neuron.yale.edu/neuron/download</ext-link>.</p>
    </fn>
    <fn id="fn0020">
      <p><sup>20</sup><ext-link ext-link-type="uri" xlink:href="http://https://pypi.python.org/pypi/LFPy">https://pypi.python.org/pypi/LFPy</ext-link>.</p>
    </fn>
    <fn id="fn0021">
      <p><sup>21</sup><ext-link ext-link-type="uri" xlink:href="http://subversion.tigris.org/">subversion.tigris.org/</ext-link>.</p>
    </fn>
    <fn id="fn0022">
      <p><sup>22</sup><ext-link ext-link-type="uri" xlink:href="http://www.neuromorpho.org">www.neuromorpho.org</ext-link>.</p>
    </fn>
    <fn id="fn0023">
      <p><sup>23</sup><ext-link ext-link-type="uri" xlink:href="http://www.neuroml.org">www.neuroml.org</ext-link>.</p>
    </fn>
    <fn id="fn0024">
      <p><sup>24</sup><ext-link ext-link-type="uri" xlink:href="http://senselab.med.yale.edu/modeldb/ShowModel.asp?model=2488">senselab.med.yale.edu/modeldb/ShowModel.asp?model=2488</ext-link>.</p>
    </fn>
    <fn id="fn0025">
      <p><sup>25</sup><ext-link ext-link-type="uri" xlink:href="http://www.hdfgroup.org/HDF5/">www.hdfgroup.org/HDF5/</ext-link>.</p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Anastassiou</surname><given-names>C. A.</given-names></name><name><surname>Montgomery</surname><given-names>S. M.</given-names></name><name><surname>Barahona</surname><given-names>M.</given-names></name><name><surname>Buzsáki</surname><given-names>G.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2010</year>). <article-title>The effect of spatially inhomogeneous extracellular electric fields on neurons</article-title>. <source>J. Neurosci</source>. <volume>30</volume>, <fpage>1925</fpage>–<lpage>1936</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.3635-09.2010</pub-id><?supplied-pmid 20130201?><pub-id pub-id-type="pmid">20130201</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Anastassiou</surname><given-names>C. A.</given-names></name><name><surname>Perin</surname><given-names>R.</given-names></name><name><surname>Markram</surname><given-names>H.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2011</year>). <article-title>Ephaptic coupling of cortical neurons</article-title>. <source>Nat. Neurosci</source>. <volume>14</volume>, <fpage>217</fpage>–<lpage>223</lpage>. <pub-id pub-id-type="doi">10.1038/nn.2727</pub-id><?supplied-pmid 21240273?><pub-id pub-id-type="pmid">21240273</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ascoli</surname><given-names>G. A.</given-names></name><name><surname>Donohue</surname><given-names>D. E.</given-names></name><name><surname>Halavi</surname><given-names>M.</given-names></name></person-group> (<year>2007</year>). <article-title>Neuromorpho.org: a central resource for neuronal morphologies</article-title>. <source>J. Neurosci</source>. <volume>27</volume>, <fpage>9247</fpage>–<lpage>9251</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.2055-07.2007</pub-id><?supplied-pmid 17728438?><pub-id pub-id-type="pmid">17728438</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bakker</surname><given-names>R.</given-names></name><name><surname>Schubert</surname><given-names>D.</given-names></name><name><surname>Levels</surname><given-names>K.</given-names></name><name><surname>Bezgin</surname><given-names>G.</given-names></name><name><surname>Bojak</surname><given-names>I.</given-names></name><name><surname>Kötter</surname><given-names>R.</given-names></name></person-group> (<year>2009</year>). <article-title>Classification of cortical microcircuits based on micro-electrode-array data from slices of rat barrel cortex</article-title>. <source>Neural Netw</source>. <volume>22</volume>, <fpage>1159</fpage>–<lpage>1168</lpage>. <pub-id pub-id-type="doi">10.1016/j.neunet.2009.07.014</pub-id><?supplied-pmid 19665350?><pub-id pub-id-type="pmid">19665350</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bédard</surname><given-names>C.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name></person-group> (<year>2012</year>). <article-title>Local field potentials</article-title>, in <source>Handbook of Neural Activity Measurement</source>, eds <person-group person-group-type="editor"><name><surname>Brette</surname><given-names>R.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name></person-group> (<publisher-loc>Cambridge, UK</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>), <fpage>136</fpage>–<lpage>191</lpage>. <pub-id pub-id-type="doi">10.1017/CBO9780511979958.005</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bédard</surname><given-names>C.</given-names></name><name><surname>Kröger</surname><given-names>H.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name></person-group> (<year>2004</year>). <article-title>Modeling extracellular field potentials and the frequency-filtering properties of extracellular space</article-title>. <source>Biophys. J</source>. <volume>86</volume>, <fpage>1829</fpage>–<lpage>1842</lpage>. <pub-id pub-id-type="doi">10.1016/S0006-3495(04)74250-2</pub-id><?supplied-pmid 14990509?><pub-id pub-id-type="pmid">14990509</pub-id></mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="book"><person-group person-group-type="editor"><name><surname>Brette</surname><given-names>R.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name></person-group> (eds.). (<year>2012</year>). <source>Handbook of Neural Activity Measurement</source>. <publisher-loc>Cambridge, UK</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>
<pub-id pub-id-type="doi">10.1017/CBO9780511979958</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Buzsáki</surname><given-names>G.</given-names></name></person-group> (<year>2004</year>). <article-title>Large-scale recording of neuronal ensembles</article-title>. <source>Nat. Neurosci</source>. <volume>7</volume>, <fpage>446</fpage>–<lpage>451</lpage>. <pub-id pub-id-type="doi">10.1038/nn1233</pub-id><?supplied-pmid 15114356?><pub-id pub-id-type="pmid">15114356</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Buzsáki</surname><given-names>G.</given-names></name><name><surname>Anastassiou</surname><given-names>C. A.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2012</year>). <article-title>The origin of extracellular fields and currents — EEG, ECoG, LFP and spikes</article-title>. <source>Nat. Rev. Neurosci</source>. <volume>13</volume>, <fpage>407</fpage>–<lpage>420</lpage>. <pub-id pub-id-type="doi">10.1038/nrn3241</pub-id><?supplied-pmid 22595786?><pub-id pub-id-type="pmid">22595786</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Carnevale</surname><given-names>N. T.</given-names></name></person-group> (<year>2007</year>). <article-title>Neuron simulation environment</article-title>. <source>Scholarpedia</source>
<volume>2</volume>, <fpage>1378</fpage>
<pub-id pub-id-type="doi">10.4249/scholarpedia.1378</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Carnevale</surname><given-names>N. T.</given-names></name><name><surname>Hines</surname><given-names>M. L.</given-names></name></person-group> (<year>2006</year>). <source>The NEURON Book</source>. <publisher-loc>Cambridge, UK</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>
<pub-id pub-id-type="doi">10.1017/CBO9780511541612</pub-id></mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>De Schutter</surname><given-names>E. E.</given-names></name></person-group> (<year>2009</year>). <source>Computational Modeling Methods for Neuroscientists</source>. <publisher-loc>Cambridge, MA</publisher-loc>: <publisher-name>MIT Press</publisher-name>
<pub-id pub-id-type="doi">10.7551/mitpress/9780262013277.001.0001</pub-id></mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Franke</surname><given-names>F.</given-names></name><name><surname>Hagen</surname><given-names>E.</given-names></name><name><surname>Pouzat</surname><given-names>C.</given-names></name><name><surname>Harris</surname><given-names>K. D.</given-names></name></person-group> (<year>2012</year>). <article-title>Towards reliable spike-train recordings from thousands of neurons with multielectrodes</article-title>. <source>Curr. Opin. Neurobiol</source>. <volume>22</volume>, <fpage>11</fpage>–<lpage>17</lpage>. <pub-id pub-id-type="doi">10.1016/j.conb.2011.10.001</pub-id><?supplied-pmid 22023727?><pub-id pub-id-type="pmid">22023727</pub-id></mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Kayser</surname><given-names>C.</given-names></name><name><surname>Logothetis</surname><given-names>N. K.</given-names></name><name><surname>Panzeri</surname><given-names>S.</given-names></name></person-group> (<year>2013a</year>). <article-title>Modelling and analysis of local field potentials for studying the function of cortical circuits</article-title>. <source>Nat. Rev. Neurosci</source>. <volume>14</volume>, <fpage>770</fpage>–<lpage>785</lpage>. <pub-id pub-id-type="doi">10.1038/nrn3599</pub-id><?supplied-pmid 24135696?><pub-id pub-id-type="pmid">24135696</pub-id></mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Lindén</surname><given-names>H.</given-names></name><name><surname>Tetzlaff</surname><given-names>T.</given-names></name><name><surname>Łęski</surname><given-names>S.</given-names></name><name><surname>Pettersen</surname><given-names>K. H.</given-names></name></person-group> (<year>2013b</year>). <article-title>Local field potential: biophysical origin and analysis</article-title>, in <source>Principles of Neural Coding</source>, eds <person-group person-group-type="editor"><name><surname>Quiroga</surname><given-names>R. Q.</given-names></name><name><surname>Panzeri</surname><given-names>S.</given-names></name></person-group> (<publisher-loc>Boca Raton, FL</publisher-loc>: <publisher-name>CRC Press</publisher-name>), <fpage>37</fpage>–<lpage>59</lpage>.</mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Devor</surname><given-names>A.</given-names></name><name><surname>Ulbert</surname><given-names>I.</given-names></name><name><surname>Halgren</surname><given-names>E.</given-names></name><name><surname>Dale</surname><given-names>A. M.</given-names></name></person-group> (<year>2007</year>). <article-title>Laminar population analysis: estimating firing rates and evoked synaptic activity from multielectrode recordings in rat barrel cortex</article-title>. <source>J. Neurophysiol</source>. <volume>97</volume>, <fpage>2174</fpage>–<lpage>2190</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00845.2006</pub-id><?supplied-pmid 17182911?><pub-id pub-id-type="pmid">17182911</pub-id></mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P.</given-names></name><name><surname>Crook</surname><given-names>S.</given-names></name><name><surname>Cannon</surname><given-names>R. C.</given-names></name><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Billings</surname><given-names>G. O.</given-names></name><name><surname>Farinella</surname><given-names>M.</given-names></name><etal/></person-group>. (<year>2010</year>). <article-title>Neuroml: a language for describing data driven models of neurons and networks with a high degree of biological detail</article-title>. <source>PLOS Comput. Biol</source>. <volume>6</volume>:<fpage>e1000815</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000815</pub-id><?supplied-pmid 20585541?><pub-id pub-id-type="pmid">20585541</pub-id></mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gold</surname><given-names>C.</given-names></name><name><surname>Henze</surname><given-names>D. A.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2007</year>). <article-title>Using extracellular action potential recordings to constrain compartmental models</article-title>. <source>J. Comput. Neurosci</source>. <volume>23</volume>, <fpage>39</fpage>–<lpage>58</lpage>. <pub-id pub-id-type="doi">10.1007/s10827-006-0018-2</pub-id><?supplied-pmid 17273940?><pub-id pub-id-type="pmid">17273940</pub-id></mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gold</surname><given-names>C.</given-names></name><name><surname>Henze</surname><given-names>D. A.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name><name><surname>Buzsáki</surname><given-names>G.</given-names></name></person-group> (<year>2006</year>). <article-title>On the origin of the extracellular action potential waveform: a modeling study</article-title>. <source>J. Neurophysiol</source>. <volume>95</volume>, <fpage>3113</fpage>–<lpage>3128</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00979.2005</pub-id><?supplied-pmid 16467426?><pub-id pub-id-type="pmid">16467426</pub-id></mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Goto</surname><given-names>T.</given-names></name><name><surname>Hatanaka</surname><given-names>R.</given-names></name><name><surname>Ogawa</surname><given-names>T.</given-names></name><name><surname>Sumiyoshi</surname><given-names>A.</given-names></name><name><surname>Riera</surname><given-names>J.</given-names></name><name><surname>Kawashima</surname><given-names>R.</given-names></name></person-group> (<year>2010</year>). <article-title>An evaluation of the conductivity profile in the somatosensory barrel cortex of wistar rats</article-title>. <source>J. Neurophysiol</source>. <volume>104</volume>, <fpage>3388</fpage>–<lpage>3412</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00122.2010</pub-id><?supplied-pmid 20810682?><pub-id pub-id-type="pmid">20810682</pub-id></mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gratiy</surname><given-names>S. L.</given-names></name><name><surname>Devor</surname><given-names>A.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Dale</surname><given-names>A. M.</given-names></name></person-group> (<year>2011</year>). <article-title>On the estimation of population-specific synaptic currents from laminar multielectrode recordings</article-title>. <source>Front. Neuroinform</source>. <volume>5</volume>:<issue>32</issue>. <pub-id pub-id-type="doi">10.3389/fninf.2011.00032</pub-id><?supplied-pmid 22203801?><pub-id pub-id-type="pmid">22203801</pub-id></mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hämäläinen</surname><given-names>M.</given-names></name><name><surname>Haari</surname><given-names>R.</given-names></name><name><surname>Ilmoniemi</surname><given-names>R. J.</given-names></name><name><surname>Knuutila</surname><given-names>J.</given-names></name><name><surname>Lounasmaa</surname><given-names>O. V.</given-names></name></person-group> (<year>1993</year>). <article-title>Magnetoencephalography — theory, instrumentation, and application to noninvasive studies of the working human brain</article-title>. <source>Rev. Mod. Phys</source>. <volume>65</volume>, <fpage>413</fpage>–<lpage>496</lpage>. <pub-id pub-id-type="doi">10.1103/RevModPhys.65.413</pub-id></mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hay</surname><given-names>E.</given-names></name><name><surname>Hill</surname><given-names>S.</given-names></name><name><surname>Schürmann</surname><given-names>F.</given-names></name><name><surname>Markram</surname><given-names>H.</given-names></name><name><surname>Segev</surname><given-names>I.</given-names></name></person-group> (<year>2011</year>). <article-title>Models of neocortical layer 5b pyramidal cells capturing a wide range of dendritic and perisomatic active properties</article-title>. <source>PLOS Comput. Biol</source>. <volume>7</volume>:<fpage>e1002107</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1002107</pub-id><?supplied-pmid 21829333?><pub-id pub-id-type="pmid">21829333</pub-id></mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Carnevale</surname><given-names>N. T.</given-names></name></person-group> (<year>2001</year>). <article-title>Neuron: a tool for neuroscientists</article-title>. <source>Neuroscientist</source>
<volume>7</volume>, <fpage>123</fpage>–<lpage>135</lpage>. <pub-id pub-id-type="doi">10.1177/107385840100700207</pub-id><?supplied-pmid 11496923?><pub-id pub-id-type="pmid">11496923</pub-id></mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Davison</surname><given-names>A. P.</given-names></name><name><surname>Muller</surname><given-names>E.</given-names></name></person-group> (<year>2009</year>). <article-title>NEURON and Python</article-title>. <source>Front. Neuroinform</source>. <volume>3</volume>:<fpage>1</fpage>. <pub-id pub-id-type="doi">10.3389/neuro.11.001.2009</pub-id><?supplied-pmid 19198661?><pub-id pub-id-type="pmid">19198661</pub-id></mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Markram</surname><given-names>H.</given-names></name><name><surname>Schürmann</surname><given-names>F.</given-names></name></person-group> (<year>2008</year>). <article-title>Fully implicit parallel simulation of single neurons</article-title>. <source>J. Comput. Neurosci</source>. <volume>25</volume>, <fpage>439</fpage>–<lpage>448</lpage>. <pub-id pub-id-type="doi">10.1007/s10827-008-0087-5</pub-id><?supplied-pmid 18379867?><pub-id pub-id-type="pmid">18379867</pub-id></mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Morse</surname><given-names>T.</given-names></name><name><surname>Migliore</surname><given-names>M.</given-names></name><name><surname>Carnevale</surname><given-names>N. T.</given-names></name><name><surname>Shepherd</surname><given-names>G. M.</given-names></name></person-group> (<year>2004</year>). <article-title>ModelDB: A database to support computational neuroscience</article-title>. <source>J. Comput. Neurosci</source>. <volume>17</volume>, <fpage>7</fpage>–<lpage>11</lpage>. <pub-id pub-id-type="doi">10.1023/B:JCNS.0000023869.22017.2e</pub-id><?supplied-pmid 15218350?><pub-id pub-id-type="pmid">15218350</pub-id></mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Holt</surname><given-names>G. R.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>1999</year>). <article-title>Electrical interactions via the extracellular potential near cell bodies</article-title>. <source>J. Comput. Neurosci</source>. <volume>6</volume>, <fpage>169</fpage>–<lpage>184</lpage>. <pub-id pub-id-type="doi">10.1023/A:1008832702585</pub-id><?supplied-pmid 10333161?><pub-id pub-id-type="pmid">10333161</pub-id></mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hunter</surname><given-names>J. D.</given-names></name></person-group> (<year>2007</year>). <article-title>Matplotlib: a 2d graphics environment</article-title>. <source>Comput. Sci. Eng</source>. <volume>9</volume>, <fpage>90</fpage>–<lpage>95</lpage>. <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id></mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Jones</surname><given-names>E.</given-names></name><name><surname>Oliphant</surname><given-names>T.</given-names></name><name><surname>Peterson</surname><given-names>P.</given-names></name><etal/></person-group> (<year>2001</year>). <source>SciPy: Open source scientific tools for Python</source>. Available online at: <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org/">http://www.scipy.org/</ext-link></mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Langtangen</surname><given-names>H.</given-names></name></person-group> (<year>2009</year>). <source>A Primer on Scientific Programming with Python</source>. <publisher-loc>Berlin; Heidelberg</publisher-loc>: <publisher-name>Springer-Verlag Mathematics and Statistics</publisher-name>
<pub-id pub-id-type="doi">10.1007/978-3-642-02475-7</pub-id></mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lempka</surname><given-names>S. F.</given-names></name><name><surname>McIntyre</surname><given-names>C. C.</given-names></name></person-group> (<year>2013</year>). <article-title>Theoretical analysis of the local field potential in deep brain stimulation applications</article-title>. <source>PLoS ONE</source>
<volume>8</volume>:<fpage>e59839</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pone.0059839</pub-id><?supplied-pmid 23555799?><pub-id pub-id-type="pmid">23555799</pub-id></mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Łęski</surname><given-names>S.</given-names></name><name><surname>Lindén</surname><given-names>H.</given-names></name><name><surname>Tetzlaff</surname><given-names>T.</given-names></name><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2013</year>). <article-title>Frequency dependence of signal power and spatial reach of the local field potential</article-title>. <source>PLoS Comput. Biol</source>. <volume>9</volume>:<fpage>e1003137</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003137</pub-id><?supplied-pmid 23874180?><pub-id pub-id-type="pmid">23874180</pub-id></mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lindén</surname><given-names>H.</given-names></name><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2010</year>). <article-title>Intrinsic dendritic filtering gives low-pass power spectra of local field potentials</article-title>. <source>J. Comput. Neurosci</source>. <volume>29</volume>, <fpage>423</fpage>–<lpage>444</lpage>. <pub-id pub-id-type="doi">10.1007/s10827-010-0245-4</pub-id><?supplied-pmid 20502952?><pub-id pub-id-type="pmid">20502952</pub-id></mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lindén</surname><given-names>H.</given-names></name><name><surname>Tetzlaff</surname><given-names>T.</given-names></name><name><surname>Potjans</surname><given-names>T. C.</given-names></name><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Grün</surname><given-names>S.</given-names></name><name><surname>Diesmann</surname><given-names>M.</given-names></name><etal/></person-group>. (<year>2011</year>). <article-title>Modeling the spatial reach of the LFP</article-title>. <source>Neuron</source><volume>72</volume>, <fpage>859</fpage>–<lpage>872</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2011.11.006</pub-id><?supplied-pmid 22153380?><pub-id pub-id-type="pmid">22153380</pub-id></mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Logg</surname><given-names>A.</given-names></name><name><surname>Mardal</surname><given-names>K.-A.</given-names></name><name><surname>Wells</surname><given-names>G. N.</given-names></name></person-group> (<year>2012</year>). <source>Automated Solution of Differential Equations by the Finite Element Method: The Fenics Book</source>. <publisher-loc>Berlin; Heidelberg</publisher-loc>: <publisher-name>Springer-Verlag</publisher-name>
<pub-id pub-id-type="doi">10.1007/978-3-642-23099-8</pub-id></mixed-citation>
    </ref>
    <ref id="B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Logothetis</surname><given-names>N. K.</given-names></name><name><surname>Kayser</surname><given-names>C.</given-names></name><name><surname>Oeltermann</surname><given-names>A.</given-names></name></person-group> (<year>2007</year>). <article-title><italic>In vivo</italic> measurement of cortical impedance spectrum in monkeys: implications for signal propagation</article-title>. <source>Neuron</source>
<volume>55</volume>, <fpage>809</fpage>–<lpage>823</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2007.07.027</pub-id><?supplied-pmid 17785187?><pub-id pub-id-type="pmid">17785187</pub-id></mixed-citation>
    </ref>
    <ref id="B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mainen</surname><given-names>Z. F.</given-names></name><name><surname>Sejnowski</surname><given-names>T. J.</given-names></name></person-group> (<year>1996</year>). <article-title>Influence of dendritic structure on firing pattern in model neocortical neurons</article-title>. <source>Nature</source>
<volume>382</volume>, <fpage>363</fpage>–<lpage>366</lpage>. <pub-id pub-id-type="doi">10.1038/382363a0</pub-id><?supplied-pmid 8684467?><pub-id pub-id-type="pmid">8684467</pub-id></mixed-citation>
    </ref>
    <ref id="B39">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McKinley</surname><given-names>R.</given-names></name><name><surname>Bridges</surname><given-names>N.</given-names></name><name><surname>Walters</surname><given-names>C. M</given-names></name><name><surname>Nelson</surname><given-names>J.</given-names></name></person-group> (<year>2012</year>). <article-title>Modulating the brain at work using noninvasive transcranial stimulation</article-title>. <source>Neuroimage</source>
<volume>59</volume>, <fpage>129</fpage>–<lpage>137</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuroimage.2011.07.075</pub-id><?supplied-pmid 21840408?><pub-id pub-id-type="pmid">21840408</pub-id></mixed-citation>
    </ref>
    <ref id="B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nelson</surname><given-names>M. J.</given-names></name><name><surname>Pouget</surname><given-names>P.</given-names></name></person-group> (<year>2010</year>). <article-title>Do electrode properties create a problem in interpreting local field potential recordings?</article-title>
<source>J. Neurophysiol</source>. <volume>103</volume>, <fpage>2315</fpage>–<lpage>2317</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00157.2010</pub-id><?supplied-pmid 20220081?><pub-id pub-id-type="pmid">20220081</pub-id></mixed-citation>
    </ref>
    <ref id="B41">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ness</surname><given-names>T. B.</given-names></name><name><surname>Hagen</surname><given-names>E.</given-names></name><name><surname>Negwer</surname><given-names>M.</given-names></name><name><surname>Bakker</surname><given-names>R.</given-names></name><name><surname>Schubert</surname><given-names>D.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2012</year>). <article-title>Modeling extracellular spikes and local field potentials recorded in MEAs</article-title>, in <source>Proceedings of the 8th international meeting on Multielectrode Arrays</source> (<publisher-loc>Reutlingen</publisher-loc>).</mixed-citation>
    </ref>
    <ref id="B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nicholson</surname><given-names>C.</given-names></name><name><surname>Freeman</surname><given-names>J. A.</given-names></name></person-group> (<year>1975</year>). <article-title>Theory of current source-density analysis and determination of conductivity tensor for anuran cerebellum</article-title>. <source>J. Neurophysiol</source>. <volume>38</volume>, <fpage>356</fpage>–<lpage>368</lpage>. <?supplied-pmid 805215?><pub-id pub-id-type="pmid">805215</pub-id></mixed-citation>
    </ref>
    <ref id="B43">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Nunez</surname><given-names>P. L.</given-names></name><name><surname>Srinivasan</surname><given-names>R.</given-names></name></person-group> (<year>2006</year>). <source>Electric Fields of the Brain</source>, <edition>2nd Edn</edition>
<publisher-loc>New York, NY</publisher-loc>: <publisher-name>Oxford University Press, Inc</publisher-name>
<pub-id pub-id-type="doi">10.1093/acprof:oso/9780195050387.001.0001</pub-id></mixed-citation>
    </ref>
    <ref id="B44">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Oluigbo</surname><given-names>C. O.</given-names></name><name><surname>Salma</surname><given-names>A.</given-names></name><name><surname>Rezai</surname><given-names>A. R.</given-names></name></person-group> (<year>2012</year>). <article-title>Deep brain stimulation for neurological disorders</article-title>. <source>IEEE Rev. Biomed. Eng</source>. <volume>5</volume>, <fpage>88</fpage>–<lpage>99</lpage>. <pub-id pub-id-type="doi">10.1109/RBME.2012.2197745</pub-id><?supplied-pmid 23231991?><pub-id pub-id-type="pmid">23231991</pub-id></mixed-citation>
    </ref>
    <ref id="B45">
      <mixed-citation publication-type="book"><person-group person-group-type="editor"><name><surname>Panzeri</surname><given-names>S.</given-names></name><name><surname>Quian Quiroga</surname><given-names>R.</given-names></name></person-group> (eds.). (<year>2013</year>). <source>Principles of Neural Coding</source>. <publisher-loc>Boca Raton, FL</publisher-loc>: <publisher-name>CRC Press</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pashut</surname><given-names>T.</given-names></name><name><surname>Wolfus</surname><given-names>S.</given-names></name><name><surname>Friedman</surname><given-names>A.</given-names></name><name><surname>Lavidor</surname><given-names>M.</given-names></name><name><surname>Bar-Gad</surname><given-names>I.</given-names></name><name><surname>Yeshurun</surname><given-names>Y.</given-names></name><etal/></person-group>. (<year>2011</year>). <article-title>Mechanisms of magnetic stimulation of central nervous system neurons</article-title>. <source>PLoS Comput. Biol</source>. <volume>7</volume>:<fpage>e1002022</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1002022</pub-id><?supplied-pmid 21455288?><pub-id pub-id-type="pmid">21455288</pub-id></mixed-citation>
    </ref>
    <ref id="B47">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pérez</surname><given-names>F.</given-names></name><name><surname>Granger</surname><given-names>B. E.</given-names></name></person-group> (<year>2007</year>). <article-title>IPython: a system for interactive scientific computing</article-title>. <source>Comput. Sci. Eng</source>. <volume>9</volume>, <fpage>21</fpage>–<lpage>29</lpage>. <pub-id pub-id-type="doi">10.1109/MCSE.2007.53</pub-id></mixed-citation>
    </ref>
    <ref id="B48">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Devor</surname><given-names>A.</given-names></name><name><surname>Ulbert</surname><given-names>I.</given-names></name><name><surname>Dale</surname><given-names>A. M.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2006</year>). <article-title>Current-source density estimation based on inversion of electrostatic forward solution: effects of finite extent of neuronal activity and conductivity discontinuities</article-title>. <source>J. Neurosci. Methods</source>
<volume>154</volume>, <fpage>116</fpage>–<lpage>133</lpage>. <pub-id pub-id-type="doi">10.1016/j.jneumeth.2005.12.005</pub-id><?supplied-pmid 16436298?><pub-id pub-id-type="pmid">16436298</pub-id></mixed-citation>
    </ref>
    <ref id="B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2008</year>). <article-title>Amplitude variability and extracellular low-pass filtering of neuronal spikes</article-title>. <source>Biophys. J</source>. <volume>94</volume>, <fpage>784</fpage>–<lpage>802</lpage>. <pub-id pub-id-type="doi">10.1529/biophysj.107.111179</pub-id><?supplied-pmid 17921225?><pub-id pub-id-type="pmid">17921225</pub-id></mixed-citation>
    </ref>
    <ref id="B50">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Hagen</surname><given-names>E.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2008</year>). <article-title>Estimation of population firing rates and current source densities from laminar electrode recordings</article-title>. <source>J. Comput. Neurosci</source>. <volume>24</volume>, <fpage>291</fpage>–<lpage>313</lpage>. <pub-id pub-id-type="doi">10.1007/s10827-007-0056-4</pub-id><?supplied-pmid 17926125?><pub-id pub-id-type="pmid">17926125</pub-id></mixed-citation>
    </ref>
    <ref id="B51">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Pettersen</surname><given-names>K. H.</given-names></name><name><surname>Lindén</surname><given-names>H.</given-names></name><name><surname>Dale</surname><given-names>A. M.</given-names></name><name><surname>Einevoll</surname><given-names>G. T.</given-names></name></person-group> (<year>2012</year>). <article-title>Extracellular spikes and CSD</article-title>, in <source>Handbook of Neural Activity Measurement</source>, eds <person-group person-group-type="editor"><name><surname>Brette</surname><given-names>R.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name></person-group> (<publisher-loc>Cambridge, UK</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>), <fpage>92</fpage>–<lpage>135</lpage>. <pub-id pub-id-type="doi">10.1017/CBO9780511979958.004</pub-id></mixed-citation>
    </ref>
    <ref id="B52">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rall</surname><given-names>W.</given-names></name><name><surname>Shepherd</surname><given-names>G. M.</given-names></name></person-group> (<year>1968</year>). <article-title>Theoretical reconstruction of field potentials and dendrodendritic synaptic interactions in olfactory bulb</article-title>. <source>J. Neurophysiol</source>. <volume>31</volume>, <fpage>884</fpage>–<lpage>915</lpage>. <?supplied-pmid 5710539?><pub-id pub-id-type="pmid">5710539</pub-id></mixed-citation>
    </ref>
    <ref id="B53">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Reimann</surname><given-names>M. W.</given-names></name><name><surname>Anastassiou</surname><given-names>C. A.</given-names></name><name><surname>Perin</surname><given-names>R.</given-names></name><name><surname>Hill</surname><given-names>S. L.</given-names></name><name><surname>Markram</surname><given-names>H.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2013</year>). <article-title>A biophysically detailed model of neocortical local field potentials predicts the critical role of active membrane currents</article-title>. <source>Neuron</source>
<volume>79</volume>, <fpage>375</fpage>–<lpage>390</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2013.05.023</pub-id><?supplied-pmid 23889937?><pub-id pub-id-type="pmid">23889937</pub-id></mixed-citation>
    </ref>
    <ref id="B54">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schomburg</surname><given-names>E. W.</given-names></name><name><surname>Anastassiou</surname><given-names>C. A.</given-names></name><name><surname>Buzsáki</surname><given-names>G.</given-names></name><name><surname>Koch</surname><given-names>C.</given-names></name></person-group> (<year>2012</year>). <article-title>The spiking component of oscillatory extracellular potentials in the rat hippocampus</article-title>. <source>J. Neurosci</source>. <volume>32</volume>, <fpage>11798</fpage>–<lpage>11811</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.0656-12.2012</pub-id><?supplied-pmid 22915121?><pub-id pub-id-type="pmid">22915121</pub-id></mixed-citation>
    </ref>
    <ref id="B55">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Segev</surname><given-names>I.</given-names></name><name><surname>Fleshman</surname><given-names>J. W.</given-names></name><name><surname>Burke</surname><given-names>R. E.</given-names></name></person-group> (<year>1989</year>). <article-title>Compartmental models of complex neurons</article-title>, in <source>Methods in Neuronal Modeling: From Synapses to Networks</source>, eds <person-group person-group-type="editor"><name><surname>Koch</surname><given-names>C.</given-names></name><name><surname>Segev</surname><given-names>I.</given-names></name></person-group> (<publisher-loc>Cambrigde, MA</publisher-loc>: <publisher-name>MIT Press</publisher-name>), <fpage>63</fpage>–<lpage>96</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
