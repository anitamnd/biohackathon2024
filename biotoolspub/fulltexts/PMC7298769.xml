<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Gigascience</journal-id>
    <journal-id journal-id-type="iso-abbrev">Gigascience</journal-id>
    <journal-id journal-id-type="publisher-id">gigascience</journal-id>
    <journal-title-group>
      <journal-title>GigaScience</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2047-217X</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7298769</article-id>
    <article-id pub-id-type="doi">10.1093/gigascience/giaa068</article-id>
    <article-id pub-id-type="publisher-id">giaa068</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technical Note</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00960</subject>
        <subject>AcademicSubjects/SCI02254</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Watchdog 2.0: New developments for reusability, reproducibility, and workflow execution</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Kluge</surname>
          <given-names>Michael</given-names>
        </name>
        <xref ref-type="aff" rid="aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Friedl</surname>
          <given-names>Marie-Sophie</given-names>
        </name>
        <xref ref-type="aff" rid="aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Menzel</surname>
          <given-names>Amrei L</given-names>
        </name>
        <xref ref-type="aff" rid="aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-3569-4877</contrib-id>
        <name>
          <surname>Friedel</surname>
          <given-names>Caroline C</given-names>
        </name>
        <!--<email>caroline.friedel@bio.ifi.lmu.de</email>-->
        <xref ref-type="aff" rid="aff1"/>
        <xref ref-type="corresp" rid="cor1"/>
      </contrib>
    </contrib-group>
    <aff id="aff1"><institution>Institut für Informatik, Ludwig-Maximilians-Universität München</institution>, Amalienstr. 17, Munich 80333, <country country="DE">Germany</country></aff>
    <author-notes>
      <corresp id="cor1">Correspondence address: Caroline C. Friedel, LFE Bioinformatik, Institut für Informatik, Ludwig-Maximilians-Universität München, Amalienstr. 17, Munich 80333, Germany. E-mail: <email>caroline.friedel@bio.ifi.lmu.de</email></corresp>
    </author-notes>
    <pub-date pub-type="epub" iso-8601-date="2020-06-17">
      <day>17</day>
      <month>6</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>6</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>17</day>
      <month>6</month>
      <year>2020</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>9</volume>
    <issue>6</issue>
    <elocation-id>giaa068</elocation-id>
    <history>
      <date date-type="received">
        <day>27</day>
        <month>11</month>
        <year>2019</year>
      </date>
      <date date-type="rev-recd">
        <day>26</day>
        <month>4</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>15</day>
        <month>5</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="giaa068.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="abs1">
        <title>Background</title>
        <p>Advances in high-throughput methods have brought new challenges for biological data analysis, often requiring many interdependent steps applied to a large number of samples. To address this challenge, workflow management systems, such as Watchdog, have been developed to support scientists in the (semi-)automated execution of large analysis workflows.</p>
      </sec>
      <sec id="abs2">
        <title>Implementation</title>
        <p>Here, we present Watchdog 2.0, which implements new developments for module creation, reusability, and documentation and for reproducibility of analyses and workflow execution. Developments include a graphical user interface for semi-automatic module creation from software help pages, sharing repositories for modules and workflows, and a standardized module documentation format. The latter allows generation of a customized reference book of public and user-specific modules. Furthermore, extensive logging of workflow execution, module and software versions, and explicit support for package managers and container virtualization now ensures reproducibility of results. A step-by-step analysis protocol generated from the log file may, e.g., serve as a draft of a manuscript methods section. Finally, 2 new execution modes were implemented. One allows resuming workflow execution after interruption or modification without rerunning successfully executed tasks not affected by changes. The second one allows detaching and reattaching to workflow execution on a local computer while tasks continue running on computer clusters.</p>
      </sec>
      <sec id="abs3">
        <title>Conclusions</title>
        <p>Watchdog 2.0 provides several new developments that we believe to be of benefit for large-scale bioinformatics analysis and that are not completely covered by other competing workflow management systems. The software itself, module and workflow repositories, and comprehensive documentation are freely available at <ext-link ext-link-type="uri" xlink:href="https://www.bio.ifi.lmu.de/watchdog">https://www.bio.ifi.lmu.de/watchdog</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group kwd-group-type="keywords">
      <kwd>workflow management system</kwd>
      <kwd>bioinformatics</kwd>
      <kwd>automated biological data analysis</kwd>
      <kwd>next-generation sequencing</kwd>
      <kwd>reusability</kwd>
      <kwd>reproducibility</kwd>
      <kwd>open science tools</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Deutsche Forschungsgemeinschaft</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001659</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="12"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <title>Background</title>
    <p>As a result of improvements in sequencing technologies, sequencing costs have decreased massively in recent years [<xref rid="bib1" ref-type="bibr">1</xref>]. While the first human genome sequence cost ∼$2.7 billion and took 13 years to complete [<xref rid="bib2" ref-type="bibr">2</xref>], companies now offer genome sequencing to private customers using state-of-the-art next-generation sequencing (NGS) technologies for &lt;$1,000. In addition, other cellular properties can now be measured at large scale using NGS. This includes, e.g., the expression of genes (RNA sequencing [RNA-seq]) [<xref rid="bib3" ref-type="bibr">3</xref>], protein binding to DNA (chromatin immunoprecipitation sequencing [ChIP-seq]) [<xref rid="bib4" ref-type="bibr">4</xref>], open chromatin regions (assay for transposase-accessible chromatin using sequencing [ATAC-seq]) [<xref rid="bib5" ref-type="bibr">5</xref>], and many more.</p>
    <p>As a consequence, data analysis has become more complex with new challenges for bioinformatics, often requiring multiple interdependent steps and integration of numerous replicates and several types of high-throughput data. Because manual execution of all required analysis steps is cumbersome, time-consuming, and laborious to repeat, several tools have been developed for performing large-scale bioinformatics analyses. One group of tools consists of static analysis pipelines specifically designed for 1 application, e.g., transcriptome analysis [<xref rid="bib6" ref-type="bibr">6</xref>,<xref rid="bib7" ref-type="bibr">7</xref>]. While these pipelines have the advantage that a particular analysis can be repeated without great effort, components of these analysis pipelines are often not easily reusable for other related applications. As an alternative, workflow management systems (WMSs) have been developed that support creation of such analysis pipelines (denoted as workflows in this context) from reusable components and allow (semi-)automated execution of these workflows. Popular WMSs are Galaxy [<xref rid="bib8" ref-type="bibr">8</xref>], KNIME [<xref rid="bib9" ref-type="bibr">9</xref>], Snakemake [<xref rid="bib10" ref-type="bibr">10</xref>], and Nextflow [<xref rid="bib11" ref-type="bibr">11</xref>] and differ in the implemented set of features, target audience, the required training period, usage fees, and more (for more details see the comparison in the first article on Watchdog [<xref rid="bib12" ref-type="bibr">12</xref>] and at the end of this article).</p>
    <p>Previously, we presented the WMS Watchdog for the distributed analysis of large-scale experimental data originating, e.g., from NGS experiments [<xref rid="bib12" ref-type="bibr">12</xref>]. The core features of Watchdog include straightforward processing of replicate data, support for and flexible combination of distributed computing or remote executors, customizable error detection, user notification on execution errors, and manual user intervention. In Watchdog, reusable components are encapsulated within so-called modules, which are defined by an XSD file specifying the program to execute, input parameters, and return values of the module. In addition, modules can contain scripts or compiled binaries that are invoked in the module. There are no restrictions on included software or on the programming language used in additional scripts. Modules may also deploy required software internally using Conda [<xref rid="bib13" ref-type="bibr">13</xref>], Docker [<xref rid="bib14" ref-type="bibr">14</xref>], or similar tools.</p>
    <p>A Watchdog workflow is defined in an XML format and consists of a sequence of tasks and dependencies between tasks. Each task uses 1 module and the same task can be automatically run on multiple samples or with multiple parameter combinations using so-called process blocks. This creates several subtasks, 1 for each sample or parameter combination. A workflow can either be created manually using any XML editor or the Watchdog graphical user interface (GUI) for workflow construction. While XML may be more complex than, e.g., YAML or JSON, it is widely used and numerous XML editors are available, e.g., plugins for Eclipse [<xref rid="bib15" ref-type="bibr">15</xref>]. Furthermore, using the GUI requires neither understanding of XML nor programming skills and thus allows easy construction of workflows from a pre-defined set of modules. In this case, the only Watchdog syntax that has to be learned is how to reference variables.</p>
    <p>Workflows can be executed using the Watchdog scheduler via a command-line interface or the GUI, which are both implemented in Java and thus platform-independent. The Watchdog scheduler continuously monitors the execution status of tasks and schedules new tasks or subtasks for execution if all tasks that they depend on finished successfully. The execution status of tasks is reported to the user via standard output, a web interface that allows manual intervention and (optionally) email.</p>
    <p>In the workflow, different executors can be specified for different tasks. Currently, 3 types of executors are supported (local host, remote host via SSH, or computer clusters using SGE or SLURM). Thus, resource-intensive or long-running tasks can, e.g., be submitted to a computer cluster while less demanding tasks may be executed on the local host. Furthermore, Watchdog provides a plugin system that allows users with programming skills to add new executor types, e.g., for cloud computing, without having to change the original Watchdog code (for details see [<xref rid="bib12" ref-type="bibr">12</xref>]).</p>
    <p>In this article, we present Watchdog 2.0, a new and improved version of Watchdog with several new developments for module creation and documentation, reusability of modules and workflows, and reproducibility of analysis results, as well as workflow execution.</p>
  </sec>
  <sec id="sec2">
    <title>Implementation</title>
    <sec id="sec2-1">
      <title>Overview</title>
      <p>In the following, we describe only new developments that were added in Watchdog 2.0. The general principle of Watchdog and features already present in the previously published version remain unchanged; thus, we refer the reader to our previous publication for a detailed introduction to Watchdog [<xref rid="bib12" ref-type="bibr">12</xref>]. The central improvements provided by Watchdog  2.0 are the following and are described in more detail in subsequent sections (see Fig. <xref ref-type="fig" rid="fig1">1</xref> for an overview). First, Watchdog 2.0 now provides a GUI for semi-automatically creating a new module from a software’s help page. Second, a standardized documentation format for modules was introduced in Watchdog 2.0. From module documentation files, a searchable module reference book can then be generated providing an overview and details on existing modules. Third, a community platform was created for sharing Watchdog modules and workflows with other scientists.</p>
      <fig id="fig1" orientation="portrait" position="float">
        <label>Figure 1:</label>
        <caption>
          <p>Overview on new developments in Watchdog 2.0. New features are broadly grouped into the categories reusability, reproducibility, and workflow execution. <italic>Left:</italic>New modules can now be developed in a semi-automated manner from software help pages using a GUI. A standardized documentation format was developed, allowing the automatic compilation of a reference book of available modules. Public repositories for sharing modules and workflows are now available. <italic>Center:</italic> Extensive logging of workflow execution ensures reproducibility of results and allows automated creation of a step-by-step report on analysis methods. Versioning of modules allows adaption to new requirements with backward compatibility without unnecessary module duplication. Software and module versions are now automatically reported in the log files. Execution wrappers now allow automatic deployment of software using container virtualization or package managers. <italic>Right:</italic> Workflow execution becomes more flexible with the resume and detach/reattach modes. The resume mode allows the resumption of interrupted or modified workflow execution without unnecessarily rerunning tasks. Detach/reattach allows the scheduler to be shut down on the local host while tasks on a computer cluster continue running and reattaching to workflow execution on the same or a different computer at a later time.</p>
        </caption>
        <graphic xlink:href="giaa068fig1"/>
      </fig>
      <p>Improvements for reproducibility of analysis results comprise extensive logging of executed steps, including module and software versions, and the possibility to automatically generate a summary of the executed workflow steps, e.g., as a draft for an article methods section. In addition, we added fully integrated support for container virtualization or package managers in the form of so-called execution wrappers, in particular for Docker containers and the Conda package management system.</p>
      <p>Finally, 2 additional execution modes were implemented to provide more comfort and flexibility in workflow execution. The resume mode allows execution of a workflow to be restarted by (re-)running only tasks that previously did not run (successfully) or were added or modified compared to the original execution. The second mode allows the scheduler to be detached from workflow execution without aborting tasks running on a computer cluster and reattaching to execution at a later time on the same or a different computer.</p>
      <p>The GUI for module creation and all new command-line tools described in the following are implemented in Java and thus platform-independent.</p>
    </sec>
    <sec id="sec2-2">
      <title>Semi-automated module generation</title>
      <p>To make a software package available for use in Watchdog workflows, a new module has to be created. Watchdog already provides a helper script for creating the module XSD file and (optionally) a skeleton Bash script that only has to be extended by the program call. Nevertheless, this requires manually listing all parameters for the module. The newly developed GUI moduleMaker [<xref rid="bib31_224_1591720872889" ref-type="bibr">16</xref>] now automatically extracts parameters and flags from a software help page to more conveniently create the corresponding module.</p>
      <p>The moduleMaker GUI uses sets of regular expressions matching common help page formats to parse the help page of a software. Currently, 8 pre-defined regular expression sets are provided, but users can also define new sets using the GUI and add them to the pre-defined list. When creating a module with the GUI, users may either choose 1 particular regular expression set explicitly or let moduleMaker rank the regular expression sets based on how well they match the help page. In the latter case, the user can then examine the results of the <italic>n</italic> best-matching regular expression sets (with <italic>n</italic> user-defined) and choose the result they consider best. Subsequently, the user can correct errors in the automatic detection, add additional flags or parameters, and modify or delete detected parameters. In a next step, existence checks for input files or directories can be added and return values for the module can be defined.</p>
      <p>Once the user is finished, moduleMaker creates the module XSD file and a wrapper Bash script for the software that—in contrast to the skeleton Bash script created by the helper script—is almost complete. The only manual changes required by the developer involve assigning values to return values. This wrapper script checks that required software is installed, parses parameters, verifies that mandatory parameters are set, performs existence checks on required input files and directories, executes the program, performs default error checks after execution, and writes return values to a corresponding file read by the scheduler. Optionally, a project file can be saved that allows modules created with the moduleMaker to be reloaded and modified at a later time.</p>
      <p>Thus, developing a module does not require understanding XML or the module XSD schema. Furthermore, little or no Bash scripting experience is required if the GUI or helper script is used, respectively. The GUI creates a Bash script that is finished apart from the return value assignment. If the helper script is used, there is no requirement to use a Bash script to execute the commands. Any type of executable can be called in the module, e.g., a Python script. Examples for modules using Python scripts are included in the new module repository (see below).</p>
    </sec>
    <sec id="sec2-3">
      <title>Module documentation</title>
      <p>While the Watchdog scheduler, features of Watchdog workflows, and workflow creation are already comprehensively documented [<xref rid="bib12" ref-type="bibr">12</xref>], no convenient way was so far available for documenting both individual Watchdog modules and the set of available modules. To address this problem, we developed (i) a standardized documentation format for modules and (ii) a program for creating a nicely formatted, searchable, and updatable catalog of modules, the so-called reference book (see Fig. <xref ref-type="fig" rid="fig2">2</xref> for an example), from the documentation files of individual modules. The module entry in the reference book describes software dependencies, parameters (i.e., input files and values) and their default values, return values (i.e., output files and values), and more. Thus, instead of inspecting the module XSD or input mask in the GUI to obtain this information, users can now simply browse the reference book.</p>
      <fig id="fig2" orientation="portrait" position="float">
        <label>Figure 2:</label>
        <caption>
          <p>Overview page of the module reference book. The main section displays available modules as boxes, showing the module name, date of last change, a short description, links, and the author of the module. A search bar and category bar can be used to filter the displayed modules using text search or multi-category filters. In this example, all modules containing the term “bam file” in the description are shown.</p>
        </caption>
        <graphic xlink:href="giaa068fig2"/>
      </fig>
      <sec id="sec2-3-1">
        <title>Documentation format</title>
        <p>Individual Watchdog modules are now documented using a standardized XML format. This contains general module information (e.g., author, description, dependencies) and properties of module parameters and return values (e.g., name, type, description). The allowed semantic is described by an XSD schema file, allowing the XML documentation files to be read and further processed by XML parsing software.</p>
        <p>To limit the overhead for creating the module documentation, a command-line tool (docuTemplateExtractor) is provided by Watchdog 2.0. The docuTemplateExtractor extracts parameter and return value information from the module XSD file and generates a template documentation file. Module developers then only have to fill in parts of the XML documentation not contained in the module XSD file.</p>
        <p>As noted above, modules may also contain additional scripts, which can contain further information useful for documentation. For example, many scripts utilize an argument parser that requires a description or default values for each parameter. To exploit this and guarantee consistency between documentation and scripts, the docuTemplateExtractor also aims to extract this information. Because the syntax used by the argument parser strongly depends on both the scripting language used and the argument parser, this information cannot be obtained with a generalized approach. Instead, we developed a plugin system that allows developers to load custom parameter and return value extractors by implementing a simple Java interface. Currently, 2 parameter extractors for Bash- and Python-based modules are available, which obtain description and default value of parameters from argument parser definitions. For Bash scripts, the shFlags library is supported, and for Python, the argparse library.</p>
      </sec>
      <sec id="sec2-3-2">
        <title>Reference book</title>
        <p>The reference book is implemented as an HTML web page based on the UIkit framework [<xref rid="bib16" ref-type="bibr">17</xref>]. It can be opened with any browser supporting JavaScript and does not require a dedicated web server. The reference book can be created from the XML documentation files using the refBookGenerator command-line tool. The reference book can be created either for publicly available modules, personal modules of the user, or a combination of both. When new modules are added or existing modules are removed, the reference book can simply be regenerated using the refBookGenerator. Thus, every user can generate their personalized reference book containing the modules they work with or consider relevant to their work.</p>
        <p>Fig. <xref ref-type="fig" rid="fig2">2</xref> shows the front page of the module reference book (generated for all publicly available modules) after searching for modules containing the term “bam file” in the description. The main section of the front page provides an overview on all available modules. Every module is visualized as a box that contains its name, author, assigned category, and a short description. The search bar at the top can be used to filter modules using a keyword search, which can be applied to title, author, category, and/or description. Alternatively, the modules displayed in the overview section can be filtered on the basis of authorship, category, and update date. Clicking on a module box opens a detailed view, showing module dependencies, parameters and valid input values, return values, and if applicable citation information and web links (see Fig. <xref ref-type="fig" rid="fig3">3</xref> for an example).</p>
        <fig id="fig3" orientation="portrait" position="float">
          <label>Figure 3:</label>
          <caption>
            <p>Detailed view of a module in the reference book. As an example, the detailed view on the indexBam module is shown, containing a short description, dependencies on third-party software, parameters with valid ranges and descriptions, return values, citation information, and web links. The citation information will also be included into the step-by-step report automatically created from the workflow execution log file.</p>
          </caption>
          <graphic xlink:href="giaa068fig3"/>
        </fig>
      </sec>
    </sec>
    <sec id="sec2-4">
      <title>Public repositories for module and workflow sharing</title>
      <p>Watchdog 2.0 now provides 2 repositories on Github under the watchdog-wms organization [<xref rid="bib32_876_1591720947134" ref-type="bibr">18</xref>] that are dedicated for sharing modules [<xref rid="bib33_397_1591721003712" ref-type="bibr">19</xref>] and workflows [<xref rid="bib34_844_1591721087975" ref-type="bibr">20</xref>], respectively, by other users. To contribute either a module or workflow to one of the repositories, users have to first create a copy (fork) of the repository, change or add modules/workflows, commit the proposed changes to the repository copy, and submit these changes for review to the original repository via a pull request. An integration pipeline then checks whether the proposed changes adhere to essential requirements. If all automatic tests were successful, the proposed changes can be accepted by Watchdog team members.</p>
      <p>Currently, the module repository contains 60 modules. Each module is located in a separate directory and must contain at least the XSD module file and an XML documentation file. Currently, most available modules focus on sequencing data analysis, in particular RNA-seq and ChIP-seq analysis. Some modules provide basic functionalities like file compression or text search while others fulfill more specific tasks, e.g., differential gene expression analysis (module DETest), peak detection in ChIP-seq data (module GEM), or identification of circular RNAs (modules circRNAfinder and ciri2). By default, modules are licensed under Apache License 2.0, but a different license can be assigned to a module by including it in the module folder. A reference book for all modules in the repository is available [<xref rid="bib35_345_1591721180591" ref-type="bibr">21</xref>]. It is automatically updated with every commit to the master branch of the module repository.</p>
      <p>Workflows shared in the watchdog-wms-workflows repository also have to be located in separate directories. Each workflow directory has to contain the XML workflow file, a readme file, and optionally example data. Workflows should be documented with inline comments. Furthermore, lines that require modifications to adapt, e.g., to different computing environments or input data should be highlighted to allow everyone to quickly adapt the workflow. We recommend, but do not enforce, that paths or constant parameter values are not hard-coded in the task section of the workflow, but rather that global constants are defined in the settings section. A constant "CONSTANT" can then be referenced as "${CONSTANT}" within process block or task definitions. If this recommendation is followed, the workflow can be quickly adapted to a new environment or data by modifying only constants and executors.</p>
      <p>Currently, the workflow repository contains, e.g., the workflow for RNA-seq mapping and differential gene expression analysis from the original Watchdog release. Additionally, new workflows are available, e.g., for circular RNA detection with CIRI2 [<xref rid="bib17" ref-type="bibr">22</xref>] and circRNA_finder [<xref rid="bib18" ref-type="bibr">23</xref>], ChIP-seq analysis using GEM (GEM, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_005339">RRID:SCR_005339</ext-link>) followed by ChIPseeker [<xref rid="bib19" ref-type="bibr">24</xref>,<xref rid="bib20" ref-type="bibr">25</xref>], and download of public NGS data from the NCBI SRA (SRA, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_004891">RRID:SCR_004891</ext-link>) [<xref rid="bib21" ref-type="bibr">26</xref>] followed by alignment with HISAT2 (HISAT2, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_015530">RRID:SCR_015530</ext-link>) [<xref rid="bib22" ref-type="bibr">27</xref>].</p>
    </sec>
    <sec id="sec2-5">
      <title>Methods for ensuring reproducibility</title>
      <p>A critical aspect of any analysis of biological data is the reproducibility of the results. While the use of a WMS already contributes to reproducibility, workflows may be modified between different runs of the workflow, e.g., by changing parameter values or including or excluding some steps, or the underlying software may be changed, e.g., by updates to a new version. This may lead to uncertainty regarding the steps, parameters, and software environment of the analysis that produced specific results. Furthermore, when reporting the individual steps of an analysis, for instance in a publication, some steps may be unintentionally omitted, making it difficult for others to reproduce the results. To address these problems, Watchdog 2.0 includes a number of new developments to ensure reproducibility of analyses.</p>
      <sec id="sec2-5-1">
        <title>Logging and automated reporting</title>
        <p>When executing a workflow, Watchdog 2.0 now produces a time-stamped log file (filename extension .resume) reporting on the successful execution of each individual task. This log file is also used for the resume mode (see below). If a task creates multiple subtasks, e.g., for multiple input samples, successful execution of each subtask is recorded. For each task/subtask the log file records the value of each input parameter, as well as return values.</p>
        <p>Moreover, a report of the executed steps can be automatically created from the log file using the new command-line tool reportGenerator provided with Watchdog 2.0 (see Fig. <xref ref-type="fig" rid="fig4">4</xref> for an example of the report). For this purpose, the XML documentation file of each module contains the element paperDescription, which can be filled with a short description of the module and citation information. It can also contain references to parameters of the task or the software version (see below for software version logging). The reportGenerator concatenates these descriptions in the order the corresponding tasks were executed and replaces references by the values reported in the log file. There is also an option to include PubMed IDs from the module documentation. The resulting report can then be used as a step-by-step protocol of the analysis or be further revised for the methods section of an article.</p>
        <fig id="fig4" orientation="portrait" position="float">
          <label>Figure 4:</label>
          <caption>
            <p>Result of automated report generation for example workflow. This example shows the step-by-step analysis report generated with the reportGenerator from the execution log file for the RNA-seq example workflow provided with Watchdog. The workflow was described in detail in our original Watchdog publication [<xref rid="bib12" ref-type="bibr">12</xref>]. The annotation file name (a parameter to featureCounts) and software version numbers in parentheses are automatically obtained from the log file (see software version logging). For this example, the workflow was simplified to perform differential gene expression analysis only with DESeq2, instead of 4 different gene expression analysis methods as previously described. For modules without paper description (e.g., unzipping or replicate merging), the report would contain the text “No short description given in documentation of module <italic>module name</italic>”. To shorten this example, these sentences were manually removed, as well as the citation information commonly included in the module descriptions.</p>
          </caption>
          <graphic xlink:href="giaa068fig4"/>
        </fig>
      </sec>
      <sec id="sec2-5-2">
        <title>Module versioning</title>
        <p>Modules generally rely on third-party software that can be modified repeatedly to improve performance, fix bugs, or be adapted to changing requirements, for instance by adding support for new types of experimental data. As a consequence, a module will need to be adapted over time, e.g., by changing the parameters of the module to support new parameters or drop obsolete ones. At the same time, backward compatibility needs to be ensured such that previously defined workflows relying on the old module version can still be executed. One solution to this problem would be to duplicate the module and adapt the copy. However, this leads to unnecessary code duplication because most of the module XSD file will remain unchanged, and results in code that is difficult to maintain.</p>
        <p>To avoid this problem, Watchdog 2.0 now allows different versions of a module within 1 module XSD file to be defined by specifying the minimum and maximum supported module version for each element in the XSD file. If neither minimum nor maximum supported version is indicated, the element is valid for all module versions. This allows input parameters, return values, or even the executed program call to be changed between different module versions. When executing a workflow, the module version for each task will also be recorded in the log file. By default, the first version of a module is used unless otherwise specified in the workflow XML file. This guarantees that workflows defined before a new module version was introduced do not have to be adapted.</p>
      </sec>
      <sec id="sec2-5-3">
        <title>Software version logging</title>
        <p>Watchdog is very flexible with regard to how dependencies to third-party software in a module can be handled by module developers. Software can be shipped with the module, loaded via package and environment management systems like Conda [<xref rid="bib13" ref-type="bibr">13</xref>], or be required to be installed on the system that will execute the corresponding task (e.g., the local host or a computer cluster). In any case, it is crucial to know which software versions were run for a particular analysis in order to reproduce the analysis results or understand differences in outputs between repeated runs because new software releases often correct errors or may change the behavior of the software.</p>
        <p>Thus, Watchdog 2.0 now implements a general approach for reporting versions of third-party software used in a module in the log file. For this purpose, a new attribute in the module XSD file can be used to define the flag for version printing of third-party software. During workflow execution, after a task or subtask has been completed successfully on a particular computer, the program call defined in the corresponding module is invoked with the version flag on the same computer to retrieve the installed third-party software version. This software version is then reported for the task/subtask in the log file. If the version flag has not been defined in the module, this step is omitted for the corresponding tasks. This option is also useful for identifying differences in installed third-party software between different executors used for workflow execution, such as the local host, a computer cluster, or remote executors accessed by SSH.</p>
      </sec>
      <sec id="sec2-5-4">
        <title>Execution wrappers</title>
        <p>A disadvantage of Watchdog’s flexibility on how installation of third-party software is handled is that it complicates both reusability and reproducibility of workflows. Having to install all required software before modules or workflows can be used can be cumbersome. Furthermore, to fully reproduce results from a workflow, users would have to make sure that they (still) have the same software versions installed as in the original run of a workflow. Thus, we now implemented execution wrappers to explicitly support automatic deployment of software via package managers or container virtualization in Watchdog 2.0. Execution wrappers are initialized in the settings section of a Watchdog workflow and are then assigned to individual executors, which in turn use the wrapper to deploy the software for all tasks they run. Each executor can be assigned both a package manager and a container; thus, package managers can also be used within containers. Furthermore, different packager managers or containers can be assigned to different tasks by using different executors and corresponding execution wrappers for these tasks. Execution wrappers are implemented using Watchdog’s plugin system; thus, the set of available execution wrappers can be extended by users without having to modify the Watchdog code.</p>
        <p>Currently, Watchdog  2.0 provides execution wrappers for the Conda package manager (Conda, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_018317">RRID:SCR_018317</ext-link>) [<xref rid="bib13" ref-type="bibr">13</xref>] and for Docker container virtualization [<xref rid="bib14" ref-type="bibr">14</xref>]. To enable use of Conda for a module, the module directory only has to contain a YAML file defining the default Conda environment (modulename.conda.yml). For different versions of a module, different Conda environments can be defined (ending in .v[0-9]+.conda.yml). If no version-specific Conda definition file is found, the default Conda environment for the module is used. If Conda execution wrappers are not used in a workflow or for a particular executor, the Conda environment definition will simply be ignored for the whole workflow or the tasks run by the executor, respectively. Thus, previously developed workflows will not be affected by these changes.</p>
        <p>The Docker execution wrapper allows tasks to be run within containers built from Docker images using Docker, Podman, or Singularity. Furthermore, it provides an option for automatically mounting files and directories on the host machine that are used in parameters of tasks. This option is enabled by default but can be disabled. Thus, adding container virtualization to an executor does not require changes to corresponding tasks. Similar to the Conda execution manager, module- and module-version-specific Docker images can be enabled by adding 1 or more files to the module folder specifying the image name to be used for the corresponding tasks. An example for using Docker and Conda in combination is provided in the workflow for RNA-seq mapping and differential gene expression analysis available from the workflow repository and with the Watchdog distribution.</p>
      </sec>
    </sec>
    <sec id="sec2-6">
      <title>New execution modes</title>
      <p>In the original Watchdog version, the Watchdog scheduler had to run continuously on the computer on which workflow execution is started. If workflow execution was interrupted, e.g., by a computer crash or reboot, only a manual restart option was available. This required the last task finished successfully to be identified or some analyses to be rerun in case only some subtasks of a task finished successfully. To avoid this problem, Watchdog 2.0 now supports 2 additional execution modes (see Fig. <xref ref-type="fig" rid="fig5">5</xref>). The first one allows workflow execution to be resumed at any point and rerunning only the tasks or subtasks in a workflow that did not finish successfully, were modified, or depended on modified tasks. The second execution mode allows detachment from workflow execution by shutting down the Watchdog scheduler on the current computer while tasks distributed to a computer cluster continue running. The scheduler can then reattach to the workflow execution at a later time either from the same or a different computer. This can be used for instance to reboot the machine running the scheduler or to switch from a desktop computer to a laptop without interrupting execution of tasks running on a computer cluster.</p>
      <fig id="fig5" orientation="portrait" position="float">
        <label>Figure 5:</label>
        <caption>
          <p>New execution modes in Watchdog 2.0. <bold>(a)</bold> Resume mode: From the log file of a previous workflow execution and the workflow XML file, the Watchdog scheduler automatically detects (sub)tasks that either have not yet run successfully, are new or modified, or require processing of additional samples. Consequently, only these (sub)tasks are executed, as well as all (sub)tasks depending on them (dependencies indicated as dashed lines). Light red indicates (sub)tasks that were previously executed successfully; light blue, tasks that were since modified; dark blue, new tasks that were added; and dark red, additional subtasks that have to be executed because additional samples were added. Double lines around tasks indicate which (sub)tasks have to be (re-)executed after resuming this workflow. <bold>(b)</bold> Visualization of the detach/reattach mode after resuming the workflow shown in (a). In this case, subtasks of D and task E are executed on a computer cluster, while a local executor is used for all other tasks. In this example, the Watchdog scheduler is originally started on a laptop and some tasks are scheduled and executed. After a while, a detach request is sent and no more new tasks are scheduled on the local host. Once the tasks on the local computer (blue) have finished, the detach file is written and the scheduler terminates. Subtasks D<sub>3</sub> and D<sub>4</sub> submitted to the computer cluster (yellow) continue to be executed. When the user reattaches to workflow execution, this time on a desktop computer (orange), new tasks are again scheduled.</p>
        </caption>
        <graphic xlink:href="giaa068fig5"/>
      </fig>
      <sec id="sec2-6-1">
        <title>Resume mode</title>
        <p>As described above, Watchdog 2.0 creates a detailed log file during execution of a workflow containing successfully finished (sub)tasks, as well as their input parameters and return values. In resume mode, Watchdog 2.0 uses the log file of a previous workflow run to determine which (sub)tasks have to be (re-)executed. Individual (sub)tasks are identified by their input parameter combinations. (Sub)tasks not listed in the log file with exactly the same input parameter values will be scheduled to be executed. Furthermore, (sub)tasks that previously finished successfully with the same parameters are re-executed if they depend on other (sub)tasks that are (re-)run.</p>
        <p>This allows the resumption of not only workflows that were interrupted unexpectedly (e.g., by hardware failure or power outage) but also workflows that were modified, i.e., by changing parameters for some tasks, without unnecessarily rerunning tasks. Here, Watchdog 2.0 guarantees that all results are updated that may be affected by the modification. Furthermore, additional samples, e.g., for other conditions or more replicates, can be easily included without rerunning analyses for samples that have already been processed. Importantly, identification of (sub)tasks that require (re-)execution is performed automatically without manual user input. This both reduces the overhead for the user and eliminates the risk that they may forget some steps that need to be repeated.</p>
        <p>The Watchdog 2.0 resume mode is illustrated in Fig. <xref ref-type="fig" rid="fig5">5a</xref> for an example workflow. In this case, a task was modified (task B); additional samples were added to task D (marked red), requiring additional subtasks to be run; and additional tasks were added (F and Z). In resume mode, task B will be rerun because of modified parameters and task C because it depends on task B. For task D, only the new subtasks will be executed, but task E will be repeated because it depends on D. In addition, the newly added tasks will be run.</p>
        <p>It should be noted here that after a workflow has been run at least once, changes to the workflow should be limited to adding new (sub)tasks (e.g., for new samples) or dependencies. Removing (sub)tasks or dependencies between tasks may lead to inconsistencies with old versions of input data being accidentally used for a task. Thus, this should only be done with utmost care.</p>
      </sec>
      <sec id="sec2-6-2">
        <title>Detach / reattach mode</title>
        <p>In most cases, the Watchdog scheduler will run on a laptop or desktop computer and outsource all resource-intensive tasks to a distributed computer system, e.g., a computer cluster. Because execution of long, resource-intensive workflows may take hours or even days to complete, it may not always be possible for the Watchdog scheduler to be running continuously on the host computer. For instance, the host running Watchdog might require a reboot to install software updates or dedicated computer cluster submission hosts may not allow long-running programs. If the Watchdog scheduler is run on a laptop, the user may want to change locations with their laptop. To support these use cases, Watchdog 2.0 now provides the option to detach the scheduler from a running workflow and reattach at a later time. Notably, the user does not have to decide before execution whether to use this mode but can decide to detach at any time after starting execution in either normal or resume mode.</p>
        <p>In Watchdog 2.0, the user can request to detach using a keystroke combination (Ctrl-C) or a link in the email notification. After the request is sent, Watchdog will wait for tasks to complete that are running either on the local host or a remote host via SSH, but schedule no further tasks on these executors. In contrast, Watchdog will continue to submit tasks on cluster executors with workload managers working independently of Watchdog (currently SGE and SLURM are supported). Once all tasks on the local and remote hosts are finished, Watchdog will save the information on tasks running on cluster executors to a file and then terminate itself. From this moment, tasks already running on or submitted to computing clusters will continue running or be scheduled to run by the corresponding workload managers, but no new tasks can be submitted to these clusters.</p>
        <p>The detach file can then be used at a later time to reattach to workflow execution at the point where it was stopped previously. Watchdog will then obtain information on the execution status of tasks that were still running on or submitted to computer clusters before detaching, i.e., whether they are still running or finished successfully or with errors, and continue scheduling tasks on all executors accordingly. Notably, the Watchdog scheduler can also be reattached on another computer using the detach file, allowing for instance switching from a laptop at home to a desktop computer at work as illustrated in Fig. <xref ref-type="fig" rid="fig5">5b</xref>. Moreover, Watchdog 2.0 also provides a command-line tool to periodically start the scheduler in auto-detach mode. In this mode, the scheduler checks whether tasks were finished successfully, submits new tasks if possible, and then terminates itself automatically.</p>
      </sec>
    </sec>
    <sec id="sec2-7">
      <title>Comparison to other WMSs</title>
      <p>In this article, we present a number of new developments in our WMS Watchdog. The previously published version of Watchdog [<xref rid="bib12" ref-type="bibr">12</xref>] was already extensively compared against the most popular WMSs for biological analyses, i.e., Galaxy (Galaxy, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_006281">RRID:SCR_006281</ext-link>) [<xref rid="bib8" ref-type="bibr">8</xref>], KNIME (KNIME, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_006164">RRID:SCR_006164</ext-link>) [<xref rid="bib9" ref-type="bibr">9</xref>], Snakemake (Snakemake, <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_003475">RRID:SCR_003475</ext-link>) [<xref rid="bib10" ref-type="bibr">10</xref>], and Nextflow [<xref rid="bib11" ref-type="bibr">11</xref>] (see Fig. 12 in [<xref rid="bib12" ref-type="bibr">12</xref>] for this comparison). Compared features included, e.g., availability of GUIs/web interfaces for workflow design, execution and monitoring, support for parallel, distributed, and cloud computing, dependency definition, and many more. This showed that Watchdog combined features of existing WMSs and provided novel useful features for execution and monitoring of workflows for users both with and without programming skills.</p>
      <p>Because these features are essentially unchanged, we do not repeat this comparison here but refer the reader to our original publication [<xref rid="bib12" ref-type="bibr">12</xref>]. In the following, we discuss how Watchdog 2.0 compares to these other WMSs regarding the new features we present in this article because these were not previously analyzed. First, we provide a brief description of Galaxy, KNIME, Snakemake, and Nextflow. For more details, see our original publication [<xref rid="bib12" ref-type="bibr">12</xref>].</p>
      <p>Galaxy is targeted at experimentalists without programming experience and allows data analyses to be performed in the web browser. Workflows can be constructed on public or private Galaxy servers in a web-based user interface from a set of available tools and can then be executed. New tools for use in a Galaxy workflow are defined in an XML format specifying the input parameters for this tool, as well as the program to execute.</p>
      <p>KNIME is an open-source data analysis platform based on the Eclipse integrated development environment (IDE). It provides a powerful GUI for workflow construction, execution, and visualization of results, which can also be used without programming experience. Java programming skills are required for making a new tool available in a so-called node because multiple Java classes have to be extended.</p>
      <p>Snakemake uses a Python-based language to define workflows in a so-called Snakefile as a set of rules that describe how output files are created from input files. Dependencies between rules are determined automatically on the basis of input and output files, and the order of rule execution is determined upon invocation based on these dependencies. Encapsulation of reusable components can be performed using so-called wrappers. Writing workflows and wrappers requires knowledge of the Snakemake syntax and some degree of programming skills.</p>
      <p>Nextflow extends the Unix pipes model to transfer complex data between consecutive processes as shared data streams. It provides its own scripting language based on the Groovy programming language to define workflows. Individual analysis steps are defined as processes in the Nextflow workflow itself; thus, no actual encapsulation of tools into reusable components is supported. Similar to Snakemake, programming experience is required to define workflows and no GUI is provided.</p>
      <p>For the following comparison, features were grouped broadly into categories reusability, reproducibility, and workflow execution. A summary of the comparison is presented in Table <xref rid="tbl1" ref-type="table">1</xref>.</p>
      <table-wrap id="tbl1" orientation="portrait" position="float">
        <label>Table 1:</label>
        <caption>
          <p>Comparison of Watchdog with 4 other commonly used WMSs.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left" rowspan="1" colspan="1"> Category</th>
              <th align="left" rowspan="1" colspan="1">No.</th>
              <th align="left" rowspan="1" colspan="1">Feature</th>
              <th align="left" rowspan="1" colspan="1">Watchdog</th>
              <th align="left" rowspan="1" colspan="1">Galaxy</th>
              <th align="left" rowspan="1" colspan="1">KNIME</th>
              <th align="left" rowspan="1" colspan="1">Snakemake</th>
              <th align="left" rowspan="1" colspan="1">Nextflow</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Reusability</td>
              <td rowspan="1" colspan="1">F1</td>
              <td rowspan="1" colspan="1">Support for tool creation</td>
              <td rowspan="1" colspan="1">Command-line/GUI</td>
              <td rowspan="1" colspan="1">Command-line<sup>1</sup></td>
              <td rowspan="1" colspan="1">Eclipse Wizard</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">NA</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F2</td>
              <td rowspan="1" colspan="1">Tool documentation</td>
              <td rowspan="1" colspan="1">XML based</td>
              <td rowspan="1" colspan="1">XML based</td>
              <td rowspan="1" colspan="1">XML based</td>
              <td rowspan="1" colspan="1">YAML based<sup>2</sup></td>
              <td rowspan="1" colspan="1">NA</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F3</td>
              <td rowspan="1" colspan="1">Tool reference book</td>
              <td rowspan="1" colspan="1">Web page generator</td>
              <td rowspan="1" colspan="1">Part of GUI</td>
              <td rowspan="1" colspan="1">Part of GUI</td>
              <td rowspan="1" colspan="1">Web page generator</td>
              <td rowspan="1" colspan="1">NA</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F4</td>
              <td rowspan="1" colspan="1">Tool versioning</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">NA</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F5</td>
              <td rowspan="1" colspan="1">Sharing of tools</td>
              <td rowspan="1" colspan="1">Repository<sup>3</sup></td>
              <td rowspan="1" colspan="1">ToolShed<sup>4</sup></td>
              <td rowspan="1" colspan="1">KNIME Hub<sup>5</sup>/NodePit<sup>6,*</sup></td>
              <td rowspan="1" colspan="1">Repository<sup>7</sup></td>
              <td rowspan="1" colspan="1">NA</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F6</td>
              <td rowspan="1" colspan="1">Sharing of workflows</td>
              <td rowspan="1" colspan="1">Repository<sup>3</sup></td>
              <td rowspan="1" colspan="1">ToolShed<sup>4</sup></td>
              <td rowspan="1" colspan="1">KNIME Hub<sup>5</sup>/NodePit<sup>6,*</sup></td>
              <td rowspan="1" colspan="1">Repository<sup>8</sup></td>
              <td rowspan="1" colspan="1">nf-core<sup>9,*</sup></td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F7</td>
              <td rowspan="1" colspan="1">Repurposing of workflows</td>
              <td rowspan="1" colspan="1">XML edit/GUI</td>
              <td rowspan="1" colspan="1">GUI</td>
              <td rowspan="1" colspan="1">GUI</td>
              <td rowspan="1" colspan="1">Copy Snakefile</td>
              <td rowspan="1" colspan="1">Command-line</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Reproducibility</td>
              <td rowspan="1" colspan="1">F8</td>
              <td rowspan="1" colspan="1">Software version logging</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F9</td>
              <td rowspan="1" colspan="1">Software deployment</td>
              <td rowspan="1" colspan="1">Execution wrappers, Conda, Docker</td>
              <td rowspan="1" colspan="1">Conda, Docker</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">Conda, Docker</td>
              <td rowspan="1" colspan="1">Conda, Docker</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F10</td>
              <td rowspan="1" colspan="1">Creation of workflow report</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">List via history</td>
              <td rowspan="1" colspan="1">Static description<sup>10</sup></td>
              <td rowspan="1" colspan="1">HTML report</td>
              <td rowspan="1" colspan="1">HTML report</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F11</td>
              <td rowspan="1" colspan="1">Citation export</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">No</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Execution</td>
              <td rowspan="1" colspan="1">F12</td>
              <td rowspan="1" colspan="1">Resume workflow</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F13</td>
              <td rowspan="1" colspan="1">Process only updated tasks</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes<sup>11</sup></td>
              <td rowspan="1" colspan="1">Yes</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F14</td>
              <td rowspan="1" colspan="1">Process only new replicates</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">No</td>
              <td rowspan="1" colspan="1">Yes<sup>11</sup></td>
              <td rowspan="1" colspan="1">Yes</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">F15</td>
              <td rowspan="1" colspan="1">Detach/reattach</td>
              <td rowspan="1" colspan="1">Yes</td>
              <td rowspan="1" colspan="1">Yes<sup>12</sup></td>
              <td rowspan="1" colspan="1">Non-free feature<sup>13</sup></td>
              <td rowspan="1" colspan="1">Yes<sup>14</sup></td>
              <td rowspan="1" colspan="1">No</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <p>The selected WMSs are compared against Watchdog based on features grouped broadly into the categories reusability, reproducibility, and execution. NA: not applicable. <sup>1</sup>Python-based command-line program (Planemo). <sup>2</sup>No explicit documentation of parameters but example Snakefile and wrapper source code is part of the documentation. <sup>3</sup>[<xref rid="bib32_876_1591720947134" ref-type="bibr">18</xref>]. <sup>4</sup>[<xref rid="bib23" ref-type="bibr">28</xref>]. <sup>5</sup>[<xref rid="bib24" ref-type="bibr">29</xref>]. <sup>6</sup>[<xref rid="bib27" ref-type="bibr">30</xref>]. <sup>7</sup>[<xref rid="bib25" ref-type="bibr">31</xref>]. <sup>8</sup>[<xref rid="bib26" ref-type="bibr">32</xref>]. <sup>9</sup>[<xref rid="bib28" ref-type="bibr">33</xref>.] <sup>10</sup>A description that was manually created for a specific workflow can be displayed but is not dynamically created. <sup>11</sup>Flag "--list-params-changes" or "--list-input-changes" in combination with the "--forcerun" flag. <sup>12</sup>Client: anytime/server: if jobs are not executed locally on the server. <sup>13</sup>Non-free SGE extension or KNIME server required. <sup>14</sup>Sending of a TERM signal stops scheduling of new jobs and waits for all running jobs to finish; Ctrl+C kills all jobs running on the local computer, while jobs running on a computing cluster continue to run. *Community project.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <sec id="sec2-7-1">
        <title>Reusability</title>
        <p>For this part of the comparison, we focused on features that support development and sharing of tools (modules in Watchdog, tools in Galaxy, nodes in KNIME, rules in Snakemake, processes in Nextflow) for (re-)use in multiple analysis workflows as well as sharing and repurposing of existing workflows (F1–F7 in Table <xref rid="tbl1" ref-type="table">1</xref>). Because there is no real encapsulation of tools in Nextflow, most of these features are not applicable to it.</p>
        <p>Support for tool creation (F1) is provided in Galaxy by the command-line program Planemo, which is similar to the helper script originally provided by Watchdog for module creation. Notably, Planemo also requires all parameters for a new tool to be added manually. For KNIME, an Eclipse extension (KNIME Node Wizard) is available, which generates the project structure, the plug-in manifest, and all required Java classes. However, the Java classes only contain the basic backbone (in particular, no parameters or flags) and have to be massively extended by the developer. Snakemake does not provide any software or script for defining wrappers.</p>
        <p>All 3 WMSs allow documenting (F2) tools and their parameters in XML or YAML format. In the case of Snakemake, the specification does not require explicit documentation of parameters and input and output. Instead, an example Snakefile showing the use of the wrapper has to be provided. A reference book containing information on all available tools (F3) can be generated for Snakemake wrappers as a separate web page. This contains the example Snakefile, the code of the wrapper, author information, and software dependencies. In contrast, the documentation of KNIME nodes and Galaxy tools, respectively, is displayed on their respective GUI/web interface during workflow creation. Furthermore, all 3 WMSs perform tool versioning (F4).</p>
        <p>For sharing tools (F5) or complete workflows (F6) with other users, Galaxy and KNIME operate dedicated sharing platforms [<xref rid="bib23" ref-type="bibr">28</xref>,<xref rid="bib24" ref-type="bibr">29</xref>], while Snakemake provides source code repositories similar to Watchdog 2.0 [<xref rid="bib25" ref-type="bibr">31</xref>,<xref rid="bib26" ref-type="bibr">32</xref>]. Furthermore, dedicated sharing platforms are operated by the KNIME and Nextflow community [<xref rid="bib27" ref-type="bibr">30</xref>,<xref rid="bib28" ref-type="bibr">33</xref>].</p>
        <p>Repurposing an existing workflow for new data (F7) requires different steps in the different WMSs. In Galaxy and KNIME, existing workflows can be imported and subsequently input files or values have to be selected/modified in the web interface and GUI, respectively. For Nextflow, input is provided via command-line parameters. For Snakemake, relative paths to input files are hard-coded in the Snakefile. Thus, repurposing a Snakemake workflow only requires the Snakefile to be copied to a directory in which input files are stored or linked in the subdirectory structure used in the Snakefile. In Watchdog workflows, input files and parameters are also hard-coded but absolute paths are used. In a well-designed workflow, global constants are defined for input values and files in the settings section and used throughout the workflow. Thus, repurposing only requires these constants to be edited either in a text or XML editor or the GUI. This is not more effort than required by other WMSs, with the exception of Snakemake. However, it provides more flexibility than Snakemake regarding how input data are distributed in the file system, and workflows can be stored anywhere, e.g., in a directory containing all previously developed workflows.</p>
      </sec>
      <sec id="sec2-7-2">
        <title>Reproducibility</title>
        <p>Here, we focus on features (F8–F11) related to reproducibility of analysis results carried out at an earlier time, on different computer systems, and/or by other scientists. Most of the other WMSs do not support explicit logging of external software during workflow execution similar to Watchdog 2.0 (F8). However, Galaxy, Snakemake, and Nextflow support controlling external software dependencies and versions with the Conda package manager or using Docker containers (F9). Furthermore, Snakemake reports on executed workflows (see next paragraph) display the Conda environment for each task, including software versions.</p>
        <p>A description of all performed analysis steps (F10) can be obtained in Snakemake and Nextflow through generation of HTML reports, in which individual steps are listed in a table format and in the case of Snakemake also visualized as a graph. Galaxy displays all executed tasks as a list in its analysis history. In contrast, KNIME supports only static workflow descriptions that have to be prepared by the workflow developer. The dynamic report created by Watchdog 2.0 from the execution log does not only list performed steps but includes short descriptions of each step prepared by module developers with citation information and (optionally) PubMed IDs (F11). The only other WMS allowing the declaration of citations for tools is Galaxy. In this case, a list containing citations for all tools used can be exported after executing a workflow in Galaxy. None of the other WMSs support creation of a step-by-step report for inclusion in a manuscript draft similar to Watchdog 2.0.</p>
      </sec>
      <sec id="sec2-7-3">
        <title>Execution</title>
        <p>All WMSs except Galaxy can resume execution of partly executed workflows (F12) and are able to detect new tasks, modified tasks, or tasks with altered dependencies and consequently execute only these tasks (F13). With Snakemake and Nextflow, new samples (e.g., additional replicates) can be included in an analysis workflow without having to reprocess all samples (F14), but this option has to be forcibly triggered in Snakemake. This is not possible for KNIME workflows. One possibility to avoid unnecessary reprocessing in KNIME is to implement KNIME nodes that can detect whether the corresponding task was already executed successfully on a sample as done by Hastreiter et al. [<xref rid="bib29" ref-type="bibr">34</xref>]. However, this adds additional overhead for node development.</p>
        <p>Finally, similar execution modes to the detach/reattach mode of Watchdog 2.0 (F15) are at least partly supported by all compared WMSs apart from Nextflow. Because Galaxy is a web-based system, the user can log off (detach) and log in (reattach) at any time and from different client systems. Furthermore, the Galaxy server can also be restarted while tasks continue running on a computer cluster if no tasks are executed locally on the server. In KNIME, remote execution is only possible with non-free extensions like the KNIME Server or a cluster extension. If tasks are executed remotely using such an extension, the local KNIME instance can be detached and reattached to workflow execution. Finally, Snakemake provides the option to stop scheduling by sending the TERM signal and waiting for all jobs to be finished before terminating. Later, workflow execution can then simply be resumed. However, this mode also stops scheduling of jobs on computer clusters and waits for jobs running on computer clusters to be finished. Alternatively, Ctrl+C kills the main Snakemake process and all jobs running on the local computer, but jobs already running on a computing cluster keep running. With the correct use of profiles, it is then possible for the workflow to check the status of those jobs after a restart.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec3">
    <title>Conclusion</title>
    <p>In this article, we present the new developments in Watchdog 2.0, which focus on improving reusability of modules and workflows, reproducibility of analysis results, and convenience of workflow execution.</p>
    <p>To simplify module development, we developed the moduleMaker GUI for semi-automatically creating a module for a software package by parsing its help page. Manual overhead for the module creator is then mostly limited to choosing the best regular expression set, validating and correcting automatically identified parameters, and adding additional parameters or return values considered necessary. Furthermore, we established public sharing repositories to support and encourage exchange of developed modules and workflows between scientists. Modules are now documented in a standardized documentation format, from which an HTML-based module reference book can automatically be created. The reference book provides an overview and details on available modules and can be easily regenerated to integrate new modules, e.g., modules created by other developers.</p>
    <p>To guarantee reproducibility of workflow results, we introduced module versions and extensive logging of successfully executed steps including parameter values and third-party software versions. From the log file of a workflow execution, a report can then be automatically generated that serves both as a documentation of the analysis steps and as a starting point for drafting the corresponding methods section of a manuscript. This not only reduces the effort in creating a description of the analysis, it also prevents accidental omission of individual steps. In addition, Watchdog 2.0 now provides integrated support for automatic deployment of software, in particular with Conda or Docker, in the form of execution wrappers.</p>
    <p>Finally, with the new resume and detach/reattach execution mode, convenience and flexibility of workflow execution is greatly enhanced in Watchdog 2.0. The resume mode not only implements the state of the art for WMSs that allows resumption of interrupted workflow execution, but automatically identifies and re-executes tasks with modified parameters or additional input samples as well as downstream tasks that depend on them. The detach/reattach mode allows shutting down the Watchdog scheduler on a local computer while jobs continue to be executed on computer clusters. The user can then reattach to workflow execution and resume scheduling of tasks at a later time and even from a different computer.</p>
    <p>While many of the new features in Watchdog 2.0 are also present in other popular WMSs, none are implemented in all of them. Furthermore, even if these features are available in other WMSs, the implementations in Watchdog 2.0 often add additional capabilities, such as, e.g., the possibility to automatically generate a step-by-step report. Combined with the existing advantages of Watchdog highlighted in our original publication, we thus believe that Watchdog 2.0 will be of great benefit to users with a wide range of computer skills for performing large-scale bioinformatics analyses in a flexible and reproducible manner.</p>
  </sec>
  <sec id="sec4">
    <title>Availability of Source Code and Requirements</title>
    <list list-type="bullet">
      <list-item>
        <p>Project name: Watchdog 2.0</p>
      </list-item>
      <list-item>
        <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://www.bio.ifi.lmu.de/watchdog">https://www.bio.ifi.lmu.de/watchdog</ext-link></p>
      </list-item>
      <list-item>
        <p>Source code: <ext-link ext-link-type="uri" xlink:href="https://github.com/klugem/watchdog">https://github.com/klugem/watchdog</ext-link>, <ext-link ext-link-type="uri" xlink:href="https://github.com/watchdog-wms">https://github.com/watchdog-wms</ext-link></p>
      </list-item>
      <list-item>
        <p>Operating system(s): Platform independent</p>
      </list-item>
      <list-item>
        <p>Programming language: Java</p>
      </list-item>
      <list-item>
        <p>Other requirements: Java 11 or higher, JavaFX 11 or higher for the GUIs, individual requirements for modules</p>
      </list-item>
      <list-item>
        <p>License: GNU General Public License v3.0</p>
      </list-item>
      <list-item>
        <p>DOI: <ext-link ext-link-type="doi" xlink:href="10.5281/zenodo.3764538">https://doi.org/10.5281/zenodo.3764538</ext-link></p>
      </list-item>
      <list-item>
        <p>
          <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_018355">RRID:SCR_018355</ext-link>
        </p>
      </list-item>
      <list-item>
        <p>biotoolsID: biotools:watchdog</p>
      </list-item>
    </list>
  </sec>
  <sec sec-type="materials" id="sec5">
    <title>Availability of Supporting Data and Materials</title>
    <p>Snapshots of the Watchdog 2.0 code and the module and workfow repository used for this article are available in the GigaDB data repository [<xref rid="bib30" ref-type="bibr">35</xref>].</p>
  </sec>
  <sec id="sec6">
    <title>Abbreviations</title>
    <p>ATAC-seq: assay for transposase-accessible chromatin using sequencing; ChIP-seq: chromatin immunoprecipitation sequencing; GUI: graphical user interface; IDE: integrated development environment; JSON: Javascript Object Notation; NCBI: National Center for Biotechnology Information; NGS: next-generation sequencing; RNA-seq: RNA sequencing; SSH: Secure Shell; SRA: Sequence Read Archive; WMS: workflow management system.</p>
  </sec>
  <sec id="h1content1591719314786">
    <title>Competing Interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec id="h1content1591719319920">
    <title>Funding</title>
    <p>This work was supported by grants FR2938/7-1, FR2938/10-1, and CRC 1123 (Z2) from the Deutsche Forschungsgemeinschaft (DFG) to C.C.F.</p>
  </sec>
  <sec id="h1content1591719346541">
    <title>Authors' Contributions</title>
    <p>M.K. developed the software and wrote the manuscript. M.-S.F. tested Watchdog 2.0 and implemented modules and the workflow for the analysis of circular RNAs in high-throughput sequencing data. A.L.M. implemented the moduleMaker GUI under supervision of C.C.F. and M.K. C.C.F. tested the software, helped in revising the manuscript, and supervised the project. All authors read and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>giaa068_GIGA-D-19-00409_Original_Submission</label>
      <media xlink:href="giaa068_giga-d-19-00409_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup2">
      <label>giaa068_GIGA-D-19-00409_Revision_1</label>
      <media xlink:href="giaa068_giga-d-19-00409_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup3">
      <label>giaa068_GIGA-D-19-00409_Revision_2</label>
      <media xlink:href="giaa068_giga-d-19-00409_revision_2.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup4">
      <label>giaa068_Response_to_Reviewer_Comments_Original_Submission</label>
      <media xlink:href="giaa068_response_to_reviewer_comments_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup5">
      <label>giaa068_Response_to_Reviewer_Comments_Revision_1</label>
      <media xlink:href="giaa068_response_to_reviewer_comments_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup6">
      <label>giaa068_Reviewer_1_Report_Original_Submission</label>
      <caption>
        <p>Tazro Ohta -- 1/2/2020 Reviewed</p>
      </caption>
      <media xlink:href="giaa068_reviewer_1_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup7">
      <label>giaa068_Reviewer_2_Report_Original_Submission</label>
      <caption>
        <p>Jan Forster -- 1/31/2020 Reviewed</p>
      </caption>
      <media xlink:href="giaa068_reviewer_2_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup8">
      <label>giaa068_Reviewer_2_Report_Revision_1</label>
      <caption>
        <p>Jan Forster -- 5/12/2020 Reviewed</p>
      </caption>
      <media xlink:href="giaa068_reviewer_2_report_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup9">
      <label>giaa068_Reviewer_3_Report_Original_Submission</label>
      <caption>
        <p>Stian Soiland-Reyes -- 2/13/2020 Reviewed</p>
      </caption>
      <media xlink:href="giaa068_reviewer_3_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup10">
      <label>giaa068_Reviewer_3_Report_Revision_1</label>
      <caption>
        <p>Stian Soiland-Reyes -- 5/19/2020 Reviewed</p>
      </caption>
      <media xlink:href="giaa068_reviewer_3_report_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="bib1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hayden</surname><given-names>EC</given-names></name></person-group><article-title>Technology: The $1,000 genome</article-title>. <source>Nature</source>. <year>2014</year>;<volume>507</volume>:<fpage>294</fpage>–<lpage>5</lpage>.<pub-id pub-id-type="pmid">24646979</pub-id></mixed-citation>
    </ref>
    <ref id="bib2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><collab>International Human Genome Sequencing Consortium</collab>. <article-title>Finishing the euchromatic sequence of the human genome</article-title>. <source>Nature</source>. <year>2004</year>;<volume>431</volume>:<fpage>931</fpage>–<lpage>45</lpage>.<pub-id pub-id-type="pmid">15496913</pub-id></mixed-citation>
    </ref>
    <ref id="bib3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wang</surname><given-names>Z</given-names></name>, <name name-style="western"><surname>Gerstein</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Snyder</surname><given-names>M</given-names></name></person-group><article-title>RNA-Seq: A revolutionary tool for transcriptomics</article-title>. <source>Nat Rev Genet</source>. <year>2009</year>;<volume>10</volume>:<fpage>57</fpage>–<lpage>63</lpage>.<pub-id pub-id-type="pmid">19015660</pub-id></mixed-citation>
    </ref>
    <ref id="bib4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Furey</surname><given-names>TS</given-names></name></person-group><article-title>ChIP-seq and beyond: New and improved methodologies to detect and characterize protein-DNA interactions</article-title>. <source>Nat Rev Genet</source>. <year>2012</year>;<volume>13</volume>:<fpage>840</fpage>–<lpage>52</lpage>.<pub-id pub-id-type="pmid">23090257</pub-id></mixed-citation>
    </ref>
    <ref id="bib5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Buenrostro</surname><given-names>JD</given-names></name>, <name name-style="western"><surname>Wu</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Chang</surname><given-names>HY</given-names></name>, <etal>et al</etal>.</person-group><article-title>ATAC-seq: A method for assaying chromatin accessibility genome-wide</article-title>. <source>Curr Protoc Mol Biol</source>. <year>2015</year>;<volume>109</volume>:<fpage>21.29.1</fpage>–<lpage>9</lpage>.</mixed-citation>
    </ref>
    <ref id="bib6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Guo</surname><given-names>W</given-names></name>, <name name-style="western"><surname>Tzioutziou</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Stephen</surname><given-names>G</given-names></name>, <etal>et al</etal>.</person-group><article-title>3D RNA-seq - a powerful and flexible tool for rapid and accurate differential expression and alternative splicing analysis of RNA-seq data for biologists</article-title>. <source>bioRxiv</source>. <year>2019</year>, <pub-id pub-id-type="doi">10.1101/656686</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sundararajan</surname><given-names>Z</given-names></name>, <name name-style="western"><surname>Knoll</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Hombach</surname><given-names>P</given-names></name>, <etal>et al</etal>.</person-group><article-title>Shiny-Seq: Advanced guided transcriptome analysis</article-title>. <source>BMC Res Notes</source>. <year>2019</year>;<volume>12</volume>:<fpage>432</fpage>.<pub-id pub-id-type="pmid">31319888</pub-id></mixed-citation>
    </ref>
    <ref id="bib8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Taylor</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Schenck</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Blankenberg</surname><given-names>D</given-names></name>, <etal>et al</etal>.</person-group><article-title>Using Galaxy to perform large-scale interactive data analyses</article-title>. <source>Curr Protoc Bioinformatics</source>. <year>2007</year>;<volume>Chapter 10</volume>:<fpage>Unit 10.5</fpage>.</mixed-citation>
    </ref>
    <ref id="bib9">
      <label>9.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Berthold</surname><given-names>MR</given-names></name>, <name name-style="western"><surname>Cebron</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Dill</surname><given-names>F</given-names></name>, <etal>et al</etal>.</person-group><article-title>KNIME: The Konstanz Information Miner</article-title>. In: <source>Studies in Classification, Data Analysis, and Knowledge Organization (GfKL 2007)</source>. <publisher-loc>Heidelberg-Berlin</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2007</year>:<fpage>319</fpage>–<lpage>26</lpage>.</mixed-citation>
    </ref>
    <ref id="bib10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Köster</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Rahmann</surname><given-names>S</given-names></name></person-group><article-title>Snakemake–a scalable bioinformatics workflow engine</article-title>. <source>Bioinformatics</source>. <year>2012</year>;<volume>28</volume>:<fpage>2520</fpage>–<lpage>2</lpage>.<pub-id pub-id-type="pmid">22908215</pub-id></mixed-citation>
    </ref>
    <ref id="bib11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Di Tommaso</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Chatzou</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Floden</surname><given-names>EW</given-names></name>, <etal>et al</etal>.</person-group><article-title>Nextflow enables reproducible computational workflows</article-title>. <source>Nat Biotechnol</source>. <year>2017</year>;<volume>35</volume>:<fpage>316</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">28398311</pub-id></mixed-citation>
    </ref>
    <ref id="bib12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kluge</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Friedel</surname><given-names>CC</given-names></name></person-group>, <article-title>Watchdog – a workflow management system for the distributed analysis of large-scale experimental data</article-title>. <source>BMC Bioinformatics</source>. <year>2018</year>;<volume>19</volume>:<fpage>97</fpage>.<pub-id pub-id-type="pmid">29534677</pub-id></mixed-citation>
    </ref>
    <ref id="bib13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><comment>Conda. <ext-link ext-link-type="uri" xlink:href="https://conda.io">https://conda.io</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><comment>Docker. <ext-link ext-link-type="uri" xlink:href="https://www.docker.com/">https://www.docker.com/</ext-link>. Accessed 1 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib15">
      <label>15.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>McAffer</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Lemieux</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Aniszczyk</surname><given-names>C</given-names></name></person-group><source>Eclipse Rich Client Platform</source>. <edition>2</edition>nd ed. <publisher-loc>Boston, MA</publisher-loc>: <publisher-name>Addison-Wesley Professional</publisher-name>; <year>2010</year>.</mixed-citation>
    </ref>
    <ref id="bib31_224_1591720872889">
      <label>16.</label>
      <mixed-citation publication-type="journal">moduleMaker. <comment><ext-link ext-link-type="uri" xlink:href="https://github.com/watchdog-wms/moduleMaker">https://github.com/watchdog-wms/moduleMaker</ext-link>. Accessed 23 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib16">
      <label>17.</label>
      <mixed-citation publication-type="journal"><comment>Ulkit. <ext-link ext-link-type="uri" xlink:href="https://getuikit.com">https://getuikit.com</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib32_876_1591720947134">
      <label>18.</label>
      <mixed-citation publication-type="journal"><comment>Watchdog WMS Community, <ext-link ext-link-type="uri" xlink:href="https://github.com/watchdog-wms/">https://github.com/watchdog-wms/</ext-link>. Accessed 23 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib33_397_1591721003712">
      <label>19.</label>
      <mixed-citation publication-type="journal"><comment>Watchdog's module repository, <ext-link ext-link-type="uri" xlink:href="https://github.com/watchdog-wms/watchdog-wms-modules">https://github.com/watchdog-wms/watchdog-wms-modules</ext-link>. Accessed 23 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib34_844_1591721087975">
      <label>20.</label>
      <mixed-citation publication-type="journal"><comment>Watchdog's workflow repository, <ext-link ext-link-type="uri" xlink:href="https://github.com/watchdog-wms/watchdog-wms-workflows">https://github.com/watchdog-wms/watchdog-wms-workflows</ext-link>. Accessed 23 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib35_345_1591721180591">
      <label>21.</label>
      <mixed-citation publication-type="journal"><comment>Watchdog's module reference book, <ext-link ext-link-type="uri" xlink:href="https://watchdog-wms.github.io/watchdog-wms-modules">https://watchdog-wms.github.io/watchdog-wms-modules</ext-link>. Accessed 23 April 2020</comment>.</mixed-citation>
    </ref>
    <ref id="bib17">
      <label>22.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gao</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Zhang</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Zhao</surname><given-names>F</given-names></name></person-group><article-title>Circular RNA identification based on multiple seed matching</article-title>. <source>Brief Bioinform</source>. <year>2018</year>;<volume>19</volume>:<fpage>803</fpage>–<lpage>10</lpage>.<pub-id pub-id-type="pmid">28334140</pub-id></mixed-citation>
    </ref>
    <ref id="bib18">
      <label>23.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Westholm</surname><given-names>JO</given-names></name>, <name name-style="western"><surname>Miura</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Olson</surname><given-names>S</given-names></name>, <etal>et al</etal>.</person-group><article-title>Genome-wide analysis of <italic>Drosophila</italic> circular RNAs reveals their structural and sequence properties and age-dependent neural accumulation</article-title>. <source>Cell Rep</source>. <year>2014</year>;<volume>9</volume>:<fpage>1966</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">25544350</pub-id></mixed-citation>
    </ref>
    <ref id="bib19">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Guo</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Mahony</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Gifford</surname><given-names>DK</given-names></name></person-group><article-title>High resolution genome wide binding event finding and motif discovery reveals transcription factor spatial binding constraints</article-title>. <source>PLoS Comput Biol</source>. <year>2012</year>;<volume>8</volume>(<issue>8</issue>):<fpage>e1002638</fpage>.<pub-id pub-id-type="pmid">22912568</pub-id></mixed-citation>
    </ref>
    <ref id="bib20">
      <label>25.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Yu</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Wang</surname><given-names>LG</given-names></name>, <name name-style="western"><surname>He</surname><given-names>QY</given-names></name></person-group><article-title>ChIPseeker: An R/Bioconductor package for ChIP peak annotation, comparison and visualization</article-title>. <source>Bioinformatics</source>. <year>2015</year>;<volume>31</volume>(<issue>14</issue>):<fpage>2382</fpage>–<lpage>3</lpage>.<pub-id pub-id-type="pmid">25765347</pub-id></mixed-citation>
    </ref>
    <ref id="bib21">
      <label>26.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Leinonen</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Sugawara</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Shumway</surname><given-names>M</given-names></name>, <etal>et al</etal>.</person-group><article-title>The Sequence Read Archive</article-title>. <source>Nucleic Acids Res</source>. <year>2011</year>;<volume>39</volume>:<fpage>D19</fpage>–<lpage>21</lpage>.<pub-id pub-id-type="pmid">21062823</pub-id></mixed-citation>
    </ref>
    <ref id="bib22">
      <label>27.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kim</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Paggi</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Park</surname><given-names>C</given-names></name>, <etal>et al</etal>.</person-group><article-title>Graph-based genome alignment and genotyping with HISAT2 and HISAT-genotype</article-title>. <source>Nat Biotechnol</source>. <year>2019</year>;<volume>37</volume>:<fpage>907</fpage>–<lpage>15</lpage>.<pub-id pub-id-type="pmid">31375807</pub-id></mixed-citation>
    </ref>
    <ref id="bib23">
      <label>28.</label>
      <mixed-citation publication-type="journal"><comment>Galaxy Tool Shed. <ext-link ext-link-type="uri" xlink:href="https://toolshed.g2.bx.psu.edu">https://toolshed.g2.bx.psu.edu</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib24">
      <label>29.</label>
      <mixed-citation publication-type="journal"><comment>KNIME Hub. <ext-link ext-link-type="uri" xlink:href="https://hub.knime.com">https://hub.knime.com</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib27">
      <label>30.</label>
      <mixed-citation publication-type="journal"><comment>NodePit. <ext-link ext-link-type="uri" xlink:href="https://nodepit.com">https://nodepit.com</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib25">
      <label>31.</label>
      <mixed-citation publication-type="journal"><comment>SnakeMake Wrappers repository. <ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/snakemake/snakemake-wrappers">https://bitbucket.org/snakemake/snakemake-wrappers</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib26">
      <label>32.</label>
      <mixed-citation publication-type="journal"><comment>SnakeMake Workflows repository. <ext-link ext-link-type="uri" xlink:href="https://github.com/snakemake-workflows">https://github.com/snakemake-workflows</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib28">
      <label>33.</label>
      <mixed-citation publication-type="journal"><comment>nf-core. <ext-link ext-link-type="uri" xlink:href="https://nf-co.re">https://nf-co.re</ext-link>. Accessed 11 November 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib29">
      <label>34.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hastreiter</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Jeske</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Hoser</surname><given-names>J</given-names></name>, <etal>et al</etal>.</person-group><article-title>KNIME4NGS: A comprehensive toolbox for next generation sequencing analysis</article-title>. <source>Bioinformatics</source>. <year>2017</year>;<volume>33</volume>:<fpage>1565</fpage>–<lpage>7</lpage>.<pub-id pub-id-type="pmid">28069593</pub-id></mixed-citation>
    </ref>
    <ref id="bib30">
      <label>35.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kluge</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Friedl</surname><given-names>MS</given-names></name>, <name name-style="western"><surname>Menzel</surname><given-names>AL</given-names></name>, <etal>et al</etal>.</person-group><article-title>Supporting data for ”Watchdog 2.0: New developments for reusability, reproducibility, and workflow execution.”</article-title>. <source>GigaScience Database</source>. <year>2020</year>; <pub-id pub-id-type="doi">10.5524/100758</pub-id>.</mixed-citation>
    </ref>
  </ref-list>
</back>
