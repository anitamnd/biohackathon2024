<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6794737</article-id>
    <article-id pub-id-type="publisher-id">3091</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-019-3091-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Methodology Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>doepipeline</italic>: a systematic approach to optimizing multi-level and multi-step data processing workflows</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Svensson</surname>
          <given-names>Daniel</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Sjögren</surname>
          <given-names>Rickard</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sundell</surname>
          <given-names>David</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sjödin</surname>
          <given-names>Andreas</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3799-6094</contrib-id>
        <name>
          <surname>Trygg</surname>
          <given-names>Johan</given-names>
        </name>
        <address>
          <email>johan.trygg@umu.se</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 1034 3451</institution-id><institution-id institution-id-type="GRID">grid.12650.30</institution-id><institution>Department of Chemistry, Computational Life Science Cluster (CLiC), </institution><institution>Umeå University, </institution></institution-wrap>Umeå, Sweden </aff>
      <aff id="Aff2"><label>2</label>Corporate Research, Sartorius AG, Umeå, Sweden </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0942 6030</institution-id><institution-id institution-id-type="GRID">grid.417839.0</institution-id><institution>Division of CBRN Security and Defence, </institution><institution>FOI - Swedish Defence Research Agency, </institution></institution-wrap>Umeå, Sweden </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>15</day>
      <month>10</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>15</day>
      <month>10</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>498</elocation-id>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>12</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>9</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s). 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Selecting the proper parameter settings for bioinformatic software tools is challenging. Not only will each parameter have an individual effect on the outcome, but there are also potential interaction effects between parameters. Both of these effects may be difficult to predict. To make the situation even more complex, multiple tools may be run in a sequential pipeline where the final output depends on the parameter configuration for each tool in the pipeline. Because of the complexity and difficulty of predicting outcomes, in practice parameters are often left at default settings or set based on personal or peer experience obtained in a trial and error fashion. To allow for the reliable and efficient selection of parameters for bioinformatic pipelines, a systematic approach is needed.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We present <italic>doepipeline</italic>, a novel approach to optimizing bioinformatic software parameters, based on core concepts of the Design of Experiments methodology and recent advances in subset designs. Optimal parameter settings are first approximated in a screening phase using a subset design that efficiently spans the entire search space, then optimized in the subsequent phase using response surface designs and OLS modeling. <italic>Doepipeline</italic> was used to optimize parameters in four use cases; 1) de-novo assembly, 2) scaffolding of a fragmented genome assembly, 3) k-mer taxonomic classification of Oxford Nanopore Technologies MinION reads, and 4) genetic variant calling. In all four cases, <italic>doepipeline</italic> found parameter settings that produced a better outcome with respect to the characteristic measured when compared to using default values. Our approach is implemented and available in the Python package <italic>doepipeline</italic>.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">Our proposed methodology provides a systematic and robust framework for optimizing software parameter settings, in contrast to labor- and time-intensive manual parameter tweaking. Implementation in <italic>doepipeline</italic> makes our methodology accessible and user-friendly, and allows for automatic optimization of tools in a wide range of cases. The source code of <italic>doepipeline</italic> is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/clicumu/doepipeline">https://github.com/clicumu/doepipeline</ext-link> and it can be installed through conda-forge.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Design of Experiments</kwd>
      <kwd>Optimization</kwd>
      <kwd>Sequencing</kwd>
      <kwd>Nanopore</kwd>
      <kwd>MinION</kwd>
      <kwd>Assembly</kwd>
      <kwd>Classification</kwd>
      <kwd>Scaffolding</kwd>
      <kwd>Variant calling</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100004063</institution-id>
            <institution>Knut och Alice Wallenbergs Stiftelse</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2011.0042</award-id>
        <principal-award-recipient>
          <name>
            <surname>Trygg</surname>
            <given-names>Johan</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100004359</institution-id>
            <institution>Vetenskapsrådet</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2016‐04376</award-id>
        <principal-award-recipient>
          <name>
            <surname>Trygg</surname>
            <given-names>Johan</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100009527</institution-id>
            <institution>Myndigheten för Samhällsskydd och Beredskap</institution>
          </institution-wrap>
        </funding-source>
        <award-id>B4662</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par4">Bioinformatic software tools frequently offer a number of outcome-related parameters for the user to set or change from their default values. These parameters may be different forms of input filters, or alter the behavior of the running algorithm. Parameters may be either quantitative or qualitative (multi-level) in nature. While it is advantageous to customize tools to a specific situation, it is not always obvious what effect changing parameters will have on the outcome. This may be due to lack of documentation, poor understanding of the algorithm, or interaction effects between parameters that are difficult to foresee. Additionally, software tools are commonly combined into pipelines, for example when calling genetic variants from raw sequence reads [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. Pipelining tools in this manner further increases the complexity of selecting optimal parameter settings by increasing the numbers of both parameters and potential interaction effects. The settings for a particular data processing pipeline may also have to be tailored to the type of technology that was used to generate the data, for example the different platforms available for DNA sequencing which yield different error profiles [<xref ref-type="bibr" rid="CR3">3</xref>]. In general, the strategy for selecting parameter settings therefore typically consists of using values derived from personal or peer experience and obtained in a trial-and-error fashion, or simply retaining the default values. This kind of non-systematic selection of parameter settings runs the risk of producing sub-optimal results.</p>
    <p id="Par5">The combined ranges of all possible parameter settings form a parameter space. To find the optimal point in the parameter space, an exhaustive brute-force search, commonly called a grid search, simply trying all possible combinations, is guaranteed to find the optimum. Since the number of combinations increases exponentially, exhaustive searching quickly becomes unfeasible as the number of parameters, and their ranges, grow. Instead, statistical Design of Experiments (DoE) can be used to span and investigate the parameter space in an efficient manner [<xref ref-type="bibr" rid="CR4">4</xref>]. DoE aims to maximize information gain while minimizing the number of experiments required [<xref ref-type="bibr" rid="CR5">5</xref>]. This is done by introducing variation into the system under investigation in a structured manner in order to explain how the parameters (<italic>factors</italic>) influence the result (<italic>response</italic>). This variation is introduced according to statistical designs for simultaneously varying the factor settings at a specific set of values (<italic>levels</italic>), and the system is modeled using statistical methods, for example with Ordinary Least Squares (OLS) regression [<xref ref-type="bibr" rid="CR5">5</xref>–<xref ref-type="bibr" rid="CR7">7</xref>]. The simplest type of statistical design is the full factorial design (FFD) where all combinations of factor levels are investigated in an exhaustive manner, meaning that they quickly become impracticable. To greatly reduce the number of experiments required, fractional factorial designs (FrFD) are used to investigate a structured subset of the FFD [<xref ref-type="bibr" rid="CR6">6</xref>]. The problem is that FrFD are not trivial to use in situations where there are more than two levels to investigate, and that there is no obvious way to combine qualitative and quantitative variables. Recently, fractional factorial designs have been generalized into the so called generalized subset design (GSD) [<xref ref-type="bibr" rid="CR8">8</xref>]. GSDs are balanced and near-orthogonal multi-level and multi-factor subset designs capable of mixing quantitative and qualitative factors, allowing for the investigation of a large and diverse set of parameters in an efficient manner. Compared to grid search, GSDs reduce the number of runs required to explore an equivalent parameter space by an integer factor, also called the <italic>reduction factor</italic>.</p>
    <p id="Par6">Although DoE is primarily used in analytical chemistry, a DoE approach has previously been applied by Eliasson et al. to optimize software parameter settings in a liquid chromatography-mass spectrometry (LC-MS) metabolomics data processing pipeline [<xref ref-type="bibr" rid="CR9">9</xref>]. In essence, this approach consists of sequentially updating a statistical design based on the predicted optimal configuration of settings, until they converge at an optimum. We build upon the approach proposed by Eliasson et al., and have developed a strategy for automated optimization of software parameter settings. We extend Eliasson et al’s approach with a screening phase using the recently developed GSD to efficiently span a much larger parameter space. We also make it possible to optimize multiple responses simultaneously. This extended approach may be used both for optimization of individual tools and for multiple tools organized into a pipeline. One crucial component is a well-defined objective function that you wish to minimize or maximize, i.e. there must be some way to objectively determine how well the pipeline is performing. Our strategy is software-agnostic and is implemented as a user-friendly Python package - <italic>doepipeline</italic>.</p>
    <p id="Par7">In this article, we outline our DoE-based strategy for a systematic approach to optimizing multi-level and multi-step data processing workflows, and exemplify the application of <italic>doepipeline</italic> with four cases; 1) de-novo assembly of a bacterial genome, 2) scaffolding of contiguous sequences (contigs) of a bacterial genome using 3rd generation sequencing (nanopore) data, 3) k-mer taxonomic classification of long noisy sequence reads generated by ONT MinION sequencing units, and 4) genetic variant calling in a human sample.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <p id="Par8">We propose an approach for the optimization of software parameters, based on methods derived from statistical design of experiments. Our approach, which has been implemented in a python package (<italic>doepipeline</italic>), can be divided into two distinct phases:
<list list-type="order"><list-item><p id="Par9">Screening using a generalized subset design to find an approximate optimum. This phase also serves to find the best choice of categorical variables.</p></list-item><list-item><p id="Par10">Iterative optimization, starting from the best point found by screening, based on the algorithm by Eliasson et al. [<xref ref-type="bibr" rid="CR9">9</xref>]. This phase optimizes only quantitative variables, meaning that categorical variables are fixed at the best values found during phase 1.</p></list-item></list></p>
    <p id="Par11">The screening and optimization phases are schematically illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref> and described in more detail in the following subsections. Prior to screening and optimization, the user specifies what parameters to use as factors in the designs, whether they are categorical or numerical, and the permitted categories or value spans to be investigated. The user also specifies what process outcomes to use as response, and whether it should be maximized, minimized or reach a target value. In cases with several responses the user also needs to specify low/high limits and the target for each response. The responses are then re-scaled according to these limits and targets and combined into a single response using the geometric mean according to Derringer &amp; Suich desirability functions [<xref ref-type="bibr" rid="CR10">10</xref>]. In brief, when there are multiple responses each individual response is rescaled to be in the interval between 0 and 1, and it is 0 when outside accepted limits and 1 when better than the target. The rescaled responses are then combined into the overall desirability using the geometric mean.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Schematic visualization of <italic>doepipeline</italic> design space movement. Example of optimization of two factors (<bold>A</bold> and <bold>B</bold>) through both the screening (<bold>a</bold>) and the optimization phase (<bold>b</bold>), completed in 3 iterations. Each dot represents an executed pipeline with the parameters set by factors <bold>A</bold> and <bold>B</bold>. Triangles represent executed pipelines using the optima of an Ordinary Least Squares (OLS) model calculated in each optimization iteration. Red dots and triangles represent the best configuration of factors found in each iteration. Dashed lines represent the current high and low parameter settings in each iteration. <italic>Screening phase</italic>: a GSD using three levels and a reduction factor of 2 is used to span the design space. The pipelines are executed with the factor configurations suggested by the GSD and an approximate optimum is found (red dot). <italic>Optimization phase</italic>: in iteration 2, an optimization design is created around the best configuration found in the screening phase (black dots). In iteration 3, the design space is moved in the direction of the configuration of factors that produced the best result (red triangle) in iteration 2. <italic>doepipeline</italic> halts when the best response is produced by a configuration of factors that lies close to the center point (red triangle in iteration 3).</p></caption><graphic xlink:href="12859_2019_3091_Fig1_HTML" id="MO1"/></fig></p>
    <sec id="Sec3">
      <title>Screening for approximate optimum</title>
      <p id="Par13">The purpose of the screening phase is to span the full search space to find regions with close to optimal performance. Screening is performed by executing the specified pipeline using combinations of factor configurations given by a GSD. Using GSD effectively reduces the number of experiments to run, while optimally spanning the search space (Fig. <xref rid="Fig1" ref-type="fig">1</xref>a). The number of experiments required to investigate a given set of factors at a number of levels is approximately an integer fraction of the total number of possible combinations, which depends on the number of factors and their levels. A greater number of levels increases the resolution of the space searched during screening but also exponentially increases the number of runs required. We have found that five levels per numeric factor span large search spaces with a high enough resolution to give satisfactory results, but it is possible to set the number of levels individually for each factor in <italic>doepipeline</italic>. Similarly, we have found that the integer fraction of the full design that the GSD should represent can be safely set at the number of factors included in the design. However, this may also be controlled by the user by means of the <italic>reduction factor</italic> setting in <italic>doepipeline</italic>.</p>
      <p id="Par14">The screening phase also serves the purpose of setting the category to use for each categorical variable. For subsequent optimization, qualitative factors are fixed at the category of the best factor configuration according to the screening. By fixing qualitative factors, only numeric factors are investigated during the following optimization phase.</p>
    </sec>
    <sec id="Sec4">
      <title>Optimization of numeric factors</title>
      <p id="Par15">After selecting the best factor configuration during screening, numerical factors are optimized using response surface designs. The levels used in the screening design are here applied as anchor points for the new optimization design. A response surface design, for instance a central composite design, is constructed around the best configuration found. That is, the configuration of factor levels found to produce the best result during the screening phase is initially set as the center point in the new response surface design (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). If this configuration lies at the edge of a factor’s global design space (as defined by its min and max allowed values), the factor’s center point is shifted to the nearest screening level instead. This is done in order to keep the design within the global design space. After having set the center point for the new design, the high and low settings for each numeric factor are set to lie at the midpoints between the nearest screening levels respectively above and below the chosen center point, as indicated by the dashed line in Fig. <xref rid="Fig1" ref-type="fig">1</xref>b. The span of each factor is then defined as the difference between the high and low settings. As during screening, the specified pipeline is executed using factor configurations given by the response surface design.</p>
      <p id="Par16">During each optimization iteration, pipeline performance is approximated using OLS regression [<xref ref-type="bibr" rid="CR7">7</xref>]. By fitting a regression model the optimal configuration can be found by optimizing the response predicted according to the model. The factors included in the OLS model are selected either using a best subset approach or by using greedy forward selection; the latter is preferred when more than four factors are included in the design. If the predictive power (Q2) of the model is acceptable (Q2 &gt; 0.5), the model is used to predict an optimal parameter configuration. Each numeric factor’s settings are then updated based on the best result in a manner similar to the algorithm given by Eliasson et al. [<xref ref-type="bibr" rid="CR9">9</xref>]. For each factor, the difference between the predicted best factor setting and the factor center point is calculated. If this distance is greater than 25% of the span of the factor, the high and low settings of the factor are updated in the direction of the best result. The default step length is 25% of the span of the factor, i.e. the high and low settings are moved 25% of the step length (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b, iteration 3). We found that the algorithm did not always converge at this stage, but moved the design space back and forth between iterations. To alleviate this problem, we implemented design space shrinkage, which shrinks the design space span through multiplication by a so called <italic>shrinkage factor</italic> (typical value is 0.9, corresponding to 10% shrinkage) between iterations, and found that it successfully improved convergence. If the proposed updated factor settings lie outside the predefined design space limits, the design is instead placed at the factor limits while keeping the same factor span. If the design has not moved between two iterations, or the best response is not improved upon compared to the previous iteration, the algorithm has converged and halts. If the optimization algorithm halts and responses have not reached their minimally acceptable values, the screening results are re-evaluated and a new optimization phase is run based on the results of the next best screening. At the end of the optimization iterations the factor configuration that has produced the best result throughout the iterations is chosen as the optimal configuration.</p>
    </sec>
    <sec id="Sec5">
      <title>Sequence data used in cases</title>
      <p id="Par17">The <italic>Francisella tularensis sp. holarctica</italic> strain FSC200 [<xref ref-type="bibr" rid="CR11">11</xref>]<bold>,</bold> and a genetic near neighbor <italic>Francisella hispaniensis</italic> strain FSC454 were chosen as an example dataset in case 1 to 3 of this study. The genome assembly of FSC200 is available as RefSeq assembly accesssion GCF_000168775.2 and genome assembly of FSC454 as RefSeq assembly accession GCF_001885235.1. Previously, generated Illumina HiSeq reads of FSC200 are available as NCBI SRA run SRR518502. This latter dataset was subsampled down to an estimated coverage of 100X (1.9 M 100 bp reads) for use in case 1, subsampling was performed with <italic>seqtk</italic> [<xref ref-type="bibr" rid="CR12">12</xref>](v. 1.2-r94, installed through bioconda [<xref ref-type="bibr" rid="CR13">13</xref>]).</p>
      <p id="Par18">New sequencing libraries were prepared from DNA extractions of the two bacterial strains using the SQK-LSK108 Ligation Sequencing Kit according to the manufacturer’s specifications and then sequenced using a FLO-MIN107 MinION flow cell (Oxford Nanopore Technologies, UK). MinION sequence reads for FSC200 are available as NCBI SRA run SRR9290761, and for FSC454 as NCBI SRA run SRR9290851. Subsampling down to 50,000 from 132,259 MinION reads for FSC200 and 15,000 from 15,757 MinION reads for FSC454 was performed with a custom script, and the sequences were trimmed to a maximum length of 3000 bp as well as being sorted by length to increase classification speed.</p>
    </sec>
    <sec id="Sec6">
      <title>Case 1: de-novo assembly of a bacterial genome</title>
      <p id="Par19">In this example, we optimize the paired-end sequence assembler ABySS [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR15">15</xref>] (v. 2.0.2, installed through bioconda [<xref ref-type="bibr" rid="CR13">13</xref>]) to assemble the genome of an isolate of <italic>Francisella tularensis</italic> ssp. <italic>holarctica</italic> (FSC200). ABySS has a total of 27 different parameters that can be specified by the user. Some are directly related to the running time and memory usage of the software (such as number of threads to use or bloom filter size), while others are related to the quality and/or characteristics of the resulting assembly (such as the size of k-mer or the minimum mean k-mer coverage of a unitig). For this example, we focused on the latter type of parameter. Hence, all parameters chosen to be part of the optimization were deemed to have a potential effect on the resulting assembly. The chosen parameters were: size of k-mer (<italic>k</italic>) (KMER), minimum mean k-mer coverage of a unitig (<italic>c</italic>) (MIKC), minimum alignment length of a read (<italic>l</italic>) (MIAL), and minimum number of pairs required for building contigs (<italic>n</italic>) (MIPA).</p>
      <p id="Par20">For this optimization we set the investigated factor space so that the default value for each factor was included within the span of each factors’ min and max values (Table <xref rid="Tab1" ref-type="table">1</xref>). Although central to the ABySS algorithm, there is no default value for the k-mer size parameter. But since the value of the k-mer size is bounded by the actual read length it was still possible to define the GSD search space in a satisfactory way. For purposes of comparison, however, we considered a k-mer size of 31 to be the default setting. In this example we ran the initial screening with a reduction factor of 8, and used Central Composite Face-centered (CCF) designs in the following optimization iterations. We used a shrinkage factor of 0.9 (<italic>−s</italic>), and set the model selection method (<italic>−m</italic>) to greedy to speed up model selection. All other <italic>doepipeline</italic> settings were kept at default values.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Factors in the de-novo assembly case</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Parameter</th><th>Abbr.</th><th>Type</th><th>Min</th><th>Max</th><th>Default</th><th>Optimized</th></tr></thead><tbody><tr><td>Size of k-mer (<italic>k</italic>)</td><td>KMER</td><td>Ordinal</td><td>20</td><td>90</td><td>31<sup>a</sup></td><td>38</td></tr><tr><td>Minimum mean k-mer coverage of a unitig (<italic>c</italic>)</td><td>MIKC</td><td>Quantitative</td><td>2</td><td>15</td><td>sqrt (median)<sup>b</sup></td><td>8.5</td></tr><tr><td>Minimum alignment length of a read (<italic>l</italic>)</td><td>MIAL</td><td>Ordinal</td><td>20</td><td>60</td><td>40</td><td>30</td></tr><tr><td>Minimum number of pairs required for building contigs (<italic>n</italic>)</td><td>MIPA</td><td>Ordinal</td><td>5</td><td>15</td><td>10</td><td>15</td></tr></tbody></table><table-wrap-foot><p>The four factors investigated in the de-novo assembly case are described above. The letter in parenthesis following the parameter name is the parameter used in the abyss-pe command line interface. Min and max values define the design space. <sup>a</sup>: There is no default value explicitly specified by the ABySS documentation. However here we used a k-mer size of 31 for comparison purposes. <sup>b</sup>: This refers to the square root of the median k-mer coverage, which is affected by the sequencing depth and choice of k-mer size. The optimized values are the combination of factor values that produced the best outcome, as found by <italic>doepipeline</italic></p></table-wrap-foot></table-wrap></p>
      <p id="Par21">There are many metrics that can be used to evaluate the quality of a de-novo assembly, and which specific ones to use depends on what the assembly is to be used for [<xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR17">17</xref>]. Example metrics include the number of resulting contiguous sequences (contigs), the amount of total sequence covered by the assembly, and the N50 value. The latter is the length of the contig that, when the contigs are ordered by size, spans the midpoint of the total assembly. Hence, the N50 value can be viewed as an assessment of the quality of the assembly in terms of contiguity.</p>
      <p id="Par22">We used the total size of the assembly (tSeq), the number of contigs (nSeq), and the N50 value as responses. Since this optimization contained multiple responses, it was necessary to set low/high acceptable limits for each response, as well as target values to reach. The low and high limits for the responses were set with respect to the result obtained using the default settings with the same input data, meaning that the worst acceptable results are the default results. The target for the tSeq response was set to the reference genome size for FSC200 [<xref ref-type="bibr" rid="CR11">11</xref>], while the targets for the nSeq and N50 responses were set to values that were considered achievable (Table <xref rid="Tab2" ref-type="table">2</xref>).
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Responses in the de-novo assembly case</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Response</th><th>Abbr.</th><th>Criterion</th><th>Low/high limit<sup>a</sup></th><th>Target</th><th>Default<sup>b</sup></th><th>Optimized</th></tr></thead><tbody><tr><td>Total sequence in assembly (bp)</td><td>tSeq</td><td>Maximize</td><td>1,830,000</td><td>1,894,157</td><td>1,835,427</td><td>1,864,165</td></tr><tr><td>Number of contigs in assembly</td><td>nSeq</td><td>Minimize</td><td>95</td><td>85</td><td>91</td><td>89</td></tr><tr><td>N50</td><td>N50</td><td>Maximize</td><td>28,000</td><td>35,000</td><td>28,149</td><td>31,847</td></tr></tbody></table><table-wrap-foot><p>The three responses that were measured in the de-novo assembly case are described above. <sup>a</sup>: Responses that have the criterion maximize have a low limit, and those with the criterion minimize have a high limit. <sup>b</sup>: Default values are based on using a k-mer size of 31 and leaving all other parameters unchanged</p></table-wrap-foot></table-wrap></p>
      <p id="Par23">The data input to ABySS consisted of the subsampled Illumina HiSeq 2500 sequence data for FSC200 (see Sequence data used in cases). Prior to calculating the values for the responses we applied a length-based filter to the assembly using <italic>Fastaq</italic> [<xref ref-type="bibr" rid="CR18">18</xref>] (v. 3.17.0), keeping only those contigs more than 1000 bp in length. This filter was also applied when calculating the response from the pipeline using the default parameter configuration. This is done because the very short contigs are typically made up of short repetitive sequences, and removing them simplifies the assembly graph and calculations on it. The software <italic>seqstats</italic> [<xref ref-type="bibr" rid="CR19">19</xref>] was used to calculate the response values from the filtered assembly.</p>
    </sec>
    <sec id="Sec7">
      <title>Case 2: scaffolding of a bacterial genome assembly using long reads</title>
      <p id="Par24">Assembling a genome with short reads typically results in a fragmented assembly, consisting of a number of contigs. The way these contigs are connected with each other - in terms of ordering, distance, and direction - remains unknown. The reason for the fragmentation is that certain stretches of genomes have low complexity and are therefore impossible to resolve with short reads. One way of stitching together the contigs of an assembly is by using paired reads with long insert sizes, or - as is increasingly common - using long reads from, for example, the Nanopore or PacBio platforms. The long reads have an increased chance of spanning the low-complexity regions, effectively anchoring both ends of a pair of contigs together and thus resolving the gap. The process of connecting contigs together is referred to as scaffolding, and the resulting sequences are known as scaffolds.</p>
      <p id="Par25">SSPACE-LongRead [<xref ref-type="bibr" rid="CR20">20</xref>] (SSPACE) uses long reads, such as those produced by the PacBio or Nanopore platforms, to scaffold an assembly. When running the software, the user can manipulate a total of six parameters that relate to the resulting scaffolds. We investigated whether manipulating some of the parameters would yield a better result than that achieved by running SSPACE (v. 1–1) with default parameter settings. We chose to optimize the minimum alignment length to allow a contig to be included for scaffolding (<italic>a</italic>) (ALEN), the minimum gap between two contigs (<italic>g</italic>) (GLEN), the maximum link ratio between the two best contig pairs (<italic>r</italic>) (RRAT), and the minimum identity of the alignment of the long reads to the contig sequences (<italic>i</italic>) (IDEN). As response, we maximized the N50 value of the resulting scaffolded assembly.</p>
      <p id="Par26">We set the investigated space for the factors so that the default value for each factor was included within the span of each factor’s min and max values (Table <xref rid="Tab3" ref-type="table">3</xref>). For the optimization phase following the screening phase we chose to use a CCF design for the experiments. The reduction factor for the GSD was kept at the default value, i.e. the number of factors in the investigation, which in this case was 4. The model selection method (<italic>−m</italic>) was set to greedy and the shrinkage factor (<italic>−s</italic>) to 0.9. All other <italic>doepipeline</italic> settings were kept at default values.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Factors in the scaffolding case</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Parameter</th><th>Abbr.</th><th>Type</th><th>Min</th><th>Max</th><th>Default</th><th>Optimized</th></tr></thead><tbody><tr><td>Minimum alignment length to allow a contig to be included for scaffolding (<italic>a</italic>)</td><td>ALEN</td><td>Ordinal</td><td>0</td><td>5000</td><td>0</td><td>0</td></tr><tr><td>Minimum gap between two contigs (<italic>g</italic>)</td><td>GLEN</td><td>Ordinal</td><td>−3000</td><td>3000</td><td>−200</td><td>− 750</td></tr><tr><td>Maximum link ratio between two best contig pairs (<italic>r</italic>)</td><td>RRAT</td><td>Quantitative</td><td>0.1</td><td>0.7</td><td>0.3</td><td>0.325</td></tr><tr><td>Minimum identity of the alignment of the long reads to the contig sequences (<italic>i</italic>)</td><td>IDEN</td><td>Ordinal</td><td>30</td><td>90</td><td>70</td><td>82</td></tr></tbody></table><table-wrap-foot><p>The four factors investigated in the scaffolding case are described above. The letter in parenthesis following the parameter name is the parameter used in the SSPACE command line interface. Min and max values define the design space. The optimized values are those that in combination produced the best outcome, as found by <italic>doepipeline</italic></p></table-wrap-foot></table-wrap></p>
      <p id="Par27">The input assembly had been constructed with ABySS [<xref ref-type="bibr" rid="CR15">15</xref>] (v. 2.0.2) (k = 71) and subjected to a contig length filter (&gt; 1000 bp). It consisted of 94 contigs between 1685 and 87,479 bp in length, had an N50 of 27,549 bp, and totaled 1,800,912 bp prior to scaffolding. The assembly was constructed from the FSC200 Illumina HiSeq 2500 sequence data (see Sequence data used in cases). We include the assembly at the <italic>doepipeline</italic> github repository. The read set used for scaffolding consisted of 132,258 nanopore reads of between 163 and 108,214 bp in length (N50 = 679 bp), totaling 104,374,862 bp. <italic>Seqstats</italic> [<xref ref-type="bibr" rid="CR19">19</xref>] was used to calculate the response from the scaffolded assembly.</p>
    </sec>
    <sec id="Sec8">
      <title>Case 3: k-mer classification</title>
      <p id="Par28">K-mer classification is a method used to assign taxonomic labels to short DNA sequence reads [<xref ref-type="bibr" rid="CR21">21</xref>]. The method requires a precomputed database of k-mers generated from previously known and assembled genomes, for example all complete genomes in the NCBI database. When classifying a sample, the k-mer set of each read is calculated and compared with the database of known k-mers. The read is then assigned to the most specific taxonomic class within the database using the highest scoring k-mer root-to-leaf classification path following the taxonomic hierarchy. This method is implemented in, for example, the software package Kraken [<xref ref-type="bibr" rid="CR22">22</xref>].</p>
      <p id="Par29">Kraken also uses a least common ancestor method, which re-classifies reads that are assigned to multiple taxonomic sub-classes under a parent node. A read with non-unique leaf assignment will then be assigned to the least common ancestor where there is little or no assignment conflict instead. The k-mer classification method implemented in Kraken can be applied to longer error-prone reads even though it is optimized for short accurate reads. However, it will be less accurate due to the different (higher) error frequencies and will therefore generate an increased rate of false positives.</p>
      <p id="Par30">In this study we used the software KrakenUniq [<xref ref-type="bibr" rid="CR23">23</xref>] (v. 0.5.2). KrakenUniq builds upon the Kraken engine but additionally records the number of unique k-mers as well as coverage for each taxon. Three factors were used in the optimization: precision (PRES), minimum k-mer hits (MH) and a filter (FILT) (Table <xref rid="Tab4" ref-type="table">4</xref>). We chose to use a CCF design in the optimization phase of <italic>doepipeline</italic>, the model selection method (<italic>−m</italic>) was set to greedy, and the shrinkage factor (<italic>−s</italic>) to 0.9. All other <italic>doepipeline</italic> settings were kept at default values. The F1 score (Eq. <xref rid="Equ1" ref-type="">1</xref>), which is the harmonic mean of precision and recall<bold>,</bold> was used as response.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Factors in the k-mer classification case</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Parameter</th><th>Abbr.</th><th>Type</th><th>Min</th><th>Max</th><th>Default</th><th>Optimized</th></tr></thead><tbody><tr><td>Minimum k-mer hits</td><td>MH</td><td>Ordinal</td><td>1</td><td>200</td><td><sup>a</sup></td><td>14</td></tr><tr><td>Standard deviation of the relative errors of the estimate</td><td>PRES</td><td>Ordinal</td><td>10</td><td>18</td><td>12</td><td>17</td></tr><tr><td>Minimum tax-ID score threshold</td><td>FILT</td><td>Quantitative</td><td>0</td><td>0.05</td><td>0</td><td>0</td></tr></tbody></table><table-wrap-foot><p>The three factors investigated in the k-mer case are described above. Min and max values define the design space. The optimized values are those that in combination produced the best outcome, as found by <italic>doepipeline</italic>. <sup>a</sup>: The KrakenUniq documentation to our knowledge does not state what the default value is</p></table-wrap-foot></table-wrap>
<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ F1=2\cdotp \frac{\left(\  precision\cdotp recall\ \right)}{\left(\  precision+ recall\ \right)} $$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mi>F</mml:mi><mml:mn>1</mml:mn><mml:mo>=</mml:mo><mml:mn>2</mml:mn><mml:mo>·</mml:mo><mml:mfrac><mml:mfenced close=")" open="("><mml:mrow><mml:mspace width="0.25em"/><mml:mtext mathvariant="italic">precision</mml:mtext><mml:mo>·</mml:mo><mml:mtext mathvariant="italic">recall</mml:mtext><mml:mspace width="0.25em"/></mml:mrow></mml:mfenced><mml:mfenced close=")" open="("><mml:mrow><mml:mspace width="0.25em"/><mml:mtext mathvariant="italic">precision</mml:mtext><mml:mo>+</mml:mo><mml:mtext mathvariant="italic">recall</mml:mtext><mml:mspace width="0.25em"/></mml:mrow></mml:mfenced></mml:mfrac></mml:math><graphic xlink:href="12859_2019_3091_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
      <p id="Par31">The input data were nanopore sequenced reads from two <italic>Francisella</italic> species, a target, <italic>Francisella tularensis holarctica</italic> (FSC200) and one near neighbor, <italic>Francisella hispaniensis</italic> (FSC454). The dataset was reduced to contain 50,000 <italic>F. tularensis</italic> reads and 15,000 (max) <italic>F. holarctica</italic> reads of maximum length 3000 bp, to increase the speed of classification and reduce potential bias (see Sequence data used in cases).</p>
    </sec>
    <sec id="Sec9">
      <title>Case 4: genetic variant calling</title>
      <p id="Par32">A sequence difference between the genome of a sequenced sample and the reference genome is referred to as a genetic variant, and the process of identifying these variants from sequence data is referred to as variant calling. Calling the simplest form of genetic variant, single nucleotide variants (SNV), from standard Illumina paired-end data is considered trivial nowadays, with F1 scores reaching 0.98 [<xref ref-type="bibr" rid="CR24">24</xref>]. Because of this, we opted to optimize calling of short insertions and deletions (indels), which are slightly more complex and are harder to call correctly [<xref ref-type="bibr" rid="CR24">24</xref>].</p>
      <p id="Par33">We used raw sequence data and high-confidence genetic (or “truth”) variant calls from a single well-studied individual, commonly known as NA12878. The raw sequence data (2 × 100 bp, 50X depth), which form part of the Illumina Platinum Genomes (PG) [<xref ref-type="bibr" rid="CR25">25</xref>], were retrieved from the European Nucleotide Archive (ENA), study accession ERP001960 (run: ERR194147). The truth callset was a “hybrid” dataset, meaning it was produced by combining callsets obtained with different technologies and methodologies [<xref ref-type="bibr" rid="CR25">25</xref>–<xref ref-type="bibr" rid="CR27">27</xref>] as described in Krusche et al. [<xref ref-type="bibr" rid="CR28">28</xref>]. The truth set was downloaded from the PG GitHub repository [<xref ref-type="bibr" rid="CR29">29</xref>].</p>
      <p id="Par34">The genome analysis toolkit (GATK) best practices workflow [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>] was used as a guide for this variant calling case. Raw data processing was carried out in accordance with GATK best practices up to the point of having analysis ready reads, after which <italic>doepipeline</italic> was applied to optimize the variant calling and filtering steps. First, PICARD (v. 2.18.1) [<xref ref-type="bibr" rid="CR30">30</xref>] was used to convert the sequence reads (FASTQ format) into unmapped BAM format (uBAM) and to mark Illumina adapters. We then mapped the reads to the hg19 reference (part of the GATK resource bundle) using BWA-MEM (v. 0.7.15 -r1140) [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR32">32</xref>] and marked duplicates using PICARD. Finally, Base Quality Score Recalibration (BQSR) was carried out using GATK (v. 3.8–1-0) [<xref ref-type="bibr" rid="CR33">33</xref>] to obtain analysis-ready reads.</p>
      <p id="Par35">This case aimed to optimize variant calling and variant filtering, the remaining steps in the GATK best practices after obtaining analysis-ready reads. The calling was carried out using HaplotypeCaller, and the filtering was carried out using VariantFiltration, both tools within GATK. HaplotypeCaller offers around 20 adjustable parameters while the VariantFiltration tool expects custom-specified cutoffs for annotations in the variant call format (VCF) file. GATK suggests four annotations by which to filter indels. In order to include a meaningful number of parameters at each step we chose to optimize the two steps sequentially. Performing sequential optimization allowed us to investigate 4 parameters for each step, 8 in total. We first optimized the calling step while keeping the parameters in the filtering step at their default settings. We then optimized the parameters for the filtering step using the output from the highest scoring experiment in the first step. For the calling step we chose to optimize the global assumed mismapping rate for reads (<italic>globalMAPQ</italic>, henceforth: GMQ), the minimum base quality for calling (<italic>mbq</italic>, henceforth: MBQ), the minimum reads per alignment start (<italic>minReadsPerAlignStart</italic>, henceforth: RAS), and the minimum confidence threshold for calling (<italic>stand_call_conf</italic>, henceforth: SCC). For the filtering step we chose to optimize the quality by depth (QD), the read position rank sum test (<italic>ReadPosRankSum</italic>, henceforth: RPRS), the Fisher test for strand bias (FS), and the strand odds ratio (SOR). To further reduce the size of the optimization, we chose to optimize only against variants on chromosome 1. However, we screened for any overfitting of the parameters by executing the variant calling and filtering pipeline across all autosomes and chromosome X with the optimized parameters.</p>
      <p id="Par36">The following settings were used for both optimizations. We set the space investigated for the factors so that the default value for each factor was included within the span of each factor’s min and max values (Table <xref rid="Tab5" ref-type="table">5</xref>). The design of choice for the screening phase was the CCF design. The reduction factor for the GSD was increased to 8, reducing the number of experiments. The model selection method (<italic>−m</italic>) was set to greedy and the shrinkage factor (<italic>−s</italic>) to 0.9. All other <italic>doepipeline</italic> settings were kept at default values.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Factors in the variant calling case</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Step</th><th>Parameter</th><th>Abbr.</th><th>Type</th><th>Min</th><th>Max</th><th>Default</th><th>Optimized</th></tr></thead><tbody><tr><td rowspan="4">Variant calling</td><td>Global assumed mismapping rate for reads (<italic>globalMAPQ</italic>)</td><td>GMQ</td><td>Ordinal</td><td>20</td><td>55</td><td>45</td><td>46</td></tr><tr><td>Minimum base quality for calling (<italic>mbq</italic>)</td><td>MBQ</td><td>Ordinal</td><td>5</td><td>25</td><td>10</td><td>10</td></tr><tr><td>Minimum reads per alignment start (<italic>minReadsPerAlignment</italic>)</td><td>RAS</td><td>Ordinal</td><td>5</td><td>25</td><td>10</td><td>20</td></tr><tr><td>Minimum confidence threshold for calling (<italic>stand_call_conf</italic>)</td><td>SCC</td><td>Quantitative</td><td>5</td><td>25</td><td>10</td><td>5</td></tr><tr><td rowspan="4">Variant filtering</td><td>Quality by depth (<italic>QD</italic>)</td><td>QD</td><td>Quantitative</td><td>0</td><td>10</td><td>2</td><td>0.41</td></tr><tr><td>Read position rank sum test (<italic>ReadPosRankSum</italic>)</td><td>RPRS</td><td>Quantitative</td><td>−40</td><td>0</td><td>−20</td><td>−37.5</td></tr><tr><td>Fisher test for strand bias (<italic>FS</italic>)</td><td>FS</td><td>Quantitative</td><td>0</td><td>250</td><td>200</td><td>62.5</td></tr><tr><td>Strand odds ratio (<italic>SOR</italic>)</td><td>SOR</td><td>Quantitative</td><td>0</td><td>20</td><td>10</td><td>8.16</td></tr></tbody></table><table-wrap-foot><p>The factors investigated in the variant calling case are described above. The optimization was carried out sequentially for two main steps, variant calling and variant filtering, and which step each factor belongs to is indicated. For the variant calling step, the factor’s corresponding command line flag is given in parentheses after the parameter name. For the variant filtering step, the corresponding information tag annotated in the VCF file is indicated in parentheses. The min and max values define the design space. The default values for all factors are also indicated; for the calling step they are the built-in default values of the HaplotypeCaller tool, while for the filtering step the default values are those recommended by the GATK team. The optimized values are those that in combination produced the best outcome, as found by <italic>doepipeline</italic></p></table-wrap-foot></table-wrap></p>
      <p id="Par37">Performance metrics and tools to assess the accuracy of variant calling in a standardized manner are crucial, and the benchmarking team of the Global Alliance for Genomics and Health (GA4GH) have made significant progress with respect to this [<xref ref-type="bibr" rid="CR28">28</xref>]. The GA4GH benchmarking team has developed a benchmarking tool, hap.py [<xref ref-type="bibr" rid="CR34">34</xref>], that can compare a high-confidence (or “truth”) variant callset with a user-made single-sample callset, also known as the query callset, and output performance metrics. For a certain set of confident regions (specified by BED file), concordant variants in the two callsets should be considered true positives (TP), while discordant variants should be considered either false positives (FP) or false negatives (FN) depending on which callset they appear in. Hap.py also outputs the F1 score (see case 3 methods) for variants passing the VCF filters, which was used as the response in this case.</p>
    </sec>
    <sec id="Sec10">
      <title>Grid search comparison</title>
      <p id="Par38">We compared the results from <italic>doepipeline</italic> to those from grid search, which is a common methodology for optimizing parameters. Grid search is done by evaluating the parameter performance for all possible combinations of parameter settings, the so-called parameter grid. For the comparison to be relevant, we performed the grid search at the same resolution as the GSD screening step in each case. In other words, we tested all possible combinations of the factor setting levels (typically 5 levels per factor).</p>
    </sec>
    <sec id="Sec11">
      <title>Doepipeline</title>
      <sec id="Sec12">
        <title>Implementation</title>
        <p id="Par39"><italic>doepipeline</italic> is fully implemented in the Python programming language and source code is available for download at github (<ext-link ext-link-type="uri" xlink:href="https://github.com/clicumu/doepipeline">https://github.com/clicumu/doepipeline</ext-link>) and installable with conda-forge [<xref ref-type="bibr" rid="CR35">35</xref>, <xref ref-type="bibr" rid="CR36">36</xref>] and through PyPi. Generation of statistical designs is carried out through the python package PyDOE2 [<xref ref-type="bibr" rid="CR37">37</xref>], in which the GSD has been implemented.</p>
      </sec>
      <sec id="Sec13">
        <title>Usage</title>
        <p id="Par40">Configuration of the optimization is done in a structured YAML file with sections for the experimental design and for the pipeline steps (commands) to run. The design section includes the names of the factors investigated and their min/max values (design space), the responses and their goals (minimize/maximize), and the type of design to use in the optimization phase. The pipeline section is where each individual pipeline step is specified. In each iteration, <italic>doepipeline</italic> takes the pipeline steps as configured and substitutes the parameters under investigation with the values given by the statistical design. A batch script is created for each pipeline step, with any parameter values substituted, and the execution of it is controlled by <italic>doepipeline</italic>. Pipeline steps are executed either in parallel mode, where all experiments are run at the same time, or in sequential mode where each pipeline with all of the steps is executed in sequence. For reference, we provide example YAML files at the github repository.</p>
        <p id="Par41">Today, scientific data processing can include vast amounts of data and/or require substantial computing power. In such cases, data processing is commonly performed on compute clusters that typically use some queueing system in order to handle all user requests for resources. An example of such a queueing system is the Slurm Workload Manager [<xref ref-type="bibr" rid="CR38">38</xref>] (Slurm). To accommodate users of compute clusters, we have implemented Slurm support for <italic>doepipeline</italic>. If using Slurm, specify the Slurm options in the YAML file as you would when running a regular Slurm job. The Slurm options are transferred by <italic>doepipeline</italic> to the batch script which is then submitted to Slurm using <italic>sbatch</italic>.</p>
        <p id="Par42">After optimization, the parameter values suggested by <italic>doepipeline</italic> are saved in the working directory for the optimization. Additionally, there is a rich log file that can be investigated to follow the workflow.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec14">
    <title>Results</title>
    <sec id="Sec15">
      <title>Case 1: de-novo assembly of a bacterial genome</title>
      <p id="Par43">The goal of de-novo assembly is to combine raw sequence reads into a representation of an organism’s genome, i.e. to obtain as contiguous a genomic sequence as possible. Due to the characteristics of the genome sequence itself, in combination with short reads, this process can be difficult. For example, sequence reads from less complex segments of the genome will map to more than one position, causing ambiguities that are not possible to resolve, and this in turn leads to fragmentation of the assembly.</p>
      <p id="Par44">One popular sequence assembler is ABySS [<xref ref-type="bibr" rid="CR15">15</xref>], which provides 27 different user-controlled parameters. We set up an example for optimization of de-novo assembly software parameters using ABySS (see Methods section). <italic>doepipeline</italic> ran for two iterations before halting. Thus, the best response was obtained in the first iteration, in the GSD screening phase. The experimental sheet and corresponding response values from the GSD screening and iteration 2 are included as Additional file <xref rid="MOESM1" ref-type="media">1</xref>. Using the optimized parameter settings (Table <xref rid="Tab1" ref-type="table">1</xref>), we obtained a 1.6 and 13.1% increase in the investigated responses tSeq and N50, and a 2.2% reduction in nSeq as compared to when abyss-pe was run with default settings (Table <xref rid="Tab2" ref-type="table">2</xref>). Optimizing the parameters using the grid search option required 625 experiments to be run, and it resulted in the same combination of parameter settings as when using <italic>doepipeline</italic> (see Additional file <xref rid="MOESM2" ref-type="media">2</xref> for grid search result). By comparison, doepipeline required 97 experiments to be run.</p>
    </sec>
    <sec id="Sec16">
      <title>Case 2: scaffolding of a bacterial genome assembly using long reads</title>
      <p id="Par45">Scaffolding is the process of connecting together contigs obtained from an assembly step. In this example we aimed to optimize parameters for the scaffolding software package SSPACE-LongRead [<xref ref-type="bibr" rid="CR20">20</xref>], which relies on long reads to span the low-complexity regions that are typically found between the contigs of an assembly. <italic>Doepipeline</italic> ran for three iterations before halting, obtaining the best result in the second iteration. The response values and parameter settings investigated in each iteration are included in Additional file <xref rid="MOESM3" ref-type="media">3</xref>. The response (N50) value obtained when using the default parameter settings was 1,141,889 bp. Using the optimized parameter settings (Table <xref rid="Tab3" ref-type="table">3</xref>) resulted in a 66.9% increase in the response (1,905,883 bp). Optimizing the parameters using the grid search option required 625 experiments to be run, compared to 211 experiments using <italic>doepipeline</italic>, and it resulted in a best N50 value of 1,868,309, which is slightly lower than the result obtained using <italic>doepipeline</italic> (see Additional file <xref rid="MOESM4" ref-type="media">4</xref> for grid search result)<italic>.</italic></p>
    </sec>
    <sec id="Sec17">
      <title>Case 3: k-mer classification</title>
      <p id="Par46">K-mer classification is used to gather information about the species content of a metagenomic sample. It is possible to visualize the general distribution of species through the reads classified or to identify the presence/absence of reads classified to specific targets. By using third generation sequencing techniques, such as Oxford Nanopore, it is possible to classify reads from an unknown sample in real time. But due to the long error-prone reads produced by third-generation sequencing machines, there is a greater risk of misclassification. At the genus level this is not usually a problem. But when it comes to discriminating between pathogenic and non-pathogenic species, misclassification may become problematic; in particular false positive signals of pathogenic species may be obtained. We investigated the KrakenUniq [<xref ref-type="bibr" rid="CR23">23</xref>] (v. 0.5.2) algorithm and used <italic>doepipeline</italic> to find optimized settings for long error-prone reads in order to increase the ratio of true positives to false positives using the F1-score as response. KrakenUniq also has a filter that may reduce the number of false positive reads. The filter will adjust each assigned read up the tree until the desired threshold is met, where the threshold is the number of assigned k-mers divided by the number of unique k-mers in that category [<xref ref-type="bibr" rid="CR23">23</xref>].</p>
      <p id="Par47">Optimization ran for three iterations before halting and the best results were found during the second iteration. The experimental sheet and corresponding response values from the GSD screening and optimization iterations are included in Additional file <xref rid="MOESM5" ref-type="media">5</xref>. Using the optimized parameter settings (Table <xref rid="Tab4" ref-type="table">4</xref>), we were able to increase the F1 score by 0.065% from 0.993690 to 0.994341, compared to when running KrakenUniq with default settings.</p>
      <p id="Par48">Optimizing the parameters using the grid search option required 125 experiments to be run, compared to 76 experiments using <italic>doepipeline.</italic> The grid search resulted in a best F1 score of 0.994169 which is slightly lower than the result obtained using <italic>doepipeline</italic> (see Additional file <xref rid="MOESM6" ref-type="media">6</xref> for grid search result).</p>
    </sec>
    <sec id="Sec18">
      <title>Case 4: genetic variant calling</title>
      <p id="Par50">Variant calling is the process of determining genetic variants (or mutations) from genetic sequence data. In this case we aimed to find optimized parameters for a widely used variant calling framework, the genome analysis toolkit (GATK). Specifically, we sequentially optimized two of the steps carried out by GATK: variant calling and variant filtering (see <xref rid="Sec2" ref-type="sec">methods</xref>).</p>
      <p id="Par51">In the optimization for the first step (variant calling), <italic>doepipeline</italic> ran for three iterations before halting, obtaining the best result in the second iteration (F1 = 0.9707). In the optimization for the second step (variant filtration), <italic>doepipeline</italic> ran for four iterations before halting. The best result (F1 = 0.9716) was obtained in the fourth iteration when the optimum predicted by the model was validated. This optimum was too far from the design space edges for <italic>doepipeline</italic> to move the design space and initiate another iteration, and thus it halted execution. The response values and parameter settings investigated in each iteration are included in Additional file <xref rid="MOESM7" ref-type="media">7</xref> (variant calling step) and Additional file <xref rid="MOESM8" ref-type="media">8</xref> (variant filtering step). The included parameters and their default and optimized settings are listed in Table <xref rid="Tab5" ref-type="table">5</xref>.</p>
      <p id="Par52">As the optimization was performed only on chromosome 1, we wanted to see how well the optimized parameter settings carried over into a variant calling and filtering pipeline applied across all autosomes and chromosome X. This analysis resulted in an F1 score of 0.9713, while using the default settings resulted in an F1 score of 0.9702.</p>
      <p id="Par53">Optimizing the parameters using the grid search option resulted in a best F1 score of 0.9715, which is marginally lower than the results obtained using <italic>doepipeline</italic>. Five experiments in the first step of the grid search optimization (calling) resulted in the same highest F1 score (see Additional file <xref rid="MOESM9" ref-type="media">9</xref>). We therefore ran five parallel instances of the second step of optimization (filtering) using the different VCF files from the five best experiments in the first step. This inflated the number of required experiments from the expected 1250 to 3750 experiments in total, compared to 280 experiments with <italic>doepipeline</italic>. The five parallel optimizations of step two all yielded the same set of 12 combinations of settings producing an equally high F1 score (0.9715) (see Additional file <xref rid="MOESM10" ref-type="media">10</xref>). Validation across all autosomes and chromosome X using all 60 combinations of parameter settings (5 times 12) yielded a best F1 score of 0.9712, again marginally lower than for doepipeline.</p>
    </sec>
  </sec>
  <sec id="Sec19">
    <title>Discussion</title>
    <p id="Par54">Selecting parameter settings for a data processing pipeline is complex, since the influence of the parameters on the end result is not always obvious. While the value of personal and peer experience should not be underestimated, our approach provides a systematic way of determining optimal settings. Specialized tools to optimize particular bioinformatic software tools have been proposed previously. For example, VelvetOptimizer [<xref ref-type="bibr" rid="CR39">39</xref>] can be used to optimize the k-mer and coverage cutoff parameters of the Velvet assembler [<xref ref-type="bibr" rid="CR40">40</xref>] and KmerGenie can be used to make an informed decision on the choice of k-mer in de Bruijn based assemblers [<xref ref-type="bibr" rid="CR41">41</xref>]. However, a generalized, software-agnostic optimization approach is preferable, especially when several tools are used together in a pipeline.</p>
    <p id="Par55">Here we present such a generalized strategy for automated sequential optimization of software parameters, employing core concepts of DoE methodology. We have implemented our strategy in a user-friendly python package, <italic>doepipeline</italic>. The optimization strategy and the use of <italic>doepipeline</italic> was exemplified in four bioinformatics use cases; de-novo assembly of a bacterial genome using Illumina reads, scaffolding a bacterial genome assembly using nanopore reads, k-mer classification of metagenomic third generation sequencing data, and genetic variant calling. In all four cases, we saw an improvement in the measured response variables as compared to when using the default parameter settings. The improvement of the measured responses in our examples ranged between 0.065 and 66.9%. We compared the results from <italic>doepipeline</italic> to results from standard grid searches, and <italic>doepipeline</italic> achieved equally good or better results using significantly lower numbers of evaluations/experiments. Grid search is typically limited to running a single optimization phase evaluating all points in the parameter grid with no further refinement. This is in contrast to <italic>doepipeline</italic>, which is adaptive and refines the parameter settings based on the best results from the previous phase, allowing it to find better performing parameter settings than grid search.</p>
    <p id="Par56">One of the advantages of our proposed strategy is the use of a GSD in a screening phase prior to the optimization phase. Compared to Eliasson et al. [<xref ref-type="bibr" rid="CR9">9</xref>], we are able to screen a much larger design space efficiently prior to optimization using the GSD-based approach. In order for the optimization phase to converge in a feasible number of iterations, the design space should be restricted in some way. Deciding the range of each of the factors without guidance risks creating too narrow or wide a design space. Instead, the screening allows the user to set up a relaxed (wide) design space in which to investigate and to approximate the optimal factor combination. The approximation represents a substantiated initial center point around which to set up a narrower optimization design. The screening phase will also identify promising values for any qualitative factors and fix them before optimization. Thus, the GSD screening phase can be viewed as a systematic approach to restricting the design space for the subsequent optimization phase. Similar results can be achieved using stochastic optimization methods such as random search [<xref ref-type="bibr" rid="CR42">42</xref>], commonly applied within the machine learning community. Random search can effectively reduce the number of runs required, but the final results are probabilistic and may not be optimal, depending on each particular random draw. By using structured space-filling designs, <italic>doepipeline</italic> deliberately spans more of the search space rather than relying on randomness. We note that the multi-phase workflow of <italic>doepipeline</italic> has conceptual similarities to Bayesian hyperparameter optimization [<xref ref-type="bibr" rid="CR43">43</xref>], in refining the parameter choice based on promising parameter regions from earlier iterations. However, <italic>doepipeline</italic> uses statistical designs that are guaranteed to fill the parameter space and structured refinement around promising points rather than randomly sampling promising regions with higher probability.</p>
    <p id="Par57">The fraction of the full design that a GSD represents can be controlled with the reduction factor parameter in <italic>doepipeline</italic>. We ran the optimization of ABySS (case 1) with a GSD reduction factor of 8, but another optimization of ABySS where a reduction factor of 10 was used produced the same response values (data not shown) in fewer experimental runs (45 as opposed to 70). In addition, there was a degree of overlap among the response values in the GSD iterations (Additional files <xref rid="MOESM1" ref-type="media">1</xref>, <xref rid="MOESM3" ref-type="media">3</xref> and <xref rid="MOESM5" ref-type="media">5</xref>). Overall, this could indicate that it is meaningful to try running the GSD with a higher reduction factor than the recommended default, and/or reducing the number of levels, further reducing the number of experiments.</p>
    <p id="Par58">Currently, <italic>doepipeline</italic> leverages cloud computing capability through the Slurm workload managing system. Given the recent development and consolidation of workflow managing systems [<xref ref-type="bibr" rid="CR44">44</xref>] it would be possible to integrate <italic>doepipeline</italic> with for example SnakeMake [<xref ref-type="bibr" rid="CR45">45</xref>] or NextFlow [<xref ref-type="bibr" rid="CR46">46</xref>], similar to other implementations [<xref ref-type="bibr" rid="CR47">47</xref>, <xref ref-type="bibr" rid="CR48">48</xref>].</p>
    <p id="Par59">During development and testing of <italic>doepipeline</italic> we saw the design space moving back and forth between iterations in the optimization phase. We hypothesized that this behavior was because either the underlying function was not modeled properly or the function was flat within the investigated design space. To counteract this phenomenon we implemented three features; i) no prediction of the optimal factor combination if the predictive power (Q2) of the model was low (default: Q2 &lt; 0.5), ii) validation of the predicted optimal factor combination by carrying out the pipeline with those factor settings, and iii) shrinking the span of the factors between iterations. After implementing these three features, <italic>doepipeline</italic> consistently converged to satisfactory results.</p>
    <p id="Par60">Specifying the pipeline in a YAML file allows for flexible configurations of commands to be run, essentially enabling optimization of any pipeline run on the command line. However, the number of parameters will typically increase with the length of the pipeline under investigation. At the same time there is a soft constraint on the number of parameters that can be investigated simultaneously. This constraint will be related to the problem currently under investigation and depends on the computational complexity of the pipeline, and on the available computational and time resources. Instead of doing a global optimization of parameters, i.e. optimizing the entire pipeline at once, an alternative approach is to run sequential optimizations in which only a section of the pipeline at a time is optimized while keeping the default parameter values for the rest of the pipeline [<xref ref-type="bibr" rid="CR9">9</xref>]. This type of sequential optimization is not yet fully implemented in <italic>doepipeline</italic> and is a feature for future updates. Sequential optimization of a pipeline currently requires that an optimization is carried out for each step of the pipeline and that the optimized parameter values so obtained are manually updated for the subsequent steps of the pipeline.</p>
  </sec>
  <sec id="Sec20">
    <title>Conclusion</title>
    <p id="Par61">Our proposed strategy represents a systematic approach to the optimization of software parameters. Our implementation in the software-agnostic and user-friendly package <italic>doepipeline</italic> could potentially serve as a starting point for experimenters and bioinformaticians who currently rely on default settings or common practice when running their data processing pipelines.</p>
  </sec>
  <sec id="Sec21">
    <title>Availability and requirements</title>
    <p id="Par62">Project name: doepipeline<italic>.</italic></p>
    <p id="Par63">Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/clicumu/doepipeline">https://github.com/clicumu/doepipeline</ext-link></p>
    <p id="Par64">Operating system(s): Platform independent.</p>
    <p id="Par65">Programming language: Python.</p>
    <p id="Par66">Other requirements: Python 3.x.</p>
    <p id="Par67">License: MIT License.</p>
    <p id="Par68">Any restrictions to use by non-academics: No restrictions.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec22">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2019_3091_MOESM1_ESM.xlsx">
            <caption>
              <p><bold>Additional file 1.</bold> Complete experimental sheets for case 1, <italic>doepipeline</italic> iterations 1 and 2. Contains factor settings and response values for all experiments in these iterations.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2019_3091_MOESM2_ESM.xlsx">
            <caption>
              <p><bold>Additional file 2.</bold> Complete experimental sheet for case 1, grid search. Contains factor settings and response values for all executed experiments.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2019_3091_MOESM3_ESM.xlsx">
            <caption>
              <p><bold>Additional file 3.</bold> Complete experimental sheets for case 2, <italic>doepipeline</italic> iterations 1, 2, and 3. Contains factor settings and response values for all experiments in these iterations.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2019_3091_MOESM4_ESM.xlsx">
            <caption>
              <p><bold>Additional file 4.</bold> Complete experimental sheets for case 2, grid search. Contains factor settings and response values for all executed experiments.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM5">
          <media xlink:href="12859_2019_3091_MOESM5_ESM.xlsx">
            <caption>
              <p><bold>Additional file 5.</bold> Complete experimental sheets for case 3, <italic>doepipeline</italic> iterations 1, 2, and 3. Contains factor settings and response values for all experiments in these iterations.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM6">
          <media xlink:href="12859_2019_3091_MOESM6_ESM.xlsx">
            <caption>
              <p><bold>Additional file 6.</bold> Complete experimental sheet for case 3, grid search. Contains factor settings and response values for all executed experiments.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM7">
          <media xlink:href="12859_2019_3091_MOESM7_ESM.xlsx">
            <caption>
              <p><bold>Additional file 7.</bold> Complete experimental sheets for case 4, step 1, <italic>doepipeline</italic> iterations 1, 2, and 3. Contains factor settings and response values for all experiments in these iterations.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM8">
          <media xlink:href="12859_2019_3091_MOESM8_ESM.xlsx">
            <caption>
              <p><bold>Additional file 8.</bold> Complete experimental sheets for case 4, step 2, <italic>doepipeline</italic> iterations 1, 2, 3, and 4. Contains factor settings and response values for all experiments in these iterations.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM9">
          <media xlink:href="12859_2019_3091_MOESM9_ESM.xlsx">
            <caption>
              <p><bold>Additional file 9.</bold> Complete experimental sheet for case 4, step 1, grid search. Contains factor settings and response values for all executed experiments.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM10">
          <media xlink:href="12859_2019_3091_MOESM10_ESM.xlsx">
            <caption>
              <p><bold>Additional file 10.</bold> Complete experimental sheet for case 4, step 2, grid search. Contains factor settings and response values for all executed experiments.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>Daniel Svensson and Rickard Sjögren contributed equally to this work.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-019-3091-z.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>This study makes use of sequence data generated at the Swedish Defence Research Agency by Edvin Karlsson and Emelie Samuelsson-Näslund. The authors would like to acknowledge support from the Science for Life Laboratory (SciLifeLab) and the National Genomics Infrastructure (NGI) for providing assistance in massively parallel sequencing. Computations were carried out at the Uppsala Multidisciplinary Center for Advanced Computational Science (UPPMAX) and the High Performance Computing Center North (HPC2N), part of the Swedish National Infrastructure for Computing (SNIC). The authors thank Matilda Rentoft and Mattias Eliasson for fruitful discussions.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>DSv, AS and JT initiated the study, DSv and RS designed the algorithm and implemented the python code. DSv and DSu analyzed and interpreted the four example cases. All authors wrote, read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by the Knut and Alice Wallenberg Foundation (DSv, JT) (2011.0042), the Swedish Research Council (DSv, RS, JT) (2016–04376), Sartorius AG (RS, JT), the Swedish National Strategic e-Science Research Program eSSENCE (RS, JT), the Swedish Ministry of Defence (DSu, AS) (FOI project A404018) and the Swedish Civil Contingencies Agency (DSu, AS) (FOI project B4662 B2Forensics). Funding bodies played no roles in the design of the study, nor the collection, analysis, and interpretation of data, nor in writing the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The datasets generated and analyzed during the current study (cases 1–3) are available in NCBI BioProject accessions PRJNA510899 (SRA run: SRR9290761), PRJNA16087 (SRA run: SRR518502), PRJNA548675 (SRA run: SRR9290851). The assembly used as input to case 2 is available at the <italic>doepipeline</italic> github (<ext-link ext-link-type="uri" xlink:href="https://github.com/clicumu/doepipeline">https://github.com/clicumu/doepipeline</ext-link>). The sequence data used for case 4 is available at the ENA with study accession ERP001960 (run: ERR194147), and the truth callset along with confident regions BED file is available at the Platinum Genomes github repository [<xref ref-type="bibr" rid="CR29">29</xref>]. The GATK bundle is available at the GATK FTP <ext-link ext-link-type="uri" xlink:href="ftp://ftp.broadinstitute.org/bundle/hg19/">ftp://ftp.broadinstitute.org/bundle/hg19/</ext-link>.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p id="Par69">Not applicable</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p id="Par70">Not applicable</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par71">The authors declare that they have no competing interests. There are no competing interests from Sartorius AG, the company played no role in this work.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">DePristo MA, Banks E, Poplin R, Garimella K V, Maguire JR, Hartl C, et al. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet [Internet]. 2011 [cited 2018 Jan 17];43(5):491–498. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/21478889">http://www.ncbi.nlm.nih.gov/pubmed/21478889</ext-link></mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Van der Auwera GA, Carneiro MO, Hartl C, Poplin R, Del Angel G, Levy-Moonshine A, et al. From FastQ data to high confidence variant calls: the Genome Analysis Toolkit best practices pipeline. Curr Protoc Bioinforma [Internet]. 2013 [cited 2018 Jan 17];43(1110):11.10.1-33. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/25431634">http://www.ncbi.nlm.nih.gov/pubmed/25431634</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Li H. Minimap2: pairwise alignment for nucleotide sequences. Bioinformatics [Internet]. 2018 [cited 2018 Dec 20];34(18):3094–3100. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/29750242">http://www.ncbi.nlm.nih.gov/pubmed/29750242</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Fisher</surname>
            <given-names>RA</given-names>
          </name>
        </person-group>
        <source>The design of experiments</source>
        <year>1935</year>
        <publisher-loc>Edinburgh/London</publisher-loc>
        <publisher-name>Oliver and Boyd</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Eriksson</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Johansson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kettaneh-Wold</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Wikström</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Wold</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <source>Design of experiments : principles and applications [Internet]</source>
        <year>2008</year>
        <publisher-loc>Umeå</publisher-loc>
        <publisher-name>Umetrics Academy</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Box</surname>
            <given-names>GEP</given-names>
          </name>
          <name>
            <surname>Hunter</surname>
            <given-names>WG</given-names>
          </name>
          <name>
            <surname>Hunter</surname>
            <given-names>JS</given-names>
          </name>
        </person-group>
        <article-title>Statistics for experimenters : an introduction to design, data analysis, and model building</article-title>
        <source>Wiley series in probability and mathematical statistics</source>
        <year>1978</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Wiley</publisher-name>
        <fpage>0277</fpage>
        <lpage>2728</lpage>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dismuke</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Lindrooth</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Ordinary least squares</article-title>
        <source>Methods Des Outcomes Res</source>
        <year>2006</year>
        <volume>93</volume>
        <fpage>93</fpage>
        <lpage>104</lpage>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Surowiec</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Vikström</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Hector</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Johansson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Vikström</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Trygg</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Generalized subset designs in analytical chemistry</article-title>
        <source>Anal Chem</source>
        <year>2017</year>
        <volume>89</volume>
        <issue>12</issue>
        <fpage>6491</fpage>
        <lpage>6497</lpage>
        <pub-id pub-id-type="doi">10.1021/acs.analchem.7b00506</pub-id>
        <pub-id pub-id-type="pmid">28497952</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Eliasson M, Rännar S, Madsen R, Donten MA, Marsden-Edwards E, Moritz T, et al. Strategy for optimizing LC-MS data processing in metabolomics: a Design of Experiments Approach. Anal Chem. 2012 [cited 2019 Apr 18];84(15):6869–6876. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/22823568">http://www.ncbi.nlm.nih.gov/pubmed/22823568</ext-link></mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Derringer G, Suich R. Simultaneous Optimization of Several Response Variables. J Qual Technol [Internet]. 1980 [cited 2018 Mar 2];12(4):214–219. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.tandfonline.com/doi/full/10.1080/00224065.1980.11980968">https://www.tandfonline.com/doi/full/10.1080/00224065.1980.11980968</ext-link></mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Svensson K, Sjödin A, Byström M, Granberg M, Brittnacher MJ, Rohmer L, et al. Genome sequence of Francisella tularensis subspecies holarctica strain FSC200, isolated from a child with tularemia. J Bacteriol. 2012 [cited 2018 Dec 19];194(24):6965–6966. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/23209222">http://www.ncbi.nlm.nih.gov/pubmed/23209222</ext-link></mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">seqkt [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/seqtk">https://github.com/lh3/seqtk</ext-link>. Accessed 19 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Grüning B, Dale R, Sjödin A, Chapman BA, Rowe J, Tomkins-Tinch CH, et al. Bioconda: sustainable and comprehensive software distribution for the life sciences. Nat Methods. 2018 [cited 2018 Dec 20];15(7):475–476. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.nature.com/articles/s41592-018-0046-7">http://www.nature.com/articles/s41592-018-0046-7</ext-link></mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Simpson JT, Wong K, Jackman SD, Schein JE, Jones SJ, Birol I. ABySS: A parallel assembler for short read sequence data. [cited 2018 Jun 14]; Available from: <ext-link ext-link-type="uri" xlink:href="http://www.genome.org">www.genome.org</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Jackman SD, Vandervalk BP, Mohamadi H, Chu J, Yeo S, Hammond SA, et al. ABySS 2.0: resource-efficient assembly of large genomes using a Bloom filter. Genome Res [Internet]. 2017 [cited 2018 Dec 19];27(5):768–777. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/28232478">http://www.ncbi.nlm.nih.gov/pubmed/28232478</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Earl D, Bradnam K, St John J, Darling A, Lin D, Fass J, et al. Assemblathon 1: a competitive assessment of de novo short read assembly methods. Genome Res [Internet]. 2011[cited 2018 Dec 20];21(12):2224–2241. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/21926179">http://www.ncbi.nlm.nih.gov/pubmed/21926179</ext-link></mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Bradnam KR, Fass JN, Alexandrov A, Baranay P, Bechner M, Birol Iİ, et al. Assemblathon 2: evaluating de novo methods of genome assembly in three vertebrate species. Gigascience [Internet]. 2013 [cited 2018 Dec 12];2(1):10. Available from: <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1301.5406">http://arxiv.org/abs/1301.5406</ext-link></mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Fastaq [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/sanger-pathogens/Fastaq">https://github.com/sanger-pathogens/Fastaq</ext-link>. Accessed 19 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">seqstats [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/clwgg/seqstats">https://github.com/clwgg/seqstats</ext-link>. Accessed 19 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Boetzer M, Pirovano W. SSPACE-LongRead: Scaffolding bacterial draft genomes using long read sequence information. BMC Bioinformatics [Internet]. 2014 [cited 2018 Jul 27];15(1):211. Available from: <ext-link ext-link-type="uri" xlink:href="http://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-15-211">http://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-15-211</ext-link></mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Breitwieser FP, Lu J, Salzberg SL. A review of methods and databases for metagenomic classification and assembly. Brief Bioinform [Internet] 2017 [cited 2018 Dec 20]; Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/29028872">http://www.ncbi.nlm.nih.gov/pubmed/29028872</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">Wood DE, Salzberg SL. Kraken: ultrafast metagenomic sequence classification using exact alignments. Genome Biol [Internet]. 2014 [cited 2018 Dec 19];15(3):R46. Available from: <ext-link ext-link-type="uri" xlink:href="http://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-3-r46">http://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-3-r46</ext-link></mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Breitwieser FP, Baker DN, Salzberg SL. KrakenUniq: confident and fast metagenomics classification using unique k-mer counts. Genome Biol [Internet]. 2018 [cited 2018 Dec 20];19(1):198. Available from: <ext-link ext-link-type="uri" xlink:href="https://genomebiology.biomedcentral.com/articles/10.1186/s13059-018-1568-0">https://genomebiology.biomedcentral.com/articles/10.1186/s13059-018-1568-0</ext-link></mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Supernat A, Vidarsson OV, Steen VM, Stokowy T. Comparison of three variant callers for human whole genome sequencing. Sci Rep [Internet]. 2018 [cited 2019 May 9];8(1):17851. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/30552369">http://www.ncbi.nlm.nih.gov/pubmed/30552369</ext-link></mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eberle</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Fritzilas</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Krusche</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Källberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>BL</given-names>
          </name>
          <name>
            <surname>Bekritsky</surname>
            <given-names>MA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A reference data set of 5.4 million phased human variants validated by genetic inheritance from sequencing a three-generation 17-member pedigree</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>1</issue>
        <fpage>157</fpage>
        <lpage>164</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.210500.116</pub-id>
        <pub-id pub-id-type="pmid">27903644</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Zook JM, Chapman B, Wang J, Mittelman D, Hofmann O, Hide W, et al. Integrating human sequence data sets provides a resource of benchmark SNP and indel genotype calls. Nat Biotechnol [Internet]. 2014 [cited 2014 Jul 19];32(3):246–251. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/24531798">http://www.ncbi.nlm.nih.gov/pubmed/24531798</ext-link></mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Zook JM, McDaniel J, Parikh H, Heaton H, Irvine SA, Trigg L, et al. Reproducible integration of multiple sequencing datasets to form high-confidence SNP, indel, and reference calls for five human genome reference materials. bioRxiv [Internet]. 2018 [cited 2019 May 8];281006. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/10.1101/281006v1">https://www.biorxiv.org/content/10.1101/281006v1</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Krusche P, Trigg L, Boutros PC, Mason CE, Vega FMD La, Moore BL, et al. Best practices for benchmarking germline small variant calls in human genomes. bioRxiv [Internet] 2018 [cited 2019 May 8];270157. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/10.1101/270157v1.full">https://www.biorxiv.org/content/10.1101/270157v1.full</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Platinum Genomes GitHub repository / hg19 hybrid truth set [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://illumina.github.io/PlatinumGenomes/?prefix=2017-1.0/hg19/hybrid">https://illumina.github.io/PlatinumGenomes/?prefix=2017-1.0/hg19/hybrid</ext-link>. Accessed 9 May 2019.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Picard [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="http://broadinstitute.github.io/picard">http://broadinstitute.github.io/picard</ext-link>. Accessed 5 July 2019.</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Li H, Durbin R. Fast and accurate short read alignment with burrows-wheeler transform. Bioinformatics [Internet]. 2009 [cited 2018 Jul 5];25(14):1754–1760. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/19451168">http://www.ncbi.nlm.nih.gov/pubmed/19451168</ext-link></mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Li H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. 2013 [cited 2019 May 8]; Available from: <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1303.3997">http://arxiv.org/abs/1303.3997</ext-link></mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, et al. The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res [Internet]. 2010 [cited 2018 Jul 5];20(9):1297–1303. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/20644199">http://www.ncbi.nlm.nih.gov/pubmed/20644199</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <mixed-citation publication-type="other">Krusche P. Haplotype comparison tools / hap.py [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="http://github.com/illumina/hap.py">http://github.com/illumina/hap.py</ext-link>. Accessed 9 May 2019.</mixed-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">conda-forge [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://conda-forge.org/">https://conda-forge.org/</ext-link>. Accessed 20 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">doepipeline (conda-forge) [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://anaconda.org/conda-forge/doepipeline">https://anaconda.org/conda-forge/doepipeline</ext-link>. Accessed 8 Feb 2019.</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">PyDOE2 [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/clicumu/pyDOE2">https://github.com/clicumu/pyDOE2</ext-link>. Accessed 19 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Yoo AB, Jette MA, Grondona M. SLURM: Simple Linux Utility for Resource Management. In Springer, Berlin, Heidelberg; 2003 [cited 2018 Dec 19]. p. 44–60. Available from: <ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/10968987_3">http://link.springer.com/10.1007/10968987_3</ext-link></mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">VelvetOptimizer [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/tseemann/VelvetOptimiser">https://github.com/tseemann/VelvetOptimiser</ext-link>. Accessed 20 Dec 2018.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <mixed-citation publication-type="other">Zerbino DR, Birney E. Velvet: algorithms for de novo short read assembly using de Bruijn graphs. Genome Res [Internet]. 2008 [cited 2018 Dec 20];18(5):821–829. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/18349386">http://www.ncbi.nlm.nih.gov/pubmed/18349386</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <mixed-citation publication-type="other">Chikhi R, Medvedev P. Informed and automated k-mer size selection for genome assembly. Bioinformatics [Internet]. 2014 [cited 2018 Dec 12];30(1):31–37. Available from: <ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/btt310">https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/btt310</ext-link></mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bergstra</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bengio</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Random search for hyper-parameter optimization</article-title>
        <source>J Mach Learn Res [Internet]</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>281</fpage>
        <lpage>305</lpage>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <mixed-citation publication-type="other">Snoek J, Larochelle H, Adams RP. Practical Bayesian Optimization of Machine Learning Algorithms. Adv Neural Inf Process Syst [Internet]. 2012 [cited 2019 Jun 6]; Available from: <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1206.2944">http://arxiv.org/abs/1206.2944</ext-link></mixed-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Karim MR, Michel A, Zappa A, Baranov P, Sahay R, Rebholz-Schuhmann D. Improving data workflow systems with cloud services and use of open data for bioinformatics research. Brief Bioinform [Internet]. 2018 [cited 2019 Jun 20];19(5):1035–1050. Available from: <ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bib/article/19/5/1035/3737318">https://academic.oup.com/bib/article/19/5/1035/3737318</ext-link></mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Koster J, Rahmann S. Snakemake--a scalable bioinformatics workflow engine. Bioinformatics [Internet]. 2012 [cited 2019 Jun 20];28(19):2520–2522. Available from: <ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/bts480">https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/bts480</ext-link></mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <mixed-citation publication-type="other">Di Tommaso P, Chatzou M, Floden EW, Barja PP, Palumbo E, Notredame C. Nextflow enables reproducible computational workflows. Nat Biotechnol [Internet]. 2017 [cited 2019 Jun 20];35(4):316–319. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.nature.com/articles/nbt.3820">http://www.nature.com/articles/nbt.3820</ext-link></mixed-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Holl S, Mohammed Y, Zimmermann O, Palmblad M. Scientific workflow optimization for improved peptide and protein identification. BMC Bioinformatics [Internet]. 2015 [cited 2019 Jun 20];16(1):284. Available from: <ext-link ext-link-type="uri" xlink:href="http://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-015-0714-x">http://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-015-0714-x</ext-link></mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <mixed-citation publication-type="other">Palmblad M, Lamprecht A-L, Ison J, Schwämmle V. Automated workflow composition in mass spectrometry-based proteomics. Wren J, editor. Bioinformatics [Internet]. 2019 [cited 2019 Jun 20];35(4):656–664. Available from: <ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article/35/4/656/5060940">https://academic.oup.com/bioinformatics/article/35/4/656/5060940</ext-link></mixed-citation>
    </ref>
  </ref-list>
</back>
