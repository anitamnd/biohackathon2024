<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6500068</article-id>
    <article-id pub-id-type="publisher-id">2799</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-019-2799-0</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>FastqPuri: high-performance preprocessing of RNA-seq data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Pérez-Rubio</surname>
          <given-names>Paula</given-names>
        </name>
        <address>
          <email>paulaperezrubio@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lottaz</surname>
          <given-names>Claudio</given-names>
        </name>
        <address>
          <email>claudio.lottaz@ur.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-4160-5474</contrib-id>
        <name>
          <surname>Engelmann</surname>
          <given-names>Julia C.</given-names>
        </name>
        <address>
          <email>julia.engelmann@nioz.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2190 5763</institution-id><institution-id institution-id-type="GRID">grid.7727.5</institution-id><institution>Statistical Bioinformatics, Institute of Functional Genomics, University of Regensburg, </institution></institution-wrap>Am BioPark 9, Regensburg, 93053 Germany </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000120346234</institution-id><institution-id institution-id-type="GRID">grid.5477.1</institution-id><institution>Department of Marine Microbiology and Biogeochemistry, NIOZ Royal Netherlands Institute for Sea Research and Utrecht University, </institution></institution-wrap>P.O. Box 59, Den Burg, 1790 AB The Netherlands </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>3</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>3</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>226</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>10</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>9</day>
        <month>4</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>RNA sequencing (RNA-seq) has become the standard means of analyzing gene and transcript expression in high-throughput. While previously sequence alignment was a time demanding step, fast alignment methods and even more so transcript counting methods which avoid mapping and quantify gene and transcript expression by evaluating whether a read is compatible with a transcript, have led to significant speed-ups in data analysis. Now, the most time demanding step in the analysis of RNA-seq data is preprocessing the raw sequence data, such as running quality control and adapter, contamination and quality filtering before transcript or gene quantification. To do so, many researchers chain different tools, but a comprehensive, flexible and fast software that covers all preprocessing steps is currently missing.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We here present <bold>FastqPuri</bold>, a light-weight and highly efficient preprocessing tool for fastq data. <bold>FastqPuri</bold> provides sequence quality reports on the sample and dataset level with new plots which facilitate decision making for subsequent quality filtering. Moreover, <bold>FastqPuri</bold> efficiently removes adapter sequences and sequences from biological contamination from the data. It accepts both single- and paired-end data in uncompressed or compressed fastq files. <bold>FastqPuri</bold> can be run stand-alone and is suitable to be run within pipelines. We benchmarked <bold>FastqPuri</bold> against existing tools and found that <bold>FastqPuri</bold> is superior in terms of speed, memory usage, versatility and comprehensiveness.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p><bold>FastqPuri</bold> is a new tool which covers all aspects of short read sequence data preprocessing. It was designed for RNA-seq data to meet the needs for fast preprocessing of fastq data to allow transcript and gene counting, but it is suitable to process any short read sequencing data of which high sequence quality is needed, such as for genome assembly or SNV (single nucleotide variant) detection. <bold>FastqPuri</bold> is most flexible in filtering undesired biological sequences by offering two approaches to optimize speed and memory usage dependent on the total size of the potential contaminating sequences. <bold>FastqPuri</bold> is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/jengelmann/FastqPuri">https://github.com/jengelmann/FastqPuri</ext-link>. It is implemented in C and R and licensed under GPL v3.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (10.1186/s12859-019-2799-0) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>fastq</kwd>
      <kwd>RNA-seq</kwd>
      <kwd>Quality control</kwd>
      <kwd>Preprocessing</kwd>
      <kwd>Sequence data</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100002347</institution-id>
            <institution>Bundesministerium für Bildung und Forschung</institution>
          </institution-wrap>
        </funding-source>
        <award-id>031A428A</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Quality control (QC) and filtering of sequence data are important preprocessing steps to generate accurate results from RNA-seq experiments. The work-flow usually proceeds as follows: initial check of sequence quality based on diagnostic quality plots followed by sequence filtering to remove adapters and low quality bases. Then, contaminations from other organisms are removed, and finally, another quality control run is performed to confirm that the sequence data is now acceptable.</p>
    <p>Although tools exist that perform sequence data quality control, and others that do filtering or trimming, there is no adequate and comprehensive tool that would cover all preprocessing steps commonly used on RNA-seq data. Considering QC, FastQC [<xref ref-type="bibr" rid="CR1">1</xref>] is widely used for RNA-seq data, but because it was designed for genomic data, several of its quality checking modules are not suitable for RNA-seq data (e.g., overrepresented sequences, sequence duplication level, GC content). While RSeQC [<xref ref-type="bibr" rid="CR17">17</xref>] and RNA-SeQC [<xref ref-type="bibr" rid="CR9">9</xref>] were written for RNA-seq data, they only take alignment files (BAM) as input, which renders them inappropriate when working with alignment-free transcript counters such as kallisto [<xref ref-type="bibr" rid="CR4">4</xref>] and salmon [<xref ref-type="bibr" rid="CR15">15</xref>].</p>
    <p>AfterQC [<xref ref-type="bibr" rid="CR5">5</xref>] performs quality control and global quality filtering, but does not specifically address RNA-seq data. Its strand bias detection and overlapping pair analysis is not useful for RNA-seq data, and contamination filtering is not included. AfterQC is also limited in its automatic filtering capabilities based on quality scores. It can only globally trim, that is remove a fixed number of bases from each read. While RNA-QC-Chain [<xref ref-type="bibr" rid="CR20">20</xref>] claims to provide comprehensive quality control for RNA-seq data, it lacks informative graphics of the raw read (fastq) data and can only filter rRNA contaminations. The recently introduced tool fastp [<xref ref-type="bibr" rid="CR6">6</xref>] provides improvements in execution speed, but like the other currently available preprocessing tools lacks the capabilities of filtering biological contamination. Tools which filter reads originating from organisms not under study do exist, such as BioBloom tools [<xref ref-type="bibr" rid="CR7">7</xref>] and FastQ Screen [<xref ref-type="bibr" rid="CR18">18</xref>], but have to be manually integrated into custom pipelines.</p>
    <p>Moreover, while sequence alignment used to be the most time-demanding step in RNA-seq data analysis, this has changed since alignment free transcript counters were introduced. Now, quality control and filtering are the time-consuming bottlenecks. <bold>FastqPuri</bold> provides an automated and most efficient implementation for these first steps needed in all RNA-seq work-flows. It includes general quality control as well as filtering of low quality bases, calls marked as N, adapter remnants and reads originating from contaminating organisms. Our software handles both uncompressed and compressed fastq files from single- or paired end sequencing, and provides superior diagnostic plots in a per sample quality report and a summary report over all samples in the dataset.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p><bold>FastqPuri</bold> consists of six executables which can be run sequentially to assess sequence quality and perform sequence filtering. Qreport assesses sequence quality at the sample level, while Sreport generates a summary quality report for a collection of samples, e.g. the complete dataset. For contamination filtering, <bold>FastqPuri</bold> offers two different methods, a tree-based and a bloom filter-based method. The executables trimFilter and trimFilterPE filter contaminations, adapters and low quality bases from single-end and paired-end data, respectively. The work-flow of fastq sequence data preprocessing with <bold>FastqPuri</bold> is depicted in Fig. <xref rid="Fig1" ref-type="fig">1</xref>.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Workflow for preprocessing fastq files with <bold>FastqPuri</bold>. Qreport generates a quality report in html format for each sample, while Sreport generates one summary quality report for all samples. Depending on the size of the sequence file with potential contaminations, makeTree or makeBloom generates a data structure for filtering contaminations. trimFilter (or trimFilterPE for paired-end data) filters and trims reads containing adapters or adapter remnants, biological contaminations and low quality bases. On the filtered reads, Qreport and Sreport can be run again to ensure that the filtered data meets the user’s expectations. Legend: yellow: fastq files, red: <bold>FastqPuri</bold> executables, green: <bold>FastqPuri</bold> quality reports in html format</p></caption><graphic xlink:href="12859_2019_2799_Fig1_HTML" id="MO1"/></fig></p>
    <sec id="Sec3">
      <title>Assessing sequence quality</title>
      <p>Assessing sequence quality thoroughly is essential to be able to detect problems during sample handling, RNA extraction, library preparation and sequencing. None of the existing tools fulfilled our requirements to comprehensively assess sequence quality and estimate the impact on data loss by applying different quality filters. Therefore, we designed novel graphics which allow to estimate how many sequences will be discarded at a specific quality threshold, for a range of thresholds. With existing tools, this would require several runs of filtering with different thresholds and calculating the number of kept reads, while we get this information with just one run of Qreport. The resulting html report contains general information about the dataset (Fig. <xref rid="Fig2" ref-type="fig">2</xref>a), the common plots of average sequence quality per base position (Fig. <xref rid="Fig2" ref-type="fig">2</xref>b), average quality per position per tile per lane (Fig. <xref rid="Fig2" ref-type="fig">2</xref>c) and nucleotide content per position (Fig. <xref rid="Fig2" ref-type="fig">2</xref>d). In addition, <bold>FastqPuri</bold> quality reports include plots to facilitate decision making about thresholds to be used for quality filtering, especially for the purpose of using transcript counting approaches for transcript and gene expression analyses. Therefore, Fig. <xref rid="Fig2" ref-type="fig">2</xref>e displays the proportion of nucleotides per position per tile which fall below the high quality threshold required. This plot better highlights problematic tiles and nucleotide positions than the one showing average quality values per position and tile (Fig. <xref rid="Fig2" ref-type="fig">2</xref>c), which is shown e.g. in FastQC reports. For example, from Fig. <xref rid="Fig2" ref-type="fig">2</xref>c, we cannot see if the bases of all the reads have lower qualities at positions 1-5, or if there is only a subset with very low qualities that would decrease the mean. From Fig. <xref rid="Fig2" ref-type="fig">2</xref>e it becomes clear that most of the reads (&gt;95%) have quality scores above the required quality threshold across all tiles. Figure <xref rid="Fig2" ref-type="fig">2</xref>f shows the proportion of low quality nucleotides per base A, C, G, T and per tile. Figure <xref rid="Fig2" ref-type="fig">2</xref>g shows the proportion of reads meeting a certain quality threshold, allowing a quick assessment of the data that would be discarded at a given threshold. This information is lost in plots showing averages, as for example Fig. <xref rid="Fig2" ref-type="fig">2</xref>b. Moreover, for transcript counting methods such as kallisto and salmon, it is important to get an overview over how many reads contain many low quality bases. They should be filtered out to avoid false-positive mappings, because these methods do not take quality scores into account. If many reads carry only one low quality base, this could be tolerated. Therefore, we show the number of reads with <italic>m</italic> low quality bases in a histogram to allow the user to make an estimate about how many sequences will be discarded when requiring a certain percentage of high quality nucleotides per read (Fig. <xref rid="Fig2" ref-type="fig">2</xref>h). Quality reports for each sample are generated by the executable Qreport, while the executable Sreport provides a summary quality report over all samples in the dataset. There are two types of summary quality reports: the first one is a quality summary report and consists of an html report with a table of the number of reads, number of tiles, percentage of reads with low quality bases, percentage of reads with bases tagged as N for all samples, and a heatmap showing the average quality per position for all samples. The second type of summary report provides an overview over the filtering which was performed with trimFilter(PE) (see following section). It contains a table specifying the filter options used, and a table containing, for all samples (rows), the total number of reads, the number of accepted reads, the percentage of reads discarded due to adapter contaminations, undesired genome contaminations, low quality issues, presence of Ns, and the percentage of reads trimmed due to adapter contaminations, low quality issues and presence of N’s.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Graphics shown in Qreport. <bold>a</bold> Data set overview and basic statistics. <bold>b</bold> Per base sequence quality box plots. The blue line corresponds to the mean quality value. <bold>c</bold> Cycle average quality, per tile, per lane. <bold>d</bold> Nucleotide content per position. <bold>e</bold> Proportion of low quality bases, per tile, per lane. <bold>f</bold> Fraction of low quality bases {A, C, G, T} per position, per tile and per lane. <bold>g</bold> Proportion of bases with quality scores below different thresholds, for all tiles, all lanes. <bold>h</bold> Number of reads with <italic>m</italic> low quality bases</p></caption><graphic xlink:href="12859_2019_2799_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>Filtering contaminations</title>
      <p>We first filter out technical (e.g. adapters, primers) and biological undesired sequences and then bases and reads with low quality scores. We purposely do it in this order to make sure we do not overlook contaminating sequences that were trimmed due to quality issues. The actual filtering is performed by trimFilter for single-end reads and trimFilterPE for paired-end reads. Optionally, the executables makeTree and makeBloom are used to prepare the filtering (Fig. <xref rid="Fig1" ref-type="fig">1</xref>), they are described below.</p>
      <sec id="Sec5">
        <title>Contamination with adapter sequences</title>
        <p><bold>FastqPuri</bold> can remove adapters, adapter remnants or any other kind of technical sequence that is introduced during sequence library preparation from single and paired end data. We use an approach similar to trimmomatic [<xref ref-type="bibr" rid="CR3">3</xref>], scanning reads from the 3’ to 5’ end with a 16 nt seed and performing local alignment if the seed is accepted. If the alignment score exceeds the threshold, the adapter is removed. If the remaining read is shorter than the minimum allowed sequence length, it is discarded. For paired-end data, both reads of a pair are discarded when one becomes too short after adapter-trimming.</p>
      </sec>
      <sec id="Sec6">
        <title>Contamination with biological sequences</title>
        <p>RNA-seq data can contain substantial numbers of reads which did not originate from mRNAs of interest. Even if an mRNA enrichment or rRNA depletion library preparation protocol was used, reads representing rRNA may be found [<xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR19">19</xref>]. In addition, biological contaminations from spill-over, pathogen or host genomes, or bench contamination can result in sequence reads of different organisms than the one under study and in the worst case lead to distorted (false-positive) gene/transcript counts [<xref ref-type="bibr" rid="CR2">2</xref>]. Therefore, it is good practice to check for potential sequence contaminations and remove them if needed. This functionality is provided by trimFilter for single-end reads and trimFilterPE for paired-end reads. We offer two options depending on the length of sequences to be removed exceeding 10 MB or not.</p>
        <sec id="Sec7">
          <title>Short contaminating sequence: 4-ary tree</title>
          <p>If the fasta file of potential contaminations is smaller than 10 MB, we suggest to construct a 4-ary tree from the fasta file and use this to search for contaminations. The executable makeTree constructs a tree and saves it to disk for subsequent filtering with trimFilter(PE). This is convenient for running the same contamination search on many samples. However, since constructing the tree is a relatively cheap computational task for the sequence lengths under consideration, per default the tree is not stored but generated each time trimFilter(PE) is called with –method TREE. Searching the tree is very fast but memory intensive. Therefore we limit the size of the potential contaminating species sequence file to be used with this filtering method.</p>
        </sec>
        <sec id="Sec8">
          <title>Long contaminating sequences: bloom filter</title>
          <p><bold>FastqPuri</bold> offers a bloom filter approach to search for contaminations coming from large sequence files, e.g. genomes from potential contaminating organisms with sizes up to 4 GB. For these applications, it is sensible to construct the bloom filter and store it in a file. This is done by makeBloom. A bloom filter is a probabilistic data structure which can be used to test if an element (here: a read) is an element of a set (here: the set of potential contaminating sequences). trimFilter(PE) with the option –method BLOOM then classifies each read as being contained in the bloom filter (representing contamination) or not. False positive hits are possible and by default, we accept 5% false positives. False negatives are not possible, except for cases where the contaminating sequences are different from the reference sequence due to individual variation, incomplete reference sequences or sequencing errors. Details about creating the bloom filter can be found in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
        </sec>
      </sec>
    </sec>
    <sec id="Sec9">
      <title>Filtering based on base quality</title>
      <p>We offer the following quality-based filtering options with trimFilter(PE), which are specified with the trimQ argument: 
<list list-type="bullet"><list-item><p>NO (or flag absent): nothing is done to the reads with low quality.</p></list-item><list-item><p>ALL: all reads containing at least one low quality nucleotide are discarded.</p></list-item><list-item><p>ENDS: look for low quality base callings at the beginning and at the end of the read. Trim them at both ends until the quality is above the threshold. Keep the read if the length of the remaining part is at least the minimum allowed. Discard it otherwise.</p></list-item><list-item><p>FRAC [–percent p]: discard the read if there are more than p% nucleotides with quality scores below the threshold.</p></list-item><list-item><p>ENDSFRAC [–percent p]: first trim the ends as in the ENDS option. Accept the trimmed read if the number of low quality nucleotides does not exceed p%, discard it otherwise.</p></list-item><list-item><p>GLOBAL –global n1:n2: cut all reads globally n1 nucleotides from the left and n2 from the right.</p></list-item></list></p>
      <p>Independent of filtering based on quality scores, trimFilter(PE) can discard or trim reads containing ‘N’ nucleotides. This is done by passing the argument –trimN and one of the following options, 
<list list-type="bullet"><list-item><p>NO: (or flag absent): nothing is done to the reads containing N’s.</p></list-item><list-item><p>ALL: all reads containing at least one N are discarded.</p></list-item><list-item><p>ENDS: N’s are trimmed if found at the ends, left “as is” otherwise. If the trimmed read length is smaller than the minimal allowed read length, the read is discarded.</p></list-item><list-item><p>STRIP: Obtain the largest N free subsequence of the read. Accept it if its length is at least the minimum allowed length, discard it otherwise.</p></list-item></list></p>
    </sec>
  </sec>
  <sec id="Sec10" sec-type="results">
    <title>Results</title>
    <sec id="Sec11">
      <title>Comparison with other tools and evaluation</title>
      <p>Several short read sequencing data tools address quality control and/or filtering. However, none of them integrates all preprocessing steps and meets our needs in terms of versatility, efficiency and visualization. Notably, none of the tools for quality analyses accepts bz2 files, the currently most common compression mode used by sequencing facilities to deliver Illumina fastq files. In Table <xref rid="Tab1" ref-type="table">1</xref>, we compare the options of <bold>FastqPuri</bold> with several existing tools. With respect to the performance, efficiency and memory usage, we performed benchmarking on simulated and real data.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Provided functionality of <bold>FastqPuri</bold> and existing tools</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Tool name</th><th align="left">language</th><th align="left">input</th><th align="left">QC</th><th align="left">QF</th><th align="left">Ad</th><th align="left">cont</th><th align="left">PE</th><th align="left">Year</th></tr></thead><tbody><tr><td align="left">
FastqPuri
</td><td align="left">
C, R
</td><td align="left">
fq*
</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">2019</td></tr><tr><td align="left">fastp [<xref ref-type="bibr" rid="CR6">6</xref>]</td><td align="left">
C++
</td><td align="left">
fq,gz
</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left">2018</td></tr><tr><td align="left">Fastq Screen [<xref ref-type="bibr" rid="CR18">18</xref>]</td><td align="left">
perl
</td><td align="left">
fq
</td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">2018</td></tr><tr><td align="left">RNA-QC-Chain [<xref ref-type="bibr" rid="CR20">20</xref>]</td><td align="left">
C++
</td><td align="left">
fq,fa
</td><td align="left">∼</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">∼</td><td align="left"><italic>√</italic></td><td align="left">2018</td></tr><tr><td align="left">afterQC [<xref ref-type="bibr" rid="CR5">5</xref>]</td><td align="left">
C,python
</td><td align="left">
fq
</td><td align="left"><italic>√</italic></td><td align="left">∼</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left">2017</td></tr><tr><td align="left">Cutadapt [<xref ref-type="bibr" rid="CR13">13</xref>]</td><td align="left">
C,python
</td><td align="left">
fq,fa,gz
</td><td align="left">×</td><td align="left">∼</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left"><italic>√</italic><xref ref-type="fn" rid="Fn1">1</xref></td><td align="left">2011</td></tr><tr><td align="left">trimmomatic [<xref ref-type="bibr" rid="CR3">3</xref>]</td><td align="left">
java
</td><td align="left">
fq,gz
</td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left">2014</td></tr><tr><td align="left">Biobloom [<xref ref-type="bibr" rid="CR7">7</xref>]</td><td align="left">
C++
</td><td align="left">
BAM/SAM,fa,fq*
</td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">2014</td></tr><tr><td align="left">FastQC [<xref ref-type="bibr" rid="CR1">1</xref>]</td><td align="left">
java
</td><td align="left">
fq,gz
</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">2010</td></tr><tr><td align="left">SolexaQA++ [<xref ref-type="bibr" rid="CR8">8</xref>]</td><td align="left">
C++,R
</td><td align="left">
fq,gz
</td><td align="left"><italic>√</italic></td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">2010</td></tr><tr><td align="left">RSeQC [<xref ref-type="bibr" rid="CR17">17</xref>]</td><td align="left">
C,python
</td><td align="left">
BAM/SAM
</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">2012</td></tr><tr><td align="left">RNA-SeQC [<xref ref-type="bibr" rid="CR9">9</xref>]</td><td align="left">
java
</td><td align="left">
BAM
</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">×</td><td align="left">∼</td><td align="left">×</td><td align="left">2012</td></tr><tr><td align="left">QoRTs [<xref ref-type="bibr" rid="CR11">11</xref>]</td><td align="left">
java,R
</td><td align="left">
BAM
</td><td align="left"><italic>√</italic></td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">×</td><td align="left">2015</td></tr></tbody></table><table-wrap-foot><p><bold>lang</bold>: programming language, <bold>QC</bold>: quality control, <bold>QF</bold>: low quality filtering, <bold>Ad</bold>: removes technical sequences such as adapters, <bold>cont</bold>: removes contaminations, <bold>PE</bold>: handles paired end data, <bold>Year</bold>: year of publication. fq* stands for uncompressed fastq or fastq compressed in gz, bz2, xz and for FastqPuri also Z format. For both FastqPuri and Biobloom, input may be tarred. [1] functionality was added later</p></table-wrap-foot></table-wrap></p>
      <sec id="Sec12">
        <title>FastqPuri efficiently generates comprehensive sequence quality reports</title>
        <p>Only a fraction of the tools that deliver quality control plots on RNA-seq data do so before read alignment, that is on fastq files: afterQC, FastQC, fastp and SolexaQA++. RNA-QC-Chain has a quality control executable, but does not generate any plots. In terms of computer performance and memory usage, we compared <bold>FastqPuri</bold> with afterQC, FastQC, fastp, RNA-QC-Chain and SolexaQA++.</p>
        <p>We ran the above mentioned tools on fastq files from three different datasets representing different sequence name formats and quality encodings (datasets 2, 3, 4, see methods). We also ran them with different input formats in parallel: fastq, gz and bz2. We compare the performance of running all programs on the uncompressed file, the gz-compressed file and Qreport running on the bz2-compressed file. For benchmarking tools which do not accept compressed input, we ran the tool on uncompressed data and added the time for decompressing the file to their timings.</p>
        <p>The performances in terms of time are shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. FastqPuri’s Qreport was substantially faster than all of the other tools when using bz2 files, by a factor of at least 2. Qreport and AfterQC were always faster than the other tools, but AfterQC failed to analyze fastq data in Illumina 1.3+ format with quality scores encoded with Phred+64. RNA-QC-Chain failed whenever data was in paired-end format. We profiled peak memory usage with the same datasets and show the results in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. While some QC tools have quite high peak memory demands, FastqPuri’s Qreport and AfterQC had the lowest peak memory usage, with Qreport outperforming all other tools on all datasets.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Run times (user plus CPU time in seconds) of <bold>FastqPuri</bold>’s Qreport versus other tools for three different datasets. The datasets represent different quality encodings (Phred+33 and Phred+64) as well as different sequence name formats. Timings for SolexaQA++ on Illumina 1.3+ data are not shown because the smallest value was around 10 min and all other values became invisibly small on that scale</p></caption><graphic xlink:href="12859_2019_2799_Fig3_HTML" id="MO3"/></fig>
<fig id="Fig4"><label>Fig. 4</label><caption><p>Memory usage (in MB) of <bold>FastqPuri</bold>’s Qreport versus other tools for three different datasets. The datasets represent different quality encodings (Phred+33 and Phred+64) as well as different sequence name formats</p></caption><graphic xlink:href="12859_2019_2799_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec13">
        <title>FastqPuri outperforms fastp and trimmomatic in adapter trimming</title>
        <p>We benchmarked adapter trimming with <bold>FastqPuri</bold> and with trimmomatic, the adapter trimming tool that performed best on paired- and single-end data in terms of speed and PPV (positive predictive value), albeit at the cost of large peak memory requirements [<xref ref-type="bibr" rid="CR12">12</xref>]. Since fastp recently also demonstrated high performance in adapter trimming, similar in range to trimmomatic [<xref ref-type="bibr" rid="CR6">6</xref>], we also assessed its time and memory requirements. We ran all tools on dataset 3 (see Table <xref rid="Tab3" ref-type="table">3</xref>), once on the forward reads representing single-end data and once on both forward and reverse reads representing a paired-end dataset. The time spent for both compressed and uncompressed output is shown in Fig. <xref rid="Fig5" ref-type="fig">5</xref>. FastqPuri’s trimFilter(PE) was substantially faster than fastp and trimmomatic for both single-end and paired-end data, with running times of 4-22% of the ones of trimmomatic. For bz2 files, the speed-up was most pronounced and trimFilter needed only 4% of the time of trimmomatic to process a single-end read file. The peak memory used by trimmomatic was about 32 GB, for fastp it was between 750 MB and around 1 GB, while trimFilter(PE) needed only between 8 and 9 MB, which is less than 3% of the peak memory of trimmomatic. Thus, <bold>FastqPuri</bold> outperformed fastp and trimmomatic in both consumed time and peak memory usage.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Run times (user plus CPU time in seconds) of <bold>FastqPuri</bold>’s trimFilter and trimFilterPE to remove adapter sequences versus fastp and trimmomatic</p></caption><graphic xlink:href="12859_2019_2799_Fig5_HTML" id="MO5"/></fig>
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Timings on removing biological contaminations with <bold>FastqPuri</bold> and BioBloom</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">Bloom maker</th><th align="left">Contaminations</th></tr></thead><tbody><tr><td align="left" colspan="3">User time</td></tr><tr><td align="left">FastqPuri</td><td align="left">32m45s</td><td align="left">4m10s</td></tr><tr><td align="left">BioBloom</td><td align="left">41m28s</td><td align="left">2m58s</td></tr><tr><td align="left" colspan="3">CPU time</td></tr><tr><td align="left">FastqPuri</td><td align="left">0m9.2s</td><td align="left">0m4.4s</td></tr><tr><td align="left">BioBloom</td><td align="left">0m7.1s</td><td align="left">0m5.4s</td></tr><tr><td align="left" colspan="3">Peak mem</td></tr><tr><td align="left">FastqPuri</td><td align="left">5.78GB</td><td align="left">3.24GB</td></tr><tr><td align="left">BioBloom</td><td align="left">3.24GB</td><td align="left">3.24GB</td></tr></tbody></table><table-wrap-foot><p>‘Bloom maker’ refers to generating the bloom filter, ‘Contaminations’ refers to classifying the reads using the bloom filter. Peak mem stands for peak memory usage</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Datasets used for benchmarking</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Dataset</th><th align="left">Data origin</th><th align="left">Species</th><th align="left">Number of reads</th><th align="left">Read length (bp)</th></tr></thead><tbody><tr><td align="left">Dataset 1</td><td align="left">this study</td><td align="left"><italic>Homo sapiens</italic></td><td align="left">51 559 773</td><td align="left">100</td></tr><tr><td align="left">Dataset 2</td><td align="left">this study</td><td align="left"><italic>Arabidopsis thaliana</italic></td><td align="left">18 858 554</td><td align="left">2 x 100</td></tr><tr><td align="left">Dataset 3</td><td align="left">RNA-QC-Chain [<xref ref-type="bibr" rid="CR20">20</xref>]</td><td align="left"><italic>Nannochloropsis oceanica</italic></td><td align="left">7 045 705</td><td align="left">2 x 100</td></tr><tr><td align="left">Dataset 4</td><td align="left">SRR1216135 (SRA run)</td><td align="left"><italic>Homo sapiens</italic></td><td align="left">10 908 030</td><td align="left">2 x 100</td></tr><tr><td align="left">Dataset 5</td><td align="left">simulated, this study</td><td align="left"><italic>Homo sapiens</italic> + <italic>Mus musculus</italic></td><td align="left">6 034 700</td><td align="left">100</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec14">
        <title>FastqPuri efficiently filters contaminations with the tree method</title>
        <p>We ran trimFilter on a human RNA-seq dataset (dataset 1) and trimFilterPE on a microalgae (Nannochlorpsis oceanica) dataset (dataset 3), searching for human rRNA contamination. We ran RNA-QC-Chain on the same datasets, as this tool specifically identifies and removes rRNA. The time taken and peak memory usage of both tools on the two datasets is shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref>. FastqPuri’s trimFilter(PE) clearly outperformed RNA-QC-Chain for both fastq and compressed input formats in terms of time (upper panel) and peak memory (lower panel) usage. In dataset 1, trimFilter detected 1 334 045 rRNA reads while RNA-QC-Chain found only 192 839 reads which were predicted to originate from 28 S rRNA transcripts. RNA-QC-Chain searches against an in-built database of 16/18S and 23/28S sequences, while we used the complete human rRNA gene cassette for filtering. Therefore, it is highly likely that RNA-QC-Chain missed many sequence reads originating from human rRNA.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Run times (user plus CPU time in seconds) and memory usage (in GB) of <bold>FastqPuri</bold>’s trimFilter and RNA-QC-Chain to remove reads from human rRNA transcripts</p></caption><graphic xlink:href="12859_2019_2799_Fig6_HTML" id="MO6"/></fig></p>
        <p>In dataset 3, FastqPuri attributed 8 519 sequence reads to human rRNA transcripts, while RNA-QC-Chain predicted 21 012 transcripts derived from 28 S rRNA and 18 626 reads from 18 S rRNA. This difference can again be explained by the different reference sequences being used to detect rRNA contamination.</p>
      </sec>
      <sec id="Sec15">
        <title>Filtering contaminations with the bloom filter method are on an equal level with existing methods</title>
        <p>We compared the computer performance of <bold>FastqPuri</bold> with BioBloom [<xref ref-type="bibr" rid="CR7">7</xref>] for the bloom filter creation and removal of long contaminating sequences. First we simulated a contaminated human dataset by sampling reads from the human transcriptome and adding simulated reads from the mouse transcriptome (details in <xref rid="Sec17" ref-type="sec">Methods</xref>). Then, we created a bloom filter on the mouse genome to filter out the contaminating mouse reads. The performance and memory peak usage of creating the bloom filter and classifying reads as contamination are summarized in Table <xref rid="Tab2" ref-type="table">2</xref>. <bold>FastqPuri</bold> was faster in generating the bloom filter, but slower in classifying reads than BioBloom. Since making the bloom filter took longer than classifying the reads, <bold>FastqPuri</bold> was faster when summing up the time of these two steps. In terms of peak memory usage, BioBloom used less memory than <bold>FastqPuri</bold> when generating the bloom filter, and the same peak memory when classifying reads. In terms of sensitivity and specificity of <bold>FastqPuri</bold> and BioBloom, both methods performed equally well, with <bold>FastqPuri</bold> being slightly better in terms of sensitivity (0.998 versus 0.993) and BioBloom in terms of specificity (0.932 versus 0.937).</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec16" sec-type="discussion">
    <title>Discussion</title>
    <p>RNA-seq is currently widely used to assess transcript and gene expression levels. Fast transcript counting methods render sequence data quality control and preprocessing the most time demanding steps in data analysis. Moreover, since transcript counting methods such as salmon and kallisto do not take quality scores into account when searching k-mers in reads, sensible quality-control is necessary. <bold>FastqPuri’s</bold> novel quality plots allow the user to make informed choices about quality filtering and data discarded at different quality thresholds. The QC report generated by <bold>FastqPuri</bold> is most informative on Illumina sequence data containing tile information in the sequence name. If this is missing, plots showing qualities per tile are omitted. <bold>FastqPuri</bold> can also process long reads. Read length longer than 400 nt require passing the maximum read length while compiling <bold>FastqPuri</bold>. For read length of several kilobases, however, it might be inconvenient to inspect the plots per base position.</p>
    <p>We compared <bold>FastqPuri</bold> with existing tools, although none of them covered all steps provided by <bold>FastqPuri</bold>. We focused our benchmarkings on tools that were designed to preprocess RNA-seq data, as this was also our intention. Benchmarking against all available tools for each of the individual steps downstream of QC was infeasible, so we focused on the most popular and most efficient ones (cutadapt, fastp, and trimmomatic). We found that the <bold>FastqPuri</bold> modules for quality control and sequence filtering outperformed existing tools in terms of comprehensiveness, versatility and computational efficiency. For example, <bold>FastqPuri</bold> was the fastest tool to generate a QC report on bz2 files and had the lowest peak memory usage for all input formats. Summarizing over different quality score and compression formats, <bold>FastqPuri</bold> was significantly faster than existing tools in generating QC plots.</p>
    <p><bold>FastqPuri</bold> was substantially faster and more memory-efficient than fastp and trimmomatic in removing adapter sequences, while it can also search for and remove reads stemming from contaminating loci or species, such as rRNA or host and pathogen contaminations.</p>
    <p>Searching for rRNA contaminations, <bold>FastqPuri</bold> outperformed the Hidden Markov Model approach used in RNA-QC-Chain and allowed more flexibility as the user can decide which sequences (in terms of species and locus) should be filtered out. <bold>FastqPuri</bold> also more efficiently removed contaminating reads, e.g. reads from anywhere within the rRNA while RNA-QC-Chain only searched for particular regions (16/18S, 23/28S). Therefore, RNA-QC-Chain might be better suited to identify potential contaminating species than removing the contaminating sequences from the data. Using the BLOOM method to filter out potential contaminations using larger-sized files (e.g. genomes), <bold>FastqPuri</bold> was faster than BioBloom tools in generating the bloom filter but slightly slower in classifying sequences. Because generating the bloom filter takes more than 90% of the time, the summed time of both steps was shorter for <bold>FastqPuri</bold>. We chose a very challenging scenario by selecting mouse as contaminating (e.g. host) species for a human dataset. Because of high sequence similarity between the two species, perfect separation of the reads cannot be expected, and both tools performed equally well in terms of sensitivity and specificity.</p>
    <p>For a complete preprocessing run on dataset 3, <bold>FastqPuri</bold> (with initial QC, adapter and low quality base removal, removal of reads originating from human rRNA, QC on filtered fastq file and a summary QC report), took 3 min and 3 s. In comparison, sequentially running FastQC, trimmomatic, RNA-QC-chain, and again FastQC on the filtered reads took more than 20 times longer (72 min and 15 s) and used a higher peak memory. Even if the time-consuming step of filtering rRNA was omitted, FastqPuri was still substantially faster, using 66 s, while the pipeline of existing tools took 3 min and 27 s. Therefore, we anticipate that <bold>FastqPuri</bold> will facilitate QC and preprocessing of RNA-seq data and speed-up the analysis of both small and large datasets.</p>
  </sec>
  <sec id="Sec17">
    <title>Methods</title>
    <sec id="Sec18">
      <title>Benchmarking details</title>
      <sec id="Sec19">
        <title>Data sets</title>
        <p>We benchmarked <bold>FastqPuri</bold> and existing tools with the following datasets: Dataset 1: single end reads generated from a human RNA sample. Dataset 2: paired end reads from <italic>Arabidopsis thaliana</italic>. Dataset 3: paired end reads from <italic>Nannochloropsis oceanica</italic> [<xref ref-type="bibr" rid="CR20">20</xref>]. Dataset 4: paired end reads from <italic>Homo sapiens</italic> (SRA run SRR1216135). Dataset 5: simulated reads from <italic>Homo sapiens</italic> and <italic>Mus musculus</italic>. We generated 20 reads of length 100 nt for each transcript of the human and mouse transcriptomes (ensembl GRCh38 (human) and GRCm38 (mouse)) using the R package ‘polyester’ [<xref ref-type="bibr" rid="CR10">10</xref>]. This resulted in approximately 2.3 million mouse and 3.7 million human reads which were assigned an arbitrary quality string with individual Q scores being larger than 27, and concatenated and shuffled before generating a fastq file. The mouse reads were considered contamination. The core properties of the datasets used for benchmarking are shown in Table <xref rid="Tab3" ref-type="table">3</xref>.</p>
      </sec>
      <sec id="Sec20">
        <title>Tool settings</title>
        <p>Tools were run with default parameters unless stated otherwise. Trimmomatic adapter trimming was performed with the adapter sequences provided by trimmomatic (TruSeq2-PE.fa for paired end data, TruSeq2-SE.fa for single end data). Trimmomatic was run with the following mismatch and score settings: ‘ILLUMINACLIP:TruSeq2-PE.fa:2:8:8’ for paired end data and ‘ILLUMINACLIP:TruSeq2-SE.fa:2:8:8’ for single-end data. Fastp was run with adapter filtering disabled when benchmarking its QC performance, and with the Illumina PCR primer ‘PCR_Primer2_rc’ for read 1 and ‘PCR_Primer1_rc’ for read 2 from the TruSeq2-PE.fa file provided by trimmomatic when benchmarking adapter trimming. In the later case, we disabled quality filtering. trimFilterPE of <bold>FastqPuri</bold> was run with the same adapter sequences as trimmomatic, allowing at most two mismatches and requiring an alignment score of at least 8 (TruSeq2-PE.fa:TruSeq2-PE.fa:2:8).</p>
        <p>To filter reads originating from rRNA transcripts, we took the complete human ribosomal repeating unit (GenBank accession U13369.1), removed lines that contained non-{A, C, G, T} characters (8 out of 616 lines) and invoked <bold>FastqPuri</bold>’s trimFilterPE with —method TREE providing the rRNA sequence, a score threshold of 0.4 and an l-mer length of 25.</p>
        <p>RNA-QC-chain searches against an internal database of rRNA sequences and because we wanted to remove human rRNA, we only searched against the 18S and 28S parts of the database.</p>
        <p>To filter contaminations with the bloom filter approach, bloom filters of the mouse genome (mm10) were generated with a false-positive rate of 0.0075 and k-mers of length 25 nt for both biobloommaker (BioBloom) and makeBloom (<bold>FastqPuri</bold>). Reads of the simulated dataset were then classified setting the score threshold at 0.15 for both tools.</p>
      </sec>
      <sec id="Sec21">
        <title>Computing infrastructure</title>
        <p>All tests were run on a Debian Linux Server, with Linux kernel version 3.16.43–2+deb8u2, with 2 Intel(R) Xeon(R) X5650 CPUs (12 cores, 2.67GHz) and 144GB RAM.</p>
        <p>Time was measured using the ‘time’ command of bash. If not stated otherwise, we reported the sum of user and system (CPU) time. Peak memory usage of FastqPuri, fastp, RNA-QC-chain, and AfterQC was assessed with valgrind [<xref ref-type="bibr" rid="CR14">14</xref>]. Tools that used scripts to invoke their executables were profiled with a custom script based on monitoring memory usage of the active process with the bash command ‘ps’ every second. We used the later approach for FastQC, SolexaQA++, trimmomatic, and BioBloomTools.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec22" sec-type="conclusion">
    <title>Conclusions</title>
    <p>We presented a light-weight high-throughput sequence data preprocessing tool, <bold>FastqPuri</bold>. <bold>FastqPuri</bold> was designed for RNA-seq data intended for transcript counting, but it is also applicable to other kinds of fastq data. <bold>FastqPuri</bold> is fast and has a low memory footprint, can be used in pipelines or stand-alone, combines all preprocessing steps needed to apply transcript counting: QC, adapter and quality filtering and filtering biological contaminations as well as QC on the filtered data. <bold>FastqPuri</bold> provides a range of useful graphics, including novel ones, to make informed choices for sequence quality-based read trimming and filtering, which is performed by <bold>FastqPuri</bold> subsequently. In comparison to existing tools which cover parts of the steps performed by <bold>FastqPuri</bold>, <bold>FastqPuri</bold> was more time and memory efficient over a range of currently used quality encoding and compression formats. Therefore, <bold>FastqPuri</bold> widens the bottleneck of time- and memory consuming preprocessing steps in RNA-seq data analysis, allowing higher throughput for large datasets and speeding up preprocessing for all datasets. An archive of FastqPuri is provided in Additional file <xref rid="MOESM2" ref-type="media">2</xref>.</p>
  </sec>
  <sec id="Sec23">
    <title>Availability and requirements</title>
    <p>
      <bold>Project name:</bold>
      <bold>FastqPuri</bold>
    </p>
    <p><bold>Project home page:</bold><ext-link ext-link-type="uri" xlink:href="https://github.com/jengelmann/FastqPuri">https://github.com/jengelmann/FastqPuri</ext-link><bold>Programming language:</bold> C, R (for the html reports).</p>
    <p><bold>Operating systems:</bold> Unix/Linux, Mac OS, OpenBSD.</p>
    <p><bold>Licence:</bold> GPL v3.</p>
    <p><bold>Any restrictions to use by non-academics:</bold> none.</p>
    <p><bold>Other requirements:</bold> cmake (at least version 2.8), a C compiler supporting the c11 standard (change the compiler flags otherwise), pandoc (optional), Rscript (optional), R packages pheatmap, knitr, rmarkdown (optional).</p>
    <p><bold>Container implementations:</bold> images for containers are available in docker and singularity hub, respectively. Their usage is documented in the README.md on github.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional files</title>
    <sec id="Sec24">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2019_2799_MOESM1_ESM.pdf">
            <label>Additional file 1</label>
            <caption>
              <p>Supplementary text with details on feature implementation and benchmarking. (PDF 758 kb)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2019_2799_MOESM2_ESM.gz">
            <label>Additional file 2</label>
            <caption>
              <p>Archive of <bold>FastqPuri</bold>. Archive containing all files needed to install and run <bold>FastqPuri</bold> v1.0.6. Date stamp March 22, 2019. (GZ 47,819 kb)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p><sup>a</sup>added later</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank Maria Attenberger and Phu Tran for proof-reading the user manual and testing the software. Many thanks to Christian Kohler for helpful suggestions related to docker container usage.</p>
    <sec id="d29e2005">
      <title>Funding</title>
      <p>This work was supported by the German Federal Ministry of Education and Research (Bundesministerium für Bildung und Forschung) [grant number 031A428A]. The funding body played no role in the design of the study, collection, analysis, and interpretation of the data and in writing the manuscript.</p>
    </sec>
    <sec id="d29e2010" sec-type="data-availability">
      <title>Availability of data and materials</title>
      <p>Dataset 1 (Homo sapiens) is accessible at: <ext-link ext-link-type="uri" xlink:href="http://doi.org/10.4121/uuid:9d88ee8d-ceda-4d7e-8109-1cfcd2892632">http://doi.org/10.4121/uuid:9d88ee8d-ceda-4d7e-8109-1cfcd2892632</ext-link>. Dataset 2 (Arabidopsis thaliana) is accessible at: <ext-link ext-link-type="uri" xlink:href="http://doi.org/10.4121/uuid:b1c4ee4f-9b88-493f-81d8-4040f0d1af25">http://doi.org/10.4121/uuid:b1c4ee4f-9b88-493f-81d8-4040f0d1af25</ext-link>. Dataset 3 (Nannochloropsis oceanica) can be accessed from the website of RNA-QC-chain (<ext-link ext-link-type="uri" xlink:href="http://bioinfo.single-cell.cn/Released_Software/rna-qc-chain/data.tar.gz">http://bioinfo.single-cell.cn/Released_Software/rna-qc-chain/data.tar.gz</ext-link>). Dataset 4 (Homo sapiens) is available from NCBI’s SRA (Sequence Read Archive), run number SRR1216135. Dataset 5 (simulated data) is accessible at: <ext-link ext-link-type="uri" xlink:href="http://doi.org/10.4121/uuid:f8f12fa1-ea24-4074-a231-89b075d13d28">http://doi.org/10.4121/uuid:f8f12fa1-ea24-4074-a231-89b075d13d28</ext-link>.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>PPR and JCE conceived and designed <bold>FastqPuri</bold>. PPR implemented the tool. CL evaluated the software. PPR and JCE wrote the manuscript. All authors have read and approved the final version of the manuscript.</p>
  </notes>
  <notes notes-type="COI-statement">
    <sec>
      <title>Ethics approval and consent to participate</title>
      <p>Human cell sampling has been approved by the ethics committee of the University Medical Center Göttingen (Ethikkommission der Universitätsmedizin Göttingen), reference number 16/5/18An. All human participants granted written, informed consent.</p>
    </sec>
    <sec>
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec>
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec>
      <title>Publisher’s Note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">Andrews S. FastQC: a quality control tool for high throughput sequence data. 2010. 14.05.2018 Available online at <ext-link ext-link-type="uri" xlink:href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc">http://www.bioinformatics.babraham.ac.uk/projects/fastqc</ext-link>. Accessed 14 May 2018.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ballenghien</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Faivre</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Galtier</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Patterns of cross-contamination in a multispecies population genomic project: detection, quantification, impact, and solutions</article-title>
        <source>BMC Biol</source>
        <year>2017</year>
        <volume>15</volume>
        <fpage>25</fpage>
        <pub-id pub-id-type="doi">10.1186/s12915-017-0366-6</pub-id>
        <?supplied-pmid 28356154?>
        <pub-id pub-id-type="pmid">28356154</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bolger</surname>
            <given-names>Anthony M.</given-names>
          </name>
          <name>
            <surname>Lohse</surname>
            <given-names>Marc</given-names>
          </name>
          <name>
            <surname>Usadel</surname>
            <given-names>Bjoern</given-names>
          </name>
        </person-group>
        <article-title>Trimmomatic: a flexible trimmer for Illumina sequence data</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>15</issue>
        <fpage>2114</fpage>
        <lpage>2120</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu170</pub-id>
        <?supplied-pmid 4103590?>
        <pub-id pub-id-type="pmid">24695404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bray</surname>
            <given-names>Nicolas L</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>Harold</given-names>
          </name>
          <name>
            <surname>Melsted</surname>
            <given-names>Páll</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>Lior</given-names>
          </name>
        </person-group>
        <article-title>Near-optimal probabilistic RNA-seq quantification</article-title>
        <source>Nature Biotechnology</source>
        <year>2016</year>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>525</fpage>
        <lpage>527</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3519</pub-id>
        <?supplied-pmid 27043002?>
        <pub-id pub-id-type="pmid">27043002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <mixed-citation publication-type="other">Chen S, Huang T, Zhou Y, Han Y, Xu M, Gu J. AfterQC: automatic filtering, trimming, error removing and quality control for fastq data. BMC Bioinformatics. 2017; 18(3):80. 10.1186/s12859-017-1469-3.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>Shifu</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Yanqing</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Yaru</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>Jia</given-names>
          </name>
        </person-group>
        <article-title>fastp: an ultra-fast all-in-one FASTQ preprocessor</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>17</issue>
        <fpage>i884</fpage>
        <lpage>i890</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty560</pub-id>
        <?supplied-pmid 30423086?>
        <pub-id pub-id-type="pmid">30423086</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chu</surname>
            <given-names>Justin</given-names>
          </name>
          <name>
            <surname>Sadeghi</surname>
            <given-names>Sara</given-names>
          </name>
          <name>
            <surname>Raymond</surname>
            <given-names>Anthony</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>Shaun D.</given-names>
          </name>
          <name>
            <surname>Nip</surname>
            <given-names>Ka Ming</given-names>
          </name>
          <name>
            <surname>Mar</surname>
            <given-names>Richard</given-names>
          </name>
          <name>
            <surname>Mohamadi</surname>
            <given-names>Hamid</given-names>
          </name>
          <name>
            <surname>Butterfield</surname>
            <given-names>Yaron S.</given-names>
          </name>
          <name>
            <surname>Robertson</surname>
            <given-names>A. Gordon</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>Inanç</given-names>
          </name>
        </person-group>
        <article-title>BioBloom tools: fast, accurate and memory-efficient host species sequence screening using bloom filters</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>23</issue>
        <fpage>3402</fpage>
        <lpage>3404</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu558</pub-id>
        <?supplied-pmid 25143290?>
        <pub-id pub-id-type="pmid">25143290</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <mixed-citation publication-type="other">Cox MP, Peterson DA, Biggs PJ. SolexaQA: At-a-glance quality assessment of Illumina second-generation sequencing data. BMC Bioinformatics. 2010; 11(1):485. 10.1186/1471-2105-11-485.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>DeLuca</surname>
            <given-names>David S.</given-names>
          </name>
          <name>
            <surname>Levin</surname>
            <given-names>Joshua Z.</given-names>
          </name>
          <name>
            <surname>Sivachenko</surname>
            <given-names>Andrey</given-names>
          </name>
          <name>
            <surname>Fennell</surname>
            <given-names>Timothy</given-names>
          </name>
          <name>
            <surname>Nazaire</surname>
            <given-names>Marc-Danie</given-names>
          </name>
          <name>
            <surname>Williams</surname>
            <given-names>Chris</given-names>
          </name>
          <name>
            <surname>Reich</surname>
            <given-names>Michael</given-names>
          </name>
          <name>
            <surname>Winckler</surname>
            <given-names>Wendy</given-names>
          </name>
          <name>
            <surname>Getz</surname>
            <given-names>Gad</given-names>
          </name>
        </person-group>
        <article-title>RNA-SeQC: RNA-seq metrics for quality control and process optimization</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>11</issue>
        <fpage>1530</fpage>
        <lpage>1532</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts196</pub-id>
        <?supplied-pmid 22539670?>
        <pub-id pub-id-type="pmid">22539670</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Frazee</surname>
            <given-names>Alyssa C.</given-names>
          </name>
          <name>
            <surname>Jaffe</surname>
            <given-names>Andrew E.</given-names>
          </name>
          <name>
            <surname>Langmead</surname>
            <given-names>Ben</given-names>
          </name>
          <name>
            <surname>Leek</surname>
            <given-names>Jeffrey T.</given-names>
          </name>
        </person-group>
        <article-title>Polyester: simulating RNA-seq datasets with differential transcript expression</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>17</issue>
        <fpage>2778</fpage>
        <lpage>2784</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv272</pub-id>
        <?supplied-pmid 25926345?>
        <pub-id pub-id-type="pmid">25926345</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <mixed-citation publication-type="other">Hartley SW, Mullikin JC. QoRTs: a comprehensive toolset for quality control and data processing of RNA-Seq experiments. BMC Bioinformatics. 2015; 16(1):224. 10.1186/s12859-015-0670-5.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <mixed-citation publication-type="other">Jiang H, Lei R, Ding S-W, Zhu S. Skewer: a fast and accurate adapter trimmer for next-generation sequencing paired-end reads. BMC Bioinformatics. 2014; 15:182. 10.1186/1471-2105-15-182.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">Martin M. Cutadapt removes adapter sequences from high-throughput sequencing reads. EMBnet.journal. 2011; 17(1). 14.05.2018 <ext-link ext-link-type="uri" xlink:href="http://journal.embnet.org/index.php/embnetjournal/article/view/200">http://journal.embnet.org/index.php/embnetjournal/article/view/200</ext-link>. Accessed 14 May 2018.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <mixed-citation publication-type="other">Nethercote N, Seward J. Valgrind: A framework for heavyweight dynamic binary instrumentation. In: Proceedings of ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI 2007). San Diego: 2007. p. 89–100. 10.1145/1250734.1250746.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patro</surname>
            <given-names>Rob</given-names>
          </name>
          <name>
            <surname>Duggal</surname>
            <given-names>Geet</given-names>
          </name>
          <name>
            <surname>Love</surname>
            <given-names>Michael I</given-names>
          </name>
          <name>
            <surname>Irizarry</surname>
            <given-names>Rafael A</given-names>
          </name>
          <name>
            <surname>Kingsford</surname>
            <given-names>Carl</given-names>
          </name>
        </person-group>
        <article-title>Salmon provides fast and bias-aware quantification of transcript expression</article-title>
        <source>Nature Methods</source>
        <year>2017</year>
        <volume>14</volume>
        <issue>4</issue>
        <fpage>417</fpage>
        <lpage>419</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4197</pub-id>
        <?supplied-pmid 28263959?>
        <pub-id pub-id-type="pmid">28263959</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Petrova</surname>
            <given-names>OE</given-names>
          </name>
          <name>
            <surname>Garcia-Alcalde</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zampaloni</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sauer</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Comparative evaluation of rRNA depletion procedures for the improved analysis of bacterial biofilm and mixed pathogen culture transcriptomes</article-title>
        <source>Sci Rep</source>
        <year>2017</year>
        <volume>7</volume>
        <fpage>41114</fpage>
        <pub-id pub-id-type="doi">10.1038/srep41114</pub-id>
        <?supplied-pmid 28117413?>
        <pub-id pub-id-type="pmid">28117413</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wang</surname>
            <given-names>Liguo</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Shengqin</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Wei</given-names>
          </name>
        </person-group>
        <article-title>RSeQC: quality control of RNA-seq experiments</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>16</issue>
        <fpage>2184</fpage>
        <lpage>2185</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts356</pub-id>
        <?supplied-pmid 22743226?>
        <pub-id pub-id-type="pmid">22743226</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wingett</surname>
            <given-names>SW</given-names>
          </name>
          <name>
            <surname>Andrews</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Fastq screen: A tool for multi-genome mapping and quality control</article-title>
        <source>F1000Research</source>
        <year>2018</year>
        <volume>7</volume>
        <fpage>1338</fpage>
        <pub-id pub-id-type="doi">10.12688/f1000research.15931.2</pub-id>
        <?supplied-pmid 30254741?>
        <pub-id pub-id-type="pmid">30254741</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhao</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>He</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Hoadley</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>Parker</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Hayes</surname>
            <given-names>DN</given-names>
          </name>
          <name>
            <surname>Perou</surname>
            <given-names>CM</given-names>
          </name>
        </person-group>
        <article-title>Comparison of RNA-Seq by poly (A) capture, ribosomal RNA depletion, and DNA microarray for expression profiling</article-title>
        <source>BMC Genomics</source>
        <year>2014</year>
        <volume>15</volume>
        <issue>1</issue>
        <fpage>419</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-15-419</pub-id>
        <?supplied-pmid 24888378?>
        <pub-id pub-id-type="pmid">24888378</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhou</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Su</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Jing</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ning</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>RNA-QC-chain: comprehensive and fast quality control for rna-seq data</article-title>
        <source>BMC Genomics</source>
        <year>2018</year>
        <volume>19</volume>
        <fpage>144</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-018-4503-6</pub-id>
        <?supplied-pmid 29444661?>
        <pub-id pub-id-type="pmid">29444661</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
