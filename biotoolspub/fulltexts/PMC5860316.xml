<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5860316</article-id>
    <article-id pub-id-type="pmid">29036536</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btx461</article-id>
    <article-id pub-id-type="publisher-id">btx461</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>wft4galaxy: a workflow testing tool for galaxy</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Piras</surname>
          <given-names>Marco Enrico</given-names>
        </name>
        <xref ref-type="corresp" rid="btx461-cor1"/>
        <!--<email>marcoenrico.piras@crs4.it</email>-->
        <xref ref-type="aff" rid="btx461-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pireddu</surname>
          <given-names>Luca</given-names>
        </name>
        <xref ref-type="aff" rid="btx461-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zanetti</surname>
          <given-names>Gianluigi</given-names>
        </name>
        <xref ref-type="aff" rid="btx461-aff1"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Hancock</surname>
          <given-names>John</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btx461-aff1">Data Intensive Computing, CRS4 (Center of Advanced Studies, Research and Development in Sardinia), Pula, Italy</aff>
    <author-notes>
      <corresp id="btx461-cor1">To whom correspondence should be addressed. Email: <email>marcoenrico.piras@crs4.it</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>12</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2017-07-24">
      <day>24</day>
      <month>7</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>24</day>
      <month>7</month>
      <year>2017</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>33</volume>
    <issue>23</issue>
    <fpage>3805</fpage>
    <lpage>3807</lpage>
    <history>
      <date date-type="received">
        <day>02</day>
        <month>5</month>
        <year>2017</year>
      </date>
      <date date-type="rev-recd">
        <day>09</day>
        <month>6</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>21</day>
        <month>7</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2017. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2017</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by-nc/4.0/" license-type="cc-by-nc">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btx461.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Workflow managers for scientific analysis provide a high-level programming platform facilitating standardization, automation, collaboration and access to sophisticated computing resources. The Galaxy workflow manager provides a prime example of this type of platform. As compositions of simpler tools, workflows effectively comprise specialized computer programs implementing often very complex analysis procedures. To date, no simple way to automatically test Galaxy workflows and ensure their correctness has appeared in the literature.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>With <monospace>wft4galaxy</monospace> we offer a tool to bring automated testing to Galaxy workflows, making it feasible to bring continuous integration to their development and ensuring that defects are detected promptly. <monospace>wft4galaxy</monospace> can be easily installed as a regular Python program or launched directly as a Docker container—the latter reducing installation effort to a minimum.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Available at <ext-link ext-link-type="uri" xlink:href="https://github.com/phnmnl/wft4galaxy">https://github.com/phnmnl/wft4galaxy</ext-link> under the Academic Free License v3.0.</p>
      </sec>
    </abstract>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Typical bioinformatics analyses involve a number of steps to extract information from various forms of raw data; these analysis procedures are often referred to as <italic>workflows</italic> or <italic>pipelines</italic>. The pattern is so common that a number of <italic>workflow managers</italic> have been created (<xref rid="btx461-B4" ref-type="bibr">Leipzig, 2016</xref>) to provide high-level platforms on which to implement these procedures, supporting simpler and more robust implementations than would be reasonably feasible with simple shell scripting. Thus, with the help of workflow managers it becomes practical to implement ever more complex workflows—in fact, workflows with tens of steps are not uncommon. The increase in complexity is accompanied by an increased risk of defects. At best, these will crash and interrupt an analysis procedure; at worst, they will produce subtly wrong results which may only be detected much later. Therefore, given the risks, it seems wise to adopt a mitigation strategy: it is the authors’ opinion the workflow development should be as rigorous as any other kind of software development, especially in light of the growing trend to release and share ‘standard’ workflows. Automated workflow testing then should become an important part of the development process—one which as of yet has not received a lot of attention.</p>
    <p>In this work, we present <monospace>wft4galaxy</monospace>, the WorkFlow Testing tool for the Galaxy data analysis platform (<xref rid="btx461-B1" ref-type="bibr">Afgan <italic>et al.</italic>, 2016</xref>). To the best of the authors’ knowledge, <monospace>wft4galaxy</monospace> is the first published automatic workflow testing tool for Galaxy. <monospace>wft4galaxy</monospace> works based on the unit testing model: a test case is specified as a set of input datasets and parameters, expected output datasets and the workflow itself; the workflow is run and the actual and expected outputs are compared. The testing tool uses Galaxy’s RESTful API through the object-orienterd interface of the BioBlend package (<xref rid="btx461-B5" ref-type="bibr">Leo <italic>et al.</italic>, 2014</xref>) to automate the entire test execution operation as well as much of the work required to compose the test cases. Of note, our tool is currently used in production within the PhenoMeNal project (<ext-link ext-link-type="uri" xlink:href="http://phenomenal-h2020.eu">http://phenomenal-h2020.eu</ext-link>) to continuously test the workflows integrated in the platform.</p>
  </sec>
  <sec>
    <title>2 Materials and methods </title>
    <p>The testing model provided by <monospace>wft4galaxy</monospace> is centered around <italic>test cases</italic>. Each test case defines a workflow and a specific scenario which is to be tested. It contains: the path of the workflow definition file; optionally, the parameters of the various workflow steps; the datasets to be used as workflow inputs; and, finally, expected output datasets. Any number of test cases are collected in a YAML file such as the one shown in Listing 1.</p>
    <p>The test definition file is the input for the <monospace>wft4galaxy</monospace><italic>test runner</italic>, which automatically executes the entire collection of tests. For each test, the runner connects to an available Galaxy instance provided by the user and then, through the Galaxy API: (i) uploads the workflow; (ii) creates a new Galaxy history; (iii) uploads all the input datasets; (iv) runs the workflow; and (v) downloads output datasets. The runner then compares the output to the expected datasets using a comparator function (by default, simple file equality). Finally, all test results are collected and reported.</p>
    <p><bold>Listing 1.</bold> Example of “Test definition file”</p>
    <p>workflows:  test_case:   file: “workflow.ga”   params:    3:     “respC”: “gender”   inputs:    “DataMatrix”: “input/dataMatrix.tsv”   expected:    output:     file: “expected/Univariate_variableMetadata.tsv”     comparator: “comparators.csv_srcl”</p>
    <p>As an aid to users having to write test definitions, <monospace>wft4galaxy</monospace> provides a template generator: this tool creates a blank definition and a well-structured directory to contain a test suite. <monospace>wft4galaxy</monospace> offers flexibility in the selection of appropriate comparator functions. The default one simply verifies that the files are identical. However, this method is not always appropriate—consider, for instance situations where an analysis may have multiple solutions of comparable quality or cases that are subject to some acceptable degree of round-off error. To handle these cases <monospace>wft4galaxy</monospace> allows the user to override the default behaviour with customized <italic>comparator functions</italic>, which must be simple Python callables with the signature shown in Listing 2. When specified in a test definition, the custom comparator is automatically loaded and invoked by the <monospace>wft4galaxy</monospace> framework to decide whether or not the generated output is acceptable for the test. The <monospace>wft4galaxy</monospace> framework provides a growing package of ready-made comparators (called <monospace>wft4galaxy.comparators</monospace>), which also includes the default base_comparator. Of course, users can also implement their own comparator functions for their tests.</p>
    <p><bold>Listing 2.</bold> Signature of a <italic>comparator</italic> function.</p>
    <p><bold>def</bold> my_comparator(generated_file_path, expected_file_path): <italic>“““Return True if the two files are “equal”; False otherwise.”””</italic></p>
    <p>As the individual tests are executed, <monospace>wft4galaxy</monospace> prints to standard output information about the tests in progress. The format of the output is modelled after the one presented by the Python Unit Test Framework—i.e. for every test case, <monospace>wft4galaxy</monospace> prints whether it passed or failed. For debugging, more detailed logging can be activated; users can also choose to retain all output files produced by a test run for further analysis and debugging (by default, as soon as the test completes all its datasets and Galaxy histories are deleted).</p>
    <p><bold>Automatic test case generation.</bold> The <monospace>wft4galaxy</monospace> framework further simplifies the creation of workflow test cases through the <monospace>wft4galaxy-wizard</monospace>, which generates ‘ready-to-run’ workflow test cases from existing Galaxy histories. With the wizard, the steps to create a working test case are reduced to the following. First, the user creates a new history with the required input datasets. Then, the user runs the workflow, after setting any required tool parameters. The workflow should produce a set of new output datasets within the same history. Now, assuming that the workflow has produced correct results, the history can be transformed into a test case by running the <monospace>wft4galaxy-wizard</monospace>. The wizard will inspect the history to extract and store the underlying workflow (i.e. its <italic>.ga</italic> definition file) and all its datasets (both input and output) in a new test directory. The suite definition file is then automatically generated: it will contain a single test case configured to execute the extracted workflow on the input datasets and compare the generated datasets to the outputs of the recorded workflow run.</p>
    <p><bold>Programmatic Usage</bold>. To integrate <monospace>wft4galaxy</monospace> with third-party tools or for elaborate automation requirements, it can also be used programmatically. Its API is organized around two main packages: <monospace>wft4galaxy</monospace>.core and <monospace>wft4galaxy</monospace>.wrapper. The former contains the core logic of the test framework, exposing an Object-Oriented (OO) API for defining and running test cases and test suites programmatically (Listing 3 shows an example of its usage). On the other hand, the latter package contains an OO representation of Galaxy workflows and histories providing a simplified way to inspect inputs, parameters and outputs of tested Galaxy workflows and histories.</p>
    <p><bold>Listing 3.</bold> Programmatic test case definition and execution.</p>
    <p><bold>from</bold> wft4galaxy.core <bold>import</bold> WorkflowTestCase workflow_filename = “workflow.ga” inputs = {“InputText”: {“file”: “input”}} expected = {“OutputText”: {“file”: “expected_outputs”}} test_case = WorkflowTestCase(base_path, workflow_filename,              inputs, expected_outputs) test_result = test_case.run(enable_logger = True) test_result.check_output(“OutputText”)</p>
    <p><bold>Docker integration.</bold><monospace>wft4galaxy</monospace> can easily run within a Docker container, completely avoiding any installation hassles. This feature is particularly useful when using continuous integration (CI) services such as Travis CI and Jenkins, where users benefit from not using root privileges for installing new software packages. To simplify the usage of the <monospace>wft4galaxy</monospace> Docker image, we provide the <monospace>wft4galaxy-docker</monospace> script, which configures the container execution to use <monospace>wft4galaxy</monospace> as if it were locally installed. The script can be run standalone, after simply downloading it from the <monospace>wft4galaxy</monospace> GitHub repository.</p>
  </sec>
  <sec>
    <title>3 Conclusion</title>
    <p><monospace>wft4galaxy</monospace> is a tool to simplify and automate workflow tests. It supports the adoption of ‘unit testing’ and continuous integration into the workflow development and maintenance process. Its native support for Docker enables easy integration with specialized CI systems, such as Jenkins. Indeed, within the PhenoMeNal project, Jenkins with <monospace>wft4galaxy</monospace> are used to test complex workflows such as the ones described by De Atauri et al. (<xref rid="btx461-B3" ref-type="bibr">De Atauri <italic>et al.</italic>, 2016</xref>). Although in its current version <monospace>wft4galaxy</monospace> is tied to the Galaxy platform, in the future we would like to investigate the feasibility of extending it to work with other workflow management systems and, in particular, implementations of the Common Workflow Language (<xref rid="btx461-B2" ref-type="bibr">Amstutz <italic>et al.</italic>, 2016</xref>). The full documentation for wft4galaxy is available at <ext-link ext-link-type="uri" xlink:href="http://wft4galaxy.readthedocs.io">http://wft4galaxy.readthedocs.io</ext-link>.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgement</title>
    <p>The authors would like to thank the fellow members of the PhenoMeNal team for their valuable feedback.</p>
    <sec>
      <title>Funding</title>
      <p>This work was partially supported by the European Commission’s Horizon2020 programme under the PhenoMeNal project (grant agreement number 654241) and by the Region of Sardinia under project ABLE. </p>
      <p><italic>Conflict of Interest</italic>: none declared.</p>
    </sec>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="btx461-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Afgan</surname><given-names>E.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update</article-title>. <source>Nucleic Acids Res</source>., <volume>44</volume>, gkw343.</mixed-citation>
    </ref>
    <ref id="btx461-B2">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Amstutz</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) Common Workflow Language, v1. 0. figshare.</mixed-citation>
    </ref>
    <ref id="btx461-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>De Atauri</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) Workflows For Fluxomics In The Framework Of Phenomenal Project.</mixed-citation>
    </ref>
    <ref id="btx461-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Leipzig</surname><given-names>J.</given-names></name></person-group> (<year>2016</year>) 
<article-title>A review of bioinformatic pipeline frameworks</article-title>. <source>Brief. Bioinf</source>., <volume>18</volume>, bbw020.</mixed-citation>
    </ref>
    <ref id="btx461-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Leo</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>BioBlend.objects: Metacomputing with galaxy</article-title>. <source>Bioinformatics</source>, <volume>30</volume>, <fpage>2816</fpage>–<lpage>2817</lpage>.<pub-id pub-id-type="pmid">24928211</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
