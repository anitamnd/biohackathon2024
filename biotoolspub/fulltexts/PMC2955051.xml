<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2955051</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-11-474</article-id>
    <article-id pub-id-type="pmid">20860790</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-11-474</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ModuleOrganizer: detecting modules in families of transposable elements</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Tempel</surname>
          <given-names>Sebastien</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>sebastien.tempel@ibisc.univ-evry.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Rousseau</surname>
          <given-names>Christine</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>c.rousseau3@libertysurf.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A3">
        <name>
          <surname>Tahi</surname>
          <given-names>Fariza</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>fariza.tahi@ibisc.univ-evry.fr</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A4">
        <name>
          <surname>Nicolas</surname>
          <given-names>Jacques</given-names>
        </name>
        <xref ref-type="aff" rid="I3">3</xref>
        <email>jacques.nicolas@irisa.fr</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>IBISC, Tour Evry 2, 523, place des terrasses del'agora, 91000 Evry, France</aff>
    <aff id="I2"><label>2</label>INP-ENSAT, Avenue de l'agrobiopole 31326 Castanet tolosan, France</aff>
    <aff id="I3"><label>3</label>IRISA-INRIA, Campus de Beaulieu, bât 12, 35042 Rennes cedex, France</aff>
    <pub-date pub-type="collection">
      <year>2010</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>22</day>
      <month>9</month>
      <year>2010</year>
    </pub-date>
    <volume>11</volume>
    <fpage>474</fpage>
    <lpage>474</lpage>
    <history>
      <date date-type="received">
        <day>23</day>
        <month>4</month>
        <year>2010</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>9</month>
        <year>2010</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright ©2010 Tempel et al; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2010</copyright-year>
      <copyright-holder>Tempel et al; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1471-2105/11/474"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>Most known eukaryotic genomes contain mobile copied elements called transposable elements. In some species, these elements account for the majority of the genome sequence. They have been subject to many mutations and other genomic events (copies, deletions, captures) during transposition. The identification of these transformations remains a difficult issue. The study of families of transposable elements is generally founded on a multiple alignment of their sequences, a critical step that is adapted to transposons containing mostly localized nucleotide mutations. Many transposons that have lost their protein-coding capacity have undergone more complex rearrangements, needing the development of more complex methods in order to characterize the architecture of sequence variations.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>In this study, we introduce the concept of a <italic>transposable element module</italic>, a flexible motif present in at least two sequences of a family of transposable elements and built on a succession of maximal repeats. The paper proposes an assembly method working on a set of exact maximal repeats of a set of sequences to create such modules. It results in a graphical view of sequences segmented into modules, a representation that allows a flexible analysis of the transformations that have occurred between them. We have chosen as a demonstration data set in depth analysis of the transposable element Foldback in <italic>Drosophila melanogaster</italic>. Comparison with multiple alignment methods shows that our method is more sensitive for highly variable sequences. The study of this family and the two other families AtREP21 and SIDER2 reveals new copies of very different sizes and various combinations of modules which show the potential of our method.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>ModuleOrganizer is available on the Genouest bioinformatics center at <ext-link ext-link-type="uri" xlink:href="http://moduleorganizer.genouest.org">http://moduleorganizer.genouest.org</ext-link></p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>A number of studies have described the search of repeated elements in a genome. However, except for phylogeny, few studies systematically analyze the relationships and variations between the copies of a given family of repeats.</p>
    <p>TEs (Transposable elements) are present in nearly all genomes that have been studied to date and in some cases represent most of the genome [<xref ref-type="bibr" rid="B1">1</xref>]. These transposable elements move or are copied from one genomic location to another [<xref ref-type="bibr" rid="B2">2</xref>]. TEs are characterized and classified on the basis of terminal or subterminal remarkable structures or of their protein-coding capacity. TEs that encode the proteins involved in the amplification mechanism are called autonomous. Two types of amplification mechanisms define two classes of transposable elements. Class I elements, or retrotransposons, move via an RNA intermediate. Class II elements, or DNA transposons, seem to move via "cut-and-paste" mechanisms where the DNA element itself is the mobile intermediate [<xref ref-type="bibr" rid="B2">2</xref>].</p>
    <p>The transposable elements have an important role in the evolution of eukaryotic genomes through their transposition mechanism [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>] but also by their evolution/domestication [<xref ref-type="bibr" rid="B4">4</xref>-<xref ref-type="bibr" rid="B6">6</xref>]. Many recent studies clarify the diverse role of transposable elements in the evolution of their host genome: creation of NAIP protein isoforms and promoter by the insertion of L1 and Alu elements [<xref ref-type="bibr" rid="B3">3</xref>], plant light-sensing dependency on the presence of FHY1, FHL FHY3 and FAR1 that are related to MULE transposases [<xref ref-type="bibr" rid="B5">5</xref>], exaptation of the transposon CHARLIE10 in the mammalian zinc finger 452 gene [<xref ref-type="bibr" rid="B7">7</xref>] and creation of new host gene by capture of transposable element domains [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B6">6</xref>].</p>
    <p>Many families of both classes do not show any coding capacity and are called non-autonomous transposable elements. They have cumulated so many mutations, insertions or deletions that these TEs are generally solely defined by their extremities [<xref ref-type="bibr" rid="B8">8</xref>,<xref ref-type="bibr" rid="B9">9</xref>]. Currently, most studies do not attempt to characterize and compare the internal sequences occurring between such extremities. A few methods [<xref ref-type="bibr" rid="B10">10</xref>-<xref ref-type="bibr" rid="B13">13</xref>] propose to segment sequences into conserved segments that we call modules, starting from a multiple alignment of these sequences.</p>
    <p>Multiple alignments that find the boundaries of these segments in highly variable sequences like non-autonomous transposable elements may be hard to obtain. Moreover, multiple alignments lack to find duplication and inversion in sequences that are frequent in non-autonomous TEs (Figure <xref ref-type="fig" rid="F1">1</xref>).</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p><bold>Multiple alignment of duplicated modules</bold>. Sequences A, B and C have duplicated blocks of nucleotides. These duplications evolved by mutation and the second duplication -1"- has reversed in the sequence C. Whatever the parameters, multiple alignment of the three sequences identifies the duplicated blocks as different modules.</p>
      </caption>
      <graphic xlink:href="1471-2105-11-474-1"/>
    </fig>
    <p>In the present study, we propose a model and develop pattern matching and classification tools that allow identification, characterization and graphical representation of the combinations of modules that make up each sequence of a given family. We applied it to the study of a family of non-autonomous TEs of class II, called Foldback4 [<xref ref-type="bibr" rid="B14">14</xref>], in the whole genome of <italic>Drosophila melanogaster</italic>. This family has been chosen as an illustrative model of the complex internal organization of non-autonomous transposons, displaying a wide range of possible variations and a palindromic structure at the extremities of its sequences. We have also tested the method on other transposon families, namely AtREP21 (class II) [<xref ref-type="bibr" rid="B13">13</xref>] and SIDER2 (class I) [<xref ref-type="bibr" rid="B15">15</xref>], which confirm the interest of the tool we propose for the study of highly variable sequences.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>Our method represents a given family of TE sequences as an assembly of elementary blocks called <italic>modules</italic>. We propose an associated tool, ModuleOrganizer, assuming that these sequences have been selected on the basis of local characteristic features (for instance in a database such as Repbase [<xref ref-type="bibr" rid="B16">16</xref>]) and providing a global high level characterization of them facilitating the study of their variations. The section starts with a precise definition of properties that are suitable to delimit modules. We then describe in detail the method we propose for module identification.</p>
    <p>Overall, it is based on the search and assembly of "<italic>maximal repeat</italic>" common to several sequences. A word <italic>w </italic>is a <italic>maximal repeat </italic>(<italic>MR</italic>) in a non-empty set of sequences <italic>S </italic>= {<italic>S</italic><sub>1</sub>, ..., <italic>S</italic><sub>n</sub>} if, and only if, there are <italic>S<sub>i</sub></italic>, <italic>S<sub>j </sub></italic>∈ <italic>S </italic>(not necessarily distinct) and letters <italic>a</italic>, <italic>b</italic>, <italic>c</italic>, <italic>d</italic>, with <italic>a </italic>≠ <italic>b </italic>and <italic>c </italic>≠ <italic>d</italic>, such that <italic>awc </italic>is a substring of $<italic>S<sub>j</sub></italic>$ and <italic>bwd </italic>is a substring of $<italic>S<sub>j</sub></italic>$ (where $ is a letter not occurring in any sequence). In order to compute all these MR, the sequences of the family are indexed via a generalized suffix tree [<xref ref-type="bibr" rid="B17">17</xref>-<xref ref-type="bibr" rid="B19">19</xref>]. Our algorithm recursively associates maximal repeats of a same sequence into modules under restrictions corresponding to their definition, such as their size, the number of sequences supporting their presence and the content of the sequence between two MR. Two final steps allow drawing an overall representation of the family: sequences are classified with respect to the presence or the absence of modules and a visualization tool yields an overall graphical view of the sequences.</p>
    <sec>
      <title>Defining modules in transposable elements</title>
      <p>In theory all sequences of a given family of transposable elements are identical copies of an ancestor sequence. In practice an amount of variation is observed in TE copies, in connection with the age of the copies and the mutation rate. There are several kinds of TE that exhibit a reorganization of internal sequences including insertions and deletions of large sequences: the Miniature Inverted-repeat Transposable Elements (MITEs) [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B9">9</xref>], the Mu-related bacterial transposons [<xref ref-type="bibr" rid="B20">20</xref>,<xref ref-type="bibr" rid="B21">21</xref>] and the Helitron superfamily [<xref ref-type="bibr" rid="B22">22</xref>] that integrate blocks of genomic material into their variable sequence [<xref ref-type="bibr" rid="B21">21</xref>,<xref ref-type="bibr" rid="B23">23</xref>,<xref ref-type="bibr" rid="B24">24</xref>] and the Short Interspersed DEgenerated Retroposons 2 (SIDER2) [<xref ref-type="bibr" rid="B15">15</xref>].</p>
      <p>Non-autonomous transposable elements (TEs that lost their protein-coding elements), like MITEs, which represent for some sequences the main source of copies, are often subject to deletions [<xref ref-type="bibr" rid="B25">25</xref>]. In such a case, it becomes difficult to reconstruct the autonomous element from the set of non-autonomous sequences [<xref ref-type="bibr" rid="B26">26</xref>]. We have studied as a test case the MITE family Foldback4 [<xref ref-type="bibr" rid="B14">14</xref>] and in accordance with previous studies of non-autonomous TEs [<xref ref-type="bibr" rid="B27">27</xref>,<xref ref-type="bibr" rid="B28">28</xref>], it clearly exhibits variations conserved across several sequences that could be largely explained by biological events such as insertions/deletions of mobile DNA or of host sequences [<xref ref-type="bibr" rid="B23">23</xref>,<xref ref-type="bibr" rid="B26">26</xref>]. In order to automatically retrace the main events that occurred, we have systematically exploited the fact that MITEs and other non-autonomous transposable elements present consensus patterns in their different copies [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B25">25</xref>]. For example, the MITE mPing, Foldback4 or AtREP21 share consensus extremities in all their copies simply because they are necessary for transposition [<xref ref-type="bibr" rid="B13">13</xref>,<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B25">25</xref>]. The importance of host sequence acquisition mechanisms by TEs is well known in plants [<xref ref-type="bibr" rid="B29">29</xref>] and leads to detectable repeated blocks in copies separated by small non-consensus nucleotidic regions.</p>
      <p>We propose a definition of module for this type of repeated blocks that introduces cautiously these separating nucleotides. Basically, a module is an assembly of flexible repeats. Each flexible repeat is a maximal repeat combination that occurs several times in sequences where MR are separated by a variable number of nucleotides. This class of repeats can be related to the class of <italic>structured repeats </italic>introduced by M.F. Sagot [<xref ref-type="bibr" rid="B30">30</xref>] but introduces new interesting variations that will be discussed in the <bold>Results and discussion </bold>section under paragraph <bold>Structured versus flexible repeats</bold>. Flexibility is founded on two simple criteria that delimit the possible spacers between consecutive repeats by fixing a reasonable level of similarity between instances of the same flexible repeat. Flexibility cannot be greater than the parts it links.</p>
      <p>• <italic>Flexible repeats</italic>: Let <italic>S </italic>= {<italic>S</italic><sub>1</sub>,..., <italic>S<sub>n</sub></italic>} be a set of sequences. Let |<italic>w</italic>| denote the length of word <italic>w </italic>and <italic>e</italic>(<italic>w</italic><sub>1</sub>, <italic>w</italic><sub>2</sub>) denote the edit distance between words <italic>w</italic><sub>1 </sub>and <italic>w</italic><sub>2</sub>. A flexible repeat is inductively defined as follows:</p>
      <p>1. Each maximal repeat is a flexible repeat</p>
      <p>2. If <italic>A </italic>and <italic>B </italic>are flexible repeats and there exist a support subset of sequences <italic>T </italic>∈ <italic>S </italic>of cardinality at least 2, and words <italic>A<sub>i</sub>x<sub>i</sub>B<sub>i </sub></italic>in each sequence <italic>S<sub>i </sub></italic>of <italic>T </italic>satisfying the following constraints:</p>
      <p>(a) <italic>A<sub>i </sub></italic>and <italic>B<sub>i </sub></italic>are occurrences of <italic>A </italic>and <italic>B </italic>in sequence <italic>S<sub>i</sub></italic></p>
      <p>(b) Length condition: |<italic>x<sub>i</sub></italic>| ≤ <italic>max</italic>(|<italic>A<sub>i</sub></italic>|, |<italic>B<sub>i</sub></italic>|)</p>
      <p>(c) Distance condition: <italic>e</italic>(<italic>x<sub>i</sub></italic>, <italic>x<sub>j</sub></italic>) ≤ <italic>min</italic>(|<italic>A<sub>i</sub></italic>|, |<italic>A<sub>j</sub></italic>|, |<italic>B<sub>i</sub></italic>|, |<italic>B<sub>j</sub></italic>|) for all pairs <italic>S<sub>i</sub></italic>, <italic>S<sub>j </sub></italic>in <italic>T</italic></p>
      <p>then (<italic>A</italic>, <italic>B</italic>) is a flexible repeat with occurrences <italic>A<sub>i</sub>x<sub>i</sub>B<sub>i</sub></italic>.</p>
      <p>The definition recursively accepts chains of maximal repeats separated by variable constrained spacers. The length condition applies on spacers in each sequence individually whereas the distance condition requires a similarity level between all spacers globally. From this general notion of flexible repeat, one can define modules as a selection of flexible repeats that get a sufficient support in the set of sequences, that do not overlap and cover as much as possible of this set. More formally:</p>
      <p>• <italic>Modules</italic>: Given parameters <italic>MinSizeModule </italic>and <italic>MinSequences</italic>, a module <italic>M </italic>in a set of sequences <italic>S </italic>= {<italic>S</italic><sub>1</sub>, ..., <italic>S<sub>n</sub></italic>} is a flexible repeat satisfying the following constraints:</p>
      <p>1. Size condition: Each occurrence of <italic>M </italic>has length at least <italic>MinSizeModule</italic>.</p>
      <p>2. Support condition: <italic>M </italic>is present in a support subset of cardinality at least <italic>MinSequences </italic>of <italic>S</italic>.</p>
      <p>An <italic>admissible set of modules </italic><italic>M </italic>= {<italic>M</italic><sub>1</sub>, ..., <italic>M<sub>m</sub></italic>} in a set of sequences <italic>S </italic>= {<italic>S</italic><sub>1</sub>, ..., <italic>S<sub>n</sub></italic>} is a set of modules such that:</p>
      <p>1. Partition condition: For two different indices <italic>i </italic>and <italic>j</italic>, <italic>M<sub>i </sub></italic>and <italic>M<sub>j </sub></italic>do not overlap. Moreover, no other flexible repeat contains a module <italic>M<sub>i</sub></italic>.</p>
      <p>2. Maximality condition: No other flexible repeat fulfilling the previous three conditions (size, support and partition) could be added to <italic>M</italic>.</p>
      <p>Such a definition aims at selecting globally a set of modules that must cover a largest subset of a set of sequences. Once admissibility has been reached, there remains some range of variation to build a set of modules from a set of sequences. We propose an iterative strategy based on a preliminary search for seeds at the core of the largest flexible repeats.</p>
    </sec>
    <sec>
      <title>An assembly algorithm for the creation of modules</title>
      <p>Targeted modules have sizes greater than <italic>MinSizeModule </italic>and are present in at least <italic>MinSequences </italic>sequences. All admissible modules are based on an assembly of maximal repeats. In an initial step, our algorithm will thus build the set of all MRs present in at least <italic>MinSequences </italic>sequences. This may be achieved in linear time with respect to the cumulated length of the sequences, using a generalized suffix tree [<xref ref-type="bibr" rid="B19">19</xref>]. These exact maximal repeats can be considered as seeds which are extended to the left or to the right depending on the admissibility of the extension. This method of seed extension is similar to the method used in Blast [<xref ref-type="bibr" rid="B31">31</xref>].</p>
      <p>The construction of modules is detailed in Algorithm 1. Its basic data structure is a list <italic>L </italic>of MR sorted by decreasing size, then by number of occurrences. Each maximal repeat is associated with the sorted list of its occurrences in increasing position. Initially, <italic>L </italic>contains the whole set of MRs present in at least <italic>MinSequences </italic>sequences and it is updated after the construction of each module (line 8 and 11 in Algorithm 1).</p>
      <sec>
        <title>Algorithm 1</title>
        <p>1. BuildModules(L, <italic>MinSequences</italic>, <italic>MinSizeModule</italic>)</p>
        <p>2. REQUIRE: Sorted list L of possible MR (size m, decreasing order)</p>
        <p>3. REQUIRE: Minimal Number of covered sequences <italic>MinSequences</italic></p>
        <p>4. <italic>i </italic>← 1; <italic>PairOk </italic>← FALSE</p>
        <p>5. <italic>COMMENT</italic>: <italic>Looking for a a pair of MR (Seed, Next) in decreasing order of size in L</italic></p>
        <p>6. WHILE (<italic>i </italic>&lt;<italic>m </italic>and not <italic>PairOk</italic>)</p>
        <p>7.   <italic>Seed </italic>← <italic>L</italic>[<italic>i</italic>]</p>
        <p>8.   (<italic>Next</italic>, <italic>PairOk</italic>) ← BuildPair(<italic>L</italic>, <italic>Seed</italic>, i+1, MinSeq)</p>
        <p>9.   <italic>i </italic>← <italic>i </italic>+ 1</p>
        <p>10. IF (<italic>PairOk</italic>)</p>
        <p>11.   Discard the paired occurrences <italic>A </italic>of <italic>Seed </italic>from <italic>L</italic></p>
        <p>12.   <italic>COMMENT</italic>: <italic>Try to enlarge the current flexible repeat to the left or to the right by a new maximal repeat</italic></p>
        <p>13.   WHILE (<italic>PairOk</italic>)</p>
        <p>14.      Depending on the observed occurrences of the flexible repeat, replace <italic>Seed </italic>by <italic>SeedXNext </italic>or <italic>NextXSeed</italic></p>
        <p>15.      Discard the paired occurrences <italic>B </italic>of <italic>Next </italic>from <italic>L</italic></p>
        <p>16.      <italic>PairOk </italic>← FALSE</p>
        <p>17.      (<italic>Next</italic>, <italic>PairOk</italic>) ← BuildPair(L, Seed, 1, MinSeq)</p>
        <p>18.   IF (size(<italic>Seed</italic>) ≥ <italic>MinSizeModule</italic>)</p>
        <p>19.      Seed and its occurences as a new module</p>
        <p>20.   ELSE ∅</p>
        <p>For each module, the algorithm considers the largest remaining MRs as seed candidates and looks iteratively and greedily at flexible repeats that can be built from such seeds. At line 8 of Algorithm 1, a flexible repeat made of a flexible repeat <italic>Seed </italic>and a maximal repeat <italic>Next </italic>has been discovered and will serve as a new seed for the search of larger flexible repeats (line 10). Once it is not possible to extend it any more (line 14), the last condition to be checked is the size of the obtained module.</p>
        <p>The search for maximal repeats to be associated with seeds in flexible repeats is described in Algorithm 2. Associations are represented as <italic>AxB </italic>or <italic>BxA</italic>, where <italic>A </italic>is the largest part and <italic>B </italic>is the smallest part of flexible repeats. This convention explains the simplified tests for flexible repeat length and distance in Algorithm 2. The spacer <italic>x </italic>can be an empty sequence (Figure <xref ref-type="fig" rid="F2">2</xref>). The first condition of flexible repeats is checked in line 5 and the second in line 11 (Algorithm 2). The test in line 11 also checks if there is at least one association in each of <italic>MinSequences </italic>sequences, the first condition for a flexible repeat to be retained as a potential module. In building flexible repeats, the algorithm chooses the largest maximal repeat <italic>B </italic>that has the most associations with <italic>A</italic>.</p>
        <fig id="F2" position="float">
          <label>Figure 2</label>
          <caption>
            <p><bold>Examples of association of maximal repeats (MR)</bold>. The MRs <italic>A </italic>and <italic>B </italic>are surrounded by rectangles. The spacer sequence between two MRs is denoted <italic>x </italic>or <italic>y </italic>and is underlined. Modules, created by the assembly of <italic>A</italic>, <italic>B </italic>and <italic>x </italic>or <italic>y</italic>, are surrounded by large rectangles. Case a) is the most simple case of association of maximal repeats <italic>A </italic>and <italic>B</italic>: the distance between them is always smaller than the size of the smallest MR <italic>B </italic>and they can be safely associated. Case b) shows that two occurrences of MR can be separated by any sequence, including the empty one. In case c), the distance between occurrences of <italic>A </italic>and <italic>B </italic>is equal to the size of the largest maximal repeat and spacers have to be checked for their similarity. The edit distance between sequences <italic>x </italic>and <italic>y </italic>equals 2, a value smaller than the sizes of A and B, and a module can be built. In case d), the size of <italic>x </italic>and <italic>y </italic>equals 4 as in case c), but <italic>x </italic>is at edit distance 4 from <italic>y</italic>, which is greater than 3, the size of <italic>B</italic>. The association of MRs <italic>A </italic>and <italic>B </italic>do not form a module in this case.</p>
          </caption>
          <graphic xlink:href="1471-2105-11-474-2"/>
        </fig>
      </sec>
      <sec>
        <title>Algorithm 2</title>
        <p>1. REQUIRE: BuildPair(L, Seed, Start, <italic>MinSequences</italic>)</p>
        <p>2. REQUIRE: Sorted list <italic>L </italic>of possible MR (size <italic>m</italic>)</p>
        <p>3. REQUIRE: A flexible repeat <italic>Seed </italic>and a starting index <italic>Start </italic>for the search in <italic>L</italic></p>
        <p>4. REQUIRE: Minimal Number of covered sequences <italic>MinSequences</italic></p>
        <p>5. <italic>j </italic>← <italic>Start</italic>; <italic>PairOk </italic>← FALSE</p>
        <p>6. WHILE (j≤m and not <italic>PairOk</italic>)</p>
        <p>7. <italic>Next </italic>← <italic>L</italic>[<italic>j</italic>]; <italic>Pairs </italic>← Ø</p>
        <p>8.   FOR (all occurrences <italic>A </italic>of <italic>Seed</italic>)</p>
        <p>9.      Search for the occurrences <italic>B </italic>of <italic>Next </italic>such that <italic>AxB </italic>(orientation = "+") or <italic>BxA </italic>(orientation = "-") is a subword of the sequence and x has size at most the size of <italic>A</italic></p>
        <p>10.      IF (<italic>B </italic>exists)</p>
        <p>11.         <italic>Pairs </italic>← <italic>Pairs </italic>⋃ {(<italic>x, b, orientation</italic>)}   <italic>COMMENT: b is the size of B</italic></p>
        <p>12.   <italic>COMMENT: Build the graph GB of occurrences at a suitable edit distance in Pairs</italic></p>
        <p>13.   FOR (all pairs of occurrences ((<italic>x</italic>, <italic>b<sub>x</sub></italic>), (<italic>y</italic>, <italic>b<sub>y</sub></italic>)) in <italic>Pairs </italic>in each orientation</p>
        <p>14.      IF (the edit distance <italic>e</italic>(<italic>x</italic>, <italic>y</italic>) ≤ <italic>min</italic>(<italic>b<sub>x</sub></italic>, <italic>b<sub>y</sub></italic>))</p>
        <p>15.         Create an edge in <italic>GB </italic>between vertex (<italic>x</italic>, <italic>b<sub>x</sub></italic>) and vertex (<italic>y</italic>, <italic>b<sub>y</sub></italic>)</p>
        <p>16.   IF (there exists a clique containing at least <italic>MinSequences </italic>sequences in <italic>G</italic>)</p>
        <p>17.      <italic>PairOk </italic>← TRUE</p>
        <p>18.   <italic>j </italic>← <italic>j </italic>+ 1</p>
        <p>19.   RETURN (<italic>Next</italic>, <italic>PairOk</italic>)</p>
        <p>The worst case complexity of Algorithm 2 is o(<italic>n</italic><sup>3</sup>), where <italic>n </italic>is the cumulated size of sequences: it is based on a loop on possible maximal repeats (o(<italic>n</italic>)) including a loop on possible matching occurrences (o(<italic>n</italic>) since list of occurrences of <italic>A </italic>and <italic>B </italic>can be searched in parallel), the production of a graph of similar occurrences (o(<italic>n</italic><sup>2</sup>)) and a search of a clique of size at least <italic>MinSequences </italic>in this graph (we use a heuristic search here, keeping only vertices that are connected to at least <italic>MinSequences </italic>nodes associated to different sequences and using an iterative choice of vertices with highest output degree in the remaining graph. The complexity of this step is thus o(<italic>n</italic>)). Note that the last step offers no guarantee to always find the clique if it exists. Algorithm 1 is also based on a loop on possible maximal repeats (o(<italic>n</italic>)) including calls to Algorithm 2. The total worst case complexity is thus o(<italic>n</italic><sup>4</sup>). The main data structure are the list <italic>L </italic>of occurrences of maximal repeats and the graph <italic>G</italic>, requiring o(<italic>n</italic><sup>2</sup>) space. In practice, the algorithm is very fast (less than a minute) on typical transposable elements families (e.g. 15 sequences of length 2000 nt). The tool we propose allows in fact a more flexible method of association of <italic>A </italic>and <italic>B</italic>. The size of spacer <italic>x </italic>has to be smaller than a percentage of the size of <italic>A </italic>(|<italic>x</italic>| ≤ |<italic>A</italic>| * percentage). By default, the percentage value is 100% and corresponds to the criterion we have defined. With a lower percentage, it is possible to be more restrictive on the spacer size.</p>
      </sec>
    </sec>
    <sec>
      <title>Detection of all modules in sequences</title>
      <p>After the creation of a module, the list <italic>L </italic>of maximal repeats must be pruned of any occurrence that overlaps occurrences of this module in order to fulfill condition 3 of the definition of modules (partition condition). The algorithm stops the search for modules present in <italic>MinSequences </italic>sequences when the procedure BuildModules returns an empty set.</p>
      <p>At the beginning <italic>MinSequences </italic>is set to the number of sequences present in the input file. After the algorithm has found all modules of size bigger than <italic>MinSizeModule </italic>in <italic>MinSequences </italic>sequences, the main loop searches for modules in <italic>MinSequences </italic>= <italic>MinSequences - </italic>1 sequences until <italic>MinSequences </italic>= 1.</p>
    </sec>
    <sec>
      <title>Palindromic modules and truncated modules</title>
      <p>Transposable elements have two characteristics that are not taken into account by our module definition. First, elements may be copied in the direct or reverse direction. This leads to frequent palindromic motifs that have to be recovered in the context of flexible repeats. Second, elements may be truncated due to large deletions or a high number of mutations. Some partial flexible motifs may remain interesting to identify for a complete analysis of the transposon structure.</p>
      <p>Our tool proposes the identification of reverse modules on the basis of the exact MR they contain. In practice, all MRs are searched both on the direct and on the reverse strand and are consequently labeled. A reverse module has the same composition as the module it is derived from, replacing its MR by the corresponding reverse MR. Once a module has been determined, the presence of its reverse module is systematically looked for in the sequences. The presence of a module in its direct or reverse form is counted whatever its direction. This way, the requested number of supporting sequences <italic>MinSequences </italic>may be attained by a combination of both directions.</p>
      <p>Truncated modules may exist with a conservation level that is very low, one or several MRs being discarded from the original copy. It is difficult to define an absolute conservation threshold that would decide if a given degenerated combination of MR remains or not a truncated version of a module or if it must be considered as a new entity. Modules are often composed in practice by a main founding MR surrounded by several smaller MRs at some distance. We have chosen to require that the largest MR remains present in a truncated version of a module, a simple constraint that ensures at least a core identity with the full module. Unlike the previous case, truncated modules are considered only if the full module exists in the set of sequences. They are added during a second step, once all complete modules have been identified.</p>
    </sec>
    <sec>
      <title>Clustering of sequences</title>
      <p>After the module detection stage, assume <italic>m </italic>different modules have been obtained in <italic>n </italic>sequences. The next step of ModuleOrganizer is to build a hierarchical clustering of sequences (a tree) conducted on the basis of module similarity. This way, the evolution of sequences in the family can be traced back by comparing sequences in decreasing order of similarity of their modular profiles. Basically, each sequence is represented by a vector of values on a set of attributes (variables), one numerical attribute per module that is a counter of its occurrences. If the user does not select the search for reverse or truncated modules, the software creates thus an incidence matrix of dimensions <italic>m </italic>× <italic>n</italic>.</p>
      <p>If reverse modules are allowed, more attributes are necessary to finely describe the evolution of sequences. For each module we create three attributes: one counting the number of direct occurrences (direct orientation), one counting the reverse occurrences, and a last counter for occurrences of the module (either normal or reverse occurrence). The third attribute allows to measure the convergent evolution of palindromic structures like Inverted Terminal Repeats [<xref ref-type="bibr" rid="B32">32</xref>]. Indeed, the transposase of autonomous elements recognizes specific palindromic structure at their extremities [<xref ref-type="bibr" rid="B2">2</xref>]. The mutation of one extremity decreases strongly their transposition. A double mutation in both extremities may restore the palindromic structure and transposition. This has been observed for instance within families of mariner-like elements [<xref ref-type="bibr" rid="B33">33</xref>]. The incidence matrix has size 3<italic>m </italic>× <italic>n </italic>with the reverse option.</p>
      <p>The presence of truncated occurrences of modules slightly extends the meaning of the attributes we have just defined. These occurrences correspond to small fragments of entire modules, and are composed of a selection of the module MR. While full module occurrences contain 100% of the cumulated size of MR, truncated occurrences contain a lower percentage of this total size reflecting the deleted fraction of a module MR: a complete direct or reverse occurrence will contribute for 1 and a truncated occurrence will have a strictly smaller positive contribution. For instance in Figure <xref ref-type="fig" rid="F3">3</xref>, the module M2 has one complete occurrence in sequence A and B and one truncated occurrence that contributes at level 0.5.</p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Module organization of sequences A, B and C and associated incidence matrix used for the classification</bold>. Modules marked with triangles correspond to reverse modules and crossed modules correspond to truncated modules. Three attributes are associated with each module, <italic>Mi</italic>, <italic>rMi </italic>and <italic>Mi</italic>|<italic>rMi</italic>, corresponding to direct, reverse and total occurrences. Truncated modules have 50% of the MR total size conserved.</p>
        </caption>
        <graphic xlink:href="1471-2105-11-474-3"/>
      </fig>
      <p>Sequences are clustered using a standard Hierarchical Agglomerative Clustering (HAC) algorithm, using the Ward criterion [<xref ref-type="bibr" rid="B34">34</xref>]. Ward's criterion states that merging HAC clusters should be focused on minimizing the increase of variance induced by the added interclass variance. Basically, it is an error sum-of-squares criterion. In the first step, the loss of inertia in aggregating sequence pair <italic>x </italic>and <italic>y </italic><inline-formula><mml:math id="M1" name="1471-2105-11-474-i1" overflow="scroll"><mml:mrow><mml:mi>Δ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>2</mml:mn><mml:mi>n</mml:mi></mml:mrow></mml:mfrac><mml:msup><mml:mrow><mml:mstyle displaystyle="true"><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mi>i</mml:mi><mml:mi>b</mml:mi><mml:mi>u</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:math></inline-formula> is computed between each possible pair, where <italic>x<sub>i </sub></italic>(<italic>y<sub>i</sub></italic>) corresponds to the value of attribute <italic>i </italic>in sequence <italic>x </italic>(<italic>y</italic>) and <italic>n </italic>is the number of sequences. Starting from clusters reduced to a single sequence with weight 1/<italic>n</italic>, the pair of clusters minimizing Δ is replaced by its union and the values of the weight and Δ for this new cluster is updated (weights are additive and if <italic>x</italic>, <italic>y </italic>and <italic>z </italic>are three clusters with weight <italic>n<sub>x</sub></italic>, <italic>n<sub>y </sub></italic>and <italic>n<sub>z</sub></italic>, then <inline-formula><mml:math id="M2" name="1471-2105-11-474-i2" overflow="scroll"><mml:mrow><mml:mi>Δ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>∪</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>z</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>z</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mi>Δ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>z</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mi>Δ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>z</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mi>Δ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. The algorithm iterates until all sequences are in the same cluster.</p>
    </sec>
  </sec>
  <sec>
    <title>Results and Discussion</title>
    <sec>
      <title>Implementation</title>
      <p>The module detection program (all its functions) and the classification program are written in the C language. The software produces one to three output files. The first file is the only mandatory output file. It corresponds to the list of sequences with their composition in modules. It uses the same output format as DomainOrganizer [<xref ref-type="bibr" rid="B13">13</xref>]. The second file corresponds to the classification of sequences and is written in Newick format. The third file is the output graph written in SVG (Scalar Vector Graphics) format (Figure <xref ref-type="fig" rid="F4">4</xref>). In this file, the sequence module contents are displayed together with their classification tree. A specific texture is associated to each domain and specific markers are used for reverse (triangle) or truncated (crossed boxes) modules.</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Module organization of the AtREP21 family</bold>. The 48 sequences of AtREP21 are composed of 47 modules. The only parameter used is <italic>MinSizeModule </italic>= 18. The sequences are classified according to their module composition and the tree appears as displayed by ModuleOrganizer. We just added colors to the hierarchical tree in order to highlight the clusters.</p>
        </caption>
        <graphic xlink:href="1471-2105-11-474-4"/>
      </fig>
      <p>ModuleOrganizer is relatively fast. The next two sections give results on three transposable element families: AtREP21, SIDER2 and Foldback4, for a total of 27000, 8000 and 30000 nucleotides respectively. On a PC running with an Intel Core2 Duo 2.2 GHz and 4 Go Ram, these results have been obtained in 15.7 s, 1.8 s and 27.7 s respectively.</p>
      <p>ModuleOrganizer allows users to tune a few parameters with respect to their application:</p>
      <p>• The first parameter is the minimal size <italic>MinSizeModule </italic>of admissible modules. We assume that in most cases the user has some knowledge of the sequences in the input file so that the user can fix or adjust iteratively the value of <italic>MinSizeModule</italic>. By default, ModuleOrganizer proposes to set <italic>MinSizeModule </italic>to the minimal value of <italic>x </italic>such that it exists a word of size <italic>x </italic>that is not present in the sequences.</p>
      <p>• The second parameter <italic>Maxratio </italic>is the percentage that can be used in the length condition of flexible repeats (the length condition of flexible repeats writes |<italic>x<sub>i</sub></italic>| ≤ |<italic>A<sub>i</sub></italic>| ∗ <italic>Maxratio </italic>if <italic>A<sub>i </sub></italic>is assumed to be larger than <italic>B<sub>i</sub></italic>), e.g. <italic>Maxratio </italic>= 100 corresponds to spacers between elements <italic>A </italic>and <italic>B </italic>of flexible repeats possibly reaching the size of <italic>A</italic>. The selection of modules is a trade-off between size and similarity. Lower values of <italic>Maxratio </italic>allows to move this trade-off to smaller sizes of modules and more similar occurrences (see end of section "An assembly algorithm for the creation of modules").</p>
      <p>• The third parameter is the minimal number of sequences that must support the presence of modules. Our algorithm searches modules in <italic>MinSequences </italic>sequences. By default, <italic>MinSequences </italic>will get all values in the range from the number of sequences up to 1 sequence.</p>
      <p>• The last parameter allows the search for palindromic and/or truncated modules (see section "Palindromic modules and truncated modules").</p>
    </sec>
    <sec>
      <title>Module organization of AtREP21 and SIDER2</title>
      <p>AtREP21 is a family of non-autonomous Helitron transposable elements present in <italic>Arabidopsis </italic><italic>thaliana </italic>[<xref ref-type="bibr" rid="B13">13</xref>]. We used ModuleOrganizer on the 48 elements of this family, setting just the <italic>MinSizeModule </italic>parameter to 18 instead of the default value 8 that would result in a too detailed view. No palindromic modules exist in this family [<xref ref-type="bibr" rid="B13">13</xref>] and it is not necessary to use this optional search. There are 47 modules that characterize the whole family (Figure <xref ref-type="fig" rid="F4">4</xref>). The module number 1 and 10 correspond respectively to the left and right extremities of AtREP21. The comparison of results between DomainOrganizer [<xref ref-type="bibr" rid="B13">13</xref>] and ModuleOrganizer shows a similar module organization. For example, the AtREP21 elements number 5, 12, 19, 25, 34 belong to the same cluster (red group in [<xref ref-type="bibr" rid="B13">13</xref>] and Figure <xref ref-type="fig" rid="F4">4</xref>). The sequences of AtREP21-24 and AtREP21-41 are clustered by ModuleOrganizer in a specific group that corresponds to the insertion of a long transposable element. This is the sole minor difference between results provided by the two methods. For this family, the main difference lies rather in the execution time: more than 4 hours for DomainOrganizer and less than one minute for ModuleOrganizer.</p>
      <p>SIDER2 is a family of Short Interspersed DEgenerated Retroposons that Smith <italic>et al</italic>. found in three <italic>Leishmania </italic>genomes [<xref ref-type="bibr" rid="B15">15</xref>]. We selected 13 of the 1021 SIDER2 they reported. We set the parameter <italic>MinSizeModule </italic>to its default value 8 and the parameter <italic>Maxratio </italic>to 75, a value that generates a more detailed segmentation with more similar module occurrences than the default value 100. This allowed to better recover crossing effects that we wanted to show. The Figure <xref ref-type="fig" rid="F5">5</xref> shows SIDER2 sequences are clustered into four groups: A, B, C and D (independently of the value of <italic>Maxratio</italic>). Group A is mainly composed by the modules 19, 42, 29, 26, 20, 13, 39, 1 and 41 (5'-3' order). The larger modules of SIDER2 sequences of group C are modules (5'-3' order) 26, 46, 6, 16, 29, 4, 17, 61, 1, 8, 14, 28, 18, 62, 15 and 27. In the SIDER2 sequences of group D, modules 29, 55 have been deleted and modules 13 and 61 have been substitued by 8 and 63 respectively. Group B presents a clear combination/exchange of modules with the other groups: the modules 9, 6, 25 and 22 come from the C/D groups and the module 20 from group A. Moreover, Figure <xref ref-type="fig" rid="F5">5</xref> shows some conserved modules that would be impossible to observe with multiple alignment: some modules cross themselves in SIDER2 sequences. For example, module 1 is present in all sequences: in group B it lies between modules 9 and 3 and the module 26, but in group C it lies between module 26 and the modules 9 and 3.</p>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>Module organization of the SIDER2 family</bold>. The 13 sequences of SIDER2 are composed of 58 modules. The parameters used are <italic>MinSizeModule </italic>= 10 and <italic>Maxratio </italic>= 75. The value of this last parameter allows to create smaller and more similar modules than by default. We added colors and letters to the hierarchical tree produced by ModuleOrganizer that highlight the clusters. We also switched the clusters to show the crossing modules.</p>
        </caption>
        <graphic xlink:href="1471-2105-11-474-5"/>
      </fig>
    </sec>
    <sec>
      <title>Organization of modules in Foldback4</title>
      <p>We have chosen the family of non-autonomous TEs Foldback4 (FB4) known to be present in the <italic>D</italic>. <italic>melanogaster </italic>genome [<xref ref-type="bibr" rid="B14">14</xref>] in order to propose a more complete comparative analysis of a TE family with several available softwares.</p>
      <p>Ten Foldback4 sequences have been identified and numbered with respect to their order of occurrence on the direct strand. These elements range from 627 bp to 2266 bp. We used STAN (Suffix Tree Analyser) [<xref ref-type="bibr" rid="B35">35</xref>] to find the sequences from the genome and FGENESH software [<xref ref-type="bibr" rid="B36">36</xref>] to verify that sequences do not contain ORFs and are thus non autonomous elements. <italic>MinSizeModule </italic>was set to 18 bp and we have used the optional search for palindromes and truncated modules in sequences. The module-identification algorithm discovered 11 modules (Figure <xref ref-type="fig" rid="F6">6</xref>).</p>
      <fig id="F6" position="float">
        <label>Figure 6</label>
        <caption>
          <p><bold>Module organization of the Foldback4 family</bold>. The ten sequences of Foldback4 are composed of eleven modules. To obtain this result, <italic>MinSizeModule </italic>has been set to 18 and truncated, and reverse modules have been looked for. We added colors to the hierarchical tree produced by ModuleOrganizer that highlight the clusters.</p>
        </caption>
        <graphic xlink:href="1471-2105-11-474-6"/>
      </fig>
      <p>The palindromic structures of the Foldback4 family have been recovered and are described by domain numbers 1-3 and 6. Except for Foldback sequences number 2 and 7, which present a deletion of modules 2, and 2-3 respectively, termini palindromes of this family measure more than 400 bp and represent the most important part of their sequences (Figure <xref ref-type="fig" rid="F6">6</xref>). The Foldback4 family shows a significant variation in internal sequences resulting from insertions, deletions or substitutions of domains. The visualization shows that Foldback4 is mainly divided into two groups of sequences.</p>
      <p>The first group (color blue in Figure <xref ref-type="fig" rid="F6">6</xref>) contains Foldback4 sequences number 1, 4, 5 and 9. This group is mainly composed of the combination of modules number 1-5, 7, 9-10 and their reverse complement. The most notable variation between them comes from the number of repetitions of modules 4 and 5 that represent the central part of these sequences. The sequence FB4_4 does not contain any repetition and FB4_9 contains three consecutive repetitions of modules 4 and 5.</p>
      <p>The second group (color red) contains Foldback4 sequences number 2-3, 7-8, 10-11. It is mainly characterized by the deletion of modules: no sequence of this group does contain modules 8-10 in its middle part. The module 2 that belongs to the left side of the palindromic structure is deleted in sequences 7 and 2. The sequence 7 contains only the module 1 in the right part of the palindrome and the module 2 is deleted in the right part of the palindrome of sequence 2.</p>
      <p>Recovering the module architecture in the Foldback4 sequences establishes a probable scenario for the evolution of this family. Note that we do not propose here a complete phylogenetic analysis of the family that would be beyond the scope of this paper. Our purpose is just to illustrate the kind of hypotheses that can be elaborated from such characterizations. Like MITE elements, non-autonomous families generally derive from autonomous elements that are subject to deletion events [<xref ref-type="bibr" rid="B9">9</xref>]. After such deletions, the amplification of TE can create tandem repeats of minisatellites inserted into the non-coding sequence [<xref ref-type="bibr" rid="B2">2</xref>]. For the Foldback4 family, we assume similar deletions and mutations have created these non-autonomous elements from autonomous elements and that in a second step some internal duplications have occurred. If it is the case, the oldest sequence (the closest from the autonomous) contains the highest number of modules together with the lowest number of duplications. The sequence FB4_4 corresponds to these criteria: it contains both all modules and the least number of repeated modules. We then assume the evolution of this family mainly comes from the duplication or the deletion of modules. From this sequence FB4_4 other sequences have evolved by the amplification of left internal modules 4 and 5 (Figure <xref ref-type="fig" rid="F6">6</xref>). The sequences 5 and 9 seem older than the other sequences because they did not evolve after these amplifications. From these sequences, the amplification of the right modules led to the sequence 1. The other sequences then evolved from this point by the deletion of the central modules. We assume that sequences 3 and 8 have been created from sequence 1 by the deletion of one block of consecutive modules (just one deletion event).</p>
      <p>Our method highlights the complexity and variance of the sequence structure between members of a given family of TEs. These differences, which may result in a certain level of disconnection between TE repetition and module repetition within a genome, are usually not observable by standard sequence analysis tools on DNA such as BLAST, or specialized software programs for the analysis of TEs (Recon [<xref ref-type="bibr" rid="B37">37</xref>], RepeatScout [<xref ref-type="bibr" rid="B12">12</xref>], Vista [<xref ref-type="bibr" rid="B10">10</xref>] or GATA [<xref ref-type="bibr" rid="B11">11</xref>]).</p>
    </sec>
    <sec>
      <title>Structured versus flexible repeats</title>
      <p>The idea of looking for a series of words placed at constrained distances on genomic sequences is not new. The class of <italic>structured repeats </italic>has been introduced in [<xref ref-type="bibr" rid="B30">30</xref>] in order to formalize the type of sequences involved in regulation (binding sites). Basically, a structured repeat is define as an ordered collection of several simple motifs (<italic>the boxes</italic>) interleaved by bounded gaps.</p>
      <p><italic>Spaced dyads </italic>are probably the simplest notion of structured motif and have been proposed by J. van Helden &amp; al [<xref ref-type="bibr" rid="B38">38</xref>]. A spaced dyad is made of two boxes, two words at a fixed distance. The more general notion of structured motif as it is used for instance in Risotto [<xref ref-type="bibr" rid="B39">39</xref>] allows variations in the size of single motifs (specified minimal and maximal length for each), in the content of single motifs (specified maximal error rate for each) and variation in the size of gaps (specified minimal and maximal distance between each pair of consecutive box). The number of motifs is fixed and the search for structured motifs uses a quorum corresponding to our parameter MinSequences.</p>
      <p>Numerous authors have applied structured motifs in the framework of pattern matching (motifs are given) and this differs significantly from the pattern discovery task we are considering in this paper where the combinatory of possible arrangements has to be carefully controlled. The language A of ANREP [<xref ref-type="bibr" rid="B40">40</xref>] is one of the early successful proposition in this respect, already distinguishing simple motifs (including the possibility to manage matching costs) from <italic>network patterns </italic>that allow gaps and disjunctions. Advanced algorithms have been designed since and a few papers have presented experiments on the analysis of transposable elements [<xref ref-type="bibr" rid="B41">41</xref>-<xref ref-type="bibr" rid="B43">43</xref>].</p>
      <p>Flexible repeats introduce a few specific characteristics with respect to structured repeats. First flexible repeats are not vectors of fixed size: flexible repeats may have a variable number of boxes and they are included in an embedding structure that is not a simple linear ordering. Second, the possible variations are strictly confined in the gap part (<italic>x </italic>part in flexible repeats). Boxes are words (maximal repeats) that have to match exactly in the sequence. The restriction to MR provides a representative basis of all words that has a linear size with respect to the cumulated length of the sequences. Note that there is no restriction on the length of these words and in practice all short words including single nucleotides are maximal repeats. Structured repeats present a two level view of sets of sequences, a level of similar regions shared by a sufficient subset of these sequences and a level of assembly with completely specific regions that are solely represented by their length. We have adopted a different view where only the regions <italic>exactly </italic>shared by a sufficient subset of sequences are retained and where the assembly process results from a cautious iterative aggregation of these regions on the basis of similar inter-regions. Regions that are completely specific to particular sequences are not associated with a module and are thus characterized negatively by the absence of modules.</p>
      <p>To sum up, the standard approach for the segmentation of biological sequences in relevant modules is the pattern matching approach, where one is looking for common words within a certain admissible rate of errors. The issue described in this paper in rather an aggregation approach: starting from solid anchor boxes (the MR), we establish reasonable criteria to put them in a same class, in a user-understandable way. This is why we use the length of these anchors in our criteria. Dropping the first condition on length in the definition of flexible repeats results in uncontrolled aggregations: it leads to a single module spanning the whole sequences for the family Foldback4 for instance. Looking for <italic>AxB </italic>with the number of allowed errors made proportional to |<italic>x</italic>| in the second condition instead of <italic>min</italic>(|<italic>A</italic>|, |<italic>B</italic>|) cannot be retained because among possible <italic>A </italic>and <italic>B </italic>are single nucleotide sequences and this would results in simply looking for all common approximate words on the set of sequences, a hard problem that has not been answered satisfactorily so far, as it appears in the following discussion comparing results of available tools. To the contrary, the principle "flexibility cannot be greater than the parts it links" offers a neat basis of aggregation that can be practically finely tuned by using parameter <italic>Maxratio</italic>.</p>
    </sec>
    <sec>
      <title>Comparison with other programs</title>
      <p>Studies on non-autonomous transposable elements are rare because the main method of studying the evolution of these elements is based on their alignment with other known elements. Since non-autonomous elements are generally highly variable, including numerous insertions, deletions, and repetitions, previously cited methods fail to find a good organization of the non-autonomous elements. We have tested four recent softwares that combine multiple alignment and graphical tools on the Foldback4 family, trying each time to retrieve direct or reverse copied modules: VISTA [<xref ref-type="bibr" rid="B10">10</xref>], GATA [<xref ref-type="bibr" rid="B11">11</xref>], GraphDNA [<xref ref-type="bibr" rid="B44">44</xref>], Recon [<xref ref-type="bibr" rid="B37">37</xref>] and DomainOrganizer [<xref ref-type="bibr" rid="B13">13</xref>]. Graphical results of these software are provided in the additional files.</p>
      <p>The first software, VISTA <ext-link ext-link-type="uri" xlink:href="http://genome.lbl.gov/vista/index.shtml">http://genome.lbl.gov/vista/index.shtml</ext-link>[<xref ref-type="bibr" rid="B10">10</xref>], requires entering sequences separately and choosing a type of alignment. The user cannot set the value of multiple alignment parameters and one of the sequence must be set as a reference. In our case, the user has to check <italic>n </italic>results where <italic>n </italic>is the number of sequences. Moreover, as VISTA does not display the reference sequence, it is impossible to obtain a complete view of all sequences. We provide in Additional file <xref ref-type="supplementary-material" rid="S1">1</xref> the graph resulting from the selection of F4_1 as the reference sequence. The graph shows that, except for FB4_7, both extremities are conserved in all Foldback4 sequences and that some parts of the internal sequence are conserved. We obtained similar results with the other FB4 sequences as reference. VISTA does not provide the palindromic structure of Foldback that is important to understand the evolution of these sequences. Moreover, the VISTA interface does not allow to change the parameters of the matching region (the minimum size is 100 bp and the minimum percentage of similarity is 70%) and the complexity and the structures of Foldback4 internal sequences vanish completely.</p>
      <p>GATA <ext-link ext-link-type="uri" xlink:href="http://gata.sourceforge.net">http://gata.sourceforge.net</ext-link>[<xref ref-type="bibr" rid="B11">11</xref>] contains two different softwares: GATAliner and GATAPlotter [<xref ref-type="bibr" rid="B11">11</xref>]. GATAliner uses Blast2seq [<xref ref-type="bibr" rid="B45">45</xref>] to create the alignment. Beside standard parameters of BLAST, such as the seed size and the mismatch cost, it offers a specific parameter on the minimal size of alignments that corresponds to <italic>MinSizeModule </italic>in our algorithm. GATAPlotter is an interactive graphical tool that shows the alignment of a reference sequence (like VISTA) against another sequence. GATAPlotter has lots of rendering options and provides also two interesting options for the analysis of the dataset: annotation of aligned sequences and matching regions displayed by percentage of similarity. Additional file <xref ref-type="supplementary-material" rid="S2">2</xref> assembles all multiple alignments with a fixed threshold of 50% similarity to the reference sequence. The first sequence of each alignment corresponds to the reference sequence. On the contrary of VISTA but like our algorithm, GATA shows these sequences contain a large palindromic structure at the extremities. Except the FB4_4 and FB4_9, all other sequences have a mismatch region in the center of their sequences. The main limitation of GATA is the number of sequences the user can study. The user must open <italic>n</italic><sup>2 </sup>windows for <italic>n </italic>sequences to get a global view of them. For Foldback4 sequences we needed to open 100 different alignments. In practice, studies with more than 5 sequences become tedious.</p>
      <p>GraphDNA <ext-link ext-link-type="uri" xlink:href="http://athena.bioc.uvic.ca/tools/GraphDNA">http://athena.bioc.uvic.ca/tools/GraphDNA</ext-link>[<xref ref-type="bibr" rid="B44">44</xref>] uses fixed parameters for the multiple alignment. GraphDNA provides many views of the alignment such as 'Purine Skew', 'AT Skew' and 'DNA Walker'. These views show the skew of nucleotide combination at a given position, calculated on a window of user-defined size. DNA Walker is a graphical view of the four nucleotide skews along the dataset sequence. We chose the 'Purine Skew' view for the analysis of our dataset (Additional file <xref ref-type="supplementary-material" rid="S3">3</xref>). GraphDNA provides in this case a global view of similar nucleotide composition regions that fit well with the conserved blocks observed by using a multiple alignment procedure. Contrary to the two previous softwares, no reference sequence is needed and all sequences are displayed within a single view. We assumed that similar or parallel curves denote similar sequence fragments. The graph shows that all left extremities of sequences, except FB4_1 and FB4_2, start at the same point, and are similar (Additional file <xref ref-type="supplementary-material" rid="S3">3</xref>). After about 200 common bp, the sequences start to take different skews (directions), and after 300 bp, sequences completely diverge. The right extremities are parallel and present the same skew pattern. This suggests that right extremities are similar too but give no details on the internal part.</p>
      <p>Recon <ext-link ext-link-type="uri" xlink:href="http://selab.janelia.org/recon.html">http://selab.janelia.org/recon.html</ext-link>[<xref ref-type="bibr" rid="B37">37</xref>] is a Perl script using BLAST results [<xref ref-type="bibr" rid="B31">31</xref>] as input. The software aggregates the different fragments of BLAST hits in one long aligned region. Users cannot tune the parameters of Recon. On our dataset, the software chose Foldback4 number 11 as the reference sequence.</p>
      <p>Two results of Recon are presented: the final result with all similar parts assembled in blocks after the complete execution of Recon algorithm, and an intermediate state given by Recon that corresponds to the similar parts identified by BLAST and sorted by Recon. The Additional file <xref ref-type="supplementary-material" rid="S4">4</xref> displays the final result using ModuleOrganizer textures. It shows 11 modules that often cover a large part of the sequence. These large modules do not show palindromic structures and differ for each sequence. However, the module number 2 is overlapped by modules 3 and 8 in FB4_1 and FB4_5 respectively. Because we needed details on the composition of each sequence, we had to use the intermediate results proposed by Recon, which contained the unclustered fragments. First, we removed the fragments shorter than <italic>MinSizeModule </italic>(i.e. 18 bp), we labeled the fragments of each Foldback TE in agreement with fragments in the reference sequence and we sorted the fragment by increasing positions. Finally, we renamed modules having the same coordinates in Foldback sequences but not in the reference sequences and we also associate manually modules with different names that have similar coordinates in the reference sequence. The Additional file <xref ref-type="supplementary-material" rid="S5">5</xref> shows the fragments detected by Recon. The Recon modules (Rmodules) 1, 30, 117, 165, 174 and 182 show the relative similarity of left extremities. Right extremities are similar too and share common Rmodules with left extremities, suggesting they could be complementary sequences. It is extremely difficult to point at similarities or structures in the internal part of sequences with the overlapping fragments, especially in the FoldBack4 sequence 11 that contains all Rmodules. For example, only FB4_5 exibits some repeated Rmodules in its internal sequence.</p>
      <p>DomainOrganizer [<xref ref-type="bibr" rid="B13">13</xref>] fails to give a result with the Foldback4 sequences. During the crucial and costly step of domain optimization, too many candidate domains are generated and the program is unable to find out a possible cover of sequences with domains (unpublished data).</p>
      <p>GATA [<xref ref-type="bibr" rid="B11">11</xref>] is the only tested software that showed the palindromic structure. All other softwares failed to show the real structure of extremities and the module evolution of Folback4 sequences. Especially the internal part of sequences remained 'black boxes' in all these tools. Except for DomainOrganizer where we were forced to use the AtREP21 family for the comparison, we summarize in Table <xref ref-type="table" rid="T1">1</xref> the range of application of each software extracted from our study on Foldback4.</p>
      <table-wrap id="T1" position="float">
        <label>Table 1</label>
        <caption>
          <p>Summary structures detected with softwares</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th/>
              <th align="center">Duplication</th>
              <th align="center">Palindrome</th>
              <th align="center">Truncated</th>
              <th align="center">Reference Sequence</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">ModuleOrganizer</td>
              <td align="center">X</td>
              <td align="center">X</td>
              <td align="center">X</td>
              <td/>
            </tr>
            <tr>
              <td colspan="5">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">DomainOrganizer</td>
              <td align="center">X</td>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td colspan="5">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">VISTA</td>
              <td/>
              <td/>
              <td/>
              <td align="center">X</td>
            </tr>
            <tr>
              <td colspan="5">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">GATA</td>
              <td/>
              <td align="center">X</td>
              <td/>
              <td align="center">X</td>
            </tr>
            <tr>
              <td colspan="5">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">GraphDNA</td>
              <td/>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td colspan="5">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">Recon</td>
              <td align="center">x</td>
              <td align="center">x</td>
              <td/>
              <td align="center">X</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>The table summarizes the different structural modules that can be detected by the different tested softwares. The last column indicates if the software needs a reference sequence or not. Big crosses in cells indicate the software displays the corresponding type of structure, small ones mean the structure could be deduced from the results.</p>
        </table-wrap-foot>
      </table-wrap>
    </sec>
  </sec>
  <sec>
    <title>Conclusions</title>
    <p>Our analysis provides structural results on the internal organization of a family of DNA sequences. It can describe the differences between family members in terms of module content and highlights the evolution of the host genome with respect to these components. Such a structural and descriptive abstract view should ease the analysis of TE-genome relationships and give some support for studies on transposition mechanisms.</p>
    <p>Our method needs very few parameters. The most crucial one is <italic>MinSizeModule </italic>and tuning this parameter with several tries is generally sufficient to get desired results. If the size of minimal domains is too small, the number of domains may simply be too large to give an interesting abstraction of the sequence. On the other hand, if the size of domains is too large, the number of domains may be too restricted to formulate a relevant biological interpretation.</p>
    <p>Of course, ModuleOrganizer might be applied in principle to any set of nucleic sequences sharing some similarities and for which a multiple alignment fails to correctly retrieve the architecture of conserved blocks in the sequences. The study of families of transposons is a natural setting for this tool but application on other types of sequences might help to explore other sequences at the desired level of abstraction.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>ST has produced all the necessary code with the help of CR and made the experiments. JN supervised the study and proposed the model. JN and ST wrote the initial version of the paper. CR and FT have checked and improved the writing of the paper. All authors read and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>Visualization of Foldback4 family with VISTA</bold>. We chose FB4_1 as reference sequence. The bright red zones correspond to high similarity regions and the white zones correspond to low similarity region. The alignment criteria of VISTA are fixed in the software.</p>
      </caption>
      <media xlink:href="1471-2105-11-474-S1.PNG" mimetype="image" mime-subtype="png">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S2">
      <caption>
        <title>Additional file 2</title>
        <p><bold>Visualization of Foldback4 family with GATA</bold>. The reference sequence is FB4_1. The black and gray rectangles correspond to regions matched in the same direction and the red and bright red ones correspond to regions matched in reverse direction. The brighter the region, the more the similarity decreases.</p>
      </caption>
      <media xlink:href="1471-2105-11-474-S2.PNG" mimetype="image" mime-subtype="png">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S3">
      <caption>
        <title>Additional file 3</title>
        <p><bold>Visualization of Foldback4 family with GraphDNA</bold>. Each line corresponds to a different sequence of FoldBack4. All sequences start at the same coordinate. The sequence FB4_1 is the reference sequence.</p>
      </caption>
      <media xlink:href="1471-2105-11-474-S3.PNG" mimetype="image" mime-subtype="png">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S4">
      <caption>
        <title>Additional file 4</title>
        <p><bold>Visualization of Foldback4 family with Recon</bold>. As in the results displayed by ModuleOrganizer, each module has its own texture with graphDNA. The result corresponds to the final output of Recon: all similar parts have been associated in regard to the Recon results.</p>
      </caption>
      <media xlink:href="1471-2105-11-474-S4.PNG" mimetype="image" mime-subtype="png">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S5">
      <caption>
        <title>Additional file 5</title>
        <p><bold>Visualization of Foldback4 family using intermediate results of Recon</bold>. As in the results displayed by ModuleOrganizer, each module has its own texture with graphDNA. The intermediate results correspond to the enumeration of all similar parts recognized by BLAST comparisons.</p>
      </caption>
      <media xlink:href="1471-2105-11-474-S5.PNG" mimetype="image" mime-subtype="png">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>We thank the reviewers for their helpful remarks that allow to improve the initial version of this paper. The necessary computing environment has been provided by the bioinformatics resource center from Biogenouest <ext-link ext-link-type="uri" xlink:href="http://genouest.org">http://genouest.org</ext-link>. Thank you to Olivier Sallou for making the code available on the platform within the Mobyle environment and Jackie Bynoe for help in proofreading. This work has been supported by a grant from the French <bold>Agence Nationale de la Recherche </bold>(<bold>Modulome </bold>project).</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kidwell</surname>
          <given-names>MG</given-names>
        </name>
        <name>
          <surname>Lisch</surname>
          <given-names>DR</given-names>
        </name>
        <article-title>Perspective: transposable elements and host genome evolution</article-title>
        <source>Trends Ecol Evol</source>
        <year>2001</year>
        <volume>15</volume>
        <fpage>95</fpage>
        <lpage>99</lpage>
        <pub-id pub-id-type="doi">10.1016/S0169-5347(99)01817-0</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="book">
        <name>
          <surname>Craig</surname>
          <given-names>NL</given-names>
        </name>
        <name>
          <surname>Craigie</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Gellert</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Lambowitz</surname>
          <given-names>A</given-names>
        </name>
        <source>Mobile DNA II</source>
        <year>2002</year>
        <publisher-name>Washington DC: American Society for Microbiology Press</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Romanish</surname>
          <given-names>MT</given-names>
        </name>
        <name>
          <surname>Nakamura</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Lai</surname>
          <given-names>CB</given-names>
        </name>
        <name>
          <surname>Wang</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>L</surname>
          <given-names>MD</given-names>
        </name>
        <article-title>A novel protein isoform of the multicopy human NAIP gene derives from intragenic Alu SINE promoters</article-title>
        <source>PLoS One</source>
        <year>2009</year>
        <volume>4</volume>
        <fpage>e5761</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0005761</pub-id>
        <pub-id pub-id-type="pmid">19488400</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Cordaux</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Udit</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Batzer</surname>
          <given-names>MA</given-names>
        </name>
        <name>
          <surname>Feschotte</surname>
          <given-names>C</given-names>
        </name>
        <article-title>Birth of a chimeric primate gene by capture of the transposase gene from a mobile element</article-title>
        <source>Proc Natl Acad Sci USA</source>
        <year>2006</year>
        <volume>103</volume>
        <fpage>8101</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.0601161103</pub-id>
        <pub-id pub-id-type="pmid">16672366</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Feschotte</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Pritham E</surname>
          <given-names>J</given-names>
        </name>
        <article-title>DNA transposons and the evolution of eukaryotic genomes</article-title>
        <source>Annu Rev Genet</source>
        <year>2007</year>
        <volume>41</volume>
        <fpage>331</fpage>
        <lpage>68</lpage>
        <pub-id pub-id-type="doi">10.1146/annurev.genet.40.110405.090448</pub-id>
        <pub-id pub-id-type="pmid">18076328</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Quesneville</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Nouaud</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Anxolabehere</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Recurrent recruitment of the THAP DNA-binding domain and molecular domestication of the P-transposable element</article-title>
        <source>Mol Biol Evol</source>
        <year>2005</year>
        <volume>22</volume>
        <fpage>741</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1093/molbev/msi064</pub-id>
        <pub-id pub-id-type="pmid">15574804</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Almeida</surname>
          <given-names>LM</given-names>
        </name>
        <name>
          <surname>Silva</surname>
          <given-names>IT</given-names>
        </name>
        <name>
          <surname>Silva</surname>
          <given-names>WAJ</given-names>
        </name>
        <name>
          <surname>Castro</surname>
          <given-names>JP</given-names>
        </name>
        <name>
          <surname>Riggs</surname>
          <given-names>PK</given-names>
        </name>
        <name>
          <surname>Carareto</surname>
          <given-names>CM</given-names>
        </name>
        <name>
          <surname>E</surname>
          <given-names>AM</given-names>
        </name>
        <article-title>The contribution of transposable elements to Bos taurus gene structure</article-title>
        <source>Gene</source>
        <year>2007</year>
        <volume>390</volume>
        <fpage>180</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gene.2006.10.012</pub-id>
        <pub-id pub-id-type="pmid">17157447</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wessler</surname>
          <given-names>SR</given-names>
        </name>
        <name>
          <surname>Bureau</surname>
          <given-names>TE</given-names>
        </name>
        <name>
          <surname>White</surname>
          <given-names>SE</given-names>
        </name>
        <article-title>LTR-retrotransposons and MITEs: important players in the evolution of plant genomes</article-title>
        <source>Genet Dev</source>
        <year>1995</year>
        <volume>5</volume>
        <fpage>814</fpage>
        <lpage>821</lpage>
        <pub-id pub-id-type="doi">10.1016/0959-437X(95)80016-X</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Feschotte</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Mouches</surname>
          <given-names>C</given-names>
        </name>
        <article-title>Evidence that a family of miniature inverted-repeat transposable elements (MITEs) from the <italic>Arabidopsis thaliana </italic>genome has arisen from a pogo-like DNA transposon</article-title>
        <source>Mol Biol Evol</source>
        <year>2000</year>
        <volume>17</volume>
        <fpage>730</fpage>
        <lpage>737</lpage>
        <pub-id pub-id-type="pmid">10779533</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Brudno</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Poliakov</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Minovitsky</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Ratnere</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Dubchak</surname>
          <given-names>I</given-names>
        </name>
        <article-title>Multiple whole genome alignments and novel biomedical applications at the VISTA portal</article-title>
        <source>Nucleic Acids Res</source>
        <year>2007</year>
        <volume>35</volume>
        <fpage>W669</fpage>
        <lpage>W674</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkm279</pub-id>
        <pub-id pub-id-type="pmid">17488840</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nix</surname>
          <given-names>DA</given-names>
        </name>
        <name>
          <surname>Eisen</surname>
          <given-names>MB</given-names>
        </name>
        <article-title>GATA: a graphic alignment tool for comparative sequence analysis</article-title>
        <source>BMC Bioinformatics</source>
        <year>2005</year>
        <volume>6</volume>
        <fpage>9</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-6-9</pub-id>
        <pub-id pub-id-type="pmid">15655071</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="other">
        <name>
          <surname>Price</surname>
          <given-names>AL</given-names>
        </name>
        <name>
          <surname>Jones</surname>
          <given-names>NC</given-names>
        </name>
        <name>
          <surname>Pevzner</surname>
          <given-names>PA</given-names>
        </name>
        <article-title>De novo identification of repeat families in large genomes</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <issue>Suppl 1</issue>
        <fpage>i351</fpage>
        <lpage>i358</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti1018</pub-id>
        <pub-id pub-id-type="pmid">15961478</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Tempel</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Giraud</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Lavenier</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Lerman</surname>
          <given-names>IC</given-names>
        </name>
        <name>
          <surname>Valin</surname>
          <given-names>AS</given-names>
        </name>
        <name>
          <surname>Couée</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Amrani</surname>
          <given-names>AE</given-names>
        </name>
        <name>
          <surname>Nicolas</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Domain organization within repeated DNA sequences: application to the study of a family of transposable elements</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>1948</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl337</pub-id>
        <pub-id pub-id-type="pmid">16809391</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Potter</surname>
          <given-names>SS</given-names>
        </name>
        <article-title>DNA sequence of a foldback transposable element in Drosophilia</article-title>
        <source>Nature</source>
        <year>1982</year>
        <volume>297</volume>
        <fpage>201</fpage>
        <lpage>204</lpage>
        <pub-id pub-id-type="doi">10.1038/297201a0</pub-id>
        <pub-id pub-id-type="pmid">6176872</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Smith</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Bringaud</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Papadopoulou</surname>
          <given-names>B</given-names>
        </name>
        <article-title>Organization and evolution of two SIDER retroposon subfamilies and their impact on the Leishmania genome</article-title>
        <source>BMC Genomics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>240</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-10-240</pub-id>
        <pub-id pub-id-type="pmid">19463167</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Jurka</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Kapitonov</surname>
          <given-names>VV</given-names>
        </name>
        <name>
          <surname>Pavlicek</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Klonowski</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Kohany</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Walichiewicz</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Repbase Update, a database of eukaryotic repetitive elements</article-title>
        <source>Cytogentic and Genome Research</source>
        <year>2005</year>
        <volume>110</volume>
        <fpage>462</fpage>
        <lpage>467</lpage>
        <pub-id pub-id-type="doi">10.1159/000084979</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ukkonen</surname>
          <given-names>E</given-names>
        </name>
        <article-title>On-line construction of suffix-trees</article-title>
        <source>Algorithmica</source>
        <year>1995</year>
        <volume>14</volume>
        <fpage>249</fpage>
        <lpage>260</lpage>
        <pub-id pub-id-type="doi">10.1007/BF01206331</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="other">
        <name>
          <surname>Bieganski</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Riedl</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Carlis</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Retzel</surname>
          <given-names>E</given-names>
        </name>
        <article-title>Generalized Suffix Trees for Biological Sequence Data</article-title>
        <source>Biotechnology Computing, Proceedings of the Twenty-Seventh Hawaii International Conference</source>
        <year>1994</year>
        <fpage>35</fpage>
        <lpage>44</lpage>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="book">
        <name>
          <surname>Gusfield</surname>
          <given-names>D</given-names>
        </name>
        <source>Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology</source>
        <year>1997</year>
        <publisher-name>Cambridge University Press</publisher-name>
        <comment>ISBN 0-521-58519-8</comment>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Choi</surname>
          <given-names>KH</given-names>
        </name>
        <name>
          <surname>Kim</surname>
          <given-names>KJ</given-names>
        </name>
        <article-title>Applications of transposon-based gene delivery system in bacteria</article-title>
        <source>J Microbiol Biotechnol</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>217</fpage>
        <lpage>28</lpage>
        <pub-id pub-id-type="pmid">19349746</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Parks</surname>
          <given-names>AR</given-names>
        </name>
        <name>
          <surname>Peters</surname>
          <given-names>JE</given-names>
        </name>
        <article-title>Tn7 elements: engendering diversity from chromosomes to episomes</article-title>
        <source>Plasmid</source>
        <year>2009</year>
        <volume>61</volume>
        <fpage>1</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1016/j.plasmid.2008.09.008</pub-id>
        <pub-id pub-id-type="pmid">18951916</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kapitonov</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Jurka</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Helitrons on a roll: eukaryotic rolling-circle transposons</article-title>
        <source>Trends Genet</source>
        <year>2007</year>
        <volume>23</volume>
        <fpage>521</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1016/j.tig.2007.08.004</pub-id>
        <pub-id pub-id-type="pmid">17850916</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Hanada</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Vallejo</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Nobuta</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Slotkin</surname>
          <given-names>RK</given-names>
        </name>
        <name>
          <surname>Lisch</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Meyers</surname>
          <given-names>BC</given-names>
        </name>
        <name>
          <surname>Shiu</surname>
          <given-names>SH</given-names>
        </name>
        <name>
          <surname>Jiang</surname>
          <given-names>N</given-names>
        </name>
        <article-title>The functional role of pack-MULEs in rice inferred from purifying selection and expression profile</article-title>
        <source>Plant Cell</source>
        <year>2009</year>
        <volume>21</volume>
        <fpage>25</fpage>
        <lpage>38</lpage>
        <pub-id pub-id-type="doi">10.1105/tpc.108.063206</pub-id>
        <pub-id pub-id-type="pmid">19136648</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yang</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Bennetzen</surname>
          <given-names>JL</given-names>
        </name>
        <article-title>Distribution, diversity, evolution, and survival of Helitrons in the maize genome</article-title>
        <source>Proc Natl Acad Sci USA</source>
        <year>2009</year>
        <volume>106</volume>
        <fpage>19922</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="pmid">19926865</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yang</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Zhang</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Hancock</surname>
          <given-names>CN</given-names>
        </name>
        <name>
          <surname>R</surname>
          <given-names>WS</given-names>
        </name>
        <article-title>Transposition of the rice miniature inverted repeat transposable element mPing in <italic>Arabidopsis thaliana</italic></article-title>
        <source>Proc Natl Acad Sci USA</source>
        <year>2007</year>
        <volume>104</volume>
        <fpage>10962</fpage>
        <lpage>10967</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.0702080104</pub-id>
        <pub-id pub-id-type="pmid">17578919</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yang</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Nagel</surname>
          <given-names>DH</given-names>
        </name>
        <name>
          <surname>Feschotte</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>N</surname>
          <given-names>HC</given-names>
        </name>
        <name>
          <surname>Wessler</surname>
          <given-names>SR</given-names>
        </name>
        <article-title>Tuned for transposition: molecular determinants underlying the hyperactivity of a Stowaway MITE</article-title>
        <source>Science</source>
        <year>2009</year>
        <volume>325</volume>
        <fpage>1391</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1175688</pub-id>
        <pub-id pub-id-type="pmid">19745152</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Casals</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Cáceres</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Maanfrin</surname>
          <given-names>MH</given-names>
        </name>
        <name>
          <surname>Gonázales</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Ruiz</surname>
          <given-names>A</given-names>
        </name>
        <article-title>Molecular characterization and chromosomal distribution of Galileo, Kepler and Newton, three folback transposable element in <italic>Drosophila buzzati </italic>species complex</article-title>
        <source>Genetics</source>
        <year>2005</year>
        <volume>169</volume>
        <fpage>2047</fpage>
        <lpage>2059</lpage>
        <pub-id pub-id-type="doi">10.1534/genetics.104.035048</pub-id>
        <pub-id pub-id-type="pmid">15695364</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Windsor</surname>
          <given-names>AJ</given-names>
        </name>
        <name>
          <surname>Wadell</surname>
          <given-names>CS</given-names>
        </name>
        <article-title>FARE, a new family of foldback transposons in Arabidopsis</article-title>
        <source>Genetics</source>
        <year>2000</year>
        <volume>156</volume>
        <fpage>1983</fpage>
        <lpage>1995</lpage>
        <pub-id pub-id-type="pmid">11102389</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dooner</surname>
          <given-names>HK</given-names>
        </name>
        <name>
          <surname>Weil</surname>
          <given-names>CF</given-names>
        </name>
        <article-title>Give-and-take: interactions between DNA transposons and their host plant genomes</article-title>
        <source>Curr Opin Genet Dev</source>
        <year>2007</year>
        <volume>17</volume>
        <fpage>486</fpage>
        <lpage>92</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gde.2007.08.010</pub-id>
        <pub-id pub-id-type="pmid">17919898</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Marsan</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Sagot</surname>
          <given-names>MF</given-names>
        </name>
        <article-title>Algorithms for Extracting Structured Motifs Using a Suffix Tree with an Application to Promoter and Regulatory Site Consensus Identification</article-title>
        <source>Journal of Computational Biology</source>
        <year>2000</year>
        <volume>7</volume>
        <issue>3-4</issue>
        <fpage>345</fpage>
        <lpage>362</lpage>
        <pub-id pub-id-type="doi">10.1089/106652700750050826</pub-id>
        <pub-id pub-id-type="pmid">11108467</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Altschul</surname>
          <given-names>SF</given-names>
        </name>
        <name>
          <surname>Madden</surname>
          <given-names>TL</given-names>
        </name>
        <name>
          <surname>Schaeffer</surname>
          <given-names>AA</given-names>
        </name>
        <name>
          <surname>Zhang</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Zhang</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Miller</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Lipman</surname>
          <given-names>DJ</given-names>
        </name>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <fpage>3389</fpage>
        <lpage>3402</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
        <pub-id pub-id-type="pmid">9254694</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ivics</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Kaufman</surname>
          <given-names>CD</given-names>
        </name>
        <name>
          <surname>Zayed</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Miskey</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Walisko</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Izsvá</surname>
          <given-names>ZK</given-names>
        </name>
        <article-title>The Sleeping Beauty Transposable Element: Evolution, Regulation and Genetic Applications</article-title>
        <source>Curr Issues Mol Biol</source>
        <year>2004</year>
        <volume>6</volume>
        <fpage>43</fpage>
        <lpage>56</lpage>
        <pub-id pub-id-type="pmid">14632258</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Bigot</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Brillet</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Augé-Gouillou</surname>
          <given-names>C</given-names>
        </name>
        <article-title>Conservation of Palindromic and Mirror Motifs within Inverted Terminal Repeats of mariner-like Elements</article-title>
        <source>J Mol Biol</source>
        <year>2005</year>
        <volume>351</volume>
        <fpage>108</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jmb.2005.05.006</pub-id>
        <pub-id pub-id-type="pmid">15946679</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ward</surname>
          <given-names>JH</given-names>
        </name>
        <article-title>Hierarchical Grouping to Optimize an Objective Function</article-title>
        <source>Journal of the American Statistical Association</source>
        <year>1963</year>
        <volume>58</volume>
        <fpage>236</fpage>
        <lpage>244</lpage>
        <pub-id pub-id-type="doi">10.2307/2282967</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nicolas</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Durand</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Ranchy</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Tempel</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Valin</surname>
          <given-names>AS</given-names>
        </name>
        <article-title>Suffix-tree analyser (STAN): looking for nucleotidic and peptidic patterns in chromosomes</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>4408</fpage>
        <lpage>4410</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti710</pub-id>
        <pub-id pub-id-type="pmid">16223791</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="other">
        <article-title>FGENESH software</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.softberry.com/berry.phtml">http://www.softberry.com/berry.phtml</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B37">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Bao</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Eddy</surname>
          <given-names>SR</given-names>
        </name>
        <article-title>Automated de novo identification of repeat sequence families in sequenced genomes</article-title>
        <source>Genome Res</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>1269</fpage>
        <lpage>1276</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.88502</pub-id>
        <pub-id pub-id-type="pmid">12176934</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B38">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Helden</surname>
          <given-names>Jv</given-names>
        </name>
        <name>
          <surname>Rios</surname>
          <given-names>AF</given-names>
        </name>
        <name>
          <surname>Collado-Vides</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Discovering regulatory elements in non-coding sequences by analysis of spaced dyads</article-title>
        <source>Nucl Acids Res</source>
        <year>2000</year>
        <volume>28</volume>
        <issue>8</issue>
        <fpage>1808</fpage>
        <lpage>1818</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/28.8.1808</pub-id>
        <pub-id pub-id-type="pmid">10734201</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B39">
      <mixed-citation publication-type="book">
        <name>
          <surname>Pisanti</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Carvalho</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Marsan</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Sagot</surname>
          <given-names>MF</given-names>
        </name>
        <person-group person-group-type="editor">Correa JR, Hevia A, Kiwi MA</person-group>
        <article-title>RISOTTO: Fast Extraction of Motifs with Mismatches</article-title>
        <source>LATIN, Lecture Notes in Computer Science</source>
        <year>2006</year>
        <volume>3887</volume>
        <publisher-name>Springer</publisher-name>
        <fpage>757</fpage>
        <lpage>768</lpage>
        <comment>full_text</comment>
      </mixed-citation>
    </ref>
    <ref id="B40">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Mehldau</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Myers</surname>
          <given-names>G</given-names>
        </name>
        <article-title>A system for pattern matching applications on biosequences</article-title>
        <source>Computer Applications in the Biosciences (Bioinformatics)</source>
        <year>1993</year>
        <volume>9</volume>
        <issue>3</issue>
        <fpage>299</fpage>
        <lpage>314</lpage>
      </mixed-citation>
    </ref>
    <ref id="B41">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Morgante</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Policriti</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Vitacolonna</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Zuccolo</surname>
          <given-names>A</given-names>
        </name>
        <article-title>Structured Motifs Search</article-title>
        <source>Journal of Computational Biology</source>
        <year>2005</year>
        <volume>12</volume>
        <issue>8</issue>
        <fpage>1065</fpage>
        <lpage>1082</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2005.12.1065</pub-id>
        <pub-id pub-id-type="pmid">16241898</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B42">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Zhang</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Zaki</surname>
          <given-names>M</given-names>
        </name>
        <article-title>SMOTIF: efficient structured pattern and profile motif search</article-title>
        <source>Algorithms for Molecular Biology</source>
        <year>2006</year>
        <volume>1</volume>
        <fpage>22</fpage>
        <pub-id pub-id-type="doi">10.1186/1748-7188-1-22</pub-id>
        <pub-id pub-id-type="pmid">17118189</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B43">
      <mixed-citation publication-type="book">
        <name>
          <surname>Halachev</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Shiri</surname>
          <given-names>N</given-names>
        </name>
        <article-title>Fast Structured Motif Search in DNA Sequences</article-title>
        <source>Bioinformatics Research and Development, 2nd Int. Conference, BIRD 2008, Vienna, Austria, July 7-9, 2008</source>
        <year>2008</year>
        <volume>13</volume>
        <publisher-name>Communications in Computer and Information Science, Springer</publisher-name>
        <fpage>58</fpage>
        <lpage>73</lpage>
      </mixed-citation>
    </ref>
    <ref id="B44">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Thomas</surname>
          <given-names>JM</given-names>
        </name>
        <name>
          <surname>Horspool</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Brown</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Tcherepanov</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Upton</surname>
          <given-names>C</given-names>
        </name>
        <article-title>GraphDNA: a Java program for graphical display of DNA composition analyses</article-title>
        <source>BMC Bioinformatics</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>21</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-21</pub-id>
        <pub-id pub-id-type="pmid">17244370</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B45">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Tatusova</surname>
          <given-names>TA</given-names>
        </name>
        <name>
          <surname>Madden</surname>
          <given-names>TL</given-names>
        </name>
        <article-title>BLAST 2 Sequences, a new tool for comparing protein and nucleotide sequences</article-title>
        <source>FEMS Microbiol Lett</source>
        <year>1999</year>
        <volume>174</volume>
        <fpage>247</fpage>
        <lpage>250</lpage>
        <pub-id pub-id-type="doi">10.1111/j.1574-6968.1999.tb13575.x</pub-id>
        <pub-id pub-id-type="pmid">10339815</pub-id>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
