<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9563681</article-id>
    <article-id pub-id-type="pmid">36000872</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btac564</article-id>
    <article-id pub-id-type="publisher-id">btac564</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ntHash2: recursive spaced seed hashing for nucleotide sequences</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-2126-5644</contrib-id>
        <name>
          <surname>Kazemi</surname>
          <given-names>Parham</given-names>
        </name>
        <!--pkazemi@bcgsc.ca-->
        <aff><institution>Canada’s Michael Smith Genome Sciences Centre, British Columbia Cancer Agency</institution>, Vancouver, BC V5Z 4S6, <country country="CA">Canada</country></aff>
        <aff><institution>Faculty of Science, University of British Columbia</institution>, Vancouver, BC V6T 1Z4, <country country="CA">Canada</country></aff>
        <xref rid="btac564-cor1" ref-type="corresp"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wong</surname>
          <given-names>Johnathan</given-names>
        </name>
        <aff><institution>Canada’s Michael Smith Genome Sciences Centre, British Columbia Cancer Agency</institution>, Vancouver, BC V5Z 4S6, <country country="CA">Canada</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Nikolić</surname>
          <given-names>Vladimir</given-names>
        </name>
        <aff><institution>Canada’s Michael Smith Genome Sciences Centre, British Columbia Cancer Agency</institution>, Vancouver, BC V5Z 4S6, <country country="CA">Canada</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mohamadi</surname>
          <given-names>Hamid</given-names>
        </name>
        <aff><institution>Amazon Web Services Inc.</institution>, Seattle, WA 98109, <country country="US">USA</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-9890-2293</contrib-id>
        <name>
          <surname>Warren</surname>
          <given-names>René L</given-names>
        </name>
        <aff><institution>Canada’s Michael Smith Genome Sciences Centre, British Columbia Cancer Agency</institution>, Vancouver, BC V5Z 4S6, <country country="CA">Canada</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-0950-7839</contrib-id>
        <name>
          <surname>Birol</surname>
          <given-names>Inanç</given-names>
        </name>
        <!--ibirol@bcgsc.ca-->
        <aff><institution>Canada’s Michael Smith Genome Sciences Centre, British Columbia Cancer Agency</institution>, Vancouver, BC V5Z 4S6, <country country="CA">Canada</country></aff>
        <aff><institution>Department of Medical Genetics, University of British Columbia</institution>, Vancouver, BC V6T 1Z3, <country country="CA">Canada</country></aff>
        <xref rid="btac564-cor1" ref-type="corresp"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Robinson</surname>
          <given-names>Peter</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btac564-cor1">To whom correspondence should be addressed. <email>pkazemi@bcgsc.ca</email> or <email>ibirol@bcgsc.ca</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>15</day>
      <month>10</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-08-24">
      <day>24</day>
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>24</day>
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <volume>38</volume>
    <issue>20</issue>
    <fpage>4812</fpage>
    <lpage>4813</lpage>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>5</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>21</day>
        <month>7</month>
        <year>2022</year>
      </date>
      <date date-type="editorial-decision">
        <day>12</day>
        <month>8</month>
        <year>2022</year>
      </date>
      <date date-type="corrected-typeset">
        <day>01</day>
        <month>9</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btac564.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Spaced seeds are robust alternatives to <italic toggle="yes">k</italic>-mers in analyzing nucleotide sequences with high base mismatch rates. Hashing is also crucial for efficiently storing abundant sequence data. Here, we introduce ntHash2, a fast algorithm for spaced seed hashing that can be integrated into various bioinformatics tools for efficient sequence analysis with applications in genome research.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>ntHash2 is up to 2.1× faster at hashing various spaced seeds than the previous version and 3.8× faster than conventional hashing algorithms with naïve adaptation. Additionally, we reduced the collision rate of ntHash for longer <italic toggle="yes">k</italic>-mer lengths and improved the uniformity of the hash distribution by modifying the canonical hashing mechanism.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>ntHash2 is freely available online at <ext-link xlink:href="http://www.github.com/bcgsc/ntHash" ext-link-type="uri">github.com/bcgsc/ntHash</ext-link> under an MIT license.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <counts>
      <page-count count="2"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Many applications in bioinformatics utilize hashing algorithms to efficiently populate and query various data structures. Previously, we introduced ntHash (<xref rid="btac564-B5" ref-type="bibr">Mohamadi <italic toggle="yes">et al.</italic>, 2016</xref>), a recursive function for hashing consecutive substrings of length <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula> (<inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mers) in nucleotide sequences.</p>
    <p>With the advent of high-throughput sequencing and rise in popularity of Illumina, Inc. (San Diego, USA) short-read sequencing, <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer-based analysis solutions have flourished. Even though they show versatility in normalizing highly accurate sequencing data, <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mers fail to distinguish between similar sequences that may exist due to polymorphisms or arise from sequencing errors. Error tolerance is particularly important today as long reads technologies offered by Oxford Nanopore Technologies PLC (Oxford, UK) or Pacific Biosciences of California, Inc. (Menlo Park, CA, USA) gain in popularity, despite their appreciable error rates. To allow a deterministic level of tolerance for base mismatches, <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mers can be replaced by spaced seeds, i.e. patterns of ‘care’ and ‘do not care’ positions. Spaced seeds are used routinely in sequence analysis applications, such as homology search (<xref rid="btac564-B4" ref-type="bibr">Ma <italic toggle="yes">et al.</italic>, 2002</xref>) and classification (<xref rid="btac564-B2" ref-type="bibr">Chu <italic toggle="yes">et al.</italic>, 2020</xref>).</p>
    <p>Few algorithms are optimized for spaced seed hashing. Typically, users take the inefficient approach of replacing ‘do not care’ positions with an ignored character and then employ a <inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer hashing algorithm to hash the masked string. In this work, we developed an efficient spaced seed hashing method by leveraging the properties of recursive hashing.</p>
  </sec>
  <sec>
    <title>2 Methods</title>
    <p>In ntHash (<xref rid="btac564-B5" ref-type="bibr">Mohamadi <italic toggle="yes">et al.</italic>, 2016</xref>), one initially computes a 64-bit hash value for the first <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer in a longer sequence. Subsequent hash values are then generated by removing the first character of the previous <inline-formula id="IE8"><mml:math id="IM8" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer and including the next character in the sequence using left rotation (<inline-formula id="IE9"><mml:math id="IM9" display="inline" overflow="scroll"><mml:mi mathvariant="italic">rol</mml:mi></mml:math></inline-formula>) and XOR operations (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S1</xref>). However, since <inline-formula id="IE10"><mml:math id="IM10" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">rol</mml:mi></mml:mrow><mml:mrow><mml:mn>64</mml:mn></mml:mrow></mml:msup><mml:mfenced open="(" close=")" separators="|"><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:math></inline-formula> when storing rotation outputs in 64-bit words, this raises the issue of rotational periodicity and leads to increased hash collision rates for higher values of <inline-formula id="IE11"><mml:math id="IM11" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>. We address this issue in ntHash2 by replacing <inline-formula id="IE12"><mml:math id="IM12" display="inline" overflow="scroll"><mml:mi mathvariant="italic">rol</mml:mi></mml:math></inline-formula> with a new function called <inline-formula id="IE13"><mml:math id="IM13" display="inline" overflow="scroll"><mml:mi mathvariant="italic">srol</mml:mi></mml:math></inline-formula>, short for split rotation. To compute the <inline-formula id="IE14"><mml:math id="IM14" display="inline" overflow="scroll"><mml:mi mathvariant="italic">srol</mml:mi></mml:math></inline-formula> of a 64-bit word <inline-formula id="IE15"><mml:math id="IM15" display="inline" overflow="scroll"><mml:mi>x</mml:mi></mml:math></inline-formula>, we first split <inline-formula id="IE16"><mml:math id="IM16" display="inline" overflow="scroll"><mml:mi>x</mml:mi></mml:math></inline-formula> into <inline-formula id="IE17"><mml:math id="IM17" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>-bit sub-words (<inline-formula id="IE18"><mml:math id="IM18" display="inline" overflow="scroll"><mml:mo>∑</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>64</mml:mn></mml:math></inline-formula> and <inline-formula id="IE19"><mml:math id="IM19" display="inline" overflow="scroll"><mml:mo>∀</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>:</mml:mo><mml:mo> </mml:mo><mml:mtext>gcd</mml:mtext><mml:mfenced open="(" close=")" separators="|"><mml:mrow><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math></inline-formula>), rotate the sub-words separately, and finally join the results according to their placement in <inline-formula id="IE20"><mml:math id="IM20" display="inline" overflow="scroll"><mml:mi>x</mml:mi></mml:math></inline-formula>. Hence, the period of <inline-formula id="IE21"><mml:math id="IM21" display="inline" overflow="scroll"><mml:mi mathvariant="italic">srol</mml:mi></mml:math></inline-formula> is <inline-formula id="IE22"><mml:math id="IM22" display="inline" overflow="scroll"><mml:mtext>lcm</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:math></inline-formula>, which makes it more suitable than <inline-formula id="IE23"><mml:math id="IM23" display="inline" overflow="scroll"><mml:mi mathvariant="italic">rol</mml:mi></mml:math></inline-formula> for bioinformatics applications with longer <italic toggle="yes">k</italic>-mer lengths (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S2</xref>).</p>
    <p>To improve the uniformity of hash distribution, we define the canonical hash value of each seed as the sum of the forward-strand and reverse-complement hashes as a replacement for the minimum of the hashes, which was used in the previous version (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S3</xref>).</p>
    <p>The main novelty of ntHash2 is our approach to spaced seed hashing. Let <inline-formula id="IE24"><mml:math id="IM24" display="inline" overflow="scroll"><mml:mi>s</mml:mi></mml:math></inline-formula> be a spaced seed composed of <inline-formula id="IE25"><mml:math id="IM25" display="inline" overflow="scroll"><mml:mi>w</mml:mi></mml:math></inline-formula> 1s (seed weight) and <inline-formula id="IE26"><mml:math id="IM26" display="inline" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mi>w</mml:mi></mml:math></inline-formula> 0s as ‘care’ and ‘do not care’ positions, respectively. We define a <italic toggle="yes">block</italic> as a consecutive run of 1s flanked by 0s or the seed’s ends. First, we store the indices of the first ‘1’ in each block and the first ‘0’ after the block in a list <inline-formula id="IE27"><mml:math id="IM27" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math></inline-formula>. Blocks of size one, or <italic toggle="yes">monomers</italic>, are stored and encoded separately to prevent excess XOR operations. To find a hash value for the first <inline-formula id="IE28"><mml:math id="IM28" display="inline" overflow="scroll"><mml:mo>|</mml:mo><mml:mi>s</mml:mi><mml:mo>|</mml:mo></mml:math></inline-formula> characters, we iterate over block ranges and include the characters using <inline-formula id="IE29"><mml:math id="IM29" display="inline" overflow="scroll"><mml:mi mathvariant="italic">srol</mml:mi></mml:math></inline-formula> and XOR operations with time complexity of <inline-formula id="IE30"><mml:math id="IM30" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mo>(</mml:mo><mml:mi>w</mml:mi><mml:mo>)</mml:mo></mml:math></inline-formula>. We then generate each subsequent hash by removing the character respective to the blocks’ first indices and including the characters pointed by the second indices, taking <inline-formula id="IE31"><mml:math id="IM31" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mo>(</mml:mo><mml:mfenced open="|" close="|" separators="|"><mml:mrow><mml:mi>B</mml:mi></mml:mrow></mml:mfenced><mml:mo>)</mml:mo></mml:math></inline-formula> time. We finally include the positions stored in the list of monomers, resulting in two XOR operations for each block and one for each monomer. For faster computation, ntHash2 redefines blocks as stretches of 0s if the number of predicted XOR operations is fewer for excluding 0s from the hash value (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S4</xref>).</p>
    <p>As before, ntHash2 can perform reverse-complement hashing without requiring extra iterations by swapping the corresponding indices in the blocks. Additionally, ntHash2 can generate multiple hashes per spaced seed, roll backwards in the input sequence and process a stream of characters in real-time (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S5</xref>).</p>
  </sec>
  <sec>
    <title>3 Results and discussion</title>
    <p>We evaluate ntHash2 using randomly generated sequences to show its independence from the nature of the data. The spaced seeds used in our experiments showcase various conditions and their impact on ntHash2’s performance (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section S6</xref>). As expected, run times scale linearly with respect to the number of processed substrings, and hashing seeds with more blocks and monomers takes more time (<xref rid="btac564-F1" ref-type="fig">Fig. 1a</xref>).</p>
    <fig position="float" id="btac564-F1">
      <label>Fig. 1.</label>
      <caption>
        <p>(<bold>a</bold>) Linear increase of the wall clock time required by ntHash2 to generate spaced seed hashes (Seeds 1–6) from 1 million random 1 kbp sequences (one hash value per seed). Hashing spaced seeds with more blocks and monomers takes more time. (<bold>b</bold>) Histogram of a million <inline-formula id="IE32"><mml:math id="IM32" display="inline" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mi mathvariant="normal">mer</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">hashes</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">generated</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">by</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">ntHash</mml:mi><mml:mn>2</mml:mn><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">from</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">random</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mn>100</mml:mn><mml:mo>-</mml:mo><mml:mi mathvariant="normal">mers</mml:mi><mml:mo>.</mml:mo><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">Hash</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mi mathvariant="normal">values</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mo>(</mml:mo><mml:mi>H</mml:mi></mml:math></inline-formula>) are distributed uniformly in the normalized 64-bit word space (<italic toggle="yes">x</italic>-axis). The mean and standard deviation of the bin counts are 1000 ± 31.29, which is close to the ideal value of 1000 hashes per bin. (<bold>c</bold>) Average wall clock time elapsed by ntHash2 and similar hashing algorithms on a unique dataset (10<sup>6</sup> random 1 kbp sequences) over 3 runs. Standard deviation was negligible (&lt;500 ms for all tools). Spaced seed patterns (Seed1–Seed6) are described in <xref rid="sup1" ref-type="supplementary-material">Supplementary Section S6</xref></p>
      </caption>
      <graphic xlink:href="btac564f1" position="float"/>
    </fig>
    <p>We note that, uniform hash distribution would reduce the probability of collisions. To show the uniformity of ntHash2, we use the Kolmogorov–Smirnov (K-S) test (<xref rid="btac564-B1" ref-type="bibr">Chakravarti <italic toggle="yes">et al.</italic>, 1967</xref>). The histogram of 10<sup>6</sup>  <inline-formula id="IE33"><mml:math id="IM33" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer hashes generated by ntHash2 from random data is statistically indistinguishable from a uniform distribution (K-S statistic of 0.0007 and <italic toggle="yes">P</italic>-value of 0.62, <xref rid="btac564-F1" ref-type="fig">Fig. 1b</xref>).</p>
    <p>Finally, we compare the performance ntHash2 with competing algorithms. The previous version (ntHash1) produces hashes for spaced seeds by removing the ‘do not care’ positions using XORs. CityHash is a general-purpose hash function, which we adapted to spaced seed hashing by replacing the ‘do not care’ positions in each substring with an asterisk. Iterative Spaced Seed Hashing (ISSH) (<xref rid="btac564-B6" ref-type="bibr">Petrucci <italic toggle="yes">et al.</italic>, 2020</xref>) is a spaced seed hash function that reuses previous hashes based on the seed’s overlapping patterns. Because CityHash and ISSH lack canonical hashing, we also fed the reverse-complement of the input sequences to compare run times with ntHash2. ntHash2 outperforms ntHash1 and CityHash at spaced seed hashing by 1.2–2.1× and 2–3.8×, respectively (<xref rid="btac564-F1" ref-type="fig">Fig. 1c</xref>). Compared to ISSH, ntHash2 is up to 1.6× faster, other than seed 2 which has <inline-formula id="IE34"><mml:math id="IM34" display="inline" overflow="scroll"><mml:mfenced open="|" close="|" separators="|"><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:mfenced><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:math></inline-formula> monomers and is one of the less-optimal input seeds for ntHash2.</p>
    <p>Overall, ntHash2 is a versatile and scalable spaced seed hashing algorithm for nucleotide sequences with various use cases, such as genome assembly and <inline-formula id="IE35"><mml:math id="IM35" display="inline" overflow="scroll"><mml:mi>k</mml:mi></mml:math></inline-formula>-mer counting.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the National Institutes of Health [2R01HG007182-04A1]. The content of this work is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health.</p>
    <p><italic toggle="yes">Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btac564_Supplementary_Data</label>
      <media xlink:href="btac564_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec sec-type="data-availability">
    <title>Data Availability</title>
    <p>Scripts for generating the random data used in the experiments are available online at github.com/bcgsc/ntHash. Additional data used in the extended experiments (Supplementary Section 7) are available in the supplementary information.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btac564-B1">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Chakravarti</surname><given-names>I.M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>1967</year>) <source>Handbook of Methods of Applied Statistics</source>. Vol. <volume>1</volume>. <publisher-name>John Wiley and Sons, New York, pp. 392–394</publisher-name>.</mixed-citation>
    </ref>
    <ref id="btac564-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chu</surname><given-names>J.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>Mismatch-tolerant, alignment-free sequence classification using multiple spaced seeds and multiindex bloom filters</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>117</volume>, <fpage>16961</fpage>–<lpage>16968</lpage>.<pub-id pub-id-type="pmid">32641514</pub-id></mixed-citation>
    </ref>
    <ref id="btac564-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ma</surname><given-names>B.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2002</year>) <article-title>PatternHunter: faster and more sensitive homology search</article-title>. <source>Bioinformatics</source>, <volume>18</volume>, <fpage>440</fpage>–<lpage>445</lpage>.<pub-id pub-id-type="pmid">11934743</pub-id></mixed-citation>
    </ref>
    <ref id="btac564-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mohamadi</surname><given-names>H.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2016</year>) <article-title>ntHash: recursive nucleotide hashing</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>3492</fpage>–<lpage>3494</lpage>.<pub-id pub-id-type="pmid">27423894</pub-id></mixed-citation>
    </ref>
    <ref id="btac564-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Petrucci</surname><given-names>E.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>Iterative spaced seed hashing: closing the gap between spaced seed hashing and <italic toggle="yes">k</italic>-mer Hashing</article-title>. <source>J. Comput. Biol</source>., <volume>27</volume>, <fpage>223</fpage>–<lpage>233</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
