<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName nlm2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Front Bioeng Biotechnol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Front Bioeng Biotechnol</journal-id>
    <journal-id journal-id-type="publisher-id">Front. Bioeng. Biotechnol.</journal-id>
    <journal-title-group>
      <journal-title>Frontiers in Bioengineering and Biotechnology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2296-4185</issn>
    <publisher>
      <publisher-name>Frontiers Media S.A.</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8784771</article-id>
    <article-id pub-id-type="publisher-id">785131</article-id>
    <article-id pub-id-type="doi">10.3389/fbioe.2021.785131</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Bioengineering and Biotechnology</subject>
        <subj-group>
          <subject>Original Research</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Removing the Bottleneck: Introducing cMatch - A Lightweight Tool for Construct-Matching in Synthetic Biology</article-title>
      <alt-title alt-title-type="left-running-head">Casas et al.</alt-title>
      <alt-title alt-title-type="right-running-head">CMatch-A Lightweight Construct-Matching Tool</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Casas</surname>
          <given-names>Alexis</given-names>
        </name>
        <uri xlink:href="https://loop.frontiersin.org/people/1457913/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bultelle</surname>
          <given-names>Matthieu</given-names>
        </name>
        <uri xlink:href="https://loop.frontiersin.org/people/321068/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Motraghi</surname>
          <given-names>Charles</given-names>
        </name>
        <uri xlink:href="https://loop.frontiersin.org/people/1560935/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kitney</surname>
          <given-names>Richard</given-names>
        </name>
        <xref rid="c001" ref-type="corresp">*</xref>
      </contrib>
    </contrib-group>
    <aff><institution>Department of Bioengineering, Imperial College London</institution>, <addr-line>London</addr-line>, <country>United Kingdom</country></aff>
    <author-notes>
      <fn fn-type="edited-by">
        <p><bold>Edited by:</bold><ext-link xlink:href="https://loop.frontiersin.org/people/622003/overview" ext-link-type="uri">Jose Ruben Morones-Ramirez</ext-link>, Autonomous University of Nuevo León, Mexico</p>
      </fn>
      <fn fn-type="edited-by">
        <p><bold>Reviewed by:</bold><ext-link xlink:href="https://loop.frontiersin.org/people/1180012/overview" ext-link-type="uri">Amir Pandi</ext-link>, Max Planck Institute for Terrestrial Microbiology, Germany</p>
        <p><ext-link xlink:href="https://loop.frontiersin.org/people/117623/overview" ext-link-type="uri">Chris John Myers</ext-link>, University of Colorado Boulder, United States</p>
      </fn>
      <corresp id="c001">*Correspondence: Richard Kitney, <email>r.kitney@imperial.ac.uk</email>
</corresp>
      <fn fn-type="other">
        <p>This article was submitted to Synthetic Biology, a section of the journal Frontiers in Bioengineering and Biotechnology</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>10</day>
      <month>1</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>9</volume>
    <elocation-id>785131</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>9</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>12</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2022 Casas, Bultelle, Motraghi and Kitney.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>Casas, Bultelle, Motraghi and Kitney</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (CC BY). The use, distribution or reproduction in other forums is permitted, provided the original author(s) and the copyright owner(s) are credited and that the original publication in this journal is cited, in accordance with accepted academic practice. No use, distribution or reproduction is permitted which does not comply with these terms.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>We present a software tool, called cMatch, to reconstruct and identify synthetic genetic constructs from their sequences, or a set of sub-sequences—based on two practical pieces of information: their modular structure, and libraries of components. Although developed for combinatorial pathway engineering problems and addressing their quality control (QC) bottleneck, cMatch is not restricted to these applications. QC takes place post assembly, transformation and growth. It has a simple goal, to verify that the genetic material contained in a cell matches what was intended to be built - and when it is not the case, to locate the discrepancies and estimate their severity. In terms of reproducibility/reliability, the QC step is crucial. Failure at this step requires repetition of the construction and/or sequencing steps. When performed manually or semi-manually QC is an extremely time-consuming, error prone process, which scales very poorly with the number of constructs and their complexity. To make QC frictionless and more reliable, cMatch performs an operation we have called “construct-matching” and automates it. Construct-matching is more thorough than simple sequence-matching, as it matches at the functional level-and quantifies the matching at the individual component level and across the whole construct. Two algorithms (called CM_1 and CM_2) are presented. They differ according to the nature of their inputs. CM_1 is the core algorithm for construct-matching and is to be used when input sequences are long enough to cover constructs in their entirety (e.g., obtained with methods such as next generation sequencing). CM_2 is an extension designed to deal with shorter data (e.g., obtained with Sanger sequencing), and that need recombining. Both algorithms are shown to yield accurate construct-matching in a few minutes (even on hardware with limited processing power), together with a set of metrics that can be used to improve the robustness of the decision-making process. To ensure reliability and reproducibility, cMatch builds on the highly validated pairwise-matching Smith-Waterman algorithm. All the tests presented have been conducted on synthetic data for challenging, yet realistic constructs - and on real data gathered during studies on a metabolic engineering example (lycopene production).</p>
    </abstract>
    <kwd-group>
      <kwd>synthetic biology</kwd>
      <kwd>tool</kwd>
      <kwd>software</kwd>
      <kwd>parts</kwd>
      <kwd>genetic construct</kwd>
      <kwd>matching</kwd>
      <kwd>quality control</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source id="cn002">
          <institution-wrap>
            <institution>Engineering and Physical Sciences Research Council
</institution>
            <institution-id institution-id-type="doi">10.13039/501100000266</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id award-type="contract" rid="cn002">EP/L011573/1 EP/S001859/1</award-id>
      </award-group>
      <award-group>
        <funding-source id="cn001">
          <institution-wrap>
            <institution>National Physical Laboratory
</institution>
            <institution-id institution-id-type="doi">10.13039/501100007851</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
  </article-meta>
</front>
<body>
  <sec id="s1">
    <title>Introduction</title>
    <sec id="s1-1">
      <title>Overview</title>
      <p>With the rapidly developing international interest in sustainability and the move away from economic reliance on hydrocarbons, a more bio-based economy requires the development of a range of different biologically based methodologies and processes (<xref rid="B37" ref-type="bibr">Kitney et al., 2019</xref>; <xref rid="B6" ref-type="bibr">Bell et al., 2021</xref>). For industrial applications these need to possess high levels of reliability and reproducibility. Inherent in this approach is the need to move away from human-based operations to much higher levels of automation, AI and machine learning. As will be described later in the paper, an aspect of metabolic engineering—namely, combinatorial pathway engineering - is seen as an important development area. Combinatorial pathway engineering workflows are iterative, Design-Build-Test-Learn workflows (<xref rid="B12" ref-type="bibr">Carbonell et al., 2018</xref>; <xref rid="B30" ref-type="bibr">Hillson et al., 2019</xref>; <xref rid="B51" ref-type="bibr">Opgenorth et al., 2019</xref>) based on a four-stage process: Combinatorial Design, Construction, Titration Assays and Data Analysis. Between the construction and assays stages, lies a verification phase—Sequencing followed by Quality Control (QC) (<xref rid="F1" ref-type="fig">Figure 1</xref>). QC is crucial from a reliability and reproducibility standpoint. The core subject of this paper is a new methodology called cMatch that makes a significant improvement to QC.</p>
      <fig position="float" id="F1">
        <label>FIGURE 1</label>
        <caption>
          <p>Quality control in combinatorial pathway engineering workflows <bold>(A)</bold> Quality control lies at the junction between the construction and assay phases of the workflow and acts as a binary check on whether the workflow may proceed or if construction and verification must be repeated. <bold>(B)</bold> The quality-control software cMatch uses two types of inputs: a JSON template encoding the positional and combinatorics constraints for a given search space, and sequence data. Sequence data can either be single-input, long-read data (as with next-gen sequencing) or multiple-input, short read data (typical of Sanger sequencing). Two algorithms, CM_1 and CM_2 have been implemented—each tailored for a type of input (CM_1 for single input, CM_2 for multiple input). cMatch returns a best match, as well as a ranking of all the construct in the search space (or an error log). </p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g001" position="float"/>
      </fig>
      <p>Metabolic engineering (ME), can be defined as the “purposeful modification of intermediary metabolism using recombinant DNA technology” (<xref rid="B10" ref-type="bibr">Cameron and Tong, 1993</xref>). It aims to maximise the production of a target metabolite, by modifying native metabolic pathways and/or introducing heterologous pathways, to achieve, in a reliable and reproducible manner, economically viable metabolite yields and production rates. In this context, combinatorial pathway engineering represents a relatively recent and important family of approaches to metabolic engineering. Here, one or more of the pathway components are made to vary simultaneously - in marked contrast to the classic approach, based on identification of bottlenecks in the pathway and subsequent rounds of gradual optimization to lift these bottlenecks (<xref rid="B77" ref-type="bibr">Yadav et al., 2012</xref>; <xref rid="B76" ref-type="bibr">Xu et al., 2017</xref>).</p>
      <p>The development and adoption of combinatorial pathway engineering has been made possible by the convergence of advances in several domains. The first is the availability of efficient DNA modular assembly methods. A range of DNA assembly methods have now been developed (<xref rid="B19" ref-type="bibr">Ellis et al., 2011</xref>; <xref rid="B14" ref-type="bibr">Casini et al., 2015</xref>) that make extensive use of characterized biological parts and libraries - such as CIDAR Moclo (<xref rid="B31" ref-type="bibr">Iverson et al., 2016</xref>) or BASIC (<xref rid="B66" ref-type="bibr">Storch et al., 2015</xref>). It is, of course, in general desirable and efficient to use such characterized libraries (<xref rid="B8" ref-type="bibr">Bultelle et al., 2016</xref>) and match design with construction. In the context of pathway engineering, these characterized libraries of elements (including plasmid backbones, regulatory elements such as promoters and RBS, CDS, terminators) can be utilized to introduce genetic diversity by offering several levels of gene copy number, plasmid copy numbers, transcription and translation levels, enzymatic activity among others (<xref rid="B33" ref-type="bibr">Jeschek et al., 2017</xref>).</p>
      <p>Combinatorial pathway engineering is appealing as it yields, with only a few degrees of freedom, a large number of levels over which to tune intricate pathway expression. It also does not require as deep a knowledge of the pathway as the classic debugging approaches (<xref rid="B46" ref-type="bibr">Naseri and Koffas, 2020</xref>). But it is not without its own set of challenges. For example, consider the 5-gene violacein pathway (<xref rid="B45" ref-type="bibr">Myeong et al., 2016</xref>) arranged in a single operon. A simple translation-based optimization (where RBS in front of each enzyme coding region is changed) yields 10<sup>5</sup> possible combinations for a small library of 10 RBS. Varying more components in the design (e.g., the promoter driving the operon or adding degradation tags to the enzymes) expands the design space by further orders of magnitude. Such large spaces fast become prohibitively expensive and difficult to investigate by brute force or even one-factor-at-a-time methods (the issues of factor interaction and non-linearity notwithstanding).</p>
      <p>The set of methodologies known as Design of Experiments (DoE) (<xref rid="B24" ref-type="bibr">Gilman, 2021</xref>) have become popular to deal with the design and highly-complex multifactorial optimization of large-scale combinatorial spaces. DoE methods are very amenable to automation, as works by (<xref rid="B12" ref-type="bibr">Carbonell et al., 2018</xref>) and (<xref rid="B52" ref-type="bibr">Rajakumar et al., 2019</xref>) have demonstrated. They have been adapted to identify the media and culture conditions that maximize yield of the metabolic pathway (<xref rid="B61" ref-type="bibr">Singleton et al., 2019</xref>) (<xref rid="B5" ref-type="bibr">Azubuike et al., 2020</xref>), or the optimization of a cell-free system (<xref rid="B65" ref-type="bibr">Spice et al., 2020</xref>). In the context of metabolic pathways, these methodologies have been applied to choose regulatory elements such as promoters (<xref rid="B7" ref-type="bibr">Blazeck et al., 2012</xref>) and 5′UTR (<xref rid="B56" ref-type="bibr">Salis et al., 2009</xref>), or to modify other popular dosage parameters such as plasmid copy number (<xref rid="B2" ref-type="bibr">Ajikumar et al., 2010</xref>) and codon usage, (<xref rid="B28" ref-type="bibr">Hanson and Coller, 2018</xref>; <xref rid="B75" ref-type="bibr">Wu et al., 2019</xref>). (<xref rid="B76" ref-type="bibr">Xu et al., 2017</xref>) showed how the five gene violacein pathway could be simplified to three operons as two of then encoded enzymes had no impact on the output. DoE methods can be unsuited to the estimation of parameters. Optimal Experimental Design (OED) can be used when a model is available for the pathway. The goal then becomes to design a set of experiments so the model parameters may be estimated more reliably (<xref rid="B1" ref-type="bibr">Abt et al., 2018</xref>; <xref rid="B64" ref-type="bibr">Smucker et al., 2018</xref>). OED typically aims to maximize the information content (computed from the Fisher Information Matrix or with some Bayesian approaches) of the new experimental iteration (<xref rid="B49" ref-type="bibr">Nishii, 1993</xref>). Despite their proven track record in reducing the number of experiments and improving reliability, both sets of methods still require sampling at least a few percent of the design space (<xref rid="B41" ref-type="bibr">Lee et al., 2013</xref>) - potentially a very large number.</p>
    </sec>
    <sec id="s1-2">
      <title>Requirements for Quality Control in Pathway Engineering</title>
      <p>QC takes place post construction, transformation and growth. It has a simple goal, verifying that the genetic material contained in a cell matches what was intended to be built. In terms of reproducibility/reliability, the QC step is crucial. Failure at this step requires repetition of the construction and sequencing steps, while it should only be possible to proceed to the next stages of the workflow once the QC standards have been met.</p>
      <p>The development of cMatch, which is the new methodology at the core of this paper, was born out of the practical experience in the Kitney Lab gathered during a succession of projects in pathway engineering (<xref rid="B22" ref-type="bibr">Exley et al., 2019</xref>) and automated robotic platforms (<xref rid="B55" ref-type="bibr">Reynolds et al., 2017</xref>; <xref rid="B67" ref-type="bibr">Suckling et al., 2019</xref>). These projects identified the need to make QC a frictionless step in the workflow, capable to reliably, and robustly, perform at scale and speed. It was also decided that QC tools should be accessible to everyone, and in particular, that it should not take dedicated hardware (no GPUs, no high performance clusters) to run them. Finally, sequence analysis for a typical construct should take less than a few minutes - our strategy for removing the bottleneck. cMatch has been specifically developed to exploit and tackle a set of five features and constraints that are typical of large-scale combinatorial spaces and metabolic engineering. These are as follows.</p>
      <sec id="s1-2-1">
        <title>Tackling the Problem Requires Automation and Programmatic Access</title>
        <p>Quality control quickly becomes a bottleneck when too many sequences need to be verified - as is the case with large design spaces. The standard way of identifying a genetic constructs and its different components involves loading the results of a Sanger sequencing onto a DNA editing software, e.g., Benchling (<ext-link xlink:href="https://www.benchling.com" ext-link-type="uri">https://www.benchling.com</ext-link>), and painstakingly searching for the possible components one by one. This quasi-manual process is extremely time consuming (up to several hours for a few sequences) and error prone. It also scales very poorly with the number of constructs and with the complexity of the constructs. Differentially identifying close constructs (e.g., using closest RBS) is extremely challenging. The process also becomes vastly more cumbersome when comparison is made against not one, but several members of the same design space. Finally, there is also no way to assess the reliability of the process—except by repeating it.</p>
        <p>To tackle QC at scale, this process needs to be automated. Decision criteria (including for failure or success) also need to be built into the process. All parameters driving the process should be transparent and accessible to the user to change. Finally, to make results comparable, the process needs to rely on, and return objective quantitative metrics.</p>
      </sec>
      <sec id="s1-2-2">
        <title>The Synthetic Constructs Share a Well-Defined Structure, Thanks to Their Modular Design</title>
        <p>Modularity has been one of the main drivers of the development of synthetic biology, alongside characterization and standardization (<xref rid="B38" ref-type="bibr">Kitney, 2009</xref>). These principles have facilitated the creation of complex systems from the combination of well-understood, standardized components in disciplines such as electrical engineering, or computer science.</p>
        <p>(<xref rid="B29" ref-type="bibr">Hartwell et al., 1999</xref>) argued for the recognition of the concept of functional modularity as a critical level of biological organization. Modular design, which aims to combine such functional modules, has been the main driver behind the development of libraries of standard characterized components - from simple regulatory elements such as promoters.</p>
        <p>(<xref rid="B3" ref-type="bibr">Alper et al., 2005</xref>; <xref rid="B18" ref-type="bibr">De Mey et al., 2007</xref>; <xref rid="B54" ref-type="bibr">Redden and Alper, 2015</xref>; <xref rid="B80" ref-type="bibr">Zucca et al., 2015</xref>; <xref rid="B53" ref-type="bibr">Rao et al., 2021</xref>), or degradation tags (<xref rid="B11" ref-type="bibr">Cameron and Collins, 2014</xref>) to more complex components such as logic gates (<xref rid="B48" ref-type="bibr">Nielsen et al., 2016</xref>). Large repositories of DNA parts, such as the iGEM Registry of Standard Biological parts (<ext-link xlink:href="https://parts.igem.org" ext-link-type="uri">https://parts.igem.org</ext-link>), JBEI-ICE (<xref rid="B27" ref-type="bibr">Ham et al., 2012</xref>)), Addgene (<xref rid="B36" ref-type="bibr">Kamens, 2015</xref>) or SynbioHub (<xref rid="B43" ref-type="bibr">McLaughlin et al., 2018</xref>), are now routinely used to assist the engineering of synthetic DNA circuits and plasmids (<xref rid="B71" ref-type="bibr">Timmons and Densmore, 2020</xref>).</p>
        <p>Synthetic constructs generated from a modular design share very specific features:<list list-type="bullet"><list-item><p>The type and relative order of their components are known.</p></list-item><list-item><p>Their components are drawn from known lists of elements (often from well-characterized libraries)</p></list-item><list-item><p>The interfacing of their components is also well-defined. Most designs will use non-overlapping components; when this is not the case the overlaps can be strictly defined as they are parts of the design</p></list-item></list>
</p>
      </sec>
      <sec id="s1-2-3">
        <title>A High Level of Precision Is Required in the Identification of Some Components</title>
        <p>The biological functions encoded in the constructs have sequences spanning several orders of magnitude (CDS are one kb or more, promoters around a 100bp, UTRs around 50 bp or less, while degradation tags are often less than 10bp long). Some very short regulatory components such as RBS can be rationally designed to span specified ranges of strength (<xref rid="B34" ref-type="bibr">Jeschek et al., 2016</xref>), but minor changes in their sequence will have a significant effect on their strengths (<ext-link xlink:href="https://www.zotero.org/google-docs/?MZ2iNu" ext-link-type="uri">Salis et al., 2009</ext-link>). These components must therefore be identified (sequence and location) with the utmost precision.</p>
      </sec>
      <sec id="s1-2-4">
        <title>A High Level of Precision Is Also Required for Components Interfaces</title>
        <p>Context is the set of interrelated factors that modulate the operation of biological processes—these factors are either composition-specific, environment-specific or host-specific (<xref rid="B13" ref-type="bibr">Cardinale and Arkin, 2012</xref>). Environment and host-specificity are irrelevant to the problem addressed here. Composition specificity is crucial on the other hand, and takes many forms. For instance, in an operon, gene order influences effective transcription rates (<xref rid="B50" ref-type="bibr">Nishizaki et al., 2007</xref>). Constructs are also at risk of several forms of genetic instability, most commonly deletions caused by homologous recombination and indels—risks that can be estimated with the EFM calculator (<xref rid="B32" ref-type="bibr">Jack et al., 2015</xref>). Of all composition factors, the interfacing of adjacent regions is the most important for QC. Expression of functional components is indeed affected by short adjacent sequences (<xref rid="B21" ref-type="bibr">Espah Borujeni et al., 2014</xref>; <xref rid="B69" ref-type="bibr">Taylor et al., 2019</xref>; <xref rid="B70" ref-type="bibr">Tietze and Lale, 2021</xref>). A calculator such as the RBS calculator (<xref rid="B56" ref-type="bibr">Salis et al., 2009</xref>) (<ext-link xlink:href="https://www.denovodna.com/" ext-link-type="uri">https://www.denovodna.com/</ext-link>) now requires 35 bp upstream and 60 downstream to estimate the translation rate of an RBS.</p>
        <p>The greatest care therefore also needs to be paid to the accurate identification of the regions adjacent to the regulatory elements, as well as to the regulatory regions themselves.</p>
      </sec>
      <sec id="s1-2-5">
        <title>Sequencing Data Will Be Short-but Possibly Spread Over Several Sequences</title>
        <p>Typical constructs will only include a small number of genes (less than 20, often far fewer as pathways will be refactored over several plasmids if they are too long). Sequences to analyze will therefore be several kbp-long or less (considerably less than the length of genomes). Practically, this implies that cMatch can rely on one of the most precise matching algorithms, instead of a popular algorithm such as BLAST (<ext-link xlink:href="https://www.zotero.org/google-docs/?XXVCuN" ext-link-type="uri">Altschul et al., 1990</ext-link>) which is better suited to genome length sequences. Finally, sequencing data for a construct will consist of one sequence spanning the whole construct, or several shorter sequences covering complementary fragments of the construct. Discussion in this paper will be mostly based on the use of Sanger sequencing (<xref rid="B57" ref-type="bibr">Sanger and Coulson, 1975</xref>; <xref rid="B58" ref-type="bibr">Sanger et al., 1977</xref>). Sanger sequencing is the founding method in DNA sequencing, but it remains popular for applications where high throughput is not needed, thanks to its wide availability from a range of for-profit companies. Sanger sequencing is affected by poor quality in the first 50 bases of the sequence due to primer binding and deteriorating quality after 700–900 bases. Quality of the sequence can be estimated with a base calling software such as Phred (<xref rid="B40" ref-type="bibr">Ledergerber and Dessimoz, 2011</xref>). Although cMatch was not tested on data generated by more recent methods (<xref rid="B60" ref-type="bibr">Shendure et al., 2017</xref>) such as Next-generation sequencing (NGS) (<xref rid="B9" ref-type="bibr">Burgess, 2018</xref>; <xref rid="B62" ref-type="bibr">Slatko et al., 2018</xref>), which yield much longer reads with lower error-rate, the authors have no reason to doubt the software will behave any differently to the way it behaved with Sanger data.</p>
      </sec>
    </sec>
    <sec id="s1-3">
      <title>Construct-Matching with cMatch</title>
      <p>To exploit the structures of the constructs, cMatch operates at the functional (component) level. Since synthetic designs encode a set of biological functions, and add a set of positional constraints, cMatch searches for components encoding given functions, and checks if their combination is admissible (<xref rid="F2" ref-type="fig">Figure 2A</xref>). We call this operation “construct-matching.” It is a more thorough operation than simple sequence-matching or alignment, as it aims to answer a set of questions regarding the modular structure of the construct, as well as how well each component matches the data, including<list list-type="simple"><list-item><p>● Structure matching: Does the construct match the design?</p></list-item><list-item><p>○ Are all intended components present ?</p></list-item><list-item><p>○ Does their order match the construct design ?</p></list-item><list-item><p>● Quality of the matching: How close is the matching?</p></list-item><list-item><p>○ Are there any components affected by Mutations? If so, to what extent</p></list-item><list-item><p>○ Are there any insertions and/or deletions ?</p></list-item></list>
</p>
      <fig position="float" id="F2">
        <label>FIGURE 2</label>
        <caption>
          <p>Construct Matching in Action (for a Two-gene Operon Design). Construct-matching performs two complementary tasks. <bold>(A)</bold> Structure Matching: this step and checks whether the data correspond to an admissible construct, that is contains all the specified components in a combination that matches the design template. <bold>(B)</bold> Quantification of the Matching: each component has its own matching/homology score, from which a global score is derived.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g002" position="float"/>
      </fig>
      <p>cMatch derives a standardized matching score for each component. These scores and their weighted average are then used to automate the decision-making and quantify the reliability of the prediction through a set of global matching scores (<xref rid="F2" ref-type="fig">Figure 2B</xref>).</p>
      <p>Separating the components in the construct helps address several of the previously listed challenges.<list list-type="bullet"><list-item><p>All functional modules are dealt with in parallel. Homology (matching) scores can be standardized against their lengths, yielding an immediate insight into where the discrepancies between data and ideal sequences are located. This is important when dealing with short, regulatory components, and their adjacent regions.</p></list-item><list-item><p>It is easy to generate global matching metrics from the individual component scores. Equal weight can be given to the components and the geometric mean can be calculated. Conversely, some components, such as CDS, may be omitted from the global scores if the user decides mutations in these regions are of little concern.</p></list-item></list>
</p>
      <p>cMatch is built on top of the highly validated Smith-Waterman algorithm (<xref rid="B47" ref-type="bibr">Needleman and Wunsch, 1970</xref>; <xref rid="B63" ref-type="bibr">Smith and Waterman, 1981</xref>). This choice was born out of the need for a high level of precision in the identification of some components and their interfaces. These stringent requirements place cMatch in sharp contrast to applications such as barcoding (<xref rid="B74" ref-type="bibr">Woodruff et al., 2017</xref>), where short barcode sequences (with a space of possibilities in the billions) are used to identify constructs in a design space of several thousands/millions. Exact string comparison, as implemented in annotation tools such as Benchling’s Auto Annotate (<ext-link xlink:href="https://help.benchling.com/en/articles/2835801-auto-annotate-sequences" ext-link-type="uri">https://help.benchling.com/en/articles/2835801-auto-annotate-sequences</ext-link>), is the fastest form of matching but it is impractical for QC, as it does not offer any way to deal with mutations or indels (insertions/deletions), and more generally fails as soon as data differ from the expected sequences (without being able to assess to what degree they differ). The two standard algorithms in bioinformatics Smith-Waterman and BLAST (<xref rid="B4" ref-type="bibr">Altschul et al., 1990</xref>) were considered for cMatch. BLAST is very popular thanks to its speed and is the algorithm of choice to deal with long and genome-length sequences (<xref rid="B25" ref-type="bibr">Goujon et al., 2010</xref>; <xref rid="B20" ref-type="bibr">Donkor et al., 2014</xref>) stored in the many biological databases (<xref rid="B39" ref-type="bibr">Lakshmi and Ramyachitra, 2020</xref>). But it is not as precise as Smith-Waterman, which is designed to return the optimal local alignment (<xref rid="B73" ref-type="bibr">Wieds, 2007</xref>). Smith-Waterman is much slower and is costly in terms of computer power and resources. This concern was overlooked, as the sequences to be analyzed and the corresponding constructs are several kbp-long or less (considerably less than the length of genomes), which remains tractable. The fact the algorithm is deterministic (unlike BLAST), which is important for reproducibility, and the availability of a highly validated biopython implementation (<xref rid="B15" ref-type="bibr">Chapman and Chang, 2000</xref>) were compounding factors for our choice.</p>
      <p>It is worth emphasizing that cMatch is not a sequence annotation tool (although its matching phase has a lot in common with such tools), but a QC tool. Indeed cMatch relies on knowledge of the structure of the (ideal) construct - from which an annotation can already be derived. Some sequence annotation (e.g., including a comparison of sequencing data to the ideal sequence) is a possible by-product of the construct-matching process, but not its main objective.</p>
      <p>Comparisons with the recent range of auto-annotation tools for plasmids and constructs of similar length remain instructive. Beside its choice of sequence-matching method, the component-matching phase of cMatch differs from tools such as Benchling Auto-annotate (<ext-link xlink:href="https://help.benchling.com/en/articles/2835801-auto-annotate-sequences" ext-link-type="uri">https://help.benchling.com/en/articles/2835801-auto-annotate-sequences</ext-link>) and pLannotate (<xref rid="B42" ref-type="bibr">McGuffie and Barrick, 2021</xref>) in several ways. Unlike pLannotate, it does not use external databases as sources for the components. CMatch also offers full programmatic access and lets the user change the matching parameters. Only the sequence-annotate features offered by the recent SYNBICT (Synthetic Biology Curation Tools <ext-link xlink:href="https://github.com/SD2E/SYNBICT" ext-link-type="uri">https://github.com/SD2E/SYNBICT</ext-link>) project offer a similar level of flexibility (and also use pairwise matching).</p>
      <p>But where cMatch differs from this set of tools in an important way is at the second stage: it goes much further than sequence annotation, as it performs a set of QC operations on top of component matching, and offers ways to quantify the entire process (only SYNBICT defines a threshold to accept/reject annotations, but it does not utilize a template in any way). cMatch also exploits modularity in order to offer comparisons not against one construct, but an entire design space.</p>
    </sec>
  </sec>
  <sec id="s2">
    <title>Methods—Algorithms for Construct-Matching</title>
    <p>We now present our solution to the construct-matching problem. A lightweight data structure encoding a construct template and the search space, is introduced in <italic>Supporting Data Structures</italic> section. Two construct-matching algorithms are presented. The first algorithm is a sequence-based algorithm based on a brute force investigation of the design space (<italic>Sequence Matching Algorithm</italic> section) - it is included for comparison purposes and to highlight the benefits of the component-matching approach adopted by the other algorithms. Finally, the construct-matching algorithm (<italic>Component-Matching Algorithm</italic> section), based on a component matching strategy and step-by-step reconstruction is presented, as well as an extension to deal with multiple inputs.</p>
    <sec id="s2-1">
      <title>Supporting Data Structures</title>
      <p>Construct-matching has two distinct components:<list list-type="simple"><list-item><p>● A construct to be identified (the “target” of the analysis) by way of sequencing results. All sequences take value in the IUPAC dictionary (<ext-link xlink:href="https://www.bioinformatics.org/sms/iupac.html" ext-link-type="uri">https://www.bioinformatics.org/sms/iupac.html</ext-link>). These sequences are the input of the algorithm.</p></list-item><list-item><p>● A “search space.” The constructs contained in the search space will be referred to as “candidates” - they are possible output values for the identity of the target construct. The search space is left to the user to define. In a straightforward QC scenario (henceforth referred to as “minimal QC,” the search space only includes one construct - the construct intended for construction. In more thorough QC checks, it can extend to the whole design space for the construct (we call this scenario “maximaml QC.” The search space is specified by two search constraints (they are the parameters of the algorithm)</p></list-item><list-item><p>○ A template describing the modular structure of the construct (type of the components and relative order) and thus providing a set of structural constraints for the space of possibilities</p></list-item><list-item><p>○ For each component of the template, a library of admissible elements—providing a description of the combinatorial element of the problem</p></list-item></list>
</p>
      <p><xref rid="F3" ref-type="fig">Figure 3</xref> shows the search constraints for a two-gene construct example.<list list-type="simple"><list-item><p>● Template (<xref rid="F3" ref-type="fig">Figure 3A</xref>): The construct has 6 components (1 promoter, 2 RBS, 2 CDS and a terminator) arranged in an operon pattern.</p></list-item><list-item><p>● Combinatorics (<xref rid="F3" ref-type="fig">Figure 3B</xref>): A promoter library of 5, 2 RBS libraries of 10, 2 CDS libraries of 1 and a Terminator library of 1 are used.</p></list-item></list>
</p>
      <fig position="float" id="F3">
        <label>FIGURE 3</label>
        <caption>
          <p>The two sets of search constraints for a 2-gene operon. <bold>(A)</bold> The template specifies the types of the components and their positional arrangements. <bold>(B)</bold> The list of possible elements for each component yields the combinatorial element of the problem.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g003" position="float"/>
      </fig>
      <p>Even with such a simple example, the power of the template is apparent. There are 5 × 10 × 1 × 10 × 1 × 1 = 500 admissible combinations. If the relative order of the components is not imposed, there are 6! = 720 as many ways to arrange the components, i.e., 360,000 (mostly non-functional). These numbers further increase exponentially if components can go missing or feature more often than once.</p>
      <p>CMatch requires knowledge of component location and interfacing for the template description. Component location could either be absolute or relative, but absolute locations were rejected as impractical. Sanger sequencing indeed often returns sequences of poor quality at the start and end (possibly truncated, often with bases with a phred-quality score too low to have a value safely assigned to them). Since sequence data are 1D structure (strings), it is enough for components to be listed in relative order, in the 5′ to the 3′ direction. The template structure encodes this order explicitly, through the value of “template_location” - an integer starting at 1 (to be more user friendly) and incrementing as one moves 3′-ward. This is needed to implement the slicing operations necessary to combine reconstructions when several sequences are used as inputs. The template also specifies a global parameter for component interfacing: a maximum overlapping term epsilon (in bp, default value set to 0) to deal with scars between components, deal with undefined components, and more generally provide flexibility when data are poor quality.</p>
      <p>For simplicity reasons, cMatch encodes both template and combinatorics constraints, as well as sourcing information in a single JSON file (see <xref rid="s10" ref-type="sec">Supplementary Material</xref> for examples of valid JSON files).</p>
      <p>The “template” portion of the file encodes the construct template (structural constraints and corresponding combinatorics). A template lists its components, while a component lists the source for the library containing the sequence data, as well as positional information for the component. In the case of the two-gene operon used as an example in <xref rid="F3" ref-type="fig">Figure 3A</xref>, the “template” structure is as follows. To make the hierarchical structure more evident, the instances of components have been shaded in green.</p>
      <p>
        <inline-graphic xlink:href="fbioe-09-785131-fx1.jpg"/>
      </p>
      <p>Sourcing information is encoded into another portion of the file (in a structure called “component_sources”). All component libraries are listed—each one points to a repository address, and lists its elements. An element points towards the file containing the sequence of the element. To simplify data import, only text, JSON, GenBank and SBOL file formats are supported. In the case of the two-gene operon, the “component_sources” structure is as follows. To make the hierarchical structure more evident, the instances of libraries have been shaded in blue.</p>
      <p>
        <inline-graphic xlink:href="fbioe-09-785131-fx2.jpg"/>
      </p>
    </sec>
    <sec id="s2-2">
      <title>Sequence Matching Algorithm</title>
      <p>Given prior knowledge of a construct template, and its libraries of components, a simple solution to QC consists of a purely combinatorial generation of all the candidates, followed by brute force matching of their sequences (<xref rid="F4" ref-type="fig">Figure 4</xref>):<list list-type="simple"><list-item><p>1) Combinatorial Step (<xref rid="F4" ref-type="fig">Figure 4A</xref>): generate all possible combinations in the search space from the template and libraries of components, and the corresponding sequences.</p></list-item><list-item><p>2) Matching Step (<xref rid="F4" ref-type="fig">Figure 4B</xref>: for each generated sequence, compute the matching score to the target sequence with the Smith and Waterman pairwise alignment algorithm.</p></list-item><list-item><p>3) Output Step (<xref rid="F4" ref-type="fig">Figure 4C</xref>: return the combination(s) with the highest scores.</p></list-item></list>
</p>
      <fig position="float" id="F4">
        <label>FIGURE 4</label>
        <caption>
          <p>Visual Representation of the Construct-Matching Algorithm CM_0. CM_0 is a sequence matching algorithm that fails to exploit modularity. It is made of three steps. <bold>(A)</bold> Step 1 - CM_0 generates the sequences for all possible constructs in the search space. <bold>(B)</bold> Step 2 - These candidate sequences are matched to the input sequence—returning for each a global matching score. <bold>(C)</bold> Step 3 - Constructs with the highest scores are returned.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g004" position="float"/>
      </fig>
      <p>Such an approach does not seek to exploit the modularity of the constructs. Issues with such an approach are four-fold.<list list-type="simple"><list-item><p>1) It is very rigid in the way it builds the candidate sequences, and makes it difficult to apply overlapping options.</p></list-item><list-item><p>2) The computational cost of a pure combinatorial approach fast becomes prohibitive, as the number of candidate constructs increases exponentially.</p></list-item><list-item><p>3) The performance of pairwise matching algorithms degrades fast as the sequences increase in length - due in no small part to their attempt at finding the best matches by inserting and deleting base pairs (see benchmark results in <italic>Results - Applications and Benchmarks</italic> section). Matching an input sequence against complete construct sequences will quickly prove costly in terms of time and memory utilization.</p></list-item><list-item><p>4) The approach naturally gives more weight to the longer components like the CDS to the detriment of very short, yet important ones like RBSs, because it only computes a global matching/homology metric.</p></list-item></list>
</p>
      <p>In the rest of this work, this algorithm is called <italic>CM_0</italic> (“Construct Matching 0”) - the null index indicating that it is a stepping stone to the final algorithm(s). All construct-matching algorithms are tested against CM_0 in the Results section.</p>
    </sec>
    <sec id="s2-3">
      <title>Component-Matching Algorithm</title>
      <p>We have developed a component-based algorithm (referred to as <italic>CM_1</italic>), which performs the operation we have called construct-matching. Unlike CM_0, CM_1 utilizes the information contained in the template, and focuses on function-encoding components and their admissible combinations - before ranking them. A pseudo-code implementation of CM_1 can be found in the <xref rid="s10" ref-type="sec">Supplementary Section S3</xref>. CM_1 proceeds as follows (<xref rid="F5" ref-type="fig">Figure 5</xref>):<list list-type="simple"><list-item><p>1) Component Matching Step (<xref rid="F5" ref-type="fig">Figure 5A</xref>): This step looks for the components in the target—looping over all libraries of components, to match each library element to a subsequence of the input sequence, and assigning a matching score (normalized by the length of the component) and a position to each of them in the process. Pruning follows: only matches with a score above a user-specified threshold are kept.</p></list-item><list-item><p>2) Reconstruction and Pruning Step (<xref rid="F5" ref-type="fig">Figure 5B</xref>): Identified components are recombined into a list of admissible constructs. Rather than using a purely combinatorial approach, where all possible combinations are generated and then pruned against the template, an iterative reconstruction—based on dynamic programming has been implemented (See <xref rid="s10" ref-type="sec">Supplementary Section S2</xref>). A combinatorial approach proves extremely costly when the input contains repetitions and components are detected in several locations, as the number of possible combinations expands by several orders of magnitude (See <italic>Synthetic Benchmarks</italic> section for an example). Instead, the reconstruction applies positional constraints (E.G. “component 3 must be located before component 4”) as early as possible to prune out entire branches of the reconstruction tree.</p></list-item><list-item><p>3) Output Step (<xref rid="F5" ref-type="fig">Figure 5C</xref>): At the end of the reconstruction, all remaining paths are assigned a global score (we use the geometric mean of the components scores). The combinations with the highest scores are returned.</p></list-item></list>
</p>
      <fig position="float" id="F5">
        <label>FIGURE 5</label>
        <caption>
          <p>Successive Steps of the Construct-Matching Algorithm CM_1. <bold>(A)</bold> Step 1 - CM_1 first looks for all components in the target sequence. Poor matches (low score, in red) are pruned out at this early stage. <bold>(B)</bold> Step 2 - Components identified in Step 1 are recombined into a list of all admissible constructs. Dynamic reconstruction was implemented. A matching score is generated from the individual component matching scores for all possible constructs. <bold>(C)</bold> Step 3 - Constructs with the highest scores are returned.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g005" position="float"/>
      </fig>
      <p>By performing construct-matching rather than mere sequence-matching, CM_1 returns a great deal more information than CM_0 - it identifies and locates all the components in the construct, confirms their combination matches the template, and returns individual homology/matching scores for each of these components - a crucial source of information to identify where the mutations are. Having access to a lower level of information allows us to deal with the function-encoding components (however long or small) in parallel. This allows us to apply options to specify acceptable interfaces between these components, which is useful when data are of poor quality and components can not be precisely located (see the lycopene example, in Results <italic>Real Life Example - Lycopene Operon</italic> section). It also allows us to generate global matching metrics from the individual component scores.</p>
      <p>Working at component level opens up a set of strategies to limit computation times and resource utilization. First it avoids matching long sequences to long sequences and can be parallelized. Also, it enables us to avoid combinatorial explosion, by only using the best matches from each library, and then pruning reconstruction paths as early as possible.</p>
      <p>CM_1 relies on a sequence being available that covers the whole construct, and that can therefore be used as an input. Such an assumption may not be met in general use. Using multiple sequences as inputs instead of a single one is very common with Sanger sequencing, as it only returns reads of a limited length (∼500–700bp). Using several sequences also gives flexibility regarding the portion of the construct that requires identifying. Such flexibility is desirable, as some components are more important than others for given applications, and their presence can be deduced thanks to prior QC checks. In the practical application described in <italic>Real Life Example - Lycopene Operon</italic> section, reverse primers originating in the CDS were used that only covered a few hundred base pairs of the CDS - but gels were run to check the constructs were of the expected sizes.</p>
      <p>To widen the application range of the construct-matching algorithm, we have extended CM_1 so it may support multiple sequences as inputs. The new algorithm (henceforth referred to as CM_2) utilizes a split-apply-combine strategy (<xref rid="B72" ref-type="bibr">Wickham, 2011</xref>), where the first step of the process (the split phase) mirrors the sequencing of fragments of the construct. CM_2 proceeds as follows:<list list-type="simple"><list-item><p>1) Partition Step: From the input data (Sub_sequence<sub>i</sub>) and the global template, a set of sub-problems {(Sub_sequence<sub>i</sub>, Sub_Template<sub>i</sub>)}<sub>i=1 … N</sub>. are generated.</p></list-item><list-item><p>2) SubSequence Analysis: CM_1 is applied in parallel to all the sub-problems - which are also all cheaper to solve than the original problem due to their smaller size.</p></list-item><list-item><p>3) Recombination Step: The results of the individual analyzes are combined into a final construct matching the original template</p></list-item></list>
</p>
      <p>CM_2 implements a pair of simple operations on the template structure, namely slicing for the partition step and addition for the recombination step. Both operations are detailed in the <xref rid="s10" ref-type="sec">Supplementary Section S4</xref>. Instructions regarding the slicing are contained in the JSON input—instructions used in the lycopene example are as follows:</p>
      <p>
        <inline-graphic xlink:href="fbioe-09-785131-fx3.jpg"/>
      </p>
    </sec>
  </sec>
  <sec id="s3">
    <title>Results—Applications and Benchmarks</title>
    <p>The performance for all three algorithms presented in <italic>Methods—Algorithms for Construct-Matching</italic> section will now be compared. All benchmark results are derived for a series of realistic scenarios based on common construct designs. The chosen pathways (both for naturally-occurring pigments) are classic examples in combinatorial pathway engineering. To test whether the construct-matching algorithms conform to our original remit regarding speed and common hardware, all computations have been performed on the personal daily driver of one of the authors, a Lenovo ThinkPad X220.</p>
    <p>Finally, in these benchmarks two forms of quality control - of opposite complexity will be run:<list list-type="bullet"><list-item><p>Minimal QC: data obtained from sequencing of a construct are compared to the construct itself. This is the most common use of quality control—performed to check that what was actually built matches what was intended.</p></list-item><list-item><p>Maximal QC: the data are compared to the entire design space of the construct. This is a more thorough form of QC, as it offers a form of insurance against errors such as mislabelling, and further tools to estimate the overall reliability of the construct-matching process (see Discussion). Such extensive search is also needed in other applications such as the pooled approach study discussed in <italic>Discussion</italic> section</p></list-item></list>
</p>
    <sec id="s3-1">
      <title>Synthetic Benchmarks</title>
      <p>The construct matching algorithms were first tested on synthetic data for a construct (<xref rid="F6" ref-type="fig">Figure 6A</xref>) encoding all five enzymes in the violacein pathway (<xref rid="F6" ref-type="fig">Figure 6B</xref>). Violacein is a classic test bed since the genes encoding the enzymes necessary for its production, and the associated regulatory mechanisms have been characterized in several strains (<xref rid="B45" ref-type="bibr">Myeong et al., 2016</xref>). It is also a metabolite with notable industrial applications whether as a dye (thanks to its vivid purple colour) or for medical applications (<xref rid="B35" ref-type="bibr">Durán et al., 2007</xref>).</p>
      <fig position="float" id="F6">
        <label>FIGURE 6</label>
        <caption>
          <p>The 5-Gene Violacein Pathway and its Implementation with a TU-Design. <bold>(A)</bold> The design is made up of 5 transcription units (hence 20 components) in a set gene order. All units share the same promoter (BBa_J23101) and terminator (BBa_B0015) - providing a stiff test for the algorithm, due to the large number of potential repetitions. <bold>(B)</bold> The violacein pathway is made up of five enzymes (VioA to VioE). Its associated regulatory mechanisms have been characterized in several strains including <italic>E. coli</italic> and Yeast.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g006" position="float"/>
      </fig>
      <p>Construct design was based on a simple TU (transcription unit) pattern (<xref rid="F6" ref-type="fig">Figure 6A</xref>):<list list-type="bullet"><list-item><p>Each enzyme is encoded with its own TU. TUs share the same promoter (BBa_J23101) and terminator (BBa_B0015), both mainstays of the iGEM Registry.</p></list-item><list-item><p>The design fixes the gene order to VioA-VioB-VioC-VioD-VioE.</p></list-item><list-item><p>All UTRs can be varied, as per (Salis, 2009; Blazek, 2012). All positions use the same library of 5 RBS from iGEM registry (BBa_B0030 to BBa_B0033 and BBa_B0064, chosen to only differ by a few base pairs).</p></list-item></list>
</p>
      <p>With this design, the constructs are made of 20 non-overlapping components, and the design space is of size 5<sup>5</sup> = 3,125. The TU-based pattern is a challenging case for a construct-matching algorithm, due to the large number of repetitions in different locations (all constructs have 5 identical promoters, and 5 identical terminators). RBS libraries have been chosen to make reconstruction as difficult as possible (they are identical).</p>
      <p>All input data for the violacein example are synthetic data—generated from the construct template and the specified components libraries. This was done to be able to compare the output of the algorithms with the ground truths (and make sure the correct constructs were identified). All the logs and output files for all the tests that are discussed below can be found on the cmatch Github repository at <ext-link xlink:href="https://github.com/kitneylab/cmatch" ext-link-type="uri">https://github.com/kitneylab/cmatch</ext-link>. Listed times are indicative of the performance of the various algorithms, but will vary depending on the user’s machine.</p>
      <sec id="s3-1-1">
        <title>Testing Algorithm CM_0</title>
        <p>The predicted limitations of CM_0 can be illustrated with a few tests on the synthetic data.</p>
        <p>The first test with CM_0 was a minimal QC scenario; the construct Vio-0000 was used (a construct with 5 identical RBS B0030), and the operation was repeated N = 10 times. The average run time was 36.60 ± 0.73 s. When 10 different constructs (Vio-0000 and 9 other constructs drawn at random) were used as targets and matched against themselves, the average running time was 37.89 ± 2.26 s (N = 10 repeats for each target). In all cases, a perfect score of 1.0 was returned every time—confirming that the Smith-Waterman algorithm correctly matches identical sequences. Inspection of the results show the times were distributed along a bimodal distribution (previous results were unimodal) with a first mode around 36 s and a second mode around 42 s. No link between the input and belonging to a mode was apparent. Those results were attributed to resource limitations in the system. This stress was expected, as Smith-Waterman is resource-intensive and the target sequences were almost 8500bp long.</p>
        <p>Another predictable limitation of CM_0 is apparent when the search space is expanded - from a few constructs of interest to the entire design space (maximal QC). As CM_0 is expected to perform linearly with the number of candidates, identification was first performed with one target and 10 candidates (Vio-0000 and 9 other candidates drawn at random) and repeated 10 times. The run time was 370.72 ± 3.99 s. The operation was then repeated with 100 candidates (Vio-0000 and 99 other candidates drawn at random). The test was only run three times (previous results showing little variation), yielding a run time between 56 and 58 min. Extrapolating from these, if the whole design space was used as search space (maximal QC, against more than 3,000 constructs), it would take more than 30 h to identify a target construct with CM_0 - a wholly impractical time.</p>
        <p>Finally, because of its global sequence-matching strategy, CM_0 offers few insights into the quality of the prediction. In all instances, the correct construct was identified with a perfect score of 1.0, but several candidates returned scores above 0.99 since they varied only by a few base pairs from the target. Furthermore, a global match does not help locate the discrepancies between data and construct sequences and their significance.</p>
      </sec>
      <sec id="s3-1-2">
        <title>Testing Algorithm CM_1</title>
        <p>CM_1 has two limiting steps: its matching step (affected by the length of the target sequences, the number and length of the elements in the component libraries), and its reconstruction step (affected by the repetitions in the construct and the matching threshold).</p>
        <p>To test the reconstruction phase of the algorithm, tests were run with two threshold levels (0.99 and 0.75), and for two targets of opposite complexity:<list list-type="bullet"><list-item><p>Vio-0007- a construct with 5 different RBS (B0030-B0031-B0032-B0033-B0064)</p></list-item><list-item><p>Vio-0000 - a construct with 5 identical RBS (all B0030)</p></list-item></list>
</p>
        <p>Vio-0007 is the easiest case for reconstruction: after the matching step, all promoters and terminators will have been identified in 5 possible locations, but its UTRs will have been identified at a single location. The reconstruction step needs to prune a space of possibility of size 5<sup>10</sup> i.e., 10 millions (more if the detection threshold is low) down to one construct. Vio-0000 is the most challenging case. After the matching step, its UTRs will also have been identified at 5 possible locations. The reconstruction step needs to prune a space of possibility of size 5<sup>15</sup> (more than 30 billions). Brute force pruning quickly becomes intractable. The step-by-step reconstruction was developed for such cases, and to prune combinations as soon as they break the template constraints. Performance of the pruning algorithm is illustrated in <xref rid="s10" ref-type="sec">Supplementary Section S2</xref> of the Supplementary Information on the most computationally-challenging case of maximal QC with Vio-0000.</p>
        <p>To assess the influence of the number of elements in libraries—tests were run for the opposite cases of minimal QC (against the target itself) and maximal QC (against all the 3,125 members of the design space). All tests were repeated 10 times. In all cases, the overlapping parameter epsilon was set to 0. Results for all tests are displayed in <xref rid="T1" ref-type="table">Table 1</xref>.</p>
        <table-wrap position="float" id="T1">
          <label>TABLE 1</label>
          <caption>
            <p>Performance of the CM_1 Algorithm. Performance was assessed for constructs of opposite complexity and different reconstruction thresholds. Results in the top part of the table for the minimal QC scenario show computation times do not depend on the constructs and threshold. Results in the bottom part of the table for the maximal QC scenario show similar results.</p>
          </caption>
          <table frame="hsides" rules="groups">
            <thead valign="top">
              <tr>
                <th colspan="3" align="left" rowspan="1">Minimal quality control with CM_1</th>
              </tr>
              <tr>
                <th align="left" rowspan="1" colspan="1"/>
                <th align="center" rowspan="1" colspan="1">Threshold = 0.99</th>
                <th align="center" rowspan="1" colspan="1">Threshold = 0.75</th>
              </tr>
            </thead>
            <tbody valign="top">
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0000</td>
                <td align="center" rowspan="1" colspan="1">78.70 ± 6.61 s</td>
                <td align="center" rowspan="1" colspan="1">83.07 ± 7.26 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0007</td>
                <td align="center" rowspan="1" colspan="1">78.80 ± 0.35 s</td>
                <td align="center" rowspan="1" colspan="1">79.12 ± 1.05 s</td>
              </tr>
              <tr>
                <td colspan="3" align="left" rowspan="1">
                  <bold>Maximal quality control with CM_1</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1"/>
                <td align="center" rowspan="1" colspan="1">
                  <bold>Threshold = 0.99</bold>
                </td>
                <td align="center" rowspan="1" colspan="1">
                  <bold>Threshold = 0.75</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0000</td>
                <td align="center" rowspan="1" colspan="1">109.86 ± 15.10 s</td>
                <td align="center" rowspan="1" colspan="1">99.41 ± 14.31 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0007</td>
                <td align="center" rowspan="1" colspan="1">104.53 ± 4.47 s</td>
                <td align="center" rowspan="1" colspan="1">106.43 ± 10.60 s</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
        <p>In the minimal QC case, with both thresholds and both targets, the reconstruction yielded only one combination (the target itself) with a perfect score of 1.0. Overall running time was larger with CM_1 than CM_0, and was independent of the target construct. The run time did not change against the threshold (as there was only one candidate for identification). Split times (see logs) show that identification of the individual components only took a few seconds each (except the longer VioB that took 11 s).</p>
        <p>In the maximal QC case, the reconstruction yielded (for both targets) only one possible reconstruction, the target itself, and did so with a perfect score of 1.0 for the higher threshold. With the lower threshold, 2 UTRs passed the matching step for each template position., and the reconstruction yielded 32 possible reconstructions. Final selection then identified the correct construct (the target itself) with a perfect score of 1.0 among all the candidates. As expected, matching against the whole design space took longer than against one construct - between 100 and 110 s. The difference corresponded to the time required to match all the components needed for a full comparison with the design space.</p>
        <p>Split times (see logs) confirm that, for both minimal and maximal QC tests, reconstruction times were in the hundredths of a second and the component-matching step was the limiting step of the whole process. Variations between runs showed similar results as for CM_0 - times were either clustered around a main value close or spread in a tail. As with CM_0, these results were attributed to resource limitations in the system.</p>
      </sec>
      <sec id="s3-1-3">
        <title>Testing Algorithm CM_2</title>
        <p>CM_2 has the same limiting factors as CM_1. All tests in this section were therefore identical to the tests run on CM_1: same targets [Vio-0007 and Vio-0000, same two threshold levels (0.99 and 0.75), and overlap epsilon = 0; All tests were also run 10 times] for a minimal QC scenario and a maximal QC scenario. Input sequences were generated for the five separate transcription units in the construct (covering them in their entirety).</p>
        <p>Results in both tests (<xref rid="T2" ref-type="table">Table 2</xref>) show CM_2 performed faster than for CM_1 by an order of magnitude. This was expected since it uses much shorter sequences as inputs, and the pairwise-matching algorithm performs faster with shorter sequences. Split times (see logs) show that reconstruction times were negligible and that the few instances of resource limitations coincided with the matching of the longest sequence VioB. Running times were similar for both sequences - between 10 and 12 s.</p>
        <table-wrap position="float" id="T2">
          <label>TABLE 2</label>
          <caption>
            <p>Performance of the CM_2 Algorithm. Performance was assessed for constructs of opposite complexity and different reconstruction thresholds. Results in the top part of the table are for the minimal QC scenario, and show computation times are unaffected by the constructs and threshold. Results in the bottom part of the table are for the maximal QC scenario, and also show computation times are unaffected by the constructs and threshold.</p>
          </caption>
          <table frame="hsides" rules="groups">
            <thead valign="top">
              <tr>
                <th colspan="3" align="left" rowspan="1">Minimal quality control with CM_2</th>
              </tr>
              <tr>
                <th align="left" rowspan="1" colspan="1"/>
                <th align="center" rowspan="1" colspan="1">Threshold = 0.99</th>
                <th align="center" rowspan="1" colspan="1">Threshold = 0.75</th>
              </tr>
            </thead>
            <tbody valign="top">
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0000</td>
                <td align="center" rowspan="1" colspan="1">10.32 ± 0.15 s</td>
                <td align="center" rowspan="1" colspan="1">10.22 ± 0.14 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0007</td>
                <td align="center" rowspan="1" colspan="1">9.70 ± 0.08 s</td>
                <td align="center" rowspan="1" colspan="1">9.52 ± 0.33 s</td>
              </tr>
              <tr>
                <td colspan="3" align="left" rowspan="1">
                  <bold>Maximal quality control with CM_2</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1"/>
                <td align="center" rowspan="1" colspan="1">
                  <bold>Threshold = 0.99</bold>
                </td>
                <td align="center" rowspan="1" colspan="1">
                  <bold>Threshold = 0.75</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0000</td>
                <td align="center" rowspan="1" colspan="1">10.71 ± 0.17 s</td>
                <td align="center" rowspan="1" colspan="1">11.43 ± 0.88 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Vio-0007</td>
                <td align="center" rowspan="1" colspan="1">10.20 ± 0.03 s</td>
                <td align="center" rowspan="1" colspan="1">10.06 ± 0.07 s</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
      <sec id="s3-1-4">
        <title>Final Comparison of the Algorithms</title>
        <p>Finally, a test to assess what effects the demands of the Smith-Waterman algorithm have on the performance of all three algorithms was designed. Specifically, the target (the input construct) was increased in size and complexity. Since the reconstruction step of the algorithms is so efficient (repetitions are effectively tackled), we concatenated the construct Vio-0000 with itself twice and thrice. This way a test set of three constructs of increasing lengths and complexity was generated: Vio-0000 ✖1 (8.5 kb, 5 TUs and 20 components); Vio-0000 ✖2 (17 kb, 10 TUs and 40 components), and finally Vio-0000 ✖3 (25 kb, 15TUs and 60 components).</p>
        <p>All three algorithms were then applied to all three synthetic constructs - for the minimal and maximal QC scenarios. Since all constructs were ideal (no mutations introduced), the overlapping parameters were set to 0, and detection threshold set to 0.99 (very high). Input data for CM_2 were generated by slicing the constructs TU by TU as in previous tests. Results for these tests are displayed in <xref rid="T3" ref-type="table">Table 3</xref>.</p>
        <table-wrap position="float" id="T3">
          <label>TABLE 3</label>
          <caption>
            <p>Comparative performance of the algorithms for constructs of increasing complexity and lengths. Performance was estimated for all three algorithms and in the minimal and maximal QC cases. The test constructs were generated by concatenating the test construct Vio-0000 a number of times.</p>
          </caption>
          <table frame="hsides" rules="groups">
            <thead valign="top">
              <tr>
                <th align="left" rowspan="1" colspan="1"/>
                <th align="center" rowspan="1" colspan="1">Vio-0000 ✖1<break/>8.5 kb</th>
                <th align="center" rowspan="1" colspan="1">Vio-0000 ✖2<break/>17 kb</th>
                <th align="center" rowspan="1" colspan="1">Vio-0000 ✖3<break/>25 kb</th>
              </tr>
            </thead>
            <tbody valign="top">
              <tr>
                <td align="left" rowspan="1" colspan="1">CM_0</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 36.60 ± 0.73 s</td>
                <td align="center" rowspan="1" colspan="1">Failure</td>
                <td align="center" rowspan="1" colspan="1">Failure</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td align="left" rowspan="1" colspan="1">Maximal QC: &gt;30 h (est)</td>
                <td align="center" rowspan="1" colspan="1">Failure</td>
                <td align="center" rowspan="1" colspan="1">Failure</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CM_1</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 78.70 ± 6.61 s</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 524.04 ± 3.16 s</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 1776.53 ± 4.74 s</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 109.86 ± 15.10 s</td>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 663.01 ± 2.88 s</td>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 2,197.00s ± 3.51 s</td>
              </tr>
              <tr>
                <td rowspan="2" align="left" colspan="1">CM_2</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 10.32 ± 0.15 s</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 18.86 ± 0.16 s</td>
                <td align="left" rowspan="1" colspan="1">Minimal QC: 27.72 ± 0.76 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 10.71 ± 0.17 s</td>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 21.00 ± 0.16 s</td>
                <td align="left" rowspan="1" colspan="1">Maximal QC: 30.04 ± 0.26 s</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
        <p>The results make plain a crucial limitation of CM_0 (the tests failed due to lack of RAM): its range of application is limited to shorter sequences. CM_1’s performance also suffered for the largest sequences. With Vio-0000 ✖1, full analysis took less than 2 min per construct (a reasonable time for everyday use), but shot up to 10 min for Vio-0000 ✖2, and 35 min for Vio-0000 ✖3 (which would present challenges at scale). This is indicative of the authors’ experience - CM_1 performs well with sequences of less than 10 kb, and becomes expensive for sequences above 15 kb. It is worth noting that when genetic diversity is generated with short regulatory elements, running maximal QC only adds 20% to the run time (matching short sequences remains a cheap operation even for long targets). In everyday use, the run times can be improved by not matching the longer CDS components (or only fragments of them) and focusing on the shorter, regulatory components.</p>
        <p>Finally, CM_2 which uses short sequences as inputs remains fast in all cases, and performs linearly with the construct length. This was expected, since reconstruction and slice recombination have negligible cost, and slices take a similar time to be processed.</p>
      </sec>
    </sec>
    <sec id="s3-2">
      <title>Real Life Example—Lycopene Operon</title>
      <p>To complement the synthetic benchmarks, a real-world use case - encountered by the Kitney Lab during recent work on lycopene production (<xref rid="B22" ref-type="bibr">Exley et al., 2019</xref>) - will now be discussed. All input sequences and analysis outputs can be found at <ext-link xlink:href="https://github.com/kitneylab/cmatch" ext-link-type="uri">https://github.com/kitneylab/cmatch</ext-link>.</p>
      <p>The results are indicative of the kind of real-life performance and challenges for a combinatorial pathway engineering project. In particular, they are instructive of how algorithm parameters must be tweaked to deal with real, imperfect data.</p>
      <p>Lycopene, a naturally produced bright-red pigment, is a carotenoid present in many plants and organisms (<xref rid="B78" ref-type="bibr">Yamano et al., 1994</xref>; <xref rid="B23" ref-type="bibr">Gallego-Jara et al., 2015</xref>). Its antioxidant properties make it of high value to the pharmaceutical industry, and a popular colouring agent (<xref rid="B16" ref-type="bibr">Ciriminna et al., 2016</xref>). Its chemical synthesis is limited by high cost, low yield and quality (<xref rid="B59" ref-type="bibr">Sevgili and Erkmen, 2019</xref>). It is an extremely popular case study in metabolic engineering, as its pathway (<xref rid="F7" ref-type="fig">Figure 7A</xref>) is made of only three enzymatic reactions catalyzed by the enzymes crtE, crtB and crtI (<xref rid="B44" ref-type="bibr">Misawa et al., 1990</xref>; <xref rid="B79" ref-type="bibr">Yoon et al., 2006</xref>). The construct design (see <xref rid="F7" ref-type="fig">Figure 7B</xref>) was as follows:<list list-type="simple"><list-item><p>● It used an operon design to reduce the design space compared to designs based on transcription units, and limit homologous recombination.</p></list-item><list-item><p>● An inducible pTet_43 promoter drives the operon:</p></list-item><list-item><p>○ The promoter is very tightly shut off in the absence of an inducer to make sure the transformed cells grow unencumbered in the overnight culture.</p></list-item><list-item><p>○ The switch from off to ON to OFF is steep and the “ON” strength of the promoter is high (estimated at RPU = 1.2 from previous iGEM results).</p></list-item><list-item><p>● An insulating RiboJ (<xref rid="B17" ref-type="bibr">Clifton et al., 2018</xref>) was inserted post promoter.</p></list-item><list-item><p>● Gene order was fixed to CrtE-CrtI-CrtB (a common order in lycopene studies)</p></list-item><list-item><p>● All three RBS in the operon could be changed. For each position, all 12 RBS from the BioLegio library (RBS-A01 to RBS-A12) were used—yielding a space of constructs with 1,728 members</p></list-item></list>
</p>
      <fig position="float" id="F7">
        <label>FIGURE 7</label>
        <caption>
          <p>The 3-Gene Lycopene Pathway and its Implementation with an Operon Design. <bold>(A)</bold> The lycopene pathway is made up of only 3 enzymes (CrtE, CrtB and CrtI) - making it a very popular test bed in metabolic and combinatorial pathway engineering. <bold>(B)</bold> The design is made up of 3 genes in the set order CrtE-CrtI-CrtB. An inducible promoter is used to drive the operon and an insulating element RiboJ is inserted post promoter.</p>
        </caption>
        <graphic xlink:href="fbioe-09-785131-g007" position="float"/>
      </fig>
      <p>Quality control was limited by practical limitations that are typical Sanger sequencing. Three reverse primers were therefore designed—all originating a few hundred base pairs into the CDS. CM_2 was used instead of CM_1, since multiple sequences were used as input. Before analyzing the real data, simulations with synthetic data were conducted. As previously, constructs of opposite complexity (in terms of repetition) were used. BASIC assembly was simulated with a dedicated Python module (<xref rid="B26" ref-type="bibr">Haines, 2021</xref>). Input sub-sequences were generated by slicing the simulated constructs as if reverse primers originating from the end of the CDS were used - no mutations were introduced. The most extensive form of quality control offered by cMatch was conducted - that is the constructs were matched against their entire design space. In all cases, the constructs were identified with a perfect score of 1. Results from the simulations showed that processing each test construct took around 40 s. All elements to match took between 0.5 and 1.5 s to match, even the CDS (CrtE, I and B being short genes).</p>
      <p>Real data for 10 constructs were then analyzed with cMatch. Maximal quality control was conducted for each of them (i.e., they were checked against the entire design space, rather than against themselves). As the primers originated only a few 100 base pairs into the CDS rather than at their ends, input sequences were only a third as short (700 vs. 2,000 base-pairs) as in the test with synthetic data, and processing times for the matching step were faster by an order of magnitude (see logs).</p>
      <p>Search parameters such as detection threshold and overlap parameter can be adjusted by the user. They help filter what components may proceed to the reconstruction phase of the algorithm. With reliable sequencing data, it is reasonable to set them up to stringent values (high threshold, no overlap). This was not the case with the lycopene data. To account for poor sequence quality (the start and end of the sequences showed low phred score), the global matching threshold was lowered to 0.5. Authors’ experience with other datasets has been that input sequences are often unreliable at their starts and ends and that one of the most efficient ways to deal with such issues is to lower matching thresholds so poorly-matched components can qualify for the reconstruction steps. Well-matched components still qualify, and step-by-step reconstruction still returns the best candidates - only this time the best candidates include poorly-matched components. Another important and complementary way has been to relax the constraint on component-overlapping (via the epsilon parameter). When the sequence data is corrupted, the pairwise matching algorithm is prone to using insertions and deletions—leading to components that may overlap by a few base pairs in some cases. Increasing epsilon to 3 allowed reconstruction to proceed successfully when identification of the CDS was poor due to sequencing issues.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="s4">
    <title>Discussion</title>
    <p>We have presented a novel, automatic tool, cMatch, to reconstruct and identify a synthetic genetic construct from its sequence, or more practically, a set of sub-sequences. The method is based on two pieces of information: knowledge of its modular structure, and its libraries of components. Although first intended (and developed) for combinatorial pathway engineering problems and lifting their QC bottleneck, cMatch is not restricted to these applications. The algorithms can indeed be applied to any synthetic, modular construct, provided a template and a list of elements for every position of the template are available.</p>
    <sec id="s4-1">
      <title>Applications</title>
      <p>cMatch has been designed to perform an operation that we have called “construct-matching,” and which is more thorough than simple sequence-matching or alignment. Construct-matching is concerned with matching sequence data to constructs at the functional level, practically searching for its components, checking if their order matches a given template, and then quantifying for each component how they differ from expected components. Working at component level is important in order to deal with small regulatory components, and eliminate what biases matching methods have towards large sequences. For each component a matching (homology) score is derived. These scores and their weighted average are then used to quantify the reliability of the predictions.</p>
      <p>Construct-matching also goes further than automated annotation and sequence alignment, as these matching scores are used to make decisions regarding the matching (reconstruction does not proceed unless all components are identified with sufficient precision, and fails if some components are missing or no component combination can be found that matches the template), and to rank the possible combinations.</p>
      <p>To our knowledge no software has been designed to exploit the advantages of modularity in construct design to perform such a task—despite the centrality of the concept in synthetic biology, and the level of friction quality control and similar forms of verification introduce into project workflows when performed at large scale, and the obvious reliability and reproducibility issues associated with these tasks.</p>
      <p>As previously stated, cMatch was first intended and developed for combinatorial pathway engineering problems. These applications are subject to a particular set of constraints that require the development of precise, reliable, automated quality control for their constructs—namely the need to deal with the large amount of data generated by these applications and the need for precision in the identification of the small regulatory elements. cMatch is not restricted to these applications however: it can be applied to QC for any synthetic, modular construct, provided a template and a list of elements for every position of the template are available.</p>
      <p>Thanks to the way it exploits construct modularity, cMatch is also capable of performing two forms of quality control of opposite complexity (called minimal and maximal QC in this work):<list list-type="bullet"><list-item><p>Minimal QC: This is the lowest and most common form of quality control. It aims to check that the sequencing data correspond to a given construct, or to what degree they differ.</p></list-item><list-item><p>Maximal QC: Sequencing data are compared to all the constructs in the entire design space at once. This is a more thorough form of QC, as it offers some insurance against practical errors such as mislabelling. It also offers estimates of how more likely the best match is compared to the best other possibilities. This is a useful feature when data can not be assumed to be completely reliable, or to deal with the shortest components, for which changes of a few base-pairs (due to mutations or sequencing errors) may lead to the identification of different library elements.</p></list-item></list>
</p>
      <p>cMatch can also be applied to other applications than quality control, and to the more general problem of identification of synthetic constructs lying in a specified design space. A typical example of such need is encountered when pooled construction workflows are used. These workflows yield little prior information on the genetic material—except that it matches a given template, was assembled from a known set of components and therefore lies in a, possibly large, space of possibilities. This is insufficient in general, and the link between colonies and their genetic material must be re-established, so phenotypic data may be correlated with genotypic data. This scenario was encountered by the Kitney Lab during its recent work on the lycopene pathway. Because lycopene is toxic due to its propensity to accumulate in cell walls (<xref rid="B68" ref-type="bibr">Taylor and Heap, 2020</xref>), the expression of some constructs was hampered - the issue being particularly severe for operon designs driven by constitutive promoters as in (<ext-link xlink:href="https://www.zotero.org/google-docs/?aryz1b" ext-link-type="uri">Exley et al., 2019</ext-link>). To identify the viable region of the design space, a novel method to bootstrap a DoE workflow was developed, based on a pooled approach. Cells were transformed with random constructs in a one-pot reaction containing all the different combinations of the parts. Once transformed and grown, viable colonies were selected at random, colony-PCR was performed. Construct identification was a crucial step of the workflow that was not tractable without cMatch.</p>
    </sec>
    <sec id="s4-2">
      <title>Reproducibility, Reliability and Robustness</title>
      <p>Reproducibility, reliability and robustness have been at the core of the design of cMatch and its algorithms. Automating quality control (regardless of the way it is accomplished, and what sub-tasks it performs) obviously prevents analysis from being affected by considerations affecting human operatives such as fatigue, waning focus and general human inconsistency. Reproducibility was improved by making the algorithms deterministic with our choice of the Smith-Waterman algorithm as the foundation for cMatch to build on. Only computation times vary for a given input, and search parameters (template, libraries), and do so according to available computing resources—benchmark results in <italic>Results—Applications and Benchmarks</italic> section with the violacein example show limited variation in that regard. Synthetic results from the violacein example show that the algorithms correctly identify the ground truth and return a score of 1.0 for all its components. The algorithms are therefore reliable.</p>
      <p>Robustness, defined as “the quality of being strong, and healthy or unlikely to break or fail” (Def. 1. Cambridge Dictionary) is, however, more than just reliability and reproducibility, and extends to other parts of the construct-matching process - the most important being decision-making in the face of uncertainty. Unlike the tests with synthetic data, it is impossible in practice to be sure that an input sequence is itself reliable and to be fully trusted. Errors can be either due to sequencing or be indicative of a genuine alteration of the genetic content caused by a few mutations, some more likely to alter construct output than others, or at the other end of the spectrum proof of assembly failure).</p>
      <p>cMatch’s algorithms offer several mechanisms to deal with uncertainty in input data.</p>
      <p>The first mechanism helps deal with poor data: users can lower the constraints for a successful analysis—practically, the constraints on component-matching (matching threshold) and reconstruction (admissible overlap). Benchmarking results show the cost of relaxing these constraints to be minimal thanks to the efficient step-by-step reconstruction.</p>
      <p>The second mechanism is through quantification. Any non-perfect matching score can be used as a warning flag warranting further investigation of the construct or some of its components (a level of analysis unobtainable without a component-based software). Further investigation can take several forms. It can be a simple repetition of the sequencing process (in case the best match is close to the input sequence and it is legitimate to suspect a sequencing error because discrepancies are located in regions with low phred score) or a more drastic decision to repeat the construction. In either case, construct-matching can be repeated on new sequence data and the best prediction, as measured by the overall matching score (or any user-defined function on the component scores), can be retained as the most reliable output. Previous estimates of construct properties may then need adjusting - for instance a new estimation of the translation rate can be computed if mutations are found in a UTR region and it is concluded the construct has mutated.</p>
      <p>Quantification allows the estimation of the distance between the best match and all the other constructs in the same design space - thus offering a method to rate how likely the best match is compared to these other possibilities. This is the idea behind what we called maximal QC. Depending on the choice of elements in libraries, some search spaces will yield more conclusive identifications than others, since their constructs are spread further from each other. This should come as no surprise, since manual sequence alignment is notoriously harder and error-prone when libraries contain elements close to each other, for instance differing by a few base pairs after they were generated by random-PCR.</p>
    </sec>
    <sec id="s4-3">
      <title>Practical Considerations</title>
      <p>cMatch’s algorithms have been developed to be fast enough for common applications, but also so they do not require special hardware to run on. The benchmarks in <italic>Results—Applications and Benchmarks</italic> section show, analyzing a sequence for a typical problem (constructs with a few genes, search spaces made of a few thousand constructs) only takes a few minutes. Processing a batch of sequences (a few hundreds for QC), will in no way represent an obstacle for a project.</p>
      <p>Algorithm inputs have also been chosen to be as intuitive as possible, and so little data conversion must be undertaken before analysis is run. Input sequences are in the .seq format typical of Sanger sequencing, or simple txt format. The search parameters are accessible to the user, and encoded in the human-readable format JSON. The corresponding file has a simple structure that can be easily modified (examples of valid JSON files can be found at <ext-link xlink:href="https://github.com/kitneylab/cmatch" ext-link-type="uri">https://github.com/kitneylab/cmatch</ext-link>) so data analysis may start soon after the sequences for the components are gathered. Finally, the common txt, Genbank, and SBOL formats are supported for the sequences of the elements in the component libraries.</p>
      <p>The most important consideration for the choice of the construct-matching algorithms relates to the nature of the input - whether a single or multiple sequences are used. This choice is in general a direct consequence of the sequencing method. CM_2 is the default algorithm for multiple inputs. It is worth noting that because sequences used for inputs will be short, some limitations of the Smith-Waterman algorithm will have limited impact on performance. CM_1 remains the algorithm to use when a single sequence is used as input, as would be the case with NGS sequencing.</p>
      <p>An important feature of both CM_1 and CM_2 is that they were built on top of the Smith-Waterman algorithm for pairwise matching. This algorithm is extremely reliable, but its performance suffers with long sequences. When possible, shorter component sequences should be used - for instance with CDS or hybrid components. Benchmark tests have shown that the performance of CM_1 degraded with input sequences longer than 10 kb - so would CM_2 if such a long sequence featured in its inputs. Splitting strategies are also being investigated to reduce the size of the inputs and speed up computations at the component-matching step of the algorithms.</p>
      <p>Both CM_1 and CM_2 rely on the availability of two specific pieces of information.</p>
      <p>They first rely on the availability of the construct template. Algorithms for the purpose of sequence investigation (and template identification) are outside the scope of this work—construct investigation being of little immediate use to the Kitney Lab in its everyday workflows. They offer useful capacities however, for instance as part of an audit of resources in freezer storage. Variants of CM_1 and CM_2, that modify the reconstruction phase so all combinations are pruned not against a set template but under a set of positional and grammatical rules, will be investigated in subsequent works.</p>
      <p>They also need a full list of the elements in the component libraries, since they are based on pairwise-matching of known sequences. In case of missing elements, a possible strategy is to use a very large library of components from an external database, lower the pruning thresholds for these components, and match the large libraries against the target sequence. The best matches can then be used to locate the missing elements providing they have enough in common. Because of the high degree of parallelism in the algorithm, we are confident that analysis of a sequence will remain tractable. For longer components, the faster but less reliable BLAST search may be recommended.</p>
    </sec>
  </sec>
  <sec sec-type="conclusion" id="s4-4">
    <title>Conclusion</title>
    <p>cMatch is a simple, lightweight tool to perform quality control of modular synthetic constructs at speed and scale. Although originally developed for the application case of combinatorial pathway engineering and making QC frictionless in optimization workflows, cMatch can be used in many different settings - we leave it to the reader to adapt this versatile tool to their own applications. The use of cMatch has made a significant difference to the operation of the Kitney Lab, and given a significant boost to their productivity and to their confidence in the reproducibility of their results. We are confident other adopters will enjoy similar benefits.</p>
    <sec id="s4-5">
      <title>Tool Presentation</title>
      <p>cMatch has been implemented in Python 3.9 and is publicly available as an open-source package on the Kitney Lab Github page (<ext-link xlink:href="https://github.com/kitneylab/cmatch" ext-link-type="uri">https://github.com/kitneylab/cmatch</ext-link>) under MIT license (<ext-link xlink:href="https://choosealicense.com/licenses/mit/" ext-link-type="uri">https://choosealicense.com/licenses/mit/</ext-link>). The core functionalities are implemented as three different modules: <ext-link xlink:href="http://matching.py/" ext-link-type="uri">matching.py</ext-link>, <ext-link xlink:href="http://reconstruction.py/" ext-link-type="uri">reconstruction.py</ext-link> and <ext-link xlink:href="http://extension.py/" ext-link-type="uri">extension.py</ext-link> which respectively implement the core Sequence, Component Libraries and Component classes and their matching methods (calling biopython pairwise2 local alignment function), the reconstruction and extension functions. All input and output files are in JSON (for simplicity) except the sequence files (in .seq). The CMatch package implements the CM_1 algorithm to analyse a single sequence, and its CM_2 extension for multiple sequences.</p>
    </sec>
  </sec>
</body>
<back>
  <sec sec-type="data-availability" id="s5">
    <title>Data Availability Statement</title>
    <p>The datasets presented in this study can be found in online repositories. The names of the repository/repositories and accession number(s) can be found in the article/<xref rid="s10" ref-type="sec">Supplementary Material</xref>.</p>
  </sec>
  <sec id="s6">
    <title>Author Contributions</title>
    <p>AC and MB designed and implemented the algorithms and software. AC and CM conducted the laboratory experiments on lycopene production. CM used and tested the software and gave his input as an experimentalist. RK supervised the research.</p>
  </sec>
  <sec id="s7">
    <title>Funding</title>
    <p>We would like to acknowledge the support of the project described in the paper by grants from: The United Kingdom Government Department of Business, Energy and Industrial Strategy (via the United Kingdom's National Physical Laboratory) NPL 2937881. The Engineering and Physical Sciences Research Council (United Kingdom) EP/L011573/1 and EP/S001859/1.</p>
  </sec>
  <sec sec-type="COI-statement" id="s8">
    <title>Conflict of Interest</title>
    <p>The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.</p>
  </sec>
  <sec sec-type="disclaimer" id="s9">
    <title>Publisher’s Note</title>
    <p>All claims expressed in this article are solely those of the authors and do not necessarily represent those of their affiliated organizations, or those of the publisher, the editors and the reviewers. Any product that may be evaluated in this article, or claim that may be made by its manufacturer, is not guaranteed or endorsed by the publisher.</p>
  </sec>
  <sec id="s10">
    <title>Supplementary Material</title>
    <p>The Supplementary Material for this article can be found online at: <ext-link xlink:href="https://www.frontiersin.org/articles/10.3389/fbioe.2021.785131/full#supplementary-material" ext-link-type="uri">https://www.frontiersin.org/articles/10.3389/fbioe.2021.785131/full#supplementary-material</ext-link>
</p>
    <supplementary-material id="SM1" position="float" content-type="local-data">
      <media xlink:href="DataSheet1.PDF">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abt</surname><given-names>V.</given-names></name><name><surname>Barz</surname><given-names>T.</given-names></name><name><surname>Cruz-Bournazou</surname><given-names>M. N.</given-names></name><name><surname>Herwig</surname><given-names>C.</given-names></name><name><surname>Kroll</surname><given-names>P.</given-names></name><name><surname>Möller</surname><given-names>J.</given-names></name><etal/></person-group> (<year>2018</year>). <article-title>Model-based Tools for Optimal Experiments in Bioprocess Engineering</article-title>. <source>Curr. Opin. Chem. Eng.</source>
<volume>22</volume>, <fpage>244</fpage>–<lpage>252</lpage>. <pub-id pub-id-type="doi">10.1016/j.coche.2018.11.007</pub-id>
</mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ajikumar</surname><given-names>P. K.</given-names></name><name><surname>Xiao</surname><given-names>W.-H.</given-names></name><name><surname>Tyo</surname><given-names>K. E. J.</given-names></name><name><surname>Wang</surname><given-names>Y.</given-names></name><name><surname>Simeon</surname><given-names>F.</given-names></name><name><surname>Leonard</surname><given-names>E.</given-names></name><etal/></person-group> (<year>2010</year>). <article-title>Isoprenoid Pathway Optimization for Taxol Precursor Overproduction in <italic>Escherichia coli</italic>
</article-title>. <source>Science</source>
<volume>330</volume>, <fpage>70</fpage>–<lpage>74</lpage>. <pub-id pub-id-type="doi">10.1126/science.1191652</pub-id>
<pub-id pub-id-type="pmid">20929806</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alper</surname><given-names>H.</given-names></name><name><surname>Fischer</surname><given-names>C.</given-names></name><name><surname>Nevoigt</surname><given-names>E.</given-names></name><name><surname>Stephanopoulos</surname><given-names>G.</given-names></name></person-group> (<year>2005</year>). <article-title>Tuning Genetic Control through Promoter Engineering</article-title>. <source>Proc. Natl. Acad. Sci.</source>
<volume>102</volume>, <fpage>12678</fpage>–<lpage>12683</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.0504604102</pub-id>
<pub-id pub-id-type="pmid">16123130</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>S. F.</given-names></name><name><surname>Gish</surname><given-names>W.</given-names></name><name><surname>Miller</surname><given-names>W.</given-names></name><name><surname>Myers</surname><given-names>E. W.</given-names></name><name><surname>Lipman</surname><given-names>D. J.</given-names></name></person-group> (<year>1990</year>). <article-title>Basic Local Alignment Search Tool</article-title>. <source>J. Mol. Biol.</source>
<volume>215</volume>, <fpage>403</fpage>–<lpage>410</lpage>. <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
<pub-id pub-id-type="pmid">2231712</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Azubuike</surname><given-names>C. C.</given-names></name><name><surname>Edwards</surname><given-names>M. G.</given-names></name><name><surname>Gatehouse</surname><given-names>A. M. R.</given-names></name><name><surname>Howard</surname><given-names>T. P.</given-names></name></person-group> (<year>2020</year>). <article-title>Applying Statistical Design of Experiments to Understanding the Effect of Growth Medium Components on Cupriavidus Necator H16 Growth</article-title>. <source>Appl. Environ. Microbiol.</source>
<volume>86</volume>, <fpage>e00705</fpage>–<lpage>20</lpage>. <pub-id pub-id-type="doi">10.1128/AEM.00705-20</pub-id>
<pub-id pub-id-type="pmid">32561588</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bell</surname><given-names>J.</given-names></name><name><surname>Philp</surname><given-names>J.</given-names></name><name><surname>Kitney</surname><given-names>R. I.</given-names></name></person-group> (<year>2021</year>). <article-title>Addressing the post‐COVID Era through Engineering Biology</article-title>. <source>Eng. Biol.</source>
<volume>5</volume>, <fpage>21</fpage>–<lpage>34</lpage>. <pub-id pub-id-type="doi">10.1049/enb2.12008</pub-id>
</mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Blazeck</surname><given-names>J.</given-names></name><name><surname>Garg</surname><given-names>R.</given-names></name><name><surname>Reed</surname><given-names>B.</given-names></name><name><surname>Alper</surname><given-names>H. S.</given-names></name></person-group> (<year>2012</year>). <article-title>Controlling Promoter Strength and Regulation inSaccharomyces Cerevisiaeusing Synthetic Hybrid Promoters</article-title>. <source>Biotechnol. Bioeng.</source>
<volume>109</volume>, <fpage>2884</fpage>–<lpage>2895</lpage>. <pub-id pub-id-type="doi">10.1002/bit.24552</pub-id>
<pub-id pub-id-type="pmid">22565375</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bultelle</surname><given-names>M.</given-names></name><name><surname>de Murieta</surname><given-names>I. S.</given-names></name><name><surname>Kitney</surname><given-names>R.</given-names></name></person-group> (<year>2016</year>). “<article-title>Introducing SynBIS - the Synthetic Biology Information System</article-title>,” in <source>IET/SynbiCITE Engineering Biology Conference</source> (<publisher-loc>London, UK</publisher-loc>: <publisher-name>Institution of Engineering and Technology</publisher-name>), <fpage>2</fpage>. <pub-id pub-id-type="doi">10.1049/cp.2016.1254</pub-id>
</mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Burgess</surname><given-names>D. J.</given-names></name></person-group> (<year>2018</year>). <article-title>Next Regeneration Sequencing for Reference Genomes</article-title>. <source>Nat. Rev. Genet.</source>
<volume>19</volume>, <fpage>125</fpage>. <pub-id pub-id-type="doi">10.1038/nrg.2018.5</pub-id>
<pub-id pub-id-type="pmid">29440742</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cameron</surname><given-names>D. C.</given-names></name><name><surname>Tong</surname><given-names>I.-T.</given-names></name></person-group> (<year>1993</year>). <article-title>Cellular and Metabolic Engineering</article-title>. <source>Appl. Biochem. Biotechnol.</source>
<volume>38</volume>, <fpage>105</fpage>–<lpage>140</lpage>. <pub-id pub-id-type="doi">10.1007/BF02916416</pub-id>
<pub-id pub-id-type="pmid">8346901</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cameron</surname><given-names>D. E.</given-names></name><name><surname>Collins</surname><given-names>J. J.</given-names></name></person-group> (<year>2014</year>). <article-title>Tunable Protein Degradation in Bacteria</article-title>. <source>Nat. Biotechnol.</source>
<volume>32</volume>, <fpage>1276</fpage>–<lpage>1281</lpage>. <pub-id pub-id-type="doi">10.1038/nbt.3053</pub-id>
<pub-id pub-id-type="pmid">25402616</pub-id></mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Carbonell</surname><given-names>P.</given-names></name><name><surname>Jervis</surname><given-names>A. J.</given-names></name><name><surname>Robinson</surname><given-names>C. J.</given-names></name><name><surname>Yan</surname><given-names>C.</given-names></name><name><surname>Dunstan</surname><given-names>M.</given-names></name><name><surname>Swainston</surname><given-names>N.</given-names></name><etal/></person-group> (<year>2018</year>). <article-title>An Automated Design-Build-Test-Learn Pipeline for Enhanced Microbial Production of fine Chemicals</article-title>. <source>Commun. Biol.</source>
<volume>1</volume>, <fpage>66</fpage>. <pub-id pub-id-type="doi">10.1038/s42003-018-0076-9</pub-id>
<pub-id pub-id-type="pmid">30271948</pub-id></mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cardinale</surname><given-names>S.</given-names></name><name><surname>Arkin</surname><given-names>A. P.</given-names></name></person-group> (<year>2012</year>). <article-title>Contextualizing Context for Synthetic Biology - Identifying Causes of Failure of Synthetic Biological Systems</article-title>. <source>Biotechnol. J.</source>
<volume>7</volume>, <fpage>856</fpage>–<lpage>866</lpage>. <pub-id pub-id-type="doi">10.1002/biot.201200085</pub-id>
<pub-id pub-id-type="pmid">22649052</pub-id></mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Casini</surname><given-names>A.</given-names></name><name><surname>Storch</surname><given-names>M.</given-names></name><name><surname>Baldwin</surname><given-names>G. S.</given-names></name><name><surname>Ellis</surname><given-names>T.</given-names></name></person-group> (<year>2015</year>). <article-title>Bricks and Blueprints: Methods and Standards for DNA Assembly</article-title>. <source>Nat. Rev. Mol. Cel Biol</source>
<volume>16</volume>, <fpage>568</fpage>–<lpage>576</lpage>. <pub-id pub-id-type="doi">10.1038/nrm4014</pub-id>
</mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chapman</surname><given-names>B.</given-names></name><name><surname>Chang</surname><given-names>J.</given-names></name></person-group> (<year>2000</year>). <article-title>Biopython</article-title>. <source>SIGBIO Newsl.</source>
<volume>20</volume>, <fpage>15</fpage>–<lpage>19</lpage>. <pub-id pub-id-type="doi">10.1145/360262.360268</pub-id>
<comment>Accessed April 9, 2020)</comment>
</mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ciriminna</surname><given-names>R.</given-names></name><name><surname>Fidalgo</surname><given-names>A.</given-names></name><name><surname>Meneguzzo</surname><given-names>F.</given-names></name><name><surname>Ilharco</surname><given-names>L. M.</given-names></name><name><surname>Pagliaro</surname><given-names>M.</given-names></name></person-group> (<year>2016</year>). <article-title>Lycopene: Emerging Production Methods and Applications of a Valued Carotenoid</article-title>. <source>ACS Sustain. Chem. Eng.</source>
<volume>4</volume>, <fpage>643</fpage>–<lpage>650</lpage>. <pub-id pub-id-type="doi">10.1021/acssuschemeng.5b01516</pub-id>
</mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Clifton</surname><given-names>K. P.</given-names></name><name><surname>Jones</surname><given-names>E. M.</given-names></name><name><surname>Paudel</surname><given-names>S.</given-names></name><name><surname>Marken</surname><given-names>J. P.</given-names></name><name><surname>Monette</surname><given-names>C. E.</given-names></name><name><surname>Halleran</surname><given-names>A. D.</given-names></name><etal/></person-group> (<year>2018</year>). <article-title>The Genetic Insulator RiboJ Increases Expression of Insulated Genes</article-title>. <source>J. Biol. Eng.</source>
<volume>12</volume>, <fpage>23</fpage>. <pub-id pub-id-type="doi">10.1186/s13036-018-0115-6</pub-id>
<pub-id pub-id-type="pmid">30386425</pub-id></mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>De Mey</surname><given-names>M.</given-names></name><name><surname>Maertens</surname><given-names>J.</given-names></name><name><surname>Lequeux</surname><given-names>G. J.</given-names></name><name><surname>Soetaert</surname><given-names>W. K.</given-names></name><name><surname>Vandamme</surname><given-names>E. J.</given-names></name></person-group> (<year>2007</year>). <article-title>Construction and Model-Based Analysis of a Promoter Library for <italic>E. coli</italic>: an Indispensable Tool for Metabolic Engineering</article-title>. <source>BMC Biotechnol.</source>
<volume>7</volume>, <fpage>34</fpage>. <pub-id pub-id-type="doi">10.1186/1472-6750-7-34</pub-id>
<pub-id pub-id-type="pmid">17572914</pub-id></mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ellis</surname><given-names>T.</given-names></name><name><surname>Adie</surname><given-names>T.</given-names></name><name><surname>Baldwin</surname><given-names>G. S.</given-names></name></person-group> (<year>2011</year>). <article-title>DNA Assembly for Synthetic Biology: from Parts to Pathways and beyond</article-title>. <source>Integr. Biol.</source>
<volume>3</volume>, <fpage>109</fpage>–<lpage>118</lpage>. <pub-id pub-id-type="doi">10.1039/c0ib00070a</pub-id>
</mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eric</surname><given-names>S. D.</given-names></name><name><surname>Theophilus</surname><given-names>T. K. D. D. K. A.</given-names></name></person-group> (<year>2014</year>). <article-title>Bioinformatics with Basic Local Alignment Search Tool (BLAST) and Fast Alignment (FASTA)</article-title>. <source>J. Bioinform. Seq. Anal.</source>
<volume>6</volume>, <fpage>1</fpage>–<lpage>6</lpage>. <pub-id pub-id-type="doi">10.5897/IJBC2013.0086</pub-id>
</mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Espah Borujeni</surname><given-names>A.</given-names></name><name><surname>Channarasappa</surname><given-names>A. S.</given-names></name><name><surname>Salis</surname><given-names>H. M.</given-names></name></person-group> (<year>2014</year>). <article-title>Translation Rate Is Controlled by Coupled Trade-Offs between Site Accessibility, Selective RNA Unfolding and Sliding at Upstream Standby Sites</article-title>. <source>Nucleic Acids Res.</source>
<volume>42</volume>, <fpage>2646</fpage>–<lpage>2659</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkt1139</pub-id>
<pub-id pub-id-type="pmid">24234441</pub-id></mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Exley</surname><given-names>K.</given-names></name><name><surname>Reynolds</surname><given-names>C. R.</given-names></name><name><surname>Suckling</surname><given-names>L.</given-names></name><name><surname>Chee</surname><given-names>S. M.</given-names></name><name><surname>Tsipa</surname><given-names>A.</given-names></name><name><surname>Freemont</surname><given-names>P. S.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Utilising Datasheets for the Informed Automated Design and Build of a Synthetic Metabolic Pathway</article-title>. <source>J. Biol. Eng.</source>
<volume>13</volume>, <fpage>8</fpage>. <pub-id pub-id-type="doi">10.1186/s13036-019-0141-z</pub-id>
<pub-id pub-id-type="pmid">30675181</pub-id></mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gallego-Jara</surname><given-names>J.</given-names></name><name><surname>de Diego</surname><given-names>T.</given-names></name><name><surname>del Real</surname><given-names>Á.</given-names></name><name><surname>Écija-Conesa</surname><given-names>A.</given-names></name><name><surname>Manjón</surname><given-names>A.</given-names></name><name><surname>Cánovas</surname><given-names>M.</given-names></name></person-group> (<year>2015</year>). <article-title>Lycopene Overproduction and <italic>In Situ</italic> Extraction in Organic-Aqueous Culture Systems Using a Metabolically Engineered <italic>Escherichia coli</italic>
</article-title>. <source>AMB Expr.</source>
<volume>5</volume>, <fpage>65</fpage>. <pub-id pub-id-type="doi">10.1186/s13568-015-0150-3</pub-id>
</mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gilman</surname><given-names>J.</given-names></name></person-group> (<year>2021</year>). <article-title>Statistical Design of Experiments for Synthetic Biology</article-title>. <source>ACS Synth. Biol.</source>
<volume>18</volume>. <pub-id pub-id-type="doi">10.1021/acssynbio.0c00385</pub-id>
</mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Goujon</surname><given-names>M.</given-names></name><name><surname>McWilliam</surname><given-names>H.</given-names></name><name><surname>Li</surname><given-names>W.</given-names></name><name><surname>Valentin</surname><given-names>F.</given-names></name><name><surname>Squizzato</surname><given-names>S.</given-names></name><name><surname>Paern</surname><given-names>J.</given-names></name><etal/></person-group> (<year>2010</year>). <article-title>A New Bioinformatics Analysis Tools Framework at EMBL-EBI</article-title>. <source>Nucleic Acids Res.</source>
<volume>38</volume>, <fpage>W695</fpage>–<lpage>W699</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkq313</pub-id>
<pub-id pub-id-type="pmid">20439314</pub-id></mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Haines</surname><given-names>M. C.</given-names></name></person-group> (<year>2021</year>). <article-title>LondonBiofoundry/basicsynbio</article-title>. <comment>London Biofoundry Available at: <ext-link xlink:href="https://github.com/LondonBiofoundry/basicsynbio" ext-link-type="uri">https://github.com/LondonBiofoundry/basicsynbio</ext-link> (Accessed March 22, 2021)</comment>. </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ham</surname><given-names>T. S.</given-names></name><name><surname>Dmytriv</surname><given-names>Z.</given-names></name><name><surname>Plahar</surname><given-names>H.</given-names></name><name><surname>Chen</surname><given-names>J.</given-names></name><name><surname>Hillson</surname><given-names>N. J.</given-names></name><name><surname>Keasling</surname><given-names>J. D.</given-names></name></person-group> (<year>2012</year>). <article-title>Design, Implementation and Practice of JBEI-ICE: an Open Source Biological Part Registry Platform and Tools</article-title>. <source>Nucleic Acids Res.</source>
<volume>40</volume>, <fpage>e141</fpage>. <pub-id pub-id-type="doi">10.1093/nar/gks531</pub-id>
<pub-id pub-id-type="pmid">22718978</pub-id></mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hanson</surname><given-names>G.</given-names></name><name><surname>Coller</surname><given-names>J.</given-names></name></person-group> (<year>2018</year>). <article-title>Codon Optimality, Bias and Usage in Translation and mRNA Decay</article-title>. <source>Nat. Rev. Mol. Cel Biol</source>
<volume>19</volume>, <fpage>20</fpage>–<lpage>30</lpage>. <pub-id pub-id-type="doi">10.1038/nrm.2017.91</pub-id>
</mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hartwell</surname><given-names>L. H.</given-names></name><name><surname>Hopfield</surname><given-names>J. J.</given-names></name><name><surname>Leibler</surname><given-names>S.</given-names></name><name><surname>Murray</surname><given-names>A. W.</given-names></name></person-group> (<year>1999</year>). <article-title>From Molecular to Modular Cell Biology</article-title>. <source>Nature</source>
<volume>402</volume>, <fpage>C47</fpage>–<lpage>C52</lpage>. <pub-id pub-id-type="doi">10.1038/35011540</pub-id>
<pub-id pub-id-type="pmid">10591225</pub-id></mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hillson</surname><given-names>N.</given-names></name><name><surname>Caddick</surname><given-names>M.</given-names></name><name><surname>Cai</surname><given-names>Y.</given-names></name><name><surname>Carrasco</surname><given-names>J. A.</given-names></name><name><surname>Chang</surname><given-names>M. W.</given-names></name><name><surname>Curach</surname><given-names>N. C.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Building a Global alliance of Biofoundries</article-title>. <source>Nat. Commun.</source>
<volume>10</volume>, <fpage>2040</fpage>. <pub-id pub-id-type="doi">10.1038/s41467-019-10079-2</pub-id>
<pub-id pub-id-type="pmid">31068573</pub-id></mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Iverson</surname><given-names>S. V.</given-names></name><name><surname>Haddock</surname><given-names>T. L.</given-names></name><name><surname>Beal</surname><given-names>J.</given-names></name><name><surname>Densmore</surname><given-names>D. M.</given-names></name></person-group> (<year>2016</year>). <article-title>CIDAR MoClo: Improved MoClo Assembly Standard and New <italic>E. coli</italic> Part Library Enable Rapid Combinatorial Design for Synthetic and Traditional Biology</article-title>. <source>ACS Synth. Biol.</source>
<volume>5</volume>, <fpage>99</fpage>–<lpage>103</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.5b00124</pub-id>
<pub-id pub-id-type="pmid">26479688</pub-id></mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jack</surname><given-names>B. R.</given-names></name><name><surname>Leonard</surname><given-names>S. P.</given-names></name><name><surname>Mishler</surname><given-names>D. M.</given-names></name><name><surname>Renda</surname><given-names>B. A.</given-names></name><name><surname>Leon</surname><given-names>D.</given-names></name><name><surname>Suárez</surname><given-names>G. A.</given-names></name><etal/></person-group> (<year>2015</year>). <article-title>Predicting the Genetic Stability of Engineered DNA Sequences with the EFM Calculator</article-title>. <source>ACS Synth. Biol.</source>
<volume>4</volume>, <fpage>939</fpage>–<lpage>943</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.5b00068</pub-id>
<pub-id pub-id-type="pmid">26096262</pub-id></mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jeschek</surname><given-names>M.</given-names></name><name><surname>Gerngross</surname><given-names>D.</given-names></name><name><surname>Panke</surname><given-names>S.</given-names></name></person-group> (<year>2017</year>). <article-title>Combinatorial Pathway Optimization for Streamlined Metabolic Engineering</article-title>. <source>Curr. Opin. Biotechnol.</source>
<volume>47</volume>, <fpage>142</fpage>–<lpage>151</lpage>. <pub-id pub-id-type="doi">10.1016/j.copbio.2017.06.014</pub-id>
<pub-id pub-id-type="pmid">28750202</pub-id></mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jeschek</surname><given-names>M.</given-names></name><name><surname>Gerngross</surname><given-names>D.</given-names></name><name><surname>Panke</surname><given-names>S.</given-names></name></person-group> (<year>2016</year>). <article-title>Rationally Reduced Libraries for Combinatorial Pathway Optimization Minimizing Experimental Effort</article-title>. <source>Nat. Commun.</source>
<volume>7</volume>, <fpage>11163</fpage>. <pub-id pub-id-type="doi">10.1038/ncomms11163</pub-id>
<pub-id pub-id-type="pmid">27029461</pub-id></mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Justo</surname><given-names>G. Z.</given-names></name><name><surname>Durán</surname><given-names>N.</given-names></name><name><surname>Ferreira</surname><given-names>C. V.</given-names></name><name><surname>Melo</surname><given-names>P. S.</given-names></name><name><surname>Cordi</surname><given-names>L.</given-names></name><name><surname>Martins</surname><given-names>D.</given-names></name></person-group> (<year>2007</year>). <article-title>Violacein: Properties and Biological Activities</article-title>. <source>Biotechnol. Appl. Biochem.</source>
<volume>48</volume>, <fpage>127</fpage>–<lpage>133</lpage>. <pub-id pub-id-type="doi">10.1042/BA20070115</pub-id>
<pub-id pub-id-type="pmid">17927569</pub-id></mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kamens</surname><given-names>J.</given-names></name></person-group> (<year>2015</year>). <article-title>The Addgene Repository: an International Nonprofit Plasmid and Data Resource</article-title>. <source>Nucleic Acids Res.</source>
<volume>43</volume>, <fpage>D1152</fpage>–<lpage>D1157</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gku893</pub-id>
<pub-id pub-id-type="pmid">25392412</pub-id></mixed-citation>
    </ref>
    <ref id="B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kitney</surname><given-names>R.</given-names></name><name><surname>Adeogun</surname><given-names>M.</given-names></name><name><surname>Fujishima</surname><given-names>Y.</given-names></name><name><surname>Goñi-Moreno</surname><given-names>Á.</given-names></name><name><surname>Johnson</surname><given-names>R.</given-names></name><name><surname>Maxon</surname><given-names>M.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Enabling the Advanced Bioeconomy through Public Policy Supporting Biofoundries and Engineering Biology</article-title>. <source>Trends Biotechnol.</source>
<volume>37</volume>, <fpage>917</fpage>–<lpage>920</lpage>. <pub-id pub-id-type="doi">10.1016/j.tibtech.2019.03.017</pub-id>
<pub-id pub-id-type="pmid">31036350</pub-id></mixed-citation>
    </ref>
    <ref id="B38">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Kitney</surname><given-names>R.</given-names></name></person-group> (<year>2009</year>). <source>Synthetic Biology: Scope, Applications and Implications</source>. <publisher-loc>London</publisher-loc>: <publisher-name>Carlton House</publisher-name>. </mixed-citation>
    </ref>
    <ref id="B39">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Lakshmi</surname><given-names>P.</given-names></name><name><surname>Ramyachitra</surname><given-names>D.</given-names></name></person-group> (<year>2020</year>). “<article-title>Review about Bioinformatics, Databases, Sequence Alignment, Docking, and Drug Discovery</article-title>,” in <source>” in Statistical Modelling and Machine Learning Principles for Bioinformatics Techniques, Tools, and Applications Algorithms for Intelligent Systems</source>. Editors <person-group person-group-type="editor"><name><surname>Srinivasa</surname><given-names>K. G.</given-names></name><name><surname>Siddesh</surname><given-names>G. M.</given-names></name><name><surname>Manisekhar</surname><given-names>S. R.</given-names></name></person-group> (<publisher-loc>Singapore</publisher-loc>: <publisher-name>Springer</publisher-name>), <fpage>11</fpage>–<lpage>23</lpage>. <pub-id pub-id-type="doi">10.1007/978-981-15-2445-5_2</pub-id>
</mixed-citation>
    </ref>
    <ref id="B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ledergerber</surname><given-names>C.</given-names></name><name><surname>Dessimoz</surname><given-names>C.</given-names></name></person-group> (<year>2011</year>). <article-title>Base-calling for Next-Generation Sequencing Platforms</article-title>. <source>Brief. Bioinform.</source>
<volume>12</volume>, <fpage>489</fpage>–<lpage>497</lpage>. <pub-id pub-id-type="doi">10.1093/bib/bbq077</pub-id>
<pub-id pub-id-type="pmid">21245079</pub-id></mixed-citation>
    </ref>
    <ref id="B41">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lee</surname><given-names>M. E.</given-names></name><name><surname>Aswani</surname><given-names>A.</given-names></name><name><surname>Han</surname><given-names>A. S.</given-names></name><name><surname>Tomlin</surname><given-names>C. J.</given-names></name><name><surname>Dueber</surname><given-names>J. E.</given-names></name></person-group> (<year>2013</year>). <article-title>Expression-level Optimization of a Multi-Enzyme Pathway in the Absence of a High-Throughput Assay</article-title>. <source>Nucleic Acids Res.</source>
<volume>41</volume>, <fpage>10668</fpage>–<lpage>10678</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkt809</pub-id>
<pub-id pub-id-type="pmid">24038353</pub-id></mixed-citation>
    </ref>
    <ref id="B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McGuffie</surname><given-names>M. J.</given-names></name><name><surname>Barrick</surname><given-names>J. E.</given-names></name></person-group> (<year>2021</year>). <article-title>pLannotate: Engineered Plasmid Annotation</article-title>. <source>Nucleic Acids Res.</source>
<volume>49</volume>, <fpage>W516</fpage>–<lpage>W522</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkab374</pub-id>
<pub-id pub-id-type="pmid">34019636</pub-id></mixed-citation>
    </ref>
    <ref id="B43">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McLaughlin</surname><given-names>J. A.</given-names></name><name><surname>Myers</surname><given-names>C. J.</given-names></name><name><surname>Zundel</surname><given-names>Z.</given-names></name><name><surname>Mısırlı</surname><given-names>G.</given-names></name><name><surname>Zhang</surname><given-names>M.</given-names></name><name><surname>Ofiteru</surname><given-names>I. D.</given-names></name><etal/></person-group> (<year>2018</year>). <article-title>SynBioHub: A Standards-Enabled Design Repository for Synthetic Biology</article-title>. <source>ACS Synth. Biol.</source>
<volume>7</volume>, <fpage>682</fpage>–<lpage>688</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.7b00403</pub-id>
<pub-id pub-id-type="pmid">29316788</pub-id></mixed-citation>
    </ref>
    <ref id="B44">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Misawa</surname><given-names>N.</given-names></name><name><surname>Nakagawa</surname><given-names>M.</given-names></name><name><surname>Kobayashi</surname><given-names>K.</given-names></name><name><surname>Yamano</surname><given-names>S.</given-names></name><name><surname>Izawa</surname><given-names>Y.</given-names></name><name><surname>Nakamura</surname><given-names>K.</given-names></name><etal/></person-group> (<year>1990</year>). <article-title>Elucidation of the Erwinia Uredovora Carotenoid Biosynthetic Pathway by Functional Analysis of Gene Products Expressed in <italic>Escherichia coli</italic>
</article-title>. <source>J. Bacteriol.</source>
<volume>172</volume>, <fpage>6704</fpage>–<lpage>6712</lpage>. <pub-id pub-id-type="doi">10.1128/JB.172.12.6704-6712.1990</pub-id>
<pub-id pub-id-type="pmid">2254247</pub-id></mixed-citation>
    </ref>
    <ref id="B45">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Myeong</surname><given-names>N. R.</given-names></name><name><surname>Seong</surname><given-names>H. J.</given-names></name><name><surname>Kim</surname><given-names>H.-J.</given-names></name><name><surname>Sul</surname><given-names>W. J.</given-names></name></person-group> (<year>2016</year>). <article-title>Complete Genome Sequence of Antibiotic and Anticancer Agent Violacein Producing Massilia Sp. Strain NR 4-1</article-title>. <source>J. Biotechnol.</source>
<volume>223</volume>, <fpage>36</fpage>–<lpage>37</lpage>. <pub-id pub-id-type="doi">10.1016/j.jbiotec.2016.02.027</pub-id>
<pub-id pub-id-type="pmid">26916415</pub-id></mixed-citation>
    </ref>
    <ref id="B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Naseri</surname><given-names>G.</given-names></name><name><surname>Koffas</surname><given-names>M. A. G.</given-names></name></person-group> (<year>2020</year>). <article-title>Application of Combinatorial Optimization Strategies in Synthetic Biology</article-title>. <source>Nat. Commun.</source>
<volume>11</volume>, <fpage>2446</fpage>. <pub-id pub-id-type="doi">10.1038/s41467-020-16175-y</pub-id>
<pub-id pub-id-type="pmid">32415065</pub-id></mixed-citation>
    </ref>
    <ref id="B47">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Needleman</surname><given-names>S. B.</given-names></name><name><surname>Wunsch</surname><given-names>C. D.</given-names></name></person-group> (<year>1970</year>). <article-title>A General Method Applicable to the Search for Similarities in the Amino Acid Sequence of Two Proteins</article-title>. <source>J. Mol. Biol.</source>
<volume>48</volume>, <fpage>443</fpage>–<lpage>453</lpage>. <pub-id pub-id-type="doi">10.1016/0022-2836(70)90057-4</pub-id>
<pub-id pub-id-type="pmid">5420325</pub-id></mixed-citation>
    </ref>
    <ref id="B48">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nielsen</surname><given-names>A. A. K.</given-names></name><name><surname>Der</surname><given-names>B. S.</given-names></name><name><surname>Shin</surname><given-names>J.</given-names></name><name><surname>Vaidyanathan</surname><given-names>P.</given-names></name><name><surname>Paralanov</surname><given-names>V.</given-names></name><name><surname>Strychalski</surname><given-names>E. A.</given-names></name><etal/></person-group> (<year>2016</year>). <article-title>Genetic Circuit Design Automation</article-title>. <source>Science</source>
<volume>352</volume>, <fpage>aac7341</fpage>. <pub-id pub-id-type="doi">10.1126/science.aac7341</pub-id>
<pub-id pub-id-type="pmid">27034378</pub-id></mixed-citation>
    </ref>
    <ref id="B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nishii</surname><given-names>R.</given-names></name></person-group> (<year>1993</year>). <article-title>Optimality of Experimental Designs</article-title>. <source>Discrete Maths.</source>
<volume>116</volume>, <fpage>209</fpage>–<lpage>225</lpage>. <pub-id pub-id-type="doi">10.1016/0012-365X(93)90402-F</pub-id>
</mixed-citation>
    </ref>
    <ref id="B50">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nishizaki</surname><given-names>T.</given-names></name><name><surname>Tsuge</surname><given-names>K.</given-names></name><name><surname>Itaya</surname><given-names>M.</given-names></name><name><surname>Doi</surname><given-names>N.</given-names></name><name><surname>Yanagawa</surname><given-names>H.</given-names></name></person-group> (<year>2007</year>). <article-title>Metabolic Engineering of Carotenoid Biosynthesis in <italic>Escherichia coli</italic> by Ordered Gene Assembly in Bacillus Subtilis</article-title>. <source>Appl. Environ. Microbiol.</source>
<volume>73</volume>, <fpage>1355</fpage>–<lpage>1361</lpage>. <pub-id pub-id-type="doi">10.1128/AEM.02268-06</pub-id>
<pub-id pub-id-type="pmid">17194842</pub-id></mixed-citation>
    </ref>
    <ref id="B51">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Opgenorth</surname><given-names>P.</given-names></name><name><surname>Costello</surname><given-names>Z.</given-names></name><name><surname>Okada</surname><given-names>T.</given-names></name><name><surname>Goyal</surname><given-names>G.</given-names></name><name><surname>Chen</surname><given-names>Y.</given-names></name><name><surname>Gin</surname><given-names>J.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Lessons from Two Design-Build-Test-Learn Cycles of Dodecanol Production in <italic>Escherichia coli</italic> Aided by Machine Learning</article-title>. <source>ACS Synth. Biol.</source>
<volume>8</volume>, <fpage>1337</fpage>–<lpage>1351</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.9b00020</pub-id>
<pub-id pub-id-type="pmid">31072100</pub-id></mixed-citation>
    </ref>
    <ref id="B52">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rajakumar</surname><given-names>P. D.</given-names></name><name><surname>Gowers</surname><given-names>G.-O. F.</given-names></name><name><surname>Suckling</surname><given-names>L.</given-names></name><name><surname>Foster</surname><given-names>A.</given-names></name><name><surname>Ellis</surname><given-names>T.</given-names></name><name><surname>Kitney</surname><given-names>R. I.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Rapid Prototyping Platform for <italic>Saccharomyces cerevisiae</italic> Using Computer-Aided Genetic Design Enabled by Parallel Software and Workcell Platform Development</article-title>. <source>SLAS TECHNOLOGY: Translating Life Sci. Innovation</source>
<volume>24</volume>, <fpage>291</fpage>–<lpage>297</lpage>. <pub-id pub-id-type="doi">10.1177/2472630318798304</pub-id>
</mixed-citation>
    </ref>
    <ref id="B53">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rao</surname><given-names>Y.</given-names></name><name><surname>Li</surname><given-names>P.</given-names></name><name><surname>Xie</surname><given-names>X.</given-names></name><name><surname>Li</surname><given-names>J.</given-names></name><name><surname>Liao</surname><given-names>Y.</given-names></name><name><surname>Ma</surname><given-names>X.</given-names></name><etal/></person-group> (<year>2021</year>). <article-title>Construction and Characterization of a Gradient Strength Promoter Library for Fine-Tuned Gene Expression in Bacillus Licheniformis</article-title>. <source>ACS Synth. Biol.</source>
<volume>10</volume>, <fpage>2331</fpage>–<lpage>2339</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.1c00242</pub-id>
<pub-id pub-id-type="pmid">34449215</pub-id></mixed-citation>
    </ref>
    <ref id="B54">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Redden</surname><given-names>H.</given-names></name><name><surname>Alper</surname><given-names>H. S.</given-names></name></person-group> (<year>2015</year>). <article-title>The Development and Characterization of Synthetic Minimal Yeast Promoters</article-title>. <source>Nat. Commun.</source>
<volume>6</volume>, <fpage>7810</fpage>. <pub-id pub-id-type="doi">10.1038/ncomms8810</pub-id>
<pub-id pub-id-type="pmid">26183606</pub-id></mixed-citation>
    </ref>
    <ref id="B55">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Reynolds</surname><given-names>C. R.</given-names></name><name><surname>Exley</surname><given-names>K.</given-names></name><name><surname>Bultelle</surname><given-names>M. A.</given-names></name><name><surname>Sainz de Murieta</surname><given-names>I.</given-names></name><name><surname>Kitney</surname><given-names>R. I.</given-names></name></person-group> (<year>2017</year>). <article-title>Debugging experiment Machinery through Time‐course Event Sequence Analysis</article-title>. <source>Eng. Biol.</source>
<volume>1</volume>, <fpage>51</fpage>–<lpage>54</lpage>. <pub-id pub-id-type="doi">10.1049/enb.2017.0008</pub-id>
</mixed-citation>
    </ref>
    <ref id="B56">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Salis</surname><given-names>H. M.</given-names></name><name><surname>Mirsky</surname><given-names>E. A.</given-names></name><name><surname>Voigt</surname><given-names>C. A.</given-names></name></person-group> (<year>2009</year>). <article-title>Automated Design of Synthetic Ribosome Binding Sites to Control Protein Expression</article-title>. <source>Nat. Biotechnol.</source>
<volume>27</volume>, <fpage>946</fpage>–<lpage>950</lpage>. <pub-id pub-id-type="doi">10.1038/nbt.1568</pub-id>
<pub-id pub-id-type="pmid">19801975</pub-id></mixed-citation>
    </ref>
    <ref id="B57">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sanger</surname><given-names>F.</given-names></name><name><surname>Coulson</surname><given-names>A. R.</given-names></name></person-group> (<year>1975</year>). <article-title>A Rapid Method for Determining Sequences in DNA by Primed Synthesis with DNA Polymerase</article-title>. <source>J. Mol. Biol.</source>
<volume>94</volume>, <fpage>441</fpage>–<lpage>448</lpage>. <pub-id pub-id-type="doi">10.1016/0022-2836(75)90213-2</pub-id>
<pub-id pub-id-type="pmid">1100841</pub-id></mixed-citation>
    </ref>
    <ref id="B58">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sanger</surname><given-names>F.</given-names></name><name><surname>Nicklen</surname><given-names>S.</given-names></name><name><surname>Coulson</surname><given-names>A. R.</given-names></name></person-group> (<year>1977</year>). <article-title>DNA Sequencing with Chain-Terminating Inhibitors</article-title>. <source>Proc. Natl. Acad. Sci.</source>
<volume>74</volume>, <fpage>5463</fpage>–<lpage>5467</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.74.12.5463</pub-id>
<pub-id pub-id-type="pmid">271968</pub-id></mixed-citation>
    </ref>
    <ref id="B59">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sevgili</surname><given-names>A.</given-names></name><name><surname>Erkmen</surname><given-names>O.</given-names></name></person-group> (<year>2019</year>). <article-title>Improved Lycopene Production from Different Substrates by Mated Fermentation of Blakeslea Trispora</article-title>. <source>Foods</source>
<volume>8</volume>, <fpage>120</fpage>. <pub-id pub-id-type="doi">10.3390/foods8040120</pub-id>
</mixed-citation>
    </ref>
    <ref id="B60">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shendure</surname><given-names>J.</given-names></name><name><surname>Balasubramanian</surname><given-names>S.</given-names></name><name><surname>Church</surname><given-names>G. M.</given-names></name><name><surname>Gilbert</surname><given-names>W.</given-names></name><name><surname>Rogers</surname><given-names>J.</given-names></name><name><surname>Schloss</surname><given-names>J. A.</given-names></name><etal/></person-group> (<year>2017</year>). <article-title>DNA Sequencing at 40: Past, Present and Future</article-title>. <source>Nature</source>
<volume>550</volume>, <fpage>345</fpage>–<lpage>353</lpage>. <pub-id pub-id-type="doi">10.1038/nature24286</pub-id>
<pub-id pub-id-type="pmid">29019985</pub-id></mixed-citation>
    </ref>
    <ref id="B61">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Singleton</surname><given-names>C.</given-names></name><name><surname>Gilman</surname><given-names>J.</given-names></name><name><surname>Rollit</surname><given-names>J.</given-names></name><name><surname>Zhang</surname><given-names>K.</given-names></name><name><surname>Parker</surname><given-names>D. A.</given-names></name><name><surname>Love</surname><given-names>J.</given-names></name></person-group> (<year>2019</year>). <article-title>A Design of Experiments Approach for the Rapid Formulation of a Chemically Defined Medium for Metabolic Profiling of Industrially Important Microbes</article-title>. <source>PLOS ONE</source>
<volume>14</volume>, <fpage>e0218208</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pone.0218208</pub-id>
<pub-id pub-id-type="pmid">31188885</pub-id></mixed-citation>
    </ref>
    <ref id="B62">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Slatko</surname><given-names>B. E.</given-names></name><name><surname>Gardner</surname><given-names>A. F.</given-names></name><name><surname>Ausubel</surname><given-names>F. M.</given-names></name></person-group> (<year>2018</year>). <article-title>Overview of Next‐Generation Sequencing Technologies</article-title>. <source>Curr. Protoc. Mol. Biol.</source>
<volume>122</volume>, <fpage>e59</fpage>. <pub-id pub-id-type="doi">10.1002/cpmb.59</pub-id>
<pub-id pub-id-type="pmid">29851291</pub-id></mixed-citation>
    </ref>
    <ref id="B63">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>T. F.</given-names></name><name><surname>Waterman</surname><given-names>M. S.</given-names></name></person-group> (<year>1981</year>). <article-title>Identification of Common Molecular Subsequences</article-title>. <source>J. Mol. Biol.</source>
<volume>147</volume>, <fpage>195</fpage>–<lpage>197</lpage>. <pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id>
<pub-id pub-id-type="pmid">7265238</pub-id></mixed-citation>
    </ref>
    <ref id="B64">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smucker</surname><given-names>B.</given-names></name><name><surname>Krzywinski</surname><given-names>M.</given-names></name><name><surname>Altman</surname><given-names>N.</given-names></name></person-group> (<year>2018</year>). <article-title>Optimal Experimental Design</article-title>. <source>Nat. Methods</source>
<volume>15</volume>, <fpage>559</fpage>–<lpage>560</lpage>. <pub-id pub-id-type="doi">10.1038/s41592-018-0083-2</pub-id>
<pub-id pub-id-type="pmid">30065369</pub-id></mixed-citation>
    </ref>
    <ref id="B65">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Spice</surname><given-names>A. J.</given-names></name><name><surname>Aw</surname><given-names>R.</given-names></name><name><surname>Bracewell</surname><given-names>D. G.</given-names></name><name><surname>Polizzi</surname><given-names>K. M.</given-names></name></person-group> (<year>2020</year>). <article-title>Improving the Reaction Mix of a Pichia pastoris Cell-free System Using a Design of Experiments Approach to Minimise Experimental Effort</article-title>. <source>Synth. Syst. Biotechnol.</source>
<volume>5</volume>, <fpage>137</fpage>–<lpage>144</lpage>. <pub-id pub-id-type="doi">10.1016/j.synbio.2020.06.003</pub-id>
<pub-id pub-id-type="pmid">32637667</pub-id></mixed-citation>
    </ref>
    <ref id="B66">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Storch</surname><given-names>M.</given-names></name><name><surname>Casini</surname><given-names>A.</given-names></name><name><surname>Mackrow</surname><given-names>B.</given-names></name><name><surname>Fleming</surname><given-names>T.</given-names></name><name><surname>Trewhitt</surname><given-names>H.</given-names></name><name><surname>Ellis</surname><given-names>T.</given-names></name><etal/></person-group> (<year>2015</year>). <article-title>BASIC: A New Biopart Assembly Standard for Idempotent Cloning Provides Accurate, Single-Tier DNA Assembly for Synthetic Biology</article-title>. <source>ACS Synth. Biol.</source>
<volume>4</volume>, <fpage>781</fpage>–<lpage>787</lpage>. <pub-id pub-id-type="doi">10.1021/sb500356d</pub-id>
<pub-id pub-id-type="pmid">25746445</pub-id></mixed-citation>
    </ref>
    <ref id="B67">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Suckling</surname><given-names>L.</given-names></name><name><surname>McFarlane</surname><given-names>C.</given-names></name><name><surname>Sawyer</surname><given-names>C.</given-names></name><name><surname>Chambers</surname><given-names>S. P.</given-names></name><name><surname>Kitney</surname><given-names>R. I.</given-names></name><name><surname>McClymont</surname><given-names>D. W.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>Miniaturisation of High-Throughput Plasmid DNA Library Preparation for Next-Generation Sequencing Using Multifactorial Optimisation</article-title>. <source>Synth. Syst. Biotechnol.</source>
<volume>4</volume>, <fpage>57</fpage>–<lpage>66</lpage>. <pub-id pub-id-type="doi">10.1016/j.synbio.2019.01.002</pub-id>
<pub-id pub-id-type="pmid">30723818</pub-id></mixed-citation>
    </ref>
    <ref id="B68">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Taylor</surname><given-names>G. M.</given-names></name><name><surname>Heap</surname><given-names>J. T.</given-names></name></person-group> (<year>2020</year>). <article-title>Combinatorial Metabolic Engineering Platform Enabling Stable Overproduction of Lycopene from Carbon Dioxide by Cyanobacteria</article-title>. <source>Synth. Biol.</source>
<pub-id pub-id-type="doi">10.1101/2020.03.11.983833</pub-id>
</mixed-citation>
    </ref>
    <ref id="B69">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Taylor</surname><given-names>G. M.</given-names></name><name><surname>Mordaka</surname><given-names>P. M.</given-names></name><name><surname>Heap</surname><given-names>J. T.</given-names></name></person-group> (<year>2019</year>). <article-title>Start-Stop Assembly: a Functionally Scarless DNA Assembly System Optimized for Metabolic Engineering</article-title>. <source>Nucleic Acids Res.</source>
<volume>47</volume>, <fpage>e17</fpage>. <pub-id pub-id-type="doi">10.1093/nar/gky1182</pub-id>
<pub-id pub-id-type="pmid">30462270</pub-id></mixed-citation>
    </ref>
    <ref id="B70">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tietze</surname><given-names>L.</given-names></name><name><surname>Lale</surname><given-names>R.</given-names></name></person-group> (<year>2021</year>). <article-title>Importance of the 5′ Regulatory Region to Bacterial Synthetic Biology Applications</article-title>. <source>Microb. Biotechnol.</source>
<volume>14</volume>, <fpage>2291</fpage>–<lpage>2315</lpage>. <pub-id pub-id-type="doi">10.1111/1751-7915.13868</pub-id>
<pub-id pub-id-type="pmid">34171170</pub-id></mixed-citation>
    </ref>
    <ref id="B71">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Timmons</surname><given-names>J. J.</given-names></name><name><surname>Densmore</surname><given-names>D.</given-names></name></person-group> (<year>2020</year>). <article-title>Repository-based Plasmid Design</article-title>. <source>PLOS ONE</source>
<volume>15</volume>, <fpage>e0223935</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pone.0223935</pub-id>
<pub-id pub-id-type="pmid">31917791</pub-id></mixed-citation>
    </ref>
    <ref id="B72">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wickham</surname><given-names>H.</given-names></name></person-group> (<year>2011</year>). <article-title>The Split-Apply-Combine Strategy for Data Analysis</article-title>. <source>J. Stat. Soft.</source>
<volume>40</volume>. <pub-id pub-id-type="doi">10.18637/jss.v040.i01</pub-id>
</mixed-citation>
    </ref>
    <ref id="B73">
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Wieds</surname><given-names>G.</given-names></name></person-group> (<year>2007</year>). <article-title>Bioinformatics Explained: BLAST versus Smith-Waterman</article-title>. <comment>Available at: <ext-link xlink:href="http://www.clcbio.com" ext-link-type="uri">www.clcbio.com</ext-link>
</comment>. </mixed-citation>
    </ref>
    <ref id="B74">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Woodruff</surname><given-names>L. B. A.</given-names></name><name><surname>Gorochowski</surname><given-names>T. E.</given-names></name><name><surname>Roehner</surname><given-names>N.</given-names></name><name><surname>Mikkelsen</surname><given-names>T. S.</given-names></name><name><surname>Densmore</surname><given-names>D.</given-names></name><name><surname>Gordon</surname><given-names>D. B.</given-names></name><etal/></person-group> (<year>2017</year>). <article-title>Registry in a Tube: Multiplexed Pools of Retrievable Parts for Genetic Design Space Exploration</article-title>. <source>Nucleic Acids Res.</source>
<volume>45</volume>, <fpage>gkw1226</fpage>–<lpage>1565</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkw1226</pub-id>
</mixed-citation>
    </ref>
    <ref id="B75">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wu</surname><given-names>M. J.</given-names></name><name><surname>Andreasson</surname><given-names>J. O. L.</given-names></name><name><surname>Kladwang</surname><given-names>W.</given-names></name><name><surname>Greenleaf</surname><given-names>W.</given-names></name><name><surname>Das</surname><given-names>R.</given-names></name></person-group> (<year>2019</year>). <article-title>Automated Design of Diverse Stand-Alone Riboswitches</article-title>. <source>ACS Synth. Biol.</source>
<volume>8</volume>, <fpage>1846</fpage>–<lpage>1838</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.9b00142</pub-id>
</mixed-citation>
    </ref>
    <ref id="B76">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Xu</surname><given-names>P.</given-names></name><name><surname>Rizzoni</surname><given-names>E. A.</given-names></name><name><surname>Sul</surname><given-names>S.-Y.</given-names></name><name><surname>Stephanopoulos</surname><given-names>G.</given-names></name></person-group> (<year>2017</year>). <article-title>Improving Metabolic Pathway Efficiency by Statistical Model-Based Multivariate Regulatory Metabolic Engineering</article-title>. <source>ACS Synth. Biol.</source>
<volume>6</volume>, <fpage>148</fpage>–<lpage>158</lpage>. <pub-id pub-id-type="doi">10.1021/acssynbio.6b00187</pub-id>
<pub-id pub-id-type="pmid">27490704</pub-id></mixed-citation>
    </ref>
    <ref id="B77">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yadav</surname><given-names>V. G.</given-names></name><name><surname>De Mey</surname><given-names>M.</given-names></name><name><surname>Giaw Lim</surname><given-names>C.</given-names></name><name><surname>Kumaran Ajikumar</surname><given-names>P.</given-names></name><name><surname>Stephanopoulos</surname><given-names>G.</given-names></name></person-group> (<year>2012</year>). <article-title>The Future of Metabolic Engineering and Synthetic Biology: Towards a Systematic Practice</article-title>. <source>Metab. Eng.</source>
<volume>14</volume>, <fpage>233</fpage>–<lpage>241</lpage>. <pub-id pub-id-type="doi">10.1016/j.ymben.2012.02.001</pub-id>
<pub-id pub-id-type="pmid">22629571</pub-id></mixed-citation>
    </ref>
    <ref id="B78">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yamano</surname><given-names>S.</given-names></name><name><surname>Ishii</surname><given-names>T.</given-names></name><name><surname>Nakagawa</surname><given-names>M.</given-names></name><name><surname>Ikenaga</surname><given-names>H.</given-names></name><name><surname>Misawa</surname><given-names>N.</given-names></name></person-group> (<year>1994</year>). <article-title>Metabolic Engineering for Production Ofβ-Carotene and Lycopene inSaccharomyces Cerevisiae</article-title>. <source>Biosci. Biotechnol. Biochem.</source>
<volume>58</volume>, <fpage>1112</fpage>–<lpage>1114</lpage>. <pub-id pub-id-type="doi">10.1271/bbb.58.1112</pub-id>
<pub-id pub-id-type="pmid">7765036</pub-id></mixed-citation>
    </ref>
    <ref id="B79">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yoon</surname><given-names>S.-H.</given-names></name><name><surname>Lee</surname><given-names>Y.-M.</given-names></name><name><surname>Kim</surname><given-names>J.-E.</given-names></name><name><surname>Lee</surname><given-names>S.-H.</given-names></name><name><surname>Lee</surname><given-names>J.-H.</given-names></name><name><surname>Kim</surname><given-names>J.-Y.</given-names></name><etal/></person-group> (<year>2006</year>). <article-title>Enhanced Lycopene Production inEscherichia Coli Engineered to Synthesize Isopentenyl Diphosphate and Dimethylallyl Diphosphate from Mevalonate</article-title>. <source>Biotechnol. Bioeng.</source>
<volume>94</volume>, <fpage>1025</fpage>–<lpage>1032</lpage>. <pub-id pub-id-type="doi">10.1002/bit.20912</pub-id>
<pub-id pub-id-type="pmid">16547999</pub-id></mixed-citation>
    </ref>
    <ref id="B80">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zucca</surname><given-names>S.</given-names></name><name><surname>Pasotti</surname><given-names>L.</given-names></name><name><surname>Politi</surname><given-names>N.</given-names></name><name><surname>Casanova</surname><given-names>M.</given-names></name><name><surname>Mazzini</surname><given-names>G.</given-names></name><name><surname>Cusella De Angelis</surname><given-names>M. G.</given-names></name><etal/></person-group> (<year>2015</year>). <article-title>Multi-Faceted Characterization of a Novel LuxR-Repressible Promoter Library for <italic>Escherichia coli</italic>
</article-title>. <source>PLOS ONE</source>
<volume>10</volume>, <fpage>e0126264</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pone.0126264</pub-id>
<pub-id pub-id-type="pmid">26010244</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
