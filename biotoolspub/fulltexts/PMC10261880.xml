<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10261880</article-id>
    <article-id pub-id-type="pmid">37252813</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad352</article-id>
    <article-id pub-id-type="publisher-id">btad352</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Accelerated nanopore basecalling with SLOW5 data format</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5812-1046</contrib-id>
        <name>
          <surname>Samarakoon</surname>
          <given-names>Hiruna</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>School of Computer Science and Engineering, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-FM2" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-6192-6937</contrib-id>
        <name>
          <surname>Ferguson</surname>
          <given-names>James M</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <xref rid="btad352-FM2" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-9034-9905</contrib-id>
        <name>
          <surname>Gamaarachchi</surname>
          <given-names>Hasindu</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>School of Computer Science and Engineering, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-cor1" ref-type="corresp"/>
        <!--hasindu@garvan.org.au-->
        <xref rid="btad352-FM1" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-3861-0472</contrib-id>
        <name>
          <surname>Deveson</surname>
          <given-names>Ira W</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>Faculty of Medicine, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-cor1" ref-type="corresp"/>
        <!--i.deveson@garvan.org.au-->
        <xref rid="btad352-FM1" ref-type="author-notes"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Alkan</surname>
          <given-names>Can</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad352-cor1">Corresponding authors. Genomics Pillar, Garvan Institute of Medical Research, Sydney, NSW, Australia. E-mails: <email>i.deveson@garvan.org.au</email> (I.W.D.) and <email>hasindu@garvan.org.au</email> (H.G.)</corresp>
      <fn id="btad352-FM1">
        <p>Hasindu Gamaarachchi and Ira W Deveson Joint senior authors</p>
      </fn>
      <fn id="btad352-FM2">
        <p>Hiruna Samarakoon and James M Ferguson contributed equally to this work</p>
      </fn>
    </author-notes>
    <pub-date pub-type="collection">
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-05-30">
      <day>30</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>6</issue>
    <elocation-id>btad352</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>2</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>12</day>
        <month>4</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>06</day>
        <month>5</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>29</day>
        <month>5</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>6</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad352.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Nanopore sequencing is emerging as a key pillar in the genomic technology landscape but computational constraints limiting its scalability remain to be overcome. The translation of raw current signal data into DNA or RNA sequence reads, known as ‘basecalling’, is a major friction in any nanopore sequencing workflow. Here, we exploit the advantages of the recently developed signal data format ‘SLOW5’ to streamline and accelerate nanopore basecalling on high-performance computing (HPC) and cloud environments.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>SLOW5 permits highly efficient sequential data access, eliminating a potential analysis bottleneck. To take advantage of this, we introduce <italic toggle="yes">Buttery-eel</italic>, an open-source wrapper for Oxford Nanopore’s <italic toggle="yes">Guppy</italic> basecaller that enables SLOW5 data access, resulting in performance improvements that are essential for scalable, affordable basecalling.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Buttery-eel is available at <ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Australian Medical Research Futures Fund</institution>
          </institution-wrap>
        </funding-source>
        <award-id>MRF1173594</award-id>
        <award-id>MRF2016008</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Australian Research Council DECRA Fellowship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>DE230100178</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Sequencing devices from Oxford Nanopore Technologies (ONT) afford countless opportunities in research and clinical genomics. With the unique ability to sequence both short and long native DNA and RNA molecules on an inexpensive device, ONT presents a significant value proposition, and is already disrupting the genomic technology landscape. To realize large-scale adoption and replacement of dominant short-read sequencing platforms (i.e. Illumina, BGI, and IonTorrent), however, bottlenecks in nanopore data analysis must be addressed.</p>
    <p>ONT devices measure the displacement of ionic current as a DNA/RNA molecule passes through a nanoscale protein pore, recording time-series signal data that can be translated—or ‘basecalled’—to determine the molecule’s sequence (<xref rid="btad352-B16" ref-type="bibr">Wang <italic toggle="yes">et al.</italic> 2021</xref>). Basecalling is the first step in virtually any nanopore analysis workflow. Real-time data acquisition occurs in parallel across thousands of pores on a single ‘flow-cell’ during a sequencing run. This raw data can be basecalled in real-time using the on-board computer on an ONT device, or subsequent to completion of the experiment, using an external computer (<xref rid="btad352-B16" ref-type="bibr">Wang <italic toggle="yes">et al.</italic> 2021</xref>).</p>
    <p>ONT’s high-output PromethION device has enabled increasingly cost-effective nanopore sequencing of human and other large eukaryotic genomes (<xref rid="btad352-B1" ref-type="bibr">Alonge <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B13" ref-type="bibr">Shafin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B10" ref-type="bibr">Otsuki <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>), with scalability that theoretically rivals dominant short-read sequencing platforms. The PromethION (P48 version) is equipped to run 48 flow-cells in parallel and has capacity to sequence ∼96 human genomes at &gt;30-fold coverage per week (assuming one flow-cell per sample). However, in our experience, the PromethION’s attached compute tower (PRO-PRCV100) is unable to execute live high-accuracy (HAC) basecalling on more than ∼8–10 flow-cells in parallel. Therefore, to realize even a fraction of the machine’s theoretical sequencing throughput, the user must export the raw data and perform basecalling externally on their own high-performance computing (HPC) or cloud environments (<xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B5" ref-type="bibr">Galey <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B8" ref-type="bibr">Goenka <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>As we have shown previously (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>), ONT’s native data format ‘FAST5’ is large and poorly engineered for efficient analysis on parallel computer systems. These limitations are perhaps most salient during basecalling, where existing inefficiencies result in major costs and impediments for large-scale nanopore projects. For example, as we show below, processing a single human genome dataset with ONT’s production basecalling software <italic toggle="yes">Guppy</italic> on a typical Amazon Web Services (AWS) cloud instance takes at least ∼13 h and costs ∼$165 USD, or up to ∼25% of the cost of the flow-cell used to generate the data.</p>
    <p>We recently developed a new file format, SLOW5, which is designed to resolve the inherent limitations in FAST5 (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>). In its compressed binary form [Binary SLOW5 (BLOW5)], the new format is ∼20–80% smaller than FAST5 and permits efficient parallel access by multiple CPU threads. We showed previously that SLOW5 enables order-of-magnitude improvements in the speed of common nanopore data analysis processes, such as DNA methylation calling. However, the potential benefits of SLOW5 on basecalling have not been investigated, largely because ONT’s production basecalling software, <italic toggle="yes">Guppy</italic>, does not currently support SLOW5 data access.</p>
    <p>Here, we explore the benefits of the SLOW5 format for scalable basecalling of nanopore data. We articulate a new advantage of SLOW5, namely its capacity for rapid sequential data access [as opposed to random access, explored previously (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>)], which can be exploited to accelerate basecalling. We also unveil <italic toggle="yes">Buttery-eel</italic>, an open-source wrapper that enables SLOW5 data access by <italic toggle="yes">Guppy</italic>, and demonstrate the resulting performance benefits during nanopore basecalling.</p>
  </sec>
  <sec>
    <title>2 Methods</title>
    <sec>
      <title>2.1 Reading SLOW5/BLOW5 files with <italic toggle="yes">pyslow5</italic></title>
      <p>The python library <italic toggle="yes">pyslow5</italic> is built on the <italic toggle="yes">slow5lib</italic> API using Cython which compiles the python code to C. It is designed to be easy to install, use, and to be fast. Though <italic toggle="yes">pyslow5</italic> is slower at reading and writing SLOW5/BLOW5 files than using C directly, it is still much faster than reading FAST5 files with the HDF5 python library, <italic toggle="yes">h5py</italic>. <italic toggle="yes">Pyslow5</italic> offers both random and sequential reading, as well as writing and appending of SLOW5/BLOW5 files. Each can be run with single threads, or with multiple threads, where the multithreading is controlled by function call flags and threading implemented on the C library side. Further multiprocessing from python can be applied to the random access methods, allowing for users to fine-tune resource usage.</p>
    </sec>
    <sec>
      <title>2.2 Design and implementation of <italic toggle="yes">Buttery-eel</italic></title>
      <p><italic toggle="yes">Buttery-eel</italic> is open-source software written in python to enable basecalling of BLOW5 files directly with ONT’s production basecaller, <italic toggle="yes">Guppy</italic>. By using the software library <italic toggle="yes">ont-pyguppy-client-lib</italic> (<ext-link xlink:href="https://pypi.org/project/ont-pyguppy-client-lib" ext-link-type="uri">https://pypi.org/project/ont-pyguppy-client-lib</ext-link>), <italic toggle="yes">Buttery-eel</italic> can control a <italic toggle="yes">Guppy</italic> server and <italic toggle="yes">Guppy</italic> client. Reads are read from a BLOW5 file and repackaged into a data structure compatible with the <italic toggle="yes">ont-pyguppy-client-lib</italic>, which can then be submitted to <italic toggle="yes">Guppy</italic> for basecalling. <italic toggle="yes">Buttery-eel</italic> thereby enables users to basecall BLOW5 files with the latest version of <italic toggle="yes">Guppy</italic>. The output sequence reads basecalled with <italic toggle="yes">Buttery-eel</italic> are identical to those basecalled with <italic toggle="yes">Guppy</italic>. <italic toggle="yes">Buttery-eel</italic> includes DNA methylation calling with built-in <italic toggle="yes">Remora</italic>, and writing output files in FASTQ or unaligned-SAM—both features of recent <italic toggle="yes">Guppy</italic> versions. Output files can also be split by mean phred quality score set by users into <italic toggle="yes">pass</italic> and <italic toggle="yes">fail</italic> files. A splitting tool <italic toggle="yes">split_qscore.py</italic> is also provided to allow users to split FASTQ or unaligned-SAM files on any given quality score.</p>
      <p><italic toggle="yes">Buttery-eel</italic> operates via the following internal workflow, which is summarized in <xref rid="btad352-F1" ref-type="fig">Fig. 1a</xref>:</p>
      <fig position="float" id="btad352-F1">
        <label>Figure 1.</label>
        <caption>
          <p>Acceleration of ONT basecalling with Buttery-eel. (a) Schematic diagram describing the architecture of Buttery-eel, which is a client wrapper that enables input of BLOW5 files to ONT’s Guppy basecaller. Buttery-eel uses pyslow5 to access reads from a BLOW5 file. Reads are then submitted to a Guppy server for processing, before writing them to a FASTQ (or SAM) output file. (b) Bar charts show the basecalling rate (in reads/second) achieved by Guppy with FAST5 input and Buttery-eel with BLOW5 input, relative to the number of GPUs utilized on each of four computer systems (dist-sys, para-sys, cloud-sys, and prom-sys; see <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). (c) Bar chart shows the minimum execution time achievable (i.e. with four GPUs) for a typical 30× human genome sequencing dataset processed on each of the systems in b. (d) Line plots show the basecalling rate achieved by Bonito with multi-processing on FAST5 input and with multi-threading on BLOW5 input, relative to the number of identical basecalling jobs running in parallel. (e) Bar chart shows the overall execution time for each individual dataset (500 000 reads), with 1, 2, 4, or 8 basecalling jobs running in parallel.</p>
        </caption>
        <graphic xlink:href="btad352f1" position="float"/>
      </fig>
      <list list-type="order">
        <list-item>
          <p>Set up <italic toggle="yes">Guppy</italic> server;</p>
        </list-item>
        <list-item>
          <p>Set up <italic toggle="yes">Guppy</italic> client to connect to <italic toggle="yes">Guppy</italic> server;</p>
        </list-item>
        <list-item>
          <p>Read BLOW5 file with <italic toggle="yes">pyslow5</italic> library;</p>
        </list-item>
        <list-item>
          <p>Submit reads to <italic toggle="yes">Guppy</italic> to be basecalled;</p>
        </list-item>
        <list-item>
          <p>Get reads from <italic toggle="yes">Guppy</italic> and write to FASTQ/SAM.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>2.3 SLOW5 integration to <italic toggle="yes">Bonito</italic></title>
      <p><italic toggle="yes">Bonito</italic> is an open-source research basecaller from ONT written in Python. It uses multiprocessing pools to extract reads from FAST5 files, assigns attributes from those reads to the Read class attributes, and passes that object to the basecalling module. Integrating SLOW5/BLOW5 access into <italic toggle="yes">Bonito</italic> was relatively straightforward using multithreaded sequential reading from the <italic toggle="yes">pyslow5</italic> library.</p>
      <p>To integrate BLOW5 file usage with <italic toggle="yes">Bonito</italic>, three components were required:</p>
      <list list-type="order">
        <list-item>
          <p>Flags for setting SLOW5/BLOW5 format and controlling threads and batch size.</p>
        </list-item>
        <list-item>
          <p>Assignment from <italic toggle="yes">pyslow5</italic> read object to Read class object.</p>
        </list-item>
        <list-item>
          <p>Batching sequential reads to parse into multiprocessing pools for basecalling.</p>
        </list-item>
      </list>
      <p>This integration effectively has C-level threads in the <italic toggle="yes">pyslow5</italic> library decompressing and reading reads sequentially, while using python multiprocessing to construct read objects and parse for basecalling. The FAST5 method however only has multiprocessing for both decompression, reading via random access, and constructing the read objects for basecall parsing.</p>
    </sec>
    <sec>
      <title>2.4 Basecalling performance benchmarks</title>
      <p>The evaluation was performed on all systems, <italic toggle="yes">dist-sys</italic>, <italic toggle="yes">para-sys</italic>, and <italic toggle="yes">cloud-sys</italic> (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>) for the small ∼500 000 read dataset and the 30× whole genome dataset (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). Basecalling performance evaluations on FAST5 and BLOW5 were performed using ONT <italic toggle="yes">Guppy</italic> and on <italic toggle="yes">Buttery-eel</italic> (that wraps ONT <italic toggle="yes">Guppy</italic> server), respectively (see below). The small ∼500 000 read dataset was basecalled with varying number of GPUs by setting <monospace>–device cuda:&lt;devices&gt;</monospace> option accordingly (<monospace>cuda : 0</monospace> for one GPU, <monospace>cuda : 0,1</monospace> for two GPUs, <monospace>cuda : 0,1,2</monospace> for three GPUs, and <monospace>cuda : 0,1,2,3</monospace> for four GPUs). The whole genome dataset was basecalled using all four available GPUs. ONT <italic toggle="yes">Guppy</italic> for FAST5 input was executed with default options. <italic toggle="yes">Buttery-eel</italic> for BLOW5 was executed with the following additional parameters that are relevant to either BLOW5 or the server-client approach of <italic toggle="yes">Guppy</italic> (<monospace>ont-pyguppy-client-lib).</monospace><boxed-text id="btad352-BOX1" position="float"><p><monospace># ont-guppy (FAST5)</monospace></p><p><monospace># version: 6.3.7</monospace></p><p><monospace># command:</monospace></p><p><monospace>guppy_basecaller -c dna_r9.4.1_450bps_hac_prom.cfg –device cuda:&lt;devices&gt; -i fast5_dir/ -s output_dir/</monospace></p><p><monospace># Buttery-eel (BLOW5)</monospace></p><p><monospace># compatible ont-pyguppy-client-lib 6.3.7</monospace></p><p><monospace># commit:</monospace><monospace><ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel/commit/44d8574c38b7983aa644c3ef7a3bd60bea72fdc6" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel/commit/44d8574c38b7983aa644c3ef7a3bd60bea72fdc6</ext-link></monospace></p><p><monospace># command (BLOW5):</monospace></p><p><monospace>buttery-eel -i slow5_file -o output_fastq –guppy_bin ont-guppy_binaries_dir –port 5889 –config dna_r9.4.1_450bps_hac_prom.cfg –device cuda:&lt;devices&gt; –use_tcp –quiet –guppy_batchsize 20000 –max_queued_reads 20000 –slow5_threads 10 –slow5_batchsize 100 –procs 20</monospace></p></boxed-text></p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>–guppy_batchsize</monospace>: Number of reads to be sent to the <italic toggle="yes">Guppy</italic> server at a time;</p>
        </list-item>
        <list-item>
          <p><monospace>–max_queued_reads</monospace>: Max capacity of <italic toggle="yes">Guppy</italic> server queue;</p>
        </list-item>
        <list-item>
          <p><monospace>–slow5_threads</monospace>: Number of threads for decompressing and parsing BLOW5 file;</p>
        </list-item>
        <list-item>
          <p><monospace>–slow5_batchsize</monospace>: Number of reads fetched from the BLOW5 file at a time;</p>
        </list-item>
        <list-item>
          <p><monospace>–procs</monospace>: Number of worker processes to send/receive data from the <italic toggle="yes">Guppy</italic> server.</p>
        </list-item>
      </list>
      <p>On the <italic toggle="yes">cloud-sys</italic> environment, data access was achieved by creating an AWS S3 storage bucket, copying the dataset (FAST5 or BLOW5) to the bucket as objects under the default S3 standard storage class, mounting the S3 bucket on the aws instance using s3fs (<ext-link xlink:href="https://manpages.ubuntu.com/manpages/bionic/man1/s3fs.1.html" ext-link-type="uri">https://manpages.ubuntu.com/manpages/bionic/man1/s3fs.1.html</ext-link>), and reading the dataset from the mounted directory. Specific commands for S3 bucket mounting are as follows:<boxed-text id="btad352-BOX2" position="float"><p><monospace># S3 mounting commands:</monospace></p><p><monospace>mkdir s3</monospace></p><p><monospace>s3fs &lt;bucketname&gt; s3/-o public_bucket</monospace><monospace>=</monospace><monospace>1 -o url=</monospace><ext-link xlink:href="http://s3.amazonaws.com/" ext-link-type="uri">http://s3.amazonaws.com/</ext-link><monospace>-o dbglevel=info -o curldbg -o umask</monospace> <monospace>=</monospace> <monospace>0005 -o uid=$(id -u)</monospace></p></boxed-text></p>
      <p>All experiments were performed using the high accuracy basecalling model. An additional experiment with the fast basecalling model was executed on <italic toggle="yes">dist-sys</italic> on the whole genome dataset using four GPUs. The execution times were measured using <italic toggle="yes">GNU time</italic> utility with <italic toggle="yes">-v</italic> options. The Linux disk cache (page cache, dentries, and inodes) on the computational node/instance was cleaned prior to each experiment, except on <italic toggle="yes">dist-sys</italic> due to lack of root access.</p>
    </sec>
    <sec>
      <title>2.5 Evaluating Bonito multi-processing</title>
      <p>Bonito multi-processing approach was evaluated in an in-house local HPC system with a Network File System (NFS). The system consisted of a Synology DS3617xs Network Attached Storage (NAS) and two HPC server nodes. The NAS contained 12 × 12 TB hard disk drives (HDDs) configured under RAID 10 to form a EXT4 file system. The server nodes were connected to the NAS through 10 Gbps ethernet. Each server node has 4xTesla V100 GPUs. The NAS volume was mounted on both server nodes using NFS. Eight separate copies of the small ∼500 000 read dataset (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>) were made on the NAS. Then eight Bonito jobs were executed in parallel (four jobs on each node, such that each job got exclusive access to a Tesla V100 GPU set using the environmental variable <italic toggle="yes">CUDA_VISIBLE_DEVICES</italic>), with each job accessing a separate copy of the data (out of the eight copies made). The aforementioned experiment was repeated for both FAST5 and BLOW5 inputs (see the commands below). The Linux disk cache (page cache, dentries, and inodes) were cleaned prior to each experiment on the NAS and servers. The execution time was measured using <italic toggle="yes">GNU time</italic> utility with <italic toggle="yes">-v</italic> option. Bonito by default uses eight multi-processes to fetch data from FAST5 files. For reading from BLOW5, <monospace>–slow5_threads</monospace> was set to 8 and <monospace>–slow5_batchsize</monospace> to 4096 such that eight multi-threads are used for decompressing and parsing a batch of 4096 BLOW5 records in parallel (sequence disk fetching is still done using a single thread).</p>
      <p>
        <boxed-text id="btad352-BOX3" position="float">
          <p>
            <monospace># Bonito version: 0.5.1</monospace>
          </p>
          <p>
            <monospace># commit:</monospace>
            <monospace>
              <ext-link xlink:href="https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d" ext-link-type="uri">https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d</ext-link>
            </monospace>
          </p>
          <p>
            <monospace># command (FAST5):</monospace>
          </p>
          <p>
            <monospace>bonito basecaller –batchsize 2048 -v</monospace>
            <monospace>dna_r9.4.1_e8.1_fast@v3.4</monospace>
            <monospace>fast5_dir –device cuda &gt; a.fastq</monospace>
          </p>
          <p>
            <monospace># command (BLOW5):</monospace>
          </p>
          <p>
            <monospace>bonito basecaller –batchsize 2048 -v</monospace>
            <monospace>dna_r9.4.1_e8.1_fast@v3.4</monospace>
            <monospace>slow5_dir/ –slow5 –slow5_threads 8 –slow5_batchsize 4096 –device cuda &gt; b.fastq</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>Basecalling is a major friction in any nanopore sequencing workflow. During basecalling with ONT’s <italic toggle="yes">Guppy</italic> software, raw-signal reads are retrieved from the FAST5 input file, passed to the central processing unit (CPU) or graphics processing unit (GPU), where a neural network model is applied to translate the signal into a DNA sequence, which is then written to a FASTQ output file (<xref rid="btad352-B2" ref-type="bibr">Amarasinghe <italic toggle="yes">et al.</italic> 2020</xref>). File reading is performed in a random access pattern because the complex structure of a FAST5 file does not allow more efficient sequential access. When sufficient CPU/GPU capacity is available, the rate of data access from the FAST5 file, rather than data processing on the CPU/GPU, has the potential to become a bottleneck for the overall analysis.</p>
    <p>BLOW5 format is designed to enable efficient file reading by either random or sequential access patterns, using the <italic toggle="yes">slow5lib</italic> (C++) or <italic toggle="yes">pyslow5</italic> (python) libraries (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>). Raw reads do not need to be basecalled in any particular order, meaning highly efficient sequential access should be preferred. We therefore reasoned that the use of fast, sequential access with BLOW5, instead of slow random access with FAST5, might improve basecalling performance. <italic toggle="yes">Guppy</italic> does not currently support BLOW5 data access and the <italic toggle="yes">Guppy</italic> code cannot be modified directly to enable this (because it is commercial, closed-source software). Instead, we developed <italic toggle="yes">Buttery-eel</italic>, a client wrapper to enable basecalling of BLOW5 files with the latest version of <italic toggle="yes">Guppy</italic> (see Section 2). <italic toggle="yes">Buttery-eel</italic> uses <italic toggle="yes">pyslow5</italic> to access reads sequentially from a BLOW5 file/s, which are then submitted to a <italic toggle="yes">Guppy</italic> server for processing, before writing them to a FASTQ output file (<xref rid="btad352-F1" ref-type="fig">Fig. 1a</xref>). <italic toggle="yes">Buttery-eel</italic> has equivalent usage to <italic toggle="yes">Guppy</italic>, identical outputs, and it maintains all key functionality of the latest <italic toggle="yes">Guppy</italic> version, including DNA methylation calling with <italic toggle="yes">Remora</italic> built-in.</p>
    <p>To evaluate the impact of improved BLOW5 data access on basecalling performance, we processed a small dataset of ∼500 000 reads in either FAST5 (with <italic toggle="yes">Guppy</italic>) or BLOW5 (with <italic toggle="yes">Buttery-eel</italic>) format (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). In both cases, we used the identical ‘HAC’ basecalling model. The analysis was run on three different multi-GPU HPC/cloud systems, which represent a range of architectures commonly used by the genomics community, specifically: (i) an institutional HPC with a parallel PanFS file system (<italic toggle="yes">para-sys</italic>); (ii) Australia’s NCI national supercomputer facility, which uses a distributed Lustre file system (<italic toggle="yes">dist-sys</italic>); and (iii) an S3 bucket on Amazon AWS cloud (<italic toggle="yes">cloud-sys</italic>). For comparison, we also ran the analysis on the standard compute tower of an ONT PromethION P48 instrument (PRO-PRCV100; <italic toggle="yes">prom-sys</italic>), which uses a filesystem comprising 8 × 8TB SSD drives with RAID0 configuration. Full computer specifications are provided in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>.</p>
    <p>When using BLOW5 and <italic toggle="yes">Buttery-eel</italic>, the basecalling rate (reads per second) scaled roughly linearly with the number of GPUs deployed (1–4 GPUs) on all systems (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>), indicating that GPU processing capacity was the major constraint on overall performance. In contrast, when using FAST5 and <italic toggle="yes">Guppy</italic> on each of the three HPC systems, there was minimal improvement in the rate of basecalling with additional GPUs, indicative of a bottleneck in data access, rather than data processing (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). As a result, we observed significant overall improvements in basecalling rates with BLOW5, compared with FAST5. The size of the improvement on HPC systems ranged from 2.1-fold (<italic toggle="yes">cloud-sys</italic>) to 5.3-fold (<italic toggle="yes">dist-sys</italic>) when using 4 GPUs (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). Differences in the performance of the different systems reflect differences in their speed of FAST5 file reading; random access is slowest on distributed file systems, which therefore see greatest benefit from the switch to sequential access with BLOW5. In contrast to the HPC systems, the local SSD filesystem on <italic toggle="yes">prom-sys</italic> can execute random access on FAST5 at a speed that is almost sufficient to keep up with the data processing rate on its 4 GPUs. As a result, the difference in HAC basecalling performance between FAST5/<italic toggle="yes">Guppy</italic> and BLOW5/<italic toggle="yes">Buttery-eel</italic> was relatively minor, with BLOW5 providing a maximum of ∼22% improvement (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). Importantly, while the performance benefits of BLOW5/<italic toggle="yes">Buttery-eel</italic> varied depending on the system and the number of GPUs deployed, there was no scenario where it was outperformed by FAST5/<italic toggle="yes">Guppy</italic> (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>).</p>
    <p>We next tested how these effects manifest during basecalling of a realistic human whole-genome sequencing dataset (at ∼30× coverage; <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). In FAST5 format, with 4 GPUs, this dataset took a minimum of 13.3 h (<italic toggle="yes">cloud-sys</italic>) and a maximum of 41.6 h (<italic toggle="yes">dist-sys</italic>) to be basecalled on HPC with <italic toggle="yes">Guppy</italic> (HAC model; <xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). In BLOW5 format, basecalled with <italic toggle="yes">Buttery-eel</italic>, overall runtimes were reduced to ∼5 h on every system, corresponding to 2.7-fold (<italic toggle="yes">cloud-sys</italic>), 3.4-fold (<italic toggle="yes">para-sys</italic>), and 9.1-fold (<italic toggle="yes">dist-sys</italic>) improvements, respectively (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). As above, a smaller (∼20%) improvement was observed on <italic toggle="yes">prom-sys</italic> (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). Notably, the differences in performance between systems during FAST5 basecalling, which is shaped by differences in the speed of random access, are effectively erased by using BLOW5, because the analysis is now limited by the rate of data processing on the GPU, rather than file reading (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>).</p>
    <p>Given that FAST5 files do not support sequential access, or multithreaded random access, an alternative path to improve the scalability of basecalling (or any other analysis) is to use multi-processing. ONT’s open-source development basecaller <italic toggle="yes">Bonito</italic> uses such a strategy. To evaluate multi-processing as a scalable approach to basecalling, we analysed the same small dataset as above in FAST5 format using <italic toggle="yes">Bonito</italic>. We also modified the <italic toggle="yes">Bonito</italic> source-code to permit sequential data access from BLOW5 files (see Section 2). We then tested their performance on a local HPC environment with a NFS, using <italic toggle="yes">Bonito</italic>’s ‘fast-basecalling’ (FAST) model, chosen because <italic toggle="yes">Bonito</italic> is relatively slow compared with <italic toggle="yes">Guppy</italic>.</p>
    <p>When basecalling a single dataset, we saw roughly equivalent run-times between <italic toggle="yes">Bonito</italic>’s multi-processing strategy with FAST5 and our sequential BLOW5 access strategy (1885 versus 1685 s; <xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). Next, we emulated scenarios where the HPC’s file system is under increasing load by analysing multiple datasets simultaneously (<italic toggle="yes">n</italic> = 1, 2, 4, 8; see Section 2). Whereas the time taken to basecall each individual dataset in BLOW5 format was unchanged regardless of how many datasets were processed in parallel, this was not true for FAST5 (<xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). Instead, the rate of basecalling decreased and individual run-times for FAST5 datasets increased as the number of parallel runs was increased (<xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). When running eight datasets in parallel, each took ∼5× longer to be processed with FAST5, compared with BLOW5 (<xref rid="btad352-F1" ref-type="fig">Fig. 1e</xref>). This result manifests from competition between random input/output (I/O) operations, which exceed the capacity of the underlying HDDs during muti-processing. Therefore, while multi-processing can be used to improve performance in limited scenarios, it is not a viable strategy for high-throughput base-calling required for large genomics projects. In contrast, sequential data access on BLOW5 files is unaffected by I/O load and therefore well suited to high-throughput basecalling.</p>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>During large-scale nanopore sequencing projects, basecalling is typically performed on external HPC or cloud computer environments, rather than the ONT sequencing device itself (<xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B5" ref-type="bibr">Galey <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B8" ref-type="bibr">Goenka <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>). This is relatively slow, computationally expensive, and is therefore a barrier to more widespread adoption of nanopore sequencing. Here, we show that the SLOW5 file format—developed previously to improve the efficiency of nanopore signal data analysis (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>)—can be used to significantly improve the performance of basecalling. <italic toggle="yes">Buttery-eel</italic> achieved 2.7–9.1-fold runtime improvements on a realistic human genome sequencing dataset processed on common HPC/cloud architectures, with identical outputs to the latest version of <italic toggle="yes">Guppy</italic>. Further improvements could be made by direct integration of BLOW5 reading into the <italic toggle="yes">Guppy</italic> software, via the <italic toggle="yes">slow5lib</italic> library, rather than <italic toggle="yes">Buttery-eel</italic>’<italic toggle="yes">s</italic> indirect client server approach.</p>
    <p>These performance gains are achieved by resolving a bottleneck in data access (I/O) caused by the FAST5 data format. However, data processing by the neural network basecalling model/s remains a costly operation that must be optimized to achieve further acceleration. This is especially true for ONT’s highest fidelity basecalling model, known as ‘super-accuracy’, which is ∼8 times slower than HAC in our experience, and therefore cost-prohibitive for most users. ONT’s new basecalling software <italic toggle="yes">Dorado</italic> (currently in early prototype phase) is anticipated to introduce accelerated models in the future, and the availability of increasingly powerful GPUs will further accelerate data processing. In this context, it is important to note that the relative benefit of improved data access with BLOW5 will continue to increase as the efficiency of data processing improves. This is evident in a striking ∼24-fold acceleration on HPC achieved by <italic toggle="yes">Buttery-eel</italic>/BLOW5, compared with <italic toggle="yes">Guppy</italic>/FAST5, when using ONT’s lightweight FAST basecalling model, where data processing is highly efficient. Even on the ONT PromethION compute tower, we observed a ∼3-fold performance improvement with <italic toggle="yes">Buttery-eel</italic>/BLOW5 when using FAST basecalling, compared with ∼20% with HAC basecalling. This indicates an underlying bottleneck in data access on the PromethION that will become increasingly apparent with future improvements in the speed of data processing.</p>
    <p><italic toggle="yes">Buttery-eel</italic> is the latest addition to the SLOW5 ecosystem, which already includes: (i) the SLOW5/BLOW5 file format and accompanying design specifications; (ii) the <italic toggle="yes">slow5lib</italic> (C/C++), <italic toggle="yes">pyslow5</italic> (python), and <italic toggle="yes">slow5-rs</italic> (rust) software libraries for reading and writing SLOW5/BLOW5 files; (iii) the <italic toggle="yes">slow5tools</italic> toolkit for creating, converting, handling, and interacting with SLOW5/BLOW5 files (<xref rid="btad352-B11" ref-type="bibr">Samarakoon <italic toggle="yes">et al.</italic> 2023</xref>); and (iv) a suite of open-source bioinformatics software packages with which SLOW5 is now integrated (<xref rid="btad352-B15" ref-type="bibr">Simpson <italic toggle="yes">et al.</italic> 2017</xref>, <xref rid="btad352-B7" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B3" ref-type="bibr">Bao <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B17" ref-type="bibr">Zhang <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B14" ref-type="bibr">Shih <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B12" ref-type="bibr">Senanayake <italic toggle="yes">et al.</italic> 2023</xref>). In addition to <italic toggle="yes">Buttery-eel</italic>, BLOW5 has been integrated into independent forks of both the <italic toggle="yes">Bonito</italic> (<ext-link xlink:href="https://github.com/Psy-Fer/bonito" ext-link-type="uri">https://github.com/Psy-Fer/bonito</ext-link>) and <italic toggle="yes">Dorado</italic> (<ext-link xlink:href="https://github.com/hiruna72/slow5-dorado" ext-link-type="uri">https://github.com/hiruna72/slow5-dorado</ext-link>) basecallers from ONT, and BLOW5 access for <italic toggle="yes">Dorado</italic> will be maintained and improved as this prototype software matures. While users are required to first convert their data from FAST5 to BLOW5 to use these, we recently demonstrated that this can be done live, during an ONT sequencing run, in order to minimize additional workflow time (<xref rid="btad352-B11" ref-type="bibr">Samarakoon <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>SLOW5 was conceived as an open-source, community-centric alternative to ONT’s FAST5 data format. ONT have since released POD5, a prototype file format that is anticipated to replace FAST5. POD5 development remains in its early stages, and it is not sufficiently mature for meaningful comparisons to be made between POD5 and SLOW5 formats. However, we anticipate many of SLOW5’s current advantages in simplicity, stability, compatibility, and performance will remain relevant into the future, and we look forward to future comparisons with POD5.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad352_Supplementary_Data</label>
      <media xlink:href="btad352_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We thank Alexander Payne for providing code examples and assistance for using the <italic toggle="yes">Guppy</italic> Python API. We thank Mark Bicknell from ONT for providing technical support with <italic toggle="yes">ont-pyguppy-client-lib</italic>. We also thank Andre Luiz Martins Reis, Igor Stevanovski, and Tim Amos for testing and providing early user feedback on <italic toggle="yes">Buttery-eel</italic>. Finally, we thank Derrick Lin for providing excellent technical support and freedom to use the institute’s HPC system in some quite exotic ways. Resources from the Australian National Computational Infrastructure were used during benchmarking experiments.</p>
  </ack>
  <sec>
    <title>Author contributions</title>
    <p>All authors contributed to the study design, figure generation and manuscript writing. H.S., J.M.F., and H.G. collaboratively developed <italic toggle="yes">slow5lib</italic>, <italic toggle="yes">pyslow5</italic>, <italic toggle="yes">Buttery-eel</italic>, modified the <italic toggle="yes">Bonito</italic> source code for BLOW5 integration, designed and executed benchmarking experiments, with supervision from I.W.D.</p>
  </sec>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>I.W.D. manages a fee-for-service sequencing facility at the Garvan Institute of Medical Research that is a customer of ONT but has no further financial relationship. H.G. and J.M.F. have previously received travel and accommodation expenses to speak at ONT conferences. H.G. and I.W.D. have paid consultant roles with Sequin PTY LTD. The authors declare no other competing financial or non-financial interests.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>We acknowledge the following funding support: Australian Medical Research Futures Fund grants MRF1173594 and MRF2016008 [to I.W.D.] and Australian Research Council DECRA Fellowship DE230100178 [to H.G.].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data and code availability</title>
    <p>Datasets used in benchmarking experiments are described in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref> and are available on NCBI Sequence Read Archive at Bioproject PRJNA744329. With the exception of ONT’s commercially available <italic toggle="yes">Guppy</italic> basecaller, all software used in this project is free and open source. SLOW5 and all of its associated software are free and open source:<disp-quote content-type="extract"><p>Slow5tools: <ext-link xlink:href="https://hasindu2008.github.io/slow5tools/" ext-link-type="uri">https://hasindu2008.github.io/slow5tools/</ext-link>;</p><p>Slow5lib and pyslow5: <ext-link xlink:href="https://hasindu2008.github.io/slow5lib/" ext-link-type="uri">https://hasindu2008.github.io/slow5lib/</ext-link>;</p><p>Buttery-eel: <ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel;" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel</ext-link>;</p><p>Bonito with SLOW5 support: <ext-link xlink:href="https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d;" ext-link-type="uri">https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d</ext-link>;</p><p>SLOW5 format specification documents can be accessed at: <ext-link xlink:href="https://hasindu2008.github.io/slow5specs" ext-link-type="uri">https://hasindu2008.github.io/slow5specs</ext-link>.</p></disp-quote></p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad352-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Alonge</surname><given-names>M</given-names></string-name>, <string-name><surname>Wang</surname><given-names>X</given-names></string-name>, <string-name><surname>Benoit</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Major impacts of widespread structural variation on gene expression and crop improvement in tomato</article-title>. <source>Cell</source><year>2020</year>;<volume>182</volume>:<fpage>145</fpage>–<lpage>61.e23</lpage>.<pub-id pub-id-type="pmid">32553272</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Amarasinghe</surname><given-names>SL</given-names></string-name>, <string-name><surname>Su</surname><given-names>S</given-names></string-name>, <string-name><surname>Dong</surname><given-names>X</given-names></string-name></person-group><etal>et al</etal><article-title>Opportunities and challenges in long-read sequencing data analysis</article-title>. <source>Genome Biol</source><year>2020</year>;<volume>21</volume>:<fpage>30</fpage>.<pub-id pub-id-type="pmid">32033565</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bao</surname><given-names>Y</given-names></string-name>, <string-name><surname>Wadden</surname><given-names>J</given-names></string-name>, <string-name><surname>Erb-Downward</surname><given-names>JR</given-names></string-name></person-group><etal>et al</etal><article-title>SquiggleNet: real-time, direct classification of nanopore signals</article-title>. <source>Genome Biol</source><year>2021</year>;<volume>22</volume>:<fpage>298</fpage>.<pub-id pub-id-type="pmid">34706748</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Beyter</surname><given-names>D</given-names></string-name>, <string-name><surname>Ingimundardottir</surname><given-names>H</given-names></string-name>, <string-name><surname>Oddsson</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Long-read sequencing of 3,622 icelanders provides insight into the role of structural variants in human diseases and other traits</article-title>. <source>Nat Genet</source><year>2021</year>;<volume>53</volume>:<fpage>779</fpage>–<lpage>86</lpage>.<pub-id pub-id-type="pmid">33972781</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B5">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Galey</surname><given-names>M</given-names></string-name>, <string-name><surname>Reed</surname><given-names>P</given-names></string-name>, <string-name><surname>Wenger</surname><given-names>T</given-names></string-name></person-group><etal>et al</etal> 3-hour genome sequencing and targeted analysis to rapidly assess genetic risk. <italic toggle="yes">medRxiv</italic><year>2022</year>. doi:<pub-id pub-id-type="doi">10.1101/2022.09.09.22279746</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Samarakoon</surname><given-names>H</given-names></string-name>, <string-name><surname>Jenner</surname><given-names>SP</given-names></string-name></person-group><etal>et al</etal><article-title>Fast nanopore sequencing data analysis with SLOW5</article-title>. <source>Nat Biotechnol</source><year>2022</year>;<volume>40</volume>:<fpage>1026</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">34980914</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Lam</surname><given-names>CW</given-names></string-name>, <string-name><surname>Jayatilaka</surname><given-names>G</given-names></string-name></person-group><etal>et al</etal><article-title>GPU accelerated adaptive banded event alignment for rapid comparative nanopore signal analysis</article-title>. <source>BMC Bioinformatics</source><year>2020</year>;<volume>21</volume>:<fpage>343</fpage>.<pub-id pub-id-type="pmid">32758139</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Goenka</surname><given-names>SD</given-names></string-name>, <string-name><surname>Gorzynski</surname><given-names>JE</given-names></string-name>, <string-name><surname>Shafin</surname><given-names>K</given-names></string-name></person-group><etal>et al</etal><article-title>Accelerated identification of disease-causing variants with ultra-rapid nanopore genome sequencing</article-title>. <source>Nat Biotechnol</source><year>2022</year>;<volume>40</volume>:<fpage>1035</fpage>–<lpage>41</lpage>.<pub-id pub-id-type="pmid">35347328</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B9">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname><given-names>M</given-names></string-name>, <string-name><surname>Billingsley</surname><given-names>KJ</given-names></string-name>, <string-name><surname>Mastoras</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal> Scalable nanopore sequencing of human genomes provides a comprehensive view of haplotype-resolved variation and methylation. <italic toggle="yes">bioRxiv</italic><year>2023</year>. doi:<pub-id pub-id-type="doi">10.1101/2023.01.12.523790</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Otsuki</surname><given-names>A</given-names></string-name>, <string-name><surname>Okamura</surname><given-names>Y</given-names></string-name>, <string-name><surname>Ishida</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Construction of a trio-based structural variation panel utilizing activated T lymphocytes and long-read sequencing technology</article-title>. <source>Commun Biol</source><year>2022</year>;<volume>5</volume>:<fpage>991</fpage>.<pub-id pub-id-type="pmid">36127505</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Samarakoon</surname><given-names>H</given-names></string-name>, <string-name><surname>Ferguson</surname><given-names>JM</given-names></string-name>, <string-name><surname>Jenner</surname><given-names>SP</given-names></string-name></person-group><etal>et al</etal><article-title>Flexible and efficient handling of nanopore sequencing signal data with slow5tools</article-title>. <source>Genome Biol</source><year>2023</year>;<volume>24</volume>:<fpage>69</fpage>.<pub-id pub-id-type="pmid">37024927</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Senanayake</surname><given-names>A</given-names></string-name>, <string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Herath</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>DeepSelectNet: deep neural network based selective sequencing for oxford nanopore sequencing</article-title>. <source>BMC Bioinformatics</source><year>2023</year>;<volume>24</volume>:<fpage>31</fpage>.<pub-id pub-id-type="pmid">36709261</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shafin</surname><given-names>K</given-names></string-name>, <string-name><surname>Pesout</surname><given-names>T</given-names></string-name>, <string-name><surname>Lorig-Roach</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>. <source>Nat Biotechnol</source><year>2020</year>;<volume>38</volume>:<fpage>1044</fpage>–<lpage>53</lpage>.<pub-id pub-id-type="pmid">32686750</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B14">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Shih</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Saadat</surname><given-names>H</given-names></string-name>, <string-name><surname>Parameswaran</surname><given-names>S</given-names></string-name></person-group><etal>et al</etal> Efficient real-time selective genome sequencing on resource-constrained devices. <italic toggle="yes">arXiv</italic><year>2022</year>. doi:<pub-id pub-id-type="doi">10.48550/arXiv.2211.07340</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Simpson</surname><given-names>JT</given-names></string-name>, <string-name><surname>Workman</surname><given-names>RE</given-names></string-name>, <string-name><surname>Zuzarte</surname><given-names>PC</given-names></string-name></person-group><etal>et al</etal><article-title>Detecting DNA cytosine methylation using nanopore sequencing</article-title>. <source>Nat Methods</source><year>2017</year>;<volume>14</volume>:<fpage>407</fpage>–<lpage>10</lpage>.<pub-id pub-id-type="pmid">28218898</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wang</surname><given-names>Y</given-names></string-name>, <string-name><surname>Zhao</surname><given-names>Y</given-names></string-name>, <string-name><surname>Bollas</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Nanopore sequencing technology, bioinformatics and applications</article-title>. <source>Nat Biotechnol</source><year>2021</year>;<volume>39</volume>:<fpage>1348</fpage>–<lpage>65</lpage>.<pub-id pub-id-type="pmid">34750572</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhang</surname><given-names>H</given-names></string-name>, <string-name><surname>Li</surname><given-names>H</given-names></string-name>, <string-name><surname>Jain</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Real-time mapping of nanopore raw signals</article-title>. <source>Bioinformatics</source><year>2021</year>;<volume>37</volume>:<fpage>i477</fpage>–<lpage>i483</lpage>.<pub-id pub-id-type="pmid">34252938</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10261880</article-id>
    <article-id pub-id-type="pmid">37252813</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad352</article-id>
    <article-id pub-id-type="publisher-id">btad352</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Accelerated nanopore basecalling with SLOW5 data format</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-5812-1046</contrib-id>
        <name>
          <surname>Samarakoon</surname>
          <given-names>Hiruna</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>School of Computer Science and Engineering, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-FM2" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-6192-6937</contrib-id>
        <name>
          <surname>Ferguson</surname>
          <given-names>James M</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <xref rid="btad352-FM2" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-9034-9905</contrib-id>
        <name>
          <surname>Gamaarachchi</surname>
          <given-names>Hasindu</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>School of Computer Science and Engineering, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-cor1" ref-type="corresp"/>
        <!--hasindu@garvan.org.au-->
        <xref rid="btad352-FM1" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-3861-0472</contrib-id>
        <name>
          <surname>Deveson</surname>
          <given-names>Ira W</given-names>
        </name>
        <aff><institution>Genomics Pillar, Garvan Institute of Medical Research</institution>, Sydney, NSW 2010, <country country="AU">Australia</country></aff>
        <aff><institution>Centre for Population Genomics, Garvan Institute of Medical Research and Murdoch Children’s Research Institute</institution>, <country country="AU">Australia</country></aff>
        <aff><institution>Faculty of Medicine, University of New South Wales</institution>, Sydney, NSW 2052, <country country="AU">Australia</country></aff>
        <xref rid="btad352-cor1" ref-type="corresp"/>
        <!--i.deveson@garvan.org.au-->
        <xref rid="btad352-FM1" ref-type="author-notes"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Alkan</surname>
          <given-names>Can</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad352-cor1">Corresponding authors. Genomics Pillar, Garvan Institute of Medical Research, Sydney, NSW, Australia. E-mails: <email>i.deveson@garvan.org.au</email> (I.W.D.) and <email>hasindu@garvan.org.au</email> (H.G.)</corresp>
      <fn id="btad352-FM1">
        <p>Hasindu Gamaarachchi and Ira W Deveson Joint senior authors</p>
      </fn>
      <fn id="btad352-FM2">
        <p>Hiruna Samarakoon and James M Ferguson contributed equally to this work</p>
      </fn>
    </author-notes>
    <pub-date pub-type="collection">
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-05-30">
      <day>30</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>6</issue>
    <elocation-id>btad352</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>2</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>12</day>
        <month>4</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>06</day>
        <month>5</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>29</day>
        <month>5</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>6</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad352.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Nanopore sequencing is emerging as a key pillar in the genomic technology landscape but computational constraints limiting its scalability remain to be overcome. The translation of raw current signal data into DNA or RNA sequence reads, known as ‘basecalling’, is a major friction in any nanopore sequencing workflow. Here, we exploit the advantages of the recently developed signal data format ‘SLOW5’ to streamline and accelerate nanopore basecalling on high-performance computing (HPC) and cloud environments.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>SLOW5 permits highly efficient sequential data access, eliminating a potential analysis bottleneck. To take advantage of this, we introduce <italic toggle="yes">Buttery-eel</italic>, an open-source wrapper for Oxford Nanopore’s <italic toggle="yes">Guppy</italic> basecaller that enables SLOW5 data access, resulting in performance improvements that are essential for scalable, affordable basecalling.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Buttery-eel is available at <ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Australian Medical Research Futures Fund</institution>
          </institution-wrap>
        </funding-source>
        <award-id>MRF1173594</award-id>
        <award-id>MRF2016008</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Australian Research Council DECRA Fellowship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>DE230100178</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Sequencing devices from Oxford Nanopore Technologies (ONT) afford countless opportunities in research and clinical genomics. With the unique ability to sequence both short and long native DNA and RNA molecules on an inexpensive device, ONT presents a significant value proposition, and is already disrupting the genomic technology landscape. To realize large-scale adoption and replacement of dominant short-read sequencing platforms (i.e. Illumina, BGI, and IonTorrent), however, bottlenecks in nanopore data analysis must be addressed.</p>
    <p>ONT devices measure the displacement of ionic current as a DNA/RNA molecule passes through a nanoscale protein pore, recording time-series signal data that can be translated—or ‘basecalled’—to determine the molecule’s sequence (<xref rid="btad352-B16" ref-type="bibr">Wang <italic toggle="yes">et al.</italic> 2021</xref>). Basecalling is the first step in virtually any nanopore analysis workflow. Real-time data acquisition occurs in parallel across thousands of pores on a single ‘flow-cell’ during a sequencing run. This raw data can be basecalled in real-time using the on-board computer on an ONT device, or subsequent to completion of the experiment, using an external computer (<xref rid="btad352-B16" ref-type="bibr">Wang <italic toggle="yes">et al.</italic> 2021</xref>).</p>
    <p>ONT’s high-output PromethION device has enabled increasingly cost-effective nanopore sequencing of human and other large eukaryotic genomes (<xref rid="btad352-B1" ref-type="bibr">Alonge <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B13" ref-type="bibr">Shafin <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B10" ref-type="bibr">Otsuki <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>), with scalability that theoretically rivals dominant short-read sequencing platforms. The PromethION (P48 version) is equipped to run 48 flow-cells in parallel and has capacity to sequence ∼96 human genomes at &gt;30-fold coverage per week (assuming one flow-cell per sample). However, in our experience, the PromethION’s attached compute tower (PRO-PRCV100) is unable to execute live high-accuracy (HAC) basecalling on more than ∼8–10 flow-cells in parallel. Therefore, to realize even a fraction of the machine’s theoretical sequencing throughput, the user must export the raw data and perform basecalling externally on their own high-performance computing (HPC) or cloud environments (<xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B5" ref-type="bibr">Galey <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B8" ref-type="bibr">Goenka <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>As we have shown previously (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>), ONT’s native data format ‘FAST5’ is large and poorly engineered for efficient analysis on parallel computer systems. These limitations are perhaps most salient during basecalling, where existing inefficiencies result in major costs and impediments for large-scale nanopore projects. For example, as we show below, processing a single human genome dataset with ONT’s production basecalling software <italic toggle="yes">Guppy</italic> on a typical Amazon Web Services (AWS) cloud instance takes at least ∼13 h and costs ∼$165 USD, or up to ∼25% of the cost of the flow-cell used to generate the data.</p>
    <p>We recently developed a new file format, SLOW5, which is designed to resolve the inherent limitations in FAST5 (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>). In its compressed binary form [Binary SLOW5 (BLOW5)], the new format is ∼20–80% smaller than FAST5 and permits efficient parallel access by multiple CPU threads. We showed previously that SLOW5 enables order-of-magnitude improvements in the speed of common nanopore data analysis processes, such as DNA methylation calling. However, the potential benefits of SLOW5 on basecalling have not been investigated, largely because ONT’s production basecalling software, <italic toggle="yes">Guppy</italic>, does not currently support SLOW5 data access.</p>
    <p>Here, we explore the benefits of the SLOW5 format for scalable basecalling of nanopore data. We articulate a new advantage of SLOW5, namely its capacity for rapid sequential data access [as opposed to random access, explored previously (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>)], which can be exploited to accelerate basecalling. We also unveil <italic toggle="yes">Buttery-eel</italic>, an open-source wrapper that enables SLOW5 data access by <italic toggle="yes">Guppy</italic>, and demonstrate the resulting performance benefits during nanopore basecalling.</p>
  </sec>
  <sec>
    <title>2 Methods</title>
    <sec>
      <title>2.1 Reading SLOW5/BLOW5 files with <italic toggle="yes">pyslow5</italic></title>
      <p>The python library <italic toggle="yes">pyslow5</italic> is built on the <italic toggle="yes">slow5lib</italic> API using Cython which compiles the python code to C. It is designed to be easy to install, use, and to be fast. Though <italic toggle="yes">pyslow5</italic> is slower at reading and writing SLOW5/BLOW5 files than using C directly, it is still much faster than reading FAST5 files with the HDF5 python library, <italic toggle="yes">h5py</italic>. <italic toggle="yes">Pyslow5</italic> offers both random and sequential reading, as well as writing and appending of SLOW5/BLOW5 files. Each can be run with single threads, or with multiple threads, where the multithreading is controlled by function call flags and threading implemented on the C library side. Further multiprocessing from python can be applied to the random access methods, allowing for users to fine-tune resource usage.</p>
    </sec>
    <sec>
      <title>2.2 Design and implementation of <italic toggle="yes">Buttery-eel</italic></title>
      <p><italic toggle="yes">Buttery-eel</italic> is open-source software written in python to enable basecalling of BLOW5 files directly with ONT’s production basecaller, <italic toggle="yes">Guppy</italic>. By using the software library <italic toggle="yes">ont-pyguppy-client-lib</italic> (<ext-link xlink:href="https://pypi.org/project/ont-pyguppy-client-lib" ext-link-type="uri">https://pypi.org/project/ont-pyguppy-client-lib</ext-link>), <italic toggle="yes">Buttery-eel</italic> can control a <italic toggle="yes">Guppy</italic> server and <italic toggle="yes">Guppy</italic> client. Reads are read from a BLOW5 file and repackaged into a data structure compatible with the <italic toggle="yes">ont-pyguppy-client-lib</italic>, which can then be submitted to <italic toggle="yes">Guppy</italic> for basecalling. <italic toggle="yes">Buttery-eel</italic> thereby enables users to basecall BLOW5 files with the latest version of <italic toggle="yes">Guppy</italic>. The output sequence reads basecalled with <italic toggle="yes">Buttery-eel</italic> are identical to those basecalled with <italic toggle="yes">Guppy</italic>. <italic toggle="yes">Buttery-eel</italic> includes DNA methylation calling with built-in <italic toggle="yes">Remora</italic>, and writing output files in FASTQ or unaligned-SAM—both features of recent <italic toggle="yes">Guppy</italic> versions. Output files can also be split by mean phred quality score set by users into <italic toggle="yes">pass</italic> and <italic toggle="yes">fail</italic> files. A splitting tool <italic toggle="yes">split_qscore.py</italic> is also provided to allow users to split FASTQ or unaligned-SAM files on any given quality score.</p>
      <p><italic toggle="yes">Buttery-eel</italic> operates via the following internal workflow, which is summarized in <xref rid="btad352-F1" ref-type="fig">Fig. 1a</xref>:</p>
      <fig position="float" id="btad352-F1">
        <label>Figure 1.</label>
        <caption>
          <p>Acceleration of ONT basecalling with Buttery-eel. (a) Schematic diagram describing the architecture of Buttery-eel, which is a client wrapper that enables input of BLOW5 files to ONT’s Guppy basecaller. Buttery-eel uses pyslow5 to access reads from a BLOW5 file. Reads are then submitted to a Guppy server for processing, before writing them to a FASTQ (or SAM) output file. (b) Bar charts show the basecalling rate (in reads/second) achieved by Guppy with FAST5 input and Buttery-eel with BLOW5 input, relative to the number of GPUs utilized on each of four computer systems (dist-sys, para-sys, cloud-sys, and prom-sys; see <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). (c) Bar chart shows the minimum execution time achievable (i.e. with four GPUs) for a typical 30× human genome sequencing dataset processed on each of the systems in b. (d) Line plots show the basecalling rate achieved by Bonito with multi-processing on FAST5 input and with multi-threading on BLOW5 input, relative to the number of identical basecalling jobs running in parallel. (e) Bar chart shows the overall execution time for each individual dataset (500 000 reads), with 1, 2, 4, or 8 basecalling jobs running in parallel.</p>
        </caption>
        <graphic xlink:href="btad352f1" position="float"/>
      </fig>
      <list list-type="order">
        <list-item>
          <p>Set up <italic toggle="yes">Guppy</italic> server;</p>
        </list-item>
        <list-item>
          <p>Set up <italic toggle="yes">Guppy</italic> client to connect to <italic toggle="yes">Guppy</italic> server;</p>
        </list-item>
        <list-item>
          <p>Read BLOW5 file with <italic toggle="yes">pyslow5</italic> library;</p>
        </list-item>
        <list-item>
          <p>Submit reads to <italic toggle="yes">Guppy</italic> to be basecalled;</p>
        </list-item>
        <list-item>
          <p>Get reads from <italic toggle="yes">Guppy</italic> and write to FASTQ/SAM.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>2.3 SLOW5 integration to <italic toggle="yes">Bonito</italic></title>
      <p><italic toggle="yes">Bonito</italic> is an open-source research basecaller from ONT written in Python. It uses multiprocessing pools to extract reads from FAST5 files, assigns attributes from those reads to the Read class attributes, and passes that object to the basecalling module. Integrating SLOW5/BLOW5 access into <italic toggle="yes">Bonito</italic> was relatively straightforward using multithreaded sequential reading from the <italic toggle="yes">pyslow5</italic> library.</p>
      <p>To integrate BLOW5 file usage with <italic toggle="yes">Bonito</italic>, three components were required:</p>
      <list list-type="order">
        <list-item>
          <p>Flags for setting SLOW5/BLOW5 format and controlling threads and batch size.</p>
        </list-item>
        <list-item>
          <p>Assignment from <italic toggle="yes">pyslow5</italic> read object to Read class object.</p>
        </list-item>
        <list-item>
          <p>Batching sequential reads to parse into multiprocessing pools for basecalling.</p>
        </list-item>
      </list>
      <p>This integration effectively has C-level threads in the <italic toggle="yes">pyslow5</italic> library decompressing and reading reads sequentially, while using python multiprocessing to construct read objects and parse for basecalling. The FAST5 method however only has multiprocessing for both decompression, reading via random access, and constructing the read objects for basecall parsing.</p>
    </sec>
    <sec>
      <title>2.4 Basecalling performance benchmarks</title>
      <p>The evaluation was performed on all systems, <italic toggle="yes">dist-sys</italic>, <italic toggle="yes">para-sys</italic>, and <italic toggle="yes">cloud-sys</italic> (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>) for the small ∼500 000 read dataset and the 30× whole genome dataset (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). Basecalling performance evaluations on FAST5 and BLOW5 were performed using ONT <italic toggle="yes">Guppy</italic> and on <italic toggle="yes">Buttery-eel</italic> (that wraps ONT <italic toggle="yes">Guppy</italic> server), respectively (see below). The small ∼500 000 read dataset was basecalled with varying number of GPUs by setting <monospace>–device cuda:&lt;devices&gt;</monospace> option accordingly (<monospace>cuda : 0</monospace> for one GPU, <monospace>cuda : 0,1</monospace> for two GPUs, <monospace>cuda : 0,1,2</monospace> for three GPUs, and <monospace>cuda : 0,1,2,3</monospace> for four GPUs). The whole genome dataset was basecalled using all four available GPUs. ONT <italic toggle="yes">Guppy</italic> for FAST5 input was executed with default options. <italic toggle="yes">Buttery-eel</italic> for BLOW5 was executed with the following additional parameters that are relevant to either BLOW5 or the server-client approach of <italic toggle="yes">Guppy</italic> (<monospace>ont-pyguppy-client-lib).</monospace><boxed-text id="btad352-BOX1" position="float"><p><monospace># ont-guppy (FAST5)</monospace></p><p><monospace># version: 6.3.7</monospace></p><p><monospace># command:</monospace></p><p><monospace>guppy_basecaller -c dna_r9.4.1_450bps_hac_prom.cfg –device cuda:&lt;devices&gt; -i fast5_dir/ -s output_dir/</monospace></p><p><monospace># Buttery-eel (BLOW5)</monospace></p><p><monospace># compatible ont-pyguppy-client-lib 6.3.7</monospace></p><p><monospace># commit:</monospace><monospace><ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel/commit/44d8574c38b7983aa644c3ef7a3bd60bea72fdc6" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel/commit/44d8574c38b7983aa644c3ef7a3bd60bea72fdc6</ext-link></monospace></p><p><monospace># command (BLOW5):</monospace></p><p><monospace>buttery-eel -i slow5_file -o output_fastq –guppy_bin ont-guppy_binaries_dir –port 5889 –config dna_r9.4.1_450bps_hac_prom.cfg –device cuda:&lt;devices&gt; –use_tcp –quiet –guppy_batchsize 20000 –max_queued_reads 20000 –slow5_threads 10 –slow5_batchsize 100 –procs 20</monospace></p></boxed-text></p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>–guppy_batchsize</monospace>: Number of reads to be sent to the <italic toggle="yes">Guppy</italic> server at a time;</p>
        </list-item>
        <list-item>
          <p><monospace>–max_queued_reads</monospace>: Max capacity of <italic toggle="yes">Guppy</italic> server queue;</p>
        </list-item>
        <list-item>
          <p><monospace>–slow5_threads</monospace>: Number of threads for decompressing and parsing BLOW5 file;</p>
        </list-item>
        <list-item>
          <p><monospace>–slow5_batchsize</monospace>: Number of reads fetched from the BLOW5 file at a time;</p>
        </list-item>
        <list-item>
          <p><monospace>–procs</monospace>: Number of worker processes to send/receive data from the <italic toggle="yes">Guppy</italic> server.</p>
        </list-item>
      </list>
      <p>On the <italic toggle="yes">cloud-sys</italic> environment, data access was achieved by creating an AWS S3 storage bucket, copying the dataset (FAST5 or BLOW5) to the bucket as objects under the default S3 standard storage class, mounting the S3 bucket on the aws instance using s3fs (<ext-link xlink:href="https://manpages.ubuntu.com/manpages/bionic/man1/s3fs.1.html" ext-link-type="uri">https://manpages.ubuntu.com/manpages/bionic/man1/s3fs.1.html</ext-link>), and reading the dataset from the mounted directory. Specific commands for S3 bucket mounting are as follows:<boxed-text id="btad352-BOX2" position="float"><p><monospace># S3 mounting commands:</monospace></p><p><monospace>mkdir s3</monospace></p><p><monospace>s3fs &lt;bucketname&gt; s3/-o public_bucket</monospace><monospace>=</monospace><monospace>1 -o url=</monospace><ext-link xlink:href="http://s3.amazonaws.com/" ext-link-type="uri">http://s3.amazonaws.com/</ext-link><monospace>-o dbglevel=info -o curldbg -o umask</monospace> <monospace>=</monospace> <monospace>0005 -o uid=$(id -u)</monospace></p></boxed-text></p>
      <p>All experiments were performed using the high accuracy basecalling model. An additional experiment with the fast basecalling model was executed on <italic toggle="yes">dist-sys</italic> on the whole genome dataset using four GPUs. The execution times were measured using <italic toggle="yes">GNU time</italic> utility with <italic toggle="yes">-v</italic> options. The Linux disk cache (page cache, dentries, and inodes) on the computational node/instance was cleaned prior to each experiment, except on <italic toggle="yes">dist-sys</italic> due to lack of root access.</p>
    </sec>
    <sec>
      <title>2.5 Evaluating Bonito multi-processing</title>
      <p>Bonito multi-processing approach was evaluated in an in-house local HPC system with a Network File System (NFS). The system consisted of a Synology DS3617xs Network Attached Storage (NAS) and two HPC server nodes. The NAS contained 12 × 12 TB hard disk drives (HDDs) configured under RAID 10 to form a EXT4 file system. The server nodes were connected to the NAS through 10 Gbps ethernet. Each server node has 4xTesla V100 GPUs. The NAS volume was mounted on both server nodes using NFS. Eight separate copies of the small ∼500 000 read dataset (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>) were made on the NAS. Then eight Bonito jobs were executed in parallel (four jobs on each node, such that each job got exclusive access to a Tesla V100 GPU set using the environmental variable <italic toggle="yes">CUDA_VISIBLE_DEVICES</italic>), with each job accessing a separate copy of the data (out of the eight copies made). The aforementioned experiment was repeated for both FAST5 and BLOW5 inputs (see the commands below). The Linux disk cache (page cache, dentries, and inodes) were cleaned prior to each experiment on the NAS and servers. The execution time was measured using <italic toggle="yes">GNU time</italic> utility with <italic toggle="yes">-v</italic> option. Bonito by default uses eight multi-processes to fetch data from FAST5 files. For reading from BLOW5, <monospace>–slow5_threads</monospace> was set to 8 and <monospace>–slow5_batchsize</monospace> to 4096 such that eight multi-threads are used for decompressing and parsing a batch of 4096 BLOW5 records in parallel (sequence disk fetching is still done using a single thread).</p>
      <p>
        <boxed-text id="btad352-BOX3" position="float">
          <p>
            <monospace># Bonito version: 0.5.1</monospace>
          </p>
          <p>
            <monospace># commit:</monospace>
            <monospace>
              <ext-link xlink:href="https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d" ext-link-type="uri">https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d</ext-link>
            </monospace>
          </p>
          <p>
            <monospace># command (FAST5):</monospace>
          </p>
          <p>
            <monospace>bonito basecaller –batchsize 2048 -v</monospace>
            <monospace>dna_r9.4.1_e8.1_fast@v3.4</monospace>
            <monospace>fast5_dir –device cuda &gt; a.fastq</monospace>
          </p>
          <p>
            <monospace># command (BLOW5):</monospace>
          </p>
          <p>
            <monospace>bonito basecaller –batchsize 2048 -v</monospace>
            <monospace>dna_r9.4.1_e8.1_fast@v3.4</monospace>
            <monospace>slow5_dir/ –slow5 –slow5_threads 8 –slow5_batchsize 4096 –device cuda &gt; b.fastq</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>Basecalling is a major friction in any nanopore sequencing workflow. During basecalling with ONT’s <italic toggle="yes">Guppy</italic> software, raw-signal reads are retrieved from the FAST5 input file, passed to the central processing unit (CPU) or graphics processing unit (GPU), where a neural network model is applied to translate the signal into a DNA sequence, which is then written to a FASTQ output file (<xref rid="btad352-B2" ref-type="bibr">Amarasinghe <italic toggle="yes">et al.</italic> 2020</xref>). File reading is performed in a random access pattern because the complex structure of a FAST5 file does not allow more efficient sequential access. When sufficient CPU/GPU capacity is available, the rate of data access from the FAST5 file, rather than data processing on the CPU/GPU, has the potential to become a bottleneck for the overall analysis.</p>
    <p>BLOW5 format is designed to enable efficient file reading by either random or sequential access patterns, using the <italic toggle="yes">slow5lib</italic> (C++) or <italic toggle="yes">pyslow5</italic> (python) libraries (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>). Raw reads do not need to be basecalled in any particular order, meaning highly efficient sequential access should be preferred. We therefore reasoned that the use of fast, sequential access with BLOW5, instead of slow random access with FAST5, might improve basecalling performance. <italic toggle="yes">Guppy</italic> does not currently support BLOW5 data access and the <italic toggle="yes">Guppy</italic> code cannot be modified directly to enable this (because it is commercial, closed-source software). Instead, we developed <italic toggle="yes">Buttery-eel</italic>, a client wrapper to enable basecalling of BLOW5 files with the latest version of <italic toggle="yes">Guppy</italic> (see Section 2). <italic toggle="yes">Buttery-eel</italic> uses <italic toggle="yes">pyslow5</italic> to access reads sequentially from a BLOW5 file/s, which are then submitted to a <italic toggle="yes">Guppy</italic> server for processing, before writing them to a FASTQ output file (<xref rid="btad352-F1" ref-type="fig">Fig. 1a</xref>). <italic toggle="yes">Buttery-eel</italic> has equivalent usage to <italic toggle="yes">Guppy</italic>, identical outputs, and it maintains all key functionality of the latest <italic toggle="yes">Guppy</italic> version, including DNA methylation calling with <italic toggle="yes">Remora</italic> built-in.</p>
    <p>To evaluate the impact of improved BLOW5 data access on basecalling performance, we processed a small dataset of ∼500 000 reads in either FAST5 (with <italic toggle="yes">Guppy</italic>) or BLOW5 (with <italic toggle="yes">Buttery-eel</italic>) format (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). In both cases, we used the identical ‘HAC’ basecalling model. The analysis was run on three different multi-GPU HPC/cloud systems, which represent a range of architectures commonly used by the genomics community, specifically: (i) an institutional HPC with a parallel PanFS file system (<italic toggle="yes">para-sys</italic>); (ii) Australia’s NCI national supercomputer facility, which uses a distributed Lustre file system (<italic toggle="yes">dist-sys</italic>); and (iii) an S3 bucket on Amazon AWS cloud (<italic toggle="yes">cloud-sys</italic>). For comparison, we also ran the analysis on the standard compute tower of an ONT PromethION P48 instrument (PRO-PRCV100; <italic toggle="yes">prom-sys</italic>), which uses a filesystem comprising 8 × 8TB SSD drives with RAID0 configuration. Full computer specifications are provided in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>.</p>
    <p>When using BLOW5 and <italic toggle="yes">Buttery-eel</italic>, the basecalling rate (reads per second) scaled roughly linearly with the number of GPUs deployed (1–4 GPUs) on all systems (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>), indicating that GPU processing capacity was the major constraint on overall performance. In contrast, when using FAST5 and <italic toggle="yes">Guppy</italic> on each of the three HPC systems, there was minimal improvement in the rate of basecalling with additional GPUs, indicative of a bottleneck in data access, rather than data processing (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). As a result, we observed significant overall improvements in basecalling rates with BLOW5, compared with FAST5. The size of the improvement on HPC systems ranged from 2.1-fold (<italic toggle="yes">cloud-sys</italic>) to 5.3-fold (<italic toggle="yes">dist-sys</italic>) when using 4 GPUs (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). Differences in the performance of the different systems reflect differences in their speed of FAST5 file reading; random access is slowest on distributed file systems, which therefore see greatest benefit from the switch to sequential access with BLOW5. In contrast to the HPC systems, the local SSD filesystem on <italic toggle="yes">prom-sys</italic> can execute random access on FAST5 at a speed that is almost sufficient to keep up with the data processing rate on its 4 GPUs. As a result, the difference in HAC basecalling performance between FAST5/<italic toggle="yes">Guppy</italic> and BLOW5/<italic toggle="yes">Buttery-eel</italic> was relatively minor, with BLOW5 providing a maximum of ∼22% improvement (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>). Importantly, while the performance benefits of BLOW5/<italic toggle="yes">Buttery-eel</italic> varied depending on the system and the number of GPUs deployed, there was no scenario where it was outperformed by FAST5/<italic toggle="yes">Guppy</italic> (<xref rid="btad352-F1" ref-type="fig">Fig. 1b</xref>).</p>
    <p>We next tested how these effects manifest during basecalling of a realistic human whole-genome sequencing dataset (at ∼30× coverage; <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). In FAST5 format, with 4 GPUs, this dataset took a minimum of 13.3 h (<italic toggle="yes">cloud-sys</italic>) and a maximum of 41.6 h (<italic toggle="yes">dist-sys</italic>) to be basecalled on HPC with <italic toggle="yes">Guppy</italic> (HAC model; <xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). In BLOW5 format, basecalled with <italic toggle="yes">Buttery-eel</italic>, overall runtimes were reduced to ∼5 h on every system, corresponding to 2.7-fold (<italic toggle="yes">cloud-sys</italic>), 3.4-fold (<italic toggle="yes">para-sys</italic>), and 9.1-fold (<italic toggle="yes">dist-sys</italic>) improvements, respectively (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). As above, a smaller (∼20%) improvement was observed on <italic toggle="yes">prom-sys</italic> (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>). Notably, the differences in performance between systems during FAST5 basecalling, which is shaped by differences in the speed of random access, are effectively erased by using BLOW5, because the analysis is now limited by the rate of data processing on the GPU, rather than file reading (<xref rid="btad352-F1" ref-type="fig">Fig. 1c</xref>).</p>
    <p>Given that FAST5 files do not support sequential access, or multithreaded random access, an alternative path to improve the scalability of basecalling (or any other analysis) is to use multi-processing. ONT’s open-source development basecaller <italic toggle="yes">Bonito</italic> uses such a strategy. To evaluate multi-processing as a scalable approach to basecalling, we analysed the same small dataset as above in FAST5 format using <italic toggle="yes">Bonito</italic>. We also modified the <italic toggle="yes">Bonito</italic> source-code to permit sequential data access from BLOW5 files (see Section 2). We then tested their performance on a local HPC environment with a NFS, using <italic toggle="yes">Bonito</italic>’s ‘fast-basecalling’ (FAST) model, chosen because <italic toggle="yes">Bonito</italic> is relatively slow compared with <italic toggle="yes">Guppy</italic>.</p>
    <p>When basecalling a single dataset, we saw roughly equivalent run-times between <italic toggle="yes">Bonito</italic>’s multi-processing strategy with FAST5 and our sequential BLOW5 access strategy (1885 versus 1685 s; <xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). Next, we emulated scenarios where the HPC’s file system is under increasing load by analysing multiple datasets simultaneously (<italic toggle="yes">n</italic> = 1, 2, 4, 8; see Section 2). Whereas the time taken to basecall each individual dataset in BLOW5 format was unchanged regardless of how many datasets were processed in parallel, this was not true for FAST5 (<xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). Instead, the rate of basecalling decreased and individual run-times for FAST5 datasets increased as the number of parallel runs was increased (<xref rid="btad352-F1" ref-type="fig">Fig. 1d and e</xref>). When running eight datasets in parallel, each took ∼5× longer to be processed with FAST5, compared with BLOW5 (<xref rid="btad352-F1" ref-type="fig">Fig. 1e</xref>). This result manifests from competition between random input/output (I/O) operations, which exceed the capacity of the underlying HDDs during muti-processing. Therefore, while multi-processing can be used to improve performance in limited scenarios, it is not a viable strategy for high-throughput base-calling required for large genomics projects. In contrast, sequential data access on BLOW5 files is unaffected by I/O load and therefore well suited to high-throughput basecalling.</p>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>During large-scale nanopore sequencing projects, basecalling is typically performed on external HPC or cloud computer environments, rather than the ONT sequencing device itself (<xref rid="btad352-B4" ref-type="bibr">Beyter <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B5" ref-type="bibr">Galey <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B8" ref-type="bibr">Goenka <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B9" ref-type="bibr">Kolmogorov <italic toggle="yes">et al.</italic> 2023</xref>). This is relatively slow, computationally expensive, and is therefore a barrier to more widespread adoption of nanopore sequencing. Here, we show that the SLOW5 file format—developed previously to improve the efficiency of nanopore signal data analysis (<xref rid="btad352-B6" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2022</xref>)—can be used to significantly improve the performance of basecalling. <italic toggle="yes">Buttery-eel</italic> achieved 2.7–9.1-fold runtime improvements on a realistic human genome sequencing dataset processed on common HPC/cloud architectures, with identical outputs to the latest version of <italic toggle="yes">Guppy</italic>. Further improvements could be made by direct integration of BLOW5 reading into the <italic toggle="yes">Guppy</italic> software, via the <italic toggle="yes">slow5lib</italic> library, rather than <italic toggle="yes">Buttery-eel</italic>’<italic toggle="yes">s</italic> indirect client server approach.</p>
    <p>These performance gains are achieved by resolving a bottleneck in data access (I/O) caused by the FAST5 data format. However, data processing by the neural network basecalling model/s remains a costly operation that must be optimized to achieve further acceleration. This is especially true for ONT’s highest fidelity basecalling model, known as ‘super-accuracy’, which is ∼8 times slower than HAC in our experience, and therefore cost-prohibitive for most users. ONT’s new basecalling software <italic toggle="yes">Dorado</italic> (currently in early prototype phase) is anticipated to introduce accelerated models in the future, and the availability of increasingly powerful GPUs will further accelerate data processing. In this context, it is important to note that the relative benefit of improved data access with BLOW5 will continue to increase as the efficiency of data processing improves. This is evident in a striking ∼24-fold acceleration on HPC achieved by <italic toggle="yes">Buttery-eel</italic>/BLOW5, compared with <italic toggle="yes">Guppy</italic>/FAST5, when using ONT’s lightweight FAST basecalling model, where data processing is highly efficient. Even on the ONT PromethION compute tower, we observed a ∼3-fold performance improvement with <italic toggle="yes">Buttery-eel</italic>/BLOW5 when using FAST basecalling, compared with ∼20% with HAC basecalling. This indicates an underlying bottleneck in data access on the PromethION that will become increasingly apparent with future improvements in the speed of data processing.</p>
    <p><italic toggle="yes">Buttery-eel</italic> is the latest addition to the SLOW5 ecosystem, which already includes: (i) the SLOW5/BLOW5 file format and accompanying design specifications; (ii) the <italic toggle="yes">slow5lib</italic> (C/C++), <italic toggle="yes">pyslow5</italic> (python), and <italic toggle="yes">slow5-rs</italic> (rust) software libraries for reading and writing SLOW5/BLOW5 files; (iii) the <italic toggle="yes">slow5tools</italic> toolkit for creating, converting, handling, and interacting with SLOW5/BLOW5 files (<xref rid="btad352-B11" ref-type="bibr">Samarakoon <italic toggle="yes">et al.</italic> 2023</xref>); and (iv) a suite of open-source bioinformatics software packages with which SLOW5 is now integrated (<xref rid="btad352-B15" ref-type="bibr">Simpson <italic toggle="yes">et al.</italic> 2017</xref>, <xref rid="btad352-B7" ref-type="bibr">Gamaarachchi <italic toggle="yes">et al.</italic> 2020</xref>, <xref rid="btad352-B3" ref-type="bibr">Bao <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B17" ref-type="bibr">Zhang <italic toggle="yes">et al.</italic> 2021</xref>, <xref rid="btad352-B14" ref-type="bibr">Shih <italic toggle="yes">et al.</italic> 2022</xref>, <xref rid="btad352-B12" ref-type="bibr">Senanayake <italic toggle="yes">et al.</italic> 2023</xref>). In addition to <italic toggle="yes">Buttery-eel</italic>, BLOW5 has been integrated into independent forks of both the <italic toggle="yes">Bonito</italic> (<ext-link xlink:href="https://github.com/Psy-Fer/bonito" ext-link-type="uri">https://github.com/Psy-Fer/bonito</ext-link>) and <italic toggle="yes">Dorado</italic> (<ext-link xlink:href="https://github.com/hiruna72/slow5-dorado" ext-link-type="uri">https://github.com/hiruna72/slow5-dorado</ext-link>) basecallers from ONT, and BLOW5 access for <italic toggle="yes">Dorado</italic> will be maintained and improved as this prototype software matures. While users are required to first convert their data from FAST5 to BLOW5 to use these, we recently demonstrated that this can be done live, during an ONT sequencing run, in order to minimize additional workflow time (<xref rid="btad352-B11" ref-type="bibr">Samarakoon <italic toggle="yes">et al.</italic> 2023</xref>).</p>
    <p>SLOW5 was conceived as an open-source, community-centric alternative to ONT’s FAST5 data format. ONT have since released POD5, a prototype file format that is anticipated to replace FAST5. POD5 development remains in its early stages, and it is not sufficiently mature for meaningful comparisons to be made between POD5 and SLOW5 formats. However, we anticipate many of SLOW5’s current advantages in simplicity, stability, compatibility, and performance will remain relevant into the future, and we look forward to future comparisons with POD5.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad352_Supplementary_Data</label>
      <media xlink:href="btad352_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We thank Alexander Payne for providing code examples and assistance for using the <italic toggle="yes">Guppy</italic> Python API. We thank Mark Bicknell from ONT for providing technical support with <italic toggle="yes">ont-pyguppy-client-lib</italic>. We also thank Andre Luiz Martins Reis, Igor Stevanovski, and Tim Amos for testing and providing early user feedback on <italic toggle="yes">Buttery-eel</italic>. Finally, we thank Derrick Lin for providing excellent technical support and freedom to use the institute’s HPC system in some quite exotic ways. Resources from the Australian National Computational Infrastructure were used during benchmarking experiments.</p>
  </ack>
  <sec>
    <title>Author contributions</title>
    <p>All authors contributed to the study design, figure generation and manuscript writing. H.S., J.M.F., and H.G. collaboratively developed <italic toggle="yes">slow5lib</italic>, <italic toggle="yes">pyslow5</italic>, <italic toggle="yes">Buttery-eel</italic>, modified the <italic toggle="yes">Bonito</italic> source code for BLOW5 integration, designed and executed benchmarking experiments, with supervision from I.W.D.</p>
  </sec>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>I.W.D. manages a fee-for-service sequencing facility at the Garvan Institute of Medical Research that is a customer of ONT but has no further financial relationship. H.G. and J.M.F. have previously received travel and accommodation expenses to speak at ONT conferences. H.G. and I.W.D. have paid consultant roles with Sequin PTY LTD. The authors declare no other competing financial or non-financial interests.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>We acknowledge the following funding support: Australian Medical Research Futures Fund grants MRF1173594 and MRF2016008 [to I.W.D.] and Australian Research Council DECRA Fellowship DE230100178 [to H.G.].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data and code availability</title>
    <p>Datasets used in benchmarking experiments are described in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref> and are available on NCBI Sequence Read Archive at Bioproject PRJNA744329. With the exception of ONT’s commercially available <italic toggle="yes">Guppy</italic> basecaller, all software used in this project is free and open source. SLOW5 and all of its associated software are free and open source:<disp-quote content-type="extract"><p>Slow5tools: <ext-link xlink:href="https://hasindu2008.github.io/slow5tools/" ext-link-type="uri">https://hasindu2008.github.io/slow5tools/</ext-link>;</p><p>Slow5lib and pyslow5: <ext-link xlink:href="https://hasindu2008.github.io/slow5lib/" ext-link-type="uri">https://hasindu2008.github.io/slow5lib/</ext-link>;</p><p>Buttery-eel: <ext-link xlink:href="https://github.com/Psy-Fer/buttery-eel;" ext-link-type="uri">https://github.com/Psy-Fer/buttery-eel</ext-link>;</p><p>Bonito with SLOW5 support: <ext-link xlink:href="https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d;" ext-link-type="uri">https://github.com/Psy-Fer/bonito/tree/489c1cc60e142cc0619f7df0ff0f53dfd4b3e01d</ext-link>;</p><p>SLOW5 format specification documents can be accessed at: <ext-link xlink:href="https://hasindu2008.github.io/slow5specs" ext-link-type="uri">https://hasindu2008.github.io/slow5specs</ext-link>.</p></disp-quote></p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad352-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Alonge</surname><given-names>M</given-names></string-name>, <string-name><surname>Wang</surname><given-names>X</given-names></string-name>, <string-name><surname>Benoit</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Major impacts of widespread structural variation on gene expression and crop improvement in tomato</article-title>. <source>Cell</source><year>2020</year>;<volume>182</volume>:<fpage>145</fpage>–<lpage>61.e23</lpage>.<pub-id pub-id-type="pmid">32553272</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Amarasinghe</surname><given-names>SL</given-names></string-name>, <string-name><surname>Su</surname><given-names>S</given-names></string-name>, <string-name><surname>Dong</surname><given-names>X</given-names></string-name></person-group><etal>et al</etal><article-title>Opportunities and challenges in long-read sequencing data analysis</article-title>. <source>Genome Biol</source><year>2020</year>;<volume>21</volume>:<fpage>30</fpage>.<pub-id pub-id-type="pmid">32033565</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bao</surname><given-names>Y</given-names></string-name>, <string-name><surname>Wadden</surname><given-names>J</given-names></string-name>, <string-name><surname>Erb-Downward</surname><given-names>JR</given-names></string-name></person-group><etal>et al</etal><article-title>SquiggleNet: real-time, direct classification of nanopore signals</article-title>. <source>Genome Biol</source><year>2021</year>;<volume>22</volume>:<fpage>298</fpage>.<pub-id pub-id-type="pmid">34706748</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Beyter</surname><given-names>D</given-names></string-name>, <string-name><surname>Ingimundardottir</surname><given-names>H</given-names></string-name>, <string-name><surname>Oddsson</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Long-read sequencing of 3,622 icelanders provides insight into the role of structural variants in human diseases and other traits</article-title>. <source>Nat Genet</source><year>2021</year>;<volume>53</volume>:<fpage>779</fpage>–<lpage>86</lpage>.<pub-id pub-id-type="pmid">33972781</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B5">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Galey</surname><given-names>M</given-names></string-name>, <string-name><surname>Reed</surname><given-names>P</given-names></string-name>, <string-name><surname>Wenger</surname><given-names>T</given-names></string-name></person-group><etal>et al</etal> 3-hour genome sequencing and targeted analysis to rapidly assess genetic risk. <italic toggle="yes">medRxiv</italic><year>2022</year>. doi:<pub-id pub-id-type="doi">10.1101/2022.09.09.22279746</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Samarakoon</surname><given-names>H</given-names></string-name>, <string-name><surname>Jenner</surname><given-names>SP</given-names></string-name></person-group><etal>et al</etal><article-title>Fast nanopore sequencing data analysis with SLOW5</article-title>. <source>Nat Biotechnol</source><year>2022</year>;<volume>40</volume>:<fpage>1026</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">34980914</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Lam</surname><given-names>CW</given-names></string-name>, <string-name><surname>Jayatilaka</surname><given-names>G</given-names></string-name></person-group><etal>et al</etal><article-title>GPU accelerated adaptive banded event alignment for rapid comparative nanopore signal analysis</article-title>. <source>BMC Bioinformatics</source><year>2020</year>;<volume>21</volume>:<fpage>343</fpage>.<pub-id pub-id-type="pmid">32758139</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Goenka</surname><given-names>SD</given-names></string-name>, <string-name><surname>Gorzynski</surname><given-names>JE</given-names></string-name>, <string-name><surname>Shafin</surname><given-names>K</given-names></string-name></person-group><etal>et al</etal><article-title>Accelerated identification of disease-causing variants with ultra-rapid nanopore genome sequencing</article-title>. <source>Nat Biotechnol</source><year>2022</year>;<volume>40</volume>:<fpage>1035</fpage>–<lpage>41</lpage>.<pub-id pub-id-type="pmid">35347328</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B9">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname><given-names>M</given-names></string-name>, <string-name><surname>Billingsley</surname><given-names>KJ</given-names></string-name>, <string-name><surname>Mastoras</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal> Scalable nanopore sequencing of human genomes provides a comprehensive view of haplotype-resolved variation and methylation. <italic toggle="yes">bioRxiv</italic><year>2023</year>. doi:<pub-id pub-id-type="doi">10.1101/2023.01.12.523790</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Otsuki</surname><given-names>A</given-names></string-name>, <string-name><surname>Okamura</surname><given-names>Y</given-names></string-name>, <string-name><surname>Ishida</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Construction of a trio-based structural variation panel utilizing activated T lymphocytes and long-read sequencing technology</article-title>. <source>Commun Biol</source><year>2022</year>;<volume>5</volume>:<fpage>991</fpage>.<pub-id pub-id-type="pmid">36127505</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Samarakoon</surname><given-names>H</given-names></string-name>, <string-name><surname>Ferguson</surname><given-names>JM</given-names></string-name>, <string-name><surname>Jenner</surname><given-names>SP</given-names></string-name></person-group><etal>et al</etal><article-title>Flexible and efficient handling of nanopore sequencing signal data with slow5tools</article-title>. <source>Genome Biol</source><year>2023</year>;<volume>24</volume>:<fpage>69</fpage>.<pub-id pub-id-type="pmid">37024927</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Senanayake</surname><given-names>A</given-names></string-name>, <string-name><surname>Gamaarachchi</surname><given-names>H</given-names></string-name>, <string-name><surname>Herath</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>DeepSelectNet: deep neural network based selective sequencing for oxford nanopore sequencing</article-title>. <source>BMC Bioinformatics</source><year>2023</year>;<volume>24</volume>:<fpage>31</fpage>.<pub-id pub-id-type="pmid">36709261</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shafin</surname><given-names>K</given-names></string-name>, <string-name><surname>Pesout</surname><given-names>T</given-names></string-name>, <string-name><surname>Lorig-Roach</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>. <source>Nat Biotechnol</source><year>2020</year>;<volume>38</volume>:<fpage>1044</fpage>–<lpage>53</lpage>.<pub-id pub-id-type="pmid">32686750</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B14">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Shih</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Saadat</surname><given-names>H</given-names></string-name>, <string-name><surname>Parameswaran</surname><given-names>S</given-names></string-name></person-group><etal>et al</etal> Efficient real-time selective genome sequencing on resource-constrained devices. <italic toggle="yes">arXiv</italic><year>2022</year>. doi:<pub-id pub-id-type="doi">10.48550/arXiv.2211.07340</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Simpson</surname><given-names>JT</given-names></string-name>, <string-name><surname>Workman</surname><given-names>RE</given-names></string-name>, <string-name><surname>Zuzarte</surname><given-names>PC</given-names></string-name></person-group><etal>et al</etal><article-title>Detecting DNA cytosine methylation using nanopore sequencing</article-title>. <source>Nat Methods</source><year>2017</year>;<volume>14</volume>:<fpage>407</fpage>–<lpage>10</lpage>.<pub-id pub-id-type="pmid">28218898</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wang</surname><given-names>Y</given-names></string-name>, <string-name><surname>Zhao</surname><given-names>Y</given-names></string-name>, <string-name><surname>Bollas</surname><given-names>A</given-names></string-name></person-group><etal>et al</etal><article-title>Nanopore sequencing technology, bioinformatics and applications</article-title>. <source>Nat Biotechnol</source><year>2021</year>;<volume>39</volume>:<fpage>1348</fpage>–<lpage>65</lpage>.<pub-id pub-id-type="pmid">34750572</pub-id></mixed-citation>
    </ref>
    <ref id="btad352-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhang</surname><given-names>H</given-names></string-name>, <string-name><surname>Li</surname><given-names>H</given-names></string-name>, <string-name><surname>Jain</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Real-time mapping of nanopore raw signals</article-title>. <source>Bioinformatics</source><year>2021</year>;<volume>37</volume>:<fpage>i477</fpage>–<lpage>i483</lpage>.<pub-id pub-id-type="pmid">34252938</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
