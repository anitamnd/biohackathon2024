<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3476335</article-id>
    <article-id pub-id-type="pmid">22945789</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/bts525</article-id>
    <article-id pub-id-type="publisher-id">bts525</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group>
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>JEnsembl: a version-aware Java API to Ensembl data systems</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Paterson</surname>
          <given-names>Trevor</given-names>
        </name>
        <xref ref-type="corresp" rid="bts525-COR1">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Law</surname>
          <given-names>Andy</given-names>
        </name>
      </contrib>
    </contrib-group>
    <aff>Division of Genetics and Genomics, The Roslin Institute and Royal (Dick) School of Veterinary Studies, University of Edinburgh, Easter Bush, Midlothian EH25 9RG, UK</aff>
    <author-notes>
      <corresp id="bts525-COR1">*To whom correspondence should be addressed.</corresp>
      <fn>
        <p>Associate Editor: Alfonso Valencia</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>1</day>
      <month>11</month>
      <year>2012</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>3</day>
      <month>9</month>
      <year>2012</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>3</day>
      <month>9</month>
      <year>2012</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. -->
    <volume>28</volume>
    <issue>21</issue>
    <fpage>2724</fpage>
    <lpage>2731</lpage>
    <history>
      <date date-type="received">
        <day>12</day>
        <month>6</month>
        <year>2012</year>
      </date>
      <date date-type="rev-recd">
        <day>16</day>
        <month>8</month>
        <year>2012</year>
      </date>
      <date date-type="accepted">
        <day>20</day>
        <month>8</month>
        <year>2012</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2012. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2012</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/3.0">
        <license-p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/3.0">http://creativecommons.org/licenses/by/3.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Motivation:</bold> The Ensembl Project provides release-specific Perl APIs for efficient high-level programmatic access to data stored in various Ensembl database schema. Although Perl scripts are perfectly suited for processing large volumes of text-based data, Perl is not ideal for developing large-scale software applications nor embedding in graphical interfaces. The provision of a novel Java API would facilitate type-safe, modular, object-orientated development of new Bioinformatics tools with which to access, analyse and visualize Ensembl data.</p>
      <p><bold>Results:</bold> The JEnsembl API implementation provides basic data retrieval and manipulation functionality from the Core, Compara and Variation databases for all species in Ensembl and EnsemblGenomes and is a platform for the development of a richer API to Ensembl datasources. The JEnsembl architecture uses a text-based configuration module to provide evolving, versioned mappings from database schema to code objects. A single installation of the JEnsembl API can therefore simultaneously and transparently connect to current and previous database instances (such as those in the public archive) thus facilitating better analysis repeatability and allowing ‘through time’ comparative analyses to be performed.</p>
      <p><bold>Availability:</bold> Project development, released code libraries, Maven repository and documentation are hosted at SourceForge (<ext-link ext-link-type="uri" xlink:href="http://jensembl.sourceforge.net">http://jensembl.sourceforge.net</ext-link>).</p>
      <p><bold>Contact:</bold><email>jensembl-develop@lists.sf.net</email>, <email>andy.law@roslin.ed.ac.uk</email>, <email>trevor.paterson@roslin.ed.ac.uk</email></p>
    </abstract>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="SEC1">
    <title>1 INTRODUCTION</title>
    <p>The Ensembl Project provides a genome information system for the annotation, analysis and display of genome assembly data pertaining to vertebrates [ENSEMBL (<ext-link ext-link-type="uri" xlink:href="http://www.ensembl.org">http://www.ensembl.org</ext-link>)] and for other taxonomic groups [ENSEMBLGENOMES (<ext-link ext-link-type="uri" xlink:href="http://www.ensemblgenomes.org">http://www.ensemblgenomes.org</ext-link>)]. Together with core genomic annotations, the curated resources now include comparative genomic, variation, functional genomic and regulatory data stored in separate but linked database schemas (Flicek <italic>et al.</italic>, 2010).</p>
    <p>Access to data in Ensembl databases is freely provided through Ensembl’s interactive web browser, the BioMart data mining tool (<ext-link ext-link-type="uri" xlink:href="http://www.ensembl.org/biomart/martview">http://www.ensembl.org/biomart/martview</ext-link>) and web services (<ext-link ext-link-type="uri" xlink:href="http://www.biomart.org/martservice.html">http://www.biomart.org/martservice.html</ext-link>), publicly exposed MySQL databases (ensembldb.ensembl.org:5306; mysql.ebi.ac.uk:4157; ensembldb.ensembl.org:3306) and programmatically through Perl API modules (<ext-link ext-link-type="uri" xlink:href="http://www.ensembl.org/info/data/api.html">http://www.ensembl.org/info/data/api.html</ext-link>) (<xref ref-type="bibr" rid="bts525-B5">Stabenau <italic>et al.</italic>, 2004</xref>). The Perl API is ideally suited to the processing of large volumes of text-based data and as such is used for the majority of the Ensembl systems’ internal workflows. However, Perl is not an ideal language for embedding in graphical interfaces.</p>
    <p>In contrast, Java provides a robust, object-oriented programming environment and is a preferable language for implementing large-scale projects, with the benefits of compile time type checking, enforced interfaces, the potential to separate interface from implementation (allowing for transparent alternative implementations), multi-threading, better support for graphical user interfaces and support for garbage collection of circularly referenced objects. Java, like Perl, also benefits from a vast resource of freely available diverse code libraries and development frameworks and tools, including open source projects in the Bioinformatics domain.</p>
    <p>Previously, Ensembl provided the ENSJ library, a Java API for data access in Java or Jython (<xref ref-type="bibr" rid="bts525-B5">Stabenau <italic>et al.</italic>, 2004</xref>). Like the Perl API, ENSJ intimately embedded data access code (i.e. the actual SQL statements that access the Ensembl MySQL databases) within the body of code representing the genetic objects. As a consequence, a new API release had to be generated for each database schema version (Ensembl release) configured to connect and retrieve data from its cognate schema, with no backwards compatibility guaranteed. As with the Perl API, the dispersed nature of the embedded SQL statements meant that changes required to keep pace with each database release were spread across multiple files, which was an inefficient process. In 2006, ENSJ was discontinued when the Ensembl team elected to focus their finite resources on the maintenance of the Perl API code alone. Since then, despite the growing number of bioinformatic tools being developed in Java, there has been no Java Ensembl API available.</p>
    <p>Other parties have, however, developed several partial APIs to Ensembl in a number of alternative programming languages, particularly to support bulk data download. Typically, these APIs do not directly address the issue of schema versioning, and many are not actively maintained. Two of the most widely used such APIs are the Bioconductor R interface to BioMart, ‘biomaRt’ (<ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/packages/release/bioc/html/biomaRt.html">http://www.bioconductor.org/packages/release/bioc/html/biomaRt.html</ext-link>), although this is a biomart API rather than an Ensembl API <italic>per se</italic>, and the BioGem plug-in ‘ruby-ensembl-api’ (<ext-link ext-link-type="uri" xlink:href="http://bioruby-annex.rubyforge.org/">http://bioruby-annex.rubyforge.org/</ext-link>) which uses Active Records to abstract over the Ensembl Core Schema. Although the ActiveRecord design allows the API code to remain ‘in sync’ with the database schema automatically, no higher level data model is generated and scripts that run against a particular release of the Ensembl databases will not run against other releases if the names of tables or columns have been changed. Several Python-based APIs that have been made available have not evolved with schema changes and provide limited data models [e.g. PyCogent (<ext-link ext-link-type="uri" xlink:href="http://pycogent.sourceforge.net">http://pycogent.sourceforge.net</ext-link>) (<xref ref-type="bibr" rid="bts525-B4">Knight <italic>et al.</italic>, 2007</xref>), PyGr (<ext-link ext-link-type="uri" xlink:href="http://code.google.com/p/pygr/wiki/PygrOnEnsembl">http://code.google.com/p/pygr/wiki/PygrOnEnsembl</ext-link>), cache-ensembl (<ext-link ext-link-type="uri" xlink:href="http://pypi.python.org/pypi/cache_ensembl">http://pypi.python.org/pypi/cache_ensembl</ext-link>)].</p>
    <p>A new, easily maintainable Java-based API to the Ensembl system would be a timely and highly effective addition to the bioinformatics toolbox. Such an API would allow integration between graphical user interfaces and Ensembl datasources and between other bioinformatic resources and libraries implemented in Java [for example, the BioJava (<ext-link ext-link-type="uri" xlink:href="http://www.biojava.org/wiki/Main_Page">http://www.biojava.org</ext-link>) framework; <xref ref-type="bibr" rid="bts525-B3">Holland <italic>et al.</italic>, 2008</xref>].</p>
    <p>A full Java API to the Ensembl system would replicate all the data access functionality of the Perl API Core, Compara, FuncGen and Variation modules and would:
<list list-type="order"><list-item><p>Connect to and extract data from the current release version of Ensembl.</p></list-item><list-item><p>Access all instances of Ensembl data systems including single-species databases at Ensembl and EnsemblGenomes and the multi-species databases (bacterial collections) at EnsemblGenomes.</p></list-item><list-item><p>Access data from all database types: Core, FuncGen, Variation, Compara, etc.</p></list-item><list-item><p>Emit software objects corresponding to the major object types within Ensembl including Sequence Regions, Markers, Alleles, Genes, Exons, Transcripts, CoordinateSystems and AnnotationFeatures of numerous kinds.</p></list-item><list-item><p>Map between appropriate CoordinateSystem levels for a given genome (thus allowing actual DNA sequence data to be retrieved for features annotated at higher levels, e.g. genes on chromosomes).</p></list-item><list-item><p>Provide an architecture for updating the API connectivity and functionality as new versions of Ensembl are released, while maintaining backwards compatibility with earlier releases (improve on the Perl requirement for version-specific API releases).</p></list-item><list-item><p>Be compatible with (and build upon) existing open source Java libraries for bioinformatics where relevant (e.g. BioJava 3.0).</p></list-item></list>
</p>
    <p>We report here the implementation of an extendable Ensembl Java API that demonstrates the tractability of the objectives above; specifically it provides access to all versions of databases currently published at Ensembl and EnsemblGenomes. It implements core functionality for the retrieval of chromosome, gene, transcript, exon, protein data, etc. from ‘Core’ databases; maps locations between CoordinateSystems and maps transparently between database versions where changes in the schema necessitate different SQL statements to extract the same information. We have also implemented retrieval of SNP variation information from the ‘Variation’ databases and comparative homology information from the ‘Compara’ databases.</p>
    <p>We demonstrate the potential utility of our Ensembl Java API by incorporating the JEnsembl libraries in a plug-in created for the Savant Genome Browser (<ext-link ext-link-type="uri" xlink:href="http://www.savantbrowser.com/">http://www.savantbrowser.com/</ext-link>) (<xref ref-type="bibr" rid="bts525-B1">Fiume <italic>et al.</italic>, 2010</xref>), and in our Genetic Map Drawing application ‘ArkMAP’ (<ext-link ext-link-type="uri" xlink:href="http://www.thearkdb.org/arkdb/download.jsp">http://www.thearkdb.org/arkdb/download.jsp</ext-link>). These plug-ins demonstrate how third-party developers can use JEnsembl to access data from Ensembl datasources, allowing the graphical display and alignment of chromosomal sequences, variations and exceptions, gene annotations and gene homologies.</p>
  </sec>
  <sec id="SEC2">
    <title>2 IMPLEMENTATION</title>
    <p>JEnsembl is implemented in Java version 1.6 following a modular design pattern using Maven software management. Project development is hosted on SourceForge where code is available from the subversion repository (<ext-link ext-link-type="uri" xlink:href="http://jensembl.sourceforge.net/">http://jensembl.sourceforge.net/</ext-link>; <ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/jensembl/">https://sourceforge.net/projects/jensembl/</ext-link>). The architecture of the project is shown schematically in <xref ref-type="fig" rid="bts525-F1">Figure 1</xref>. Each of the separate interdependent modules of the API is built as a Maven artifact allowing for public distribution via Maven repositories. Alternatively, the Jar artifacts can be used as standard Java libraries outwith a Maven build environment. Each module is coded against full JUnit tests, with an additional module providing demonstration code and functional tests for data retrieval by the API from remote datasources. Current release versions of the libraries are available on the project website and Maven repository.
<fig id="bts525-F1" position="float"><label>Fig. 1.</label><caption><p>JEnsembl architecture. Schematic diagram of the modular JEnsembl architecture, where schema-versioned MyBatis configurations in the ensembl-config module are mapped to DatasourceAware objects using the MyBatis data mapping framework. Connection to external Ensembl datasources is via the MySQL JDBC connector</p></caption><graphic xlink:href="bts525f1p"/></fig></p>
    <p>The modular design of the JEnsembl artifacts is described more fully in the online documentation. In brief, the JEnsembl API defines Java objects corresponding to the various genetic objects described in the Ensembl datasources (i.e. Chromosomes, DNASequences, Features, Species, Genes, etc.). These data objects are created and populated through the data access layer (see <xref ref-type="fig" rid="bts525-F1">Fig. 1</xref>) using MyBatis (<ext-link ext-link-type="uri" xlink:href="http://www.mybatis.org/">http://www.mybatis.org/</ext-link>) as the RDBMS-to-Java object-mapping tool. A fundamental goal of the project design was to separate schema version-specific database query code from the data model; this is achieved by partitioning the SQL code and MyBatis data mapping rules into a hierarchy of XML configuration files in the configuration module (see <xref ref-type="fig" rid="bts525-F2">Fig. 2</xref>). Configurations in the <italic>schema.properties</italic> file automate which mapping rules are used for each Ensembl release-version, allowing the data access code seamlessly to maintain correct data mappings as the Ensembl data schema evolves, while retaining backwards compatibility with earlier schema.
<fig id="bts525-F2" position="float"><label>Fig. 2.</label><caption><p>Data mapping between database releases and schema versions. (<bold>A</bold>) The configuration file hierarchy in the <italic>ensembl-config</italic> module. The <italic>ensembldb</italic>, <italic>ensembldb-archives</italic> and <italic>ensemblgenomes</italic> properties files hold JDBC connection parameters, while <italic>schema_version_mappings</italic> specifies which MyBatis configurations are to be used for each Ensembl release version. The base <italic>Configuration.xml</italic> and <italic>Database.xml</italic> files configure connection at the datasource level, while release-specific MyBatis mappings are held in database type-specific directories: <italic>schema/XX/compara</italic>, <italic>core</italic>, <italic>funcgen</italic> and <italic>variation</italic>; rules specified in a <italic>Configuration.xml</italic> file in each directory allows a release configuration to use mapping files from different directories. (<bold>B</bold>) Abridged listing of <italic>schema_version_mappings</italic> properties, showing how the appropriate mappings of database type and version to MyBatis configuration directories are specified. Core and Compara mappings were developed for release 57 and are backwards compatible to release 51. Variation mappings were introduced from version 62 and Core mapping rules updated at release 65</p></caption><graphic xlink:href="bts525f2p"/></fig></p>
    <p>To connect to a datasource (e.g. Ensembl), a <italic>DBRegistry</italic> object is instantiated by injecting either a default <italic>RegistryConfiguration</italic> object read from the current <italic>ensembl-config</italic> module or a <italic>RegistryConfiguration</italic> generated from locally supplied properties. The <italic>RegistryConfiguration</italic> defines the set of MyBatis configuration files to read for each version of the database/schema identified within the installation. Upon DBRegistry initialization, the names of available databases at the configured datasource are parsed using the Ensembl naming conventions and meta-data tables to identify database-type, species, assembly and schema release versions. The DBRegistry object can then be queried for lists of known databases or species, or can return objects extracted from current or specific releases of named species databases.</p>
    <p>JEnsembl represents each of the database schema with a hierarchy of subclasses of the Database class, (CoreDatabase, ComparisonDatabase, VariationDatabase, etc.). A correctly typed instance of a Database class is constructed by the Registry for each species/version/schema database, with each Database object creating its own instance of a MyBatis SqlSessionFactory, configured (via the Configuration artifact) with the correct SQL mapping files for the appropriate schema type and version. Correctly configured data access is controlled by DAOFactory objects; an appropriate type of DAOFactory is created on demand for each Database instance and automatically configured to use the correct MyBatis mapping rules for its schema version. The DAOFactory provides the DAO access objects which perform data queries using MyBatis SqlSessions provided by their shared DAOFactory. These SQL queries typically return DatasourceAware objects; each DatasourceAware object holds a reference to its own DAOFactory, which is used to perform lazy loading of data fields and perform queries about further data relationships. Hence, all access to a particular database is effectively performed through a DAOFactory singleton (providing the opportunity for implementing data caching).</p>
    <p>Databases with schema versions for which configuration details are not explicitly provided will not be made available by the Registry, thus avoiding incompatibility with unsupported older releases or newer releases that post-date the API code and that have not yet been mapped. New Ensembl releases requiring changes to SQL code are handled simply by defining a new mapping configuration. Where no changes are needed, existing configurations can be reused in a flexible and granular fashion—new mapping configurations can import existing elements and only need to replace the individual mapping files that cover the modified part of the schema. This architecture is illustrated in <xref ref-type="fig" rid="bts525-F2">Figure 2</xref>.</p>
    <p>The Ensembl datasources contain not only the actual DNA sequences of genome assemblies but also annotations of features on the assembly derived from Ensembl’s own pipeline analyses and external sources, together with derived relationships between these features. Core sequence and assembly information together with gene and transcription annotations are stored in a ‘Core’ schema, while the other (optional) data schema are used to hold further information about the better studied model species. Access to data in the other (non-Core) database schema is controlled through the Core DAO Factory, which, for example, can supply an instance of a DAOVariationFactory for the correct species/version Variation Database, with its own correctly configured SQLSessionFactory. This DAOVariationFactory supplies a DAOVariation object, which may be used to retrieve all the variations for a given chromosomal region. Comparative genomic data are stored somewhat differently in Ensembl, and a DAOComparaFactory accesses a single Compara database for each release of Ensembl, which holds the results of pair-wise inter-species comparisons (comprising both genomic alignments and gene family and homology data).</p>
    <p>The EnsemblGenomes datasource uses the same (versioned) schema as Ensembl (which is now focused as a Vertebrate resource), but with species organized into five separate taxonomic groups, each with its own Compara database. Therefore, as with the Ensembl Perl API, JEnsembl can use the same API for data access from EnsemblGenomes with the added benefit of version aware configuration on the fly. However, EnsemblGenomes bacterial datasources differ significantly in being organized into multi-species databases according to phylogeny. Ensembl adapted their schema to handle multi-species resources, and the Perl API handles all schema identically (as potentially multi-species). In JEnsembl, multi-species resources are currently handled by implementing separate ‘multi-species’ interfaces in Database and Factory objects. Because the underlying schema is identical, the multi-species data access architecture could be used for accessing standard single-species datasources. However, currently we feel retaining the single-species database paradigm is simpler for the majority of users and allows for easier representation of a ‘species’ object, shared between database release versions.</p>
    <p>In order to harness the comprehensive sequence manipulation features of BioJava libraries, we extended the BioJava 3.0 Core DNASequence object for the JEnsembl DNASequence object, providing an Ensembl SequenceReader that can lazy-load sequence on demand from the Ensembl datasource. This provides the JEnsembl Sequence objects with BioJava API behaviour, for example reading protein sequences from translated transcripts. Incorporation of third-party open source libraries not only obviates code duplication but also enables interoperability with a wider range of third-party software.</p>
    <p>The JEnsembl release libraries were used to create a novel plug-in for the Savant Genome Browser (Fiume <italic>et al.</italic>, 2011). The plug-in source code and binary Jars for different versions of the browser are also available from the JEnsembl project site on SourceForge (<ext-link ext-link-type="uri" xlink:href="http://jensembl.sourceforge.net/savant.html">http://jensembl.sourceforge.net/savant.html</ext-link>). Our ‘ArkMAP’ map drawing tool has recently been converted to retrieve chromosome gene annotation data directly from Ensembl datasources using the JEnsembl API instead of the BioMart web services, thus allowing ArkMAP to be ‘Version Aware’ for Ensembl data. JEnsembl-mediated access to Compara data allows the discovery and alignment of regions of conserved synteny between species and SNP marker mappings can be retrieved from Variation datasources.</p>
  </sec>
  <sec id="SEC3">
    <title>3 RESULTS AND DISCUSSION</title>
    <sec id="SEC3.1">
      <title>3.1 JEnsembl</title>
      <p>The JEnsembl development code, Jar library releases (Maven artifacts) and documentation including JavaDocs are available on SourceForge (current release 1.12). Access to an Ensembl datasource is achieved by initializing a DBRegistry object either with one of the two configurations provided (ENSEMBLDB or ENSEMBLGENOMES) or with user-specified configuration properties that allow connection to alternate datasources using the Ensembl schema, for example Ensembl Archives or private, local data resources. Initialization of the Registry object sorts and registers the available databases at the selected datasource: their release number, schema type and species, determining which releases match the schema version mappings in the current JEnsembl Configuration module. Thereafter, data from any ‘known’ database type and version can be interrogated through the Registry. In the absence of specified type or version number, a query retrieves data by default from the most recent configured (i.e<italic>.</italic> ‘known’) version of the appropriate database type. In addition to providing public access to the databases, the Registry provides public access to Species objects by name or alias, suitable for more high-level usage. Species can then be queried for information about genes, sequences, etc. without any knowledge of the Ensembl data structure.</p>
      <p><xref ref-type="fig" rid="bts525-F3">Figure 3</xref> demonstrates example code usage, starting with Registry initialization and retrieval of a Species object, which is then used to access data from specified release versions of the Ensembl datasource. Thus, the current or any earlier release version of chicken chromosome 2 (together with all of it annotations) can be retrieved (e.g. release ‘60’ in <xref ref-type="fig" rid="bts525-F3">Fig. 3</xref>). This allows reproducible access to the correct version of data used by historical analyses and allows comparison of different versions of the data using a single API code installation. This is illustrated by the single code snippet shown in <xref ref-type="fig" rid="bts525-F4">Figure 4</xref> where data pertaining to a single human gene can be retrieved from the current and previous 17 human core database releases available at the Ensembl datasource (and for which the JEnsembl API has configured schema mappings). This allows, for example, the location of the gene to be compared over time, between Ensembl releases, assembly builds, patches and changes to the gene model and permits many other ‘through-time’ analyses of genome assemblies to be contemplated. The retrieval of similar multi-release data using Perl would require multiple, separate, release-specific versions of the Ensembl Perl API to be installed and involve complex library path manipulations.
<fig id="bts525-F3" position="float"><label>Fig. 3.</label><caption><p>Example usage of JEnsembl Java API (v1.12). The Species ‘ecoli’ retrieved in the final code block is actually a CollectionSpecies because it is retrieved from the ‘escherichia_shigella_collection_core’ databases. CollectionSpecies are slightly less reliable access points than normal Species as there is no guarantee of stable species, strain names and aliases between releases</p></caption><graphic xlink:href="bts525f3p"/></fig>
<fig id="bts525-F4" position="float"><label>Fig. 4.</label><caption><p>Code illustrating JEnsembl API retrieving chromosomal coordinates for a human gene (Ensembl ID ENSG00000153551) for 18 different Ensembl Releases currently available at the ENSEMBLDB datasource (i.e. MySQL databases at ensembldb.ensembl.org:5306). The results reflect different coordinates of this gene in assembly builds 36 and 37. The increase in apparent gene size between release 55 and 56 (highlighted) is due to the addition of further transcripts to the gene model</p></caption><graphic xlink:href="bts525f4p"/></fig></p>
      <p>A central concept within the JEnsembl model is a ‘Mapping’: between source and target ‘MappableObjects’, with source and target coordinates (start, stop, strand). Mappings allow any of the Ensembl annotation types to be located on other types (e.g. genes, exons, variations on chromosomes). When genes are retrieved from a chromosome, the query returns a set of genes, each with its own mapping to the chromosome, while the chromosome is returned with an ordered set of the (inverse) mappings of genes on the chromosome.</p>
      <p>Retrieval of data across the database schema types is achieved transparently, by loading appropriate DAOFactories, and using appropriate identifiers shared across the schema. For example, querying a gene for homologues uses the gene’s stable Ensembl identifier to query the Compara schema, and the target ‘hits’ retrieved contain enough information to convert them to Core schema objects if required (target stable id, chromosome name and coordinates, and target species name). Similarly, queries to retrieve variants from the Variation database are parameterized with the Core sequence identifier and desired range coordinate and return the properties and mapping coordinates of variants within this range.</p>
      <p>The Ensembl pipeline typically annotates features at the highest ‘level’ of coordinate systems used in production of the genome assembly. JEnsembl transparently integrates the varying levels of coordinate systems (chromosome, supercontig, contig, clone, etc.) down to the lowest ‘sequence’ level coordinate system. This is achieved using a hierarchy of interfaces: DNASequence, AssembledDNASequence and Chromosome. AssembledDNASequences contain an assembly of DNASequences (which may themselves be AssembledDNASequences) at a given coordinate system level. Hence, the actual DNA sequence for a given chromosome is returned by lazy loading the assembly mappings and underlying sequence level objects to retrieve the range of actual sequences required. The JEnsembl DNASequence classes are built upon BioJava3 DNASequence and extend the ProxySequenceReader interface to load, read and manipulate sequences.</p>
      <p>Throughout the JEnsembl development process, Ensembl has continued to release successive versions of its datasets, with an evolving data schema. This evolving schema has afforded a challenging opportunity to demonstrate the effectiveness of JEnsembl’s transparent version configuration strategy. For example, a major change was introduced to the Core schema at version 51 to allow multiple species to be held within a single database, with separate coordinate systems being held for each species. Our code must therefore execute different SQL queries when retrieving coordinate system information from database instances before or after this release. Similarly, the merging of separate stable_id tables with the gene, exon, transcript and translation tables in Ensembl release 65 requires different SQL queries to be run post and prior this release. These schema migrations are specified in a hierarchy of MyBatis XML configurations and a properties file specifying which MyBatis configurations should be used for each schema release (see <xref ref-type="fig" rid="bts525-F2">Fig. 2</xref>). The configuration occurs seamlessly and silently and requires no user intervention.</p>
      <p>The JEnsembl development site details many more example code files that may be downloaded, and which demonstrate data access using all of the currently implemented aspects of the API. These files (found in the Ensembl Test artifact) include the data access routines used in the Savant and ArkMAP examples below.</p>
    </sec>
    <sec id="SEC3.2">
      <title>3.2 Savant Plug-In</title>
      <p>To demonstrate the potential utility of JEnsembl to third-party developers, we have implemented a Java plug-in Jar for the Savant Genome. The plug-in allows a Savant user to browse all of the available species and versions available at Ensembl and EnsemblGenomes, and to load chromosome assemblies for display in Savant. These can then be decorated with the gene annotations for that chromosome build (<xref ref-type="fig" rid="bts525-F5">Fig. 5</xref>).
<fig id="bts525-F5" position="float"><label>Fig. 5.</label><caption><p>JEnsembl plug-in for Savant genome browser. (<bold>A</bold>) The user selects the desired species and release version from those available at the selected datasource (Ensembl, EnsemblGenomes or EnsemblGenomes-Bacterial). (<bold>B</bold>) A single chromosome/assembly is selected from those available for the chosen species/release. The chromosome is imported either as a simple coordinate skeleton or with the associated colour-coded genomic sequence. Currently, the only feature annotation that can be imported from the datasource is the gene track, which Savant shows aligned with the DNA Sequence</p></caption><graphic xlink:href="bts525f5p"/></fig></p>
      <p>As in our code examples (<xref ref-type="fig" rid="bts525-F3">Fig. 3</xref>), the plug-in creates a DBRegistry object and presents available databases (and subsequently chromosomes) to the user as drop down selection lists. The gene annotation data for the selected genome are retrieved from gene mappings (for example code, see <xref ref-type="fig" rid="bts525-F3">Fig. 3</xref>) and then passed to the Savant application.</p>
      <p>It should be noted that limitations in the Savant API architecture, whereby data must be passed in as a single BED file, preclude some of the capabilities of the JEnsembl code which has been designed to load sequence details in a ‘lazy’ fashion, i.e. only when needed. For this reason, importing of actual DNA sequence data together with the chromosome coordinates is provided as an optional step and should be avoided for large chromosomes.</p>
    </sec>
    <sec id="SEC3.3">
      <title>3.3 ArkMAP</title>
      <p>ArkMAP is a desktop Java application provided by ArkDB for drawing genetic maps (i.e. linkage maps, radiation-hybrid maps, cytogenetic maps, physical maps). It can download and align mapping data from ArkDB web services and from Ensembl datasources. It has recently been refactored to use the JEnsembl API to retrieve mapping data from JEnsembl. Previously, Ensembl assembly data (e.g. gene location annotations) were retrieved using BioMart web services, which restricted ArkMAP to accessing data in the current Ensembl release (held in BioMart). However, by using the JEnsembl API for data access, ArkMAP becomes release-version aware and data can now be selected for any available Ensembl release. This is important because it allows work performed using previous assemblies to be compared with the current genome assembly. This is illustrated in <xref ref-type="fig" rid="bts525-F6">Figure 6</xref>: an ArkDB map created using the bovine assembly data of Ensembl release 54 can be aligned with gene annotation data from the appropriate Ensembl release, which can in turn be aligned with the most recent assembly release. The JEnsembl API allows additional data exploration: for example the discovery of gene homologies and the identification and alignment of regions of conserved synteny between species (as shown in <xref ref-type="fig" rid="bts525-F6">Fig. 6</xref>) or the retrieval of the coordinates of SNP Markers (e.g. dbSNP markers).
<fig id="bts525-F6" position="float"><label>Fig. 6.</label><caption><p>The ArkMAP application uses JEnsembl for retrieving maps and homologies from Ensembl datasources. ArkMAP can be used to draw genetic maps loaded from ArkDB, Ensembl or local datasources. Here the first 8 Mb of a bovine ePCR map has been loaded from ArkDB, where Ark Markers have been mapped on the Btau4 assembly. The JEnsembl API was then used to retrieve and align the cognate gene-annotated chromosome 1 assembly from Ensembl release 54. JEnsembl was then used to retrieve a more recent (release 66) gene annotated assembly which is aligned to the old assembly. Finally, JEnsembl was used to search for human gene homologies with the bovine genes in this region, and the region of conserved synteny on human chromosome 21 aligned with the bovine chromosome (with colour-coded homology relationships)</p></caption><graphic xlink:href="bts525f6p"/></fig></p>
    </sec>
    <sec id="SEC3.4">
      <title>3.4 Scripting with the JEnsembl API</title>
      <p>The comprehensive Ensembl Perl API is widely used for data access and manipulation by bioinformaticians and Perl is an ideal scripting language for bulk sequence manipulation. However, as further functionality is implemented in JEnsembl, there is greater potential for using Java scripts for data manipulation, a task aided by the use of powerful Java IDE tools such as Netbeans and Eclipse for writing code. Example data access scripts can be found in the Ensembl Test artifact described above and are available on the project website. Use of JEnsembl has both validated the API and driven implementation of new features as required. For example, retrieval of variation data from the Variation schema databases was introduced to support a script that outputs SNPs within a given proximity to an annotated gene, while the requirement for a mechanism to retrieve pseudoautosomal sequences was exposed by scripts which were failing to locate sequence features on the human Y chromosome.</p>
    </sec>
  </sec>
  <sec id="SEC4">
    <title>4 CONCLUSIONS</title>
    <p>The majority of bioinformatic processing of genome information has traditionally been performed using Perl scripting, and the Ensembl Perl API is a fundamental tool for bioinformatic analysis. However, Java developers of bioinformatics tools, particularly graphical display interfaces, have been restricted by the lack of a generic Java API for accessing Ensembl data. In its absence, they have been forced to develop <italic>ad hoc</italic> solutions and data models for importing and representing genome data from Ensembl either directly accessing the raw MySQL datasources (which have an extremely complex data model) or retrieving data from Web Service calls to Ensembl BioMart and converting the raw data to the user’s own genetic data model. All of these methods are fragile to a lesser or greater degree and thus represent ‘workarounds’ rather than ‘solutions’. The provision of this Java API to Ensembl thus represents a valuable new resource for the expanding Java bioinformatics community.</p>
    <p>Our current release version of JEnsembl demonstrates how we believe certain key aspects of a Java API should be addressed, in particular schema versioning and interoperability with other available Java libraries. It provides the framework on which to build a fully functional, open source implementation of a Java Ensembl API equivalent in functionality to the Perl API maintained by the Ensembl team. The project is hosted on SourceForge where we hope it will develop as a collaborative project similar to the BioJava code base and as such we call for and welcome expressions of interest from other developers.</p>
  </sec>
</body>
<back>
  <ack>
    <title>ACKNOWLEDGEMENTS</title>
    <p>We wish to thank the numerous BioJava3 developers for helpful discussions during the early stages of this project and the Ensembl development teams for helpful information and feedback.</p>
    <p><italic>Funding</italic>: Supported by<funding-source> Institute Strategic Grant</funding-source> funding from the <funding-source>Biotechnology and Biological Sciences Research Council</funding-source>.</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </ack>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="bts525-B1">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fiume</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Savant: genome browser for high-throughput sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>1938</fpage>
        <lpage>1944</lpage>
        <pub-id pub-id-type="pmid">20562449</pub-id>
      </element-citation>
    </ref>
    <ref id="bts525-B2">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ensembl’s 10th year, 2010</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2008</year>
        <volume>38</volume>
        <issue>Suppl. 1</issue>
        <fpage>D557</fpage>
        <lpage>D562</lpage>
        <pub-id pub-id-type="pmid">19906699</pub-id>
      </element-citation>
    </ref>
    <ref id="bts525-B3">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holland</surname>
            <given-names>RCG</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BioJava: an Open-Source Framework for Bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2096</fpage>
        <lpage>2097</lpage>
        <pub-id pub-id-type="pmid">18689808</pub-id>
      </element-citation>
    </ref>
    <ref id="bts525-B4">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knight</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PyCogent: a toolkit for making sense from sequence</article-title>
        <source>Genome Biol.</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>R171</fpage>
        <pub-id pub-id-type="pmid">17708774</pub-id>
      </element-citation>
    </ref>
    <ref id="bts525-B5">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stabenau</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Ensembl core software libraries</article-title>
        <source>Genome Res.</source>
        <year>2004</year>
        <volume>14</volume>
        <fpage>929</fpage>
        <lpage>933</lpage>
        <pub-id pub-id-type="pmid">15123588</pub-id>
      </element-citation>
    </ref>
    <ref id="bts525-B6">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Strozzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>A Ruby API to query the Ensembl database for genomic features</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>1013</fpage>
        <lpage>1014</lpage>
        <pub-id pub-id-type="pmid">21278190</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
