<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8442456</article-id>
    <article-id pub-id-type="publisher-id">2483</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-021-02483-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Trycycler: consensus long-read assemblies for bacterial genomes</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-8349-0778</contrib-id>
        <name>
          <surname>Wick</surname>
          <given-names>Ryan R.</given-names>
        </name>
        <address>
          <email>rrwick@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Judd</surname>
          <given-names>Louise M.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Cerdeira</surname>
          <given-names>Louise T.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hawkey</surname>
          <given-names>Jane</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Méric</surname>
          <given-names>Guillaume</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vezina</surname>
          <given-names>Ben</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wyres</surname>
          <given-names>Kelly L.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Holt</surname>
          <given-names>Kathryn E.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.1002.3</institution-id><institution-id institution-id-type="ISNI">0000 0004 1936 7857</institution-id><institution>Department of Infectious Diseases, Central Clinical School, </institution><institution>Monash University, </institution></institution-wrap>Melbourne, VIC 3004 Australia </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.1051.5</institution-id><institution-id institution-id-type="ISNI">0000 0000 9760 5620</institution-id><institution>Cambridge Baker Systems Genomics Initiative, </institution><institution>Baker Heart &amp; Diabetes Institute, </institution></institution-wrap>Melbourne, VIC 3004 Australia </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.8991.9</institution-id><institution-id institution-id-type="ISNI">0000 0004 0425 469X</institution-id><institution>Department of Infection Biology, </institution><institution>London School of Hygiene &amp; Tropical Medicine, </institution></institution-wrap>WC1E 7HT, London, UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>14</day>
      <month>9</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>9</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>22</volume>
    <elocation-id>266</elocation-id>
    <history>
      <date date-type="received">
        <day>8</day>
        <month>7</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>31</day>
        <month>8</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">While long-read sequencing allows for the complete assembly of bacterial genomes, long-read assemblies contain a variety of errors. Here, we present Trycycler, a tool which produces a consensus assembly from multiple input assemblies of the same genome. Benchmarking showed that Trycycler assemblies contained fewer errors than assemblies constructed with a single tool. Post-assembly polishing further reduced errors and Trycycler+polishing assemblies were the most accurate genomes in our study. As Trycycler requires manual intervention, its output is not deterministic. However, we demonstrated that multiple users converge on similar assemblies that are consistently more accurate than those produced by automated assembly tools.</p>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s13059-021-02483-z.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Bacterial genomics</kwd>
      <kwd>Whole-genome sequencing</kwd>
      <kwd>Long-read sequencing</kwd>
      <kwd>Oxford Nanopore sequencing</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000865</institution-id>
            <institution>bill and melinda gates foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>OPP1175797</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100008717</institution-id>
            <institution>sylvia and charles viertel charitable foundation</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>australian government research training program scholarship</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par2">Long-read assembly is the process of reconstructing a genome from long sequencing reads (&gt;10 kbp), such as those made by Oxford Nanopore Technologies (ONT) or Pacific Biosciences (PacBio) platforms. ONT’s long-read sequencing platforms are popular for bacterial sequencing due to their low cost per sample [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. Since long reads can span larger genomic repeats than short reads (e.g., reads from Illumina sequencing platforms), long-read assembly can produce larger contigs than short-read assembly [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR6">6</xref>]. For bacterial genomes, it is often possible to produce a long-read-only assembly (an assembly made solely from long-read data) which is complete: one fully assembled contig for each replicon in the genome [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR8">8</xref>]. There are many long-read assemblers appropriate for use on bacterial genomes, including Canu [<xref ref-type="bibr" rid="CR9">9</xref>], Flye [<xref ref-type="bibr" rid="CR10">10</xref>], Raven [<xref ref-type="bibr" rid="CR11">11</xref>], and Redbean [<xref ref-type="bibr" rid="CR12">12</xref>]. Each has advantages and disadvantages, but in a recent benchmarking study, we found Flye to be the best-performing bacterial genome assembler in many metrics [<xref ref-type="bibr" rid="CR13">13</xref>].</p>
    <p id="Par3">Since long-read assembly of bacterial genomes can reliably yield chromosome-scale contigs, it is sometimes considered to be a solved problem [<xref ref-type="bibr" rid="CR14">14</xref>], with much assembler development now focusing on more challenging scenarios such as eukaryotic genomes and metagenomes [<xref ref-type="bibr" rid="CR15">15</xref>, <xref ref-type="bibr" rid="CR16">16</xref>]. However, long-read bacterial assemblies are not perfect. Small-scale errors (such as homopolymer-length errors) are commonly discussed and addressed [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR17">17</xref>–<xref ref-type="bibr" rid="CR19">19</xref>], but larger-scale errors (tens to hundreds of base pairs) also occur in most assemblies [<xref ref-type="bibr" rid="CR13">13</xref>]. Even though most bacterial replicons are circular, long-read assemblers often fail to produce cleanly circularized contigs, where the last base in the contig is immediately followed by the first base. Spurious contigs are often present in assemblies (e.g., from contaminant sequences), and small plasmids can be omitted due to their underrepresentation in ONT read sets [<xref ref-type="bibr" rid="CR20">20</xref>]. Hybrid assembly, which uses both short and long reads, can mitigate some of these problems, but hybrid assemblers also fail to produce error-free genome assemblies [<xref ref-type="bibr" rid="CR21">21</xref>] and can introduce confusion if short- and long-read libraries are not constructed from the same DNA extraction [<xref ref-type="bibr" rid="CR22">22</xref>]. Long-read assembly of bacterial genomes is therefore not a completely solved problem, and there is still much room for improvement.</p>
    <p id="Par4">As assembly is often the first step in bioinformatic pipelines, assembly errors can have negative implications for downstream analysis. Here, we introduce Trycycler, a computational tool which enables high-quality long-read-only assemblies of bacterial genomes. It takes multiple assemblies of the same genome as input and produces a single consensus assembly. Trycycler exploits the fact that while long-read assemblies almost always contain errors, different assemblies of the same genome typically have different errors [<xref ref-type="bibr" rid="CR13">13</xref>]. Trycycler can therefore combine multiple input assemblies to produce a consensus assembly with fewer errors than any of its inputs.</p>
  </sec>
  <sec id="Sec2">
    <title>Results</title>
    <sec id="Sec3">
      <title>Approach and implementation</title>
      <p id="Par5">The Trycycler pipeline consists of multiple steps which are run separately (overview in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, more detail in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1). At the clustering and reconciliation steps, the user may need to make decisions and intervene. This means that Trycycler is not an automated process appropriate for high-throughput assembly. Trycycler is implemented in Python and uses the NumPy, SciPy, and edlib packages [<xref ref-type="bibr" rid="CR23">23</xref>–<xref ref-type="bibr" rid="CR26">26</xref>].
<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the Trycycler long-read assembly pipeline. Before Trycycler is run, the user must generate multiple complete assemblies of the same genome, e.g., by assembling different subsets of the original long-read set. Trycycler then clusters contigs from different assemblies and produces a consensus contig for each cluster. These consensus contigs can then be polished (e.g., with Medaka) and combined into a final high-quality long-read-only assembly</p></caption><graphic xlink:href="13059_2021_2483_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par6">Before Trycycler is run, the user must generate multiple input assemblies of the same genome (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1A). The input assemblies should be complete: one contig per replicon. If complete assemblies are not possible (e.g., due to insufficient read length) or read depth is shallow (e.g., &lt;25× depth), then Trycycler is not appropriate. We recommend users generate 12 independent input assemblies, but this value can be adjusted down (to save computational time) or up (to improve robustness). It is desirable to maximize the independence of the input assemblies, as this will reduce the chance that the same error will occur in multiple assemblies. One way to achieve such independence is to use multiple assemblers, as different assembly algorithms can lead to different assembly errors [<xref ref-type="bibr" rid="CR13">13</xref>]. For example, in the tests reported here, we used Flye [<xref ref-type="bibr" rid="CR10">10</xref>], Miniasm/Minipolish [<xref ref-type="bibr" rid="CR13">13</xref>], Raven [<xref ref-type="bibr" rid="CR11">11</xref>], and Redbean [<xref ref-type="bibr" rid="CR12">12</xref>]. Random read subsampling can provide further independence, where each assembly is generated from a different subsample of the full read set (Trycycler v0.5.0 has a “subsample” command to facilitate this). Deeper long-read sets are therefore desirable, as they enable more independent subsets.</p>
      <p id="Par7">The first step in the Trycycler pipeline is contig clustering (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1B). It aims to group contigs of the same replicon from different input assemblies, so subsequent steps can be carried out on a per-replicon basis. For example, if the genome in question had one chromosome and one plasmid, then Trycycler clustering should produce two clusters: one for the chromosomal contigs and one for the plasmid contigs. To make clusters, Trycycler conducts complete-linkage hierarchical clustering on all pairwise Mash distances between contigs [<xref ref-type="bibr" rid="CR27">27</xref>]. To aid interpretation, a FastME tree is built using the pairwise distances [<xref ref-type="bibr" rid="CR28">28</xref>]. After clustering is complete, the user must decide which clusters are valid (i.e., represent completely assembled replicons in the genome) and which are invalid (i.e., represent incomplete, misassembled, or spurious sequences)—a key point of human judgment in the Trycycler process.</p>
      <p id="Par8">The next step is to “reconcile” each cluster’s contig sequences with each other (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1C). This involves converting sequences to their reverse complement as necessary to ensure that all sequences in the cluster are in the same orientation. Most bacterial replicons are circular, so Trycycler aligns the start and end of each contig to the other contigs in the cluster to determine if bases need to be added or removed for clean circularization (can be disabled for linear replicons by using the --linear option). It then rotates each sequence to begin at the same position. Some gene sequences (e.g., <italic>dnaA</italic> and <italic>repA</italic>) are often used as starting positions in complete genomes, so Trycycler contains a database of these genes and will preferentially use them as the contig starting position (see the “<xref rid="Sec10" ref-type="sec">Methods</xref>” section). If no sequence from this database is found (with ≥95% coverage and ≥95% identity), Trycycler will use a randomly chosen unique sequence instead. Cluster reconciliation will fail if a contig cannot be circularized or if any of the pairwise alignments within the cluster have low identity. In such cases, Trycycler will suggest interventions to resolve the issue, but it is up to the user to manually exclude or modify the contig sequences as necessary.</p>
      <p id="Par9">After reconciliation, each cluster’s sequences will have a consistent strand and starting position, making them appropriate for global multiple sequence alignment (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1D). To improve computational performance, Trycycler subdivides the sequences, using 1-kbp pieces with each piece extended as necessary to ensure that the boundaries between pieces do not start/end in repetitive regions. It uses MUSCLE [<xref ref-type="bibr" rid="CR29">29</xref>] to produce a multiple sequence alignment for each piece and then stitches the pieces together to produce a single multiple sequence alignment for the full cluster sequences. Trycycler then aligns the entire read set to each contig sequence so it can be assigned to a particular cluster (Additional file <xref rid="MOESM2" ref-type="media">1</xref>: Fig. S1E).</p>
      <p id="Par10">The final step in Trycycler’s pipeline is the generation of a consensus sequence for each cluster (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1F). It does this by dividing the multiple sequence alignment into regions where there is or is not any variation. For all regions where there is variation, Trycycler must choose which variant will go into the consensus. The best variant is defined as the one with the minimum total Hamming distance to the other variants, an approach which favors more common variants. In the event of a tie between two variants, Trycycler aligns the cluster’s reads to each possibility and chooses the one which produces the largest total alignment score—i.e., the variant which is in best agreement with the reads. The final Trycycler consensus sequence for the cluster is produced by taking the best variant for each region of variation in the multiple sequence alignment.</p>
      <p id="Par11">After Trycycler finishes, we recommend performing long-read polishing on its consensus sequences (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1G). Polishing is not incorporated into Trycycler, as that step can be specific to the long-read sequencing technologies used, e.g., Medaka [<xref ref-type="bibr" rid="CR30">30</xref>] polishing for ONT assemblies. If short reads are available, short-read polishing (e.g., with Pilon [<xref ref-type="bibr" rid="CR31">31</xref>]) can also be performed to further improve assembly accuracy.</p>
      <p id="Par12">The code and documentation for Trycycler v0.3.3 (the version used to generate the assemblies in this manuscript) are available at the DOI 10.5281/zenodo.3966493. The current version of Trycycler (v0.5.0) is available on GitHub (<ext-link ext-link-type="uri" xlink:href="http://github.com/rrwick/Trycycler">github.com/rrwick/Trycycler</ext-link>).</p>
    </sec>
    <sec id="Sec4">
      <title>Performance on simulated reads</title>
      <p id="Par13">In silico read simulation allows for a straightforward test of assembly accuracy against a ground truth: reads are generated from a reference genome, the reads are assembled, and the resulting assembly is compared back to the original reference sequence. For this analysis, we simulated short and long reads from 10 reference genomes which belong to the 10 most common bacterial species in RefSeq (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: References). We assembled each genome with long-read-only approaches (Miniasm/Minipolish [<xref ref-type="bibr" rid="CR13">13</xref>], Raven [<xref ref-type="bibr" rid="CR11">11</xref>], Flye [<xref ref-type="bibr" rid="CR10">10</xref>], and Trycycler), long-read-first hybrid approaches (Pilon [<xref ref-type="bibr" rid="CR31">31</xref>] polishing of each long-read-only assembly), and a short-read-first hybrid approach (Unicycler [<xref ref-type="bibr" rid="CR21">21</xref>]). We quantified the accuracy of each assembly’s chromosomal contig using two main metrics: mean identity and worst-100-bp identity (the minimum identity observed among a 100-bp sliding window).</p>
      <p id="Par14">Comparing only the long-read assemblers to each other (Flye, Miniasm/Minipolish and Raven), it was clear that Flye performed best (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2). This was true both before Pilon polishing with short reads (mean identity Q41 vs Q38; mean worst-100-bp-identity 95.8% vs 50.8–90.9%) and after Pilon polishing (mean identity Q57 vs Q42–Q55; mean worst-100-bp identity 96.1% vs 50.8–95.7%). Our main results therefore exclude Miniasm/Minipolish and Raven, leaving only the best-performing long-read assembler: Flye.</p>
      <p id="Par15">Figure <xref rid="Fig2" ref-type="fig">2</xref> shows the mean assembly identities and worst-100-bp assembly identities from each approach, using 10 simulated read sets. In both metrics, Trycycler reliably produced higher-quality assemblies than Flye (mean identity Q51 vs Q41; mean worst-100-bp identity 99.5% vs 95.8%). This result also held true for long-read-first hybrid assemblies, where Trycycler+Pilon outperformed Flye+Pilon (mean identity Q74 vs Q57; mean worst-100-bp identity 99.9% vs 96.1%). Unicycler’s short-read-first hybrid assemblies performed notably worse than the long-read-first hybrid approaches (mean identity Q25; mean worst-100-bp identity 76.5%).
<fig id="Fig2"><label>Fig. 2</label><caption><p>Results for the tests using simulated reads. For 10 reference genome sequences, we simulated both short and long reads. The read sets were then assembled with Unicycler (short-read-first hybrid assembly), Flye (long-read-only assembly), Flye+Pilon (long-read-first hybrid assembly), Trycycler (long-read-only assembly), and Trycycler+Pilon (long-read-first hybrid assembly). Each assembled chromosome was aligned back to the reference chromosome to determine the mean assembly identity (<bold>A</bold>) and the worst identity in a 100-bp sliding window (<bold>B</bold>). For long-read-only assembly, Trycycler consistently achieved higher accuracy than Flye. Trycycler+Pilon (i.e., using Pilon to polish the Trycycler assembly with short reads) achieved the highest accuracy and did better than alternative hybrid approaches (Unicycler and Flye+Pilon)</p></caption><graphic xlink:href="13059_2021_2483_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec5">
      <title>Performance on real reads</title>
      <p id="Par16">Since simulated reads cannot perfectly emulate real sequencing [<xref ref-type="bibr" rid="CR32">32</xref>], we also tested assembly methods with real-read sets. We chose seven bacterial isolates for this study (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Genomes), each belonging to a different bacterial species with clinical relevance. The challenge with real reads is the absence of a clear ground truth against which to compare assemblies. To circumvent this issue, we instead produced two independent sets of long+short (ONT+Illumina) reads for each test organism. In brief, a single DNA extraction from each organism was used to prepare two ONT libraries (one ligation and one rapid), and a single Illumina library (the results of which were divided into two non-overlapping read sets); full details are described in the “<xref rid="Sec10" ref-type="sec">Methods</xref>” section. For each assembly method, we compared the assembly from read set A to the assembly of read set B, differences between them indicating assembly errors. While this approach could suffer from false negatives if both assemblies contained the same error, it cannot suffer from false positives, as wherever two assemblies of the same genome differ, at least one of the two must be in error.</p>
      <p id="Par17">We tested the same assemblers as were used in the simulated-read tests but added an additional long-read polishing step with Medaka, an ONT-specific polishing tool. We therefore produced unpolished long-read-only assemblies (with Miniasm/Minipolish, Raven, Flye, and Trycycler), polished long-read-only assemblies (the same assemblers plus Medaka), long-read-first hybrid assemblies (the same assemblers plus Medaka and short-read polishing with Pilon), and short-read-first hybrid assemblies (with Unicycler). Each assembly approach was used on both read set A and read set B for each of the test organisms.</p>
      <p id="Par18">Assembly accuracy was quantified using the metrics from the simulated-read tests: mean identity and worst-100-bp identity. Instead of being based on an assembly-to-reference alignment (as was done for the simulated-read tests), these metrics used an alignment of the read-set-A-assembled chromosome to the read-set-B-assembled chromosome. For the <italic>Serratia marcescens</italic> genome, read set B failed to produce a complete chromosome with most assembly methods (due to long genomic repeats and a short read N50, see Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Reads), so this genome was excluded, leaving six genomes in the analysis. As was the case for the simulated-read tests, Flye assemblies were higher quality than Miniasm/Minipolish and Raven assemblies at all polishing stages (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3): unpolished (mean identity Q34 vs Q28–Q32; mean worst-100-bp identity 81.8% vs 20.2–21.8%), Medaka-polished (mean identity Q40 vs Q30–Q35; mean worst-100-bp identity 94.7% vs 28.2–38.0%) and Medaka+Pilon-polished (mean identity Q56 vs Q31–Q37; mean worst-100-bp identity 94.7% vs 28.2–40.0%). Flye was also the only long-read assembler to produce complete chromosomes for both read sets of all six genomes, so Miniasm/Minipolish and Raven were excluded from our main results.</p>
      <p id="Par19">Since the mean identity and worst-100-bp identity metrics could fail to identify all assembly errors in the real-read tests, we also used two other approaches for assessing the quality of de novo assemblies. The first was ALE [<xref ref-type="bibr" rid="CR33">33</xref>], which uses short-read alignments to the assembled sequence to produce a likelihood score for that assembly (higher scores being better), which we normalized for each genome to produce a z-score. Mapping accuracy, evenness of read depth, and evenness of insert size extracted from the short-read alignments are all used by ALE to generate a likelihood score. The second de novo assessment approach was IDEEL [<xref ref-type="bibr" rid="CR34">34</xref>, <xref ref-type="bibr" rid="CR35">35</xref>], which compares the length of predicted proteins in the assembly to a database of known proteins. Indel errors in the assembly cause frameshifts in coding sequences leading to truncations, so an error-prone assembly will tend to have predicted proteins which are shorter than their best-matching known proteins. We quantified the fraction of predicted proteins in each assembly which were ≥95% the length of their best-matching known protein (higher fractions being better).</p>
      <p id="Par20">Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the real-read results: mean identity, worst-100-bp identity, ALE <italic>z</italic>-scores, and IDEEL full-length proteins. In the mean identity metric, Trycycler performed better than Flye at all levels of polishing (Q37 vs Q34 before polishing; Q42 vs Q40 after Medaka polishing; Q62 vs Q56 after Medaka+Pilon polishing). This advantage was also apparent in the worst-100-bp identity metric (96.7% vs 81.8% before polishing; 97.0% vs 94.7% after Medaka polishing; 98.3% vs 94.7% after Medaka+Pilon polishing). Both long-read-first hybrid approaches (Flye+Medaka+Pilon and Trycycler+Medaka+Pilon) outperformed Unicycler’s short-read-first hybrid assemblies (mean identity Q34 and worst-100-bp identity 23.5%). The ALE results are consistent with the identity metrics: Trycycler assemblies had higher mean ALE <italic>z</italic>-scores than Flye assemblies at all polishing levels (–1.031 vs –1.873 before polishing; 0.419 vs 0.235 after Medaka polishing; 0.828 vs 0.806 after Medaka+Pilon polishing) and long-read-first hybrid assemblies were superior to Unicycler assemblies (mean ALE <italic>z</italic>-score of 0.617). IDEEL results showed the same trend, with Trycycler assemblies having more full-length proteins than Flye assemblies (78.3% vs 72.3% before polishing; 93.8% vs 91.8% after Medaka polishing), but all hybrid assemblies performed equivalently in this metric (97.6%).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Results for the real-read tests. For six genomes, we produced two independent hybrid read sets from the same DNA extraction. The read sets were then assembled with Unicycler (short-read-first hybrid assembly), Flye (long-read-only assembly), Flye+Medaka (long-read-only assembly), Flye+Medaka+Pilon (long-read-first hybrid assembly), Trycycler (long-read-only assembly), Trycycler+Medaka (long-read-only assembly), and Trycycler+Medaka+Pilon (long-read-first hybrid assembly). For each genome and each assembly approach, we aligned the two independently assembled chromosomes to each other to determine the mean assembly identity (<bold>A</bold>) and the worst identity in a 100-bp sliding window (<bold>B</bold>). For long-read-only assembly, Trycycler consistently achieved higher accuracy than Flye (both before and after Medaka polishing). Trycycler+Medaka+Pilon achieved the highest accuracy and did better than alternative hybrid approaches (Unicycler and Flye+Medaka+Pilon). We also assessed the accuracy of each of the 12 assembled chromosomes using ALE (<bold>C</bold>) and IDEEL (<bold>D</bold>). ALE assigns a likelihood score (transformed into <italic>z</italic>-scores on a per-genome basis) to each assembly based on its concordance with the Illumina read set. IDEEL identifies the proportion of predicted proteins which are ≥95% the length of their best-matching known protein in a database</p></caption><graphic xlink:href="13059_2021_2483_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par21">While the above results used Medaka polishing after Trycycler (i.e., Trycycler+Medaka), it is also possible to run Medaka polishing on Trycycler’s input assemblies (i.e., Medaka+Trycycler) or on both Trycycler’s input assemblies and its final assembly (i.e., Medaka+Trycycler+Medaka). We tried these alternative approaches using the real-read data and found that while all performed similarly (mean identity Q41–Q42), the best results were achieved when Medaka was the final step in the process (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Medaka order). We therefore recommend the Trycycler+Medaka approach both for its simplicity and accuracy.</p>
    </sec>
    <sec id="Sec6">
      <title>Type and location of errors</title>
      <p id="Par22">Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S4 shows the positions of errors in the assemblies of each of the 16 genomes (10 simulated and six real), with repetitive regions of the genomes indicated. Errors in long-read-only assemblies (Flye, Flye+Medaka, Trycycler, and Trycycler+Medaka) were distributed across the genomes, occurring in both repeat and non-repeat sequences. Long-read-first hybrid assemblies (Flye+Medaka+Pilon and Trycycler+Medaka+Pilon) usually had higher error rates in repeat sequences, and in many cases, there were no errors in the non-repeat sequences of the genome. Short-read-first hybrid assemblies (Unicycler) often had clusters of errors which occurred in both repeat and non-repeat sequences. Indel errors were more common than substitution errors for all assemblers: 44% of total errors were insertions, 47% were deletions, and 9% were substitutions. For the real reads, Flye assemblies sometimes had local spikes in error rates (indicating a more serious error or a cluster of errors) before Medaka polishing, but these spikes were not present after Medaka polishing. Trycycler assemblies did not suffer from this same problem. Flye assemblies often had errors at the position corresponding to the original start/end of the contig.</p>
      <p id="Par23">The Flye errors at the start/end of the contig were caused by imperfect circularization: missing or duplicated bases at the start/end of a circular contig, a phenomenon we described in greater detail in a previous benchmarking study of long-read assemblers [<xref ref-type="bibr" rid="CR13">13</xref>]. These errors were not corrected by Medaka or Pilon because those tools are not aware of contig circularity, i.e., that the contig’s last base should immediately precede its first base. Since our analysis involved normalizing all assemblies to a consistent starting position (required for global alignment), missing/duplicated bases at the start/end of a contig registered as a middle-of-the-sequence indel error in our tests. These indel errors reduced the mean identity and, if large enough, the worst-100-bp identity as well.</p>
      <p id="Par24">To assess the effect of circularization errors on Flye accuracy, we manually fixed the circularization of all Flye assemblies using the original reference sequence (in the simulated-read tests) or the Trycycler+Medaka+Pilon assembly (in the real-read tests). Of the 22 Flye assemblies (10 from simulated reads, 12 from real reads), four had perfect circularization, five had duplicated bases, and 13 had missing bases. The worst Flye circularization error was a 13-bp deletion, and the mean magnitude of Flye circularization errors was 3.7 bp (Additional files <xref rid="MOESM2" ref-type="media">2</xref> and <xref rid="MOESM3" ref-type="media">3</xref>: Flye circularization). We then reran our analyses using the fixed-circularization version of Flye assemblies, and the results are shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S5 for simulated reads and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S6 for real reads. Flye performed better in these results, especially in the worst-100-bp identity metric, indicating that in many cases, the circularization error was the largest single error in the Flye assembly. However, Trycycler still produced more accurate assemblies than Flye at each polishing stage (unpolished, Medaka-polished, and Pilon-polished).</p>
    </sec>
    <sec id="Sec7">
      <title>Consistency of Trycycler results</title>
      <p id="Par25">Trycycler is not a fully automated pipeline—it requires human judgment and intervention. This raised the question of how well it performs in the hands of different users. To answer this, we recruited five researchers who were experienced in bioinformatics but not involved in Trycycler development. They were given an ONT read set for each of the six genomes used in the real-read tests and tasked with producing a Trycycler assembly without any assistance from the Trycycler developer (using only the Trycycler documentation to guide them). We then compared the resulting assemblies, looking at both presence/absence of contigs as well as chromosomal sequence identity (Fig. <xref rid="Fig4" ref-type="fig">4</xref>).
<fig id="Fig4"><label>Fig. 4</label><caption><p>Results for the multi-user test which assessed the consistency of Trycycler assemblies when run by different users. Results include assemblies from three different long-read assemblers (Miniasm/Minipolish, Raven, and Flye, all automated and deterministic for a given set of reads and parameters, i.e., independent of user) and Trycycler assemblies from six different users (the developer of Trycycler and five testers). <bold>A</bold> Presence/absence matrix for the replicons in the test genomes. Each replicon was classified as either present in the assembly, absent from the assembly, or present but with an error/misassembly (see Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Matrix for more detail). The number of additional contigs (e.g., spurious or contaminant sequences) is also indicated for each assembly. All Trycycler assemblies contained an accurate chromosome, and only one Trycycler assembly contained misassemblies. However, in many cases, the Trycycler testers excluded a true plasmid (most commonly a small plasmid) or included an additional plasmid (most commonly constructed from cross-barcode contaminating reads). <bold>B</bold> Neighbor-joining trees of all available assemblies for each of the chromosomes, based on pairwise alignment distances. Hybrid-polished (Medaka+Pilon) versions of the developer’s Trycycler assemblies were included as reference sequences. The values indicate the number of single-bp differences per Mbp between each assembly and the polished reference (values for Trycycler are the mean of all six Trycycler assemblies). For each genome, the Trycycler assemblies cluster tightly and are closer to the polished reference than those from other long-read assemblers. <bold>C</bold> Differences between each assembled chromosome and the hybrid-polished reference. Values are single-bp differences per Mbp of sequence. Trycycler assemblies contain fewer differences, on average, compared to the single-assembler assemblies. <bold>D</bold> Pairwise differences between Trycycler assemblies of each chromosome. Values are single-bp differences per Mbp of sequence, and there are 90 values (6 genomes × 15 unique pairwise combinations per genome)</p></caption><graphic xlink:href="13059_2021_2483_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par26">The main source of variation between different users’ Trycycler assemblies was the inclusion/exclusion of plasmid contigs (Fig. <xref rid="Fig4" ref-type="fig">4</xref>A). Small plasmids often pose problems for long-read assemblers, and this caused them to sometimes be excluded by Trycycler users. Contaminant plasmid contigs (e.g., cross-barcode contamination) were sometimes included in Trycycler assemblies. Replicons with a large-scale error or misassembly occurred in many of the single-assembler assemblies (from Miniasm/Minipolish, Raven, and Flye). These errors included fragmented replicons (e.g., splitting one replicon sequence between two contigs), doubling a replicon in a single contig (e.g., assembling a 6-kbp plasmid into a 12-kbp contig), large-scale circularization problems (e.g., 80 kbp of start/end overlap), and redundant contigs (e.g., producing five contigs for a single replicon). This type of error was very rare in the Trycycler assemblies (present in only one case). Detailed descriptions of all such errors are in Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Matrix.</p>
      <p id="Par27">To assess the consistency of assembled sequences, we built a neighbor-joining tree (based on pairwise alignment distances) of the assembled chromosomes for each of the six genomes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>B). The developer’s Trycycler+Medaka+Pilon assembly was included as a reference sequence, as the real-read test results (Fig. <xref rid="Fig3" ref-type="fig">3</xref>) indicate these to be the most accurate representation of the genomes. For each test isolate, the Trycycler assemblies generated by different users were closer to the reference sequence than any of the (automated) single-assembler assemblies (Fig. <xref rid="Fig4" ref-type="fig">4</xref>C), and there were comparatively few differences between Trycycler assemblies from different users (Fig. <xref rid="Fig4" ref-type="fig">4</xref>D). All differences between Trycycler assemblies generated by different users were small-scale: most were only single-bp differences, and the largest difference was a 4-bp indel in a tandem repeat (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Trycycler vs Trycycler). The most common difference was a 1-bp discrepancy in the length of a homopolymer sequence (accounted for 78.5% of all Trycycler-vs-Trycycler sequence differences).</p>
    </sec>
  </sec>
  <sec id="Sec8">
    <title>Discussion</title>
    <p id="Par28">By combining multiple input assemblies into a consensus sequence, Trycycler produced the most accurate long-read-only assemblies in our study (Figs. <xref rid="Fig2" ref-type="fig">2</xref>, <xref rid="Fig3" ref-type="fig">3</xref>, and <xref rid="Fig4" ref-type="fig">4</xref>). Trycycler assemblies only contained small-scale errors (i.e., their accuracy in a 100-bp sliding window remained high), while assemblies produced by single assemblers often contained medium-to-large-scale errors (Figs. <xref rid="Fig2" ref-type="fig">2</xref> and Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Trycycler also helped to guard against inexact circularization, inclusion of spurious contigs, and exclusion of genuine contigs. However, Trycycler requires deeper long-read sets (to allow for multiple independent input assemblies via read subsampling), more computational resources, and more human input than single-assembler assemblies.</p>
    <p id="Par29">Creating a Trycycler assembly often requires judgment calls and manual intervention, particularly after Trycycler’s clustering step where users must decide which contig clusters are valid (represent true replicons in the genome), which clusters are invalid (spurious, misassembled, or contaminant sequences), and whether any contig sequences need to be trimmed or excluded to allow for cluster reconciliation. While fully automated pipelines are useful for high-throughput analyses, this would be difficult and undesirable for Trycycler. There are many ways that long-read assembly can fail, and Trycycler does not restrict which input assemblers can be used, so planning for all failure modes is not possible. Trycycler also allows users to subjectively judge the “assemblability” of their read set based on the coherence of the contig clustering. If input contigs cluster well, users can proceed with confidence. If not, they should investigate why the reads failed to produce consistent assemblies, e.g., insufficient read length or genome heterogeneity. See Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S7 for examples of this process in the real-read tests.</p>
    <p id="Par30">Our multi-user consistency test showed that the cluster-selection step was a significant source of variability in Trycycler results, manifesting as missing/extra replicons in the assembly, a problem exacerbated by cross-barcode contamination and the fact that long-read assemblers often struggle with small plasmid sequences. This demonstrates that user skill and experience is an important factor in producing an ideal Trycycler assembly. To mitigate this concern, we have provided extensive documentation for Trycycler, with sample data, example analyses, and FAQs to guide users. Notably though, Trycycler chromosome sequences generated by different users were more similar to one another than to any of the sequences generated by the deterministic single assemblers (Fig. <xref rid="Fig4" ref-type="fig">4</xref>b).</p>
    <p id="Par31">Even ideal Trycycler assemblies still contain small-scale errors. Our real-read tests achieved an accuracy of Q37, equivalent to about one error per 5 kbp of sequence, most of which (&gt;80%, see Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Trycycler vs polished) were in homopolymer sequences. While we have previously shown that many errors in a long-read <italic>Klebsiella pneumoniae</italic> assembly occurred in Dcm methylation motifs [<xref ref-type="bibr" rid="CR19">19</xref>, <xref ref-type="bibr" rid="CR36">36</xref>], this was not the case for genomes in this study (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Trycycler vs polished). Residual small-scale errors in assemblies result from systematic basecalling errors (i.e., when many of the reads covering a genomic position contain the same error) and therefore cannot be entirely avoided in the assembly process. Instead, these errors can be addressed before assembly (during basecalling) or after assembly (with polishing). Superior ONT basecalling can be achieved with improvements in sequencing chemistry, neural networks, and training sets, so future developments in these areas will result in better Trycycler assembly accuracy.</p>
    <p id="Par32">Polishing is a post-assembly processing step to improve sequence accuracy, and it can be carried out using either long or short reads. Our study showed that Medaka, a long-read polishing tool for ONT reads, was able to fix approximately half of the errors in long-read assemblies. Medaka was also effective at repairing many of the worst errors in a Flye assembly, making Flye+Medaka assemblies nearly as accurate as Trycycler+Medaka assemblies. Subsequent short-read polishing with Pilon was able to bring sequence identity close to 100%, with most of the remaining unfixed errors residing in genomic repeats (where short-read alignment is unreliable). Our study also found short-read-first hybrid assembly (short-read assembly followed by long-read scaffolding, as performed by Unicycler) to be less reliable than long-read-first hybrid assembly (long-read assembly followed by short-read polishing). However, in cases where short reads are deep but long reads are shallow (not tested in this study), Unicycler is likely to perform better, as this was the case it was designed for [<xref ref-type="bibr" rid="CR21">21</xref>].</p>
  </sec>
  <sec id="Sec9">
    <title>Conclusions</title>
    <p id="Par33">The goal of any assembly approach is to produce a representation of the underlying genome with the fewest errors. Assuming there is a single, unambiguous underlying genome (i.e., no heterogeneity), the ideal result is a base-for-base exact match of the genome: a perfect assembly. Our study shows that for bacterial genomes, a Trycycler+Medaka+Pilon approach can deliver assemblies which are very close to this goal: approximately one error per 2 Mbp, equivalent to two errors in an <italic>E. coli</italic> genome. Future improvements in sequencing technologies, basecalling, and assembly/polishing algorithms may make perfect bacterial assemblies a reality, and only when this is reliably achievable can we truly call bacterial genome assembly a “solved problem.”</p>
  </sec>
  <sec id="Sec10">
    <title>Methods</title>
    <sec id="Sec11">
      <title>Starting gene database</title>
      <p id="Par34">To generate Trycycler’s database of preferred contig-starting gene sequences, we produced consensus sequences of common genes at the start of complete contigs on RefSeq. All complete bacterial genomes on RefSeq were downloaded, and the name of the first gene in each contig was extracted. These names were tallied and sorted to produce a list of common starting gene names, e.g., “Chromosomal replication initiator protein DnaA” and “Replication initiation protein.” The gene sequences with these names were extracted and clustered using complete-linkage hierarchical clustering (coverage threshold of 100% and sequence identity threshold of 95%). We then produced an ancestral state reconstruction consensus sequence for each cluster using MUSCLE [<xref ref-type="bibr" rid="CR29">29</xref>], FastTree [<xref ref-type="bibr" rid="CR37">37</xref>], and TreeTime [<xref ref-type="bibr" rid="CR38">38</xref>] to generate the final set of 7171 contig starting sequences.</p>
    </sec>
    <sec id="Sec12">
      <title>Simulated-read tests</title>
      <p id="Par35">One reference genome was used from each of the 10 most common bacterial species in RefSeq: <italic>Escherichia coli</italic>, <italic>Salmonella enterica</italic>, <italic>Staphylococcus aureus</italic>, <italic>Streptococcus pneumoniae</italic>, <italic>Klebsiella pneumoniae</italic>, <italic>Mycobacterium tuberculosis</italic>, <italic>Pseudomonas aeruginosa</italic>, <italic>Listeria monocytogenes</italic>, <italic>Neisseria meningitidis</italic>, and <italic>Campylobacter jejuni</italic> (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Genomes). Badread (v0.1.5) was used to simulate a long-read set for each genome [<xref ref-type="bibr" rid="CR32">32</xref>]. The parameters (read length, read accuracy, chimera rate, etc.) were varied between sets to test a variety of inputs. To ensure assemblability, all read sets were 100× depth or greater and the mean read length was longer than the longest repeat in the genome (as determined by a self-vs-self MUMmer alignment [<xref ref-type="bibr" rid="CR39">39</xref>]). To simulate short reads for each genome, we used ART (v2016-06-05) and the parameters (simulation profile, depth, read length, and fragment length) were varied between genomes [<xref ref-type="bibr" rid="CR40">40</xref>]. Simulation parameters and summary statistics for each simulated read set are in Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Read simulation. Before assembly, we conducted quality-control filtering using fastp v0.20.1 [<xref ref-type="bibr" rid="CR41">41</xref>] for short reads (using default parameters) and Filtlong [<xref ref-type="bibr" rid="CR42">42</xref>] v0.2.0 for long reads (using a minimum read length of 1 kbp and a kept-base percentage of 95%). Simulated reads are available in Supplementary data.</p>
      <p id="Par36">Unicycler [<xref ref-type="bibr" rid="CR21">21</xref>] (v0.4.8) assemblies were conducted on each hybrid (short and long) read set using the --no_correct option to disable read error correction because the documentation for SPAdes [<xref ref-type="bibr" rid="CR43">43</xref>] (Unicycler’s underlying assembler) recommends disabling read error correction for high-depth whole genome bacterial reads. Miniasm/Minipolish [<xref ref-type="bibr" rid="CR4">4</xref>] (v0.3/v0.1.3), Raven [<xref ref-type="bibr" rid="CR11">11</xref>] (v1.2.2), and Flye [<xref ref-type="bibr" rid="CR10">10</xref>] (v2.7.1) assemblies were conducted on each long-read set using default parameters for each. Trycycler assemblies were performed using default parameters and following the procedure outlined in the Trycycler documentation (12 input assemblies made from subsampled read sets of 50× depth). Versions of Flye assemblies with repaired start/end indels were produced by manually comparing the Flye sequence to the reference genome sequence. All long-read-only assemblies were then polished with Bowtie2 [<xref ref-type="bibr" rid="CR44">44</xref>] (v2.3.4.1) and Pilon [<xref ref-type="bibr" rid="CR31">31</xref>] (v1.23). For Bowtie2 read alignment, we set min/max fragment lengths using values from the Unicycler assembly log (1st and 99th fragment size percentiles). We conducted multiple rounds of Bowtie2+Pilon polishing, stopping when it ceased to make any changes or at five rounds, whichever came first. See Supplementary data for the exact assembly and polishing commands used. Complete chromosomal assembly was assessed by a manual inspection of the assembly graphs and looking for an appropriately sized circular contig. All simulated read assemblies produced a single chromosomal contig with one exception: the Unicycler assembly for the <italic>N. meningitidis</italic> genome. However, the Unicycler assembly graph for <italic>N. meningitidis</italic> contained a single unbranching loop, so we merged the resulting contigs to produce a single chromosomal sequence.</p>
      <p id="Par37">To quantify the accuracy of the assemblies, we manually extracted the chromosomal contig from each assembly’s graph. We then made the contig consistent with the reference sequence by normalizing the strand (changing the sequence to its reverse complement if necessary) and starting position (moving bases from the beginning of the contig to the end) to match the reference genome. The pairwise_align.py script (available in Supplementary data) was then used to perform a global sequence alignment between each contig and its reference sequence using the edlib library [<xref ref-type="bibr" rid="CR26">26</xref>]. From this alignment, we produced two metrics: the mean sequence identity (the number of matching bases divided by the full alignment length) and the worst-100-bp identity (the minimum number of matching bases in a 100-bp sliding window over the alignment). We then used the error_positions.py script (available in Supplementary data) to identify the position, type, and size of each assembly error and quantify the accuracy in repeat and non-repeat sequences.</p>
    </sec>
    <sec id="Sec13">
      <title>Real-read tests</title>
      <p id="Par38">The seven bacterial isolates used in this study each belong to a different species: <italic>Acinetobacter baumannii</italic>, <italic>Citrobacter koseri</italic>, <italic>Enterobacter kobei</italic>, an unnamed <italic>Haemophilus</italic> species (given the placeholder name <italic>Haemophilus sp002998595</italic> in GTDB R202 [<xref ref-type="bibr" rid="CR45">45</xref>, <xref ref-type="bibr" rid="CR46">46</xref>]), <italic>Klebsiella oxytoca</italic>, <italic>Klebsiella variicola</italic>, and <italic>Serratia marcescens</italic>. Isolates were cultured overnight at 37°C in Luria-Bertani broth and DNA was extracted using GenFind v3 according to the manufacturer’s instructions (Beckman Coulter). The same DNA extract was used to sequence each isolate using three different approaches: ONT ligation, ONT rapid, and Illumina. For ONT ligation, we followed the protocol for the SQK-LSK109 ligation sequencing kit and EXP-NBD104 native barcoding expansion (Oxford Nanopore Technologies). For ONT rapid, we followed the protocol for the SQK-RBK004 rapid barcoding kit (Oxford Nanopore Technologies). All ONT libraries were sequenced on MinION R9.4.1 flow cells. For Illumina, we followed a modified Illumina DNA Prep protocol (catalogue number 20018705), whereby the reaction volumes were quartered to conserve reagents. Illumina libraries were sequenced on the NovaSeq 6000 using SP reagent kits v1.0 (300 cycles, Illumina Inc.), producing 150-bp paired-end reads with a mean insert size of 331 bp. All ONT read sets were basecalled and demultiplexed using Guppy v3.6.1. The resulting Illumina read pairs were shuffled and evenly split into two separate read sets. We then produced two non-overlapping hybrid read sets (A and B) for each genome. Read set A consisted of the ONT ligation reads plus half of the Illumina reads. Read set B consisted of the ONT rapid reads plus the other half of the Illumina reads. All reads are available in Supplementary data.</p>
      <p id="Par39">Read sets A and B for each isolate (14 total read sets) were subjected to the same read QC and assembly methods as were used for the simulated read sets, to generate long-read-only and hybrid assemblies for comparison. Versions of Flye assemblies with repaired start/end indels were produced by manually comparing the Flye sequence to the Trycycler+Medaka+Pilon assembly. We separately polished each contig from each long-read-only assembly using Medaka v1.3.2, using Trycycler-partitioned reads, the r941_min_high_g360 model (to match the basecalling model used) and default parameters. We then polished each long-read Medaka-polished assembly using Pilon as described above. See Supplementary data for the exact assembly and polishing commands used.</p>
      <p id="Par40">To quantify the accuracy of the resulting assemblies, we manually extracted the chromosomal contig from each, where possible. The <italic>Serratia marcescens</italic> 17-147-1671 read set B assemblies usually failed to produce a complete chromosomal contig (only Unicycler succeeded), so that genome was excluded from further analyses. For the six remaining genomes, we normalized all chromosomes to the same strand and starting position, then used the pairwise_align.py script (available in Supplementary data) to perform a global sequence alignment between read set A and read set B chromosomes using the edlib library [<xref ref-type="bibr" rid="CR26">26</xref>]. From this alignment, we produced the same metrics as were used in the simulated-read tests: mean sequence identity and worst-100-bp identity. We then used the error_positions.py script (available in Supplementary data) to identify the position, type, and size of each assembly error and quantify the accuracy in repeat and non-repeat sequences.</p>
      <p id="Par41">To produce ALE scores, we aligned the full short-read set (i.e., before it was split into read sets A and B) to each assembled chromosome using Bowtie2 [<xref ref-type="bibr" rid="CR44">44</xref>] (v2.3.4.1). The alignments were then given to ALE to produce a single likelihood score [<xref ref-type="bibr" rid="CR33">33</xref>]. ALE analyses were done on each assembly, so generated 12 values (read sets A and B for each of the six genomes) for each assembly method. ALE scores are not an absolute metric of assembly quality, only a relative metric for comparing different assemblies of the same genome. We therefore normalized the ALE scores using the mean and standard deviation for each genome to produce ALE <italic>z</italic>-scores.</p>
      <p id="Par42">IDEEL analysis of genomes requires a protein database, so we download all UniProt/TrEMBL [<xref ref-type="bibr" rid="CR47">47</xref>] release 2020_05 sequences. From this, we built a Diamond [<xref ref-type="bibr" rid="CR48">48</xref>] (v2.0.4) index which was used by IDEEL [<xref ref-type="bibr" rid="CR34">34</xref>]. Predicted proteins in the assembly were classified as full-length if IDEEL found them to be ≥95% the length of the best-matching known protein in the database. IDEEL analyses were done on each assembly and generated 12 values (read sets A and B for each of the six genomes) for each assembly method.</p>
    </sec>
    <sec id="Sec14">
      <title>Multi-user consistency tests</title>
      <p id="Par43">Each of the five Trycycler testers was given the ONT rapid read set for the six genomes used in the real-read tests (all real genomes excluding <italic>Serratia marcescens</italic> 17-147-1671) and produced one Trycycler assembly (without Medaka or Pilon polishing) for each. The number of input assemblies and which assemblers were used are available in Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Tester assemblers. We then compared the assemblies produced by single tools (Flye, Raven, and Miniasm/Minipolish), by Trycycler (from the developer and the five testers), and a hybrid-assembled reference (the developer’s Trycycler+Medaka+Pilon assembly).</p>
      <p id="Par44">For each genome, we clustered the contigs from all assemblies (using Trycycler cluster), and using the developer’s Trycycler assembly as the reference, we classified the genome replicons for each assembly as either present, present with misassemblies, or absent (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Matrix). Each chromosome was rotated to a consistent starting position and a multiple sequence alignment was performed (using Trycycler MSA). We then extracted pairwise distances from the alignment (using the msa_to_distance_matrix.py script, available in Supplementary data) and built a FastME [<xref ref-type="bibr" rid="CR28">28</xref>] tree from the distances. The distances were then normalized to the genome size (using the normalise_distance_matrix_to_mbp.py script, available in Supplementary data) to quantify the differences between each assembled chromosome for each of the genomes.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec15">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2021_2483_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Supplementary Figs. S1–S7.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="13059_2021_2483_MOESM2_ESM.pdf">
            <caption>
              <p><bold>Additional file 2.</bold> Supplementary tables for the simulated-read tests.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="13059_2021_2483_MOESM3_ESM.pdf">
            <caption>
              <p><bold>Additional file 3.</bold> Supplementary tables for the real-read tests.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="13059_2021_2483_MOESM4_ESM.pdf">
            <caption>
              <p><bold>Additional file 4.</bold> Supplementary tables for the multi-user consistency tests.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM5">
          <media xlink:href="13059_2021_2483_MOESM5_ESM.docx">
            <caption>
              <p><bold>Additional file 5.</bold> Review history.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <sec id="FPar1">
      <title>Review history</title>
      <p id="Par45">The review history is available as Additional file <xref rid="MOESM5" ref-type="media">5</xref>.</p>
    </sec>
    <sec id="FPar2">
      <title>Peer review information</title>
      <p id="Par46">Barbara Cheifet was the primary editor of this article and managed its editorial process and peer review in collaboration with the rest of the editorial team.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>RRW developed the software, carried out the analyses, and drafted the manuscript. LMJ performed all culturing, DNA preparation, and sequencing. LTC, JH, GM, BV, and KW performed assemblies for the multi-user consistency tests. KEH supervised the project and oversaw funding acquisition. All authors contributed to editing and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported, in whole or in part, by the Bill &amp; Melinda Gates Foundation [OPP1175797]. Under the grant conditions of the Foundation, a Creative Commons Attribution 4.0 Generic License has already been assigned to the Author Accepted Manuscript version that might arise from this submission. This work was also supported by an Australian Government Research Training Program Scholarship, and KEH is supported by a Senior Medical Research Fellowship from the Viertel Foundation of Victoria. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Trycycler source code and documentation can be found at <ext-link ext-link-type="uri" xlink:href="http://github.com/rrwick/Trycycler">github.com/rrwick/Trycycler</ext-link> (GPLv3 license) [<xref ref-type="bibr" rid="CR49">49</xref>].</p>
    <p>Supplementary figures, tables, and code can be found at <ext-link ext-link-type="uri" xlink:href="http://github.com/rrwick/Trycycler-paper">github.com/rrwick/Trycycler-paper</ext-link> (GPLv3 license) [<xref ref-type="bibr" rid="CR50">50</xref>].</p>
    <p>Reads, assemblies, and reference sequences can be found at <ext-link ext-link-type="uri" xlink:href="https://bridges.monash.edu/articles/dataset/Trycycler_paper_dataset/14890734">bridges.monash.edu/articles/dataset/Trycycler_paper_dataset/14890734</ext-link> (CC BY 4.0 license) [<xref ref-type="bibr" rid="CR51">51</xref>].</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar3">
      <title>Ethics approval and consent to participate</title>
      <p id="Par47">Not applicable</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par48">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Taylor</surname>
            <given-names>TL</given-names>
          </name>
          <name>
            <surname>Volkening</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>DeJesus</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Simmons</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dimitrov</surname>
            <given-names>KM</given-names>
          </name>
          <name>
            <surname>Tillman</surname>
            <given-names>GE</given-names>
          </name>
          <name>
            <surname>Suarez</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Afonso</surname>
            <given-names>CL</given-names>
          </name>
        </person-group>
        <article-title>Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology</article-title>
        <source>Sci Rep</source>
        <year>2019</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1038/s41598-019-52424-x</pub-id>
        <pub-id pub-id-type="pmid">30626917</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Elliott</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Batty</surname>
            <given-names>EM</given-names>
          </name>
          <name>
            <surname>Ming</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MT</given-names>
          </name>
          <name>
            <surname>Nawtaisong</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>De Cesare</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Oxford nanopore MinION sequencing enables rapid whole genome assembly of <italic>Rickettsia typhi</italic> in a resource-limited setting</article-title>
        <source>Am J Trop Med Hyg</source>
        <year>2020</year>
        <volume>102</volume>
        <issue>2</issue>
        <fpage>408</fpage>
        <lpage>414</lpage>
        <pub-id pub-id-type="doi">10.4269/ajtmh.19-0383</pub-id>
        <?supplied-pmid 31820709?>
        <pub-id pub-id-type="pmid">31820709</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>The fragment assembly string graph</article-title>
        <source>Bioinformatics.</source>
        <year>2005</year>
        <volume>21</volume>
        <issue>Suppl. 2</issue>
        <fpage>79</fpage>
        <lpage>85</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti1114</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap and miniasm: fast mapping and <italic>de novo</italic> assembly for noisy long sequences</article-title>
        <source>Bioinformatics.</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>14</issue>
        <fpage>2103</fpage>
        <lpage>2110</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id>
        <?supplied-pmid 27153593?>
        <pub-id pub-id-type="pmid">27153593</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jung</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Winefield</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bombarely</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prentis</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Tools and strategies for long-read sequencing and <italic>de novo</italic> assembly of plant genomes</article-title>
        <source>Trends Plant Sci</source>
        <year>2019</year>
        <volume>24</volume>
        <issue>8</issue>
        <fpage>700</fpage>
        <lpage>724</lpage>
        <pub-id pub-id-type="doi">10.1016/j.tplants.2019.05.003</pub-id>
        <?supplied-pmid 31208890?>
        <pub-id pub-id-type="pmid">31208890</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eisenstein</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Closing in on a complete human genome</article-title>
        <source>Nature.</source>
        <year>2021</year>
        <volume>590</volume>
        <issue>7847</issue>
        <fpage>679</fpage>
        <lpage>681</lpage>
        <pub-id pub-id-type="doi">10.1038/d41586-021-00462-9</pub-id>
        <?supplied-pmid 33619406?>
        <pub-id pub-id-type="pmid">33619406</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Loman</surname>
            <given-names>NJ</given-names>
          </name>
          <name>
            <surname>Quick</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
        </person-group>
        <article-title>A complete bacterial genome assembled <italic>de novo</italic> using only nanopore sequencing data</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>8</issue>
        <fpage>733</fpage>
        <lpage>735</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3444</pub-id>
        <?supplied-pmid 26076426?>
        <pub-id pub-id-type="pmid">26076426</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>One chromosome, one contig: complete microbial genomes from long-read sequencing and assembly</article-title>
        <source>Curr Opin Microbiol</source>
        <year>2015</year>
        <volume>23</volume>
        <fpage>110</fpage>
        <lpage>120</lpage>
        <pub-id pub-id-type="doi">10.1016/j.mib.2014.11.014</pub-id>
        <?supplied-pmid 25461581?>
        <pub-id pub-id-type="pmid">25461581</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Berlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>722</fpage>
        <lpage>736</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.215087.116</pub-id>
        <?supplied-pmid 28298431?>
        <pub-id pub-id-type="pmid">28298431</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <issue>5</issue>
        <fpage>540</fpage>
        <lpage>546</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0072-8</pub-id>
        <?supplied-pmid 30936562?>
        <pub-id pub-id-type="pmid">30936562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vaser</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Šikić</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Time- and memory-efficient genome assembly with Raven</article-title>
        <source>Nat Comput Sci</source>
        <year>2021</year>
        <volume>1</volume>
        <issue>5</issue>
        <fpage>332</fpage>
        <lpage>336</lpage>
        <pub-id pub-id-type="doi">10.1038/s43588-021-00073-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate long-read assembly with wtdbg2</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <issue>2</issue>
        <fpage>155</fpage>
        <lpage>158</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0669-3</pub-id>
        <?supplied-pmid 31819265?>
        <pub-id pub-id-type="pmid">31819265</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Wick RR, Holt KE. Benchmarking of long-read assemblers for prokaryote whole genome sequencing. F1000Research. 2019;8(2138). 10.12688/f1000research.21782.1.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eisenstein</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>An ace in the hole for DNA sequencing</article-title>
        <source>Nature.</source>
        <year>2017</year>
        <volume>550</volume>
        <issue>7675</issue>
        <fpage>285</fpage>
        <lpage>288</lpage>
        <pub-id pub-id-type="doi">10.1038/550285a</pub-id>
        <?supplied-pmid 29022596?>
        <pub-id pub-id-type="pmid">29022596</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rhie</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Dilthey</surname>
            <given-names>AT</given-names>
          </name>
          <name>
            <surname>Bickhart</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Kingan</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Hiendleder</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Williams</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>TPL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title><italic>De novo</italic> assembly of haplotype-resolved genomes with trio binning</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <issue>12</issue>
        <fpage>1174</fpage>
        <lpage>1182</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4277</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bickhart</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Behsaz</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rayko</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shin</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Kuhn</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Polevikov</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>TPL</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>metaFlye: scalable long-read metagenome assembly using repeat graphs</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <issue>11</issue>
        <fpage>1103</fpage>
        <lpage>1110</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-020-00971-x</pub-id>
        <?supplied-pmid 33020656?>
        <pub-id pub-id-type="pmid">33020656</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goodwin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>McPherson</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>McCombie</surname>
            <given-names>WR</given-names>
          </name>
        </person-group>
        <article-title>Coming of age: ten years of next-generation sequencing technologies</article-title>
        <source>Nat Rev Genet</source>
        <year>2016</year>
        <volume>17</volume>
        <issue>6</issue>
        <fpage>333</fpage>
        <lpage>351</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg.2016.49</pub-id>
        <pub-id pub-id-type="pmid">27184599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jain</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Quick</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rand</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Sasani</surname>
            <given-names>TA</given-names>
          </name>
          <name>
            <surname>Tyson</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nanopore sequencing and assembly of a human genome with ultra-long reads</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <issue>4</issue>
        <fpage>338</fpage>
        <lpage>345</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4060</pub-id>
        <?supplied-pmid 29431738?>
        <pub-id pub-id-type="pmid">29431738</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Performance of neural network basecalling tools for Oxford Nanopore sequencing</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>129</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1727-y</pub-id>
        <?supplied-pmid 31234903?>
        <pub-id pub-id-type="pmid">31234903</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Wick RR, Judd LM, Wyres KL, Holt KE. Recovery of small plasmid sequences via Oxford Nanopore sequencing. Microbial Genomics. 2021;7(8):1–8. 10.1099/mgen.0.000631.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Gorrie</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Unicycler: resolving bacterial genome assemblies from short and long sequencing reads</article-title>
        <source>PLoS Comput Biol</source>
        <year>2017</year>
        <volume>13</volume>
        <issue>6</issue>
        <fpage>e1005595</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005595</pub-id>
        <?supplied-pmid 28594827?>
        <pub-id pub-id-type="pmid">28594827</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Judd</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Gorrie</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>KE</given-names>
          </name>
        </person-group>
        <article-title>Completing bacterial genome assemblies with multiplex MinION sequencing</article-title>
        <source>Microbial Genomics</source>
        <year>2017</year>
        <volume>3</volume>
        <issue>10</issue>
        <fpage>1</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1099/mgen.0.000132</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Van Rossum</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Drake</surname>
            <given-names>FL</given-names>
          </name>
        </person-group>
        <source>Python 3 reference manual</source>
        <year>2009</year>
        <publisher-loc>Scotts Valley, CA</publisher-loc>
        <publisher-name>CreateSpace</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Harris</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Millman</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>van der Walt</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Gommers</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Virtanen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Cournapeau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Wieser</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Berg</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>NJ</given-names>
          </name>
          <name>
            <surname>Kern</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Picus</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hoyer</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>van Kerkwijk</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Brett</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Haldane</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>del Río</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Wiebe</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Peterson</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gérard-Marchant</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Sheppard</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Reddy</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Weckesser</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Abbasi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Gohlke</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Oliphant</surname>
            <given-names>TE</given-names>
          </name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <source>Nature.</source>
        <year>2020</year>
        <volume>585</volume>
        <issue>7825</issue>
        <fpage>357</fpage>
        <lpage>362</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
        <?supplied-pmid 32939066?>
        <pub-id pub-id-type="pmid">32939066</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Virtanen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gommers</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Oliphant</surname>
            <given-names>TE</given-names>
          </name>
          <name>
            <surname>Haberland</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Reddy</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Cournapeau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Burovski</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Peterson</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Weckesser</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Bright</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>van der Walt</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Brett</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Millman</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>Mayorov</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>ARJ</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kern</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Polat</surname>
            <given-names>İ</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>VanderPlas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Laxalde</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Perktold</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Cimrman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Henriksen</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Quintero</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Archibald</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Ribeiro</surname>
            <given-names>AH</given-names>
          </name>
          <name>
            <surname>Pedregosa</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>van Mulbregt</surname>
            <given-names>P</given-names>
          </name>
          <collab>SciPy 1.0 Contributors</collab>
          <name>
            <surname>Vijaykumar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Bardelli</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Rothberg</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hilboll</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kloeckner</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Scopatz</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rokem</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Woods</surname>
            <given-names>CN</given-names>
          </name>
          <name>
            <surname>Fulton</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Masson</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Häggström</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Fitzgerald</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Nicholson</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Hagen</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Pasechnik</surname>
            <given-names>DV</given-names>
          </name>
          <name>
            <surname>Olivetti</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Wieser</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Silva</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Lenders</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wilhelm</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Young</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Price</surname>
            <given-names>GA</given-names>
          </name>
          <name>
            <surname>Ingold</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Allen</surname>
            <given-names>GE</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>GR</given-names>
          </name>
          <name>
            <surname>Audren</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Probst</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Dietrich</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Silterra</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Webber</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Slavič</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nothman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Buchner</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kulick</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schönberger</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>de Miranda Cardoso</surname>
            <given-names>JV</given-names>
          </name>
          <name>
            <surname>Reimer</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Harrington</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rodríguez</surname>
            <given-names>JLC</given-names>
          </name>
          <name>
            <surname>Nunez-Iglesias</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kuczynski</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Tritz</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Thoma</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newville</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kümmerer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bolingbroke</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tartre</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pak</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>NJ</given-names>
          </name>
          <name>
            <surname>Nowaczyk</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Shebanov</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Pavlyk</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Brodtkorb</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>McGibbon</surname>
            <given-names>RT</given-names>
          </name>
          <name>
            <surname>Feldbauer</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Lewis</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tygier</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sievert</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Vigna</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Peterson</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>More</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pudlik</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Oshima</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Pingel</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Robitaille</surname>
            <given-names>TP</given-names>
          </name>
          <name>
            <surname>Spura</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>TR</given-names>
          </name>
          <name>
            <surname>Cera</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Leslie</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Zito</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Krauss</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Upadhyay</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Halchenko</surname>
            <given-names>YO</given-names>
          </name>
          <name>
            <surname>Vázquez-Baeza</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>SciPy 1.0: fundamental algorithms for scientific computing in Python</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <issue>3</issue>
        <fpage>261</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
        <?supplied-pmid 32015543?>
        <pub-id pub-id-type="pmid">32015543</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Šošić</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Šikić</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Edlib: a C/C++ library for fast, exact sequence alignment using edit distance</article-title>
        <source>Bioinformatics.</source>
        <year>2017</year>
        <volume>33</volume>
        <issue>9</issue>
        <fpage>1394</fpage>
        <lpage>1395</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw753</pub-id>
        <?supplied-pmid 28453688?>
        <pub-id pub-id-type="pmid">28453688</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Melsted</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Mallonee</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Mash: fast genome and metagenome distance estimation using MinHash</article-title>
        <source>Genome Biol</source>
        <year>2016</year>
        <volume>17</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0997-x</pub-id>
        <pub-id pub-id-type="pmid">26753840</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lefort</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Desper</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gascuel</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>FastME 2.0: a comprehensive, accurate, and fast distance-based phylogeny inference program</article-title>
        <source>Mol Biol Evol</source>
        <year>2015</year>
        <volume>32</volume>
        <issue>10</issue>
        <fpage>2798</fpage>
        <lpage>2800</lpage>
        <pub-id pub-id-type="doi">10.1093/molbev/msv150</pub-id>
        <?supplied-pmid 26130081?>
        <pub-id pub-id-type="pmid">26130081</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>MUSCLE: multiple sequence alignment with high accuracy and high throughput</article-title>
        <source>Nucleic Acids Res</source>
        <year>2004</year>
        <volume>32</volume>
        <issue>5</issue>
        <fpage>1792</fpage>
        <lpage>1797</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkh340</pub-id>
        <?supplied-pmid 15034147?>
        <pub-id pub-id-type="pmid">15034147</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Wright C, Wykes M. Medaka [Internet]. GitHub. 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/nanoporetech/medaka">https://github.com/nanoporetech/medaka</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Walker BJ, Abeel T, Shea T, Priest M, Abouelliel A, Sakthikumar S, et al. Pilon: an integrated tool for comprehensive microbial variant detection and genome assembly improvement. PLoS One. 2014;9(11). 10.1371/journal.pone.0112963.</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wick</surname>
            <given-names>RR</given-names>
          </name>
        </person-group>
        <article-title>Badread: simulation of error-prone long reads</article-title>
        <source>J Open Source Software</source>
        <year>2019</year>
        <volume>4</volume>
        <issue>36</issue>
        <fpage>1316</fpage>
        <pub-id pub-id-type="doi">10.21105/joss.01316</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Clark</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Egan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Frazier</surname>
            <given-names>PI</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>ALE: a generic assembly likelihood evaluation framework for assessing the accuracy of genome and metagenome assemblies</article-title>
        <source>Bioinformatics.</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>4</issue>
        <fpage>435</fpage>
        <lpage>443</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts723</pub-id>
        <?supplied-pmid 23303509?>
        <pub-id pub-id-type="pmid">23303509</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stewart</surname>
            <given-names>RD</given-names>
          </name>
          <name>
            <surname>Auffret</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Warr</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>AW</given-names>
          </name>
          <name>
            <surname>Roehe</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Watson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Compendium of 4,941 rumen metagenome-assembled genomes for rumen microbiome biology and enzyme discovery</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <issue>8</issue>
        <fpage>953</fpage>
        <lpage>961</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0202-3</pub-id>
        <?supplied-pmid 31375809?>
        <pub-id pub-id-type="pmid">31375809</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Watson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Warr</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Errors in long-read assemblies can critically affect protein prediction</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <issue>2</issue>
        <fpage>124</fpage>
        <lpage>126</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-018-0004-z</pub-id>
        <?supplied-pmid 30670796?>
        <pub-id pub-id-type="pmid">30670796</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">Evans-roberts K, Maxwell A, Marinus MG, Løbner-Olesen A. DNA methylation. EcoSal Plus. 2014;6(1). 10.1128/ecosalplus.ESP-0003-2013.</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Price MN, Dehal PS, Arkin AP. FastTree 2 - approximately maximum-likelihood trees for large alignments. PLoS One. 2010;5(3). 10.1371/journal.pone.0009490.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sagulenko</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Puller</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Neher</surname>
            <given-names>RA</given-names>
          </name>
        </person-group>
        <article-title>TreeTime: maximum-likelihood phylodynamic analysis</article-title>
        <source>Virus Evol</source>
        <year>2018</year>
        <volume>4</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/ve/vex042</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kurtz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Smoot</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Antonescu</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <issue>2</issue>
        <fpage>R12</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id>
        <?supplied-pmid 14759262?>
        <pub-id pub-id-type="pmid">14759262</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>GT</given-names>
          </name>
        </person-group>
        <article-title>ART: a next-generation sequencing read simulator</article-title>
        <source>Bioinformatics.</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>4</issue>
        <fpage>593</fpage>
        <lpage>594</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr708</pub-id>
        <?supplied-pmid 22199392?>
        <pub-id pub-id-type="pmid">22199392</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Fastp: an ultra-fast all-in-one FASTQ preprocessor</article-title>
        <source>Bioinformatics.</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>17</issue>
        <fpage>i884</fpage>
        <lpage>i890</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty560</pub-id>
        <?supplied-pmid 30423086?>
        <pub-id pub-id-type="pmid">30423086</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Wick RR. Filtlong [Internet]. GitHub. 2018. <ext-link ext-link-type="uri" xlink:href="https://github.com/rrwick/Filtlong">https://github.com/rrwick/Filtlong</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <issue>5</issue>
        <fpage>455</fpage>
        <lpage>477</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>359</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <?supplied-pmid 22388286?>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaumeil</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Mussig</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Hugenholtz</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Parks</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>GTDB-Tk: a toolkit to classify genomes with the genome taxonomy database</article-title>
        <source>Bioinformatics.</source>
        <year>2020</year>
        <volume>36</volume>
        <issue>6</issue>
        <fpage>1925</fpage>
        <lpage>1927</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz848</pub-id>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parks</surname>
            <given-names>DH</given-names>
          </name>
          <name>
            <surname>Chuvochina</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chaumeil</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Rinke</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Mussig</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Hugenholtz</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>A complete domain-to-species taxonomy for Bacteria and Archaea</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <issue>9</issue>
        <fpage>1079</fpage>
        <lpage>1086</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-020-0501-8</pub-id>
        <?supplied-pmid 32341564?>
        <pub-id pub-id-type="pmid">32341564</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>The UniProt Consortium</collab>
        </person-group>
        <article-title>UniProt: a worldwide hub of protein knowledge</article-title>
        <source>Nucleic Acids Res</source>
        <year>2019</year>
        <volume>47</volume>
        <issue>D1</issue>
        <fpage>D506</fpage>
        <lpage>D515</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1049</pub-id>
        <pub-id pub-id-type="pmid">30395287</pub-id>
      </element-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <mixed-citation publication-type="other">Buchfink B, Xie C, Huson DH. Fast and sensitive protein alignment using DIAMOND. Nat Methods. 2015;12(1). 10.1038/nmeth.3176.</mixed-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <mixed-citation publication-type="other">Wick RR, Judd LM, Cerdeira LT, Hawkey J, Méric G, Vezina B, et al. Trycycler. GitHub. 2021. 10.5281/zenodo.4620349.</mixed-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <mixed-citation publication-type="other">Wick RR, Judd LM, Cerdeira LT, Hawkey J, Méric G, Vezina B, et al. Trycycler paper. GitHub. 2021. 10.5281/zenodo.5279701.</mixed-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <mixed-citation publication-type="other">Wick RR, Judd LM, Cerdeira LT, Hawkey J, Méric G, Vezina B, et al. Trycycler paper dataset. Bridges. 2021. 10.26180/14890734.v2.</mixed-citation>
    </ref>
  </ref-list>
</back>
