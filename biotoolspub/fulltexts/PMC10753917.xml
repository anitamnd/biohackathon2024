<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10753917</article-id>
    <article-id pub-id-type="pmid">38096590</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad753</article-id>
    <article-id pub-id-type="publisher-id">btad753</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VSCode-Antimony: a source editor for building, analyzing, and translating antimony models</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Ma</surname>
          <given-names>Steve</given-names>
        </name>
        <aff><institution>NVIDIA Corporation</institution>, Redmond, WA 98052, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fan</surname>
          <given-names>Longxuan</given-names>
        </name>
        <aff><institution>Department of Mathematics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Konanki</surname>
          <given-names>Sai Anish</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Eva</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-8254-4957</contrib-id>
        <name>
          <surname>Gennari</surname>
          <given-names>John H</given-names>
        </name>
        <aff><institution>Biomedical and Health Informatics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Smith</surname>
          <given-names>Lucian P</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-0802-4069</contrib-id>
        <name>
          <surname>Hellerstein</surname>
          <given-names>Joseph L</given-names>
        </name>
        <aff><institution>eScience Institute, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
        <xref rid="btad753-cor1" ref-type="corresp"/>
        <!--jlheller@uw.edu-->
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3659-6817</contrib-id>
        <name>
          <surname>Sauro</surname>
          <given-names>Herbert M</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Martelli</surname>
          <given-names>Pier Luigi</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad753-cor1">Corresponding author: eScience Institute, c/o Allen School of Computer Science, University of Washington, Seattle, WA. 98195 United States. E-mail: <email>jlheller@uw.edu</email> (J.L.H.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-14">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad753</elocation-id>
    <history>
      <date date-type="received">
        <day>02</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>06</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>08</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>28</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad753.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Developing biochemical models in systems biology is a complex, knowledge-intensive activity. Some modelers (especially novices) benefit from model development tools with a graphical user interface. However, as with the development of complex software, text-based representations of models provide many benefits for advanced model development. At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Since these tools are not “model aware,” they do not provide features for: (i) model <bold>b</bold>uilding such as autocompletion of species names; (ii) model <bold>a</bold>nalysis such as hover messages that provide information about chemical species; and (iii) model <bold>t</bold>ranslation to convert between model representations. We refer to these as BAT features. </p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present VSCode-Antimony, a tool for building, analyzing, and translating models written in the Antimony modeling language, a human readable representation of Systems Biology Markup Language (SBML) models. VSCode-Antimony is a source editor, a tool with language-aware features. For example, there is autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>VSCode-Antimony is available as an open source extension in the VSCode Marketplace <ext-link xlink:href="https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony" ext-link-type="uri">https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony</ext-link>. Source code can be found at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Science Foundation award</institution>
          </institution-wrap>
        </funding-source>
        <award-id>CMMI-1933453</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>NIBIB of the National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Washington Research Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100001906</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Data Science Environments project award from the Gordon and Betty Moore Foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2013-10-29</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Alfred P. Sloan Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100000879</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>3835</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Washington eScience Institute</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Developing credible biochemical models in systems biology can be invaluable for creating novel medical diagnostics, commercially viable metabolic pathways as well as help drive basic research in cell biology. Although modeling is time-consuming and knowledge-intensive, there are many approaches to mitigating these challenges. One approach is to employ a graphical user interface (GUI) to guide users and reduce errors in model building (<xref rid="btad753-B11" ref-type="bibr">Hoops <italic toggle="yes">et al.</italic>, 2006</xref>). GUI systems are particularly helpful for less experienced and novice users. However, text-based representations of models provide another approach to dealing with large-scale models (<xref rid="btad753-B4" ref-type="bibr">Choi <italic toggle="yes">et al.</italic>, 2018</xref>). We see the situation as being analogous to the development of complex software where text-based approaches are widely used.</p>
    <p>There are several text-based representations of biochemical models. One popular choice is the Systems Biology Markup Language (SBML), a community standard for model exchange in an XML format (<xref rid="btad753-B12" ref-type="bibr">Hucka <italic toggle="yes">et al.</italic>, 2003</xref>). SBML is an effective computer-readable model representation, but it is verbose and obscure as a human readable model description language. This motivated the development of Antimony (<xref rid="btad753-B18" ref-type="bibr">Smith <italic toggle="yes">et al.</italic>, 2009</xref>), a human readable textual representation of SBML. For example, Antimony expresses reactions as chemical formulas, a representation that is quite familiar to developers of biochemical models.</p>
    <p>Developing biochemical models using text is currently done using a text editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Examples of text editors include <monospace>vim</monospace> (<xref rid="btad753-B15" ref-type="bibr">Robbins <italic toggle="yes">et al.</italic>, 2008</xref>), <monospace>emacs</monospace> (<xref rid="btad753-B3" ref-type="bibr">Cameron <italic toggle="yes">et al.</italic>, 2005</xref>), Windows <monospace>notepad</monospace>, and <monospace>sublime</monospace> (<xref rid="btad753-B14" ref-type="bibr">Peleg, 2013</xref>). Text editors make it easy to change the names of model variables. For example, we can change all occurrences of the names of the chemical species AMp and cAMp to AMP and cAMP by doing a <monospace>replace</monospace> of AMp with AMP. A text editor can also accelerate model building. To illustrate this, consider the chemotaxis model in BioModels model 200 (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>). The model contains several phosphorylation reactions of the form <monospace>X =&gt; Xp</monospace>, where <monospace>X</monospace> is one of the molecules: <monospace>WAA, WWAA, TTAA, TTWAA</monospace>. Rather than entering a phosphorylation reaction for each molecule, we can accelerate model building by placing the string <monospace>“X =&gt; Xp”</monospace> into the editor “clipboard” and repeating the following for each molecule: (i) paste the copied reaction and (ii) replace all occurrences of <monospace>X</monospace> with the molecule to be phosphorylated. A final appeal of a text editor is that many text editors are programmable, and so it possible to create automation in support of model building and analysis.</p>
    <p>Despite these benefits, developing biochemical models with a text editor has serious shortcomings. Foremost, <italic toggle="yes">text editors are not “model aware</italic>.<italic toggle="yes">”</italic> That is, text editors do not know about species, reactions, compartments, or parameters. Also, text editors do not know the syntax of model statements. This severely limits the ability of text editors to support model <bold>b</bold>uilding (e.g. autocompletion of variable names), model <bold>a</bold>nalysis (e.g. detecting errors in model statements), and model <bold>t</bold>ranslation (e.g. converting between SBML and Antimony or other formats). We use the term <italic toggle="yes">BAT</italic> feature to refer to capabilities that support model building, analysis, and translation.</p>
    <p>The absence of BAT features is analogous to problems faced in the early days of software engineering. At that time, software engineers used text editors that lacked knowledge of their programming language. In recent years, there has been a dramatic increase in the productivity and quality of software engineering as a result of source editors, Source editors are text editors with knowledge of the programming language. This knowledge enables source editors to provide syntax highlighting, code navigation (e.g. displaying method signatures), and error detection.</p>
    <p>Our focus is on SBML models. Since SBML is a community standard, one approach is to create a source editor for SBML, as is done in <xref rid="btad753-B16" ref-type="bibr">Rodriguez <italic toggle="yes">et al.</italic> (2007)</xref>. This system provides syntax highlighting of XML and error checking of XML syntax. Although these capabilities are useful at times, we believe that working at the level of XML is too low for most model developers who are thinking in terms of chemical reactions not in terms of XML angle brackets.</p>
    <p>This article describes a source editor for the Antimony modeling language. We chose Antimony because it provides a good match with the conceptual level at which models are developed. For example, the reaction <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>→</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow></mml:math></inline-formula> is written in Antimony as <monospace>O2</monospace> <monospace>+</monospace> <monospace>2 H2 -&gt; 2 H2O</monospace> for the chemical species <monospace>O2</monospace>, <monospace>H2</monospace>, <monospace>H2O</monospace>. A further benefit of using Antimony is that it supports model hierarchies through nesting of models. Such hierarchical representations can provide considerable benefits for scaling and model reuse. Our system, VSCode-Antimony, implements BAT features for building, analyzing, and translating Antimony models.</p>
  </sec>
  <sec>
    <title>2 Methods and materials</title>
    <p>Building a source editor for the Antimony language requires capabilities beyond those that are provided by a text editor. A text editor provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. However, a source editor knows about the modeling language itself. Examples include knowing the type of a symbol (e.g. species, parameter), changing the visual characteristics of symbols and statements (e.g. highlighting, underlining), accessing model related knowledge sources (e.g. ChEBI; <xref rid="btad753-B5" ref-type="bibr">Degtyarenko <italic toggle="yes">et al.</italic>, 2007</xref>), and translating between model representations.</p>
    <p>Although Antimony is a language for modeling biochemical reactions, it is also a computer language. As such, Antimony has a formal grammar just as there are formal grammars for as python, Java, and C. This observation led us to build the Antimony source editor as an extension to an existing source editor for computer programming. We chose VSCode (<xref rid="btad753-B7" ref-type="bibr">Garcia and Rojas, 2022</xref>) because it is widely used, open source, and has a well-supported application programming interface (API) for implementing extensions. The API for VSCode extensions provides many features we use in VSCode-Antimony: hover information (providing information when hovering over a symbol), autocompletion (completing partially entered text), jump to definition (navigating to related information about a symbol), error checking the structure of statements, highlighting, and underlining to indicate errors and warnings.</p>
    <p>The most significant consideration in implementing a VSCode extension is describing the grammar of the language for which the source editor is intended. VSCode provides a convenient way to describe the language grammar in terms of python regular expressions. However, parts of the Antimony language have a complex grammar. For example, an Antimony <monospace>event</monospace> specifies actions taken when a condition arises as determined by a Boolean expression of model variables. This can result in a fairly complicated statement that is challenging to parse correctly.</p>
    <p>Although VSCode provides a rich API for writing extensions, it is not sufficient for implementing a source editor for a biochemical modeling language. For example, VSCode-Antimony provides features for translating between representations of biochemical models, such as translating between Antimony and SBML. Although it is common in software to do one-way translations (e.g. compilation), two way translations are rare, especially maintaining two different representations of the same information with bi-directional editing.</p>
    <p>There is yet another requirement for developing biochemical models that differs from software engineering. Unlike programming languages, modeling languages often need to relate symbols used in the model to external “knowledge sources.” This linkage is essential to understanding the assumptions and scope of a model, both to interpret model results and to use the model as a building block in larger models. Example knowledge sources include ChEBI (Chemical Entities of Biological Interest), which describes small molecules, Rhea (<xref rid="btad753-B1" ref-type="bibr">Bansal <italic toggle="yes">et al.</italic>, 2022</xref>), which describe reactions, and the Gene Ontology (Gene Ontology Consortium, 2004), which provides descriptions of pathways and biological processes. Annotations provide the connection between symbols and knowledge sources. Often there are many choices for a seemingly simple molecule. For example, ChEBI lists approximately 1000 choices for “glucose.” VSCode-Antimony has capabilities for querying knowledge sources to assist modelers with annotating their models.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>This section describes how the capabilities detailed in Section 2 are used to construct the BAT features supported by VSCode-Antimony. Section 3.1 lists the BAT features. Subsequent sections demonstrate how the features support model augmentation (Section 3.3), analysis, and debugging (Section 3.4).</p>
    <sec>
      <title>3.1 BAT features</title>
      <p>VSCode-Antimony provides a rich set of BAT features that build on the capabilities described in Section 2. <xref rid="btad753-T1" ref-type="table">Table 1</xref> provides a summary.</p>
      <table-wrap position="float" id="btad753-T1">
        <label>Table 1.</label>
        <caption>
          <p>BAT features in VSCode Antimony.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">BAT category</th>
              <th rowspan="1" colspan="1">VSCode-Antimony feature</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Build</td>
              <td rowspan="1" colspan="1">Editing SBML files as Antimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Browsing BioModels</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Autocompletion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model import</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Automatic rate law insertion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation creation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Analyze</td>
              <td rowspan="1" colspan="1">Syntax highlighting</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation highlights</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Hover messages</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model navigation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Error and warning detection</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Translate</td>
              <td rowspan="1" colspan="1">Bidirectional editing</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsAntimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsSBML</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <sec>
        <title>3.1.1 Build</title>
        <p>Model building is about creating a new model and/or modifying an existing model.</p>
        <p><bold>Editing SBML files as Antimony</bold> allows modelers to browse and update an SBML file (in XML) as a human readable Antimony file. As displayed in <xref rid="btad753-F1" ref-type="fig">Fig. 1</xref>, when the user clicks on <monospace>BIOMD0000000001.xml</monospace>, VSCode-Antimony automatically converts the XML into Antimony, and creates a temporary file with the same name but with the <monospace>ant</monospace> extension. A notification appears indicating that the XML file is being edited as an Antimony file. Changes made to the <monospace>ant</monospace> file are propagated back to the original XML file.</p>
        <fig position="float" id="btad753-F1">
          <label>Figure 1.</label>
          <caption>
            <p>Editing an SBML file as Antimony. Clicking on BIOMD0000000001.xml causes the XML to be converted to antimony and opens a temporary file. When the Antimony file is saved, it is converted to an SBML file and replaces the original XML file.</p>
          </caption>
          <graphic xlink:href="btad753f1" position="float"/>
        </fig>
        <p><bold>Browsing BioModels</bold> provides modelers with a simple way to access models in BioModels in a human readable format. The “Browse Biomodels” option can be accessed when the user right clicks. As illustrated in <xref rid="btad753-F2" ref-type="fig">Fig. 2</xref>, the user is presented with a text box. Entering an integer into the text box causes VSCode-Antimony to search for that model number. Entering a string produces a list of models with that string. When the user selects a model in the list, the model is downloaded, converted to Antimony, and displayed in the editor.</p>
        <fig position="float" id="btad753-F2">
          <label>Figure 2.</label>
          <caption>
            <p>Browsing BioModels. Users can search BioModels, and view a selected model in the Antimony representation instead of XML.</p>
          </caption>
          <graphic xlink:href="btad753f2" position="float"/>
        </fig>
        <p><bold>Autocompletion</bold> is extremely valuable for model building. This feature operates while the modeler is typing. For example, suppose <monospace>glucose_rate</monospace> is a parameter name in the model and the user types “glu”, then the system suggests names that begin with “glu”. Since VSCode-Antimony has knowledge of the Antimony grammar, suggestions are context dependent. For example, the parameter <monospace>glucose_k1</monospace> is not suggested as a reactant or a product; however, it could be suggested while typing a rate law.</p>
        <p><bold>Model import</bold> allows modelers to reuse models developed elsewhere. Reuse has been essential to the rapid growth in size and complexity of software. By importing an Antimony file, the modeler has access to the model elements in that file, such as floating species, reactions, parameters, and function definitions (e.g. for rate laws). As illustrated in <xref rid="btad753-F3" ref-type="fig">Fig. 3</xref>, hovering over an <monospace>import</monospace> statement brings up a preview of what is being imported.</p>
        <fig position="float" id="btad753-F3">
          <label>Figure 3.</label>
          <caption>
            <p>Illustration of the hover preview provided by the import feature.</p>
          </caption>
          <graphic xlink:href="btad753f3" position="float"/>
        </fig>
        <p><bold>Automatic rate law insertion</bold> helps modelers with selecting and instantiating a rate law for a reaction. Types of rates laws include irreversible mass action, Michaelis–Menten, and Hill expressions. Once the rate law type is known, the rate law must be instantiated for the reaction. VSCode facilitates selecting the rate law type, and it automates rate law instantiation.</p>
        <p><xref rid="btad753-F4" ref-type="fig">Figure 4</xref> displays an example of rate law insertion for the reaction <monospace>React1: BLL + DL =&gt; ILL</monospace>. The user right-clicks and selects “Insert Rate Law.” Then a drop-down menu appears that allows for selection of the rate law functional form. In the figure, “Irreversible Mass-Action Bi-Uni” is chosen. VSCode-Antimony then provides for in-line entry of required constants to instantiate the rate law.</p>
        <fig position="float" id="btad753-F4">
          <label>Figure 4.</label>
          <caption>
            <p>Example of rate law insertion.</p>
          </caption>
          <graphic xlink:href="btad753f4" position="float"/>
        </fig>
        <p><bold>Annotation creation</bold> simplifies the creation of annotations for model elements such as chemical species, reactions, and compartments. This feature leverages the built-in capability of VSCode-Antimony to query knowledge sources that contain annotations such as ChEBI for chemical species and Rhea for reactions. The feature leverages the grammar processing capabilities of VSCode-Antimony to determine the type of the model element, and from this, select appropriate knowledge resources for that type. By type appropriate, we mean that if the symbol being annotated is a chemical species, then we display first knowledge sources for chemical species (e.g. ChEBI). On the other hand, if what is being highlighted is a reaction, we display first knowledge sources for reactions (e.g. Rhea). Type appropriate knowledge sources are indicated by an asterisk (“*”). The user experience is depicted in <xref rid="btad753-F5" ref-type="fig">Fig. 5</xref>.</p>
        <fig position="float" id="btad753-F5">
          <label>Figure 5.</label>
          <caption>
            <p>Annotation creation steps: (1) The user selects a model element to annotate, and does a right click. (2) VSCode-Antimony displays a pop-up menu. The user selects “Create Annotation” (3) VSCode-Antimony displays a list of knowledge sources from which annotations may be selected. Knowledge sources with an asterisk (“*”) are type appropriate. (4) The user enters a descriptive text for the model element being annotated. VSCode-Antimony displays query responses. (5) The user selects an annotation, and an annotation statement is entered at the bottom of the file.</p>
          </caption>
          <graphic xlink:href="btad753f5" position="float"/>
        </fig>
      </sec>
      <sec>
        <title>3.1.2 Analyze</title>
        <p>Model analysis is about understanding the elements of the models (e.g. species, reactions, compartments), and how they interact over time.</p>
        <p><bold>Syntax highlighting</bold>, also known as syntax coloring, is a feature offered by many source editors for programming languages to display different colors according to the type of language element. A study published at the PPIG conference (<xref rid="btad753-B17" ref-type="bibr">Sarkar, 2015</xref>) suggests that syntax highlighting can significantly reduce the time taken for a programmer to internalize the semantics of a program. We believe that similar benefits are possible for modelers. VSCode-Antimony highlights reaction names, species names, operators, event names, units, functions, and more. <xref rid="btad753-F6" ref-type="fig">Figure 6</xref> displays an example of VSCode-Antimony syntax highlighting.</p>
        <fig position="float" id="btad753-F6">
          <label>Figure 6.</label>
          <caption>
            <p>An Antimony model (<xref rid="btad753-B6" ref-type="bibr">Edelstein <italic toggle="yes">et al.</italic>, 1996</xref>) highlighted by VSCode-Antimony.</p>
          </caption>
          <graphic xlink:href="btad753f6" position="float"/>
        </fig>
        <p><bold>Annotation highlighting</bold> provides a fast, visual indication of the model elements that are annotated or are <italic toggle="yes">not</italic> annotated (depending on a global setting accessible through a right click). This feature facilitates analysis by communicating the modeling elements for which more detailed information is available. It also provides a way to identify model elements that should be annotated.</p>
        <p><bold>Hover messages</bold> are text displayed on a mouse-over. In software source editors, mouse-over is widely used to display the type and values of variables and the types of arguments to functions. Providing this information in context reduces searching through files. Users of VSCode-Antimony see hover messages for a wide variety of model elements; the message content depends on the type of the model element. For variables, (e.g. species: parameter, compartment), hover displays the variable type, assigned value, annotation information. For functions, hover displays the types of the arguments to functions. And for reactions, hover displays annotation information. <xref rid="btad753-F7" ref-type="fig">Figure 7</xref> displays a hover message for the chemical species <monospace>BLL</monospace> in a model.</p>
        <fig position="float" id="btad753-F7">
          <label>Figure 7.</label>
          <caption>
            <p>Example of hover messages for a species.</p>
          </caption>
          <graphic xlink:href="btad753f7" position="float"/>
        </fig>
        <p><bold>Model navigation</bold> is a “model aware” way of browsing a model file. The analogous feature in software source editors is called “code navigation,” and provides a way to view the definitions of variables and functions. In VSCode-Antimony, navigation is provided to the definition of model symbols and the initialization of variable values. This is done by (a) selecting a model symbol, (b) right-clicking, and (c) selecting “Go to Definition.” <xref rid="btad753-F8" ref-type="fig">Figure 8</xref> illustrates how this works.</p>
        <fig position="float" id="btad753-F8">
          <label>Figure 8.</label>
          <caption>
            <p>Example of code navigation.</p>
          </caption>
          <graphic xlink:href="btad753f8" position="float"/>
        </fig>
        <p><bold>Error and warning detection</bold> is widely used in software source editors to increase the quality and productivity of software engineering. Source editors can detect <italic toggle="yes">static</italic> errors, errors that can be detected without running code. Examples include syntax errors and flow control issues, such as code that is unreachable (e.g. code that it is preceded by a <monospace>return</monospace> statement). In VSCode, errors and warnings are indicated by a “squiggly underline” beneath the questionable text.</p>
        <p>There are many examples of static testing in Systems Biology. MEMOTE (<xref rid="btad753-B13" ref-type="bibr">Lieven <italic toggle="yes">et al.</italic>, 2020</xref>) generates a report on annotation quality, and MASSpy (<xref rid="btad753-B10" ref-type="bibr">Haiman <italic toggle="yes">et al.</italic>, 2021</xref>) identifies missing values, parameters, fluxes, and concentrations for Systems Biology models. At present, VSCode-Antimony provides a subset of these features by detecting: syntax errors (based on grammar analysis of the Antimony Language), uninitialized variables, and type mismatches between the arguments of a function call and its definition. We distinguish between errors and warnings based on the effect on running a simulation. An error means that the simulation will not run; warnings indicate a questionable modeling practice (e.g. overriding the value of a parameter). Errors are indicated by a red squiggly line, and warnings by a yellow squiggly line. <xref rid="btad753-T2" ref-type="table">Table 2</xref> displays to errors and warnings detected by VSCode-Antimony.</p>
        <table-wrap position="float" id="btad753-T2">
          <label>Table 2.</label>
          <caption>
            <p>Errors (E) and warnings (W) in VSCode-Antimony. Element types are species (Spc), parameters (Prm), compartments (Cpt), reactions (Rea), rate laws (Rl), function (Fun), modular models (Mdl), and general (Gen).</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th rowspan="1" colspan="1">Type</th>
                <th rowspan="1" colspan="1">Issue</th>
                <th rowspan="1" colspan="1">E/W</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Referencing uninitialized species</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Invalid arithmetic expression</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Variable is not a fixed-species in reaction</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Overriding rate rule</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Evt</td>
                <td rowspan="1" colspan="1">Overriding defined event trigger</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Unused parameter</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Calling undefined function</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect function parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect/incompatible parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Defining a new function with a used name</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Calling undefined modular model</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect modular model parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding display name</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding incompatible type to previous type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected token</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected newline or EOF</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
      <sec>
        <title>3.1.3 Translate</title>
        <p>Model developers sometimes need to consider more than one representation of a model. Model translation converts between model representations. At present, VSCode-Antimony has features for converting between Antimony and SBML/XML. Other model representations can be of interest as well. For example, CellML represents a biochemical model as a system of differential equations.</p>
        <p><bold>Bidirectional editing</bold> provides a way to simultaneously edit two representations of the same model. This is useful if there are imperfections in the translation between model representations. For example, at present, there is no way to represent comments in SBML, and so comments in an Antimony file are lost when the file is translated to SBML. Another reason for bidirectional editing is to support tool developers who generate new model representations.</p>
        <p>VSCode-Antimony displays model representations in a split-screen mode, as illustrated in <xref rid="btad753-F9" ref-type="fig">Fig. 9</xref>. Changes made in one model representation are propagated to the other representation.</p>
        <fig position="float" id="btad753-F9">
          <label>Figure 9.</label>
          <caption>
            <p>Bidirectional editing of Antimony and SBML representations of a model.</p>
          </caption>
          <graphic xlink:href="btad753f9" position="float"/>
        </fig>
        <p><bold>SaveAs features</bold> provide for translating the current model representation. VSCode-Antimony provides for saving an Antimony file as SBML, and for saving an SBML file as Antimony. This feature is accessed by a right-click and selecting “Convert to Antimony” or “Convert to SBML.”</p>
      </sec>
    </sec>
    <sec>
      <title>3.2 Installation, documentation, testing, limitations</title>
      <p>Before installing VSCode-Antimony, you must first install VSCode as described in <ext-link xlink:href="https://code.visualstudio.com/" ext-link-type="uri">https://code.visualstudio.com/</ext-link>. VSCode-Antimony is a VSCode extension. Start VSCode, and then open the VSCode extensions. Search for “Antimony,” and then select “Antimony Extension Pack.” The extension pack automatically installs two extensions: the Antimony extension which provides language supports, and the Antimony Syntax which provides the syntax coloring scheme for the Antimony extension. The information displayed when the VSCode-Antimony extension is installed may include additional instructions.</p>
      <p>The Visual Studio Marketplace provides some documentation of VSCode-Antimony; more details can be found in the project GitHub repository at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      <p>We have developed extensive unit tests using <monospace>pytest</monospace>, and continuous integration using GitHub actions.</p>
      <p>VSCode-Antimony supports the analysis of deterministic kinetic models, and so does not support features related to uncertainty and statistical analysis.</p>
    </sec>
    <sec>
      <title>3.3 Use case</title>
      <p>This scenario describes a use case in which VSCode-Antimony helps with modifying an existing model. The scenario adds a reaction to BioModels 200, a model of chemotaxis with 32 reactions (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>).</p>
      <disp-formula id="E1">
        <mml:math id="M1" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
            <mml:mo>=</mml:mo>
            <mml:mo>&gt;</mml:mo>
            <mml:mi mathvariant="monospace">Ypp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAA</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>We want the rate law for this reaction to be reversible mass action:</p>
      <disp-formula id="E2">
        <mml:math id="M2" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">cell</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">phosphotransfer</mml:mi>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">r</mml:mi>
            <mml:mn>12</mml:mn>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">k</mml:mi>
            <mml:mn>1</mml:mn>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>The first step is to get the existing model into an environment where it can be modified. Using a text editor requires: (a) browsing to BioModels; (b) downloading the SBML file for the model; and (c) converting the SBML file into a human readable representation. However, with VSCode-Antimony, we use the “Browse BioModels” feature, enter 200, and select “Bray1995.” We see the model in an Antimony representation. We save the model as a new file.</p>
      <p>We then proceed as follows:</p>
      <list list-type="order">
        <list-item>
          <p>The user types
<disp-formula id="E3"><mml:math id="M3" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWW</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>At this point, the autocompletion feature provides assistance; it suggests the text
<disp-formula id="E4"><mml:math id="M4" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The user presses newline to accept the text. Then, autocompletion provides a further suggestion:
<disp-formula id="E5"><mml:math id="M5" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>Again, the user presses newline to accept. There is a similar user experience when typing the right-hand-side of the reaction until the following text has been entered:
<disp-formula id="E6"><mml:math id="M6" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>To specify reaction kinetics, the user employs automatic rate law insertion. The user selects the rate law “irreversible mass action,” and current line appears as:
<disp-formula id="E7"><mml:math id="M7" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mo>_</mml:mo><mml:mo>_</mml:mo><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The underscore indicates that the user needs to supply text, in this case a parameter name that is a rate constant. The user types the necessary text, and presses the return key. The reaction has been entered.</p>
        </list-item>
        <list-item>
          <p>The user right clicks on the reaction, and selects “Create Annotation” to create an annotation for the reaction.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>3.4 Debugging a model</title>
      <p>Next, we consider a use case for analyzing an Antimony model. The particulars are as follows. The modeler has completed entering the model, and has done a simulation. The output of the simulation shows that <monospace>Y</monospace> is far too small and <monospace>Yp</monospace> is far too large. This suggests that one of the following is true for <monospace>Y</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H1a: <monospace>Y</monospace> is degraded too rapidly.</p>
        </list-item>
        <list-item>
          <p>H1b: <monospace>Y</monospace> is not synthesized fast enough.</p>
        </list-item>
      </list>
      <p>And, one of the following is true for <monospace>Yp</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H2a: <monospace>Yp</monospace> is synthesized too rapidly.</p>
        </list-item>
        <list-item>
          <p>H2b: <monospace>Yp</monospace> is not degraded enough.</p>
        </list-item>
      </list>
      <p>So, there are four cases to investigate. The first is that both H1a and H2a are true. We denote this by (H1a, H2a). The other cases are (H1a, H2b), and (H1b, H2a), (H1b, H2b).</p>
      <p>We illustrate how to investigate (H1a, H2a).</p>
      <list list-type="order">
        <list-item>
          <p>We search for all reactions in which <monospace>Y</monospace> appears before =&gt;, and <monospace>Yp</monospace> appears after =&gt;; that is, <monospace>Y</monospace> is a reactant and <monospace>Yp</monospace> is a product. VSCode-Antimony allows using editors that search for regular expressions (e.g. <monospace>vim</monospace>). The modeler enters the search string <monospace>“</monospace><monospace>Y</monospace> .*=.*<monospace>Yp</monospace>.<monospace>”</monospace> This search string looks for the occurrence of <monospace>“</monospace><monospace>Y</monospace><monospace>”</monospace> followed by a space, followed by any number of characters, followed by <monospace>“</monospace>=<monospace>”</monospace>, followed by any number of characters, and then followed by <monospace>“</monospace><monospace>Yp.”</monospace> The search returns 7 of the 32 reactions.</p>
        </list-item>
        <list-item>
          <p>We look for errors or warnings in these statements, as indicated by the yellow or red squiggly lines.</p>
        </list-item>
        <list-item>
          <p>Seeing no errors, we examine each reaction in turn. The first is:
<disp-formula id="E8"><mml:math id="M8" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Y</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>7</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="monospace">k</mml:mi><mml:mn mathvariant="monospace">1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Y</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We do a string search to find reactions in which <monospace>Yp</monospace> is degraded and <monospace>Y</monospace> is synthesized. The search yields
<disp-formula id="E9"><mml:math id="M9" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="normal">Y</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>8</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="normal">k</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We use the VSCode-Antimony hover message to see if <monospace>phosphorylation_r7_k1</monospace> is much larger than phos<monospace>phorylation_r8_k1</monospace> since this would explain the data that we observe.</p>
        </list-item>
        <list-item>
          <p>The process continues with the remaining six reactions returned in the search in step (1).</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>Our interest in text-based model development follows from the observation that experienced software engineers use text-based tools to develop complex software. This observation led us to build VSCode-Antimony, a source editor for developing biochemical models using the Antimony modeling language.</p>
    <p>Modern software engineering relies heavily on Interactive Development Environments (IDEs) such as PyCharm, Visual Studio, and VSCode. These tools provide much more than source editing. They also provide an environment for running, debugging, and collaborative development.</p>
    <p>We believe that the development of biochemical models likely has requirements similar to those for developing complex software. For example, we expect that a biochemical IDE could run simulations and view the results. Results should be accessible either by a hover over a variable or through a separate results pane (as RStudio) (<xref rid="btad753-B19" ref-type="bibr">van der Lo and de Jorge, 2023</xref>).</p>
    <p>There are ways in which we expect that a model IDE should differ from a software IDE. One way relates to model visualization. It is common to visualize biochemical models as a directed graph. So, there is a requirement to have bidirectional visualization and editing of the text and graphical representation of a model. Beyond this, it is likely desirable to provide for the easy integration of many tools with the source editor, such as checking for stoichiometric inconsistencies (<xref rid="btad753-B9" ref-type="bibr">Gevorgyan <italic toggle="yes">et al.</italic>, 2008</xref>).</p>
    <p>We further expect that debugging a biochemical model differs from debugging software. Debugging software is done by isolating where the error occurs. However, as Section 3.4 illustrates, there is often no convenient way to isolate problems with a biochemical model because of the interconnectedness of chemical species and reactions. Revisiting the scenario in Section 3.4, the concentration of <monospace>Y</monospace> is too small and the concentration of <monospace>Yp</monospace> is too large. Analyzing this problem requires analyzing the reactions that synthesize and/or degrade chemical species to understand why reaction fluxes are too large or too small. The explanation may be that some species in a reaction’s rate law is too large (small). This means that the analysis can be recursive, adding to the complexity of debugging biochemical models.</p>
    <p>In the near term, we are addressing limitations of our current implementation. Specifically, we want to address support for SBML packages such as Flux Balance Constraints and statistical distributions (distrib).</p>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>Developing models in systems biology is a complex, knowledge-intensive activity. Drawing on the experience of software engineering, we believe that expert modelers can benefit from good tools for modeling using text-based representations of models. Herein, our focus is on Antimony, a human readable representation of SBML models.</p>
    <p>At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. This motivated the development of VSCode-Antimony, an editor that is model aware and so can provide sophisticated features for building, analyzing, and translating models written in the Antimony modeling language. For example, VSCode-Antimony provides autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
    <p>VSCode-Antimony is implemented as an extension to VSCode. It is freely available through the VSCode marketplace.</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We acknowledge the contribution of Adel Heydarabadi to the installation of python dependencies.</p>
  </ack>
  <sec>
    <title>Author contributions</title>
    <p>SM and HMS developed the initial concepts and features. LF, SAK, and EL contributed equally to subsequent design and implementations JLH and HMS contributed equally to directing this work, and JLH write the first draft. JG provided strategic guidance and provided extensive revisions to the paper.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>The authors are most grateful to generous funding from the National Science Foundation award CMMI-1933453, NIBIB of the National Institutes of Health under award number P41EB023912, the Washington Research Foundation (June 2014), and a Data Science Environments project award from the Gordon and Betty Moore Foundation (Award #2013-10-29), and the Alfred P. Sloan Foundation (Award #3835) to the University of Washington eScience Institute. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Science Foundation or the University of Washington.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad753-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bansal</surname><given-names>P</given-names></string-name>, <string-name><surname>Morgat</surname><given-names>A</given-names></string-name>, <string-name><surname>Axelsen</surname><given-names>KB</given-names></string-name></person-group><etal>et al</etal><article-title>Rhea, the reaction knowledgebase in 2022</article-title>. <source>Nucleic Acids Res</source><year>2022</year>;<volume>50</volume>:<fpage>D693</fpage>–<lpage>D700</lpage>.<pub-id pub-id-type="pmid">34755880</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bray</surname><given-names>D</given-names></string-name>, <string-name><surname>Bourret</surname><given-names>RB.</given-names></string-name></person-group><article-title>Computer analysis of the binding reactions leading to a transmembrane receptor-linked multiprotein complex involved in bacterial chemotaxis</article-title>. <source>Mol Biol Cell</source><year>1995</year>;<volume>6</volume>:<fpage>1367</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">8573792</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B3">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Cameron</surname><given-names>D</given-names></string-name>, <string-name><surname>Elliott</surname><given-names>J</given-names></string-name>, <string-name><surname>Loy</surname><given-names>M</given-names></string-name></person-group> et al. <source>Learning GNU Emacs, 3rd edn</source>. <publisher-name>O’Reilly</publisher-name>, <year>2005</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Choi</surname><given-names>K</given-names></string-name>, <string-name><surname>Medley</surname><given-names>JK</given-names></string-name>, <string-name><surname>König</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Tellurium: an extensible python-based modeling environment for systems and synthetic biology</article-title>. <source>Biosystems</source><year>2018</year>;<volume>171</volume>:<fpage>74</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">30053414</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Degtyarenko</surname><given-names>K</given-names></string-name>, <string-name><surname>de Matos</surname><given-names>P</given-names></string-name>, <string-name><surname>Ennis</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Chebi: a database and ontology for chemical entities of biological interest</article-title>. <source>Nucleic Acids Res</source><year>2007</year>;<volume>36</volume>:<fpage>D344</fpage>–<lpage>D350</lpage>.<pub-id pub-id-type="pmid">17932057</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Edelstein</surname><given-names>SJ</given-names></string-name>, <string-name><surname>Schaad</surname><given-names>O</given-names></string-name>, <string-name><surname>Henry</surname><given-names>E</given-names></string-name></person-group><etal>et al</etal><article-title>A kinetic mechanism for nicotinic acetylcholine receptors based on multiple allosteric transitions</article-title>. <source>Biol Cybern</source><year>1996</year>;<volume>75</volume>:<fpage>361</fpage>–<lpage>79</lpage>. pages<pub-id pub-id-type="pmid">8983160</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B7">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Garcia</surname><given-names>M</given-names></string-name>, <string-name><surname>Rojas</surname><given-names>H.</given-names></string-name></person-group><article-title>Hands-on visual studio 2022</article-title>. Birmingham, UK: Packt, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gevorgyan</surname><given-names>A</given-names></string-name>, <string-name><surname>Poolman</surname><given-names>MG</given-names></string-name>, <string-name><surname>Fell</surname><given-names>DA</given-names></string-name></person-group><etal>et al</etal><article-title>Detection of stoichiometric inconsistencies in biomolecular models</article-title>. <source>Bioinformatics</source><year>2008</year>;<volume>24</volume>:<fpage>2245</fpage>–<lpage>51</lpage>.<pub-id pub-id-type="pmid">18697772</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Haiman</surname><given-names>ZB</given-names></string-name>, <string-name><surname>Zielinski</surname><given-names>DC</given-names></string-name>, <string-name><surname>Koike</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>Masspy: building, simulating, and visualizing dynamic biological models in python using mass action kinetics</article-title>. <source>PLoS Comput Biol</source><year>2021</year>;<volume>17</volume>:<fpage>e1008208</fpage>.<pub-id pub-id-type="pmid">33507922</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hoops</surname><given-names>S</given-names></string-name>, <string-name><surname>Sahle</surname><given-names>S</given-names></string-name>, <string-name><surname>Gauges</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Copasi, a complex pathway simulator</article-title>. <source>Bioinformatics</source><year>2006</year>;<volume>22</volume>:<fpage>3067</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">17032683</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M</given-names></string-name>, <string-name><surname>Finney</surname><given-names>A</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>HM</given-names></string-name></person-group>, <collab>SBML Forum</collab><etal>et al</etal><article-title>The systems biology markup language (sbml): a medium for representation and exchange of biochemical network models</article-title>. <source>Bioinformatics</source><year>2003</year>;<volume>19</volume>:<fpage>524</fpage>–<lpage>31</lpage>.<pub-id pub-id-type="pmid">12611808</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lieven</surname><given-names>C</given-names></string-name>, <string-name><surname>Beber</surname><given-names>ME</given-names></string-name>, <string-name><surname>Olivier</surname><given-names>BG</given-names></string-name></person-group><etal>et al</etal><article-title>Memote for standardized genome-scale metabolic model testing</article-title>. <source>Nat Biotechnol</source><year>2020</year>;<volume>38</volume>:<fpage>272</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">32123384</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B14">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Peleg</surname><given-names>D.</given-names></string-name></person-group><source>Mastering Sublime Text</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2013</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B15">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Robbins</surname><given-names>A</given-names></string-name>, <string-name><surname>Hannah</surname><given-names>E</given-names></string-name>, <string-name><surname>Lamb</surname><given-names>L</given-names></string-name></person-group>. <source>Learning the vi and Vim Editors</source>. <publisher-name>O’Reilly</publisher-name>, <year>2008</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rodriguez</surname><given-names>N</given-names></string-name>, <string-name><surname>Donizelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Le Novère</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Sbmleditor: effective creation of models in the systems biology markup language (sbml)</article-title>. <source>BMC Bioinformatics</source><year>2007</year>;<volume>8</volume>:<fpage>1</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">17199892</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B17">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Sarkar</surname><given-names>A.</given-names></string-name></person-group><year>2015</year>. The impact of syntax colouring on program comprehension. <italic toggle="yes">Proceedings of the 26th Annual Conference of the Psychology of Programming Interest Group, Milton Keynes, UK</italic>.</mixed-citation>
    </ref>
    <ref id="btad753-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>LP</given-names></string-name>, <string-name><surname>Bergmann</surname><given-names>FT</given-names></string-name>, <string-name><surname>Chandran</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>Antimony: a modular model definition language</article-title>. <source>Bioinformatics</source><year>2009</year>;<volume>25</volume>:<fpage>2452</fpage>–<lpage>4</lpage>.<pub-id pub-id-type="pmid">19578039</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B19">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>van der Lo</surname><given-names>M</given-names></string-name>, <string-name><surname>de Jorge</surname><given-names>E.</given-names></string-name></person-group><source>Learning RStudio for R statistical Computing</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10753917</article-id>
    <article-id pub-id-type="pmid">38096590</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad753</article-id>
    <article-id pub-id-type="publisher-id">btad753</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VSCode-Antimony: a source editor for building, analyzing, and translating antimony models</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Ma</surname>
          <given-names>Steve</given-names>
        </name>
        <aff><institution>NVIDIA Corporation</institution>, Redmond, WA 98052, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fan</surname>
          <given-names>Longxuan</given-names>
        </name>
        <aff><institution>Department of Mathematics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Konanki</surname>
          <given-names>Sai Anish</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Eva</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-8254-4957</contrib-id>
        <name>
          <surname>Gennari</surname>
          <given-names>John H</given-names>
        </name>
        <aff><institution>Biomedical and Health Informatics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Smith</surname>
          <given-names>Lucian P</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-0802-4069</contrib-id>
        <name>
          <surname>Hellerstein</surname>
          <given-names>Joseph L</given-names>
        </name>
        <aff><institution>eScience Institute, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
        <xref rid="btad753-cor1" ref-type="corresp"/>
        <!--jlheller@uw.edu-->
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3659-6817</contrib-id>
        <name>
          <surname>Sauro</surname>
          <given-names>Herbert M</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Martelli</surname>
          <given-names>Pier Luigi</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad753-cor1">Corresponding author: eScience Institute, c/o Allen School of Computer Science, University of Washington, Seattle, WA. 98195 United States. E-mail: <email>jlheller@uw.edu</email> (J.L.H.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-14">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad753</elocation-id>
    <history>
      <date date-type="received">
        <day>02</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>06</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>08</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>28</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad753.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Developing biochemical models in systems biology is a complex, knowledge-intensive activity. Some modelers (especially novices) benefit from model development tools with a graphical user interface. However, as with the development of complex software, text-based representations of models provide many benefits for advanced model development. At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Since these tools are not “model aware,” they do not provide features for: (i) model <bold>b</bold>uilding such as autocompletion of species names; (ii) model <bold>a</bold>nalysis such as hover messages that provide information about chemical species; and (iii) model <bold>t</bold>ranslation to convert between model representations. We refer to these as BAT features. </p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present VSCode-Antimony, a tool for building, analyzing, and translating models written in the Antimony modeling language, a human readable representation of Systems Biology Markup Language (SBML) models. VSCode-Antimony is a source editor, a tool with language-aware features. For example, there is autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>VSCode-Antimony is available as an open source extension in the VSCode Marketplace <ext-link xlink:href="https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony" ext-link-type="uri">https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony</ext-link>. Source code can be found at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Science Foundation award</institution>
          </institution-wrap>
        </funding-source>
        <award-id>CMMI-1933453</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>NIBIB of the National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Washington Research Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100001906</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Data Science Environments project award from the Gordon and Betty Moore Foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2013-10-29</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Alfred P. Sloan Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100000879</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>3835</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Washington eScience Institute</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Developing credible biochemical models in systems biology can be invaluable for creating novel medical diagnostics, commercially viable metabolic pathways as well as help drive basic research in cell biology. Although modeling is time-consuming and knowledge-intensive, there are many approaches to mitigating these challenges. One approach is to employ a graphical user interface (GUI) to guide users and reduce errors in model building (<xref rid="btad753-B11" ref-type="bibr">Hoops <italic toggle="yes">et al.</italic>, 2006</xref>). GUI systems are particularly helpful for less experienced and novice users. However, text-based representations of models provide another approach to dealing with large-scale models (<xref rid="btad753-B4" ref-type="bibr">Choi <italic toggle="yes">et al.</italic>, 2018</xref>). We see the situation as being analogous to the development of complex software where text-based approaches are widely used.</p>
    <p>There are several text-based representations of biochemical models. One popular choice is the Systems Biology Markup Language (SBML), a community standard for model exchange in an XML format (<xref rid="btad753-B12" ref-type="bibr">Hucka <italic toggle="yes">et al.</italic>, 2003</xref>). SBML is an effective computer-readable model representation, but it is verbose and obscure as a human readable model description language. This motivated the development of Antimony (<xref rid="btad753-B18" ref-type="bibr">Smith <italic toggle="yes">et al.</italic>, 2009</xref>), a human readable textual representation of SBML. For example, Antimony expresses reactions as chemical formulas, a representation that is quite familiar to developers of biochemical models.</p>
    <p>Developing biochemical models using text is currently done using a text editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Examples of text editors include <monospace>vim</monospace> (<xref rid="btad753-B15" ref-type="bibr">Robbins <italic toggle="yes">et al.</italic>, 2008</xref>), <monospace>emacs</monospace> (<xref rid="btad753-B3" ref-type="bibr">Cameron <italic toggle="yes">et al.</italic>, 2005</xref>), Windows <monospace>notepad</monospace>, and <monospace>sublime</monospace> (<xref rid="btad753-B14" ref-type="bibr">Peleg, 2013</xref>). Text editors make it easy to change the names of model variables. For example, we can change all occurrences of the names of the chemical species AMp and cAMp to AMP and cAMP by doing a <monospace>replace</monospace> of AMp with AMP. A text editor can also accelerate model building. To illustrate this, consider the chemotaxis model in BioModels model 200 (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>). The model contains several phosphorylation reactions of the form <monospace>X =&gt; Xp</monospace>, where <monospace>X</monospace> is one of the molecules: <monospace>WAA, WWAA, TTAA, TTWAA</monospace>. Rather than entering a phosphorylation reaction for each molecule, we can accelerate model building by placing the string <monospace>“X =&gt; Xp”</monospace> into the editor “clipboard” and repeating the following for each molecule: (i) paste the copied reaction and (ii) replace all occurrences of <monospace>X</monospace> with the molecule to be phosphorylated. A final appeal of a text editor is that many text editors are programmable, and so it possible to create automation in support of model building and analysis.</p>
    <p>Despite these benefits, developing biochemical models with a text editor has serious shortcomings. Foremost, <italic toggle="yes">text editors are not “model aware</italic>.<italic toggle="yes">”</italic> That is, text editors do not know about species, reactions, compartments, or parameters. Also, text editors do not know the syntax of model statements. This severely limits the ability of text editors to support model <bold>b</bold>uilding (e.g. autocompletion of variable names), model <bold>a</bold>nalysis (e.g. detecting errors in model statements), and model <bold>t</bold>ranslation (e.g. converting between SBML and Antimony or other formats). We use the term <italic toggle="yes">BAT</italic> feature to refer to capabilities that support model building, analysis, and translation.</p>
    <p>The absence of BAT features is analogous to problems faced in the early days of software engineering. At that time, software engineers used text editors that lacked knowledge of their programming language. In recent years, there has been a dramatic increase in the productivity and quality of software engineering as a result of source editors, Source editors are text editors with knowledge of the programming language. This knowledge enables source editors to provide syntax highlighting, code navigation (e.g. displaying method signatures), and error detection.</p>
    <p>Our focus is on SBML models. Since SBML is a community standard, one approach is to create a source editor for SBML, as is done in <xref rid="btad753-B16" ref-type="bibr">Rodriguez <italic toggle="yes">et al.</italic> (2007)</xref>. This system provides syntax highlighting of XML and error checking of XML syntax. Although these capabilities are useful at times, we believe that working at the level of XML is too low for most model developers who are thinking in terms of chemical reactions not in terms of XML angle brackets.</p>
    <p>This article describes a source editor for the Antimony modeling language. We chose Antimony because it provides a good match with the conceptual level at which models are developed. For example, the reaction <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>→</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow></mml:math></inline-formula> is written in Antimony as <monospace>O2</monospace> <monospace>+</monospace> <monospace>2 H2 -&gt; 2 H2O</monospace> for the chemical species <monospace>O2</monospace>, <monospace>H2</monospace>, <monospace>H2O</monospace>. A further benefit of using Antimony is that it supports model hierarchies through nesting of models. Such hierarchical representations can provide considerable benefits for scaling and model reuse. Our system, VSCode-Antimony, implements BAT features for building, analyzing, and translating Antimony models.</p>
  </sec>
  <sec>
    <title>2 Methods and materials</title>
    <p>Building a source editor for the Antimony language requires capabilities beyond those that are provided by a text editor. A text editor provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. However, a source editor knows about the modeling language itself. Examples include knowing the type of a symbol (e.g. species, parameter), changing the visual characteristics of symbols and statements (e.g. highlighting, underlining), accessing model related knowledge sources (e.g. ChEBI; <xref rid="btad753-B5" ref-type="bibr">Degtyarenko <italic toggle="yes">et al.</italic>, 2007</xref>), and translating between model representations.</p>
    <p>Although Antimony is a language for modeling biochemical reactions, it is also a computer language. As such, Antimony has a formal grammar just as there are formal grammars for as python, Java, and C. This observation led us to build the Antimony source editor as an extension to an existing source editor for computer programming. We chose VSCode (<xref rid="btad753-B7" ref-type="bibr">Garcia and Rojas, 2022</xref>) because it is widely used, open source, and has a well-supported application programming interface (API) for implementing extensions. The API for VSCode extensions provides many features we use in VSCode-Antimony: hover information (providing information when hovering over a symbol), autocompletion (completing partially entered text), jump to definition (navigating to related information about a symbol), error checking the structure of statements, highlighting, and underlining to indicate errors and warnings.</p>
    <p>The most significant consideration in implementing a VSCode extension is describing the grammar of the language for which the source editor is intended. VSCode provides a convenient way to describe the language grammar in terms of python regular expressions. However, parts of the Antimony language have a complex grammar. For example, an Antimony <monospace>event</monospace> specifies actions taken when a condition arises as determined by a Boolean expression of model variables. This can result in a fairly complicated statement that is challenging to parse correctly.</p>
    <p>Although VSCode provides a rich API for writing extensions, it is not sufficient for implementing a source editor for a biochemical modeling language. For example, VSCode-Antimony provides features for translating between representations of biochemical models, such as translating between Antimony and SBML. Although it is common in software to do one-way translations (e.g. compilation), two way translations are rare, especially maintaining two different representations of the same information with bi-directional editing.</p>
    <p>There is yet another requirement for developing biochemical models that differs from software engineering. Unlike programming languages, modeling languages often need to relate symbols used in the model to external “knowledge sources.” This linkage is essential to understanding the assumptions and scope of a model, both to interpret model results and to use the model as a building block in larger models. Example knowledge sources include ChEBI (Chemical Entities of Biological Interest), which describes small molecules, Rhea (<xref rid="btad753-B1" ref-type="bibr">Bansal <italic toggle="yes">et al.</italic>, 2022</xref>), which describe reactions, and the Gene Ontology (Gene Ontology Consortium, 2004), which provides descriptions of pathways and biological processes. Annotations provide the connection between symbols and knowledge sources. Often there are many choices for a seemingly simple molecule. For example, ChEBI lists approximately 1000 choices for “glucose.” VSCode-Antimony has capabilities for querying knowledge sources to assist modelers with annotating their models.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>This section describes how the capabilities detailed in Section 2 are used to construct the BAT features supported by VSCode-Antimony. Section 3.1 lists the BAT features. Subsequent sections demonstrate how the features support model augmentation (Section 3.3), analysis, and debugging (Section 3.4).</p>
    <sec>
      <title>3.1 BAT features</title>
      <p>VSCode-Antimony provides a rich set of BAT features that build on the capabilities described in Section 2. <xref rid="btad753-T1" ref-type="table">Table 1</xref> provides a summary.</p>
      <table-wrap position="float" id="btad753-T1">
        <label>Table 1.</label>
        <caption>
          <p>BAT features in VSCode Antimony.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">BAT category</th>
              <th rowspan="1" colspan="1">VSCode-Antimony feature</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Build</td>
              <td rowspan="1" colspan="1">Editing SBML files as Antimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Browsing BioModels</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Autocompletion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model import</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Automatic rate law insertion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation creation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Analyze</td>
              <td rowspan="1" colspan="1">Syntax highlighting</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation highlights</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Hover messages</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model navigation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Error and warning detection</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Translate</td>
              <td rowspan="1" colspan="1">Bidirectional editing</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsAntimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsSBML</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <sec>
        <title>3.1.1 Build</title>
        <p>Model building is about creating a new model and/or modifying an existing model.</p>
        <p><bold>Editing SBML files as Antimony</bold> allows modelers to browse and update an SBML file (in XML) as a human readable Antimony file. As displayed in <xref rid="btad753-F1" ref-type="fig">Fig. 1</xref>, when the user clicks on <monospace>BIOMD0000000001.xml</monospace>, VSCode-Antimony automatically converts the XML into Antimony, and creates a temporary file with the same name but with the <monospace>ant</monospace> extension. A notification appears indicating that the XML file is being edited as an Antimony file. Changes made to the <monospace>ant</monospace> file are propagated back to the original XML file.</p>
        <fig position="float" id="btad753-F1">
          <label>Figure 1.</label>
          <caption>
            <p>Editing an SBML file as Antimony. Clicking on BIOMD0000000001.xml causes the XML to be converted to antimony and opens a temporary file. When the Antimony file is saved, it is converted to an SBML file and replaces the original XML file.</p>
          </caption>
          <graphic xlink:href="btad753f1" position="float"/>
        </fig>
        <p><bold>Browsing BioModels</bold> provides modelers with a simple way to access models in BioModels in a human readable format. The “Browse Biomodels” option can be accessed when the user right clicks. As illustrated in <xref rid="btad753-F2" ref-type="fig">Fig. 2</xref>, the user is presented with a text box. Entering an integer into the text box causes VSCode-Antimony to search for that model number. Entering a string produces a list of models with that string. When the user selects a model in the list, the model is downloaded, converted to Antimony, and displayed in the editor.</p>
        <fig position="float" id="btad753-F2">
          <label>Figure 2.</label>
          <caption>
            <p>Browsing BioModels. Users can search BioModels, and view a selected model in the Antimony representation instead of XML.</p>
          </caption>
          <graphic xlink:href="btad753f2" position="float"/>
        </fig>
        <p><bold>Autocompletion</bold> is extremely valuable for model building. This feature operates while the modeler is typing. For example, suppose <monospace>glucose_rate</monospace> is a parameter name in the model and the user types “glu”, then the system suggests names that begin with “glu”. Since VSCode-Antimony has knowledge of the Antimony grammar, suggestions are context dependent. For example, the parameter <monospace>glucose_k1</monospace> is not suggested as a reactant or a product; however, it could be suggested while typing a rate law.</p>
        <p><bold>Model import</bold> allows modelers to reuse models developed elsewhere. Reuse has been essential to the rapid growth in size and complexity of software. By importing an Antimony file, the modeler has access to the model elements in that file, such as floating species, reactions, parameters, and function definitions (e.g. for rate laws). As illustrated in <xref rid="btad753-F3" ref-type="fig">Fig. 3</xref>, hovering over an <monospace>import</monospace> statement brings up a preview of what is being imported.</p>
        <fig position="float" id="btad753-F3">
          <label>Figure 3.</label>
          <caption>
            <p>Illustration of the hover preview provided by the import feature.</p>
          </caption>
          <graphic xlink:href="btad753f3" position="float"/>
        </fig>
        <p><bold>Automatic rate law insertion</bold> helps modelers with selecting and instantiating a rate law for a reaction. Types of rates laws include irreversible mass action, Michaelis–Menten, and Hill expressions. Once the rate law type is known, the rate law must be instantiated for the reaction. VSCode facilitates selecting the rate law type, and it automates rate law instantiation.</p>
        <p><xref rid="btad753-F4" ref-type="fig">Figure 4</xref> displays an example of rate law insertion for the reaction <monospace>React1: BLL + DL =&gt; ILL</monospace>. The user right-clicks and selects “Insert Rate Law.” Then a drop-down menu appears that allows for selection of the rate law functional form. In the figure, “Irreversible Mass-Action Bi-Uni” is chosen. VSCode-Antimony then provides for in-line entry of required constants to instantiate the rate law.</p>
        <fig position="float" id="btad753-F4">
          <label>Figure 4.</label>
          <caption>
            <p>Example of rate law insertion.</p>
          </caption>
          <graphic xlink:href="btad753f4" position="float"/>
        </fig>
        <p><bold>Annotation creation</bold> simplifies the creation of annotations for model elements such as chemical species, reactions, and compartments. This feature leverages the built-in capability of VSCode-Antimony to query knowledge sources that contain annotations such as ChEBI for chemical species and Rhea for reactions. The feature leverages the grammar processing capabilities of VSCode-Antimony to determine the type of the model element, and from this, select appropriate knowledge resources for that type. By type appropriate, we mean that if the symbol being annotated is a chemical species, then we display first knowledge sources for chemical species (e.g. ChEBI). On the other hand, if what is being highlighted is a reaction, we display first knowledge sources for reactions (e.g. Rhea). Type appropriate knowledge sources are indicated by an asterisk (“*”). The user experience is depicted in <xref rid="btad753-F5" ref-type="fig">Fig. 5</xref>.</p>
        <fig position="float" id="btad753-F5">
          <label>Figure 5.</label>
          <caption>
            <p>Annotation creation steps: (1) The user selects a model element to annotate, and does a right click. (2) VSCode-Antimony displays a pop-up menu. The user selects “Create Annotation” (3) VSCode-Antimony displays a list of knowledge sources from which annotations may be selected. Knowledge sources with an asterisk (“*”) are type appropriate. (4) The user enters a descriptive text for the model element being annotated. VSCode-Antimony displays query responses. (5) The user selects an annotation, and an annotation statement is entered at the bottom of the file.</p>
          </caption>
          <graphic xlink:href="btad753f5" position="float"/>
        </fig>
      </sec>
      <sec>
        <title>3.1.2 Analyze</title>
        <p>Model analysis is about understanding the elements of the models (e.g. species, reactions, compartments), and how they interact over time.</p>
        <p><bold>Syntax highlighting</bold>, also known as syntax coloring, is a feature offered by many source editors for programming languages to display different colors according to the type of language element. A study published at the PPIG conference (<xref rid="btad753-B17" ref-type="bibr">Sarkar, 2015</xref>) suggests that syntax highlighting can significantly reduce the time taken for a programmer to internalize the semantics of a program. We believe that similar benefits are possible for modelers. VSCode-Antimony highlights reaction names, species names, operators, event names, units, functions, and more. <xref rid="btad753-F6" ref-type="fig">Figure 6</xref> displays an example of VSCode-Antimony syntax highlighting.</p>
        <fig position="float" id="btad753-F6">
          <label>Figure 6.</label>
          <caption>
            <p>An Antimony model (<xref rid="btad753-B6" ref-type="bibr">Edelstein <italic toggle="yes">et al.</italic>, 1996</xref>) highlighted by VSCode-Antimony.</p>
          </caption>
          <graphic xlink:href="btad753f6" position="float"/>
        </fig>
        <p><bold>Annotation highlighting</bold> provides a fast, visual indication of the model elements that are annotated or are <italic toggle="yes">not</italic> annotated (depending on a global setting accessible through a right click). This feature facilitates analysis by communicating the modeling elements for which more detailed information is available. It also provides a way to identify model elements that should be annotated.</p>
        <p><bold>Hover messages</bold> are text displayed on a mouse-over. In software source editors, mouse-over is widely used to display the type and values of variables and the types of arguments to functions. Providing this information in context reduces searching through files. Users of VSCode-Antimony see hover messages for a wide variety of model elements; the message content depends on the type of the model element. For variables, (e.g. species: parameter, compartment), hover displays the variable type, assigned value, annotation information. For functions, hover displays the types of the arguments to functions. And for reactions, hover displays annotation information. <xref rid="btad753-F7" ref-type="fig">Figure 7</xref> displays a hover message for the chemical species <monospace>BLL</monospace> in a model.</p>
        <fig position="float" id="btad753-F7">
          <label>Figure 7.</label>
          <caption>
            <p>Example of hover messages for a species.</p>
          </caption>
          <graphic xlink:href="btad753f7" position="float"/>
        </fig>
        <p><bold>Model navigation</bold> is a “model aware” way of browsing a model file. The analogous feature in software source editors is called “code navigation,” and provides a way to view the definitions of variables and functions. In VSCode-Antimony, navigation is provided to the definition of model symbols and the initialization of variable values. This is done by (a) selecting a model symbol, (b) right-clicking, and (c) selecting “Go to Definition.” <xref rid="btad753-F8" ref-type="fig">Figure 8</xref> illustrates how this works.</p>
        <fig position="float" id="btad753-F8">
          <label>Figure 8.</label>
          <caption>
            <p>Example of code navigation.</p>
          </caption>
          <graphic xlink:href="btad753f8" position="float"/>
        </fig>
        <p><bold>Error and warning detection</bold> is widely used in software source editors to increase the quality and productivity of software engineering. Source editors can detect <italic toggle="yes">static</italic> errors, errors that can be detected without running code. Examples include syntax errors and flow control issues, such as code that is unreachable (e.g. code that it is preceded by a <monospace>return</monospace> statement). In VSCode, errors and warnings are indicated by a “squiggly underline” beneath the questionable text.</p>
        <p>There are many examples of static testing in Systems Biology. MEMOTE (<xref rid="btad753-B13" ref-type="bibr">Lieven <italic toggle="yes">et al.</italic>, 2020</xref>) generates a report on annotation quality, and MASSpy (<xref rid="btad753-B10" ref-type="bibr">Haiman <italic toggle="yes">et al.</italic>, 2021</xref>) identifies missing values, parameters, fluxes, and concentrations for Systems Biology models. At present, VSCode-Antimony provides a subset of these features by detecting: syntax errors (based on grammar analysis of the Antimony Language), uninitialized variables, and type mismatches between the arguments of a function call and its definition. We distinguish between errors and warnings based on the effect on running a simulation. An error means that the simulation will not run; warnings indicate a questionable modeling practice (e.g. overriding the value of a parameter). Errors are indicated by a red squiggly line, and warnings by a yellow squiggly line. <xref rid="btad753-T2" ref-type="table">Table 2</xref> displays to errors and warnings detected by VSCode-Antimony.</p>
        <table-wrap position="float" id="btad753-T2">
          <label>Table 2.</label>
          <caption>
            <p>Errors (E) and warnings (W) in VSCode-Antimony. Element types are species (Spc), parameters (Prm), compartments (Cpt), reactions (Rea), rate laws (Rl), function (Fun), modular models (Mdl), and general (Gen).</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th rowspan="1" colspan="1">Type</th>
                <th rowspan="1" colspan="1">Issue</th>
                <th rowspan="1" colspan="1">E/W</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Referencing uninitialized species</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Invalid arithmetic expression</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Variable is not a fixed-species in reaction</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Overriding rate rule</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Evt</td>
                <td rowspan="1" colspan="1">Overriding defined event trigger</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Unused parameter</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Calling undefined function</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect function parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect/incompatible parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Defining a new function with a used name</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Calling undefined modular model</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect modular model parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding display name</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding incompatible type to previous type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected token</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected newline or EOF</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
      <sec>
        <title>3.1.3 Translate</title>
        <p>Model developers sometimes need to consider more than one representation of a model. Model translation converts between model representations. At present, VSCode-Antimony has features for converting between Antimony and SBML/XML. Other model representations can be of interest as well. For example, CellML represents a biochemical model as a system of differential equations.</p>
        <p><bold>Bidirectional editing</bold> provides a way to simultaneously edit two representations of the same model. This is useful if there are imperfections in the translation between model representations. For example, at present, there is no way to represent comments in SBML, and so comments in an Antimony file are lost when the file is translated to SBML. Another reason for bidirectional editing is to support tool developers who generate new model representations.</p>
        <p>VSCode-Antimony displays model representations in a split-screen mode, as illustrated in <xref rid="btad753-F9" ref-type="fig">Fig. 9</xref>. Changes made in one model representation are propagated to the other representation.</p>
        <fig position="float" id="btad753-F9">
          <label>Figure 9.</label>
          <caption>
            <p>Bidirectional editing of Antimony and SBML representations of a model.</p>
          </caption>
          <graphic xlink:href="btad753f9" position="float"/>
        </fig>
        <p><bold>SaveAs features</bold> provide for translating the current model representation. VSCode-Antimony provides for saving an Antimony file as SBML, and for saving an SBML file as Antimony. This feature is accessed by a right-click and selecting “Convert to Antimony” or “Convert to SBML.”</p>
      </sec>
    </sec>
    <sec>
      <title>3.2 Installation, documentation, testing, limitations</title>
      <p>Before installing VSCode-Antimony, you must first install VSCode as described in <ext-link xlink:href="https://code.visualstudio.com/" ext-link-type="uri">https://code.visualstudio.com/</ext-link>. VSCode-Antimony is a VSCode extension. Start VSCode, and then open the VSCode extensions. Search for “Antimony,” and then select “Antimony Extension Pack.” The extension pack automatically installs two extensions: the Antimony extension which provides language supports, and the Antimony Syntax which provides the syntax coloring scheme for the Antimony extension. The information displayed when the VSCode-Antimony extension is installed may include additional instructions.</p>
      <p>The Visual Studio Marketplace provides some documentation of VSCode-Antimony; more details can be found in the project GitHub repository at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      <p>We have developed extensive unit tests using <monospace>pytest</monospace>, and continuous integration using GitHub actions.</p>
      <p>VSCode-Antimony supports the analysis of deterministic kinetic models, and so does not support features related to uncertainty and statistical analysis.</p>
    </sec>
    <sec>
      <title>3.3 Use case</title>
      <p>This scenario describes a use case in which VSCode-Antimony helps with modifying an existing model. The scenario adds a reaction to BioModels 200, a model of chemotaxis with 32 reactions (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>).</p>
      <disp-formula id="E1">
        <mml:math id="M1" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
            <mml:mo>=</mml:mo>
            <mml:mo>&gt;</mml:mo>
            <mml:mi mathvariant="monospace">Ypp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAA</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>We want the rate law for this reaction to be reversible mass action:</p>
      <disp-formula id="E2">
        <mml:math id="M2" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">cell</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">phosphotransfer</mml:mi>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">r</mml:mi>
            <mml:mn>12</mml:mn>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">k</mml:mi>
            <mml:mn>1</mml:mn>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>The first step is to get the existing model into an environment where it can be modified. Using a text editor requires: (a) browsing to BioModels; (b) downloading the SBML file for the model; and (c) converting the SBML file into a human readable representation. However, with VSCode-Antimony, we use the “Browse BioModels” feature, enter 200, and select “Bray1995.” We see the model in an Antimony representation. We save the model as a new file.</p>
      <p>We then proceed as follows:</p>
      <list list-type="order">
        <list-item>
          <p>The user types
<disp-formula id="E3"><mml:math id="M3" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWW</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>At this point, the autocompletion feature provides assistance; it suggests the text
<disp-formula id="E4"><mml:math id="M4" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The user presses newline to accept the text. Then, autocompletion provides a further suggestion:
<disp-formula id="E5"><mml:math id="M5" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>Again, the user presses newline to accept. There is a similar user experience when typing the right-hand-side of the reaction until the following text has been entered:
<disp-formula id="E6"><mml:math id="M6" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>To specify reaction kinetics, the user employs automatic rate law insertion. The user selects the rate law “irreversible mass action,” and current line appears as:
<disp-formula id="E7"><mml:math id="M7" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mo>_</mml:mo><mml:mo>_</mml:mo><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The underscore indicates that the user needs to supply text, in this case a parameter name that is a rate constant. The user types the necessary text, and presses the return key. The reaction has been entered.</p>
        </list-item>
        <list-item>
          <p>The user right clicks on the reaction, and selects “Create Annotation” to create an annotation for the reaction.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>3.4 Debugging a model</title>
      <p>Next, we consider a use case for analyzing an Antimony model. The particulars are as follows. The modeler has completed entering the model, and has done a simulation. The output of the simulation shows that <monospace>Y</monospace> is far too small and <monospace>Yp</monospace> is far too large. This suggests that one of the following is true for <monospace>Y</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H1a: <monospace>Y</monospace> is degraded too rapidly.</p>
        </list-item>
        <list-item>
          <p>H1b: <monospace>Y</monospace> is not synthesized fast enough.</p>
        </list-item>
      </list>
      <p>And, one of the following is true for <monospace>Yp</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H2a: <monospace>Yp</monospace> is synthesized too rapidly.</p>
        </list-item>
        <list-item>
          <p>H2b: <monospace>Yp</monospace> is not degraded enough.</p>
        </list-item>
      </list>
      <p>So, there are four cases to investigate. The first is that both H1a and H2a are true. We denote this by (H1a, H2a). The other cases are (H1a, H2b), and (H1b, H2a), (H1b, H2b).</p>
      <p>We illustrate how to investigate (H1a, H2a).</p>
      <list list-type="order">
        <list-item>
          <p>We search for all reactions in which <monospace>Y</monospace> appears before =&gt;, and <monospace>Yp</monospace> appears after =&gt;; that is, <monospace>Y</monospace> is a reactant and <monospace>Yp</monospace> is a product. VSCode-Antimony allows using editors that search for regular expressions (e.g. <monospace>vim</monospace>). The modeler enters the search string <monospace>“</monospace><monospace>Y</monospace> .*=.*<monospace>Yp</monospace>.<monospace>”</monospace> This search string looks for the occurrence of <monospace>“</monospace><monospace>Y</monospace><monospace>”</monospace> followed by a space, followed by any number of characters, followed by <monospace>“</monospace>=<monospace>”</monospace>, followed by any number of characters, and then followed by <monospace>“</monospace><monospace>Yp.”</monospace> The search returns 7 of the 32 reactions.</p>
        </list-item>
        <list-item>
          <p>We look for errors or warnings in these statements, as indicated by the yellow or red squiggly lines.</p>
        </list-item>
        <list-item>
          <p>Seeing no errors, we examine each reaction in turn. The first is:
<disp-formula id="E8"><mml:math id="M8" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Y</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>7</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="monospace">k</mml:mi><mml:mn mathvariant="monospace">1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Y</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We do a string search to find reactions in which <monospace>Yp</monospace> is degraded and <monospace>Y</monospace> is synthesized. The search yields
<disp-formula id="E9"><mml:math id="M9" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="normal">Y</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>8</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="normal">k</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We use the VSCode-Antimony hover message to see if <monospace>phosphorylation_r7_k1</monospace> is much larger than phos<monospace>phorylation_r8_k1</monospace> since this would explain the data that we observe.</p>
        </list-item>
        <list-item>
          <p>The process continues with the remaining six reactions returned in the search in step (1).</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>Our interest in text-based model development follows from the observation that experienced software engineers use text-based tools to develop complex software. This observation led us to build VSCode-Antimony, a source editor for developing biochemical models using the Antimony modeling language.</p>
    <p>Modern software engineering relies heavily on Interactive Development Environments (IDEs) such as PyCharm, Visual Studio, and VSCode. These tools provide much more than source editing. They also provide an environment for running, debugging, and collaborative development.</p>
    <p>We believe that the development of biochemical models likely has requirements similar to those for developing complex software. For example, we expect that a biochemical IDE could run simulations and view the results. Results should be accessible either by a hover over a variable or through a separate results pane (as RStudio) (<xref rid="btad753-B19" ref-type="bibr">van der Lo and de Jorge, 2023</xref>).</p>
    <p>There are ways in which we expect that a model IDE should differ from a software IDE. One way relates to model visualization. It is common to visualize biochemical models as a directed graph. So, there is a requirement to have bidirectional visualization and editing of the text and graphical representation of a model. Beyond this, it is likely desirable to provide for the easy integration of many tools with the source editor, such as checking for stoichiometric inconsistencies (<xref rid="btad753-B9" ref-type="bibr">Gevorgyan <italic toggle="yes">et al.</italic>, 2008</xref>).</p>
    <p>We further expect that debugging a biochemical model differs from debugging software. Debugging software is done by isolating where the error occurs. However, as Section 3.4 illustrates, there is often no convenient way to isolate problems with a biochemical model because of the interconnectedness of chemical species and reactions. Revisiting the scenario in Section 3.4, the concentration of <monospace>Y</monospace> is too small and the concentration of <monospace>Yp</monospace> is too large. Analyzing this problem requires analyzing the reactions that synthesize and/or degrade chemical species to understand why reaction fluxes are too large or too small. The explanation may be that some species in a reaction’s rate law is too large (small). This means that the analysis can be recursive, adding to the complexity of debugging biochemical models.</p>
    <p>In the near term, we are addressing limitations of our current implementation. Specifically, we want to address support for SBML packages such as Flux Balance Constraints and statistical distributions (distrib).</p>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>Developing models in systems biology is a complex, knowledge-intensive activity. Drawing on the experience of software engineering, we believe that expert modelers can benefit from good tools for modeling using text-based representations of models. Herein, our focus is on Antimony, a human readable representation of SBML models.</p>
    <p>At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. This motivated the development of VSCode-Antimony, an editor that is model aware and so can provide sophisticated features for building, analyzing, and translating models written in the Antimony modeling language. For example, VSCode-Antimony provides autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
    <p>VSCode-Antimony is implemented as an extension to VSCode. It is freely available through the VSCode marketplace.</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We acknowledge the contribution of Adel Heydarabadi to the installation of python dependencies.</p>
  </ack>
  <sec>
    <title>Author contributions</title>
    <p>SM and HMS developed the initial concepts and features. LF, SAK, and EL contributed equally to subsequent design and implementations JLH and HMS contributed equally to directing this work, and JLH write the first draft. JG provided strategic guidance and provided extensive revisions to the paper.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>The authors are most grateful to generous funding from the National Science Foundation award CMMI-1933453, NIBIB of the National Institutes of Health under award number P41EB023912, the Washington Research Foundation (June 2014), and a Data Science Environments project award from the Gordon and Betty Moore Foundation (Award #2013-10-29), and the Alfred P. Sloan Foundation (Award #3835) to the University of Washington eScience Institute. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Science Foundation or the University of Washington.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad753-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bansal</surname><given-names>P</given-names></string-name>, <string-name><surname>Morgat</surname><given-names>A</given-names></string-name>, <string-name><surname>Axelsen</surname><given-names>KB</given-names></string-name></person-group><etal>et al</etal><article-title>Rhea, the reaction knowledgebase in 2022</article-title>. <source>Nucleic Acids Res</source><year>2022</year>;<volume>50</volume>:<fpage>D693</fpage>–<lpage>D700</lpage>.<pub-id pub-id-type="pmid">34755880</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bray</surname><given-names>D</given-names></string-name>, <string-name><surname>Bourret</surname><given-names>RB.</given-names></string-name></person-group><article-title>Computer analysis of the binding reactions leading to a transmembrane receptor-linked multiprotein complex involved in bacterial chemotaxis</article-title>. <source>Mol Biol Cell</source><year>1995</year>;<volume>6</volume>:<fpage>1367</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">8573792</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B3">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Cameron</surname><given-names>D</given-names></string-name>, <string-name><surname>Elliott</surname><given-names>J</given-names></string-name>, <string-name><surname>Loy</surname><given-names>M</given-names></string-name></person-group> et al. <source>Learning GNU Emacs, 3rd edn</source>. <publisher-name>O’Reilly</publisher-name>, <year>2005</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Choi</surname><given-names>K</given-names></string-name>, <string-name><surname>Medley</surname><given-names>JK</given-names></string-name>, <string-name><surname>König</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Tellurium: an extensible python-based modeling environment for systems and synthetic biology</article-title>. <source>Biosystems</source><year>2018</year>;<volume>171</volume>:<fpage>74</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">30053414</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Degtyarenko</surname><given-names>K</given-names></string-name>, <string-name><surname>de Matos</surname><given-names>P</given-names></string-name>, <string-name><surname>Ennis</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Chebi: a database and ontology for chemical entities of biological interest</article-title>. <source>Nucleic Acids Res</source><year>2007</year>;<volume>36</volume>:<fpage>D344</fpage>–<lpage>D350</lpage>.<pub-id pub-id-type="pmid">17932057</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Edelstein</surname><given-names>SJ</given-names></string-name>, <string-name><surname>Schaad</surname><given-names>O</given-names></string-name>, <string-name><surname>Henry</surname><given-names>E</given-names></string-name></person-group><etal>et al</etal><article-title>A kinetic mechanism for nicotinic acetylcholine receptors based on multiple allosteric transitions</article-title>. <source>Biol Cybern</source><year>1996</year>;<volume>75</volume>:<fpage>361</fpage>–<lpage>79</lpage>. pages<pub-id pub-id-type="pmid">8983160</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B7">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Garcia</surname><given-names>M</given-names></string-name>, <string-name><surname>Rojas</surname><given-names>H.</given-names></string-name></person-group><article-title>Hands-on visual studio 2022</article-title>. Birmingham, UK: Packt, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gevorgyan</surname><given-names>A</given-names></string-name>, <string-name><surname>Poolman</surname><given-names>MG</given-names></string-name>, <string-name><surname>Fell</surname><given-names>DA</given-names></string-name></person-group><etal>et al</etal><article-title>Detection of stoichiometric inconsistencies in biomolecular models</article-title>. <source>Bioinformatics</source><year>2008</year>;<volume>24</volume>:<fpage>2245</fpage>–<lpage>51</lpage>.<pub-id pub-id-type="pmid">18697772</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Haiman</surname><given-names>ZB</given-names></string-name>, <string-name><surname>Zielinski</surname><given-names>DC</given-names></string-name>, <string-name><surname>Koike</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>Masspy: building, simulating, and visualizing dynamic biological models in python using mass action kinetics</article-title>. <source>PLoS Comput Biol</source><year>2021</year>;<volume>17</volume>:<fpage>e1008208</fpage>.<pub-id pub-id-type="pmid">33507922</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hoops</surname><given-names>S</given-names></string-name>, <string-name><surname>Sahle</surname><given-names>S</given-names></string-name>, <string-name><surname>Gauges</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Copasi, a complex pathway simulator</article-title>. <source>Bioinformatics</source><year>2006</year>;<volume>22</volume>:<fpage>3067</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">17032683</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M</given-names></string-name>, <string-name><surname>Finney</surname><given-names>A</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>HM</given-names></string-name></person-group>, <collab>SBML Forum</collab><etal>et al</etal><article-title>The systems biology markup language (sbml): a medium for representation and exchange of biochemical network models</article-title>. <source>Bioinformatics</source><year>2003</year>;<volume>19</volume>:<fpage>524</fpage>–<lpage>31</lpage>.<pub-id pub-id-type="pmid">12611808</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lieven</surname><given-names>C</given-names></string-name>, <string-name><surname>Beber</surname><given-names>ME</given-names></string-name>, <string-name><surname>Olivier</surname><given-names>BG</given-names></string-name></person-group><etal>et al</etal><article-title>Memote for standardized genome-scale metabolic model testing</article-title>. <source>Nat Biotechnol</source><year>2020</year>;<volume>38</volume>:<fpage>272</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">32123384</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B14">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Peleg</surname><given-names>D.</given-names></string-name></person-group><source>Mastering Sublime Text</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2013</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B15">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Robbins</surname><given-names>A</given-names></string-name>, <string-name><surname>Hannah</surname><given-names>E</given-names></string-name>, <string-name><surname>Lamb</surname><given-names>L</given-names></string-name></person-group>. <source>Learning the vi and Vim Editors</source>. <publisher-name>O’Reilly</publisher-name>, <year>2008</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rodriguez</surname><given-names>N</given-names></string-name>, <string-name><surname>Donizelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Le Novère</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Sbmleditor: effective creation of models in the systems biology markup language (sbml)</article-title>. <source>BMC Bioinformatics</source><year>2007</year>;<volume>8</volume>:<fpage>1</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">17199892</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B17">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Sarkar</surname><given-names>A.</given-names></string-name></person-group><year>2015</year>. The impact of syntax colouring on program comprehension. <italic toggle="yes">Proceedings of the 26th Annual Conference of the Psychology of Programming Interest Group, Milton Keynes, UK</italic>.</mixed-citation>
    </ref>
    <ref id="btad753-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>LP</given-names></string-name>, <string-name><surname>Bergmann</surname><given-names>FT</given-names></string-name>, <string-name><surname>Chandran</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>Antimony: a modular model definition language</article-title>. <source>Bioinformatics</source><year>2009</year>;<volume>25</volume>:<fpage>2452</fpage>–<lpage>4</lpage>.<pub-id pub-id-type="pmid">19578039</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B19">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>van der Lo</surname><given-names>M</given-names></string-name>, <string-name><surname>de Jorge</surname><given-names>E.</given-names></string-name></person-group><source>Learning RStudio for R statistical Computing</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
  </ref-list>
</back>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10753917</article-id>
    <article-id pub-id-type="pmid">38096590</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad753</article-id>
    <article-id pub-id-type="publisher-id">btad753</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VSCode-Antimony: a source editor for building, analyzing, and translating antimony models</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Ma</surname>
          <given-names>Steve</given-names>
        </name>
        <aff><institution>NVIDIA Corporation</institution>, Redmond, WA 98052, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fan</surname>
          <given-names>Longxuan</given-names>
        </name>
        <aff><institution>Department of Mathematics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Konanki</surname>
          <given-names>Sai Anish</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Eva</given-names>
        </name>
        <aff><institution>Allen School of Computer Science, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-8254-4957</contrib-id>
        <name>
          <surname>Gennari</surname>
          <given-names>John H</given-names>
        </name>
        <aff><institution>Biomedical and Health Informatics, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Smith</surname>
          <given-names>Lucian P</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-0802-4069</contrib-id>
        <name>
          <surname>Hellerstein</surname>
          <given-names>Joseph L</given-names>
        </name>
        <aff><institution>eScience Institute, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
        <xref rid="btad753-cor1" ref-type="corresp"/>
        <!--jlheller@uw.edu-->
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3659-6817</contrib-id>
        <name>
          <surname>Sauro</surname>
          <given-names>Herbert M</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">United States</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Martelli</surname>
          <given-names>Pier Luigi</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad753-cor1">Corresponding author: eScience Institute, c/o Allen School of Computer Science, University of Washington, Seattle, WA. 98195 United States. E-mail: <email>jlheller@uw.edu</email> (J.L.H.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-12-14">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>12</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>12</issue>
    <elocation-id>btad753</elocation-id>
    <history>
      <date date-type="received">
        <day>02</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>06</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="editorial-decision">
        <day>08</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>12</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>28</day>
        <month>12</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad753.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Developing biochemical models in systems biology is a complex, knowledge-intensive activity. Some modelers (especially novices) benefit from model development tools with a graphical user interface. However, as with the development of complex software, text-based representations of models provide many benefits for advanced model development. At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Since these tools are not “model aware,” they do not provide features for: (i) model <bold>b</bold>uilding such as autocompletion of species names; (ii) model <bold>a</bold>nalysis such as hover messages that provide information about chemical species; and (iii) model <bold>t</bold>ranslation to convert between model representations. We refer to these as BAT features. </p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present VSCode-Antimony, a tool for building, analyzing, and translating models written in the Antimony modeling language, a human readable representation of Systems Biology Markup Language (SBML) models. VSCode-Antimony is a source editor, a tool with language-aware features. For example, there is autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>VSCode-Antimony is available as an open source extension in the VSCode Marketplace <ext-link xlink:href="https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony" ext-link-type="uri">https://marketplace.visualstudio.com/items?itemName=stevem.vscode-antimony</ext-link>. Source code can be found at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Science Foundation award</institution>
          </institution-wrap>
        </funding-source>
        <award-id>CMMI-1933453</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>NIBIB of the National Institutes of Health</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Washington Research Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100001906</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Data Science Environments project award from the Gordon and Betty Moore Foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2013-10-29</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Alfred P. Sloan Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100000879</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>3835</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>University of Washington eScience Institute</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Developing credible biochemical models in systems biology can be invaluable for creating novel medical diagnostics, commercially viable metabolic pathways as well as help drive basic research in cell biology. Although modeling is time-consuming and knowledge-intensive, there are many approaches to mitigating these challenges. One approach is to employ a graphical user interface (GUI) to guide users and reduce errors in model building (<xref rid="btad753-B11" ref-type="bibr">Hoops <italic toggle="yes">et al.</italic>, 2006</xref>). GUI systems are particularly helpful for less experienced and novice users. However, text-based representations of models provide another approach to dealing with large-scale models (<xref rid="btad753-B4" ref-type="bibr">Choi <italic toggle="yes">et al.</italic>, 2018</xref>). We see the situation as being analogous to the development of complex software where text-based approaches are widely used.</p>
    <p>There are several text-based representations of biochemical models. One popular choice is the Systems Biology Markup Language (SBML), a community standard for model exchange in an XML format (<xref rid="btad753-B12" ref-type="bibr">Hucka <italic toggle="yes">et al.</italic>, 2003</xref>). SBML is an effective computer-readable model representation, but it is verbose and obscure as a human readable model description language. This motivated the development of Antimony (<xref rid="btad753-B18" ref-type="bibr">Smith <italic toggle="yes">et al.</italic>, 2009</xref>), a human readable textual representation of SBML. For example, Antimony expresses reactions as chemical formulas, a representation that is quite familiar to developers of biochemical models.</p>
    <p>Developing biochemical models using text is currently done using a text editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. Examples of text editors include <monospace>vim</monospace> (<xref rid="btad753-B15" ref-type="bibr">Robbins <italic toggle="yes">et al.</italic>, 2008</xref>), <monospace>emacs</monospace> (<xref rid="btad753-B3" ref-type="bibr">Cameron <italic toggle="yes">et al.</italic>, 2005</xref>), Windows <monospace>notepad</monospace>, and <monospace>sublime</monospace> (<xref rid="btad753-B14" ref-type="bibr">Peleg, 2013</xref>). Text editors make it easy to change the names of model variables. For example, we can change all occurrences of the names of the chemical species AMp and cAMp to AMP and cAMP by doing a <monospace>replace</monospace> of AMp with AMP. A text editor can also accelerate model building. To illustrate this, consider the chemotaxis model in BioModels model 200 (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>). The model contains several phosphorylation reactions of the form <monospace>X =&gt; Xp</monospace>, where <monospace>X</monospace> is one of the molecules: <monospace>WAA, WWAA, TTAA, TTWAA</monospace>. Rather than entering a phosphorylation reaction for each molecule, we can accelerate model building by placing the string <monospace>“X =&gt; Xp”</monospace> into the editor “clipboard” and repeating the following for each molecule: (i) paste the copied reaction and (ii) replace all occurrences of <monospace>X</monospace> with the molecule to be phosphorylated. A final appeal of a text editor is that many text editors are programmable, and so it possible to create automation in support of model building and analysis.</p>
    <p>Despite these benefits, developing biochemical models with a text editor has serious shortcomings. Foremost, <italic toggle="yes">text editors are not “model aware</italic>.<italic toggle="yes">”</italic> That is, text editors do not know about species, reactions, compartments, or parameters. Also, text editors do not know the syntax of model statements. This severely limits the ability of text editors to support model <bold>b</bold>uilding (e.g. autocompletion of variable names), model <bold>a</bold>nalysis (e.g. detecting errors in model statements), and model <bold>t</bold>ranslation (e.g. converting between SBML and Antimony or other formats). We use the term <italic toggle="yes">BAT</italic> feature to refer to capabilities that support model building, analysis, and translation.</p>
    <p>The absence of BAT features is analogous to problems faced in the early days of software engineering. At that time, software engineers used text editors that lacked knowledge of their programming language. In recent years, there has been a dramatic increase in the productivity and quality of software engineering as a result of source editors, Source editors are text editors with knowledge of the programming language. This knowledge enables source editors to provide syntax highlighting, code navigation (e.g. displaying method signatures), and error detection.</p>
    <p>Our focus is on SBML models. Since SBML is a community standard, one approach is to create a source editor for SBML, as is done in <xref rid="btad753-B16" ref-type="bibr">Rodriguez <italic toggle="yes">et al.</italic> (2007)</xref>. This system provides syntax highlighting of XML and error checking of XML syntax. Although these capabilities are useful at times, we believe that working at the level of XML is too low for most model developers who are thinking in terms of chemical reactions not in terms of XML angle brackets.</p>
    <p>This article describes a source editor for the Antimony modeling language. We chose Antimony because it provides a good match with the conceptual level at which models are developed. For example, the reaction <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mo>→</mml:mo><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">H</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow><mml:mi mathvariant="normal">O</mml:mi></mml:mrow></mml:math></inline-formula> is written in Antimony as <monospace>O2</monospace> <monospace>+</monospace> <monospace>2 H2 -&gt; 2 H2O</monospace> for the chemical species <monospace>O2</monospace>, <monospace>H2</monospace>, <monospace>H2O</monospace>. A further benefit of using Antimony is that it supports model hierarchies through nesting of models. Such hierarchical representations can provide considerable benefits for scaling and model reuse. Our system, VSCode-Antimony, implements BAT features for building, analyzing, and translating Antimony models.</p>
  </sec>
  <sec>
    <title>2 Methods and materials</title>
    <p>Building a source editor for the Antimony language requires capabilities beyond those that are provided by a text editor. A text editor provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. However, a source editor knows about the modeling language itself. Examples include knowing the type of a symbol (e.g. species, parameter), changing the visual characteristics of symbols and statements (e.g. highlighting, underlining), accessing model related knowledge sources (e.g. ChEBI; <xref rid="btad753-B5" ref-type="bibr">Degtyarenko <italic toggle="yes">et al.</italic>, 2007</xref>), and translating between model representations.</p>
    <p>Although Antimony is a language for modeling biochemical reactions, it is also a computer language. As such, Antimony has a formal grammar just as there are formal grammars for as python, Java, and C. This observation led us to build the Antimony source editor as an extension to an existing source editor for computer programming. We chose VSCode (<xref rid="btad753-B7" ref-type="bibr">Garcia and Rojas, 2022</xref>) because it is widely used, open source, and has a well-supported application programming interface (API) for implementing extensions. The API for VSCode extensions provides many features we use in VSCode-Antimony: hover information (providing information when hovering over a symbol), autocompletion (completing partially entered text), jump to definition (navigating to related information about a symbol), error checking the structure of statements, highlighting, and underlining to indicate errors and warnings.</p>
    <p>The most significant consideration in implementing a VSCode extension is describing the grammar of the language for which the source editor is intended. VSCode provides a convenient way to describe the language grammar in terms of python regular expressions. However, parts of the Antimony language have a complex grammar. For example, an Antimony <monospace>event</monospace> specifies actions taken when a condition arises as determined by a Boolean expression of model variables. This can result in a fairly complicated statement that is challenging to parse correctly.</p>
    <p>Although VSCode provides a rich API for writing extensions, it is not sufficient for implementing a source editor for a biochemical modeling language. For example, VSCode-Antimony provides features for translating between representations of biochemical models, such as translating between Antimony and SBML. Although it is common in software to do one-way translations (e.g. compilation), two way translations are rare, especially maintaining two different representations of the same information with bi-directional editing.</p>
    <p>There is yet another requirement for developing biochemical models that differs from software engineering. Unlike programming languages, modeling languages often need to relate symbols used in the model to external “knowledge sources.” This linkage is essential to understanding the assumptions and scope of a model, both to interpret model results and to use the model as a building block in larger models. Example knowledge sources include ChEBI (Chemical Entities of Biological Interest), which describes small molecules, Rhea (<xref rid="btad753-B1" ref-type="bibr">Bansal <italic toggle="yes">et al.</italic>, 2022</xref>), which describe reactions, and the Gene Ontology (Gene Ontology Consortium, 2004), which provides descriptions of pathways and biological processes. Annotations provide the connection between symbols and knowledge sources. Often there are many choices for a seemingly simple molecule. For example, ChEBI lists approximately 1000 choices for “glucose.” VSCode-Antimony has capabilities for querying knowledge sources to assist modelers with annotating their models.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>This section describes how the capabilities detailed in Section 2 are used to construct the BAT features supported by VSCode-Antimony. Section 3.1 lists the BAT features. Subsequent sections demonstrate how the features support model augmentation (Section 3.3), analysis, and debugging (Section 3.4).</p>
    <sec>
      <title>3.1 BAT features</title>
      <p>VSCode-Antimony provides a rich set of BAT features that build on the capabilities described in Section 2. <xref rid="btad753-T1" ref-type="table">Table 1</xref> provides a summary.</p>
      <table-wrap position="float" id="btad753-T1">
        <label>Table 1.</label>
        <caption>
          <p>BAT features in VSCode Antimony.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">BAT category</th>
              <th rowspan="1" colspan="1">VSCode-Antimony feature</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Build</td>
              <td rowspan="1" colspan="1">Editing SBML files as Antimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Browsing BioModels</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Autocompletion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model import</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Automatic rate law insertion</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation creation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Analyze</td>
              <td rowspan="1" colspan="1">Syntax highlighting</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Annotation highlights</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Hover messages</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Model navigation</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Error and warning detection</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Translate</td>
              <td rowspan="1" colspan="1">Bidirectional editing</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsAntimony</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">SaveAsSBML</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <sec>
        <title>3.1.1 Build</title>
        <p>Model building is about creating a new model and/or modifying an existing model.</p>
        <p><bold>Editing SBML files as Antimony</bold> allows modelers to browse and update an SBML file (in XML) as a human readable Antimony file. As displayed in <xref rid="btad753-F1" ref-type="fig">Fig. 1</xref>, when the user clicks on <monospace>BIOMD0000000001.xml</monospace>, VSCode-Antimony automatically converts the XML into Antimony, and creates a temporary file with the same name but with the <monospace>ant</monospace> extension. A notification appears indicating that the XML file is being edited as an Antimony file. Changes made to the <monospace>ant</monospace> file are propagated back to the original XML file.</p>
        <fig position="float" id="btad753-F1">
          <label>Figure 1.</label>
          <caption>
            <p>Editing an SBML file as Antimony. Clicking on BIOMD0000000001.xml causes the XML to be converted to antimony and opens a temporary file. When the Antimony file is saved, it is converted to an SBML file and replaces the original XML file.</p>
          </caption>
          <graphic xlink:href="btad753f1" position="float"/>
        </fig>
        <p><bold>Browsing BioModels</bold> provides modelers with a simple way to access models in BioModels in a human readable format. The “Browse Biomodels” option can be accessed when the user right clicks. As illustrated in <xref rid="btad753-F2" ref-type="fig">Fig. 2</xref>, the user is presented with a text box. Entering an integer into the text box causes VSCode-Antimony to search for that model number. Entering a string produces a list of models with that string. When the user selects a model in the list, the model is downloaded, converted to Antimony, and displayed in the editor.</p>
        <fig position="float" id="btad753-F2">
          <label>Figure 2.</label>
          <caption>
            <p>Browsing BioModels. Users can search BioModels, and view a selected model in the Antimony representation instead of XML.</p>
          </caption>
          <graphic xlink:href="btad753f2" position="float"/>
        </fig>
        <p><bold>Autocompletion</bold> is extremely valuable for model building. This feature operates while the modeler is typing. For example, suppose <monospace>glucose_rate</monospace> is a parameter name in the model and the user types “glu”, then the system suggests names that begin with “glu”. Since VSCode-Antimony has knowledge of the Antimony grammar, suggestions are context dependent. For example, the parameter <monospace>glucose_k1</monospace> is not suggested as a reactant or a product; however, it could be suggested while typing a rate law.</p>
        <p><bold>Model import</bold> allows modelers to reuse models developed elsewhere. Reuse has been essential to the rapid growth in size and complexity of software. By importing an Antimony file, the modeler has access to the model elements in that file, such as floating species, reactions, parameters, and function definitions (e.g. for rate laws). As illustrated in <xref rid="btad753-F3" ref-type="fig">Fig. 3</xref>, hovering over an <monospace>import</monospace> statement brings up a preview of what is being imported.</p>
        <fig position="float" id="btad753-F3">
          <label>Figure 3.</label>
          <caption>
            <p>Illustration of the hover preview provided by the import feature.</p>
          </caption>
          <graphic xlink:href="btad753f3" position="float"/>
        </fig>
        <p><bold>Automatic rate law insertion</bold> helps modelers with selecting and instantiating a rate law for a reaction. Types of rates laws include irreversible mass action, Michaelis–Menten, and Hill expressions. Once the rate law type is known, the rate law must be instantiated for the reaction. VSCode facilitates selecting the rate law type, and it automates rate law instantiation.</p>
        <p><xref rid="btad753-F4" ref-type="fig">Figure 4</xref> displays an example of rate law insertion for the reaction <monospace>React1: BLL + DL =&gt; ILL</monospace>. The user right-clicks and selects “Insert Rate Law.” Then a drop-down menu appears that allows for selection of the rate law functional form. In the figure, “Irreversible Mass-Action Bi-Uni” is chosen. VSCode-Antimony then provides for in-line entry of required constants to instantiate the rate law.</p>
        <fig position="float" id="btad753-F4">
          <label>Figure 4.</label>
          <caption>
            <p>Example of rate law insertion.</p>
          </caption>
          <graphic xlink:href="btad753f4" position="float"/>
        </fig>
        <p><bold>Annotation creation</bold> simplifies the creation of annotations for model elements such as chemical species, reactions, and compartments. This feature leverages the built-in capability of VSCode-Antimony to query knowledge sources that contain annotations such as ChEBI for chemical species and Rhea for reactions. The feature leverages the grammar processing capabilities of VSCode-Antimony to determine the type of the model element, and from this, select appropriate knowledge resources for that type. By type appropriate, we mean that if the symbol being annotated is a chemical species, then we display first knowledge sources for chemical species (e.g. ChEBI). On the other hand, if what is being highlighted is a reaction, we display first knowledge sources for reactions (e.g. Rhea). Type appropriate knowledge sources are indicated by an asterisk (“*”). The user experience is depicted in <xref rid="btad753-F5" ref-type="fig">Fig. 5</xref>.</p>
        <fig position="float" id="btad753-F5">
          <label>Figure 5.</label>
          <caption>
            <p>Annotation creation steps: (1) The user selects a model element to annotate, and does a right click. (2) VSCode-Antimony displays a pop-up menu. The user selects “Create Annotation” (3) VSCode-Antimony displays a list of knowledge sources from which annotations may be selected. Knowledge sources with an asterisk (“*”) are type appropriate. (4) The user enters a descriptive text for the model element being annotated. VSCode-Antimony displays query responses. (5) The user selects an annotation, and an annotation statement is entered at the bottom of the file.</p>
          </caption>
          <graphic xlink:href="btad753f5" position="float"/>
        </fig>
      </sec>
      <sec>
        <title>3.1.2 Analyze</title>
        <p>Model analysis is about understanding the elements of the models (e.g. species, reactions, compartments), and how they interact over time.</p>
        <p><bold>Syntax highlighting</bold>, also known as syntax coloring, is a feature offered by many source editors for programming languages to display different colors according to the type of language element. A study published at the PPIG conference (<xref rid="btad753-B17" ref-type="bibr">Sarkar, 2015</xref>) suggests that syntax highlighting can significantly reduce the time taken for a programmer to internalize the semantics of a program. We believe that similar benefits are possible for modelers. VSCode-Antimony highlights reaction names, species names, operators, event names, units, functions, and more. <xref rid="btad753-F6" ref-type="fig">Figure 6</xref> displays an example of VSCode-Antimony syntax highlighting.</p>
        <fig position="float" id="btad753-F6">
          <label>Figure 6.</label>
          <caption>
            <p>An Antimony model (<xref rid="btad753-B6" ref-type="bibr">Edelstein <italic toggle="yes">et al.</italic>, 1996</xref>) highlighted by VSCode-Antimony.</p>
          </caption>
          <graphic xlink:href="btad753f6" position="float"/>
        </fig>
        <p><bold>Annotation highlighting</bold> provides a fast, visual indication of the model elements that are annotated or are <italic toggle="yes">not</italic> annotated (depending on a global setting accessible through a right click). This feature facilitates analysis by communicating the modeling elements for which more detailed information is available. It also provides a way to identify model elements that should be annotated.</p>
        <p><bold>Hover messages</bold> are text displayed on a mouse-over. In software source editors, mouse-over is widely used to display the type and values of variables and the types of arguments to functions. Providing this information in context reduces searching through files. Users of VSCode-Antimony see hover messages for a wide variety of model elements; the message content depends on the type of the model element. For variables, (e.g. species: parameter, compartment), hover displays the variable type, assigned value, annotation information. For functions, hover displays the types of the arguments to functions. And for reactions, hover displays annotation information. <xref rid="btad753-F7" ref-type="fig">Figure 7</xref> displays a hover message for the chemical species <monospace>BLL</monospace> in a model.</p>
        <fig position="float" id="btad753-F7">
          <label>Figure 7.</label>
          <caption>
            <p>Example of hover messages for a species.</p>
          </caption>
          <graphic xlink:href="btad753f7" position="float"/>
        </fig>
        <p><bold>Model navigation</bold> is a “model aware” way of browsing a model file. The analogous feature in software source editors is called “code navigation,” and provides a way to view the definitions of variables and functions. In VSCode-Antimony, navigation is provided to the definition of model symbols and the initialization of variable values. This is done by (a) selecting a model symbol, (b) right-clicking, and (c) selecting “Go to Definition.” <xref rid="btad753-F8" ref-type="fig">Figure 8</xref> illustrates how this works.</p>
        <fig position="float" id="btad753-F8">
          <label>Figure 8.</label>
          <caption>
            <p>Example of code navigation.</p>
          </caption>
          <graphic xlink:href="btad753f8" position="float"/>
        </fig>
        <p><bold>Error and warning detection</bold> is widely used in software source editors to increase the quality and productivity of software engineering. Source editors can detect <italic toggle="yes">static</italic> errors, errors that can be detected without running code. Examples include syntax errors and flow control issues, such as code that is unreachable (e.g. code that it is preceded by a <monospace>return</monospace> statement). In VSCode, errors and warnings are indicated by a “squiggly underline” beneath the questionable text.</p>
        <p>There are many examples of static testing in Systems Biology. MEMOTE (<xref rid="btad753-B13" ref-type="bibr">Lieven <italic toggle="yes">et al.</italic>, 2020</xref>) generates a report on annotation quality, and MASSpy (<xref rid="btad753-B10" ref-type="bibr">Haiman <italic toggle="yes">et al.</italic>, 2021</xref>) identifies missing values, parameters, fluxes, and concentrations for Systems Biology models. At present, VSCode-Antimony provides a subset of these features by detecting: syntax errors (based on grammar analysis of the Antimony Language), uninitialized variables, and type mismatches between the arguments of a function call and its definition. We distinguish between errors and warnings based on the effect on running a simulation. An error means that the simulation will not run; warnings indicate a questionable modeling practice (e.g. overriding the value of a parameter). Errors are indicated by a red squiggly line, and warnings by a yellow squiggly line. <xref rid="btad753-T2" ref-type="table">Table 2</xref> displays to errors and warnings detected by VSCode-Antimony.</p>
        <table-wrap position="float" id="btad753-T2">
          <label>Table 2.</label>
          <caption>
            <p>Errors (E) and warnings (W) in VSCode-Antimony. Element types are species (Spc), parameters (Prm), compartments (Cpt), reactions (Rea), rate laws (Rl), function (Fun), modular models (Mdl), and general (Gen).</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="left" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th rowspan="1" colspan="1">Type</th>
                <th rowspan="1" colspan="1">Issue</th>
                <th rowspan="1" colspan="1">E/W</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Spc</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Prm</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">No initial value</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Cpt</td>
                <td rowspan="1" colspan="1">Overriding previous value assignment</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Referencing uninitialized species</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rea</td>
                <td rowspan="1" colspan="1">Invalid arithmetic expression</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Variable is not a fixed-species in reaction</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Rl</td>
                <td rowspan="1" colspan="1">Overriding rate rule</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Evt</td>
                <td rowspan="1" colspan="1">Overriding defined event trigger</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Unused parameter</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Calling undefined function</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect function parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Incorrect/incompatible parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Fun</td>
                <td rowspan="1" colspan="1">Defining a new function with a used name</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Calling undefined modular model</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect modular model parameters</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Mdl</td>
                <td rowspan="1" colspan="1">Incorrect parameter type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding display name</td>
                <td rowspan="1" colspan="1">W</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Overriding incompatible type to previous type</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected token</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Gen</td>
                <td rowspan="1" colspan="1">Unexpected newline or EOF</td>
                <td rowspan="1" colspan="1">E</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
      <sec>
        <title>3.1.3 Translate</title>
        <p>Model developers sometimes need to consider more than one representation of a model. Model translation converts between model representations. At present, VSCode-Antimony has features for converting between Antimony and SBML/XML. Other model representations can be of interest as well. For example, CellML represents a biochemical model as a system of differential equations.</p>
        <p><bold>Bidirectional editing</bold> provides a way to simultaneously edit two representations of the same model. This is useful if there are imperfections in the translation between model representations. For example, at present, there is no way to represent comments in SBML, and so comments in an Antimony file are lost when the file is translated to SBML. Another reason for bidirectional editing is to support tool developers who generate new model representations.</p>
        <p>VSCode-Antimony displays model representations in a split-screen mode, as illustrated in <xref rid="btad753-F9" ref-type="fig">Fig. 9</xref>. Changes made in one model representation are propagated to the other representation.</p>
        <fig position="float" id="btad753-F9">
          <label>Figure 9.</label>
          <caption>
            <p>Bidirectional editing of Antimony and SBML representations of a model.</p>
          </caption>
          <graphic xlink:href="btad753f9" position="float"/>
        </fig>
        <p><bold>SaveAs features</bold> provide for translating the current model representation. VSCode-Antimony provides for saving an Antimony file as SBML, and for saving an SBML file as Antimony. This feature is accessed by a right-click and selecting “Convert to Antimony” or “Convert to SBML.”</p>
      </sec>
    </sec>
    <sec>
      <title>3.2 Installation, documentation, testing, limitations</title>
      <p>Before installing VSCode-Antimony, you must first install VSCode as described in <ext-link xlink:href="https://code.visualstudio.com/" ext-link-type="uri">https://code.visualstudio.com/</ext-link>. VSCode-Antimony is a VSCode extension. Start VSCode, and then open the VSCode extensions. Search for “Antimony,” and then select “Antimony Extension Pack.” The extension pack automatically installs two extensions: the Antimony extension which provides language supports, and the Antimony Syntax which provides the syntax coloring scheme for the Antimony extension. The information displayed when the VSCode-Antimony extension is installed may include additional instructions.</p>
      <p>The Visual Studio Marketplace provides some documentation of VSCode-Antimony; more details can be found in the project GitHub repository at <ext-link xlink:href="https://github.com/sys-bio/vscode-antimony" ext-link-type="uri">https://github.com/sys-bio/vscode-antimony</ext-link>.</p>
      <p>We have developed extensive unit tests using <monospace>pytest</monospace>, and continuous integration using GitHub actions.</p>
      <p>VSCode-Antimony supports the analysis of deterministic kinetic models, and so does not support features related to uncertainty and statistical analysis.</p>
    </sec>
    <sec>
      <title>3.3 Use case</title>
      <p>This scenario describes a use case in which VSCode-Antimony helps with modifying an existing model. The scenario adds a reaction to BioModels 200, a model of chemotaxis with 32 reactions (<xref rid="btad753-B2" ref-type="bibr">Bray and Bourret, 1995</xref>).</p>
      <disp-formula id="E1">
        <mml:math id="M1" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
            <mml:mo>=</mml:mo>
            <mml:mo>&gt;</mml:mo>
            <mml:mi mathvariant="monospace">Ypp</mml:mi>
            <mml:mo>+</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAA</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>We want the rate law for this reaction to be reversible mass action:</p>
      <disp-formula id="E2">
        <mml:math id="M2" display="block" overflow="scroll">
          <mml:mrow>
            <mml:mi mathvariant="monospace">cell</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">phosphotransfer</mml:mi>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">r</mml:mi>
            <mml:mn>12</mml:mn>
            <mml:mo>_</mml:mo>
            <mml:mi mathvariant="normal">k</mml:mi>
            <mml:mn>1</mml:mn>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">Yp</mml:mi>
            <mml:mo>*</mml:mo>
            <mml:mi mathvariant="monospace">TTWWAAp</mml:mi>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>The first step is to get the existing model into an environment where it can be modified. Using a text editor requires: (a) browsing to BioModels; (b) downloading the SBML file for the model; and (c) converting the SBML file into a human readable representation. However, with VSCode-Antimony, we use the “Browse BioModels” feature, enter 200, and select “Bray1995.” We see the model in an Antimony representation. We save the model as a new file.</p>
      <p>We then proceed as follows:</p>
      <list list-type="order">
        <list-item>
          <p>The user types
<disp-formula id="E3"><mml:math id="M3" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWW</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>At this point, the autocompletion feature provides assistance; it suggests the text
<disp-formula id="E4"><mml:math id="M4" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The user presses newline to accept the text. Then, autocompletion provides a further suggestion:
<disp-formula id="E5"><mml:math id="M5" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>Again, the user presses newline to accept. There is a similar user experience when typing the right-hand-side of the reaction until the following text has been entered:
<disp-formula id="E6"><mml:math id="M6" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>To specify reaction kinetics, the user employs automatic rate law insertion. The user selects the rate law “irreversible mass action,” and current line appears as:
<disp-formula id="E7"><mml:math id="M7" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Ypp</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="monospace">TTWWAA</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mo>_</mml:mo><mml:mo>_</mml:mo><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">TTWWAAp</mml:mi></mml:mrow></mml:math></disp-formula></p>
          <p>The underscore indicates that the user needs to supply text, in this case a parameter name that is a rate constant. The user types the necessary text, and presses the return key. The reaction has been entered.</p>
        </list-item>
        <list-item>
          <p>The user right clicks on the reaction, and selects “Create Annotation” to create an annotation for the reaction.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>3.4 Debugging a model</title>
      <p>Next, we consider a use case for analyzing an Antimony model. The particulars are as follows. The modeler has completed entering the model, and has done a simulation. The output of the simulation shows that <monospace>Y</monospace> is far too small and <monospace>Yp</monospace> is far too large. This suggests that one of the following is true for <monospace>Y</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H1a: <monospace>Y</monospace> is degraded too rapidly.</p>
        </list-item>
        <list-item>
          <p>H1b: <monospace>Y</monospace> is not synthesized fast enough.</p>
        </list-item>
      </list>
      <p>And, one of the following is true for <monospace>Yp</monospace>:</p>
      <list list-type="bullet">
        <list-item>
          <p>H2a: <monospace>Yp</monospace> is synthesized too rapidly.</p>
        </list-item>
        <list-item>
          <p>H2b: <monospace>Yp</monospace> is not degraded enough.</p>
        </list-item>
      </list>
      <p>So, there are four cases to investigate. The first is that both H1a and H2a are true. We denote this by (H1a, H2a). The other cases are (H1a, H2b), and (H1b, H2a), (H1b, H2b).</p>
      <p>We illustrate how to investigate (H1a, H2a).</p>
      <list list-type="order">
        <list-item>
          <p>We search for all reactions in which <monospace>Y</monospace> appears before =&gt;, and <monospace>Yp</monospace> appears after =&gt;; that is, <monospace>Y</monospace> is a reactant and <monospace>Yp</monospace> is a product. VSCode-Antimony allows using editors that search for regular expressions (e.g. <monospace>vim</monospace>). The modeler enters the search string <monospace>“</monospace><monospace>Y</monospace> .*=.*<monospace>Yp</monospace>.<monospace>”</monospace> This search string looks for the occurrence of <monospace>“</monospace><monospace>Y</monospace><monospace>”</monospace> followed by a space, followed by any number of characters, followed by <monospace>“</monospace>=<monospace>”</monospace>, followed by any number of characters, and then followed by <monospace>“</monospace><monospace>Yp.”</monospace> The search returns 7 of the 32 reactions.</p>
        </list-item>
        <list-item>
          <p>We look for errors or warnings in these statements, as indicated by the yellow or red squiggly lines.</p>
        </list-item>
        <list-item>
          <p>Seeing no errors, we examine each reaction in turn. The first is:
<disp-formula id="E8"><mml:math id="M8" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Y</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>7</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="monospace">k</mml:mi><mml:mn mathvariant="monospace">1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Y</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We do a string search to find reactions in which <monospace>Yp</monospace> is degraded and <monospace>Y</monospace> is synthesized. The search yields
<disp-formula id="E9"><mml:math id="M9" display="block" overflow="scroll"><mml:mrow><mml:mi mathvariant="monospace">Yp</mml:mi><mml:mo>=</mml:mo><mml:mo>&gt;</mml:mo><mml:mi mathvariant="normal">Y</mml:mi><mml:mo>;</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="monospace">cell</mml:mi><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">phosphorylation</mml:mi><mml:mo>_</mml:mo><mml:mi mathvariant="normal">r</mml:mi><mml:mn>8</mml:mn><mml:mo>_</mml:mo><mml:mi mathvariant="normal">k</mml:mi><mml:mn>1</mml:mn><mml:mo>*</mml:mo><mml:mi mathvariant="monospace">Yp</mml:mi></mml:mrow></mml:math></disp-formula></p>
        </list-item>
        <list-item>
          <p>We use the VSCode-Antimony hover message to see if <monospace>phosphorylation_r7_k1</monospace> is much larger than phos<monospace>phorylation_r8_k1</monospace> since this would explain the data that we observe.</p>
        </list-item>
        <list-item>
          <p>The process continues with the remaining six reactions returned in the search in step (1).</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>Our interest in text-based model development follows from the observation that experienced software engineers use text-based tools to develop complex software. This observation led us to build VSCode-Antimony, a source editor for developing biochemical models using the Antimony modeling language.</p>
    <p>Modern software engineering relies heavily on Interactive Development Environments (IDEs) such as PyCharm, Visual Studio, and VSCode. These tools provide much more than source editing. They also provide an environment for running, debugging, and collaborative development.</p>
    <p>We believe that the development of biochemical models likely has requirements similar to those for developing complex software. For example, we expect that a biochemical IDE could run simulations and view the results. Results should be accessible either by a hover over a variable or through a separate results pane (as RStudio) (<xref rid="btad753-B19" ref-type="bibr">van der Lo and de Jorge, 2023</xref>).</p>
    <p>There are ways in which we expect that a model IDE should differ from a software IDE. One way relates to model visualization. It is common to visualize biochemical models as a directed graph. So, there is a requirement to have bidirectional visualization and editing of the text and graphical representation of a model. Beyond this, it is likely desirable to provide for the easy integration of many tools with the source editor, such as checking for stoichiometric inconsistencies (<xref rid="btad753-B9" ref-type="bibr">Gevorgyan <italic toggle="yes">et al.</italic>, 2008</xref>).</p>
    <p>We further expect that debugging a biochemical model differs from debugging software. Debugging software is done by isolating where the error occurs. However, as Section 3.4 illustrates, there is often no convenient way to isolate problems with a biochemical model because of the interconnectedness of chemical species and reactions. Revisiting the scenario in Section 3.4, the concentration of <monospace>Y</monospace> is too small and the concentration of <monospace>Yp</monospace> is too large. Analyzing this problem requires analyzing the reactions that synthesize and/or degrade chemical species to understand why reaction fluxes are too large or too small. The explanation may be that some species in a reaction’s rate law is too large (small). This means that the analysis can be recursive, adding to the complexity of debugging biochemical models.</p>
    <p>In the near term, we are addressing limitations of our current implementation. Specifically, we want to address support for SBML packages such as Flux Balance Constraints and statistical distributions (distrib).</p>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p>Developing models in systems biology is a complex, knowledge-intensive activity. Drawing on the experience of software engineering, we believe that expert modelers can benefit from good tools for modeling using text-based representations of models. Herein, our focus is on Antimony, a human readable representation of SBML models.</p>
    <p>At present, the tools for text-based model development are limited, typically just a textual editor that provides features such as <monospace>copy</monospace>, <monospace>paste</monospace>, <monospace>find</monospace>, and <monospace>replace</monospace>. This motivated the development of VSCode-Antimony, an editor that is model aware and so can provide sophisticated features for building, analyzing, and translating models written in the Antimony modeling language. For example, VSCode-Antimony provides autocompletion of variable names to assist with model building, hover messages that aid in model analysis, and translation between XML and Antimony representations of SBML models. These features result from making VSCode-Antimony model-aware by incorporating several sophisticated capabilities: analysis of the Antimony grammar (e.g. to identify model symbols and their types); a query system for accessing knowledge sources for chemical species and reactions; and automatic conversion between different model representations (e.g. between Antimony and SBML).</p>
    <p>VSCode-Antimony is implemented as an extension to VSCode. It is freely available through the VSCode marketplace.</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We acknowledge the contribution of Adel Heydarabadi to the installation of python dependencies.</p>
  </ack>
  <sec>
    <title>Author contributions</title>
    <p>SM and HMS developed the initial concepts and features. LF, SAK, and EL contributed equally to subsequent design and implementations JLH and HMS contributed equally to directing this work, and JLH write the first draft. JG provided strategic guidance and provided extensive revisions to the paper.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>The authors are most grateful to generous funding from the National Science Foundation award CMMI-1933453, NIBIB of the National Institutes of Health under award number P41EB023912, the Washington Research Foundation (June 2014), and a Data Science Environments project award from the Gordon and Betty Moore Foundation (Award #2013-10-29), and the Alfred P. Sloan Foundation (Award #3835) to the University of Washington eScience Institute. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Science Foundation or the University of Washington.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad753-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bansal</surname><given-names>P</given-names></string-name>, <string-name><surname>Morgat</surname><given-names>A</given-names></string-name>, <string-name><surname>Axelsen</surname><given-names>KB</given-names></string-name></person-group><etal>et al</etal><article-title>Rhea, the reaction knowledgebase in 2022</article-title>. <source>Nucleic Acids Res</source><year>2022</year>;<volume>50</volume>:<fpage>D693</fpage>–<lpage>D700</lpage>.<pub-id pub-id-type="pmid">34755880</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bray</surname><given-names>D</given-names></string-name>, <string-name><surname>Bourret</surname><given-names>RB.</given-names></string-name></person-group><article-title>Computer analysis of the binding reactions leading to a transmembrane receptor-linked multiprotein complex involved in bacterial chemotaxis</article-title>. <source>Mol Biol Cell</source><year>1995</year>;<volume>6</volume>:<fpage>1367</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">8573792</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B3">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Cameron</surname><given-names>D</given-names></string-name>, <string-name><surname>Elliott</surname><given-names>J</given-names></string-name>, <string-name><surname>Loy</surname><given-names>M</given-names></string-name></person-group> et al. <source>Learning GNU Emacs, 3rd edn</source>. <publisher-name>O’Reilly</publisher-name>, <year>2005</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Choi</surname><given-names>K</given-names></string-name>, <string-name><surname>Medley</surname><given-names>JK</given-names></string-name>, <string-name><surname>König</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Tellurium: an extensible python-based modeling environment for systems and synthetic biology</article-title>. <source>Biosystems</source><year>2018</year>;<volume>171</volume>:<fpage>74</fpage>–<lpage>9</lpage>.<pub-id pub-id-type="pmid">30053414</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Degtyarenko</surname><given-names>K</given-names></string-name>, <string-name><surname>de Matos</surname><given-names>P</given-names></string-name>, <string-name><surname>Ennis</surname><given-names>M</given-names></string-name></person-group><etal>et al</etal><article-title>Chebi: a database and ontology for chemical entities of biological interest</article-title>. <source>Nucleic Acids Res</source><year>2007</year>;<volume>36</volume>:<fpage>D344</fpage>–<lpage>D350</lpage>.<pub-id pub-id-type="pmid">17932057</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Edelstein</surname><given-names>SJ</given-names></string-name>, <string-name><surname>Schaad</surname><given-names>O</given-names></string-name>, <string-name><surname>Henry</surname><given-names>E</given-names></string-name></person-group><etal>et al</etal><article-title>A kinetic mechanism for nicotinic acetylcholine receptors based on multiple allosteric transitions</article-title>. <source>Biol Cybern</source><year>1996</year>;<volume>75</volume>:<fpage>361</fpage>–<lpage>79</lpage>. pages<pub-id pub-id-type="pmid">8983160</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B7">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Garcia</surname><given-names>M</given-names></string-name>, <string-name><surname>Rojas</surname><given-names>H.</given-names></string-name></person-group><article-title>Hands-on visual studio 2022</article-title>. Birmingham, UK: Packt, <year>2022</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gevorgyan</surname><given-names>A</given-names></string-name>, <string-name><surname>Poolman</surname><given-names>MG</given-names></string-name>, <string-name><surname>Fell</surname><given-names>DA</given-names></string-name></person-group><etal>et al</etal><article-title>Detection of stoichiometric inconsistencies in biomolecular models</article-title>. <source>Bioinformatics</source><year>2008</year>;<volume>24</volume>:<fpage>2245</fpage>–<lpage>51</lpage>.<pub-id pub-id-type="pmid">18697772</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Haiman</surname><given-names>ZB</given-names></string-name>, <string-name><surname>Zielinski</surname><given-names>DC</given-names></string-name>, <string-name><surname>Koike</surname><given-names>Y</given-names></string-name></person-group><etal>et al</etal><article-title>Masspy: building, simulating, and visualizing dynamic biological models in python using mass action kinetics</article-title>. <source>PLoS Comput Biol</source><year>2021</year>;<volume>17</volume>:<fpage>e1008208</fpage>.<pub-id pub-id-type="pmid">33507922</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hoops</surname><given-names>S</given-names></string-name>, <string-name><surname>Sahle</surname><given-names>S</given-names></string-name>, <string-name><surname>Gauges</surname><given-names>R</given-names></string-name></person-group><etal>et al</etal><article-title>Copasi, a complex pathway simulator</article-title>. <source>Bioinformatics</source><year>2006</year>;<volume>22</volume>:<fpage>3067</fpage>–<lpage>74</lpage>.<pub-id pub-id-type="pmid">17032683</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M</given-names></string-name>, <string-name><surname>Finney</surname><given-names>A</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>HM</given-names></string-name></person-group>, <collab>SBML Forum</collab><etal>et al</etal><article-title>The systems biology markup language (sbml): a medium for representation and exchange of biochemical network models</article-title>. <source>Bioinformatics</source><year>2003</year>;<volume>19</volume>:<fpage>524</fpage>–<lpage>31</lpage>.<pub-id pub-id-type="pmid">12611808</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lieven</surname><given-names>C</given-names></string-name>, <string-name><surname>Beber</surname><given-names>ME</given-names></string-name>, <string-name><surname>Olivier</surname><given-names>BG</given-names></string-name></person-group><etal>et al</etal><article-title>Memote for standardized genome-scale metabolic model testing</article-title>. <source>Nat Biotechnol</source><year>2020</year>;<volume>38</volume>:<fpage>272</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">32123384</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B14">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Peleg</surname><given-names>D.</given-names></string-name></person-group><source>Mastering Sublime Text</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2013</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B15">
      <mixed-citation publication-type="book"><person-group person-group-type="author">, <string-name><surname>Robbins</surname><given-names>A</given-names></string-name>, <string-name><surname>Hannah</surname><given-names>E</given-names></string-name>, <string-name><surname>Lamb</surname><given-names>L</given-names></string-name></person-group>. <source>Learning the vi and Vim Editors</source>. <publisher-name>O’Reilly</publisher-name>, <year>2008</year>.</mixed-citation>
    </ref>
    <ref id="btad753-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rodriguez</surname><given-names>N</given-names></string-name>, <string-name><surname>Donizelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Le Novère</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Sbmleditor: effective creation of models in the systems biology markup language (sbml)</article-title>. <source>BMC Bioinformatics</source><year>2007</year>;<volume>8</volume>:<fpage>1</fpage>–<lpage>8</lpage>.<pub-id pub-id-type="pmid">17199892</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B17">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Sarkar</surname><given-names>A.</given-names></string-name></person-group><year>2015</year>. The impact of syntax colouring on program comprehension. <italic toggle="yes">Proceedings of the 26th Annual Conference of the Psychology of Programming Interest Group, Milton Keynes, UK</italic>.</mixed-citation>
    </ref>
    <ref id="btad753-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>LP</given-names></string-name>, <string-name><surname>Bergmann</surname><given-names>FT</given-names></string-name>, <string-name><surname>Chandran</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>Antimony: a modular model definition language</article-title>. <source>Bioinformatics</source><year>2009</year>;<volume>25</volume>:<fpage>2452</fpage>–<lpage>4</lpage>.<pub-id pub-id-type="pmid">19578039</pub-id></mixed-citation>
    </ref>
    <ref id="btad753-B19">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>van der Lo</surname><given-names>M</given-names></string-name>, <string-name><surname>de Jorge</surname><given-names>E.</given-names></string-name></person-group><source>Learning RStudio for R statistical Computing</source>. <publisher-loc>Birmingham, UK</publisher-loc>: <publisher-name>Packt</publisher-name>, <year>2023</year>.</mixed-citation>
    </ref>
  </ref-list>
</back>
