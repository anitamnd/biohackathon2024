<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">G3 (Bethesda)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genetics</journal-id>
    <journal-id journal-id-type="publisher-id">g3journal</journal-id>
    <journal-title-group>
      <journal-title>G3: Genes|Genomes|Genetics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2160-1836</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8982375</article-id>
    <article-id pub-id-type="pmid">35244161</article-id>
    <article-id pub-id-type="doi">10.1093/g3journal/jkac032</article-id>
    <article-id pub-id-type="publisher-id">jkac032</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software and Data Resources</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01180</subject>
        <subject>AcademicSubjects/SCI01140</subject>
        <subject>AcademicSubjects/SCI00010</subject>
        <subject>AcademicSubjects/SCI00960</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>XSim version 2: simulation of modern breeding programs</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-2018-0702</contrib-id>
        <name>
          <surname>Chen</surname>
          <given-names>Chunpeng James</given-names>
        </name>
        <xref rid="jkac032-aff1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-8640-5372</contrib-id>
        <name>
          <surname>Garrick</surname>
          <given-names>Dorian</given-names>
        </name>
        <xref rid="jkac032-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-5821-099X</contrib-id>
        <name>
          <surname>Fernando</surname>
          <given-names>Rohan</given-names>
        </name>
        <xref rid="jkac032-aff3" ref-type="aff">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1010-683X</contrib-id>
        <name>
          <surname>Karaman</surname>
          <given-names>Emre</given-names>
        </name>
        <xref rid="jkac032-aff4" ref-type="aff">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Stricker</surname>
          <given-names>Chris</given-names>
        </name>
        <xref rid="jkac032-aff5" ref-type="aff">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-5607-7347</contrib-id>
        <name>
          <surname>Keehan</surname>
          <given-names>Michael</given-names>
        </name>
        <xref rid="jkac032-aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-5146-7231</contrib-id>
        <name>
          <surname>Cheng</surname>
          <given-names>Hao</given-names>
        </name>
        <xref rid="jkac032-cor1" ref-type="corresp"/>
        <xref rid="jkac032-aff1" ref-type="aff">1</xref>
        <!--qtlcheng@ucdavis.edu-->
      </contrib>
    </contrib-group>
    <aff id="jkac032-aff1"><label>1</label><institution>Department of Animal Science, University of California</institution>, Davis, CA 95616, <country country="US">USA</country></aff>
    <aff id="jkac032-aff2"><label>2</label><institution>Massey University</institution>, Palmerston North 4442, <country country="NZ">New Zealand</country></aff>
    <aff id="jkac032-aff3"><label>3</label><institution>Department of Animal Science, Iowa State University</institution>, Ames, IA 50010, <country country="US">USA</country></aff>
    <aff id="jkac032-aff4"><label>4</label><institution>Center for Quantitative Genetics and Genomics, Aarhus University</institution>, Aarhus 8830, <country country="DK">Denmark</country></aff>
    <aff id="jkac032-aff5"><label>5</label><institution>agn Genetics GmbH, Davos-Dorf</institution>, Graubünden 7260, <country country="CH">Switzerland</country></aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>de Koning</surname>
          <given-names>D -J</given-names>
        </name>
        <role>Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="jkac032-cor1">Corresponding author: Department of Animal Science, University of California, Davis, CA 95616, USA. Email: <email>qtlcheng@ucdavis.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>4</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-03-04">
      <day>04</day>
      <month>3</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>04</day>
      <month>3</month>
      <year>2022</year>
    </pub-date>
    <volume>12</volume>
    <issue>4</issue>
    <elocation-id>jkac032</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>12</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>06</day>
        <month>1</month>
        <year>2022</year>
      </date>
      <date date-type="corrected-typeset">
        <day>04</day>
        <month>3</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press on behalf of Genetics Society of America.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="jkac032.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Simulation can be an efficient approach to design, evaluate, and optimize breeding programs. In the era of modern agriculture, breeding programs can benefit from a simulator that integrates various sources of big data and accommodates state-of-the-art statistical models. The initial release of XSim, in which stochastic descendants can be efficiently simulated with a drop-down strategy, has mainly been used to validate genomic selection results. In this article, we present XSim Version 2 that is an open-source tool and has been extensively redesigned with additional features to meet the needs in modern breeding programs. It seamlessly incorporates multiple statistical models for genetic evaluations, such as GBLUP, Bayesian alphabets, and neural networks, and it can effortlessly simulate successive generations of descendants based on complex mating schemes by the aid of its modular design. Case studies are presented to demonstrate the flexibility of XSim Version 2 in simulating crossbreeding in animal and plant populations. Modern biotechnology, including double haploids and embryo transfer, can all be simultaneously integrated into the mating plans that drive the simulation. From a computing perspective, XSim Version 2 is implemented in Julia, which is a computer language that retains the readability of scripting languages (e.g. R and Python) without sacrificing much computational speed compared to compiled languages (e.g. C). This makes XSim Version 2 a simulation tool that is relatively easy for both champions and community members to maintain, modify, or extend in order to improve their breeding programs. Functions and operators are overloaded for a better user interface so they may concatenate, subset, summarize, and organize simulated populations at each breeding step. With the strong and foreseeable demands in the community, XSim Version 2 will serve as a modern simulator bridging the gaps between theories and experiments with its flexibility, extensibility, and friendly interface.</p>
    </abstract>
    <kwd-group>
      <kwd>simulation</kwd>
      <kwd>breeding programs</kwd>
      <kwd>genetic evaluation</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>United States Department of Agriculture, Agriculture and Food Research Initiative National Institute of Food and Agriculture Competitive</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2018-67015-27957</award-id>
        <award-id>2021-67015-33412</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <p>Computer simulation is an efficient approach to design, evaluate, and optimize breeding programs. Simulation usually acts as a bridge between theories and experiments to provide development and preliminary validation of theories as well as planning guidelines on empirical experiments. Instead of risking years real world effort, new breeding strategies supported by quantitative genetics theories can mostly be evaluated in a day through simulations with proper assumptions and an appropriate tool.</p>
    <p>Integration of various sources of big data including phenotypic, pedigree, genomic, biological, and environmental information for genetic improvement in modern animal and plant agriculture requires an efficient and flexible simulator to both simulate and compare alternative breeding programs using all available information. Such a simulator needs to accommodate state-of-the-art statistical models for genetic evaluation.</p>
    <p>As an open-source tool, the initial version of XSim (<xref rid="jkac032-B4" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2015a</xref>), in which a strategy is developed to drop-down positions and origins of chromosomal segments rather than every allele state, is able to efficiently simulate descendants stochastically to sequence level resolution. It has mainly been used to validate genomic selection methods. We have extensively upgraded XSim to incorporate a portfolio of new features to simulate modern breeding programs. In XSim Version 2 (XSimV2), we have seamlessly incorporated “JWAS” (<xref rid="jkac032-B3" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2018a</xref>) an open-source package for genome-enabled analysis to enable multiple statistical models for genetic evaluation, including pedigree-based BLUP (<xref rid="jkac032-B17" ref-type="bibr">Henderson 1984</xref>), GBLUP (<xref rid="jkac032-B14" ref-type="bibr">Habier <italic toggle="yes">et al.</italic> 2007</xref>; <xref rid="jkac032-B34" ref-type="bibr">VanRaden 2008</xref>), the Bayesian Alphabet (<xref rid="jkac032-B22" ref-type="bibr">Meuwissen <italic toggle="yes">et al.</italic> 2001</xref>; <xref rid="jkac032-B24" ref-type="bibr">Park and Casella 2008</xref>; <xref rid="jkac032-B19" ref-type="bibr">Kizilkaya <italic toggle="yes">et al.</italic> 2010</xref>; <xref rid="jkac032-B16" ref-type="bibr">Habier <italic toggle="yes">et al.</italic> 2011</xref>; <xref rid="jkac032-B8" ref-type="bibr">Erbe <italic toggle="yes">et al.</italic> 2012</xref>; <xref rid="jkac032-B23" ref-type="bibr">Moser <italic toggle="yes">et al.</italic> 2015</xref>; <xref rid="jkac032-B6" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2015b</xref>), the multitrait Bayesian Alphabet (<xref rid="jkac032-B5" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2018b</xref>; <xref rid="jkac032-B13" ref-type="bibr">Gianola and Fernando 2020</xref>), single-step methods (<xref rid="jkac032-B21" ref-type="bibr">Legarra <italic toggle="yes">et al.</italic> 2009</xref>; <xref rid="jkac032-B11" ref-type="bibr">Fernando <italic toggle="yes">et al.</italic> 2014</xref>, <xref rid="jkac032-B10" ref-type="bibr">2016</xref>), as well as Bayesian neural networks (<xref rid="jkac032-B36" ref-type="bibr">Zhao <italic toggle="yes">et al.</italic> 2021</xref>).</p>
    <p>Modern breeding programs usually involve complex mating designs, such as crossbreeding in cattle and the use of multiparent populations in plants. XSimV2 is able to effortlessly mimic these designs by allowing the creation of novel mating plans together with modern biotechnology such as using double haploids (DHs) in plants and embryo transfer in animals. In addition, XSimV2 can preload up-to-date information on reference genomes for multiple major breeding species (e.g. cattle, pigs, rice, maize) such that genomic locations and recombination hot or cold spots can be simulated. XSimV2 is implemented in the modern programming language Julia (<xref rid="jkac032-B25" ref-type="bibr">Perkel 2019</xref>), which retains the readability of dynamic languages such as R (<xref rid="jkac032-B29" ref-type="bibr">R Core Team 2020</xref>) and Python (<xref rid="jkac032-B33" ref-type="bibr">Van Rossum and Drake 1995</xref>) but approaches the computing speed of compiled languages such as C (<xref rid="jkac032-B18" ref-type="bibr">Kernighan and Ritchie 1988</xref>). This makes XSimV2 a simulation tool that is relatively easy for both champions and community members to maintain, modify, or extend in order to improve their breeding programs.</p>
    <p>In this article, we will illustrate the latest software interface for XSimV2 including the manner in which genomes and phenomes are defined, the approach for generating founders, the methods for choosing the type of mating, the integration of selection based on real-time genetic evaluations, and others. We demonstrate the extensibility with case studies from both animal and plant breeding. The documentation of XSimV2 can be found on the GitHub repository (<ext-link xlink:href="https://github.com/reworkhow/XSim.jl" ext-link-type="uri">https://github.com/reworkhow/XSim.jl, last accessed date: Feb. 22nd, 2022</ext-link>).</p>
  </sec>
  <sec>
    <title>Software interface description</title>
    <p>In this section, we first describe how the genome and phenome to be simulated are specified. Then, we show how the founders of the population to be simulated can be generated. Following this, we describe how different mating schemes can be specified, including random mating and mating based on phenotypes or genetic evaluations. The descriptions below are followed by Julia code examples (in gray boxes), where the lines beginning with “#” are comments.</p>
    <sec>
      <title>Defining the genome and phenome</title>
      <p>A simulation is initialized by defining the genome and phenome with the functions build_genome() and build_phenome(). Multiple parameters in build_genome() can be used to define the genome, including numbers of chromosomes and loci, genetic position, physical position and the minor allele frequency (MAF) of each locus, mutation rates, and genotyping error rates. Phenome-related parameters can be defined in the build_phenome() function including positions and effects of causal variants [quantitative traits loci (QTL)], genetic variance-covariance matrices, residual variance-covariance matrices, phenotypic variance-covariance matrices, or heritability. The genome can also be user defined by providing a map file, in which each row represents one locus. The valid header names include “chr,” “cM,” “bp,” and “maf,” which refer to chromosome identification codes, positions in centimorgans (genetic position), positions in base pairs (physical position), and MAFs, respectively:</p>
      <p>
        <monospace># Define a genome with a user-provided file</monospace>
      </p>
      <p>
        <monospace># An example map.csv file is in the Appendix.</monospace>
      </p>
      <p>
        <monospace># Header in map.csv:”chr</monospace>
        <monospace>”</monospace>
        <monospace>,</monospace>
        <monospace>”</monospace>
        <monospace>cM</monospace>
        <monospace>”</monospace>
        <monospace>,</monospace>
        <monospace>”</monospace>
        <monospace>bp</monospace>
        <monospace>”</monospace>
        <monospace>,</monospace>
        <monospace>and</monospace>
        <monospace>”</monospace>
        <monospace>maf”</monospace>
      </p>
      <p>
        <monospace>build_genome(”map.csv”)</monospace>
      </p>
      <p>Note that XSimV2 uses genetic position information to simulate crossover events, and thus, this information encodes recombination hot or cold spots. If information on genetic positions is not provided by the user, XSimV2 can infer genetic positions from physical positions provided using the preloaded genetic and physical representation of reference genomes in XSimV2 through the species argument in build_genome(). XSimV2 preloads genetic and physical maps reported in literature for multiple major livestock and crop species, including cattle (<xref rid="jkac032-B1" ref-type="bibr">Arias <italic toggle="yes">et al.</italic> 2009</xref>), pig (<xref rid="jkac032-B32" ref-type="bibr">Tortereau <italic toggle="yes">et al.</italic> 2012</xref>), rice (<xref rid="jkac032-B20" ref-type="bibr">Kurata and Yamazaki 2006</xref>), and maize (<xref rid="jkac032-B27" ref-type="bibr">Portwood <italic toggle="yes">et al.</italic> 2019</xref>). If neither genetic positions nor studied species are provided, chromosomes are assumed to have a length of 1 Morgan and the relationship between physical and genetic positions are assumed to be linear.</p>
      <p>Phenomics is another aspect of the simulation, and it defines how traits are simulated in XSimV2. The allele substitution effects of QTL can be defined by adding columns with eff_ prefixes to the map files used in build_genome(). For example, when there are two traits being simulated, columns eff_1 and eff_2 are added to assign the QTL effects. A zero value should be assigned for a locus that is not QTL. QTL with pleiotropic effects can also be simulated in multitrait simulation. An example of the map file is shown in the Appendix.</p>
      <p>
        <monospace># Define a phenome with heritability 0.3 by a user- provided file</monospace>
      </p>
      <p>
        <monospace># Header in map.csv:</monospace>
        <monospace>”</monospace>
        <monospace>eff_” prefixed for marker effects</monospace>
      </p>
      <p><monospace>build_phenome(”map.csv”, h2</monospace> <monospace>=</monospace> <monospace>0.3)</monospace></p>
      <p>Quick Start approaches are available in XSimV2 to allow users to quickly set up their genome and phenome in order to focus on the simulated schemes for proof of concept (more details are in documentation). One example is for a user to define the genome and phenome by providing number of chromosomes, number of loci, numbers of QTL for each trait, genetic variances, and heritability. Genetic positions of all loci will be uniformly distributed along the genome. QTL effects and environmental effects will be sampled from a standard normal distribution. These effects will be scaled and transformed to obtain the predefined genetic variance and heritability. By default, the genetic variance vg and the residual variance ve are assumed to be scalars in single-trait simulation and diagonal matrices in multitrait simulation. Correlations are introduced by assigning nonzero values to the off-diagonal elements of vg and/or ve in multitrait simulation.</p>
      <p>The example below shows an approach to simulate two correlated traits controlled by 2 and 1 QTL among 4 SNPs on 2 chromosomes. The traits are simulated to have heritability of 0.3 and 0.8, respectively, with uncorrelated residual effects.</p>
      <p>
        <monospace># A quick start of genome with 4 loci on 2 chromosomes</monospace>
      </p>
      <p><monospace>build_genome(n_chr</monospace> <monospace>=</monospace> <monospace>2,</monospace></p>
      <p>       <monospace>n_loci</monospace> <monospace>=</monospace> <monospace>2)</monospace></p>
      <p>
        <monospace># Phenome with 2 correlated traits of heritability 0.3 and 0.8,</monospace>
        <monospace>controlled by 2 and 1 QTL, respectively.</monospace>
      </p>
      <p>
        <monospace>build_phenome([2, 1],</monospace>
      </p>
      <p>         <monospace>vg = [1 .5</monospace></p>
      <p>          <monospace>.5 1],</monospace></p>
      <p>         <monospace>h2 = [0.3, 0.8])</monospace></p>
    </sec>
    <sec>
      <title>Generating founders</title>
      <p>In XSimV2, a Julia object, Cohort, was designed to represent a group of individuals and to store their heterogeneous information of simulated genotypes, pedigree, and breeding values. Users can obtain the Cohort object either through the function Founders(), which takes an integer as the input argument specifying the number of simulated founders, or from the results of select or mate functions, which will be described in the later sections. If a cohort is created by Founders() without known haplotypes, the cohort’s haplotypes are simulated by sampling haplotypes of each locus from a Bernoulli distribution with the event probability equals to 1 - MAF. The codes below demonstrate how to initialize a cohort containing ten simulated founders. Note that, as will be shown in the Case Studies section, random mating over a number of generations may be required to generate linkage disequilibrium (LD).</p>
      <p>
        <monospace># Generate 10 founders and get a cohort object</monospace>
      </p>
      <p>
        <monospace>cohort_A = Founders(10)</monospace>
      </p>
      <p>Alternatively, users can specify the genomes of all the founders and directly control their relatedness. This requires users to have known haplotypes or genotypes for founders, which XSimV2 can read from a text file. The haplotypes should have individuals recorded by row with two columns per locus, recording the paternal and maternal alleles at this locus. The haplotype is coded as 0 or 1 to represent the existence of a reference allele. If genotypes are provided, haplotypes will be further inferred from genotypes randomly. In the genotype file, alleles are coded as 0, 1, and 2 to represent the allele dosage, and these values should be arranged as individuals (rows) by loci (columns). Missing haplotypes and genotypes can be denoted as −1 or 9.</p>
      <p>
        <monospace># Generate founders from a known haplotype file</monospace>
      </p>
      <p>
        <monospace># An example haplotypes.csv file is in the Appendix</monospace>
      </p>
      <p>
        <monospace>cohort_B = Founders(”haplotypes.csv”)</monospace>
      </p>
    </sec>
    <sec>
      <title>Mating</title>
      <p>Many mating schemes conceptually consist of parents that are sampled from two cohorts (cohorts A and B). XSimV2 allows a parent from cohort A to be mated with a specified number of parents from cohort B. The function mate() takes cohort A and B, which both are Cohort objects, as the first two arguments, it can adapt to different scenarios with multiple arguments: nA common parents will be randomly selected from cohort A, and each common parent will mate with nB_per_A individuals randomly sampled from cohort B. Individuals will be sampled with replacement from cohorts A or B depending on if the arguments replace_A or replace_B are set to true. From a pair of parents sampled from two cohorts, n_per_mate offspring will be reproduced with ratio ratio_malefemale of male over female.</p>
      <p>For example, in the mating scheme below, we have 5 sires from cohort A, and each sire is mated with 10 dams from cohort B, which are sampled with replacement, to generate 1 progeny with the <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mn>1</mml:mn><mml:mo>:</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> sex ratio.</p>
      <p>
        <monospace># A mating function example</monospace>
      </p>
      <p>
        <monospace>args = Dict(:nA =&gt; 5,</monospace>
      </p>
      <p>     <monospace>:nB_per_A =&gt; 10,</monospace></p>
      <p>     <monospace>:replace_A =&gt; false,</monospace></p>
      <p>     <monospace>:replace_B =&gt; true,</monospace></p>
      <p>     <monospace>:n_per_mate   =&gt; 1,</monospace></p>
      <p>     <monospace>:ratio_malefemale =&gt; 1)</monospace></p>
      <p>
        <monospace>male, female = mate(cohort_A, cohort_B; args…)</monospace>
      </p>
      <p>The default value for ratio_malefemale is false (i.e. a zero value), and only one Cohort object will be returned if ratio_malefemale is set to false or 0. This mating function is versatile to accommodate most mating schemes (e.g. random mating, diallel crosses, and selfing) by assigning different arguments in mate().</p>
      <p>A “random mating” scheme between two cohorts is presented in the example below: Random mating between cohort A and B is performed without replacement, in which 1 progeny is generated from each mating. By default, if only the first two arguments (i.e. cohort A and B) are included in the mate() function, the random mating scheme described above is performed. This scheme can also be expressed by using the overloaded operator “*” as will be shown in the “overloaded operators and functions” subsection.</p>
      <p>
        <monospace># Random mating scheme</monospace>
      </p>
      <p>
        <monospace>args = Dict(:nA =&gt; cohort_A.n,</monospace>
      </p>
      <p>
        <monospace>     :nB_per_A =&gt; 1,</monospace>
      </p>
      <p>
        <monospace>     :replace_A =&gt; false,</monospace>
      </p>
      <p>
        <monospace>     :replace_B =&gt; false,</monospace>
      </p>
      <p>
        <monospace>     :n_per_mate =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A, cohort_B; args…)</monospace>
      </p>
      <p>
        <monospace># Equivalent results without providing any argument</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A, cohort_B)</monospace>
      </p>
      <p>
        <monospace># Equivalent results by specifying scheme argument</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A, cohort_B, scheme =“random”)</monospace>
      </p>
      <p>
        <monospace># Equivalent results with overloaded operator ’*’</monospace>
      </p>
      <p>
        <monospace>offspring = cohort_A * cohort_B</monospace>
      </p>
      <p>In the “diallel cross” scheme, each individual from cohort A mates with all individuals from cohort B. In the example below, each individual from cohort A is mated to all individuals in cohort B with one offspring from each mating.</p>
      <p>
        <monospace># Diallel cross mating scheme</monospace>
      </p>
      <p>
        <monospace>args = Dict(:nA =&gt; cohort_A.n,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; cohort_B.n,</monospace>
      </p>
      <p>
        <monospace> :replace_A    =&gt; false,</monospace>
      </p>
      <p>
        <monospace> :replace_B =&gt; false,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A, cohort_B; args…)</monospace>
      </p>
      <p>
        <monospace># Equivalent results by specifying scheme argument</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A, cohort_B,</monospace>
      </p>
      <p>
        <monospace> scheme = “diallel cross”)</monospace>
      </p>
      <p>In the “selfing” scheme, self-fertilization (selfing) is performed if the argument scheme =“selfing” in mate(). For example, if one wants to produce 10 families of 50 individuals each from selfing of 10 individuals from cohort A, the mating scheme can be defined as:</p>
      <p>
        <monospace># Selfing mating scheme</monospace>
      </p>
      <p>
        <monospace>args = Dict(:nA =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :replace_A =&gt; false,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 50,</monospace>
      </p>
      <p>
        <monospace> :scheme =&gt; “selfing”)</monospace>
      </p>
      <p>
        <monospace>offspring = mate(cohort_A; args…)</monospace>
      </p>
      <p>As an alternative to specifying the mating scheme, users can provide a pedigree that identifies the parents for each individual. This is done by providing a pedigree file in the mate() function.</p>
      <p>
        <monospace># Pedigree mating scheme</monospace>
      </p>
      <p>
        <monospace># An example pedigree.csv file is in the Appendix</monospace>
      </p>
      <p>
        <monospace>cohort = mate(”pedigree.csv”)</monospace>
      </p>
      <p>This option in mate() function allows XSimV2 to simulate data from actual pedigrees.</p>
    </sec>
    <sec>
      <title>Selection based on real-time genetic evaluations</title>
      <p>XSimV2 allows a cohort of individuals to be selected based on phenotypes (i.e. mass selection) or estimated breeding values (EBV) from real-time genetic evaluations. The selection is implemented by the function select() taking a Cohort object as the first argument, and the number of individuals to be selected from the input cohort as the second argument. By default, mass selection is conducted and the argument criteria = “phenotypes” is used. To estimate breeding values, a genome-enabled analysis package “JWAS” (<xref rid="jkac032-B3" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2018a</xref>) was incorporated into XSimV2. Multiple methods are available for genetic evaluations, including pedigree-based BLUP (<xref rid="jkac032-B17" ref-type="bibr">Henderson 1984</xref>), GBLUP (<xref rid="jkac032-B14" ref-type="bibr">Habier <italic toggle="yes">et al.</italic> 2007</xref>; <xref rid="jkac032-B34" ref-type="bibr">VanRaden 2008</xref>), Bayesian Alphabet (<xref rid="jkac032-B22" ref-type="bibr">Meuwissen <italic toggle="yes">et al.</italic> 2001</xref>; <xref rid="jkac032-B24" ref-type="bibr">Park and Casella 2008</xref>; <xref rid="jkac032-B19" ref-type="bibr">Kizilkaya <italic toggle="yes">et al.</italic> 2010</xref>; <xref rid="jkac032-B16" ref-type="bibr">Habier <italic toggle="yes">et al.</italic> 2011</xref>; <xref rid="jkac032-B8" ref-type="bibr">Erbe <italic toggle="yes">et al.</italic> 2012</xref>; <xref rid="jkac032-B23" ref-type="bibr">Moser <italic toggle="yes">et al.</italic> 2015</xref>; <xref rid="jkac032-B5" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2018b</xref>; <xref rid="jkac032-B13" ref-type="bibr">Gianola and Fernando 2020</xref>), and single-step methods (<xref rid="jkac032-B21" ref-type="bibr">Legarra <italic toggle="yes">et al.</italic> 2009</xref>; <xref rid="jkac032-B11" ref-type="bibr">Fernando <italic toggle="yes">et al.</italic> 2014</xref>) for single-trait and multiple-trait analyses (<xref rid="jkac032-B5" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2018b</xref>; <xref rid="jkac032-B13" ref-type="bibr">Gianola and Fernando 2020</xref>), as well as Bayesian neural networks (<xref rid="jkac032-B36" ref-type="bibr">Zhao <italic toggle="yes">et al.</italic> 2021</xref>).</p>
      <p>After EBV (or phenotypes in phenotypic selection) are obtained, a selection index can be used to combine information on multiple traits for selection. The argument weights can be assigned as weights for traits in the selection index. Note that positive or negative weights enable selection in either ascending or descending order of EBV.</p>
      <p>In the example below, two correlated traits are simulated to be controlled by 10 and 20 QTL out of 50 locus on one chromosome, respectively. Individuals are selected based on EBV. Multitrait GBLUP is used to obtain EBV for both traits by default. The selection index weights for these two traits are set to 3.0 and −2.0. If no weight are assigned, weights are assumed to be 1 for each trait.</p>
      <p>
        <monospace># Genetic evaluation</monospace>
      </p>
      <p>
        <monospace>args = Dict(:criteria   =&gt; “EBV</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> :methods =&gt; “GBLUP</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> :weights =&gt; [3.0, -2.0])</monospace>
      </p>
      <p>
        <monospace>offspring = select(cohort_A, 50; args…)</monospace>
      </p>
    </sec>
    <sec>
      <title>Breed</title>
      <p>Here, we introduce a function breed() as a wrapper function that combines the functions for mate() and select(). The value of n_gens defines how many generations are simulated, and n_select_A and n_select_B define how many descendants are selected to form the cohort A and cohort B in the next generation, respectively. For example, we can have 10 sires (cohort A) and mate each sire with 5 dams (cohort B) for 3 generations. And in each generation we mass select 10 male offspring as sires and all female offspring as parents for the next generation. The code for such a breeding scheme is given below:</p>
      <p>
        <monospace># Mating and selection cross 5 generations</monospace>
      </p>
      <p>
        <monospace>args = Dict(# mating arguments</monospace>
      </p>
      <p>
        <monospace> :nA =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 5,</monospace>
      </p>
      <p>
        <monospace> :replace_A =&gt; false,</monospace>
      </p>
      <p>
        <monospace> :replace_B =&gt; true,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 1,</monospace>
      </p>
      <p>
        <monospace> :ratio_malefemale =&gt; 1.0,</monospace>
      </p>
      <p>
        <monospace> # selection arguments</monospace>
      </p>
      <p>
        <monospace> :criteria =&gt; “EBV</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> :methods =&gt; “GBLUP</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> # breeding arguments</monospace>
      </p>
      <p>
        <monospace> :n_gens =&gt; 3,</monospace>
      </p>
      <p>
        <monospace> :n_select_A =&gt; 10)</monospace>
      </p>
      <p>
        <monospace># Breed cohorts based on the defined arguments</monospace>
      </p>
      <p>
        <monospace>cohort_A, cohort_B = breed(cohort_A, cohort_B; args…)</monospace>
      </p>
      <p>
        <monospace># The result is equivalent to the following mate-select iterations:</monospace>
      </p>
      <p>
        <monospace>for _ in 1:3</monospace>
      </p>
      <p>
        <monospace> males, females = mate(cohort_A, cohort_B; args…)</monospace>
      </p>
      <p>
        <monospace> cohort_A = select(males, sires.n; args…)</monospace>
      </p>
      <p>
        <monospace> cohort_B = females</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
    </sec>
    <sec>
      <title>Species-specific features</title>
      <p>Several species-specific features are included in XSimV2. Two examples are shown in this section including DHs in plant breeding and embryo transfer in animal breeding.</p>
      <p>DHs production is an important tool in plant breeding for reducing costs and speeding up the fixation of inbred lines. To generate breeding lines with high homozygosity, plant breeders may use a number of generations of selfing, back-crossing, or advancing generations by single seed descent (SSD). Instead, the production of DH breeding lines can derive 100% homozygous individuals in just one generation. In XSimV2, users can call the function get_DH() and generate DH lines as below:</p>
      <p>
        <monospace># The offsprings</monospace>
        <monospace>“</monospace>
        <monospace>DHs” have the same population size as</monospace>
      </p>
      <p>
        <monospace>the parents</monospace>
        <monospace>“</monospace>
        <monospace>cohort”</monospace>
      </p>
      <p>
        <monospace>DHs = get_DH(cohort)</monospace>
      </p>
      <p>Ovum pick-up is a technology, where a cow is super ovulated and then the unfertilized eggs are flushed out and in vitro fertilized with potentially different sires. It can be straightforward to implement these technologies in XSimV2 by defining cows (dams) as cohort A, which will be treated as a common parent. The mating scheme can be setup as:</p>
      <p>
        <monospace># Example to demonstrate ovum pick-up in cattle breeding</monospace>
      </p>
      <p>
        <monospace>args = Dict(:nA =&gt; 5, # 5 dams in total</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 10, # mate each dam with 10 sires</monospace>
      </p>
      <p>
        <monospace> :replace_A =&gt; false,</monospace>
      </p>
      <p>
        <monospace> :replace_B =&gt; true,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>offspring = mate(dams, sires; args…)</monospace>
      </p>
    </sec>
    <sec>
      <title>Overloaded operators and functions</title>
      <p>In XSimV2, as cohorts are the basic unit in both of the functions mate() and select(), we made a Cohort “object” for a collection of individuals and overloaded multiple base operators and functions in XSimV2. For example, users can simply use subset or + operators to get a subset of a cohort or to concatenate multiple cohorts into one larger group. In the example below, we concatenate the first 5 individuals in cohort A, and all individuals in cohort B into one single large cohort C.</p>
      <p>
        <monospace># Concatenate multiple cohorts</monospace>
      </p>
      <p>
        <monospace>cohort_C = cohort_A[1:5] + cohort_B</monospace>
      </p>
      <p>The base functions sort() and sample() are also overloaded for Cohort. Users can sample random individuals from a cohort, or sort individuals using similar syntax (more examples are available in the documentation).</p>
      <p>
        <monospace># Sample 5 individuals from a cohort without replacement</monospace>
      </p>
      <p>
        <monospace>new_cohort = sample(cohort_A, 5, replace = false)</monospace>
      </p>
      <p>
        <monospace># Sort the cohort by true breeding values (BV).</monospace>
        <monospace>“</monospace>
        <monospace>BV” is the default value.</monospace>
      </p>
      <p>
        <monospace>sort_cohort = sort(cohort_A, by</monospace>
        <monospace>=</monospace>
        <monospace>”BV”)</monospace>
      </p>
      <p>
        <monospace># Or sort the cohort based on their pedigree in an order from the oldest to the youngest. Other options include estimated breeding values (EBV) or phenotypes (</monospace>
        <italic toggle="yes">
          <monospace>e.g.</monospace>
        </italic>
        <monospace>y1).</monospace>
      </p>
      <p>
        <monospace>sort_cohort = sort(cohort_A, by</monospace>
        <monospace>=</monospace>
        <monospace>”pedigree”)</monospace>
      </p>
    </sec>
  </sec>
  <sec>
    <title>Case studies</title>
    <sec>
      <title>Rotational cross-breeding in cattle</title>
      <p>An example of rotational cross-breeding is shown in <xref rid="jkac032-F1" ref-type="fig">Fig. 1</xref>. First, a cattle founder population is initialized, either based on real haplotypes or genotypes (described in the section <italic toggle="yes">Generating Founders</italic>), or simulated based on allele frequencies, assuming linkage and Hardy–Weinberg equilibria, with random mating over a number of generations to generate LD. For example, we might start with a population of 1,500 individuals. We let them randomly mate for 1,000 discrete (nonoverlapping) generations. In order to expand the LD range, we subject the population to a bottleneck that reduces its size to 100 individuals, and then allow random matings for another 15 generations. This approach is similar to that proposed in <xref rid="jkac032-B15" ref-type="bibr">Habier <italic toggle="yes">et al.</italic> (2013)</xref>, which was used to simulate a similar LD pattern to that observed in real dairy cattle (<xref rid="jkac032-B7" ref-type="bibr">de Roos <italic toggle="yes">et al.</italic> 2008</xref>). By default, the mate() function can have all individuals from the input cohort mating randomly with each other:</p>
      <p>
        <monospace># Build Genome and Phenome</monospace>
      </p>
      <p>
        <monospace>build_genome(”map.csv</monospace>
        <monospace>,</monospace>
        <monospace>”</monospace>
        <monospace>species = “cattle”)</monospace>
      </p>
      <p>
        <monospace>build_phenome(”map.csv</monospace>
        <monospace>,</monospace>
        <monospace>”</monospace>
      </p>
      <p>
        <monospace> vg = [1 .5;</monospace>
        <monospace>.5 1],</monospace>
      </p>
      <p>
        <monospace> h2 = [0.3, 0.7])</monospace>
      </p>
      <p>
        <monospace># Initialize a population with 1,500 parents of linkage and Hardy Weinberg equilibria</monospace>
      </p>
      <p>
        <monospace>parents = Founders(1500)</monospace>
      </p>
      <p>
        <monospace># Let parents random mate with each other</monospace>
        <monospace>for 1,000 generations</monospace>
      </p>
      <p>
        <monospace>for _ in 1:1000</monospace>
      </p>
      <p>
        <monospace> parents = mate(parents)</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
      <p>
        <monospace># Drop the population size to 100 individuals and</monospace>
        <monospace>continue the random mating for another 15 generations</monospace>
      </p>
      <p>
        <monospace>for _ in 1:15</monospace>
      </p>
      <p>
        <monospace> parents = mate(parents[1:100])</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
      <p>
        <monospace>sires_base = dams_base = parents</monospace>
      </p>
      <fig position="float" id="jkac032-F1">
        <label>Fig. 1.</label>
        <caption>
          <p>Case studies of mating schemes: rotational cross-breeding in animal breeding (left), and NAM panel in plant breeding (right).</p>
        </caption>
        <graphic xlink:href="jkac032f1" position="float"/>
      </fig>
      <p>Second, the ancestors of what will become three pure breeds (breeds A, B, and C) are generated in generation <inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> from the parental population through random mating for 10 generations. In breed A, 50 sires and 500 dams are randomly selected, and each sire is mated with 10 dams. The ratio of male to female offspring is 1. In both breeds B and C, 100 sires and 2000 dams are randomly selected, and each sire is mated with 20 dams. Thus, three pure breeds are simulated, where breed A represents a small population of 50 males and 500 females, whereas both breeds B and C have 100 males and 2000 females.</p>
      <p>
        <monospace># Simulate three pure breeds</monospace>
      </p>
      <p>
        <monospace>args_A = Dict(# Mating</monospace>
      </p>
      <p>
        <monospace> :nA =&gt; 50,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 2,</monospace>
      </p>
      <p>
        <monospace> :ratio_malefemale =&gt; 1,</monospace>
      </p>
      <p>
        <monospace> # Selection</monospace>
      </p>
      <p>
        <monospace> :criteria =&gt; “random</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> # Breeding</monospace>
      </p>
      <p>
        <monospace> :n_gens =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :n_select_A =&gt; 50,</monospace>
      </p>
      <p>
        <monospace> :n_select_B =&gt; 500)</monospace>
      </p>
      <p>
        <monospace>args_BC = Dict(# Mating</monospace>
      </p>
      <p>
        <monospace> :nA =&gt; 100,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 20,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 2,</monospace>
      </p>
      <p>
        <monospace> :ratio_malefemale =&gt; 1,</monospace>
      </p>
      <p>
        <monospace> # Selection</monospace>
      </p>
      <p>
        <monospace> :criteria =&gt;“random</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> # Breeding</monospace>
      </p>
      <p>
        <monospace> :n_gens =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :n_select_A =&gt; 100,</monospace>
      </p>
      <p>
        <monospace> :n_select_B =&gt; 2000)</monospace>
      </p>
      <p>
        <monospace># Breed A, B, and C</monospace>
      </p>
      <p>
        <monospace>sires_A, dams_A = breed(sires_base, dams_base; args_A…)</monospace>
      </p>
      <p>
        <monospace>sires_B, dams_B = breed(sires_base, dams_base; args_BC…)</monospace>
      </p>
      <p>
        <monospace>sires_C, dams_C = breed(sires_base, dams_base; args_BC…)</monospace>
      </p>
      <p>Third, we create first-cross-offspring, which contain 2,000 individuals, using all 100 sires from breed B and 1,000 dams from breed C as two mating cohorts. Each sire will mate with 10 dams and produce two offspring which leads to 1,000 male and 1,000 female offspring at generation <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. These first-cross-animals will be sires and dams in the next generation <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. We also continue pure-bred matings to retain subsequent generations of each of the three breeds. In <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, we use all 50 sires from breed A and cross each of them with 20 dams from <inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. And we can generate another 1,000 males and 1,000 females as parents for the next round. In <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>3</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, all 100 sires from breed C will mate with dams from <inline-formula id="IE8"><mml:math id="IM8" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and produce another 2,000 offspring. The sire for the next generation will be back to breed B and the rotational crossbreeding cycle continues. The described process can be adequately expressed in XSimV2:</p>
      <p>
        <monospace># Rotation parameters</monospace>
      </p>
      <p>
        <monospace>args_XA = Dict (:nA =&gt; 50,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 20,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 2,</monospace>
      </p>
      <p>
        <monospace> :ratio_malefemale =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>args_XBC = Dict(:nA =&gt; 100,</monospace>
      </p>
      <p>
        <monospace> :nB_per_A =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 2,</monospace>
      </p>
      <p>
        <monospace> :ratio_malefemale =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>args_A[:n_gens] = 1</monospace>
      </p>
      <p>
        <monospace>args_BC[:n_gens] = 1</monospace>
      </p>
      <p>
        <monospace># Rotation (G1)</monospace>
      </p>
      <p><monospace>sires_A1, dams_A1 </monospace> <monospace>=</monospace> <monospace>breed(sires_A, dams_A; args_A…)</monospace></p>
      <p><monospace>sires_B1, dams_B1</monospace> <monospace>=</monospace> <monospace>breed(sires_B, dams_B; args_BC…)</monospace></p>
      <p><monospace>sires_C1, dams_C1 </monospace> <monospace>=</monospace> <monospace>breed(sires_C, dams_C; args_BC…)</monospace></p>
      <p><monospace>males_G1, females_G1</monospace> <monospace>=</monospace> <monospace>mate(sires_B, dams_C;</monospace></p>
      <p>
        <monospace> args_XBC…)</monospace>
      </p>
      <p>
        <monospace># Rotation (G2)</monospace>
      </p>
      <p><monospace>sires_A2, dams_A2</monospace> <monospace>=</monospace> <monospace>breed(sires_A1, dams_A1; args_A…)</monospace></p>
      <p><monospace>sires_B2, dams_B2</monospace> <monospace>=</monospace> <monospace>breed(sires_B1, dams_B1; args_BC…)</monospace></p>
      <p><monospace>sires_C2, dams_C2</monospace> <monospace>=</monospace> <monospace>breed(sires_C1, dams_C1; args_BC…)</monospace></p>
      <p><monospace>males_G2, females_G2</monospace> <monospace>=</monospace> <monospace>mate(sires_A1, females_G1;</monospace></p>
      <p>
        <monospace> args_XA…)</monospace>
      </p>
      <p>
        <monospace># Rotation (G3)</monospace>
      </p>
      <p><monospace>sires_A3, dams_A3</monospace> <monospace>=</monospace> <monospace>breed(sires_A2, dams_A2; args_A…)</monospace></p>
      <p><monospace>sires_B3, dams_B3</monospace> <monospace>=</monospace> <monospace>breed(sires_B2, dams_B2; args_BC…)</monospace></p>
      <p><monospace>sires_C3, dams_C3</monospace> <monospace>=</monospace> <monospace>breed(sires_C2, dams_C2; args_BC…)</monospace></p>
      <p><monospace>males_G3, females_G3</monospace> <monospace>=</monospace> <monospace>mate(sires_C2, females_G2;</monospace></p>
      <p>
        <monospace>  args_XBC…)</monospace>
      </p>
    </sec>
    <sec>
      <title>Nested association mapping from inbred plants</title>
      <p>An example of nested association mapping is shown in <xref rid="jkac032-F1" ref-type="fig">Fig. 1</xref>. The NAM design (<xref rid="jkac032-B2" ref-type="bibr">Buckler <italic toggle="yes">et al.</italic> 2009</xref>) is useful in plant breeding for its statistical power in detecting QTLs (<xref rid="jkac032-B31" ref-type="bibr">Scott <italic toggle="yes">et al.</italic> 2020</xref>). The demonstrated genotype below was collected from a real maize association panel (<xref rid="jkac032-B35" ref-type="bibr">Wang and Zhang 2020</xref>) and was preloaded in XSimV2. Founders of the NAM panel are determined by 25 diversity founders and 1 common parent sampled from this preloaded dataset.</p>
      <p>
        <monospace># Load demo data</monospace>
      </p>
      <p>
        <monospace>data_map = DATA(”maize_map”)</monospace>
      </p>
      <p>
        <monospace>data_snp = DATA(”maize_snp”)</monospace>
      </p>
      <p>
        <monospace># Build genome using the real data</monospace>
      </p>
      <p>
        <monospace>build_genome(data_map)</monospace>
      </p>
      <p>
        <monospace># Simulate a trait controlled by 30 QTLs</monospace>
      </p>
      <p>
        <monospace>build_phenome(30)</monospace>
      </p>
      <p>
        <monospace># Randomly sample 26 founders to become the base population</monospace>
      </p>
      <p>
        <monospace>founders = Cohort(data_snp,</monospace>
      </p>
      <p><monospace>n</monospace> <monospace>=</monospace> <monospace>26, random=true)</monospace></p>
      <p>
        <monospace>common_parents = founders[1]</monospace>
      </p>
      <p>
        <monospace>diverse_parents = founders[2:26]</monospace>
      </p>
      <p>We let each founder mate with the common parent separately to generate 25 families in the generation <inline-formula id="IE9"><mml:math id="IM9" display="inline" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. Later, each family is advanced by SSD to the 6th generation and derive 200 recombinant inbred lines (RILs). Overall, we can have a NAM population with 25 families containing 200 RILs each through the following code:</p>
      <p>
        <monospace># Create an empty cohort to be concatenated with newly generated offspring</monospace>
      </p>
      <p><monospace>F1</monospace> <monospace>=</monospace> <monospace>Founders()</monospace></p>
      <p>
        <monospace># Cross each diverse parent with the common parent</monospace>
      </p>
      <p>
        <monospace>for parent in diverse_parents</monospace>
      </p>
      <p>
        <monospace>F1 += common_parents * parent</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
      <p>
        <monospace># Each family produce 200 RILs to derive NAM population</monospace>
      </p>
      <p>
        <monospace>args = Dict(# Mating</monospace>
      </p>
      <p>
        <monospace> :n_per_mate =&gt; 10,</monospace>
      </p>
      <p>
        <monospace> :scheme =&gt;“selfing</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace> # Selection</monospace>
      </p>
      <p>
        <monospace> :criteria =&gt;“phenotypes</monospace>
        <monospace>”,</monospace>
      </p>
      <p>
        <monospace># Breed</monospace>
      </p>
      <p>
        <monospace> :n_gens =&gt; 4,</monospace>
      </p>
      <p>
        <monospace> :n_select =&gt; 1)</monospace>
      </p>
      <p>
        <monospace>NAM = Founders()</monospace>
      </p>
      <p>
        <monospace>for family in F1</monospace>
      </p>
      <p><monospace>F2</monospace> <monospace>=</monospace> <monospace>mate(family, n_per_mate</monospace> <monospace>=</monospace> <monospace>200,  scheme</monospace><monospace>=</monospace><monospace>”selfing”)</monospace></p>
      <p>
        <monospace>for seed in F2</monospace>
      </p>
      <p>
        <monospace># single seed decent</monospace>
      </p>
      <p>
        <monospace>NAM += breed(seed; args…)</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
      <p>
        <monospace>end</monospace>
      </p>
    </sec>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>An efficient way to design, evaluate, and optimize modern breeding programs with complicated mating systems and state-of-art biotechnologies and statistical models is provided by XSimV2. Beyond the case studies presented in this article, XSimV2 can be flexibly extended to desired settings with the aid of its modular construction. Core functions of mate and select cover the two major breeding steps and can function as independent modules. It is possible to reassemble them in arbitrary combinations and achieve as many possible designs as each user desires. XSimV2 is extensible to accommodate newly released technologies and statistical models.</p>
    <p>Breeding programs of diploid species can be adequately simulated in XSimV2. When the species is polyploid, users can add an alphabet to chromosome codes (e.g. 1A, 1B, 2A, 2B,…, for allotetraploid) in the map file to indicate their subgenome for allopolyploid species. XSimV2 will treat chromosomes from different subgenomes as independent pairs of chromosomes. Otherwise, users can always extend it to other polyploid behaviors with extensible development in XSimV2.</p>
    <p>The initial version of XSim (<xref rid="jkac032-B4" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2015a</xref>), an open-source software tool, introduced an efficient approach to simulate Mendelian inheritance. In this approach, a chromosome of a nonfounder was represented by a list of the starting positions and origins of founder haplotypes. Meiotic crossovers between a pair of maternal and paternal chromosomes gives rise to a new list of starting positions and origins, which represents a new chromosome (<xref rid="jkac032-B4" ref-type="bibr">Cheng <italic toggle="yes">et al.</italic> 2015a</xref>). A chromosome of one Morgan on average has one crossover during meiosis, and thus, in the first generation of nonfounders, the position-origin list, representing such a chromosome, would on average have a length on only one, regardless of the number of loci being simulated on the chromosome. When a large number of loci are simulated, this approach to simulation results in a tremendous saving in storage space relative to recording the allele state at each locus that is simulated on the chromosome. Given the allele states of the founder haplotypes and the position-origin list of a nonfounder chromosome in any generation, the allele states of the nonfounder chromosome can be efficiently generated without dropping down allele states each generation. Thus, when allele states are not needed in each generation, this approach to simulation results in tremendous savings in storage and computing time.</p>
    <p>For the current setting, tens of thousands of individuals in each population with thousands of markers recorded can be simulated in few minutes per generation on a personal laptop (MacBook 16″ with 2.6 GHz 6-Core Intel Core i7 and 16GB 2667 MHz DDR4). However, the computing speed and memory efficiency of XSimV2 still has room for further improvement. For example, when we simulate a population, computations for each individual at the same generation are mostly independent. Additional computing resources, if applicable, can be utilized to resolve the intensive simulation with the aid of parallel computing. Large matrices, such as genotypes, can be stored in a sparse matrix coded in 8-bit integers instead of a regular dense matrix to improve memory efficiency.</p>
    <p>Several breeding program simulators have been developed, e.g. QMSim (<xref rid="jkac032-B30" ref-type="bibr">Sargolzaei and Schenkel 2009</xref>), SBVB (<xref rid="jkac032-B28" ref-type="bibr">Pérez-Enciso <italic toggle="yes">et al.</italic> 2017</xref>), MoBPS (<xref rid="jkac032-B26" ref-type="bibr">Pook <italic toggle="yes">et al.</italic> 2020</xref>), and AlphaSim (<xref rid="jkac032-B9" ref-type="bibr">Faux <italic toggle="yes">et al.</italic> 2016</xref>; <xref rid="jkac032-B12" ref-type="bibr">Gaynor <italic toggle="yes">et al.</italic> 2021</xref>). These simulators are capable of fulfilling needs in practical scenes with their strengths, such as efficient algorithms in simulating Mendelian inheritance (<xref rid="jkac032-B28" ref-type="bibr">Pérez-Enciso <italic toggle="yes">et al.</italic> 2017</xref>), open-source environments for better extensibility (<xref rid="jkac032-B9" ref-type="bibr">Faux <italic toggle="yes">et al.</italic> 2016</xref>; <xref rid="jkac032-B26" ref-type="bibr">Pook <italic toggle="yes">et al.</italic> 2020</xref>), versatile models in genetic evaluation (<xref rid="jkac032-B28" ref-type="bibr">Pérez-Enciso <italic toggle="yes">et al.</italic> 2017</xref>), or high flexibility in mating design (<xref rid="jkac032-B9" ref-type="bibr">Faux <italic toggle="yes">et al.</italic> 2016</xref>; <xref rid="jkac032-B26" ref-type="bibr">Pook <italic toggle="yes">et al.</italic> 2020</xref>). However, current community is still in strong need for all the mentioned merits in a single software platform to design and simulate modern breeding problems. In conclusion, with the foreseeable demands in the community, XSimV2 can serve as a modern simulator to bridge those features missing in alternative software, and within the context of a friendly environment, with strong flexibility, and readily extended as we presented in this article.</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>The authors state that all data necessary for confirming the conclusions presented in the article are represented fully within the article. The documentation of XSimV2 can be found on the GitHub repository (<ext-link xlink:href="https://github.com/reworkhow/XSim.jl" ext-link-type="uri">https://github.com/reworkhow/XSim.jl</ext-link>).</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was partially supported by the United States Department of Agriculture, Agriculture and Food Research Initiative National Institute of Food and Agriculture Competitive Grant No. 2018-67015-27957 and No. 2021-67015-33412.</p>
  </sec>
  <sec>
    <title>Conflicts of interest</title>
    <p>None declared.</p>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>Literature cited</title>
    <ref id="jkac032-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Arias</surname><given-names>JA</given-names></string-name>, <string-name><surname>Keehan</surname><given-names>M</given-names></string-name>, <string-name><surname>Fisher</surname><given-names>P</given-names></string-name>, <string-name><surname>Coppieters</surname><given-names>W</given-names></string-name>, <string-name><surname>Spelman</surname><given-names>R.</given-names></string-name></person-group><article-title>A high density linkage map of the bovine genome</article-title>. <source>BMC Genet</source>. <year>2009</year>;<volume>10</volume>:<fpage>18</fpage>.<pub-id pub-id-type="pmid">19393043</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Buckler</surname><given-names>ES</given-names></string-name>, <string-name><surname>Holland</surname><given-names>JB</given-names></string-name>, <string-name><surname>Bradbury</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Acharya</surname><given-names>CB</given-names></string-name>, <string-name><surname>Brown</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Browne</surname><given-names>C</given-names></string-name>, <string-name><surname>Ersoz</surname><given-names>E</given-names></string-name>, <string-name><surname>Flint-Garcia</surname><given-names>S</given-names></string-name>, <string-name><surname>Garcia</surname><given-names>A</given-names></string-name>, <string-name><surname>Glaubitz</surname><given-names>JC</given-names></string-name></person-group>, <etal>et al</etal><article-title>The genetic architecture of maize flowering time</article-title>. <source>Science</source>. <year>2009</year>;<volume>325</volume>(<issue>5941</issue>):<fpage>714</fpage>–<lpage>718</lpage>.<pub-id pub-id-type="pmid">19661422</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>H</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>R</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>D.</given-names></string-name></person-group><article-title>JWAS: julsitaaimnoptlheemrentation of whole-genome analysis software</article-title>. <source>Proc World Congress Genet Appl Livestock Prod</source>. <year>2018a</year>;<volume>11</volume>:<fpage>859</fpage>.</mixed-citation>
    </ref>
    <ref id="jkac032-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>H</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>R.</given-names></string-name></person-group><article-title>XSim: simulation of descendants from ancestors with sequence data</article-title>. <source>G3 (Bethesda)</source>. <year>2015a</year>;<volume>5</volume>:<fpage>1415</fpage>–<lpage>1417</lpage>.<pub-id pub-id-type="pmid">25953958</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>H</given-names></string-name>, <string-name><surname>Kizilkaya</surname><given-names>K</given-names></string-name>, <string-name><surname>Zeng</surname><given-names>J</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>R.</given-names></string-name></person-group><article-title>Genomic prediction from multiple-trait Bayesian regression methods using mixture priors</article-title>. <source>Genetics</source>. <year>2018b</year>;<volume>209</volume>(<issue>1</issue>):<fpage>89</fpage>–<lpage>103</lpage>.<pub-id pub-id-type="pmid">29514861</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cheng</surname><given-names>H</given-names></string-name>, <string-name><surname>Qu</surname><given-names>L</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL.</given-names></string-name></person-group><article-title>A fast and efficient Gibbs sampler for BayesB in whole-genome analyses</article-title>. <source>Genet Sel Evol</source>. <year>2015b</year>;<volume>47</volume>(<issue>1</issue>):<fpage>1819</fpage>.</mixed-citation>
    </ref>
    <ref id="jkac032-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>de Roos</surname><given-names>APW</given-names></string-name>, <string-name><surname>Hayes</surname><given-names>BJ</given-names></string-name>, <string-name><surname>Spelman</surname><given-names>RJ</given-names></string-name>, <string-name><surname>Goddard</surname><given-names>ME.</given-names></string-name></person-group><article-title>Linkage disequilibrium and persistence of phase in Holstein–Friesian, Jersey and Angus Cattle</article-title>. <source>Genetics</source>. <year>2008</year>;<volume>179</volume>(<issue>3</issue>):<fpage>1503</fpage>–<lpage>1512</lpage>.<pub-id pub-id-type="pmid">18622038</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Erbe</surname><given-names>M</given-names></string-name>, <string-name><surname>Hayes</surname><given-names>BJ</given-names></string-name>, <string-name><surname>Matukumalli</surname><given-names>LK</given-names></string-name>, <string-name><surname>Goswami</surname><given-names>S</given-names></string-name>, <string-name><surname>Bowman</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Reich</surname><given-names>CM</given-names></string-name>, <string-name><surname>Mason</surname><given-names>BA</given-names></string-name>, <string-name><surname>Goddard</surname><given-names>ME.</given-names></string-name></person-group><article-title>Improving accuracy of genomic predictions within and between dairy cattle breeds with imputed high-density single nucleotide polymorphism panels</article-title>. <source>J Dairy Sci</source>. <year>2012</year>;<volume>95</volume>(<issue>7</issue>):<fpage>4114</fpage>–<lpage>4129</lpage>.<pub-id pub-id-type="pmid">22720968</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Faux</surname><given-names>A‐M</given-names></string-name>, <string-name><surname>Gorjanc</surname><given-names>G</given-names></string-name>, <string-name><surname>Gaynor</surname><given-names>RC</given-names></string-name>, <string-name><surname>Battagin</surname><given-names>M</given-names></string-name>, <string-name><surname>Edwards</surname><given-names>SM</given-names></string-name>, <string-name><surname>Wilson</surname><given-names>DL</given-names></string-name>, <string-name><surname>Hearne</surname><given-names>SJ</given-names></string-name>, <string-name><surname>Gonen</surname><given-names>S</given-names></string-name>, <string-name><surname>Hickey</surname><given-names>JM.</given-names></string-name></person-group><article-title>AlphaSim: software for breeding program simulation</article-title>. <source>Plant Genome</source>. <year>2016</year>;<volume>9</volume>(<issue>3</issue>):<fpage>1</fpage>–<lpage>14</lpage>. doi:<pub-id pub-id-type="doi">10.3835/plantgenome2016.02.0013</pub-id>.</mixed-citation>
    </ref>
    <ref id="jkac032-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>H</given-names></string-name>, <string-name><surname>Golden</surname><given-names>BL</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ.</given-names></string-name></person-group><article-title>Computational strategies for alternative single-step Bayesian regression models with large numbers of genotyped and non-genotyped animals</article-title>. <source>Genet Sel Evol</source>. <year>2016</year>;<volume>48</volume>(<issue>1</issue>):<fpage>96</fpage>.<pub-id pub-id-type="pmid">27931187</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Dekkers</surname><given-names>JC</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ.</given-names></string-name></person-group><article-title>A class of Bayesian methods to combine large numbers of genotyped and non-genotyped animals for whole-genome analyses</article-title>. <source>Genet Sel Evol</source>. <year>2014</year>;<volume>46</volume>:<fpage>50</fpage>.<pub-id pub-id-type="pmid">25253441</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gaynor</surname><given-names>RC</given-names></string-name>, <string-name><surname>Gorjanc</surname><given-names>G</given-names></string-name>, <string-name><surname>Hickey</surname><given-names>JM.</given-names></string-name></person-group><article-title>AlphaSimR: an R package for breeding program simulations</article-title>. <source>G3 (Bethesda)</source>. <year>2021</year>;<volume>11</volume>:<fpage>jkaa017</fpage>.<pub-id pub-id-type="pmid">33704430</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gianola</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL.</given-names></string-name></person-group><article-title>A multiple-trait Bayesian Lasso for genome-enabled analysis and prediction of complex traits</article-title>. <source>Genetics</source>. <year>2020</year>;<volume>214</volume>(<issue>2</issue>):<fpage>305</fpage>–<lpage>331</lpage>.<pub-id pub-id-type="pmid">31879318</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Habier</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Dekkers</surname><given-names>JCM.</given-names></string-name></person-group><article-title>The impact of genetic relationship information on genome-assisted breeding values</article-title>. <source>Genetics</source>. <year>2007</year>;<volume>177</volume>(<issue>4</issue>):<fpage>2389</fpage>–<lpage>2397</lpage>.<pub-id pub-id-type="pmid">18073436</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Habier</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ.</given-names></string-name></person-group><article-title>Genomic BLUP decoded: a look into the black box of genomic prediction</article-title>. <source>Genetics</source>. <year>2013</year>;<volume>194</volume>(<issue>3</issue>):<fpage>597</fpage>–<lpage>607</lpage>.<pub-id pub-id-type="pmid">23640517</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Habier</surname><given-names>D</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Kizilkaya</surname><given-names>K</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ.</given-names></string-name></person-group><article-title>Extension of the Bayesian alphabet for genomic selection</article-title>. <source>BMC Bioinformatics</source>. <year>2011</year>;<volume>12</volume>:<fpage>186</fpage>.<pub-id pub-id-type="pmid">21605355</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B17">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Henderson</surname><given-names>CR.</given-names></string-name></person-group><source>Applications of Linear Models in Animal Breeding</source>. Guelph, ON, Canada: <publisher-name>University of Guelph,</publisher-name><year>1984</year>.</mixed-citation>
    </ref>
    <ref id="jkac032-B18">
      <mixed-citation publication-type="other">Kernighan BW, Ritchie DM. <italic toggle="yes">The C Programming Language</italic>, Second.; Prentice-Hall Software Series; Prentice Hall: Englewood Cliffs, N.J. 1998., </mixed-citation>
    </ref>
    <ref id="jkac032-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kizilkaya</surname><given-names>K</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>RL</given-names></string-name>, <string-name><surname>Garrick</surname><given-names>DJ.</given-names></string-name></person-group><article-title>Genomic prediction of simulated multibreed and purebred performance using observed fifty thousand single nucleotide polymorphism genotypes</article-title>. <source>J Anim Sci</source>. <year>2010</year>;<volume>88</volume>(<issue>2</issue>):<fpage>544</fpage>–<lpage>551</lpage>.<pub-id pub-id-type="pmid">19820059</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kurata</surname><given-names>N</given-names></string-name>, <string-name><surname>Yamazaki</surname><given-names>Y.</given-names></string-name></person-group><article-title>Oryzabase. An integrated biological and genome information database for rice</article-title>. <source>Plant Physiol</source>. <year>2006</year>;<volume>140</volume>(<issue>1</issue>):<fpage>12</fpage>–<lpage>17</lpage>.<pub-id pub-id-type="pmid">16403737</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Legarra</surname><given-names>A</given-names></string-name>, <string-name><surname>Aguilar</surname><given-names>I</given-names></string-name>, <string-name><surname>Misztal</surname><given-names>I.</given-names></string-name></person-group><article-title>A relationship matrix including full pedigree and genomic information</article-title>. <source>J Dairy Sci</source>. <year>2009</year>;<volume>92</volume>(<issue>9</issue>):<fpage>4656</fpage>–<lpage>4663</lpage>.<pub-id pub-id-type="pmid">19700729</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Meuwissen</surname><given-names>THE</given-names></string-name>, <string-name><surname>Hayes</surname><given-names>BJ</given-names></string-name>, <string-name><surname>Goddard</surname><given-names>ME.</given-names></string-name></person-group><article-title>Prediction of total genetic value using genome-wide dense marker maps</article-title>. <source>Genetics</source>. <year>2001</year>;<volume>157</volume>(<issue>4</issue>):<fpage>1819</fpage>–<lpage>1829</lpage>.<pub-id pub-id-type="pmid">11290733</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Moser</surname><given-names>G</given-names></string-name>, <string-name><surname>Lee</surname><given-names>SH</given-names></string-name>, <string-name><surname>Hayes</surname><given-names>BJ</given-names></string-name>, <string-name><surname>Goddard</surname><given-names>ME</given-names></string-name>, <string-name><surname>Wray</surname><given-names>NR</given-names></string-name>, <string-name><surname>Visscher</surname><given-names>PM.</given-names></string-name></person-group><article-title>Simultaneous discovery, estimation and prediction analysis of complex traits using a Bayesian mixture model</article-title>. <source>PLoS Genet</source>. <year>2015</year>;<volume>11</volume>(<issue>4</issue>):<fpage>e1004969</fpage>.<pub-id pub-id-type="pmid">25849665</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Park</surname><given-names>T</given-names></string-name>, <string-name><surname>Casella</surname><given-names>G.</given-names></string-name></person-group><article-title>The Bayesian Lasso</article-title>. <source>J Am Stat Assoc</source>. <year>2008</year>;<volume>103</volume>(<issue>482</issue>):<fpage>681</fpage>–<lpage>686</lpage>.</mixed-citation>
    </ref>
    <ref id="jkac032-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Perkel</surname><given-names>JM.</given-names></string-name></person-group><article-title>Julia: come for the syntax, stay for the speed</article-title>. <source>Nature</source>. <year>2019</year>;<volume>572</volume>(<issue>7767</issue>):<fpage>141</fpage>–<lpage>142</lpage>.<pub-id pub-id-type="pmid">31363196</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pook</surname><given-names>T</given-names></string-name>, <string-name><surname>Schlather</surname><given-names>M</given-names></string-name>, <string-name><surname>Simianer</surname><given-names>H.</given-names></string-name></person-group><article-title>MoBPS—modular breeding program simulator</article-title>. <source>G3 (Bethesda)</source>. <year>2020</year>;<volume>10</volume>(<issue>6</issue>):<fpage>1915</fpage>–<lpage>1918</lpage>.<pub-id pub-id-type="pmid">32229505</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Portwood</surname><given-names>JL</given-names></string-name>, <string-name><surname>Woodhouse</surname><given-names>MR</given-names></string-name>, <string-name><surname>Cannon</surname><given-names>EK</given-names></string-name>, <string-name><surname>Gardiner</surname><given-names>JM</given-names></string-name>, <string-name><surname>Harper</surname><given-names>LC</given-names></string-name>, <string-name><surname>Schaeffer</surname><given-names>ML</given-names></string-name>, <string-name><surname>Walsh</surname><given-names>JR</given-names></string-name>, <string-name><surname>Sen</surname><given-names>TZ</given-names></string-name>, <string-name><surname>Cho</surname><given-names>KT</given-names></string-name>, <string-name><surname>Schott</surname><given-names>DA</given-names></string-name></person-group>, <etal>et al</etal><article-title>MaizeGDB 2018: the maize multi-genome genetics and genomics database</article-title>. <source>Nucleic Acids Res</source>. <year>2019</year>;<volume>47</volume>(<issue>D1</issue>):<fpage>D1146</fpage>–<lpage>D1154</lpage>.<pub-id pub-id-type="pmid">30407532</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pérez-Enciso</surname><given-names>M</given-names></string-name>, <string-name><surname>Forneris</surname><given-names>N</given-names></string-name>, <string-name><surname>de Los Campos</surname><given-names>G</given-names></string-name>, <string-name><surname>Legarra</surname><given-names>A.</given-names></string-name></person-group><article-title>Evaluating sequence-based genomic prediction with an efficient new simulator</article-title>. <source>Genetics</source>. <year>2017</year>;<volume>205</volume>(<issue>2</issue>):<fpage>939</fpage>–<lpage>953</lpage>.<pub-id pub-id-type="pmid">27913617</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B29">
      <mixed-citation publication-type="other">R Core Team. R: a Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing, <year>2020</year>.</mixed-citation>
    </ref>
    <ref id="jkac032-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sargolzaei</surname><given-names>M</given-names></string-name>, <string-name><surname>Schenkel</surname><given-names>FS.</given-names></string-name></person-group><article-title>QMSim: a large-scale genome simulator for livestock</article-title>. <source>Bioinformatics</source>. <year>2009</year>;<volume>25</volume>(<issue>5</issue>):<fpage>680</fpage>–<lpage>681</lpage>.<pub-id pub-id-type="pmid">19176551</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Scott</surname><given-names>MF</given-names></string-name>, <string-name><surname>Ladejobi</surname><given-names>O</given-names></string-name>, <string-name><surname>Amer</surname><given-names>S</given-names></string-name>, <string-name><surname>Bentley</surname><given-names>AR</given-names></string-name>, <string-name><surname>Biernaskie</surname><given-names>J</given-names></string-name>, <string-name><surname>Boden</surname><given-names>SA</given-names></string-name>, <string-name><surname>Clark</surname><given-names>M</given-names></string-name>, <string-name><surname>Dell’Acqua</surname><given-names>M</given-names></string-name>, <string-name><surname>Dixon</surname><given-names>LE</given-names></string-name>, <string-name><surname>Filippi</surname><given-names>CV</given-names></string-name></person-group>, <etal>et al</etal><article-title>Multi-parent populations in crops: a toolbox integrating genomics and genetic mapping with breeding</article-title>. <source>Heredity (Edinb)</source>. <year>2020</year>;<volume>125</volume>(<issue>6</issue>):<fpage>396</fpage>–<lpage>416</lpage>.<pub-id pub-id-type="pmid">32616877</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Tortereau</surname><given-names>F</given-names></string-name>, <string-name><surname>Servin</surname><given-names>B</given-names></string-name>, <string-name><surname>Frantz</surname><given-names>L</given-names></string-name>, <string-name><surname>Megens</surname><given-names>H-J</given-names></string-name>, <string-name><surname>Milan</surname><given-names>D</given-names></string-name>, <string-name><surname>Rohrer</surname><given-names>G</given-names></string-name>, <string-name><surname>Wiedmann</surname><given-names>R</given-names></string-name>, <string-name><surname>Beever</surname><given-names>J</given-names></string-name>, <string-name><surname>Archibald</surname><given-names>AL</given-names></string-name>, <string-name><surname>Schook</surname><given-names>LB</given-names></string-name></person-group>, <etal>et al</etal><article-title>A high density recombination map of the pig reveals a correlation between sex-specific recombination and GC content</article-title>. <source>BMC Genomics</source>. <year>2012</year>;<volume>13</volume>:<fpage>586</fpage>.,<pub-id pub-id-type="pmid">23152986</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B33">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Van Rossum</surname><given-names>G</given-names></string-name>, <string-name><surname>Drake</surname><given-names>FL</given-names><suffix>Jr</suffix></string-name></person-group>. Python tutorial. Centrum voor Wiskunde en Informatica Amsterdam, The Netherlands; <year>1995</year>.</mixed-citation>
    </ref>
    <ref id="jkac032-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>VanRaden</surname><given-names>PM.</given-names></string-name></person-group><article-title>Efficient methods to compute genomic predictions</article-title>. <source>J Dairy Sci</source>. <year>2008</year>;<volume>91</volume>(<issue>11</issue>):<fpage>4414</fpage>–<lpage>4423</lpage>.<pub-id pub-id-type="pmid">18946147</pub-id></mixed-citation>
    </ref>
    <ref id="jkac032-B35">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Wang</surname><given-names>J</given-names></string-name>, <string-name><surname>Zhang</surname><given-names>Z.</given-names></string-name></person-group><year>2020</year>. GAPIT version 3: boosting power and accuracy for genomic association and prediction. bioRxiv. doi:<pub-id pub-id-type="doi">10.1101/2020.11.29.403170</pub-id>.</mixed-citation>
    </ref>
    <ref id="jkac032-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhao</surname><given-names>T</given-names></string-name>, <string-name><surname>Fernando</surname><given-names>R</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>H.</given-names></string-name></person-group><article-title>Interpretable artificial neural networks incorporating Bayesian alphabet models for genome-wide prediction and association studies</article-title>. <source>G3 (Bethesda)</source>. <year>2021</year>;<volume>11</volume>:<fpage>jkab228</fpage>.<pub-id pub-id-type="pmid">34499126</pub-id></mixed-citation>
    </ref>
  </ref-list>
  <app-group>
    <app id="app1">
      <title>Appendix</title>
      <sec>
        <title>Data formats</title>
        <p>In the “map.csv” file used in build_genome() and build_phenome(), each row represents one locus. The valid header names, which can be read by build_genome(), include “chr,”” cM,” “bp,” and “maf,” which refer to chromosome codes, positions in centimorgans (genetic position), positions in base pairs (physical position), and minor allele frequencies (MAFs). The valid header names, which can be read by build_phenome() is column names with eff_ prefixes to specify QTL effects of multiple traits. In the example below, we have 4 markers on 2 chromosomes with specific MAFs, physical, and genetic positions. The first marker are simulated as a pleiotropic QTL with nonzero effects, and the remaining markers are not treated as QTL, for which zero effects are assigned.</p>
        <p>To define genome and phenome by files, the files should be formatted as rows of observations with valid header names. Assuming we want to simulate a genome with four markers located on two chromosomes, and there are two traits of interest with known QTL effects. We can put chromosome codes, physical positions, and genetic positions in the column chr, bp, cM, respectively. And use columns with eff_ prefixes to specify QTL effects of two traits. The file for the described scenario is formatted as:</p>
        <p>
          <monospace># map.csv</monospace>
        </p>
        <p>
          <monospace>id, chr, bp, cM, MAF, eff_1, eff_2</monospace>
        </p>
        <p>
          <monospace>snp_1,1,1818249,50.8,0.5,1.5,2.8</monospace>
        </p>
        <p>
          <monospace>snp_2,1,6557697,80.3,0.5,0.0,0.0</monospace>
        </p>
        <p>
          <monospace>snp_3,2,2298800,39.2,0.5,0.0,0.0</monospace>
        </p>
        <p>
          <monospace>snp_4,2,5015698,66.3,0.5,0.0,0.0</monospace>
        </p>
        <p>To initialize founders using known haplotypes, genotypes, or pedigree, users can provide such information in a text file. The haplotypes should have individuals recorded by rows, and have every two columns recording paternal and maternal alleles for each locus. The haplotype is coded as 0 or 1 to represent the existence of a reference allele. If genotypes are provided, haplotypes will be further inferred from genotypes randomly. In the genotype file, alleles are coded as 0, 1, and 2 to represent the allele dosage, and these values should be arranged as individuals (rows) by loci (columns). Missing haplotypes and genotypes can be denoted as −1 or 9. An example for 5 individuals and 4 loci is shown below. If the provided file indicate the pedigree, it should be a three-column file in an order of individual ID, sire ID, and dam ID. ID and pedigree information can be obtained from calling get_pedigree(cohort). The demonstrate example showing 5 individuals with the first 3 are the founders and the rest 2 are reproduced from the first and second individuals.</p>
        <p>
          <monospace># haplotypes.csv</monospace>
        </p>
        <p>
          <monospace>1,1,0,0,0,0,1,0</monospace>
        </p>
        <p>
          <monospace>0,0,0,0,1,0,0,0</monospace>
        </p>
        <p>
          <monospace>0,0,0,1,0,0,1,1</monospace>
        </p>
        <p>
          <monospace>1,0,1,0,0,0,1,1</monospace>
        </p>
        <p>
          <monospace>1,1,0,0,1,1,0,0</monospace>
        </p>
        <p>
          <monospace># genotypes.csv</monospace>
        </p>
        <p>
          <monospace>2,0,0,1</monospace>
        </p>
        <p>
          <monospace>0,0,1,0</monospace>
        </p>
        <p>
          <monospace>0,1,0,2</monospace>
        </p>
        <p>
          <monospace>1,1,0,2</monospace>
        </p>
        <p>
          <monospace>2,0,2,0</monospace>
        </p>
        <p>
          <monospace># pedigree.csv</monospace>
        </p>
        <p>
          <monospace>1,0,0</monospace>
        </p>
        <p>
          <monospace>2,0,0</monospace>
        </p>
        <p>
          <monospace>3,0,0</monospace>
        </p>
        <p>
          <monospace>4,1,2</monospace>
        </p>
        <p>
          <monospace>5,1,2</monospace>
        </p>
      </sec>
    </app>
  </app-group>
</back>
