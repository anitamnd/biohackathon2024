<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3167058</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btr447</article-id>
    <article-id pub-id-type="publisher-id">btr447</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group>
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SEED: efficient clustering of next-generation sequences</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Bao</surname>
          <given-names>Ergude</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jiang</surname>
          <given-names>Tao</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kaloshian</surname>
          <given-names>Isgouhi</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Girke</surname>
          <given-names>Thomas</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>3</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
    </contrib-group>
    <aff id="AFF1"><sup>1</sup>Department of Computer Science and Engineering, <sup>2</sup>Department of Nematology and <sup>3</sup>Department of Botany and Plant Sciences, University of California, Riverside, CA 92521, USA</aff>
    <author-notes>
      <corresp id="COR1">* To whom correspondence should be addressed.</corresp>
      <fn>
        <p>Associate Editor: Alex Bateman</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>15</day>
      <month>9</month>
      <year>2011</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>8</month>
      <year>2011</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>8</month>
      <year>2011</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. -->
    <volume>27</volume>
    <issue>18</issue>
    <fpage>2502</fpage>
    <lpage>2509</lpage>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>4</month>
        <year>2011</year>
      </date>
      <date date-type="rev-recd">
        <day>11</day>
        <month>7</month>
        <year>2011</year>
      </date>
      <date date-type="accepted">
        <day>23</day>
        <month>7</month>
        <year>2011</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2011. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2011</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/2.5">
        <license-p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/2.5">http://creativecommons.org/licenses/by-nc/2.5</ext-link>), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Motivation:</bold> Similarity clustering of next-generation sequences (NGS) is an important computational problem to study the population sizes of DNA/RNA molecules and to reduce the redundancies in NGS data. Currently, most sequence clustering algorithms are limited by their speed and scalability, and thus cannot handle data with tens of millions of reads.</p>
      <p><bold>Results:</bold> Here, we introduce SEED—an efficient algorithm for clustering very large NGS sets. It joins sequences into clusters that can differ by up to three mismatches and three overhanging residues from their virtual center. It is based on a modified spaced seed method, called block spaced seeds. Its clustering component operates on the hash tables by first identifying virtual center sequences and then finding all their neighboring sequences that meet the similarity parameters. SEED can cluster 100 million short read sequences in &lt;4 h with a linear time and memory performance. When using SEED as a preprocessing tool on genome/transcriptome assembly data, it was able to reduce the time and memory requirements of the Velvet/Oasis assembler for the datasets used in this study by 60–85% and 21–41%, respectively. In addition, the assemblies contained longer contigs than non-preprocessed data as indicated by 12–27% larger N50 values. Compared with other clustering tools, SEED showed the best performance in generating clusters of NGS data similar to true cluster results with a 2- to 10-fold better time performance. While most of SEED's utilities fall into the preprocessing area of NGS data, our tests also demonstrate its efficiency as stand-alone tool for discovering clusters of small RNA sequences in NGS data from unsequenced organisms.</p>
      <p><bold>Availability:</bold> The SEED software can be downloaded for free from this site: <ext-link ext-link-type="uri" xlink:href="http://manuals.bioinformatics.ucr.edu/home/seed">http://manuals.bioinformatics.ucr.edu/home/seed</ext-link>.</p>
      <p>
        <bold>Contact:</bold>
        <email>thomas.girke@ucr.edu</email>
      </p>
      <p><bold>Supplementary information:</bold><ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary data</ext-link> are available at <italic>Bioinformatics</italic> online</p>
    </abstract>
    <counts>
      <page-count count="8"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>1 INTRODUCTION</title>
    <p>In recent years, the data volumes generated by next-generation sequencing (NGS) technologies have been growing at a pace that has now begun to greatly challenge the data processing and storage capacities of modern compute systems (<xref ref-type="bibr" rid="B23">Medini <italic>et al.</italic>, 2008</xref>). Only 4 years ago, NGS technologies like Illumina's reversible terminator method or ABI's ligation approach created ~1 billion bases of DNA sequence information per instrument run which has now increased to over 300 billion bases per run with even shorter turnaround times (<xref ref-type="bibr" rid="B7">Holt and Jones, 2008</xref>). This corresponds approximately to a 4-fold increase of sequence data output per year. As a result of this rapid improvement of the technology, many exciting sequence-based research applications have evolved recently. These include genome resequencing of entire organism populations, personalized medicine, RNA-Seq, ChIP-Seq and many others (<xref ref-type="bibr" rid="B3">1000 Genomes Project Consortium <italic>et al.</italic>, 2010</xref>; <xref ref-type="bibr" rid="B13">Jothi <italic>et al.</italic>, 2008</xref>). Processing and storing the large amounts of data produced by these technologies is a major challenge for modern genome research. Thus, it is important to develop methods that can improve the efficiency of the analysis workflows for NGS data. To mention just a few, these include algorithms for processing the data more time and space efficiently (<xref ref-type="bibr" rid="B15">Langmead <italic>et al.</italic>, 2009</xref>; <xref ref-type="bibr" rid="B19">Li and Durbin, 2009a</xref>; <xref ref-type="bibr" rid="B20">Li <italic>et al.</italic>, 2009b</xref>) as well as data reduction approaches that aim to retain only the scientifically relevant and non-redundant information from NGS projects rather than everything (<xref ref-type="bibr" rid="B16">Leinonen <italic>et al.</italic>, 2010</xref>). For example, in genome resequencing projects one can greatly reduce the dataset sizes by storing only genetic variations, while removing the bulk of the sequence information that only confirms what is already known (<xref ref-type="bibr" rid="B5">Fritz <italic>et al.</italic>, 2011</xref>). Similarly, in quantitative NGS experiments for profiling pools of mRNAs, small RNAs or protein–DNA interactions one can convert the data to much less storage intensive tag counts at an early stage of the analysis workflow. Solutions that prevent or greatly minimize information loss are always preferred. However, with the current growth rates of NGS data many of them may soon become impractical, especially when the data sizes become the main time and financial bottleneck for conducting scientific experiments in the NGS field.</p>
    <p>This study introduces a new algorithm capable of clustering NGS sets in size ranges of several hundred million entries using a modified spaced seed method (<xref ref-type="bibr" rid="B21">Lin <italic>et al.</italic>, 2008</xref>; <xref ref-type="bibr" rid="B22">Ma <italic>et al.</italic>, 2002</xref>). This method, hereafter referred to as SEED, efficiently joins sequences into clusters with user-definable similarity parameters ranging from 0 to 3 mismatches and overhanging ends with up to 3 nt in length. These mismatch features are important to make the method less sensitive to base call errors, imprecise molecular cleavage events or inaccurate adaptor trimming. The main utilities of SEED are the identification, enumeration and removal of redundant sequences in NGS data. In its current implementation, SEED is designed to function as a short read clustering tool with controllable mismatch parameters, but not as an error corrector like FreClu (<xref ref-type="bibr" rid="B27">Qu <italic>et al.</italic>, 2009</xref>). There are several practical applications of this clustering approach. First, the method can be used to reduce the complexity in NGS data by collapsing redundant reads to a single center sequence along with its frequency information. While this data reduction step results only in a minor information loss, it can greatly improve the run time, memory requirements, and quality of genome and transcriptome assemblies. Second, it can be used to determine the sequence diversity in quantitative NGS profiling datasets, such as RNA-Seq and ChIP-Seq, by enumerating very similar reads. The resulting numbers of unique versus redundant reads can be an important parameter for identifying technical problems in these datasets (e.g. low reproducibility due to bias in PCR amplification steps). Third, the method can be applied to discover clusters of microRNAs (miRNAs) directly from NGS data without the requirement of mapping the reads to a reference genome which is particularly important when working with unsequenced organisms (<xref ref-type="bibr" rid="B12">Johnson <italic>et al.</italic>, 2009</xref>; <xref ref-type="bibr" rid="B25">Montgomery <italic>et al.</italic>, 2008</xref>).</p>
    <p>While in the past decade there has been extensive research on sequence family clustering for handling datasets in the range of hundreds of thousand entries (e.g. <xref ref-type="bibr" rid="B17">Li and Godzik, 2006</xref>), there has been very limited development of methods for clustering the much larger sequence volumes from NGS experiments with hundreds of millions of entries. The short list of tools capable of clustering data sizes in the range of at least several million sequences includes UCLUST and FreClu (<xref ref-type="bibr" rid="B4">Edgar, 2010</xref>; <xref ref-type="bibr" rid="B27">Qu <italic>et al.</italic>, 2009</xref>). Most other clustering tools in this area are designed to solve problems related to EST analysis, such as pre-clustering of ESTs to facilitate their downstream assemblies (<xref ref-type="bibr" rid="B6">Hazelhurst <italic>et al.</italic>, 2008</xref>; <xref ref-type="bibr" rid="B9">Huang and Madan, 1999</xref>; <xref ref-type="bibr" rid="B26">Picardi <italic>et al.</italic>, 2009</xref>; <xref ref-type="bibr" rid="B28">Rao <italic>et al.</italic>, 2010</xref>).</p>
    <p>In the following, we first describe the theory behind the SEED clustering algorithm as well as the design of its software implementation. We then illustrate and discuss its time, memory and accuracy performance by using both simulated and real NGS datasets. The real datasets were specifically chosen to evaluate the algorithm's efficiency for several application areas, including complexity reduction of RNA-Seq profiling experiments in the absence of a reference, prediction of mature miRNAs, and transcriptome and genome assemblies.</p>
  </sec>
  <sec sec-type="methods" id="SEC2">
    <title>2 METHODS</title>
    <sec id="SEC2.1">
      <title>2.1 Overview of the algorithm</title>
      <p>To cluster NGS by similarity, SEED indexes the reads by using the open hashing technique and a special class of spaced seeds (<xref ref-type="bibr" rid="B21">Lin <italic>et al.</italic>, 2008</xref>), called <italic>block spaced seed</italic>. Once the reads are stored in hash tables, SEED clusters them by first creating a <italic>virtual center sequence</italic> for each cluster and then finding all the reads that are within a certain similarity threshold to the center sequence. The following is a short overview of the algorithm. More details are provided in the next subsections.</p>
      <p>
        <italic>A. Indexing</italic>
        <list list-type="order">
          <list-item>
            <p>Initialize the indexing if the longest and the shortest read sequences do not differ by more than five bases in length.</p>
          </list-item>
          <list-item>
            <p>Use the first seed in a chosen set of block spaced seeds to hash the sequences into a hash table.</p>
          </list-item>
          <list-item>
            <p>Repeat step A.2 with each block spaced seed of the set and store their results in separate hash tables.</p>
          </list-item>
        </list>
      </p>
      <p>
        <italic>B. Clustering</italic>
        <list list-type="order">
          <list-item>
            <p>Select an arbitrary sequence, identify for it all sequences within twice the mismatch threshold and compute their virtual center sequence.</p>
          </list-item>
          <list-item>
            <p>Find for the virtual center sequence all sequences with the allowed number of overhanging bases and mismatches. Then remove these sequences from the hash tables.</p>
          </list-item>
          <list-item>
            <p>Repeat steps B.1 to B.2 until the hash tables are empty.</p>
          </list-item>
        </list>
      </p>
    </sec>
    <sec id="SEC2.2">
      <title>2.2 Indexing and hash tables</title>
      <p>Spaced seeds were introduced by <xref ref-type="bibr" rid="B22">Ma <italic>et al.</italic> (2002</xref>) as a time-efficient method for sequence similarity searching. Several NGS alignment tools are based on this method. These include Eland (Anthony J. Cox, unpublished data), MAQ (<xref ref-type="bibr" rid="B18">Li <italic>et al.</italic>, 2008</xref>), SeqMap (<xref ref-type="bibr" rid="B10">Jiang and Wong, 2008</xref>) and ZOOM (<xref ref-type="bibr" rid="B21">Lin <italic>et al.</italic>, 2008</xref>). The general framework of spaced seeds can be summarized as follows. A spaced seed of length <italic>l</italic> is a binary string of <italic>l</italic> bits. When the seed is used in matching a query string of length <italic>l</italic> with another string, the bit 1 demands a match while the bit 0 tolerates a mismatch. Such a seed can also be conveniently used to index sequences of length <italic>l</italic> in hashing. For example, the spaced seed ‘01110’ will file the sequences ‘CAAAG’ and ‘TAAAA’ into the same bucket, as well as all other 5mers with an ‘AAA’ in the middle. The weight <italic>w</italic> of a spaced seed is its number of 1's. It directly affects the size of the hash tables in the above indexing scheme, and thus memory usage. The parameter <italic>k</italic> is usually a predefined value, and the size of a set of spaced seeds is denoted as <italic>c</italic>. The details of designing a set of spaced seeds with full search sensitivity for given values of <italic>l</italic>, <italic>w</italic>, <italic>k</italic> will be discussed in <xref ref-type="sec" rid="SEC2.4">Section 2.4</xref>.</p>
      <p>The hash table data structure used in SEED is shown in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Figure S1</ext-link>. Each hash table corresponds to a spaced seed, and each bucket in it corresponds to a word of <italic>w</italic> bases. A bucket consists of a header and a dynamically allocated array of pointers. The header points to an array, and each pointer in the array references a sequence. During the clustering process, a tag will be assigned to the pointers where the sequences have been assigned to clusters to indicate their removal from the hash tables. In addition, there is an array of unsigned integers (not shown in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Figure S1</ext-link>) for storing the number of pointers in each bucket. Suppose that <italic>n</italic> is the total number of sequences. The memory usage <italic>s</italic> in bytes <italic>B</italic> on a 64-bit machine can be estimated as follows:
<disp-formula id="M1"><label>(1)</label><graphic xlink:href="btr447m1"/></disp-formula>
In <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Figure S1</ext-link>, from left to right, the headers take 4<sup><italic>w</italic></sup>×<italic>c</italic>×8<italic>B</italic> = 2 × 4<sup><italic>w</italic>+1</sup><italic>cB</italic> memory, where 8 <italic>B</italic> is the memory required for a pointer on a 64-bit machine in a straightforward implementation. However, integer offsets can be used instead of real pointers to reduce the memory footprint of a pointer to 4<italic>B</italic>. The <italic>c</italic> hash tables take <italic>n</italic>×<italic>c</italic>×4<italic>B</italic> = 4<italic>ncB</italic> memory. The memory requirement for storing the sequences themselves is <inline-formula><inline-graphic xlink:href="btr447i1.jpg"/></inline-formula> and <italic>nB</italic> for the tags. In addition, the array for storing the number of items in each bucket takes 4<sup><italic>w</italic></sup>×<italic>c</italic>×4<italic>B</italic> = 4<sup><italic>w</italic>+1</sup><italic>cB</italic> memory. Combined together, the total memory required is <inline-formula><inline-graphic xlink:href="btr447i2.jpg"/></inline-formula>. For example, if there are 1 million sequences of 36 bp, <italic>w</italic> = 12 and <italic>c</italic> = 10, then the memory requirement totals: <inline-formula><inline-graphic xlink:href="btr447i3.jpg"/></inline-formula><inline-formula><inline-graphic xlink:href="btr447i3a.jpg"/></inline-formula>.</p>
    </sec>
    <sec id="SEC2.3">
      <title>2.3 Design of block spaced seed set</title>
      <p>While other spaced seeds methods are more common, especially in the NGS alignment field, we have chosen <italic>block spaced seeds</italic> for NGS clustering, because they are conceptually simple and easy to optimize.</p>
      <statement>
        <title>D<sc>efinition</sc> 1.</title>
        <p><italic>A block spaced seed is a binary string consisting of a sequence of blocks of equal length</italic>, <italic>where each block contains either all 0's or all 1's</italic>.</p>
      </statement>
      <p>The seed sets used by various short read alignment tools are usually heuristic designs. With the exception of ZOOM, they provide suboptimal solutions, but with good performance in practice. Typically, their seed sets are often the outcome of manual optimization procedures for a given read length and number of mismatches. In contrast to this, an optimal set of <italic>block spaced seeds</italic> for a given read length and number of mismatches can be automatically identified with Algorithm 1 (see below). Note that such an optimal set of block spaced seeds typically represents a suboptimal solution for general spaced seeds. We first state a theorem upper bounding the size of an optimal block spaced seed set. The proof of the theorem and the analysis of Algorithm 1 are both available in the <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Materials</ext-link>.</p>
      <statement>
        <title>T<sc>heorem</sc> 1.</title>
        <p><italic>For any given l</italic>,<italic>w</italic>,<italic>k</italic>, <italic>there exists a set of block spaced seeds with length l and weight w that guarantees full search sensitivity with respect to k mismatches if and only if</italic><inline-formula><inline-graphic xlink:href="btr447i4.jpg"/></inline-formula>, <italic>where gcd</italic>(<italic>l</italic>,<italic>w</italic>) <italic>denotes the greatest common divisor of l and w</italic>. <italic>Moreover</italic>, <italic>for any</italic><inline-formula><inline-graphic xlink:href="btr447i5.jpg"/></inline-formula>, <inline-formula><inline-graphic xlink:href="btr447i6.jpg"/></inline-formula><italic>block spaced seeds of length l and weight w would suffice to guarantee full search sensitivity with respect to k mismatches</italic>.</p>
      </statement>
      <p>
        <inline-graphic xlink:href="btr447i7.jpg"/>
      </p>
      <p>Although it is desirable to maximize <italic>w</italic> in order to be time efficient, the memory complexity given in Equation (<xref ref-type="disp-formula" rid="M1">1</xref>) suggests that we should minimize <italic>w</italic> (and <italic>c</italic>) in order to be memory efficient. Therefore, we should seek a balance between time and space. <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S1</ext-link> shows the memory usages (headers only), seed weights and numbers of seeds required for several read lengths ranging from 25 to 35, where the seed weights and numbers of seeds for each read length are calculated using Algorithm 1 and the memory usages calculated using Equation (<xref ref-type="disp-formula" rid="M1">1</xref>) with similarity threshold <italic>k</italic>=3. Clearly, if a set of block spaced seeds guarantees full sensitivity for read sequences of length <italic>l</italic>, then it also guarantees full sensitivity for sequences of length more than <italic>l</italic>. Moreover, we can always pad spaced seeds with 0's so they have the same length as the reads. Thus, for a specific pair of weight <italic>w</italic> and number <italic>c</italic>, the length <italic>l</italic> listed in the table should be regarded as the minimum read length that <italic>w</italic> and <italic>c</italic> support. Since a row with a small <italic>l</italic>, large <italic>w</italic>, small <italic>c</italic>, and small memory usage <italic>s</italic> is desirable, we choose the row with <italic>l</italic>=30, <italic>w</italic>=12, <italic>c</italic>=10 and <italic>s</italic>=1.25 GB in our experiments (where the reads are 36 bp long, up to three overhanging bases are allowed on each side and up to three mismatches are tolerated). <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S2</ext-link> lists the 10 block spaced seeds used in our experiments.</p>
    </sec>
    <sec id="SEC2.4">
      <title>2.4 Clustering</title>
      <p>The actual sequence clustering component of SEED is an iterative process consisting of three major steps. First, an arbitrary sequence <italic>x</italic> is selected and hashed using each block spaced seed to locate <italic>c</italic> buckets. The sequences in the <italic>c</italic> buckets with at most <italic>fk</italic> mismatches to the sequence <italic>x</italic> are identified by a simple Hamming distance calculation, where <italic>k</italic> is the maximum number of mismatches allowed in a cluster, and <italic>f</italic> is set to be 2 as a factor of <italic>k</italic>. The consensus of the resulting sequence set is computed to obtain a virtual center sequence. Second, the virtual center sequence is hashed using each block spaced seed, and the sequences from all the resultant buckets are retrieved. A cluster is formed to include all the sequences with ≤<italic>k</italic> mismatches to the virtual center sequence. The clustered sequences are removed from the hash tables. Third, to also include sequences that largely overlap with <italic>x</italic> but with overhanging ends, the virtual center sequence is shifted (actually, rotated) to the left and to the right within the maximum allowed shift distance (predefined value from 0 to 3). For each shifted center sequence, all sequences in the hash tables are added to the cluster that are within <italic>k</italic> mismatches to the center and then they are also deleted from the hash tables. The above steps are repeated until all sequences have been assigned to clusters and deleted from the hash tables.</p>
      <p>Our choice of <italic>f</italic>=2 in the initial clustering (step one) is based on the following considerations. Given a cluster of sequences with ≤<italic>k</italic> mismatches to its center, an arbitrarily selected sequence in the cluster has ≤2<italic>k</italic> mismatches to any sequence in the set. With this setting, the method can collect all sequences belonging to a cluster even if the randomly chosen seed sequence is far away from the true center of a cluster. The final virtual center sequence—generated from this candidate set—will then provide a reasonable approximation of the true center.</p>
      <p>After the clustering, each sequence will be part of a cluster with one or more members. The final results are stored in two cluster result files. One tabular file lists the complete set of reads with their corresponding cluster identifiers. The second file is the clustered FASTQ file containing, for each cluster, only its center sequence along with the corresponding quality scores (see below).</p>
    </sec>
    <sec id="SEC2.5">
      <title>2.5 Incorporating base calling quality values</title>
      <p>NGS data contain base calling quality information usually in the form of Phred scores (<xref ref-type="bibr" rid="B2">Cock <italic>et al.</italic>, 2010</xref>). To incorporate this quality information into the clustering process, the SEED algorithm allows the user to specify two optional quality value (QV) constraints. The first constraint QV1 specifies when a mismatch should be ignored. That is, a mismatch is ignored if and only if the sum of the Phred scores of the two mismatching bases is lower than the specified QV1 threshold value. The second constraint QV2 specifies when mismatches should be regarded as critical difference in clustering. That is, two sequences are joined in a cluster only if the sum of the Phred scores of all their mismatching bases is below the <italic>QV</italic>2 threshold value. Therefore, 0≤QV1≤93×2 and 0≤QV2≤93×6 in this article since our similarity threshold allows at most three mismatches (<xref ref-type="bibr" rid="B2">Cock <italic>et al.</italic>, 2010</xref>). Note that using SEED with the QV information results in a larger memory footprint, because the Phred scores of all sequences need to be read into memory. Since filtering the sequences by quality prior to the clustering may be often an attractive alternative, QV is an optional parameter in the SEED program.</p>
    </sec>
    <sec id="SEC2.6">
      <title>2.6 SEED system design</title>
      <sec id="SEC2.6.1">
        <title>2.6.1 General features</title>
        <p>SEED has been implemented in C++ as a stand-alone cross-platform tool for Linux, OS X and Windows operating systems. It expects sequences formatted in standard FASTQ format. It can be run in the three modes <italic>ordinary</italic>, <italic>fast</italic> and <italic>short</italic>. The ordinary mode uses block spaced seeds of weight 12 as listed in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S2</ext-link> and supports read sequences of length 36–100 bp. The fast mode uses block spaced seeds of weight 13 and supports sequences of length 58–100 bp. The short mode uses block spaced seeds of weight 6 and supports sequences as short as 21 bp. The fast mode provides the fastest processing time, but requires long sequences and slightly more memory than the ordinary mode. The short mode is suitable for small datasets of short sequences like miRNA sequences, but it is slower than the ordinary mode. The default setting is the ordinary mode.</p>
      </sec>
      <sec id="SEC2.6.2">
        <title>2.6.2 Performance optimization</title>
        <p>To optimize the time and memory performance of SEED, we have implemented the following features.</p>
        <p>
          <italic>Memory performance</italic>
          <list list-type="bullet">
            <list-item>
              <p>Each base stored in memory corresponds to two bits.</p>
            </list-item>
            <list-item>
              <p>Only one copy of each sequence is stored in memory, while the hash tables store pointers to all duplicates.</p>
            </list-item>
            <list-item>
              <p>The pointers are integer offsets, requiring 4 bytes each instead of 8 bytes on a 64-bit machine.</p>
            </list-item>
          </list>
        </p>
        <p>
          <italic>Time performance</italic>
          <list list-type="bullet">
            <list-item>
              <p>A garbage collection is performed in short intervals to prevent long chaining events. Pointers to already processed sequences that have been assigned to clusters are discarded.</p>
            </list-item>
            <list-item>
              <p>A different set of block spaced seeds of weight 13 is used in the fast mode for sequences of lengths &gt;58 bp. The 1's in the spaced seeds are positioned as close to the 3′ ends as possible. The latter results in more evenly distributed sequences in the hash table and reduces the bucket sizes. This is important because the read quality near the 3′ end is usually lower, which could be the cause of mismatches among sequences belonging to the same cluster.</p>
            </list-item>
          </list>
        </p>
      </sec>
    </sec>
  </sec>
  <sec id="SEC3">
    <title>3 EVALUATION</title>
    <sec id="SEC3.1">
      <title>3.1 Test results with simulated data</title>
      <p>To test the performance of SEED, we generated 1000 random center sequences. For each of these, we randomly generated sequences with mismatches and overhanging ends, so that the number of center sequences was the number of true clusters. The main objectives of these tests were to determine how well SEED clusters the sequences with respect to the number of clusters, and the number of falsely assigned members in them compared with the true clusters. In the following, the latter aspect is referred to as the false positive ratio (FPR), which is the number false positive members divided by the size of a cluster averaged for all clusters in a set. In addition, the same tests were used to empirically determine the time and memory performance of the algorithm. In each test, we changed only one parameter while keeping the remaining parameters constant. The results of these tests are presented in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Tables S3a–S3g</ext-link>. They include tests for the number of sequences, sequence length, number of true clusters, number of mismatches, number of overhanging ends and QV1/QV2 constraints, respectively. The QV mode of the program was only used for the corresponding tests in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Tables S3f–S3g</ext-link>.</p>
      <p>The time to cluster with SEED 10–100 million sequences of 40 bp in length increases linearly from 24 to 233 min, respectively (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S3a</ext-link>). For the same dataset, the memory footprint increases only sublinearly from 2.6 to 8.0 GB. When clustering sequence sets of increasing lengths, then the time also increases linearly, while the memory usage shows no change (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S3b</ext-link>). With increasing numbers of true clusters, the time requirement also changes sublinearly and the memory usage stays almost constant (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S3c</ext-link>). The number of clusters with at least 5000–10 000 members assembled by SEED is consistently smaller than the number of true clusters in the test datasets (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Tables S3a–S3g</ext-link>). However, the FPR in the cluster sets is almost exclusively 0. This means that SEED tends to split true clusters into smaller ones, but without contaminating them with false positive members from other clusters. This behavior is extremely important for many practical applications, because false cluster assignments would result in information loss, while splitting the clusters into smaller ones will not remove any important sequences. For instance, in assembly projects removing redundant sequences will help to reduce the memory requirements, but when the clusters are contaminated with false positives then the clustering will remove many sequences that may be important for an optimal assembly. Due to the more incremental similarity transitions among clusters in real datasets, one would expect the higher FPRs than with simulated data. This can be seen in the subsequent tests on real datasets. However, the FPRs on real datasets are still impressively low (see <xref ref-type="sec" rid="SEC3.2">Section 3.2</xref>).</p>
      <p>More mismatches require extra memory for bucket allocation, but the compute time decreases due to shorter chains (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S3d</ext-link>). The number of clusters shows the same trend, because the similarity threshold decreases with the number of mismatches allowing more sequences to be assigned to clusters. For similar reasons, the memory requirements shown in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Table S3e</ext-link> grow with increasing numbers of overhanging residues. However, the time requirements are increasing in this case, because the relative differences among the sequences dominate the clustering time. Also, the number of large clusters decreases, because more shifts tend to reduce the cluster sizes.</p>
      <p>When running SEED in the quality aware QV mode (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Tables S3f and S3g</ext-link>), the quality scores need to be imported into the clustering process, which increases its memory footprint by ~15%. The time requirements decrease with increasing threshold values of QV constraints, because greater threshold values tend to assign more sequences to clusters in each pass. In case of QV1, the number of large clusters increases, because more sequences can be assigned to clusters for greater QV1 values.</p>
    </sec>
    <sec id="SEC3.2">
      <title>3.2 Test results with real data</title>
      <sec id="SEC3.2.1">
        <title>3.2.1 Datasets and experimental design</title>
        <p>The performance and utility spectrum of SEED for real data was tested on four different types of NGS data that were downloaded form NCBI's Sequence Read Archive (SRA). In all cases, the sequence data were based on Illumina's NGS technology. They included experiments from the following application areas: genome resequencing (sample SRX016064 from <italic>Rhodobacter sphaeroides</italic>), ChIP-Seq (samples SRR038848-SRR038851 from <italic>Arabidopsis thaliana</italic>; <xref ref-type="bibr" rid="B14">Kaufmann <italic>et al.</italic>, 2010</xref>), RNA-Seq (samples SRR064149-SRR064152 from <italic>Arabidopsis thaliana</italic>; <xref ref-type="bibr" rid="B11">Jiao and Meyerowitz, 2010</xref>) and small RNA-Seq (samples SRR032112-SRR032115 from <italic>Arabidopsis thaliana</italic>; <xref ref-type="bibr" rid="B8">Hsieh <italic>et al.</italic>, 2009</xref>). The ChIP-Seq dataset was used to compare SEED with other clustering methods. Both the genome resequencing and the RNA-Seq datasets were used to evaluate the utility of SEED for <italic>de novo</italic> genome and transcriptome assembly projects with respect to improvements of the memory footprints and the contig sizes of the final results. Another test included a small RNA dataset for evaluating SEED's efficacy in identifying clusters of mature miRNA sequences in the absence of a reference genome.</p>
        <p>In most test experiments, the NGS datasets were clustered with SEED. Subsequently, the resulting center sequences were used as input datasets for the downstream analysis steps that are commonly used in different application fields, such as assembly and genome/transcriptome alignment steps. The final results were then compared with results obtained without SEED preprocessing.</p>
      </sec>
      <sec id="SEC3.2.2">
        <title>3.2.2 Cluster quality tests</title>
        <p>To evaluate how well SEED clusters NGS data, we designed test experiments with real datasets where we benchmarked its performance against the ‘true’ clusters obtained from genome alignment results. For comparison purposes, we also included the clustering software UCLUST and the assembly tool SSAKE in these tests (<xref ref-type="bibr" rid="B4">Edgar, 2010</xref>; <xref ref-type="bibr" rid="B30">Warren <italic>et al.</italic>, 2007</xref>). The former was chosen as a software representative with utilities similar to SEED's. In contrast to this, the typical use case of assembly tools is different, but when they are run on short reads with very stringent overlap criteria, then they can fulfill in parts the utility requirements of an NGS clustering tool. Among the many assembly tools available, SSAKE was chosen here because its output format provides the read positions in the contigs which simplified the downstream post-processing of the results. As test data, we used the four ChIP-Seq sets from <italic>Arabidopsis thaliana</italic>. These samples were selected because ChIP-Seq data contain highly variable enrichments of read pileups (peaks) along the chromosomes which is a relatively realistic and also challenging situation when testing the performance of a NGS clustering tool. The true clusters for these datasets were obtained by aligning the reads with Bowtie against the <italic>Arabidopsis</italic> reference genome while allowing up to three mismatches in the alignments. Subsequently, all aligned sequences that completely overlapped with other sequences in the pileup were assigned to clusters with two or more members. Sequences with no or only partial overlaps to other reads were assigned to singlet clusters. The resulting dataset is referred to as the ‘true’ cluster set, because it resembles an almost ideal benchmark result of high quality. To obtain meaningful results for the other tools, we used for them comparable parameters. SEED clustering was run with up to three mismatches, but no overlapping ends to match the constraints of the alignment-based reference cluster set. For UCLUST, we used comparable parameters by setting the identity parameter to <inline-formula><inline-graphic xlink:href="btr447i8.jpg"/></inline-formula>. Similarly, SSAKE was run with settings that were optimized to obtain only clusters of almost identical sequences. Most importantly, its parameter for the number of matched positions was set to <italic>l</italic> − <italic>k</italic>.</p>
        <p><xref ref-type="table" rid="T1">Table 1</xref> gives an overview of the clustering results obtained by the different methods. Compared with the other methods, SEED has at least a 3- to 10-fold better time performance than the other two methods, but its memory requirements are not as low as UCLUST's. With respect to the cluster qualities, SEED performs consistently better than the other methods by showing the highest Jaccard index values relative to the true clusters. The Jaccard index is a commonly used similarity measure for comparing clustering results, where values close to 0 indicate low similarities and values closer to 1 higher similarities among the evaluated cluster sets. In addition, we used the clustering results presented in <xref ref-type="table" rid="T1">Table 1</xref> to compare the prediction performance of SEED with the other methods. For this, we plotted in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Figure S2</ext-link> the FPRs against the true positive rates (TPR). The FPR is defined as FP/(FP+TN) and the TPR as TP/(TP+FN). The individual variables were determined by finding in the results those clusters that show a minimum similarity <italic>x</italic> to the true clusters. TP is the number of sequences in each cluster contributing to the similarities; FP is the number of sequences in the clusters that do not contribute to the similarities; TN is the number of sequences not in the clusters that should not contribute to the similarities; FN is the number of sequences not in the clusters that should contribute to the similarities. In the resulting graph (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/cgi/content/full/btr447/DC1">Supplementary Fig. S2</ext-link>), SEED shows the best performance by having consistently the highest TPR values and in most cases lower FPR values as well. The better sensitivity and specificity of SEED is most likely linked to its virtual center sequence for guiding the clustering process. This approach provides relative accurate approximations of the true cluster centers. In this regard, UCLUST is less conservative by centering its clusters around a single seed sequence. In addition, SEED is optimized to cluster very similar NGS reads with variable arrangements of mismatch positions. In contrast to this, UCLUST is optimized for detecting a wider range of sequence similarities based on common word matches in its initial search step. This approach is more likely to miss certain high similarity matches that fall below the word size limit of the algorithm. However, the latter feature appears to be less critical, because even when UCLUST is used in its <italic>optimal</italic> mode, where it does not dependent on common word matches (see rows with UCLUSTo in <xref ref-type="table" rid="T1">Table 1</xref>), the performance of SEED is still better.
<table-wrap id="T1" position="float"><label>Table 1.</label><caption><p>Clustering with different methods</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th align="left" rowspan="1" colspan="1">Method</th><th align="left" rowspan="1" colspan="1">No. of clusters</th><th align="left" rowspan="1" colspan="1">No. of clusters identical with true ones</th><th align="left" rowspan="1" colspan="1">Jaccard index</th><th align="left" rowspan="1" colspan="1">Time</th><th align="left" rowspan="1" colspan="1">Memory (GB)</th></tr></thead><tbody align="left"><tr><td align="left" colspan="6" rowspan="1">SRR038848 (4 962 666 reads aligned)</td></tr><tr><td align="left" rowspan="1" colspan="1">True</td><td align="left" rowspan="1" colspan="1">1 106 780</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">973 627</td><td align="left" rowspan="1" colspan="1">632 209</td><td align="left" rowspan="1" colspan="1">0.96</td><td align="left" rowspan="1" colspan="1">00:06:12</td><td align="left" rowspan="1" colspan="1">2.3</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUST</td><td align="left" rowspan="1" colspan="1">977 904</td><td align="left" rowspan="1" colspan="1">618 101</td><td align="left" rowspan="1" colspan="1">0.92</td><td align="left" rowspan="1" colspan="1">01:28:54</td><td align="left" rowspan="1" colspan="1">0.4</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUSTo</td><td align="left" rowspan="1" colspan="1">976 871</td><td align="left" rowspan="1" colspan="1">622 028</td><td align="left" rowspan="1" colspan="1">0.92</td><td align="left" rowspan="1" colspan="1">01:44:25</td><td align="left" rowspan="1" colspan="1">0.4</td></tr><tr><td align="left" rowspan="1" colspan="1">SSAKE</td><td align="left" rowspan="1" colspan="1">1 431 122</td><td align="left" rowspan="1" colspan="1">650 596</td><td align="left" rowspan="1" colspan="1">0.86</td><td align="left" rowspan="1" colspan="1">00:20:09</td><td align="left" rowspan="1" colspan="1">3.0</td></tr><tr><td align="left" colspan="6" rowspan="1">SRR038849 (2 435 754 reads aligned)</td></tr><tr><td align="left" rowspan="1" colspan="1">True</td><td align="left" rowspan="1" colspan="1">973 673</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">880 920</td><td align="left" rowspan="1" colspan="1">512 270</td><td align="left" rowspan="1" colspan="1">0.97</td><td align="left" rowspan="1" colspan="1">00:04:02</td><td align="left" rowspan="1" colspan="1">2.2</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUST</td><td align="left" rowspan="1" colspan="1">873 784</td><td align="left" rowspan="1" colspan="1">500 982</td><td align="left" rowspan="1" colspan="1">0.94</td><td align="left" rowspan="1" colspan="1">00:36:23</td><td align="left" rowspan="1" colspan="1">0.4</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUSTo</td><td align="left" rowspan="1" colspan="1">873 135</td><td align="left" rowspan="1" colspan="1">502 654</td><td align="left" rowspan="1" colspan="1">0.94</td><td align="left" rowspan="1" colspan="1">00:42:43</td><td align="left" rowspan="1" colspan="1">0.4</td></tr><tr><td align="left" rowspan="1" colspan="1">SSAKE</td><td align="left" rowspan="1" colspan="1">1 070 654</td><td align="left" rowspan="1" colspan="1">515 574</td><td align="left" rowspan="1" colspan="1">0.91</td><td align="left" rowspan="1" colspan="1">00:13:56</td><td align="left" rowspan="1" colspan="1">2.3</td></tr><tr><td align="left" colspan="6" rowspan="1">SRR038850 (5 386 160 reads aligned)</td></tr><tr><td align="left" rowspan="1" colspan="1">True</td><td align="left" rowspan="1" colspan="1">3 365 685</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">3 151 149</td><td align="left" rowspan="1" colspan="1">664 359</td><td align="left" rowspan="1" colspan="1">0.95</td><td align="left" rowspan="1" colspan="1">00:09:47</td><td align="left" rowspan="1" colspan="1">2.8</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUST</td><td align="left" rowspan="1" colspan="1">3 086 836</td><td align="left" rowspan="1" colspan="1">669 243</td><td align="left" rowspan="1" colspan="1">0.88</td><td align="left" rowspan="1" colspan="1">04:13:09</td><td align="left" rowspan="1" colspan="1">1.4</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUSTo</td><td align="left" rowspan="1" colspan="1">3 084 657</td><td align="left" rowspan="1" colspan="1">674 211</td><td align="left" rowspan="1" colspan="1">0.88</td><td align="left" rowspan="1" colspan="1">07:12:52</td><td align="left" rowspan="1" colspan="1">1.4</td></tr><tr><td align="left" rowspan="1" colspan="1">SSAKE</td><td align="left" rowspan="1" colspan="1">3 814 607</td><td align="left" rowspan="1" colspan="1">599 858</td><td align="left" rowspan="1" colspan="1">0.86</td><td align="left" rowspan="1" colspan="1">00:51:38</td><td align="left" rowspan="1" colspan="1">6.9</td></tr><tr><td align="left" colspan="6" rowspan="1">SRR038851 (3 148 061 reads aligned)</td></tr><tr><td align="left" rowspan="1" colspan="1">True</td><td align="left" rowspan="1" colspan="1">2 182 354</td><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/><td rowspan="1" colspan="1"/></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">2 038 577</td><td align="left" rowspan="1" colspan="1">287 903</td><td align="left" rowspan="1" colspan="1">0.94</td><td align="left" rowspan="1" colspan="1">00:06:28</td><td align="left" rowspan="1" colspan="1">2.5</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUST</td><td align="left" rowspan="1" colspan="1">2 096 534</td><td align="left" rowspan="1" colspan="1">297 756</td><td align="left" rowspan="1" colspan="1">0.84</td><td align="left" rowspan="1" colspan="1">01:37:47</td><td align="left" rowspan="1" colspan="1">0.9</td></tr><tr><td align="left" rowspan="1" colspan="1">UCLUSTo</td><td align="left" rowspan="1" colspan="1">2 094 080</td><td align="left" rowspan="1" colspan="1">300 539</td><td align="left" rowspan="1" colspan="1">0.85</td><td align="left" rowspan="1" colspan="1">01:45:00</td><td align="left" rowspan="1" colspan="1">0.9</td></tr><tr><td align="left" rowspan="1" colspan="1">SSAKE</td><td align="left" rowspan="1" colspan="1">2 540 359</td><td align="left" rowspan="1" colspan="1">214 013</td><td align="left" rowspan="1" colspan="1">0.77</td><td align="left" rowspan="1" colspan="1">00:34:10</td><td align="left" rowspan="1" colspan="1">4.6</td></tr></tbody></table><table-wrap-foot><fn><p>The clustering results for four ChIP-Seq samples are shown for the true clusters (alignment based method), SEED, SSAKE, and UCLUST with and without its <italic>optimal</italic> mode. The ‘true’ cluster data were used as references to compute the Jaccard index in the fourth column.</p></fn></table-wrap-foot></table-wrap></p>
        <p>One concern with the seed algorithm could be that its clustering results may vary depending on which read is chosen first in the random selection process to initialize the formation of the virtual center sequence of a cluster. To address this, we also performed tests on the four ChIP-Seq datasets from <italic>Arabidopsis thaliana</italic> where we varied the factor <italic>f</italic> to compute the virtual center sequence as well as the order of reads (data not shown). The quality of the resulting cluster sets was evaluated again with the Jaccard index. With increasing values of <italic>f</italic> from 1 to 4, the Jaccard index showed only minor differences (&lt;0.01) for the four datasets. We set <italic>f</italic>=2 as the default value in all of our experiments, since it gave one of the best results in our tests and it is also a reasonable choice based on the discussion in <xref ref-type="sec" rid="SEC2.5">Section 2.5</xref>. Similarly, changing the orders of reads resulted in insignificant changes of the Jaccard index (&lt;0.01). These tests indicate a relatively stable performance of SEED with respect to these parameter changes.</p>
      </sec>
      <sec id="SEC3.2.3">
        <title>3.2.3 Assemblies assisted with SEED</title>
        <p>Assemblies rank among the most challenging computational problems in the NGS field (<xref ref-type="bibr" rid="B1">Birney, 2011</xref>). Partially, this is because they tend to be an iterative and time consuming improvement process with highly variable outcomes for different datasets (<xref ref-type="bibr" rid="B24">Miller <italic>et al.</italic>, 2010</xref>). Moreover, their memory requirements and execution times are often so extensive that larger datasets can only be assembled on high performance compute systems with considerable CPU and memory resources. To improve this, we tested SEED for upstream processing prior to assembly and then analyzed the time and memory requirements of the assembly step, as well as the qualities of the resulting contigs. The assembly components of these tests were performed with Velvet, which is one of the most widely used assembly tools for NGS data (<xref ref-type="bibr" rid="B29">Schmidt <italic>et al.</italic>, 2009</xref>; <xref ref-type="bibr" rid="B31">Zerbino and Birney, 2008</xref>). To run the assemblies with optimized parameters, the Velvet Optimiser tool was used. The genome assemblies were performed with Velvet only, and the transcriptome assemblies included both Velvet and its transcriptome-specific Oases component. All software tools were run on a single CPU core (64-bit 2.4 GHz Xeon Quad Core Harpertown) to allow fair comparisons of their time and memory usages.
<list list-type="alpha-upper"><list-item><p><italic>Genome assembly</italic>: <xref ref-type="table" rid="T2">Table 2</xref> and <xref ref-type="fig" rid="F1">Figure 1</xref> summarize the assembly results for the genome resequencing dataset from <italic>Rhodobacter sphaeroides</italic> with Velvet. These tests were performed with and without SEED preprocessing. A random set was included for comparison, where we assembled the same number of sequences as obtained in the preprocessing step with SEED, but by randomly selecting the reads from the raw dataset. Compared with the non-preprocessed dataset, the assembly time and memory requirements in the SEED dataset are greatly reduced by 84.8 and 41.2%, respectively (<xref ref-type="table" rid="T2">Table 2</xref>, upper panel). With respect to the quality of the assembly results, several commonly used quality measures improved in the SEED dataset compared with the non-preprocessed dataset: the number of contigs decreased by 14.0%, mean length of the contigs increased by 16.8% and N50 value increased by 26.5%. The latter is the contig length where 50 of the entire assembly is contained in contigs of at least this value. In contrast to this, the corresponding measures in the dataset generated by random sampling show the opposite trend. A more detailed overview of the cluster size distributions in the three result sets is given in <xref ref-type="fig" rid="F1">Figure 1</xref>. In this plot, the SEED dataset shows in comparison to the other tests the highest cumulative contig sizes.</p></list-item><list-item><p><italic>Transcriptome assembly</italic>: To also test whether SEED preprocessing could provide improvements for assemblies of transcriptomes, we performed similar tests with the chosen RNA-Seq dataset from <italic>Arabidopsis thaliana</italic>. When using SEED, both the time and memory requirements decreased by 60.4 and 21.4%, respectively. In addition, the mean contig length and the N50 value could be increased by 15.7 and 12.2%, respectively.</p></list-item></list>
<table-wrap id="T2" position="float"><label>Table 2.</label><caption><p>Assembly tests</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th align="left" rowspan="1" colspan="1">Preprocessing</th><th align="left" rowspan="1" colspan="1">No. of sequences to assemble (read length)</th><th align="left" rowspan="1" colspan="1">No. of contigs</th><th align="left" rowspan="1" colspan="1">N50</th><th align="left" rowspan="1" colspan="1">Mean length of contigs</th><th align="left" rowspan="1" colspan="1">Memory for assembly (GB)</th><th align="left" rowspan="1" colspan="1">Time for assembly</th><th align="left" rowspan="1" colspan="1">Memory for clustering</th><th align="left" rowspan="1" colspan="1">Time for clustering</th></tr></thead><tbody align="left"><tr><td align="left" colspan="9" rowspan="1">Genome assembly</td></tr><tr><td align="left" rowspan="1" colspan="1">None</td><td align="left" rowspan="1" colspan="1">51 448 694 (36 bp)</td><td align="left" rowspan="1" colspan="1">2230</td><td align="left" rowspan="1" colspan="1">5143</td><td align="left" rowspan="1" colspan="1">2039</td><td align="left" rowspan="1" colspan="1">9.7</td><td align="left" rowspan="1" colspan="1">07:53:54</td><td align="left" rowspan="1" colspan="1">–</td><td align="left" rowspan="1" colspan="1">–</td></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">10 644 813 (36 bp)</td><td align="left" rowspan="1" colspan="1">1918</td><td align="left" rowspan="1" colspan="1">6504</td><td align="left" rowspan="1" colspan="1">2382</td><td align="left" rowspan="1" colspan="1">5.7</td><td align="left" rowspan="1" colspan="1">01:11:59</td><td align="left" rowspan="1" colspan="1">4.1 GB</td><td align="left" rowspan="1" colspan="1">03:41:29</td></tr><tr><td align="left" rowspan="1" colspan="1">Random sampling</td><td align="left" rowspan="1" colspan="1">10 644 813 (36 bp)</td><td align="left" rowspan="1" colspan="1">2924</td><td align="left" rowspan="1" colspan="1">3855</td><td align="left" rowspan="1" colspan="1">1531</td><td align="left" rowspan="1" colspan="1">2.5</td><td align="left" rowspan="1" colspan="1">01:12:25</td><td align="left" rowspan="1" colspan="1">–</td><td align="left" rowspan="1" colspan="1">–</td></tr><tr><td align="left" colspan="9" rowspan="1">Transcriptome assembly</td></tr><tr><td align="left" rowspan="1" colspan="1">None</td><td align="left" rowspan="1" colspan="1">72 295 211 (37 bp)</td><td align="left" rowspan="1" colspan="1">21 014</td><td align="left" rowspan="1" colspan="1">452</td><td align="left" rowspan="1" colspan="1">338</td><td align="left" rowspan="1" colspan="1">28</td><td align="left" rowspan="1" colspan="1">15:08:36</td><td align="left" rowspan="1" colspan="1">–</td><td align="left" rowspan="1" colspan="1">–</td></tr><tr><td align="left" rowspan="1" colspan="1">SEED</td><td align="left" rowspan="1" colspan="1">29 841 222 (37 bp)</td><td align="left" rowspan="1" colspan="1">12 988</td><td align="left" rowspan="1" colspan="1">507</td><td align="left" rowspan="1" colspan="1">391</td><td align="left" rowspan="1" colspan="1">22</td><td align="left" rowspan="1" colspan="1">05:59:33</td><td align="left" rowspan="1" colspan="1">8.7 GB</td><td align="left" rowspan="1" colspan="1">04:09:51</td></tr><tr><td align="left" rowspan="1" colspan="1">Random sampling</td><td align="left" rowspan="1" colspan="1">29 841 222 (37 bp)</td><td align="left" rowspan="1" colspan="1">12 868</td><td align="left" rowspan="1" colspan="1">396</td><td align="left" rowspan="1" colspan="1">315</td><td align="left" rowspan="1" colspan="1">12</td><td align="left" rowspan="1" colspan="1">05:57:09</td><td align="left" rowspan="1" colspan="1">–</td><td align="left" rowspan="1" colspan="1">–</td></tr></tbody></table><table-wrap-foot><fn><p>The assembly results with Velvet/Oases are shown for the genome resequencing data set from <italic>Rhodobacter sphaeroides</italic> (upper panel) and the transcriptome RNA-Seq data set from <italic>Arabidopsis thaliana</italic> (lower panel). The table compares row wise the results for the following preprocessing steps of the raw sequences: no preprocessing, preprocessing with SEED, random sampling of the same number of reads obtained with SEED. The parameters used for SEED were ≤3 mismatches, ≤3 overhanging ends and QV mode disabled. The corresponding cluster size distributions for the genome assembly are given in <xref ref-type="fig" rid="F1">Figure 1</xref>.</p></fn></table-wrap-foot></table-wrap>
<fig id="F1" position="float"><label>Fig. 1.</label><caption><p>Cumulative contig sizes of genome assemblies. The plot compares the cumulative contig size distribution of the Velvet assembly results presented in the upper panel of <xref ref-type="table" rid="T2">Table 2</xref> (for details see table legend). In this plot, the N50 value is the contig size (<italic>Y</italic>-axis) at 50% of the assembly coverage (<italic>X</italic>-axis).</p></caption><graphic xlink:href="btr447f1"/></fig></p>
        <p>The above results on genome and transcriptome data clearly indicate that SEED preprocessing can improve the performance of downstream sequence assemblies using Velvet with respect to compute time, memory usage and quality parameters of the final contigs. Time and memory improvements are the main advantages here, whereas quality enhancements of the final results are likely to vary depending on the specific challenges presented by different sequence types. Investigating which datasets are particularly affected by this and how SEED exactly improves the quality of assemblies (e.g. error correction), goes beyond the scope of this study. When assembling transcriptome data, SEED clustering will help to reduce the extreme redundancies of very abundant mRNA species in these datasets, while maintaining the important information relevant for many RNA-Seq applications. On the other hand, when assembling genomes with highly repetitive sequences, often it will be necessary to perform SEED preprocessing with very stringent mismatch settings (e.g. <italic>k</italic>≤1), because higher numbers of mismatches in SEED clustering may eliminate information critical to achieve an optimal assembly of highly similar genomic regions.</p>
      </sec>
      <sec id="SEC3.2.4">
        <title>3.2.4 Discovery and profiling of miRNAs with SEED</title>
        <p>To explore the potential utility of SEED for identifying and profiling mature miRNA clusters in unsequenced organisms, we performed the following tests. First, we clustered with SEED, the raw sequences from four different NGS samples from a recently published small RNA profiling study in <italic>Arabidopsis thaliana</italic> (<xref ref-type="bibr" rid="B8">Hsieh <italic>et al.</italic>, 2009</xref>). In this study, the authors determined by NGS the expression profiles of 180 miRNAs from root and shoot tissues both grown in the presence and absence of phosphate (Pi). Subsequently, we identified for all miRNAs profiled in the published study the corresponding center sequences in the SEED clustering results. In this association step, the center and mature miRNA sequences had to fully overlap and show not more than one mismatch. Finally, we compared the sequence counts (expression profiles) for each of the miRNAs in the published dataset with the size of the corresponding SEED clusters (<xref ref-type="table" rid="T3">Table 3</xref>). Considering only clusters with at least 10 sequences, 76.1–89.4% of the miRNAs in the published dataset could be associated with SEED clusters. The likelihood of finding this many overlaps just by chance is very low (random sampling test <italic>P</italic>&lt;10<sup>−5</sup>). On average, these clusters contain 20–48% more sequences than clusters obtained by a simple counting approach of absolutely identical reads (data not shown). The Pearson's correlation coefficients (PCC) for the sequence counts for each miRNA in the published dataset and the corresponding SEED clusters are relatively high for all four samples (PCC: 0.82-0.91). This high correlation, and the high coverage of known miRNAs detected by these tests, illustrate SEED's utility for identifying in unsequenced genomes candidate clusters of mature miRNA sequences and obtaining for them relatively reliable expression data. A challenge in real datasets without a reference genome will be the identification of the correct miRNA clusters among the much larger pool of unrelated clusters (third column in <xref ref-type="table" rid="T3">Table 3</xref>). This can be largely overcome by sequence similarity searching. Here, one can identify clusters with similarities to known miRNAs, which are often evolutionary conserved. In addition, one can easily eliminate by similarity searching against reference databases the typical contaminants in small RNA datasets, such as ribosomal RNAs or transposons.
<table-wrap id="T3" position="float"><label>Table 3.</label><caption><p>miRNA profiling with SEED</p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th align="left" rowspan="1" colspan="1">Samples</th><th align="left" rowspan="1" colspan="1">No. of sequences</th><th align="left" rowspan="1" colspan="1">No. of clusters (size &gt;10)</th><th align="left" rowspan="1" colspan="1">miRNAs identified (all samples 96%)</th><th align="left" rowspan="1" colspan="1">PCC</th></tr></thead><tbody align="left"><tr><td align="left" rowspan="1" colspan="1">SRR032112 (Root−Pi)</td><td align="left" rowspan="1" colspan="1">5 142 120</td><td align="left" rowspan="1" colspan="1">37 315</td><td align="left" rowspan="1" colspan="1">76.1</td><td align="left" rowspan="1" colspan="1">0.91</td></tr><tr><td align="left" rowspan="1" colspan="1">SRR032113 (Root+Pi)</td><td align="left" rowspan="1" colspan="1">4 919 514</td><td align="left" rowspan="1" colspan="1">38 193</td><td align="left" rowspan="1" colspan="1">83.3</td><td align="left" rowspan="1" colspan="1">0.89</td></tr><tr><td align="left" rowspan="1" colspan="1">SRR032114 (Shoot−Pi)</td><td align="left" rowspan="1" colspan="1">4 862 947</td><td align="left" rowspan="1" colspan="1">46 776</td><td align="left" rowspan="1" colspan="1">89.4</td><td align="left" rowspan="1" colspan="1">0.82</td></tr><tr><td align="left" rowspan="1" colspan="1">SRR032115 (Shoot+Pi)</td><td align="left" rowspan="1" colspan="1">5 003 481</td><td align="left" rowspan="1" colspan="1">43 176</td><td align="left" rowspan="1" colspan="1">86.6</td><td align="left" rowspan="1" colspan="1">0.87</td></tr></tbody></table><table-wrap-foot><fn><p>The table gives for the four small RNA samples from (<xref ref-type="bibr" rid="B8">Hsieh <italic>et al.</italic>, 2009</xref>) the number of sequences in each data set, the number of clusters obtained by SEED with ≥10 members, the relative number of miRNAs covered by these clusters, and the PCCs for the published read counts and the ones obtained by SEED.</p></fn></table-wrap-foot></table-wrap></p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="SEC4">
    <title>4 CONCLUSIONS AND FUTURE WORK</title>
    <p>In this study, we introduced SEED as an efficient method for clustering very large NGS datasets while allowing up to three mismatches and three overhanging residues to their virtual center. The method gains its performance from a block spaced seed method that greatly accelerates the downstream clustering process. With increasing numbers of sequences, the method shows a linear time and memory performance. It is able to cluster on a single CPU core 100 million sequences in less than four hours, while using not &gt;8 GB of memory. These are very reasonable resource requirements for modern computers. The current implementation of SEED is optimized to handle sequences of 21–100 bp in length. This matches at the moment the length range of most of the widely used NGS technologies, such as Illumina's reversible terminator method.</p>
    <p>SEED's application spectrum is very broad. While most of its use cases fall into the data preprocessing area, it also has utilities as stand-alone discovery application for organisms where reference genome or transcriptome sequences are not available. For instance, it can be used in those cases to identify clusters of short DNA or RNA molecules that are abundant in genome or transcriptome samples, such as miRNAs or transposons. As preprocessing and data reduction tool, SEED is very efficient in improving the time and memory requirements of downstream NGS data processing routines, such as genome and transcriptome assemblies, often by a factor of 2- to 5-fold, based on the NGS test datasets used in this study. Moreover, reducing the redundancies in NGS data with SEED does not negatively impact the quality of the contigs in downstream assembly steps. In case of the Velvet/Oasis assembler, the N50 values of transcriptome and genome assemblies could be improved with SEED preprocessing by 12–27%.</p>
    <p>Similarity-based clustering can be an efficient approach to remove undesirable redundancies in NGS data. However, the removal of redundant reads will unavoidably be accompanied by an information loss in the data. While this can be often a desirable and/or tolerable consequence for many downstream analysis routines, the information loss can also negatively influence the outcome of certain applications, such as discovery of mutations (e.g. SNPs) or assemblies of repetitive genomic regions. As a general rule, if high resolution of very similar reads is important for a NGS project, then similarity clustering should be restricted to identical reads or not used at all.</p>
    <p>In future, we will expand the performance and utility spectrum of SEED on several levels. First, we will optimize the method by further improving its memory footprint and time performance. A parallelized version of the algorithm can be easily implemented by issuing many simultaneous queries to the hash tables while using locks for managing interprocess dependencies. Second, we will improve its minimum and maximum sequence length limits to support clustering of sequences that are shorter or longer than 21 or 100 bp, respectively. Finally, additional input and output formats will be implemented in SEED to provide support for a wide spectrum of upstream and downstream software tools and programming environments.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="PMC_1" content-type="local-data">
      <caption>
        <title>Supplementary Data</title>
      </caption>
      <media mimetype="text" mime-subtype="html" xlink:href="supp_27_18_2502__index.html"/>
      <media xlink:role="associated-file" mimetype="application" mime-subtype="pdf" xlink:href="supp_btr447_seed_rev_SUPPLonly_SPi.pdf"/>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <title>ACKNOWLEDGEMENT</title>
    <p>We acknowledge the support of the core facilities at the Institute for Integrative Genome Biology (IIGB) at UC Riverside.</p>
    <p><italic>Funding</italic>: <funding-source>USDA National Institute for Food and Agriculture</funding-source> (<award-id>NIFA-2010-65106-20675</award-id> to I.K.); <funding-source>National Science Foundation</funding-source> (<award-id>ABI-0957099</award-id> to T.G., <award-id>IOB-0420152</award-id> to T.G., <award-id>IGERT-0504249</award-id> to T.G., <award-id>IIS-0711129</award-id> to T.J.).</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </ack>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="B1">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Birney</surname>
            <given-names>E.</given-names>
          </name>
        </person-group>
        <article-title>Assemblies: the good, the bad, the ugly</article-title>
        <source>Nat. Methods</source>
        <year>2011</year>
        <volume>8</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="pmid">21191376</pub-id>
      </element-citation>
    </ref>
    <ref id="B2">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cock</surname>
            <given-names>P.J.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Sanger FASTQ file format for sequences with quality scores, and the Solexa/Illumina FASTQ variants</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2010</year>
        <volume>38</volume>
        <fpage>1767</fpage>
        <lpage>1771</lpage>
        <pub-id pub-id-type="pmid">20015970</pub-id>
      </element-citation>
    </ref>
    <ref id="B3">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Durbin</surname>
            <given-names>R.M.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A map of human genome variation from population-scale sequencing</article-title>
        <source>Nature</source>
        <year>2010</year>
        <volume>467</volume>
        <fpage>1061</fpage>
        <lpage>1073</lpage>
        <pub-id pub-id-type="pmid">20981092</pub-id>
      </element-citation>
    </ref>
    <ref id="B4">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>R.C.</given-names>
          </name>
        </person-group>
        <article-title>Search and clustering orders of magnitude faster than BLAST</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>2460</fpage>
        <lpage>2461</lpage>
        <pub-id pub-id-type="pmid">20709691</pub-id>
      </element-citation>
    </ref>
    <ref id="B5">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fritz</surname>
            <given-names>M.H.Y.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Efficient storage of high throughput sequencing data using reference-based compression</article-title>
        <source>Genome Res.</source>
        <year>2011</year>
        <volume>21</volume>
        <fpage>734</fpage>
        <lpage>740</lpage>
        <pub-id pub-id-type="pmid">21245279</pub-id>
      </element-citation>
    </ref>
    <ref id="B6">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hazelhurst</surname>
            <given-names>S.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An overview of the wcd EST clustering tool</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>1542</fpage>
        <pub-id pub-id-type="pmid">18480101</pub-id>
      </element-citation>
    </ref>
    <ref id="B7">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holt</surname>
            <given-names>R.A.</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>S.J.</given-names>
          </name>
        </person-group>
        <article-title>The new paradigm of flow cell sequencing</article-title>
        <source>Genome Res.</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>839</fpage>
        <lpage>846</lpage>
        <pub-id pub-id-type="pmid">18519653</pub-id>
      </element-citation>
    </ref>
    <ref id="B8">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hsieh</surname>
            <given-names>L.C.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Uncovering small RNA-mediated responses to phosphate deficiency in Arabidopsis by deep sequencing</article-title>
        <source>Plant Physiol.</source>
        <year>2009</year>
        <volume>151</volume>
        <fpage>2120</fpage>
        <lpage>2132</lpage>
        <pub-id pub-id-type="pmid">19854858</pub-id>
      </element-citation>
    </ref>
    <ref id="B9">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>X.</given-names>
          </name>
          <name>
            <surname>Madan</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>CAP3: A DNA sequence assembly program</article-title>
        <source>Genome Res.</source>
        <year>1999</year>
        <volume>9</volume>
        <fpage>868</fpage>
        <pub-id pub-id-type="pmid">10508846</pub-id>
      </element-citation>
    </ref>
    <ref id="B10">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jiang</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>W.</given-names>
          </name>
        </person-group>
        <article-title>Seqmap: mapping massive amount of oligonucleotides to the genome</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2395</fpage>
        <pub-id pub-id-type="pmid">18697769</pub-id>
      </element-citation>
    </ref>
    <ref id="B11">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jiao</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Meyerowitz</surname>
            <given-names>E.M.</given-names>
          </name>
        </person-group>
        <article-title>Cell-type specific analysis of translating RNAs in developing flowers reveals new levels of control</article-title>
        <source>Mol. Syst. Biol.</source>
        <year>2010</year>
        <volume>6</volume>
        <fpage>419</fpage>
        <lpage>419</lpage>
        <pub-id pub-id-type="pmid">20924354</pub-id>
      </element-citation>
    </ref>
    <ref id="B12">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Johnson</surname>
            <given-names>C.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Clusters and superclusters of phased small RNAs in the developing inflorescence of rice</article-title>
        <source>Genome Res.</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>1429</fpage>
        <lpage>1440</lpage>
        <pub-id pub-id-type="pmid">19584097</pub-id>
      </element-citation>
    </ref>
    <ref id="B13">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jothi</surname>
            <given-names>R.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome-wide identification of in vivo protein-DNA binding sites from ChIP-Seq data</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2008</year>
        <volume>36</volume>
        <fpage>5221</fpage>
        <lpage>5231</lpage>
        <pub-id pub-id-type="pmid">18684996</pub-id>
      </element-citation>
    </ref>
    <ref id="B14">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kaufmann</surname>
            <given-names>K.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestration of floral initiation by APETALA1</article-title>
        <source>Science</source>
        <year>2010</year>
        <volume>328</volume>
        <fpage>85</fpage>
        <lpage>89</lpage>
        <pub-id pub-id-type="pmid">20360106</pub-id>
      </element-citation>
    </ref>
    <ref id="B15">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ultrafast and memory-efficient alignment of short DNA sequences to the human genome</article-title>
        <source>Genome Biol.</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>25</fpage>
        <lpage>34</lpage>
      </element-citation>
    </ref>
    <ref id="B16">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Leinonen</surname>
            <given-names>R.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The European Nucleotide Archive</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2010</year>
        <volume>39</volume>
        <fpage>28</fpage>
        <lpage>31</lpage>
      </element-citation>
    </ref>
    <ref id="B17">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Godzik</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Cd-hit: a fast program for clustering and comparing large sets of protein or nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>1658</fpage>
        <lpage>1659</lpage>
        <pub-id pub-id-type="pmid">16731699</pub-id>
      </element-citation>
    </ref>
    <ref id="B18">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mapping short DNA sequencing reads and calling variants using mapping quality scores</article-title>
        <source>Genome Res.</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>1851</fpage>
        <pub-id pub-id-type="pmid">18714091</pub-id>
      </element-citation>
    </ref>
    <ref id="B19">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R.</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009a</year>
        <volume>25</volume>
        <fpage>1754</fpage>
        <lpage>1760</lpage>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="B20">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The sequence alignment/map format and SAMtools</article-title>
        <source>Bioinformatics</source>
        <year>2009b</year>
        <volume>25</volume>
        <fpage>2078</fpage>
        <lpage>2079</lpage>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="B21">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lin</surname>
            <given-names>H.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>ZOOM! Zillions of oligos mapped</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2431</fpage>
        <lpage>2437</lpage>
        <pub-id pub-id-type="pmid">18684737</pub-id>
      </element-citation>
    </ref>
    <ref id="B22">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>B.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PatternHunter: faster and more sensitive homology search</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <fpage>440</fpage>
        <lpage>445</lpage>
        <pub-id pub-id-type="pmid">11934743</pub-id>
      </element-citation>
    </ref>
    <ref id="B23">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Medini</surname>
            <given-names>D.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Microbiology in the post-genomic era</article-title>
        <source>Nat. Rev. Microbiol.</source>
        <year>2008</year>
        <volume>6</volume>
        <fpage>419</fpage>
        <lpage>430</lpage>
        <pub-id pub-id-type="pmid">18475305</pub-id>
      </element-citation>
    </ref>
    <ref id="B24">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Miller</surname>
            <given-names>J.R.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assembly algorithms for next-generation sequencing data</article-title>
        <source>Genomics</source>
        <year>2010</year>
        <volume>95</volume>
        <fpage>315</fpage>
        <lpage>327</lpage>
        <pub-id pub-id-type="pmid">20211242</pub-id>
      </element-citation>
    </ref>
    <ref id="B25">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Montgomery</surname>
            <given-names>T.A.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>AGO1-miR173 complex initiates phased siRNA formation in plants</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>2008</year>
        <volume>105</volume>
        <fpage>20055</fpage>
        <lpage>20062</lpage>
        <pub-id pub-id-type="pmid">19066226</pub-id>
      </element-citation>
    </ref>
    <ref id="B26">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Picardi</surname>
            <given-names>E.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>EasyCluster: a fast and efficient gene-oriented clustering tool for large-scale transcriptome data</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>Suppl. 6</issue>
        <fpage>S10</fpage>
        <pub-id pub-id-type="pmid">19534735</pub-id>
      </element-citation>
    </ref>
    <ref id="B27">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Qu</surname>
            <given-names>W.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Efficient frequency-based de novo short-read clustering for error trimming in next-generation sequencing</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>1309</fpage>
        <lpage>1315</lpage>
        <pub-id pub-id-type="pmid">19439514</pub-id>
      </element-citation>
    </ref>
    <ref id="B28">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rao</surname>
            <given-names>D.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PEACE: Parallel Environment for Assembly and Clustering of Gene Expression</article-title>
        <source>Nucleic acids research</source>
        <year>2010</year>
        <volume>38</volume>
        <issue>Suppl. 2</issue>
        <fpage>W737</fpage>
        <pub-id pub-id-type="pmid">20522511</pub-id>
      </element-citation>
    </ref>
    <ref id="B29">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schmidt</surname>
            <given-names>B.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A fast hybrid short read fragment assembly algorithm</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>2279</fpage>
        <lpage>2280</lpage>
        <pub-id pub-id-type="pmid">19535537</pub-id>
      </element-citation>
    </ref>
    <ref id="B30">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>R.L.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assembling millions of short DNA sequences using SSAKE</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <fpage>500</fpage>
        <lpage>501</lpage>
        <pub-id pub-id-type="pmid">17158514</pub-id>
      </element-citation>
    </ref>
    <ref id="B31">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>D.R.</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E.</given-names>
          </name>
        </person-group>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
