<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PeerJ Comput Sci</journal-id>
    <journal-id journal-id-type="iso-abbrev">PeerJ Comput Sci</journal-id>
    <journal-id journal-id-type="publisher-id">peerj-cs</journal-id>
    <journal-title-group>
      <journal-title>PeerJ Computer Science</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2376-5992</issn>
    <publisher>
      <publisher-name>PeerJ Inc.</publisher-name>
      <publisher-loc>San Diego, USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9454887</article-id>
    <article-id pub-id-type="publisher-id">cs-1037</article-id>
    <article-id pub-id-type="doi">10.7717/peerj-cs.1037</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Distributed and Parallel Computing</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Theory and Formal Methods</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Programming Languages</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Internet of Things</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Ephemeral data handling in microservices with Tquery</article-title>
    </title-group>
    <contrib-group>
      <contrib id="author-1" contrib-type="author">
        <name>
          <surname>Giallorenzo</surname>
          <given-names>Saverio</given-names>
        </name>
        <xref rid="aff-1" ref-type="aff">1</xref>
        <xref rid="aff-2" ref-type="aff">2</xref>
      </contrib>
      <contrib id="author-2" contrib-type="author" corresp="yes">
        <name>
          <surname>Montesi</surname>
          <given-names>Fabrizio</given-names>
        </name>
        <email>fmontesi@imada.sdu.dk</email>
        <xref rid="aff-3" ref-type="aff">3</xref>
      </contrib>
      <contrib id="author-3" contrib-type="author">
        <name>
          <surname>Safina</surname>
          <given-names>Larisa</given-names>
        </name>
        <xref rid="aff-4" ref-type="aff">4</xref>
      </contrib>
      <contrib id="author-4" contrib-type="author">
        <name>
          <surname>Zingaro</surname>
          <given-names>Stefano Pio</given-names>
        </name>
        <xref rid="aff-1" ref-type="aff">1</xref>
        <xref rid="aff-2" ref-type="aff">2</xref>
      </contrib>
      <aff id="aff-1"><label>1</label><institution>Università di Bologna</institution>, <city>Bologna</city>, <country>Italy</country></aff>
      <aff id="aff-2"><label>2</label><institution>INRIA</institution>, <city>Sophia Antipolis</city>, <country>France</country></aff>
      <aff id="aff-3"><label>3</label><institution>University of Southern Denmark</institution>, <city>Odense</city>, <country>Denmark</country></aff>
      <aff id="aff-4"><label>4</label><institution>INRIA</institution>, <city>Lille</city>, <country>France</country></aff>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Aleem</surname>
          <given-names>Muhammad</given-names>
        </name>
      </contrib>
    </contrib-group>
    <pub-date pub-type="epub" date-type="pub" iso-8601-date="2022-07-22">
      <day>22</day>
      <month>7</month>
      <year iso-8601-date="2022">2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>8</volume>
    <elocation-id>e1037</elocation-id>
    <history>
      <date date-type="received" iso-8601-date="2022-05-03">
        <day>3</day>
        <month>5</month>
        <year iso-8601-date="2022">2022</year>
      </date>
      <date date-type="accepted" iso-8601-date="2022-06-22">
        <day>22</day>
        <month>6</month>
        <year iso-8601-date="2022">2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>©2022 Giallorenzo et al.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>Giallorenzo et al.</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, reproduction and adaptation in any medium and for any purpose provided that it is properly attributed. For attribution, the original author(s), title, publication source (PeerJ Computer Science) and either DOI or URL of the article must be cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="https://peerj.com/articles/cs-1037"/>
    <abstract>
      <p>The adoption of edge and fog systems, along with the introduction of privacy-preserving regulations, compel the usage of tools for expressing complex data queries in an ephemeral way. That is, queried data should not persist. Database engines partially address this need, as they provide domain-specific languages for querying data. Unfortunately, using a database in an ephemeral setting has inessential issues related to throughput bottlenecks, scalability, dependency management, and security (<italic toggle="yes">e.g.</italic>, query injection). Moreover, databases can impose specific data structures and data formats, which can hinder the development of microservice architectures that integrate heterogeneous systems and handle semi-structured data. In this article, we present Jolie/Tquery, the first query framework designed for ephemeral data handling in microservices. Jolie/Tquery joins the benefits of a technology-agnostic, microservice-oriented programming language, Jolie, and of one of the most widely-used query languages for semi-structured data in microservices, the MongoDB aggregation framework. To make Jolie/Tquery reliable for the users, we follow a cleanroom software engineering process. First, we define Tquery, a theory for querying semi-structured data compatible with Jolie and inspired by a consistent variant of the key operators of the MongoDB aggregation framework. Then, we describe how we implemented Jolie/Tquery following Tquery and how the Jolie type system naturally captures the syntax of Tquery and helps to preserve its invariants. To both illustrate Tquery and Jolie/Tquery, we present the use case of a medical algorithm and build our way to a microservice that implements it using Jolie/Tquery. Finally, we report microbenchmarks that validate the expectation that, in the ephemeral case, using Jolie/Tquery outperforms using an external database (MongoDB, specifically).</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>Microservices</kwd>
      <kwd>Jolie</kwd>
      <kwd>Semi-structured data</kwd>
      <kwd>Ephemeral data</kwd>
      <kwd>Edge computing</kwd>
      <kwd>Fog computing</kwd>
      <kwd>Formal methods</kwd>
      <kwd>Service-oriented computing</kwd>
      <kwd>Query languages</kwd>
      <kwd>e-Health</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="fund-1">
        <funding-source>Villum Fonden</funding-source>
        <award-id>29518</award-id>
      </award-group>
      <award-group id="fund-2">
        <funding-source> Independent Research Fund Denmark</funding-source>
        <award-id>0135-00219</award-id>
      </award-group>
      <award-group id="fund-3">
        <funding-source>Horizon2020</funding-source>
        <award-id>825619</award-id>
      </award-group>
      <funding-statement>This work was sponsored by Villum Fonden, grant no. 29518, by Independent Research Fund Denmark, grant no. 0135-00219, and by Horizon2020, grant no. 825619. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <sec>
      <title>Background</title>
      <p>Modern applications that make use of Edge Computing (<xref rid="ref-60" ref-type="bibr">Shi et al., 2016</xref>) and the Internet of Things (IoT for short) (<xref rid="ref-10" ref-type="bibr">Baker, Xiang &amp; Atkinson, 2017</xref>) are increasingly developed as systems of microservices: independently executable components that communicate <italic toggle="yes">via</italic> message passing (<xref rid="ref-23" ref-type="bibr">Dragoni et al., 2017</xref>). These systems typically have to deal with the continuous acquisition, processing, and distribution of semi-structured data. Over the last decade, the need for such data handling has contributed significantly to the adoption of document-oriented querying frameworks (<xref rid="ref-39" ref-type="bibr">Leavitt, 2010</xref>), like the MongoDB aggregation framework (<xref rid="ref-47" ref-type="bibr">MongoDB Inc., 2022</xref>)—and especially so in settings where Cloud Computing (<xref rid="ref-7" ref-type="bibr">Armbrust et al., 2010</xref>) is involved as well.</p>
      <p>Recently, the necessity for careful data handling and the introduction of data protection regulations like the GDPR (<xref rid="ref-65" ref-type="bibr">Van Alsenoy, 2019</xref>) has highlighted the importance of handling ephemeral data (<xref rid="ref-59" ref-type="bibr">Shein, 2013</xref>). That is, in order to limit the circulation of data, applications should quickly process information without relying on persistency.</p>
      <p>Ephemeral data handling is particularly relevant in scenarios where privacy is important (<xref rid="ref-50" ref-type="bibr">Mostert et al., 2016</xref>), for example eHealth (electronic systems that support healthcare) (<xref rid="ref-10" ref-type="bibr">Baker, Xiang &amp; Atkinson, 2017</xref>), because it ensures by construction that data is automatically discarded unless the developers manually specifies otherwise. However, collecting and querying data with general-purpose languages in these contexts is often time consuming and error-prone (<xref rid="ref-55" ref-type="bibr">Reda, Piccinini &amp; Carbonaro, 2018</xref>; <xref rid="ref-40" ref-type="bibr">Ma, Wang &amp; Chu, 2013</xref>). In particular:</p>
      <list list-type="simple" id="list-1">
        <list-item>
          <label> 1.</label>
          <p>The implementation of query pipelines can quickly become complicated without proper abstractions.</p>
        </list-item>
        <list-item>
          <label> 2.</label>
          <p>Data might come from heterogeneous sources and in different data formats.</p>
        </list-item>
      </list>
      <p>To solve the first issue (querying), developers typically include in their systems components that offer dedicated query languages (<xref rid="ref-20" ref-type="bibr">Cheney, Lindley &amp; Wadler, 2013</xref>). For semi-structured data, a popular approach is to store data in a MongoDB instance (<xref rid="ref-46" ref-type="bibr">MongoDB Inc., 2018b</xref>), and then to use the MongoDB aggregation framework to perform queries.</p>
      <p>As for the second issue (heterogeneity), developers can get support from programming languages or frameworks in which programs abstract from the concrete representation of data on the wire. Then, data is converted into the appropriate format and communicated through the appropriate protocol at runtime. Jolie is a (micro)service-oriented language designed to offer this capability (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>). A Jolie service can type, communicate, and manipulate semi-structured data under a unifying model that abstracts from data formats and communication protocols. Then, the program can be reused with different deployment instructions, which inform the Jolie engine of how data should be formatted (binary representations, JSON, XML, <italic toggle="yes">etc</italic>.) and communicated (using HTTP, SOAP, <italic toggle="yes">etc</italic>.) (<xref rid="ref-48" ref-type="bibr">Montesi, 2016</xref>). Jolie instructions can further be composed in workflows (<xref rid="ref-30" ref-type="bibr">Gabbrielli, Giallorenzo &amp; Montesi, 2014</xref>); a feature that simplifies the programming of data collection and distribution in IoT and edge environments (<xref rid="ref-29" ref-type="bibr">Gabbrielli et al., 2019</xref>).</p>
    </sec>
    <sec>
      <title>The Problem</title>
      <p>Ideally, a tool for ephemeral data handling in microservices would give us the best of the MongoDB aggregation framework and of the Jolie programming language: a query framework designed for semi-structured data and a language for working in heterogeneous environments.</p>
      <p>An obvious attempt at achieving what we want is to just “stick together” MongoDB with Jolie, in the sense of deploying a Jolie service in the company of a MongoDB instance. Unfortunately, this approach runs into issues:</p>
      <def-list id="dl1">
        <def-item>
          <term>
Dependency
</term>
          <def>
            <p>An external Database Management System (DBMS) like MongoDB is an additional standalone component that needs to be installed, deployed, and maintained. As with any software dependency, this exposes the applications to challenges of version incompatibility (<xref rid="ref-37" ref-type="bibr">Jang, 2006</xref>).</p>
          </def>
        </def-item>
        <def-item>
          <term>
Security
</term>
          <def>
            <p>The companion DBMS is subject to weak security configurations (<xref rid="ref-15" ref-type="bibr">Brian Krebs, 2017</xref>) and query injections, increasing the attack surface of the application. This is a typical problem in microservices-with-database deployments where usually the microservice composes queries by assembling external inputs as strings, which is the main vector for query injections (<xref rid="ref-56" ref-type="bibr">Ron, Shulman-Peleg &amp; Puzanov, 2016</xref>).</p>
          </def>
        </def-item>
        <def-item>
          <term>
Inconsistency
</term>
          <def>
            <p>The key features of the MongoDB aggregation framework have only recently been formally understood, and some present idiosyncrasies related to implementation that do not make sense for a clean, abstract model (<xref rid="ref-13" ref-type="bibr">Botoeva et al., 2018</xref>).</p>
          </def>
        </def-item>
        <def-item>
          <term>
Performance
</term>
          <def>
            <p>The communication channel between the MongoDB instance and the Jolie service can become a bottleneck, introducing the usual performance issues of database connections (<xref rid="ref-67" ref-type="bibr">Visveswaran, 2000</xref>). This is common in microservices-with-database scenarios where the overheads of establishing database connections can limit the performance of the whole component (and techniques, like managing pools of persistent database connections, are partial solutions (<xref rid="ref-67" ref-type="bibr">Visveswaran, 2000</xref>) that make the logic of the microservices more involved). Data format conversions in these communications contribute to overhead as well, together with the necessary measures to ensure ephemerality (post-query data deletion).</p>
          </def>
        </def-item>
      </def-list>
    </sec>
    <sec>
      <title>Our solution</title>
      <p>We propose the integration of relevant MongoDB data-query operators in Jolie. Our solution avoids the issues above: <bold>Dependency</bold>, since there is not anymore a database that we need to install and maintain; <bold>Security</bold>, because shedding the database removes risks from weak security configurations and, since the queries are part of the language (and not simply strings that we forward to the database engine), we also lower the exposition to query injections; <bold>Inconsistency</bold>, by building upon previous work on the formalisation of a consistent data-query theory of MongoDB (<xref rid="ref-12" ref-type="bibr">Botoeva et al., 2016</xref>); <bold>Performance</bold>, since there is no database involved, we avoid the overhead of: passing the data to and from the database; possible data-format conversions; bottlenecks due to pools of database connection channels (and possible bugs linked to their management), and of ensuring ephemerality.</p>
    </sec>
    <sec>
      <title>This article</title>
      <p>We present two main contributions. The first one is a formal model of a query language for semi-structured data, called Tquery. The second is an implementation of Tquery, called Jolie/Tquery, which is the first query framework designed for ephemeral data handling in microservices. Jolie/Tquery addresses the problem by joining the benefits of Jolie and of the MongoDB aggregation framework: data can be collected from heterogeneous sources and then be queried in local memory by using pipelines of operations on semi-structured data.</p>
      <p>The development of Jolie/Tquery is inspired by cleanroom software engineering. In particular, we have implemented our framework from scratch, starting from a formal model of its operators and their semantics. Our main contributions are described in the following.</p>
      <p><bold>Formal Specification</bold> We define Tquery, a theory for querying semi-structured data compatible with Jolie. Tquery provides the key operators of the MongoDB aggregation framework (match, unwind, project, group, and lookup), but reformulated for Jolie data structures and their accompanying syntax of paths for data traversal.</p>
      <p><bold>Implementation</bold> We develop Jolie/Tquery, an implementation of Tquery in the form of a Jolie package that can be used in services. Jolie/Tquery is lightweight: the entire compiled package consists of less than 100 kb. The implementation consists of two parts: an Application Programming Interface (API) to construct and run query pipelines, which defines the syntax of Tquery operators in terms of Jolie types; and an implementation of the API that follows the semantics given in Tquery. Jolie comes with an engine that supports implementing Jolie APIs with different languages (<xref rid="ref-48" ref-type="bibr">Montesi, 2016</xref>). In our case, Jolie/Tquery is implemented in Java. Jolie applications can use Jolie/Tquery by passing data in local memory and using native Jolie structures, which avoids the aforementioned issues. At the same time, Jolie applications can use Jolie’s capabilities for integrating with heterogeneous components to collect and distribute data.</p>
      <p><bold>Evaluation</bold> We illustrate the expressivity of Jolie/Tquery by using it to implement a use case from eHealth: a detection system for encephalopathy based on a proposal by <xref rid="ref-66" ref-type="bibr">Vigevano &amp; Liso (2018)</xref>. We then carry out microbenchmarks to validate the expectation that using Jolie/Tquery, being an in-memory query framework, outperforms using an external database management system (MongoDB specifically).</p>
      <p>The article is structured as follows. ‘Related Work’ covers the related work. ‘Overview and Running Example’ illustrates the Tquery with the running example from the eHealth. ‘The Tquery Formalisation’ introduces formalisation of Tquery. ‘Implementation’ presents implementation of Tquery as a microservice written in Jolie programming language. ‘Benchmarks’ provides the benchmarks comparing the Tquery with the MongoDB. ‘Discussion and Conclusion’ drives conclusions.</p>
      <p>This is the journal version of <xref rid="ref-32" ref-type="bibr">Giallorenzo et al. (2019)</xref>, a short conference article where we presented preliminary ongoing work about the implementation of Jolie/Tquery.</p>
    </sec>
  </sec>
  <sec>
    <title>Related Work</title>
    <p>Jolie/Tquery is the first implementation from scratch of a formally-specified, document-oriented query framework. Our formal model, Tquery, stands on the shoulders of MQuery (<xref rid="ref-13" ref-type="bibr">Botoeva et al., 2018</xref>), the first formal model of query operators for JSON data structures. MQuery formalises the key operators of the MongoDB aggregation framework, dispensing from some unnecessary idiosyncrasies that can lead to counterintuitive behaviour. Tquery inherits this good feature—the reader interested in the technical differences w.r.t. the MongoDB aggregation framework can consult (<xref rid="ref-12" ref-type="bibr">Botoeva et al., 2016</xref>, Appendix C). The key difference between this work and <xref rid="ref-13" ref-type="bibr">Botoeva et al. (2018)</xref> is that Tquery comes with an implementation, whereas <xref rid="ref-13" ref-type="bibr">Botoeva et al. (2018)</xref> investigated the theoretical expressivity of the MQuery operators w.r.t. relational algebra and their complexity. Tquery adopts the same operators but reformulated to be compatible with the Jolie data model (by adopting arrays instead of unordered forests for document collections). The semantics of our operators is also specified differently: while Tquery’s operators follow the same intuition of the operators in MQuery, we give our semantics specifying how operations can be computed. For example, we do not rely on existential quantification and all our definitions are given by recursion on the structures of inputs. We believe that formalisation efforts like MQuery and Tquery are important: during the development of our implementation, we found having a reference formal model helpful to clarify the expected behaviour of operators and what tests we should write.</p>
    <p>Jolie has been used in several domains that require ephemeral data handling, including smart mobility (<xref rid="ref-17" ref-type="bibr">Callegati et al., 2017</xref>), IoT (<xref rid="ref-28" ref-type="bibr">Gabbrielli et al., 2018</xref>), integration components in document management systems (<xref rid="ref-42" ref-type="bibr">Maschio, 2019</xref>), and media content (<xref rid="ref-41" ref-type="bibr">Maschio, 2017</xref>). However, due to the lack of an appropriate query framework, the query logic has been implemented manually with a general-purpose computation language (the computation layer of Jolie). Because it guarantees that data gets discarded (ephemerality) and it provides an expressive set of compositional query operators, Jolie/Tquery offers a better alternative for writing data-intensive Jolie microservices. Moreover, since every Jolie program is a composition of services, adapting a program to offload parts of its computations to remote nodes is simple (it mainly regards the reconfiguration of how services are deployed). This, in unison with the fact that Jolie/Tquery operators are stateless, simplifies the task of splitting Jolie/Tquery heavy-weight or computation-intensive queries over multiple nodes.</p>
    <p>Other solutions that offer semi-structured data querying in separate services include MongoDB (<xref rid="ref-46" ref-type="bibr">MongoDB Inc., 2018b</xref>) and CouchDB (<xref rid="ref-1" ref-type="bibr">Apache, 2005</xref>); however, these are DB-based solutions that fall into the category of deployments that we deem unfit for the case of ephemeral data-handling. Moreover, these do not come with a formal model which, <italic toggle="yes">e.g.</italic>, one can use to reason about the semantics of the implementation and to check its consistency (like <xref rid="ref-12" ref-type="bibr">Botoeva et al. (2016)</xref> demonstrated for MongoDB).</p>
    <p>There exist works on the integration of relational query frameworks with general-purpose programming languages, including: object-relation mapping frameworks (ORMs), which map objects to database entities (<xref rid="ref-27" ref-type="bibr">Fussel, 1997</xref>); Opaleye, a Haskell DSL for generating PostgreSQL commands (<xref rid="ref-25" ref-type="bibr">Ellis, 2014</xref>); and LINQ (<xref rid="ref-43" ref-type="bibr">Meijer, Beckman &amp; Bierman, 2006</xref>), which provides query operators targeting SQL tables and XML structures for .NET languages. Tquery could be a reference to implement similar frameworks for semi-structured data in these languages. A convenient feature of Jolie/Tquery is that all its queries can work with any data format that Jolie can handle: Jolie automatically converts data in different formats (including JSON, XML, and some binary formats) to its abstract data model (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>; <xref rid="ref-48" ref-type="bibr">Montesi, 2016</xref>).</p>
    <p>As we are going to exemplify in the next section, a typical use case for semi-structured data handling and Jolie/Tquery is the reactive processing of events. Stream-processing languages have been explored for similar tasks, but they feature different kinds of primitives and are usually not based on semi-structured data.</p>
    <p>The landscape of stream-processing languages is quite wide, <italic toggle="yes">e.g.</italic>, data-centric (<xref rid="ref-19" ref-type="bibr">Chen et al., 2000</xref>; <xref rid="ref-11" ref-type="bibr">Barbieri et al., 2009</xref>), time- or hardware-constrained execution-centric (<xref rid="ref-18" ref-type="bibr">Caspi et al., 1987</xref>; <xref rid="ref-35" ref-type="bibr">Hirzel, Schneider &amp; Gedik, 2017</xref>; <xref rid="ref-64" ref-type="bibr">Tommasini et al., 2019</xref>), focussed on the relational- or document-oriented (<xref rid="ref-19" ref-type="bibr">Chen et al., 2000</xref>; <xref rid="ref-22" ref-type="bibr">Diao et al., 2002</xref>; <xref rid="ref-44" ref-type="bibr">Mendell et al., 2012</xref>) approach. In particular, SQL-based stream-processing languages (<xref rid="ref-26" ref-type="bibr">Esteves et al., 2017</xref>; <xref rid="ref-9" ref-type="bibr">Babu &amp; Widom, 2001</xref>) recently gained popularity in industry (thanks to the familiarity of programmers with the SQL language), with commercial tools such as Apache Flink (<xref rid="ref-2" ref-type="bibr">Apache, 2022a</xref>), Apache Kafka (KSQL) (<xref rid="ref-51" ref-type="bibr">Narkhede, 2017</xref>), Apache Samza (<xref rid="ref-3" ref-type="bibr">Apache, 2022b</xref>), Apache Storm (<xref rid="ref-4" ref-type="bibr">Apache, 2022c</xref>), WSO2 Stream Processor (<xref rid="ref-69" ref-type="bibr">WSO2, 2022</xref>), Siddhi (Siddhi Streaming SQL) (<xref rid="ref-61" ref-type="bibr">Siddhi, 2022</xref>). We deem StreamQL (<xref rid="ref-38" ref-type="bibr">Kong &amp; Mamouras, 2020</xref>) the work closest to Jolie/Tquery. This is a query language for efficiently processing IoT data streams. The StreamQL Engine is implemented as a lightweight Java library and does not depend on the external engine. However, StreamQL is a functional language that is based on formal semantics residing on the class of monotone functions over streams. It works with the typical functional primitives on list-based data, supporting a variety of operators that simplify stream-processing at the level of data aggregation (filtering, windowing, etc.) and data-flow control (<italic toggle="yes">e.g.</italic>, parallel composition). StreamQL does not handle explicitly semi-structured document-oriented data and requires additional processing for data translation, while Jolie/Tquery handles it natively(tree-shaped data simplifies integration with Jolie). Unlike Jolie/Tquery, StreamQL has built-in primitives for temporal control typical for data streaming languages. In Jolie/Tquery time contracts can be implemented by adding information to the data structures and need to be managed explicitly by the programmer. Widening our scope, we deem two works, CQL (<xref rid="ref-6" ref-type="bibr">Arasu, Babu &amp; Widom, 2006</xref>) and EQL (<xref rid="ref-24" ref-type="bibr">Elasticsearch, 2022</xref>), close to Jolie/Tquery. CQL is a declarative streaming SQL-based query language, implemented in the STREAM DSMS (<xref rid="ref-5" ref-type="bibr">Arasu et al., 2016</xref>) with data captured with sliding windows (<xref rid="ref-8" ref-type="bibr">Babcock et al., 2002</xref>) based on time-(<italic toggle="yes">e.g.</italic>, update the data every 30 s) and data-related conditions (<italic toggle="yes">e.g.</italic>, capture the data as soon as it arrives). EQL (<xref rid="ref-24" ref-type="bibr">Elasticsearch, 2022</xref>) is an event-based data manipulation library developed in Python. Similarly to CQL, EQL expects data to follow an event-oriented schema. Interestingly, EQL provides a query-composition operator similar to the one provided by Jolie/Tquery (see ‘Extending Jolie/Tquery with query pipelines’). Both CQL and EQL, being SQL-based, work on tuples of data rather than semi-structured documents as Jolie/Tquery does—e.g., one needs to convert a JSON document into tuples of data before using CQL/EQL.</p>
    <p>Finally, Ballerina (<xref rid="ref-52" ref-type="bibr">Oram, 2019</xref>) is a language for the development of microservices close to Jolie, developed by WSO2, that equips SQL-like query operators to process data and events. The differences with Jolie/Tquery include the relational nature of the operators, which requires the user to translate values between document- and tuple-shaped data when applying/using the data from the queries, and the lack of a formal reference.</p>
  </sec>
  <sec>
    <title>Overview and Running Example</title>
    <p>In this section, we illustrate our proposal with an eHealth use case, showing the definition of a diagnostic algorithm as a composition of Tquery’s operators. We deem this area of application apt to illustrate Tquery for two main reasons.</p>
    <p>First, since medical diagnostic algorithms are usually expressed through declarative or high-level imperative instructions, having high-level, declarative operators for data handling narrows the gap between definitions and implementations and helps in both translating and checking their correctness. Indeed, more and more studies emerged proposing non-intrusive, affordable yet accurate diagnostic systems based on data collected from heterogeneous sources such as user-inputted data, smartphones, wearables, and cameras (<xref rid="ref-54" ref-type="bibr">Purohit et al., 2020</xref>). An emblematic example of this phenomenon is the recent proposal by <xref rid="ref-34" ref-type="bibr">Hirten et al. (2020)</xref>, where the authors defined and demonstrated the efficacy of a diagnostic algorithm to identify and predict SARS-CoV-2 (aka COVID-19) infections, reporting promising predictive ability to identify infection days before the diagnosis through nasal-swab testing. Here, we focus on a simpler-yet-comprehensive diagnostic algorithm defined by <xref rid="ref-66" ref-type="bibr">Vigevano &amp; Liso (2018)</xref> to detect cases of encephalopathy.</p>
    <p>Second, the inherent ephemerality of Tquery programs caters to the principles of secrecy and obliviousness of data—the data handled by a Tquery program is automatically deleted from memory—in the healthcare sector. This approach is frequently summarised by the motto “the data never leave the hospital” and it is compliant with the current regulations on data protection (<italic toggle="yes">e.g.</italic>, GDPR (<xref rid="ref-57" ref-type="bibr">Rose, 2014</xref>)).</p>
    <p>In the remainder of the article, we use the diagnostic algorithm by <xref rid="ref-66" ref-type="bibr">Vigevano &amp; Liso (2018)</xref> to illustrate the formal semantics of Tquery. Here, we focus on the overall definition of the parts of the algorithm and how we can map them to a combination of Tquery operators acting on and merging data from different sources. Then, in ‘The Tquery Formalisation’, we return on the single instructions that make up the algorithm presented here and show the step-by-step output of Tquery operators, following from the specification of their semantics.</p>
    <sec>
      <title>An encephalopathy diagnostic algorithm</title>
      <p>Taking inspiration from <xref rid="ref-66" ref-type="bibr">Vigevano &amp; Liso (2018)</xref>, we focus on the aggregation of two early markers to detect encephalopathy: fever in the last 72 h and lethargy in the last 48 h. Those data are collectable by commercially-available smart-watches and smart-phones (<xref rid="ref-16" ref-type="bibr">Bunn et al., 2018</xref>): body temperature and sleep quality.</p>
      <p>Tquery defines operators over tree-like data structures, formally defined in ‘Data structures: trees and paths’. To keep this example compact, it is sufficient that the reader has some familiarity with data formats like XML (<xref rid="ref-14" ref-type="bibr">Bray et al., 2000</xref>) and JSON (<xref rid="ref-21" ref-type="bibr">Crockford, 2006</xref>) documents. Specifically, here we use a subset of the JSON format where a tree is represented by a pair of brackets {} which enclose a set of ordered pairs, each linking a label (unquoted) to an array, whose content is enclosed within square brackets [ ] . Arrays can either contain trees or primitive values (string, integer, <italic toggle="yes">etc</italic>.).</p>
      <p>As an example of the format above, we report in Listing 1 code snippets exemplifying the shape of the two data structures used in the example: the first (Lines 2–5) carries the temperature and heart-rates, the second holds the sleep logs (Lines 7–16) (<xref rid="ref-63" ref-type="bibr">Thurman et al., 2018</xref>).</p>
      <p>At Lines 2–5, for each <monospace>—</monospace> date— we have an array of detected temperatures (<monospace>—</monospace> t—) and heart-rates (<monospace>—</monospace> hr—). At Lines 7–16, to each year (<monospace>—</monospace> y—) it corresponds an array of monthly (<monospace>—</monospace> M—) measures, to a month (<monospace>—</monospace> m—), an array of daily (<monospace>—</monospace> D—) logs, and to a day (<monospace>—</monospace> d—), an array of logs (<monospace>—</monospace> L—), each representing a sleep session with its start (<monospace>—</monospace> s—), end(<monospace>—</monospace> e—), and quality (<monospace>—</monospace> q—).</p>
      <preformat xml:space="preserve" position="float"> 
 
 
 _______________________________________________________________________________________________________________________ 
 
 1 //  representation  of  the  tmp  data  structure 
  2 [ { date : [ 20201127 ] , t : [ 37 ] , hr : [ 64 ] } , 
  3  { date : [ 20201128 ] , t : [ 36 ] , hr : [ 66 ] } , 
  4  { date : [ 20201129 ] , t : [ 36 ] , hr : [ 65 ] } , 
  5  { date : [ 20201130 ] , t : [ 37 ] , hr : [ 67 ] } ] 
  6 //  representation  of  the  sl  data  structure 
  7 [ { y : [ 2020 ] , 
  8  M : [ { m : [ 11 ] , 
  9  D : [ { d : [ 27 ] , L : [ { s : [ ' 23:33 ' ] , e : [ ' 07:04 ' ] , q : [ ' poor ' ] 
  } ] } , 
  10  { d : [ 28 ] , L : [ { s : [ ' 21:13 ' ] , e : [ ' 09:34 ' ] , q : [ ' good ' 
  ] } ] } , 
  11  { d : [ 29 ] , L : [ { s : [ ' 21:01 ' ] , e : [ ' 03:12 ' ] , q : [ ' good ' 
  ] } , 
  12  { s : [ ' 03:36 ' ] , e : [ ' 09:58 ' ] , q : [ ' good ' 
  ] } ] } , 
  13  { d : [ 30 ] , L : [ { s : [ ' 20:33 ' ] , e : [ ' 01:14 ' ] , q : [ ' poor ' 
  ] } , 
  14  { s : [ ' 01:32 ' ] , e : [ ' 06:15 ' ] , q : [ ' good ' 
  ] } ] } 
  15  ] } ] } ] 
  16 } ] 
 Listing 1: Snippets of biometric (Lines 2–5) and sleep logs (Lines 7–16) data.    </preformat>
      <p>To implement the algorithm for detecting encephalopathy, we need to integrate with two functionalities provided by the Hospital IT infrastructure: <monospace>—</monospace> detectFever— and <monospace>—</monospace> detectEncephalopathy—. The former accepts data of the shape:</p>
      <preformat xml:space="preserve" position="float"> 
 
 
_______________________________________________________________________________________________________________________ 
 
   [ { t : [ 36 , 37 , 38 ] , patient_id : [ ' xyz '  ] } ] 
where t contains the array of measured temperatures in the last three 
days and patient_id the identifier for the patient in the Hospital 
IT infrastructure.  The latter accepts the format: 
 
 [ { temperatures : [ 36 , 37 , 38 ] , patient_id : [ ' xyz '  ] , 
 quality : [ ' good ' , ' poor '  ] } ]    </preformat>
      <p>where <monospace>—</monospace> temperatures— contains the measured temperatures in the last three days, <monospace>—</monospace> patient˙id— contains the identifier for the patient in the Hospital IT infrastructure (essentially, this is the same data found, respectively, under <monospace>—</monospace> t— and <monospace>—</monospace> patient˙id— issued to the <monospace>—</monospace> detectFever— functionality), and <monospace>—</monospace> quality— contains the recorded quality of sleep in the last two days.</p>
      <p>Our focus in the last part of this section is to describe—by means of the Tquery operators—a program that manipulates the biometric and sleep logs data in Listing 1 to integrate the functionalities <monospace>—</monospace> detectFever— and <monospace>—</monospace> detectEncephalopathy— and implement the diagnostic algorithm.</p>
    </sec>
    <sec>
      <title>An overview of the Tquery operators</title>
      <p>Before presenting the diagnostic algorithm, we give a brief and informal description of the shape and effect of each Tquery operator (presented formally in ‘The Tquery Formalisation’), as a reference to integrate the description of the example.</p>
      <list list-type="simple" id="list-3">
        <list-item>
          <label> •</label>
          <p>the <italic toggle="yes">match</italic> operator <italic toggle="yes">μ</italic>, given an array and a match criterion returns the elements of the array that satisfy the criterion, in their relative order from the input;</p>
        </list-item>
        <list-item>
          <label> •</label>
          <p>the <italic toggle="yes">unwind</italic> operator <italic toggle="yes">ω</italic> takes as inputs an array and a path <italic toggle="yes">p</italic>.<xref rid="fn-1" ref-type="fn"><sup>1</sup></xref>
<fn id="fn-1"><label>1</label><p>Intuitively, a path is a sequence of node labels of the shape <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i001.jpg"/><tex-math id="tex-ieqn-4">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{A.B.C}$\end{document}</tex-math><mml:math id="mml-ieqn-4" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>A</mml:mi><mml:mo>.</mml:mo><mml:mi>B</mml:mi><mml:mo>.</mml:mo><mml:mi>C</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>. Formally, cf. ‘Data structures: trees and paths’.</p></fn>The result of the application is a new array containing the “unfolding” of the input array under the path, <italic toggle="yes">i.e.,</italic> where we take each element <italic toggle="yes">e</italic> from the input array, we find all values under <italic toggle="yes">p</italic> in <italic toggle="yes">e</italic> and, for each value, we include in the new array a copy of <italic toggle="yes">e</italic> except it holds only that single value under <italic toggle="yes">p</italic>;</p>
        </list-item>
        <list-item>
          <label> •</label>
          <p>the <italic toggle="yes">project</italic> operator <italic toggle="yes">π</italic>, given an array and a projection expression, it returns a copy of the original array with each element updated by the projection expression. Projection expressions can move/rename and remove sub-parts from the elements, as well as insert new ones;</p>
        </list-item>
        <list-item>
          <label> •</label>
          <p>the <italic toggle="yes">group</italic> operator <italic toggle="yes">γ</italic> takes as inputs an array and two lists of paths: a grouping list and an aggregation list. The result of the application is a new array where each element has two properties: <italic toggle="yes">(i)</italic> it includes the combinations of distinct values from the set of values found under the grouping paths among the elements in the input array; <italic toggle="yes">(ii)</italic> it aggregates all the values found under the aggregation paths among the elements in the input array which have been grouped by the same combination of values;</p>
        </list-item>
        <list-item>
          <label> •</label>
          <p>the <italic toggle="yes">lookup</italic> operator <italic toggle="yes">λ</italic> joins two arrays, a “source” and an “adjunct” one, according to the correspondence of values in their elements with respect to a source path and an adjunct path. Besides those inputs, the operator requires a “destination” path. The application of the operator returns a new array that contains all the elements resulting from merging each element <italic toggle="yes">e</italic><sub><italic toggle="yes">s</italic></sub> in the source array with the elements <italic toggle="yes">e</italic><sub><italic toggle="yes">a</italic></sub> in the adjunct array such that <italic toggle="yes">e</italic><sub><italic toggle="yes">s</italic></sub> and <italic toggle="yes">e</italic><sub><italic toggle="yes">a</italic></sub> hold the same values under the respective source and adjunct paths. The resulting array contains all the elements from the source, each updated to include, under the provided destination path, all path-matching elements from the adjunct array.</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>Implementing the diagnostic algorithm with Jolie and Tquery</title>
      <p>Here, on the data structures and operators described above, we define a Jolie microservice (reported in Listing 2), which implements the handling of the data and the workflow of the use-case diagnostic algorithm.</p>
      <p>The example is broad enough to let us illustrate all the operators in Tquery and to represent a real-world workflow, where, besides implementing the algorithm of interest, we manipulate the data for system integration (<italic toggle="yes">e.g.</italic>, by reshaping the data structures to fit the service APIs we need to invoke). Note that, while in Listing 2 we hard-code some data (<italic toggle="yes">e.g.</italic>, integers representing dates like <monospace>—</monospace> 20201128—) for presentation purposes, we would normally use parametrised variables.</p>
      <p>Since we follow a formalisation-first approach to present Tquery, in Listing 2 we interleave runnable Jolie code with the formal definition of the application of the involved Tquery operators. When doing so, we use the highlighted, algorithmic notation ⋯←⋯. After having defined the formal semantics of the operators in ‘The Tquery Formalisation’, we will present the actual implementation of the example in ‘Implementation’ using our implementation of the Tquery operators in Jolie.</p>
      <p>Note also that, while variables of the form <monospace>—</monospace> patientData— and <monospace>—</monospace> tmp— in Listing 2 conveniently resemble variable symbols as found in Java or C, they are actually path applications on the state of a Jolie program, which is a tree. Hence, the meaning of <monospace>—</monospace> tmp— reads “get the structure pointed by path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i002.jpg"/><tex-math id="tex-ieqn-18">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{tmp}$\end{document}</tex-math><mml:math id="mml-ieqn-18" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> in the current state of the program”. In the example, when assigning and passing values, we use the notation <monospace>—</monospace> a— and <monospace>—</monospace> b.c— to indicate the path traversal and retrieval of the structure pointed by the respective paths <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i003.jpg"/><tex-math id="tex-ieqn-19">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{a}$\end{document}</tex-math><mml:math id="mml-ieqn-19" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i004.jpg"/><tex-math id="tex-ieqn-20">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{b.c}$\end{document}</tex-math><mml:math id="mml-ieqn-20" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>b</mml:mi><mml:mo>.</mml:mo><mml:mi>c</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> on the state of the Jolie program. We instead use the notation <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i005.jpg"/><tex-math id="tex-ieqn-21">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{a}$\end{document}</tex-math><mml:math id="mml-ieqn-21" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i006.jpg"/><tex-math id="tex-ieqn-22">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{b.c}$\end{document}</tex-math><mml:math id="mml-ieqn-22" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>b</mml:mi><mml:mo>.</mml:mo><mml:mi>c</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> to indicate the passing of paths as parameters of Tquery operators.</p>
      <p>We now describe the diagnostic algorithm and how we use the Tquery operators to implement it.</p>
      <p>In Listing 2, at Line 1 we find the Jolie code of a request to an external service, provided by the <monospace>HospitalIT</monospace> infrastructure. The service offers the functionality <monospace>—</monospace> getPatientPseudoID— which, given some identifying <monospace>—</monospace> patientData— (acquired earlier), provides a pseudo-anonymised identifier—needed to treat sensitive health data—saved in variable <monospace>—</monospace> pseudoID—.</p>
      <p>At Line 2 we retrieve in the variable <monospace>—</monospace> credentials— the keys to access the physiological sensors of the patient to obtain the biometric data (Listing 1, Lines 1–5) from the <monospace>SmartWatch</monospace> of the patient, by invoking the functionality <monospace>—</monospace> getMotionAndTemperature— and storing the result in <monospace>—</monospace> tmp—.</p>
      <p>At Lines 3–5 we use the Tquery operators <italic toggle="yes">μ</italic>, <italic toggle="yes">γ</italic>, and <italic toggle="yes">π</italic> to extract the recorded temperatures of the patient in the last 3 days/72 h. At Line 3 we use the match operator <italic toggle="yes">μ</italic> to filter all the entries of the biometric data, keeping only those of the last 72 hours/3 days. At Line 3, we aggregate the result of the <italic toggle="yes">μ</italic> (which replaced the previous value under <monospace>—</monospace> tmp—) under the path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i007.jpg"/><tex-math id="tex-ieqn-28">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{t}$\end{document}</tex-math><mml:math id="mml-ieqn-28" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and discard the others. At Line 5, we use the project operator to include in <monospace>—</monospace> tmp— the identifier of the patient, under <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i008.jpg"/><tex-math id="tex-ieqn-29">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{patient\text{_}id}$\end{document}</tex-math><mml:math id="mml-ieqn-29" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mtext>_</mml:mtext><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
      <p>At Line 6, we call the external functionality <monospace>—</monospace> detectFever— to analyse the temperatures and check if the patient manifested any fever, storing the result in <monospace>—</monospace> hasFever—.</p>
      <preformat xml:space="preserve" position="float"> 
 
 
  _____________________________________________________________________________________________________________________ 
 
  1 getPatientPseudoID @ HospitalIT ( patientData  ) ( pseudoID  ) 
   2 getMotionAndTemperature @ SmartWatch ( credentials  ) ( tmp  ) 
   3 tmp ← μ ( tmp , ( date  =20201128 ∨ date  =20201129 ∨ date  =20201130) 
   ) 
   4 tmp ← γ ( tmp , ( t  ) , () ) 
   5 tmp ← π ( tmp , ( t  , pseudoID  〈〉 patient id  ) ) 
   6 detectFever @ HospitalIT ( tmp  ) ( hasFever  ) 
   7 if ( hasFever  ) { 
  8  getSleepPatterns @ SmartPhone ( credentials  ) ( sl  ) 
   9  sl ← ω ( sl , M.D.L  ) 
   10  sl ← π ( sl , ( y  〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , 
   M.D.L.q  〈〉 quality  ) ) 
   11  sl ← μ ( sl , ( year  =2020 ∧ month  =11 ∧ ( day  =29 ∨ day  =30) ) ) 
   12  sl ← γ ( sl , ( quality  ) , () ) 
   13  sl ← π ( sl , ( quality  , pseudoID  〈〉 patient id  ) ) 
   14  bs ← λ ( sl , patient id  , tmp , patient id  , temperatures  ) 
   15  bs ← π ( bs , ( quality  , patient id  , temperatures.t  〈〉 temperatures  ) ) 
   16  detectEncephalopathy @ HospitalIT ( bs  ) 
   17 } 
      Listing 2: Snippet implementing the diagnostic algorithm.    </preformat>
      <p>After the analysis on the temperatures, <monospace>—</monospace> if— the patient <monospace>—</monospace> hasFever— (Line 7), we continue testing for lethargy. To do that, at Line 8 we follow the same strategy described for Line 2 to pass the <monospace>—</monospace> credentials— to the functionality <monospace>—</monospace> getSleepPatterns—, used to collect the sleep logs of the patient from her <monospace>—</monospace> SmartPhone— in <monospace>—</monospace> sl—.</p>
      <p>Then, since the sleep logs are nested under years, months, and days, to filter the logs relative to the last 48 hours/2 days, we first flatten the structure through the unwind <italic toggle="yes">ω</italic> operator applied on the path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i009.jpg"/><tex-math id="tex-ieqn-31">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L}$\end{document}</tex-math><mml:math id="mml-ieqn-31" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> (Line 9). For each nested node (separated by the dot in the path), <italic toggle="yes">ω</italic> generates a new data structure for each element in the array reached by that node. Concretely, the array returned by the <italic toggle="yes">ω</italic> operator at Line 9 contains each sleep log associated with the full date of the recording (year, month, and day), as shown below.</p>
      <preformat xml:space="preserve" position="float"> 
 
 
   _______________________________________________________________________________________________________________________ 
 
   [ { y : [ 2020 ] , M : [ { m : [ 11 ] , D : [ { d : [ 27 ] , L : [ { s : [ ' 23:33 ' ] , ... } ] } ] } ] 
  } , 
  { y : [ 2020 ] , M : [ { m : [ 11 ] , D : [ { d : [ 28 ] , L : [ { s : [ ' 21:13 ' ] , ... } ] } ] } ] 
  } , 
  { y : [ 2020 ] , M : [ { m : [ 11 ] , D : [ { d : [ 29 ] , L : [ { s : [ ' 21:01 ' ] , ... } ] } ] } ] 
  } , 
  { y : [ 2020 ] , M : [ { m : [ 11 ] , D : [ { d : [ 29 ] , L : [ { s : [ ' 03:36 ' ] , ... } ] } ] } ] 
  } , 
  ... ]    </preformat>
      <p>Given the new shape of <monospace>—</monospace> sl—, at Line 10 we modify the data structure with the project operator <italic toggle="yes">π</italic> to simplify the subsequent commands: we rename the node <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i010.jpg"/><tex-math id="tex-ieqn-35">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{y}$\end{document}</tex-math><mml:math id="mml-ieqn-35" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> to <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i011.jpg"/><tex-math id="tex-ieqn-36">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-36" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, we move and rename the node <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i012.jpg"/><tex-math id="tex-ieqn-37">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.m}$\end{document}</tex-math><mml:math id="mml-ieqn-37" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>m</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> to <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i013.jpg"/><tex-math id="tex-ieqn-38">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-38" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> (bringing it at the same nesting level of <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i014.jpg"/><tex-math id="tex-ieqn-39">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-39" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>); similarly, we move <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i015.jpg"/><tex-math id="tex-ieqn-40">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.d}$\end{document}</tex-math><mml:math id="mml-ieqn-40" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, renaming it <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i016.jpg"/><tex-math id="tex-ieqn-41">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-41" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and we move <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i017.jpg"/><tex-math id="tex-ieqn-42">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L.q}$\end{document}</tex-math><mml:math id="mml-ieqn-42" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi><mml:mo>.</mml:mo><mml:mi>q</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> (the log of the quality of the sleep), renaming it <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i018.jpg"/><tex-math id="tex-ieqn-43">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-43" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>—<inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i019.jpg"/><tex-math id="tex-ieqn-44">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L.s}$\end{document}</tex-math><mml:math id="mml-ieqn-44" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi><mml:mo>.</mml:mo><mml:mi>s</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i020.jpg"/><tex-math id="tex-ieqn-45">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L.e}$\end{document}</tex-math><mml:math id="mml-ieqn-45" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi><mml:mo>.</mml:mo><mml:mi>e</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, not included in the parameters of the projection, are discarded.</p>
      <p>On the obtained structure, we filter the sleep logs relative to the last 48 h with the match operator at Line 11.</p>
      <p>At Line 12 we use the grouping operator <italic toggle="yes">γ</italic> to aggregate the <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i021.jpg"/><tex-math id="tex-ieqn-47">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-47" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> of the sleep sessions recorded in the same day and discarding the nodes <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i022.jpg"/><tex-math id="tex-ieqn-48">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-48" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i023.jpg"/><tex-math id="tex-ieqn-49">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-49" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i024.jpg"/><tex-math id="tex-ieqn-50">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-50" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
      <p>At Line 13 we project within the <monospace>—</monospace> sl— data structure the <monospace>—</monospace> pseudoID— of the patient under node <italic toggle="yes">patient</italic>_<italic toggle="yes">id</italic>. That value is used at Line 14 to join, with the lookup operator <italic toggle="yes">λ</italic>, the obtained sleep logs with the previous values of temperatures (<monospace>—</monospace> tmp—). Lastly, we prepare the data structure to be submitted for analysis. We do this at Line 15 by keeping the paths <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i025.jpg"/><tex-math id="tex-ieqn-53">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-53" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i026.jpg"/><tex-math id="tex-ieqn-54">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{patient\text{_}id}$\end{document}</tex-math><mml:math id="mml-ieqn-54" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mtext>_</mml:mtext><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> in <monospace>—</monospace> bs— and by moving the nested temperatures (<inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i027.jpg"/><tex-math id="tex-ieqn-55">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{temperatures.t}$\end{document}</tex-math><mml:math id="mml-ieqn-55" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>u</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mo>.</mml:mo><mml:mi>t</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>) under the path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i028.jpg"/><tex-math id="tex-ieqn-56">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{temperatures}$\end{document}</tex-math><mml:math id="mml-ieqn-56" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>u</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>—this is required by the interface of <monospace>—</monospace> detectEncephalopathy—, which we invoke passing the resulting (<monospace>—</monospace> bs—) data structure.</p>
    </sec>
  </sec>
  <sec>
    <title>The Tquery Formalisation</title>
    <p>In this section, we report the formalisation of Tquery. Besides providing a general, mathematical reference, the formalisation guides the implementation of our Jolie framework, presented in ‘Implementation’. Tquery is inspired by MQuery (<xref rid="ref-13" ref-type="bibr">Botoeva et al., 2018</xref>), a sound variant of the MongoDB Aggregation Framework (<xref rid="ref-45" ref-type="bibr">MongoDB Inc., 2018a</xref>); the most popular query language for NoSQL data handling.</p>
    <p>In our formal development, we favour a theory-to-practice strategy to avoid inconsistent or counter-intuitive query behaviours, which is one of the significant drawbacks of the MongoDB Aggregation Framework implementation (<xref rid="ref-13" ref-type="bibr">Botoeva et al., 2018</xref>). Moreover, we consider the formalisation as a blueprint for implementors and thus we strive for a balance between abstraction and technical involvement: <italic toggle="yes">(i)</italic> we adopt constructive semantics definitions rather than declarative ones, since the former are more amenable to imperative implementations, and <italic toggle="yes">(ii)</italic> we define our semantics on trees rather than on sets (as done in <xref rid="ref-13" ref-type="bibr">Botoeva et al. (2018)</xref>), since the former is the data structure handled by the developers and their users.</p>
    <sec>
      <title>Data structures: trees and paths</title>
      <p>We start by defining trees and the primitives on which we define the semantics of Tquery.</p>
      <p>We denote trees with <italic toggle="yes">t</italic>. A tree contains two elements: (i) a <italic toggle="yes">root</italic> value that we denote with <italic toggle="yes">b</italic>, which holds basic values (Booleans, integers, and strings) or the null value <italic toggle="yes">υ</italic>; (ii) a set of pairs $~{ k:a~} $, where each pair associates a <italic toggle="yes">key k</italic> to an <italic toggle="yes">array</italic> of trees $a$. Formally:</p>
      <p>
        <disp-formula id="NONUM-d2e1539">
          <alternatives>
            <graphic xlink:href="peerj-cs-08-1037-e001.jpg" position="float"/>
            <tex-math id="tex-NONUM-d2e1539">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}t\,::=\,b~\text{\{}{k}_{i}:{a}_{i}~\text{\}}\qquad \qquad a\,::=\,~\text{[}{t}_{1},\ldots ,{t}_{n}~\text{]} \end{eqnarray*}\end{document}</tex-math>
            <mml:math id="mml-NONUM-d2e1539" overflow="scroll">
              <mml:mstyle displaystyle="true">
                <mml:mi>t</mml:mi>
                <mml:mo>:</mml:mo>
                <mml:mo>:</mml:mo>
                <mml:mo>=</mml:mo>
                <mml:mi>b</mml:mi>
                <mml:mspace width="1em" class="nbsp"/>
                <mml:mtext>{</mml:mtext>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>k</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>:</mml:mo>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>a</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>i</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mspace width="1em" class="nbsp"/>
                <mml:mtext>}</mml:mtext>
                <mml:mi>a</mml:mi>
                <mml:mo>:</mml:mo>
                <mml:mo>:</mml:mo>
                <mml:mo>=</mml:mo>
                <mml:mspace width="1em" class="nbsp"/>
                <mml:mtext>[</mml:mtext>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>t</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mn>1</mml:mn>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>,</mml:mo>
                <mml:mo>…</mml:mo>
                <mml:mo>,</mml:mo>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>t</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>n</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mspace width="1em" class="nbsp"/>
                <mml:mtext>]</mml:mtext>
              </mml:mstyle>
            </mml:math>
          </alternatives>
        </disp-formula>
      </p>
      <p>We indicate with <italic toggle="yes">k</italic>(<italic toggle="yes">t</italic>) the extraction of the array pointed by the label <italic toggle="yes">k</italic> in <italic toggle="yes">t</italic>: if <italic toggle="yes">k</italic> is present in <italic toggle="yes">t</italic> we retrieve the related array, otherwise we return the null array <italic toggle="yes">α</italic> (different from the empty array, instead denoted with [ ] ). Formally: <disp-formula id="NONUM-d2e1579"><alternatives><graphic xlink:href="peerj-cs-08-1037-e002.jpg" position="float"/><tex-math id="tex-NONUM-d2e1579">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}k(b~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i})= \left\{ \begin{array}{@{}ll@{}} \displaystyle a &amp;\displaystyle \text{if}(k:a)\in ~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i}\\ \displaystyle \alpha  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e1579" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>k</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>a</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mi>a</mml:mi></mml:mfenced></mml:mrow><mml:mo>∈</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>α</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
      <p>We assume the range of a given array <italic toggle="yes">a</italic> to run from the minimum index (one) to the maximum, that corresponds to its cardinality, denoted with <monospace>#</monospace><italic toggle="yes">a</italic>. We indicate the extraction of the tree <italic toggle="yes">t</italic> at index <italic toggle="yes">i</italic> in array <italic toggle="yes">a</italic> with the index notation <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>], <italic toggle="yes">i.e.,</italic> <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] = <italic toggle="yes">t</italic>. In case <italic toggle="yes">a</italic> contains an element at index <italic toggle="yes">i</italic> we retrieve it, otherwise, we retrieve the null tree, denoted with <italic toggle="yes">τ</italic>. Formally: <disp-formula id="NONUM-d2e1540"><alternatives><graphic xlink:href="peerj-cs-08-1037-e003.jpg" position="float"/><tex-math id="tex-NONUM-d2e1540">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}a[i]= \left\{ \begin{array}{@{}ll@{}} \displaystyle {t}_{i} &amp;\displaystyle \text{if}a=~\text{[}{t}_{1},\ldots ,{t}_{n}~\text{]}\wedge 1\leq i\leq n\\ \displaystyle \tau  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e1540" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>i</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>∧</mml:mo><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>≤</mml:mo><mml:mi>n</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>τ</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
      <p>We define the array concatenation operator, denoted with ::, such that  [<italic toggle="yes">t</italic><sub>1</sub>, …, <italic toggle="yes">t</italic><sub><italic toggle="yes">n</italic></sub> ] =  [<italic toggle="yes">t</italic><sub>1</sub> ]::…:: [<italic toggle="yes">t</italic><sub><italic toggle="yes">n</italic></sub> ]. Given two arrays <italic toggle="yes">a</italic>′ and <italic toggle="yes">a</italic><sup>′′</sup>, the concatenation <italic toggle="yes">a</italic>′::<italic toggle="yes">a</italic><sup>′′</sup> returns an array <italic toggle="yes">a</italic> of size <monospace>#</monospace><italic toggle="yes">a</italic> = <monospace>#</monospace><italic toggle="yes">a</italic>′ + <monospace>#</monospace><italic toggle="yes">a</italic><sup>′′</sup> where elements <italic toggle="yes">a</italic>[1], …, <italic toggle="yes">a</italic>[<monospace>#</monospace><italic toggle="yes">a</italic>′] correspond point-wise to elements <italic toggle="yes">a</italic>′[1], …, <italic toggle="yes">a</italic>′[<monospace>#</monospace><italic toggle="yes">a</italic>′] and elements <italic toggle="yes">a</italic>[<monospace>#</monospace><italic toggle="yes">a</italic>′ + 1], …, <italic toggle="yes">a</italic>[<monospace>#</monospace><italic toggle="yes">a</italic>′ + <monospace>#</monospace><italic toggle="yes">a</italic><sup>′′</sup>] correspond point-wise to elements <italic toggle="yes">a</italic><sup>′′</sup>[1], …, <italic toggle="yes">a</italic><sup>′′</sup>[<monospace>#</monospace><italic toggle="yes">a</italic><sup>′′</sup>].</p>
      <p>We define paths to express tree traversal, ranged over by <italic toggle="yes">p</italic>. Paths are concatenations of expressions, indicated with <italic toggle="yes">e</italic> (which we omit to define since orthogonal to Tquery), closed by the sequence termination <italic toggle="yes">ɛ</italic>. Formally: <disp-formula id="NONUM-d2e2260"><alternatives><graphic xlink:href="peerj-cs-08-1037-e004.jpg" position="float"/><tex-math id="tex-NONUM-d2e2260">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}p\,::=\,\underline{e.}p\;\mid \;. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e2260" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>p</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:munder class="mml-underline"><mml:mrow><mml:mi>e</mml:mi><mml:mo>.</mml:mo></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mi>p</mml:mi><mml:mo>∣</mml:mo><mml:mi>ɛ</mml:mi><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></disp-formula>When possible, we omit to indicate sequence terminations <italic toggle="yes">ɛ</italic> in paths and we slightly abuse the notation by indicating the components of paths like <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i029.jpg"/><tex-math id="tex-ieqn-98">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{e.}p$\end{document}</tex-math><mml:math id="mml-ieqn-98" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>e</mml:mi><mml:mo>.</mml:mo></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula> as <italic toggle="yes">e</italic>.<italic toggle="yes">p</italic> to keep a lightweight notation—this does not make the notation ambiguous since path concatenation is always contextually distinct.</p>
      <p>The application of a path <italic toggle="yes">p</italic> to a tree <italic toggle="yes">t</italic>, written [[<italic toggle="yes">p</italic>]]<sup><italic toggle="yes">t</italic></sup>, returns an array that contains the sub-trees reached traversing <italic toggle="yes">t</italic> following <italic toggle="yes">p</italic>. To define [[<italic toggle="yes">p</italic>]]<sup><italic toggle="yes">t</italic></sup>, we introduce the notation <italic toggle="yes">e</italic>↓<italic toggle="yes">k</italic>, read “<italic toggle="yes">e</italic> evaluates to <italic toggle="yes">k</italic>”, and use it to indicate that the evaluation of the expression <italic toggle="yes">e</italic> in a path <italic toggle="yes">p</italic> results in the label <italic toggle="yes">k</italic>. Path application [[<italic toggle="yes">p</italic>]]<sup><italic toggle="yes">t</italic></sup> neglects array indexes, <italic toggle="yes">i.e.,</italic> for <italic toggle="yes">p</italic> = <italic toggle="yes">e</italic>.<italic toggle="yes">p</italic>′, such that <italic toggle="yes">e</italic>↓<italic toggle="yes">k</italic>, we apply the sub-path <italic toggle="yes">p</italic>′ to all trees in the array pointed by <italic toggle="yes">k</italic> in <italic toggle="yes">t</italic> and concatenate all their results keeping their relative order—the resulting array can concatenate null arrays <italic toggle="yes">α</italic> too, as a result of applying the path on some (sub)trees that do not contain all nodes present in <italic toggle="yes">p</italic>. <disp-formula id="NONUM-d2e1541"><alternatives><graphic xlink:href="peerj-cs-08-1037-e005.jpg" position="float"/><tex-math id="tex-NONUM-d2e1541">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}[ [\,p\,] ]^{t}= \left\{ \begin{array}{@{}ll@{}} \displaystyle [ [\,{p}^{{^{\prime}}}\,] ]^{{t}_{1}}::\ldots ::[ [\,{p}^{{^{\prime}}}\,] ]^{{t}_{n}} &amp;\displaystyle \text{if}p=e.{p}^{{^{\prime}}}\wedge e \downarrow  k\wedge k(t)=~\text{[}{t}_{1},\ldots ,{t}_{n}~\text{]}\\ \displaystyle ~\text{[}t~\text{]} &amp;\displaystyle \text{if}p=\\ \displaystyle \alpha  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e1541" overflow="scroll"><mml:mstyle displaystyle="true"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msup><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mo>…</mml:mo><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msup><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>e</mml:mi><mml:mo>.</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∧</mml:mo><mml:mi>e</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>↓</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>k</mml:mi><mml:mo>∧</mml:mo><mml:mi>k</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>t</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>ɛ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>α</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
      <p>We illustrate the path application with the example below, where <italic toggle="yes">t</italic><sub>1</sub> = sl[1], <italic toggle="yes">i.e.,</italic> it is the first (and only) element in the <monospace>—</monospace> sl— data structure represented at Lines 7–16 of Listing 1. From now on, in the examples, we adopt the formal representation of trees defined at the beginning of the section.</p>
      <preformat xml:space="preserve" position="float"> 
 
 
__________________________________________________________________________________________________ 
 
  [[M.m.D.d]]t1 [27{}, 28{}, 29{}, 30{}]    </preformat>
      <p>In the remainder, to contract empty and null arrays, we assume the following structural equivalences when we perform array concatenations. <disp-formula id="NONUM-d2e2837"><alternatives><graphic xlink:href="peerj-cs-08-1037-e006.jpg" position="float"/><tex-math id="tex-NONUM-d2e2837">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\alpha \equiv \alpha ::\alpha \alpha ::[]\equiv []::\alpha \equiv []::[]\equiv []\alpha ::a\equiv a::\alpha \equiv a::[]\equiv []::a\equiv a \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e2837" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>α</mml:mi><mml:mo>≡</mml:mo><mml:mi>α</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>α</mml:mi><mml:mi>α</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>≡</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>α</mml:mi><mml:mo>≡</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>≡</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mi>α</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>a</mml:mi><mml:mo>≡</mml:mo><mml:mi>a</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>α</mml:mi><mml:mo>≡</mml:mo><mml:mi>a</mml:mi><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>≡</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>a</mml:mi><mml:mo>≡</mml:mo><mml:mi>a</mml:mi></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
    </sec>
    <sec>
      <title>Tquery operators</title>
      <p>In this section, we present each Tquery operator: examples of its usage, its formal syntax, and its semantics, with examples illustrating relevant steps. For reference, we report in <xref rid="fig-1" ref-type="fig">Fig. 1</xref> the syntax of the Tquery operators: <italic toggle="yes">match</italic> (<italic toggle="yes">μ</italic>), <italic toggle="yes">unwind</italic> (<italic toggle="yes">ω</italic>), <italic toggle="yes">project</italic> (<italic toggle="yes">π</italic>), <italic toggle="yes">group</italic> (<italic toggle="yes">γ</italic>), and <italic toggle="yes">lookup</italic> (<italic toggle="yes">λ</italic>). In the syntax, <italic toggle="yes">a</italic> denotes arrays, <italic toggle="yes">b</italic> denotes primitive values, and <italic toggle="yes">p</italic>, <italic toggle="yes">q</italic>, and <italic toggle="yes">r</italic> are paths. We define the parameters of the operators with four syntactic rules: <italic toggle="yes">φ</italic> for the match, Π and <italic toggle="yes">d</italic> for the project, and Γ for the group, explained in their relative sections.</p>
      <sec>
        <title>The match operator</title>
        <disp-formula id="NONUM-d2e3026">
          <alternatives>
            <graphic xlink:href="peerj-cs-08-1037-e007.jpg" position="float"/>
            <tex-math id="tex-NONUM-d2e3026">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mu (a,\varphi )\qquad \varphi \,::=\,true\;\mid \;\exists p\;\mid \;p=a\;\mid \;{p}_{1}={p}_{2}\;\mid \;\neg \varphi \;\mid \;\varphi \;\wedge \;\varphi \;\mid \;\varphi \;\vee \;\varphi \end{eqnarray*}\end{document}</tex-math>
            <mml:math id="mml-NONUM-d2e3026" overflow="scroll">
              <mml:mstyle displaystyle="true">
                <mml:mi>μ</mml:mi>
                <mml:mrow>
                  <mml:mfenced separators="" open="(" close=")">
                    <mml:mi>a</mml:mi>
                    <mml:mo>,</mml:mo>
                    <mml:mi>φ</mml:mi>
                  </mml:mfenced>
                </mml:mrow>
                <mml:mi>φ</mml:mi>
                <mml:mo>:</mml:mo>
                <mml:mo>:</mml:mo>
                <mml:mo>=</mml:mo>
                <mml:mi>t</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mi>u</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mo>∃</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mi>a</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>p</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mn>1</mml:mn>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>p</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mn>2</mml:mn>
                  </mml:mrow>
                </mml:msub>
                <mml:mo>∣</mml:mo>
                <mml:mo>¬</mml:mo>
                <mml:mi>φ</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mi>φ</mml:mi>
                <mml:mo>∧</mml:mo>
                <mml:mi>φ</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mi>φ</mml:mi>
                <mml:mo>∨</mml:mo>
                <mml:mi>φ</mml:mi>
              </mml:mstyle>
            </mml:math>
          </alternatives>
        </disp-formula>
        <p>The purpose of the <italic toggle="yes">match</italic> operator is to select trees in an array <italic toggle="yes">a</italic> according to a criterion <italic toggle="yes">φ</italic>, which can be (from left to right): (i) the Boolean truth, (ii) the existence of a path <italic toggle="yes">p</italic> in <italic toggle="yes">t</italic>, (iii) the equality between the application of a path <italic toggle="yes">p</italic> on <italic toggle="yes">t</italic> and a given array <italic toggle="yes">a</italic>, (iv) the equality between the applications of two paths <italic toggle="yes">p</italic><sub>1</sub> and <italic toggle="yes">p</italic><sub>2</sub> on <italic toggle="yes">t</italic>, and the logic connectives (v) negation, (vi) conjunction, and (vii) disjunction.</p>
        <fig position="float" id="fig-1">
          <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-1</object-id>
          <label>Figure 1</label>
          <caption>
            <title>Syntax of Tquery.</title>
          </caption>
          <graphic xlink:href="peerj-cs-08-1037-g001" position="float"/>
        </fig>
        <p><bold>Example</bold> Here and in the following sections, we draw our examples from Listing 2. There, we see the match operator used twice: the first at Line 3 and the second at Line 11. Here, we focus on the example at Line 3. We comment the execution of Line 11 in ‘The group operator’, since we use it to filter out the unnecessary values from the <monospace>—</monospace> sl— data structure before the application of the <italic toggle="yes">group</italic>.</p>
        <p>At Line 3, we use a match to filter <monospace>—</monospace> tmp— from those trees that do not correspond to the time range of interest. For convenience, we report Line 3 of Listing 2 in the snippet below.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  ____________________________________________________________________________________________________________ 
 
  3 tmp ← μ ( tmp , ( date  =20201128 ∨ date  =20201129 ∨ date  =20201130)  )    </preformat>
        <p>The execution takes as input the data structure <monospace>—</monospace> tmp— presented in Listing 1 and assigns to it the resulting data structure:</p>
        <p>
          <preformat xml:space="preserve" position="float"> 
 
 
  ______________________________________________________________________________________________________________________________________ 
 
  [ υ { date : [ 20201128 { } ] , t : [ 36 { } ] , hr : [ 66 { } ] } , 
  υ { date : [ 20201129 { } ] , t : [ 36 { } ] , hr : [ 65 { } ] } , 
   υ { date : [ 20201130 { } ] , t : [ 37 { } ] , hr : [ 67 { } ] } ]    </preformat>
        </p>
        <p><bold>Semantics</bold> When applied to an array <italic toggle="yes">a</italic>, the match operator returns a new array in the shape of <italic toggle="yes">a</italic> but including only its elements that satisfy <italic toggle="yes">φ</italic>. If no element matches the criterion (and also in the case that <italic toggle="yes">a</italic> = <italic toggle="yes">α</italic>), the operator returns an empty array [ ] . <disp-formula id="NONUM-d2e3027"><alternatives><graphic xlink:href="peerj-cs-08-1037-e008.jpg" position="float"/><tex-math id="tex-NONUM-d2e3027">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mu (\alpha ,\varphi )=[] \mu ([t]::a,\varphi )= \left\{ \begin{array}{@{}l@{}} \displaystyle [t]::\mu (a,\varphi )  &amp; \text{if}t\models \varphi \\ \displaystyle \mu (a,\varphi )  &amp; \text{if}\mathtt{#}a\gt 0\\ \displaystyle []  &amp; \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e3027" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>α</mml:mi><mml:mo>,</mml:mo><mml:mi>φ</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mspace width="20.00003pt"/><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>φ</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>φ</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/><mml:mtext>if</mml:mtext><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:mi>φ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>φ</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/><mml:mtext>if</mml:mtext><mml:mi mathvariant="monospace">#</mml:mi><mml:mi>a</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mrow><mml:mfenced separators="" open="[" close="]"/></mml:mrow><mml:mspace width="10.00002pt"/><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>The semantics of <italic toggle="yes">t</italic>⊧<italic toggle="yes">φ</italic> is defined by the Boolean expressions below. <disp-formula id="NONUM-d2e3028"><alternatives><graphic xlink:href="peerj-cs-08-1037-e009.jpg" position="float"/><tex-math id="tex-NONUM-d2e3028">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}t\models \varphi \text{holds iff} \left\{ \begin{array}{@{}l@{}} \displaystyle \varphi =true \\ \displaystyle \varphi =(\exists p)~\wedge ~[ [\,p\,] ]^{t}\not = \alpha  \\ \displaystyle \varphi =(p=a)~\wedge ~[ [\,p\,] ]^{t}=a \\ \displaystyle \varphi =({p}_{1}={p}_{2})~\wedge ~[ [\,{p}_{1}\,] ]^{t}=[ [\,{p}_{2}\,] ]^{t} \\ \displaystyle \varphi =(\neg {\varphi }^{{^{\prime}}})~\wedge ~t\not \models {\varphi }^{{^{\prime}}} \\ \displaystyle \varphi =({\varphi }_{1}\wedge {\varphi }_{2})~\wedge ~(t\models {\varphi }_{1}~\wedge ~t\models {\varphi }_{2}) \\ \displaystyle \varphi =({\varphi }_{1}\vee {\varphi }_{2})~\wedge ~(t\models {\varphi }_{1}~\vee ~t\models {\varphi }_{2})  \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e3028" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:mi>φ</mml:mi><mml:mtext>holds iff</mml:mtext><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mo>∃</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>≠</mml:mo><mml:mi>α</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>a</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mi>a</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mo>¬</mml:mo><mml:msup><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:mi>t</mml:mi><mml:mo>⁄</mml:mo><mml:mo>⊧</mml:mo><mml:msup><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>∧</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>φ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>∨</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∧</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mspace width="0.25em" class="nbsp"/><mml:mo>∨</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p><bold>Example: semantics</bold> At Line 3 of Listing 2, the match evaluates all trees inside <monospace>—</monospace> tmp— and verifies which one of the sub-conditions hold for each element of <monospace>—</monospace> tmp—. In the case of <monospace>—</monospace> tmp—[1], the criterion is not satisfied and thus the value is discarded. Next, <monospace>—</monospace> tmp—[2] satisfies the first criterion <preformat xml:space="preserve" position="float"> 
 date = 20201128)    </preformat>, <monospace>—</monospace> tmp—[3] satisfies the second criterion <preformat xml:space="preserve" position="float"> 
 
 
 
   \(\  date } =\  20201129 } \) </preformat>, and <monospace>—</monospace> tmp—[4] satisfies the third criterion <preformat xml:space="preserve" position="float"> 
 
 
 
   \( date } =\  20201130 } \) </preformat>.</p>
      </sec>
      <sec>
        <title>The unwind operator</title>
        <disp-formula id="NONUM-d2e3832">
          <alternatives>
            <graphic xlink:href="peerj-cs-08-1037-e010.jpg" position="float"/>
            <tex-math id="tex-NONUM-d2e3832">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\omega (a,p) \end{eqnarray*}\end{document}</tex-math>
            <mml:math id="mml-NONUM-d2e3832" overflow="scroll">
              <mml:mstyle displaystyle="true">
                <mml:mi>ω</mml:mi>
                <mml:mrow>
                  <mml:mfenced separators="" open="(" close=")">
                    <mml:mi>a</mml:mi>
                    <mml:mo>,</mml:mo>
                    <mml:mi>p</mml:mi>
                  </mml:mfenced>
                </mml:mrow>
              </mml:mstyle>
            </mml:math>
          </alternatives>
        </disp-formula>
        <p>The purpose of the <italic toggle="yes">unwind</italic> operator is to unfold the elements of an array <italic toggle="yes">a</italic> under a given path <italic toggle="yes">p</italic>.</p>
        <p><bold>Example</bold> We exemplify the usage of <italic toggle="yes">unwind</italic> reporting Line 9 of Listing 2 in the snippet below and later showing the result of its application.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _______________________________________________________________________ 
 
  9 sl ← ω ( sl , M.D.L  )    </preformat>
        <p>The unwind operator takes as input the sleep logs <monospace>—</monospace> sl— (as retrieved from the invocation of the <monospace>—</monospace> getSleepPatterns— operation at Line 8, and represented at Lines 7–16 of Listing 1). In the snippet, we update the content of <monospace>—</monospace> sl— to contain the new data structure, shown below.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  ________________________________________________________________________________________________________________________ 
 
  [ υ { y : [ 2020 { } ] , M : [ υ { m : [ 11 { } ] , D : [ υ { d : [ 27 { } ] , 
   L : [ υ { s : [ ' 23:33 ' { } ] , e : [ ' 07:04 ' { } ] , q : [ ' poor ' { } ] 
   } ] } ] } ] } , 
   υ { y : [ 2020 { } ] , M : [ υ { m : [ 11 { } ] , D : [ υ { d : [ 28 { } ] , 
   L : [ υ { s : [ ' 21:13 ' { } ] , e : [ ' 09:34 ' { } ] , q : [ ' good ' { } ] 
   } ] } ] } ] } , 
   υ { y : [ 2020 { } ] , M : [ υ { m : [ 11 { } ] , D : [ υ { d : [ 29 { } ] , 
   L : [ υ { s : [ ' 21:01 ' { } ] , e : [ ' 03:12 ' { } ] , q : [ ' good ' { } ] 
   } ] } ] } ] } , 
   ... ]    </preformat>
        <p><bold>Semantics</bold> To define the semantics of the unwind operator <italic toggle="yes">ω</italic>, we introduce an auxiliary operator, called <italic toggle="yes">unwind expansion operator</italic> and we indicate it with <sans-serif>ueo</sans-serif>(<italic toggle="yes">t</italic>, <italic toggle="yes">a</italic>, <italic toggle="yes">k</italic>) (read “unwind <italic toggle="yes">t</italic> on <italic toggle="yes">a</italic> under <italic toggle="yes">k</italic>”). Informally, <sans-serif>ueo</sans-serif>(<italic toggle="yes">t</italic>, <italic toggle="yes">a</italic>, <italic toggle="yes">k</italic>) returns an array of trees with cardinality <monospace>#</monospace><italic toggle="yes">a</italic> where each element has the shape of <italic toggle="yes">t</italic> except that label <italic toggle="yes">k</italic> points to the corresponding index-wise element in <italic toggle="yes">a</italic>.</p>
        <p>Formally, given a tree <italic toggle="yes">t</italic>, an array <italic toggle="yes">a</italic>, and a key <italic toggle="yes">k</italic>: <disp-formula id="NONUM-d2e3833"><alternatives><graphic xlink:href="peerj-cs-08-1037-e011.jpg" position="float"/><tex-math id="tex-NONUM-d2e3833">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{ueo}(t,a,k)= \left\{ \begin{array}{@{}ll@{}} \displaystyle ~\text{[}b \left( \left( ~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i}\setminus ~\text{\{}k:k(t)~\text{\}} \right) \cup ~\text{\{}k:~\text{[}{t}^{{^{\prime}}}~\text{]}~\text{\}} \right) ~\text{]}::\mathsf{ueo}(t,{a}^{{^{\prime}}},k)&amp;\displaystyle \text{if}a=~\text{[}{t}^{{^{\prime}}}~\text{]}::{a}^{{^{\prime}}}\\ \displaystyle &amp;\displaystyle \wedge t=b~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i}\\ \displaystyle ~\text{[}\text{]} &amp;\displaystyle \text{otherwise}  \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e3833" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">ueo</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>k</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>b</mml:mi><mml:mfenced separators="" open="(" close=")"><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>∖</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mi>k</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>}</mml:mtext></mml:mrow></mml:mfenced><mml:mo>∪</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="1em" class="nbsp"/><mml:mtext>}</mml:mtext></mml:mrow></mml:mfenced><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi mathvariant="sans-serif">ueo</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>k</mml:mi></mml:mfenced></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"/><mml:mtd columnalign="left"><mml:mo>∧</mml:mo><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>Then, the formal definition of <italic toggle="yes">ω</italic>(<italic toggle="yes">a</italic>, <italic toggle="yes">p</italic>) is <disp-formula id="NONUM-d2e3834"><alternatives><graphic xlink:href="peerj-cs-08-1037-e012.jpg" position="float"/><tex-math id="tex-NONUM-d2e3834">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\omega (a,p)= \left\{ \begin{array}{@{}ll@{}} \displaystyle \mathsf{ueo}(t,\omega ([ [\,\underline{k.}\,] ]^{t},{p}^{{^{\prime}}}),k)::\omega ({a}^{{^{\prime}}},p) &amp;\displaystyle \text{if}p=e.{p}^{{^{\prime}}}\wedge e \downarrow  k\wedge a=~\text{[}t~\text{]}::{a}^{{^{\prime}}}\\ \displaystyle a &amp;\displaystyle \text{if}p=\\ \displaystyle ~\text{[}\text{]} &amp;\displaystyle \text{otherwise}  \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e3834" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>ω</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">ueo</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>ω</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>k</mml:mi><mml:mo>.</mml:mo><mml:mi>ɛ</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mi>k</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>ω</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>e</mml:mi><mml:mo>.</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∧</mml:mo><mml:mi>e</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>↓</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>k</mml:mi><mml:mo>∧</mml:mo><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>t</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>a</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>ɛ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>Essentially, the semantics of the unwind operator follows two inductive directions: one on arrays and the other on paths. Hence, to simplify the explanation of the semantics, we describe it following a spatial interpretation of the two directions: the induction on arrays is the “breadth” of the expansion while the induction on paths represents its “depth”.</p>
        <p>The first part of the breadth expansion corresponds to the induction over the array <italic toggle="yes">a</italic>, which results in the concatenation of the inductive application of the depth expansion of <italic toggle="yes">p</italic> over each element <italic toggle="yes">t</italic> of <italic toggle="yes">a</italic>. In turn, the depth expansion consists of a nested depth expansion with a breadth one. The depth expansion is represented by <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i030.jpg"/><tex-math id="tex-ieqn-182">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\omega ([ [\underline{k.}] ]^{t},{p}^{{^{\prime}}})$\end{document}</tex-math><mml:math id="mml-ieqn-182" overflow="scroll"><mml:mi>ω</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>k</mml:mi><mml:mo>.</mml:mo><mml:mi>ɛ</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow></mml:math></alternatives></inline-formula>, which corresponds to the application of the unwind operator with path <italic toggle="yes">p</italic>′—the suffix of <italic toggle="yes">k</italic> in <italic toggle="yes">p</italic>—and on the array of subtrees found in <italic toggle="yes">t</italic> under the current path fragment <italic toggle="yes">k</italic>. The breadth expansion (which complements the breadth expansion on the array <italic toggle="yes">a</italic>) uses the unwind expansion operator (<sans-serif>ueo</sans-serif>) to apply the result of the nested depth expansion on all elements found under <italic toggle="yes">k</italic> in <italic toggle="yes">t</italic>.</p>
        <p><bold>Example: semantics</bold> We now report excerpts of the execution of the unwind operator at Line 9 of Listing 2 to exemplify both the unfolding of the breadth and depth expansions.</p>
        <p>We remind that <monospace>—</monospace> sl— has the shape reported in Line 7 in Listing 1 and that the application at Line 9 of Listing 2 “unwinds” the <monospace>—</monospace> sl— data structure with path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i031.jpg"/><tex-math id="tex-ieqn-192">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L}$\end{document}</tex-math><mml:math id="mml-ieqn-192" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <p>The first expansion we perform is the breadth expansion over the array <monospace>—</monospace> sl—. Since <monospace>—</monospace> sl— just contains one tree, <italic toggle="yes">i.e.,</italic> that for sleep logs of 2020, we just have one application of the <sans-serif>ueo</sans-serif> operator (the empty array  [] at the right of the concatenation operator :: results from the “otherwise” branch of the definition of the unwind and from<monospace>—</monospace> sl— being structurally equivalent to <italic toggle="yes">sl</italic>[1]:: []).</p>
        <preformat xml:space="preserve" position="float"> 
 
 
   _______________________________________________________________________________________ 
 
   ueo (sl [1], ω([[ M.ɛ  ]]sl [1] , D.L  ), M) :: [ ] 
    </preformat>
        <p>Then, we show the “depth” part of the expansion, by focusing on the terminal part of the application of the <sans-serif>ueo</sans-serif> operator. Specifically, we concentrate on the tree corresponding to the sleep logs of day 2020-11-29, found at Line 11 of Listing 1 and aliased with the tree <italic toggle="yes">t</italic><sub>29</sub>. Formally, the expansion corresponds to the application <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i032.jpg"/><tex-math id="tex-ieqn-199">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathsf{ueo}({t}_{29},[ [\underline{L.}] ]^{{t}_{29}},L)$\end{document}</tex-math><mml:math id="mml-ieqn-199" overflow="scroll"><mml:mi mathvariant="sans-serif">ueo</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>29</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>L</mml:mi><mml:mo>.</mml:mo><mml:mi>ɛ</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>29</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>L</mml:mi></mml:mfenced></mml:mrow></mml:math></alternatives></inline-formula> of the terminal node <italic toggle="yes">L</italic> in path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i033.jpg"/><tex-math id="tex-ieqn-201">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L}$\end{document}</tex-math><mml:math id="mml-ieqn-201" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _______________________________________________________________________________________________________________________________________ 
 
  ueo ( t29 , [[ L.ɛ]] t29 , L ) ⇒ 
   [ ( ν { d : [ 29 { } ] , L : [ ... ] } \ ν { L : [ ... ] } ) ∪ ν { L : [ ν { s : [ ' 21:01 ' { } ] , e : [ ' 03:12 ' 
    { } ] , q : [ ' good ' { } ] } ] } ] :: 
    [ ( ν { d : [ 29 { } ] , L : [ ... ] } \ ν { L : [ ... ] } ) ∪ ν { L : [ ν { s : [ ' 03:36 ' { } ] , e : [ ' 09:58 ' 
    { } ] , q : [ ' good ' { } ] } ] } ]    </preformat>
        <p>Above, for each element of the array pointed by <italic toggle="yes">L</italic>, we create a new structure where we replace the original array associated with the key <italic toggle="yes">L</italic> with a new array containing only one element. For instance, the first element of the result takes the original structure found under <italic toggle="yes">D</italic> ( [<italic toggle="yes">ν</italic>  {<italic toggle="yes">d</italic>:[29{}], <italic toggle="yes">L</italic>: [... ] } ]) and updates it to contain only the element <preformat xml:space="preserve" position="float"> 
 
   υ { s : [ ' 21:01 ' { } ] , e : [ ' 03:12 ' { } ] , q : [ ' good ' { } ] } </preformat> associated to the node <italic toggle="yes">L</italic>.</p>
      </sec>
      <sec>
        <title>The project operator</title>
        <p>The purpose of the <italic toggle="yes">project</italic> operator is to modify the trees in an array <italic toggle="yes">a</italic> by projecting nodes, renaming node labels, or introducing new nodes, as described in the sequence of elements Π, which are either a path <italic toggle="yes">p</italic> or an injection (〈〉) of a <italic toggle="yes">value definition d</italic> into a path.</p>
        <p>A value definition <italic toggle="yes">d</italic> can be (in the grammar, from left to right): (i) a value, (ii) a path, (iii) an array of value definitions, (iv) a criterion (<italic toggle="yes">φ</italic>) (cf. ‘The match operator”) or (v) a ternary expression on a criterion and two value definitions.</p>
        <p><bold>Example</bold> As done for the other operators, we draw our examples from Listing 2, where we have four usages of the project operator, the first at Line 5, the second at Line 10, the third at Line 13, and the fourth at Line 15. Here, we focus on the second example, at Line 10, reported in the snippet below. We comment on the others when exemplifying the <italic toggle="yes">lookup</italic> operator in ‘The lookup operator’.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________________________________________________ 
 
  10 sl ← π ( sl , ( y  〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , M.D.L.q  〈〉 quality 
) ) 
 
    </preformat>
        <p>The projection at Line 10 takes the <monospace>—</monospace> sl— data structure resulting from the application of the unwind at Line 9 and performs a sequence of renaming over all tress within <monospace>—</monospace> sl—. For each tree, we perform the rename of the node <italic toggle="yes">y</italic> in <italic toggle="yes">year</italic> by moving the content of path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i034.jpg"/><tex-math id="tex-ieqn-216">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{y}$\end{document}</tex-math><mml:math id="mml-ieqn-216" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> into the node corresponding to path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i035.jpg"/><tex-math id="tex-ieqn-217">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-217" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, represented by the fragment <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i036.jpg"/><tex-math id="tex-ieqn-218">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{y}\langle \rangle \underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-218" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>. Similarly, we move the content of <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i037.jpg"/><tex-math id="tex-ieqn-219">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.m}$\end{document}</tex-math><mml:math id="mml-ieqn-219" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>m</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> under <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i038.jpg"/><tex-math id="tex-ieqn-220">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-220" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, of <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i039.jpg"/><tex-math id="tex-ieqn-221">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.d}$\end{document}</tex-math><mml:math id="mml-ieqn-221" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> under <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i040.jpg"/><tex-math id="tex-ieqn-222">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-222" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and of <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i041.jpg"/><tex-math id="tex-ieqn-223">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.D.L.q}$\end{document}</tex-math><mml:math id="mml-ieqn-223" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>D</mml:mi><mml:mo>.</mml:mo><mml:mi>L</mml:mi><mml:mo>.</mml:mo><mml:mi>q</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> under <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i042.jpg"/><tex-math id="tex-ieqn-224">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-224" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>. The result of the projection is the following flattened structure:</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________________________________________________ 
 
  [ υ { year : [ 2020 { } ] , month : [ 11 { } ] , day : [ 27 { } ] , quality : [ ' 
 
   poor ' { } ] } , 
    υ { year : [ 2020 { } ] , month : [ 11 { } ] , day : [ 28 { } ] , quality : [ ' 
    good ' { } ] } , 
    υ { year : [ 2020 { } ] , month : [ 11 { } ] , day : [ 29 { } ] , quality : [ ' 
    good ' { } ] } , 
    ... ] 
    </preformat>
        <p><bold>Semantics</bold> We start by defining the auxiliary operators we use in the definition of the project. Auxiliary operators <italic toggle="yes">π</italic>(<italic toggle="yes">a</italic>, <italic toggle="yes">p</italic>) and <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, <italic toggle="yes">p</italic>) formalise the application of a branch selection over a path <italic toggle="yes">p</italic> respectively over an array and a tree. Then, we define the auxiliary operator <sans-serif>eval</sans-serif>(<italic toggle="yes">d</italic>, <italic toggle="yes">t</italic>), which returns the array resulting from the evaluation of a value definition <italic toggle="yes">d</italic> over a tree <italic toggle="yes">t</italic>. Finally, we report the projection of an injection of a value definition <italic toggle="yes">d</italic> into a path <italic toggle="yes">p</italic> over a tree <italic toggle="yes">t</italic>, <italic toggle="yes">i.e., π</italic>(<italic toggle="yes">t</italic>, <italic toggle="yes">d</italic>〈〉<italic toggle="yes">p</italic>).</p>
        <p>The projection <italic toggle="yes">π</italic>(<italic toggle="yes">a</italic>, <italic toggle="yes">p</italic>) for a path <italic toggle="yes">p</italic> over an array <italic toggle="yes">a</italic> results in an array whose elements are the projection for <italic toggle="yes">p</italic> of the elements of <italic toggle="yes">a</italic>: <disp-formula id="NONUM-d2e5263"><alternatives><graphic xlink:href="peerj-cs-08-1037-e013.jpg" position="float"/><tex-math id="tex-NONUM-d2e5263">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\pi (a,p)=\pi (~\text{[}{t}_{1},\ldots ,{t}_{n}~\text{]},p)=~\text{[}\pi ({t}_{1},p),\ldots ,\pi ({t}_{n},p)~\text{]} \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e5263" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>The projection <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, <italic toggle="yes">p</italic>) for a path <italic toggle="yes">p</italic> over a tree <italic toggle="yes">t</italic> implements the actual semantics of branch selection, where, given a path <italic toggle="yes">e</italic>.<italic toggle="yes">p</italic>′ with <italic toggle="yes">e</italic>↓<italic toggle="yes">k</italic>, we remove all the branches  but  and continue to apply the projection for the continuation <italic toggle="yes">p</italic>′ over the (array of) sub-trees under <italic toggle="yes">k</italic> in <italic toggle="yes">t</italic> (<italic toggle="yes">i.e.,</italic>
<inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i043.jpg"/><tex-math id="tex-ieqn-249">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$[ [\underline{k.}] ]^{t}$\end{document}</tex-math><mml:math id="mml-ieqn-249" overflow="scroll"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>k</mml:mi><mml:mo>.</mml:mo><mml:mi>ɛ</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>). Formally: <disp-formula id="NONUM-d2e5552"><alternatives><graphic xlink:href="peerj-cs-08-1037-e014.jpg" position="float"/><tex-math id="tex-NONUM-d2e5552">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\pi (t,p)= \left\{ \begin{array}{@{}ll@{}} \displaystyle \upsilon ~\text{\{}k:\pi ([ [\,\underline{k.\epsilon }\,] ]t,{p}^{{^{\prime}}})~\text{\}}&amp;\displaystyle \text{if}[ [\,p\,] ]^{t}\not = \alpha \wedge p=e.{p}^{{^{\prime}}}\wedge e \downarrow  k\\ \displaystyle t &amp;\displaystyle \text{if}p=\\ \displaystyle \tau  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e5552" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>υ</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>k</mml:mi><mml:mo>.</mml:mo><mml:mi>ϵ</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>}</mml:mtext></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>≠</mml:mo><mml:mi>α</mml:mi><mml:mo>∧</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>e</mml:mi><mml:mo>.</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∧</mml:mo><mml:mi>e</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>↓</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>k</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>t</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>ɛ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>τ</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>The operator <sans-serif>eval</sans-serif>(<italic toggle="yes">d</italic>, <italic toggle="yes">t</italic>) evaluates the value definition <italic toggle="yes">d</italic> over the tree <italic toggle="yes">t</italic> and returns an array containing the result of the evaluation. Formally: <disp-formula id="NONUM-d2e5739"><alternatives><graphic xlink:href="peerj-cs-08-1037-e015.jpg" position="float"/><tex-math id="tex-NONUM-d2e5739">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{eval}(d,t)= \left\{ \begin{array}{@{}ll@{}} \displaystyle ~\text{[}d~\text{\{}\text{\}}~\text{]}&amp;\displaystyle \text{if}d\in V\\ \displaystyle [ [\,d\,] ]^{t} &amp;\displaystyle \text{if}d\in P\\ \displaystyle \mathsf{eval}(d,t)::\mathsf{eval}({d}^{{^{\prime}}},t) &amp;\displaystyle \text{if}d=~\text{[}d~\text{]}::{d}^{{^{\prime}}}\\ \displaystyle ~\text{[}t\models \varphi ~\text{\{}\text{\}}~\text{]}&amp;\displaystyle \text{if}d=\varphi \\ \displaystyle \mathsf{eval}({d}_{1},t) &amp;\displaystyle \text{if}d=\varphi {?}{d}_{1}:{d}_{2}\wedge t\models \varphi \\ \displaystyle \mathsf{eval}({d}_{2},t) &amp;\displaystyle \text{if}d=\varphi {?}{d}_{1}:{d}_{2}\wedge t\not \models \varphi \\ \displaystyle \alpha  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e5739" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>d</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mtext>}</mml:mtext><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>d</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>∈</mml:mo><mml:mi>P</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>d</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:msup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:mi>φ</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mtext>}</mml:mtext><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mi>φ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mi>φ</mml:mi><mml:mo>?</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>∧</mml:mo><mml:mi>t</mml:mi><mml:mo>⊧</mml:mo><mml:mi>φ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mi>φ</mml:mi><mml:mo>?</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>∧</mml:mo><mml:mi>t</mml:mi><mml:mo>⁄</mml:mo><mml:mo>⊧</mml:mo><mml:mi>φ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>α</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>The projection <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, <italic toggle="yes">d</italic>〈〉<italic toggle="yes">p</italic>) of the injection of the evaluation of a value definition <italic toggle="yes">d</italic> on a tree <italic toggle="yes">t</italic> into a path <italic toggle="yes">p</italic> results in a new tree where we find the evaluation of <italic toggle="yes">d</italic> on <italic toggle="yes">t</italic> under <italic toggle="yes">p</italic>. <disp-formula id="NONUM-d2e6073"><alternatives><graphic xlink:href="peerj-cs-08-1037-e016.jpg" position="float"/><tex-math id="tex-NONUM-d2e6073">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\pi (t,d\;\langle \rangle \;p)= \left\{ \begin{array}{@{}ll@{}} \displaystyle \upsilon ~\text{\{}k:~\text{[}\pi (t,d\;\langle \rangle \;{p}^{{^{\prime}}})~\text{]}~\text{\}}&amp;\displaystyle \text{if}p=e.{p}^{{^{\prime}}}\wedge e \downarrow  k\wedge \mathsf{eval}(d,t)\not = \alpha \\ \displaystyle \upsilon ~\text{\{}k:\text{eval}(d,t)~\text{\}} &amp;\displaystyle \text{if}p=e.\wedge e \downarrow  k\wedge \mathsf{eval}(d,t)\not = \alpha \\ \displaystyle \tau  &amp;\displaystyle \text{otherwise} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e6073" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>υ</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="1em" class="nbsp"/><mml:mtext>}</mml:mtext></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>e</mml:mi><mml:mo>.</mml:mo><mml:msup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∧</mml:mo><mml:mi>e</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>↓</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>k</mml:mi><mml:mo>∧</mml:mo><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>≠</mml:mo><mml:mi>α</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>υ</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:mi>k</mml:mi><mml:mo>:</mml:mo><mml:mtext>eval</mml:mtext><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>}</mml:mtext><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>e</mml:mi><mml:mo>.</mml:mo><mml:mi>ɛ</mml:mi><mml:mo>∧</mml:mo><mml:mi>e</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>↓</mml:mi><mml:mspace width="0.3em" class="thinspace"/><mml:mi>k</mml:mi><mml:mo>∧</mml:mo><mml:mi mathvariant="sans-serif">eval</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>≠</mml:mo><mml:mi>α</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>τ</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>Before formalising the projection, we report the auxiliary operator ⊕ to merge arrays and trees—we use the operator to merge the result of sequences of projections in the definition of <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, Π). <disp-formula id="NONUM-d2e6074"><alternatives><graphic xlink:href="peerj-cs-08-1037-e017.jpg" position="float"/><tex-math id="tex-NONUM-d2e6074">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\begin{array}{@{}c@{}} \displaystyle (~\text{[}t~\text{]}::a)\;\oplus \;(~\text{[}{t}^{{^{\prime}}}~\text{]}::{a}^{{^{\prime}}})=~\text{[}t\;\oplus \;{t}^{{^{\prime}}}~\text{]}::a\oplus {a}^{{^{\prime}}}\nonumber\\\displaystyle t\oplus \tau =t a\oplus ~\text{[}\text{]}=~\text{[}\text{]}\oplus a=a\oplus \alpha =\alpha \oplus a=a \end{array} \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e6074" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mtable><mml:mtr><mml:mtd columnalign="center"><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>t</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>a</mml:mi></mml:mfenced></mml:mrow><mml:mo>⊕</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>t</mml:mi><mml:mo>⊕</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi>a</mml:mi><mml:mo>⊕</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mi>t</mml:mi><mml:mo>⊕</mml:mo><mml:mi>τ</mml:mi><mml:mo>=</mml:mo><mml:mi>t</mml:mi><mml:mspace width="20.00003pt"/><mml:mi>a</mml:mi><mml:mo>⊕</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext><mml:mo>⊕</mml:mo><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mi>a</mml:mi><mml:mo>⊕</mml:mo><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:mi>α</mml:mi><mml:mo>⊕</mml:mo><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mi>a</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mstyle></mml:math></alternatives></disp-formula>
<disp-formula id="NONUM-d2e60601"><alternatives><graphic xlink:href="peerj-cs-08-1037-e018.jpg" position="float"/><tex-math id="tex-NONUM-d2e60601">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*} \frac{t=b~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i\in I}\wedge {t}^{{^{\prime}}}=b~\text{\{}{k}_{j}:{a}_{j}~{\text{\}}}_{j\in J}}{t\oplus {t}^{{^{\prime}}}=b~\text{\{}{k}_{h}:{k}_{h}(t)\oplus {k}_{h}({t}^{{^{\prime}}})~{\text{\}}}_{h\in I\cup J}}   \frac{b\not = {b}^{{^{\prime}}}}{b~\text{\{}{k}_{i}:{a}_{i}~{\text{\}}}_{i}\oplus {b}^{{^{\prime}}}~~\text{\{}{k}_{j}:{a}_{j}~{\text{\}}}_{j}=\tau } \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e60601" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mfrac><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msub><mml:mo>∧</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mi>J</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mo>⊕</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>h</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>h</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi></mml:mfenced></mml:mrow><mml:mo>⊕</mml:mo><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>h</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>h</mml:mi><mml:mo>∈</mml:mo><mml:mi>I</mml:mi><mml:mo>∪</mml:mo><mml:mi>J</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mspace width="10.00002pt"/><mml:mfrac><mml:mrow><mml:mi>b</mml:mi><mml:mo>≠</mml:mo><mml:msup><mml:mrow><mml:mi>b</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>b</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>⊕</mml:mo><mml:msup><mml:mrow><mml:mi>b</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mspace width="0.25em" class="nbsp"/><mml:mspace width="1em" class="nbsp"/><mml:mtext>{</mml:mtext><mml:msub><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:msub><mml:mrow><mml:mtext>}</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>τ</mml:mi></mml:mrow></mml:mfrac></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>To conclude, we first report the application of the projection to a tree <italic toggle="yes">t</italic>, <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, Π), which merges the results of projections in Π over <italic toggle="yes">t</italic> into a single tree. Second, we report the application of the projection to an array <italic toggle="yes">a</italic>, <italic toggle="yes">π</italic>(<italic toggle="yes">a</italic>, Π), which corresponds to the application of the projection to all elements of <italic toggle="yes">a</italic>. Respectively, we formally write: <disp-formula id="NONUM-d2e6687"><alternatives><graphic xlink:href="peerj-cs-08-1037-e019.jpg" position="float"/><tex-math id="tex-NONUM-d2e6687">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\pi (t,\Pi )= \left\{ \begin{array}{@{}ll@{}} \displaystyle \pi (t,p)\oplus (\pi (t,{\Pi }^{{^{\prime}}})) &amp;\displaystyle \text{if}\Pi =p,{\Pi }^{{^{\prime}}}\\ \displaystyle \pi (t,d\;\langle \rangle \;p)\oplus (\pi (t,{\Pi }^{{^{\prime}}})) &amp;\displaystyle \text{if}\Pi =d\;\langle \rangle \;p,{\Pi }^{{^{\prime}}}\\ \displaystyle \pi (t,p) &amp;\displaystyle \text{if}\Pi =p\\ \displaystyle \pi (t,d\;\langle \rangle \;p) &amp;\displaystyle \text{if}\Pi =d\;\langle \rangle \;p \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e6687" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>⊕</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>Π</mml:mi><mml:mo>=</mml:mo><mml:mi>p</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>⊕</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>Π</mml:mi><mml:mo>=</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>Π</mml:mi><mml:mo>=</mml:mo><mml:mi>p</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>Π</mml:mi><mml:mo>=</mml:mo><mml:mi>d</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>and <disp-formula id="NONUM-d2e6907"><alternatives><graphic xlink:href="peerj-cs-08-1037-e020.jpg" position="float"/><tex-math id="tex-NONUM-d2e6907">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\pi (a,\Pi )=\pi (~\text{[}{t}_{1},\ldots ,{t}_{n}~\text{]},\Pi )=~\text{[}\pi ({t}_{1},\Pi ),\ldots ,\pi ({t}_{n},\Pi )~\text{]} \pi (~\text{[}\text{]},\Pi )=\pi (\alpha ,\Pi )=~\text{[}\text{]} \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e6907" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="20.00003pt"/><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>α</mml:mi><mml:mo>,</mml:mo><mml:mi>Π</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p><bold>Example: semantics</bold> We report the execution of the project at Line 10 of Listing 2. We take <monospace>—</monospace> sl— as returned after the application of the unwind operator described in ‘The unwind operator’. For brevity, we represent the <monospace>—</monospace> sl— data structure as the concatenation of its elements, <italic toggle="yes">i.e., sl</italic> = <italic toggle="yes">sl</italic>[1]::<italic toggle="yes">sl</italic>[2]::⋯.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
   _______________________________________________________________________________________________________________________ 
 
   π ( sl [1] :: sl [2] :: ⋅⋅⋅ , 
 
   (y 〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , M.D.L.q  〈〉 quality  )) ⇒ 
 
  [ π( sl [1],(y 〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , M.D.L.q  〈〉 quality  )) , 
 
   π( sl [2],(y 〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , M.D.L.q  〈〉 quality  )) , ... ]    </preformat>
        <p>We continue showing the projection of the first element in <italic toggle="yes">a</italic>, <italic toggle="yes">sl</italic>[1] (the projection on the other elements follows the same structure) <preformat xml:space="preserve" position="float"> 
 
 
   _______________________________________________________________________________________________________________________ 
 
   π( sl [1],(y 〈〉 year  , M.m  〈〉 month  , M.D.d  〈〉 day  , M.D.L.q  〈〉 quality  )) ⇒ 
 π( sl [1],y 〈〉 year  ) ⊕ π( sl [1],M.m 〈〉 month  ) ⊕ π( sl [1],M.D.d 〈〉 day  ) ⊕ π( sl 
   [1],M.D.L.q 〈〉 quality  ) </preformat>
</p>
        <p>Finally, we show the unfolding of the first two projections from the left, above, <italic toggle="yes">i.e.,</italic> those for <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i044.jpg"/><tex-math id="tex-ieqn-279">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{y}\langle \rangle \underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-279" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and for <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i045.jpg"/><tex-math id="tex-ieqn-280">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{M.m}\langle \rangle \underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-280" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>M</mml:mi><mml:mo>.</mml:mo><mml:mi>m</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and their merge ⊕ (the remaining ones unfold similarly).</p>
        <p>
          <preformat xml:space="preserve" position="float"> 
 
 
    π( sl [1],y 〈〉 year  ) ⊕ π( sl [1],M.m 〈〉 month  ) 
     ⇒ υ { year : π( sl [1],y ) } ⊕ υ { month : π( sl [1],M.m ) } 
   ⇒ υ { year : eval (y , sl [1]) } ⊕ υ { month : eval (M.m , sl [1]) } 
   ⇒ υ { year : [[ y ]]sl [1] } ⊕ υ { month : [[ M.m ]]sl [1] } 
   ⇒ υ { year : [ 2020 { } ] } ⊕ υ { month : [ 11 { } ] } 
   ⇒ υ { year : [ 2020 { } ] , month : [ 11 { } ] }    </preformat>
        </p>
      </sec>
      <sec>
        <title>The group operator</title>
        <disp-formula id="NONUM-d2e7194">
          <alternatives>
            <graphic xlink:href="peerj-cs-08-1037-e021.jpg" position="float"/>
            <tex-math id="tex-NONUM-d2e7194">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\gamma (a,\Gamma ,{\Gamma }^{{^{\prime}}})\qquad \Gamma \,::=\,p\;\mid \;p\;\langle \rangle \;{p}^{{^{\prime}}}\;\mid \;p,\Gamma \;\mid \;p\;\langle \rangle \;{p}^{{^{\prime}}},\Gamma \end{eqnarray*}\end{document}</tex-math>
            <mml:math id="mml-NONUM-d2e7194" overflow="scroll">
              <mml:mstyle displaystyle="true">
                <mml:mi>γ</mml:mi>
                <mml:mrow>
                  <mml:mfenced separators="" open="(" close=")">
                    <mml:mi>a</mml:mi>
                    <mml:mo>,</mml:mo>
                    <mml:mi>Γ</mml:mi>
                    <mml:mo>,</mml:mo>
                    <mml:msup>
                      <mml:mrow>
                        <mml:mi>Γ</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mo>′</mml:mo>
                      </mml:mrow>
                    </mml:msup>
                  </mml:mfenced>
                </mml:mrow>
                <mml:mi>Γ</mml:mi>
                <mml:mo>:</mml:mo>
                <mml:mo>:</mml:mo>
                <mml:mo>=</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mrow>
                  <mml:mo>〈</mml:mo>
                  <mml:mo>〉</mml:mo>
                </mml:mrow>
                <mml:msup>
                  <mml:mrow>
                    <mml:mi>p</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mo>′</mml:mo>
                  </mml:mrow>
                </mml:msup>
                <mml:mo>∣</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mo>,</mml:mo>
                <mml:mi>Γ</mml:mi>
                <mml:mo>∣</mml:mo>
                <mml:mi>p</mml:mi>
                <mml:mrow>
                  <mml:mo>〈</mml:mo>
                  <mml:mo>〉</mml:mo>
                </mml:mrow>
                <mml:msup>
                  <mml:mrow>
                    <mml:mi>p</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mo>′</mml:mo>
                  </mml:mrow>
                </mml:msup>
                <mml:mo>,</mml:mo>
                <mml:mi>Γ</mml:mi>
              </mml:mstyle>
            </mml:math>
          </alternatives>
        </disp-formula>
        <p>The purpose of the <italic toggle="yes">group</italic> operator is to group the trees in an array <italic toggle="yes">a</italic> according to a specification Γ′ and to aggregate the values of the grouped trees according to the specification Γ. Both Γ and Γ′, respectively the <italic toggle="yes">aggregation</italic> and the <italic toggle="yes">grouping</italic> set, are sequences of elements of the form <italic toggle="yes">p</italic>〈〉<italic toggle="yes">p</italic>′ where <italic toggle="yes">p</italic> is a path in the input trees, and <italic toggle="yes">p</italic>′ a path in the output trees.</p>
        <p>Note that Γ includes both fragments of the shape <italic toggle="yes">p</italic> and <italic toggle="yes">p</italic>〈〉<italic toggle="yes">p</italic>′. Here, the former is syntactic sugar for the latter, where both paths are the same. Therefore, we assume to apply the semantics of the group operator only with the de-sugared form <italic toggle="yes">γ</italic>(<italic toggle="yes">a</italic>, Γ, Γ′) = <italic toggle="yes">γ</italic>(<italic toggle="yes">a</italic>, <sans-serif>exp</sans-serif>(Γ), <sans-serif>exp</sans-serif>(Γ′)), where <disp-formula id="NONUM-d2e7393"><alternatives><graphic xlink:href="peerj-cs-08-1037-e022.jpg" position="float"/><tex-math id="tex-NONUM-d2e7393">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{exp}({\Gamma }_{1},{\Gamma }_{2})=\mathsf{exp}({\Gamma }_{1}),\mathsf{exp}({\Gamma }_{2}) \mathsf{exp}(p)=p\;\langle \rangle \;p \mathsf{exp}(q\;\langle \rangle \;p)=q\;\langle \rangle \;p \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e7393" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="20.00003pt"/><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>p</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi><mml:mspace width="20.00003pt"/><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>q</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>q</mml:mi><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p><bold>Example</bold> Drawing from Listing 2, we have two applications of the group operator, one at Line 4 and the second at Line 12. Since the two applications are similar, we just focus on the latter (reported below), leaving the comment on the second to ‘The lookup operator’.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
12 sl ← γ ( sl , ( quality  ) , () )    </preformat>
        <p>As stated above, the aggregation set expands from <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i046.jpg"/><tex-math id="tex-ieqn-296">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-296" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> to the de-sugared form <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i047.jpg"/><tex-math id="tex-ieqn-297">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}\langle \rangle \underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-297" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <p>The group operator applies on the data structure in <monospace>—</monospace> sl— which, at Line 11, we filtered with the match operator to only contain values corresponding to the dates 2020-11-29 and 2020-11-30. The new data structure, copied into <monospace>—</monospace> sl— and reported below, is essentially the aggregation under the node <italic toggle="yes">quality</italic> of the filtered sleep recordings.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _______________________________________________________________________________________________________________________ 
 
  [ υ { quality : [ ' good ' { } , ' good ' { } , ' poor ' { } , ' good ' { } ] } 
  ]    </preformat>
        <p>To make for a more comprehensive illustration, in this section we consider an alternative version of the example above, where we want to use the group operator to group the values by <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i048.jpg"/><tex-math id="tex-ieqn-299">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-299" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i049.jpg"/><tex-math id="tex-ieqn-300">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-300" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i050.jpg"/><tex-math id="tex-ieqn-301">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-301" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> and aggregate the values of the sleep <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i051.jpg"/><tex-math id="tex-ieqn-302">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-302" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>. Concretely, we do this by updating the command found at Line 12 with the sequence of paths replacing the third parameter, which in the original we left empty.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________________ 
 
  sl ← γ ( sl , ( quality  ) , ( day  , month  , year  ) )    </preformat>
        <p>As stated, the paths <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i052.jpg"/><tex-math id="tex-ieqn-303">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-303" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i053.jpg"/><tex-math id="tex-ieqn-304">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-304" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i054.jpg"/><tex-math id="tex-ieqn-305">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-305" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i055.jpg"/><tex-math id="tex-ieqn-306">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-306" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> respectively expand to <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i056.jpg"/><tex-math id="tex-ieqn-307">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}\langle \rangle \underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-307" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i057.jpg"/><tex-math id="tex-ieqn-308">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}\langle \rangle \underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-308" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i058.jpg"/><tex-math id="tex-ieqn-309">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}\langle \rangle \underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-309" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i059.jpg"/><tex-math id="tex-ieqn-310">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}\langle \rangle \underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-310" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <p>The main detail we want to notice here is that, by grouping the values by <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i060.jpg"/><tex-math id="tex-ieqn-311">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-311" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i061.jpg"/><tex-math id="tex-ieqn-312">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-312" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i062.jpg"/><tex-math id="tex-ieqn-313">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-313" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, we only aggregate logs relative to the same day.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  ______________________________________________________________________________________________________________________ 
 
  [ υ { year : [ 2020 { } ] , month : [ 11 { } ] , day : [ 29 { } ] , quality : [  ' good  ' { } ,  ' 
     good  ' { } ] } , 
    υ { year : [ 2020 { } ] , month : [ 11 { } ] , day : [ 30 { } ] , quality : [  ' poor  ' { } ,  ' 
     good  ' { } ] } 
   ]    </preformat>
        <p><bold>Semantics</bold> We start by reminding the shape of the de-sugared syntax of the group operator. <disp-formula id="NONUM-d2e7950"><alternatives><graphic xlink:href="peerj-cs-08-1037-e023.jpg" position="float"/><tex-math id="tex-NONUM-d2e7950">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\gamma (a,\Gamma ,{\Gamma }^{{^{\prime}}})=\gamma (a,\mathsf{exp}(\Gamma ),\mathsf{exp}({\Gamma }^{{^{\prime}}}))=\gamma (a~,~{{q}_{1}\langle {p}_{1},\ldots ,{q}_{n}\rangle {p}_{n}}_{\text{aggregation set}~\mathcal{A}}~,~{{s}_{1}\langle {r}_{1},\ldots ,{s}_{m}\rangle {r}_{m}}_{\text{grouping set}~\mathcal{G}}) \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e7950" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>γ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>Γ</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>γ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>Γ</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mi mathvariant="sans-serif">exp</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>Γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi>γ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mspace width="0.25em" class="nbsp"/><mml:mo>,</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:msub><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mtext>aggregation set</mml:mtext><mml:mspace width="0.25em" class="nbsp"/><mml:mi mathvariant="script">A</mml:mi></mml:mrow></mml:msub><mml:mspace width="0.25em" class="nbsp"/><mml:mo>,</mml:mo><mml:mspace width="0.25em" class="nbsp"/><mml:msub><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mtext>grouping set</mml:mtext><mml:mspace width="0.25em" class="nbsp"/><mml:mi mathvariant="script">G</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>Intuitively, the group operator performs the following actions:</p>
        <list list-type="simple" id="list-7">
          <list-item>
            <label>(a)</label>
            <p>it groups together those trees in <italic toggle="yes">a</italic> that (1) have the maximal number of existing paths from the grouping set <italic toggle="yes">s</italic><sub>1</sub>, …, <italic toggle="yes">s</italic><sub><italic toggle="yes">m</italic></sub> and (2) whose values under those paths coincide;</p>
          </list-item>
          <list-item>
            <label> (b)</label>
            <p>it projects the values in the grouped trees from <italic toggle="yes">s</italic><sub>1</sub>, …, <italic toggle="yes">s</italic><sub><italic toggle="yes">m</italic></sub> to the corresponding paths <italic toggle="yes">r</italic><sub>1</sub>, …, <italic toggle="yes">r</italic><sub><italic toggle="yes">m</italic></sub>;</p>
          </list-item>
          <list-item>
            <label> (c)</label>
            <p>it aggregates all the values in the grouped trees found under the paths <italic toggle="yes">q</italic><sub>1</sub>, …, <italic toggle="yes">q</italic><sub><italic toggle="yes">n</italic></sub> from the aggregation set;</p>
          </list-item>
          <list-item>
            <label>(d)</label>
            <p>it projects the aggregated values from <italic toggle="yes">q</italic><sub>1</sub>, …, <italic toggle="yes">q</italic><sub><italic toggle="yes">n</italic></sub> into the corresponding paths <italic toggle="yes">p</italic><sub>1</sub>, …, <italic toggle="yes">p</italic><sub><italic toggle="yes">n</italic></sub>.</p>
          </list-item>
        </list>
        <p>Formally, let <italic toggle="yes">S</italic> = {<italic toggle="yes">s</italic><sub>1</sub>, …, <italic toggle="yes">s</italic><sub><italic toggle="yes">m</italic></sub>} be the set of left elements in the injections of the sequence in the grouping set and let Σ be the power-set 2<sup><italic toggle="yes">S</italic></sup> of paths in <italic toggle="yes">S</italic> so that <disp-formula id="NONUM-d2e8357"><alternatives><graphic xlink:href="peerj-cs-08-1037-e024.jpg" position="float"/><tex-math id="tex-NONUM-d2e8357">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\Sigma = \left\{ \varnothing ,\{ {s}_{1}\} ,\{ {s}_{2}\} ,\{ {s}_{3}\} ,\ldots ,\{ {s}_{1},{s}_{2}\} ,\{ {s}_{1},{s}_{3}\} ,\ldots ,\{ {s}_{1},\ldots ,{s}_{m}\} \right\} =\{ {\sigma }_{1},\ldots ,{\sigma }_{k}\} \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e8357" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>Σ</mml:mi><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close="}"><mml:mrow><mml:mo>∅</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>We define the auxiliary operator <sans-serif>exists</sans-serif> which takes <italic toggle="yes">S</italic> and an element <italic toggle="yes">σ</italic> ∈ Σ and builds the <italic toggle="yes">existence-match-query</italic> formula of the paths in <italic toggle="yes">S</italic> w.r.t. the combination identified by <italic toggle="yes">σ</italic>. <disp-formula id="NONUM-d2e8557"><alternatives><graphic xlink:href="peerj-cs-08-1037-e025.jpg" position="float"/><tex-math id="tex-NONUM-d2e8557">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{exists}(\sigma ,S)= \left\{ \begin{array}{@{}ll@{}} \displaystyle \mathtt{true} &amp;\displaystyle \text{if}S=\varnothing \\ \displaystyle \exists s\wedge \mathsf{exists}(\sigma ,S\setminus \{ s\} ) &amp;\displaystyle \text{let}s\in S\text{and}s\in \sigma \\ \displaystyle \neg \exists s\wedge \mathsf{exists}(\sigma ,S\setminus \{ s\} ) &amp;\displaystyle \text{let}s\in S\text{and}s\not \in \sigma \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e8557" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">exists</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>S</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="monospace">true</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mo>∅</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mo>∃</mml:mo><mml:mi>s</mml:mi><mml:mo>∧</mml:mo><mml:mi mathvariant="sans-serif">exists</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mo>∖</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:mi>s</mml:mi></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>let</mml:mtext><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mi>S</mml:mi><mml:mtext>and</mml:mtext><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mi>σ</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mo>¬</mml:mo><mml:mo>∃</mml:mo><mml:mi>s</mml:mi><mml:mo>∧</mml:mo><mml:mi mathvariant="sans-serif">exists</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mo>∖</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:mi>s</mml:mi></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>let</mml:mtext><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mi>S</mml:mi><mml:mtext>and</mml:mtext><mml:mi>s</mml:mi><mml:mo>⁄</mml:mo><mml:mo>∈</mml:mo><mml:mi>σ</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>We use the <sans-serif>exists</sans-serif> operator to perform part 1) of Item (a), <italic toggle="yes">i.e.,</italic> grouping those trees in <italic toggle="yes">a</italic> so that the trees in the same group have the same set of existing and non-existing paths from <italic toggle="yes">s</italic><sub>1</sub>, …, <italic toggle="yes">s</italic><sub><italic toggle="yes">m</italic></sub>. The <sans-serif>part</sans-serif> operator (presented below) performs part 2) of Item (a), which is the partition of the trees grouped by the <sans-serif>exists</sans-serif> operator so that the values in their existing paths in <italic toggle="yes">s</italic><sub>1</sub>, …, <italic toggle="yes">s</italic><sub><italic toggle="yes">m</italic></sub> coincide.</p>
        <p>We now define the semantics of the group operator and then present the semantics of the <sans-serif>part</sans-serif> operator. In the remainder, to make the definitions more intuitive, we alias the aggregation set with <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i063.jpg"/><tex-math id="tex-ieqn-340">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{A}$\end{document}</tex-math><mml:math id="mml-ieqn-340" overflow="scroll"><mml:mi mathvariant="script">A</mml:mi></mml:math></alternatives></inline-formula> and the grouping set with <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i064.jpg"/><tex-math id="tex-ieqn-341">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{G}$\end{document}</tex-math><mml:math id="mml-ieqn-341" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>. Let, <italic toggle="yes">k</italic> = |Σ|, we write <disp-formula id="NONUM-d2e8807"><alternatives><graphic xlink:href="peerj-cs-08-1037-e026.jpg" position="float"/><tex-math id="tex-NONUM-d2e8807">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\gamma (a,\mathcal{A},\mathcal{G})=\mathsf{part}(\mu (a,\mathsf{exists}({\sigma }_{1},S)),{\sigma }_{1},\mathcal{A},\mathcal{G})::\cdots ::\mathsf{part}(\mu (a,\mathsf{exists}({\sigma }_{k},S)),{\sigma }_{k},\mathcal{A},\mathcal{G}) \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e8807" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>γ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mi mathvariant="sans-serif">part</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="sans-serif">exists</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>S</mml:mi></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mo>⋯</mml:mo><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi mathvariant="sans-serif">part</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="sans-serif">exists</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>S</mml:mi></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>σ</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>As mentioned, the <sans-serif>part</sans-serif> operator finds the elements of <italic toggle="yes">a</italic> which should be grouped together according to <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i065.jpg"/><tex-math id="tex-ieqn-346">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{G}$\end{document}</tex-math><mml:math id="mml-ieqn-346" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula> (among those selected through <italic toggle="yes">σ</italic>). In the definition, we delegate the actual grouping to the other auxiliary operator <sans-serif>group</sans-serif>, which (as hinted in Item (b)) projects the partitioned values from <italic toggle="yes">S</italic> into the corresponding destination path <italic toggle="yes">r</italic><sub>1</sub>, <italic toggle="yes">r</italic><sub>2</sub>, … in <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i066.jpg"/><tex-math id="tex-ieqn-351">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{G}$\end{document}</tex-math><mml:math id="mml-ieqn-351" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>. The <sans-serif>group</sans-serif> operator also performs the aggregation of the values found in <italic toggle="yes">q</italic><sub>1</sub>, <italic toggle="yes">q</italic><sub>2</sub>, … (Item (c)) and it projects them under the corresponding destination path <italic toggle="yes">p</italic><sub>1</sub>, <italic toggle="yes">p</italic><sub>2</sub>, … (Item (d)).</p>
        <p>In the semantics of the <sans-serif>part</sans-serif> operator, we assume to extend the set difference ∖ to arrays, so that <italic toggle="yes">a</italic>∖<italic toggle="yes">a</italic>′ returns a copy of <italic toggle="yes">a</italic> without the elements found in <italic toggle="yes">a</italic>′ (preserving their relative order). We also assume to have a variant of the match operator <italic toggle="yes">μ</italic><sup><italic toggle="yes">id</italic></sup>(<italic toggle="yes">a</italic>, <italic toggle="yes">φ</italic>) that, instead of returning the array of trees in <italic toggle="yes">a</italic> that match the criterion <italic toggle="yes">φ</italic>, it returns the array of their indexes in <italic toggle="yes">a</italic>. <disp-formula id="NONUM-d2e1589"><alternatives><graphic xlink:href="peerj-cs-08-1037-e027.jpg" position="float"/><tex-math id="tex-NONUM-d2e1589">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{part}(a,\sigma ,\mathcal{A},\mathcal{G})= \left\{ \begin{array}{@{}ll@{}} \displaystyle a &amp;\displaystyle \text{if}a=~\text{[}\text{]}\\ \displaystyle \mathsf{group}(a,\sigma ,\mathcal{A},\mathcal{G}) &amp;\displaystyle \text{if}\sigma ={0}\\ \displaystyle  &amp;\displaystyle \text{otherwise, let}\sigma =\{ {s}_{1},\ldots ,{s}_{i}\} ,\\ \displaystyle \mathsf{group}(~\text{[}a[j],\ldots ,a[k]~\text{]},\sigma ,\mathcal{A},\mathcal{G})\nonumber\\\displaystyle \quad ::\mathsf{part}(~\text{[}a[f],\ldots ,a[g]~\text{]},\sigma ,\mathcal{A},\mathcal{G}) &amp;\displaystyle {\mu }^{id}(a,{\mathop{\bigwedge }\nolimits }_{j=1}^{i}{s}_{j}=[ [\,{s}_{j}\,] ]^{a[1]})=~\text{[}j,\ldots ,k~\text{]},\\ \displaystyle  &amp;\displaystyle ~\text{[}f,\ldots ,g~\text{]}=~\text{[}1,\ldots ,\text{#}a~\text{]}\setminus ~\text{[}j,\ldots ,k~\text{]} \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e1589" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">part</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>a</mml:mi><mml:mspace width="8.50012pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">group</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="8.50012pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>if</mml:mtext><mml:mi>σ</mml:mi><mml:mo>=</mml:mo><mml:mo>0̸</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="8.50012pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mtext>otherwise, let</mml:mtext><mml:mi>σ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi mathvariant="sans-serif">group</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>j</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>k</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mi mathvariant="sans-serif">part</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>f</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>g</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="8.50012pt"/></mml:mtd><mml:mtd columnalign="left"><mml:msup><mml:mrow><mml:mi>μ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mo>⋀</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn></mml:mfenced></mml:mrow></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="8.50012pt"/></mml:mtd><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>f</mml:mi><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>g</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mtext>#</mml:mtext><mml:mi>a</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>∖</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p>Finally, we report below the definition of the <sans-serif>group</sans-serif> operator. There, the last case is where we aggregate the values found in the array <italic toggle="yes">a</italic> following the paths in <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i067.jpg"/><tex-math id="tex-ieqn-367">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{A}$\end{document}</tex-math><mml:math id="mml-ieqn-367" overflow="scroll"><mml:mi mathvariant="script">A</mml:mi></mml:math></alternatives></inline-formula>, and we combine them with the grouped values from <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i068.jpg"/><tex-math id="tex-ieqn-368">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{G}$\end{document}</tex-math><mml:math id="mml-ieqn-368" overflow="scroll"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula> by using the project operator. The aggregation of the values in <italic toggle="yes">a</italic> is done by invoking the <sans-serif>group</sans-serif> operator on the second case. The second case applies when <italic toggle="yes">σ</italic> = ∅ (<italic toggle="yes">i.e.,</italic> when no path <italic toggle="yes">S</italic> is selected for grouping). The result of the application of the second case is an array containing one tree that combines the values of the array <italic toggle="yes">a</italic> following the paths in <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i069.jpg"/><tex-math id="tex-ieqn-374">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{A}$\end{document}</tex-math><mml:math id="mml-ieqn-374" overflow="scroll"><mml:mi mathvariant="script">A</mml:mi></mml:math></alternatives></inline-formula>. To aggregate the values, we use the auxiliary tree variant of the project operator (<italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, Π), cf. ‘The project operator’) to project each value for a given path <italic toggle="yes">q</italic> into its corresponding path <italic toggle="yes">p</italic> in <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i070.jpg"/><tex-math id="tex-ieqn-378">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal{A}$\end{document}</tex-math><mml:math id="mml-ieqn-378" overflow="scroll"><mml:mi mathvariant="script">A</mml:mi></mml:math></alternatives></inline-formula>. <disp-formula id="NONUM-d2e9587"><alternatives><graphic xlink:href="peerj-cs-08-1037-e028.jpg" position="float"/><tex-math id="tex-NONUM-d2e9587">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\mathsf{group}(a,\sigma ,\mathcal{A},\mathcal{G})= \left\{ \begin{array}{@{}l@{}} \displaystyle a  &amp; \text{if}a=~\text{[}\text{]}\\ \displaystyle ~\text{[}\pi (\tau ,\underbrace{{\eta }_{1}\langle {p}_{1},\ldots ,{\eta }_{n}\rangle {p}_{n}{}}_{aggregation})~\text{]}  &amp; \text{if}\sigma ={0}, \text{let} \mathcal{A}={q}_{1}\langle {p}_{1},\ldots ,{q}_{n}\rangle {p}_{n},\\ \displaystyle   &amp; {\eta }_{j}=\pi (a,{q}_{j}), j\in [1,n]\\ \displaystyle \pi ({a}^{{^{\prime}}},\underbrace{[ [\,{s}_{i}\,] ]a[1]\langle {r}_{i},\ldots ,[ [\,{s}_{j}\,] ]a[1]\rangle {r}_{j}{}}_{grouping})  &amp; \text{otherwise, let}{a}^{{^{\prime}}}=\mathsf{group}(a,{0},\mathcal{A},\mathcal{G})\\ \displaystyle   &amp; \mathcal{G}={s}_{1}\langle {r}_{1},\ldots ,{s}_{m}\rangle {r}_{m},\\ \displaystyle   &amp; \sigma =\{ {s}_{i},\ldots ,{s}_{j}\} ,1\leq i\leq j\leq m \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e9587" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi mathvariant="sans-serif">group</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>a</mml:mi><mml:mspace width="10.00002pt"/><mml:mtext>if</mml:mtext><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mtext>]</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>τ</mml:mi><mml:mo>,</mml:mo><mml:munder><mml:mrow><mml:munder accentunder="false" class="mml-underbrace"><mml:mrow><mml:msub><mml:mrow><mml:mi>η</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>η</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>︸</mml:mo></mml:munder></mml:mrow><mml:mrow><mml:mi>a</mml:mi><mml:mi>g</mml:mi><mml:mi>g</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>g</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="10.00002pt"/><mml:mtext>if</mml:mtext><mml:mi>σ</mml:mi><mml:mo>=</mml:mo><mml:mo>0̸</mml:mo><mml:mo>,</mml:mo><mml:mspace width="10.00002pt"/><mml:mtext>let</mml:mtext><mml:mspace width="10.00002pt"/><mml:mi mathvariant="script">A</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="10.00002pt"/><mml:msub><mml:mrow><mml:mi>η</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mspace width="10.00002pt"/><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi></mml:mfenced></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:munder><mml:mrow><mml:munder accentunder="false" class="mml-underbrace"><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn></mml:mfenced></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn></mml:mfenced></mml:mrow><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>︸</mml:mo></mml:munder></mml:mrow><mml:mrow><mml:mi>g</mml:mi><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>p</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi></mml:mrow></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/><mml:mtext>otherwise, let</mml:mtext><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mi mathvariant="sans-serif">group</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mo>0̸</mml:mo><mml:mo>,</mml:mo><mml:mi mathvariant="script">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:mfenced></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="10.00002pt"/><mml:mi mathvariant="script">G</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>〈</mml:mo><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mspace width="10.00002pt"/><mml:mi>σ</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="{" close="}"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>≤</mml:mo><mml:mi>j</mml:mi><mml:mo>≤</mml:mo><mml:mi>m</mml:mi></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p><bold>Example: semantics</bold> To illustrate the semantics of the group operator, we consider the alternative version of the code shown at Line 12 (and presented as a second example at the beginning of this section), where we want to aggregate for <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i071.jpg"/><tex-math id="tex-ieqn-380">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-380" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> but we also want to keep those values grouped by <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i072.jpg"/><tex-math id="tex-ieqn-381">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-381" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i073.jpg"/><tex-math id="tex-ieqn-382">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-382" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i074.jpg"/><tex-math id="tex-ieqn-383">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-383" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
   ______________________________________________________________________________________________________ 
 
   sl ← γ ( sl , ( quality  ) , ( day  , month  , year  ) )    </preformat>
        <p>In the semantics, the first thing we do is the de-sugaring of paths—namely <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i075.jpg"/><tex-math id="tex-ieqn-384">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-384" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i076.jpg"/><tex-math id="tex-ieqn-385">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-385" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i077.jpg"/><tex-math id="tex-ieqn-386">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-386" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i078.jpg"/><tex-math id="tex-ieqn-387">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-387" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, which respectively expand to <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i079.jpg"/><tex-math id="tex-ieqn-388">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{quality}\langle \rangle \underline{quality}$\end{document}</tex-math><mml:math id="mml-ieqn-388" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i080.jpg"/><tex-math id="tex-ieqn-389">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{day}\langle \rangle \underline{day}$\end{document}</tex-math><mml:math id="mml-ieqn-389" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>y</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i081.jpg"/><tex-math id="tex-ieqn-390">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{month}\langle \rangle \underline{month}$\end{document}</tex-math><mml:math id="mml-ieqn-390" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, and <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i082.jpg"/><tex-math id="tex-ieqn-391">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{year}\langle \rangle \underline{year}$\end{document}</tex-math><mml:math id="mml-ieqn-391" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:munder class="mml-underline"><mml:mrow><mml:mi>y</mml:mi><mml:mi>e</mml:mi><mml:mi>a</mml:mi><mml:mi>r</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>—and then we apply the de-sugared group operator on <monospace>—</monospace> sl— (which, we remind, contains only values corresponding to the dates 2020-11-29 and 2020-11-30, represented by the trees <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i083.jpg"/><tex-math id="tex-ieqn-392">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}${t}_{29}^{1},{t}_{29}^{2},\ldots $\end{document}</tex-math><mml:math id="mml-ieqn-392" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>29</mml:mn></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>29</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo></mml:math></alternatives></inline-formula> below).</p>
        <p>
          <inline-graphic xlink:href="peerj-cs-08-1037-i084.jpg" content-type="symbol"/>
        </p>
      </sec>
      <sec>
        <title>The lookup operator</title>
        <p><italic toggle="yes">λ</italic>(<italic toggle="yes">a</italic>, <italic toggle="yes">q</italic>, <italic toggle="yes">a</italic>′, <italic toggle="yes">r</italic>, <italic toggle="yes">p</italic>)</p>
        <p>The purpose of the <italic toggle="yes">lookup</italic> operator is to join the trees in a source array <italic toggle="yes">a</italic> with the trees in an adjunct array <italic toggle="yes">a</italic>′. For those values obtained by applying the path <italic toggle="yes">q</italic> on <italic toggle="yes">a</italic>, the lookup operator pairs them with the equivalent values obtained by applying <italic toggle="yes">r</italic> on the adjunct array <italic toggle="yes">a</italic>′ and it projects the latter under path <italic toggle="yes">p</italic> in the paired trees of <italic toggle="yes">a</italic>.</p>
        <p><bold>Example</bold> Before commenting on the application of the lookup in Listing 2, we describe the results of the group at Line 4 and of the two projections, respectively at Line 5 and Line 13. At Line 4, we aggregate the temperatures in the <monospace>—</monospace> tmp— data structure, which results into</p>
        <p>
          <preformat xml:space="preserve" position="float"> 
 
 
  __________________________________________________________________________________________________________ 
 
  [ υ { t : [ 36 { } , 36 { } , 37 { } ] } ]    </preformat>
        </p>
        <p>The projection at Line 5 performs two actions over the <monospace>—</monospace> tmp— data structure. First, it keeps only the node <italic toggle="yes">t</italic> (holding the temperatures filtered for the days of interest). Second, it projects into the filtered data structure the pseudo-identifier (<monospace>—</monospace> pseudoID—) under the node <italic toggle="yes">patient</italic>_<italic toggle="yes">id</italic>.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  ________________________________________________________________________________________________________________________ 
 
  [ υ { t : [ 36 { } , 36 { } , 37 { } ] , patient_id : [ ' id_xxx ' { } ] } ]    </preformat>
        <p>The projection at Line 13, similar to the one above, keeps only the node <italic toggle="yes">quality</italic> (holding the quality of the sleep for the days of interest) and it projects the <monospace>—</monospace> pseudoID— under the node <italic toggle="yes">patient</italic>_<italic toggle="yes">id</italic>.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _____________________________________________________________________________________________________________________ 
 
  [ υ { quality : [ ' good ' { } , ' good ' { } , ' poor ' { } , ' good ' { } ] , 
   patient_id : [ ' id_xxx ' { } ] } ]    </preformat>
        <p>We can now comment on the lookup at Line 14, which we report below for convenience.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _______________________________________________________________________ 
 
  14 bs ← λ ( sl , patient id  , tmp , patient id  , temperatures  )    </preformat>
        <p>The instruction joins the data structures <monospace>—</monospace> tmp— and <monospace>—</monospace> sl— by pairing the values under the path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i085.jpg"/><tex-math id="tex-ieqn-406">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{patient\text{_}id}$\end{document}</tex-math><mml:math id="mml-ieqn-406" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mtext>_</mml:mtext><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula> (this is a special case where the left and right paths of the join coincide, <italic toggle="yes">i.e.,</italic> the path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i086.jpg"/><tex-math id="tex-ieqn-407">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{patient\text{_}id}$\end{document}</tex-math><mml:math id="mml-ieqn-407" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mtext>_</mml:mtext><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>). The last path in the application, <italic toggle="yes">i.e.,</italic>
<inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i087.jpg"/><tex-math id="tex-ieqn-408">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{temperatures}$\end{document}</tex-math><mml:math id="mml-ieqn-408" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>u</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>, indicates where the values from the right data structure (<monospace>—</monospace> tmp—) should be projected in the paired values of the left one (<monospace>—</monospace> sl—).</p>
        <p>At Line 14, we store the result of the application of the lookup into a new variable <monospace>—</monospace> bs— (standing for bio-signals).</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  ____________________________________________________________________________________________________________________________________ 
 
  υ { quality : [ ' good ' { } , ' good ' { } , ' poor ' { } , ' good ' { } ] , 
   temperatures : [ υ { t : [ 36 { } , 36 { } , 37 { } ] , 
   patient_id : [   ' id_xxx ' { } ] } ] , 
   patient_id : [   ' id_xxx ' { } ] }    </preformat>
        <p>For completeness, we report the result of the last step of Listing 2, at Line 15, where we apply the project operator to reshape the data structure for the invocation of the <monospace>—</monospace> detectEncephalopathy— functionality at Line 16.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________________________________________________ 
 
  υ { quality : [ ' good ' { } , ' good ' { } , ' poor ' { } , ' good ' { } ] , 
   temperatures : [ 36 { } , 36 { } , 37 { } ] , 
   patient_id : [   ' id_xxx ' { } ] }    </preformat>
        <p><bold>Semantics</bold> In the semantics of the lookup, for each element <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] (1 ≤ <italic toggle="yes">i</italic> ≤ <monospace>#</monospace><italic toggle="yes">a</italic>), we use the tree version of the project operator (<italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, Π), cf. ‘The project operator’) to merge the element <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] with the paired values from <italic toggle="yes">a</italic>′ under <italic toggle="yes">r</italic>. Since, by its definition, <italic toggle="yes">π</italic>(<italic toggle="yes">t</italic>, Π) corresponds to the merging (⊕) of the single applications of each component in the sequence Π, we use this to merge the source tree <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] with the paired elements in <italic toggle="yes">a</italic>′. Hence, for each element <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>], we define Π<sub><italic toggle="yes">i</italic></sub> as the sequence <italic toggle="yes">ɛ</italic>, <italic toggle="yes">μ</italic>(<italic toggle="yes">a</italic>′, <italic toggle="yes">φ</italic><sub><italic toggle="yes">i</italic></sub>)〈〉<italic toggle="yes">p</italic>. The projection for the first component (<italic toggle="yes">ɛ</italic>) returns the original tree (<italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>]). The projection for the second component (<italic toggle="yes">μ</italic>(<italic toggle="yes">a</italic>′, <italic toggle="yes">φ</italic><sub><italic toggle="yes">i</italic></sub>)〈〉<italic toggle="yes">p</italic>) injects the result of the match <italic toggle="yes">μ</italic>(<italic toggle="yes">a</italic>′, <italic toggle="yes">φ</italic><sub><italic toggle="yes">i</italic></sub>) into the path <italic toggle="yes">p</italic>, where the criterion <italic toggle="yes">φ</italic><sub><italic toggle="yes">i</italic></sub>, equal to <italic toggle="yes">r</italic> = [[<italic toggle="yes">q</italic>]]<sup><italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>]</sup>, selects those values in <italic toggle="yes">a</italic>′ that under <italic toggle="yes">r</italic> coincide with the array found under <italic toggle="yes">q</italic> in <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>].</p>
        <p>Note that when for some <italic toggle="yes">i</italic> we have <italic toggle="yes">q</italic> not present in <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] (<italic toggle="yes">i.e.,</italic> [[<italic toggle="yes">q</italic>]]<sup><italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>]</sup> = <italic toggle="yes">α</italic>) the lookup operator joins <italic toggle="yes">a</italic>[<italic toggle="yes">i</italic>] with those trees in <italic toggle="yes">a</italic>′ where <italic toggle="yes">r</italic> does not exist (<italic toggle="yes">i.e., μ</italic>(<italic toggle="yes">a</italic>′, <italic toggle="yes">r</italic> = <italic toggle="yes">α</italic>)). <disp-formula id="NONUM-d2e11205"><alternatives><graphic xlink:href="peerj-cs-08-1037-e029.jpg" position="float"/><tex-math id="tex-NONUM-d2e11205">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{eqnarray*}\lambda (a,q,{a}^{{^{\prime}}},r,p)=~\text{[}\pi (a[1],{\Pi }_{1})~\text{]}::\cdots ::~\text{[}\pi (a[\mathtt{#}a],{\Pi }_{\mathtt{#}a})~\text{]} \text{where}  \left\{ \begin{array}{@{}l@{}} \displaystyle 1\leq i\leq \mathtt{#}a \\ \displaystyle {\Pi }_{i}=,\mu ({a}^{{^{\prime}}},{\varphi }_{i})\;\langle \rangle \;p \\ \displaystyle {\varphi }_{i}=(r=[ [\,q\,] ]^{a[i]})  \end{array} \right. \end{eqnarray*}\end{document}</tex-math><mml:math id="mml-NONUM-d2e11205" overflow="scroll"><mml:mstyle displaystyle="true"><mml:mi>λ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>q</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>r</mml:mi><mml:mo>,</mml:mo><mml:mi>p</mml:mi></mml:mfenced></mml:mrow><mml:mo>=</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mo>⋯</mml:mo><mml:mo>:</mml:mo><mml:mo>:</mml:mo><mml:mspace width="1em" class="nbsp"/><mml:mtext>[</mml:mtext><mml:mi>π</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi mathvariant="monospace">#</mml:mi><mml:mi>a</mml:mi></mml:mfenced></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="monospace">#</mml:mi><mml:mi>a</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mspace width="1em" class="nbsp"/><mml:mtext>]</mml:mtext><mml:mspace width="10.00002pt"/><mml:mtext>where</mml:mtext><mml:mspace width="10.00002pt"/><mml:mfenced separators="" open="{" close=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>≤</mml:mo><mml:mi mathvariant="monospace">#</mml:mi><mml:mi>a</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:msub><mml:mrow><mml:mi>Π</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>ɛ</mml:mi><mml:mo>,</mml:mo><mml:mi>μ</mml:mi><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:msup><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfenced></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mo>〉</mml:mo></mml:mrow><mml:mi>p</mml:mi><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:msub><mml:mrow><mml:mi>φ</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mfenced separators="" open="(" close=")"><mml:mi>r</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>q</mml:mi></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi>a</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mi>i</mml:mi></mml:mfenced></mml:mrow></mml:mrow></mml:msup></mml:mfenced></mml:mrow><mml:mspace width="10.00002pt"/></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mstyle></mml:math></alternatives></disp-formula>
</p>
        <p><bold>Example: semantics</bold> Below, we report the unfolding of the execution of the lookup at Line 14. Since we have one value in <monospace>—</monospace> sl—, we do not perform a concatenation of arrays but we just apply the projection for <monospace>—</monospace> sl—[1]. In the three reductions below, first, we retrieve the content of <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i088.jpg"/><tex-math id="tex-ieqn-445">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$[ [\underline{patient\text{_}id}] ]^{\mathtt{sl}[1]}$\end{document}</tex-math><mml:math id="mml-ieqn-445" overflow="scroll"><mml:msup><mml:mrow><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mspace width="-1.49994pt"/><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:munder class="mml-underline"><mml:mrow><mml:mi>p</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mtext>_</mml:mtext><mml:mi>i</mml:mi><mml:mi>d</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:mfenced></mml:mrow><mml:mspace width="-1.49994pt"/></mml:mfenced></mml:mrow></mml:mrow><mml:mrow><mml:mi mathvariant="monospace">sl</mml:mi><mml:mrow><mml:mfenced separators="" open="[" close="]"><mml:mn>1</mml:mn></mml:mfenced></mml:mrow></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>, then, we execute the match (which essentially returns the whole content of the <monospace>—</monospace> tmp— variable), and, finally, we merge <monospace>—</monospace> sl—[1] (obtained by the projection under <italic toggle="yes">ɛ</italic>) with the result of the match projected under path <inline-formula><alternatives><inline-graphic xlink:href="peerj-cs-08-1037-i089.jpg"/><tex-math id="tex-ieqn-448">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\underline{temperatures}$\end{document}</tex-math><mml:math id="mml-ieqn-448" overflow="scroll"><mml:munder class="mml-underline"><mml:mrow><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>u</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mo accent="true">¯</mml:mo></mml:munder></mml:math></alternatives></inline-formula>.</p>
        <p>
          <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________________________________________________ 
 
  [ π( sl [1],(ɛ,μ( tmp ,patient id = [[ patient id ]]sl [1] ) 〈〉 temperatures  )) ] 
    ⇒ [ π( sl [1],(ɛ,μ( tmp ,patient id = [ ' id_xxx ' { } ] ) 〈〉 temperatures  )) ] 
    ⇒ [ π( sl [1],(ɛ, [ υ { t : [ 36 { } , 36 { } , 37 { } ] , patient_id : [ ' id_xxx ' { } ] } ] 
    〈〉 temperatures  )) ] 
    ⇒ [ υ { quality : [ ' good ' { } , ' good ' { } , ' poor ' { } , ' good ' { } ] , 
    patient_id : [ ' id_xxx ' { } ] } ⊕ υ { temperatures : [ υ { t : [ 36 { } , 36 { 
   } , 37 { } ] , 
    patient_id : [ ' id_xxx ' { } ] } ] } ]    </preformat>
        </p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>Implementation</title>
    <p>We now present Jolie/Tquery, our implementation of Tquery as a Jolie microservice. Specifically, we chose to release Jolie/Tquery as a library that users can include and invoke locally in their Jolie projects—as an npm package (<ext-link xlink:href="https://www.npmjs.com/package/@jolie/tquery" ext-link-type="uri">https://www.npmjs.com/package/@jolie/tquery</ext-link>.). However, thanks to Jolie’s module system, users can also expose Jolie/Tquery as an independent service, <italic toggle="yes">e.g.</italic>, as a RESTful service (<xref rid="ref-48" ref-type="bibr">Montesi, 2016</xref>) as well as a publish/subscribe MQTT worker (<xref rid="ref-28" ref-type="bibr">Gabbrielli et al., 2018</xref>) (as briefly detailed in ‘The implementation of Jolie/Tquery’).</p>
    <p>In this section, first, we describe the main components of Jolie/Tquery, specified through the abstractions provided by the Jolie language (which follow the typical partition of microservice components (<xref rid="ref-31" ref-type="bibr">Giallorenzo et al., 2021</xref>)), namely: its Application Programming Interfaces (API), its access points, and its logic/behaviour. In particular, APIs and access points<xref rid="fn-2" ref-type="fn"><sup>2</sup></xref>
<fn id="fn-2"><label>2</label><p>These specify the network, transport, and application protocols, <italic toggle="yes">e.g.</italic>, HTTP/TCP/IP.</p></fn>describe how users interact with Jolie/Tquery, while the behaviour implements the semantics of Tquery (cf. ‘The Tquery Formalisation’).</p>
    <p>Then, we slightly extend the API and behaviour of Jolie/Tquery to support query <italic toggle="yes">pipelines</italic>, <italic toggle="yes">i.e.,</italic> multi-stage queries where (<italic toggle="yes">a</italic>) the first stage uses the data provided as input, (<italic toggle="yes">b</italic>) each other stage transforms the data from the proceeding stage, and (<italic toggle="yes">c</italic>) the last stage returns its output back to the invoker. We have two main reasons for extending Jolie/Tquery with pipelines: (<italic toggle="yes">i</italic>) for efficiency, since it removes the overhead of data transmission between sequential stages (as, <italic toggle="yes">e.g.</italic>, in Listing 2 at Lines 3–5 and Lines 9–15); (<italic toggle="yes">ii</italic>) for familiarity with the MongoDB Aggregation Framework (<xref rid="ref-47" ref-type="bibr">MongoDB Inc., 2022</xref>), where users express queries as multi-stage transformations.</p>
    <p>Finally, we show the implementation of the example from ‘Overview and Running Example’ in Jolie/Tquery, both using the original sequence of operators (cf. ‘Overview and Running Example’) and as a combination of multi-stage pipelines.</p>
    <sec>
      <title>The implementation of Jolie/Tquery</title>
      <p>We start from the API of Jolie/Tquery and then present how Jolie allows us to provide the microservice as a library and to also have an efficient implementation of its engine.</p>
      <p><bold>The Jolie/Tquery API</bold> Simplifying (<xref rid="ref-31" ref-type="bibr">Giallorenzo et al., 2021</xref>; <xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>), in Jolie, the API of a microservice corresponds to an <monospace>—</monospace> interface—, which is a named collection of resources, called operations, each defined by a name, an interaction modality—i.e., asynchronous invocations or synchronous request responses (<xref rid="ref-68" ref-type="bibr">W3c, 2001</xref>)—and schemas of their expected inbound and outbound data, called <monospace>—</monospace> type—s. Thus, in <xref rid="fig-2" ref-type="fig">Fig. 2</xref>, we report the API of Jolie/Tquery expressed as a Jolie <monospace>—</monospace> interface—, with its associated <monospace>—</monospace> type—s.</p>
      <fig position="float" id="fig-2">
        <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-2</object-id>
        <label>Figure 2</label>
        <caption>
          <title>Mapping between the Tquery operators and Jolie/Tquery API.</title>
        </caption>
        <graphic xlink:href="peerj-cs-08-1037-g002" position="float"/>
      </fig>
      <p>The code in <xref rid="fig-2" ref-type="fig">Fig. 2</xref> is a fragment of the <monospace>main.ol</monospace>
<xref rid="fn-3" ref-type="fn"><sup>3</sup></xref>
<fn id="fn-3"><label>3</label><p>Available at <ext-link xlink:href="https://github.com/jolie/tquery/blob/master/main.ol" ext-link-type="uri">https://github.com/jolie/tquery/blob/master/main.ol</ext-link>.</p></fn>executable Jolie file from Jolie/Tquery. In <xref rid="fig-2" ref-type="fig">Fig. 2</xref>, we stylise the code omitting <monospace>—</monospace> void— root types (described in the following paragraph) and naming <monospace>—</monospace> type—s using the symbols from the formalisation. These conventions help keeping the code compact and also ease the comparison with Tquery, in unison with the boxed fragments reporting the Tquery syntax in <xref rid="fig-2" ref-type="fig">Fig. 2</xref>.</p>
      <p>We briefly introduce the main elements of Jolie APIs and we comment on the choices that drove the design of the Jolie/Tquery API. At Lines 1–8 of <xref rid="fig-2" ref-type="fig">Fig. 2</xref>, we find the definition of <monospace>—</monospace> TqueryInterface—, the Jolie/Tquery <monospace>—</monospace> interface—. The keyword <monospace>—</monospace> requestResponse— indicates that the operations associated to it (as a comma-separated list) are synchronous invocations, where the caller waits for the callee (here, the Jolie/Tquery service) to reply with the computed response. We defined all the operations of Jolie/Tquery as <monospace>—</monospace> requestResponse—s since this interaction modality matches the invocation semantics of the Tquery operators.<xref rid="fn-4" ref-type="fn"><sup>4</sup></xref>
<fn id="fn-4"><label>4</label><p>A possible alternative, here, is using asynchronous <monospace>—</monospace> oneWay—s and either choose a pull or push semantics to retrieve the results of the queries. We did not pursue this direction, since this modality would sensibly diverge from that of Tquery.</p></fn></p>
      <p>In the syntax of operations, <italic toggle="yes">e.g.</italic>, <preformat xml:space="preserve" position="float"> 
 
   match ( μ Type ) ( QueryResponse )    </preformat> at Line 3, we find the name of the operation ( <preformat xml:space="preserve" position="float"> 
 
   match </preformat>), the request <monospace>—</monospace> type— between the first parenthesis ( <preformat xml:space="preserve" position="float"> 
Type </preformat>), and the response <monospace>—</monospace> type— between the second parenthesis ( <preformat xml:space="preserve" position="float"> 
QueryResponse </preformat>).</p>
      <p>A Jolie <monospace>—</monospace> type— has a name, <italic toggle="yes">e.g.</italic>, <preformat xml:space="preserve" position="float"> 
QueryResponse    </preformat> at Line 9, and a shape similar to that of the trees described in ‘The Tquery Formalisation’: a root that contains a value (<italic toggle="yes">e.g.</italic>, <monospace>—</monospace> bool—, <monospace>—</monospace> int—, <monospace>—</monospace> string—, as well as the empty value, <monospace>—</monospace> void—) and sub-nodes that point to quantified arrays of typed trees, <italic toggle="yes">e.g.</italic>, the <preformat xml:space="preserve" position="float"> 
QueryResponse </preformat> <monospace>—</monospace> type— has a <monospace>—</monospace> void— root (omitted) and a sub-node named <monospace>—</monospace> result— which points to an unbounded array (<monospace>—</monospace> *—) of elements that can assume any shape (<monospace>—</monospace> undefined—).</p>
      <p>Jolie <monospace>—</monospace> type—s can be further refined, <italic toggle="yes">e.g.</italic>, at Line 10, we restrict the set of strings that the root of the <monospace>—</monospace> type— <monospace>—</monospace> Path— can assume to those matching the regular expression within the <monospace>—</monospace> regex— predicate, following the definition of paths from Tquery.</p>
      <p>Jolie <monospace>—</monospace> type—s support sum types (<xref rid="ref-53" ref-type="bibr">Pierce, 2002</xref>, Chapter 11) (<xref rid="ref-58" ref-type="bibr">Safina et al., 2016</xref>) of the shape <monospace>—</monospace> type— <monospace>Name: LeftType—RightType</monospace>. Here, we use sum types to keep the syntax of Tquery and the structure of Jolie/Tquery <monospace>—</monospace> type—s close. For example, at Line 12, we specify that the <monospace>—</monospace> type— <italic toggle="yes">φ</italic> can either be a <monospace>—</monospace> bool—ean, the <monospace>—</monospace> type— ∃<italic toggle="yes">p</italic>, etc..</p>
      <p><bold>The Jolie/Tquery access points and behaviour</bold> We now move to the description of the access points and the behaviour of Jolie/Tquery, reported in Listing 3. In Jolie, a microservice is identified by the keyword <monospace>—</monospace> service— associated with a name (in Listing 3, <monospace>Tquery</monospace>), a set of access points (in Listing 3, the <monospace>—</monospace> inputPort— at Lines 46–49), and a set of behaviours (in Listing 3, defined through the <monospace>—</monospace> foreign— language (<monospace>—</monospace> java—) at Lines 51–53).</p>
      <p>
        <preformat xml:space="preserve" position="float"> 
 
 
  _________________________________________________________________________________ 
 
  45 service  Tquery  { 
   46  inputPort  IP  { 
   47  location : " local " 
   48  interfaces : TqueryInterface 
   49  } 
   50 
      51  foreign  java  { 
   52  class : " joliex . tquery . engine . TqueryService " 
   53  } 
   54 } 
               Listing 3: The Tquery service.    </preformat>
      </p>
      <p>Concerning access points, Jolie provides <monospace>—</monospace> inputPort—s to specify ingress gates, which define how a service expects clients to invoke its operations, and <monospace>—</monospace> outputPort—s (absent in Listing 3), which specify outbound egress gates for invoking other services (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>). At Line 46 of Listing 3, we define an <monospace>—</monospace> inputPort— (its name is immaterial here) with <monospace>—</monospace> location— <monospace>—</monospace> ”local”— and <monospace>—</monospace> interfaces— <monospace>—</monospace> TqueryInterface— (cf. <xref rid="fig-2" ref-type="fig">Fig. 2</xref>). By specifying an inbound access point with a <monospace>—</monospace> ”local”— <monospace>—</monospace> location—, we indicate that our service accepts in-memory invocations from another Jolie service that runs Jolie/Tquery as an internal library—through a mechanism called “embedding” (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>).<xref rid="fn-5" ref-type="fn"><sup>5</sup></xref>
<fn id="fn-5"><label>5</label><p>Jolie access points simplify the definition of alternative service configurations. For instance, to expose Jolie/Tquery as a RESTful service, we need to add a new <monospace>—</monospace> inputPort— (or change the one already defined) setting its <monospace>—</monospace> location— to a socket address (<italic toggle="yes">e.g.</italic>, <monospace>—</monospace> ”socket://localhost:8080”—) and its <monospace>—</monospace> protocol— to <monospace>—</monospace> http— (<xref rid="ref-48" ref-type="bibr">Montesi, 2016</xref>). In general, <monospace>—</monospace> protocol—s in Jolie specify the mapping between protocol-specific resources and Jolie operations and their data serialisation. Since the <monospace>—</monospace> ”local”— <monospace>—</monospace> location— transfers in-memory data structures, the definition of a <monospace>—</monospace> protocol— is unnecessary.</p></fn></p>
      <p>Regarding behaviours, Jolie provides a high-level language (akin to process calculi (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>)) to specify the composition of sophisticated workflows (<xref rid="ref-30" ref-type="bibr">Gabbrielli, Giallorenzo &amp; Montesi, 2014</xref>) through a clean and minimal syntax. Jolie also supports the specification of behaviours through lower-level languages, like Java and Javascript, which are useful when integrating/exposing existing libraries as services or to manage lower-level abstractions like threads and pointers for performance. Jolie/Tquery falls in the latter category and we implemented its behaviour (and, thus, the Tquery semantics) using Java. This is visible at Lines 51–53 of Listing 3, where we declare the usage of the <monospace>—</monospace> foreign— language <monospace>—</monospace> java— to specify the <monospace>—</monospace> service— behaviour (implemented within the <monospace>—</monospace> TqueryService— class under the class-path <monospace>—</monospace> joliex.tquery.engine—). We omit the presentation of the Java code, since it closely follows the logic presented in ‘The Tquery Formalisation’.</p>
      <sec>
        <title>Extending Jolie/Tquery with query pipelines</title>
        <p>Besides providing a faithful implementation of Tquery, we decided to extend Jolie/Tquery to support multi-stage queries both for reasons of performance and familiarity with the MongoDB Aggregation framework (<xref rid="ref-47" ref-type="bibr">MongoDB Inc., 2022</xref>).</p>
        <p>The extension is minimal and provides an interesting point for showcasing the flexibility of the Jolie language in evolving existing projects.</p>
        <p>Namely, the extension regards the API and the behaviour. We report in Listing 5 the changes to the Jolie/Tquery API and we omit, as done above, to present the Java code of the implementation, which is a straightforward sequentialisation of calls to the other implemented operators.</p>
        <p>In the API, we add the <monospace>—</monospace> pipeline— operation among the operations in the <monospace>—</monospace> TqueryInterface— <monospace>—</monospace> interface—. The new operation requires an associated request <monospace>—</monospace> type— that contains the specification of the multi-stage queries. Having defined the <monospace>—</monospace> type—s of the other operations as independent components comes in handy. Indeed, the <monospace>—</monospace> Pipeline— <monospace>—</monospace> type— defines its multi-stage query as an array (under the sub-node <monospace>—</monospace> pipeline—) of subtrees specified through the <monospace>—</monospace> type—s of the other operations. For instance, at Line 11 in Listing 5, a <monospace>—</monospace> match— (<monospace>—</monospace> Query—) stage has the structure of the <italic toggle="yes">φ</italic>
<monospace>—</monospace> type—, which is also the one used by the <monospace>—</monospace> match— operation (in the <preformat xml:space="preserve" position="float"> 
Type    </preformat> <monospace>—</monospace> type—). Here, the only exception is the <monospace>—</monospace> type— , which we did not use for the node <monospace>—</monospace> lookupQuery—, since the <monospace>—</monospace> leftData— sub-node is absent as the pipeline provides the (left-side) data.</p>
        <preformat xml:space="preserve" position="float"> 
 
 
   _____________________________________________________________________________ 
 
   1 interface  TqueryInterface  { 
   2  RequestResponse : 
  3  match  ( μ Type  ) ( QueryResponse  ) , 
  4   // ... 
  5  pipeline ( Pipeline  ) ( QueryResponse  ) 
  6 } 
   7 
      8 type  Pipeline : { 
   9  data * : undefined 
  10  pipeline [ 1 , * ] : 
  11  { matchQuery  : φ } 
   12   |  { projectQuery [ 1 , * ] : Π } 
   13   |  { unwindQuery  : Path  } 
   14   |  { groupQuery  : Group_Exp  } 
   15   |  { lookupQuery  : { 
   16  leftPath  : Path 
  17  rightData * : undefined 
  18  rightPath  : Path 
  19  dstPath  : Path 
  20  } 
   21  } 
   22 } 
         Listing 4: Pipeline support extension (fragments).    </preformat>
        <p>The curious reader could wonder why we did not specify the whole Jolie/Tquery interface through the single <monospace>—</monospace> pipeline— operation. Our point is that, by having both possibilities, users can opt for the modality that best suits their scenario. For instance, when developing and debugging a query, it is useful to look at the shape of the single invocations and responses. Moreover, while pipelines help to make local sequential invocations efficient, they make the code harder to distribute, since the query now lives as an indivisible data structure. On the contrary, if we found out that a specific stage of a query, <italic toggle="yes">e.g.</italic>, the match at Line 3 or the unwind at Line 9 of Listing 2, would benefit from scaling it over multiple copies, we could do that by isolating each operation into a dedicated service and redirecting their inputs/outputs to perform our original local query as a distributed one. In that case, despite the architectural change, the logic of the query would remain intact.</p>
      </sec>
    </sec>
    <sec>
      <title>The Running Example written in Jolie/Tquery</title>
      <p>We conclude this section by presenting the implementation of our running example from ‘Overview and Running Example’, Listing 2. Specifically, we present two alternatives: a more faithful one in <xref rid="fig-3" ref-type="fig">Fig. 3</xref>, where we have a one-to-one correspondence between Tquery operators and Jolie/Tquery operations, and one in <xref rid="fig-4" ref-type="fig">Fig. 4</xref> that obtains the same result by using Jolie/Tquery pipelines.</p>
      <fig position="float" id="fig-3">
        <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-3</object-id>
        <label>Figure 3</label>
        <caption>
          <title>Single-stage implementation of Listing 2.</title>
        </caption>
        <graphic xlink:href="peerj-cs-08-1037-g003" position="float"/>
      </fig>
      <fig position="float" id="fig-4">
        <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-4</object-id>
        <label>Figure 4</label>
        <caption>
          <title>Multi-stage implementation of Listing 2.</title>
        </caption>
        <graphic xlink:href="peerj-cs-08-1037-g004" position="float"/>
      </fig>
      <p>While the code in <xref rid="fig-3" ref-type="fig">Fig. 3</xref> fulfills the promise made in ‘Overview and Running Example’ to show the implementation of the example in Listing 2, we take the chance to illustrate, in <xref rid="fig-4" ref-type="fig">Fig. 4</xref>, how one can transition between a composition of single-stage queries to multi-stage, pipelined ones. Moreover, <xref rid="fig-4" ref-type="fig">Fig. 4</xref> is a reference for the actual Jolie/Tquery code used in ‘Benchmarks’ to benchmark our implementation.</p>
      <p>Translating Tquery operator calls into Jolie/Tquery ones is straightforward, <italic toggle="yes">e.g.</italic>, the match at Line 3 of Listing 2 corresponds to Lines 4–11 of <xref rid="fig-3" ref-type="fig">Fig. 3</xref>. As expected, the main difference is that we need to map the elements of the criterion <italic toggle="yes">φ</italic> from Line 3 of Listing 2 into a Jolie tree that follows the shape of type <italic toggle="yes">φ</italic> (cf. Lines 11–19 of <xref rid="fig-2" ref-type="fig">Fig. 2</xref>).</p>
      <p>The reuse of the <monospace>—</monospace> type—s of the single-stage operators in the definition of the <monospace>—</monospace> pipeline— helps migrating between the two modalities. For example, at Lines 4–10 of <xref rid="fig-4" ref-type="fig">Fig. 4</xref>, we find that the definition of the match stage under the <monospace>—</monospace> pt— data structure follows the one at Lines 4–11 of <xref rid="fig-3" ref-type="fig">Fig. 3</xref>.</p>
      <p>We finally show how our implementation can interact with different services and heterogeneous data sources. In particular, we assume that the service offered by the hospital communicates XML messages over HTTP, and that smart-watches instead use an efficient binary protocol—SODEP (<xref rid="ref-49" ref-type="bibr">Montesi, Guidi &amp; Zavattaro, 2014</xref>). These assumptions are coded in Jolie for our example with appropriate <monospace>—</monospace> outputPort—s that allow our implementation to contact these other components by using the right transports and data formats, as follows (we parameterise our code on the locations of these components, which are provided externally).</p>
      <preformat xml:space="preserve" position="float"> 
 
 
   _______________________________________________________________________________________________________________________ 
 
   1 outputPort  HospitalIT  { 
2  location : params . hospitalLocation 
 3  protocol : http  { format  = " xml "  } 
4  interfaces : HospitalInterface 
 5 } 
6 
7 outputPort  SmartWatch  { 
8  location : params . smartWatchLocation 
   9  protocol : sodep 
 10  interfaces : SmartWatchInterface 
   11 } 
        Listing 5: Collecting data from heterogeneous sources.    </preformat>
      <p>The rest of our implementation is modular to these details: changing locations, protocols, or data formats does not require changing the code shown in <xref rid="fig-3" ref-type="fig">Figs. 3</xref> and <xref rid="fig-4" ref-type="fig">4</xref>.</p>
    </sec>
  </sec>
  <sec>
    <title>Benchmarks</title>
    <p>We now present the method we followed to benchmark Jolie/Tquery and our experimental results. Specifically, we concentrate on the main application scenario of Tquery, <italic toggle="yes">i.e.,</italic> that of ephemeral data-handling, exemplified in ‘Overview and Running Example’ with the query logic presented in Listing 2. In ‘The Running Example written in Jolie/Tquery’ we showed two possible concrete realisations of the logic in Listing 2, developed using Jolie/Tquery. Here, we use Listing 2 as use case for our benchmarks and, as motivated below, the pipeline Jolie/Tquery realisation of Listing 2 (from <xref rid="fig-4" ref-type="fig">Fig. 4</xref>), as the reference implementation to run our experiments.</p>
    <p>To obtain a baseline against which to contrast the performance of Jolie/Tquery, we develop an alternative implementation of the example at ‘Overview and Running Example’ that uses MongoDB. This alternative implementation is the closest we can obtain to the logic expressed in ‘Overview and Running Example’, since <italic toggle="yes">i</italic>) the MongoDB query language (<xref rid="ref-47" ref-type="bibr">MongoDB Inc., 2022</xref>) inspired (<italic toggle="yes">via</italic> (<xref rid="ref-13" ref-type="bibr">Botoeva et al., 2018</xref>)) the design of Tquery and <italic toggle="yes">ii</italic>) the former supports a superset of the operators of the latter. As a confirmation of this fact, we implemented the logic of Listing 2 using MongoDB as a sequence of two, multi-stage queries, issued through the “aggregate” MongoDB API (<ext-link xlink:href="https://docs.mongodb.com/manual/aggregation/" ext-link-type="uri">https://docs.mongodb.com/manual/aggregation/</ext-link>). The resulting implementation follows the same invocation pattern as the one presented in ‘The Running Example written in Jolie/Tquery’, which uses the pipeline API extension of Jolie/Tquery, thus, motivating our choice to use this variant.</p>
    <p>We remark that MongoDB provides an “in-memory” modality that avoids the overhead of making the data persistent on disk. Using this modality would likely give us baseline values closer to the in-memory performance profile of Tquery. Unfortunately, this modality is accessible only through the paid MongoDB Enterprise Advanced Subscription. Since using a paid-only feature would hinder the reproducibility of our experiments, we do not consider it. Here, we consider three configurations for MongoDB. First, the default one, tailored for persistency, that writes logs of transactions and data on disk. The second one is the MongoDB in the “no journal” modality, which avoids to write a log of the transactions on disk. The third one is an ephemeral configuration taken from grey literature (<xref rid="ref-33" ref-type="bibr">Girbal, 2021</xref>) that combines the “no journal” modality with the usage of a <monospace>tmpfs</monospace> (<xref rid="ref-62" ref-type="bibr">Snyder, 1990</xref>) disk as the one where MongoDB stores its data, to avoid the latencies of writing on non-volatile storage.</p>
    <p>Below, we report the respective performance of the four configurations—one for Jolie/Tquery and three for MongoDB—in terms of the delay between when the engine receives a request and when it is ready to send back the response. Hence, we avoid recording the time spent transmitting the data between the invoker and the data-handling engine, which is orthogonal to the engine’s performance.</p>
    <p>To run our benchmarks, we developed two Jolie microservices: one, called <monospace>TqueryService</monospace>, which contains the implementation in <xref rid="fig-4" ref-type="fig">Fig. 4</xref> and the other, called <monospace>MongoService</monospace>, which implements the following behaviour: (i) insert the data in MongoDB, (ii) perform the queries through MongoDB, and (iii) drop the data from MongoDB, to ensure ephemerality. When recording the performance of <monospace>MongoService</monospace>, we include the deletion (drop) time, before issuing back the response. To let <monospace>MongoService</monospace> and MongoDB interact, we use the synchronous version of the MongoDB Java Drivers<xref rid="fn-6" ref-type="fn"><sup>6</sup></xref>
<fn id="fn-6"><label>6</label><p>Through the <monospace>jolie-mongodb-driver</monospace> library, available at <ext-link xlink:href="https://github.com/szingaro/jmdb" ext-link-type="uri">https://github.com/szingaro/jmdb</ext-link>, which uses the MongoDB synchronous Java library, available at <ext-link xlink:href="https://docs.mongodb.com/drivers/java/sync/current/" ext-link-type="uri">https://docs.mongodb.com/drivers/java/sync/current/</ext-link>.</p></fn>and we implement its behaviour in Java, similarly as done in ‘The implementation of Jolie/Tquery’ for Jolie/Tquery.</p>
    <p>We synthetically generate 5 tiers of data for the benchmarks. Specifically, we generate 5 pairs of JSON files, each including one file for the temperatures and one for the sleep logs, following the structures from Listing 1. Each tier covers one year of recordings and it includes a number of samplings per day that doubles from a tier to the next: for the temperatures, the first tier contains one sampling per minute (1440 samplings per day), the second contains two samplings per minute (2880), and so on; for the sleep logs, the first tier contains 16 samplings per day, the second contains 32, and so on.</p>
    <p>Our benchmark architecture includes a third Jolie microservice, called <monospace>DataLoader</monospace>, which we use to implement the high-level benchmark logic reported in Algorithm 1. Essentially, given the number of invocations to perform (<italic toggle="yes">min</italic>_<italic toggle="yes">total</italic>_<italic toggle="yes">calls</italic>), the number of requests in a batch (<italic toggle="yes">batch</italic>_<italic toggle="yes">size</italic>), and the set of data tiers (<italic toggle="yes">tiers</italic>), the service sends a sequence of <italic toggle="yes">min</italic>_<italic toggle="yes">total</italic>_<italic toggle="yes">calls</italic>/<italic toggle="yes">batch</italic>_<italic toggle="yes">size</italic> batches (rounded up to the next largest integer, to make sure to issue at least <italic toggle="yes">min</italic>_<italic toggle="yes">total</italic>_<italic toggle="yes">calls</italic> invocations). In Algorithm 1, the call <italic toggle="yes">invokeTargetService</italic> performs, in parallel, as many queries as indicated by the <italic toggle="yes">batch</italic>_<italic toggle="yes">size</italic>, where “<italic toggle="yes">Target</italic>” is one of the four configurations of our benchmark.</p>
    <preformat xml:space="preserve" position="float"> 
_______________________________________________________________________________________________________ 
 
  Algorithm 1: The DataLoader service logic. 
    Input: min_total_calls, batch_size, tiers 
    begin 
        for tier in tiers do 
       for batch ← 0 to ceil( min_total_calls / batch_size ) do 
   invokeTargetService ( tier, batch_size ) 
   end 
   end 
    end    </preformat>
    <p>We execute our benchmarks on a machine equipped with an Intel Xeon Silver 4208 CPU @ 2.10 GHz (32 CPUs), 96GB RAM, and a Dell FH49G SSD. The machine runs CentOS 7 (Kernel 3.10.0 x86_64), Java 11 (with maximal heap size of 32GB), Jolie 1.10.5, Jolie/Tquery 0.4.10, the MongoDB Synchronous Driver 4.2.3, and MongoDB Community Server 4.4.6.</p>
    <p>We report in <xref rid="fig-5" ref-type="fig">Fig. 5</xref> our benchmarks of Jolie/Tquery and MongoDB, aggregated per batch size (from the top-left corner, for 5, 8, 10, 12, 15, and 20 parallel requests): each plot represents the relation between the data-tier size and the average execution time, maintaining constant the number of parallel invocations. The experimental results show that Jolie/Tquery performs consistently faster than MongoDB (all configurations). Since in the test cases with MongoDB we record the request-to-response delay of the database, the higher execution times of these cases correspond to both the overhead of the communication and the possible bottlenecks due to establishing connections to it. We notice a slight decrease in the relative distance between Jolie/Tquery and MongoDB at the increase of batch and data-tier sizes (in particular, the fourth and fifth tiers and the 15- and 20-sized batches). Our intuition of the phenomenon is that, on the given machine, when exceeding those thresholds, the Jolie execution runtime and the Jolie/Tquery engine undergo overhead due to resource contention. As expected, the default configuration of MongoDB is the one that performs the worst. The other two configurations (“no journal” and “no journal in-memory”) perform slightly better than the default and the difference between them is negligible—our intuition is that writing on disk is the driving factor that determines the drop in performance.</p>
    <fig position="float" id="fig-5">
      <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-5</object-id>
      <label>Figure 5</label>
      <caption>
        <title>Batch-wise benchmarks for Jolie/Tquery and MongoDB.</title>
      </caption>
      <graphic xlink:href="peerj-cs-08-1037-g005" position="float"/>
    </fig>
    <p>For completeness, we report in <xref rid="fig-6" ref-type="fig">Fig. 6</xref> the benchmarks aggregated by engine, which confirm the observations above: Jolie/Tquery consistently outperforms MongoDB over the different batches, where the degree of parallelism and the size of data are the main factors that determine changes in the performance trend.</p>
    <fig position="float" id="fig-6">
      <object-id pub-id-type="doi">10.7717/peerjcs.1037/fig-6</object-id>
      <label>Figure 6</label>
      <caption>
        <title>Engine-wise benchmarks of MongoDB (top-left), MongoDB without journaling (top-right), MongoDB without journaling and in-memory (bottom-left), and Jolie/Tquery (bottom-right).</title>
        <p>The lines represent the different batches of requests.</p>
      </caption>
      <graphic xlink:href="peerj-cs-08-1037-g006" position="float"/>
    </fig>
    <p>Besides the direct results commented above, the performance behaviour plotted in <xref rid="fig-5" ref-type="fig">Fig. 5</xref> and <xref rid="fig-6" ref-type="fig">Fig. 6</xref> indicate that, when reaching some empirical threshold values, the system would benefit from scaling-up, either by distributing the query over multiple nodes or by having multiple copies of the same service and balancing the requests. Here, the flexibility of Jolie/Tquery can help the user to attain those configurations by minimising the footprint of the migration on both the system (no need to deploy additional database instances) and the codebase (cf. ‘Extending Jolie/Tquery with query pipelines’).</p>
  </sec>
  <sec>
    <title>Discussion and Conclusion</title>
    <p>In this article, we presented Tquery, which is a theory for querying semi-structured data, compatible with Jolie. While Tquery is a formal model for general reference, we also presented Jolie/Tquery, which we showed to be especially suitable in the context of ephemeral data-handling. However, Jolie/Tquery is useful in general, for example in big-data analytics scenarios, where developers can specifies queries in a single node and then easily distribute it over different nodes.</p>
    <p>Looking at future extensions, a natural evolution of this work is to perform a more complete evaluation of the expressivity of Jolie/Tquery by implementing well-known data-flow patterns (<xref rid="ref-36" ref-type="bibr">Hohpe &amp; Woolf, 2004</xref>). A useful by-product of that endevour is the collection of a library of data-flow patterns implemented in Jolie/Tquery, available to developers. A complementary contribution to the above proposal is to perform an exhaustive study and benchmarking of the technologies for ephemeral data-handling. In that work, we would start by collecting real-world use cases of ephemeral data-handling and by selecting the most representative ones into a library of test scenarios. Then, we would collect the main tools used in ephemeral data-handling contexts (including Jolie/Tquery) and compare them from the different points of view of the features they have and their efficiency (<italic toggle="yes">e.g.</italic>, in terms of program size) and performance as obtained through the implementation of our library of tests.</p>
    <p>Another direction is widening the scope of application of Jolie/Tquery with case studies and experiments where data queries are performed by low-power devices in IoT environments. This would entail building topologies of nodes with different tasks—e.g., gatherers (<italic toggle="yes">e.g.</italic>, edge devices equipped with sensors), collectors (<italic toggle="yes">e.g.</italic>, fog nodes that use Jolie/Tquery to aggregate and forward the gathered data to more powerful nodes), and crunchers (<italic toggle="yes">e.g.</italic>, cloud nodes where Jolie/Tquery would manage the high amount of data coming from the edge and fog layers)—and benchmarking their performance (possibly in comparison with alternative technologies for ephemeral data handling). Querying data on devices with low power and memory would likely require implementing strategies for distributing Jolie/Tquery pipelines over networks; future work in this direction will be able to benefit from the native support for services in heterogeneous environments offered by Jolie, which was another reason for developing a querying framework for Jolie.</p>
    <p>We think that the above studies, besides providing us with the necessary material to guide us in evolving Jolie/Tquery—e.g., indicating the need for the inclusion of new operators—, would generate useful references for researchers to orient themselves in the growing field of ephemeral data-handling.</p>
    <p>While studying the Tquery operators, we noticed and reported on how the shape of the data impacts on the possibility to distribute the stages of the query pipeline. To the best of our knowledge, this is a design space that did not receive a lot of attention in the literature and, yet, we deem it fundamental to provide further means for improving the performance of ephemeral data-handling systems. Here, our intuition is that Jolie types can help in providing a model that we can use to reason on the shape of the data and their interplay with the operators in a given query. Possible outcomes of this study include giving guidelines to developers to maximise the flexibility of their queries, as well as implementing tools that automatise the optimal distribution of query pipelines.</p>
    <p>Finally, since Jolie/Tquery come as a library for the Jolie language, by implementing the support for new data formats in Jolie we would make them automatically available for Jolie/Tquery users.</p>
  </sec>
  <sec sec-type="supplementary-material" id="supplemental-information">
    <title> Supplemental Information</title>
    <supplementary-material id="supp-1" position="float" content-type="local-data">
      <object-id pub-id-type="doi">10.7717/peerj-cs.1037/supp-1</object-id>
      <label>Supplemental Information 1</label>
      <caption>
        <title>Raw benchmarking data</title>
        <p>The JSON files that we generated to benchmark our system and the other scripts used for benchmarking.</p>
      </caption>
      <media xlink:href="peerj-cs-08-1037-s001.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>The authors thank Claudio Guidi and Balint Maschio for useful discussions on the practical motivation of our framework.</p>
  </ack>
  <sec sec-type="additional-information">
    <title>Additional Information and Declarations</title>
    <fn-group content-type="competing-interests">
      <title>Competing Interests</title>
      <fn id="conflict-1" fn-type="COI-statement">
        <p>The authors declare there are no competing interests.</p>
      </fn>
    </fn-group>
    <fn-group content-type="author-contributions">
      <title>Author Contributions</title>
      <fn id="contribution-1" fn-type="con">
        <p><xref rid="author-1" ref-type="contrib">Saverio Giallorenzo</xref> conceived and designed the experiments, performed the experiments, analyzed the data, performed the computation work, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-2" fn-type="con">
        <p><xref rid="author-2" ref-type="contrib">Fabrizio Montesi</xref> conceived and designed the experiments, performed the experiments, analyzed the data, performed the computation work, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-3" fn-type="con">
        <p><xref rid="author-3" ref-type="contrib">Larisa Safina</xref> conceived and designed the experiments, performed the experiments, analyzed the data, performed the computation work, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
      <fn id="contribution-4" fn-type="con">
        <p><xref rid="author-4" ref-type="contrib">Stefano Pio Zingaro</xref> conceived and designed the experiments, performed the experiments, analyzed the data, performed the computation work, prepared figures and/or tables, authored or reviewed drafts of the article, and approved the final draft.</p>
      </fn>
    </fn-group>
    <fn-group content-type="other">
      <title>Data Availability</title>
      <fn id="addinfo-1">
        <p>The following information was supplied regarding data availability:</p>
        <p>The code (test data is included in the tests directory) is available at GitHub: <uri xlink:href="https://github.com/jolie/tquery">https://github.com/jolie/tquery</uri>.</p>
      </fn>
    </fn-group>
  </sec>
  <ref-list content-type="authoryear">
    <title>References</title>
    <ref id="ref-1">
      <label>Apache (2005)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Apache</collab>
        </person-group>
        <year iso-8601-date="2005">2005</year>
        <article-title>Apache CouchDB</article-title>
        <uri xlink:href="https://couchdb.apache.org">https://couchdb.apache.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-2">
      <label>Apache (2022a)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Apache</collab>
        </person-group>
        <year iso-8601-date="2022">2022a</year>
        <article-title>Apache Flink</article-title>
        <uri xlink:href="https://flink.apache.org">https://flink.apache.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-3">
      <label>Apache (2022b)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Apache</collab>
        </person-group>
        <year iso-8601-date="2022">2022b</year>
        <article-title>Apache Samza</article-title>
        <uri xlink:href="https://samza.apache.org">https://samza.apache.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-4">
      <label>Apache (2022c)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Apache</collab>
        </person-group>
        <year iso-8601-date="2022">2022c</year>
        <article-title>Apache Storm</article-title>
        <uri xlink:href="https://storm.apache.org">https://storm.apache.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-5">
      <label>Arasu et al. (2016)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Arasu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Babcock</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Babu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Cieslewicz</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Datar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ito</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Motwani</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Srivastava</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Widom</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>STREAM: the stanford data stream management system</article-title>
        <source>Data stream management: processing high-speed data streams</source>
        <publisher-name>Springer Berlin Heidelberg</publisher-name>
        <publisher-loc>Berlin, Heidelberg</publisher-loc>
        <person-group person-group-type="editor">
          <name>
            <surname>Garofalakis</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gehrke</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rastogi</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <fpage>317</fpage>
        <lpage>336</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-540-28608-0_16</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-6">
      <label>Arasu, Babu &amp; Widom (2006)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Arasu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Babu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Widom</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <article-title>The CQL continuous query language: semantic foundations and query execution</article-title>
        <source>The VLDB Journal</source>
        <volume>15</volume>
        <issue>2</issue>
        <fpage>121</fpage>
        <lpage>142</lpage>
        <pub-id pub-id-type="doi">10.1007/s00778-004-0147-z</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-7">
      <label>Armbrust et al. (2010)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Armbrust</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Fox</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Griffith</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Joseph</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Katz</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Konwinski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Patterson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Rabkin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stoica</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2010">2010</year>
        <article-title>A view of cloud computing</article-title>
        <source>Communications of the ACM</source>
        <volume>53</volume>
        <issue>4</issue>
        <fpage>50</fpage>
        <lpage>58</lpage>
      </element-citation>
    </ref>
    <ref id="ref-8">
      <label>Babcock et al. (2002)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Babcock</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Babu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Datar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Motwani</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Widom</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2002">2002</year>
        <article-title>Models and issues in data stream systems</article-title>
        <conf-name>Proceedings of the twenty-first ACM SIGMOD-SIGACT-SIGART symposium on principles of database systems, PODS ’02</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1145/543613.543615</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-9">
      <label>Babu &amp; Widom (2001)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Babu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Widom</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2001">2001</year>
        <article-title>Continuous queries over data streams</article-title>
        <source>SIGMOD Record</source>
        <volume>30</volume>
        <issue>3</issue>
        <fpage>109</fpage>
        <lpage>120</lpage>
        <pub-id pub-id-type="doi">10.1145/603867.603884</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-10">
      <label>Baker, Xiang &amp; Atkinson (2017)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baker</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Xiang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Atkinson</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Internet of Things for smart Healthcare: technologies, challenges, and opportunities</article-title>
        <source>IEEE Access</source>
        <volume>5</volume>
        <fpage>26521</fpage>
        <lpage>26544</lpage>
        <pub-id pub-id-type="doi">10.1109/ACCESS.2017.2775180</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-11">
      <label>Barbieri et al. (2009)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Barbieri</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Braga</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ceri</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Della Valle</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Grossniklaus</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2009">2009</year>
        <article-title>C-SPARQL: sPARQL for continuous querying</article-title>
        <conf-name>Proceedings of the 18th international conference on world wide web, WWW ’09</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>1061</fpage>
        <lpage>1062</lpage>
        <pub-id pub-id-type="doi">10.1145/1526709.1526856</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-12">
      <label>Botoeva et al. (2016)</label>
      <element-citation publication-type="workingpaper">
        <person-group person-group-type="author">
          <name>
            <surname>Botoeva</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Calvanese</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Cogrel</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Rezk</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Xiao</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>A formal presentation of MongoDB (Extended Version), CoRR</article-title>
        <pub-id pub-id-type="arxiv">1603.09291</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-13">
      <label>Botoeva et al. (2018)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Botoeva</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Calvanese</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Cogrel</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xiao</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Expressivity and complexity of MongoDB queries</article-title>
        <conf-name>21st International conference on database theory, ICDT 2018, March 26-29, 2018, Vienna, Austria, volume 98 of LIPIcs</conf-name>
        <conf-sponsor>Schloss Dagstuhl - Leibniz-Zentrum für Informatik</conf-sponsor>
        <person-group person-group-type="editor">
          <name>
            <surname>Kimelfeld</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Amsterdamer</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <fpage>9:1</fpage>
        <lpage>9:23</lpage>
        <pub-id pub-id-type="doi">10.4230/LIPIcs.ICDT.2018.9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-14">
      <label>Bray et al. (2000)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bray</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Paoli</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Sperberg-McQueen</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Maler</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Yergeau</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2000">2000</year>
        <data-title>Extensible markup language (XML) 1.0, W3C recommendation October</data-title>
        <publisher-name>W3C</publisher-name>
        <publisher-loc>Cambridge, MA, USA</publisher-loc>
      </element-citation>
    </ref>
    <ref id="ref-15">
      <label>Brian Krebs (2017)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Brian Krebs</collab>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Extortionists wipe thousands of databases, victims who pay up get stiffed</article-title>
        <uri xlink:href="https://krebsonsecurity.com/2017/01/extortionists-wipe-thousands-of-databases-victims-who-pay-up-get-stiffed">https://krebsonsecurity.com/2017/01/extortionists-wipe-thousands-of-databases-victims-who-pay-up-get-stiffed</uri>
      </element-citation>
    </ref>
    <ref id="ref-16">
      <label>Bunn et al. (2018)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bunn</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Navalta</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Fountaine</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Reece</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Current state of commercial wearable technology in physical activity monitoring 2015-2017</article-title>
        <source>International Journal of Exercise Science</source>
        <volume>11</volume>
        <issue>7</issue>
        <fpage>503</fpage>
        <lpage>515</lpage>
        <pub-id pub-id-type="pmid">29541338</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-17">
      <label>Callegati et al. (2017)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Callegati</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Gabbrielli</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Melis</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prandini</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Smart mobility for all: a global federated market for mobility-as-a-service operators</article-title>
        <conf-name>20th IEEE international conference on intelligent transportation systems, ITSC 2017, Yokohama, Japan, October 16-19, 2017</conf-name>
        <conf-sponsor>IEEE</conf-sponsor>
        <conf-loc>Piscataway</conf-loc>
        <fpage>1</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1109/itsc.2017.8317701</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-18">
      <label>Caspi et al. (1987)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Caspi</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pilaud</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Halbwachs</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Plaice</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <year iso-8601-date="1987">1987</year>
        <article-title>LUSTRE: a declarative language for real-time programming</article-title>
        <conf-name>Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on principles of programming languages, POPL ’87</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>178</fpage>
        <lpage>188</lpage>
        <pub-id pub-id-type="doi">10.1145/41625.41641</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-19">
      <label>Chen et al. (2000)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>DeWitt</surname>
            <given-names>DJ</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2000">2000</year>
        <article-title>NiagaraCQ: a scalable continuous query system for internet databases</article-title>
        <conf-name>Proceedings of the 2000 ACM SIGMOD international conference on management of data, SIGMOD ’00</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>379</fpage>
        <lpage>390</lpage>
        <pub-id pub-id-type="doi">10.1145/342009.335432</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-20">
      <label>Cheney, Lindley &amp; Wadler (2013)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cheney</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lindley</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wadler</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2013">2013</year>
        <article-title>A practical theory of language-integrated query</article-title>
        <source>ACM SIGPLAN Notices</source>
        <volume>48</volume>
        <issue>9</issue>
        <fpage>403</fpage>
        <lpage>416</lpage>
      </element-citation>
    </ref>
    <ref id="ref-21">
      <label>Crockford (2006)</label>
      <element-citation publication-type="others">
        <person-group person-group-type="author">
          <name>
            <surname>Crockford</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <article-title>The application/json media type for javascript object notation (json)</article-title>
        <uri xlink:href="http://www.ietf.org/rfc/rfc4627.txt">http://www.ietf.org/rfc/rfc4627.txt</uri>
      </element-citation>
    </ref>
    <ref id="ref-22">
      <label>Diao et al. (2002)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Diao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Fischer</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Franklin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>To</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2002">2002</year>
        <article-title>YFilter: efficient and scalable filtering of XML documents</article-title>
        <conf-name>Proceedings 18th international conference on data engineering</conf-name>
        <fpage>341</fpage>
        <lpage>342</lpage>
        <pub-id pub-id-type="doi">10.1109/ICDE.2002.994748</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-23">
      <label>Dragoni et al. (2017)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Dragoni</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lluch-Lafuente</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Mazzara</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Mustafin</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Safina</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Microservices: yesterday, today, and tomorrow</article-title>
        <source>Present and ulterior software engineering</source>
        <publisher-name>Springer</publisher-name>
        <publisher-loc>Berlin, Germany</publisher-loc>
        <fpage>195</fpage>
        <lpage>216</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-319-67425-4_12</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-24">
      <label>Elasticsearch (2022)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Elasticsearch</collab>
        </person-group>
        <year iso-8601-date="2022">2022</year>
        <article-title>Elasticsearch event query language</article-title>
        <uri xlink:href="https://www.elastic.co/blog/introducing-event-query-language">https://www.elastic.co/blog/introducing-event-query-language</uri>
      </element-citation>
    </ref>
    <ref id="ref-25">
      <label>Ellis (2014)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Ellis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2014">2014</year>
        <article-title>Opaleye</article-title>
        <uri xlink:href="https://github.com/tomjaguarpaw/haskell-opaleye">https://github.com/tomjaguarpaw/haskell-opaleye</uri>
      </element-citation>
    </ref>
    <ref id="ref-26">
      <label>Esteves et al. (2017)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Esteves</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Janssens</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Theeten</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Veiga</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Empowering stream processing through edge clouds</article-title>
        <source>SIGMOD Rec.</source>
        <volume>46</volume>
        <issue>3</issue>
        <fpage>23</fpage>
        <lpage>28</lpage>
        <pub-id pub-id-type="doi">10.1145/3156655.3156661</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-27">
      <label>Fussel (1997)</label>
      <element-citation publication-type="others">
        <person-group person-group-type="author">
          <name>
            <surname>Fussel</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <year iso-8601-date="1997">1997</year>
        <article-title>Foundations of object-relational mapping</article-title>
        <uri xlink:href="http://markfussell.emenar.com/blog/object-relational/">http://markfussell.emenar.com/blog/object-relational/</uri>
      </element-citation>
    </ref>
    <ref id="ref-28">
      <label>Gabbrielli et al. (2018)</label>
      <element-citation publication-type="others">
        <person-group person-group-type="author">
          <name>
            <surname>Gabbrielli</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lanese</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Zingaro</surname>
            <given-names>SP</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>A language-based approach for interoperability of IoT platforms</article-title>
        <uri xlink:href="https://scholarspace.manoa.hawaii.edu/server/api/core/bitstreams/573255ff-bc3a-4928-9f5b-3809a37745c3/content">https://scholarspace.manoa.hawaii.edu/server/api/core/bitstreams/573255ff-bc3a-4928-9f5b-3809a37745c3/content</uri>
      </element-citation>
    </ref>
    <ref id="ref-29">
      <label>Gabbrielli et al. (2019)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Gabbrielli</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lanese</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Zingaro</surname>
            <given-names>SP</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Majchrzak</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Mateos</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Poggi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Grønli</surname>
            <given-names>TM</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>Linguistic abstractions for interoperability of IoT platforms</article-title>
        <source>Towards integrated web, mobile, and IoT technology</source>
        <series>Lecture notes in business information processing</series>
        <volume>vol. 347</volume>
        <publisher-name>Springer</publisher-name>
        <publisher-loc>Cham</publisher-loc>
        <pub-id pub-id-type="doi">10.1007/978-3-030-28430-5_5</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-30">
      <label>Gabbrielli, Giallorenzo &amp; Montesi (2014)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Gabbrielli</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Omatu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bersini</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Corchado</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rodríguez</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pawlewski</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bucciarelli</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2014">2014</year>
        <article-title>Service-oriented architectures: from design to production exploiting workflow patterns</article-title>
        <conf-name>Distributed computing and artificial intelligence, 11th international conference. Advances in intelligent systems and computing, vol 290</conf-name>
        <conf-sponsor>Springer</conf-sponsor>
        <conf-loc>Cham</conf-loc>
        <pub-id pub-id-type="doi">10.1007/978-3-319-07593-8_17</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-31">
      <label>Giallorenzo et al. (2021)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Peressotti</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rademacher</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Sachweh</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>Jolie and LEMMA: Model-Driven Engineering and Programming Languages Meet on Microservices</article-title>
        <series>Lecture Notes in Computer Science</series>
        <conf-name>Coordination models and languages. COORDINATION 2021. Lecture notes in computer science(), vol 12717</conf-name>
        <conf-sponsor>Springer</conf-sponsor>
        <conf-loc>Cham</conf-loc>
        <person-group person-group-type="editor">
          <name>
            <surname>Damiani</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Dardha</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <pub-id pub-id-type="doi">10.1007/978-3-030-78142-2_17</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-32">
      <label>Giallorenzo et al. (2019)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Giallorenzo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Safina</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Zingaro</surname>
            <given-names>SP</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>Ephemeral data handling in microservices</article-title>
        <conf-name>2019 IEEE international conference on services computing, SCC 2019, Milan, Italy, July 8-13, 2019</conf-name>
        <conf-sponsor>IEEE</conf-sponsor>
        <conf-loc>Piscataway</conf-loc>
        <person-group person-group-type="editor">
          <name>
            <surname>Bertino</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>CK</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Damiani</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Goul</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Oyama</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <fpage>234</fpage>
        <lpage>236</lpage>
        <pub-id pub-id-type="doi">10.1109/SCC.2019.00048</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-33">
      <label>Girbal (2021)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Girbal</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2021">2021</year>
        <article-title>How to use MongoDB as a pure in-memory DB</article-title>
        <uri xlink:href="https://edgystuff.tumblr.com/post/49304254688/how-to-use-mongodb-as-a-pure-in-memory-db-redis">https://edgystuff.tumblr.com/post/49304254688/how-to-use-mongodb-as-a-pure-in-memory-db-redis</uri>
        <date-in-citation content-type="access-date" iso-8601-date="2021-09-20">20 September 2021</date-in-citation>
      </element-citation>
    </ref>
    <ref id="ref-34">
      <label>Hirten et al. (2020)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hirten</surname>
            <given-names>RP</given-names>
          </name>
          <name>
            <surname>Danieletto</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tomalin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Choi</surname>
            <given-names>KH</given-names>
          </name>
          <name>
            <surname>Zweig</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Golden</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kaur</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Helmus</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Biello</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pyzik</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <article-title>Longitudinal physiological data from a wearable device identifies SARS-CoV-2 infection and symptoms and predicts COVID-19 diagnosis</article-title>
        <source>MedRxiv</source>
        <pub-id pub-id-type="doi">10.1101/2020.11.06.20226803</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-35">
      <label>Hirzel, Schneider &amp; Gedik (2017)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hirzel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schneider</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gedik</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>SPL: an extensible language for distributed stream processing</article-title>
        <source>ACM Transactions on Programming Languages and Systems</source>
        <volume>39</volume>
        <issue>1</issue>
        <fpage>5</fpage>
        <pub-id pub-id-type="doi">10.1145/3039207</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-36">
      <label>Hohpe &amp; Woolf (2004)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hohpe</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Woolf</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2004">2004</year>
        <source>Enterprise integration patterns: designing, building, and deploying messaging solutions</source>
        <publisher-name>Addison-Wesley Professional</publisher-name>
        <publisher-loc>Boston</publisher-loc>
      </element-citation>
    </ref>
    <ref id="ref-37">
      <label>Jang (2006)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Jang</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <source>Linux annoyances for geeks: getting the most flexible system in the world just the way you want it</source>
        <publisher-name>O’Reilly Media</publisher-name>
        <publisher-loc>Sebastopol, CA, USA</publisher-loc>
      </element-citation>
    </ref>
    <ref id="ref-38">
      <label>Kong &amp; Mamouras (2020)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kong</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Mamouras</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <article-title>StreamQL: a query language for processing streaming time series</article-title>
        <source>Proceedings of the ACM on Programming Languages</source>
        <volume>183</volume>
        <fpage>1</fpage>
        <lpage>32</lpage>
        <pub-id pub-id-type="doi">10.1145/3428251</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-39">
      <label>Leavitt (2010)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Leavitt</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2010">2010</year>
        <article-title>Will NoSQL databases live up to their promise?</article-title>
        <source>Computer</source>
        <volume>43</volume>
        <fpage>12</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1109/mc.2010.58</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-40">
      <label>Ma, Wang &amp; Chu (2013)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>C-H</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2013">2013</year>
        <article-title>Data management for internet of things: challenges, approaches and opportunities</article-title>
        <conf-name>2013 IEEE International conference on green computing and communications and IEEE Internet of Things and IEEE cyber, physical and social computing</conf-name>
        <conf-sponsor>IEEE</conf-sponsor>
        <conf-loc>Piscataway</conf-loc>
        <fpage>1144</fpage>
        <lpage>1151</lpage>
      </element-citation>
    </ref>
    <ref id="ref-41">
      <label>Maschio (2017)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Maschio</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>The use of microservices to implement cross process integration and data sharing</article-title>
        <uri xlink:href="https://www.conf-micro.services/2017/papers/Maschio.pdf">https://www.conf-micro.services/2017/papers/Maschio.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-42">
      <label>Maschio (2019)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Maschio</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>Updating the current Jolie microservices based Document Management System to include electronic invoicing</article-title>
        <conf-name>Proceedings of the 2th international conference on microservices</conf-name>
        <uri xlink:href="https://www.conf-micro.services/2019/papers/Microservices_2019_paper_15.pdf">https://www.conf-micro.services/2019/papers/Microservices_2019_paper_15.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-43">
      <label>Meijer, Beckman &amp; Bierman (2006)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Meijer</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Beckman</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Bierman</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2006">2006</year>
        <article-title>Linq: reconciling object, relations and xml in the. net framework</article-title>
        <source>Sigmod</source>
        <fpage>706</fpage>
        <lpage>706</lpage>
      </element-citation>
    </ref>
    <ref id="ref-44">
      <label>Mendell et al. (2012)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Mendell</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Nasgaard</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Bouillet</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Hirzel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gedik</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2012">2012</year>
        <article-title>Extending a general-purpose streaming system for XML</article-title>
        <conf-name>Proceedings of the 15th international conference on extending database technology</conf-name>
        <fpage>534</fpage>
        <lpage>539</lpage>
      </element-citation>
    </ref>
    <ref id="ref-45">
      <label>MongoDB Inc. (2018a)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>MongoDB Inc</collab>
        </person-group>
        <year iso-8601-date="2018">2018a</year>
        <article-title>MongoDB aggregation framework</article-title>
        <uri xlink:href="https://www.mongodb.com/developer/products/mongodb/aggregation-framework/">https://www.mongodb.com/developer/products/mongodb/aggregation-framework/</uri>
      </element-citation>
    </ref>
    <ref id="ref-46">
      <label>MongoDB Inc. (2018b)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>MongoDB Inc</collab>
        </person-group>
        <year iso-8601-date="2018">2018b</year>
        <article-title>MongoDB website</article-title>
        <uri xlink:href="https://www.mongodb.com/">https://www.mongodb.com/</uri>
      </element-citation>
    </ref>
    <ref id="ref-47">
      <label>MongoDB Inc. (2022)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>MongoDB Inc</collab>
        </person-group>
        <year iso-8601-date="2022">2022</year>
        <article-title>Aggregation pipeline operators in MongoDB</article-title>
        <uri xlink:href="https://docs.mongodb.com/manual/reference/operator/aggregation/">https://docs.mongodb.com/manual/reference/operator/aggregation/</uri>
      </element-citation>
    </ref>
    <ref id="ref-48">
      <label>Montesi (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>Process-aware web programming with Jolie</article-title>
        <source>Science of Computer Programming</source>
        <volume>130</volume>
        <fpage>69</fpage>
        <lpage>96</lpage>
        <pub-id pub-id-type="doi">10.1016/j.scico.2016.05.002</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-49">
      <label>Montesi, Guidi &amp; Zavattaro (2014)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Guidi</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Zavattaro</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Bouguettaya</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sheng</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Daniel</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2014">2014</year>
        <article-title>Service-oriented programming with Jolie</article-title>
        <source>Web services foundations</source>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <pub-id pub-id-type="doi">10.1007/978-1-4614-7518-7_4</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-50">
      <label>Mostert et al. (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mostert</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bredenoord</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Biesaart</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Van Delden</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>Big Data in medical research and EU data protection law: challenges to the consent or anonymise approach</article-title>
        <source>European Journal of Human Genetics</source>
        <volume>24</volume>
        <issue>7</issue>
        <fpage>956</fpage>
        <lpage>960</lpage>
        <pub-id pub-id-type="doi">10.1038/ejhg.2015.239</pub-id>
        <pub-id pub-id-type="pmid">26554881</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-51">
      <label>Narkhede (2017)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Narkhede</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2017">2017</year>
        <article-title>Introducing KSQL: streaming SQL for Apache Kafka</article-title>
        <uri xlink:href="https://www.confluent.io/blog/ksql-streaming-sql-for-apache-kafka/">https://www.confluent.io/blog/ksql-streaming-sql-for-apache-kafka/</uri>
      </element-citation>
    </ref>
    <ref id="ref-52">
      <label>Oram (2019)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Oram</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <source>Ballerina: a language for network-distributed applications</source>
        <publisher-name>O’Reilly Media, Incorporated</publisher-name>
        <publisher-loc>Sebastopol, CA, USA</publisher-loc>
      </element-citation>
    </ref>
    <ref id="ref-53">
      <label>Pierce (2002)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Pierce</surname>
            <given-names>BC</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2002">2002</year>
        <source>Types and programming languages</source>
        <publisher-name>MIT Press</publisher-name>
        <publisher-loc>Cambridge</publisher-loc>
      </element-citation>
    </ref>
    <ref id="ref-54">
      <label>Purohit et al. (2020)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Purohit</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Kumar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Mahato</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Chandra</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <article-title>Smartphone-assisted personalized diagnostic devices and wearable sensors</article-title>
        <source>Current Opinion in Biomedical Engineering</source>
        <volume>13</volume>
        <fpage>42</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cobme.2019.08.015</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-55">
      <label>Reda, Piccinini &amp; Carbonaro (2018)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Reda</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Piccinini</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Carbonaro</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Towards consistent data representation in the IoT healthcare landscape</article-title>
        <conf-name>DH ’18: Proceedings of the 2018 international conference on digital health</conf-name>
        <pub-id pub-id-type="doi">10.1145/3194658.3194668</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-56">
      <label>Ron, Shulman-Peleg &amp; Puzanov (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ron</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Shulman-Peleg</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puzanov</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>Analysis and mitigation of NoSQL injections</article-title>
        <source>IEEE Security &amp; Privacy</source>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>30</fpage>
        <lpage>39</lpage>
        <pub-id pub-id-type="doi">10.1109/MSP.2016.36</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-57">
      <label>Rose (2014)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rose</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2014">2014</year>
        <article-title>The human brain project: social and ethical challenges</article-title>
        <source>Neuron</source>
        <volume>82</volume>
        <issue>6</issue>
        <fpage>1212</fpage>
        <lpage>1215</lpage>
        <pub-id pub-id-type="doi">10.1016/j.neuron.2014.06.001</pub-id>
        <pub-id pub-id-type="pmid">24945767</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-58">
      <label>Safina et al. (2016)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Safina</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Mazzara</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Montesi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Rivera</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>Data-driven workflows for microservices: genericity in Jolie</article-title>
        <conf-name>30th IEEE international conference on advanced information networking and applications, AINA 2016, Crans-Montana, Switzerland, 23-25 March, 2016</conf-name>
        <conf-sponsor>IEEE Computer Society</conf-sponsor>
        <conf-loc>Piscataway</conf-loc>
        <person-group person-group-type="editor">
          <name>
            <surname>Barolli</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Takizawa</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Enokido</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Jara</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Bocchi</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <fpage>430</fpage>
        <lpage>437</lpage>
        <pub-id pub-id-type="doi">10.1109/aina.2016.95</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-59">
      <label>Shein (2013)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shein</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2013">2013</year>
        <article-title>Ephemeral Data</article-title>
        <source>Communications of the ACM</source>
        <volume>56</volume>
        <issue>9</issue>
        <fpage>20</fpage>
        <lpage>22</lpage>
      </element-citation>
    </ref>
    <ref id="ref-60">
      <label>Shi et al. (2016)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shi</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Cao</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <article-title>Edge computing: vision and challenges</article-title>
        <source>IEEE Internet of Things Journal</source>
        <volume>3</volume>
        <issue>5</issue>
        <fpage>637</fpage>
        <lpage>646</lpage>
        <pub-id pub-id-type="doi">10.1109/JIOT.2016.2579198</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-61">
      <label>Siddhi (2022)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>Siddhi</collab>
        </person-group>
        <year iso-8601-date="2022">2022</year>
        <article-title>Siddhi Streaming SQL</article-title>
        <uri xlink:href="https://siddhi.io/en/v4.x/docs/query-guide/">https://siddhi.io/en/v4.x/docs/query-guide/</uri>
      </element-citation>
    </ref>
    <ref id="ref-62">
      <label>Snyder (1990)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Snyder</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <year iso-8601-date="1990">1990</year>
        <article-title>tmpfs: a virtual memory file system</article-title>
        <conf-name>Proceedings of the autumn 1990 European UNIX Users’ group conference</conf-name>
        <fpage>241</fpage>
        <lpage>248</lpage>
      </element-citation>
    </ref>
    <ref id="ref-63">
      <label>Thurman et al. (2018)</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thurman</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Wasylyshyn</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Roy</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lieberman</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Garcia</surname>
            <given-names>JO</given-names>
          </name>
          <name>
            <surname>Asturias</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Okafor</surname>
            <given-names>GN</given-names>
          </name>
          <name>
            <surname>Elliott</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Giesbrecht</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Grafton</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Mednick</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Vettel</surname>
            <given-names>JM</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Individual differences in compliance and agreement for sleep logs and wrist actigraphy: a longitudinal study of naturalistic sleep in healthy adults</article-title>
        <source>PLOS ONE</source>
        <volume>13</volume>
        <issue>1</issue>
        <elocation-id>e0191883</elocation-id>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0191883</pub-id>
        <pub-id pub-id-type="pmid">29377925</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-64">
      <label>Tommasini et al. (2019)</label>
      <element-citation publication-type="confproc">
        <person-group person-group-type="author">
          <name>
            <surname>Tommasini</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sakr</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Balduini</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Valle</surname>
            <given-names>ED</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>An outlook to declarative languages for big steaming data</article-title>
        <conf-name>Proceedings of the 13th ACM international conference on distributed and event-based systems, DEBS ’19</conf-name>
        <conf-sponsor>Association for Computing Machinery</conf-sponsor>
        <conf-loc>New York, NY, USA</conf-loc>
        <fpage>199</fpage>
        <lpage>202</lpage>
        <pub-id pub-id-type="doi">10.1145/3328905.3332462</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-65">
      <label>Van Alsenoy (2019)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Van Alsenoy</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2019">2019</year>
        <article-title>General data protection regulation</article-title>
        <source>Data Protection Law in the EU: roles, responsibilities and liability</source>
        <publisher-name>Intersentia</publisher-name>
        <publisher-loc>Cambridge</publisher-loc>
        <fpage>279</fpage>
        <lpage>324</lpage>
      </element-citation>
    </ref>
    <ref id="ref-66">
      <label>Vigevano &amp; Liso (2018)</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Vigevano</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Liso</surname>
            <given-names>PD</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2018">2018</year>
        <article-title>Chapter 11 - differential diagnosis</article-title>
        <source>Acute encephalopathy and encephalitis in infancy and its related disorders</source>
        <publisher-name>Elsevier</publisher-name>
        <publisher-loc>Amsterdam</publisher-loc>
        <fpage>81</fpage>
        <lpage>85</lpage>
      </element-citation>
    </ref>
    <ref id="ref-67">
      <label>Visveswaran (2000)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <name>
            <surname>Visveswaran</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <year iso-8601-date="2000">2000</year>
        <article-title>Dive into connection pooling with J2EE</article-title>
        <uri xlink:href="https://www.infoworld.com/article/2076221/dive-into-connection-pooling-with-j2ee.html">https://www.infoworld.com/article/2076221/dive-into-connection-pooling-with-j2ee.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-68">
      <label>W3c (2001)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>W3c</collab>
        </person-group>
        <year iso-8601-date="2001">2001</year>
        <article-title>Transport message exchange pattern: single-Request-Response</article-title>
        <uri xlink:href="https://www.w3.org/2000/xp/Group/1/10/11/2001-10-11-SRR-Transport_MEP">https://www.w3.org/2000/xp/Group/1/10/11/2001-10-11-SRR-Transport_MEP</uri>
      </element-citation>
    </ref>
    <ref id="ref-69">
      <label>WSO2 (2022)</label>
      <element-citation publication-type="other">
        <person-group person-group-type="author">
          <collab>WSO2</collab>
        </person-group>
        <year iso-8601-date="2022">2022</year>
        <article-title>WSO2 stream processor</article-title>
        <uri xlink:href="https://wso2.com/integration/streaming-integrator/">https://wso2.com/integration/streaming-integrator/</uri>
      </element-citation>
    </ref>
  </ref-list>
</back>
