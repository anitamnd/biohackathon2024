<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7523073</article-id>
    <article-id pub-id-type="publisher-id">3711</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-03711-2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VFFVA: dynamic load balancing enables large-scale flux variability analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5934-966X</contrib-id>
        <name>
          <surname>Guebila</surname>
          <given-names>Marouen Ben</given-names>
        </name>
        <address>
          <email>benguebila@hsph.harvard.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.38142.3c</institution-id><institution-id institution-id-type="ISNI">000000041936754X</institution-id><institution>Department of Biostatistics, Harvard T.H. Chan School of Public Health, </institution></institution-wrap>Boston, MA, USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>29</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>29</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>424</elocation-id>
    <history>
      <date date-type="received">
        <day>17</day>
        <month>1</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>8</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Genome-scale metabolic models are increasingly employed to predict the phenotype of various biological systems pertaining to healthcare and bioengineering. To characterize the full metabolic spectrum of such systems, Fast Flux Variability Analysis (FFVA) is commonly used in parallel with static load balancing. This approach assigns to each core an equal number of biochemical reactions without consideration of their solution complexity.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here, we present Very Fast Flux Variability Analysis (VFFVA) as a parallel implementation that dynamically balances the computation load between the cores in runtime which guarantees equal convergence time between them. VFFVA allowed to gain a threefold speedup factor with coupled models and up to 100 with ill-conditioned models along with a 14-fold decrease in memory usage.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">VFFVA exploits the parallel capabilities of modern machines to enable biological insights through optimizing systems biology modeling. VFFVA is available in C, MATLAB, and Python at <ext-link ext-link-type="uri" xlink:href="https://github.com/marouenbg/VFFVA">https://github.com/marouenbg/VFFVA</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Metabolic models</kwd>
      <kwd>Flux variability analysis</kwd>
      <kwd>High performance computing</kwd>
      <kwd>Systems biology</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Constraint-based reconstruction and analysis (COBRA) methods enable the study of metabolic pathways in bacterial [<xref ref-type="bibr" rid="CR1">1</xref>] and human [<xref ref-type="bibr" rid="CR2">2</xref>] systems, in time and space [<xref ref-type="bibr" rid="CR3">3</xref>]. The metabolic models are usually formulated as linear systems [<xref ref-type="bibr" rid="CR4">4</xref>] that are often under-determined [<xref ref-type="bibr" rid="CR5">5</xref>], therefore several solutions could satisfy the subjected constraints. The set of alternate optimal solutions (AOS) describes the range of reaction rates that achieve the optimal objective such as biomass production. The AOS space is quantified using flux variability analysis (FVA) [<xref ref-type="bibr" rid="CR5">5</xref>], which provides a range of minimum and maximum values for each variable of the system. FVA has been applied to find blocked reactions in the network [<xref ref-type="bibr" rid="CR6">6</xref>], quantify the fitness of macrophages after the infection of <italic>Mycobacterium tuberculosis</italic> [<xref ref-type="bibr" rid="CR7">7</xref>], resolve thermodynamically infeasible loops [<xref ref-type="bibr" rid="CR8">8</xref>], and compute the essentiality of reactions [<xref ref-type="bibr" rid="CR9">9</xref>].</p>
    <p>fastFVA (FFVA) [<xref ref-type="bibr" rid="CR10">10</xref>], a recent implementation of FVA allowed to gain substantial speed over the fluxvariability COBRA toolbox MATLAB function [<xref ref-type="bibr" rid="CR11">11</xref>]. Two main elements were decisive in the improvement: First, the C implementation of FFVA was more flexible in comparison to MATLAB [<xref ref-type="bibr" rid="CR12">12</xref>], allowing the use of the CPLEX C API. The second was the use of the same LP object, which avoided solving the program from scratch in every iteration, thereby saving presolve time. FFVA is compiled as MATLAB Executable (MEX) file, that can be called from MATLAB directly.</p>
    <p>However, given the growing size of metabolic models, FFVA is usually run in parallel. Parallelism simply relies on allocating the cores through MATLAB parpool function [<xref ref-type="bibr" rid="CR12">12</xref>] and running the iterations through parfor loop. The load is statically balanced over the workers such as they process an equal amount of iterations. Nevertheless, LPs vary in complexity and their solution time varies greatly. Therefore, the static load balancing setting does not guarantee an equal processing time among the workers. For example, the workers that were assigned a set of fast-solving LPs process their chunk of iterations and stay idle, waiting to synchronize with the remaining slower workers, which can result in larger run times globally. These situations can be inherent to the model such as Metabolism and Expression (ME) coupled models [<xref ref-type="bibr" rid="CR13">13</xref>] that can be ill-conditioned. Also, intractable objective functions can induce an imbalance in the parallel distribution of metabolic reactions such as the generation of warmup points for sampling. Here we present veryfastFVA (VFFVA), which is a standalone C implementation of FVA, that has a lower level management of parallelism over FFVA. The significant contribution is the management of parallelism through a hybrid integration of parallel libraries OpenMP [<xref ref-type="bibr" rid="CR14">14</xref>] and MPI [<xref ref-type="bibr" rid="CR15">15</xref>], for shared memory and non-shared memory systems respectively. While keeping the up-mentioned advantages of FFVA, load balancing in VFFVA was scheduled dynamically to guarantee equal run times between the workers. The input does not rely on MATLAB anymore as the LP is read in the standard.<italic>m</italic><italic>p</italic><italic>s</italic> file, that can be obtained from.<italic>m</italic><italic>a</italic><italic>t</italic> files through a provided converter. The improvements in the implementation allowed to speed up the analysis by a factor of three and up to 100 with ill-conditioned problems and reduced memory requirements 14-fold in comparison to FFVA and the Julia-based distributedFBA implementation [<xref ref-type="bibr" rid="CR16">16</xref>].</p>
    <p>Taken together, as metabolic models are steadily growing in number and complexity, their analysis requires the design of efficient tools. VFFVA allows exploiting the multi-core specifications of modern machines to run more simulations in less time thereby enabling biological discovery.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Flux variability analysis</title>
      <p>The metabolic model of a biological system is formulated as an LP problem that has <italic>n</italic> variables (reactions) bounded by lower bound <italic>l</italic><italic>b</italic><sub>(<italic>n</italic>,1)</sub> and upper bound <italic>u</italic><italic>b</italic><sub>(<italic>n</italic>,1)</sub> vectors. The matrix <italic>S</italic><sub>(<italic>m</italic>,<italic>n</italic>)</sub> represents the stoichiometric coefficients of each of the <italic>m</italic> metabolites involved in the <italic>n</italic> reactions. The system is usually considered in its steady-state and is constrained by <italic>S</italic>.<italic>v</italic>=0, which is also referred to as Flux Balance Analysis (FBA) [<xref ref-type="bibr" rid="CR17">17</xref>]. An initial LP optimizes for the objective function of the system to obtain a unique optimum, e.g., biomass maximization, like the following:
<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$  \begin{array}{ll@{}ll} \text{maximize} &amp; \ Z_{biomass}=c^{T}_{biomass}v &amp;\\ \text{subject to}\\ &amp; S.v=0 \\ &amp; lb&lt; v&lt; ub \end{array}  $$ \end{document}</tex-math><mml:math id="M2"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>maximize</mml:mtext></mml:mtd><mml:mtd><mml:mspace width="1em"/><mml:msub><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">biomass</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">biomass</mml:mtext></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msubsup><mml:mi>v</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>subject to</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>S.v</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext mathvariant="italic">lb</mml:mtext><mml:mo>&lt;</mml:mo><mml:mi>v</mml:mi><mml:mo>&lt;</mml:mo><mml:mtext mathvariant="italic">ub</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2020_3711_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>The system being under-determined (<italic>m</italic>&lt;<italic>n</italic>), there can be an infinity of solution vectors <italic>v</italic><sub>(<italic>n</italic>,1)</sub> that satisfy the unique optimal objective (<italic>c</italic><sup><italic>T</italic></sup><italic>v</italic>), with <italic>c</italic><sub>(<italic>n</italic>,1)</sub> as the objective coefficient vector. In a second step, in order to delineate the AOS space, the objective function is set to its optimal value followed by an iteration over the <italic>n</italic> dimensions of the problem. Consequently, each of the reactions is set as a new objective function to maximize (minimize) and obtain the maximal (minimal) value of the reaction range. The total number of LPs is then equal to 2<italic>n</italic> in the second step which is described as the following:
<disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$  \begin{array}{ll@{}ll@{}ll} \text{For each reaction} &amp; i \in \ [1,n] &amp;\\ &amp; \text{set} &amp; \ c_{i}=1 &amp;\\ &amp; \text{max/min} &amp; \ Z_{i}=c^{T}v &amp;\\ &amp; \text{subject to}\\ &amp; &amp; S.v=0 \\ &amp; &amp; c^{T}_{biomass}v=Z_{biomass} \\ &amp; &amp; lb&lt; v&lt; ub \end{array}  $$ \end{document}</tex-math><mml:math id="M4"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>For each reaction</mml:mtext></mml:mtd><mml:mtd><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mspace width="1em"/><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>]</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>set</mml:mtext></mml:mtd><mml:mtd><mml:mspace width="1em"/><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>max/min</mml:mtext></mml:mtd><mml:mtd><mml:mspace width="1em"/><mml:msub><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msup><mml:mi>v</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>subject to</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>S.v</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">biomass</mml:mtext></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msubsup><mml:mi>v</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">biomass</mml:mtext></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext mathvariant="italic">lb</mml:mtext><mml:mo>&lt;</mml:mo><mml:mi>v</mml:mi><mml:mo>&lt;</mml:mo><mml:mtext mathvariant="italic">ub</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2020_3711_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>The obtained minimum and maximum objective values for each dimension define the range of optimal solutions.</p>
    </sec>
    <sec id="Sec4">
      <title>Management of parallelism</title>
      <p>Problem <xref rid="Equ2" ref-type="">2</xref> is entirely parallelizable through distributing the 2<italic>n</italic> LPs among the available workers. The strategy used so far in the existing implementations was to divide 2<italic>n</italic> equally among the workers. Nevertheless, the solution time can vary widely between LPs because ill-conditioned LPs can induce numerical instabilities requiring longer solution times. Consequently, dividing equally the LPs among the workers does not ensure an equal load on each worker.</p>
      <p>Since it is challenging to estimate a priori the run time of an LP, the load has to be dynamically balanced during the execution of the program.</p>
      <p>In shared memory systems, Open Multi-Processing (OpenMP) library allows balancing the load among the threads dynamically such that every instruction runs for an equal amount of time. The load is adjusted dynamically, depending on the chunks of the problem processed by every thread. At the beginning of the process, the scheduler will divide the original problem in chunks and will assign the workers a chunk of iterations to process. Each worker that completes the assigned chunk will receive a new one until all the LPs are processed.</p>
      <p>In systems that do not share memory, Message Passing Interface (MPI) was used to create instances of Problem <xref rid="Equ2" ref-type="">2</xref>. Every process then calls the shared memory execution through OpenMP.</p>
      <p>In the end, the final program is comprised of a hybrid MPI/OpenMP implementation of parallelism which allows great flexibility of usage, particularly in High-Performance Computing (HPC) setting.</p>
    </sec>
    <sec id="Sec5">
      <title>Another application: generation of warmup points</title>
      <p>The uniform sampling of metabolic models is a common unbiased tool to characterize the solution space and determine the flux distribution per reaction [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR19">19</xref>]. Sampling starts from pre-computed solutions called warmup points, where the sampling chains start exploring the solution space. The generation of <italic>p</italic>≥2<italic>n</italic> warmup points is done similarly to FVA. The first 2<italic>n</italic> points are solutions of the FVA problem, while the points ≥2<italic>n</italic> are solutions corresponding to a randomly generated coefficient vector <italic>c</italic>. The optimization of a randomly generated objective function can be a source of imbalance in the parallel distribution of load in FVA, which makes this application particularly interesting in dynamic load balancing. Another difference with FVA lies in the storage of the solutions <italic>v</italic> rather than the optimal objective <italic>c</italic><sup><italic>T</italic></sup><italic>v</italic>. The generation of 30,000 warmup points was compared using the COBRA toolbox function createWarmup<sub>MATLAB</sub> and a dynamically load-balanced C implementation createWarmup<sub>VF</sub> that was based on VFFVA.</p>
    </sec>
    <sec id="Sec6">
      <title>Model description</title>
      <p>FFVA and VFFVA were tested on a selection of models [<xref ref-type="bibr" rid="CR10">10</xref>]. The models (Table <xref rid="Tab1" ref-type="table">1</xref>) are characterized by the dimensions of the stoichiometric matrix <italic>S</italic><sub><italic>m</italic>,<italic>n</italic></sub>. Each model represents the metabolism of human or bacterial systems. Models pertaining to the same biological system with different <italic>S</italic> matrix size, have different levels of granularity and biological complexity. The exchange reactions were set to the default values specified in the model. E_Matrix and E<sub>c</sub>_Matrix are ME models depicting metabolism and expression, while all the others are metabolism only models.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Model size and description</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Model</th><th align="left">Organism</th><th align="left">Size</th></tr></thead><tbody><tr><td align="left">Ecoli_core [<xref ref-type="bibr" rid="CR20">20</xref>]</td><td align="left"><italic>Escherichia coli</italic></td><td align="left">(72,95)</td></tr><tr><td align="left">P_putida [<xref ref-type="bibr" rid="CR21">21</xref>]</td><td align="left"><italic>Pseudomonas putida</italic></td><td align="left">(911,1060)</td></tr><tr><td align="left">EcoliK12 [<xref ref-type="bibr" rid="CR22">22</xref>]</td><td align="left"><italic>Escherichia coli</italic></td><td align="left">(1668,2382)</td></tr><tr><td align="left">Recon2 [<xref ref-type="bibr" rid="CR23">23</xref>]</td><td align="left"><italic>Homo sapiens</italic></td><td align="left">(4036,7324)</td></tr><tr><td align="left">E_Matrix [<xref ref-type="bibr" rid="CR24">24</xref>]</td><td align="left"><italic>Escherichia coli</italic></td><td align="left">(11991,13694)</td></tr><tr><td align="left">E<sub>c</sub>_Matrix [<xref ref-type="bibr" rid="CR25">25</xref>]</td><td align="left"><italic>Escherichia coli</italic></td><td align="left">(13047,13726)</td></tr><tr><td align="left">WBM [<xref ref-type="bibr" rid="CR2">2</xref>]</td><td align="left"><italic>Homo sapiens</italic></td><td align="left">(157056,80016)</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec7">
      <title>Hardware and software</title>
      <p>VFFVA and createWarmup<sub>VF</sub> were run on a Dell HPC machine with 72 Intel Xeon E5 2.3 GHz cores and 768 GB of memory. The current implementation was tested with Open MPI v1.10.3, OpenMP 3.1, GCC 4.7.3, and IBM ILOG CPLEX academic version (12.6.3). FFVA and createWarmup<sub>MATLAB</sub> were tested with MATLAB 2014b [<xref ref-type="bibr" rid="CR12">12</xref>] and distributedFBA was run on Julia v0.5. ILOG CPLEX was called with the following parameters:
<disp-formula id="Equa"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ \begin{array}{ll@{}ll} \texttt{PARALLELMODE=1} &amp;\\ \texttt{THREADS=1} &amp;\\ \texttt{AUXROOTTHREADS=2} &amp;\\ \end{array} $$ \end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:mtable class="array" columnalign="left"><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">PARALLELMODE=1</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">THREADS=1</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">AUXROOTTHREADS=2</mml:mtext></mml:mtd></mml:mtr><mml:mtr/></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2020_3711_Article_Equa.gif" position="anchor"/></alternatives></disp-formula> Additionally, coupled models with scaling infeasibilities might require turning off the scaling:
<disp-formula id="Equb"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ \begin{array}{ll@{}ll} \texttt{SCAIND=-1} &amp;\\ \end{array} $$ \end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:mtable class="array" columnalign="left"><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">SCAIND=-1</mml:mtext></mml:mtd></mml:mtr><mml:mtr/></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2020_3711_Article_Equb.gif" position="anchor"/></alternatives></disp-formula> The call to VFFVA is done from bash as follows:</p>
      <p>mpirun -np &lt;nproc&gt; --bind-to none -x OMP_NUM_THREADS=&lt;nthr&gt; veryfastFVA &lt;model.mps&gt; &lt;optPerc&gt; &lt;scaling&gt; &lt;rxns&gt;</p>
      <p>where nproc is the number of non-shared memory processes, <italic>nthr</italic> is the number of shared memory threads, <italic>optPerc</italic> is the percentage of the optimal objective of the metabolic model considered for the analysis, <italic>scaling</italic> is CPLEX scaling parameter where 0 leaves it to the default (equilibration) and -1 sets it to unscaling such as for coupled models, and <italic>rxns</italic> is an optional user-defined subset of reactions to analyze. createWarmup<sub>VF</sub> was called in a similar fashion:</p>
      <p>mpirun -np &lt;nproc&gt; --bind-to none -x OMP_NUM_THREADS=&lt;nthr&gt; createWarmupPts &lt;model.mps&gt; &lt;scaling&gt;</p>
      <p>For large models, OpenMP threads were bound to physical cores through setting the environment variable
<disp-formula id="Equc"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ \begin{array}{ll@{}ll} \texttt{OMP\_PROC\_BIND=TRUE} &amp;\\ \end{array} $$ \end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mtable class="array" columnalign="left"><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">OMP_PROC_BIND=TRUE</mml:mtext></mml:mtd></mml:mtr><mml:mtr/></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2020_3711_Article_Equc.gif" position="anchor"/></alternatives></disp-formula> while for small models, setting the variable to FALSE yielded faster run times. The schedule is set through the environment variable
<disp-formula id="Equd"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ \begin{array}{ll@{}ll} \texttt{OMP\_SCHEDULE=schedule,chunk} &amp;\\ \end{array} $$ \end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mtable class="array" columnalign="left"><mml:mtr><mml:mtd><mml:mtext mathvariant="monospace">OMP_SCHEDULE=schedule,chunk</mml:mtext></mml:mtd></mml:mtr><mml:mtr/></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2020_3711_Article_Equd.gif" position="anchor"/></alternatives></disp-formula> where schedule can be static, dynamic or guided, and chunk is the minimal number of iterations processed per worker at a time.</p>
    </sec>
    <sec id="Sec8">
      <title>Other possible implementations</title>
      <p>The presented software can be implemented in Fortran since the library OpenMP is supported as well. Additionally, Python’s multiprocessing library allows to balance the load dynamically between non-shared memory processes, but the parallelism inside one process is often limited to one thread by the Global Interpreter Lock (GIL). This limitation could be circumvented through using OpenMP and Cython [<xref ref-type="bibr" rid="CR26">26</xref>]. The unique advantage of the presented implementation of VFFVA is the deployment of two levels of parallelism following a hierarchical model where MPI processes are at a top-level and OpenMP threads at a lower level. The MPI processes manage the coarse-grained parallelism, and OpenMP threads manage the finer-grained tasks that share memory and avoid copying the original problem, which increases performance and saves consequent memory. This architecture adapts seamlessly with modern distributed hardware in HPC setting. MATLAB and Python wrappers of the C code were provided at <ext-link ext-link-type="uri" xlink:href="https://github.com/marouenbg/VFFVA">https://github.com/marouenbg/VFFVA</ext-link>.</p>
    </sec>
  </sec>
  <sec id="Sec9" sec-type="results">
    <title>Results</title>
    <p>The OpenMP/MPI hybrid implementation of VFFVA allowed to gain a significant speedup over the static load balancing approach. In this section, the run times of VFFVA were compared to FFVA at different settings followed by a comparison of the different strategies of load balancing with respect to their impact on the run time per worker. In contrast to previous work where FFVA was benchmarked in serial runs [<xref ref-type="bibr" rid="CR10">10</xref>], in the present work the emphasis was put upon parallel run times.</p>
    <sec id="Sec10">
      <title>Parallel construct in a hybrid openMP/MPI setting</title>
      <p>The MATLAB implementation of parallelism through the parallel computing toolbox provides great ease-of-use, wherein two commands only are required to allocate and launch parallel jobs. Also, it saves the user the burden of finding out whether the jobs are run on shared or non-shared systems. VFFVA provides the user with a similar level of flexibility as it supports both types of systems while guaranteeing the same numerical results as FVA in double precision (Figure S1). Besides, it allows accessing advanced features of OpenMP and MPI such as dynamic load balancing. The algorithm starts first by assigning chunks of iterations to every CPU (Fig. <xref rid="Fig1" ref-type="fig">1</xref>), where a user-defined number of threads simultaneously process the iterations. In the end, the CPUs synchronize and pass the result vector to the main core to reduce them to the final vector.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Hybrid OpenMP/MPI implementation of FVA ensures two levels of parallelism. The distribution of tasks is implemented following a hierarchical model where MPI manages coarse-grained parallelism in non-shared memory systems. At a lower level, OpenMP processes within each MPI process manage fine-grained parallelism taking advantage of the shared memory to improve performance</p></caption><graphic xlink:href="12859_2020_3711_Fig1_HTML" id="MO1"/></fig></p>
      <p>The main contributions of VFFVA are the complete use of C, which impacted mainly the computing time of small models (<italic>n</italic>&lt;3000), and the dynamic load balancing that was the main speedup factor for larger models.</p>
    </sec>
    <sec id="Sec11">
      <title>Impact on computing small models</title>
      <p>VFFVA and FFVA were run five times on small models, i.e., Ecoli_core, EcoliK12, and P_putida. VFFVA had at least 20-fold speedup on the average of the five runs (Table <xref rid="Tab2" ref-type="table">2</xref>). The main contributing factor was the use of C over MATLAB in all steps of the analysis. In particular, the loading time of MATLAB Java machine and the assignment of workers through parpool was much greater than the analysis time itself.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Comparison of run times of FFVA and VFFVA in small models in seconds. The results are presented as the mean and standard deviation of five runs</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Model</th><th align="left">FFVA mean(std) loading and analysis time</th><th align="left">VFFVA mean(std) loading and analysis time</th><th align="left">FFVA mean(std) analysis only</th></tr></thead><tbody><tr><td align="left" colspan="4">2 cores</td></tr><tr><td align="left">Ecoli_core</td><td align="justify">19.5(0.5)</td><td align="justify">0.2(0.01)</td><td align="justify">0.37(0.1)</td></tr><tr><td align="left">P_putida</td><td align="justify">19.2(0.7)</td><td align="justify">0.6(0.02)</td><td align="justify">0.81(0.09)</td></tr><tr><td align="left">EcoliK12</td><td align="justify">20.4(0.6)</td><td align="justify">2.2(0.06)</td><td align="justify">2.41(0.09)</td></tr><tr><td align="left" colspan="4">4 cores</td></tr><tr><td align="left">Ecoli_core</td><td align="justify">19.6(0.6)</td><td align="justify">0.2(0.005)</td><td align="justify">0.32(0.01)</td></tr><tr><td align="left">P_putida</td><td align="justify">19.4(1)</td><td align="justify">0.5(0.02)</td><td align="justify">0.61(0.01)</td></tr><tr><td align="left">EcoliK12</td><td align="justify">20(0.8)</td><td align="justify">1.3(0.04)</td><td align="justify">1.64(0.08)</td></tr><tr><td align="left" colspan="4">8 cores</td></tr><tr><td align="left">Ecoli_core</td><td align="justify">19.4(0.5)</td><td align="justify">0.2(0.03)</td><td align="justify">0.35(0.05)</td></tr><tr><td align="left">P_putida</td><td align="justify">19.6(0.7)</td><td align="justify">0.4(0.04)</td><td align="justify">0.53(0.009)</td></tr><tr><td align="left">EcoliK12</td><td align="justify">20(0.49)</td><td align="justify">0.9(0.01)</td><td align="justify">1.22(0.08)</td></tr><tr><td align="left" colspan="4">16 cores</td></tr><tr><td align="left">Ecoli_core</td><td align="justify">20.2(0.4)</td><td align="justify">0.2(0.008)</td><td align="justify">0.41(0.05)</td></tr><tr><td align="left">P_putida</td><td align="justify">19.5(0.4)</td><td align="justify">0.4(0.04)</td><td align="justify">0.51(0.03)</td></tr><tr><td align="left">EcoliK12</td><td align="justify">22(0.7)</td><td align="justify">0.7(0.01)</td><td align="justify">0.87(0.03)</td></tr><tr><td align="left" colspan="4">32 cores</td></tr><tr><td align="left">Ecoli_core</td><td align="justify">22.2(0.4)</td><td align="justify">0.3(0.008)</td><td align="justify">0.6(0.12)</td></tr><tr><td align="left">P_putida</td><td align="justify">21.5(0.6)</td><td align="justify">0.4(0.01)</td><td align="justify">0.53(0.004)</td></tr><tr><td align="left">EcoliK12</td><td align="justify">21.5(0.6)</td><td align="justify">0.6(0.03)</td><td align="justify">0.78(0.04)</td></tr></tbody></table></table-wrap></p>
      <p>The result highlighted the power of C in gaining computing speed, through managing the different low-level aspects of memory allocation and variable declaration.</p>
      <p>In the analysis of large models, where MATLAB loading time becomes less significant, dynamic load balancing becomes the main driving factor of run time decrease.</p>
    </sec>
    <sec id="Sec12">
      <title>Impact on computing large models</title>
      <p>The speedup gained on computing large models (Recon2 and E_Matrix) reached three folds with VFFVA (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) at 32 threads with Recon 2 (35.17<italic>s</italic> vs 10.3<italic>s</italic>) and E_Matrix (44<italic>s</italic> vs 14.7<italic>s</italic>) for the loading and analysis time. In fact, with dynamic load balancing, VFFVA allowed to update the assigned chunks of iterations to every worker dynamically, which guarantees an equal distribution of the load. In this case, the workers that get fast-solving LPs, will get a larger number of iterations assigned. Conversely, the workers that get ill-conditioned LPs, e.g., having an <italic>S</italic> matrix with a large condition number, require more time to solve them and will get fewer LPs in total. Finally, all the workers synchronize at the same time to reduce the results. Particularly, the speedup achieved with VFFVA increased with the size of the models and the number of threads (Fig. <xref rid="Fig2" ref-type="fig">2</xref>E_Matrix). Finally, the different load balancing strategies (static, guided, and dynamic) were compared further with two of the largest models (Whole Body Model (WBM) and E<sub>c</sub>_Matrix).
<fig id="Fig2"><label>Fig. 2</label><caption><p>Run times of Recon2 and E_Matrix model using FFVA and VFFVA on 2,4,8,16, and 32 threads. The guided schedule was used in the benchmarking. The run time accounted for the creation of the parallel pool (loading time) and analysis time</p></caption><graphic xlink:href="12859_2020_3711_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec13">
      <title>Load management</title>
      <p>Load management describes the different approaches to assign iterations to the workers. It can be static, where an even number of iterations is assigned to each worker. Guided schedule refers to dividing the iterations in chunks of size 2<italic>n</italic>/<italic>w</italic><italic>o</italic><italic>r</italic><italic>k</italic><italic>e</italic><italic>r</italic><italic>s</italic> initially, with <italic>n</italic> equal to the number of reactions in the model, and <italic>q</italic>/<italic>w</italic><italic>o</italic><italic>r</italic><italic>k</italic><italic>e</italic><italic>r</italic><italic>s</italic> afterward, with <italic>q</italic> equal to the remaining reactions after the initial assignment. The main difference with static balancing was the dynamic assignment of chunks, in a way that fast workers can process more iteration blocks. Finally, the is very similar to guided except that chunk size is given by the user, which allows greater flexibility. In the following section, the load balancing strategies of E<sub>c</sub>_Matrix which is an ME coupled model and WBM were compared for the time required to load and perform the analysis.</p>
      <sec id="Sec14">
        <title>Static schedule</title>
        <p>Using static schedule, VFFVA assigned an equal number of iterations to every worker. With 16 threads, the number of iterations per worker equaled 1715 and 1716 (Fig. <xref rid="Fig3" ref-type="fig">3</xref>c). Expectedly, the run time varied widely between workers (Fig. <xref rid="Fig3" ref-type="fig">3</xref>b) and resulted in a final time of 393<italic>s</italic>.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Run times of E<sub>c</sub>_Matrix model. <bold>a</bold>-Run times of E<sub>c</sub>_Matrix model at 2,4,8,16, and 32 threads using FFVA and VFFVA. The run time accounted for the creation of the parallel pool (loading time) and analysis time. <bold>b</bold>-Run time per worker in the static, guided, and using 16 threads. <bold>c</bold>-The number of iterations processed per worker in the static, guided, and using 16 threads</p></caption><graphic xlink:href="12859_2020_3711_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
      <sec id="Sec15">
        <title>Guided schedule</title>
        <p>With guided schedule (Fig. <xref rid="Fig3" ref-type="fig">3</xref>a), the highest speedup (2.9) was achieved with 16 threads (Fig. <xref rid="Fig3" ref-type="fig">3</xref>b). The iterations processed varied between 719 and 2581 and the run time per worker was quite comparable with a final run time equal to 281<italic>s</italic>.</p>
      </sec>
      <sec id="Sec16">
        <title>Dynamic schedule</title>
        <p>Using dynamic load balancing with a chunk size of 50 resulted in similar performance to the guided schedule. The final run time equaled 197<italic>s</italic>, while FFVA took 581<italic>s</italic>. An optimal chunk size has to be small enough to ensure a frequent update on the workers’ load, and big enough to take advantage of the solution basis reuse in every worker. At a chunk size of one, i.e., each worker is assigned one iteration at a time, the final solution time equaled 272<italic>s</italic>. In fact, for a small chunk size, the worker is updated often with new pieces of iterations, loses the stored solution basis of the previous problem, and has to solve the LP from scratch which slows the overall process.</p>
        <p>Similarly, the computation of the solution space for WBM <italic>Homo sapiens</italic> metabolic model [<xref ref-type="bibr" rid="CR2">2</xref>] (Fig. <xref rid="Fig4" ref-type="fig">4</xref>a) had a twofold speedup with 16 threads using a chunk size of 50 (806 <italic>mn</italic>) compared to FFVA (1611<italic>mn</italic>). The run times with guided schedule (905<italic>mn</italic>) and dynamic schedule with chunk size 100 (850<italic>mn</italic>) and chunk size 500 (851<italic>mn</italic>) were less efficient due to the slower update rate leading to a variable analysis time per worker (Fig. <xref rid="Fig4" ref-type="fig">4</xref>b,c,d). VFFVA on eight threads (1323<italic>mn</italic> with chunk size 50) proved comparable to FFVA (1214<italic>mn</italic>) and distributedFBA (1182<italic>mn</italic>) on 16 threads, thereby saving computational resources and time.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Run times per worker of WBM <italic>Homo sapiens</italic> metabolic model. <bold>a</bold>-Final run time of the different load balancing schedules at 8, 16, and 32 threads. The run time accounted for the creation of the parallel pool (loading time) and analysis time. <bold>b</bold>-Run time per worker as a function of the number of iterations processed using the guided schedule and the dynamic schedule with a chunk size of 50, 100, and 500 with eight threads, <bold>c</bold>-16 threads, and <bold>d</bold>-32 threads</p></caption><graphic xlink:href="12859_2020_3711_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec17">
      <title>Impact on memory usage</title>
      <p>In MATLAB, the execution of <italic>j</italic> parallel jobs implies launching <italic>j</italic> instances of MATLAB. On average, one instance needs 2 GB. In a parallel setting, the memory requirements are at a minimum 2<italic>j</italic> GB, which can limit the execution of highly parallel jobs. In the Julia-based distributedFBA, the overall memory requirement exceeded 15 GB at 32 cores. VFFVA requires only the memory necessary to load <italic>j</italic> instances of the input model, which corresponds to the MPI processes as the OpenMP threads save additional memory through sharing one instance of the model. The differences between the FFVA and VFFVA get more pronounced as the number of threads increases (Fig. <xref rid="Fig5" ref-type="fig">5</xref>), i.e., 13.5-fold using eight threads, 14.2-fold using 16 threads, and 14.7-fold using 32 threads.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Physical memory usage at 8, 16, and 32 threads using FFVA, VFFVA, and distributedFBA highlights a lower memory usage with VFFVA</p></caption><graphic xlink:href="12859_2020_3711_Fig5_HTML" id="MO5"/></fig></p>
      <p>Finally, VFFVA outran FFVA and distributedFBA both on execution time and memory requirements (Table <xref rid="Tab3" ref-type="table">3</xref>). The advantage becomes important with larger models and a higher number of threads, which makes VFFVA particularly suited for analyzing large-scale metabolic models in HPC setting.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Comparative summary of the features of each implementation</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Feature</th><th align="left">VFFVA</th><th align="left">distributedFBA</th><th align="left">FFVA</th><th align="left">FVA</th></tr></thead><tbody><tr><td align="left">Speed</td><td align="left">++++</td><td align="left">+++</td><td align="left">++</td><td align="left">+</td></tr><tr><td align="left">Memory</td><td align="left">+++</td><td align="left">++</td><td align="left">+</td><td align="left">+</td></tr><tr><td align="left">Load balancing</td><td align="left">Dynamic</td><td align="left">Static</td><td align="left">Static</td><td align="left">Static</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec18">
      <title>Creation of warmup points for sampling</title>
      <p>Sampling the solution space of metabolic models is an unbiased method that allows to characterize the space of metabolic phenotypes, as opposed to FBA that provides single solutions, and FVA that computes solution ranges. The uniform sampling of the solution space is a time-consuming process that starts with the generation of warmup points to determine the initial starting points for sampling. This step is formulated similarly to FVA and could be accelerated using dynamic load balancing. The generation of 30,000 warmup points were compared using the COBRA toolbox function createWarmup<sub>MATLAB</sub> and a dynamically load-balanced C implementation createWarmup<sub>VF</sub> on a set of models (Table <xref rid="Tab4" ref-type="table">4</xref>). Since the COBRA toolbox implementation does not support parallelism, it was run on a single core and the run time was divided by the number of cores to obtain an optimistic approximation of the parallel run times. The speedup achieved varied between four up to a factor of 100 in the different models (Table <xref rid="Tab4" ref-type="table">4</xref>). Similarly to FFVA [<xref ref-type="bibr" rid="CR10">10</xref>], the main driving factor for the decrease in computation time was the C implementation that allowed to reuse the LP object in every iteration and to save presolve time. Equally, dynamic load balancing between the workers ensured a fast convergence time.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Generation of sampling warmup points using dynamic load balancing</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Model</th><th align="left">createWarmup<sub>MATLAB</sub></th><th align="left" colspan="6">createWarmup<sub>VF</sub></th></tr><tr><th align="left">Cores</th><th align="left">1</th><th align="left">1</th><th align="left">2</th><th align="left">4</th><th align="left">8</th><th align="left">16</th><th align="left">32</th></tr></thead><tbody><tr><td align="left">Ecoli_core</td><td align="left">149</td><td align="left">2.8</td><td align="left">1.8</td><td align="left">0.8</td><td align="left">0.7</td><td align="left">0.5</td><td align="left">0.5</td></tr><tr><td align="left">P_putida</td><td align="left">385</td><td align="left">12.5</td><td align="left">13</td><td align="left">8</td><td align="left">4</td><td align="left">2</td><td align="left">2</td></tr><tr><td align="left">EcoliK12</td><td align="left">801</td><td align="left">49</td><td align="left">43</td><td align="left">23</td><td align="left">10.4</td><td align="left">9.5</td><td align="left">9.1</td></tr><tr><td align="left">Recon2</td><td align="left">11346</td><td align="left">288</td><td align="left">186</td><td align="left">30</td><td align="left">32</td><td align="left">24</td><td align="left">21</td></tr><tr><td align="left">E_Matrix</td><td align="left">NA<sup>*</sup></td><td align="left">602</td><td align="left">508</td><td align="left">130</td><td align="left">52</td><td align="left">43</td><td align="left">43</td></tr><tr><td align="left">E<sub>c</sub>_Matrix</td><td align="left">NA<sup>*</sup></td><td align="left">5275</td><td align="left">4986</td><td align="left">924</td><td align="left">224</td><td align="left">118</td><td align="left">117</td></tr></tbody></table><table-wrap-foot><p><sup>*</sup>The generation of warmup points of E_Matrix and E<sub>c</sub>_Matrix models did not converge after 20000<italic>s</italic>. The creation of warmup points can vary widely between runs as it involves the generation of a random <italic>c</italic> vector in the linear program. The runs were repeated three times and the average was reported.</p><p>The run times of the generation of 30,0000 warmup points for sampling of six metabolic models using the standard serial implementation createWarmup<sub>MATLAB</sub> and the dynamic load balanced implementation createWarmup<sub>VF</sub></p></table-wrap-foot></table-wrap></p>
      <p>In general, dynamic load balancing is a promising avenue for computing parallel FVA on ill-conditioned problems such as ME coupled models [<xref ref-type="bibr" rid="CR13">13</xref>], the generation of warmup points, and loopless FVA [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR27">27</xref>]. The sources of imbalance in metabolic models could be inherent to the model formulation like ME coupled models that represent processes at different scales. However, there were no correlation between the model condition number and the performance gain attributed to dynamic load balancing (<xref rid="MOESM1" ref-type="media">Figure S2</xref>). A second cause of imbalance is the formulation of the objective function such as the case of the generation of warmup points, where the optimization of a randomly generated objective function induces a severe imbalance. In this case, dynamic load balancing was up to 100 times faster than static load balancing (Table <xref rid="Tab4" ref-type="table">4</xref>) in particular with ME coupled models such as E<sub>c</sub>_Matrix. This finding suggests that a combination of the ill-conditioning of the stoichiometric matrix and the formulation of the objective function could contribute to a large imbalance, therefore a larger benefit of using dynamic load balancing.</p>
      <p>Taken together, the dynamic load balancing strategy allows efficient parallel solving of metabolic models through accelerating the computation of FVA and the fast preprocessing of sampling points thereby enabling the modeler to tackle large-scale metabolic models.</p>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="conclusion">
    <title>Conclusions</title>
    <p>Large-scale metabolic models of biological organisms are becoming widely used in the prediction of disease progression and the discovery of therapeutic targets [<xref ref-type="bibr" rid="CR28">28</xref>]. The standard tools available in the modeler’s toolbox have to be up-scaled to meet the increasing demand in computational time and resources [<xref ref-type="bibr" rid="CR29">29</xref>]. VFFVA is the precursor of the next generation of modeling tools that leverage the specifications of modern computers and computational facilities to enable biological insights through parallel and scalable systems biology analyses.</p>
  </sec>
  <sec id="Sec20">
    <title>Availability and requirements</title>
    <p>Project name: VFFVAProject home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/marouenbg/VFFVA">https://github.com/marouenbg/VFFVA</ext-link>Operating system: Unix systemsProgramming language: C, MATLAB (&gt;2014b), Python (&gt;3.0)Other requirements: Open MPI (v1.10.3), OpenMP (v3.1), GCC (v4.7.3), IBM ILOG CPLEX free academic version (v12.6.3).License: MITAny restrictions to use by non-academics: None, conditional on a valid CPLEX license.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec21">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2020_3711_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold><bold>Figure S1.</bold> Comparison of VFFVA and FVA results in double precision using Ecoli_core metabolic model. <bold>Figure S2.</bold> Absence of the effect of model complexity on VFFVA speedup over FFVA.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>AOS</term>
        <def>
          <p>Alternative solution space</p>
        </def>
      </def-item>
      <def-item>
        <term>COBRA</term>
        <def>
          <p>Constraint-based reconstruction and analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>FBA</term>
        <def>
          <p>Flux balance analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>FFVA</term>
        <def>
          <p>Fast flux variability analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>FVA</term>
        <def>
          <p>Flux variability analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>GIL</term>
        <def>
          <p>Global interpreter lock</p>
        </def>
      </def-item>
      <def-item>
        <term>GSMMs</term>
        <def>
          <p>Genome-scale metabolic models</p>
        </def>
      </def-item>
      <def-item>
        <term>HPC</term>
        <def>
          <p>High performance computing</p>
        </def>
      </def-item>
      <def-item>
        <term>LP</term>
        <def>
          <p>Linear program</p>
        </def>
      </def-item>
      <def-item>
        <term>MPI</term>
        <def>
          <p>Message passing interface</p>
        </def>
      </def-item>
      <def-item>
        <term>OpenMP</term>
        <def>
          <p>Open multi-processing</p>
        </def>
      </def-item>
      <def-item>
        <term>VFFVA</term>
        <def>
          <p>Very fast flux variability analysis</p>
        </def>
      </def-item>
      <def-item>
        <term>WBM</term>
        <def>
          <p>Whole body model</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-020-03711-2.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>The author would like to thank Valentin Plugaru at the University of Luxembourg for useful comments and guidance as well as fastFVA authors for publicly sharing their code and IBM for providing a free academic version of ILOG CPLEX. The experiments presented in this paper were partly carried out using the HPC facilities of the University of Luxembourg [<xref ref-type="bibr" rid="CR30">30</xref>] – see <ext-link ext-link-type="uri" xlink:href="http://hpc.uni.lu">http://hpc.uni.lu</ext-link>.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>M.B.G. designed the experiments, ran the simulations, and wrote the manuscript. The author(s) read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>No funding was obtained for this study</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>All the code and datasets are available in the Github repository <ext-link ext-link-type="uri" xlink:href="https://github.com/marouenbg/VFFVA">https://github.com/marouenbg/VFFVA</ext-link>and as a code ocean capsule 10.24433/CO.1817960.v1.</p>
  </notes>
  <notes id="FPar1">
    <title>Ethics approval and consent to participate</title>
    <p>Not applicable.</p>
  </notes>
  <notes id="FPar2">
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes id="FPar3" notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The author declares no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gottstein</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Olivier</surname>
            <given-names>BG</given-names>
          </name>
          <name>
            <surname>Bruggeman</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Teusink</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Constraint-based stoichiometric modelling from single organisms to microbial communities</article-title>
        <source>J R Soc Interface</source>
        <year>2016</year>
        <volume>13</volume>
        <issue>124</issue>
        <fpage>20160627</fpage>
        <?supplied-pmid 28334697?>
        <pub-id pub-id-type="pmid">28334697</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Personalized wholeĄbody models integrate metabolism, physiology, and the gut microbiome</article-title>
        <source>Molecular systems biology</source>
        <year>2020</year>
        <volume>16</volume>
        <issue>5</issue>
        <fpage>e8982</fpage>
        <?supplied-pmid 32463598?>
        <pub-id pub-id-type="pmid">32463598</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <mixed-citation publication-type="other">Øyås O, Stelling J. Genome-scale metabolic networks in time and space. Curr Opin Syst Biol. 2017. 10.1016/j.coisb.2017.12.003.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O’Brien</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Monk</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BO</given-names>
          </name>
        </person-group>
        <article-title>Using genome-scale models to predict biological capabilities</article-title>
        <source>Cell</source>
        <year>2015</year>
        <volume>161</volume>
        <issue>5</issue>
        <fpage>971</fpage>
        <lpage>87</lpage>
        <?supplied-pmid 26000478?>
        <pub-id pub-id-type="pmid">26000478</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mahadevan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Schilling</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>The effects of alternate optimal solutions in constraint-based genome-scale metabolic models</article-title>
        <source>Metab Eng</source>
        <year>2003</year>
        <volume>5</volume>
        <issue>4</issue>
        <fpage>264</fpage>
        <lpage>76</lpage>
        <?supplied-pmid 14642354?>
        <pub-id pub-id-type="pmid">14642354</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Burgard</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Nikolaev</surname>
            <given-names>EV</given-names>
          </name>
          <name>
            <surname>Schilling</surname>
            <given-names>CH</given-names>
          </name>
          <name>
            <surname>Maranas</surname>
            <given-names>CD</given-names>
          </name>
        </person-group>
        <article-title>Flux coupling analysis of genome-scale metabolic network reconstructions</article-title>
        <source>Genome Res</source>
        <year>2004</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>301</fpage>
        <lpage>12</lpage>
        <?supplied-pmid 14718379?>
        <pub-id pub-id-type="pmid">14718379</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bordbar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lewis</surname>
            <given-names>NE</given-names>
          </name>
          <name>
            <surname>Schellenberger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
          <name>
            <surname>Jamshidi</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Insight into human alveolar macrophage and m. tuberculosis interactions via metabolic reconstructions</article-title>
        <source>Mol Syst Biol</source>
        <year>2010</year>
        <volume>6</volume>
        <issue>1</issue>
        <fpage>422</fpage>
        <?supplied-pmid 20959820?>
        <pub-id pub-id-type="pmid">20959820</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Müller</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Bockmayr</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Fast thermodynamically constrained flux variability analysis</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>7</issue>
        <fpage>903</fpage>
        <lpage>9</lpage>
        <?supplied-pmid 23390138?>
        <pub-id pub-id-type="pmid">23390138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Ouyang</surname>
            <given-names>Q</given-names>
          </name>
        </person-group>
        <article-title>Expanded flux variability analysis on metabolic network of escherichia coli</article-title>
        <source>Chin Sci Bull</source>
        <year>2009</year>
        <volume>54</volume>
        <issue>15</issue>
        <fpage>2610</fpage>
        <lpage>9</lpage>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gudmundsson</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Computationally efficient flux variability analysis</article-title>
        <source>BMC Bioinformatics</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>489</fpage>
        <?supplied-pmid 20920235?>
        <pub-id pub-id-type="pmid">20920235</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Heirendt</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Arreckx</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pfau</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Mendoza</surname>
            <given-names>SN</given-names>
          </name>
          <name>
            <surname>Richelle</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Heinken</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Haraldsdottir</surname>
            <given-names>HS</given-names>
          </name>
          <name>
            <surname>Wachowiak</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Keating</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Vlasov</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Creation and analysis of biochemical constraint-based models using the cobra toolbox v. 3.0</article-title>
        <source>Nat Protoc</source>
        <year>2019</year>
        <volume>14</volume>
        <issue>3</issue>
        <fpage>639</fpage>
        <?supplied-pmid 30787451?>
        <pub-id pub-id-type="pmid">30787451</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <collab>MATLAB</collab>
        </person-group>
        <source>Version 8.4 (R2014b)</source>
        <year>2014</year>
        <publisher-loc>Natick, Massachusetts</publisher-loc>
        <publisher-name>The MathWorks Inc.</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lloyd</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Ebrahim</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>King</surname>
            <given-names>ZA</given-names>
          </name>
          <name>
            <surname>Catoiu</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>O’Brien</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BO</given-names>
          </name>
        </person-group>
        <article-title>Cobrame: A computational framework for genome-scale models of metabolism and gene expression</article-title>
        <source>PLoS Comput Biol</source>
        <year>2018</year>
        <volume>14</volume>
        <issue>7</issue>
        <fpage>1006302</fpage>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dagum</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Menon</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Openmp: an industry standard api for shared-memory programming</article-title>
        <source>IEEE Comput Sci Eng</source>
        <year>1998</year>
        <volume>5</volume>
        <issue>1</issue>
        <fpage>46</fpage>
        <lpage>55</lpage>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Forum</surname>
            <given-names>MP</given-names>
          </name>
        </person-group>
        <source>MPI: A message-passing interface standard</source>
        <year>1994</year>
        <publisher-loc>Knoxville</publisher-loc>
        <publisher-name>University of Tennessee</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Heirendt</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Fleming</surname>
            <given-names>RM</given-names>
          </name>
        </person-group>
        <article-title>Distributedfba. jl: high-level, high-performance flux balance analysis in julia</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <issue>9</issue>
        <fpage>1421</fpage>
        <lpage>3</lpage>
        <?supplied-pmid 28453682?>
        <pub-id pub-id-type="pmid">28453682</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Orth</surname>
            <given-names>JD</given-names>
          </name>
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
        </person-group>
        <article-title>What is flux balance analysis?</article-title>
        <source>Nat Biotechnol</source>
        <year>2010</year>
        <volume>28</volume>
        <issue>3</issue>
        <fpage>245</fpage>
        <lpage>8</lpage>
        <?supplied-pmid 20212490?>
        <pub-id pub-id-type="pmid">20212490</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bordel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Agren</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Sampling the solution space in genome-scale metabolic networks reveals transcriptional regulation in key enzymes</article-title>
        <source>PLoS Comput Biol</source>
        <year>2010</year>
        <volume>6</volume>
        <issue>7</issue>
        <fpage>1000859</fpage>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Megchelenbrink</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Huynen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Marchiori</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>optgpsampler: an improved tool for uniformly sampling the solution-space of genome-scale metabolic networks</article-title>
        <source>PLoS ONE</source>
        <year>2014</year>
        <volume>9</volume>
        <issue>2</issue>
        <fpage>86587</fpage>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <mixed-citation publication-type="other">Orth JD, Fleming RM, Palsson BO. Reconstruction and use of microbial metabolic networks: the core escherichia coli metabolic model as an educational guide. EcoSal plus. 2010. 10.1128/ecosal.10.2.1.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nogales</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>A genome-scale metabolic reconstruction of pseudomonas putida kt2440: i jn746 as a cell factory</article-title>
        <source>BMC Syst Biol</source>
        <year>2008</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>79</fpage>
        <?supplied-pmid 18793442?>
        <pub-id pub-id-type="pmid">18793442</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Feist</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Henry</surname>
            <given-names>CS</given-names>
          </name>
          <name>
            <surname>Reed</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Krummenacker</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Joyce</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Karp</surname>
            <given-names>PD</given-names>
          </name>
          <name>
            <surname>Broadbelt</surname>
            <given-names>LJ</given-names>
          </name>
          <name>
            <surname>Hatzimanikatis</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
        </person-group>
        <article-title>A genome-scale metabolic reconstruction for escherichia coli k-12 mg1655 that accounts for 1260 orfs and thermodynamic information</article-title>
        <source>Mol Syst Biol</source>
        <year>2007</year>
        <volume>3</volume>
        <issue>1</issue>
        <fpage>121</fpage>
        <?supplied-pmid 17593909?>
        <pub-id pub-id-type="pmid">17593909</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Swainston</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Fleming</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Hoppe</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sahoo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Aurich</surname>
            <given-names>MK</given-names>
          </name>
          <name>
            <surname>Haraldsdottir</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Mo</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Rolfsson</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Stobbe</surname>
            <given-names>MD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A community-driven global reconstruction of human metabolism</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>5</issue>
        <fpage>419</fpage>
        <lpage>25</lpage>
        <?supplied-pmid 23455439?>
        <pub-id pub-id-type="pmid">23455439</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Jamshidi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Fleming</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
        </person-group>
        <article-title>Genome-scale reconstruction of escherichia coli’s transcriptional and translational machinery: a knowledge base, its mathematical formulation, and its functional characterization</article-title>
        <source>PLoS Comput Biol</source>
        <year>2009</year>
        <volume>5</volume>
        <issue>3</issue>
        <fpage>1000312</fpage>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thiele</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Fleming</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Bordbar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schellenberger</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>BØ</given-names>
          </name>
        </person-group>
        <article-title>Functional characterization of alternate optimal solutions of escherichia coli’s transcriptional and translational machinery</article-title>
        <source>Biophys J</source>
        <year>2010</year>
        <volume>98</volume>
        <issue>10</issue>
        <fpage>2072</fpage>
        <lpage>81</lpage>
        <?supplied-pmid 20483314?>
        <pub-id pub-id-type="pmid">20483314</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Behnel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bradshaw</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Citro</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Dalcin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Seljebotn</surname>
            <given-names>DS</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Cython: The best of both worlds</article-title>
        <source>Comput Sci Eng</source>
        <year>2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>31</fpage>
        <lpage>39</lpage>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <mixed-citation publication-type="other">Maranas CD, Zomorrodi AR. Optimization Methods in Metabolic Networks: Wiley; 2016. <ext-link ext-link-type="uri" xlink:href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781119188902">https://onlinelibrary.wiley.com/doi/book/10.1002/9781119188902</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Øyås</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Borrell</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Trauner</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Zimmermann</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Feldmann</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Liphardt</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gagneux</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Stelling</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Sauer</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Zampieri</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Model-based integration of genomics and metabolomics reveals snp functionality in mycobacterium tuberculosis</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2020</year>
        <volume>117</volume>
        <issue>15</issue>
        <fpage>8494</fpage>
        <lpage>502</lpage>
        <?supplied-pmid 32229570?>
        <pub-id pub-id-type="pmid">32229570</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>G-H</given-names>
          </name>
          <name>
            <surname>Dai</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Han</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Xiao</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Fastmm: an efficient toolbox for personalized constraint-based metabolic modeling</article-title>
        <source>BMC Bioinformatics</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="pmid">31898485</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Varrette</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bouvry</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Cartiaux</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Georgatos</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Management of an academic hpc cluster: The ul experience</article-title>
        <source>Proc. of the 2014 Intl. Conf. on High Performance Computing &amp; Simulation (HPCS 2014)</source>
        <year>2014</year>
        <publisher-loc>Bologna</publisher-loc>
        <publisher-name>IEEE</publisher-name>
      </element-citation>
    </ref>
  </ref-list>
</back>
