<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7488777</article-id>
    <article-id pub-id-type="publisher-id">2134</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-020-02134-9</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Merqury: reference-free quality, completeness, and phasing assessment for genome assemblies</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9809-8127</contrib-id>
        <name>
          <surname>Rhie</surname>
          <given-names>Arang</given-names>
        </name>
        <address>
          <email>arang.rhie@nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Walenz</surname>
          <given-names>Brian P.</given-names>
        </name>
        <address>
          <email>brian.walenz@nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Koren</surname>
          <given-names>Sergey</given-names>
        </name>
        <address>
          <email>sergey.koren@nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Phillippy</surname>
          <given-names>Adam M.</given-names>
        </name>
        <address>
          <email>adam.phillippy@nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.280128.1</institution-id><institution-id institution-id-type="ISNI">0000 0001 2233 9230</institution-id><institution>Genome Informatics Section, Computational and Statistical Genomics Branch, </institution><institution>National Human Genome Research Institute, National Institutes of Health, </institution></institution-wrap>Bethesda, MD USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>14</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>9</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>245</elocation-id>
    <history>
      <date date-type="received">
        <day>31</day>
        <month>3</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>8</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Recent long-read assemblies often exceed the quality and completeness of available reference genomes, making validation challenging. Here we present Merqury, a novel tool for reference-free assembly evaluation based on efficient k-mer set operations. By comparing k-mers in a de novo assembly to those found in unassembled high-accuracy reads, Merqury estimates base-level accuracy and completeness. For trios, Merqury can also evaluate haplotype-specific accuracy, completeness, phase block continuity, and switch errors. Multiple visualizations, such as k-mer spectrum plots, can be generated for evaluation. We demonstrate on both human and plant genomes that Merqury is a fast and robust method for assembly validation.</p>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Assembly validation</kwd>
      <kwd>Benchmarking</kwd>
      <kwd>K-mers</kwd>
      <kwd>Haplotype phasing</kwd>
      <kwd>Trio binning</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000051</institution-id>
            <institution>National Human Genome Research Institute</institution>
          </institution-wrap>
        </funding-source>
        <award-id>Intramural Research Program</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par2">With recent advances in long-read [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR3">3</xref>] and long-range sequencing technologies [<xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR6">6</xref>], new assembly pipelines are generating more continuous, complete, and accurate diploid genome assemblies than ever before [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR7">7</xref>–<xref ref-type="bibr" rid="CR14">14</xref>].</p>
    <p id="Par3">However, de novo assembled genomes are difficult to validate due to the lack of a known truth. Existing methods use Illumina reads to infer base-level accuracy by aligning the reads to the assembly for evaluation [<xref ref-type="bibr" rid="CR15">15</xref>]. Base errors in the consensus are detected as variants (SNPs or small indels) when aligning the short reads. However, this method is heavily reliant on the short-read mapping, which could be biased in repetitive regions, under-collapsed regions, or regions of low consensus accuracy. For measuring completeness and false duplications, near-universal single-copy orthologs (BUSCOs) [<xref ref-type="bibr" rid="CR16">16</xref>] have been widely used to evaluate the gene content of assemblies. BUSCO is robust for species that have been widely studied, such as human and mouse. However, this analysis can be inaccurate when the newly assembled genome contains true copy number or sequence variants that were not considered when building the initial BUSCO gene set. In addition, BUSCO only examines conserved single-copy genes and fails to evaluate the most difficult-to-assemble regions of the genome.</p>
    <p id="Par4">In contrast, k-mers (genomic substrings of length <italic>k</italic>) can be used in a reference-free manner for assessing genome assembly quality metrics. Genome assembly validation via k-mer copy number analysis was introduced by Mapleson et al. in their KAT tool [<xref ref-type="bibr" rid="CR17">17</xref>], which enables visual inspection of k-mer spectra plots to identify artificial duplications and missing sequences. Merqury takes much of its inspiration from the ideas introduced by KAT. QUAST-LG [<xref ref-type="bibr" rid="CR18">18</xref>] is another assembly validation tool that provides both BUSCO and reference-based k-mer measurements, as well as alignment metrics against a closely related reference genome. However, many of QUAST’s metrics are based on the reference alignment, which incorrectly reports true variants in the assembled genome as potential mis-assemblies. A recent extension to the QUAST toolkit combines evidence from both k-mers and long reads to better identify certain classes of structural mis-assembly [<xref ref-type="bibr" rid="CR19">19</xref>].</p>
    <p id="Par5">Assessing haplotype phasing without a truth set is also challenging. Diploid genome assemblers generate both primary and alternate assemblies representing the two haplotypes. The primary assembly is typically a pseudo-haplotype that captures both the homozygous regions along with a single copy of the heterozygous alleles. Such a pseudo-haplotype does not guarantee long-range phasing, so to estimate phase block statistics, the alternate alleles must be mapped back to the primary assembly to determine regions corresponding to the primary-alternate haplotype phase blocks [<xref ref-type="bibr" rid="CR9">9</xref>]. However, this can be challenging when the alternate alleles do not map well to the primary sequence due to high sequence divergence or mis-assemblies. Moreover, long-read assemblies often collapse regions of low heterozygosity, which are excluded when calculating phase block statistics, thus over-representing the correctness.</p>
    <p id="Par6">Alternative methods report phasing statistics from small variants (mostly SNPs) called with short-read mapping [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR20">20</xref>–<xref ref-type="bibr" rid="CR23">23</xref>], or use benchmark genomes that have curated, phased variation call sets [<xref ref-type="bibr" rid="CR24">24</xref>–<xref ref-type="bibr" rid="CR27">27</xref>]. Both methods rely on a reference sequence as the primary source to detect heterozygous variations. However, these reference sequences are incomplete, and recent studies have demonstrated the shortcomings of the current human reference genome and variant call sets [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR28">28</xref>]. For example, the highly variable major histocompatibility complex (MHC) is excluded from the Genome in a Bottle (GIAB) and Global Alliance for Genomic Health (GA4GH) reference panels [<xref ref-type="bibr" rid="CR26">26</xref>] due to its repetitive nature and need of a specialized mapping strategy to account for the high allelic diversity [<xref ref-type="bibr" rid="CR29">29</xref>]. Moreover, reference-guided strategies require significant manual curation and effort and will not scale as large cohort sequencing projects become common [<xref ref-type="bibr" rid="CR30">30</xref>, <xref ref-type="bibr" rid="CR31">31</xref>]. This validation strategy is also not applicable to any species without a curated and complete reference [<xref ref-type="bibr" rid="CR32">32</xref>].</p>
    <p id="Par7">To overcome these limitations, we developed Merqury, which generates assembly assessment metrics using k-mers alone. Merqury compares a set of k-mers derived from unassembled, high-accuracy sequencing reads to a genome assembly for evaluation. Merqury builds upon the k-mer-based analyses introduced by KAT but adds new functionality for evaluating the accuracy of phased diploid genome assemblies (Table <xref rid="Tab1" ref-type="table">1</xref>). Unique to Merqury, the generated metrics include consensus quality (QV) and k-mer completeness, and when parental genomic sequences are available (either assembled or unassembled), Merqury can output haplotype completeness, phase block statistics, switch error rates, and visual representations of phase consistency for the child’s genome. This includes TDF (or BED) features that can be displayed in a genome browser for visualizing the presence of k-mer classes across a genome (e.g., the k-mers inherited from a parental genome). We show that Merqury’s k-mer-based assembly validation produces comparable or better results than existing methods, such as BUSCO gene completeness and mapping-based measurements.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Feature comparison of KAT and Merqury</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>KAT</th><th>Merqury</th></tr></thead><tbody><tr><td colspan="3"><bold>K-mer analysis</bold></td></tr><tr><td> Count</td><td>Y</td><td>Y</td></tr><tr><td> Filter</td><td>Y</td><td>Y</td></tr><tr><td> Compare</td><td>Y</td><td>Y</td></tr><tr><td> %GC</td><td>Y</td><td>–</td></tr><tr><td> Fitting distributions</td><td>Y</td><td>–</td></tr><tr><td> Other set operations, querying</td><td>–</td><td>Y</td></tr><tr><td colspan="3"><bold>Assembly statistics</bold></td></tr><tr><td> Finding repetitive regions</td><td>Y</td><td>–</td></tr><tr><td> Contamination detection</td><td>Y</td><td>–</td></tr><tr><td> K-mer copy-number spectrum</td><td>Y</td><td>Y</td></tr><tr><td> K-mer assembly, haplotype spectrum</td><td>–</td><td>Y</td></tr><tr><td> Consensus quality (QV)</td><td>–</td><td>Y</td></tr><tr><td> K-mer completeness</td><td>–</td><td>Y</td></tr><tr><td> Phase blocks and switch error rate</td><td>–</td><td>Y</td></tr><tr><td colspan="3"><bold>Plotting</bold></td></tr><tr><td> Stacked histograms</td><td>Y</td><td>Y</td></tr><tr><td> Unstacked histograms</td><td>–</td><td>Y</td></tr><tr><td> K-mer coverage</td><td>Y</td><td>Y</td></tr><tr><td> %GC Heatmaps</td><td>Y</td><td>–</td></tr><tr><td> Hap-mer fractions (blob plots)</td><td>–</td><td>Y</td></tr><tr><td> Browser tracks (BED, TDF)</td><td>–</td><td>Y</td></tr><tr><td> Nx or NGx contig/block sizes</td><td>–</td><td>Y</td></tr></tbody></table></table-wrap></p>
  </sec>
  <sec id="Sec2">
    <title>Results</title>
    <p id="Par8">To demonstrate the ability of Merqury to evaluate the accuracy, completeness, and phasing of an assembly, we first applied it to an <italic>Arabidopsis thaliana</italic> F1 hybrid [<xref ref-type="bibr" rid="CR9">9</xref>], for which the parental strains (Col-0 and Cvi-0, simplified as Col and Cvi) have also been sequenced. For a comparison of multiple assemblies, we demonstrate Merqury on haplotype-resolved (TrioCanu [<xref ref-type="bibr" rid="CR10">10</xref>]), pseudo-haplotype (FALCON-Unzip [<xref ref-type="bibr" rid="CR9">9</xref>]), and mixed-haplotype (Canu [<xref ref-type="bibr" rid="CR33">33</xref>]) assemblies of this hybrid genome. Total assembly size is typically used as a rough measure of haplotype completeness. For example, the TrioCanu haplotype assemblies have similar total bases, 122~124 Mbp (Table <xref rid="Tab2" ref-type="table">2</xref>), close to the expected haploid genome size of 130 Mbp, indicating the haplotype assemblies are well balanced (assuming haplotype-specific bases are evenly inherited). In comparison, the primary assembly of FALCON-Unzip has ~ 35 Mbp bases more than the alternate assembly. However, it is difficult to understand where this difference originates from the assembly size alone. The mixed-haplotype Canu assembly, in comparison, is ~ 100 Mbp larger than the expected genome size of 130 Mb. Again, we can assume this assembly resolved both haplotypes, but since the haplotypes have been combined in a single assembly, we cannot know the composition from the size and continuity measures alone. In the following sections, we describe how Merqury’s statistics and plots can be used to dissect and understand these assemblies.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Merqury quality and completeness statistics for <italic>Arabidopsis thaliana</italic> and human genome assemblies</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="2"/><th rowspan="2">Assembly</th><th colspan="4">Continuity (Mb)</th><th colspan="3">QV</th><th colspan="4">k-mer completeness (%)</th><th colspan="4">BUSCO (%)</th></tr><tr><th>Total</th><th># Contigs</th><th>Max</th><th>NG50</th><th><bold>Meryl</bold></th><th><bold>Mash</bold></th><th><bold>Map</bold></th><th><bold>All</bold></th><th><bold>Hap1</bold></th><th><bold>Hap2</bold></th><th><bold>PPV</bold></th><th>Comp.</th><th>Dup.</th><th>Frag.</th><th>Mis.</th></tr></thead><tbody><tr><td rowspan="9"><bold><italic>A. thaliana</italic></bold><bold>Col x Cvi F1</bold></td><td colspan="16"><bold>TrioCanu</bold></td></tr><tr><td> Col</td><td>124</td><td>215</td><td>13.1</td><td>4.6</td><td>35.1</td><td>34.6</td><td>37.5</td><td>83.8</td><td>99.5</td><td>0.7</td><td>99.3</td><td>98.2</td><td>1.6</td><td>0.5</td><td>1.3</td></tr><tr><td> Cvi</td><td>122</td><td>163</td><td>12.2</td><td>5.6</td><td>36.4</td><td>35.9</td><td>38.6</td><td>83.6</td><td>1.1</td><td>99.4</td><td>98.9</td><td>98.0</td><td>1.4</td><td>0.4</td><td>1.6</td></tr><tr><td> Col + Cvi</td><td>246</td><td>378</td><td>13.1</td><td>5.5</td><td>35.7</td><td>33.0</td><td>38.0</td><td>98.3</td><td>99.7</td><td>99.4</td><td>99.1</td><td>98.2</td><td>78.8</td><td>0.2</td><td>1.6</td></tr><tr><td colspan="16"><bold>FALCON-Unzip</bold></td></tr><tr><td> pri</td><td>140</td><td>172</td><td>13.3</td><td>8.0</td><td>34.8</td><td>33.9</td><td>36.9</td><td>87.1</td><td>65.2</td><td>59.8</td><td>N/A</td><td>98.1</td><td>6.2</td><td>0.3</td><td>1.6</td></tr><tr><td> alt</td><td>105</td><td>248</td><td>11.6</td><td>4.3</td><td>38.3</td><td>37.9</td><td>39.9</td><td>74.5</td><td>38.2</td><td>40.6</td><td>N/A</td><td>93.1</td><td>2.0</td><td>0.3</td><td>6.6</td></tr><tr><td> pri + alt</td><td>245</td><td>420</td><td>13.3</td><td>6.9</td><td>36.0</td><td>33.5</td><td>37.9</td><td>97.8</td><td>99.1</td><td>98.2</td><td>N/A</td><td>98.1</td><td>93.2</td><td>0.3</td><td>1.6</td></tr><tr><td><bold>Canu</bold></td><td>248</td><td>2368</td><td>6.9</td><td>2.3</td><td>29.3</td><td>26.8</td><td>27.2</td><td>95.7</td><td>90.5</td><td>90.8</td><td>N/A</td><td>97.6</td><td>61.5</td><td>0.4</td><td>2.0</td></tr><tr><td rowspan="4"><bold><italic>H. sapiens</italic></bold><bold>NA12878</bold></td><td colspan="16"><bold>TrioCanu</bold></td></tr><tr><td> mat</td><td>2749</td><td>7388</td><td>9.0</td><td>1.1</td><td>31.3</td><td>30.4</td><td>34.1</td><td>94.0</td><td>90.7</td><td>0.9</td><td>99.1</td><td>86.5</td><td>0.8</td><td>6.9</td><td>6.6</td></tr><tr><td> pat</td><td>2743</td><td>7252</td><td>11.5</td><td>1.1</td><td>31.0</td><td>30.1</td><td>34.1</td><td>93.7</td><td>1.0</td><td>91.0</td><td>98.8</td><td>85.1</td><td>0.7</td><td>7.8</td><td>7.1</td></tr><tr><td> mat + pat</td><td>5492</td><td>14,640</td><td>11.5</td><td>1.1</td><td>31.1</td><td>27.5</td><td>34.1</td><td>98.2</td><td>90.9</td><td>91.2</td><td>99.0</td><td>90.0</td><td>47.3</td><td>5.0</td><td>5.0</td></tr></tbody></table><table-wrap-foot><p>All bases in the continuity stats are in Mbp. Haploid genome size of 130 Mbp and 3.2 Gbp was used for NG50 in the <italic>A. thaliana</italic> and <italic>H. sapiens</italic> NA12878 haploid assemblies, respectively, with twice the haploid genome size for combined assemblies. Merqury-specific column headers are in bold, including k-mer-based quality (QV) and completeness estimates. Merqury includes both exact (Meryl) and approximate (Mash) methods for measuring k-mer QV, while completeness uses only the exact k-mer counting method. Consensus QV scores are Phred-scaled where <italic>QV</italic> = − 10 log<sub>10</sub>
<italic>E</italic> for a probability of error <italic>E</italic> at each base in the assembly. K-mer completeness is measured by the fraction of all distinct, reliable k-mers (all) and haplotype specific k-mers. Hap1 and Hap2 correspond to Col and Cvi in <italic>A. thaliana</italic>, maternal and paternal in NA12878. BUSCO v3 was run with embryophyta_odb9 (<italic>n</italic> = 1440) for <italic>A. thaliana</italic> and mammalia_odb9 (<italic>n</italic> = 4104) for NA12878</p><p><italic>Map.</italic> mapping, <italic>Comp.</italic> complete, <italic>Dup.</italic> duplicated, <italic>Frag.</italic> fragmented, <italic>Mis.</italic> missing</p></table-wrap-foot></table-wrap></p>
    <sec id="Sec3">
      <title>Copy number spectrum</title>
      <p id="Par9">We counted k-mers from Illumina whole-genome sequencing of the <italic>A. thaliana</italic> F1 hybrid, as well as from each assembly, using Meryl, a k-mer counting tool we extended to support k-mer set operations for Merqury (<xref rid="Sec10" ref-type="sec">Methods</xref>). The copy number spectrum plot, known as “spectra-cn” plot [<xref ref-type="bibr" rid="CR17">17</xref>] tracks the multiplicity of each k-mer found in the Illumina read set (Fig. <xref rid="Fig1" ref-type="fig">1</xref>a) and colors it by the number of times it is found in a given assembly (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). The result is a set of histograms relating k-mer counts in the read set to their associated counts in the assembly. Here the Illumina dataset (which we will refer to as the “read set”) was sequenced to an average coverage of 45×, so we expect a histogram peak near <italic>x</italic> = 45 corresponding to k-mers present in both haplotypes, and a peak at half coverage (<italic>x</italic> = 22) representing k-mers found on only one haplotype (Fig. <xref rid="Fig1" ref-type="fig">1</xref>a, in practice, these peaks are shifted slightly lower due to the effects of sequencing error and sampling only <italic>l</italic> - <italic>k</italic> + 1 <italic>k</italic>-mers for each <italic>l</italic>-sized read). We refer to these as 2-copy and 1-copy k-mers, respectively, to indicate the number of times they appear in the true genome. Additional peaks may appear for polyploid genomes, but for the remainder of this paper, we will assume a diploid genome.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Merqury copy number spectrum plots for haploid and diploid assemblies of an <italic>Arabidopsis thaliana</italic> F1 hybrid genome. <bold>a</bold> Histogram of k-mer multiplicity collected from Illumina reads. By default, Merqury connects the midpoint of each histogram bin with a line, giving the illusion of a smooth curve. The first peak represents 1-copy (heterozygous) k-mers in the genome, and the second peak represents 2-copy k-mers originating from homozygous sequence or haplotype-specific duplications. Depth of sequencing coverage determines where these peaks appear. In this example, sequencing coverage is approximately 45×, corresponding to the 2-copy peak. <bold>b</bold> Copy number spectrum (spectra-cn) of the same k-mers in a plotted as stacked histograms colored by the copy numbers found in the combined TrioCanu assembly. The assembly k-mers absent from the read set (likely to be base errors in the assembly) are plotted as a bar at zero multiplicity, colored by the copy numbers found in the assembly. c Unstacked histograms of <bold>b</bold> for visualizing the distribution of k-mer counts per copy numbers found in the assembly. This plot shows an ideal pseudo haplotype assembly. <bold>d</bold> Spectra-cn plot of the combined FALCON-Unzip assembly. <bold>e</bold> Spectra-cn plot of the mixed-haplotype Canu assembly. Missing single copy k-mers (black) and k-mers from artificial duplications (green, purple, yellow in 30–60×) are noticeable. Note this assembly was not polished and so has a larger error k-mer bar. <bold>f</bold> Spectra-cn plot of the TrioCanu Col haplotype assembly. Half the single copy k-mers are missing and found in the other haplotype (black). Two-copy k-mers are found once (red) in each haplotype assembly. <bold>g</bold> Spectra-cn plot of the FALCON-Unzip primary assembly. <bold>h</bold> Spectra-cn plot of the FALCON-Unzip alternate assembly</p></caption><graphic xlink:href="13059_2020_2134_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par10">Thus, when a k-mer is found approximately 22 times in the <italic>A. thaliana</italic> read set, we expect it to be found only once in the assembly, as it is likely a 1-copy, haplotype-specific (heterozygous) sequence (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). In the spectra-cn plot, k-mers are colored based on their count in the assembly. For a complete haplotype-resolved assembly, where even the homozygous part of the genome is included in both haplotypes, we expect most k-mers in the 2-copy peak to be found twice in the assembly (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). For partially phased assemblies, 2-copy k-mers may be found either once or twice in the assembly (e.g., Fig. <xref rid="Fig2" ref-type="fig">2</xref>), depending on which homozygous sequences of the genome were separated and which were collapsed. In contrast, a pseudo-haplotype collapses homozygous alleles, so 2-copy k-mers are expected to appear only once in the assembly. One notable exception is haplotype-specific duplications, which can occur in two copies on the same haplotype, and thus may also appear in two copies in a pseudo-haplotype assembly.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Merqury assembly spectrum plots for evaluating k-mer completeness. K-mers are colored by their presence in the reads and primary/alternate assemblies. <bold>a</bold> Distinct k-mer assembly spectrum (spectra-asm) plot of both TrioCanu Col and Cvi haplotype assemblies. This plot shows the assembly-specific (red and blue) and shared portion of k-mers (green). <bold>b</bold> Spectra-asm plot of the FALCON-Unzip assembly. The primary assembly has more k-mers (red) compared to the alternate assembly (blue). <bold>c</bold> Spectra-asm plot of the Canu assembly which is a mixture of both haplotypes. A small fraction of 1-copy k-mers is found only in the reads (black peak around 12~30×), which represents heterozygous variants missing from the assembly</p></caption><graphic xlink:href="13059_2020_2134_Fig2_HTML" id="MO2"/></fig></p>
      <p id="Par11">Assuming no serious biases in the read set, a clean spectra-cn plot is a necessary, but not sufficient, condition of assembly quality. Quoting KAT author Bernardo Clavijo “if your spectra look right, your assemblies could still be wrong, but if your spectra look wrong your assemblies can’t be right.” That is to say, certain structural errors may not be reflected by the spectra, but any conflict with the copy numbers of the read set indicate assembly problems. The k-mers found only in the read set (black) at low frequency are almost always indicative of sequencing error in the read set; however, higher-frequency k-mers found only in the read set indicate missing sequences in the assembly (e.g., black k-mers within the 1- or 2-copy peaks). Likewise, any k-mers with a higher copy number in the assembly than would be predicted by the read set are indicative of artificial duplications in the assembly, e.g., see the 2-copy k-mers appearing three times in the Canu assembly shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>e.</p>
      <p id="Par12">The bar at the origin of the plots represents k-mers found only in the assembly. From these k-mers, we can estimate an assembly consensus quality value (QV), which represents a log-scaled probability of error for the consensus base calls (<xref rid="Sec10" ref-type="sec">Methods</xref>). Higher QVs indicate a more accurate consensus, where Q30 corresponds to 99.9% accuracy, Q40 to 99.99%, etc. The trio-binned assembly has QV scores of 35~36 for each haploid assembly and 35.7 for the combined version. The FALCON-Unzip assembly has a similar QV score of 35~38 for each haplotype and 36 for the combined version. The error k-mer bar for Canu is much higher than the other two diploid assemblies, as we omitted signal-level polishing [<xref ref-type="bibr" rid="CR34">34</xref>] from this assembly to show an intermediate assembly product. The estimated QV for this assembly is 29.3 (Table <xref rid="Tab2" ref-type="table">2</xref>).</p>
      <p id="Par13">To better visualize the k-mer distribution by each copy number found in an assembly, we also provide unstacked versions of the spectra-cn histograms (Fig. <xref rid="Fig1" ref-type="fig">1</xref>c–e). The 1-copy (heterozygous) k-mers appear once in the combined TrioCanu assemblies (red), and 2-copy k-mers twice (blue) as expected (Fig. <xref rid="Fig1" ref-type="fig">1</xref>c). The partially phased FALCON-Unzip assembly shows a similar distribution to TrioCanu (Fig. <xref rid="Fig1" ref-type="fig">1</xref>d), indicative of good k-mer completeness. The lower fraction of 2-copy k-mers found three times in the assembly (green hump under the 2-copy peak) indicates fewer false duplications in the TrioCanu compared to FALCON-Unzip and Canu.</p>
      <p id="Par14">When generating the same spectrum on the mixed-haplotype Canu assembly (Fig. <xref rid="Fig1" ref-type="fig">1</xref>e), we can see the assembly has only partially assembled both haplotypes and there is a higher fraction of k-mers missing from the assembly (black). In addition, the assembly has artificial duplications inflating the assembly size. The plot also shows fewer 2-copy k-mers (blue peak) compared to the other assemblies, and a significant fraction of 2-copy k-mers appearing only once in the assembly (second red peak), suggesting the mixed-haplotype assembly has partially collapsed the haplotypes. Based on the number of 2-copy k-mers found twice in the assembly, we estimate 42.7 Mbp of homozygous sequence remains un-collapsed, typically at the boundary of heterozygous and homozygous alleles. This partial separation is also evident in the higher number of k-mers appearing three (green), four (purple), and more (yellow) times in the assembly, representing 10.8 million artificially duplicated k-mers that would need to be identified and removed to form a fully collapsed, haploid assembly. This example highlights the benefits of the TrioCanu and FALCON-Unzip approaches for this heterozygous genome. Additional processing with a tool such as purge_dups [<xref ref-type="bibr" rid="CR35">35</xref>] would be required to convert Canu’s mixed haplotypes into a pseudo-haplotype.</p>
      <p id="Par15">The spectra-cn plots can also be useful for evaluating haploid assemblies, e.g., of a single haplotype from a diploid genome. When plotting the same k-mer spectrum on one haplotype (“Col” in this case), we can see both 1-copy and 2-copy k-mers are now observed just once in the assembly (Fig. <xref rid="Fig1" ref-type="fig">1</xref>f, red histogram). This is because the read set represents the full diploid genome, while the assembly isolates a single haplotype. The usual 1-copy peak is now exactly half the size and perfectly overlaps with a peak of missing k-mers (black) that belong to the other haplotype (“Cvi”). In comparison, the pseudo-haplotype FALCON-Unzip primary and alternate assemblies (Fig. <xref rid="Fig1" ref-type="fig">1</xref>g. h) show imbalanced peaks, with more assembly k-mers appearing in both the 1- and 2-copy peaks than expected. This suggests that the FALCON-Unzip is erroneously including sequences from both haplotypes into the primary pseudo-haplotype. A similar portion of 1-copy k-mers are missing from the alternate assembly (imbalanced red and black peaks), suggesting that the alternate haplotype is missing some heterozygous variants.</p>
    </sec>
    <sec id="Sec4">
      <title>Assembly spectrum</title>
      <p id="Par16">In the above FALCON-Unzip pseudo-haplotype example (Fig. <xref rid="Fig1" ref-type="fig">1</xref>g, h), it is possible to infer that the missing sequences in the alternate assembly are likely found in the primary assembly. However, if there are shared sequences between the two assemblies, it is difficult to know the exact sequence composition. To better address this question, we introduce a new method to show the shared and specific k-mers in each assembly (spectra-asm), instead of showing the overall copy-numbers (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). This plot is helpful for measuring diploid assembly completeness as it shows the fraction of k-mers specific to both the primary and alternate assemblies. For example, a perfectly assembled diploid genome is expected to have a balance of k-mers specific to each haplotype representing the heterozygous alleles (exceptions to this include sex chromosomes of different sizes). The spectra-asm of the TrioCanu combined assembly (Fig. <xref rid="Fig2" ref-type="fig">2</xref>a) shows such an example, where 1-copy k-mers are specific to each haplotype assembly (red and blue), and the 2-copy k-mers are shared by both assemblies (green). In comparison, the FALCON-Unzip assembly is imbalanced, with more 1-copy and 2-copy k-mers in the primary assembly than expected (Fig. <xref rid="Fig2" ref-type="fig">2</xref>b). This imbalance is also evident from Merqury’s k-mer completeness metrics for the primary and alternate assemblies (Table <xref rid="Tab2" ref-type="table">2</xref>, completeness “all”). By stacking the histograms, we can confirm the primary assembly contains all the missing k-mers from Fig. <xref rid="Fig1" ref-type="fig">1</xref>h in the 2-copy peak. Compared to TrioCanu and FALCON-Unzip, Canu does not partition its output into primary and alternates, and so k-mers from both haplotypes are present in the combined assembly. However, the spectra-asm plot shows a few 1-copy k-mers are missing from the assembly (Fig. <xref rid="Fig2" ref-type="fig">2</xref>c). This is in concordance with the lower k-mer completeness score in the Canu assembly (95.7%) compared to the other diploid assemblies (98.3 and 97.8%, Table <xref rid="Tab2" ref-type="table">2</xref>) and indicates that some heterozygous variants are missing, perhaps as a result of the low-quality, unpolished consensus.</p>
    </sec>
    <sec id="Sec5">
      <title>Haplotype-specific k-mers (hap-mers) from trios</title>
      <p id="Par17">We define a “hap-mer” as a haplotype-specific k-mer that appears exclusively, one or more times, on a single haplotype of the genome. When parental genomes are available, we can use inheritance to estimate a set of hap-mers for the child and evaluate haplotype completeness of the assembly. Merqury identifies hap-mers as the set of inherited, parental-specific k-mers (Fig. <xref rid="Fig3" ref-type="fig">3</xref>a). Using the parental-specific markers alone may be sufficient for many cases; however, we have found it useful to specifically consider the inherited markers, as only half of the parental specific k-mers are inherited and the non-inherited markers may match an erroneous k-mer in the assembly by chance. Note, this is still only an estimate of the true set of hap-mers in the child’s genome, which can also be affected by de novo variants or heterozygous variants that were differentially inherited from the parents. We have implemented efficient k-mer set operations (union, intersection, subtraction, etc.) within Meryl for computing hap-mers and other useful k-mer sets (Fig. <xref rid="Fig3" ref-type="fig">3</xref>b, <xref rid="Sec10" ref-type="sec">Methods</xref>). For the <italic>A. thaliana</italic> F1 hybrid genome, we identified hap-mers directly from the genomes of the parental strains. K-mers were grouped based on their presence in the F1 reads alone, the maternal haplotype, the paternal haplotype, or both (Fig. <xref rid="Fig3" ref-type="fig">3</xref>c). Because of the high heterozygosity of the F1 (estimated at 0.99% by GenomeScope [<xref ref-type="bibr" rid="CR36">36</xref>]), many of the F1’s k-mers are hap-mers. A human genome, in comparison, has relatively fewer hap-mers compared to all k-mers in the 1- and 2-copy peaks, with most of the k-mers shared between both haplotypes (Fig. <xref rid="Fig3" ref-type="fig">3</xref>d).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Merqury set operations for generating haplotype-specific hap-mers and reliable k-mers. <bold>a</bold> Venn diagram of maternal, paternal, and child k-mer sets. Inherited haplotype-specific k-mers (hap-mers) are estimated from the parental and child k-mer sets. Roughly half of the parental-specific k-mers are inherited by a child. <bold>b</bold> Set operation examples used in Meryl to compute hap-mers and other k-mer sets. <bold>c</bold>, <bold>d</bold> Stacked k-mer multiplicity of the child’s read set, colored by inheritance. K-mers are colored by maternal (red) paternal (blue) and shared between parents (green). K-mers only seen in the child’s reads (black) are mostly from low-copy sequencing errors or k-mers arising from de novo variants in the child. Reliable k-mer thresholds used for generating completeness scores for all k-mers (black) and hap-mers (red and blue) are marked by dashed lines</p></caption><graphic xlink:href="13059_2020_2134_Fig3_HTML" id="MO3"/></fig></p>
    </sec>
    <sec id="Sec6">
      <title>Evaluating phasing completeness with hap-mers</title>
      <p id="Par18">Hap-mers are used to determine phase blocks in Merqury, where a block is defined to be a consistent set of markers originating from the same haplotype. To account for minor base-level errors in the assembly, we do allow some short-range switches to occur within a block, so long as the phase switches back shortly thereafter (Fig. <xref rid="Fig4" ref-type="fig">4</xref>a). A benefit of this k-mer approach is that Merqury does not need to rely on the phase blocks as identified by the assembler or a reference variant callset and can quickly compute the blocks on each assembly directly using only the observed haplotype markers. Applying this method to the TrioCanu assembly reported NG50 phase block sizes of 3.6 Mbp and 5.5 Mbp with 0.3% per-block switch rate when allowing at most 100 consecutive switches within 20 kbp (Fig. <xref rid="Fig4" ref-type="fig">4</xref>b). The FALCON-Unzip assembly has slightly shorter phase block sizes of 3.1 Mbp and 2.5 Mbp with a similar switch error rate of 0.3%. The Canu assembly had more frequent long-range switches among haplotypes, resulting in NG50 phase blocks of 100 kbp.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Merqury hap-mer plots for evaluating haplotype phasing. <bold>a</bold> Example of phase blocks and switches. Blue and red bars are paternal or maternal hap-mers found in the assembly. A phase block is defined by at least two hap-mers (markers) from the same haplotype. Short-range switches are allowed in between markers, in defined ranges. Two consecutive red markers within a certain range are marked as short-range switches and counted for switch errors in block 1. As the red markers are consecutively found over a certain range, or in numbers above a certain threshold, a separate block is formed. Each switch between blocks is counted as a long-range switch. <bold>b</bold> Phase block statistics of the haploid assemblies with switch errors, allowing at most 100 switches within 20 kbp. <bold>c</bold> Hap-mer blob plot of the TrioCanu assembly. Red blobs represent Col haplotype contigs, while blue blobs are the Cvi haplotype. Blob size is proportional to contig size, and each blob/contig is plotted according to the number of contained Col (<italic>x</italic> values) and Cvi (y value) hap-mers. Col-specific k-mers are found in the Col assembly with almost no Cvi-specific k-mers, while Cvi k-mers are found in the Cvi assembly with almost no Col k-mers. <bold>d</bold>, <bold>e</bold> Blob plots for FALCON-Unzip and Canu assemblies show that most contigs are a mix of sequences from both haplotypes, but FALCON-Unzip preserves phase within its alternate contigs, as designed. <bold>f</bold> Phase block NG* plots of the haplotype resolved Col (left) and Cvi (right) assembly, sorted by size. <italic>X</italic>-axis is the percentage of the genome size (*) covered by phase blocks of this size or larger (<italic>Y</italic>-axis). Blocks from the wrong haplotype are very small and almost entirely absent. <bold>g</bold>, <bold>h</bold> Phase block NG* plot of the <bold>g</bold> FALCON-Unzip and <bold>h</bold> Canu assemblies. Col and Cvi phase blocks are distributed evenly, as is typical for pseudo-haplotype assemblies. <bold>i</bold>–<bold>k</bold> Phase block and contig NG* plots show the relative continuity of <bold>i</bold> TrioCanu, <bold>j</bold> FALCON-Unzip, and <bold>k</bold> Canu assemblies. Phase block sizes are similar to the contig sizes in <bold>i</bold>. Phase blocks are much shorter than the contigs in <bold>k</bold>, because of the frequent haplotype switches in the contigs</p></caption><graphic xlink:href="13059_2020_2134_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par19">Visualizing hap-mer presence in each haplotype assembly is also useful to detect overall phase consistency. When counting Col- and Cvi-specific k-mers in contigs of the TrioCanu assembly (Fig. <xref rid="Fig4" ref-type="fig">4</xref>c), each contig was successfully separated by haplotype as expected. That is, the Col markers were observed in the Col haplotype assembly, with almost no contaminating Cvi markers, and vice versa. The count of the found k-mers can be used as the <italic>x</italic>- and <italic>y</italic>-axis when plotting each contig as a blob. The blob is colored by the origin of the assembly, with the size being relative to the contig size. A haplotype resolved assembly with almost no haplotype switches is expected to have all blobs close to either one of the axes, with the colors matching the corresponding haplotype of the assembly. The FALCON-Unzip alternate contigs maintain haplotype consistency (Fig. <xref rid="Fig4" ref-type="fig">4</xref>d), whereas the primary pseudo-haplotype contigs contain a mixture of k-mers from both haplotypes. The Canu assembly mixes haplotypes in all but the smallest contigs (Fig. <xref rid="Fig4" ref-type="fig">4</xref>e) and would require partitioning into primary and alternate contig sets using a post-processing tool such as purge_dups [<xref ref-type="bibr" rid="CR35">35</xref>].</p>
      <p id="Par20">When plotting phase blocks sorted by size, the blocks originating from the wrong haplotype were very small and almost negligible in the TrioCanu assembly (Fig. <xref rid="Fig4" ref-type="fig">4</xref>f). In contrast, the phase blocks were highly mixed in the pseudo-haplotype assemblies, with the larger contigs being more likely to contain markers from both haplotypes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>g, h). Plotting the contig and block sizes together shows that the trio-binned phase blocks are very similar in size to the trio-binned contigs (Fig. <xref rid="Fig4" ref-type="fig">4</xref>i). In comparison, the phase blocks were shorter than the contigs in the FALCON-Unzip assemblies (Fig. <xref rid="Fig4" ref-type="fig">4</xref>j), showing relatively good phasing performance. The phase blocks were much shorter in the Canu contigs, indicating frequent block switches between haplotypes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>k) since Canu does not attempt to preserve long-range phasing.</p>
      <p id="Par21">Another useful feature in Merqury is that all hap-mers, erroneous k-mers, and phase blocks can be visualized as genome tracks along the assembly. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows an example of a 60-kbp region in the mixed-haplotype Canu assembly, where haplotypes are observed switching from Cvi (blue) to Col (red), resulting in numerous base errors (gray). This illustrates how failure to separate haplotypes can result in an increased base error, as the two haplotypes are improperly combined into a single consensus sequence resulting in artifactual variants. Two phase blocks (Cvi and Col) were found in this region using the default threshold of 100 consecutive k-mer switches allowed per every 20 kbp. However, phase blocks can be more stringently measured by defining the short-range switch allowance (e.g., 10 per 20 kbp, Fig. <xref rid="Fig5" ref-type="fig">5</xref>, bottom track), resulting in lower NG50 phase block size (100 kbp decreases to 33 kbp). In contrast, the per-block switch error rate decreased from 3.4% to 0.47%, making each block a more reliable haplotype. Note the per-block switch error rate is defined as the fraction of k-mer markers within a block that are assigned to the wrong haplotype, thus accounting for all short-range marker switches in a block.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Example k-mer and phasing tracks provided by Merqury. Hap-mer density is provided in tiled data format (.tdf) browsable with the Integrated Genomics Viewer (IGV) [<xref ref-type="bibr" rid="CR37">37</xref>, <xref ref-type="bibr" rid="CR38">38</xref>]. This figure shows a region where haplotype blocks are switching within one of the Canu contigs. Hap-mer tracks show haplotype switches from Cvi (blue) to Col (red), along with k-mers found only in the assembly (gray), which are likely caused by erroneous consensus bases. Phase blocks (black) are shown for both relaxed (100 consecutive switches allowed per 20 kbp) and strict (10 per 20 kbp) switching thresholds</p></caption><graphic xlink:href="13059_2020_2134_Fig5_HTML" id="MO5"/></fig></p>
    </sec>
    <sec id="Sec7">
      <title>Benchmarking on a human genome (NA12878)</title>
      <p id="Par22">To benchmark Merqury on a large genome, we applied it to the TrioCanu human (NA12878) assembly from Koren et al. [<xref ref-type="bibr" rid="CR10">10</xref>] and estimated the consensus quality as Q31 for each haplotype (Table <xref rid="Tab2" ref-type="table">2</xref>). The alternative variant calling approach reported 2.1 million bases of errors, resulting in a QV estimate of 34.1. However, the mapping-based approach excluded 212.2 Mbp of assembled sequence because of too few (&lt; 3×) or too many (&gt; 600×) aligned reads. We argue that Merqury’s k-mer-based approach is both more efficient and more accurate for evaluating consensus accuracy.</p>
      <p id="Par23">Merqury required only 14.9 CPU h (9.1 h for k-mer counting, 4.7 h for merging, 1.1 h for statistics) to evaluate QVs for both haplotypes. In contrast, the mapping-based QV estimate took 338.3 CPU h (2.2 h for indexing, 308 h for mapping, 12.6 h for merging, 12.8 h for variant calling, and 2.5 h for coverage calculation and QV estimates). By excluding low- and high-coverage regions of the assembly, the mapping-based approach ignores regions of the assembly likely to be enriched for error. For example, low coverage regions can be caused by regions of high error rates that make it difficult to map short reads. High coverage regions are typically caused by repeats that can be collapsed, and therefore incorrect, in the assembly. Thus, a substantial number of errors may be excluded from the accuracy statistics if one considers only the mappable portion of the assembly. This matches with our observation that the mapping-based estimates always overestimate QV compared to the k-mer-based approach (Table <xref rid="Tab2" ref-type="table">2</xref>).</p>
      <p id="Par24">Exact k-mer counting is currently the most resource-intensive step of Merqury, requiring a maximum 21 GB of memory using 25.5 GB of disk space on NA12878 (Table <xref rid="Tab3" ref-type="table">3</xref>). While this step can be parallelized across multiple nodes and cores, QV statistics can be also estimated from subsampled k-mers with lower memory and disk requirements using Mash Screen [<xref ref-type="bibr" rid="CR39">39</xref>]. Because Merqury’s QV estimation is based on Mash’s k-mer containment score (<xref rid="Sec10" ref-type="sec">Methods</xref>), the Meryl and Mash counting methods are interchangeable. In comparison to Meryl, Mash streams sequencing reads from disk and compares them against only a small subset of k-mers in the assembly. This avoids the need for a large table of k-mers but at the same time ignores copy number information. As a result, we observed that Mash QV estimates were slightly lower than exact counting (Meryl) for each haplotype, and even lower when both haplotypes were combined (Table <xref rid="Tab2" ref-type="table">2</xref>). This is because the shared k-mers between the two haplotype assemblies are considered only once by Mash, resulting in an underestimate of the QV score (e.g., if a 2-copy k-mer appears in just one haplotype, it is considered “correct” by Mash). The Mash approach also cannot investigate positional base errors (Fig. <xref rid="Fig5" ref-type="fig">5</xref>) and many of the other analyses presented here but is provided as an alternative to Meryl for QV estimation in cases where disk and memory resources are limited.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Merqury runtime, memory, and disk requirements for QV estimation in a human genome</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="2"/><th colspan="3">Merqury</th><th>Mash</th></tr><tr><th>Count</th><th>Union-sum</th><th>QV</th><th>QV</th></tr></thead><tbody><tr><td><bold>CPUs × nodes</bold></td><td>32 × 24</td><td>48 × 1</td><td>24 × 1</td><td>24 × 1</td></tr><tr><td><bold>Wall clock time</bold></td><td>6 m 52 s/node</td><td>7 m 43 s</td><td>14 m 13 s</td><td>3 h 36 m 17 s</td></tr><tr><td><bold>CPU time</bold></td><td>9.1 h</td><td>4.7 h</td><td>1.1 h</td><td>19.0 h</td></tr><tr><td><bold>Memory</bold></td><td>21.2 G</td><td>7.0 G</td><td>10.56 G</td><td>2.6 G</td></tr><tr><td><bold>Storage</bold></td><td>90 G (fastq.gz)</td><td>N/A</td><td>48 G</td><td>90 G (fastq.gz)</td></tr><tr><td><bold>Intermediates</bold></td><td>1.8 G × 24</td><td>48 G</td><td>25.5 G</td><td>23.1 M</td></tr></tbody></table><table-wrap-foot><p>All statistics are for the diploid (maternal, paternal, and combined) assembly of the human genome NA12878. Merqury QV estimates are generated from the full k-mer databases and use exact k-mer counting, whereas Mash QV estimates are generated by streaming all reads against a MinHash sketch of the assembly using Mash Screen. Merqury’s Count and Union-sum steps count all k-mers in the reads, while the QV estimation counts k-mers in the assembly and compares these to the read counts. Mash’s QV estimation creates a k-mer sketch for the assembly and streams all reads against the sketch. Results are totaled over three QV operations (maternal, paternal, and combined). Runtimes were measured on Intel(R) Xeon(R) Gold 6140 CPU, with 2.30GHz. Storage requirements represent gzipped FASTQ files for counting and QV (Mash), and a binary database for QV (Meryl)</p><p><italic>h</italic> hours, <italic>m</italic> minutes, <italic>s</italic> seconds, <italic>G</italic> gigabytes</p></table-wrap-foot></table-wrap></p>
      <p id="Par25">We also compared CPU time and maximum memory used by Merqury and KAT comp to generate the same spectra-cn plots for the TrioCanu assembly of NA12878. Here, we compared Merqury and KAT comp for a single haploid assembly (maternal) and for the diploid assembly, which includes the maternal, paternal, and combined haplotype assemblies (Table <xref rid="Tab4" ref-type="table">4</xref>). When run on the haploid assembly, Merqury was able to generate a spectra-cn plot and all other evaluation metrics using half the memory (21.2 GB vs 44.1 GB) and comparable runtime to KAT, which generates only a spectra-cn plot (22.5 CPU h vs 22.4 CPU h). Merqury runtime includes the construction of a k-mer count database of the reads, which must only be generated once. Thus, when using a pre-built database, the run time requirement drops by more than half (8.7 CPU h per assembly). In comparison, KAT must recount k-mers in the reads for each spectra-cn plot, and as a result, the runtime of KAT triples to 63.0 CPU h when evaluating the diploid assembly. Merqury utilizes efficient set operations on k-mer databases, allowing it to count k-mers in each haploid assembly only once and merges them internally to produce the k-mers of the combined assembly. The diploid assembly can be analyzed in 32.5 CPU h, or 19.7 CPU h with a pre-built database, including the generation of Merqury’s additional quality and phasing metrics.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Runtime and memory comparison between Merqury and KAT comp</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Assembly</th><th colspan="4">Haploid (maternal)</th><th colspan="4">Diploid (maternal, paternal, and combined)</th></tr><tr><th>Compute</th><th colspan="2">CPU (h)</th><th colspan="2">Max mem (GB)</th><th colspan="2">CPU (h)</th><th colspan="2">Max mem (GB)</th></tr><tr><th>Function</th><th>Merqury</th><th>KAT</th><th>Merqury</th><th>KAT</th><th>Merqury</th><th>KAT</th><th>Merqury</th><th>KAT</th></tr></thead><tbody><tr><td>Count <italic>k</italic>-mers in reads</td><td>13.8</td><td rowspan="2">22.4</td><td>21.2</td><td rowspan="2">44.1</td><td>13.8</td><td rowspan="2">63.0</td><td>21.2</td><td rowspan="2">44.1</td></tr><tr><td>Spectra-cn</td><td rowspan="2">3.9</td><td rowspan="2">10.1</td><td rowspan="2">9.7</td><td rowspan="2">10.6</td></tr><tr><td>Spectra-asm, QV, Completeness</td><td>–</td><td>–</td><td>–</td><td>–</td></tr><tr><td>Spectra-hap</td><td>2.0</td><td>–</td><td>1.5</td><td>–</td><td>3.4</td><td>–</td><td>3.2</td><td>–</td></tr><tr><td>Blobs, phase block, switch error</td><td>2.8</td><td>–</td><td>10.3</td><td>–</td><td>5.6</td><td>–</td><td>8.1</td><td>–</td></tr><tr><td>Total</td><td>22.5</td><td>22.4</td><td>21.2</td><td>44.1</td><td>32.5</td><td>63.0</td><td>21.2</td><td>44.1</td></tr></tbody></table><table-wrap-foot><p>All statistics are from the haploid and diploid human genome NA12878 assembly. KAT comp was run once and three times to generate the equivalent spectra-cn plots generated with Merqury. In addition to the spectra-cn plots, Merqury simultaneously generates spectra-asm, QV and k-mer completeness statistics, which are not available in KAT. Runtimes were measured on Intel(R) Xeon(R) Gold 6140 CPU, with 2.30 GHz, using a maximum of 24 cores. CPU time is measuring runtime assuming a single core for comparison. Maximum memory footprint is reported in Max mem</p></table-wrap-foot></table-wrap></p>
      <p id="Par26">Next, we evaluated k-mers for NA12878. The hap-mer spectrum of NA12878 revealed a higher fraction of shared k-mers in the 1-copy peak (Fig. <xref rid="Fig3" ref-type="fig">3</xref>d), indicating that some heterozygous variants in the child are shared by both parents. We do not see such a strong effect in <italic>A. thaliana</italic>, because the parents were heavily inbred and contained few heterozygous variants of their own. In contrast, the <italic>A. thaliana</italic> F1 hybrid was deliberately outbred, which is evident by the dramatically taller 1-copy peak versus NA12878 (0.99 vs. 0.12% heterozygosity).</p>
      <p id="Par27">Haplotype-specific k-mers are convenient to obtain haplotype precision (PPV) and recall (completeness) statistics based on how many of the expected parental k-mers are observed in the child’s haplotype-resolved diploid assembly (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). To demonstrate, we built genomic k-mer databases for NA12878 and her parents, totaling 18.4 and 19.9 million inherited hap-mers for the paternal and maternal haplotypes, respectively. When comparing to the haplotype-resolved assemblies, the maternal haplotype assembly recovered 90.7% of the maternal hap-mers (Table <xref rid="Tab2" ref-type="table">2</xref> and Fig. <xref rid="Fig6" ref-type="fig">6</xref>a), and the paternal assembly recovered 91.0% of the paternal hap-mers (Table <xref rid="Tab2" ref-type="table">2</xref> and Fig. <xref rid="Fig6" ref-type="fig">6</xref>b). Likewise, by considering the other haplotype’s markers as false positives (i.e., paternal hap-mers found in the maternal assembly), the precision of the maternal and paternal assemblies was 99.1 and 98.8%, respectively, with only 160~200 markers appearing in the incorrect haplotype (Table <xref rid="Tab2" ref-type="table">2</xref>, PPV values). This evaluation excludes all k-mers found only in the assembly (errors), which if considered false positives, would further lower the precision.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Evaluating haplotype completeness for diploid assemblies using Merqury. Spectra-cn plots of the maternal and paternal assemblies of the TrioCanu NA12878 assembly are displayed as a confusion matrix. <bold>a</bold> Hap-mer spectra-cn plot of the maternal assembly. All maternal hap-mers are expected to be found in the maternal (top left), with no paternal hap-mers (top right). Any maternal hap-mers not found in this assembly are missing hap-mers (top left, black). Paternal hap-mers (top right, red) are false positive phasing errors. <bold>b</bold> Hap-mer spectra-cn plot of the paternal assembly. This time, no maternal hap-mers should be seen (bottom left), and only paternal markers are expected to be present (bottom right). TP, true positives; FN, false negatives; TN, true negatives; FP, false positives</p></caption><graphic xlink:href="13059_2020_2134_Fig6_HTML" id="MO6"/></fig></p>
      <p id="Par28">To compare Merqury’s results with an alternative approach, we considered an Illumina-based platinum callset for NA12878 [<xref ref-type="bibr" rid="CR27">27</xref>] that includes 3.4 million heterozygous SNPs in regions where both haplotype assemblies align to the reference (hg38). Calling SNPs directly from the haplotype assemblies against hg38 recovered 3.2 million variants, or 93.5% sensitivity, which is slightly higher than the Merqury based estimate of ~ 91%. This discrepancy is likely due to Merqury’s ability to measure complex regions of the assembly not easily measurable by a mapping-based analysis. In contrast, the SNP-based measurement of precision was only 86.1%, likely due to the low base accuracy (Q31) of the assemblies, where consensus errors are called as false-positive heterozygous SNPs. Thus, it is important to consider both the k-mer QV and precision estimates when evaluating the accuracy of a diploid assembly.</p>
    </sec>
  </sec>
  <sec id="Sec8">
    <title>Discussion</title>
    <p id="Par29">We have developed Merqury, a reference-free assembly evaluation toolkit based on efficient k-mer-based methods. Merqury builds upon the k-mer spectra ideas of Mapleson et al. [<xref ref-type="bibr" rid="CR17">17</xref>] and introduces novel methods and plots for measuring assembly quality (QV), completeness, and phasing. Using k-mer count spectra, Merqury can reveal copy-number errors in an assembly and accurately measure both assembly completeness and consensus quality. When parental k-mers are available, Merqury can also measure phasing accuracy and haplotype completeness. In addition to validation statistics, Merqury provides a number of graphs for interpreting assembly quality. In the process of developing Merqury, we have also extended Meryl with generalized k-mer counting, querying, and set operations that will be useful for other k-mer-based analyses (Fig. <xref rid="Fig3" ref-type="fig">3</xref>b).</p>
    <p id="Par30">Merqury is able to evaluate assemblies from any sequencing technology and works best when high-accuracy sequencing reads are available from the assembled individual and its parents. This read set serves as an independent validation of the assembly, which is typically based on less-accurate, long-read sequencing. If high-accuracy reads are not available from the assembled individual, read sets from the parents can be used as a replacement for measuring quality values. This assumes all k-mers in the child are found in the parental genomes, ignoring the small fraction of k-mers from de novo mutations in the child. Although we currently recommend using Illumina data for the k-mer-based validation, it may require special library preparation to minimize sequencing biases [<xref ref-type="bibr" rid="CR40">40</xref>–<xref ref-type="bibr" rid="CR42">42</xref>]. We note that Merqury’s methods are general and would be compatible with any reasonable high-accuracy, high-throughput sequencing technology.</p>
    <p id="Par31">Currently, Merqury does not explicitly validate the structural accuracy of an assembly, which is another important factor of assembly quality [<xref ref-type="bibr" rid="CR32">32</xref>]. Although certain mis-assemblies, such as the systematic collapse of repeats, would be visible from the spectra-cn plots, other types of structural mis-assemblies, such as inversions, could go unnoticed. This is one drawback of Merqury’s k-mer-centric design. However, we have observed that regions of mis-assembly often correlate with a decrease in consensus quality, similar to the haplotype switch example shown in Fig. <xref rid="Fig5" ref-type="fig">5</xref>. This information can be used to draw attention to unreliable regions of the assembly that can be later validated using orthogonal approaches.</p>
    <p id="Par32">Hap-mers are currently computed by a simple set operation, similar to trio-binning [<xref ref-type="bibr" rid="CR10">10</xref>]. A higher portion of hap-mers are identifiable when the parents are divergent, with minimal shared ancestry. Our hap-mer spectrum plots (Fig. <xref rid="Fig3" ref-type="fig">3</xref>c, d) show the 1-copy haplotype markers that are specific to each parent, which may not be as prevalent for genomes of low heterozygosity, such as humans. Merqury is also extensible to polyploid genomes for most of the evaluations. However, for the phasing measurements, Merqury currently reports at most two parental (or ancestral) haplotypes. In the case of a polyploid genome, Merqury’s reported phase blocks would reflect inheritance from a single parent, but not necessarily the correct phasing of homologous chromosomes (e.g., two homologous chromosomes inherited from the same parent would be indistinguishable). To accurately measure the phasing of homologous chromosomes in a polyploid genome would require a different method for identifying hap-mers that does not rely solely on parental inheritance. To support alternative k-mer classification methods (e.g., Hi-C, Strand-seq, linked-reads), Merqury is designed to receive any pre-computed hap-mer set as input.</p>
    <p id="Par33">We argue that Merqury’s k-mer-based method provides better haplotype completeness estimates, because it does not rely on a reference genome. Mapping to a reference can be biased by mis-mapping to repetitive or low-quality regions of the assembly. Moreover, k-mers naturally capture heterozygous insertion and deletion variants and are thus immune to the problems of calling these types of variants with a reference mapping approach. For example, consortiums such as the GA4GH exclude all variant calls within complex, repetitive regions of the genome [<xref ref-type="bibr" rid="CR26">26</xref>]. In contrast, k-mers inherently capture genetic context, regardless of the structural complexity surrounding them in the genome. Moreover, k-mers are especially robust for evaluating sequences in highly diverged sequences, where mapping-based approaches cannot map reads to call variants.</p>
    <p id="Par34">Lastly, Merqury provides an efficient way of determining phase blocks in diploid assemblies. In the past, phase blocks were defined based on heterozygous SNPs, measured by aligning each haplotype to one another [<xref ref-type="bibr" rid="CR9">9</xref>] or by mapping to a reference genome [<xref ref-type="bibr" rid="CR8">8</xref>]. These alignment-based approaches may not consider the full genome when the identity between the two haplotypes is lower than the alignment threshold, or the alignment is confused by genomic repeats. Moreover, a reference genome may not represent the entire haplotype of an assembled individual, thereby omitting haplotype-specific sequences from the analysis. The phase blocks measured by Merqury are generated regardless of the haplotype being assembled and provide more reliable phasing information for allele-specific studies.</p>
  </sec>
  <sec id="Sec9">
    <title>Conclusions</title>
    <p id="Par35">Merqury provides a suite of efficient methods for assessing the quality, completeness, and phasing of genome assemblies using a reference-free, k-mer-based approach. Merqury extends the spectra-cn functionality of KAT and introduces novel features such as spectra-asm, spectra-hap, and blob plots; assembly QV and completeness measurements, and the first reference-free approach for measuring assembly phase blocks using parental k-mers. The included Meryl k-mer counter also provides fast and flexible methods for k-mer set manipulation. Compared to traditional assembly metrics, such as N50 contig size, Merqury provides a much broader evaluation of assembly quality and we recommend reporting these metrics along with any new genome assembly.</p>
  </sec>
  <sec id="Sec10">
    <title>Methods</title>
    <sec id="Sec11">
      <title>Counting k-mers with Meryl</title>
      <p id="Par36">Meryl is a tool for counting and working with sets of k-mers that was originally developed for use in the Celera Assembler [<xref ref-type="bibr" rid="CR43">43</xref>] and has since been migrated and maintained as part of Canu [<xref ref-type="bibr" rid="CR33">33</xref>]. Here we have improved Meryl’s efficiency and extended it to support a variety of functions useful for k-mer-based assembly validation. A set of k-mers and their associated counts is termed a k-mer database. The count is the number of times a k-mer occurs in some collection of sequences. The k-mer database is stored in sorted order, similar to words in a dictionary. Meryl comprises three modules: one for generating k-mer databases, one for filtering and combining databases, and one for searching databases. All Meryl operations are exact (i.e., do not result in false positives or negatives).</p>
      <p id="Par37">The counting module uses two different algorithms: one for k-mers up to size 16 and the other for k-mers up to size 64. For small k-mers, Meryl directly counts the number of times each k-mer occurs in the input sequences. An array of 4<sup>k</sup> 16-bit integers is allocated. Each k-mer is converted to an integer index into the array, and the cell for that k-mer is incremented. When any cell exceeds the maximum possible value that can be represented, the width of the array is extended by allocating a supplementary array of 4<sup>k</sup> bits. For large k-mers, Meryl generates lists of all the k-mers present in the input sequences, sorts each list, then scans each to determine how many times a specific k-mer occurs. Each k-mer is split into a prefix and a suffix. The prefix is used to select a list, and only the suffix is added. A trade-off is made between a small prefix (which would result in only a few lists, each storing many suffixes) and a large prefix (which would result in many lists). As we do not know how big each list will be, the lists must be able to grow as needed. Each list is therefore an array of memory blocks where each block can store a few thousand k-mers. While counting, the memory usage of the lists is tracked, and if a user-supplied memory limit is reached, the lists are sorted, k-mers are counted, and output written to an intermediate database. After all k-mers are processed, the intermediate, sorted databases are efficiently merged into one.</p>
      <p id="Par38">With one or more databases on disk, Meryl can filter or combine k-mers to create new databases. Each database is stored in 64 independent pieces, and each piece can be processed in parallel. Within each piece, k-mers are in the same order; thus, all set operations require linear time and constant space. Meryl can filter a database by count (e.g., less-than, greater-than or equal-to some user-supplied constant), or by a fraction of distinct k-mers in a database (e.g., the most common 5% of the k-mers). It can modify the count of every k-mer in a database by a constant (e.g., add 1, subtract 1, multiply by 2). Meryl can also output the union or intersection of multiple databases, setting the count of a k-mer to the minimum, maximum, sum of all copies of the k-mer, or as the count of the first database. It can output the difference of databases (e.g., the k-mer occurs only in the first database) or the symmetric difference (e.g., the k-mer occurs in exactly one database). Conveniently, any number of these operations can be combined into one command, using a reverse-polish-notation inspired format. The following example invocations are used in Merqury:
<list list-type="order"><list-item><p id="Par39">Write the k-mers that occur in both db1.meryl and db2.meryl to db3.meryl. Set the count of each output k-mer to the sum of the counts in the input k-mers:</p><p id="Par40">meryl union-sum db1.meryl db2.meryl output db3.meryl</p></list-item><list-item><p id="Par41">Output k-mers that occur in both db4.meryl and db5.meryl, additionally requiring the k-mer in db5.meryl to be unique. The count of the output k-kmer is set to the count of the k-mer in the first input to the intersect operation, namely db4.meryl:</p><p id="Par42">meryl output db6.meryl \</p><p id="Par43">intersect \</p><p id="Par44">db4.meryl \</p><p id="Par45">[ equal-to 1 db5.meryl ]</p></list-item><list-item><p id="Par46">For each k-mer in asm.fasta, output the (0-based) coordinate of the kmer in the sequence, the forward and reverse k-mer sequences, and the count of the k-mer in db7.meryl:</p><p id="Par47">meryl-lookup -dump -sequence asm.fasta -mers db7.meryl</p></list-item></list></p>
      <p id="Par48">Meryl includes a C++ API to extend its functionality. For example, random lookups can be added using either the simple existence of a k-mer in a database or the count associated with a k-mer. On the command line, lookups can return the number of k-mers a sequence shares with a database, a list of each k-mer in a sequence annotated with the count the k-mer has in a database, or a filtered list of input sequences based on the presence or absence of k-mers in the database.</p>
    </sec>
    <sec id="Sec12">
      <title>Evaluating assemblies with Merqury</title>
      <sec id="Sec13">
        <title>Copy number spectrum (spectra-cn plot)</title>
        <p id="Par49">Given a genome size <italic>G</italic> and tolerable collision rate <italic>p</italic>, an appropriate <italic>k</italic> can be computed as <italic>k</italic> = log<sub>4</sub> (<italic>G</italic>(1 − <italic>p</italic>)/<italic>p</italic>) [<xref ref-type="bibr" rid="CR44">44</xref>]. However, alternative values of <italic>k</italic> may be desirable for different scenarios, e.g., increasing <italic>k</italic> has the effect of increasing the relative fraction of 1-copy k-mers, which may be useful for genomes with low heterozygosity, but this also increases the fraction of erroneous k-mers. Decreasing <italic>k</italic> reduces the fraction of erroneous k-mers but increases the fraction of repetitive k-mers. Once an appropriate size of <italic>k</italic> is determined (typically 18~21), we count the canonical k-mers observed in the assembly and in the accurate, whole-genome read set. A typical k-mer spectrum for a heterozygous diploid genome consists of two primary peaks, one representing k-mers that are 1-copy in the diploid genome (heterozygous, on a single haplotype) and one representing those that are 2-copy in the diploid genome (homozygous, on both haplotypes or two copies on one haplotype) (Fig. <xref rid="Fig1" ref-type="fig">1</xref>a). The 2-copy k-mers appear with a frequency approximately equal to the average depth of sequencing coverage, where the 1-copy k-mers appear with frequency approximately equal to half the sequencing coverage. If a genome is entirely homozygous, only the 2-copy peak may appear, and if the genome is extremely heterozygous, only the 1-copy peak may appear. With sufficient sequencing coverage (to separate the peaks along the axis), and a proper choice of <italic>k</italic>, both peaks are visible for most genomes. Using the multiplicity of the k-mer counts, and modeling the k-mer survival rate (i.e., how many k-mers are unaffected by sequencing error), it is possible to predict the size and repeat content of a genome from the k-mer spectrum alone [<xref ref-type="bibr" rid="CR36">36</xref>].</p>
        <p id="Par50">The spectra-cn plot was introduced by Mapleson et al. [<xref ref-type="bibr" rid="CR17">17</xref>], which colors k-mers of the read set by their copy numbers in the assembly. In addition to the original stacked version of the spectra-cn plot (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b), we provide additional options to plot the unstacked copy number spectrum (Fig. <xref rid="Fig1" ref-type="fig">1</xref>c). We have found this style more useful for visually detecting abnormal k-mer copy numbers and their distribution in an assembly.</p>
      </sec>
      <sec id="Sec14">
        <title>Assembly spectrum (spectra-asm plot)</title>
        <p id="Par51">Similar to the spectra-cn analysis, we can color each k-mer in the read set by the assembly in which it is found. This becomes useful when two haploid assemblies are evaluated. This way, we can detect k-mers that are present only in one assembly, k-mers shared in both assemblies, and k-mers not present in the assembly and only found in the read set (Fig. <xref rid="Fig2" ref-type="fig">2</xref>).</p>
      </sec>
      <sec id="Sec15">
        <title>K-mer completeness</title>
        <p id="Par52">We define a “reliable k-mer” as a k-mer that is truly in the genome and unlikely to be caused by sequencing error. With exact k-mer counts, it is easy to filter out low-copy k-mers that are likely to represent sequencing errors. We use the same strategy as Koren et al. [<xref ref-type="bibr" rid="CR10">10</xref>] to find the cutoff. In brief, we take the histogram of the k-mer counts and set the multiplicity (number of times we see the k-mer in the read set) as <italic>x</italic> and counts (number of k-mers with <italic>x</italic> multiplicity) as <italic>y</italic>. When differentiating the histogram, we compute the slopes and the first k-mer multiplicity with a positive slope defines the reliable k-mer threshold. Examples of these cutoffs are shown as dashed lines in Fig. <xref rid="Fig3" ref-type="fig">3</xref>c, d. The k-mer completeness is calculated as the fraction of reliable k-mers in the read set that are also found in the assembly. For repetitive genomes, erroneous read set k-mers can sometimes appear above this threshold due to recurring errors in high-copy repeat families, but this is rare.</p>
      </sec>
      <sec id="Sec16">
        <title>Consensus quality (QV) estimation</title>
        <p id="Par53">We can also use k-mers to estimate the frequency of consensus errors in the assembly. We use a binomial model of k-mer survival and assume all k-mers in the assembly should be found at least once in the read set. Here, we use the containment score from Mash Screen [<xref ref-type="bibr" rid="CR39">39</xref>] to estimate consensus accuracy. In brief, we estimate the probability <italic>P</italic> that a base in the assembly is correct as:
<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ P={\left(\frac{K_{\mathrm{shared}}}{K_{\mathrm{total}}}\right)}^{\frac{1}{\mathrm{k}}} $$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mfenced close=")" open="("><mml:mfrac><mml:msub><mml:mi>K</mml:mi><mml:mtext>shared</mml:mtext></mml:msub><mml:msub><mml:mi>K</mml:mi><mml:mtext>total</mml:mtext></mml:msub></mml:mfrac></mml:mfenced><mml:mfrac><mml:mn>1</mml:mn><mml:mi mathvariant="normal">k</mml:mi></mml:mfrac></mml:msup></mml:math><graphic xlink:href="13059_2020_2134_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par54">where the <italic>K</italic><sub>total</sub> is the total number of k-mers found in an assembly and <italic>K</italic><sub>shared</sub> are the number of shared k-mers between the assembly and the read set. If the read set is assumed to completely cover the genome, any k-mer found only in the assembly (<italic>K</italic><sub>asm</sub> <italic>= K</italic><sub>total</sub>
<italic>− K</italic><sub>shared</sub>) likely reflects a base error in the assembly consensus. Hence, the error rate <italic>E</italic> can be defined as:
<disp-formula id="Equb"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ E=1-P=1-{\left(1-\frac{K_{\mathrm{asm}}}{K_{\mathrm{total}}}\right)}^{\frac{1}{\mathrm{k}}} $$\end{document}</tex-math><mml:math id="M4" display="block"><mml:mi>E</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mfenced close=")" open="("><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:msub><mml:mi>K</mml:mi><mml:mi>asm</mml:mi></mml:msub><mml:msub><mml:mi>K</mml:mi><mml:mtext>total</mml:mtext></mml:msub></mml:mfrac></mml:mrow></mml:mfenced><mml:mfrac><mml:mn>1</mml:mn><mml:mi mathvariant="normal">k</mml:mi></mml:mfrac></mml:msup></mml:math><graphic xlink:href="13059_2020_2134_Article_Equb.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par55">Using this formula, the widely used Phred [<xref ref-type="bibr" rid="CR45">45</xref>] quality score (often denoted as QV) can be computed by treating the <italic>E</italic> as base error probability:
<disp-formula id="Equc"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \mathrm{QV}=-10{\log}_{10}\ E $$\end{document}</tex-math><mml:math id="M6" display="block"><mml:mi>QV</mml:mi><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mn>10</mml:mn><mml:msub><mml:mo>log</mml:mo><mml:mn>10</mml:mn></mml:msub><mml:mspace width="0.25em"/><mml:mi>E</mml:mi></mml:math><graphic xlink:href="13059_2020_2134_Article_Equc.gif" position="anchor"/></alternatives></disp-formula></p>
        <p id="Par56">Note that this QV estimate depends on the coverage and quality of the read set. The assembly QV will be underestimated if the read set does not contain all true k-mers of the genome due to low or heavily biased sequencing coverage. Conversely, the QV may be overestimated if the read set contains a high proportion of false k-mers (e.g., due to the combination of extreme coverage and sequencing error). Lastly, the k-mer survival model assumes both k-mers and errors are independent, but k-mers overlap one another and errors tend to cluster together. As a result, the choice of <italic>k</italic> also affects the QV estimates, with <italic>k</italic> ≈ 21 recommended by Mash based on empirical testing.</p>
      </sec>
      <sec id="Sec17">
        <title>Positions of k-mers for mis-assembly detection</title>
        <p id="Par57">Merqury reports the positions of the k-mers found only in an assembly for further investigation in .bed and .tdf formats that can be loaded into most genome browsers. In addition, the k-mers found in unexpected copy numbers (i.e., false duplications) are also provided as .bed and .tdf files. The format details are described at:</p>
        <p id="Par58">
          <ext-link ext-link-type="uri" xlink:href="https://genome.ucsc.edu/FAQ/FAQformat.html#format1">https://genome.ucsc.edu/FAQ/FAQformat.html#format1</ext-link>
        </p>
        <p id="Par59">
          <ext-link ext-link-type="uri" xlink:href="https://github.com/igvteam/igv/wiki/TDF-Format">https://github.com/igvteam/igv/wiki/TDF-Format</ext-link>
        </p>
      </sec>
    </sec>
    <sec id="Sec18">
      <title>Evaluating phasing completeness with parental genomes</title>
      <sec id="Sec19">
        <title>Haplotype-specific k-mers (hap-mers)</title>
        <p id="Par60">Parental haplotype markers can be obtained directly from the parental or ancestral genomes [<xref ref-type="bibr" rid="CR10">10</xref>]. In brief, distinct k-mers found in only one parent are collected, and the erroneous low-frequency k-mers are filtered out. This filtering strategy relies on the k-mer count histogram, where the cutoff for identifying reliable k-mers is computed as described above. When the child’s short-read data is also available, the inherited haplotype-specific markers can be obtained by intersecting the child’s k-mers with the parental marker sets. This time, we keep the k-mer counts from the child’s reads for further ploidy estimation (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p>
      </sec>
      <sec id="Sec20">
        <title>Hap-mer blob plot</title>
        <p id="Par61">To get a global visual representation of the phasing completeness on assembled sequences, we can count the total number of hap-mers found on each contig or scaffold (Fig. <xref rid="Fig4" ref-type="fig">4</xref>c, d). Here, each axis becomes the number of hap-mers found in a sequence entry (contig or scaffold). Each circle (blob) represents a sequence, the size being relative to the length of the sequence. Sequence bubbles near the diagonal represent mixtures of markers from both haplotypes, while bubbles closer to a haplotype axis are predominately comprised of markers from a single haplotype.</p>
      </sec>
      <sec id="Sec21">
        <title>Phase block statistics and switch error</title>
        <p id="Par62">Whenever a hap-mer switch occurs, Merqury can flag that position in the assembly and output a haplotype block report. This feature is useful for identifying phase blocks from a partially or completely phased assembly such as FALCON-Unzip [<xref ref-type="bibr" rid="CR9">9</xref>], FALCON-Phase [<xref ref-type="bibr" rid="CR12">12</xref>], or Supernova2 [<xref ref-type="bibr" rid="CR4">4</xref>]. Merqury defines a phase block as a continuous sequence with at least two hap-mers originating from the same haplotype (Fig. <xref rid="Fig4" ref-type="fig">4</xref>a). Usually, short-range switches are caused by consensus, rather than phasing, errors. By default, Merqury allows at most 100 hap-mer switches per 20 kbp as short range switches within a phase block. Each unexpected hap-mer found will be counted as a switch error but will not necessarily terminate the phase block. Ideally, when no switches are found, the phase block N50 will be the same as the scaffold N50 and the sum of the phase blocks will be identical to the assembled sequences. In reality, a scaffold often does not end with a haplotype-specific sequence, so the total phase block length is shorter. Trio-binned or haplotype-resolved assemblies are a special case, where the entire haplotype assembly is essentially a single block. Still, in this case, hap-mers from the other haplotype can be counted as switch errors. Merqury also provides an option to restrict phase blocks to contigs and break the blocks at any gap. At the end, Merqury reports the number of switches and total hap-mers on each block along with the switch error rate in order to identify blocks with more frequent switch errors.</p>
      </sec>
      <sec id="Sec22">
        <title>Hap-mer copy number spectrum</title>
        <p id="Par63">The total k-mer spectrum of the assembled individual is also useful for tracking the fates of haplotype-specific k-mers in a diploid assembly. Similar to the overall copy number analysis performed with spectra-cn plots, we can count k-mers in each haplotype assembly and estimate the completeness of haplotype-specific assembled bases compared to the hap-mer sets. For example, by plotting separate histograms for hap-mers of different copy numbers in the assembly (Fig. <xref rid="Fig6" ref-type="fig">6</xref>), we can identify whether the assembly is artificially collapsing or duplicating sequence in each haplotype. If hap-mers appear over (or under) represented by the assembly relative to the read set, it is an indicator of artifactual duplication (or absence) of haplotype-specific sequence. When evaluating a pseudo-haplotype assembly, which is designed to collapse or pick one haplotype as much as possible, we can count the number of hap-mers present in the child’s read set but not present in the pseudo-haplotype assembly and use this to quantify the amount of under-represented haplotype sequence. These missing hap-mers could then be used to identify a set of alternative haplotype reads that were incorrectly excluded from the assembly.</p>
      </sec>
    </sec>
    <sec id="Sec23">
      <title>Assemblies</title>
      <p id="Par64">All TrioCanu assemblies were downloaded from Koren et al. [<xref ref-type="bibr" rid="CR10">10</xref>], available at <ext-link ext-link-type="uri" xlink:href="https://obj.umiacs.umd.edu/marbl_publications/triobinning/index.html">https://obj.umiacs.umd.edu/marbl_publications/triobinning/index.html</ext-link>. The <italic>A. thaliana</italic> F1 FALCON-Unzip assembly was obtained from Chin et al. [<xref ref-type="bibr" rid="CR9">9</xref>]. We generated a Canu assembly to show a typical example of an interim mixed-haplotype assembly that has not been polished or purged of haplotypic duplications. The same Pacific Bioscience reads were used for all three assemblies, obtained from Chin et al. [<xref ref-type="bibr" rid="CR9">9</xref>]<italic>.</italic></p>
      <p id="Par65">The Canu assembly was generated with Canu 1.9 release version using the following command:<disp-quote><p id="Par66">canu -p canu -d athalF1_notrio genomeSize=130m 'corOutCoverage=100' 'batOptions=-dg 6 -db 6 -dr 1 -ca 500 -cp 50' 'batMemory=200' -pacbio-raw *.fastq.gz</p></disp-quote></p>
    </sec>
    <sec id="Sec24">
      <title>Haplotype specific k-mers (hap-mers) for <italic>A. thaliana F1</italic> and NA12878</title>
      <p id="Par67">Appropriate size of k was obtained as k = 18 for the <italic>A. thaliana</italic> F1 with 130~260 Mbp genome size and <italic>k</italic> = 21 for NA12878 with 3.2~6.4 Gbp genome size using $MERQURY/best_k.sh.</p>
      <p id="Par68">As parental Illumina sequencing was not available for this F1, the parental genome assemblies from Chin et al. [<xref ref-type="bibr" rid="CR9">9</xref>] were used to obtain parental specific k-mers. Each assembly from the inbred Col-0 and Cvi-0 lines were downloaded from:</p>
      <p id="Par69"><ext-link ext-link-type="uri" xlink:href="https://downloads.pacbcloud.com/public/dataset/PhasedDiploidAsmPaperData/FUNZIP-PhasedDiploidAssemblies.tgz">https://downloads.pacbcloud.com/public/dataset/PhasedDiploidAsmPaperData/FUNZIP-PhasedDiploidAssemblies.tgz</ext-link>.</p>
      <p id="Par70">Meryl databases for the parental strains were built directly with meryl count k=18 output $hap.meryl $hap.fasta for each haplotype assembly.</p>
      <p id="Par71">The parental Illumina whole-genome sequencing sets for NA12878 were downloaded from the high coverage dataset of the 1000 Genomes Project (NA12891 and NA12892) and combined with Illumina Platinum Genomes Project data from PRJEB3381. Illumina whole-genome sequencing of NA12878 was downloaded from PRJEB3381.</p>
      <p id="Par72">All Meryl databases from sequencing read sets were built with $MERQURY/_submit_build.sh. Once the k-mer databases were built, inherited hap-mers were obtained with $MERQURY/trio/hapmers.sh.</p>
    </sec>
    <sec id="Sec25">
      <title>Merqury on all assemblies</title>
      <p id="Par73">Merqury was run for the <italic>A. thaliana</italic> F1 and NA12878 with the following command line for diploid assemblies, where $hap1 and $hap2 are maternal (mat) and paternal (pat) for the TrioCanu assemblies, and primary (pri) and alternate (alt) for FALCON-Unzip assemblies.<disp-quote><p id="Par74">$MERQURY/_submit_merqury.sh $sample.k21.meryl mat.inherited.meryl pat.inherited.meryl $hap1.fasta $hap2.fasta $asm_name</p></disp-quote></p>
      <p id="Par75">The <italic>A. thaliana</italic> F1 Canu assembly was run with:<disp-quote><p id="Par76">$MERQURY/_submit_merqury.sh $sample.k21.meryl mat.inherited.meryl pat.inherited.meryl canu.contigs.fasta Canu</p></disp-quote></p>
    </sec>
    <sec id="Sec26">
      <title>BUSCO</title>
      <p id="Par77">BUSCO v3 was run on using embryophyta_odb9 for the <italic>A. thaliana</italic> Canu assembly and the combined Col and Cvi TrioCanu assembly with the following commands:<disp-quote><p id="Par78">python run_BUSCO.py -i asm.fasta -o SAMPLE -l embryophyta_odb9 -m genome -c 16 -sp arabidopsis</p></disp-quote></p>
      <p id="Par79">For NA12878, BUSCO was run in the same way, using mammalia_odb9 for the combined TrioCanu maternal and paternal assembly. BUSCO scores for each haplotype of <italic>A. thaliana F1</italic> and NA12878 were obtained from Koren et al. [<xref ref-type="bibr" rid="CR10">10</xref>] Supplementary Table 2.</p>
    </sec>
    <sec id="Sec27">
      <title>QV estimates</title>
      <p id="Par80">CPU time, memory consumption, and disk usage were measured for generating QVs on each haploid assemblies and the combined diploid assembly. A Intel(R) Xeon(R) Gold 6140 CPU @ 2.30 GHz node was used allowing up to 24 CPUs. Detailed node information is available at <ext-link ext-link-type="uri" xlink:href="https://hpc.nih.gov">https://hpc.nih.gov</ext-link>.</p>
      <sec id="Sec28">
        <title>Meryl-based QV</title>
        <p id="Par81">Meryl-based QV estimation to benchmark computing resources was evaluated for the counting (count), merging (union-sum), and QV steps with the following command:<disp-quote><p id="Par82">$MERQURY/eval/qv.sh NA12878.k21.meryl mat.fasta pat.fasta meryl_qv</p></disp-quote></p>
        <p id="Par83">This generates Meryl databases for mat.fasta and pat.fasta, does a union for the databases, and generates QV scores for all three combinations (maternal, paternal, and both).</p>
      </sec>
      <sec id="Sec29">
        <title>Mash-based QV</title>
        <p id="Par84">Mash-based QV estimation was performed using sketch size of 1000000 with the same k-mer size of 21:<disp-quote><p id="Par85">mash sketch -s 1000000 -k $k $asm</p><p id="Par86">mash screen -p $cpus $asm.msh `cat $input_fofn | tr '\n' ' '` &gt; $name.msh.idy</p><p id="Par87">cat $name.msh.idy | awk -v name=$name '{print name"\t"$2"\t"-10*log(1-$1)/log(10)"\t"(1-$1)}' | tr '/' '\t' &gt; $name.msh.qv</p></disp-quote></p>
      </sec>
      <sec id="Sec30">
        <title>Mapping-based QV</title>
        <p id="Par88">The Illumina WGS reads used to build the Meryl database were aligned to both mat.fasta and pat.fasta using BWA [<xref ref-type="bibr" rid="CR46">46</xref>]. Base pair errors were called using FreeBayes [<xref ref-type="bibr" rid="CR47">47</xref>] v1.3.1 --skip-coverage 600, skipping variant calling in regions with &gt; 600× read depth to help prevent unnecessary computing on high coverage regions that violate the diploid assumption. The exact commands used were:<disp-quote><p id="Par89"># Add mat and pat at sequence names to prevent naming collisions in contigs</p><p id="Par90">sed ‘s/&gt;/&gt;mat_h_/g’ mom.fasta &gt; mat.fasta</p><p id="Par91">sed ‘s/&gt;/&gt;pat_h_/g’ dad.fasta &gt; pat.fasta</p><p id="Par92"># bwa indexing</p><p id="Par93">bwa index both.fasta</p><p id="Par94"># bwa alignment</p><p id="Par95">bwa mem -t 24 both.fasta F_1.fastq.gz F_2.fastq.gz &gt; na12878.sam</p><p id="Par96"># Sorting and converting to bam</p><p id="Par97">samtools sort -@24 -O bam -o na12878.bam -T na12878.tmp na12878.sam</p><p id="Par98"># Freebayes variant calling</p><p id="Par99">freebayes --bam na12878.bam --skip-coverage 600 -f both.fasta | bcftools view --no-version -Ou &gt; na12878.tmp.bcf</p><p id="Par100">bcftools index na12878.tmp.bcf</p><p id="Par101"># Normalize indels</p><p id="Par102">bcftools view -Ou -e'type="ref"' na12878.tmp.bcf | bcftools norm -Ob -f both.fasta -o na12878.bcf --threads 24</p><p id="Par103">bcftools index na12878.bcf</p><p id="Par104"># Filter out low quality variant calls</p><p id="Par105">bcftools view -i 'QUAL&gt;1 &amp;&amp; (GT="AA" || GT="Aa")' -Oz --threads=24 na12878.bcf &gt; na12878.changes.vcf.gz</p><p id="Par106">bcftools index na12878.changes.vcf.gz</p><p id="Par107"># Get number of bases called as errors</p><p id="Par108">bcftools view -H -i 'QUAL&gt;1 &amp;&amp; (GT="AA" || GT="Aa")' -Ov na12878.changes.vcf.gz | awk -F "\t" '{print $4"\t"$5}' | awk '{lenA=length($1); lenB=length($2); if (lenA &lt; lenB ) {sum+=lenB-lenA} else if ( lenA &gt; lenB ) { sum+=lenA-lenB } else {sum+=lenA}} END {print sum}' &gt; na12878.numvar</p><p id="Par109"># Get number of bases with alignment</p><p id="Par110">samtools view -F 0x100 -u na12878.bam | bedtools genomecov -ibam - -split &gt; aligned.genomecov</p><p id="Par111">awk -v l=3 -v h=600 '{if ($1=="genome" &amp;&amp; $2&gt;l &amp;&amp; $2&lt;h) {numbp += $3}} END {print numbp}' aligned.genomecov &gt; na12878.numbp</p><p id="Par112"># QV calculation</p><p id="Par113">NUM_BP=`cat na12878.numbp`</p><p id="Par114">NUM_VAR=`cat na12878.numvar`</p><p id="Par115">QV=`echo "$NUM_VAR $NUM_BP" | awk '{print (-10*log($1/$2)/log(10))}'`</p><p id="Par116">echo $QV</p></disp-quote></p>
        <p id="Par117">This pipeline is used in the Vertebrate Genomes Project, and the code used is available from <ext-link ext-link-type="uri" xlink:href="https://github.com/VGP/vgp-assembly/tree/master/pipeline/">https://github.com/VGP/vgp-assembly/tree/master/pipeline/</ext-link> under the “bwa,” “freebayes-polish,” and “qv” directories.</p>
      </sec>
    </sec>
    <sec id="Sec31">
      <title>Comparison to KAT</title>
      <p id="Par118">KAT comp (v2.4.1) was run three times using <italic>k</italic> = 21 to generate the equivalent spectra-cn plots generated by Merqury. For consistency, both Merqury and KAT were run using at most 24 threads. Unlike Merqury, KAT must recount k-mers for each spectra-cn plot (<ext-link ext-link-type="uri" xlink:href="https://kat.readthedocs.io/en/latest/faq.html#should-i-dump-jellyfish-hashes-to-disk">https://kat.readthedocs.io/en/latest/faq.html#should-i-dump-jellyfish-hashes-to-disk</ext-link>). The following command was executed three times for the maternal, paternal, and the combined assembly:<disp-quote><p id="Par119">kat comp -o $out -t 24 -m 21 -h 'F_1.fastq.gz F_2.fastq.gz' $asm</p></disp-quote></p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec32">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2020_2134_MOESM1_ESM.docx">
            <caption>
              <p><bold>Additional file 1.</bold> Review history.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s13059-020-02134-9.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors would like to thank the members of the Vertebrate Genomes Project assembly working group for helpful discussions, including Marcela Uliano da Silva and Giulio Formenti. We also would like to thank Bernardo Clavijo of the Earlham Institute for his very insightful feedback in response to a preprint of this manuscript. This research utilized the computational resources of the NIH HPC Biowulf cluster (<ext-link ext-link-type="uri" xlink:href="https://hpc.nih.gov">https://hpc.nih.gov</ext-link>).</p>
    <sec id="FPar1">
      <title>Review history</title>
      <p id="Par120">The review history is available as Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
    </sec>
    <sec id="FPar2">
      <title>Peer review information</title>
      <p id="Par121">Barbara Cheifet was the primary editor on this article and managed its editorial process and peer review in collaboration with the rest of the editorial team.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>A.R. conceived the project and implemented Merqury. B.P.W. designed and implemented Meryl. A.R., B.P.W., S.K., and A.M.P. designed the methods. A.R. and S.K. performed analyses. A.R. and A.M.P. coordinated the project. All of the authors wrote the manuscript and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This research was supported by the Intramural Research Program of the National Human Genome Research Institute, National Institutes of Health.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Merqury and Meryl are conceived as “United States Government Work” and are under public domain according to the terms of the United States Copyright Act. It was written as part of the authors’ official duties for the US government and thus cannot be copyrighted. This software is freely available to the public for use without a copyright notice. Restrictions cannot be placed on its present or future use. Merqury is available under public domain at GitHub repository, <ext-link ext-link-type="uri" xlink:href="https://github.com/marbl/merqury">https://github.com/marbl/merqury</ext-link> [<xref ref-type="bibr" rid="CR48">48</xref>]. Meryl is also available under public domain unless otherwise stated as GPL-2.0 in the source code at GitHub repository, <ext-link ext-link-type="uri" xlink:href="https://github.com/marbl/meryl">https://github.com/marbl/meryl</ext-link> [<xref ref-type="bibr" rid="CR49">49</xref>]. Merqury v1.0 and Meryl v1.0 release were used in this manuscript. The versions of Merqury and Meryl used in this manuscript are available for download at each GitHub pages and at Zenodo, 10.5281/zenodo.3908802 [<xref ref-type="bibr" rid="CR50">50</xref>]. Downloadable links to the Meryl k-mer databases of the assembled individuals and hap-mers are available for <italic>A. thaliana</italic> and NA12878 on the Merqury GitHub page [<xref ref-type="bibr" rid="CR48">48</xref>].</p>
  </notes>
  <notes id="FPar3">
    <title>Ethics approval and consent to participate</title>
    <p id="Par122">Not applicable.</p>
  </notes>
  <notes id="FPar4">
    <title>Consent for publication</title>
    <p id="Par123">Not applicable.</p>
  </notes>
  <notes id="FPar5" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par124">S.K. has received travel compensation to present at Oxford Nanopore <italic>meetings.</italic> All other authors have no competing interests to declare.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eid</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Real-time DNA sequencing from single polymerase molecules</article-title>
        <source>Science</source>
        <year>2009</year>
        <volume>323</volume>
        <fpage>133</fpage>
        <lpage>138</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1162986</pub-id>
        <pub-id pub-id-type="pmid">19023044</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wenger</surname>
            <given-names>AM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Accurate circular consensus long-read sequencing improves variant detection and assembly of a human genome</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <fpage>1155</fpage>
        <lpage>1162</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0217-9</pub-id>
        <pub-id pub-id-type="pmid">31406327</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jain</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nanopore sequencing and assembly of a human genome with ultra-long reads</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <fpage>338</fpage>
        <lpage>345</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4060</pub-id>
        <pub-id pub-id-type="pmid">29431738</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Weisenfeld NI, Kumar V, Shah P, Church DM, Jaffe DB. Direct determination of diploid genome sequences. Genome Res. 2017. 10.1101/gr.214874.116.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dekker</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rippe</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Dekker</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kleckner</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Capturing chromosome conformation</article-title>
        <source>Science</source>
        <year>2002</year>
        <volume>295</volume>
        <fpage>1306</fpage>
        <lpage>1311</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1067799</pub-id>
        <pub-id pub-id-type="pmid">11847345</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Falconer</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>DNA template strand sequencing of single-cells maps genomic rearrangements at high resolution</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>1107</fpage>
        <lpage>1112</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.2206</pub-id>
        <pub-id pub-id-type="pmid">23042453</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pendleton</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assembly and diploid architecture of an individual human genome via single-molecule technologies</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <fpage>780</fpage>
        <lpage>786</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3454</pub-id>
        <pub-id pub-id-type="pmid">26121404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Seo</surname>
            <given-names>J-S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly and phasing of a Korean human genome</article-title>
        <source>Nature</source>
        <year>2016</year>
        <volume>538</volume>
        <fpage>243</fpage>
        <lpage>247</lpage>
        <pub-id pub-id-type="doi">10.1038/nature20098</pub-id>
        <pub-id pub-id-type="pmid">27706134</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Phased diploid genome assembly with single-molecule real-time sequencing</article-title>
        <source>Nat Methods</source>
        <year>2016</year>
        <volume>13</volume>
        <fpage>1050</fpage>
        <lpage>1054</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4035</pub-id>
        <pub-id pub-id-type="pmid">27749838</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of haplotype-resolved genomes with trio binning</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <fpage>1174</fpage>
        <lpage>1182</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4277</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ghareghani</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Strand-seq enables reliable separation of long reads by chromosome via expectation maximization</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>i115</fpage>
        <lpage>i123</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty290</pub-id>
        <pub-id pub-id-type="pmid">29949971</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Kronenberg ZN, et al. Extended haplotype phasing of de novo genome assemblies with FALCON-Phase. 2018. <ext-link ext-link-type="uri" xlink:href="http://biorxiv.org/lookup/doi/10.1101/327064">http://biorxiv.org/lookup/doi/10.1101/327064</ext-link>; 10.1101/327064.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Garg, S. <italic>et al.</italic> Efficient chromosome-scale haplotype-resolved assembly of human genomes. bioRxiv 810341. 2019. 10.1101/810341.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Porubsky, D. <italic>et al.</italic> A fully phased accurate assembly of an individual human genome. 2019. <ext-link ext-link-type="uri" xlink:href="http://biorxiv.org/lookup/doi/10.1101/855049">http://biorxiv.org/lookup/doi/10.1101/855049</ext-link>; 10.1101/855049.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bickhart</surname>
            <given-names>DM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Single-molecule sequencing and chromatin conformation capture enable de novo reference assembly of the domestic goat genome</article-title>
        <source>Nat Genet</source>
        <year>2017</year>
        <volume>49</volume>
        <fpage>643</fpage>
        <lpage>650</lpage>
        <pub-id pub-id-type="doi">10.1038/ng.3802</pub-id>
        <pub-id pub-id-type="pmid">28263316</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simão</surname>
            <given-names>FA</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Ioannidis</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kriventseva</surname>
            <given-names>EV</given-names>
          </name>
          <name>
            <surname>Zdobnov</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>BUSCO: assessing genome assembly and annotation completeness with single-copy orthologs</article-title>
        <source>Bioinforma. Oxf. Engl.</source>
        <year>2015</year>
        <volume>31</volume>
        <fpage>3210</fpage>
        <lpage>3212</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv351</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mapleson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Garcia Accinelli</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kettleborough</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Clavijo</surname>
            <given-names>BJ</given-names>
          </name>
        </person-group>
        <article-title>KAT: a K-mer analysis toolkit to quality control NGS datasets and genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <fpage>574</fpage>
        <lpage>576</lpage>
        <?supplied-pmid 27797770?>
        <pub-id pub-id-type="pmid">27797770</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Versatile genome assembly evaluation with QUAST-LG</article-title>
        <source>Bioinforma Oxf Engl</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>i142</fpage>
        <lpage>i150</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty266</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Mikheenko, A., Bzikadze, A. V., Gurevich, A., Miga, K. H. &amp; Pevzner, P. A. TandemMapper and TandemQUAST: mapping long reads and assessing/improving assembly quality in extra-long tandem repeats. bioRxiv 2019.12.23.887158. 2019 10.1101/2019.12.23.887158.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Choi</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Chan</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Kirkness</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Telenti</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schork</surname>
            <given-names>NJ</given-names>
          </name>
        </person-group>
        <article-title>Comparison of phasing strategies for whole human genomes</article-title>
        <source>PLoS Genet</source>
        <year>2018</year>
        <volume>14</volume>
        <fpage>e1007308</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pgen.1007308</pub-id>
        <pub-id pub-id-type="pmid">29621242</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>MJP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Multi-platform discovery of haplotype-resolved structural variation in human genomes</article-title>
        <source>Nat Commun</source>
        <year>2019</year>
        <volume>10</volume>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1038/s41467-018-08148-z</pub-id>
        <pub-id pub-id-type="pmid">30602773</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edge</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bafna</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Bansal</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>HapCUT2: robust and accurate haplotype assembly for diverse sequencing technologies</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>801</fpage>
        <lpage>812</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.213462.116</pub-id>
        <pub-id pub-id-type="pmid">27940952</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patterson</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>WhatsHap: weighted haplotype assembly for future-generation sequencing reads</article-title>
        <source>J Comput Biol J Comput Mol Cell Biol</source>
        <year>2015</year>
        <volume>22</volume>
        <fpage>498</fpage>
        <lpage>509</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2014.0157</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zook</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrating human sequence data sets provides a resource of benchmark SNP and indel genotype calls</article-title>
        <source>Nat Biotechnol</source>
        <year>2014</year>
        <volume>32</volume>
        <fpage>246</fpage>
        <lpage>251</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2835</pub-id>
        <pub-id pub-id-type="pmid">24531798</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zook</surname>
            <given-names>JM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Extensive sequencing of seven human genomes to characterize benchmark reference materials</article-title>
        <source>Sci Data</source>
        <year>2016</year>
        <volume>3</volume>
        <fpage>1</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1038/sdata.2016.25</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krusche</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Best practices for benchmarking germline small-variant calls in human genomes</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <fpage>555</fpage>
        <lpage>560</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0054-x</pub-id>
        <pub-id pub-id-type="pmid">30858580</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eberle</surname>
            <given-names>MA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A reference data set of 5.4 million phased human variants validated by genetic inheritance from sequencing a three-generation 17-member pedigree</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>157</fpage>
        <lpage>164</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.210500.116</pub-id>
        <pub-id pub-id-type="pmid">27903644</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Miga, K. H. <italic>et al.</italic> Telomere-to-telomere assembly of a complete human X chromosome. Nature 1–9. 2020. 10.1038/s41586-020-2547-7.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dilthey</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Iqbal</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>McVean</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Improved genome inference in the MHC using a population reference graph</article-title>
        <source>Nat Genet</source>
        <year>2015</year>
        <volume>47</volume>
        <fpage>682</fpage>
        <lpage>688</lpage>
        <pub-id pub-id-type="doi">10.1038/ng.3257</pub-id>
        <pub-id pub-id-type="pmid">25915597</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Sherman, R. M. &amp; Salzberg, S. L. Pan-genomics in the human genome era. Nat. Rev. Genet<italic>.</italic> 1–12. 2020. 10.1038/s41576-020-0210-7.</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">Human Pangenome Reference Consortium. <ext-link ext-link-type="uri" xlink:href="https://humanpangenome.org/">https://humanpangenome.org/</ext-link>. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Rhie, A. et al. Towards complete and error-free genome assemblies of all vertebrate species. 2020. 10.1101/2020.05.22.110833. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Koren, S. et al. Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. Genome Res<italic>.</italic> gr.215087.116. 2017. 10.1101/gr.215087.116.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nonhybrid, finished microbial genome assemblies from long-read SMRT sequencing data</article-title>
        <source>Nat Methods</source>
        <year>2013</year>
        <volume>10</volume>
        <fpage>563</fpage>
        <lpage>569</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.2474</pub-id>
        <pub-id pub-id-type="pmid">23644548</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">Guan, D. <italic>et al.</italic> Identifying and removing haplotypic duplication in primary genome assemblies Bioinformatics. 2020. 10.1093/bioinformatics/btaa025.</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vurture</surname>
            <given-names>GW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GenomeScope: fast reference-free genome profiling from short reads</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <fpage>2202</fpage>
        <lpage>2204</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx153</pub-id>
        <pub-id pub-id-type="pmid">28369201</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Robinson</surname>
            <given-names>JT</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrative Genomics Viewer</article-title>
        <source>Nat Biotechnol</source>
        <year>2011</year>
        <volume>29</volume>
        <fpage>24</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1754</pub-id>
        <pub-id pub-id-type="pmid">21221095</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thorvaldsdóttir</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Mesirov</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Integrative genomics viewer (IGV): high-performance genomics data visualization and exploration</article-title>
        <source>Brief Bioinform</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>178</fpage>
        <lpage>192</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbs017</pub-id>
        <pub-id pub-id-type="pmid">22517427</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ondov</surname>
            <given-names>BD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mash Screen: high-throughput sequence containment estimation for genome discovery</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>232</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1841-x</pub-id>
        <pub-id pub-id-type="pmid">31690338</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quail</surname>
            <given-names>MA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A large genome center’s improvements to the Illumina sequencing system</article-title>
        <source>Nat Methods</source>
        <year>2008</year>
        <volume>5</volume>
        <fpage>1005</fpage>
        <lpage>1010</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1270</pub-id>
        <pub-id pub-id-type="pmid">19034268</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kozarewa</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Amplification-free Illumina sequencing-library preparation facilitates improved mapping and assembly of (G+C)-biased genomes</article-title>
        <source>Nat Methods</source>
        <year>2009</year>
        <volume>6</volume>
        <fpage>291</fpage>
        <lpage>295</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1311</pub-id>
        <pub-id pub-id-type="pmid">19287394</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oyola</surname>
            <given-names>SO</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Optimizing illumina next-generation sequencing library preparation for extremely at-biased genomes</article-title>
        <source>BMC Genomics</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>1</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-13-1</pub-id>
        <pub-id pub-id-type="pmid">22214261</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Aggressive assembly of pyrosequencing reads with mates</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2818</fpage>
        <lpage>2824</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn548</pub-id>
        <pub-id pub-id-type="pmid">18952627</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fofanov</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>How independent are the appearances of n-mers in different genomes?</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>2421</fpage>
        <lpage>2428</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bth266</pub-id>
        <pub-id pub-id-type="pmid">15087315</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hillier</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wendl</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Base-calling of automated sequencer traces using phred. I Accuracy assessment</article-title>
        <source>Genome Res</source>
        <year>1998</year>
        <volume>8</volume>
        <fpage>175</fpage>
        <lpage>185</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.8.3.175</pub-id>
        <pub-id pub-id-type="pmid">9521921</pub-id>
      </element-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <mixed-citation publication-type="other">Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. 2013. <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1303.3997v2">https://arxiv.org/abs/1303.3997v2</ext-link>. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Garrison, E. &amp; Marth, G. Haplotype-based variant detection from short-read sequencing. 2012. <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1207.3907">https://arxiv.org/abs/1207.3907</ext-link>. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <mixed-citation publication-type="other">Rhie, A. Evaluate genome assemblies with k-mers and more. Github. 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/marbl/merqury">https://github.com/marbl/merqury</ext-link>. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <mixed-citation publication-type="other">Walenz, B. et al. A genomic k-mer counter (and sequence utility) with nice features. Github. 2020. <ext-link ext-link-type="uri" xlink:href="https://github.com/marbl/meryl">https://github.com/marbl/meryl</ext-link>. Accessed 23 Aug 2020.</mixed-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <mixed-citation publication-type="other">Rhie, A. and Walenz, B. et al. Merqury and Meryl Zenodo. 2020. 10.5281/zenodo.3908800.</mixed-citation>
    </ref>
  </ref-list>
</back>
