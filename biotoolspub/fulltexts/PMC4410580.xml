<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Gigascience</journal-id>
    <journal-id journal-id-type="iso-abbrev">Gigascience</journal-id>
    <journal-title-group>
      <journal-title>GigaScience</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2047-217X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4410580</article-id>
    <article-id pub-id-type="publisher-id">60</article-id>
    <article-id pub-id-type="doi">10.1186/s13742-015-0060-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technical Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>VirAmp: a galaxy-based viral genome assembly pipeline</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Wan</surname>
          <given-names>Yinan</given-names>
        </name>
        <address>
          <email>yzw128@psu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Renner</surname>
          <given-names>Daniel W</given-names>
        </name>
        <address>
          <email>dwr19@psu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Albert</surname>
          <given-names>Istvan</given-names>
        </name>
        <address>
          <email>iua1@psu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Szpara</surname>
          <given-names>Moriah L</given-names>
        </name>
        <address>
          <email>moriah@psu.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label>The Huck Institutes of the Life Sciences, University Park, PA 16802 USA </aff>
      <aff id="Aff2"><label>2</label>Department of Biochemistry and Molecular Biology, Pennsylvania State University, University Park, PA 16802 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>4</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>28</day>
      <month>4</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>4</volume>
    <elocation-id>19</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>7</month>
        <year>2014</year>
      </date>
      <date date-type="accepted">
        <day>9</day>
        <month>4</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Wan et al.; licensee BioMed Central. 2015</copyright-statement>
      <license license-type="open-access">
        <license-p>This article is published under license to BioMed Central Ltd. This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0">http://creativecommons.org/licenses/by/4.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly credited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Advances in next generation sequencing make it possible to obtain high-coverage sequence data for large numbers of viral strains in a short time. However, since most bioinformatics tools are developed for command line use, the selection and accessibility of computational tools for genome assembly and variation analysis limits the ability of individual labs to perform further bioinformatics analysis.</p>
      </sec>
      <sec>
        <title>Findings</title>
        <p>We have developed a multi-step viral genome assembly pipeline named VirAmp, which combines existing tools and techniques and presents them to end users via a web-enabled Galaxy interface. Our pipeline allows users to assemble, analyze, and interpret high coverage viral sequencing data with an ease and efficiency that was not possible previously. Our software makes a large number of genome assembly and related tools available to life scientists and automates the currently recommended best practices into a single, easy to use interface. We tested our pipeline with three different datasets from human herpes simplex virus (HSV).</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>VirAmp provides a user-friendly interface and a complete pipeline for viral genome analysis. We make our software available via an Amazon Elastic Cloud disk image that can be easily launched by anyone with an Amazon web service account. A fully functional demonstration instance of our system can be found at <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link>. We also maintain detailed documentation on each tool and methodology at <ext-link ext-link-type="uri" xlink:href="http://docs.viramp.com">http://docs.viramp.com</ext-link>.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s13742-015-0060-y) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Next generation sequencing</kwd>
      <kwd>herpes simplex virus</kwd>
      <kwd>viral genome</kwd>
      <kwd>assembly pipeline</kwd>
      <kwd>variation analysis</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Findings</title>
    <sec id="Sec2">
      <title>Background</title>
      <p>Recent assembler evaluations such as GAGE [<xref ref-type="bibr" rid="CR1">1</xref>] and Assemblathon 2 [<xref ref-type="bibr" rid="CR2">2</xref>] have indicated that parameter tuning and adapting the assembly process to match properties of the genome are essential steps for obtaining high quality assemblies. This demonstrates the need for tools that provide customizable pipelines that life scientists can run repeatedly to evaluate the effects of the various parameters on the quality of the assembly. In this paper we present VirAmp, a virus assembly pipeline designed to process high coverage shotgun sequencing data obtained from virus genomes. VirAmp combines into a single Galaxy interface [<xref ref-type="bibr" rid="CR3">3</xref>] a set of existing tools and best practices that facilitate straightforward multistep, semi <italic>de novo</italic> assembly approaches.</p>
      <p>Advances in high-throughput sequencing make it possible to sequence a large number of viral genomes at high coverage even in a single sequencing run. At the same time viral genomics presents scientists with a number of unique challenges and requires tools and techniques developed specifically to account for the much faster mutation and recombination rates that these genomes typically exhibit [<xref ref-type="bibr" rid="CR4">4</xref>,<xref ref-type="bibr" rid="CR5">5</xref>]. As a consequence, there is a high demand for tools that can efficiently perform various analysis tasks commonly associated with viral assemblies. Detecting variation by mapping against a reference genome is a frequently used methodology when studying higher order eukaryote genomes. This strategy is appropriate for the analysis of SNPs, small insertions and deletions (indels), and mutations that involve only a few bases. Due to faster mutation rates, short generation times, and more intense selective pressures, viral genomes may be genetically distant from the known reference genomes. <italic>De novo</italic> assembly solves some of these challenges at the cost of added algorithmic and computational complexity. Caveats of <italic>de novo</italic> assembly include the uncertain nature of gaps and the condensed size of short sequence repeats, which are assembled at the most compact size supported by the data. However these caveats are outweighed by the ability of <italic>de novo</italic> assembly to detect regions that alignment cannot, such as large insertions or rearrangements, and sequences that diverge significantly from prior reference genomes.</p>
      <p>There are multiple approaches to <italic>de novo</italic> assembly. <italic>Overlap-layout-consensus</italic>, or OLC, uses multiple sequence alignment (MSA) to orient and connect the short sequence reads and produce a final consensus sequence [<xref ref-type="bibr" rid="CR1">1</xref>,<xref ref-type="bibr" rid="CR6">6</xref>]. This approach works well for Sanger sequencing data, but it is less well suited for next-generation sequencing data which commonly consists of much more numerous, but shorter sequencing reads. In contrast, the <italic>de Bruijn graph</italic>-based algorithms assemble data by representing the genome via a set of short subsequences (or k-mers) [<xref ref-type="bibr" rid="CR1">1</xref>,<xref ref-type="bibr" rid="CR7">7</xref>]. For these algorithms the sub-sequence size (k-mer size) becomes an essential parameter of the process. Contigs (or extended sequences built by overlapping reads) that are created using a data representation of short k-mers tend to be smaller but contain fewer errors. In contrast, contigs built from longer k-mers can reconstruct repeats more precisely, but at the cost of introducing minor errors and variations that can lead to gaps or breaks in the final assembly. <italic>De Bruijn</italic> graph construction is non-deterministic, in that it depends on the order of sequence reads, however this rarely affects the performance or downstream analysis. In general, assemblies generated from <italic>de Bruijn</italic> graph based assemblers tend to contain smaller contigs compared to those obtained from <italic>overlap-layout-consensus</italic> algorithms.</p>
      <p>The constrained size of viral genomes, along with the increasing yield of sequencing instrumentation and methods, have combined to give researchers extremely high rates of coverage when sequencing viral genomes using this approach. While theoretically this high coverage is not needed, in practice it may be necessary so that a sufficient amount of data is obtained from hard-to-sequence regions of the genome, such as areas with high G + C content or secondary structures. As a consequence, the coverage of a single base of a viral genome may vary from tens to tens of thousands of reads. This radical variability in read coverage introduces specific algorithmic challenges, as most tools and techniques were not designed to handle data with such properties. Methodologies such as digital normalization [<xref ref-type="bibr" rid="CR8">8</xref>] have been introduced to reduce redundant information in deep sequencing data. In this paper we demonstrate that by combining several existing approaches and techniques we can produce nearly complete high quality viral assemblies in less than two hours on a single CPU computer with 4 GB of memory. We validated our pipeline using sequencing data from both laboratory and clinical strains of HSV-1, which represent a wide range of variation with respect to the reference genome of HSV-1, including SNPs, indels, and short sequence repeats (SSRs) that are present in many viral genomes.</p>
    </sec>
    <sec id="Sec3">
      <title>Assembly pipeline description</title>
      <p>The VirAmp pipeline consists of a series of connected analytical methods that were found to be necessary for optimal assembly of viral genomes. As shown in Figure <xref rid="Fig1" ref-type="fig">1</xref>, the main steps consist of: 1) quality control of input data, 2) coverage reduction, 3) <italic>de novo</italic> genome assembly, 4) reference-guided genome assembly, 5) information recovery and gap-filling, and 6) quality evaluation of final genome assembly. Additional optional steps include 7) final gap closing, 8) assembling single-end sequence reads, and 9) additional ways to access the VirAmp pipeline. Below we discuss in more detail the rationale for each step:<fig id="Fig1"><label>Figure 1</label><caption><p>VirAmp pipeline overview. The diagram illustrates the progression of the VirAmp pipeline. <bold>A)</bold> First, we perform a quality trimming of the raw data, then reduce extremely high coverage data (top trace, red) to a reasonable depth and even out the coverage variation (bottom trace, blue; usually to ~100x). <bold>B)</bold> Next, a multi-step semi-<italic>de novo</italic> strategy is applied for core assembly: (I) a <italic>de novo</italic> assembler is run multiple times using different k-mer sizes, to assemble the short sequence reads into a set of long contigs; (II) contigs from different k-mer sets are oriented by aligning to the reference genome and then are connected into scaffolds based on the pairwise alignment. <bold>C)</bold> Data from the spacing of paired-end reads is used to extend the contigs, potentially closing gaps and/or joining contigs into larger scaffolds. <bold>D)</bold> Multiple tools are implemented for assembly evaluation and analysis of variation. These include basic assembly statistics, comparison of the new assembly to a reference genome, and identification of SNPs and repeats.</p></caption><graphic xlink:href="13742_2015_60_Fig1_HTML" id="d30e423"/></fig><list list-type="order"><list-item><p><bold>Quality control of input data.</bold> Various artifacts and errors inherent to the sequencing process may affect the data obtained from a sequencing instrument. Correcting these may require various trimming and filtering steps that remove unreliable sections of the data. In our pipeline the default trimming is performed via the seqtk toolkit [<xref ref-type="bibr" rid="CR9">9</xref>], which implements the Phred algorithm and is able to remove low-quality bases from the end of a sequence read. In addition, we provide a collection of optional quality control tools that offer functions such as polyA and adaptor clipping, as well as base quality trimming. We also provide tools to filter data for contaminating sequence reads derived from the host cell genome, using Bowtie2 [<xref ref-type="bibr" rid="CR10">10</xref>] as the underlying aligner. Users may choose between the various tools and apply the quality filtering before sending the data into later steps of the pipeline. Detailed documentation is provided for each of these tools.</p></list-item><list-item><p><bold>Coverage reduction.</bold> The highly variable coverage inherent to deep sequencing of viral genomes poses specific challenges to most genome assemblers. Reads that fall into very high coverage areas do not provide new information, yet they can negatively affect the performance of the algorithms. Since these redundant reads may also be affected by sequencing errors, they may increase the dimensionality of the data, further reducing the efficiency of the assembly process. To correct for redundant coverage we integrate a digital normalization step via the <bold>diginorm</bold> [<xref ref-type="bibr" rid="CR8">8</xref>] approach into our pipeline. Digital normalization is a computational algorithm that uses k-mer abundance to estimate the sequence depth of the unassembled genome. Diginorm systemizes the coverage of short reads, discards redundant reads, and reduces the impact of sampling variation and sequencing errors. Digital normalization will reduce coverage to a predefined cutoff while retaining most of the reads covering low coverage regions.</p></list-item><list-item><p><bold><italic>De novo</italic></bold><bold>genome assembly.</bold> Our pipeline operates via a two-step strategy that integrates different assembly methods, thus benefiting from information produced by <italic>de novo</italic> assembly protocols as well as reference guided multiple sequence alignment algorithms (Step 4 below). This allows us to capture a larger number of variations than using either method separately. After coverage reduction via diginorm, our pipeline uses <italic>de novo</italic> assembly to place the short reads into longer blocks of continuous sequence called contigs. Because the assembly output depends on the choice of k-mer size, we run multiple rounds of <italic>de novo</italic> assembly with different k-mers, and then combine them into a single dataset that becomes the input for the next step in the pipeline. Our default installation offers three commonly used assemblers:<list list-type="alpha-lower"><list-item><p><bold>Velvet</bold> [<xref ref-type="bibr" rid="CR7">7</xref>] is one of the earliest assemblers using the <italic>de Bruijn</italic> graph algorithm. It is designed as a general assembler for shotgun sequencing. Velvet is set as our default choice for <italic>de novo</italic> assembly.</p></list-item><list-item><p><bold>SPAdes</bold> [<xref ref-type="bibr" rid="CR11">11</xref>] is an assembler designed for standard isolates and single-cell Multiple Displacement Amplification (MDA) bacterial assemblies. SPAdes uses an iterative approach to implement a multisized <italic>de Bruijn</italic> graph algorithm with multiple k-mer sizes. SPAdes is also available as a complete pipeline, but here we use only the core assembler.</p></list-item><list-item><p><bold>VICUNA</bold> [<xref ref-type="bibr" rid="CR4">4</xref>] is an OLC algorithm-based <italic>de novo</italic> approach that specifically targets assembly of virus genomes with a high mutation rate. This tool can handle deep sequencing data with high variation, at the cost of potentially longer runtimes. As for SPAdes, only the core assembler of VICUNA is used here.</p></list-item></list></p></list-item><list-item><p><bold>Reference-guided genome assembly.</bold> Once we obtain contigs from the <italic>de novo</italic> assembly step, the VirAmp pipeline will further orient and connect them into a draft genome using the reference-guided assembler <bold>AMOScmp</bold> [<xref ref-type="bibr" rid="CR6">6</xref>]. AMOScmp uses an <italic>alignment-layout-consensus</italic> algorithm to orient the short contigs by aligning to a reference genome. AMOScmp then connects the short contigs together into a new draft genome by using information from a round of multiple sequence alignment. This algorithm is a modified version of the traditional OLC algorithm, which was originally designed for Sanger sequencing [<xref ref-type="bibr" rid="CR12">12</xref>].</p></list-item><list-item><p><bold>Information recovery and gap filling.</bold><list list-type="alpha-lower"><list-item><p><bold>Scaffold extension and connection with SSPACE.</bold> To ensure that no information has been discarded at this stage, VirAmp makes use of a tool called SSPACE for further scaffolding and contig extension [<xref ref-type="bibr" rid="CR13">13</xref>]. SSPACE is a stand-alone scaffolding tool, which we implement using the un-normalized input data to provide as many sequences as possible for assembly correction and expansion. SSPACE begins by using BWA [<xref ref-type="bibr" rid="CR14">14</xref>] to align paired-end or mate-pair sequence reads back to the contigs assembled by AMOScmp. SSPACE can then extend these contigs by searching for unmapped reads whose mate-pair is located near the edge of a gap, and estimating the placement of these paired reads into the gap region(s). SSPACE then uses the spacing between paired-end reads to scaffold contigs together, forming longer stretches of intact sequence for the final genome assembly. SSPACE accounts for any information loss during the digital normalization and coverage reduction, since it extends and connects the contigs using the complete original dataset.</p></list-item><list-item><p><bold>Single linear sequence creation.</bold> A final assembly with a set of ~5-10 contigs is created upon the completion of SSPACE. These contigs are listed in the order that they align to the reference genome, producing a linear genome that may contain several gaps. An optional step is provided to connect the contigs into one sequence by adding Ns to represent ambiguous bases between contigs. In this case, the number of Ns is estimated from the spacing found in the reference genome.</p></list-item></list></p></list-item><list-item><p><bold>Quality evaluation of final genome assembly.</bold> To help researchers better understand and interpret their viral genome assembly results, we provide utilities for genome assessment and variation discovery.<list list-type="alpha-lower"><list-item><p><bold>Assembly evaluation metrics via QUAST.</bold> QUAST [<xref ref-type="bibr" rid="CR15">15</xref>] is a quality assessment tool for evaluating genome assemblies. QUAST uses the MUMmer [<xref ref-type="bibr" rid="CR16">16</xref>] aligner to analyze the newly assembled genome and compute reference-based and reference-free metrics. Important statistics such as contig number, N50 and NG50 are provided as part of this summary. N50 and NG50 are common metrics for comparing how well different assembly methods work for a given genome or dataset. To compute these statistics, all contigs are placed in order from longest to shortest. The sum of all contig sizes is recorded as the maximum possible assembly length (since duplicate and overlapping contigs exist, this is almost always longer than the target genome). Moving in order from longest to shortest, the N50 statistic represents the size of the contig at which half the maximum assembly length has been achieved. Large N50 values reflect assemblies with large contigs, without an excess of small contigs. NG50 is very similar to N50, except that the comparison is to the reference genome length. A large NG50 value indicates that a majority of the reference genome length is encompassed by contigs of this size or longer, which is beneficial for the quality of the final assembly. A full version of the QUAST report is provided for users’ further exploration.</p></list-item><list-item><p><bold>Assembly-reference comparison.</bold> The assembly-reference comparison report provides details about the alignment of the newly assembled genome against the viral reference genome. Coordinates and percent identity are provided for each aligned region between the two sequences. This helps the user to identify large indels, as well as other complex structural variations. Table <xref rid="Tab1" ref-type="table">1</xref> demonstrates an example of the comparison report.<table-wrap id="Tab1"><label>Table 1</label><caption><p><bold>Overview of the assembly-reference comparison</bold></p></caption><table frame="hsides" rules="groups"><thead><tr><th>Ref_start</th><th>Ref_end</th><th>Contig_start</th><th>Contig_end</th><th>% Identity</th><th>References</th><th>Contigs</th></tr></thead><tbody><tr><td>1</td><td>62457</td><td>288</td><td>62722</td><td>99.46</td><td>JN555585_truncated</td><td>Ctg_1</td></tr><tr><td>53191</td><td>53334</td><td>53597</td><td>53454</td><td>100.00</td><td>JN555585_truncated</td><td>Ctg_1</td></tr><tr><td>62638</td><td>108009</td><td>62722</td><td>108094</td><td>99.15</td><td>JN555585_truncated</td><td>Ctg_1</td></tr><tr><td>108111</td><td>108301</td><td>186</td><td>1</td><td>92.75</td><td>JN555585_truncated</td><td>Ctg_1</td></tr><tr><td>108299</td><td>108496</td><td>5</td><td>193</td><td>92.96</td><td>JN555585_truncated</td><td>Ctg_2</td></tr><tr><td>108497</td><td>116585</td><td>296</td><td>8423</td><td>97.10</td><td>JN555585_truncated</td><td>Ctg_2</td></tr><tr><td>116652</td><td>116924</td><td>8421</td><td>8687</td><td>93.04</td><td>JN555585_truncated</td><td>Ctg_2</td></tr><tr><td>117090</td><td>117383</td><td>9718</td><td>9042</td><td>86.50</td><td>JN555585_truncated</td><td>Ctg_2</td></tr><tr><td>117497</td><td>117634</td><td>9044</td><td>9181</td><td>100.00</td><td>JN555585_truncated</td><td>Ctg_2</td></tr><tr><td>117897</td><td>123237</td><td>1</td><td>5261</td><td>97.37</td><td>JN555585_truncated</td><td>Ctg_3</td></tr><tr><td>123245</td><td>134543</td><td>1</td><td>11337</td><td>98.74</td><td>JN555585_truncated</td><td>Ctg_4</td></tr><tr><td>134593</td><td>136376</td><td>1</td><td>1754</td><td>97.42</td><td>JN555585_truncated</td><td>Ctg_5</td></tr></tbody></table></table-wrap></p></list-item><list-item><p><bold>Circos graphs.</bold> Circos [<xref ref-type="bibr" rid="CR17">17</xref>] is a software package that is used to visualize data in a circular layout. Our pipeline produces a circular graph as part of the assembly-reference comparison report (Figure <xref rid="Fig2" ref-type="fig">2</xref>). The right-hand side of the circle contains a linear representation of the reference genome, and the new draft genome is displayed as a set of ordered contigs on the left side of the circle. Arcs connect the contigs of the draft genome on the left, to the matched sections of the reference genome on the right. Circos provides a visual overview of the alignment between the draft genome and the reference genome.<fig id="Fig2"><label>Figure 2</label><caption><p>Assembly-reference comparison via Circos graph. Circos graphs can be used to compare between an assembled genome and a reference genome. Here we present the comparison of a newly assembled draft HSV-1 genome containing five scaffolds on the left semicircle (colored bands), to the HSV-1 reference genome (NCBI JN555585) on the right semicircle (grey band). Each color represents one assembled scaffold, and the grey band represents the reference genome. The gaps between scaffolds on the left indicate the breakpoints between contigs that could not be joined by the VirAmp algorithms. These breakpoints indicate insufficient information, which could result from insertions, inconsistent information about overlaps between two contigs, or regions that could not be assembled. Note that the length of the gap remains the same for each breakpoint; this does not represents the length of an actual gap. Each tick mark represents 0.5 kb, with labels included every 5 kb, and bold type every 25 kb.</p></caption><graphic xlink:href="13742_2015_60_Fig2_HTML" id="d30e934"/></fig></p></list-item><list-item><p><bold>Variation analysis.</bold> VirAmp provides a collection of tools built upon the MUMmer [<xref ref-type="bibr" rid="CR16">16</xref>] package for variation identification. SNP analysis produces a list of SNPs as a VCF (Variant Call Format) file. Structural repeats and tandem repeats can also be identified using tools we provided. BWA [<xref ref-type="bibr" rid="CR14">14</xref>] is used to map the sequence reads back to the new assembly, which offers a means to verify the new assembly, and to detect minor variations that may reflect polymorphisms in the genome sequencing data.</p></list-item></list></p></list-item><list-item><p><bold>Final gap closing.</bold> The end result of running our pipeline is an assembly built from multiple long contigs. Users have the option to generate two versions of each genome. The first of these is a multi-fasta file that usually contains a small number of contigs in the order and orientation that they align to the reference genome. We also produce a second file that contains only one linear genome sequence, which is generated by inserting Ns into the gaps between subsequent contigs, so that the linear draft genome closely corresponds to the reference genome. We note that automated gap closing may greatly oversimplify the complexities of genomic rearrangements. Its use should be restricted mainly to situations where a single linear genome sequence is necessary, such as sequence alignment between multiple strains. Gaps between each contig should be assessed carefully before closing. We recommend using the multi-fasta file for assembly assessment and variation discovery, since this reflects the most accurate outcome of the assembly process.</p></list-item><list-item><p><bold>Assembling Single-end Reads.</bold> The use of paired-end sequence read data is strongly recommended when performing genome assemblies, because the larger insert sizes allow the algorithms to better infer positional location in the genome. However we have also implemented an alternative assembly pipeline for single-end reads. In this pipeline, the SSPACE scaffolding is not used, since it depends on the paired-end information to connect contigs. All other modules are utilized in the single-end pipeline (diginorm, velvet/SPAdes/VICUNA and AMOScmp).</p></list-item><list-item><p><bold>Additional ways to access the VirAmp pipeline.</bold> The easiest path to utilize VirAmp is via the fully functional demonstration website at <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link>. All the modules and components of the VirAmp pipeline come pre-installed and integrated into a customized version of Galaxy [<xref ref-type="bibr" rid="CR3">3</xref>]. Galaxy is an open source, web-based platform that provides a web interface for commonly used bioinformatics tools. This facilitates use by researchers without programming experience. Users can also choose to launch their own VirAmp instance via an Amazon Elastic Cloud machine image (AMI) that can be easily launched by anyone with an Amazon web service account. Support and updates to VirAmp are documented in a GitHub repository (<ext-link ext-link-type="uri" xlink:href="http://github.com/SzparaLab/viramp-project">http://github.com/SzparaLab/viramp-project</ext-link>).</p></list-item></list></p>
      <p>VirAmp offers the ability to run a complete viral genome assembly pipeline in a single step, with the required inputs being only the raw FASTQ format data files and a reference genome from a related species in FASTA format. The pipeline will then output the major results and visualizations. We provide interfaces to operate each step separately, so that those familiar with assembly tools can select and tune individual steps. The program is hosted via the Amazon Elastic cloud and we provide a customized AMI that other labs can launch to serve their individual computational needs. The disk images are fully customized and ready to run upon launching; these require no additional system management to operate. We provide detailed documentation on how to start a custom version of VirAmp at: <ext-link ext-link-type="uri" xlink:href="http://docs.viramp.com/">http://docs.viramp.com</ext-link>. A ready-to-use demonstration instance of the VirAmp pipeline is also available at <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link> (Figure <xref rid="Fig3" ref-type="fig">3</xref>).<fig id="Fig3"><label>Figure 3</label><caption><p>View of VirAmp input page. The VirAmp pipeline is presented in a Galaxy-based interface. Drop-down menus allow users to select input files and carry out the entire pipeline using default settings. A full menu of component steps is available on the left, for advanced users who want to run or tune individual steps.</p></caption><graphic xlink:href="13742_2015_60_Fig3_HTML" id="d30e1009"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>Viral sequence inputs to VirAmp</title>
      <p>Viral genome sequencing data usually originates from one of two approaches. The first involves targeted sequencing of viral isolates of interest, which often entails expansion of the virus population using host cells or a host animal. This approach generates large quantities of viral genetic material where the contaminating host sequences are identifiable and fairly homogeneous. In contrast, the second common type of viral genome sequencing stems from field or clinical samples. In this approach the viral genome being sought is not the majority genome present and there may be multiple, or even hundreds, of genomes from other species contributing to the mix of nucleic acids. VirAmp accepts sequence reads from either approach, and the quality of the assembly output will reflect the purity and quantity of viral sequence reads provided as input. Removal of contaminating host or environmental sequence reads will facilitate assembly of the target viral genome. Although we have developed VirAmp for assembly of large (typically DNA-based) virus genomes, RNA virus genomes that have been reverse-transcribed for library preparation can also be used as input.</p>
      <p>To generate clean, paired sequencing reads for optimal <italic>de novo</italic> assembly, it is important to remove sequences that stem from low-quality base calls, technical artifacts, or host genome contamination. This filtering can entail the removal of whole sequence reads, or just the trimming of bases from one end. Because the removal of host sequences is usually virus and host-cell specific, we recommend tools for this approach but cannot provide a universal approach with all possible host genomes pre-loaded. The sample data included at the <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link> demonstration website has already been filtered using the following approach.</p>
      <p>We followed previously published approaches to prepare HSV-1 DNA for sequencing [<xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref>]. Each viral isolate was expanded using a cultured cell line, in this case African green monkey kidney epithelial cells (ATCC® CCL-81™Vero cells). The viral DNA was isolated using a previously described procedure to enrich for viral DNA that is packaged in nucleocapsids [<xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref>]; this method generally produces sequencing libraries that contain 10% or less contaminating sequence reads from the host genome. Then, the FASTX-Toolkit was utilized to remove or trim technical artifacts such as library adapter sequences, fully monomeric reads, low quality bases, and sequences below a length minima (<ext-link ext-link-type="uri" xlink:href="http://hannonlab.cshl.edu/fastx_toolkit/">http://hannonlab.cshl.edu/fastx_toolkit/</ext-link>). Next, we used a bowtie alignment [<xref ref-type="bibr" rid="CR10">10</xref>] to compare all sequencing reads against the rhesus macaque (<italic>Macaca mulatta</italic>) genome and removed any perfect matches. This genome was the best available match to the host Vero cells used to grow these HSV stocks. A final check removed any reads missing their paired-end sequencing mate. Parameters for these approaches have been previously described [<xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref>].</p>
    </sec>
    <sec id="Sec5">
      <title>Pipeline evaluation</title>
      <p>We evaluated our protocols by assembling data obtained from the genome of HSV-1. HSV-1 is one of the most prevalent human pathogens, infecting around 70% of adults worldwide. In most cases it causes mild epithelial lesions, but the virus remains infectious for a lifetime, with sporadic recurrences that allow spread to new hosts [<xref ref-type="bibr" rid="CR20">20</xref>]. The reference strain HSV-1 17 has a genome of 152 kb (GenBank Accession JN555585). The genome consists of a 108 kb unique long (UL) and a 13 kb unique short (US) region, with each unique region flanked by inverted copies of large structural repeats (termed repeat long (RL) and repeat short (RS), with lengths of 9.2 kb and 6.6 kb) [<xref ref-type="bibr" rid="CR21">21</xref>]. For evaluation purposes, we used a trimmed version of this reference where the terminal copies of RL and RS have been removed, leaving a sequence of 136 kb (Figure <xref rid="Fig2" ref-type="fig">2</xref>). The removal of terminal repeats facilitates alignment of <italic>de novo</italic> assembled contigs to the reference genome. For evaluation, we used three datasets of 100 bp × 100 bp paired-end reads sequenced by Illumina protocols. Each dataset contained more than 30 million reads with an average genome coverage of over 10,000-fold. The observed average library fragment size without adaptors was 350 bp.</p>
      <p>To demonstrate the necessity and contribution of each stage of the pipeline, we performed a QUAST assessment [<xref ref-type="bibr" rid="CR15">15</xref>] at every step of the process instead of just at the conclusion of the process, using data for a laboratory strain of HSV-1 (Table <xref rid="Tab2" ref-type="table">2</xref>). Figure <xref rid="Fig4" ref-type="fig">4</xref> shows the basic statistics from assembly evaluation of each step of the VirAmp pipeline. We used the NG50 statistic as our metric since as demonstrated in Assemblathon 2, it is a more appropriate parameter than N50 when a reference genome is present [<xref ref-type="bibr" rid="CR2">2</xref>]. NGx is an extension of NG50, where x represents the percent of reference genome bases encompassed by the contigs (e.g. NG50 means 50% of reference genome). Velvet was used for the <italic>de novo</italic> assembly step with multiple k-mer sizes (k = 35,45,55,65). The statistics for this step (Figure <xref rid="Fig4" ref-type="fig">4</xref>, red line) represent the best assembly of the above four sets (k = 65). With each successive step of the VirAmp pipeline the ability of the contig collection to minimally tile the viral genome improved (Figure <xref rid="Fig4" ref-type="fig">4</xref>A). Additional assembly metrics improved as well, such as the summed length of all contigs, the length of the largest contig, and the NG50 (Figure <xref rid="Fig4" ref-type="fig">4</xref>B). After scaffolding (Figure <xref rid="Fig4" ref-type="fig">4</xref>B, green line) the largest contig covered about 80% of the reference genome, which is more than 108 kb out of 136 kb (Table <xref rid="Tab1" ref-type="table">1</xref>).<table-wrap id="Tab2"><label>Table 2</label><caption><p><bold>Performance comparison using different assembly pipelines</bold></p></caption><table frame="hsides" rules="groups"><thead><tr><th>Virus<sup>1</sup></th><th># reads (x 10<sup>6</sup>)</th><th>Pipeline</th><th># contigs</th><th>Largest contig (bp)</th><th>N50</th><th>NG50</th><th># fully un-aligned contigs</th><th>REAPR score</th><th>Run time (h)</th><th># thread (4GB/CPU)</th></tr></thead><tbody><tr><td rowspan="3">HSV-1 <bold>laboratory strain</bold></td><td rowspan="3">33</td><td>VirAmp</td><td>5</td><td>108,094</td><td>108,094</td><td>108,094</td><td>0</td><td>1.28e + 10</td><td>1.5</td><td>1</td></tr><tr><td>SPAdes</td><td>9,609</td><td>107,857</td><td>258</td><td>107,857</td><td>9582</td><td>4.12e + 7</td><td>6</td><td>4</td></tr><tr><td>VICUNA</td><td>266</td><td>19,285</td><td>5,654</td><td>8,704</td><td>163</td><td>6.01e + 8</td><td>8</td><td>6</td></tr><tr><td rowspan="3">HSV-1 w/ <bold>fluorescent insert</bold></td><td rowspan="3">37</td><td>VirAmp</td><td>4</td><td>63,109</td><td>49,971</td><td>49,971</td><td>0</td><td>4.00e + 9</td><td>2.5</td><td>1</td></tr><tr><td>SPAdes</td><td>5,946</td><td>39,441</td><td>273</td><td>13,888</td><td>5898</td><td>4.48e + 7</td><td>7</td><td>4</td></tr><tr><td>VICUNA</td><td>101</td><td>33,391</td><td>9,822</td><td>7,644</td><td>60</td><td>9.03e + 8</td><td>13</td><td>6</td></tr><tr><td rowspan="3">HSV-1 <bold>clinical isolate</bold></td><td rowspan="3">87</td><td>VirAmp</td><td>3</td><td>117,134</td><td>117,134</td><td>117,134</td><td>0</td><td>1.24e + 9</td><td>4</td><td>1</td></tr><tr><td>SPAdes</td><td>74,927</td><td>93,771</td><td>256</td><td>82,041</td><td>74,608</td><td>2.97e + 8</td><td>21</td><td>4</td></tr><tr><td>VICUNA</td><td>424</td><td>23,611</td><td>2,786</td><td>7,136</td><td>383</td><td>2.19e + 8</td><td>30</td><td>6</td></tr></tbody></table><table-wrap-foot><p><sup><bold>1</bold></sup>Bold indicates abbreviation used in text, figures, and Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p></table-wrap-foot></table-wrap><fig id="Fig4"><label>Figure 4</label><caption><p>Statistics of assembly at each step of VirAmp. Cumulative data plots outputted by the QUAST package provide a visual overview of individual assembly steps, for a laboratory strain of HSV-1 (Table <xref rid="Tab2" ref-type="table">2</xref>). Successive contigs are plotted in order from longest to shortest. In both graphs, the red line represents the output of the initial <italic>de novo</italic> assembly, the blue line represents the combination of multiple k-mer assemblies using reference-guided assembly approaches, and the green line represents the output after scaffolding by SSPACE. <bold>A)</bold> The first graph highlights the number of contigs (contig index, x-axis) needed to achieve the length of the trimmed reference genome (y-axis; 135 kb); this metric improves with successive steps of the VirAmp pipeline. Only contigs longer than 500 bp were considered to be valid. <bold>B)</bold> The second graph plots the percent of the genome (x-axis) covered as successive contigs are added, from longest to shortest. The y-axis intersect for each line is the length of the longest contig, and the line drops according to length of each successive contig. The black vertical line indicates NG50. The total length, largest contig, and NG50 all increase with each step of the VirAmp pipeline.</p></caption><graphic xlink:href="13742_2015_60_Fig4_HTML" id="d30e1477"/></fig></p>
      <p>We examined the starting and ending coordinates of selected contigs from each step of the HSV-1 laboratory strain assembly (Additional file <xref rid="MOESM1" ref-type="media">1</xref>). From this inspection, we observed whether the gaps -- missing bases between the ending coordinates of one contig and the starting coordinates of the next -- had been narrowed or closed in each step (Additional file <xref rid="MOESM1" ref-type="media">1</xref>). We found that both the reference guided assembly step (AMOScmp) and the scaffold extension and gap-filling step (SSPACE) decreased the total number of gaps and narrowed the remaining gaps. From thousands of contigs produced by initial <italic>de novo</italic> assembly (Velvet), AMOScmp reduced this complexity to less than fifteen contigs and SSPACE yielded a total of just five contigs that spanned the reference genome with only minor gaps (Figure <xref rid="Fig2" ref-type="fig">2</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>). By using digital normalization before assembly, followed by using the full dataset for extension and scaffolding after the assembly, we were able to integrate the most amount of information from the sequencing data into the assembly with reduced computational resource usage.</p>
      <p>Mapping the final assembly set of the laboratory HSV-1 strain back to the HSV-1 reference genome revealed few overlaps between the contigs and suggested that this is an almost linear genome (Figure <xref rid="Fig2" ref-type="fig">2</xref>). VirAmp provides an option to connect these contigs into one linear genome, which may be helpful for downstream functional analysis.</p>
    </sec>
    <sec id="Sec6">
      <title>Comparing the performances of VirAmp with other assembly pipelines</title>
      <p>To assess the performance of our assembly pipeline, we used three different HSV-1 sequencing datasets for evaluation. We selected datasets from a virulent HSV-1 laboratory strain, a variant laboratory strain with a fluorescent protein inserted into the genome, and a clinical isolate of HSV-1. These datasets contain from 33 to 87 million Illumina HiSeq reads of paired-end, 100 bp × 100 bp sequence (Table <xref rid="Tab2" ref-type="table">2</xref>). Using previously published approaches [<xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref>], we de-multiplexed these sequence reads, trimmed off adaptor sequences, removed low quality bases, removed sequencing artifacts, and removed sequences matching the genome of the host cells used for growing viral stocks. The Utilities menu of VirAmp includes tools for these steps, but we did not incorporate these into the default pipeline because we anticipate user-customization at this phase (e.g. whether or not to de-multiplex, choice of host genome, etc.). We used the above datasets to compare our Velvet-based pipeline with two other standalone assembly pipelines, SPAdes [<xref ref-type="bibr" rid="CR11">11</xref>] and VICUNA [<xref ref-type="bibr" rid="CR4">4</xref>]. SPAdes is a pipeline optimized for genome assemblies on the bacteria scale. The SPAdes pipeline includes an error correction preprocessing step as well as mismatch correction as a post-assembly process. Its core assembler can make use of multiple k-mer sizes, taking advantage of both small and large k-mers to improve the assembly performance. Single-cell mode was applied in SPAdes using the authors’ recommended k-mer sizes (k = 21, 33, 55). The VICUNA pipeline is an alternative <italic>de novo</italic> assembly pipeline developed by the Broad Institute specifically for virus genome assembly. One of the advantages of VICUNA is that it performs a pre-filtering step to keep only reference-genome-like reads, which is extremely useful in host-contaminated samples such as viruses. We performed multiple rounds of VICUNA assembly and chose the best k-mer (k = 21) for this comparison. The core assemblers in both SPAdes and VICUNA have been integrated into our pipeline so that end-users may choose either one as alternatives to the default Velvet assembler.</p>
      <p>We compared the assemblies back to the trimmed HSV-1 reference genome (136 kb), and used N50, NG50 and REAPR [<xref ref-type="bibr" rid="CR22">22</xref>] scores to evaluate the performance of each assembly method, as recommended by Assemblathon 2 [<xref ref-type="bibr" rid="CR2">2</xref>] (Table <xref rid="Tab2" ref-type="table">2</xref>). We considered any contigs longer than 500 bp as a valid assembly output. All basic statistics except REAPR are calculated using a complete version of the QUAST [<xref ref-type="bibr" rid="CR15">15</xref>] report generated from our pipeline at the end of the assembly. The additional metric used here, REAPR, is a reference-free tool to evaluate the genome assemblies [<xref ref-type="bibr" rid="CR22">22</xref>]. This tool maps the paired reads back to the assemblies to evaluate accuracy per-base and per-scaffold. The REAPR score here was computed using version 1.0.16 under default settings, except for setting the mapping option –y to 0.9. The overall REAPR produces a score integrating three metrics: error free bases, original N50 and broken N50. This score summarizes aspects of local accuracy, overall assembly performance, and structural correctness at the scaffold level.</p>
      <p>According to the evaluation statistics, the VirAmp pipeline achieves the highest NG50 and REAPR score in all three HSV-1 datasets (Table <xref rid="Tab2" ref-type="table">2</xref>). In two of the three datasets the largest VirAmp contig covered about 75% of the whole genome. SPAdes retrieved one large contig with a length similar to the longest contig of VirAmp, but in all three test datasets more than 95% of the SPAdes contigs cannot be properly aligned back to the reference. This causes SPAdes to receive the lowest N50 and REAPR score among the three assemblers. VICUNA retrieved an assembly with a size similar to the reference and an acceptable number of contigs, but the largest contig it produced was only around 20kb, which is much shorter than the other two assemblers.</p>
      <p>In terms of computational resources, VirAmp analyzed the above datasets on a single 4 GB RAM CPU machine while neither SPAdes nor VICUNA could finish the job successfully using the same machine. For a dataset with ~20,000-fold coverage on average (e.g. HSV-1 lab strain, Table <xref rid="Tab2" ref-type="table">2</xref>) VirAmp finished the assembly within 1.5 hours, while the other two assemblers ran the same dataset with multiple CPUs (4 for SPAdes and 6 for VICUNA) with 4 GB RAM and took more than double the time to complete.</p>
    </sec>
  </sec>
  <sec id="Sec7" sec-type="conclusion">
    <title>Conclusion</title>
    <p>In this paper we describe a web-based virus genome assembly platform, VirAmp, which can be used to assemble high throughput sequencing data. Our pipeline makes use of several existing programs and connects them in a convenient interface. The pipeline makes use of recommended practices and can assemble extremely high coverage viral genome data with minimal computational resources. In addition, we provide a series of reporting and genome assembly analysis tools for evaluating the assemblies. All of our tools are wrapped into a Galaxy instance that individual groups can utilize at the demonstration website or run independently. The Galaxy platform and default pipeline will facilitate use by researchers without advanced programming skills, or without access to high-performance computing clusters.</p>
  </sec>
  <sec id="Sec8">
    <title>Availability and requirements</title>
    <p><bold>Project Name:</bold> VirAmp: A Galaxy-based virus genome assembly pipeline</p>
    <p>
      <bold>Project Homepage:</bold>
      <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link>
    </p>
    <p><bold>Operation System:</bold> Linux</p>
    <p><bold>Programming language</bold>: Python, Bash</p>
    <p><bold>Other requirements:</bold> None to use demonstration website or install using GitHub repository; Amazon web service account to launch own AMI</p>
    <p><bold>License:</bold> MIT License</p>
    <p><bold>Any restrictions to use by non-academics:</bold> None</p>
  </sec>
  <sec id="Sec9">
    <title>Availability of supporting data</title>
    <p>All tools described, as well as testing datasets, are available at the VirAmp demonstration website: <ext-link ext-link-type="uri" xlink:href="http://viramp.com/">http://viramp.com/</ext-link>. A GitHub repository is available for the present AMI and all future updates: <ext-link ext-link-type="uri" xlink:href="http://github.com/SzparaLab/viramp-project">http://github.com/SzparaLab/viramp-project</ext-link>. The VirAmp project is available via GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/SzparaLab/viramp-project/">https://github.com/SzparaLab/viramp-project/</ext-link>. The specific commit SHA at the time of publication is 5e8aaef12192165718c66d4919ed21bb308a4600. Detailed documentation for using VirAmp or for launching a new AMI is found at: <ext-link ext-link-type="uri" xlink:href="http://docs.viramp.com/">http://docs.viramp.com</ext-link>. Help notes are also embedded within each VirAmp tool. Within VirAmp, sample data is located under “Shared Data → Data Libraries”, including sequence read data for the three HSV-1 strains listed in Table <xref rid="Tab2" ref-type="table">2</xref>. A smaller fourth dataset containing a quarter million reads of HSV-1 is also included for instant testing of the VirAmp pipeline. These data are also hosted at the <italic>GigaScience</italic> Database [<xref ref-type="bibr" rid="CR23">23</xref>].</p>
    <p>A workflow has been published under “Shared Data → Published Workflows”. Two sample histories have been published under “Shared Data → Published Histories”, both of which use the HSV-1 lab strain dataset. The first of these, “workflow-pe-hist”, was run with the published workflow while the other, “entire-pipeline-pe-hist”, was run with the prepackaged pipeline (“Entire Pipeline → Paired-end pipeline”). Due to the non-deterministic nature of <italic>de novo</italic> assembly described above, the results from each run of the pipeline may vary slightly, normally within 10 bp.</p>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec10">
        <title>Additional file</title>
        <p>
          <media position="anchor" xlink:href="13742_2015_60_MOESM1_ESM.docx" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p>
                <bold>(Word document) Table of contig coordinates for step-wise assembly of an HSV-1 laboratory strain, in comparison to the HSV-1 reference genome.</bold>
              </p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>HSV</term>
        <def>
          <p>Herpes simplex virus</p>
        </def>
      </def-item>
      <def-item>
        <term>INDEL</term>
        <def>
          <p>Insertions and deletions</p>
        </def>
      </def-item>
      <def-item>
        <term>MSA</term>
        <def>
          <p>Multiple sequence alignment</p>
        </def>
      </def-item>
      <def-item>
        <term>OLC</term>
        <def>
          <p>Overlap-layout-consensus</p>
        </def>
      </def-item>
      <def-item>
        <term>SNP</term>
        <def>
          <p>Single Nucleotide Polymorphism</p>
        </def>
      </def-item>
      <def-item>
        <term>VCF</term>
        <def>
          <p>Variant call format</p>
        </def>
      </def-item>
      <def-item>
        <term>VirAmp</term>
        <def>
          <p>Viral genome assembly pipeline</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>Yinan Wan and Daniel W Renner contributed equally to this work.</p>
    </fn>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>YW, IA, and MLS conceived of the study. YW coded the VirAmp pipeline and tested the outcomes using test data provided by MLS. DWR participated in code optimization and website revisions for the resubmission. YW, DWR, IA, and MLS vetted the pipeline and contributed to the manuscript. All authors read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>MLS is funded by NIH grant K22 AI095384. The authors thank members of the Enquist lab at Princeton University and the Szpara lab at Penn State University for provision of data used for pipeline testing.</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <fpage>557</fpage>
        <lpage>67</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bradnam</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Fass</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Alexandrov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Baranay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bechner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 2: evaluating de novo methods of genome assembly in three vertebrate species</article-title>
        <source>GigaSci</source>
        <year>2013</year>
        <volume>2</volume>
        <fpage>10</fpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-2-10</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Giardine</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Riemer</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hardison</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Burhans</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Elnitski</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Shah</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Galaxy: a platform for interactive large-scale genome analysis</article-title>
        <source>Genome Res</source>
        <year>2005</year>
        <volume>15</volume>
        <fpage>1451</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.4086505</pub-id>
        <?supplied-pmid 16169926?>
        <pub-id pub-id-type="pmid">16169926</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Charlebois</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gnerre</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Coole</surname>
            <given-names>MG</given-names>
          </name>
          <name>
            <surname>Lennon</surname>
            <given-names>NJ</given-names>
          </name>
          <name>
            <surname>Levin</surname>
            <given-names>JZ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of highly diverse viral populations</article-title>
        <source>BMC Genomics</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>475</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-13-475</pub-id>
        <?supplied-pmid 22974120?>
        <pub-id pub-id-type="pmid">22974120</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Maclean D, Jones JDG, Studholme DJ. Application of next generation sequencing technology to microbial genetics. Nat Rev Micro. 2009;7:287–96.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Comparative genome assembly</article-title>
        <source>Brief Bioinform</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>237</fpage>
        <lpage>48</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/5.3.237</pub-id>
        <?supplied-pmid 15383210?>
        <pub-id pub-id-type="pmid">15383210</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>821</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.074492.107</pub-id>
        <?supplied-pmid 18349386?>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brown</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Howe</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Pyrkosz</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Brom</surname>
            <given-names>TH</given-names>
          </name>
        </person-group>
        <article-title>A reference-free algorithm for computational normalization of shotgun sequencing data</article-title>
        <source>arXiv preprint arXiv</source>
        <year>2012</year>
        <volume>1203</volume>
        <fpage>4802</fpage>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">seqtk: Toolkit for processing sequences in FASTA/Q formats. [<ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/seqtk/">https://github.com/lh3/seqtk/</ext-link>].</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>357</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <?supplied-pmid 22388286?>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <fpage>455</fpage>
        <lpage>77</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sanger</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Nicklen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Coulson</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>DNA sequencing with chain-terminating inhibitors</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <year>1977</year>
        <volume>74</volume>
        <fpage>5463</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.74.12.5463</pub-id>
        <?supplied-pmid 271968?>
        <pub-id pub-id-type="pmid">271968</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boetzer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Henkel</surname>
            <given-names>CV</given-names>
          </name>
          <name>
            <surname>Jansen</surname>
            <given-names>HJ</given-names>
          </name>
          <name>
            <surname>Butler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pirovano</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Scaffolding pre-assembled contigs using SSPACE</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>578</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq683</pub-id>
        <?supplied-pmid 21149342?>
        <pub-id pub-id-type="pmid">21149342</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1754</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id>
        <?supplied-pmid 19451168?>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Vyahhi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>QUAST: quality assessment tool for genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <fpage>1072</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>
        <?supplied-pmid 23422339?>
        <pub-id pub-id-type="pmid">23422339</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kurtz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Smoot</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Antonescu</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <fpage>R12</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id>
        <?supplied-pmid 14759262?>
        <pub-id pub-id-type="pmid">14759262</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krzywinski</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Connors</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gascoyne</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Horsman</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Circos: an information aesthetic for comparative genomics</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>1639</fpage>
        <lpage>45</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.092759.109</pub-id>
        <?supplied-pmid 19541911?>
        <pub-id pub-id-type="pmid">19541911</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Szpara ML, Parsons L, Enquist LW. Sequence variability in clinical andlaboratory isolates of herpes simplex virus 1 reveals new mutations. J Virol. 2010;84:5303–13.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Szpara ML, Tafuri YR, Parsons L, Shamim SR, Verstrepen KJ, Legendre M, et al. A wide extent of inter-strain diversity in virulent and vaccine strains of alphaherpesviruses. PLoS Pathog. 2011;7:e1002282.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Roizman B, Knipe DM, Whitley R. Herpes Simplex Viruses. In: Howley PM and Knipe DM, editors. Fields Virology. 6th ed. Philadelphia, PA: Lippincott Williams &amp; Wilkins; 2013.p. 1823–97.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">McGeoch DJ. The genomes of the human herpesviruses: contents, relationships, and evolution. Annu Rev Microbiol. 1989;43:235–65.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kikuchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sanders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>REAPR: a universal tool for genome assembly evaluation</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>R47</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-5-r47</pub-id>
        <?supplied-pmid 23710727?>
        <pub-id pub-id-type="pmid">23710727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Wan Y, Renner DW, Albert I, Szpara ML. Supporting materials for: “VirAmp: A Galaxy-based viral genome assembly pipeline”. GigaScience Database. 2014. [<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5524/100113">http://dx.doi.org/10.5524/100113</ext-link></mixed-citation>
    </ref>
  </ref-list>
</back>
