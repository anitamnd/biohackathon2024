<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8771625</article-id>
    <article-id pub-id-type="publisher-id">2587</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-021-02587-6</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Strainline: full-length de novo viral haplotype reconstruction from noisy long reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Luo</surname>
          <given-names>Xiao</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" equal-contrib="yes">
        <name>
          <surname>Kang</surname>
          <given-names>Xiongbin</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3529-0856</contrib-id>
        <name>
          <surname>Schönhuth</surname>
          <given-names>Alexander</given-names>
        </name>
        <address>
          <email>a.schoenhuth@cwi.nl</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.6054.7</institution-id><institution-id institution-id-type="ISNI">0000 0004 0369 4183</institution-id><institution>Life Science &amp; Health, </institution><institution>Centrum Wiskunde &amp; Informatica, </institution></institution-wrap>Amsterdam, Netherlands </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.7491.b</institution-id><institution-id institution-id-type="ISNI">0000 0001 0944 9128</institution-id><institution>Genome Data Science, Faculty of Technology, </institution><institution>Bielefeld University, </institution></institution-wrap>Bielefeld, Germany </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>1</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>1</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>23</volume>
    <elocation-id>29</elocation-id>
    <history>
      <date date-type="received">
        <day>25</day>
        <month>6</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>17</day>
        <month>12</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Haplotype-resolved de novo assembly of highly diverse virus genomes is critical in prevention, control and treatment of viral diseases. Current methods either can handle only relatively accurate short read data, or collapse haplotype-specific variations into consensus sequence. Here, we present Strainline, a novel approach to assemble viral haplotypes from noisy long reads without a reference genome. Strainline is the first approach to provide strain-resolved, full-length de novo assemblies of viral quasispecies from noisy third-generation sequencing data. Benchmarking on simulated and real datasets of varying complexity and diversity confirm this novelty and demonstrate the superiority of Strainline.</p>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at (10.1186/s13059-021-02587-6).</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Haplotype</kwd>
      <kwd>Virus</kwd>
      <kwd>SARS-CoV-2</kwd>
      <kwd>Long reads</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100010890</institution-id>
            <institution>chinese government scholarship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>Not applicable</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100010890</institution-id>
            <institution>chinese government scholarship</institution>
          </institution-wrap>
        </funding-source>
        <award-id>Not applicable</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>NWO</institution>
        </funding-source>
        <award-id>639.072.309</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010665</institution-id>
            <institution>H2020 Marie Sklodowska-Curie Actions</institution>
          </institution-wrap>
        </funding-source>
        <award-id>956229</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010665</institution-id>
            <institution>H2020 Marie Sklodowska-Curie Actions</institution>
          </institution-wrap>
        </funding-source>
        <award-id>872539</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Universität Bielefeld (3146)</institution>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Viruses such as HIV, ZIKV, and Ebola lack proofreading mechanisms when they replicate themselves with RNA-dependent RNA polymerase (RdRp) [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. Therefore, they are characterized by high mutation rates, and commonly populate hosts as a collection of closely related strains which differ by only small amounts of variants, and which together are referred to as viral quasispecies [<xref ref-type="bibr" rid="CR3">3</xref>]. The genetic diversity of viral quasispecies plays an important role in viral evolution. Among others, it contributes to tissue tropism, virus transmission, disease progression, virulence and drug/vaccine resistance [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR6">6</xref>]. In addition, biological functionalities or phenotypic appearance can differ substantially across different strains [<xref ref-type="bibr" rid="CR7">7</xref>]. Currently, the COVID-19 pandemic puts the necessity to monitor the outbreak of viruses, to track their evolutionary history, and to develop effective vaccines and drugs in the spotlight of greater public interest. To accurately account for these issues, accurate reconstruction of strain-resolved genomes can be very helpful, if not even necessary.</p>
    <p>It is the general, ultimate goal of viral quasispecies assembly to reconstruct the individual, strain-specific haplotypes at their <italic>full length</italic>. Further, along with strain identity-preserving sequence, accurate <italic>estimates of strain abundances</italic> are required for full quantification of infections at the RNA/DNA level. Notwithstanding the short size of virus genomes, it is still a challenge because within a viral quasispecies (i) closely related strains share plenty of near-identical genomic fragments, (ii) single strains are affected by repetitive regions [<xref ref-type="bibr" rid="CR8">8</xref>], (iii) the number of strains is unknown, and (iv) the abundances of strains vary across the strains, which is further aggravated by read coverage fluctuations along the genomes.</p>
    <p>So far, existing methods for viral quasispecies assembly can be classified into <italic>reference-based</italic> approaches on the one hand and de novo (reference free) approaches on the other hand; see [<xref ref-type="bibr" rid="CR9">9</xref>] for a recent review of related approaches. Reference-based methods such as ShoRAH [<xref ref-type="bibr" rid="CR10">10</xref>], PredictHaplo [<xref ref-type="bibr" rid="CR11">11</xref>] and CliqueSNV [<xref ref-type="bibr" rid="CR12">12</xref>] require high quality reference for reliable reconstruction of strains and, apart from rare exceptions [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR12">12</xref>], mainly have been specializing in processing relatively error-free short read data. Importantly, high quality reference genomes may not be available precisely when they are needed the most: very often, new outbreaks of known viruses are caused by virus variants that significantly deviate from curated reference sequence [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>]. Last but not least, reference-guided methods are prone to introducing biases and can be blind with respect to crucial variant-related details in genomic regions of particular interest [<xref ref-type="bibr" rid="CR15">15</xref>, <xref ref-type="bibr" rid="CR16">16</xref>].</p>
    <p>De novo (reference free) viral quasispecies assembly tools, such as SAVAGE [<xref ref-type="bibr" rid="CR16">16</xref>] or viaDBG [<xref ref-type="bibr" rid="CR17">17</xref>], both are able to employ overlap and de Bruijn graph-based techniques to assemble NGS reads into haplotype-specific contigs (a.k.a. haplotigs), where the two assembly paradigms, overlap vs de Bruijn graph based, come with different advantages and disadvantages. The resulting contigs of these short read based approaches tend to be too short to span genomes at their full length. The reason are sequence patches that are shared by different strains (and also repetitive areas within strains), which induce ambiguities that cannot be overcome by short reads themselves. For computing full-length genomes, one can try to leverage the strain-specific abundances, which allows to bridge contigs across otherwise ambiguous stretches of sequences. To this end, methods such as Virus-VG [<xref ref-type="bibr" rid="CR18">18</xref>] and VG-Flow [<xref ref-type="bibr" rid="CR19">19</xref>] have been developed, the latter approach of which introduced flow variation graphs as a computational concept of potential greater value. Because the runtime is polynomial in the length of the genomes, VG-Flow [<xref ref-type="bibr" rid="CR19">19</xref>] can also be used for bacteria sized genomes.</p>
    <p>We recall that all these existing approaches focus on viral haplotype reconstruction from <italic>short and accurate next-generation sequencing (NGS) reads</italic>, as generated most prominently by Illumina platforms. Again, the fact that short reads fail to span inter- and intra-genomic identical regions crucially hampers the process of reconstructing full-length viral haplotypes. Leveraging strain-specific abundances, as implemented by VG-Flow [<xref ref-type="bibr" rid="CR18">18</xref>] for example, are not necessarily able to output full-length, strain-specific assembled sequence for certain viruses, such as ZIKV and Polio.</p>
    <p><italic>Quite apparently, virus genome assembly methods have approached their limits when operating with short read NGS data.</italic> Processing long and noisy third-generation sequencing (TGS) data, such as generated by Pacific BioSciences (PacBio), performing single-molecule real-time (SMRT) sequencing, and Oxford Nanopore Technologies (ONT), performing nanopore sequencing, as the currently two most popular sequencing platforms, offers rescue.</p>
    <p>The length of TGS reads ranges from several Kbp to hundreds of Kbp, or even to ∼Mbp [<xref ref-type="bibr" rid="CR20">20</xref>]. TGS reads enable to span intra-genomic repeats and areas shared by different genomes, hence cover regions that are unique to single strains [<xref ref-type="bibr" rid="CR8">8</xref>]. So, in comparison with NGS reads, TGS reads have considerably greater potential to resolve ambiguities across different strains. The drawback of TGS reads are the elevated error rates they are affected with. Unlike for NGS platforms (sequencing error rate &lt;1<italic>%</italic>), error rates of PacBio CLR and ONT reads range from 5 to 15%, which raises the issue of sequencing errors to a greater order of magnitude.</p>
    <p>There are a handful of de novo assembly methods that specialize in processing error-prone long reads such as FALCON [<xref ref-type="bibr" rid="CR21">21</xref>], Canu [<xref ref-type="bibr" rid="CR22">22</xref>], Flye [<xref ref-type="bibr" rid="CR23">23</xref>], Wtdbg2 [<xref ref-type="bibr" rid="CR24">24</xref>], and Shasta [<xref ref-type="bibr" rid="CR25">25</xref>], all of which have been published fairly recently. None of these approaches makes a decided attempt to generate haplotype-(strain-) resolved genomic sequence. Rather, these approaches choose to output <italic>consensus</italic> sequence, as a summary across several or all haplotypes/strains in the mix. In other words, all of the de novo assemblers presented in the literature so far fall under the category “generic (or consensus) assembler”.</p>
    <p>In addition, metaFlye, originally designed to perform assembly of metagenomes, operates at the level of species [<xref ref-type="bibr" rid="CR26">26</xref>], so neglects to resolve individual genomes at the level of strains.</p>
    <p>
      <italic>In conclusion, haplotype-aware assembly of viral quasispecies from erroneous long reads can still be considered an unsolved problem: no method is able to address the issue satisfyingly.</italic>
    </p>
    <p>Here, we pursue a novel strategy to resolve the issue. In that, to the best of our knowledge, our approach is the first one to accurately reconstruct the haplotypes of viral quasispecies from third-generation sequencing reads. We recall that processing long TGS reads appears to be the only current option to reconstruct genomes at the level of strains, for the majority of the currently predominant viruses.</p>
    <p>In a brief description (see below for details), our novel strategy consists of <italic>local de Bruijn graph-based assembly</italic> in a first step that addresses to wipe out errors. Subsequently, we turn our attention to an overlap graph-based scheme by which to iteratively extend haplotype-specific contigs (haplotigs) into full-length haplotypes. After a filtering step that removes artifacts and preserves true sequence, our approach outputs a set of haplotypes—a large fraction of which appear to have reached full length—together with the relative abundances of the haplotypes within the mix of haplotypes.</p>
    <p>We evaluate our approach on various virus datasets that have been approved earlier in the literature. For each dataset, we process both PacBio CLR reads and ONT reads, as the two most predominant types of TGS reads. Benchmarking results on both simulated and real data confirm our claims: our approach accurately reconstructs all full-length haplotypes and delivers sufficiently accurate estimates of their relative abundances.</p>
    <p>We also compare our approach with the current state of the art. We recall however that none of the current approaches decidedly addresses the issue of strain-resolved viral quasispecies assembly from long reads. As a consequence, our approach outperforms the state of the art rather drastically. Our approach has its greatest advantages in terms of haplotype coverage, reaching nearly 100% on the majority of datasets. Other methods never get beyond 60–85% (if they get there at all; in particular on ONT data, alternative approaches reach their limit substantially earlier). Further marked advantages are assembly contiguity (measured as per N50 or NGA50) and accuracy (expressed by low error rates and little misassembled contigs). A currently particularly interesting application scenario is the assembly of haplotype-resolved genomes of SARS-CoV-2, because strain resolution will sharpen our understanding about mutation rates and evolutionary development of the virus. Also in this scenario of particular current interest, our approach demonstrates to outperform all existing approaches by fairly large margins.</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <p>We have designed and implemented Strainline, a novel approach that implements the strategy as sketched above. We will describe Strainline in full detail in the following.</p>
    <p>In a short summary, Strainline reconstructs full-length, strain-resolved viral haplotypes from noisy long read (TGS read) sequencing data. Strainline is a de novo assembler, so does not have to rely on available reference sequence. Therefore, Strainline operates free of biases induced by prior knowledge, which has been pointed out in earlier work as a notorious source of issues.</p>
    <p>In this section, we provide a high-level description of the workflow and evaluate its performance on both simulated and real data, in comparison with existing state-of-the-art tools. In our comparisons, we focus on both generic and metagenome assembly approaches that are able to process long reads without having to rely on reference sequence, which matches the conditions under which Strainline is able to operate.</p>
    <sec id="Sec3">
      <title>Approach</title>
      <p>See Fig. <xref rid="Fig1" ref-type="fig">1</xref> for an illustration of the overall workflow of Strainline. Here, we describe the workflow briefly. For detailed descriptions of the individual steps, we refer to the “<xref rid="Sec21" ref-type="sec">Methods</xref>” section.
<fig id="Fig1"><label>Fig. 1</label><caption><p>The workflow of Strainline. The reads with different colors are from different haplotypes or strains. The pink fork represents the sequencing error, i.e. mismatch, insertion or deletion. The two steps <italic>Seed-vs-all overlaps</italic> and <italic>Read clustering</italic> are executed simultaneously (see Algorithm 1 for details). Hap1_A and Hap1_B denote two subsequences (not full-length) of haplotype 1 (Hap1), the same for Hap2_A and Hap2_B. There still may be very few remaining sequencing errors in corrected reads such as in the corresponding read cluster of Hap1_A, and incorrectly clustered reads such as the ’blue read’ in the corresponding read cluster of Hap2_B. Nevertheless, these errors will be eliminated through <italic>Consensus</italic> step</p></caption><graphic xlink:href="13059_2021_2587_Fig1_HTML" id="MO1"/></fig></p>
      <p>Strainline consists of three stages. The first stage addresses to correct sequencing errors in the raw long reads, for which it employs <italic>local de Bruijn graph assembly</italic>. The second stage addresses to iteratively extend haplotype-specific contigs into full-length haplotype-specific genomes, based on an overlap based strategy. The third stage, finally, is for filtering the resulting contigs so as to remove haplotypes of too low divergence in comparison with others (so likely reflect errors instead of strain-specific variation), or too low abundance (so likely reflect artifacts). The eventual output is a set of full-length haplotypes along with their corresponding relative frequencies, clear of errors and artifacts.</p>
      <p>In general, de Bruijn graph-based approaches tend to be inappropriate for TGS read data, because of the elevated error rates that apply. Rather unexpectedly, we found a (local) de Bruijn graph-based approach, originally developed for long genomes, to effectively work for genomes of tens of thousands of nucleotides in length when provided with sufficiently deep coverage [<xref ref-type="bibr" rid="CR27">27</xref>]. Apparently, the superiority of the approach when dealing with virus genome settings had passed unnoticed earlier.</p>
      <p>See Fig. <xref rid="Fig2" ref-type="fig">2</xref> for the following. Given a target read to be corrected, the corresponding strategy considers the reads that overlap the target read, where overlaps are determined based on evaluating canonical k-mers (“Target read &amp; overlapping reads” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>). The resulting overlapping reads together with its target read form a read alignment pile that is divided into small windows (“Read alignment pile” and “Windows” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Subsequently, a de Bruijn graph is constructed for each such small window (“DBGs for all windows” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>)). Based on evaluating this de Bruijn graph, an optimal consensus sequence is determined, which reflects the error corrected, true sequence of the target read (see “Window consensus” and “Read consensus” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>).
<fig id="Fig2"><label>Fig. 2</label><caption><p>The schematic diagram for the sequencing error correction procedure of raw reads. In the top region, the bold solid line denotes the target raw read <italic>i</italic>, and the overlapping reads of the target read <italic>i</italic> are drawn dashed outside of the read alignment pile and solid inside of it. The pink fork represents the sequencing error, i.e. mismatch, insertion or deletion. The read alignment pile is split into <italic>k</italic> small windows, representing as Win 1, Win 2,... Win <italic>k</italic>. DBG is short for de Bruijn Graph. Window consensus refers to the highest scoring sequences (see main text for explanations) through the DBGs of small windows over the read alignment pile. The region filled with gray rhombus between two window consensus denotes the overlap between them (30bp). We perform the error correction step for each raw read</p></caption><graphic xlink:href="13059_2021_2587_Fig2_HTML" id="MO2"/></fig></p>
      <p>The second stage falls into two sub-steps. Firstly, Strainline determines read clusters where each of the clusters reflects a collection of reads that overlap each other in terms of genomic position (computed by “Algorithm 1” in Fig. <xref rid="Fig1" ref-type="fig">1</xref>). Secondly, Strainline uses a partial order alignment (POA) algorithm to yield a consensus sequence for each read cluster. These consensus sequences are expected to be haplotype-specific contigs (haplotigs). The haplotigs are then iteratively extended into full-length haplotypes.</p>
      <p>The third and final stage is to filter haplotypes having very low divergence or very low relative abundance. Most likely, such haplotypes were introduced due to redundant or spurious sequences. See the “<xref rid="Sec21" ref-type="sec">Methods</xref>” section for full details on each of the stages involved in the overall workflow.</p>
    </sec>
    <sec id="Sec4">
      <title>Datasets</title>
      <p>For the following, see also Table <xref rid="Tab1" ref-type="table">1</xref> for characteristics of both simulated and experimental data, and see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1 in the Supplement for accession numbers of the corresponding source genomes.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Characteristics of benchmarking data sets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Virus mixture</th><th align="left">Virus type</th><th align="left">#Strain</th><th align="left">Genome size (bp)</th><th align="left">Coverage</th><th align="left">Divergence (%)</th><th align="left">Strain abundance (%)</th></tr></thead><tbody><tr><td align="left"><italic>Simulated</italic></td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left">5-strain HIV</td><td align="left">HIV-1</td><td align="left">5</td><td align="left">9478–9719</td><td align="left">20,000 ×</td><td align="left">2.7–5.6</td><td align="left">10, 15, 20, 25, 30</td></tr><tr><td align="left">6-strain Poliovirus</td><td align="left">Poliovirus-2</td><td align="left">6</td><td align="left">7428–7460</td><td align="left">20,000 ×</td><td align="left">0.2–5.5</td><td align="left">2, 4, 8, 16, 20, 50</td></tr><tr><td align="left">6-strain Poliovirus (la1)</td><td align="left">Poliovirus-2</td><td align="left">6</td><td align="left">7428–7460</td><td align="left">20,000 ×</td><td align="left">0.2–5.5</td><td align="left">0.1, 1, 2, 8, 20, 68.9</td></tr><tr><td align="left">6-strain Poliovirus (la2)</td><td align="left">Poliovirus-2</td><td align="left">6</td><td align="left">7428–7460</td><td align="left">20,000 ×</td><td align="left">0.2–5.5</td><td align="left">0.01, 0.1, 1, 2, 8, 88.89</td></tr><tr><td align="left">10-strain HCV</td><td align="left">HCV-1a</td><td align="left">10</td><td align="left">9273–9311</td><td align="left">20,000 ×</td><td align="left">2.8–7.4</td><td align="left">5, 6, 7, 8, 9, 11, 12, 13, 14, 15</td></tr><tr><td align="left">15-strain ZIKV</td><td align="left">ZIKV</td><td align="left">15</td><td align="left">10,251–10,269</td><td align="left">20,000 ×</td><td align="left">1.1–15.1</td><td align="left">2, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10, 12</td></tr><tr><td align="left">5-strain SARS-CoV-2</td><td align="left">SARS-CoV-2</td><td align="left">5</td><td align="left">26,574–29,903</td><td align="left">20,000 ×</td><td align="left">0.3–1.1</td><td align="left">10, 15, 20, 25, 30</td></tr><tr><td align="left">5-strain SARS-CoV-2 (la)</td><td align="left">SARS-CoV-2</td><td align="left">5</td><td align="left">26,574–29,903</td><td align="left">20,000 ×</td><td align="left">0.3–1.1</td><td align="left">0.1, 1, 5, 10, 83.9</td></tr><tr><td align="left"><italic>Experimental</italic></td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left">5-strain PVY (Mock)</td><td align="left">PVY</td><td align="left">5</td><td align="left">9694–9701</td><td align="left">5800 ×</td><td align="left">3.6–21.6</td><td align="left">9.3, 12.7, 21.1, 24.4, 32.5</td></tr><tr><td align="left">SARS-CoV-2 (Real)</td><td align="left">SARS-CoV-2</td><td align="left">-</td><td align="left">-</td><td align="left">12,000 ×</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><table-wrap-foot><p>For each benchmarking data set, we specify the name of virus mixture, virus type, number of strains in the mixture, range of genome size, total sequencing coverage, pairwise divergence, and strain abundance spectrum. The pairwise divergence is equal to 1−ANI, where ANI (Average Nucleotide Identity) is calculated by FastANI [<xref ref-type="bibr" rid="CR31">31</xref>]. In experimental data sets, 5-strain PVY is a mock community, that is the sequencing data is real, but the mixture is synthetic, whereas SARS-CoV-2 (Real) is a real sample so there is no ground truth for the strains. The data sets 6-strain Poliovirus (la1) and 6-strain Poliovirus (la2) are similar with 6-strain Poliovirus, except the lowest abundance (la) of strains extends to 0.1% and 0.01%, respectively. The data set 5-strain SARS-CoV-2 (la) is similar with 5-strain SARS-CoV-2 except the lowest abundance (la) of strains extends to 0.1%</p></table-wrap-foot></table-wrap></p>
      <sec id="Sec5">
        <title>Simulated data</title>
        <p>We simulated various datasets using both PacBio and ONT long read sequencing technologies, yielding the common (PacBio CLR and ONT), high sequencing error rates (5% ∼15%), using PBSIM V1.0.3 [<xref ref-type="bibr" rid="CR28">28</xref>] and NanoSim V2.6.0 [<xref ref-type="bibr" rid="CR29">29</xref>], as approved read simulators. We used four virus mixture datasets (HIV, Poliovirus, HCV, and ZIKV), similar in terms of composition of strains to those presented by [<xref ref-type="bibr" rid="CR18">18</xref>]. We further generated one additional dataset reflecting a SARS-CoV-2 quasispecies, composed of 5 strains (note that the number of SARS-CoV-2 strains that affect one individual is entirely unclear at this point, because of the lack of analysis tools). Notably, it is very common to perform ultra-deep sequencing supported by the short length of the viral genome (7 ∼30kbp in our cases) [<xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR30">30</xref>]. Therefore, we uniformly set the overall sequencing depth (the sum of average depth of each strain) as ∼20,000× on all simulated datasets, which reflects common real world practice.</p>
        <p>Additionally, in order to evaluate the effect of sequencing coverage, we generated 5-strain HIV datasets at an error rate of 10% and varying coverage, of overall depths of 500×,1000×,2000×,5000×,10,000× and 20,000×, respectively, while relative frequencies of strains did not change. More details about simulated data are shown in <xref rid="Sec27" ref-type="sec">Data simulation</xref>.</p>
        <p><bold>5-strain HIV mixture.</bold> This dataset consists of five known HIV-1 strains (YU2, NL43, JRCSF, HXB2, 896), as originally presented in [<xref ref-type="bibr" rid="CR30">30</xref>]. Strains were simulated at relative abundances between 10 and 30%, i.e. a sequencing coverage of 2000× to 6000× per strain. This virus mixture is one of the most challenging datasets, because the highly repetitive regions in the HIV genome, which usually hamper the performance of short-read-based assemblers [<xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR30">30</xref>].</p>
        <p><bold>6-strain Poliovirus mixture.</bold> This mixture contains six strains of Poliovirus (Type 2), with exponentially increasing relative abundances from 2% to 50%. The haplotype sequences were downloaded from the NCBI database. In addition, we simulated <italic>la1</italic> and <italic>la2</italic>, as two more data sets reflecting 6 Poliovirus strains, where la1 contains strains of abundance as low as 0.1% and la2 contains strains of abundance as low as 0.01%; see Table <xref rid="Tab1" ref-type="table">1</xref> for a full description of these data sets in terms of strains and their abundances.</p>
        <p><bold>10-strain HCV mixture.</bold> This mixture contains ten strains of hepatitis C virus (HCV), Subtype 1a, with relative frequencies varying from 5 to 15% per haplotype. The haplotype sequences were also obtained from the NCBI database.</p>
        <p><bold>15-strain ZIKV mixture.</bold> This mixture consists of fifteen strains of Zika virus (ZIKV), of which three master strains were obtained from the NCBI database and four mutants were generated per master strain by randomly introducing mutations. The relative frequency of strains varies between 2 and 12%.</p>
        <p><bold>5-strain SARS-CoV-2 mixture.</bold> This mixture consists of five strains of SARS-CoV-2, with the relative frequencies varying from 10% to 30%. The true haplotype sequences (high quality without N bases) were extracted from different regions (namely, Belgium, Egypt, Oman, USA, China) in the GISAID (<ext-link ext-link-type="uri" xlink:href="https://www.gisaid.org/">https://www.gisaid.org/</ext-link>) database. In addition, resembling the Poliovirus data sets, we simulated <italic>la</italic>, as a data set containing 5-strains SARS-CoV-2 where two strains come at abundances as low as 1% and 0.1%, respectively; see again Table <xref rid="Tab1" ref-type="table">1</xref> for a detailed description.</p>
      </sec>
      <sec id="Sec6">
        <title>Experimental data</title>
        <p>To evaluate our method on real sequencing data, we downloaded two experimental datasets for benchmarking analysis.</p>
        <p><bold>5-strain PVY mixture.</bold> This dataset consists of five Potato virus Y (PVY) strains. The true sequences of five strains were accessed from GenBank under accession numbers MT264731–MT264741. The corresponding real ONT reads were obtained from the SRA database under BioProject PRJNA612026, as recently presented in [<xref ref-type="bibr" rid="CR32">32</xref>]. We downloaded long read sequencing data for each strain and then mixed them together to generate a pseudo virus mixture (mock community), where strains have relative frequencies varying from 9 to 33% and the total sequencing depth is approximate 5800 ×.</p>
        <p><bold>SARS-CoV-2 real sample.</bold> This dataset is Oxford Nanopore sequencing (GridION) data of a real SARS-CoV-2 sample, as downloaded from the SRA database: <ext-link ext-link-type="uri" xlink:href="https://trace.ncbi.nlm.nih.gov/Traces/sra/?study=SRP250446">SRP250446</ext-link>. The N50 of the length of the reads is 2.5 kbp, the average sequencing error rate is approximately 10% and the average sequencing coverage is about 12,000 ×.</p>
      </sec>
    </sec>
    <sec id="Sec7">
      <title>Benchmarking: alternative approaches</title>
      <p>We recall that Strainline is unique insofar as it is the first approach to determine the haplotype/strain-specific genomes of viruses from long reads de novo. For the sake of a meaningful comparison, we chose long read de novo assemblers that are designed to deal with mixed samples (in other words, designed for metagenome assembly), such as Canu [<xref ref-type="bibr" rid="CR22">22</xref>] and metaFlye [<xref ref-type="bibr" rid="CR26">26</xref>], on the one hand, and generic (consensus) de novo assemblers, such as Wtdbg2 [<xref ref-type="bibr" rid="CR24">24</xref>] and Shasta [<xref ref-type="bibr" rid="CR25">25</xref>] on the other hand. Of those, we subsequently excluded metaFlye, because it failed to perform the assemblies on our datasets<xref ref-type="fn" rid="Fn1">1</xref>. Shasta returned too many fragmented contigs, indicating that no real assembly was computed. For fairness reasons—we recall that all tools were originally designed for different purposes, but not strain aware virus genome assembly—we excluded metaFlye and Shasta from further consideration. For Canu, we used the parameters recommended for metagenome assembly, and we ran Wtdbg2 with default parameters. The output contigs were then subject to being evaluated.</p>
      <p>In addition, we also benchmarked reference-guided methods such as PredictHaplo [<xref ref-type="bibr" rid="CR11">11</xref>] and CliqueSNV [<xref ref-type="bibr" rid="CR12">12</xref>], which can reconstruct haplotypes from long-read sequencing data. However, we failed to run PredictHaplo on our long-read data sets (we have reported the so far unresolved issue at <ext-link ext-link-type="uri" xlink:href="https://github.com/cbg-ethz/PredictHaplo/issues/1">https://github.com/cbg-ethz/PredictHaplo/issues/1</ext-link>). For CliqueSNV, we reported results for PacBio data since CliqueSNV has not been validated on ONT data by far as much as PacBio (and Illumina) data.</p>
    </sec>
    <sec id="Sec8">
      <title>Performance evaluation</title>
      <sec id="Sec9">
        <title>Assembly metrics</title>
        <p>In the evaluation, we considered all relevant categories, as output by QUAST V5.1.0 [<xref ref-type="bibr" rid="CR33">33</xref>], as a prominent assembly evaluation tool. As is common, we discarded contigs of length less than 500 bp from the output of all tools. In particular, we ran the metaquast.py program with the option –unique-mapping appropriately taking into account that our data sets reflect mixed samples. In the following, we briefly define the metrics we are considering.</p>
        <p><bold>Haplotype coverage (HC).</bold> Haplotype coverage is the percentage of aligned bases in the ground truth haplotypes covered by haplotigs. Haplotype coverage is commonly used to measure the completeness in terms of genome diversity of the assembly.</p>
        <p><bold>N50 and NGA50.</bold> We also consider N50 and NGA50 to measure assembly contiguity, as per their standard definitions: N50 is the maximum value such that all contigs of at least that length cover at least half of the assembly, and NGA50 is the maximum value such that the contigs of at least that length cover at least half of the reference sequence when aligned against it (after breaking contigs at misassembly events and trimming all unaligned nucleotides); here, the reference sequence is taken to reflect the concatenation of all strain-specific genomes from which reads were simulated, or the canonical choices of reference sequences for real data otherwise.</p>
        <p><bold>Error rate (ER).</bold> The error rate is the fraction of mismatches, indels and N’s (i.e. ambiguous bases) in the alignment of the contigs with the reference sequences.</p>
        <p><bold>Misassembled contigs proportion (MC).</bold> If a contig involves at least one misassembly event, it is counted as <italic>misassembled contig</italic>. A misassembly event is given when contigs align with a gap or overlap of more than 1kbp, align to different strands, or even different haplotypes. As MC, we report the percentage of misassembled contigs relative to the overall number of output contigs.</p>
        <p><bold>Precision and recall.</bold> Because it was found helpful in evaluating virus genome assemblies earlier, we also report precision and recall. While precision refers to the fraction of contigs that align to the correct strain-specific sequence, recall refers to the fraction of strains that have a correctly aligned contig. Therefore, the edit distance of the alignment of the contig with the reference sequence must not exceed a threshold <italic>d</italic>, which can vary (e.g., 0%, 1%, 2%, 3%, 4%, 5%, see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S1–S3). In Results in the main text, the most stringent threshold 1% is used).</p>
      </sec>
      <sec id="Sec10">
        <title>Haplotype abundance evaluation</title>
        <p>Furthermore, we use two further metrics equally suggested in prior work as helpful for evaluating virus genome assembly quality [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR19">19</xref>]. Namely, we report the absolute frequency error (AFE) and the relative frequency error (RFE), which measure the deviation of the estimated abundances from the true abundances of the haplotypes. Let <italic>k</italic> be the number of true haplotypes. For a haplotype <italic>i</italic>∈{1,...,<italic>k</italic>}, let <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\widehat {a_{i}}$\end{document}</tex-math><mml:math id="M2"><mml:mover accent="false"><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>^</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="13059_2021_2587_Article_IEq1.gif"/></alternatives></inline-formula> and <italic>a</italic><sub><italic>i</italic></sub> be the estimated and true abundance of haplotype <italic>i</italic>, respectively. To determine <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\widehat {a_{i}}$\end{document}</tex-math><mml:math id="M4"><mml:mover accent="false"><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>^</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="13059_2021_2587_Article_IEq2.gif"/></alternatives></inline-formula>, we first collect all haplotigs that get aligned with <italic>i</italic>, and then add up the abundances of these haplotigs. Let further <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$I=\left \{ i\in [k]:\widehat {a_{i}}&gt;0 \right \}$\end{document}</tex-math><mml:math id="M6"><mml:mi>I</mml:mi><mml:mo>=</mml:mo><mml:mfenced close="}" open="{"><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mi>k</mml:mi><mml:mo>]</mml:mo><mml:mo>:</mml:mo><mml:mover accent="false"><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>^</mml:mo></mml:mover><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2021_2587_Article_IEq3.gif"/></alternatives></inline-formula> be all haplotypes that by their abundance were estimated to exist. One then calculates: <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\text {AFE} = \frac {1}{|I|}\sum _{i\in I}^{}|a_{i}-\widehat {a_{i}}|, \text {RFE} = \frac {1}{|I|}\sum _{i\in I}^{}|a_{i}-\widehat {a_{i}}|/a_{i}$\end{document}</tex-math><mml:math id="M8"><mml:mtext>AFE</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>I</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:mfrac><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>I</mml:mi></mml:mrow><mml:mrow/></mml:munderover><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mover accent="false"><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>^</mml:mo></mml:mover><mml:mo>|</mml:mo><mml:mo>,</mml:mo><mml:mtext>RFE</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>I</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:mfrac><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>I</mml:mi></mml:mrow><mml:mrow/></mml:munderover><mml:mo>|</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mover accent="false"><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>^</mml:mo></mml:mover><mml:mo>|</mml:mo><mml:mo>/</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2021_2587_Article_IEq4.gif"/></alternatives></inline-formula>.</p>
      </sec>
    </sec>
    <sec id="Sec11">
      <title>Benchmarking results</title>
      <p>We performed benchmarking experiments including all methods on the simulated and experimental data as described above, for both PacBio CLR and Oxford Nanopore reads. In a short summary of the results <italic>ex ante</italic>, Strainline manages to reconstruct all full-length haplotypes accurately from most of the mixed viral samples. Because truly specializing competing approaches are lacking, Strainline performs best in comparison with any alternative approach, by quite drastic margins.</p>
      <p><bold>Simulated PacBio CLR data.</bold> See Table <xref rid="Tab2" ref-type="table">2</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3. Strainline yields near-perfect assemblies on six out of eight datasets (HIV, Poliovirus, Poliovirus (la1), HCV, ZIKV, and SARS-CoV-2). That is, all ground truth haplotypes in the mixed samples are reconstructed to their full extent (HC ≈100%, recall =100%), at very low error rates (0.002% ∼0.3%) and without misassemblies. It also obtains the exact number of true haplotypes on four datasets (precision is 100%), and overestimates the number of haplotypes in the 6-strain Poliovirus (la1) mixture (precision =75%, recall =100<italic>%</italic>) and 5-strain SARS-CoV-2 mixture (precision =71.4%, recall =100<italic>%</italic>). Strainline fails to reconstruct all haplotypes on two datasets, namely, 6-strain Poliovirus (la2) (HC =65.3<italic>%</italic>) and 5-strain SARS-CoV-2 (la) (HC =60.8<italic>%</italic>). We recall that these two datasets are particularly challenging because they contain strains of very low abundance (0.01%, 0.1%) and divergence (0.2%, 0.3%); see Table <xref rid="Tab1" ref-type="table">1</xref> for details. Of note, while Strainline still accurately reconstructs Poliovirus strains of 0.1% (amounting to 20 × coverage), Strainline struggles to do that for SARS-CoV-2 strains. The explanation for this effect is the fact that the SARS-CoV-2 genome is 4 times longer than the Poliovirus genome (∼30,000 bp versus ∼7500 bp). The expected amount of coverage breaks for a 20 × covered strain in a 30,000 bp genome is too large to still allow for accurate full-length reconstruction, while still being feasible for genomes of 7500 bp in length. In addition, the low divergence increases the probability of ambiguous stretches in longer genomes. In comparison, both de novo assemblers (Canu and Wtdbg2) and reference-guided methods (CliqueSNV) struggle to reconstruct the haplotypes on all eight datasets, with Canu achieving only 49% to 85.9% haplotype coverage on these datasets. Canu further achieves 100% recall on SARS-CoV-2, but only 50% to 80% recall on the other seven datasets (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1). Notably, Strainline outperforms other tools in terms of precision on five datasets except that Canu achieves better precision on the 5-strain SARS-CoV-2 dataset and Wtdbg2 achieves better precision on 6-strain Poliovirus (la1), 5-strain SARS-CoV-2 and SARS-CoV-2 (la) datasets. The reason for Canu’s successes on the 5-strain SARS-CoV-2 dataset in terms of precision and recall is the fact that its assembly is heavily fragmented (Canu generates 16 fragmented contigs, at an N50 of 12419). This puts Canu’s achievements into a different context (and indicates that precision and recall have to be taken with a certain amount of care in the evaluation of assembly performance). Wtdbg2 basically generates a single consensus genome sequence rather than keeping haplotype information. Consequently, it merely obtains 10.7% to 20.6% haplotype coverage at high error rates, for example, 1.8%, 5.1%, and 1.7% on HIV, HCV, and ZIKV datasets, respectively. This also puts the fact that Wtdbg2 achieves great precision into context: while great precision is supported by computing only a single haplotype, recall suffers decisively. CliqueSNV also only reconstructs a fraction of the haplotypes making part of the virus mixtures (HC: 10∼77<italic>%</italic>), regardless of the choice of reference genome used: neither the most abundant strain nor any reasonable bootstrap consensus genome, as generated by Wtdbg2 or Strainline, for example, enhance CliqueSNV’s performance significantly. The explanation for CliqueSNV’s performance rates are the large amount of haplotype-specific SNP’s, which induces bottlenecks during the computation of cliques, as inherent to the algorithm of CliqueSNV (we thank the authors for the personal communication).
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Benchmarking results for simulated PacBio CLR reads. <italic>HC</italic> haplotype coverage, <italic>ER</italic> error rate (mismatches + indels + N’s), <italic>MC</italic> misassembled contigs proportion. NGA50 is labeled with “-” if the uniquely aligned blocks cover less than half of the reference length. The total sequencing coverage in this table is 20,000 ×. Note that CliqueSNV is a reference-based method, whereas the others are de novo assemblers. For running CliqueSNV, we have tried various strategies (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2) but only the results of the best strategy are reported here. * If contigs are full-length, this number represents the estimated number of haplotypes or strains in the virus mixture. <sup><italic>†</italic></sup> Wtdbg2 consensus as reference, using reads corrected by Strainline error correction. <sup><italic>‡</italic></sup> High quality reference (the highest abundant strain) using reads corrected by Strainline error correction</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">#Contigs*</th><th align="left">HC (%)</th><th align="left">N50 (bp)</th><th align="left">NGA50 (bp)</th><th align="left">ER (%)</th><th align="left">MC(%)</th></tr></thead><tbody><tr><td align="left" colspan="7"><italic>5-strain HIV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">99.9</td><td align="left">9697</td><td align="left">9697</td><td align="left">0.002</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">5</td><td align="left">84.5</td><td align="left">8227</td><td align="left">8170</td><td align="left">0.409</td><td align="left">20.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">15.5</td><td align="left">7419</td><td align="left">-</td><td align="left">1.820</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>†</italic></sup>(reference based)</td><td align="left">8</td><td align="left">77.2</td><td align="left">7419</td><td align="left">7419</td><td align="left">1.106</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>6-strain Poliovirus mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">6</td><td align="left">99.9</td><td align="left">7449</td><td align="left">7444</td><td align="left">0.074</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">6</td><td align="left">62.7</td><td align="left">7040</td><td align="left">6399</td><td align="left">0.538</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">14.7</td><td align="left">6575</td><td align="left">-</td><td align="left">0.244</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>‡</italic></sup>(reference based)</td><td align="left">4</td><td align="left">49.9</td><td align="left">7452</td><td align="left">7438</td><td align="left">0.433</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>10-strain HCV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">10</td><td align="left">99.9</td><td align="left">9294</td><td align="left">9292</td><td align="left">0.056</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">11</td><td align="left">76.9</td><td align="left">7703</td><td align="left">7174</td><td align="left">0.351</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">2</td><td align="left">13.6</td><td align="left">7698</td><td align="left">-</td><td align="left">5.077</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>‡</italic></sup>(reference based)</td><td align="left">1</td><td align="left">10.0</td><td align="left">9310</td><td align="left">-</td><td align="left">1.963</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>15-strain ZIKV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">15</td><td align="left">99.6</td><td align="left">10,238</td><td align="left">10,238</td><td align="left">0.021</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">13</td><td align="left">55.7</td><td align="left">10,233</td><td align="left">7129</td><td align="left">0.189</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">2</td><td align="left">10.7</td><td align="left">8773</td><td align="left">-</td><td align="left">1.693</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>‡</italic></sup>(reference based)</td><td align="left">1</td><td align="left">6.7</td><td align="left">10,268</td><td align="left">-</td><td align="left">1.627</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>5-strain SARS-CoV-2 mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">7</td><td align="left">98.6</td><td align="left">29,017</td><td align="left">29,009</td><td align="left">0.047</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">16</td><td align="left">85.9</td><td align="left">12,419</td><td align="left">25,137</td><td align="left">0.078</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">20.6</td><td align="left">29,158</td><td align="left">-</td><td align="left">0.360</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>‡</italic></sup>(reference based)</td><td align="left">1</td><td align="left">21.1</td><td align="left">29,903</td><td align="left">-</td><td align="left">0.007</td><td align="left">0.0</td></tr></tbody></table></table-wrap></p>
      <p>Considering results for the 3 mixtures containing strains of extremely low abundance, la1 and la2 for Polio and la for SARS-CoV-2, see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3, we find that Strainline still reconstructs all strains in la1 (HC: 98%, Recall=100%, ER=0.3%), which points out that Strainline is able to reconstruct strains of 20 × coverage (abundance 0.1% times 20,000 × coverage overall), albeit at the expense of overestimating the number of haplotypes (precision = 75%). Strainline eventually struggles to reconstruct all strains in data sets la2 (Polio; HC=65.3%) and la (SARS-CoV-2; HC=60.8%). This translates into Strainline failing to reconstruct strains of coverage 2 × (0.01% times 20,000 ×). Of course, 2 × reflects a coverage rate that induces various coverage breaks along the genome, which prevents to assemble the corresponding sequence already in theory. The low divergence of strains (0.2%, 0.3%) in these data sets adds to the difficulties induced by the very low coverage.</p>
      <p>All other methods struggle already on la1, on which Strainline still exhibited good performance rates. Canu, as the second best performing tool, for example, achieved haplotype coverage of 59% and 49% on la1 and la2, respectively.</p>
      <p><bold>Simulated ONT data.</bold> Table <xref rid="Tab3" ref-type="table">3</xref> displays the benchmarking results for Oxford Nanopore reads assembly. Again, Strainline yields near-perfect results on all five datasets. All true haplotypes are reconstructed (HC ≈100%, recall =100%) with extremely low error rate (0.023 ∼0.081%), and without misassemblies. Moreover, it achieves the exact number of true strains on three datasets (HIV, Poliovirus and HCV, precision =100%), and overestimates the number of haplotypes by one on the 15-strain ZIKV and the 5-strain SARS-CoV-2 mixtures (precision is 100% and 83.3%, respectively).
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Benchmarking results for simulated Oxford Nanopore reads. <italic>HC</italic> haplotype coverage, <italic>ER</italic> error rate (mismatches + indels + N’s), <italic>MC</italic> misassembled contigs proportion. NGA50 is labeled with ’-’ if the uniquely aligned blocks cover less than half of the reference length. The total sequencing coverage in this table is 20,000 ×</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">#Contigs</th><th align="left">HC (%)</th><th align="left">N50 (bp)</th><th align="left">NGA50 (bp)</th><th align="left">ER (%)</th><th align="left">MC(%)</th></tr></thead><tbody><tr><td align="left" colspan="7"><italic>5-strain HIV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">99.9</td><td align="left">9702</td><td align="left">9702</td><td align="left">0.081</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">2</td><td align="left">35.8</td><td align="left">18,151</td><td align="left">7634</td><td align="left">1.730</td><td align="left">50.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">18.9</td><td align="left">9046</td><td align="left">-</td><td align="left">1.327</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>6-strain Poliovirus mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">6</td><td align="left">100.0</td><td align="left">7454</td><td align="left">7453</td><td align="left">0.051</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">1</td><td align="left">16.6</td><td align="left">7446</td><td align="left">-</td><td align="left">0.646</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left" colspan="7"><italic>10-strain HCV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">10</td><td align="left">99.9</td><td align="left">9294</td><td align="left">9294</td><td align="left">0.023</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">1</td><td align="left">10.0</td><td align="left">9279</td><td align="left">-</td><td align="left">2.619</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">2</td><td align="left">18.4</td><td align="left">8567</td><td align="left">-</td><td align="left">1.336</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>15-strain ZIKV mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">16</td><td align="left">98.3</td><td align="left">10,244</td><td align="left">10244</td><td align="left">0.026</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">1</td><td align="left">6.6</td><td align="left">10,251</td><td align="left">-</td><td align="left">0.459</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">3</td><td align="left">17.1</td><td align="left">9490</td><td align="left">-</td><td align="left">0.564</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>5-strain SARS-CoV-2 mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">6</td><td align="left">99.9</td><td align="left">29,299</td><td align="left">29071</td><td align="left">0.041</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">10</td><td align="left">66.3</td><td align="left">18,003</td><td align="left">9492</td><td align="left">0.062</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">19.0</td><td align="left">26,767</td><td align="left">-</td><td align="left">0.586</td><td align="left">0.0</td></tr></tbody></table></table-wrap></p>
      <p>In comparison, Canu obtains 16.6%, 10.0%, and 6.6% haplotype coverage on Poliovirus, HCV, ZIKV datasets, respectively, which indicates that Canu does not operate in a strain-specific manner. On HIV and SARS-CoV-2, Canu achieves better haplotype coverage, while still missing a considerable proportion of strains (HC = 35.8% and 66.3%, respectively). While Canu has 100% recall on SARS-CoV-2, only 0% to 20% recall are achieved on the other four datasets (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2). Canu also shows relatively high error rates in the HIV and HCV assemblies (1.7% and 2.6%; 21 and 114 times higher than Strainline, respectively). For Poliovirus and ZIKV datasets, Canu displays about 15 times higher error rates in comparison with Strainline.</p>
      <p>Wtdbg2 only yields 17% to 19% haplotype coverage on four datasets (except Poliovirus) at relatively high error rates (e.g., 1.3% on HIV and HCV). Wtdbg2 failed to run on the Poliovirus dataset, so no results are shown.</p>
      <p><bold>Experimental data.</bold> See Table <xref rid="Tab4" ref-type="table">4</xref> for results on the 5-strain PVY mixture. Also here, Strainline reconstructs the great majority of strain-specific sequences (HC=97.9%, recall=60%). Importantly, recall is 100% if edit distance is set to 3%. Similarly, Strainline overestimates the number of haplotypes by two, but achieves perfect precision (100%) when operating at edit distance 3%.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Benchmarking results for real Oxford Nanopore reads. <italic>HC</italic> haplotype coverage, <italic>ER</italic> error rate (mismatches + indels + N’s), <italic>MC</italic> misassembled contigs proportion. NGA50 is labeled with ’-’ if the uniquely aligned blocks cover less than half of the reference length. Note that the metrics for the SARS-CoV-2 real sample in this table are not necessarily correct but for reference only, because the ground truth is unknown and we only used the sequence of Wuhan-Hu-1 (NC_045512) as the truth for comparison. <sup><italic>†</italic></sup> Strainline consensus as reference, using reads corrected by Strainline error correction. * Sometimes NGA50 still reports a value (5456 bp) even if HC &lt;50<italic>%</italic> because contigs have overlaps (See <ext-link ext-link-type="uri" xlink:href="https://github.com/ablab/quast/discussions/174">https://github.com/ablab/quast/discussions/ 174</ext-link> for the detailed explanation)</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">#Contigs</th><th align="left">HC (%)</th><th align="left">N50 (bp)</th><th align="left">NGA50 (bp)</th><th align="left">ER (%)</th><th align="left">MC(%)</th></tr></thead><tbody><tr><td align="left" colspan="7"><italic>5-strain PVY mixture</italic></td></tr><tr><td align="left">Strainline</td><td align="left">7</td><td align="left">97.9</td><td align="left">9538</td><td align="left">9548</td><td align="left">0.956</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">3</td><td align="left">39.9</td><td align="left">9665</td><td align="left">5456*</td><td align="left">0.105</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">2</td><td align="left">26.0</td><td align="left">7632</td><td align="left">-</td><td align="left">4.931</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>SARS-CoV-2 (SRP250446)</italic></td></tr><tr><td align="left">Strainline</td><td align="left">1</td><td align="left">99.9</td><td align="left">29,565</td><td align="left">29,565</td><td align="left">0.832</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">65.8</td><td align="left">19,405</td><td align="left">19,396</td><td align="left">1.542</td><td align="left">0.0</td></tr><tr><td align="left">CliqueSNV <sup><italic>†</italic></sup></td><td align="left">1</td><td align="left">99.9</td><td align="left">29,565</td><td align="left">29,565</td><td align="left">0.859</td><td align="left">0.0</td></tr></tbody></table></table-wrap></p>
      <p>Canu only reconstructs the most abundant two strains at full haplotype coverage and high accuracy (error rate for these two strains is 0.07% and 0.09%). However, Canu misses to cover any of the other three strains (reflected by HC=40% and recall=40%). Strainline, on the other hand, reconstructs the most abundant two strains at their full length and the exact same low error rate as Canu. In addition, unlike Canu, Strainline assembles also the other less abundant three strains at full coverage and sufficiently low error rate (0.18% to 2.7%). Wtdbg2 only generates one single near full-length haplotype and another one short contig (HC=26%) at an error rate of 4.9%.</p>
      <p>As for the SARS-CoV-2 real sample (SRP250446), we use the genome sequence of Wuhan-Hu-1 (NC 045512) as the reference for comparison since the ground truth is unknown. Strainline yields one single full-length haplotype (HC=99.9%) at an error rate clearly below the sequencing error rate (0.8%). Wtdbg2 only obtains one fragmented contig (HC=65.8%, N50=19,405) with about two times higher error rate (1.5%). Canu was unable to finish after running for more than ten days on a 48-core computing machine, clearly exceeding acceptable computational resources, so we stopped the job. This explains why no results are shown.</p>
    </sec>
    <sec id="Sec12">
      <title>Haplotype abundance estimation</title>
      <p>We also evaluated the accuracy of estimated haplotype abundances on both simulated and real data, see Table <xref rid="Tab5" ref-type="table">5</xref>. Note that Canu and Wtdbg2 do not provide abundance estimation (because of their general setup as consensus assemblers), and CliqueSNV only reconstructs a minority of haplotypes, so no reasonable comparison with other methods can be provided.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Absolute and relative errors of estimated haplotype abundances by Strainline on different virus mixtures. For each dataset, we present the average error over all assembled strains. Note that for the <italic>SARS-CoV-2 (SRP250446)</italic> real sample, the abundance estimation error is not shown because the ground truth is unknown. <italic>AFE</italic> absolute frequency error, <italic>RFE</italic> relative frequency error</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left">AFE (%)</th><th align="left">RFE (%)</th></tr></thead><tbody><tr><td align="left" colspan="3"><italic>Simulated PacBio CLR</italic></td></tr><tr><td align="left">5-strain HIV</td><td align="left">0.04</td><td align="left">0.18</td></tr><tr><td align="left">6-strain Poliovirus</td><td align="left">2.17</td><td align="left">48.35</td></tr><tr><td align="left">10-strain HCV</td><td align="left">0.06</td><td align="left">0.80</td></tr><tr><td align="left">15-strain ZIKV</td><td align="left">0.18</td><td align="left">4.93</td></tr><tr><td align="left">5-strain SARS-CoV-2</td><td align="left">3.40</td><td align="left">17.49</td></tr><tr><td align="left" colspan="3"><italic>Simulated ONT</italic></td></tr><tr><td align="left">5-strain HIV</td><td align="left">0.27</td><td align="left">1.48</td></tr><tr><td align="left">6-strain Poliovirus</td><td align="left">2.30</td><td align="left">51.18</td></tr><tr><td align="left">10-strain HCV</td><td align="left">0.28</td><td align="left">3.05</td></tr><tr><td align="left">15-strain ZIKV</td><td align="left">0.28</td><td align="left">6.10</td></tr><tr><td align="left">5-strain SARS-CoV-2</td><td align="left">4.14</td><td align="left">20.60</td></tr><tr><td align="left" colspan="3"><italic>Experimental ONT</italic></td></tr><tr><td align="left">5-strain PVY</td><td align="left">4.48</td><td align="left">23.07</td></tr></tbody></table></table-wrap></p>
      <p>Strainline estimates the frequencies for the reconstructed haplotypes at operable accuracy, with absolute frequency error (AFE) of 0.04%/0.27% (PacBio/ONT) on the simulated HIV data, 0.06%/0.28% on the HCV data and 0.18%/0.28% on the ZIKV data, respectively. One observes that the relative frequency errors (RFE) follow a similar pattern. On simulated Poliovirus, SARS-CoV-2 and experimental PVY datasets, Strainline estimates the abundances at moderate accuracy (AFE is between 2.17 and 4.48%). A likely explanation for increased error rates on Poliovirus data is the fact that strain abundances vary exponentially (exponentially increasing from 1.6 to 50.8%). The less accurate estimates on Poliovirus refer mainly to low frequent strains, which naturally causes high relative frequency errors (48%, 51% on PacBio and ONT data). A possible reason for increasing errors of abundance estimates on the simulated SARS-CoV-2 and the experimental PVY datasets is the overestimation of the number of haplotypes in the mixed samples. These findings suggest that accurate haplotype reconstruction goes hand in hand with accurate haplotype abundance estimation. The results are also likely to reflect the current limits in that respect, because coverage fluctuations and partial amounts of reads of shorter length impose certain constraints on estimating haplotype abundance.</p>
    </sec>
    <sec id="Sec13">
      <title>Error correction evaluation</title>
      <p>In addition to benchmarking analysis for assemblies, we benchmarked several error correction tools, Daccord [<xref ref-type="bibr" rid="CR27">27</xref>] (integrated in Strainline) and other widely used tools, such as Racon [<xref ref-type="bibr" rid="CR34">34</xref>], LoRMA [<xref ref-type="bibr" rid="CR35">35</xref>], CONSENT [<xref ref-type="bibr" rid="CR36">36</xref>], and, last but not least, the error correction module of Canu [<xref ref-type="bibr" rid="CR22">22</xref>]. While Canu and Racon are based on multiple sequence alignments (MSAs), LoRMA and CONSENT are based on combining de Bruijn graphs with MSAs. We experienced that Racon and CONSENT failed to handle the virus data sets. The likely reason is the ultra-high sequencing coverage (∼20,000×), which induces massive amounts of read overlaps, which in turn easily exceeds computational resources in the downstream analysis (programs crashed on 48 cores and 500GB RAM). Benchmarking results for error correction are shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S4 (PacBio CLR) and Table S5 (ONT). The results show that Daccord achieves 3∼65 times lower error rate on PacBio CLR data, and 2∼5 times lower error rate on ONT data, in comparison with Canu and LoRMA. All three tools keep nearly 100% haplotype coverage (without losing genome information) and show comparable read length (N50). Of note, Daccord’s error correction performance is about an order of magnitude better for PacBio than for ONT data, while still Daccord outperforms other tools also on ONT data. In summary, this justifies to make preferred use of Daccord for correcting errors in long reads used in strain aware virus genome assembly.</p>
      <p>Further, we tested the performance of Daccord by varying the size of the local windows, as the boundaries of the de Bruijn graphs to be constructed, from 20 to 200 bp on both PacBio CLR and ONT data, see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5 for the corresponding results. The experiments show that optimal window sizes range from 30 to 50 bp, where larger window sizes are computationally more demanding. Following these experiments, we determined 40 bp as the most reasonable local window size, kept as the default in Strainline.</p>
    </sec>
    <sec id="Sec14">
      <title>Effects of divergence versus ratio of abundances</title>
      <p>To investigate the effects of divergence and differences in abundance for strains in a virus mixture, we simulated several mixtures consisting of two strains, across all possible combinations of divergence of 0.1%, 0.5%, 1.0%, 3.0%, 5.0%, and 10.0% (where 0.1% is the most and 10.0% is the least challenging) and ratio of abundances of 1:1, 1:5, 1:10, 1:50, 1:100, and 1:1000 (where 1:1 is the least and 1:1000 is the most challenging). In the experiments, we focused on PacBio CLR reads. We then evaluated Strainline in terms of haplotype coverage (HC), error rate (ER), and N50 for each of the possible combinations of divergence and abundance ratio. Results are shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. As per inspecting N50, one realizes that Strainline reconstructs full-length strains in all cases (apart from divergence 5% and ratio 1:1000, which appears to be an outlier). As for HC, Strainline performs optimally for all combinations of at least 0.5% divergence and abundance ratio 1:100, while requiring a ratio of 1:1 for divergence of 0.1% and divergence at least 5.0% for ratio 1:1000 to reconstruct (the majority) of the two strains. Error rates appear to be suffer for combinations for the extreme cases where still two strains are reconstructed, for example divergence of only 0.5% and strain ratio of 1:100; note that for lower divergence and strain ratio, only one strains gets reconstructed, which however appears to be free of errors. Note as well that also as per ER, the combination of 5.0% divergence and strain ratio of 1:1000 appears to be an artifact.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Performance of Strainline with varying strain abundance (= relative frequency) and divergence in two-strain mixtures using simulated PacBio CLR reads. The x, y axis refers to the abundance ratio and the pairwise divergence of two strains in the mixture, respectively. Panels <bold>A</bold>, <bold>B</bold>, and <bold>C</bold> refer to haplotype coverage, error rate (mismatch + indel) and N50 of the resulting assemblies, respectively. The darker colors indicate the better assembly performance</p></caption><graphic xlink:href="13059_2021_2587_Fig3_HTML" id="MO3"/></fig></p>
    </sec>
    <sec id="Sec15">
      <title>Robustness evaluation</title>
      <p>To evaluate the robustness of assemblers with respect to random effects induced by the simulation procedure, we repeatedly simulated five <italic>6-strain Poliovirus mixtures</italic>, as a representative data set, for both PacBio CLR and ONT reads. Results are shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4. In summary, Strainline outperforms Canu and Wtdbg2 in terms of robustness with respect to the usual, most relevant assembly metrics, such as haplotype coverage, error rate and N50.</p>
      <p>Note that in Fig. S4 (B) for ONT reads Canu achieves lower error rate than Strainline. This is because Strainline generates almost all strains (including the less frequent strains), thus raising the average error rate, whereas Canu can only reconstruct the most abundant strains. In fact, Strainline still achieves lower error rates than Canu when directly comparing it on the most abundant strains.</p>
    </sec>
    <sec id="Sec16">
      <title>Effect of sequencing coverage</title>
      <p>To investigate the effect of sequencing coverage on viral quasispecies assembly, we chose a 5-strain HIV mixture, as one of the most challenging datasets suggested in [<xref ref-type="bibr" rid="CR16">16</xref>, <xref ref-type="bibr" rid="CR18">18</xref>]. We simulated PacBio CLR reads with different overall sequencing coverage. Assembly results are shown in Table <xref rid="Tab6" ref-type="table">6</xref>. We observe that Strainline successfully reconstructs all true haplotypes at nearly perfect coverage (HC &gt;99<italic>%</italic>) and great accuracy at sequencing coverage of at least 2000 ×. In that respect, Strainline outperforms all other methods quite substantially. When decreasing sequencing depth below 2000 × (i.e. 1000 to 500 ×), Strainline still achieves haplotype coverage (HC) of approximately 80%, thereby still establishing clear improvements over the alternative approaches. In terms of error rates, Canu catches up with Strainline starting from coverage rates of 2000 × in decreasing order. In terms of all other metrics (such as N50, NGA50 MC), Strainline appears to deliver optimal performance across all coverage rates, which does not apply for the alternative approaches.
<table-wrap id="Tab6"><label>Table 6</label><caption><p>Benchmarking results for 5-strain HIV mixture (PacBio CLR reads) with varying sequencing coverage. <italic>HC</italic> haplotype coverage, <italic>ER</italic> error rate (mismatches + indels + N’s), <italic>MC</italic> misassembled contigs proportion</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">#Contigs</th><th align="left">HC (%)</th><th align="left">N50 (bp)</th><th align="left">NGA50 (bp)</th><th align="left">ER (%)</th><th align="left">MC(%)</th></tr></thead><tbody><tr><td align="left" colspan="7"><italic>500 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">7</td><td align="left">78.4</td><td align="left">9517</td><td align="left">9545</td><td align="left">1.603</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">4</td><td align="left">32.9</td><td align="left">6766</td><td align="left">5281</td><td align="left">1.447</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">18.0</td><td align="left">8687</td><td align="left">-</td><td align="left">2.295</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>1000 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">79.2</td><td align="left">9557</td><td align="left">9554</td><td align="left">1.069</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">5</td><td align="left">63.6</td><td align="left">7207</td><td align="left">7139</td><td align="left">1.087</td><td align="left">0.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">13.5</td><td align="left">6516</td><td align="left">-</td><td align="left">1.520</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>2000 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">6</td><td align="left">99.3</td><td align="left">9644</td><td align="left">9614</td><td align="left">0.675</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">5</td><td align="left">67.4</td><td align="left">8193</td><td align="left">7544</td><td align="left">0.416</td><td align="left">20.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">16.0</td><td align="left">7741</td><td align="left">-</td><td align="left">1.103</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>5000 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">99.7</td><td align="left">9690</td><td align="left">9686</td><td align="left">0.311</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">4</td><td align="left">69.3</td><td align="left">8264</td><td align="left">8001</td><td align="left">0.537</td><td align="left">25.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">16.5</td><td align="left">7950</td><td align="left">-</td><td align="left">2.115</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>10000 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">99.8</td><td align="left">9696</td><td align="left">9691</td><td align="left">0.184</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">4</td><td align="left">71.7</td><td align="left">8844</td><td align="left">8524</td><td align="left">0.446</td><td align="left">25.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">15.6</td><td align="left">7528</td><td align="left">-</td><td align="left">2.777</td><td align="left">0.0</td></tr><tr><td align="left" colspan="7"><italic>20000 ×</italic></td></tr><tr><td align="left">Strainline</td><td align="left">5</td><td align="left">99.9</td><td align="left">9697</td><td align="left">9697</td><td align="left">0.002</td><td align="left">0.0</td></tr><tr><td align="left">Canu</td><td align="left">5</td><td align="left">84.5</td><td align="left">8227</td><td align="left">8170</td><td align="left">0.409</td><td align="left">20.0</td></tr><tr><td align="left">Wtdbg2</td><td align="left">1</td><td align="left">15.5</td><td align="left">7419</td><td align="left">-</td><td align="left">1.820</td><td align="left">0.0</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec17">
      <title>Effect of sequencing error rate</title>
      <p>To investigate the effect of sequencing error rate on viral quasispecies assembly, we used 5-strain HIV mixtures, as we did for evaluating effects of varying sequencing coverage. We simulated both PacBio CLR and ONT reads with different sequencing error rate (5∼30<italic>%</italic>). Assembly results are shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S9 (CLR) and S10 (ONT). We observe that Strainline successfully reconstructs all true haplotypes at nearly perfect coverage (HC ≈100<italic>%</italic>) and correctly estimates the number of haplotypes in all PacBio CLR data sets across varying sequencing error rates (5∼30<italic>%</italic>). On the ONT data sets, Strainline shows similar performance rates for ONT error rates ranging from 5∼25<italic>%</italic>; note that for both PacBio CLR and ONT data, the error rates of Strainline increase on increasing error rates for the reads themselves, albeit only by fairly small amounts, in particular in comparison with the alternative approaches. Only for the ONT dataset of 30% sequencing errors, Strainline experiences losses in terms of performance, the reason of which is likely the somewhat poorer performance of Daccord (as the error correction method used in Strainline) on ONT in comparison with PacBio CLR. Note however that this drawback rather remains a theoretical issue, because ONT is steadily improving in terms of error rates, so 30% rather reflects an artificial scenario in current times.</p>
    </sec>
    <sec id="Sec18">
      <title>Runtime and memory usage evaluation</title>
      <p>We performed all benchmarking analyses on a x86_64 GNU/Linux machine with 48 CPUs. The runtime and peak memory usage evaluations for different methods are reported in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S6 and S7. Undoubtedly, Wtdbg2 is the fastest tool, taking only a few seconds and 0.1 ∼0.4 GB memory on all datasets. The reasons are the efficiency of fuzzy de Bruijn graphs used in Wtdbg2 on the one hand, but also the fact that Wtdbg2 generates consensus sequence in all cases, which corresponds to procedures that are much faster than procedures that address strain aware assembly. The second fastest tool is CliqueSNV, which, however, is reference based, which puts direct comparisons into context. For simulated PacBio CLR reads assembly, Strainline is 1.4 ∼16 times faster and requires less or similar peak memory in comparison to Canu (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S6). For simulated ONT reads assembly, Strainline is 15∼76 times faster and requires less or similar peak memory in comparison to Canu (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S7). By design, the most expensive steps of Strainline are threaded, and there are two steps that consume time, namely ‘Correction’ and ‘Consensus’, see Fig. <xref rid="Fig1" ref-type="fig">1</xref>. Overall, Strainline requires 12 to 177 CPU hours and 15 to 45 GB main memory on the datasets of 20,000 × coverage. This indicates that our method is very well applicable in all real world scenarios of interest.</p>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="discussion">
    <title>Discussion</title>
    <p>We have presented Strainline, a de novo assembly approach that reconstructs haplotype-specific genomes from mixed viral samples using noisy long-read sequencing data. To the best of our knowledge, Strainline is the first such approach that is presented in the literature.</p>
    <p>Although the length of long reads is a major advantage in the assembly of genomes, the greatly elevated error rates pose substantial challenges when seeking to distinguish between little diverse genomes. The large number of sequencing errors that affects the reads easily exceeds the amount of genetic variants that are characteristic of the different genomes. Because co-occurring true mutations can mean a decisive handle in the differential analysis, it is usually advantageous to make use of the reads at their full length. However, addressing this particular challenge by computing all-vs-all overlaps of reads may demand excessive runtimes.</p>
    <p>To address these major challenges, we proceed by drawing from both de Bruijn graph based and overlap graph-based techniques so as to combine the virtues of the two paradigms. We first employ a local de Bruijn graph-based strategy by way of an initial error correction step. Remarkably, this strategy was originally been designed and presented for correcting long reads sampled from prokaryotic and eukaryotic genomes, without that the local de Bruijn graph-based strategy established the state of the art on such longer genomes. Here, we realized that local de Bruijn graphs perform perfectly fine when processing short genomes: sequencing errors are suppressed succesfully which enables us to carry out the second step.</p>
    <p>The second step clusters the pre-corrected long reads into groups of reads that are supposed to collect reads from identical haplotypes. To avoid excessive overlap computations, we iteratively select seed reads, as longest reads that do not overlap any of the previously selected seed reads. If reads sufficiently overlap a seed read, we put them into the cluster of the respective seed read. This way, we determine clusters based on seed-vs-all overlap computations. Because the number of seed reads is smaller by orders of magnitude in comparison with the number of reads overall, we reduce the runtime by orders of magnitude in comparison with performing all-vs-all overlap computations.</p>
    <p>Following cluster generation, we compute a haplotype-specific consensus (haplotig) for each cluster of reads. This eliminates errors further and preserves haplotype-specific variation. Upon having computed this consensus, we iteratively extend the haplotigs by evaluating their overlaps—note that the number of haplotigs is much smaller than the number of reads, such that all-vs-all haplotig overlap computations are computationally feasible. In a last step, we discard haplotigs (haplotypes) of too low divergence or abundance. The final output is a set of haplotypes together with their abundances. Many of the haplotypes have reached full length and are reliable in terms of the sequence content. In this, the goal of <italic>de novo viral quasispecies assembly from noisy long reads has been achieved</italic>.</p>
    <p>Benchmarking experiments on both simulated and experimental data, reflecting various mixed viral samples referring to various relevant settings, such as different viruses, different numbers of strains, haplotype abundances and sequencing platforms (PacBio/ONT), have shown that our approach accurately reconstructs the haplotype-specific sequences. Thereby, the output contigs tend to cover the majority of haplotypes at their full length on most data sets.</p>
    <p>As a result, Strainline proves superior in comparison with all long read genome assembly methods currently available, and in theory applicable for virus genomes; note again that no alternative method explicitly addresses virus genomes. The superiority of Strainline becomes documented in terms of various well-known and -approved assembly evaluation metrics: Strainline’s contigs cover substantially more haplotypes, are longer (N50, NGA50) and are more accurate in terms of error and misassembly rates.</p>
    <p>Clearly, Strainline’s superiority did not come as a particular surprise, as representing the first approach to explicitly consider de novo virus genome assembly from long reads. In some detail, Canu and CliqueSNV at least are able to recover a certain fraction of haplotypes, whereas Wtdbg2, however, always outputs one consensus sequence. With Canu, CliqueSNV and Wtdbg2 as the only approaches available at all, Strainline arguably establishes a substantial step up in the haplotype-specific assembly of viral genomes from noisy third-generation sequencing reads.</p>
    <p>There were some further clear hints that our approach made sense. First, we demonstrated that Strainline was able to exploit increasing sequencing coverage to its advantage; note that deeply sequenced datasets are common when analyzing virus genomes. At the same time, Strainline required the least amount of reads for establishing sufficiently accurate haplotypes in comparison with other methods. This indicates that Strainline caters to a greater range of experimental settings of practical interest.</p>
    <p>In addition, Strainline is the only long-read de novo assembly approach available that does not only assemble the viral genomes, but also estimates the abundances of the haplotypes that make part of the mix of viral strains. Results have demonstrated that Strainline’s abundance estimates are sufficiently accurate if the abundances do not refer to strains of very low relative frequencies. Note however that low-frequency strains pose particular challenges not only in this respect, because the relative lack of coverage for such strains raises the level of uncertainty one has to deal with.</p>
    <p>Note finally that in comparison with short-read viral quasispecies assemblers (such as most prominently [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR19">19</xref>]) that accurately operate in a haplotype-specific way, Strainline is the only approach that reconstructs the haplotypes for most datasets at their full length. This does not only point out that long reads indeed do mean a major advantage over short reads, but also means that Strainline is able to leverage the advantages of long reads successfully.</p>
    <p>Nonetheless, improvements are conceivable. Strainline struggles to reconstruct very low abundant haplotypes such as 0.01% or 0.1% (at least if divergence of strains is low) when the overall sequencing coverage is 20,000×, so there is currently no method available to successfully reconstruct such haplotypes.</p>
    <p>Also, Strainline sometimes tends to overestimate the number of haplotypes, which, as a consequence, hampers the estimation of the abundances of the strains. One possible reason for haplotype overestimation is that haplotype identity in read overlaps is based on overlap length and sequence identity alone, which may be too simplistic. Likely, more sophisticated criteria will be able to successfully address this issue, which we consider valuable future work. Last but not least, the computational efficiency of the approach likely leaves further room for improvements: for example, computation of consensus sequence for read clusters can possibly be implemented in a more efficient way.</p>
  </sec>
  <sec id="Sec20" sec-type="conclusion">
    <title>Conclusions</title>
    <p>This paper presents Strainline, an approach to full-length viral haplotype reconstruction from noisy long-read sequencing data. Strainline operates de novo, that is, Strainline does not make use of reference sequence any time. We make use of local de Bruijn graph assembly to sufficiently correct sequencing errors in raw reads, such that it is possible to extend contigs iteratively at a haplotype-specific level, in order to eventually yield full-length strain-specific haplotypes. These properties render Strainline unique in the spectrum of currently available assemblers: it is the only approach that can reconstruct the strain-specific haplotypes in mixed viral samples using long reads, and estimate their abundances sufficiently accurately.</p>
    <p>We remain with saying that databases (e.g., GISAID) are currently filling up with (in particular SARS-CoV-2) TGS sequencing read samples, drawn from infected people. So far, one has been blind with respect to counting the number of strains that commonly affect their hosts without incurring reference induced biases. The biased view on the amount of strains that have infected people, either initially or having formed during the course of the infection, is a decisive hindrance when assessing the evolutionary development of viruses, where SARS-CoV-2 is an example of particular current interest. Seeing the full spectrum of strains, without having to make use of existing, potentially already obsolete reference genomes, has the potential to yield major insight into the course of epidemics.</p>
    <p>Now, we can finally have a closer look.</p>
    <p>Our approach is implemented in an easy-to-use open-source tool <ext-link ext-link-type="uri" xlink:href="https://github.com/HaploKit/Strainline">https://github.com/HaploKit/Strainline</ext-link>.</p>
  </sec>
  <sec id="Sec21">
    <title>Methods</title>
    <sec id="Sec22">
      <title>Correcting sequencing errors</title>
      <p>For initial correction of errors in long reads, we adopt a local de Bruijn graph assembly based strategy. While de Bruijn graph-based data structures tend to have difficulties when dealing with TGS data because of the high error rates, it is shown in [<xref ref-type="bibr" rid="CR27">27</xref>] that it can work effectively when applied to small segments of the long reads.</p>
      <p>Here, we realized that the corresponding strategy is particularly powerful when applied to virus TGS data. In our experiments, we observed that the local de Bruijn graph-based strategy has substantial advantages on virus data in comparison to the results presented in the seminal work [<xref ref-type="bibr" rid="CR27">27</xref>], which exclusively focused on TGS data from prokaryotic and eukaryotic genomes of length at least a few Mbp. We integrate Daccord, as originally suggested [<xref ref-type="bibr" rid="CR27">27</xref>], by straightforwardly adjusting parameters so as to account for particularities of datasets under consideration here, but without any methodical or theoretical adjustments, into our workflow.</p>
      <p>The main steps of the workflow that address error correction are shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. In a first step (see “Target read &amp; overlapping reads”), read overlaps of raw reads are computed using Daligner V2.0 [<xref ref-type="bibr" rid="CR37">37</xref>], which uses canonical k-mers to identify local alignments of high confidence between reads. Upon having selected a target read (i.e. the read to be corrected), we subsequently (see “Read alignment pile”) form a read alignment pile, consisting of the target read and all reads that share significant overlap with it. Then (see “Windows”), we divide the pile into small windows, which serves the application of the local de Bruijn graph-based strategy; note that the windows have to be sufficiently small (here: 40 bp) such that the strategy works satisfyingly.</p>
      <p>Accordingly, we construct de Bruijn graphs for all windows of size 40 bp (see “DBGs for all windows” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Importantly, windows share an overlapping interval of 30 bp (that is, the step size of a window is 10bp, which is controlled by the parameter -a: advance size in Daccord), as one can see in “Window consensus”: windows and their overlapping intervals can be interpreted as nodes and edges of another graph. The respective graph of windows and overlapping intervals can then be traversed, where scores can be assigned to paths through that graph. To be specific, a path <italic>v</italic><sub>1</sub>,<italic>v</italic><sub>2</sub>,...,<italic>v</italic><sub><italic>n</italic></sub> through a local de Bruijn graph is assigned the score <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$ {\textstyle \sum _{i=1}^{n} \text {kscore}(v_{i},i-1)} $\end{document}</tex-math><mml:math id="M10"><mml:munderover><mml:mrow><mml:mo>∑</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:munderover><mml:mtext>kscore</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="13059_2021_2587_Article_IEq5.gif"/></alternatives></inline-formula>, where <italic>v</italic><sub><italic>i</italic></sub> is the node (i.e. a k-mer) in the graph, and kscore(<italic>v</italic><sub><italic>i</italic></sub>,<italic>i</italic>−1) is the function for scoring a pair consisting of a k-mer <italic>v</italic><sub><italic>i</italic></sub> and a position <italic>i</italic>−1 the k-mer may occur (see [<xref ref-type="bibr" rid="CR27">27</xref>] for more details).</p>
      <p>The paths of windows through that graph that are optimal in terms of the scores are determined, and are further evaluated with respect to differences with the target read; the concatenation of sequences of the graph that has highest score and least differences in comparison with the target read is taken as the consensus sequence (corresponds to “Window consensus” in Fig. <xref rid="Fig2" ref-type="fig">2</xref>), and reflects the true sequence that underlies the target read. One can then correct the errors in the target read accordingly.</p>
    </sec>
    <sec id="Sec23">
      <title>Read cluster generation</title>
      <p>Subsequently, we compute clusters of (error corrected) overlapping reads. This addresses to wipe out further errors, and, as the major point, to form groups of reads all of which stem from the same (local) haplotype. For pseudo code supporting the generation of read clusters, see Algorithm 1.</p>
      <p>For this, first, we sort the error corrected reads by length in decreasing order, considering that longer reads tend to have more overlaps. Processing reads in the corresponding order therefore results in larger read clusters. This increases the length of the resulting haplotigs and hence improves the assembly overall. In each iteration, we choose the longest read having remained not assigned to a cluster as the seed read and compute seed-vs-all overlaps on corrected reads using Minimap2 [<xref ref-type="bibr" rid="CR38">38</xref>], whose seed-chain-align procedure is known to perform pairwise alignments extremely fast.</p>
      <p>Bad overlaps are filtered out according to reasonable, additional criteria, such as minimum read overlap length (–minOvlpLen), minimum level of sequence identity for read overlaps (–minIdentity), and in case of self-overlaps, duplicates or internal matches (maximum overhang length of overlaps, –maxOH). Overlaps that do not satisfy these criteria are removed.</p>
      <p>To define these criteria concretely, we follow Algorithm 5 in [<xref ref-type="bibr" rid="CR39">39</xref>]. Enforced by choosing relatively strict thresholds for these criteria (see [<xref ref-type="bibr" rid="CR40">40</xref>] for the details), the remaining overlapping reads are expected to stem from the haplotype of the seed read. The corresponding cluster is determined as the set of reads that overlap the seed read (according to the criteria listed above).</p>
      <p>Subsequently, all of the reads of the cluster are discarded from the sorted list of reads, and the next iteration (referring to line 5 in Algorithm 1) is executed. The procedure stops when the number of iterations (hence clusters) reaches the upper limit <italic>k</italic> where <italic>k</italic> is user defined (default 100), or all reads have been processed (corresponding to <italic>R</italic>=<italic>∅</italic> in Algorithm 1).</p>
      <p>Notably, we only compute seed-vs-all overlaps, and not all-vs-all overlaps (as per, for example, a straightforward, naive approach), and limit the number of clusters, which decisively speeds up the procedure. In this, the fact that reads are already error corrected ensures that one does not miss any overlap, which overall prevents to compute all-vs-all overlaps.</p>
      <p>
        <graphic position="anchor" xlink:href="13059_2021_2587_Figa_HTML" id="MO4"/>
      </p>
    </sec>
    <sec id="Sec24">
      <title>Generating a consensus sequence for each read cluster</title>
      <p>Although reads were initially corrected, they may still contain errors. The major possible reasons are near-identical genomic regions that are shared across haplotypes.</p>
      <p>For final polishing of reads, and removal of also more stubbornly resisting errors, we first compute a partial order alignment (POA) algorithm [<xref ref-type="bibr" rid="CR41">41</xref>] for each cluster. Subsequently, we generate the consensus sequence for the POA of each cluster (which is a straightforward, generic procedure). Adapting reads to this consensus completes the process of error correction.</p>
      <p>For computing POA’s of clusters, we make use of the fast SIMD version, as implemented in Spoa [<xref ref-type="bibr" rid="CR34">34</xref>], and built into our approach. Note that this step can generate a longer and more accurate haplotype-specific sequence for each cluster (which reflects the cluster-specific haplotig).</p>
    </sec>
    <sec id="Sec25">
      <title>Iterative extension of haplotigs</title>
      <p>Haplotigs generated from the previous step do not necessarily reflect full-length haplotypes. This explains why it makes sense to try to extend them further.</p>
      <p>For extending haplotigs, one considers haplotigs as reads, and re-runs “Read cluster generation” and “Generating a consensus sequence for each read cluster” another time, inserting the haplotigs of the first iteration as reads. The procedure is iteratively repeated until haplotigs cannot be elongated further. In that, our experiments demonstrate that two iterations usually suffice for virus sequencing data sets.</p>
    </sec>
    <sec id="Sec26">
      <title>Haplotype filtration</title>
      <p>Ideally, iteratively extending haplotigs eventually results in correct, full-length haplotypes. However, in practice, it is possible that some haplotypes have very low pairwise divergence or very low relative abundance, each of which indicates that the corresponding haplotypes are likely to reflect artifacts. It is therefore reasonable to filter out such artificial haplotypes, because they either reflect redundant or spurious sequences. For the identification of low divergence and low relative abundance haplotypes, we make use of two procedures for computing haplotype divergence on the one hand, and haplotype relative abundance on the other hand.</p>
      <p><bold>Haplotype divergence calculation.</bold> We propose two metrics for haplotype divergence measurement, namely local divergence (LD) and global divergence (GD). Given two haplotypes <italic>H</italic><sub><italic>i</italic></sub>,<italic>H</italic><sub><italic>j</italic></sub>, let <italic>l</italic> be the length of their overlap, and <italic>m</italic> be the number of identically matching positions in the overlap (so <italic>m</italic>≤<italic>l</italic> by definition of <italic>l</italic>,<italic>m</italic>). Let further <italic>n</italic><sub><italic>i</italic></sub>,<italic>n</italic><sub><italic>j</italic></sub> be the lengths of the non-overlapping parts of <italic>H</italic><sub><italic>i</italic></sub>,<italic>H</italic><sub><italic>j</italic></sub> relative to their overlap.</p>
      <p>LD is defined by the formula <italic>L</italic><italic>D</italic>(<italic>H</italic><sub><italic>i</italic></sub>,<italic>H</italic><sub><italic>j</italic></sub>)=1−<italic>m</italic>/<italic>l</italic> and GD is defined by <italic>G</italic><italic>D</italic>(<italic>H</italic><sub><italic>i</italic></sub>,<italic>H</italic><sub><italic>j</italic></sub>)=1−<italic>m</italic>/(<italic>l</italic>+<italic>n</italic><sub><italic>i</italic></sub>+<italic>n</italic><sub><italic>j</italic></sub>). In other words, LD agrees with BLAST-like alignment identity, when only considering the overlapping regions. GD, on the other hand, considers the entire sequence context that neighbors and includes the overlap of <italic>H</italic><sub><italic>i</italic></sub> and <italic>H</italic><sub><italic>j</italic></sub>.</p>
      <p>Note that two haplotypes having low local divergence but large global divergence (because of a long overhang) are more likely to stem from two different strains than haplotypes having small LD and GD.</p>
      <p>Let further <italic>maxLD</italic> and <italic>maxCO</italic> represent the user-defined maximum local divergence and the maximum contig overhang length (5bp in our cases), respectively. Note that <italic>H</italic><sub><italic>i</italic></sub> being contained in <italic>H</italic><sub><italic>j</italic></sub> implies the length of <italic>H</italic><sub><italic>i</italic></sub> being smaller than the length of <italic>H</italic><sub><italic>j</italic></sub>, as well as <italic>L</italic><italic>D</italic>(<italic>H</italic><sub><italic>i</italic></sub>,<italic>H</italic><sub><italic>j</italic></sub>&lt;<italic>m</italic><italic>a</italic><italic>x</italic><italic>L</italic><italic>D</italic> and contig overhang length being at most <italic>maxCO</italic>. In this case, <italic>H</italic><sub><italic>i</italic></sub> is discarded from the downstream analysis. For determining the overlap information of two haplotypes, Minimap2 is used. The ultimate output is a set of non-redundant haplotypes.</p>
      <p><bold>Calculating relative abundance of haplotypes.</bold> Calculating haplotype relative abundance is straightforward when the length of the haplotypes approaches the size of the (strain-specific) genomes, and when original reads are nearly free of errors.</p>
      <p>For the calculation, one aligns the reads with the haplotypes, which in the given situation can usually be done in a non-ambiguous way. The result of the alignments is stored in a BAM file. We then adopt the jgi_summarize_bam_contig_depths program from MetaBAT 2 [<xref ref-type="bibr" rid="CR42">42</xref>] to calculate the depth of haplotypes based on the BAM file. The relative abundance of <italic>H</italic><sub><italic>i</italic></sub> is equal to the average depth of <italic>H</italic><sub><italic>i</italic></sub> divided by the overall average depth of all haplotypes. Haplotypes with very low relative abundance are filtered out, and one recomputes the abundance for the remaining haplotypes upon removal of the spurious, low abundance haplotypes.</p>
      <p>The final output consists of a set of full-length haplotypes along with their corresponding relative frequencies, as desired.</p>
    </sec>
    <sec id="Sec27">
      <title>Data simulation</title>
      <p>To evaluate performance of Strainline, we generated several simulated datasets for both PacBio CLR and ONT reads. For simulating reads, we made use of PBSIM V1.0.3 [<xref ref-type="bibr" rid="CR28">28</xref>] model-based simulation, which reflects a sound way to generate PacBio CLR reads of N50 length 2.4kbp and average sequencing error rate 10%. In addition, we also downloaded real Oxford Nanopore reads (GridION) of a SARS-CoV-2 sample from the SRA database (<ext-link ext-link-type="uri" xlink:href="https://trace.ncbi.nlm.nih.gov/Traces/sra/?study=SRP250446">SRP250446</ext-link>) and then used NanoSim V2.6.0 [<xref ref-type="bibr" rid="CR29">29</xref>] as a popular, approved simulator to train an ONT read profile based on this real ONT dataset. Accordingly, we generated simulated ONT reads, at an N50 of 2.5kbp in terms of length and average sequencing error rate of 10%. The genomes used for each dataset are listed in the “Availability of data and materials” section.</p>
    </sec>
    <sec id="Sec28">
      <title>Parameter settings</title>
      <p>Three main parameters need to be set when running Strainline. The first parameter is <italic>k</italic>, the maximum number of clusters in Algorithm 1. To investigate the consequences of varying <italic>k</italic>, we ran Strainline with <italic>k</italic> ranging from 40 to 200 on the 6-strain Poliovirus mixture (PacBio CLR reads). Results is shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S8; they show that optimal, robust assembly performance is reached for <italic>k</italic> ranging between 60 and 200. While using even larger <italic>k</italic> may improve the assembly performance slightly further, choices beyond 200 require computational resources that are too demanding.</p>
      <p>Based on these analyses, we recommend users to choose <italic>k</italic> between 50 and 200, where a typical choice is <italic>k</italic>=100, as used in the majority of our experiments. The other two parameters are maximum global divergence (<italic>maxGD</italic>) and maximum local divergence (<italic>maxLD</italic>) as described in the “Haplotype filtration” section. Usually, the amount of haplotypes reconstructed increases on lowering <italic>maxGD</italic> or <italic>maxLD</italic>, so increases recall. However, this advantage is offset by an overestimation of haplotypes, which lowers precision. Here, we chose maxGD = 0.02, maxLD = 0.01 for most of our data sets. Detailed settings of parameters used in our experiments can be seen at Code Ocean [<xref ref-type="bibr" rid="CR40">40</xref>].</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec29">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2021_2587_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold> Supplement: This contains all supplementary materials referenced in the main text.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="13059_2021_2587_MOESM2_ESM.docx">
            <caption>
              <p><bold>Additional file 2</bold> Review history.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p>Receiving the error message “No disjointigs were assembled”; upon contact, the authors responded that metaFlye does not support the assembly of very short sequences, such as viruses.</p>
    </fn>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>Xiao Luo and Xiongbin Kang contributed equally to this work.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We would like to thank Jasmijn Baaijens for insightful discussions, and Viachaslau Tsyvina and Alex Zelikovsky for helpful advice when running CliqueSNV.</p>
    <sec id="d32e3822">
      <title>Peer review information</title>
      <p>Kevin Pang was the primary editor of this article and managed its editorial process and peer review in collaboration with the rest of the editorial team.</p>
    </sec>
    <sec id="d32e3827">
      <title>Review history</title>
      <p>The review history is available as Additional file <xref rid="MOESM2" ref-type="media">2</xref>.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>XL and AS developed the method. XL implemented the software and conducted the data analysis. XL, XK, and AS wrote the manuscript. All authors read and approved the final version of the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>XL and XK were supported by the Chinese Scholarship Council. AS was supported by the Dutch Scientific Organization, through Vidi grant 639.072.309 during the early stages of the project, and from the European Union’s Horizon 2020 research and innovation programme under Marie Skłodowska-Curie grant agreements No 956229 (ALPACA) and No 872539 (PANGAIA). Open Access funding enabled and organized by Projekt DEAL.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>All data (including raw sequencing reads, reference genomes and assemblies) and code for reproducing the results in the paper are deposited on Code Ocean [<xref ref-type="bibr" rid="CR40">40</xref>]. The source code of Strainline is GPL-3.0 licensed, and publicly available on GitHub [<xref ref-type="bibr" rid="CR43">43</xref>].</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holland</surname>
            <given-names>JJD</given-names>
          </name>
          <name>
            <surname>De La Torre</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Steinhauer</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Rna virus populations as quasispecies</article-title>
        <source>Genet Divers RNA Viruses</source>
        <year>1992</year>
        <volume>176</volume>
        <fpage>1</fpage>
        <lpage>20</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-642-77011-1_1</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Domingo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Escarmís</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sevilla</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Moya</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Elena</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Quer</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Novella</surname>
            <given-names>IS</given-names>
          </name>
          <name>
            <surname>Holland</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <article-title>Basic concepts in rna virus evolution</article-title>
        <source>FASEB J</source>
        <year>1996</year>
        <volume>10</volume>
        <issue>8</issue>
        <fpage>859</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1096/fasebj.10.8.8666162</pub-id>
        <pub-id pub-id-type="pmid">8666162</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Domingo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sheldon</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Perales</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Viral quasispecies evolution</article-title>
        <source>Microbiol Mol Biol Rev</source>
        <year>2012</year>
        <volume>76</volume>
        <issue>2</issue>
        <fpage>159</fpage>
        <lpage>216</lpage>
        <pub-id pub-id-type="doi">10.1128/MMBR.05023-11</pub-id>
        <pub-id pub-id-type="pmid">22688811</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Beerenwinkel</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Sing</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lengauer</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Rahnenführer</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Roomp</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Savenkov</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Fischer</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Hoffmann</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Selbig</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Korn</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Computational methods for the design of effective therapies against drug resistant hiv strains</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <issue>21</issue>
        <fpage>3943</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti654</pub-id>
        <pub-id pub-id-type="pmid">16144807</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Douek</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Kwong</surname>
            <given-names>PD</given-names>
          </name>
          <name>
            <surname>Nabel</surname>
            <given-names>GJ</given-names>
          </name>
        </person-group>
        <article-title>The rational design of an aids vaccine</article-title>
        <source>Cell</source>
        <year>2006</year>
        <volume>124</volume>
        <issue>4</issue>
        <fpage>677</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2006.02.005</pub-id>
        <pub-id pub-id-type="pmid">16497577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knyazev</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hughes</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Skums</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Zelikovsky</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Epidemiological data analysis of viral quasispecies in the next-generation sequencing era</article-title>
        <source>Brief Bioinforma</source>
        <year>2021</year>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>96</fpage>
        <lpage>108</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbaa101</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Loman</surname>
            <given-names>NJ</given-names>
          </name>
          <name>
            <surname>Constantinidou</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Christner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rohde</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Chan</surname>
            <given-names>JZ-M</given-names>
          </name>
          <name>
            <surname>Quick</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Weir</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Quince</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>GP</given-names>
          </name>
          <name>
            <surname>Betley</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A culture-independent sequence-based metagenomics approach to the investigation of an outbreak of shiga-toxigenic escherichia coli o104: H4</article-title>
        <source>Jama</source>
        <year>2013</year>
        <volume>309</volume>
        <issue>14</issue>
        <fpage>1502</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1001/jama.2013.3231</pub-id>
        <pub-id pub-id-type="pmid">23571589</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Somerville</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Lutz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schmid</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Frei</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Moser</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Irmler</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Frey</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Ahrens</surname>
            <given-names>CH</given-names>
          </name>
        </person-group>
        <article-title>Long-read based de novo assembly of low-complexity metagenome samples results in finished genomes and reveals insights into strain diversity and an active phage system</article-title>
        <source>BMC Microbiol</source>
        <year>2019</year>
        <volume>19</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>18</lpage>
        <pub-id pub-id-type="doi">10.1186/s12866-019-1500-0</pub-id>
        <pub-id pub-id-type="pmid">30616583</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Garg</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Computational methods for chromosome-scale haplotype reconstruction</article-title>
        <source>Genome Biol</source>
        <year>2021</year>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>24</lpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02328-9</pub-id>
        <pub-id pub-id-type="pmid">33397451</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zagordi</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Bhattacharya</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Eriksson</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Beerenwinkel</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Shorah: estimating the genetic diversity of a mixed sample from next-generation sequencing data</article-title>
        <source>BMC Bioinformatics</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-119</pub-id>
        <pub-id pub-id-type="pmid">21199577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Prabhakaran</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rey</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Zagordi</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Beerenwinkel</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Roth</surname>
            <given-names>V</given-names>
          </name>
        </person-group>
        <article-title>Hiv haplotype inference using a propagating dirichlet process mixture model</article-title>
        <source>IEEE/ACM Trans Comput Biol Bioinforma</source>
        <year>2013</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>182</fpage>
        <lpage>91</lpage>
        <pub-id pub-id-type="doi">10.1109/TCBB.2013.145</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Knyazev</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tsyvina</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Shankar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Melnyk</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Artyomenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Malygina</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Porozov</surname>
            <given-names>YB</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>EM</given-names>
          </name>
          <name>
            <surname>Mangul</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Switzer</surname>
            <given-names>WM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Accurate assembly of minority viral haplotypes from next-generation sequencing through efficient noise reduction</article-title>
        <source>Nucleic Acids Res</source>
        <year>2021</year>
        <volume>49</volume>
        <issue>17</issue>
        <fpage>102</fpage>
        <lpage>102</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab576</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boehm</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kronig</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Neher</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Eckerle</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Vetter</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kaiser</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Novel sars-cov-2 variants: the pandemics within the pandemic</article-title>
        <source>Clin Microbiol Infect</source>
        <year>2021</year>
        <volume>27</volume>
        <issue>8</issue>
        <fpage>1109</fpage>
        <lpage>1117</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cmi.2021.05.022</pub-id>
        <pub-id pub-id-type="pmid">34015535</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lopman</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Vennema</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Kohli</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Pothier</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Sanchez</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Negredo</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Buesa</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schreier</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Gray</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gallimore</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Increase in viral gastroenteritis outbreaks in europe and epidemic spread of new norovirus variant</article-title>
        <source>Lancet</source>
        <year>2004</year>
        <volume>363</volume>
        <issue>9410</issue>
        <fpage>682</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1016/S0140-6736(04)15641-9</pub-id>
        <pub-id pub-id-type="pmid">15001325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Töpfer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Marschall</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Bull</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Luciani</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Schönhuth</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Beerenwinkel</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Viral quasispecies assembly via maximal clique enumeration</article-title>
        <source>PLoS Comput Biol</source>
        <year>2014</year>
        <volume>10</volume>
        <issue>3</issue>
        <fpage>1003515</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1003515</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baaijens</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>El Aabidine</surname>
            <given-names>AZ</given-names>
          </name>
          <name>
            <surname>Rivals</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Schönhuth</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>De novo assembly of viral quasispecies using overlap graphs</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>835</fpage>
        <lpage>48</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.215038.116</pub-id>
        <pub-id pub-id-type="pmid">28396522</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Freire</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Ladra</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Paramá</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Salmela</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Inference of viral quasispecies with a paired de bruijn graph</article-title>
        <source>Bioinformatics</source>
        <year>2021</year>
        <volume>37</volume>
        <issue>4</issue>
        <fpage>473</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa782</pub-id>
        <pub-id pub-id-type="pmid">32926162</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baaijens</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Van der Roest</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Stougie</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Schönhuth</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Full-length de novo viral quasispecies assembly through variation graph construction</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>35</volume>
        <issue>24</issue>
        <fpage>5086</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz443</pub-id>
        <pub-id pub-id-type="pmid">31147688</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <mixed-citation publication-type="other">Baaijens JA, Stougie L, Schönhuth A. Strain-Aware Assembly of Genomes from Mixed Samples Using Flow Variation Graphs In: Schwartz R, editor. Research in Computational Molecular Biology. RECOMB 2020. Lecture Notes in Computer Science, vol 12074. Cham: Springer. 10.1007/978-3-030-45257-5_14.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Logsdon</surname>
            <given-names>GA</given-names>
          </name>
          <name>
            <surname>Vollger</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Eichler</surname>
            <given-names>EE</given-names>
          </name>
        </person-group>
        <article-title>Long-read human genome sequencing and its applications</article-title>
        <source>Nat Rev Genet</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>10</issue>
        <fpage>597</fpage>
        <lpage>614</lpage>
        <pub-id pub-id-type="doi">10.1038/s41576-020-0236-x</pub-id>
        <pub-id pub-id-type="pmid">32504078</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
          <name>
            <surname>Peluso</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Sedlazeck</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Nattestad</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Concepcion</surname>
            <given-names>GT</given-names>
          </name>
          <name>
            <surname>Clum</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Dunn</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>O’Malley</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Figueroa-Balderas</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Morales-Cruz</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Phased diploid genome assembly with single-molecule real-time sequencing</article-title>
        <source>Nat Methods</source>
        <year>2016</year>
        <volume>13</volume>
        <issue>12</issue>
        <fpage>1050</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4035</pub-id>
        <pub-id pub-id-type="pmid">27749838</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Berlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>722</fpage>
        <lpage>36</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.215087.116</pub-id>
        <pub-id pub-id-type="pmid">28298431</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>
        <source>Nature Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <issue>5</issue>
        <fpage>540</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0072-8</pub-id>
        <pub-id pub-id-type="pmid">30936562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate long-read assembly with wtdbg2</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <issue>2</issue>
        <fpage>155</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0669-3</pub-id>
        <pub-id pub-id-type="pmid">31819265</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shafin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Pesout</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lorig-Roach</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Haukness</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Olsen</surname>
            <given-names>HE</given-names>
          </name>
          <name>
            <surname>Bosworth</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Armstrong</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Tigyi</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Maurer</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nanopore sequencing and the shasta toolkit enable efficient de novo assembly of eleven human genomes</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <issue>9</issue>
        <fpage>1044</fpage>
        <lpage>1053</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-020-0503-6</pub-id>
        <pub-id pub-id-type="pmid">32686750</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bickhart</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Behsaz</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rayko</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shin</surname>
            <given-names>SB</given-names>
          </name>
          <name>
            <surname>Kuhn</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Polevikov</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>TP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>metaflye: scalable long-read metagenome assembly using repeat graphs</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <issue>11</issue>
        <fpage>1103</fpage>
        <lpage>1110</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-020-00971-x</pub-id>
        <pub-id pub-id-type="pmid">33020656</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <mixed-citation publication-type="other">Tischler G, Myers EW. Non hybrid long read consensus using local de bruijn graph assembly. bioRxiv. 2017;:106252. 10.1101/106252.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ono</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Asai</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hamada</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Pbsim: Pacbio reads simulator–toward accurate genome assembly</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>1</issue>
        <fpage>119</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts649</pub-id>
        <pub-id pub-id-type="pmid">23129296</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Nanosim: nanopore sequence read simulator based on statistical characterization</article-title>
        <source>GigaScience</source>
        <year>2017</year>
        <volume>6</volume>
        <issue>4</issue>
        <fpage>010</fpage>
        <pub-id pub-id-type="doi">10.1093/gigascience/gix010</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Giallonardo</surname>
            <given-names>FD</given-names>
          </name>
          <name>
            <surname>Töpfer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rey</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Prabhakaran</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Duport</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Leemann</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Schmutz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>NK</given-names>
          </name>
          <name>
            <surname>Joos</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lecca</surname>
            <given-names>MR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Full-length haplotype reconstruction to infer the structure of heterogeneous virus populations</article-title>
        <source>Nucleic Acids Res</source>
        <year>2014</year>
        <volume>42</volume>
        <issue>14</issue>
        <fpage>115</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gku537</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jain</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Rodriguez-R</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Konstantinidis</surname>
            <given-names>KT</given-names>
          </name>
          <name>
            <surname>Aluru</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>High throughput ani analysis of 90k prokaryotic genomes reveals clear species boundaries</article-title>
        <source>Nat Commun</source>
        <year>2018</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1038/s41467-017-02088-w</pub-id>
        <pub-id pub-id-type="pmid">29317637</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Della Bartola</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Byrne</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mullins</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Characterization of potato virus y isolates and assessment of nanopore sequencing to detect and genotype potato viruses</article-title>
        <source>Viruses</source>
        <year>2020</year>
        <volume>12</volume>
        <issue>4</issue>
        <fpage>478</fpage>
        <pub-id pub-id-type="doi">10.3390/v12040478</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Versatile genome assembly evaluation with quast-lg</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>13</issue>
        <fpage>142</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty266</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vaser</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sović</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Šikić</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>737</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>
        <pub-id pub-id-type="pmid">28100585</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salmela</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Walve</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rivals</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ukkonen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Accurate self-correction of errors in long reads using de bruijn graphs</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <issue>6</issue>
        <fpage>799</fpage>
        <lpage>806</lpage>
        <pub-id pub-id-type="pmid">27273673</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Morisse</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marchet</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Limasset</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lecroq</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lefebvre</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Scalable long read self-correction and assembly polishing with multiple sequence alignment</article-title>
        <source>Sci Rep</source>
        <year>2021</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>13</lpage>
        <pub-id pub-id-type="doi">10.1038/s41598-020-80757-5</pub-id>
        <pub-id pub-id-type="pmid">33414495</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37</label>
      <mixed-citation publication-type="other">Myers G. Efficient Local Alignment Discovery amongst Noisy Long Reads In: Brown D, Morgenstern B, editors. Algorithms in Bioinformatics. WABI 2014. Lecture Notes in Computer Science, vol 8701. Berlin, Heidelberg: Springer. 10.1007/978-3-662-44753-6_5.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>18</issue>
        <fpage>3094</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id>
        <pub-id pub-id-type="pmid">29750242</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>14</issue>
        <fpage>2103</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id>
        <pub-id pub-id-type="pmid">27153593</pub-id>
      </element-citation>
    </ref>
    <ref id="CR40">
      <label>40</label>
      <mixed-citation publication-type="other">Luo X, Kang X, Schönhuth A. Raw data, assemblies and code for reproducing results. Code Ocean. 2021. 10.24433/CO.3155281.v1.</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lee</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Grasso</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sharlow</surname>
            <given-names>MF</given-names>
          </name>
        </person-group>
        <article-title>Multiple sequence alignment using partial order graphs</article-title>
        <source>Bioinformatics</source>
        <year>2002</year>
        <volume>18</volume>
        <issue>3</issue>
        <fpage>452</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/18.3.452</pub-id>
        <pub-id pub-id-type="pmid">11934745</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kang</surname>
            <given-names>DD</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Kirton</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Egan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>An</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>Metabat 2: an adaptive binning algorithm for robust and efficient genome reconstruction from metagenome assemblies</article-title>
        <source>PeerJ</source>
        <year>2019</year>
        <volume>7</volume>
        <fpage>7359</fpage>
        <pub-id pub-id-type="doi">10.7717/peerj.7359</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43</label>
      <mixed-citation publication-type="other">Luo X, Kang X, Schönhuth A. Strainline. Github. 2021. <ext-link ext-link-type="uri" xlink:href="https://github.com/HaploKit/Strainline">https://github.com/HaploKit/Strainline</ext-link>. Accessed 4 Jan 2020.</mixed-citation>
    </ref>
  </ref-list>
</back>
