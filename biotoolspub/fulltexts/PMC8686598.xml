<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8686598</article-id>
    <article-id pub-id-type="publisher-id">4516</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-021-04516-7</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>FCLQC: fast and concurrent lossless quality scores compressor</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Cho</surname>
          <given-names>Minhyeok</given-names>
        </name>
        <address>
          <email>mincho@mail.hongik.ac.kr</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6346-4182</contrib-id>
        <name>
          <surname>No</surname>
          <given-names>Albert</given-names>
        </name>
        <address>
          <email>albertno@hongik.ac.kr</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.412172.3</institution-id><institution-id institution-id-type="ISNI">0000 0004 0532 6974</institution-id><institution>Department of Electronic and Electrical Engineering, </institution><institution>Hongik University, </institution></institution-wrap>Seoul, Republic of Korea </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>12</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>12</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>22</volume>
    <elocation-id>606</elocation-id>
    <history>
      <date date-type="received">
        <day>20</day>
        <month>7</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>12</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Advances in sequencing technology have drastically reduced sequencing costs. As a result, the amount of sequencing data increases explosively. Since FASTQ files (standard sequencing data formats) are huge, there is a need for efficient compression of FASTQ files, especially quality scores. Several quality scores compression algorithms are recently proposed, mainly focused on lossy compression to boost the compression rate further. However, for clinical applications and archiving purposes, lossy compression cannot replace lossless compression. One of the main challenges for lossless compression is time complexity, where it takes thousands of seconds to compress a 1 GB file. Also, there are desired features for compression algorithms, such as random access. Therefore, there is a need for a fast lossless compressor with a reasonable compression rate and random access functionality.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">This paper proposes a Fast and Concurrent Lossless Quality scores Compressor (FCLQC) that supports random access and achieves a lower running time based on concurrent programming. Experimental results reveal that FCLQC is significantly faster than the baseline compressors on compression and decompression at the expense of compression ratio. Compared to LCQS (baseline quality score compression algorithm), FCLQC shows at least 31x compression speed improvement in all settings, where a performance degradation in compression ratio is up to 13.58% (8.26% on average). Compared to general-purpose compressors (such as 7-zip), FCLQC shows 3x faster compression speed while having better compression ratios, at least 2.08% (4.69% on average). Moreover, the speed of random access decompression also outperforms the others. The concurrency of FCLQC is implemented using Rust; the performance gain increases near-linearly with the number of threads.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">The superiority of compression and decompression speed makes FCLQC a practical lossless quality score compressor candidate for speed-sensitive applications of DNA sequencing data. FCLQC is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/Minhyeok01/FCLQC">https://github.com/Minhyeok01/FCLQC</ext-link> and is freely available for non-commercial usage.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Concurrency</kwd>
      <kwd>FASTQ</kwd>
      <kwd>Lossless compressor</kwd>
      <kwd>Quality score</kwd>
      <kwd>Random access</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100003708</institution-id>
            <institution>korea institute of science and technology information</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par12">Since the Human Genome Project (HGP), sequencing technology has developed rapidly [<xref ref-type="bibr" rid="CR1">1</xref>]. Recently proposed Next Generation Sequencing (NGS) technologies support massive parallel sequencing, which lowers sequencing costs. As a result, the amount of sequencing data increases dramatically. In 2025, it is expected that one Zettabase of new sequencing data will be generated every year [<xref ref-type="bibr" rid="CR2">2</xref>]. The sequencing data is mainly stored in FASTQ format, which is widely being used in bioinformatics. The size of the FASTQ file is gigantic, where the size of human genome data ranges from tens to hundreds of gigabytes. For example, the size of the homo sapiens FASTQ file <italic>SRR13587127</italic> obtained from the Illumina HiSeq machine is 111 GB.</p>
    <p id="Par13">There exists a significant amount of recent works on FASTQ compression, including Spring [<xref ref-type="bibr" rid="CR3">3</xref>], LFastqC [<xref ref-type="bibr" rid="CR4">4</xref>], FQSqueezer [<xref ref-type="bibr" rid="CR5">5</xref>], and fqzcomp [<xref ref-type="bibr" rid="CR6">6</xref>]. Since the reads are sub-strings of the whole genome, there is much redundancy to be exploited for compression. Thus, recent works mainly focused on read compression. On the other hand, the quality scores have less statistical structure, and it is more challenging to compress [<xref ref-type="bibr" rid="CR6">6</xref>]. Moreover, the quality scores occupy around 70% of losslessly compressed FASTQ file [<xref ref-type="bibr" rid="CR7">7</xref>]. Thus, we need to focus on quality score compression.</p>
    <p id="Par14">Recently, several quality scores compression algorithms have been proposed, including qvz [<xref ref-type="bibr" rid="CR8">8</xref>], crumble [<xref ref-type="bibr" rid="CR9">9</xref>], MPEG-G [<xref ref-type="bibr" rid="CR10">10</xref>], where the above works mainly considered lossy compression to boost the compression rate further. However, it is highly nontrivial to distinguish the critical component of the data, especially in medical applications, and therefore lossless compression is preferred [<xref ref-type="bibr" rid="CR11">11</xref>]. Also, lossless compression is necessary for archiving purposes [<xref ref-type="bibr" rid="CR12">12</xref>]. There are number of lossless quality scores compressors such as AQUa [<xref ref-type="bibr" rid="CR13">13</xref>] and LCQS [<xref ref-type="bibr" rid="CR14">14</xref>]. The above algorithms outperform the general-purpose compressors (such as Gzip), but the run time is significantly higher.</p>
    <p id="Par15">In this paper, we aim to design a fast lossless quality scores compressor. We propose Fast and Concurrent Lossless Quality scores Compressor (FCLQC) that achieves a comparable compression rate while having much faster than the baseline algorithms. We use concurrent programming to achieve fast compression and decompression. Concurrent programming executes a program independently, not necessarily simultaneously [<xref ref-type="bibr" rid="CR15">15</xref>], which is different from error-prone parallel computing. We implement FCLQC using the modern language Rust [<xref ref-type="bibr" rid="CR16">16</xref>].</p>
    <sec id="Sec2">
      <title>Why Rust?</title>
      <p id="Par16">Memory safety is essential for thread safety [<xref ref-type="bibr" rid="CR17">17</xref>], and secure coding. While memory safety issue occurs in C and C++ code, most recent programming languages guarantee memory safety, Especially, Rust [<xref ref-type="bibr" rid="CR16">16</xref>] supports the ownership and type systems that help manage memory safely and convert concurrency problems to compile-time errors.</p>
      <p id="Par17">Among many memory-safe programming languages, Rust is already gaining popularity. Rust was the second-fastest-growing language on the code-sharing platform in 2019 [<xref ref-type="bibr" rid="CR18">18</xref>], and it has been the “most-loved” language for the last five years in a row according to Stack Overflow Developer Survey 2020 [<xref ref-type="bibr" rid="CR19">19</xref>]. Similar to the Python Package Index (PyPI) for Python language, Rust also has <italic>crates</italic> which contains third-party packages for developers. It has more than 65,000 available packages, including a library of algorithms in bioinformatics [<xref ref-type="bibr" rid="CR20">20</xref>]. It shows that there is not much overhead to use Rust instead of C++.</p>
      <p id="Par18">Our goal is to provide a thread-safe code that can handle more than 100 threads. Our experimental results contain a compression and decompression with 120 threads, which is proof of memory-safe code.</p>
    </sec>
    <sec id="Sec3">
      <title>FASTQ format</title>
      <p id="Par19">FASTQ file is a widely used data format that contains the output of sequenced data [<xref ref-type="bibr" rid="CR21">21</xref>]. It has information of lots of genome fragments (called “read”). Each read information consists of four lines: (1) id (header), (2) read (nucleotides), (3) additional header, and (4) a line of quality values (also called quality scores). A line of quality values is a sequence of <italic>Phred scores</italic>
<inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S=-10\log _{10} P$$\end{document}</tex-math><mml:math id="M2"><mml:mrow><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mo>-</mml:mo><mml:mn>10</mml:mn><mml:msub><mml:mo>log</mml:mo><mml:mn>10</mml:mn></mml:msub><mml:mi>P</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq1.gif"/></alternatives></inline-formula>, where <italic>P</italic> corresponds to an estimate of the error probability of each nucleotide. Quality values are often stored in ASCII character of <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Q=S+33$$\end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:mi>Q</mml:mi><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo>+</mml:mo><mml:mn>33</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq2.gif"/></alternatives></inline-formula> (or <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Q=S+64$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:mi>Q</mml:mi><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo>+</mml:mo><mml:mn>64</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq3.gif"/></alternatives></inline-formula>), ranging from 33 to 73 (or from 64 to 104). Since id is short and nucleotides have four (A, C, G, T) possibilities, quality values are the most challenging components to compress [<xref ref-type="bibr" rid="CR6">6</xref>]. The proposed algorithm focuses on compressing the quality values of a FASTQ file.</p>
    </sec>
  </sec>
  <sec id="Sec4">
    <title>Implementation</title>
    <sec id="Sec5">
      <title>Data modeling</title>
      <p id="Par20">Since there are various sequencing technologies from different entities including Illumina [<xref ref-type="bibr" rid="CR22">22</xref>], OxfordNanopore [<xref ref-type="bibr" rid="CR23">23</xref>], PacBio [<xref ref-type="bibr" rid="CR24">24</xref>], and IonTorrent [<xref ref-type="bibr" rid="CR25">25</xref>], we model the lines of quality values under minimal benign assumptions.</p>
      <p id="Par21">Suppose a FASTQ file consists of <italic>N</italic> reads of the same length <italic>L</italic>. Then, we have <italic>N</italic> lines of quality scores <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{Q }^{(1)}, \mathbf{Q }^{(2)}, \dots , \mathbf{Q }^{(N)}$$\end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mo>⋯</mml:mo><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>N</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq4.gif"/></alternatives></inline-formula>, where each line of quality scores has length <italic>L</italic>, i.e., <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{Q }^{(i)} = (Q^{(i)}_1, \dots , Q^{(i)}_L)$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mi>Q</mml:mi><mml:mn>1</mml:mn><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>⋯</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>Q</mml:mi><mml:mi>L</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq5.gif"/></alternatives></inline-formula>. Since the quality scores tend to decrease within the line [<xref ref-type="bibr" rid="CR8">8</xref>], we assume that the line of quality scores is a first-order Markov process. More precisely, the probability of the line of quality scores <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{Q }= (Q_1, \dots , Q_L)$$\end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>⋯</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mi>L</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq6.gif"/></alternatives></inline-formula> is given by<disp-formula id="Equ1"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} P(\mathbf{Q })&amp;= P(Q_1, Q_2, \ldots , Q_L)\\&amp;= P_m (Q_1) \prod _{j=2}^L P_c (Q_j|Q_{j-1}) \end{aligned}$$\end{document}</tex-math><mml:math id="M14" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="bold">Q</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mi>P</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mi>L</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"><mml:mrow/></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:munderover><mml:mo>∏</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mi>L</mml:mi></mml:munderover><mml:msub><mml:mi>P</mml:mi><mml:mi>c</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mi>Q</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2021_4516_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula>for some marginal distribution <inline-formula id="IEq7"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P_m(\cdot )$$\end{document}</tex-math><mml:math id="M16"><mml:mrow><mml:msub><mml:mi>P</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq7.gif"/></alternatives></inline-formula> and conditional distribution <inline-formula id="IEq8"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P_c(\cdot |\cdot )$$\end{document}</tex-math><mml:math id="M18"><mml:mrow><mml:msub><mml:mi>P</mml:mi><mml:mi>c</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq8.gif"/></alternatives></inline-formula>.</p>
      <p id="Par22">We further assume that the lines of quality scores are independent to each other, i.e., for <inline-formula id="IEq9"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i\ne j$$\end{document}</tex-math><mml:math id="M20"><mml:mrow><mml:mi>i</mml:mi><mml:mo>≠</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq9.gif"/></alternatives></inline-formula>,<disp-formula id="Equ2"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} P(\mathbf{Q }^{(i)}, \mathbf{Q }^{(j)}) = P(\mathbf{Q }^{(i)}) P(\mathbf{Q }^{(j)}). \end{aligned}$$\end{document}</tex-math><mml:math id="M22" display="block"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>P</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>P</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mi>P</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><graphic xlink:href="12859_2021_4516_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula>Under the independence assumption, we compress the lines of quality scores separately, which allows concurrent programming. Our modeling is universal because we do not rely on any assumptions, including the range of quality scores, prior distributions, or length of quality scores.</p>
    </sec>
    <sec id="Sec6">
      <title>Algorithm overview</title>
      <p id="Par23">Although FCLQC is a compression algorithm for the quality scores, it can take the whole FASTQ file with id and read information as an input. In the first step (Split and Extraction), we extract the quality scores from the FASTQ file and divide them into multiple sub-files so that each thread can take care of the corresponding sub-file. Then, each thread computes the local statistics of its sub-file, where the main thread collects local statistics to estimate the probability distributions <inline-formula id="IEq10"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P_m$$\end{document}</tex-math><mml:math id="M24"><mml:msub><mml:mi>P</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq10.gif"/></alternatives></inline-formula> and <inline-formula id="IEq11"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P_c$$\end{document}</tex-math><mml:math id="M26"><mml:msub><mml:mi>P</mml:mi><mml:mi>c</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq11.gif"/></alternatives></inline-formula>. In the second step (Compression), all thread’s estimated distributions are shared, and each thread compresses its sub-file with an arithmetic encoder. Details of “Split and Extraction” and “Compression” are provided below.</p>
    </sec>
    <sec id="Sec7">
      <title>Split and extraction</title>
      <p id="Par24">The file must be divided into sub-files for concurrent programming. The proposed scheme requires an input parameter <inline-formula id="IEq12"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$N_s$$\end{document}</tex-math><mml:math id="M28"><mml:msub><mml:mi>N</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq12.gif"/></alternatives></inline-formula> at program execution. The <italic>Splitter</italic> splits the entire file into multiple sub-files, each containing <inline-formula id="IEq13"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$N_s$$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mi>N</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq13.gif"/></alternatives></inline-formula> lines of quality scores, i.e., <inline-formula id="IEq14"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\mathbf{Q }^{(1)}, \mathbf{Q }^{(2)}, \dots , \mathbf{Q }^{(N_s)})$$\end{document}</tex-math><mml:math id="M32"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mo>⋯</mml:mo><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">Q</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>N</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq14.gif"/></alternatives></inline-formula>. The number of sub-files is <inline-formula id="IEq15"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lceil \frac{N}{N_s}\rceil$$\end{document}</tex-math><mml:math id="M34"><mml:mrow><mml:mo>⌈</mml:mo><mml:mfrac><mml:mi>N</mml:mi><mml:msub><mml:mi>N</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:mfrac><mml:mo>⌉</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq15.gif"/></alternatives></inline-formula>.</p>
      <p id="Par25">To compress Markov source effectively, we need to estimate conditional and marginal probabilities. In our implementation, the <italic>Counter</italic> estimates marginal distribution <inline-formula id="IEq16"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\hat{P}}_m$$\end{document}</tex-math><mml:math id="M36"><mml:msub><mml:mover accent="true"><mml:mi>P</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover><mml:mi>m</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq16.gif"/></alternatives></inline-formula> and a conditional distribution <inline-formula id="IEq17"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\hat{P}}_c$$\end{document}</tex-math><mml:math id="M38"><mml:msub><mml:mover accent="true"><mml:mi>P</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover><mml:mi>c</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq17.gif"/></alternatives></inline-formula> by counting occurrences. We implement the <italic>Counter</italic> concurrently so that each thread has its <italic>Counter</italic> to extract the local statistics of quality scores from sub-files. These local statistics are merged into single summary statistics that represent the entire FASTQ file. The algorithm also stores the summary statistics since the decompressor also needs the marginal and conditional distributions. Note that each thread may use the local statistics from the corresponding sub-file; however, storing local statistics is also burdensome. Our experiment shows that the gain in compression rate using local statistics is not significant, and therefore we use summary statistics for simplicity.</p>
    </sec>
    <sec id="Sec8">
      <title>Compression</title>
      <p id="Par26">The next step is an actual compression with an arithmetic encoder. More precisely, we implement an adaptive and concurrent arithmetic encoder for the first-order Markov process. The main thread assigns tasks to threads, and each thread concurrently encodes sub-files using its dedicated adaptive arithmetic encoder with summary statistics. The concurrent program allows the faster threads to compress more sub-files, while slower threads compress fewer sub-files. Our implementation is based on Rust standard concurrency library. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows a brief overview of our algorithm.<fig id="Fig1"><label>Fig. 1</label><caption><p>The general workflow of FCLQC after <italic>Splitter</italic>. <italic>ConunterHandler</italic> assigns sub-files (Q) to threads, and each thread counts the number of occurrences (LS) of quality scores in each file. The main thread aggregates all local count information (LS) and then generates summary statistics (SS) which contains estimated marginal and conditional distributions. The estimated distributions are passed to the <italic>EncoderHandler</italic>, and the <italic>EncoderHandler</italic> provides a sub-file with estimated distributions to each thread. Finally, each thread compresses quality scores of the divided file line by line using the adaptive arithmetic coder (AAC), and outputs a compressed sub-file (C)</p></caption><graphic xlink:href="12859_2021_4516_Fig1_HTML" id="MO3"/></fig></p>
      <p id="Par27">The decoding process also supports concurrency. In the decoding phase, each thread has its dedicated decompressor with summary statistics. The thread takes a compressed sub-file as an input and applies an arithmetic decoder to recover the original sub-file. Finally, we can recover the original quality scores by merging all decompressed sub-files.</p>
      <p id="Par28">Our algorithm supports random access, which refers to the ability to access a random location. Random access is convenient for many applications because it is inefficient to decompress the entire file to use a portion of the file. Note that outputs of an adaptive arithmetic encoder may have different numbers of bits for quality scores lines, which is usually a bottleneck for random access. To support random access, we generate a header for each line of quality scores that indicates the number of bits per line. The decompressor can find the exact location of the specific compressed quality scores by collecting header information.</p>
      <p id="Par29">In high-speed data compression, one of the challenges is a data writing step to a file. To minimize the I/O issue, we use the bit-buffers while compressing and decompressing the quality scores. For example, while compression, the buffer collects multiple compressed quality scores and flushes them to the output file.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <p id="Par30">This section describes the experimental results of proposed lossless quality scores compressor FCLQC as well as experimental setups. We have compared the performance of FCLQC with other baseline algorithms, including lossless quality scores compressor LCQS [<xref ref-type="bibr" rid="CR14">14</xref>] and general-purpose compressors. All algorithms are tested with the recommended options that achieve the best compression rate.</p>
    <p id="Par31">We run experiments on Linux (Ubuntu LTS 20.04.2) with the following hardware specifications: AMD Ryzen Threadripper 3990X 64-Core Processor 128-thread and 128 GB of memory. The number of threads is a tunable parameter in FCLQC; however, we do not use all 128 threads because some algorithms do not have an option to adjust the number of threads. We set the number of quality score lines <inline-formula id="IEq29"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$N_s$$\end{document}</tex-math><mml:math id="M40"><mml:msub><mml:mi>N</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq29.gif"/></alternatives></inline-formula> for each sub-file accordingly so that the number of sub-files is 120. We discuss more the number of threads in the following sections.</p>
    <sec id="Sec10">
      <title>Datasets</title>
      <p id="Par32">For a fair comparison, we selected the same FASTQ files from the experiment in LCQS [<xref ref-type="bibr" rid="CR14">14</xref>]. In addition, we experiment with the additional dataset from different species, file size, coverage, and sequencing technology to avoid a data-dependent bias. We also apply compression algorithms to the synthetic data (<italic>syn_read1</italic>, <italic>syn_read2</italic>) generated by SimNGS [<xref ref-type="bibr" rid="CR26">26</xref>], which is not considered in [<xref ref-type="bibr" rid="CR14">14</xref>]. The synthetic dataset is publicly available in <italic>Synthetic, Mouse, and Sampled Human data (SMaSH)</italic> [<xref ref-type="bibr" rid="CR27">27</xref>]. Details of datasets are provided in Table <xref rid="Tab1" ref-type="table">1</xref>.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Details of quality scores datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Filename</th><th align="left">Organism</th><th align="left">Technology</th><th align="left">Length</th><th align="left">Size (MB)</th><th align="left">Coverage</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td align="left">P.Aeruginosa</td><td align="left">Illumina GAIIx</td><td char="." align="char">100</td><td char="." align="char">160</td><td align="left">50x</td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td align="left">P.Aeruginosa</td><td align="left">Illumina GAIIx</td><td char="." align="char">100</td><td char="." align="char">160</td><td align="left">50x</td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td align="left">S.Cerevisiae</td><td align="left">Illumina GAII</td><td char="." align="char">63</td><td char="." align="char">918</td><td align="left">175x</td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td align="left">S.Cerevisiae</td><td align="left">Illumina GAII</td><td char="." align="char">75</td><td char="." align="char">1090</td><td align="left">175x</td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td align="left">T.Cacao</td><td align="left">Illumina GAIIx</td><td char="." align="char">108</td><td char="." align="char">7197</td><td align="left">35x</td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td align="left">T.Cacao</td><td align="left">Illumina GAIIx</td><td char="." align="char">74</td><td char="." align="char">4952</td><td align="left">35x</td></tr><tr><td align="left"><italic>syn_read1</italic></td><td align="left">Synthetic</td><td align="left">SimNGS</td><td char="." align="char">101</td><td char="." align="char">43,775</td><td align="left">30x</td></tr><tr><td align="left"><italic>syn_read2</italic></td><td align="left">Synthetic</td><td align="left">SimNGS</td><td char="." align="char">101</td><td char="." align="char">43,775</td><td align="left">30x</td></tr></tbody></table></table-wrap></p>
      <p id="Par33">FCLQC has a preprocessing step that extracts quality scores from the FASTQ file. However, most other quality score compression algorithms and general-purpose algorithms cannot handle the raw FASTQ file. In the experiment, we extract quality scores from the FASTQ file, where all compression algorithms take extracted quality scores as an input. Also, we compute the compression ratio based on the file size of extracted quality scores.</p>
    </sec>
    <sec id="Sec11">
      <title>Baseline compressors</title>
      <p id="Par34">State-of-the-art FASTQ compression algorithms such as Spring [<xref ref-type="bibr" rid="CR3">3</xref>], LFastqC [<xref ref-type="bibr" rid="CR4">4</xref>], FQSqueezer [<xref ref-type="bibr" rid="CR5">5</xref>], and fqzcomp [<xref ref-type="bibr" rid="CR6">6</xref>] are focused on compressing the entire FASTQ file, especially the reads, rather than specializing in quality scores. Since the final compressed file of these algorithms includes ids and reads, it is hard to measure the compression rate of quality scores separately. For this reason, in this paper, we mainly consider the recently proposed lossless quality scores compressor LCQS [<xref ref-type="bibr" rid="CR14">14</xref>], which can compress quality scores exclusively. LCQS optimized the compression ratio with robust quality score partitioning and adopted SIMD-based parallelization to boost compression speed. We believe that LCQS is a good baseline algorithm since only a few specialized compressors support random access and parallelization. Also, LCQS showed the best compression ratio and improved (de)compression speed for most datasets. Since LCQS has no parameters to tune, we apply LCQS in default mode.</p>
      <p id="Par35">Another quality score compressor AQUA [<xref ref-type="bibr" rid="CR13">13</xref>] is considered. AQUa used multiple coding tools (such as different coder, average different coder, convolution predictors, etc.) with context-adaptive binary arithmetic coding (CABAC) scheme. We use the same parameters of AQUa that are described in [<xref ref-type="bibr" rid="CR14">14</xref>]. Note that LCQS is complied with standard C++11 and g++ complier, while AQUa is implemented in JAVA.</p>
      <p id="Par36">Also, we consider general-purpose compressors, including 7-zip and pigz (parallelizable Gzip) widely used in practice. For pigz and 7-zip, we compress the quality score in the best compression mode in all experiments.</p>
      <p id="Par37">Each baseline algorithm supports different features, which are summarized in Table <xref rid="Tab2" ref-type="table">2</xref>. Also, the details on the algorithm configurations are given in Table <xref rid="Tab3" ref-type="table">3</xref>.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Supported features of compressors</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">FCLQC</th><th align="left">LCQS</th><th align="left">AQUA</th><th align="left">7-zip</th><th align="left">pigz</th></tr></thead><tbody><tr><td align="left">Without preprocessing</td><td align="left"><inline-formula id="IEq18"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M42"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq18.gif"/></alternatives></inline-formula></td><td align="left">✕</td><td align="left">✕</td><td align="left">✕</td><td align="left">✕</td></tr><tr><td align="left">Random access</td><td align="left"><inline-formula id="IEq19"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M44"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq19.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq20"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M46"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq20.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq21"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M48"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq21.gif"/></alternatives></inline-formula></td><td align="left">✕</td><td align="left">✕</td></tr><tr><td align="left">Multi-threading</td><td align="left"><inline-formula id="IEq22"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M50"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq22.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq23"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M52"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq23.gif"/></alternatives></inline-formula></td><td align="left">✕</td><td align="left"><inline-formula id="IEq24"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M54"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq24.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq25"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M56"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq25.gif"/></alternatives></inline-formula></td></tr><tr><td align="left">Custom number of threads</td><td align="left"><inline-formula id="IEq26"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M58"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq26.gif"/></alternatives></inline-formula></td><td align="left">✕</td><td align="left">✕</td><td align="left"><inline-formula id="IEq27"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M60"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq27.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq28"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\checkmark$$\end{document}</tex-math><mml:math id="M62"><mml:mo stretchy="false">✓</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq28.gif"/></alternatives></inline-formula></td></tr></tbody></table></table-wrap><table-wrap id="Tab3"><label>Table 3</label><caption><p>Configurations for compressors</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Compressor</th><th align="left">Parameters</th><th align="left">Source URL</th></tr></thead><tbody><tr><td align="left">FCLQC</td><td align="left">Precision = 35 thead_num = 6 or 16</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://github.com/Minhyeok01/FCLQC">https://github.com/Minhyeok01/FCLQC</ext-link></td></tr><tr><td align="left">LCQS</td><td align="left"/><td align="left"><ext-link ext-link-type="uri" xlink:href="https://github.com/SCUT-CCNL/LCQS">https://github.com/SCUT-CCNL/LCQS</ext-link></td></tr><tr><td align="left">AQUa</td><td align="left">Windowsize = 1, cabacgrouping=10485760</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://github.com/tparidae/AQUa">https://github.com/tparidae/AQUa</ext-link></td></tr><tr><td align="left">7-zip</td><td align="left">-mx9(best) -mmt6 or -mmt16</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://www.7-zip.org/">https://www.7-zip.org/</ext-link></td></tr><tr><td align="left">pigz</td><td align="left">-9(best) -p 6 or -p 16</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://zlib.net/pigz/">https://zlib.net/pigz/</ext-link></td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec12">
      <title>Comparision: speed</title>
      <p id="Par38">The compression (or decompression) speed (MB/s) is measured by the ratio between the original file size (MB) of extracted quality scores and the compression time (seconds). Our experimental equipment has 64 cores and can use a maximum of 128 threads. However, we cannot manually adjust the number of threads of LCQS or AQUa. LCQS automatically adjusts the number of threads based on the file size. LCQS uses six threads when it compresses <italic>SRR554369</italic> while using 16 threads for other datasets. For a fair comparison, we limit the number of threads by 16 while testing FCLQC. Note that AQUa does not natively support multi-threading, so we measured compression speed by dividing the file.</p>
      <p id="Par39">Recall that FCLQC does not require a preprocessing of FASTQ files since it takes a whole FASTQ file as an input and divides the file into id, read, and quality scores. Because other baseline algorithms take a quality scores file (which can be viewed as a preprocessed file) as an input, we ignore the splitting time while measuring the running time of FCLQC.<xref ref-type="fn" rid="Fn1">1</xref></p>
      <p id="Par40">In Table <xref rid="Tab4" ref-type="table">4</xref>,
the compression speed and average memory usage of LCQS, AQUa, 7-zip, and pigz are presented. FCLQC shows an average compression speed of 137 (MB/s) when using six threads and 306 (MB/s) when using 16 threads, which is far better than the other baseline compressors on all datasets. Compared to LCQS, the performance gain is 31x to 46x. It provides more than 23x performance improvement over AQUa, 47x performance improvement over 7-zip, and 3x over pigz when using 16 threads. FCLQC also used less memory after pigz. LCQS requires more memory to compress small file sizes and considerably more memory, even for large files. On the other hand, FCLQC uses less memory compared to the file size. Thus, we can say that FCLQC performs better even in memory-constrained hardware environments.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Comparison results of compression speed and average memory usage</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2">Filename</th><th align="left" colspan="5">Compression speed (MB/s)</th><th align="left" colspan="5">Average memory usage (GB)</th></tr><tr><th align="left">FCLQC</th><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip</th><th align="left">Pigz</th><th align="left">FCLQC</th><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip</th><th align="left">Pigz</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td align="left"><bold>135.59</bold></td><td char="." align="char">3.09</td><td char="." align="char">3.29</td><td char="." align="char">1.02</td><td char="." align="char">17.40</td><td char="." align="char">0.0132</td><td char="." align="char">1.76</td><td char="." align="char">0.59</td><td char="." align="char">0.63</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td align="left"><bold>139.13</bold></td><td char="." align="char">2.98</td><td char="." align="char">3.28</td><td char="." align="char">0.97</td><td char="." align="char">14.41</td><td char="." align="char">0.0132</td><td char="." align="char">1.38</td><td char="." align="char">0.58</td><td char="." align="char">0.63</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td align="left"><bold>305.64</bold></td><td char="." align="char">7.12</td><td char="." align="char">6.43</td><td char="." align="char">2.87</td><td char="." align="char">50.70</td><td char="." align="char">0.0134</td><td char="." align="char">7.68</td><td char="." align="char">0.60</td><td char="." align="char">3.52</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td align="left"><bold>301.67</bold></td><td char="." align="char">6.37</td><td char="." align="char">8.30</td><td char="." align="char">3.45</td><td char="." align="char">77.64</td><td char="." align="char">0.0133</td><td char="." align="char">7.93</td><td char="." align="char">0.59</td><td char="." align="char">4.41</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td align="left"><bold>341.74</bold></td><td char="." align="char">10.36</td><td char="." align="char">9.47</td><td char="." align="char">6.12</td><td char="." align="char">36.33</td><td char="." align="char">0.0133</td><td char="." align="char">10.71</td><td char="." align="char">0.62</td><td char="." align="char">7.43</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td align="left"><bold>316.58</bold></td><td char="." align="char">7.73</td><td char="." align="char">8.85</td><td char="." align="char">4.21</td><td char="." align="char">43.10</td><td char="." align="char">0.0134</td><td char="." align="char">9.57</td><td char="." align="char">0.61</td><td char="." align="char">7.56</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>syn_read1</italic></td><td align="left"><bold>292.03</bold></td><td char="." align="char">8.94</td><td char="." align="char">12.17</td><td char="." align="char">6.10</td><td char="." align="char">41.98</td><td char="." align="char">0.0134</td><td char="." align="char">14.24</td><td char="." align="char">0.62</td><td char="." align="char">12.12</td><td align="left"><bold>0.0126</bold></td></tr><tr><td align="left"><italic>syn_read2</italic></td><td align="left"><bold>275.52</bold></td><td char="." align="char">7.95</td><td char="." align="char">11.46</td><td char="." align="char">5.58</td><td char="." align="char">38.32</td><td char="." align="char">0.0133</td><td char="." align="char">14.31</td><td char="." align="char">0.61</td><td char="." align="char">12.04</td><td align="left"><bold>0.0126</bold></td></tr></tbody></table><table-wrap-foot><p>Bold denotes the fastest compression speed or lowest memory usage</p></table-wrap-foot></table-wrap></p>
      <p id="Par41">Table <xref rid="Tab5" ref-type="table">5</xref> presents compression time with various numbers of threads while compressing <italic>SRR870667_1</italic> dataset. Compression time is measured only with 7-zip and pigz, which can adjust the number of threads. It is clear that FCLQC is the fastest in all the number of threads. Note that 7-zip cannot handle all threads properly when the number of available threads is more than 40. On the other hand, FCLQC can properly control all threads and compress the quality scores quickly.<table-wrap id="Tab5"><label>Table 5</label><caption><p>Compression time with the number of thread and CPU usage</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2">Number of threads</th><th align="left" colspan="3">Compression time (s)</th><th align="left" colspan="3">Average CPU Usage (%)</th></tr><tr><th align="left">FCLQC</th><th align="left">7-zip</th><th align="left">Pigz</th><th align="left">FCLQC</th><th align="left">7-zip</th><th align="left">Pigz</th></tr></thead><tbody><tr><td align="left">1</td><td char="." align="char"><bold>311.66</bold></td><td char="." align="char">9728.62</td><td char="." align="char">3080.33</td><td char="." align="char">100</td><td char="." align="char">100</td><td char="." align="char">100</td></tr><tr><td align="left">10</td><td char="." align="char"><bold>32.47</bold></td><td char="." align="char">1749.51</td><td char="." align="char">314.78</td><td char="." align="char">1000</td><td char="." align="char">600</td><td char="." align="char">1000</td></tr><tr><td align="left">20</td><td char="." align="char"><bold>21.37</bold></td><td char="." align="char">903.39</td><td char="." align="char">159.89</td><td char="." align="char">1900</td><td char="." align="char">900</td><td char="." align="char">2000</td></tr><tr><td align="left">40</td><td char="." align="char"><bold>7.37</bold></td><td char="." align="char">695.92</td><td char="." align="char">83.70</td><td char="." align="char">3200</td><td char="." align="char">2800</td><td char="." align="char">4000</td></tr><tr><td align="left">60</td><td char="." align="char"><bold>6.54</bold></td><td char="." align="char">480.06</td><td char="." align="char">60.13</td><td char="." align="char">5900</td><td char="." align="char">2800</td><td char="." align="char">6000</td></tr><tr><td align="left">80</td><td char="." align="char"><bold>5.91</bold></td><td char="." align="char">481.98</td><td char="." align="char">49.13</td><td char="." align="char">7300</td><td char="." align="char">2800</td><td char="." align="char">8000</td></tr><tr><td align="left">100</td><td char="." align="char"><bold>5.29</bold></td><td char="." align="char">478.78</td><td char="." align="char">42.41</td><td char="." align="char">9500</td><td char="." align="char">2800</td><td char="." align="char">10,000</td></tr><tr><td align="left">120</td><td char="." align="char"><bold>5.06</bold></td><td char="." align="char">481.53</td><td char="." align="char">36.63</td><td char="." align="char">11,600</td><td char="." align="char">2800</td><td char="." align="char">12,000</td></tr></tbody></table><table-wrap-foot><p>Bold denotes the lowest compression time</p></table-wrap-foot></table-wrap></p>
      <p id="Par42">Figure <xref rid="Fig2" ref-type="fig">2</xref> shows speedup, the ratio between the single thread execution time and the parallel execution time. It is clear that 7-zip cannot handle more than 40 threads. On the other hand, speedup of FCLQC linearly increases until 40 threads and increases steadily after that. It is due to some not perfectly optimized parts of FCLQC which are not parallelized, such as merging local statistics. However, it is still convincing that FCLQC shows comparable speedup with highly optimized algorithms such as pigz. We also point out that the overall compression speed of FCLQC is much faster than pigz. The above result justifies that the concurrent implementation using Rust.<fig id="Fig2"><label>Fig. 2</label><caption><p>Speedup of FCLQC, 7-zip, and pigz where thread counts are from 10 to 120</p></caption><graphic xlink:href="12859_2021_4516_Fig2_HTML" id="MO4"/></fig></p>
      <p id="Par43">In order to evaluate random access decompression speed, we select 30 random quality score line indexes, where 10 of them are small indexes (low), another ten are mid-range indexes (mid), and the last ten are large indexes (high). Then, we measured the average time (seconds) to decompress a quality score line of selected indexes of each range (low, mid, and high). 7-zip and pigz do not support random access, and AQUa fails to random access with some datasets [<xref ref-type="bibr" rid="CR14">14</xref>]. Therefore, we compare the random access result to LCQS only. Since the thread count of LCQS varies while random access decompression, it is hard to determine the number of threads for FCLQC for a fair comparison. We set FCLQC to use a single thread for a simple comparison, although it can handle multi-threads for random access decompression. Table <xref rid="Tab6" ref-type="table">6</xref> shows the random access decompression speeds where FCLQC outperforms LCQS except for <italic>syn_read1</italic> and <italic>syn_read2</italic>. This is due to single-thread restriction of FCLQC when the file size is huge. Note that the random access decompression time is nearly half if two threads are allowed for FCLQC. We also note that indexing in FCLQC is not fully optimized; therefore the random access decompression speed depends on the index. Standard deviations (std) of random access decompression times of FCLQC are also provided, where LCQS shows consistent decompression speed (we omit std of LCQS).<table-wrap id="Tab6"><label>Table 6</label><caption><p>Result of random access decompression speed</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="3">Filename</th><th align="left" colspan="6">Comparison of random access decompression speed (s)</th></tr><tr><th align="left" colspan="3">FCLQC</th><th align="left" colspan="3">LCQS</th></tr><tr><th align="left">Low</th><th align="left">Mid</th><th align="left">High</th><th align="left">Low</th><th align="left">Mid</th><th align="left">High</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td align="left"><inline-formula id="IEq30"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.148 }\pm \mathbf{0.063 }$$\end{document}</tex-math><mml:math id="M64"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.148</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.063</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq30.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq31"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.383 }\pm \mathbf{0.075 }$$\end{document}</tex-math><mml:math id="M66"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.383</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.075</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq31.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq32"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.572 }\pm \mathbf{0.055 }$$\end{document}</tex-math><mml:math id="M68"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.572</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.055</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq32.gif"/></alternatives></inline-formula></td><td align="left">50.027</td><td align="left">50.082</td><td align="left">50.213</td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td align="left"><inline-formula id="IEq33"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.133 }\pm \mathbf{0.052 }$$\end{document}</tex-math><mml:math id="M70"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.133</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.052</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq33.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq34"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.379 }\pm \mathbf{0.078 }$$\end{document}</tex-math><mml:math id="M72"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.379</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.078</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq34.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq35"><alternatives><tex-math id="M73">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.567 }\pm \mathbf{0.054 }$$\end{document}</tex-math><mml:math id="M74"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.567</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.054</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq35.gif"/></alternatives></inline-formula></td><td align="left">52.310</td><td align="left">52.507</td><td align="left">52.627</td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td align="left"><inline-formula id="IEq36"><alternatives><tex-math id="M75">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{0.834 }\pm \mathbf{0.399 }$$\end{document}</tex-math><mml:math id="M76"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">0.834</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.399</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq36.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq37"><alternatives><tex-math id="M77">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{2.194 }\pm \mathbf{0.361 }$$\end{document}</tex-math><mml:math id="M78"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">2.194</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.361</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq37.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq38"><alternatives><tex-math id="M79">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{3.579 }\pm \mathbf{0.371 }$$\end{document}</tex-math><mml:math id="M80"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">3.579</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.371</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq38.gif"/></alternatives></inline-formula></td><td align="left">52.855</td><td align="left">55.487</td><td align="left">56.429</td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td align="left"><inline-formula id="IEq39"><alternatives><tex-math id="M81">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{1.073 }\pm \mathbf{0.417 }$$\end{document}</tex-math><mml:math id="M82"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">1.073</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.417</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq39.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq40"><alternatives><tex-math id="M83">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{2.787 }\pm \mathbf{0.440 }$$\end{document}</tex-math><mml:math id="M84"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">2.787</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.440</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq40.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq41"><alternatives><tex-math id="M85">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{4.554 }\pm \mathbf{0.497 }$$\end{document}</tex-math><mml:math id="M86"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">4.554</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">0.497</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq41.gif"/></alternatives></inline-formula></td><td align="left">54.961</td><td align="left">57.307</td><td align="left">58.232</td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td align="left"><inline-formula id="IEq42"><alternatives><tex-math id="M87">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{6.335 }\pm \mathbf{1.534 }$$\end{document}</tex-math><mml:math id="M88"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">6.335</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">1.534</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq42.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq43"><alternatives><tex-math id="M89">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{14.695 }\pm \mathbf{2.389 }$$\end{document}</tex-math><mml:math id="M90"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">14.695</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">2.389</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq43.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq44"><alternatives><tex-math id="M91">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{24.424 }\pm \mathbf{2.323 }$$\end{document}</tex-math><mml:math id="M92"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">24.424</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">2.323</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq44.gif"/></alternatives></inline-formula></td><td align="left">53.417</td><td align="left">54.124</td><td align="left">52.771</td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td align="left"><inline-formula id="IEq45"><alternatives><tex-math id="M93">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{6.048 }\pm \mathbf{1.421 }$$\end{document}</tex-math><mml:math id="M94"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">6.048</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">1.421</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq45.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq46"><alternatives><tex-math id="M95">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{14.175 }\pm \mathbf{2.118 }$$\end{document}</tex-math><mml:math id="M96"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">14.175</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">2.118</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq46.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq47"><alternatives><tex-math id="M97">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{21.984 }\pm \mathbf{2.465 }$$\end{document}</tex-math><mml:math id="M98"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">21.984</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">2.465</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq47.gif"/></alternatives></inline-formula></td><td align="left">58.847</td><td align="left">58.174</td><td align="left">57.997</td></tr><tr><td align="left"><italic>syn_read1</italic></td><td align="left"><inline-formula id="IEq48"><alternatives><tex-math id="M99">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{32.432 }\pm \mathbf{4.864 }$$\end{document}</tex-math><mml:math id="M100"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">32.432</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">4.864</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq48.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq49"><alternatives><tex-math id="M101">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$73.781 \pm 10.756$$\end{document}</tex-math><mml:math id="M102"><mml:mrow><mml:mn>73.781</mml:mn><mml:mo>±</mml:mo><mml:mn>10.756</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq49.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq50"><alternatives><tex-math id="M103">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$97.296 \pm 15.459$$\end{document}</tex-math><mml:math id="M104"><mml:mrow><mml:mn>97.296</mml:mn><mml:mo>±</mml:mo><mml:mn>15.459</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq50.gif"/></alternatives></inline-formula></td><td align="left">60.651</td><td align="left"><bold>62.135</bold></td><td align="left"><bold>63.547</bold></td></tr><tr><td align="left"><italic>syn_read2</italic></td><td align="left"><inline-formula id="IEq51"><alternatives><tex-math id="M105">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbf{31.541 }\pm \mathbf{4.498 }$$\end{document}</tex-math><mml:math id="M106"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">31.541</mml:mn></mml:mrow><mml:mo>±</mml:mo><mml:mrow><mml:mn mathvariant="bold">4.498</mml:mn></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq51.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq52"><alternatives><tex-math id="M107">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$70.991 \pm 9.648$$\end{document}</tex-math><mml:math id="M108"><mml:mrow><mml:mn>70.991</mml:mn><mml:mo>±</mml:mo><mml:mn>9.648</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq52.gif"/></alternatives></inline-formula></td><td align="left"><inline-formula id="IEq53"><alternatives><tex-math id="M109">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$94.623 \pm 13.132$$\end{document}</tex-math><mml:math id="M110"><mml:mrow><mml:mn>94.623</mml:mn><mml:mo>±</mml:mo><mml:mn>13.132</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq53.gif"/></alternatives></inline-formula></td><td align="left">61.965</td><td align="left"><bold>62.456</bold></td><td align="left"><bold>63.165</bold></td></tr></tbody></table><table-wrap-foot><p>Bold denotes the fastest random access decompression</p></table-wrap-foot></table-wrap></p>
      <p id="Par44">Table <xref rid="Tab7" ref-type="table">7</xref> shows the results of the decompression speed when the decoder reconstructs the original quality scores sub-files. We set FCLQC to use two threads for <italic>SRR5543692_1</italic> and <italic>SRR5543692_2</italic>, and 16 threads for other datasets. Averaged decompression speeds of FCLQC are 41.36 (MB/s) and 121.28 (MB/s) for two threads and 16 threads, respectively, which outperforms LQCS on all datasets. The peak thread count of LCQS was 120 threads while decompressing, and recall that the number of threads is not an adjustable parameter for LCQS. Although LCQS flexibly varies the thread count while FCLQC is restricted to 16 threads, FCLQC shows better performance (13.9x in <italic>SRR870667_1</italic> and 5.6x in <italic>SRR870667_2</italic>).<table-wrap id="Tab7"><label>Table 7</label><caption><p>Comparison results of decompression speed</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2">Filename</th><th align="left" colspan="2">Decompression speed (MB/s)</th></tr><tr><th align="left">FCLQC</th><th align="left">LCQS</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td char="." align="char"><bold>40.27</bold></td><td char="." align="char">3.21</td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td char="." align="char"><bold>42.44</bold></td><td char="." align="char">3.07</td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td char="." align="char"><bold>111.66</bold></td><td char="." align="char">11.38</td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td char="." align="char"><bold>116.46</bold></td><td char="." align="char">11.81</td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td char="." align="char"><bold>122.38</bold></td><td char="." align="char">8.21</td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td char="." align="char"><bold>124.95</bold></td><td char="." align="char">18.8</td></tr><tr><td align="left"><italic>syn_read1</italic></td><td char="." align="char"><bold>125.85</bold></td><td char="." align="char">10.29</td></tr><tr><td align="left"><italic>syn_read2</italic></td><td char="." align="char"><bold>126.40</bold></td><td char="." align="char">10.35</td></tr></tbody></table><table-wrap-foot><p>Bold denotes the fastest decompression speed</p></table-wrap-foot></table-wrap></p>
      <p id="Par45">In Table <xref rid="Tab8" ref-type="table">8</xref>, we also measured the decompression time when the number of threads increases.<xref ref-type="fn" rid="Fn2">2</xref> Similar to the compression time, the decompression time is (roughly) inversely proportional to the number of threads. Note that the decompression took longer than the compression because of the arithmetic decoder’s binary search.<table-wrap id="Tab8"><label>Table 8</label><caption><p>Decompression time of FCLQC when the number of threads increases</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2">Filename</th><th align="left" colspan="5">Decompression time (s)</th></tr><tr><th align="left">10</th><th align="left">30</th><th align="left">60</th><th align="left">90</th><th align="left">120</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td char="." align="char">1.49492</td><td char="." align="char">0.80012</td><td char="." align="char">0.55523</td><td char="." align="char">0.51588</td><td char="." align="char">0.48690</td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td char="." align="char">1.52766</td><td char="." align="char">0.80448</td><td char="." align="char">0.56461</td><td char="." align="char">0.52217</td><td char="." align="char">0.48321</td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td char="." align="char">11.26921</td><td char="." align="char">6.51885</td><td char="." align="char">4.63464</td><td char="." align="char">3.98554</td><td char="." align="char">3.35740</td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td char="." align="char">12.21315</td><td char="." align="char">7.17441</td><td char="." align="char">4.93512</td><td char="." align="char">4.40018</td><td char="." align="char">4.08363</td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td char="." align="char">67.20655</td><td char="." align="char">35.34112</td><td char="." align="char">24.08606</td><td char="." align="char">21.38290</td><td char="." align="char">18.88168</td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td char="." align="char">54.44474</td><td char="." align="char">31.43011</td><td char="." align="char">21.77509</td><td char="." align="char">18.16317</td><td char="." align="char">16.11619</td></tr><tr><td align="left"><italic>syn_read1</italic></td><td char="." align="char">412.46256</td><td char="." align="char">217.53169</td><td char="." align="char">151.75177</td><td char="." align="char">130.78657</td><td char="." align="char">111.23652</td></tr><tr><td align="left"><italic>syn_read2</italic></td><td char="." align="char">433.82677</td><td char="." align="char">223.34369</td><td char="." align="char">153.61791</td><td char="." align="char">132.44471</td><td char="." align="char">112.75674</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec13">
      <title>Comparision: compression ratio</title>
      <p id="Par46">The compression ratio is defined by the ratio between the original quality scores file size and the compressed file size. Table <xref rid="Tab9" ref-type="table">9</xref> shows the compression ratios of compression schemes under the same settings when we measured compression/decompression speeds in Tables <xref rid="Tab4" ref-type="table">4</xref> and <xref rid="Tab7" ref-type="table">7</xref>. LCQS tends to obtain better compression ratios than the other methods in all datasets. The compression ratios of FCLQC are comparable (or slightly worse) to that of LCQS for most datasets. Compared to AQUa and 7-zip, the proposed algorithm shows better performance, 3% and 4.69% on average, respectively. For all datasets, FCLQC shows a better compression ratio (about 14%) on average than pigz.<table-wrap id="Tab9"><label>Table 9</label><caption><p>Comparison results of compression ratio</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2">Filename</th><th align="left" colspan="5">Compression ratio</th></tr><tr><th align="left">FCLQC</th><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip</th><th align="left">pigz</th></tr></thead><tbody><tr><td align="left"><italic>SRR554369_1</italic></td><td align="left">3.02</td><td align="left"><bold>3.43</bold></td><td align="left">2.97</td><td align="left">2.94</td><td align="left">2.59</td></tr><tr><td align="left"><italic>SRR554369_2</italic></td><td align="left">3.04</td><td align="left"><bold>3.32</bold></td><td align="left">2.93</td><td align="left">2.87</td><td align="left">2.54</td></tr><tr><td align="left"><italic>SRR327342_1</italic></td><td align="left">2.59</td><td align="left"><bold>2.79</bold></td><td align="left">2.57</td><td align="left">2.51</td><td align="left">2.25</td></tr><tr><td align="left"><italic>SRR327342_2</italic></td><td align="left">2.42</td><td align="left"><bold>2.57</bold></td><td align="left">2.35</td><td align="left">2.31</td><td align="left">2.09</td></tr><tr><td align="left"><italic>SRR870667_1</italic></td><td align="left">2.89</td><td align="left"><bold>3.25</bold></td><td align="left">2.86</td><td align="left">2.83</td><td align="left">2.50</td></tr><tr><td align="left"><italic>SRR870667_2</italic></td><td align="left">2.66</td><td align="left"><bold>2.86</bold></td><td align="left">2.58</td><td align="left">2.54</td><td align="left">2.27</td></tr><tr><td align="left"><italic>syn_read1</italic></td><td align="left">2.52</td><td align="left"><bold>2.62</bold></td><td align="left">2.39</td><td align="left">2.29</td><td align="left">2.14</td></tr><tr><td align="left"><italic>syn_read2</italic></td><td align="left">2.20</td><td align="left"><bold>2.32</bold></td><td align="left">2.07</td><td align="left">2.07</td><td align="left">1.91</td></tr></tbody></table><table-wrap-foot><p>Bold denotes the highest compression ratio</p></table-wrap-foot></table-wrap></p>
      <p id="Par47">Figure <xref rid="Fig3" ref-type="fig">3</xref> visualizes the trade-off between average compression ratio and compression speed of compression schemes for all dataset. Although FCLQC has a lower compression ratio than LCQS, it shows a significantly faster compression speed. Figure <xref rid="Fig4" ref-type="fig">4</xref> shows the average compression ratio and decompression speed of compression schemes for all dataset. In this experiment, LCQS used more than two threads, and all other algorithms used only one thread. Although pigz has a faster decompression speed than other algorithms, it does not support random access and the compression rate is degraded up to 25% compared to LCQS. The performance degradation of FCLQC is not significant considering the extreme boosts on compression/decompression speeds and the generality of the algorithm.<fig id="Fig3"><label>Fig. 3</label><caption><p>The average compression ratio and the compression of FCLQC and baseline compressors for all dataset</p></caption><graphic xlink:href="12859_2021_4516_Fig3_HTML" id="MO5"/></fig><fig id="Fig4"><label>Fig. 4</label><caption><p>The average compression ratio and decompression speed of FCLQC and baseline compressors for all dataset</p></caption><graphic xlink:href="12859_2021_4516_Fig4_HTML" id="MO6"/></fig></p>
      <p id="Par48">It is clear that the better compression ratio is one of the most important goals for compression algorithms; however, it is not the only criterion. There are applications where the compression speed is a bottleneck, many commercial compression algorithms provide an option to sacrifice compression rate to achieve better compression speed. For example, pigz has a “best” option, which provides the best compression ratio but slow. On the other hand, pigz also has a “fast” option with faster compression, but the compression ratio is worse. More precisely, if we compress <italic>SRR_554369_1</italic> using pigz, the compression ratio is 2.59 with the “best” option and 2.23 with the “fast” option. We believe that FCLQC is a reasonable choice for speed sensitive applications.</p>
    </sec>
  </sec>
  <sec id="Sec14">
    <title>Conclusions</title>
    <p id="Par49">We proposed a new lossless quality scores compressor FCLQC, which focuses on the algorithm’s running time. We implemented FCLQC using Rust and achieved thread safety via concurrent programming. FCLQC was evaluated on various quality score datasets and showed significant boosts on compression speed while maintaining the compression ratio. Also, FCLQC is universal since it does not have any assumptions on sequencing technologies and supports desired features such as random access. Thus, FCLQC is a good candidate for FASTQ file compression in practice, where the compression and decompression speed is a bottleneck.</p>
    <sec id="Sec15">
      <title>Availability and requirements</title>
      <p id="Par50">
        <list list-type="bullet">
          <list-item>
            <p id="Par51">Project name: FCLQC.</p>
          </list-item>
          <list-item>
            <p id="Par52">Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/Minhyeok01/FCLQC">https://github.com/Minhyeok01/FCLQC</ext-link>.</p>
          </list-item>
          <list-item>
            <p id="Par53">Operating systems: Linux/Windows.</p>
          </list-item>
          <list-item>
            <p id="Par54">Programming language: Rust.</p>
          </list-item>
          <list-item>
            <p id="Par55">Other requirements: cargo 1.42.0 or higher.</p>
          </list-item>
          <list-item>
            <p id="Par56">License: The MIT License.</p>
          </list-item>
          <list-item>
            <p id="Par57">Any restrictions to use by non-academics: For commercial use, please contact the authors.</p>
          </list-item>
        </list>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>GB</term>
        <def>
          <p id="Par4">Gigabyte</p>
        </def>
      </def-item>
      <def-item>
        <term>HGP</term>
        <def>
          <p id="Par5">Human genome project</p>
        </def>
      </def-item>
      <def-item>
        <term>IO</term>
        <def>
          <p id="Par6">Input and output</p>
        </def>
      </def-item>
      <def-item>
        <term>LTS</term>
        <def>
          <p id="Par7">Long term support</p>
        </def>
      </def-item>
      <def-item>
        <term>MB</term>
        <def>
          <p id="Par8">Megabyte</p>
        </def>
      </def-item>
      <def-item>
        <term>MPEG-G</term>
        <def>
          <p id="Par9">Moving Picture Experts Group—Genomic information</p>
        </def>
      </def-item>
      <def-item>
        <term>NGS</term>
        <def>
          <p id="Par10">Next generation sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>SMaSH</term>
        <def>
          <p id="Par11">Synthetic, mouse and sampled human data</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par61">Note that preprocessing (mostly splitting) took 26 s when we split the 20 GB quality scores file into 120 sub-files using Linux command. It is negligible compared to other parts of compression.</p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p id="Par62">To focus on the role of the number of threads, we ignore the post-processing (merging sub-files) while measuring decompression time. Note that it took 10 s to merge all decompressed sub-files for the reconstructed quality score file of size 20 GB. This is relatively small compared to the total decompression time.</p>
    </fn>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>MC implemented the code. MC and AN wrote the manuscript. AN guided the project. Both authors read and approved the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work is funded by Korea Institute of Science and Technology Information.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The synthetic datasets are available at SMaSH <ext-link ext-link-type="uri" xlink:href="http://smash.cs.berkeley.edu/datasets.html">http://smash.cs.berkeley.edu/datasets.html</ext-link> (Identifiers: Synthetic Datasets/Venter) and the others are available at NCBI <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/">https://www.ncbi.nlm.nih.gov/</ext-link> (Identifiers: SRR554369, SRR327342, and SRR870667). The implementation of FCLQC can be downloaded from <ext-link ext-link-type="uri" xlink:href="https://github.com/Minhyeok01/FCLQC">https://github.com/Minhyeok01/FCLQC</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethics approval and consent to participate</title>
      <p id="Par58">The ethic approval is not required since we used publicly available datasets.</p>
    </notes>
    <notes id="FPar4">
      <title>Consent for publication</title>
      <p id="Par59">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par60">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mardis</surname>
            <given-names>ER</given-names>
          </name>
        </person-group>
        <article-title>A decade’s perspective on DNA sequencing technology</article-title>
        <source>Nature</source>
        <year>2011</year>
        <volume>470</volume>
        <issue>7333</issue>
        <fpage>198</fpage>
        <lpage>203</lpage>
        <pub-id pub-id-type="doi">10.1038/nature09796</pub-id>
        <pub-id pub-id-type="pmid">21307932</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stephens</surname>
            <given-names>ZD</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>SY</given-names>
          </name>
          <name>
            <surname>Faghri</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>RH</given-names>
          </name>
          <name>
            <surname>Zhai</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Efron</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Iyer</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Sinha</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>GE</given-names>
          </name>
        </person-group>
        <article-title>Big data: astronomical or genomical?</article-title>
        <source>PLoS Biol</source>
        <year>2015</year>
        <volume>13</volume>
        <issue>7</issue>
        <fpage>1002195</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pbio.1002195</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chandak</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tatwawadi</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ochoa</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hernaez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Weissman</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Spring: a next-generation compressor for FASTQ data</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>35</volume>
        <issue>15</issue>
        <fpage>2674</fpage>
        <lpage>2676</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty1015</pub-id>
        <pub-id pub-id-type="pmid">30535063</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Al Yami</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>C-H</given-names>
          </name>
        </person-group>
        <article-title>LFastqC: a lossless non-reference-based FASTQ compressor</article-title>
        <source>PLoS ONE</source>
        <year>2019</year>
        <volume>14</volume>
        <issue>11</issue>
        <fpage>0224806</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0224806</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Deorowicz</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>FQSqueezer: k-mer-based compression of sequencing data</article-title>
        <source>Sci Rep</source>
        <year>2020</year>
        <volume>10</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/s41598-019-56847-4</pub-id>
        <pub-id pub-id-type="pmid">31913322</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bonfield</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Mahoney</surname>
            <given-names>MV</given-names>
          </name>
        </person-group>
        <article-title>Compression of FASTQ and SAM format sequencing data</article-title>
        <source>PLoS ONE</source>
        <year>2013</year>
        <volume>8</volume>
        <issue>3</issue>
        <fpage>59190</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0059190</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Hernaez M, Ochoa I, Weissman T. A cluster-based approach to compression of quality scores. In: 2016 data compression conference (DCC). IEEE; 2016. p. 261–70.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Malysa</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Hernaez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ochoa</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Rao</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ganesan</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Weissman</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>QVZ: lossy compression of quality values</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>19</issue>
        <fpage>3122</fpage>
        <lpage>3129</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv330</pub-id>
        <pub-id pub-id-type="pmid">26026138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bonfield</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>McCarthy</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Crumble: reference free lossy compression of sequence quality values</article-title>
        <source>Bioinformatics</source>
        <year>2019</year>
        <volume>35</volume>
        <issue>2</issue>
        <fpage>337</fpage>
        <lpage>339</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty608</pub-id>
        <pub-id pub-id-type="pmid">29992288</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Voges J, Hernaez M, Mattavelli M, Ostermann J. An introduction to MPEG-G: The first open ISO/IEC standard for the compression and exchange of genomic sequencing data. In: Proceedings of the IEEE; 2021.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nicolae</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pathak</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rajasekaran</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>LFQC: a lossless compression algorithm for FASTQ files</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>20</issue>
        <fpage>3276</fpage>
        <lpage>3281</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv384</pub-id>
        <pub-id pub-id-type="pmid">26093148</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cochrane</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Cook</surname>
            <given-names>CE</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>The future of DNA sequence archiving</article-title>
        <source>GigaScience</source>
        <year>2012</year>
        <volume>1</volume>
        <issue>1</issue>
        <fpage>2047</fpage>
        <lpage>217</lpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-1-2</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paridaens</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Van Wallendael</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>De Neve</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lambert</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>AQUA: an adaptive framework for compression of sequencing quality scores with random access functionality</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>3</issue>
        <fpage>425</fpage>
        <lpage>433</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx607</pub-id>
        <pub-id pub-id-type="pmid">29028894</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ke</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>LCQS: an efficient lossless compression tool of quality scores with random access functionality</article-title>
        <source>BMC Bioinform</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1186/s12859-019-3325-0</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Klabnik S, Nichols C. The rust programming language; 2018. <ext-link ext-link-type="uri" xlink:href="https://doc.rust-lang.org/book/ch16-00-concurrency.html">https://doc.rust-lang.org/book/ch16-00-concurrency.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Research M. Rust; 2010. <ext-link ext-link-type="uri" xlink:href="https://www.rust-lang.org/">https://www.rust-lang.org/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Fulton KR, Chan A, Votipka D, Hicks M, Mazurek ML. Benefits and drawbacks of adopting a secure programming language: rust as a case study. In: Seventeenth symposium on usable privacy and security (<inline-formula id="IEq56"><alternatives><tex-math id="M111">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\{$$\end{document}</tex-math><mml:math id="M112"><mml:mo stretchy="false">{</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq56.gif"/></alternatives></inline-formula>SOUPS<inline-formula id="IEq57"><alternatives><tex-math id="M113">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\}$$\end{document}</tex-math><mml:math id="M114"><mml:mo stretchy="false">}</mml:mo></mml:math><inline-graphic xlink:href="12859_2021_4516_Article_IEq57.gif"/></alternatives></inline-formula> 2021); 2021. p. 597–616.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Perkel</surname>
            <given-names>JM</given-names>
          </name>
        </person-group>
        <article-title>Why scientists are turning to rust</article-title>
        <source>Nature</source>
        <year>2020</year>
        <volume>588</volume>
        <issue>7836</issue>
        <fpage>185</fpage>
        <lpage>186</lpage>
        <pub-id pub-id-type="doi">10.1038/d41586-020-03382-2</pub-id>
        <pub-id pub-id-type="pmid">33262490</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Stack Overflow Developer Survey 2020. <ext-link ext-link-type="uri" xlink:href="https://insights.stackoverflow.com/survey/2020">https://insights.stackoverflow.com/survey/2020</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Rust-bio: a fast and safe bioinformatics library</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>3</issue>
        <fpage>444</fpage>
        <lpage>446</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv573</pub-id>
        <pub-id pub-id-type="pmid">26446134</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Metzker</surname>
            <given-names>ML</given-names>
          </name>
        </person-group>
        <article-title>Sequencing technologies—the next generation</article-title>
        <source>Nat Rev Genet</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>31</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg2626</pub-id>
        <pub-id pub-id-type="pmid">19997069</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Voelkerding</surname>
            <given-names>KV</given-names>
          </name>
          <name>
            <surname>Dames</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Durtschi</surname>
            <given-names>JD</given-names>
          </name>
        </person-group>
        <article-title>Next-generation sequencing: from basic research to diagnostics</article-title>
        <source>Clin Chem</source>
        <year>2009</year>
        <volume>55</volume>
        <issue>4</issue>
        <fpage>641</fpage>
        <lpage>658</lpage>
        <pub-id pub-id-type="doi">10.1373/clinchem.2008.112789</pub-id>
        <pub-id pub-id-type="pmid">19246620</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Haque</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>H-C</given-names>
          </name>
          <name>
            <surname>Liang</surname>
            <given-names>X-J</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Solid-state and biological nanopore for real-time sensing of single chemical and sequencing of DNA</article-title>
        <source>Nano Today</source>
        <year>2013</year>
        <volume>8</volume>
        <issue>1</issue>
        <fpage>56</fpage>
        <lpage>74</lpage>
        <pub-id pub-id-type="doi">10.1016/j.nantod.2012.12.008</pub-id>
        <pub-id pub-id-type="pmid">23504223</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McCarthy</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Third generation DNA sequencing: pacific biosciences’ single molecule real time technology</article-title>
        <source>Chem Biol</source>
        <year>2010</year>
        <volume>17</volume>
        <issue>7</issue>
        <fpage>675</fpage>
        <lpage>676</lpage>
        <pub-id pub-id-type="doi">10.1016/j.chembiol.2010.07.004</pub-id>
        <pub-id pub-id-type="pmid">20659677</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rusk</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Torrents of sequence</article-title>
        <source>Nat Methods</source>
        <year>2011</year>
        <volume>8</volume>
        <issue>1</issue>
        <fpage>44</fpage>
        <lpage>44</lpage>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Massingham T. simNGS—software for simulating next generation sequencing data; 2012. <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/goldman-srv/simNGS/">https://www.ebi.ac.uk/goldman-srv/simNGS/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Talwalkar</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Liptrap</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Newcomb</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hartl</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Terhorst</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Curtis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Bresler</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Song</surname>
            <given-names>YS</given-names>
          </name>
          <name>
            <surname>Jordan</surname>
            <given-names>MI</given-names>
          </name>
          <name>
            <surname>Patterson</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>SM a SH: a benchmarking toolkit for human genome variant calling</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>19</issue>
        <fpage>2787</fpage>
        <lpage>2795</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu345</pub-id>
        <pub-id pub-id-type="pmid">24894505</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
