<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Gigascience</journal-id>
    <journal-id journal-id-type="iso-abbrev">Gigascience</journal-id>
    <journal-id journal-id-type="publisher-id">gigascience</journal-id>
    <journal-title-group>
      <journal-title>GigaScience</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2047-217X</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6755254</article-id>
    <article-id pub-id-type="doi">10.1093/gigascience/giz109</article-id>
    <article-id pub-id-type="publisher-id">giz109</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technical Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Bionitio: demonstrating and facilitating best practices for bioinformatics command-line software</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-5096-4735</contrib-id>
        <name>
          <surname>Georgeson</surname>
          <given-names>Peter</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="author-notes" rid="afn1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-9906-0673</contrib-id>
        <name>
          <surname>Syme</surname>
          <given-names>Anna</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff3">3</xref>
        <xref ref-type="author-notes" rid="afn1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sloggett</surname>
          <given-names>Clare</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chung</surname>
          <given-names>Jessica</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-8433-6270</contrib-id>
        <name>
          <surname>Dashnow</surname>
          <given-names>Harriet</given-names>
        </name>
        <xref ref-type="aff" rid="aff4">4</xref>
        <xref ref-type="aff" rid="aff5">5</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-8965-2595</contrib-id>
        <name>
          <surname>Milton</surname>
          <given-names>Michael</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff6">6</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-0292-2880</contrib-id>
        <name>
          <surname>Lonsdale</surname>
          <given-names>Andrew</given-names>
        </name>
        <xref ref-type="aff" rid="aff4">4</xref>
        <xref ref-type="aff" rid="aff7">7</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Powell</surname>
          <given-names>David</given-names>
        </name>
        <xref ref-type="aff" rid="aff8">8</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-6046-610X</contrib-id>
        <name>
          <surname>Seemann</surname>
          <given-names>Torsten</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff9">9</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-4840-1095</contrib-id>
        <name>
          <surname>Pope</surname>
          <given-names>Bernard</given-names>
        </name>
        <!--<email>bjpope@unimelb.edu.au</email>-->
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="aff" rid="aff10">10</xref>
        <xref ref-type="corresp" rid="cor1"/>
      </contrib>
    </contrib-group>
    <aff id="aff1"><label>1</label><institution>Melbourne Bioinformatics, The University of Melbourne</institution>, 187 Grattan Street, Carlton, Victoria, <country country="AU">Australia</country> 3053</aff>
    <aff id="aff2"><label>2</label><institution>Colorectal Oncogenomics Group, Department of Clinical Pathology, The University of Melbourne</institution>, Victorian Comprehensive Cancer Centre, 305 Grattan Street, Melbourne, Victoria, <country country="AU">Australia</country> 3000</aff>
    <aff id="aff3"><label>3</label><institution>Royal Botanic Gardens Victoria</institution>, Birdwood Avenue, Melbourne, Victoria, <country country="AU">Australia</country> 3004</aff>
    <aff id="aff4"><label>4</label><institution>Bioinformatics, Murdoch Children's Research Institute, Royal Children's Hospital</institution>, Flemington Road, Parkville, Victoria, <country country="AU">Australia</country> 3052</aff>
    <aff id="aff5"><label>5</label><institution>School of BioSciences, The University of Melbourne</institution>, Royal Parade, Parkville, Victoria, <country country="AU">Australia</country> 3052</aff>
    <aff id="aff6"><label>6</label><institution>Melbourne Genomics Health Alliance, Walter and Eliza Hall Institute</institution>, 1G Royal Parade, Parkville, Victoria, <country country="AU">Australia</country> 3052</aff>
    <aff id="aff7"><label>7</label><institution>ARC Centre of Excellence in Plant Cell Walls, School of BioSciences, The University of Melbourne</institution>, Royal Parade, Parkville, Victoria, <country country="AU">Australia</country> 3052</aff>
    <aff id="aff8"><label>8</label><institution>Monash Bioinformatics Platform, Biomedicine Discovery Institute, Faculty of Medicine, Nursing and Health Sciences</institution>, 15 Innovation Walk, Monash University, Clayton, Victoria, <country country="AU">Australia</country> 3800</aff>
    <aff id="aff9"><label>9</label><institution>Department of Microbiology and Immunology, Doherty Institute for Infection and Immunity, The University of Melbourne</institution>, 792 Elizabeth Street Melbourne, Victoria, <country country="AU">Australia</country> 3000</aff>
    <aff id="aff10"><label>10</label><institution>Department of Medicine, Central Clinical School, Monash University</institution>, Clayton, Victoria, <country country="AU">Australia</country> 3800</aff>
    <author-notes>
      <corresp id="cor1"><bold>Correspondence address</bold>. Bernard Pope, Victoria, Australia. E-mail: <email>bjpope@unimelb.edu.au</email>.</corresp>
      <fn id="afn1">
        <p>Peter Georgeson and Anna Syme contributed equally to this work.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub" iso-8601-date="2019-09-23">
      <day>23</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>23</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>8</volume>
    <issue>9</issue>
    <elocation-id>giz109</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>4</month>
        <year>2019</year>
      </date>
      <date date-type="rev-recd">
        <day>16</day>
        <month>7</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>8</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© The Author(s) 2019. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2019</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="giz109.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="abs1">
        <title>Background</title>
        <p>Bioinformatics software tools are often created <italic>ad hoc</italic>, frequently by people without extensive training in software development. In particular, for beginners, the barrier to entry in bioinformatics software development is high, especially if they want to adopt good programming practices. Even experienced developers do not always follow best practices. This results in the proliferation of poorer-quality bioinformatics software, leading to limited scalability and inefficient use of resources; lack of reproducibility, usability, adaptability, and interoperability; and erroneous or inaccurate results.</p>
      </sec>
      <sec id="abs2">
        <title>Findings</title>
        <p>We have developed Bionitio, a tool that automates the process of starting new bioinformatics software projects following recommended best practices. With a single command, the user can create a new well-structured project in 1 of 12 programming languages. The resulting software is functional, carrying out a prototypical bioinformatics task, and thus serves as both a working example and a template for building new tools. Key features include command-line argument parsing, error handling, progress logging, defined exit status values, a test suite, a version number, standardized building and packaging, user documentation, code documentation, a standard open source software license, software revision control, and containerization.</p>
      </sec>
      <sec id="abs3">
        <title>Conclusions</title>
        <p>Bionitio serves as a learning aid for beginner-to-intermediate bioinformatics programmers and provides an excellent starting point for new projects. This helps developers adopt good programming practices from the beginning of a project and encourages high-quality tools to be developed more rapidly. This also benefits users because tools are more easily installed and consistent in their usage. Bionitio is released as open source software under the MIT License and is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/bionitio-team/bionitio">https://github.com/bionitio-team/bionitio</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group kwd-group-type="keywords">
      <kwd>bioinformatics</kwd>
      <kwd>software development</kwd>
      <kwd>best practices</kwd>
      <kwd>training</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Victorian Health and Medical Research</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Australian Government Research Training Program</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Australian Genomics Health</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Murdoch Children's Research Institute</named-content>
          <named-content content-type="funder-identifier">10.13039/100014555</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="10"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <title>Findings</title>
    <sec id="sec1-1">
      <title>Background</title>
      <p>Software development is a central part of bioinformatics, spanning the gamut of activities including data transformation, scripting, workflows, statistical analysis, data visualization, and the implementation of core analytical algorithms. However, despite the critical and far-reaching nature of this work, there is a high degree of variability in the quality of bioinformatics software tools being developed, reflecting a broader trend across all scientific disciplines [<xref rid="bib1" ref-type="bibr">1â3</xref>].</p>
      <p>A common approach to defining software quality is to consider how well it meets its requirements. These can be functionalâidentifying what the software should do, and non-functionalâidentifying how it should work. Given the results-driven nature of research, the functional aspects of scientific programs (e.g., whether expected inputs produce expected outputs) are heavily emphasized at the expense of the non-functional ones (e.g., usability, maintainability, interoperability, efficiency) [<xref rid="bib4" ref-type="bibr">4</xref>]. Additionally, the highly complex and evolving nature of scientific software can make software requirements specifications infeasible, and therefore they are rarely defined in practice [<xref rid="bib4" ref-type="bibr">4</xref>, <xref rid="bib5" ref-type="bibr">5</xref>].</p>
      <p>The underlying causes of poor bioinformatics software quality are multifaceted; however, 2 important factors have been highlighted in the literature: (1) the lack of software engineering training amongst bioinformaticians [<xref rid="bib2" ref-type="bibr">2</xref>, <xref rid="bib3" ref-type="bibr">3</xref>, <xref rid="bib6" ref-type="bibr">6â11</xref>] and (2) the fact that research groups have limited time and money to spend on software quality assurance [<xref rid="bib10" ref-type="bibr">10</xref>, <xref rid="bib12" ref-type="bibr">12â15</xref>]. As a result many bad practices are recurrently observed in the field. Lack of code documentation and user support makes tools hard to install, understand, and use. Limited or non-existent testing can result in unreliable and buggy behaviour. A high degree of coupling with the local computing environment and software dependencies impedes portability. The consequences of using poor-quality software can have a significant impact on scientific outcomes. Substantial amounts of users' time can be wasted in trying to get programs to work, scientific methods can be difficult to reproduce, and in the worst-case scenario, scientific results can be invalid owing to program errors or incorrect use [<xref rid="bib3" ref-type="bibr">3</xref>, <xref rid="bib7" ref-type="bibr">7</xref>, <xref rid="bib8" ref-type="bibr">8</xref>, <xref rid="bib10" ref-type="bibr">10</xref>, <xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib13" ref-type="bibr">13</xref>, <xref rid="bib16" ref-type="bibr">16</xref>, <xref rid="bib17" ref-type="bibr">17</xref>].</p>
      <p>The aforementioned problems are well known and have prompted remedial action in a number of areas. Activities to increase software development training amongst scientists are under way, the most notable examples being the highly successful Software Carpentry and Data Carpentry workshops [<xref rid="bib2" ref-type="bibr">2</xref>, <xref rid="bib3" ref-type="bibr">3</xref>]. Additionally, there are many useful recommendations in the literature offering practical advice for beginners [<xref rid="bib9" ref-type="bibr">9</xref>, <xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib16" ref-type="bibr">16</xref>, <xref rid="bib18" ref-type="bibr">18</xref>] including specific advice for biologists new to programming [<xref rid="bib19" ref-type="bibr">19</xref>]. Significant efforts have also been made in producing software package collections where best-practice guidelines and curation provide minimum standards of software quality, such as Bioconductor for R [<xref rid="bib20" ref-type="bibr">20</xref>], and Bioconda for bioinformatics command-line tools [<xref rid="bib21" ref-type="bibr">21</xref>], to name 2 prominent examples. Operating system virtualization services, such as Docker [<xref rid="bib22" ref-type="bibr">22</xref>], and workflow specification languages, such as the Common Workflow Language (CWL) [<xref rid="bib23" ref-type="bibr">23</xref>], have improved portability and reproducibility of tools and pipelines [<xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib24" ref-type="bibr">24â26</xref>], while systems such as Boutiques [<xref rid="bib27" ref-type="bibr">27</xref>] have enhanced the findability of tools by facilitating the publication of persistent metadata. Increasing the resources available for scientific software development remains a complex challenge. The Software Sustainability Institute in the UK demonstrates one successful model where pooled research funding enables the provision of consultancy, training, and advocacy for scientific software development on a national level [<xref rid="bib28" ref-type="bibr">28</xref>].</p>
      <p>In this work we adopt a pragmatic approach to improving bioinformatics software quality that is summarized by Rule 7 in Carey and Papin's âTen simple rules for biologists learning to programâ: âdevelop good habits early onâ [<xref rid="bib19" ref-type="bibr">19</xref>]. The idea is that new bioinformatics tools should be started by copying and modifying a well-written existing example. This allows bioinformaticians to get started quickly on solving the crux of their problem but also ensures that all the ingredients of good programming style and functionality are present from the beginning. Based on this concept we have developed a tool called Bionitio that automates the process of starting new bioinformatics software projects with recommended software best practices built in. With a single command the user can create a new well-structured project in 1 of (currently) 12 programming languages. The resulting software is functional, carrying out a prototypical bioinformatics task, and thus serves as both a working example and a template for building new tools. It is expected that users will incrementally modify this program to ultimately satisfy the requirements of their task at hand. The key point is that they are building on solid foundations, and because a lot of the mundane-but-important boilerplate is provided by Bionitio, there are fewer barriers to adopting good practices from the start. Specifically, every new Bionitio-created project includes command-line argument parsing, error handling, progress logging, defined exit status values, a test suite, a version number, standardized building and packaging, user documentation, code documentation, a standard open source software license, software revision control, containerization with Docker, and a CWL wrapper. In this article we describe the design and implementation of Bionitio and demonstrate how it can be used to quickly start new bioinformatics projects.</p>
      <p>The closest related work to Bionitio is the Cookiecutter project [<xref rid="bib29" ref-type="bibr">29</xref>]. It also takes advantage of the templating approach for starting new software projects, but it is targeted at a different audience. Cookiecutter provides a more general-purpose templating system that is best suited to starting new software systems in specific programming languages, such as the instantiation of web applications based on particular web framework libraries. Conversely, Bionitio provides many instances of the same prototypical bioinformatics tool implemented in different programming languages. While Bionitio could theoretically be implemented on top of a system such as Cookiecutter, we believe that the extra complexity is not warranted and would be a barrier to understanding for our target audience.</p>
    </sec>
    <sec id="sec1-2">
      <title>Design and implementation</title>
      <p>Bionitio is designed around 2 components. The first component is a prototypical bioinformatics tool that has been re-implemented in (currently) 12 different programming languages. Each implementation of the tool carries out exactly the same task, and each is stored in its own repository on GitHub underneath the bionitio-team project.</p>
      <p>Each of the repositories acts as a self-contained exemplar of how to implement the prototypical tool in the given programming language, carrying out good programming practices (e.g., command-line argument parsing) in a language-idiomatic way.</p>
      <p>The second component is a âbootstrapâ script that automates the process of creating a new software project based on 1 of the language-specific repositories. With a single invocation of the bootstrap script the user can quickly start a new project; all they need to do is specify a new project name and the programming language to use (the $ sign indicates the command-line prompt): 
<list list-type="simple"><list-item><p><monospace>$ bionitio-boot.sh -n newproj -i python</monospace></p></list-item></list></p>
      <p>The example above creates a new local repository called ânewprojâ on the user's computer by cloning and then renaming the bionitio-python repository. Optionally, the user can also specify their GitHub username, which will cause the bootstrap script to create and populate a remote repository on GitHub for the new project. The repository comes with a test suite, allowing continuous integration testing to easily be enabled via GitHub's integration with Travis CI [<xref rid="bib32" ref-type="bibr">30</xref>]. The overall process carried out by the bootstrap script is illustrated in Fig.Â <xref ref-type="fig" rid="fig1">1</xref>.</p>
      <fig id="fig1" orientation="portrait" position="float">
        <label>Figure 1:</label>
        <caption>
          <p>Overview of the automated process for creating new projects performed by the Bionitio bootstrap script.</p>
        </caption>
        <graphic xlink:href="giz109fig1"/>
      </fig>
      <p>The prototypical bioinformatics tool is intended to be easy to understand and modify. Therefore it has only minimal functionalityâjust enough to demonstrate all the key features of a real bioinformatics command-line program without creating distraction with unnecessary complexity. In essence, the tool streams input from â¥1 FASTA files, computes several simple statistics about each file, and prints a tabulated summary of results on standard output. For example, the command below illustrates the behaviour of the tool on a single input FASTA file called âfile1.faâ: 
<list list-type="simple"><list-item><p><monospace>$ bionitio file1.fa</monospace></p></list-item><list-item><p><monospace>FILENAME NUMSEQ TOTAL MIN AVG MAX</monospace></p></list-item><list-item><p><monospace>file1.fa 5264 3801855 31 722 53540</monospace></p></list-item></list></p>
      <p>The output is in tab-delimited format, consisting of a header row, followed by â¥1 rows of data, 1 for each input file. Each data row contains the name of the input file, followed by the total number of sequences in the file (NUMSEQ), the sum of the length of all the sequences in the file (TOTAL), followed by the minimum (MIN), average (AVG), and maximum (MAX) sequence lengths encountered in the file. An optional command-line argument --minlen can be supplied, causing the program to ignore sequences with length strictly less than the given value.</p>
      <p>Each implementation is self-contained and ready to be installed and executed. Consequently, Bionitio is an excellent resource for programmer training. However, the main intended use case is that Bionitio will be used as the starting point for new projects and we expect users to rewrite parts of it to carry out their own desired functionality. Given that much of the boilerplate is already provided, modifying the program should be significantly easier than starting from scratch.</p>
      <p>The 12 current implementation languages were chosen to represent the most commonly used languages in bioinformatics [<xref rid="bib17" ref-type="bibr">17</xref>] (C, C++, Java, JavaScript, Perl, Python, R, and Ruby) but also to provide examples in up-and-coming languages and paradigms (C#, Clojure, Haskell, and Rust). The fact that each instance implements the same prototypical tool provides important consistency amongst the different instances. It means that they all have common functionality, they can be easily compared, they can share the same test suite, their user documentation in the form of a README file can be templated, and the inclusion of new programming language implementations is straightforward. Over time we hope that new language implementations will be contributed by the community.</p>
      <p>All the components of Bionitio are released under the terms of the MIT license; however, we explicitly grant users permission to choose their own license for derivative works. The bootstrap script optionally allows the user to choose 1 of several standard open source licenses for newly created projects (Apache-2.0, BSD-2-Clause, BSD-3-Clause, GPL-2.0, GPL-3.0, and MIT). If no license is specified, the MIT is chosen as the default. The terms of the license are copied into the LICENSE file in the top level of the repository, and all references to the license in source files are updated accordingly.</p>
      <p>The bootstrap script also accepts optional author name and email address arguments, which, if supplied, are inserted into the source code and documentation files at appropriate places. Newly created projects are committed to fresh Git [<xref rid="bib33" ref-type="bibr">31</xref>] repositories. All instances of the word âbionitioâ are replaced with the new project name, including in file paths and file contents, and all files are checked into a new Git repository with a pristine commit history.</p>
      <p>In the remainder of this section we outline the main features incorporated into Bionitio's prototypical tool that facilitate good programming practices and, where possible, relate them to the relevant recommendations in the literature. In the following section we demonstrate by example how Bionitio can be used to create a new software project.</p>
      <table-wrap id="tbl1" orientation="portrait" position="float">
        <label>Table 1:</label>
        <caption>
          <p>Standard libraries and tools used by each implementation of Bionitio</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left" rowspan="1" colspan="1">Language</th>
              <th align="left" rowspan="1" colspan="1">Build/deploy</th>
              <th align="left" rowspan="1" colspan="1">FASTA reading</th>
              <th align="left" rowspan="1" colspan="1">Command-line argument parsing</th>
              <th align="left" rowspan="1" colspan="1">Unit testing</th>
              <th align="left" rowspan="1" colspan="1">Logging</th>
              <th align="left" rowspan="1" colspan="1">Static analysis</th>
              <th align="left" rowspan="1" colspan="1">Code format</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">C</td>
              <td rowspan="1" colspan="1">make</td>
              <td rowspan="1" colspan="1">kseq</td>
              <td rowspan="1" colspan="1">getopt</td>
              <td rowspan="1" colspan="1">assert</td>
              <td rowspan="1" colspan="1">custom</td>
              <td rowspan="1" colspan="1">lint</td>
              <td rowspan="1" colspan="1">clang-format</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">C++</td>
              <td rowspan="1" colspan="1">cmake</td>
              <td rowspan="1" colspan="1">Seqan</td>
              <td rowspan="1" colspan="1">boost::program_options</td>
              <td rowspan="1" colspan="1">catch</td>
              <td rowspan="1" colspan="1">boost::log</td>
              <td rowspan="1" colspan="1">cppcheck</td>
              <td rowspan="1" colspan="1">clang-format</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">C#</td>
              <td rowspan="1" colspan="1">dotnet</td>
              <td rowspan="1" colspan="1">.Net Bio</td>
              <td rowspan="1" colspan="1">Microsoft.Extensions. CommandLineUtils</td>
              <td rowspan="1" colspan="1">Microsoft.VisualStudio. TestTools.UnitTesting</td>
              <td rowspan="1" colspan="1">Serilog</td>
              <td rowspan="1" colspan="1">N/A</td>
              <td rowspan="1" colspan="1">N/A</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Clojure</td>
              <td rowspan="1" colspan="1">lieningen</td>
              <td rowspan="1" colspan="1">Bioclojure</td>
              <td rowspan="1" colspan="1">clojure.tools.cli</td>
              <td rowspan="1" colspan="1">clojure.test</td>
              <td rowspan="1" colspan="1">timbre</td>
              <td rowspan="1" colspan="1">Eastwood</td>
              <td rowspan="1" colspan="1">cljfmt</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Java</td>
              <td rowspan="1" colspan="1">maven</td>
              <td rowspan="1" colspan="1">biojava</td>
              <td rowspan="1" colspan="1">Apache Commons</td>
              <td rowspan="1" colspan="1">junit</td>
              <td rowspan="1" colspan="1">custom</td>
              <td rowspan="1" colspan="1">checkstyle</td>
              <td rowspan="1" colspan="1">checkstyle</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">JavaScript</td>
              <td rowspan="1" colspan="1">node</td>
              <td rowspan="1" colspan="1">fasta-parser</td>
              <td rowspan="1" colspan="1">commander</td>
              <td rowspan="1" colspan="1">mocha</td>
              <td rowspan="1" colspan="1">winston</td>
              <td rowspan="1" colspan="1">N/A</td>
              <td rowspan="1" colspan="1">standard</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Haskell</td>
              <td rowspan="1" colspan="1">stack</td>
              <td rowspan="1" colspan="1">BioHaskell</td>
              <td rowspan="1" colspan="1">optparse-applicative</td>
              <td rowspan="1" colspan="1">hspec</td>
              <td rowspan="1" colspan="1">hslogger</td>
              <td rowspan="1" colspan="1">hlint</td>
              <td rowspan="1" colspan="1">N/A</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Perl</td>
              <td rowspan="1" colspan="1">CPAN</td>
              <td rowspan="1" colspan="1">BioPerl</td>
              <td rowspan="1" colspan="1">Getopt::ArgParse</td>
              <td rowspan="1" colspan="1">Test::More</td>
              <td rowspan="1" colspan="1">Log::Log4perl</td>
              <td rowspan="1" colspan="1">perlcritic</td>
              <td rowspan="1" colspan="1">perltidy</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Python</td>
              <td rowspan="1" colspan="1">pip</td>
              <td rowspan="1" colspan="1">biopython</td>
              <td rowspan="1" colspan="1">argparse</td>
              <td rowspan="1" colspan="1">unittest</td>
              <td rowspan="1" colspan="1">logging</td>
              <td rowspan="1" colspan="1">pylint</td>
              <td rowspan="1" colspan="1">N/A</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">R</td>
              <td rowspan="1" colspan="1">R</td>
              <td rowspan="1" colspan="1">seqinr</td>
              <td rowspan="1" colspan="1">optparse</td>
              <td rowspan="1" colspan="1">testthat</td>
              <td rowspan="1" colspan="1">logging</td>
              <td rowspan="1" colspan="1">lintr</td>
              <td rowspan="1" colspan="1">N/A</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ruby</td>
              <td rowspan="1" colspan="1">gem</td>
              <td rowspan="1" colspan="1">bioruby</td>
              <td rowspan="1" colspan="1">optparse</td>
              <td rowspan="1" colspan="1">Test::Unit</td>
              <td rowspan="1" colspan="1">logger</td>
              <td rowspan="1" colspan="1">N/A</td>
              <td rowspan="1" colspan="1">N/A</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Rust</td>
              <td rowspan="1" colspan="1">cargo</td>
              <td rowspan="1" colspan="1">bio::io::fasta</td>
              <td rowspan="1" colspan="1">argparse</td>
              <td rowspan="1" colspan="1">native test feature of Rust</td>
              <td rowspan="1" colspan="1">log, log4rs</td>
              <td rowspan="1" colspan="1">N/A</td>
              <td rowspan="1" colspan="1">rustfmt</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="req-156649319656337500">
            <p>Instances where no appropriate option was available are marked with N/A.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec id="sec1-3">
      <title>Command-line argument parsing</title>
      <p>We provide a standard command-line interface that follows modern Unix conventions [<xref rid="bib34" ref-type="bibr">32</xref>, <xref rid="bib35" ref-type="bibr">33</xref>], including providing arguments for help and the program version [<xref rid="bib18" ref-type="bibr">18</xref>, <xref rid="bib36" ref-type="bibr">34</xref>], and provision of single-dash notation for short argument names and double-dash notation for long argument names. Most importantly, the --help argument causes the program to display usage information, including a description of each argument and its expected parameters. Where possible we use standard library code for implementing command-line argument parsing (TableÂ <xref rid="tbl1" ref-type="table">1</xref>), which tends to simplify the process of adding new arguments and ensures that usage documentation is generated.</p>
    </sec>
    <sec id="sec1-4">
      <title>Input and output conventions and progress logging</title>
      <p>Bioinformatics tools are often strung together in pipelines. A common Unix paradigm is that each tool should âexpect the output of every program to become the input to another, as yet unknown, programâ [<xref rid="bib37" ref-type="bibr">35</xref>]. Consequently, the tool can take input from â¥1 files or from the standard input device (stdin), which may be piped from the output of another program. Similarly, output is written to the standard output device (stdout) in a tab-delimited format. Additionally, we ensure that error messages are always written to the standard error device (stderr) [<xref rid="bib18" ref-type="bibr">18</xref>].</p>
      <p>We provide an optional progress-logging facility (--log), providing useful metadata about a computation that can aid debugging and provenance [<xref rid="bib11" ref-type="bibr">11</xref>]. Progress-logging messages are written to a specified output file. The log file includes the command line used to execute the program, and entries indicating which files have been processed so far. Events in the log file are annotated with their date and time of occurrence. Where possible we use standard library code for the provision of logging services (TableÂ <xref rid="tbl1" ref-type="table">1</xref>) because these easily facilitate advanced features such as timestamping of log messages, log file rollover, support for concurrency, and different levels of logging output (e.g., messages, warnings, errors).</p>
    </sec>
    <sec id="sec1-5">
      <title>Library code for parsing common bioinformatics file formats</title>
      <p>There are several tasks in bioinformatics that are common across analyses. For example, many tools will need to parse sequence files in FASTA format. Rather than rewrite code for this, it is better to use existing libraries. âDon't repeat yourselfâ is a maxim that can be applied at multiple levels when programming [<xref rid="bib11" ref-type="bibr">11</xref>, <xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib38" ref-type="bibr">36</xref>]. Millions of lines of high-quality open source software are freely available on the Web. It is typically better to find an established library or package that solves a problem than to attempt to write one's own routines for well-established problems [<xref rid="bib3" ref-type="bibr">3</xref>], and this also improves reusability [<xref rid="bib10" ref-type="bibr">10</xref>]. We demonstrate this principle by using existing bioinformatics library code to parse the input files (TableÂ <xref rid="tbl1" ref-type="table">1</xref>). This also allows Bionitio to demonstrate how non-standard library dependencies can be specified in the software package description, such as the âsetup.pyâ file for Python that specifies a dependency on the biopython [<xref rid="bib39" ref-type="bibr">37</xref>] library.</p>
    </sec>
    <sec id="sec1-6">
      <title>Defined exit status values</title>
      <p>Processes on most operating systems return an integer exit status code upon termination. The Unix convention is to use zero for success and non-zero for error. Exit status values provide essential information about the behaviour of executed programs and are relied upon when programs are called within larger systems, such as bioinformatics pipelines. Such pipelines can become large and complex and can run for long periods; therefore, the likelihood of errors is high. Improper indication of success or failure can have significant consequences for such systems. For example, erroneous reporting of exit status zero, for a computation that actually failed, can cause a pipeline to continue processing on incomplete results, yielding unpredictable behaviour, or worse, silent errors. Non-zero exit status values can also provide useful debugging information by distinguishing different classes of errors. Bionitio demonstrates good programming style by defining the exit status values as constants, provides well-defined exit points in the program, and documents the meaning of the status values in the README file.</p>
    </sec>
    <sec id="sec1-7">
      <title>A test suite including unit tests, integration tests, and continuous integration</title>
      <p>Software testing enables us to verify that the various components of the program work as expected; it allows us to modify the codebase while maintaining established functionality; and it provides examples that demonstrate how to use the software along with its expected behaviour [<xref rid="bib16" ref-type="bibr">16</xref>].</p>
      <p>Bionitio includes examples of both unit tests and integration tests. A unit test runs a single method in isolation and enables the verification that each method in the implementation behaves as expected without concern for its extended environment. Where possible we use unit-testing library frameworks appropriate for each programming language because they offer significant extended functionality over hand-written tests and can facilitate better output reporting (TableÂ <xref rid="tbl1" ref-type="table">1</xref>). Integration tests ensure that the program behaves correctly as an entire entity, with all the components working together. Given that all implementations of Bionitio are expected to behave in the same way, they all share the same underlying testing data and automated integration-testing shell script. The README file for the project shows how the user can run a simple test to ensure that the program is working as expected, which increases their confidence that it was installed correctly [<xref rid="bib12" ref-type="bibr">12</xref>].</p>
      <p>Continuous integration is a software development practice that requires all changes to a software project's code base to be integrated, compiled, and tested as changes are made. Travis is an online provider of continuous integration testing that enables automatic execution of tests whenever changes are committed to a source repository, and is currently available free to all GitHub users. This benefits software development by enabling any introduced problems to be identified faster [<xref rid="bib40" ref-type="bibr">38</xref>] and avoids the introduction of breaking changes into the code. Each Bionitio implementation includes all the necessary Travis configuration files and demonstrates how continuous integration can be used to run both the unit and integration tests at each commit to the GitHub repository. The Bionitio wiki on GitHub contains detailed instructions about how to enable Travis for newly created projects. The README file also includes the URL to show the status badge for Travis testing, providing a quick way for users to see the status of continuous integration testing (e.g., a green icon badge showing successful âbuild passingâ).</p>
    </sec>
    <sec id="sec1-8">
      <title>Version number</title>
      <p>Version numbers allow users to track the provenance of their work [<xref rid="bib11" ref-type="bibr">11</xref>, <xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib18" ref-type="bibr">18</xref>]. This is particularly important in science, where reproducibility is a primary concern. Bionitio comes with a clearly defined version number that is defined as a constant in a single place in the source code, which can be displayed to the user of the program via the version command-line argument. We do not prescribe a particular versioning scheme to use (e.g., Semantic Versioning [<xref rid="bib41" ref-type="bibr">39</xref>]); rather we prefer to let the user decide on the most appropriate mechanism for their work. Our main objective is that a version number be defined, that it can be easily discovered by the user, and that it be easy to update and modify in a single place in the program source code.</p>
    </sec>
    <sec id="sec1-9">
      <title>Standardized software packaging and containerization</title>
      <p>The installation process can be one of the most cumbersome and frustrating parts of using bioinformatics software because many tools do not provide much assistance to the user [<xref rid="bib10" ref-type="bibr">10</xref>] and complex dependency chains can clash with local settings [<xref rid="bib25" ref-type="bibr">25</xref>]. Difficult-to-install software reduces reproducibility, is less likely to be used, and can cause problems with reliability due to differences between the developer and user computing environments. These problems can be addressed by using standard build tools and software packaging systems [<xref rid="bib12" ref-type="bibr">12</xref>]. Such systems can automate the process of ensuring that correct and complete versions of software dependencies are installed [<xref rid="bib18" ref-type="bibr">18</xref>], and by following conventional practice, they allow tools to integrate with the broader software ecosystem and follow the principle of least surprise [<xref rid="bib42" ref-type="bibr">40</xref>]. Bionitio does this by adopting the idiomatic package and installation mechanisms for each implementation language. For example in Python we use pip, in C we use GNU autotools and make, and in C++ we use CMake. A full list of the building and packaging systems used in each implementation is provided in TableÂ <xref rid="tbl1" ref-type="table">1</xref>.</p>
      <p>Standard packaging also helps with containerization, which is becoming increasingly useful in bioinformatics [<xref rid="bib43" ref-type="bibr">41</xref>]. Docker containers are a popular implementation of this concept, where the underlying operating system is virtualized and packaged alongside tools and their dependencies. This makes it easy to install âcontainerizedâ software on any platform that supports Docker and facilitates reproducibility by enabling the exact same software build to be used on every system. Each Bionitio implementation comes with a âDockerfileâ that encodes all the necessary information needed to create a containerized version of the tool. As an added benefit, the Docker container is used in Travis continuous integration testing, which both simplifies the use of Travis and also enables the functionality of the container itself to be included in the tests.</p>
    </sec>
    <sec id="sec1-10">
      <title>A standard open source software license</title>
      <p>When software is distributed without a license it is generally interpreted to mean that no permission has been granted from the creators of the software to use, modify, or share it. This is counterproductive to adoption. A standard open source license provides minimum fuss for users and increases the chances that software will be widely used [<xref rid="bib11" ref-type="bibr">11</xref>], partly because it removes barriers to widespread access and partly because it encourages transparency, reuse, and collaboration [<xref rid="bib16" ref-type="bibr">16</xref>]. Many license options are available [<xref rid="bib44" ref-type="bibr">42</xref>]. As mentioned above, new projects started with Bionitio use the MIT license by default, but the user can choose from a number of standard options. The terms of the license are copied into the LICENSE file in the top level of the repository, and the name of the license is indicated prominently in the README file, and in source code files.</p>
    </sec>
    <sec id="sec1-11">
      <title>Documentation</title>
      <p>Software documentation broadly falls into 2 categories: user documentation that explains how to install and use the code and developer documentation that explains how the program is designed and intended to work. For the intended use case of Bionitio we believe that it is important to strike a balance between the extensiveness of documentation and the effort required to maintain it. Therefore we adopt pragmatic recommendations from the literature that offer a good compromise between cost and functionality.</p>
      <p>For user documentation we provide 2 critical components: a README file that appears at the top level of the repository, and comprehensive command-line usage output via the --help argument [<xref rid="bib18" ref-type="bibr">18</xref>, <xref rid="bib36" ref-type="bibr">34</xref>, <xref rid="bib40" ref-type="bibr">38</xref>] as discussed above. The README file includes a program description, dependencies, installation instructions, inputs and outputs, example usage, and licensing information [<xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib45" ref-type="bibr">43</xref>]. To ease the burden of adding new implementations of Bionitio and to ensure consistency across current implementations, we build each README file from a template, such that common parts of the documentation are shared, and language-specific details (such as installation instructions) can be instantiated as needed.</p>
      <p>Good developer documentation tries to explain the reasoning behind the code rather than recapitulating its operations in text [<xref rid="bib3" ref-type="bibr">3</xref>], and it can improve code readability, usability, and debugging [<xref rid="bib36" ref-type="bibr">34</xref>]. In Bionitio we adopt the following conventions in each implementation. Every source code file begins with header documentation that contains at least the following information: the name of the module, a brief description of its purpose, copyright information (author names and date of creation), license information, a maintainer email address, and a concise summary of the main components and processes undertaken in the module. Author names, creation dates, license name, and maintainer email address can be automatically populated by the bootstrap script. Every non-trivial component of code (such as type definitions and procedures) is accompanied by a brief description of the purpose of the component, plus descriptions of the arguments and results of methods, including any conditions that are assumed to uphold.</p>
    </sec>
    <sec id="sec1-12">
      <title>Revision control</title>
      <p>Software revision control provides a systematic way to manage software updates, allowing multiple branches of development to be maintained in parallel, and provides a critical means of coordinating groups of developers [<xref rid="bib11" ref-type="bibr">11</xref>, <xref rid="bib12" ref-type="bibr">12</xref>, <xref rid="bib40" ref-type="bibr">38</xref>]. Modern revision control systems such as Git [<xref rid="bib33" ref-type="bibr">31</xref>] provide flexible and scalable modes of collaboration, supporting individual programmers all the way up to largeâand potentially geographically distributedâteams. The collaborative advantages of Git are complemented by the GitHub code hosting web application [<xref rid="bib46" ref-type="bibr">44</xref>], currently the most popular repository for bioinformatics code [<xref rid="bib17" ref-type="bibr">17</xref>]. GitHub adds issue tracking, documentation publishing, lightweight release management, integration with external tools such as continuous integration testing, and perhaps most importantly, an easy-to-use web interface for source browsing and discovery. Bionitio takes advantage of Git and GitHub in 2 ways. First, the Bionitio project itself is hosted on GitHub, including each of the 12 language-specific implementations of our prototypical bioinformatics tool. The bootstrap script creates new projects by cloning from GitHub, and therefore GitHub acts as our web-accessible content management system. Where possible, common features amongst the implementations, such as testing data, are shared via Git submodules, avoiding repetition. Second, the bootstrap script makes it easy for users to create new GitHub-hosted projects by optionally automating the initialization and population of new repositories via the GitHub API. This saves the user's time, encourages the use of revision control from the start of the project, and facilitates sharing the code with collaborators.</p>
    </sec>
    <sec id="sec1-13">
      <title>Recommended programming conventions</title>
      <p>Each implementation of Bionitio aims to follow the programming conventions of the implementation language. This includes the adoption of standard tools and libraries as well as adhering to programming style guidelines, such as PEP 8 in Python. By following these practices we enhance integration with the language ecosystem, avoid common pitfalls, and encourage contributions from external developers [<xref rid="bib40" ref-type="bibr">38</xref>, <xref rid="bib47" ref-type="bibr">45</xref>]. Where possible, we have adopted automated code formatting tools to ensure that we adhere to recommended style, and static analysis tools to identify likely infelicities and possible sources of error. A full list of the code formatting and static analysis tools used in each implementation is provided in TableÂ <xref rid="tbl1" ref-type="table">1</xref>.</p>
    </sec>
    <sec id="sec1-14">
      <title>CWL tool wrapper</title>
      <p>Bioinformatics pipelinesâwhere multiple tools are chained together to perform an overall analysisâcreate further challenges for reproducible science. This has motivated the creation of pipeline frameworks that allow the logic of such computations to be abstracted from the details of how they are executed. An emerging standard in this area is CWL, which is supported by several popular workflow engines. CWL comprises 2 declarative sub-languages: workflow descriptions, which define data flow patterns between pipeline stages; and command-line tool descriptions, which define the interfaces of tools in a platform-independent manner. Each Bionitio implementation provides a CWL tool description âbionitio.cwlâ that facilitates its incorporation into CWL pipelines and takes advantage of CWL's support for invoking programs within Docker containers.</p>
    </sec>
  </sec>
  <sec sec-type="methods" id="sec2">
    <title>Methods</title>
    <p>In this section we demonstrate how to create a new bioinformatics software project using the Bionitio bootstrap script. In order to follow this process the user requires a GitHub account, and installation of Git on their local computer.</p>
    <sec id="sec2-1">
      <title>Step 1: choose a programming language, project name, and software license</title>
      <p>The Bionitio prototypical bioinformatics tool is currently implemented in 12 programming languages: C, C++, C#, Clojure, Java, JavaScript, Haskell, Perl5, Python, R, Ruby, or Rust. The user must choose which of these languages they want to use for their new project. For users relatively new to programming, with no prior constraints on their choice of language, we recommend they choose a high-level interpreted language such as Python or R. The user must also choose a new name for their project. Optionally, the user may also choose an open source license for their code. The current available options are Apache-2.0, BSD-2-Clause, BSD-3-Clause, GPL-2.0, GPL-3.0, and MIT. If no license is specified, the MIT license is selected by default. In this example we assume that Python is chosen as the implementation language, the project name is ânewproj,â and the BSD-3-Clause license is desired.</p>
    </sec>
    <sec id="sec2-2">
      <title>Step 2: run the bootstrap script to create a new software repository</title>
      <p>The Bionitio bootstrap script is a BASH shell script that automates the process of creating new projects. In principle, if Bionitio is already installed on the user's computer, then the bootstrap script can be run like so: 
<list list-type="simple"><list-item><p><monospace>$ bionitio-boot.sh -i python -n newproj -c BSD-3-Clause</monospace></p></list-item></list></p>
      <p>A user may find it inconvenient to have Bionitio installed just to run the bootstrap script; therefore, they may instead prefer to use Curl [<xref rid="bib48" ref-type="bibr">46</xref>] to simplify the process, by downloading the script directly from GitHub before running it locally: 
<list list-type="simple"><list-item><p><monospace>$ URL=https://raw.githubusercontent.com/\</monospace></p></list-item><list-item><p><monospace>bionitio-team/bionitio/master/boot/bionitio-boot.sh</monospace></p></list-item><list-item><p><monospace>$ curl -sSf $URL | bash -s â -i python -n newproj -c\ BSD-3-Clause</monospace></p></list-item></list></p>
      <p>Alternatively, the bootstrap script can be run from a Docker container published on DockerHub [<xref rid="bib49" ref-type="bibr">47</xref>]: 
<list list-type="simple"><list-item><p><monospace>$ docker run -it -v "$(pwd):/out" ârm\ bionitio/bionitio-boot -i python -n newproj\ -c BSD-3-Clause</monospace></p></list-item></list></p>
      <p>The user may optionally specify an author name and email address, which will be substituted for placeholders in the source code and documentation at appropriate places: 
<list list-type="simple"><list-item><p><monospace>$ bionitio-boot.sh -i python -n newproj\ -c BSD-3-Clause</monospace><monospace>-a "Example Author"\</monospace></p></list-item><list-item><p><monospace>-e example.email@institute.org</monospace></p></list-item></list></p>
      <p>Finally, the user may specify a GitHub username. In this circumstance the bootstrap script will create a new remote repository under the specified project name on GitHub and push the project to that repository: 
<list list-type="simple"><list-item><p><monospace>$ bionitio-boot.sh -i python -n newproj\ -c BSD-3-Clause -a "Example Author"\ -e example.email@institute.org -g\ example_github_user</monospace></p></list-item></list></p>
    </sec>
    <sec id="sec2-3">
      <title>Step 3: run the test suite, and optionally set up continuous integration testing</title>
      <p>Each new repository created by the bootstrap script contains a testing directory called âfunctional_testsâ. Within that directory is an automated testing shell script called (in this example) ânewproj-test.shâ and a sub-directory of test data and corresponding expected outputs. The test script can be run like so: 
<list list-type="simple"><list-item><p><monospace>$ newproj-test.sh -p newproj -d test_data</monospace></p></list-item></list></p>
      <p>The test script reports how many tests passed and failed, and an optional -v (to enable verbose mode) will cause it to report more details about each test case that is run. Obviously, the test cases are specific to the expected behaviour of the prototypical bioinformatics tool implemented by Bionitio. It is expected that the user will replace these tests to suit the requirements of their new project. Despite this, the user will benefit from much of the testing infrastructure provided by the script.</p>
      <p>If the user has created a remote repository for their project on GitHub, they can quickly enable continuous integration testing via Travis CI. Each new project created by Bionitio includes the necessary Travis configuration files that are needed to install the prototypical bioinformatics tool and run the integration and unit test scripts.</p>
      <p>From this point onwards we expect that the user will go on to modify the program in order to carry out their intended task. This includes changing the code of the program itself, updating library dependencies, and importantly, adding appropriate test cases.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec3">
    <title>Conclusions</title>
    <p>Software development is a complex task, involving many concepts and processes that can be daunting for beginners. Many bioinformaticians are not trained in software engineering, and research-oriented projects have limited budgets for quality assurance. The results-driven focus of science means that many important non-functional software requirements are often overlooked. Unfortunately these factors mean that shortcuts are often taken for the sake of making something âthat works,â leading to a proliferation of lower-quality bioinformatics tools.</p>
    <p>Bionitio takes a pragmatic approach to addressing this problem. Our ambition is to help beginner and intermediate bioinformaticians develop good habits early on. We aim to achieve this by automating much of the drudgery involved in setting up new projects by providing a simple working example that has the necessary boilerplate in place. By providing a fast and simple way to start new projects from solid foundations we believe that good practices are more likely to be adopted.</p>
    <p>The challenges faced by the bioinformatics and science communities in building better-quality software are well known, and there is no shortage of practical recommendations to be found in the literature. These guidelines are undoubtedly useful to beginners; however, we believe they fall short in 2 ways. First, they are spread over multiple papers that only partially overlap in their recommendations; therefore, some level of consolidation is needed. Second, they are static artefacts that point to good practices but do not remove the considerable burden of applying them in real code. These 2 observations motivated the creation of Bionitio, both as a way of collecting commonly recommended best practices and as a way of demonstrating and facilitating their use. Therefore a significant contribution of our work is to build a tool that can both illustrate best practices by example but also make it easy to use them in new projects. In this sense Bionitio takes a much more active role in the dissemination and compliance with these principles.</p>
    <sec id="sec3-1">
      <title>Role in education and training</title>
      <p>In very recent work Tractenberg et al. have developed a Mastery Rubric for Bioinformatics with the goal of better defining skills development and competencies in the discipline [<xref rid="bib50" ref-type="bibr">48</xref>]. In this framework, competency in computational methods ranges through 5 levels, from novice (stage 1) to independent bioinformatics practitioner (stage 5). One of the goals of Bionitio is to support education and training for advancing bioinformaticians from stage 3âlearning best practices in programming, and writing basic codeâto stage 5âdeveloping new software that is useful, efficient, standardized, well-documented, and reproducible. As an example of this application, Bionitio was used as the basis for a whole-day workshop on best practices in bioinformatics software development at the Australian Bioinformatics and Computational Biology Society (ABACBS) Annual Conference in November 2018 [<xref rid="bib51" ref-type="bibr">49</xref>], delivered to an audience of 50 bioinformaticians from research and clinical institutes around Australia. In the first half of the workshop participants learnt how to set up a new software repository using Bionitio, allowing time for exploration of the codebase, discussion of key aspects of high-quality software, and an explanation of the processes that are automated by Bionitio. In the second half of the workshop participants learnt about test-driven development and undertook an exercise to extend the codebase with new features, documentation, corresponding test cases, and linkage to revision control and continuous integration testing. In this setting, Bionitio's design as a simple-yet-realistic bioinformatics exemplar provides both a common codebase for coordination of workshop materials and an extensible platform for the delivery of hands-on practical activities. Additionally, by providing complete working examples in many different languages, Bionitio acts as a kind of âRosetta Stoneâ and is therefore likely an excellent vehicle for comparative programming skills transfer.</p>
    </sec>
    <sec id="sec3-2">
      <title>Alignment with FAIR Principles and OSS Recommendations</title>
      <p>In an effort to facilitate continued benefit from the digital assets related to data-intensive science, representatives from academia, industry, funding agencies, and publishers have proposed the FAIR Data Principles that aim to make experimental artefacts findable, accessible, interoperable, and reusable for machines and people [<xref rid="bib52" ref-type="bibr">50</xref>]. JimÃ©nez et al. have argued that poor development practices result in lower-quality outputs that negatively impact reproducibility and reusability of research [<xref rid="bib53" ref-type="bibr">51</xref>], and they propose 4 principles for open source software development (OSS recommendations) that align well with the FAIR principles: (1) make source code publicly accessible from day 1; (2) make software easy to discover by providing software metadata via a popular community registry; (3) adopt a license and comply with the license of third-party dependencies; and (4) define clear and transparent contribution, governance, and communication processes. Tools developed with Bionitio have a head start on satisfying both the FAIR principles and the first 3 OSS recommendations: 
<list list-type="bullet"><list-item><p>they are publicly accessible in GitHub repositories with clearly indicated standard open source licenses and user documentation;</p></list-item><list-item><p>they are interoperable with other tools via standardized inputs and outputs and interfaces that follow long-established conventions;</p></list-item><list-item><p>they are reusable by virtue of the adoption of standard build procedures, the provision of clear documentation relating to installation and usage, containerization with Docker, and integration into CWL;</p></list-item><list-item><p>where appropriate, specific versions (with defined version numbers) can be made findable by the allocation of Digital Object Identifiers facilitated by Zenodo [<xref rid="bib54" ref-type="bibr">52</xref>] through GitHub.</p></list-item></list></p>
      <p>Importantly, Bionitio facilitates compliance with these principles, which is seen by JimÃ©nez et al. as the final (and, in our opinion, most difficult) step in organizational adoption.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>giz109_GIGA-D-19-00145_Original_Submission</label>
      <media xlink:href="giz109_giga-d-19-00145_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup2">
      <label>giz109_GIGA-D-19-00145_Revision_1</label>
      <media xlink:href="giz109_giga-d-19-00145_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup3">
      <label>giz109_GIGA-D-19-00145_Revision_2</label>
      <media xlink:href="giz109_giga-d-19-00145_revision_2.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup4">
      <label>giz109_Response_to_Reviewer_Comments_Original_Submission</label>
      <media xlink:href="giz109_response_to_reviewer_comments_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup5">
      <label>giz109_Response_to_Reviewer_Comments_Revision_1</label>
      <media xlink:href="giz109_response_to_reviewer_comments_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup6">
      <label>giz109_Reviewer_1_Report_Original_Submission</label>
      <caption>
        <p>Gregory Kiar -- 5/19/2019 Reviewed</p>
      </caption>
      <media xlink:href="giz109_reviewer_1_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup7">
      <label>giz109_Reviewer_1_Report_Revision_1</label>
      <caption>
        <p>Gregory Kiar -- 7/27/2019 Reviewed</p>
      </caption>
      <media xlink:href="giz109_reviewer_1_report_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup8">
      <label>giz109_Reviewer_2_Report_Original_Submission</label>
      <caption>
        <p>Lars Ailo Bongo -- 5/20/2019 Reviewed</p>
      </caption>
      <media xlink:href="giz109_reviewer_2_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup9">
      <label>giz109_Reviewer_3_Report_Original_Submission</label>
      <caption>
        <p>Konstantinos Krampis, PhD -- 5/21/2019 Reviewed</p>
      </caption>
      <media xlink:href="giz109_reviewer_3_report_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>ACKNOWLEDGEMENTS</title>
    <p>The authors would like to thank Melbourne Bioinformatics for providing computing resources for the development of Bionitio, and the many users of the tool who have provided feedback about its use.</p>
  </ack>
  <sec id="sec4">
    <title>Availability of supporting source code and requirements</title>
    <p>
      <list list-type="bullet">
        <list-item>
          <p>Project name: Bionitio</p>
        </list-item>
        <list-item>
          <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/bionitio-team/bionitio">https://github.com/bionitio-team/bionitio</ext-link></p>
        </list-item>
        <list-item>
          <p>Operating system(s): Any POSIX-like system</p>
        </list-item>
        <list-item>
          <p>Programming language: Users can choose from C, C++, C#, Clojure, Java, JavaScript, Haskell, Perl, Python, R, Ruby, Rust</p>
        </list-item>
        <list-item>
          <p>Other requirements: BASH, Curl, and Git are required for bionitio-boot.sh</p>
        </list-item>
        <list-item>
          <p>License: MIT</p>
        </list-item>
        <list-item>
          <p>
            <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_017259">RRID:SCR_017259</ext-link>
          </p>
        </list-item>
        <list-item>
          <p>An archival copy of the code is available via the <italic>GigaScience</italic> database, GigaDB [<xref rid="bib55" ref-type="bibr">53</xref>].</p>
        </list-item>
      </list>
    </p>
  </sec>
  <sec id="sec7">
    <title>Abbreviations</title>
    <p>ABACBS: Australian Bioinformatics and Computational Biology Society; API: Application Programming Interface; CWL: Common Workflow Language; FAIR: findable, accessible, interoperable, reusable; OSS: open source software; POSIX: Portable Operating System Interface; URL: universal resource locator.</p>
  </sec>
  <sec id="sec8">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec id="sec9" sec-type="funding">
    <title>Funding</title>
    <p>B.P. is supported by a Victorian Health and Medical Research Fellowship. H.D. is supported by an Australian Government Research Training Program (RTP) Scholarship, an Australian Genomics Health Alliance top up scholarship, and a Murdoch Children's Research Institute top up scholarship. A.L. is supported by an Australian Government Research Training Program (RTP) Scholarship. P.G. is supported by an Australian Government Research Training Program (RTP) scholarship.</p>
  </sec>
  <sec id="sec10">
    <title>Authors' contributions</title>
    <p>T.S., A.L., H.D., and B.P. conceived of the project. All authors contributed to the design, implementation, testing, and documentation of Bionitio. A.S., C.S., A.L., H.D., P.G., and B.P. contributed to manuscript drafting. All authors contributed to manuscript proofreading and final editing.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="bib1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Baker</surname><given-names>M</given-names></name></person-group><article-title>1,500 scientists lift the lid on reproducibility</article-title>. <source>Nature</source>. <year>2016</year>;<volume>533</volume>:<fpage>452</fpage>â<lpage>4</lpage>.<pub-id pub-id-type="pmid">27225100</pub-id></mixed-citation>
    </ref>
    <ref id="bib2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>G</given-names></name></person-group><article-title>Software Carpentry: lessons learned</article-title>. <source>F1000Res</source>. <year>2014</year>;<volume>3</volume>:<fpage>62</fpage>.<pub-id pub-id-type="pmid">24715981</pub-id></mixed-citation>
    </ref>
    <ref id="bib3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Aruliah</surname><given-names>DA</given-names></name>, <name name-style="western"><surname>Brown</surname><given-names>CT</given-names></name>, <etal>et al</etal>.</person-group><article-title>Best practices for scientific computing</article-title>. <source>PLoS Biol</source>. <year>2014</year>;<volume>12</volume>:<fpage>e1001745</fpage>.<pub-id pub-id-type="pmid">24415924</pub-id></mixed-citation>
    </ref>
    <ref id="bib4">
      <label>4.</label>
      <mixed-citation publication-type="journal" id="bib4-gen-2"><person-group person-group-type="author"><name name-style="western"><surname>Verma</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Gesell</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Siy</surname><given-names>H</given-names></name>, <etal>et al</etal>.</person-group><article-title>Lack of software engineering practices in the development of bioinformatics software</article-title>.</mixed-citation>
      <mixed-citation publication-type="book" id="bib4-gen-3">In: <source>ICCGI 2013: Eighth International Multi-Conference on Computing in the Global Information Technology, Nice, France</source>. <publisher-name>IARIA</publisher-name>; <year>2013</year>:<fpage>57</fpage>â<lpage>62</lpage>.</mixed-citation>
    </ref>
    <ref id="bib5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Segal</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Morris</surname><given-names>C</given-names></name></person-group><article-title>Developing scientific software</article-title>. <source>IEEE Softw</source>. <year>2008</year>;<volume>25</volume>:<fpage>18</fpage>â<lpage>20</lpage>.</mixed-citation>
    </ref>
    <ref id="bib6">
      <label>6.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Hannay</surname><given-names>JE</given-names></name>, <name name-style="western"><surname>MacLeod</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Singer</surname><given-names>J</given-names></name>, <etal>et al</etal>.</person-group><article-title>How do scientists develop and use scientific software?</article-title>In: <source>Proceedings of the 2009 ICSE Workshop on Software Engineering for Computational Science and Engineering, Vancouver, BC, Canada</source>. <publisher-loc>Washington, DC</publisher-loc>: <publisher-name>IEEE</publisher-name>; <year>2009</year>, doi:<pub-id pub-id-type="doi">10.1109/SECSE.2009.5069155</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Merali</surname><given-names>Z</given-names></name></person-group><article-title>Error: why scientific programming does not compute</article-title>. <source>Nature</source>. <year>2010</year>;<volume>467</volume>:<fpage>775</fpage>â<lpage>7</lpage>.<pub-id pub-id-type="pmid">20944712</pub-id></mixed-citation>
    </ref>
    <ref id="bib8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Joppa</surname><given-names>LN</given-names></name>, <name name-style="western"><surname>McInerny</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Harper</surname><given-names>R</given-names></name>, <etal>et al</etal>.</person-group><article-title>Troubling trends in scientific software use</article-title>. <source>Science</source>. <year>2013</year>;<volume>340</volume>(<issue>6134</issue>):<fpage>814</fpage>â<lpage>5</lpage>.<pub-id pub-id-type="pmid">23687031</pub-id></mixed-citation>
    </ref>
    <ref id="bib9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Baxter</surname><given-names>SM</given-names></name>, <name name-style="western"><surname>Day</surname><given-names>SW</given-names></name>, <name name-style="western"><surname>Fetrow</surname><given-names>JS</given-names></name>, <etal>et al</etal>.</person-group><article-title>Scientific software development is not an oxymoron</article-title>. <source>PLoS Comput Biol</source>. <year>2006</year>;<volume>2</volume>:<fpage>e87</fpage>.<pub-id pub-id-type="pmid">16965174</pub-id></mixed-citation>
    </ref>
    <ref id="bib10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lawlor</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Walsh</surname><given-names>P</given-names></name></person-group><article-title>Engineering bioinformatics: building reliability, performance and productivity into bioinformatics software</article-title>. <source>Bioengineered</source>. <year>2015</year>;<volume>6</volume>:<fpage>193</fpage>â<lpage>203</lpage>.<pub-id pub-id-type="pmid">25996054</pub-id></mixed-citation>
    </ref>
    <ref id="bib11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>List</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Ebert</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Albrecht</surname><given-names>F</given-names></name></person-group><article-title>Ten simple rules for developing usable software in computational biology</article-title>. <source>PLoS Comput Biol</source>. <year>2017</year>;<volume>13</volume>:<fpage>e1005265</fpage>.<pub-id pub-id-type="pmid">28056032</pub-id></mixed-citation>
    </ref>
    <ref id="bib12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Taschuk</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Wilson</surname><given-names>G</given-names></name></person-group><article-title>Ten simple rules for making research software more robust</article-title>. <source>PLoS Comput Biol</source>. <year>2017</year>;<volume>13</volume>: <fpage>e1005412</fpage>.<pub-id pub-id-type="pmid">28407023</pub-id></mixed-citation>
    </ref>
    <ref id="bib13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Prins</surname><given-names>P</given-names></name>, <name name-style="western"><surname>deÂ Ligt</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Tarasov</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>Toward effective software solutions for big biology</article-title>. <source>Nat Biotechnol</source>. <year>2015</year>;<volume>33</volume>:<fpage>686</fpage>â<lpage>7</lpage>.<pub-id pub-id-type="pmid">26154002</pub-id></mixed-citation>
    </ref>
    <ref id="bib14">
      <label>14.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Umarji</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Seaman</surname><given-names>C</given-names></name>, <name name-style="western"><surname>GunesÂ Koru</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>Software engineering education for bioinformatics</article-title>. In: <source>2009 22nd Conference on Software Engineering Education and Training, Hyderabad, Andhra Pradesh, India</source>. <publisher-name>IEEE</publisher-name>; <year>2009</year>, doi:<pub-id pub-id-type="doi">10.1109/CSEET.2009.44</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Howison</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Deelman</surname><given-names>E</given-names></name>, <name name-style="western"><surname>McLennan</surname><given-names>MJ</given-names></name>, <etal>et al</etal>.</person-group><article-title>Understanding the scientific software ecosystem and its impact: current and future measures</article-title>. <source>Res Eval</source>. <year>2015</year>;<volume>24</volume>:<fpage>454</fpage>â<lpage>70</lpage>.</mixed-citation>
    </ref>
    <ref id="bib16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Leprevost</surname><given-names>F da V</given-names></name>, <name name-style="western"><surname>Barbosa</surname><given-names>VC</given-names></name>, <name name-style="western"><surname>Francisco</surname><given-names>EL</given-names></name>, <etal>et al</etal>.</person-group><article-title>On best practices in the development of bioinformatics software</article-title>. <source>Front Genet</source>. <year>2014</year>;<volume>5</volume>:<fpage>199</fpage>.<pub-id pub-id-type="pmid">25071829</pub-id></mixed-citation>
    </ref>
    <ref id="bib17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Russell</surname><given-names>PH</given-names></name>, <name name-style="western"><surname>Johnson</surname><given-names>RL</given-names></name>, <name name-style="western"><surname>Ananthan</surname><given-names>S</given-names></name>, <etal>et al</etal>.</person-group><article-title>A large-scale analysis of bioinformatics code on GitHub</article-title>. <source>PLoS One</source>. <year>2018</year>;<volume>13</volume>:<fpage>e0205898</fpage>.<pub-id pub-id-type="pmid">30379882</pub-id></mixed-citation>
    </ref>
    <ref id="bib18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Seemann</surname><given-names>T</given-names></name></person-group><article-title>Ten recommendations for creating usable bioinformatics command line software</article-title>. <source>Gigascience</source>. <year>2013</year>;<volume>2</volume>, doi:<pub-id pub-id-type="doi">10.1186/2047-217X-2-15</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Carey</surname><given-names>MA</given-names></name>, <name name-style="western"><surname>Papin</surname><given-names>JA</given-names></name></person-group><article-title>Ten simple rules for biologists learning to program</article-title>. <source>PLoS Comput Biol</source>. <year>2018</year>;<volume>14</volume>: <fpage>e1005871</fpage>.<pub-id pub-id-type="pmid">29300745</pub-id></mixed-citation>
    </ref>
    <ref id="bib20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Huber</surname><given-names>W</given-names></name>, <name name-style="western"><surname>Carey</surname><given-names>VJ</given-names></name>, <name name-style="western"><surname>Gentleman</surname><given-names>R</given-names></name>, <etal>et al</etal>.</person-group><article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>. <source>Nat Methods</source>. <year>2015</year>;<volume>12</volume>:<fpage>115</fpage>â<lpage>21</lpage>.<pub-id pub-id-type="pmid">25633503</pub-id></mixed-citation>
    </ref>
    <ref id="bib21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>GrÃ¼ning</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Dale</surname><given-names>R</given-names></name>, <name name-style="western"><surname>SjÃ¶din</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>Bioconda: sustainable and comprehensive software distribution for the life sciences</article-title>. <source>Nat Methods</source>. <year>2018</year>;<volume>15</volume>:<fpage>475</fpage>â<lpage>6</lpage>.<pub-id pub-id-type="pmid">29967506</pub-id></mixed-citation>
    </ref>
    <ref id="bib22">
      <label>22.</label>
      <mixed-citation publication-type="url"><collab>Docker</collab>. <comment><ext-link ext-link-type="uri" xlink:href="https://www.docker.com/">https://www.docker.com/</ext-link></comment>. Accessed 8 July 2019.</mixed-citation>
    </ref>
    <ref id="bib23">
      <label>23.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Amstutz</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Crusoe</surname><given-names>MR</given-names></name>, <name name-style="western"><surname>TijaniÄ</surname><given-names>N</given-names></name>, <etal>et al</etal>.</person-group><article-title>Common Workflow Language, v1.0</article-title>. <source>Figshare</source>. <year>2016</year>, doi:<pub-id pub-id-type="doi">10.6084/m9.figshare.3115156.v2</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib24">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jackman</surname><given-names>SD</given-names></name>, <name name-style="western"><surname>Mozgacheva</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Chen</surname><given-names>S</given-names></name>, <etal>et al</etal>.</person-group><article-title>ORCA: a comprehensive bioinformatics container environment for education and research</article-title>. <source>Bioinformatics</source>. <year>2019</year>, doi:<pub-id pub-id-type="doi">10.1093/bioinformatics/btz278</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib25">
      <label>25.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Belmann</surname><given-names>P</given-names></name>, <name name-style="western"><surname>DrÃ¶ge</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Bremges</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>Bioboxes: standardised containers for interchangeable bioinformatics software</article-title>. <source>GigaScience</source>. <year>2015</year>;<volume>4</volume>:<fpage>47</fpage>.<pub-id pub-id-type="pmid">26473029</pub-id></mixed-citation>
    </ref>
    <ref id="bib26">
      <label>26.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>O'Connor</surname><given-names>BD</given-names></name>, <name name-style="western"><surname>Yuen</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Chung</surname><given-names>V</given-names></name>, <etal>et al</etal>.</person-group><article-title>The Dockstore: enabling modular, community-focused sharing of Docker-based genomics tools and workflows</article-title>. <source>F1000Res</source>. <year>2017</year>;<volume>6</volume>: <fpage>52</fpage>.<pub-id pub-id-type="pmid">28344774</pub-id></mixed-citation>
    </ref>
    <ref id="bib27">
      <label>27.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Glatard</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Kiar</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Aumentado-Armstrong</surname><given-names>T</given-names></name>, <etal>et al</etal>.</person-group><article-title>Boutiques: a flexible framework to integrate command-line applications in computing platforms</article-title>. <source>Gigascience</source>. <year>2018</year>;<volume>7</volume>, doi:<pub-id pub-id-type="doi">10.1093/gigascience/giy016</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib28">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Crouch</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Hong</surname><given-names>NC</given-names></name>, <name name-style="western"><surname>Hettrick</surname><given-names>S</given-names></name>, <etal>et al</etal>.</person-group><article-title>The Software Sustainability Institute: changing research software attitudes and practices</article-title>. <source>Comput Sci Eng</source>. <year>2013</year>;<volume>15</volume>(<issue>6</issue>):<fpage>74</fpage>â<lpage>80</lpage>.</mixed-citation>
    </ref>
    <ref id="bib29">
      <label>29.</label>
      <mixed-citation publication-type="url"><person-group person-group-type="author"><name name-style="western"><surname>Greenfeld</surname><given-names>AR</given-names></name></person-group><comment>Cookiecutter. <ext-link ext-link-type="uri" xlink:href="https://github.com/audreyr/cookiecutter">https://github.com/audreyr/cookiecutter</ext-link>. Accessed 8 July 2019</comment>.</mixed-citation>
    </ref>
    <ref id="bib32">
      <label>30.</label>
      <mixed-citation publication-type="url"><comment>Travis CI - Test and Deploy Your Code with Confidence. <ext-link ext-link-type="uri" xlink:href="https://travis-ci.org/">https://travis-ci.org/</ext-link></comment>. Accessed 21 March 2019.</mixed-citation>
    </ref>
    <ref id="bib33">
      <label>31.</label>
      <mixed-citation publication-type="url"><comment>The Git Project. Git. <ext-link ext-link-type="uri" xlink:href="https://git-scm.com/">https://git-scm.com/</ext-link></comment>. Accessed 14 April 2019.</mixed-citation>
    </ref>
    <ref id="bib34">
      <label>32.</label>
      <mixed-citation publication-type="book"><collab>IEEE and The Open Group</collab>. <source>The Open Group Base Specifications Issue 7, 2018 edition</source>. <year>2018</year><comment>Report No. 1003.1-2008. <ext-link ext-link-type="uri" xlink:href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html">http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</ext-link></comment></mixed-citation>
    </ref>
    <ref id="bib35">
      <label>33.</label>
      <mixed-citation publication-type="url"><collab>Free Software Foundation, Inc</collab>. <comment>GNU Coding Standards</comment><year>2019</year>; <comment><ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/prep/standards/standards.html">https://www.gnu.org/prep/standards/standards.html</ext-link></comment>.</mixed-citation>
    </ref>
    <ref id="bib36">
      <label>34.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lee</surname><given-names>BD</given-names></name></person-group><article-title>Ten simple rules for documenting scientific software</article-title>. <source>PLoS Comput Biol</source>. <year>2018</year>;<volume>14</volume>:<fpage>e1006561</fpage>.<pub-id pub-id-type="pmid">30571677</pub-id></mixed-citation>
    </ref>
    <ref id="bib37">
      <label>35.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>McIlroy</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Pinson</surname><given-names>EN</given-names></name>, <name name-style="western"><surname>Tague</surname><given-names>BA</given-names></name></person-group><article-title>UNIX Time-Sharing System: Foreword</article-title>. <source>Bell Syst Tech J</source>. <year>1978</year>;<volume>57</volume>:<fpage>1899</fpage>â<lpage>904</lpage>.</mixed-citation>
    </ref>
    <ref id="bib38">
      <label>36.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Andrew</surname><given-names>H</given-names></name>, <name name-style="western"><surname>David</surname><given-names>T</given-names></name></person-group><source>The Pragmatic Programmer: From Journeyman to Master</source>. <publisher-loc>Redwood City, CA</publisher-loc>: <publisher-name>Addison Wesley Longman</publisher-name>; <year>2000</year>.</mixed-citation>
    </ref>
    <ref id="bib39">
      <label>37.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cock</surname><given-names>PJA</given-names></name>, <name name-style="western"><surname>Antao</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Chang</surname><given-names>JT</given-names></name>, <etal>et al</etal>.</person-group><article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>. <year>2009</year>;<volume>25</volume>: <fpage>1422</fpage>â<lpage>3</lpage>.<pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation>
    </ref>
    <ref id="bib40">
      <label>38.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Karimzadeh</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Hoffman</surname><given-names>MM</given-names></name></person-group><article-title>Top considerations for creating bioinformatics software documentation</article-title>. <source>Brief Bioinform</source>. <year>2018</year>;<volume>19</volume>:<fpage>693</fpage>â<lpage>9</lpage>.<pub-id pub-id-type="pmid">28088754</pub-id></mixed-citation>
    </ref>
    <ref id="bib41">
      <label>39.</label>
      <mixed-citation publication-type="url"><person-group person-group-type="author"><name name-style="western"><surname>Preston-Werner</surname><given-names>T</given-names></name></person-group><comment>Semantic Versioning 2.0.0. <ext-link ext-link-type="uri" xlink:href="https://semver.org/spec/v2.0.0.html">https://semver.org/spec/v2.0.0.html</ext-link></comment>. Accessed 4 March 2019.</mixed-citation>
    </ref>
    <ref id="bib42">
      <label>40.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Raymond</surname><given-names>ES</given-names></name></person-group><source>The Art of UNIX Programming</source>. <publisher-name>Addison-Wesley Professional</publisher-name>; <year>2003</year>.</mixed-citation>
    </ref>
    <ref id="bib43">
      <label>41.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gruening</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Sallou</surname><given-names>O</given-names></name>, <name name-style="western"><surname>Moreno</surname><given-names>P</given-names></name>, <etal>et al</etal>.</person-group><article-title>Recommendations for the packaging and containerizing of bioinformatics software [version 2; peer review: 1 approved, 1 approved with reservations]</article-title>. <source>F1000Res</source>. <year>2019</year>, doi:<pub-id pub-id-type="doi">10.12688/f1000research.15140.2</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib44">
      <label>42.</label>
      <mixed-citation publication-type="url"><comment>Choose an open source license. <ext-link ext-link-type="uri" xlink:href="https://choosealicense.com/">https://choosealicense.com/</ext-link></comment>. Accessed 4 March 2019.</mixed-citation>
    </ref>
    <ref id="bib45">
      <label>43.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Johnson</surname><given-names>M</given-names></name></person-group><article-title>Building a better ReadMe</article-title>. <source>Tech Commun</source>. <year>1997</year>;<volume>44</volume>:<fpage>28</fpage>â<lpage>36</lpage>.</mixed-citation>
    </ref>
    <ref id="bib46">
      <label>44.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Perez-Riverol</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Gatto</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Wang</surname><given-names>R</given-names></name>, <etal>et al</etal>.</person-group><article-title>Ten simple rules for taking advantage of Git and GitHub</article-title>. <source>PLoS Comput Biol</source>. <year>2016</year>;<volume>12</volume>:<fpage>e1004947</fpage>.<pub-id pub-id-type="pmid">27415786</pub-id></mixed-citation>
    </ref>
    <ref id="bib47">
      <label>45.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Glass</surname><given-names>RL</given-names></name></person-group><source>Facts and Fallacies of Software Engineering</source>. <publisher-name>Addison-Wesley Professional</publisher-name>; <year>2003</year>.</mixed-citation>
    </ref>
    <ref id="bib48">
      <label>46.</label>
      <mixed-citation publication-type="url"><comment>The Curl developers. Curl: command line tool and library for transferring data with URLs. <ext-link ext-link-type="uri" xlink:href="https://curl.haxx.se/">https://curl.haxx.se/</ext-link></comment>. Accessed 12 April 2019.</mixed-citation>
    </ref>
    <ref id="bib49">
      <label>47.</label>
      <mixed-citation publication-type="url">bionitio boot <comment><ext-link ext-link-type="uri" xlink:href="https://cloud.docker.com/u/bionitio/repository/docker/bionitio/bionitio-boot">https://cloud.docker.com/u/bionitio/repository/docker/bionitio/bionitio-boot</ext-link></comment>.</mixed-citation>
    </ref>
    <ref id="bib50">
      <label>48.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Tractenberg</surname><given-names>RE</given-names></name>, <name name-style="western"><surname>Lindvall</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Attwood</surname><given-names>TK</given-names></name>, <etal>et al</etal>.</person-group><article-title>The mastery rubric for bioinformatics: supporting design and evaluation of career-spanning education and training</article-title>. <source>bioRxiv</source>. <year>2019</year>, doi:<pub-id pub-id-type="doi">10.1101/655456</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib51">
      <label>49.</label>
      <mixed-citation publication-type="url"><comment>Australian Bioinformatics and Computational Biology Society (ABACBS) 2018 Annual Conference. <ext-link ext-link-type="uri" xlink:href="https://www.abacbs.org/conference2018/about">https://www.abacbs.org/conference2018/about</ext-link></comment>. Accessed 18 June 2019.</mixed-citation>
    </ref>
    <ref id="bib52">
      <label>50.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wilkinson</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Dumontier</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Aalbersberg</surname><given-names>IJJ</given-names></name>, <etal>et al</etal>.</person-group><article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>. <source>Sci Data</source>. <year>2016</year>;<volume>3</volume>:<fpage>160018</fpage>.<pub-id pub-id-type="pmid">26978244</pub-id></mixed-citation>
    </ref>
    <ref id="bib53">
      <label>51.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>JimÃ©nez</surname><given-names>RC</given-names></name>, <name name-style="western"><surname>Kuzak</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Alhamdoosh</surname><given-names>M</given-names></name>, <etal>et al</etal>.</person-group><article-title>Four simple recommendations to encourage best practices in research software [version 1; peer review: 3 approved]</article-title>. <source>F1000Res</source>. <year>2017</year>;<volume>6</volume>, doi:<pub-id pub-id-type="doi">10.12688/f1000research.11407.1</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib54">
      <label>52.</label>
      <mixed-citation publication-type="url"><collab>Zenodo</collab>. <comment><ext-link ext-link-type="uri" xlink:href="https://zenodo.org/">https://zenodo.org/</ext-link></comment>. Accessed 18 June 2019.</mixed-citation>
    </ref>
    <ref id="bib55">
      <label>53.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Georgeson</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Syme</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Sloggett</surname><given-names>C</given-names></name>, <etal>et al</etal>.</person-group><article-title>Supporting data for âBionitio: demonstrating and facilitating best practices for bioinformatics command-line software.â</article-title>. <source>GigaScience Database</source>. <year>2019</year><pub-id pub-id-type="doi">10.5524/100640</pub-id>.</mixed-citation>
    </ref>
  </ref-list>
</back>
