<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6030987</article-id>
    <article-id pub-id-type="pmid">29069293</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btx675</article-id>
    <article-id pub-id-type="publisher-id">btx675</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ARCS: scaffolding genome drafts with linked reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Yeo</surname>
          <given-names>Sarah</given-names>
        </name>
        <xref ref-type="author-notes" rid="btx675-FM2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Coombe</surname>
          <given-names>Lauren</given-names>
        </name>
        <xref ref-type="author-notes" rid="btx675-FM2"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-9890-2293</contrib-id>
        <name>
          <surname>Warren</surname>
          <given-names>René L</given-names>
        </name>
        <xref ref-type="corresp" rid="btx675-cor1"/>
        <!--<email>rwarren@bcgsc.ca</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chu</surname>
          <given-names>Justin</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-0950-7839</contrib-id>
        <name>
          <surname>Birol</surname>
          <given-names>Inanç</given-names>
        </name>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Sahinalp</surname>
          <given-names>Cenk</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="AFF1">British Columbia Cancer Agency, Genome Sciences Centre, Vancouver, BC, Canada</aff>
    <author-notes>
      <fn id="btx675-FM2">
        <p>The authors wish it to be known that, in their opinion, Sarah Yeo, Lauren Coombe and René L.Warren authors should be regarded as Joint First Authors.</p>
      </fn>
      <corresp id="btx675-cor1">To whom correspondence should be addressed. Email: <email>rwarren@bcgsc.ca</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>3</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2017-10-23">
      <day>23</day>
      <month>10</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>23</day>
      <month>10</month>
      <year>2017</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>34</volume>
    <issue>5</issue>
    <fpage>725</fpage>
    <lpage>731</lpage>
    <history>
      <date date-type="received">
        <day>22</day>
        <month>3</month>
        <year>2017</year>
      </date>
      <date date-type="rev-recd">
        <day>28</day>
        <month>7</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>20</day>
        <month>10</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2017. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2017</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btx675.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Sequencing of human genomes is now routine, and assembly of shotgun reads is increasingly feasible. However, assemblies often fail to inform about chromosome-scale structure due to a lack of linkage information over long stretches of DNA—a shortcoming that is being addressed by new sequencing protocols, such as the GemCode and Chromium linked reads from 10 × Genomics.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>Here, we present ARCS, an application that utilizes the barcoding information contained in linked reads to further organize draft genomes into highly contiguous assemblies. We show how the contiguity of an ABySS <italic>H.sapiens</italic> genome assembly can be increased over six-fold, using moderate coverage (25-fold) Chromium data. We expect ARCS to have broad utility in harnessing the barcoding information contained in linked read data for connecting high-quality sequences in genome assembly drafts.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>
          <ext-link ext-link-type="uri" xlink:href="https://github.com/bcgsc/ARCS/">https://github.com/bcgsc/ARCS/</ext-link>
        </p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Human Genome Research Institute</named-content>
          <named-content content-type="funder-identifier">10.13039/100000051</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Institutes of Health</named-content>
          <named-content content-type="funder-identifier">10.13039/100000002</named-content>
        </funding-source>
        <award-id>R01HG007182</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Genome Canada</named-content>
          <named-content content-type="funder-identifier">10.13039/100008762</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">Genome British Columbia</named-content>
          <named-content content-type="funder-identifier">10.13039/501100000233</named-content>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Institutes of Health</named-content>
          <named-content content-type="funder-identifier">10.13039/100000002</named-content>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="7"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>The Chromium sequencing library preparation protocol from 10 ×  Genomics (10 × G, Pleasanton, CA) builds on the Illumina sequencing technology (San Diego, CA) to provide indexing/barcoding information along with short reads to localize the latter on long DNA fragments, thus benefiting the economies of scale of a high-throughput platform. As sequence reads from 20 to 200 kb molecules are barcoded/linked, applications of the technology has mainly focused on phasing variant bases in human genomes (<xref rid="btx675-B12" ref-type="bibr">Narasimhan <italic>et al.</italic>, 2016</xref>; <xref rid="btx675-B16" ref-type="bibr">Zheng <italic>et al.</italic>, 2016</xref>).</p>
    <p>The ability to generate linked reads with 10 × G is akin to that of Illumina TruSeq (<xref rid="btx675-B6" ref-type="bibr">Kuleshov <italic>et al.</italic>, 2014</xref>). The latter technology provides useful complementary information to whole genome shotgun assembly projects, as the pseudo-long reads it generates may help resolve long repeats. However, to generate pseudo-long reads, TruSeq requires high coverage data of the co-localized reads for <italic>a priori</italic> fragment assemblies (by default, transparent to the user), essentially generating low fragment coverage data for its target genome. Hence, TruSeq may be relatively expensive for providing mammalian-sized genomes with adequate fragment coverage. Conversely, the Chromium platform typically provides low-coverage for each single barcoded molecule, limiting its utility for individual fragment assembly. However, it makes up for this limitation in throughput, providing higher fragment coverage.</p>
    <p>Recently this data type has been utilized for scaffolding a draft genome assembly (<xref rid="btx675-B11" ref-type="bibr">Mostovoy <italic>et al.</italic>, 2016</xref>), using a software designed to scaffold sequences using contiguity preserving transposition sequencing (CPT-seq) and another long-range information data source (Hi-C) (<xref rid="btx675-B1" ref-type="bibr">Adey <italic>et al.</italic>, 2014</xref>). In their paper, <xref rid="btx675-B11" ref-type="bibr">Mostovoy <italic>et al.</italic> (2016)</xref> showed 12-fold improvement in contiguity of a human genome assembly draft using GemCode sequencing (precursor to Chromium, from 10 × G) at 97-fold coverage, demonstrating the potential of the technology for scaffolding draft genomes.</p>
    <p>Here we present ARCS, the Assembly Round-up by Chromium Scaffolding algorithm, a method that leverages the rich information content of high-volume long sequencing fragments to further organize draft genome sequences into contiguous assemblies that characterize large chromosome segments. We use the recent Genome In A Bottle (GIAB) human genome sequence data (<xref rid="btx675-B17" ref-type="bibr">Zook <italic>et al.</italic>, 2016</xref>), and compare ARCS to fragScaff, the only other technology shown in a publication to utilize 10 × G linked reads for scaffolding genome assembly drafts (<xref rid="btx675-B11" ref-type="bibr">Mostovoy <italic>et al.</italic>, 2016</xref>). In the fragScaff scaffolding algorithm, a barcoded alignment file is parsed to determine which barcodes map to the ends of each sequence. For each possible pair of sequence ends, a shared barcode fraction metric is calculated. These values produce a distribution of shared barcode fractions for each sequence end. Edges are added to a scaffold graph based on these distributions, resulting in sequence end nodes being linked when a high fraction of barcodes are shared. For each connected component, the maximum-weight minimum spanning tree (MST) is determined, followed by iterations to incorporate any branches into the main trunk of the MST to produce the final scaffolds.</p>
    <p>We also present similar benchmarks to Architect, a recently published scaffolder (<xref rid="btx675-B7" ref-type="bibr">Kuleshov <italic>et al.</italic>, 2016</xref>) shown to work on Illumina TruSeq synthetic long sequences' underlying short reads (read clouds) and suggested to be adaptable to Chromium data. The Architect algorithm utilizes evidence from read clouds by first identifying barcode ‘hits’ to each scaffold, based on input barcoded read alignments. Then, a scaffold graph is constructed, where edges are created based on the number of shared barcode hits and the fraction of shared barcode hits between two scaffolds. Following pruning of potentially spurious edges, unambiguous edges are contracted to produce the final output scaffolds.</p>
    <p>We show how our implementation yields assemblies that are more contiguous and accurate than fragScaff and Architect over a wide range of parameters, while using less time and compute resources. Using two human linked read datasets from different experiments, we demonstrate that ARCS scaffolding of pre-existing human genome drafts can yield assemblies whose contiguity and correctness are on par with or better than those assembled with the newly released 10 × G Supernova <italic>de novo</italic> assembler (<xref rid="btx675-B15" ref-type="bibr">Weisenfeld <italic>et al.</italic>, 2017</xref>). ARCS is implemented in C ++ and runs on Unix.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <sec>
      <title>2.1 ARCS algorithm</title>
      <p>The modular pipeline collectively referred to as ARCS first pairs sequences within a draft assembly, then lays out the pairing information for scaffolding. In the sequence pairing stage (<xref ref-type="fig" rid="btx675-F1">Fig. 1</xref>), input alignments in BAM format are processed for sets of read pairs from the same barcode that align to different sequences. These form a link between the two sequences, provided that there is a sufficient number of read pairs aligned (parameter <italic>–c</italic>, set to 5 by default). Each link represents evidence that one barcode/molecule connects the sequences. To account for barcode sequencing errors, only barcodes within a specified multiplicity range (parameter <italic>–m</italic>) are considered (default 50–10 000). The multiplicity refers to the read frequency of each barcode, and the range defines a specific slice of reads considered by ARCS.
</p>
      <fig id="btx675-F1" orientation="portrait" position="float">
        <label>Fig. 1.</label>
        <caption>
          <p>ARCS algorithm. (<bold>1</bold>) 10×G Chromium reads (blue, green, orange and purple arrows) are aligned to the draft genome. (<bold>2</bold>) Sequences are split in half by length and the ends of each are considered the head (H) or tail (T) regions (represented with grey boxes, length of the ends controlled by ARCS parameter <italic>–e</italic>). The number of read pairs derived from the same barcode and aligning to the head (H) or tail (T) regions of the sequence are tallied. These tallies are stored in memory using a map data structure, where the key is the barcode sequence. The value maps a tuple of the sequence ID and ‘H’ or ‘T’ to the count of the number of read pairs. (<bold>3</bold>) The number of barcodes supporting each link orientation (H-H, H-T, T-H, T-T) between sequence pairs is tallied. The tallies are stored in memory using an additional map data structure, where the key is a pair representing the two potentially linked sequences, and the value is a vector of integers representing the number of barcodes supporting each possible link orientation. For a given barcode to contribute linking evidence, the distribution of reads of that barcode aligning to the ‘H’ or ‘T’ regions of both sequences in the potential pair must significantly differ from a uniform distribution. A dot file is then generated which encodes the linkage evidence, where links (edges) between two sequences (nodes) are only added if the link orientation with the maximum support is predominant</p>
        </caption>
        <graphic xlink:href="btx675f1"/>
      </fig>
      <p>As we are interested in ordering and orienting sequences, we consider reads that align near the 5′ and 3′ ends of each sequence (within a window defined by the parameter <italic>–e</italic>, default 30 000). This parameter effectively sets the maximum window length at the end of sequences, where Chromium reads align. Reads aligned outside of these windows are not considered. Thus, depending on the level of contiguity of the input assembly, adjusting <italic>–e</italic> to a lower or higher value would account for shorter contigs or focus on longer contigs. When ARCS encounters shorter sequences (less than twice the specified <italic>–e</italic> length), the length of the head and tail regions are assigned as half the total sequence length. This is important, as the selection of <italic>–e</italic> will impact how ambiguity is mitigated when creating an edge between any two sequences. In addition, as the BAM file is read, only reads that align to a sequence with at least the specified sequence identity (parameter <italic>–s</italic>, set to 98% by default), map in proper pairs and align with a non-zero mapping quality are considered. This ensures that only high-quality alignments provide evidence for the subsequent linking stages, as alignments involving reads with long repeat regions or chimeric reads will be skipped. Therefore, contigs that end in long repeats will not be linked in downstream stages due to the lack of unambiguous aligned read support.</p>
      <p>The relative orientations of sequences are inferred through the read alignment positions. Using read alignments, we first determine subsets of reads with the same barcode that co-locate within one end of a sequence (<xref ref-type="fig" rid="btx675-F1">Fig. 1</xref>, step 1); Within each sequence, the 5′ end region is arbitrarily labeled the head (H), and the 3′ end, the tail (T). The number of read pairs of the same barcode aligning to the head or the tail of a sequence (within <italic>–e</italic> bp or less of the end) is tallied as the BAM file is read. For a given barcode, we track the number of reads that map to the ‘H’ or ‘T’ of a sequence (<xref ref-type="fig" rid="btx675-F1">Fig. 1</xref>, step 2).</p>
      <p>Once the alignment file is read into memory, every possible pair of sequences that have a sufficient number of aligned reads from a given barcode (<italic>–c</italic>) are considered. For each sequence in a potential pair, a binomial test is used to calculate whether the observed distribution of reads aligning to the 5′ or 3′ end of a sequence is significantly different from a uniform distribution (threshold <italic>P = </italic>0.05, set by parameter <italic>–r</italic>). Likewise, the number of linking barcodes that support each of the four possible link orientations (H-H, H-T, T-H, T-T) is tallied in a map data structure for each potential sequence pair (<xref ref-type="fig" rid="btx675-F1">Fig. 1</xref>, step 3).</p>
      <p>Using the link orientation tallies for each sequence pair, a graph data structure is constructed, where the nodes are sequences, and the edges represent links between them. An edge is formed only if the link orientation, defined by the order of a sequence pair‘s head and tail regions, is the most represented combination across supporting barcodes. Once pairing between sequences is complete, ARCS outputs a single file in the graph description language (gv) format.</p>
    </sec>
    <sec>
      <title>2.2 Scaffolding</title>
      <p>In preparation for the layout building stage, ARCS’ gv file is converted to a tab-separated value (tsv) file listing all possible oriented sequence pairs, the number of supporting barcodes with gap sizes arbitrarily set at 10 bp. This is facilitated by the supplied python script (makeTSVfile.py). Since positional information of reads within the molecule of origin is not known, estimation of gap sizes is not a straightforward problem, and would require more sophisticated approaches. The latter tsv file is read and scaffolds constructed using the algorithm implemented in LINKS, as described previously (<xref rid="btx675-B14" ref-type="bibr">Warren <italic>et al.</italic>, 2015</xref>) (v1.7 and later).</p>
      <p>Briefly, starting with the longest sequence as seed sequence, a layout is progressively built by considering all possible pair of sequences suggested by ARCS (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1a</xref>), adjusting the orientation of likely pairs relative to the seed. Because linked sequence pairs may be ambiguous (a given sequence may link to multiple sequences), sequences are joined only if the number of links connecting a sequence pair is equal to or greater than a minimum (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1b</xref>, LINKS parameter <italic>–l</italic>, default of 5) and satisfies a minimum sequence cutoff (LINKS parameter <italic>–z</italic>, default 500). Ambiguous pairings are resolved when the ratio of barcode links of the second-most to top-most supported edge is equal to or below a threshold (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1b</xref>, LINKS parameter <italic>–a</italic>, default of 0.3; we recommend higher values such as <italic>–a</italic> 0.7 and 0.9 when running LINKS within ARCS). In the <xref ref-type="supplementary-material" rid="sup1">Supplementary Information</xref>, we show a section of the LINKS scaffold graph demonstrating the influence of the <italic>–a</italic> parameter on scaffolding an experimental human dataset used in the present study (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1c</xref>). When sequence merging is exhausted in 3′, the scaffold is extended in 5′ following the same procedure.</p>
      <p>We point out that other stand-alone scaffolding algorithms may be used within the ARCS pipeline instead of LINKS, at the user‘s discretion. For instance, we have experimented with abyss-scaffold (<xref rid="btx675-B5" ref-type="bibr">Jackman <italic>et al.</italic>, 2017</xref>), which implements a non-greedy graph-based approach, and found the results to be comparable to that of LINKS. A modular pipeline ensures that in the future, improved scaffolders may be used within ARCS without having to alter the code base.</p>
    </sec>
    <sec>
      <title>2.3 Data sources</title>
      <p>We used two human Chromium datasets to illustrate the performance of ARCS on baseline sequence assemblies.</p>
      <p>The first dataset is from an Ashkenazi female individual (NA24143) from GIAB (<xref rid="btx675-B17" ref-type="bibr">Zook <italic>et al.</italic>, 2016</xref>), sequenced using various Illumina library protocols (accession number NIST HG004 NA24143 SRS823307; <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>). In preparation for whole genome <italic>de novo</italic> sequence assembly (referred herein as baseline assemblies), we downloaded Illumina whole genome shotgun (WGS) 2 × 250 bp paired-end and 6 kbp mate-pair sequencing reads. Adapter sequences from the mate-pair reads were removed using NxTrim v0.4.0 (<xref rid="btx675-B13" ref-type="bibr">O’Connell <italic>et al.</italic>, 2015</xref>) (with parameters <italic>–norc –joinreads –preserve-mp</italic>). NxTrim also classifies reads as mate-pair, paired-end, single-end or unknown. Only reads classified as mate-pair were subsequently used for assembly. Both paired-end and mate-pair reads were corrected with BFC v181 (<xref rid="btx675-B9" ref-type="bibr">Li, 2015</xref>) (with the parameter <italic>–s3G</italic>). We also downloaded 10 × G linked reads from the same repository for the purpose of <italic>de novo</italic> assembly with Supernova, and scaffolding of baseline assemblies with ARCS, Architect and fragScaff (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>).</p>
      <p>The second individual‘s genome (NA12878) was sequenced and assembled by 10 × G. The corresponding raw, ∼156-fold coverage, NA12878 10 × G Chromium data was downloaded from the 10 ×  Genomics company website (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>).</p>
    </sec>
    <sec>
      <title>2.4 Data analysis</title>
      <p>Whole genome shotgun paired-end and mate pair reads were assembled <italic>de novo</italic> with ABySS v2.0 (<xref rid="btx675-B5" ref-type="bibr">Jackman <italic>et al.</italic>, 2017</xref>) with the command: abyss-pe <italic>name = </italic>hsapiens <italic>np = </italic>64 <italic>k = </italic>144 <italic>q = </italic>15 <italic>v = </italic>-v <italic>l = </italic>40 <italic>s = </italic>1000 <italic>n = </italic>10 <italic>S = </italic>1000–10 000 <italic>N = </italic>7 <italic>mp6k_de=</italic>–mean <italic>mp6k_n = </italic>1 <italic>lib = </italic>pe400 <italic>mp = </italic>mp6k, where pe400 and mp6k are variables listing all files containing paired-end sequencing and MPET reads. The resulting contigs and scaffolds were used as baseline human genome draft assemblies for linked read scaffolding (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S2</xref>).</p>
      <p>The 10 × G Chromium sequencing data was converted from a container BAM file to FASTQ format (NA24143) or processed with 10 × G longranger (<xref rid="btx675-B15" ref-type="bibr">Weisenfeld <italic>et al.</italic>, 2017</xref>; <xref rid="btx675-B16" ref-type="bibr">Zheng <italic>et al.</italic>, 2016</xref>) to generate barcode-containing interleaved FASTQ files (NA12878) (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S3</xref>). For the former dataset, the read barcodes were extracted from the RX tag in the BAM file. For both Chromium datasets the barcode was appended to the read name following an underscore. Chromium reads were then aligned to the contig and scaffold sequences using BWA mem v0.7.15 (default values, <italic>-t</italic>12) (<xref rid="btx675-B10" ref-type="bibr">Li and Durbin, 2010</xref>), and sorted by name. We provide instructions on how to prepare and align the Chromium reads here: <ext-link ext-link-type="uri" xlink:href="http://ftp://ftp.bcgsc.ca/supplementary/ARCS">ftp://ftp.bcgsc.ca/supplementary/ARCS</ext-link></p>
      <p>Based on authors’ recommendations, the input to fragScaff also included an N-base bed file. This file contained the coordinates of all undetermined base stretches when using a scaffold input, and was generated by their supplied script fasta_make_Nbase_bed.pl. A repeat bed file was also included, generated by performing a blastn v2.4.0 alignment (<xref rid="btx675-B2" ref-type="bibr">Altschul <italic>et al.</italic>, 1990</xref>) of the input assembly to itself (with parameters <italic>–word_size</italic> 36, <italic>–perc_identity</italic> 95, <italic>–outfmt</italic> 6) and by converting the alignments using their supplied script blast_self_alignment_filter.pl.</p>
      <p>In separate experiments, the NA24143 and NA12878 10 × G linked read data were assembled with the Supernova v1.1 <italic>de novo</italic> assembler as described (<xref rid="btx675-B15" ref-type="bibr">Weisenfeld <italic>et al.</italic>, 2017</xref>).</p>
      <p>The scaffolding scripts that ran on the data described above are available at <ext-link ext-link-type="uri" xlink:href="http://ftp://ftp.bcgsc.ca/supplementary/ARCS">ftp://ftp.bcgsc.ca/supplementary/ARCS</ext-link>, providing the command lines and parameters used. The corresponding assemblies are also offered through the same URL.</p>
      <p>In separate triplicate experiments, we sub-sampled 100, 200, 300 M NA24143 and 46M, 200–1400 M NA12878 10 × G read pairs to test the effect of read coverage on the performance of ARCS, Architect and fragScaff for scaffolding the baseline scaffold assembly draft. On each file subset, we ran ARCS (<italic>–c</italic> 5 <italic>–r</italic> 0.05 <italic>–e</italic> 30000 <italic>–z</italic> 3000 <italic>–m</italic> 50–6000 for NA12878; <italic>–m</italic> 50–1000 for NA24143) and LINKS (<italic>–l</italic> 5 <italic>–a</italic> 0.9), Architect (<italic>–t</italic> 5 <italic>–rc-abs-thr</italic> 3 <italic>–rc-rel-edge-thr</italic> 0.2 <italic>–rc-rel-prun-thr</italic> 0.2) and fragScaff (<italic>–b</italic> 1 <italic>–m</italic> 3000 <italic>–E</italic> 30000 <italic>–j</italic> 1 <italic>–u</italic> 2 <italic>–C</italic> 5). For each coverage level and tool, we calculated the average contiguity and number of breakpoints (as a proxy for counting misassemblies).</p>
      <p>Breakpoints in re-scaffolded assemblies were identified using abyss-samtobreak (<italic>-G</italic>3088269832 <italic>-l</italic>500.) (<xref rid="btx675-B5" ref-type="bibr">Jackman <italic>et al.</italic>, 2017</xref>). Briefly, scaffolds are first broken at Ns to generate sequence ‘scaftigs’. The assembly scaftigs are aligned to the reference human genome GRCh38 with BWA mem (v0.7.15, using the <italic>–xintractg</italic> flag) (<xref rid="btx675-B10" ref-type="bibr">Li and Durbin, 2010</xref>). Breakpoints are identified when scaftigs do not align co-linearly to a given reference chromosome sequence. This includes cases where the order of scaftigs in the scaffold is not consistent with the respective chromosome alignments, and/or scaftigs from a given scaffolds align to two or more chromosomes. The distance between scaftigs (i.e. length of assembly gaps) is not scrutinized for length consistency between draft and reference genomes. The NG50 and NGA50 length metrics reported were calculated using a genome size of 3 088 269 832 bp. Benchmarking for computational performance was done on a DELL server with 128 Intel(R) Xeon(R) CPU E7-8867 v3, 2.50 GHz with 2.6TB RAM.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>To generate the contig and scaffold baselines for NA24143, we first assembled the paired-end and mate-pair data with ABySS-2.0 (<xref rid="btx675-B5" ref-type="bibr">Jackman <italic>et al.</italic>, 2017</xref>). We then aligned the Chromium reads to those assemblies with BWA (<xref rid="btx675-B10" ref-type="bibr">Li and Durbin, 2010</xref>). Using the resulting alignments as input, we ran ARCS (v1.0.0), Architect (v0.1) and fragScaff (v140324) to further scaffold contig and scaffold baseline sequences 3 kbp and longer, as recommended (<xref rid="btx675-B11" ref-type="bibr">Mostovoy <italic>et al.</italic>, 2016</xref>). We investigated the effects of multiple parameter combinations on scaffolding (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S4</xref>), reporting contiguity length metrics and number of breakpoints from sequence alignments to the reference human genome.</p>
    <sec>
      <title>3.1 Scaffolding with the NA24143 GIAB Chromium data</title>
      <p>We measured the contiguity (NG50 and NGA50 length metric) and correctness of resulting assemblies after ARCS, Architect and fragScaff scaffolding of baseline assemblies (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S2</xref>). During this process, we tested the effect of various parameters, including the scaffolding-specific <italic>–a, –u</italic> and <italic>–rc-rel-edge-thr</italic> (abbreviated rel) parameters in the corresponding tools, respectively (<xref ref-type="fig" rid="btx675-F2">Fig. 2</xref>). Generally, these parameters affect scaffolding stringency by evaluating the validity of the linkages.
</p>
      <fig id="btx675-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>Assembly contiguity and correctness from scaffolding (<bold>a</bold>) contig or (<bold>b</bold>) scaffold baseline assemblies with 10×G Chromium reads using ARCS (orange), Architect (red) and fragScaff (green). We show the effect of the scaffolding parameters <italic>–a</italic> (ARCS), <italic>–rc-rel-edge-thr</italic> (abbreviated rel, Architect) and <italic>–u</italic> (fragScaff). The Y-axes show the range of NGA50 to NG50 lengths to indicate the uncertainty caused by real genomic variations (captured by breakpoints analysis) between individual NA24143 and the reference genome GRCh38. For comparison, we also show the same metrics for the Supernova assembly of the NA12878 and NA24143 10×G datasets (blue). The X-axes show the number of breakpoints that occur when aligning the resulting assembly to the reference</p>
        </caption>
        <graphic xlink:href="btx675f2"/>
      </fig>
      <p><xref rid="btx675-B11" ref-type="bibr">Mostovoy <italic>et al.</italic> (2016)</xref> reported their best assembly using fragScaff parameters <italic>–j</italic> 1 and <italic>–u</italic> 3, prompting us to explore similar values of <italic>–j</italic> and <italic>–u</italic> on our dataset. These parameters are described as the mean number of passing hits per node to call the <italic>P</italic>-value cutoff and modifier to the score to consider the link reciprocated in fragScaff, and are the parameters previously optimized in the study by <xref rid="btx675-B1" ref-type="bibr">Adey <italic>et al.</italic> (2014)</xref>. In Architect, the parameter <italic>–rc-abs-thr</italic> controls the minimum number of shared barcode hits required to tentatively connect two sequence vertices in the scaffold graph. The Architect parameters <italic>–rc-rel-edge-thr</italic> and <italic>–rc-rel-prun-thr</italic> control the relative barcode support needed for creating and pruning edges in the graph, respectively.</p>
      <p>To assess correctness, we aligned the assemblies to the primary chromosome sequences of the human reference GRCh38, and counted the number of observed breakpoints using abyss-samtobreak (<xref rid="btx675-B5" ref-type="bibr">Jackman <italic>et al.</italic>, 2017</xref>). At the contig level (<xref ref-type="fig" rid="btx675-F2">Fig. 2a</xref>), we observe that, while the ARCS and fragScaff assemblies (highest contiguity achieved at <italic>–a</italic> 0.9 and <italic>–u</italic> 2, in that order) have similar sequence contiguity (NG50 of 303 034 versus 304 926 bp, respectively), the ARCS assembly has less than one third the number of breakpoints compared to fragScaff (2030 versus 6345). In context, the corresponding ARCS and fragScaff assemblies have 16.3 and 263.4% more breakpoints than the baseline contig assembly, respectively (<xref ref-type="supplementary-material" rid="sup1">Supplementary Tables S5 and S6</xref>). This indicated that, while the resulting fragScaff assemblies were highly contiguous, they may harbor substantially more misassemblies. Architect scaffolding of the baseline contig assembly did not yield appreciable gains despite extensive parameter tuning (<xref ref-type="fig" rid="btx675-F2">Fig. 2a</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S7</xref>).</p>
      <p>At the scaffold level (<xref ref-type="fig" rid="btx675-F2">Fig. 2b</xref> and <xref rid="btx675-T1" ref-type="table">Table 1</xref>), we observe that ARCS achieves a greater sequence contiguity and correctness than Architect and fragScaff (NG50 (Mbp)/breakpoints, 19.5/3027 versus 5.0/3076 versus 13.1/3438 for the three tools, in that order) when comparing amongst the most contiguous assemblies for each tool (<xref ref-type="supplementary-material" rid="sup1">Supplementary Tables S5–S7</xref>). We observe that, while the difference in the number of misassemblies between fragScaff and ARCS is 411 when the tools use scaffolds as input, it increases by an order of magnitude to 4315 when using contigs. The ARCS, Architect and fragScaff assemblies respectively harbor 3.6, 5.2 and 17.6% more breakpoints than the baseline scaffold assembly, which suggests that ARCS and other scaffolders for 10 × G data work best when the draft to re-scaffold is more contiguous. To see whether these 411 additional breakpoints in the fragScaff versus ARCS assemblies are large-scale misassemblies, we aligned the corresponding assemblies to the reference human genome and plotted their alignments (<xref ref-type="fig" rid="btx675-F3">Fig. 3</xref>).
<table-wrap id="btx675-T1" orientation="portrait" position="float"><label>Table 1.</label><caption><p>Contiguity metrics, breakpoints, total wall-clock time and peak memory usage for scaffolding 3 kbp and larger sequences from a human (NA24143) ABySS base scaffold assembly with ARCS (<italic>–c </italic>5 <italic>–e </italic>30000 <italic>–r</italic> 0.05 <italic>–l </italic>5), Architect (<italic>–t </italic>5 <italic>–rc-abs-thr </italic>3 <italic>–rc-rel-prun-thr </italic>0.2; <italic>–rc-rel-edge-thr</italic> abbreviated to ‘rel’ in table) and fragScaff (<italic>–C </italic>5 <italic>–E </italic>30000 <italic>–j </italic>1)</p></caption><table frame="hsides" rules="groups"><colgroup span="1"><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="left" span="1"/></colgroup><thead><tr><th rowspan="1" colspan="1">Tool</th><th rowspan="1" colspan="1">ARCS</th><th rowspan="1" colspan="1">ARCS</th><th rowspan="1" colspan="1">ARCS</th><th rowspan="1" colspan="1">fragScaff</th><th rowspan="1" colspan="1">fragScaff</th><th rowspan="1" colspan="1">fragScaff</th><th rowspan="1" colspan="1">Architect</th><th rowspan="1" colspan="1">Architect</th><th rowspan="1" colspan="1">Supernova<xref ref-type="table-fn" rid="tblfn2"><sup>b</sup></xref></th></tr></thead><tbody><tr><td rowspan="1" colspan="1">Parameters<xref ref-type="table-fn" rid="tblfn1"><sup>a</sup></xref></td><td rowspan="1" colspan="1">a = 0.3</td><td rowspan="1" colspan="1">a = 0.7</td><td rowspan="1" colspan="1">a = 0.9</td><td rowspan="1" colspan="1">u = 2</td><td rowspan="1" colspan="1">u = 3</td><td rowspan="1" colspan="1">u = 4</td><td rowspan="1" colspan="1">rel = 0.2</td><td rowspan="1" colspan="1">rel = 0.3</td><td rowspan="1" colspan="1">N/A</td></tr><tr><td rowspan="1" colspan="1">n: 500</td><td rowspan="1" colspan="1">65 191</td><td rowspan="1" colspan="1">64 993</td><td rowspan="1" colspan="1">64 922</td><td rowspan="1" colspan="1">64 445</td><td rowspan="1" colspan="1">64 625</td><td rowspan="1" colspan="1">64 869</td><td rowspan="1" colspan="1">65 780</td><td rowspan="1" colspan="1">65 862</td><td rowspan="1" colspan="1">23 693</td></tr><tr><td rowspan="1" colspan="1">NG50 (Mbp)</td><td rowspan="1" colspan="1">11.74</td><td rowspan="1" colspan="1">15.13</td><td rowspan="1" colspan="1">19.48</td><td rowspan="1" colspan="1">13.13</td><td rowspan="1" colspan="1">13.01</td><td rowspan="1" colspan="1">11.74</td><td rowspan="1" colspan="1">5.01</td><td rowspan="1" colspan="1">4.93</td><td rowspan="1" colspan="1">13.47</td></tr><tr><td rowspan="1" colspan="1">NGA50 (Mbp)</td><td rowspan="1" colspan="1">7.78</td><td rowspan="1" colspan="1">10.22</td><td rowspan="1" colspan="1">11.00</td><td rowspan="1" colspan="1">6.41</td><td rowspan="1" colspan="1">6.62</td><td rowspan="1" colspan="1">6.52</td><td rowspan="1" colspan="1">4.38</td><td rowspan="1" colspan="1">4.38</td><td rowspan="1" colspan="1">5.38</td></tr><tr><td rowspan="1" colspan="1">N50 (Mbp)</td><td rowspan="1" colspan="1">12.91</td><td rowspan="1" colspan="1">17.98</td><td rowspan="1" colspan="1">21.82</td><td rowspan="1" colspan="1">15.80</td><td rowspan="1" colspan="1">15.40</td><td rowspan="1" colspan="1">13.07</td><td rowspan="1" colspan="1">5.72</td><td rowspan="1" colspan="1">5.62</td><td rowspan="1" colspan="1">15.03</td></tr><tr><td rowspan="1" colspan="1">Largest scaffold (Mbp)</td><td rowspan="1" colspan="1">66.18</td><td rowspan="1" colspan="1">97.86</td><td rowspan="1" colspan="1">97.86</td><td rowspan="1" colspan="1">93.33</td><td rowspan="1" colspan="1">72.78</td><td rowspan="1" colspan="1">68.07</td><td rowspan="1" colspan="1">26.41</td><td rowspan="1" colspan="1">26.41</td><td rowspan="1" colspan="1">95.16</td></tr><tr><td rowspan="1" colspan="1">Breakpoints</td><td rowspan="1" colspan="1">2985</td><td rowspan="1" colspan="1">3003</td><td rowspan="1" colspan="1">3027</td><td rowspan="1" colspan="1">3438</td><td rowspan="1" colspan="1">3355</td><td rowspan="1" colspan="1">3231</td><td rowspan="1" colspan="1">3076</td><td rowspan="1" colspan="1">2991</td><td rowspan="1" colspan="1">3879</td></tr><tr><td rowspan="1" colspan="1">Wall-clock time (h:min)</td><td rowspan="1" colspan="1">0:55</td><td rowspan="1" colspan="1">0:55</td><td rowspan="1" colspan="1">0:55</td><td rowspan="1" colspan="1">2:03</td><td rowspan="1" colspan="1">1:56</td><td rowspan="1" colspan="1">1:59</td><td rowspan="1" colspan="1">6:12</td><td rowspan="1" colspan="1">5:39</td><td rowspan="1" colspan="1">50:43</td></tr><tr><td rowspan="1" colspan="1">Peak memory (GB)</td><td rowspan="1" colspan="1">3.4</td><td rowspan="1" colspan="1">3.4</td><td rowspan="1" colspan="1">3.4</td><td rowspan="1" colspan="1">16.5</td><td rowspan="1" colspan="1">14.8</td><td rowspan="1" colspan="1">14.1</td><td rowspan="1" colspan="1">9.6</td><td rowspan="1" colspan="1">9.6</td><td rowspan="1" colspan="1">389.0</td></tr></tbody></table><table-wrap-foot><fn id="tblfn1"><label>a</label><p>Scaffolding-specific parameters.</p></fn><fn id="tblfn2"><label>b</label><p>Supernova is a <italic>de novo</italic> assembler, and its scaffolding stage cannot be decoupled from the rest of its work flow.</p></fn></table-wrap-foot></table-wrap></p>
      <fig id="btx675-F3" orientation="portrait" position="float">
        <label>Fig. 3.</label>
        <caption>
          <p>A Circos (<xref rid="btx675-B8" ref-type="bibr">Krzywinski <italic>et al.</italic>, 2009</xref>) assembly consistency plot of conservative (<bold>a</bold>) ARCS (<italic>–c</italic> 5 <italic>–e</italic> 30000 <italic>–r</italic> 0.05 <italic>–l</italic> 5 <italic>–a</italic> 0.3) and (<bold>b</bold>) fragScaff (<italic>–C</italic> 5 –E 30000 <italic>–j</italic> 1 <italic>–u</italic> 4) scaffolding of the baseline scaffold assembly. Scaftigs from the largest 177 (ARCS) and 175 (fragScaff) scaffolds, consisting of 75% (N75) of the genome are aligned to GRCh38 with BWA mem. GRCh38 chromosomes are displayed incrementally from 1 (bottom, brown) to X (top, dark grey) on the left while scaffolds (black outlines) are displayed on the right side of the rim. Connections show aligned regions, 100 kbp and larger, between the genome and scaffolds. Large-scale misassemblies are visible as interrupting ribbons. The circles along chromosomes indicate centromeres, while the black regions on chromosomes indicate gaps in the reference</p>
        </caption>
        <graphic xlink:href="btx675f3"/>
      </fig>
      <p>Compared to ARCS, fragScaff scaffolding of the baseline scaffold sequences yields more large-scale misassemblies, shown as inter-chromosomal translocations (<xref ref-type="fig" rid="btx675-F3">Fig. 3</xref>). We note that increasing the fragScaff <italic>–j</italic> parameter (mean passing links across nodes) while relaxing <italic>–u</italic> (score cut-off multiplier) yields assemblies whose contiguity rival that of ARCS (16.9 versus 19.5 Mbp NG50, respectively), but at the cost of increased misassemblies (<xref ref-type="supplementary-material" rid="sup1">Supplementary Tables S5 and S6</xref>). Architect scaffolding of both contig and scaffold baseline assemblies yielded a marginal increase in contiguity figures (<xref ref-type="fig" rid="btx675-F2">Fig. 2</xref>, <xref rid="btx675-T1" ref-type="table">Table 1</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S7</xref>), reasons why we can only speculate on.</p>
      <p>We also compared the resource efficiency of all three tools over the parameter range tested (See <ext-link ext-link-type="uri" xlink:href="http://ftp://ftp.bcgsc.ca/supplementary/ARCS/benchmarks">ftp://ftp.bcgsc.ca/supplementary/ARCS/benchmarks</ext-link>) and report its runtime and memory usage on the most contiguous assemblies of contig and baseline scaffold sequences (<xref rid="btx675-T1" ref-type="table">Table 1</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S8</xref>). ARCS outperforms Architect and fragScaff for run time (average 2 fold faster than fragScaff) and memory usage on scaffolds (4 times less memory when compared to fragScaff). It should be noted that the run time of Architect and fragScaff increases quadratically with the number of input sequences, making them inefficient choices for assemblies with a large number of input sequences (more than 250 000). Running Architect on the baseline contig assemblies took roughly 7 days (187 h) for most parameter combinations when parameter <italic>–t</italic> was set to 5 (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S8</xref>). In contrast, equivalent runs of this tool on the scaffold baseline assemblies were faster (6 h) due to having 20 times less sequences to process (<xref rid="btx675-T1" ref-type="table">Table 1</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S2</xref>). The execution speed of ARCS on the contig and scaffold baseline assemblies was consistent, both finishing in approximately 1 h (1 h 12 min and 55 min, respectively).</p>
    </sec>
    <sec>
      <title>3.2 Scaffolding with the NA12878 Chromium data</title>
      <p>Recently, 10 × G released their <italic>de novo</italic> assembly software called Supernova, which implements a scaffolding stage, and is developed specifically for assembling Chromium data (<xref rid="btx675-B15" ref-type="bibr">Weisenfeld <italic>et al.</italic>, 2017</xref>). The authors presented a variety of human genome assemblies, each yielding N50 contiguity lengths 15 Mbp or higher, factoring in scaffolds 10 kbp and larger. We re-capitulated the Supernova experiment on the 156-fold Chromium sequencing data for the NA12878 individual, and corroborate their results (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S9</xref>). When applying a scaffold sequence length cut-off on par with that used in our study (500 bp), we report N50 length metrics corrected for genome size, NG50, in the megabase range (14.7 Mbp), which is consistent with what was maximally achievable with ARCS using the same dataset applied to the baseline scaffold assembly (NG50 = 18.3 Mbp). A Supernova assembly of 51-fold raw NA24143 chromium reads produced a similarly contiguous genome draft (NG50 = 13.5 Mbp), albeit with a higher overall number of assembly breakpoints (<xref ref-type="fig" rid="btx675-F2">Fig. 2b</xref>, <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S9</xref>). Interestingly, upon investigation of the breakpoints, we concede that fewer events ≥1 kb are observed in the largest, N75, Supernova scaffolds (data not shown).</p>
    </sec>
    <sec>
      <title>3.3 Effect of sequence coverage on scaffolding</title>
      <p>Despite the NA12878 Chromium read data having substantially deeper coverage than that of NA24143 (over 5 ×  deeper, <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S3</xref> datasets 5 versus 3), we observe that ARCS performs consistently across both datasets. Perhaps more interesting is the observation that there are only marginal gains in N50 length contiguity with the higher coverage Chromium dataset (21.8 versus 22.2 Mbp when using NA24143 versus NA12878 datasets with parameters <italic>–e</italic> 30 000 <italic>–r</italic> 0.05 <italic>–c</italic> 5 <italic>–l</italic> 5 <italic>–a</italic> 0.9) in spite of making 406 additional merges in the latter (64 516 versus 64 922 scaffolds, with NA12878 and NA24143 respectively, <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S9</xref>). When we sub-sample both 10 × G data, we observe that ∼20-fold sequence read coverage of the human genome (approximately 200 M read pairs) is sufficient to achieve near-to-optimum scaffolding results with ARCS (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S2</xref> and Table S10). This indicates that, under the conditions tested herein, with the draft assembly utilized and parameters set, the solution may work optimally even if presented with less data. We do stress the importance of characterizing the distribution of read multiplicities within barcodes to tune runtime parameters, as distributions may vary between datasets, as observed for NA24143 and NA12878 (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S3</xref>).</p>
      <p>When comparing the impact of sequence coverage on scaffolding by ARCS as compared to fragScaff (parameters <italic>–E</italic> 30 000 <italic>–C</italic> 5 <italic>–j</italic> 1 <italic>–u</italic> 2) and Architect (parameters <italic>-t</italic> 5 <italic>–rc-abs-thr</italic> 3 <italic>–rc-rel-edge-thr</italic> 0.2 <italic>–rc-rel-prun-thr</italic> 0.2), ARCS was also found to produce assemblies with a higher NGA50 metric at all fold coverage subsets assessed (Supplementary Tables S9, S11, S12 and Fig. S2). This demonstrates that as well as being robust to the coverage of supplied linked reads, ARCS produces more contiguous assemblies than the other scaffolders evaluated in low (∼4.0-fold) to high (∼127-fold) sequence coverage conditions.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>Here, we have demonstrated the utility of a new algorithm, ARCS, for using 10 ×  Genomics read locality information to scaffold draft human genomes. We note that ARCS can perform well even when presented with relatively low coverage (25-fold) linked read data, generating accurate and megabase-range scaffolding results, starting from draft assemblies built entirely from short (250 bp) sequencing reads. We expect this performance to be generalizable to <italic>de novo</italic> assembly and scaffolding of other complex genomes.</p>
    <p>Compared to fragScaff and Architect, ARCS produces more contiguous and correct assemblies. While running fragScaff with less stringent parameters yields assemblies with similar contiguity metrics to ARCS (16.9 versus 19.5 Mbp NG50, respectively), the fragScaff assemblies contain noticeably more misassemblies (3813 versus 3027). It is important to note that ARCS was developed specifically to utilize 10 × G data, where fragScaff was designed for scaffolding with CPT-seq data (<xref rid="btx675-B1" ref-type="bibr">Adey <italic>et al.</italic>, 2014</xref>), which could have an impact on the resulting scaffolds. Furthermore, while fragScaff uses a more global approach of using maximum-weight minimum spanning trees based on the connected components of the scaffold graph, the ARCS graph is traversed based on local linkage support information. Although further study is required to fully understand the difference in assembly correctness between ARCS and fragScaff, it is possible that both of these factors influence the occurrence of misassemblies.</p>
    <p>Despite thorough parameter sweeps, we found that Architect did not markedly improve the contiguity of the baseline <italic>H.sapiens</italic> assemblies. Apart from the tool design, which is intended for Illumina TruSeq read clouds (<xref rid="btx675-B7" ref-type="bibr">Kuleshov <italic>et al.</italic>, 2016</xref>), it is possible that Architect‘s approach to ordering and orienting the sequences impacted the resulting assembly contiguity in our experiments. Whereas our scaffolding approach will take into account the ratio of barcode links between the most and second most supported edges when linking sequences, Architect requires sequence pairs to be linked by unambiguous edges in the graph. This requirement may have limited the resulting assembly contiguity for more complicated graphs, as the pruning stage may not remove all spurious edges.</p>
    <p>We show that the contiguity of a <italic>H.sapiens</italic> contig assembly can be increased over six-fold with the use of 10 × G data with only a marginal increase in probable errors with an average ± SD of 196 ± 77 total breakpoints compared to the baseline contig assembly. However, there are limitations to the approach. As mentioned by <xref rid="btx675-B1" ref-type="bibr">Adey <italic>et al.</italic> (2014)</xref>, when using barcodes, it is difficult to confidently place short sequence contigs into a scaffold due to a lower number of barcoded read pools aligning to the sequence. In addition, as the barcoded molecules may be over 100 kbp in length (<xref rid="btx675-B3" ref-type="bibr">Goodwin <italic>et al.</italic>, 2016</xref>), they may span several entire short input sequences, preventing ARCS from extracting orientation information from read alignment positions, as they do not preferentially align to one end. This is exacerbated when scaffolding fragmented assemblies (N50 length &lt; 10 kbp). To alleviate this problem, the minimum number of aligned reads required per barcode may be lowered to prevent possible links from being disregarded. Barcode reuse across molecules or incorrect alignment of linked reads due to repeats can also introduce false linkages at the sequence pairing stage, potentially resulting in incorrect merges during scaffolding. Although, with their Chromium technology, 10 ×  Genomics improved upon their GemCode protocol by increasing the number of fragment partitions and curbing barcode reuse—a trend we expect to continue as the technology matures further. While the positional information of linked reads within a given fragment is not known, making it challenging for estimating gap or overlap sizes in genome assemblies, it remains an attractive technology for scaffolding draft genomes. This is especially true when the technique is applied to later stages of scaffolding, when the contiguity of the draft sequence assembly is high.</p>
    <p>As is the case with other bioinformatics software, fine-tuning parameters for best results necessitates ample testing. For ARCS, we generally find that requiring five or more aligned read pairs per sequence edge and setting the read alignment window to 30 kbp (ARCS <italic>–c</italic> and <italic>–e</italic> parameters), when possible, provides the best trade-off between assembly contiguity and accuracy. For LINKS, the ability to control the minimum number of supporting barcodes required to make a merge is most critical and increasing it decreases the chance of spurious joins. The evaluations presented in the paper, which serve as guidelines, indicate that requiring as low as five or more barcodes per sequence edge produces contiguous assemblies with accuracy similar to that of the starting, baseline assembly. We recommend testing ARCS using a range of parameters, and re-iterate that best scaffolding outcomes in terms of contiguity and accuracy track with both the contiguity and quality of the starting assembly draft.</p>
    <p>Recently, 10 × G released their <italic>de novo</italic> assembly algorithm, Supernova (<xref rid="btx675-B15" ref-type="bibr">Weisenfeld <italic>et al.</italic>, 2017</xref>), designed specifically for the Chromium sequencing technology. It uses read locality information early in the assembly process, as opposed to exclusively at the scaffolding stage, as ARCS and the other tools tested in this work do. This could help prevent misassemblies at the earlier stages of an assembly project, alleviating issues around the propagation of errors when scaffolding genome drafts. Stand-alone tools, on the other hand, make possible retrospective scaffolding of pre-existing drafts, and are beneficial to genome-finishing efforts (<xref rid="btx675-B4" ref-type="bibr">Hunt <italic>et al.</italic>, 2014</xref>). However, as we have seen here, the degree at which existing scaffolding technologies perform varies, and the need of specialized bioinformatics solutions for this task is paramount.</p>
    <p>To our knowledge, ARCS is the first publicly available stand-alone application for scaffolding draft genomes that is designed specifically for using 10 ×  Genomics linked reads. ARCS is freely available in open source for public use.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work has been partly supported by the National Human Genome Research Institute of the National Institutes of Health (under award number R01HG007182). Additional funds were received by IB through Genome Canada, Genome Quebec, Genome British Columbia and Genome Alberta for the Spruce-Up (243FOR) project (<ext-link ext-link-type="uri" xlink:href="http://www.spruce-up.ca">www.spruce-up.ca</ext-link>). The content reported here is solely the responsibility of the authors, and does not necessarily represent the official views of the National Institutes of Health or other funding organizations.</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>Supplementary Data</label>
      <media xlink:href="btx675_arcssupplementary_bioinfo.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list>
    <title>References</title>
    <ref id="btx675-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Adey</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>In vitro, long-range sequence information for de novo genome assembly via transposase contiguity</article-title>. <source>Genome Res</source>., <volume>24</volume>, <fpage>2041</fpage>–<lpage>2049</lpage>.<pub-id pub-id-type="pmid">25327137</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Altschul</surname><given-names>S.F.</given-names></name></person-group><etal>et al</etal> (<year>1990</year>) 
<article-title>Basic local alignment search tool</article-title>. <source>J. Mol. Biol</source>., <volume>215</volume>, <fpage>403</fpage>–<lpage>410</lpage>.<pub-id pub-id-type="pmid">2231712</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Goodwin</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Coming of age: ten years of next-generation sequencing technologies</article-title>. <source>Nat. Rev. Genet</source>., <volume>17</volume>, <fpage>333</fpage>–<lpage>351</lpage>.<pub-id pub-id-type="pmid">27184599</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hunt</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>A comprehensive evaluation of assembly scaffolding tools</article-title>. <source>Genome Biol</source>., <volume>15</volume>, <fpage>R42.</fpage><pub-id pub-id-type="pmid">24581555</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jackman</surname><given-names>S.D.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>ABySS 2.0: resource-efficient assembly of large genomes using a bloom filter</article-title>. <source>Genome Res</source>., doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1101/gr.214346.116.">10.1101/gr.214346.116.</ext-link></mixed-citation>
    </ref>
    <ref id="btx675-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kuleshov</surname><given-names>V.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>Whole-genome haplotyping using long reads and statistical methods</article-title>. <source>Nat. Biotechnol</source>., <volume>32</volume>, <fpage>261</fpage>–<lpage>266</lpage>.<pub-id pub-id-type="pmid">24561555</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kuleshov</surname><given-names>V.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Genome assembly from synthetic long read clouds</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>i216</fpage>–<lpage>i224</lpage>.<pub-id pub-id-type="pmid">27307620</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Krzywinski</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Circos: an information aesthetic for comparative genomics</article-title>. <source>Genome Res</source>., <volume>19</volume>, <fpage>1639</fpage>–<lpage>1645</lpage>.<pub-id pub-id-type="pmid">19541911</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H.</given-names></name></person-group> (<year>2015</year>) 
<article-title>BFC: correcting Illumina sequencing errors</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>2885</fpage>–<lpage>2887</lpage>.<pub-id pub-id-type="pmid">25953801</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H.</given-names></name>, <name name-style="western"><surname>Durbin</surname><given-names>R.</given-names></name></person-group> (<year>2010</year>) 
<article-title>Fast and accurate long-read alignment with Burrows–Wheeler transform</article-title>. <source>Bioinformatics</source>, <volume>26</volume>, <fpage>589</fpage>–<lpage>595</lpage>.<pub-id pub-id-type="pmid">20080505</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mostovoy</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>A hybrid approach for de novo human genome sequence assembly and phasing</article-title>. <source>Nat. Methods</source>, <volume>13</volume>, <fpage>587</fpage>–<lpage>590</lpage>.<pub-id pub-id-type="pmid">27159086</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Narasimhan</surname><given-names>V.M.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Health and population effects of rare gene knockouts in adult humans with related parents</article-title>. <source>Science</source>, <volume>352</volume>, <fpage>474</fpage>–<lpage>477</lpage>.<pub-id pub-id-type="pmid">26940866</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>O’connell</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>NxTrim: optimized trimming of Illumina mate pair reads</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>2035</fpage>–<lpage>2037</lpage>.<pub-id pub-id-type="pmid">25661542</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Warren</surname><given-names>R.L.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>LINKS: Scalable, alignment-free scaffolding of draft genomes with long reads</article-title>. <source>Gigascience</source>, <volume>4</volume>, <fpage>35.</fpage><pub-id pub-id-type="pmid">26244089</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Weisenfeld</surname><given-names>N.I.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Direct determination of diploid genome sequences</article-title>. <italic>Genome Res</italic>, <volume>27</volume>, <fpage>757</fpage>–<lpage>767</lpage>.</mixed-citation>
    </ref>
    <ref id="btx675-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zheng</surname><given-names>G.X.Y.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Haplotyping germline and cancer genomes with high-throughput linked-read sequencing</article-title>. <source>Nat. Biotechnol</source>., <volume>34</volume>, <fpage>303</fpage>–<lpage>311</lpage>.<pub-id pub-id-type="pmid">26829319</pub-id></mixed-citation>
    </ref>
    <ref id="btx675-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zook</surname><given-names>J.M.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Extensive sequencing of seven human genomes to characterize benchmark reference materials</article-title>. <source>Sci. Data</source>, <volume>3</volume>, <fpage>160025</fpage>.<pub-id pub-id-type="pmid">27271295</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
