<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Acta Crystallogr D Struct Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Acta Crystallogr D Struct Biol</journal-id>
    <journal-id journal-id-type="publisher-id">Acta Cryst. D</journal-id>
    <journal-title-group>
      <journal-title>Acta Crystallographica. Section D, Structural Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2059-7983</issn>
    <publisher>
      <publisher-name>International Union of Crystallography</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8329859</article-id>
    <article-id pub-id-type="publisher-id">qg5001</article-id>
    <article-id pub-id-type="doi">10.1107/S2059798321005891</article-id>
    <article-id pub-id-type="coden">ACSDAD</article-id>
    <article-id pub-id-type="pii">S2059798321005891</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Ccp4</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic toggle="yes">CCD</italic><sup>2</sup>: design constructs for protein expression, the easy way</article-title>
      <alt-title>Designing constructs for protein expression</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-2968-8972</contrib-id>
        <name>
          <surname>Murachelli</surname>
          <given-names>Andrea Giovanni</given-names>
        </name>
        <xref rid="a" ref-type="aff">a</xref>
        <xref rid="cor" ref-type="corresp">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-0047-5674</contrib-id>
        <name>
          <surname>Damaskos</surname>
          <given-names>George</given-names>
        </name>
        <xref rid="b" ref-type="aff">b</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0002-1151-6227</contrib-id>
        <name>
          <surname>Perrakis</surname>
          <given-names>Anastassis</given-names>
        </name>
        <xref rid="a" ref-type="aff">a</xref>
        <xref rid="cor" ref-type="corresp">*</xref>
      </contrib>
      <aff id="a"><label>a</label>Oncode Institute and Department of Biochemistry, <institution>Netherlands Cancer Institute</institution>, Plesmanlaan 121, 1066 CX Amsterdam, <country>The Netherlands</country></aff>
      <aff id="b"><label>b</label>Department of Biochemistry, <institution>Netherlands Cancer Institute</institution>, Plesmanlaan 121, 1066 CX Amsterdam, <country>The Netherlands</country></aff>
    </contrib-group>
    <author-notes>
      <corresp id="cor">Correspondence e-mail: <email>a.murachelli@nki.nl</email>, <email>a.perrakis@nki.nl</email>
</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>01</day>
      <month>8</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>29</day>
      <month>7</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>29</day>
      <month>7</month>
      <year>2021</year>
    </pub-date>
    <!--PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>.-->
    <volume>77</volume>
    <issue>Pt 8</issue>
    <issue-id pub-id-type="publisher-id">d210800</issue-id>
    <fpage>992</fpage>
    <lpage>1000</lpage>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>3</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>07</day>
        <month>6</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Andrea Giovanni Murachelli et al. 2021</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution (CC-BY) Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original authors and source are cited.</license-p>
      </license>
    </permissions>
    <self-uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://doi.org/10.1107/S2059798321005891">A full version of this article is available from Crystallography Journals Online.</self-uri>
    <abstract abstract-type="toc">
      <p><italic toggle="yes">CCD</italic><sup>2</sup> is a software tool that aggregates sequence information for protein sequences (conservation, structure prediction, domain and disorder detection), enabling informed choices for expression-construct design, the single-click generation of PCR primers for cloning and easy data tracking.</p>
    </abstract>
    <abstract>
      <p>Studying the function or structure of proteins usually requires the generation of many protein-truncation constructs for recombinant expression, which is a tedious and error-prone job. <italic toggle="yes">CCD</italic>
<sup>2</sup> is a software tool designed to facilitate and automate this task. <italic toggle="yes">CCD</italic>
<sup>2</sup> helps scientists by aggregating the information necessary to design protein-expression constructs. This information includes sequence conservation, secondary structure prediction, domain(s) and disorder detection, post-translational modifications and information on similar (domain) structures that are available in the Protein Data Bank. <italic toggle="yes">CCD</italic>
<sup>2</sup> then allows users to easily choose the boundaries for protein constructs and automatically generates the primers necessary for construct amplification by polymerase chain reaction. Finally, <italic toggle="yes">CCD</italic>
<sup>2</sup> provides a quick analysis of the properties of the chosen constructs, together with their DNA vector maps for bookkeeping. The features of <italic toggle="yes">CCD</italic>
<sup>2</sup> are discussed step by step, showing that it can be a useful tool for laboratories that engage in recombinant protein production for any type of experiment, and in particular for structural biology studies.</p>
    </abstract>
    <kwd-group>
      <kwd>protein analysis</kwd>
      <kwd>meta server</kwd>
      <kwd>
        <italic toggle="yes">CCD</italic>
        <sup>2</sup>
      </kwd>
      <kwd>protein expression</kwd>
      <kwd>expression construct design</kwd>
    </kwd-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="introduction" id="sec1">
    <label>1.</label>
    <title>Introduction   </title>
    <p>Proteins, especially from eukaryotes, are modular machines comprising multiple domains, often connected by flexible regions. Most structural biology projects require the generation of multiple truncation constructs in order to explore recombinant expression, solubility, crystallizability or the functional properties of a target protein or macromolecular complex. Generation of a protein construct has two phases. Firstly, the constructs must be designed based on features of the sequence of the protein of interest. The aim here is to find suitable cutting points that are most likely to preserve protein folding and solubility while retaining the desired functional properties. Secondly, once the truncation constructs are known, amplification primers must be designed to amplify the relevant DNA sequence, which will then be cloned into a suitable recombinant expression vector. Although all of the information necessary for protein-construct design is available online, aggregating it and mapping it onto the protein of interest is rather tedious. Furthermore, truncation points are decided on the protein sequence, but primer design requires working with the DNA sequence. Mapping protein residues to the DNA sequence and designing primers with suitable chemical properties and appropriate cloning adaptors is trivial, but is error-prone and time-consuming. <italic toggle="yes">ProteinCCD</italic> (<italic toggle="yes">Crystallization Construct Designer</italic>; Mooij <italic toggle="yes">et al.</italic>, 2009<xref rid="bb25" ref-type="bibr"> ▸</xref>), a Java, browser-based tool that we previously designed, aggregated many sequence-analysis tools in a single interface, allowing the user to generate PCR primers automatically starting from the protein sequence. However, technological changes have rendered <italic toggle="yes">ProteinCCD</italic> inoperable in modern browsers and obsolete.</p>
    <p><italic toggle="yes">CCD</italic><sup>2</sup> (<italic toggle="yes">Crystallization Construct Designer</italic> 2) is the successor to <italic toggle="yes">ProteinCCD</italic>, using modern technology, but most importantly offering a largely expanded set of functionalities, features and tools.</p>
  </sec>
  <sec sec-type="methods" id="sec2">
    <label>2.</label>
    <title>Methods   </title>
    <sec id="sec2.1">
      <label>2.1.</label>
      <title>Architecture   </title>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> comprises of two parts: a user-facing, graphical user interface (GUI) and a server-side backend that is responsible for data gathering and manipulation. The GUI (whose functional core is also used for <italic toggle="yes">LAHMA</italic>; <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://lahma.rhpc.nki.nl" ext-link-type="uri">https://lahma.rhpc.nki.nl</ext-link>; van Beusekom <italic toggle="yes">et al.</italic>, 2021<xref rid="bb4" ref-type="bibr"> ▸</xref>) consists of an interactive web page written in JavaScript/jQuery and styled with the Bootstrap CSS/html libraries. Such an arrangement allows easy extensibility and compatibility with all modern browsers. The backend is written in Python 3.6 and uses Flask (Ronacher, 2010<xref rid="bb26" ref-type="bibr"> ▸</xref>) to expose a RESTful API to the frontend. To improve network performance, requests to external servers are asynchronously parallelized by both the frontend (AJAX) and the backend (AIOHTTP).</p>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> requires several third-party tools for data analysis. The software programs <italic toggle="yes">IUPred</italic> (Dosztányi <italic toggle="yes">et al.</italic>, 2005<xref rid="bb9" ref-type="bibr"> ▸</xref>) and <italic toggle="yes">NCOILS</italic> (Lupas <italic toggle="yes">et al.</italic>, 1991<xref rid="bb24" ref-type="bibr"> ▸</xref>) and the multiple sequence-alignment tool <italic toggle="yes">MUSCLE</italic> (Edgar, 2004<xref rid="bb11" ref-type="bibr"> ▸</xref>) are executed locally and can be installed using operating-system-specific package managers and repositories (for example <monospace>apt-get</monospace> on Ubuntu). <italic toggle="yes">Predator</italic> (Frishman &amp; Argos, 1996<xref rid="bb13" ref-type="bibr"> ▸</xref>) can be obtained from <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ftp.ebi.ac.uk/pub/software/unix/predator/" ext-link-type="uri">http://ftp.ebi.ac.uk/pub/software/unix/predator/</ext-link>. The <italic toggle="yes">DisEMBL</italic> disorder-prediction tool (Linding, Jensen <italic toggle="yes">et al.</italic>, 2003<xref rid="bb21" ref-type="bibr"> ▸</xref>) has been reimplemented for Python 3.6+ using the original code distributed by the <italic toggle="yes">DisEMBL</italic> authors as a starting point. The Savitsky–Golay smoothing algorithm is copyright by SciPy Developers and is distributed under its own licence. Predictions from <italic toggle="yes">GlobPlot</italic> (Linding, Russell <italic toggle="yes">et al.</italic>, 2003<xref rid="bb22" ref-type="bibr"> ▸</xref>), the Pfam database (El-Gebali <italic toggle="yes">et al.</italic>, 2019<xref rid="bb12" ref-type="bibr"> ▸</xref>), <italic toggle="yes">SMART </italic> (Letunic <italic toggle="yes">et al.</italic>, 2021<xref rid="bb20" ref-type="bibr"> ▸</xref>), <italic toggle="yes">NLS Mapper</italic> (Kosugi <italic toggle="yes">et al.</italic>, 2009<xref rid="bb18" ref-type="bibr"> ▸</xref>), <italic toggle="yes">UniProt</italic> (The UniProt Consortium, 2019<xref rid="bb27" ref-type="bibr"> ▸</xref>) and <italic toggle="yes">Phosphosite</italic> (Hornbeck <italic toggle="yes">et al.</italic>, 2004<xref rid="bb17" ref-type="bibr"> ▸</xref>) are gathered through the respective web servers. Secondary-structure predictions using <italic toggle="yes">HNN</italic> (Guermeur, 1997<xref rid="bb15" ref-type="bibr"> ▸</xref>), <italic toggle="yes">DPM</italic> (Deléage &amp; Roux, 1987<xref rid="bb8" ref-type="bibr"> ▸</xref>) and <italic toggle="yes">MLRC</italic> (Guermeur <italic toggle="yes">et al.</italic>, 1999<xref rid="bb16" ref-type="bibr"> ▸</xref>) are gathered via the NPS@ server (Combet <italic toggle="yes">et al.</italic>, 2000<xref rid="bb7" ref-type="bibr"> ▸</xref>). Similarity searches against the PDB (Berman <italic toggle="yes">et al.</italic>, 2003<xref rid="bb3" ref-type="bibr"> ▸</xref>) and SwissProt (The UniProt Consortium, 2019<xref rid="bb27" ref-type="bibr"> ▸</xref>) databases are performed against a local copy of these databases using NCBI <italic toggle="yes">BLAST+</italic> (Camacho <italic toggle="yes">et al.</italic>, 2009<xref rid="bb5" ref-type="bibr"> ▸</xref>; Altschul <italic toggle="yes">et al.</italic>, 1990<xref rid="bb1" ref-type="bibr"> ▸</xref>). A <italic toggle="yes">CCD</italic>
<sup>2</sup> script (<monospace>update_db.py</monospace>) takes care of installing and/or updating these local database reposi­tories.</p>
      <p>Internally, <italic toggle="yes">CCD</italic>
<sup>2</sup> implements a pipeline that is summarized in Fig. 1<xref rid="fig1" ref-type="fig"> ▸</xref>. To improve parallelization and maintainability, different tasks are fulfilled by different modules of the backend (coloured boxes in Fig. 1<xref rid="fig1" ref-type="fig"> ▸</xref>), each accessible through a separate REST call.</p>
    </sec>
    <sec id="sec2.2">
      <label>2.2.</label>
      <title>Web-server implementation, installation and code availability   </title>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> is accessible at the URL <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://ccd.rhpc.nki.nl" ext-link-type="uri">https://ccd.rhpc.nki.nl</ext-link> hosted by the Netherlands Cancer Institute Research High-Performance Computing Facility.</p>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> can also be run locally on a Linux-based machine (tested on Ubuntu version 20.04). The source code of <italic toggle="yes">CCD</italic>
<sup>2</sup> is available at <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/ProteinCCD2/ProteinCCD2" ext-link-type="uri">https://github.com/ProteinCCD2/ProteinCCD2</ext-link> and is free for noncommercial use (licencing terms are available at the code repository site). Some external tools are covered by different licencing arrangement and should be obtained by the user in accordance with the term of the respective licences.</p>
      <p>Installation of <italic toggle="yes">CCD</italic>
<sup>2</sup> is straightforward and is explained in the <monospace>README.MD</monospace> file provided with the distribution. Python environment consistency is maintained using Anaconda virtual environments.</p>
    </sec>
  </sec>
  <sec sec-type="results" id="sec3">
    <label>3.</label>
    <title>Results   </title>
    <p>In this section, we will describe the functions of <italic toggle="yes">CCD</italic>
<sup>2</sup> following the natural order of user interaction schematized in Fig. 1<xref rid="fig1" ref-type="fig"> ▸</xref>. We will also provide some general tips about protein-construct design.</p>
    <p>In our experience, a successful protein construct fulfils three related requirements: (i) it is recombinantly expressed (ideally at high levels), (ii) it is (highly) soluble and (iii) it is conformationally stable or at least constrained. (i) and (ii) are requirements for recombinant expression and biochemical, biophysical and many other functional assays, whereas (iii) is a requirement for a high-resolution structure by X-ray crystallography or by single-particle cryoEM. <italic toggle="yes">CCD</italic>
<sup>2</sup> can help efficient recombinant expression by providing a quick and easy way to clone the user’s construct with different tags and in different hosts (see Section 3.4<xref rid="sec3.4" ref-type="sec"/>) and by facilitating relative bookkeeping (see Section 3.5<xref rid="sec3.5" ref-type="sec"/>). The solubility requirement (ii) is achieved when proteins are correctly folded and do not expose an excessive hydrophobic surface to the solvent. Due to the modular nature of proteins, this is true when a truncation cuts between, but not within, protein domains and structural elements. For structural biology and requirement (iii), one would also prune unstructured regions (<italic toggle="yes">i.e.</italic> regions that are not part of a folded domain) to limit the conformational freedom of the construct. If one is interested in intrinsically disordered proteins, and expressing disordered regions is instead the target, unstructured regions would be cloned instead. Either way, protein-construct design boils down to identifying domains and disorder in proteins. A main goal of <italic toggle="yes">CCD</italic>
<sup>2</sup> is to collate and display at a glance all of the information useful for domain identification.</p>
    <sec id="sec3.1">
      <label>3.1.</label>
      <title>Identifying the DNA sequence of the protein of interest   </title>
      <p>The first step required for construct design is to retrieve and analyse the sequence of the protein of interest (POI). However, since the final objective is to generate cloning primers, <italic toggle="yes">CCD</italic>
<sup>2</sup> needs to start by knowing the DNA sequence that codes for the POI (Fig. 2<xref rid="fig2" ref-type="fig"> ▸</xref>). Two options are available. The user can paste their own DNA sequence into the GUI and start the workflow from there. This is the only option available in the case where the POI is coded by an ORF that is non-natural (<italic toggle="yes">i.e.</italic> codon-optimized) or by an ORF that is not present in the UniProt database. However, if the POI is coded by a natural sequence whose translation has been deposited in the UniProt database, <italic toggle="yes">CCD</italic>
<sup>2</sup> can query UniProt using a user-provided identifier (for example Q9UJ41) or mnemonic accession code (for example RABX5_HUMAN). From the UniProt entry, <italic toggle="yes">CCD</italic>
<sup>2</sup> can automatically determine which isoforms of the POI are reported and match them to appropriate DNA sequences (open reading frames; ORFs) by querying the cross-referenced nucleotide databases. UniProt protein sequences are determined by consensus and curation (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.uniprot.org/help/canonical_nucleotide" ext-link-type="uri">https://www.uniprot.org/help/canonical_nucleotide</ext-link>), meaning that there is no one-to-one match between DNA primary database accessions and protein isoforms. CCD<sup>2</sup> simply gathers all the cross-referenced DNA sequences, translates them and matches them to isoforms at the protein level. No attempt is made to compare the raw DNA sequences for silent single-nucleotide polymorphisms, because these are rare and are extremely unlikely to affect the eventually generated primers. Imperfect protein sequence matches of up to three single amino-acid substitutions are shown to the user if no perfect match can be found for an isoform, along with a detailed notice about the sequence differences. For bacterial proteins, <italic toggle="yes">CCD</italic>
<sup>2</sup> can parse multicistronic genes and genomic sequences (where the entry does not exceed 1 Mb in download size).</p>
      <p>Once isoform matching is complete, the user is prompted to choose which isoform they wish to use for downstream analysis and primer generation. Cross-references to the primary DNA databases are provided for each isoform (Fig. 2<xref rid="fig2" ref-type="fig"> ▸</xref>). For easier visual reference, an alignment of the different isoforms is also provided. Inspection of the differences between isoforms can suggest viable truncation positions and hint at domains that might be swapped in or out among isoforms.</p>
    </sec>
    <sec id="sec3.2">
      <label>3.2.</label>
      <title>Creating and visualizing a report on sequence conservation   </title>
      <p>Domains are functionally and structurally constrained, and are thus evolutionarily conserved. Disordered and linker sequences are under looser evolutionary pressure and mutate more frequently, unless they are of specific functional importance. In general, in a multiple sequence alignment, well ordered domains will appear as contiguous stretches of conserved residues, whereas linker and disordered regions will show higher divergence. <italic toggle="yes">CCD</italic>
<sup>2</sup> attempts to find and display a multiple sequence alignment of the POI using three approaches. If a UniProt ID is provided by the user, and this ID can be mapped to a pre-calculated Ensembl alignment (Yates <italic toggle="yes">et al.</italic>, 2020<xref rid="bb28" ref-type="bibr"> ▸</xref>), this alignment is retrieved. If no UniProt ID is available or provided, <italic toggle="yes">CCD</italic>
<sup>2</sup> performs a <italic toggle="yes">BLAST</italic> search against a local copy of the SwissProt database and looks for up to five hits that have an identity of &gt;95% with the POI. <italic toggle="yes">CCD</italic>
<sup>2</sup> then queries Ensembl and looks for pre-calculated alignments for any of these hits. If such a hit exists, it is considered a homolog to the POI and the corresponding Ensembl alignment is retrieved. If this approach also fails, <italic toggle="yes">CCD</italic>
<sup>2</sup> displays results of the <italic toggle="yes">BLAST</italic> search that (i) have an <italic toggle="yes">E</italic>-value of &gt;0.001 and (ii) represent sequence coverage of the POI of ≥75%. Requiring a high sequence coverage is likely to find and display true orthologues of the POI (rather than showing sequences of loosely related proteins that simply share a single domain with the POI). Then, the POI isoform chosen by the user is aligned with the homolog sequences using <italic toggle="yes">MUSCLE</italic> (Edgar, 2004<xref rid="bb11" ref-type="bibr"> ▸</xref>).</p>
      <p>The Ensembl or on-the-fly constructed multiple sequence alignment is then displayed in the GUI (Fig. 3<xref rid="fig3" ref-type="fig"> ▸</xref>, top) and coloured by conservation using the <italic toggle="yes">ClustalX</italic> scheme (Larkin <italic toggle="yes">et al.</italic>, 2007<xref rid="bb19" ref-type="bibr"> ▸</xref>). By default, only sequences belonging to specific pre-chosen species are displayed. These species are chosen using the following two criteria: (i) they have high-quality genome sequences and (ii) they sample all main phylo­genetic classes in order to provide a wide view of the evolutionary diversity of the POI (a full list is available at <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://ccd.rhpc.nki.nl/species" ext-link-type="uri">https://ccd.rhpc.nki.nl/species</ext-link>). The user has the option of showing the entire alignment if they wish. Furthermore, if the alignment comes from Ensembl, the user has the option of selecting which types of homologs are displayed (one-to-one, one-to-many, many-to-many homologs and paralogs, as defined by Ensembl; <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ensembl.org/info/genome/compara/homology_method.html" ext-link-type="uri">http://www.ensembl.org/info/genome/compara/homology_method.html</ext-link>).</p>
      <p>For user convenience, whenever possible, Ensembl and UniProt identifiers are renamed to indicate their organism of origin and gene name more clearly; for example ENSMUSG00000006715 is renamed to M.musculus_gmnn_ (H3BLK4_MOUSE), indicating that this is the mouse product of the <italic toggle="yes">gmnn</italic> gene, whose UniProt accession is H3BLK4_MOUSE. Alignments can be downloaded in FASTA format for bookkeeping and/or further analysis in external tools.</p>
    </sec>
    <sec id="sec3.3">
      <label>3.3.</label>
      <title>Aggregating and visualizing sequence-information data   </title>
      <p>All the different data are gathered from various software, either locally or using web services, collated and displayed at below the multiple sequence alignment and the POI sequence (Fig. 3<xref rid="fig3" ref-type="fig"> ▸</xref>, bottom). Below we discuss all the different types of information collected and displayed by <italic toggle="yes">CCD</italic>
<sup>2</sup>.</p>
      <sec id="sec3.3.1">
        <label>3.3.1.</label>
        <title>Secondary-structure prediction   </title>
        <p>Domains have a high content of secondary structure, while disordered regions do not. <italic toggle="yes">CCD</italic>
<sup>2</sup> runs the sequence through four secondary-structure prediction algorithms [<italic toggle="yes">HNN</italic> (Guermeur, 1997<xref rid="bb15" ref-type="bibr"> ▸</xref>), <italic toggle="yes">DPM</italic> (Deléage &amp; Roux, 1987<xref rid="bb8" ref-type="bibr"> ▸</xref>), <italic toggle="yes">MLRC</italic> (Guermeur <italic toggle="yes">et al.</italic>, 1999<xref rid="bb16" ref-type="bibr"> ▸</xref>) and <italic toggle="yes">Predator</italic> (Frishman &amp; Argos, 1996<xref rid="bb13" ref-type="bibr"> ▸</xref>)]. These secondary-structure prediction methods are reasonably reliable and quick. Their results are displayed together, so that the user can derive a consensus view. Consecutive stretches of consensus secondary structure indicate domains.</p>
      </sec>
      <sec id="sec3.3.2">
        <label>3.3.2.</label>
        <title>Disorder prediction   </title>
        <p>Disordered regions often have low-complexity, repetitive sequences. Additionally, polar and charged amino acids are overrepresented in disordered regions (Dyson, 2016<xref rid="bb10" ref-type="bibr"> ▸</xref>). <italic toggle="yes">CCD</italic>
<sup>2</sup> gathers disorder and globular region information using <italic toggle="yes">IUPred</italic> (Dosztányi <italic toggle="yes">et al.</italic>, 2005<xref rid="bb9" ref-type="bibr"> ▸</xref>), <italic toggle="yes">DisEMBL</italic> (Linding, Jensen <italic toggle="yes">et al.</italic>, 2003<xref rid="bb21" ref-type="bibr"> ▸</xref>) and <italic toggle="yes">GlobPlot</italic> (Linding, Russell <italic toggle="yes">et al.</italic>, 2003<xref rid="bb22" ref-type="bibr"> ▸</xref>). The SMART database (Letunic <italic toggle="yes">et al.</italic>, 2021<xref rid="bb20" ref-type="bibr"> ▸</xref>) is also used to display low-complexity regions. Cuts in the constructs should encompass, but not cut within, predicted globular regions. Trimming terminal disordered regions is generally required for crystallization, and might lead to more homogeneous protein preparations owing to reduced proteolytic degradation.</p>
      </sec>
      <sec id="sec3.3.3">
        <label>3.3.3.</label>
        <title>Domain detection   </title>
        <p><italic toggle="yes">CCD</italic><sup>2</sup> highlights known domains in the protein sequence by querying the SMART (Letunic <italic toggle="yes">et al.</italic>, 2021<xref rid="bb20" ref-type="bibr"> ▸</xref>) and Pfam (El-Gebali <italic toggle="yes">et al.</italic>, 2019<xref rid="bb12" ref-type="bibr"> ▸</xref>) domain-fingerprint databases. Additionally, <italic toggle="yes">CCD</italic>
<sup>2</sup> performs a <italic toggle="yes">BLAST</italic> search (Altschul <italic toggle="yes">et al.</italic>, 1990<xref rid="bb1" ref-type="bibr"> ▸</xref>) against a local copy of the Protein Data Bank (PDB), reporting hits at three different levels of similarity. The prediction ‘PDB_95’ highlights the parts of the POI sequence that have an identity of ≥95% to a solved structure in the PDB, thus indicating that parts of the POI (or of a very close homologue) have been experimentally determined. The boundaries of the expression constructs deposited in the corresponding PDB structures are also indicated on the POI sequence. Hovering the cursor over the construct boundaries (marked with ‘&gt;’ or ‘&lt;’ for a start or stop position, respectively) will display the PDB code and chain of the matching structures.</p>
        <p>These are experimentally validated, effectual boundaries for truncation constructs. The predictions ‘PDB50_to_95’ and ‘PDB30_to_50’ similarly highlight parts of the POI sequence that have <italic toggle="yes">BLAST</italic> hits against the PDB with identities between 95% and 50% and between 50% and 30%, respectively. These portions of the POI sequence are homologous to known structures, indicating the likely existence and approximate boundaries of a folded domain. All of the results of the search against the PDB can be downloaded for further analysis by clocking on the ‘Save PDB hits’ button. These include the PDB code, sequence coverage and percentage identity for each matching hit.</p>
      </sec>
      <sec id="sec3.3.4">
        <label>3.3.4.</label>
        <title>Coiled-coil detection   </title>
        <p>Coiled coils are very common structural domains that often mediate protein–protein interactions. <italic toggle="yes">CCD</italic>
<sup>2</sup> searches for coiled coils by querying the SMART database and by direct prediction with <italic toggle="yes">NCOILS</italic> (Lupas <italic toggle="yes">et al.</italic>, 1991<xref rid="bb24" ref-type="bibr"> ▸</xref>). Truncation within coiled coils is possible (see, for example, Ciferri <italic toggle="yes">et al.</italic>, 2008<xref rid="bb6" ref-type="bibr"> ▸</xref>), although trial and error is necessary.</p>
      </sec>
      <sec id="sec3.3.5">
        <label>3.3.5.</label>
        <title>Detection of other functional elements   </title>
        <p><italic toggle="yes">CCD</italic><sup>2</sup> further detects the presence of putative nuclear localization signals (NLS) using <italic toggle="yes">NLS</italic> (Kosugi <italic toggle="yes">et al.</italic>, 2009<xref rid="bb18" ref-type="bibr"> ▸</xref>). The presence of an NLS can influence expression in eukaryotic systems. However, NLSs are low-complexity, generally disordered sequences, so their removal can positively affect crystallization.</p>
        <p>If experimentally validated post-translational modifications (PTMs) are recorded in the UniProt entry for the sequence of interest, these are displayed. UniProt covers a wide variety of possible PTMs, including glycosylation, disulfide bridges, cross-links (intra-chain and to other proteins such as ubiquitin), chemical modification of amino acids and more. These modifications are indicated with a single-letter code including, for example, ‘A’ for acetylation, ‘^’ for a disulfide link, ‘+’ for multiple known modifications <italic toggle="yes">etc.</italic> (a full legend can be found on the tutorial page at <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://ccd.rhpc.nki.nl/tutorial" ext-link-type="uri">https://ccd.rhpc.nki.nl/tutorial</ext-link>). Hovering the cursor over each letter will display more precise information about each modification. Because UniProt annotations always refer to the sequence of the canonical isoform, these annotations are disabled if the user has selected an alternative splicing variant, to avoid sequence discrepancy.</p>
        <p>When data are available (human, rat and mouse proteins), <italic toggle="yes">CCD</italic>
<sup>2</sup> also queries the Phosphosite Plus database (Hornbeck <italic toggle="yes">et al.</italic>, 2004<xref rid="bb17" ref-type="bibr"> ▸</xref>) for the presence of experimentally validated post-translational modifications (PTMs) on the sequence. Annotations follow the same notation as for UniProt above. Hovering over each annotation provides further information about the underlying data.</p>
        <p>PTMs are added by enzymes and require physical accessibility to be attached. Thus, the presence of PTMs can hint at disordered, highly accessible linker regions or at least solvent-exposed residues (Dyson, 2016<xref rid="bb10" ref-type="bibr"> ▸</xref>). PTMs can also inform about the functionality of truncation constructs.</p>
      </sec>
    </sec>
    <sec id="sec3.4">
      <label>3.4.</label>
      <title>Designing protein constructs and single-click generation of DNA primers   </title>
      <p>With all the necessary information available, the user can choose where truncation constructs should start or stop by clicking start and stop points on the sequence of the POI (Fig. 3<xref rid="fig3" ref-type="fig"> ▸</xref>, middle). The clicked amino acid is always included in the final construct. Start points will generate forward PCR primers and stop points will generate reverse PCR primers. A position can be marked as being both a start and a stop.</p>
      <p>PCR amplificates typically need adapter sequences to be cloned into recipient vectors. These sequences are added to the primers as ‘overhangs’ that extend beyond the primer sequence that anneals to the template DNA. <italic toggle="yes">CCD</italic>
<sup>2</sup> allows the user to choose overhangs in three ways (Figs. 4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">a</italic>–4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">c</italic>). Firstly, the version of <italic toggle="yes">CCD</italic>
<sup>2</sup> hosted on our servers is designed to work in tandem with the pETNKI series (Luna-Vargas <italic toggle="yes">et al.</italic>, 2011<xref rid="bb23" ref-type="bibr"> ▸</xref>) of ligation-independent cloning (LIC; Aslanidis &amp; de Jong, 1990<xref rid="bb2" ref-type="bibr"> ▸</xref>) vectors. These vectors are suitable for mammalian, insect-cell or <italic toggle="yes">Escherichia coli</italic> expression and are designed for maximum intercompatibility, so that the same PCR amplificate can be cloned in multiple targets. <italic toggle="yes">CCD</italic>
<sup>2</sup> can automatically generate PCR primers with the correct overhangs for any pETNKI vector chosen (Fig. 4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">a</italic>). Some pETNKI vectors can be freely obtained from Addgene (<ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.addgene.org/" ext-link-type="uri">https://www.addgene.org/</ext-link>, catalogue Nos. 108703–108710); others, which are encumbered by third-party patents, can be sourced from the Netherlands Cancer Institute protein-production facility with a material transfer agreement. When running a local copy of <italic toggle="yes">CCD</italic>
<sup>2</sup>, user-defined vectors can be integrated instead of the petNKI series (not shown). Alternatively, <italic toggle="yes">CCD</italic>
<sup>2</sup> contains a utility to generate primer overhangs for conventional restriction cloning (Fig. 4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">b</italic>). Finally, <italic toggle="yes">CCD</italic>
<sup>2</sup> can accept user-provided custom overhangs, which may contain nonstandard sequences (<italic toggle="yes">i.e.</italic> other than the standard DNA bases ATCG; Fig. 4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">c</italic>). In all cases, the user is notified of the final overhang sequence and of the presence of start/stop codons in the overhang (not shown). The user can also choose the properties of the primer by choosing a desired melting temperature (<italic toggle="yes">T</italic>
<sub>m</sub>; default 65°C) or primer length. Overhangs are not considered in determining the <italic toggle="yes">T</italic>
<sub>m</sub>. Finally, the user can also choose a name for the primers.</p>
      <p>Using these data, <italic toggle="yes">CCD</italic>
<sup>2</sup> automatically maps the user-chosen start and stop positions from the protein to the DNA sequence and generates a table with all of the primers that can be saved in spreadsheet-compatible format for bookkeeping or copied and pasted for quick ordering of the primers (Fig. 4<xref rid="fig4" ref-type="fig"> ▸</xref>
<italic toggle="yes">d</italic>). The amplified DNA sequences resulting from all possible combinations of starts and stops (<italic toggle="yes">i.e.</italic> resulting from a start and stop primer that amplifies any portion of the protein sequence) can also be downloaded in spreadsheet-compatible format by clicking on the ‘Save Construct DNA’ button.</p>
    </sec>
    <sec id="sec3.5">
      <label>3.5.</label>
      <title>Enabling data tracking and bookkeeping   </title>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> displays the sequence of the protein truncations that are generated by all possible start and stop combinations in a different panel, along with basic information about their predicted molecular weight (MW), isoelectric point (pI) and predicted extinction coefficient at 280 nm (Fig. 5<xref rid="fig5" ref-type="fig"> ▸</xref>
<italic toggle="yes">a</italic>). These are calculated with the same algorithm as used by <italic toggle="yes">ProtParam</italic> in the Expasy portal (Gasteiger <italic toggle="yes">et al.</italic>, 2005<xref rid="bb99" ref-type="bibr"> ▸</xref>). If pETNKI vectors are chosen as cloning targets (or custom vectors are integrated in a local copy of <italic toggle="yes">CCD</italic>
<sup>2</sup>), <italic toggle="yes">CCD</italic>
<sup>2</sup> also has the information about the sequence of each construct prior to (Fig. 5<xref rid="fig5" ref-type="fig"> ▸</xref>
<italic toggle="yes">b</italic>) and after (Fig. 5<xref rid="fig5" ref-type="fig"> ▸</xref>
<italic toggle="yes">c</italic>) proteolytic tag cleavage, and can provide further provide the sequence, molecular weight, predicted isoelectric point (pI) and expected 280 nm extinction coefficient for all generated constructs, either with attached tag or after protease digestion. All of these data can be saved in spreadsheet-compatible format for bookkeeping and to assist in protein expression and purification.</p>
      <p>Finally, for pETNKI and custom vectors, <italic toggle="yes">CCD</italic>
<sup>2</sup> can generate and save annotated plasmid maps of the chosen truncation constructs (GenBank format; <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.ncbi.nlm.nih.gov/genbank/samplerecord/" ext-link-type="uri">https://www.ncbi.nlm.nih.gov/genbank/samplerecord/</ext-link>). These can be opened in any standard DNA-manipulation software and are useful as a reference to check the success of cloning.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec4">
    <label>4.</label>
    <title>Conclusions   </title>
    <p>The design and cloning of constructs are frequent and time-consuming tasks in any structural biology project, and often in general biochemistry and biophysics. <italic toggle="yes">CCD</italic>
<sup>2</sup> streamlines these tasks: it helps in the design of constructs by consolidating multiple informative analyses of the sequence in a single place, and it enables the user to make quick decisions about where protein truncations should be placed. Then, once the boundaries have been chosen, <italic toggle="yes">CCD</italic>
<sup>2</sup> takes care of the nitty-gritty details of primer design and plasmid mapping, also providing a brief recombinant construct analysis. Overall, <italic toggle="yes">CCD</italic>
<sup>2</sup> allows the user to save valuable time and reduce costly mistakes in any structural biology project.</p>
  </sec>
</body>
<back>
  <ack>
    <p>We would like to acknowledge Professor Titia Sixma for support and feedback, Dr Wouter Touw for help in project setup and helpful discussions, the Research High-Performance Computing (RHPC) facility of the Netherlands Cancer Institute for hosting the <italic toggle="yes">CCD</italic>
<sup>2</sup> website, and the members of the Sixma and Perrakis groups at NKI for helpful discussion, beta testing and feedback.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="bb1">
      <mixed-citation publication-type="other">Altschul, S. F., Gish, W., Miller, W., Myers, E. W. &amp; Lipman, D. J. (1990). <italic toggle="yes">J. Mol. Biol.</italic>
<bold>215</bold>, 403–410.</mixed-citation>
    </ref>
    <ref id="bb2">
      <mixed-citation publication-type="other">Aslanidis, C. &amp; de Jong, P. J. (1990). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>18</bold>, 6069–6074.</mixed-citation>
    </ref>
    <ref id="bb3">
      <mixed-citation publication-type="other">Berman, H., Henrick, K. &amp; Nakamura, H. (2003). <italic toggle="yes">Nat. Struct. Mol. Biol.</italic>
<bold>10</bold>, 980.</mixed-citation>
    </ref>
    <ref id="bb4">
      <mixed-citation publication-type="other">Beusekom, B. van, Damaskos, G., Hekkelman, M. L., Salgado-Polo, F., Hiruma, Y., Perrakis, A. &amp; Joosten, R. P. (2021). <italic toggle="yes">Acta Cryst.</italic> D<bold>77</bold>, 28–40.</mixed-citation>
    </ref>
    <ref id="bb5">
      <mixed-citation publication-type="other">Camacho, C., Coulouris, G., Avagyan, V., Ma, N., Papadopoulos, J., Bealer, K. &amp; Madden, T. L. (2009). <italic toggle="yes">BMC Bioinformatics</italic>, <bold>10</bold>, 421.</mixed-citation>
    </ref>
    <ref id="bb6">
      <mixed-citation publication-type="other">Ciferri, C., Pasqualato, S., Screpanti, E., Varetti, G., Santaguida, S., Dos Reis, G., Maiolica, A., Polka, J., De Luca, J. G., De Wulf, P., Salek, M., Rappsilber, J., Moores, C. A., Salmon, E. D. &amp; Musacchio, A. (2008). <italic toggle="yes">Cell</italic>, <bold>133</bold>, 427–439.</mixed-citation>
    </ref>
    <ref id="bb7">
      <mixed-citation publication-type="other">Combet, C., Blanchet, C., Geourjon, C. &amp; Deléage, G. (2000). <italic toggle="yes">Trends Biochem. Sci.</italic>
<bold>25</bold>, 147–150.</mixed-citation>
    </ref>
    <ref id="bb8">
      <mixed-citation publication-type="other">Deléage, G. &amp; Roux, B. (1987). <italic toggle="yes">Protein Eng. Des. Sel.</italic>
<bold>1</bold>, 289–294.</mixed-citation>
    </ref>
    <ref id="bb9">
      <mixed-citation publication-type="other">Dosztányi, Z., Csizmók, V., Tompa, P. &amp; Simon, I. (2005). <italic toggle="yes">J. Mol. Biol.</italic>
<bold>347</bold>, 827–839.</mixed-citation>
    </ref>
    <ref id="bb10">
      <mixed-citation publication-type="other">Dyson, H. J. (2016). <italic toggle="yes">Biophys. J.</italic>
<bold>110</bold>, 1013–1016.</mixed-citation>
    </ref>
    <ref id="bb11">
      <mixed-citation publication-type="other">Edgar, R. C. (2004). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>32</bold>, 1792–1797.</mixed-citation>
    </ref>
    <ref id="bb12">
      <mixed-citation publication-type="other">El-Gebali, S., Mistry, J., Bateman, A., Eddy, S. R., Luciani, A., Potter, S. C., Qureshi, M., Richardson, L. J., Salazar, G. A., Smart, A., Sonnhammer, E. L. L., Hirsh, L., Paladin, L., Piovesan, D., Tosatto, S. C. E. &amp; Finn, R. D. (2019). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>47</bold>, D427–D432.</mixed-citation>
    </ref>
    <ref id="bb13">
      <mixed-citation publication-type="other">Frishman, D. &amp; Argos, P. (1996). <italic toggle="yes">Protein Eng. Des. Sel.</italic>
<bold>9</bold>, 133–142.</mixed-citation>
    </ref>
    <ref id="bb99">
      <mixed-citation publication-type="other">Gasteiger, E., Hoogland, C., Gattiker, A., Duvaud, S., Wilkins, M. R., Appel, R. D. &amp; Bairoch, A. (2005). <italic toggle="yes">The Proteomics Protocols Handbook</italic>, edited by J. M. Walker, pp. 571–607. Totowa: Humana Press. </mixed-citation>
    </ref>
    <ref id="bb15">
      <mixed-citation publication-type="other">Guermeur, Y. (1997). <italic toggle="yes">Combinaison de classifieurs statistiques: application à la prédiction de la structure secondaire des protéines.</italic> http://www.theses.fr/1997PA066667.</mixed-citation>
    </ref>
    <ref id="bb16">
      <mixed-citation publication-type="other">Guermeur, Y., Geourjon, C., Gallinari, P. &amp; Deléage, G. (1999). <italic toggle="yes">Bioinformatics</italic>, <bold>15</bold>, 413–421.</mixed-citation>
    </ref>
    <ref id="bb17">
      <mixed-citation publication-type="other">Hornbeck, P. V., Chabra, I., Kornhauser, J. M., Skrzypek, E. &amp; Zhang, B. (2004). <italic toggle="yes">Proteomics</italic>, <bold>4</bold>, 1551–1561.</mixed-citation>
    </ref>
    <ref id="bb18">
      <mixed-citation publication-type="other">Kosugi, S., Hasebe, M., Tomita, M. &amp; Yanagawa, H. (2009). <italic toggle="yes">Proc. Natl Acad. Sci. USA</italic>, <bold>106</bold>, 10171–10176.</mixed-citation>
    </ref>
    <ref id="bb19">
      <mixed-citation publication-type="other">Larkin, M. A., Blackshields, G., Brown, N. P., Chenna, R., McGettigan, P. A., McWilliam, H., Valentin, F., Wallace, I. M., Wilm, A., Lopez, R., Thompson, J. D., Gibson, T. J. &amp; Higgins, D. G. (2007). <italic toggle="yes">Bioinformatics</italic>, <bold>23</bold>, 2947–2948.</mixed-citation>
    </ref>
    <ref id="bb20">
      <mixed-citation publication-type="other">Letunic, I., Khedkar, S. &amp; Bork, P. (2021). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>49</bold>, D458–D460.</mixed-citation>
    </ref>
    <ref id="bb21">
      <mixed-citation publication-type="other">Linding, R., Jensen, L. J., Diella, F., Bork, P., Gibson, T. J. &amp; Russell, R. B. (2003). <italic toggle="yes">Structure</italic>, <bold>11</bold>, 1453–1459.</mixed-citation>
    </ref>
    <ref id="bb22">
      <mixed-citation publication-type="other">Linding, R., Russell, R. B., Neduva, V. &amp; Gibson, T. J. (2003). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>31</bold>, 3701–3708.</mixed-citation>
    </ref>
    <ref id="bb23">
      <mixed-citation publication-type="other">Luna-Vargas, M. P. A., Christodoulou, E., Alfieri, A., van Dijk, W. J., Stadnik, M., Hibbert, R. G., Sahtoe, D. D., Clerici, M., Marco, V. D., Littler, D., Celie, P. H. N., Sixma, T. K. &amp; Perrakis, A. (2011). <italic toggle="yes">J. Struct. Biol.</italic>
<bold>175</bold>, 113–119.</mixed-citation>
    </ref>
    <ref id="bb24">
      <mixed-citation publication-type="other">Lupas, A., Van Dyke, M. &amp; Stock, J. (1991). <italic toggle="yes">Science</italic>, <bold>252</bold>, 1162–1164.</mixed-citation>
    </ref>
    <ref id="bb25">
      <mixed-citation publication-type="other">Mooij, W. T. M., Mitsiki, E. &amp; Perrakis, A. (2009). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>37</bold>, W402–W405.</mixed-citation>
    </ref>
    <ref id="bb26">
      <mixed-citation publication-type="other">Ronacher, A. (2010). <italic toggle="yes">Flask.</italic> https://palletsprojects.com/p/flask/.</mixed-citation>
    </ref>
    <ref id="bb27">
      <mixed-citation publication-type="other">The UniProt Consortium (2019). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>47</bold>, D506–D515.</mixed-citation>
    </ref>
    <ref id="bb28">
      <mixed-citation publication-type="other">Yates, A. D., Achuthan, P., Akanni, W., Allen, J., Allen, J., Alvarez-Jarreta, J., Amode, M. R., Armean, I. M., Azov, A. G., Bennett, R., Bhai, J., Billis, K., Boddu, S., Marugán, J. C., Cummins, C., Davidson, C., Dodiya, K., Fatima, R., Gall, A., Giron, C. G., Gil, L., Grego, T., Haggerty, L., Haskell, E., Hourlier, T., Izuogu, O. G., Janacek, S. H., Juettemann, T., Kay, M., Lavidas, I., Le, T., Lemos, D., Martinez, J. G., Maurel, T., McDowall, M., McMahon, A., Mohanan, S., Moore, B., Nuhn, M., Oheh, D. N., Parker, A., Parton, A., Patricio, M., Sakthivel, M. P., Abdul Salam, A. I., Schmitt, B. M., Schuilenburg, H., Sheppard, D., Sycheva, M., Szuba, M., Taylor, K., Thormann, A., Threadgold, G., Vullo, A., Walts, B., Winterbottom, A., Zadissa, A., Chakiachvili, M., Flint, B., Frankish, A., Hunt, S. E., IIsley, G., Kostadima, M., Langridge, N., Loveland, J. E., Martin, F. J., Morales, J., Mudge, J. M., Muffato, M., Perry, E., Ruffier, M., Trevanion, S. J., Cunningham, F., Howe, K. L., Zerbino, D. R. &amp; Flicek, P. (2020). <italic toggle="yes">Nucleic Acids Res.</italic>
<bold>48</bold>, D682–D688.</mixed-citation>
    </ref>
  </ref-list>
</back>
<floats-group>
  <fig position="float" id="fig1">
    <label>Figure 1</label>
    <caption>
      <p>Flowchart of <italic toggle="yes">CCD</italic>
<sup>2</sup>. This flowchart shows the decision path/pipeline implemented by <italic toggle="yes">CCD</italic>
<sup>2</sup>. Points where user input is required are indicated by gold ellipses. Light-blue shaded boxes or highlighting show features that were present in the old <italic toggle="yes">ProteinCCD</italic> (Mooij <italic toggle="yes">et al.</italic>, 2009<xref rid="bb25" ref-type="bibr"> ▸</xref>). Coloured boxes indicate which modules of the backend are responsible for each operation.</p>
    </caption>
    <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="d-77-00992-fig1" position="float"/>
  </fig>
  <fig position="float" id="fig2">
    <label>Figure 2</label>
    <caption>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> can automatically match UniProt protein isoforms with their encoding DNA. An annotated screenshot of the user interface of <italic toggle="yes">CCD</italic>
<sup>2</sup> is depicted, showing the data retrieved for UniProt entry Q9UJ41 (human RABGEF5). The three existing isoforms of Q9UJ41 are aligned to show their differences. For each isoform, the length and matching coding DNA sequences are shown. DNA cross-references link to the entry in the respective database. Choosing an isoform (by clicking on its radio button) will automatically paste the coding DNA into the DNA sequence window, allowing <italic toggle="yes">CCD</italic>
<sup>2</sup> to use it for primer design. The user can also paste their own DNA sequence, if necessary. For ease of display, some white space in this figure has been trimmed compared with the normal <italic toggle="yes">CCD</italic>
<sup>2</sup> display.</p>
    </caption>
    <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="d-77-00992-fig2" position="float"/>
  </fig>
  <fig position="float" id="fig3">
    <label>Figure 3</label>
    <caption>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> shows the results of many sequence analyses, facilitating the choice of construct boundaries. <italic toggle="yes">CCD</italic>
<sup>2</sup> displays the query protein sequence (for example Q9UJ41 isoform 2) between a multiple sequence alignment (usually derived from Ensembl) and the results of multiple sequence analyses. The vivid colours allow an intuitive, visual interpretation of the results; the vertical alignment allows easy mapping of the analyses to the sequence. The user needs only choose where constructs should start or end by clicking on the query sequence. Green boxes indicate start points, red boxes indicate stop positions and yellow boxes indicate residues that are both a start and a stop point. Note that the truncation point at Ala58 was added for illustrative reasons and is unlikely to be a good truncation boundary, since it cuts in a long helix within a globular domain. Q9UJ41 1–48 is expressed, but does not readily crystallize (data not shown). Prediction legend: e, β-strand; h, helix; t, loop; d, disordered; G, globular; * or @, span of the predicted domain (for example ZnF_A20); &gt;, start position of a known structure; A, acetylation; U, ubiquitination.</p>
    </caption>
    <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="d-77-00992-fig3" position="float"/>
  </fig>
  <fig position="float" id="fig4">
    <label>Figure 4</label>
    <caption>
      <p><italic toggle="yes">CCD</italic><sup>2</sup> offers multiple choices for primer generation. (<italic toggle="yes">a</italic>) <italic toggle="yes">CCD</italic>
<sup>2</sup> is (optionally) integrated with the pETNKI LIC series of vectors, which offer great versatility, since the same construct fits multiple vectors. (<italic toggle="yes">b</italic>) <italic toggle="yes">CCD</italic>
<sup>2</sup> can design primers for conventional restriction cloning. (<italic toggle="yes">c</italic>) <italic toggle="yes">CCD</italic>
<sup>2</sup> allows the choice of any custom overhang for primers. (<italic toggle="yes">d</italic>) <italic toggle="yes">CCD</italic>
<sup>2</sup> automatically generates primers based on user-chosen boundaries on the protein sequence, melting temperature and primer overhangs. Shown here are the primers for start positions 1 and 48 and stop positions 48 and 58 (from Fig. 3<xref rid="fig3" ref-type="fig"> ▸</xref>), with a <italic toggle="yes">T</italic>
<sub>m</sub> of 65°C and overhangs for pETNKI LIC 1.1. The overhang portion of the primer is shown in lower case and the annealing portion is shown in upper case. The primers are named prefix_Fw/Rv_position, where the prefix is chosen by the user (for example RBX5), Fw stands for forward, Rv stands for reverse and ‘position’ is the chosen start/stop position. Primers can be copied and pasted into a spreadsheet or saved in comma-separated value (csv) format. The DNA sequences of the constructs resulting from all possible combinations of primers can also be saved in csv format.</p>
    </caption>
    <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="d-77-00992-fig4" position="float"/>
  </fig>
  <fig position="float" id="fig5">
    <label>Figure 5</label>
    <caption>
      <p>Primer generation and protein-construct analysis. (<italic toggle="yes">a</italic>) The possible constructs resulting from the primers chosen in Fig. 3<xref rid="fig3" ref-type="fig"> ▸</xref> and displayed in Fig. 4<xref rid="fig4" ref-type="fig"> ▸</xref>(<italic toggle="yes">e</italic>) are shown here, together with their predicted molecular wight (MW), isoelectric point (pI) and extinction coefficient ɛ at 280 nm. (<italic toggle="yes">b</italic>) For pETNKI vectors (for example pETNKI 1.1), the tagged and protease-cleaved constructs are also shown, together with their predicted physical properties.</p>
    </caption>
    <graphic xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="d-77-00992-fig5" position="float"/>
  </fig>
</floats-group>
