<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6437997</article-id>
    <article-id pub-id-type="publisher-id">1670</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-019-1670-y</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Alevin efficiently estimates accurate gene abundances from dscRNA-seq data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Srivastava</surname>
          <given-names>Avi</given-names>
        </name>
        <address>
          <email>asrivastava@cs.stonybrook.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Malik</surname>
          <given-names>Laraib</given-names>
        </name>
        <address>
          <email>lmalik@cs.stonybrook.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Smith</surname>
          <given-names>Tom</given-names>
        </name>
        <address>
          <email>tss38@cam.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sudbery</surname>
          <given-names>Ian</given-names>
        </name>
        <address>
          <email>i.sudbery@sheffield.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-8463-1675</contrib-id>
        <name>
          <surname>Patro</surname>
          <given-names>Rob</given-names>
        </name>
        <address>
          <email>rob.patro@cs.stonybrook.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2216 9681</institution-id><institution-id institution-id-type="GRID">grid.36425.36</institution-id><institution>Department of Computer Science, </institution><institution>Stony Brook University, </institution></institution-wrap>Stony Brook, USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000121885934</institution-id><institution-id institution-id-type="GRID">grid.5335.0</institution-id><institution>Cambridge Centre for Proteomics, Department of Biochemistry, </institution><institution>University of Cambridge, </institution></institution-wrap>Cambridge, CB2 1GA UK </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 9262</institution-id><institution-id institution-id-type="GRID">grid.11835.3e</institution-id><institution>Sheffield Institute for Nucleic Acids, Department of Molecular Biology and Biotechnology, </institution><institution>The University of Sheffield, </institution></institution-wrap>Sheffield, S10 2TN UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>3</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>3</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>65</elocation-id>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>11</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>5</day>
        <month>3</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p>We introduce alevin, a fast end-to-end pipeline to process droplet-based single-cell RNA sequencing data, performing cell barcode detection, read mapping, unique molecular identifier (UMI) deduplication, gene count estimation, and cell barcode whitelisting. Alevin’s approach to UMI deduplication considers transcript-level constraints on the molecules from which UMIs may have arisen and accounts for both gene-unique reads and reads that multimap between genes. This addresses the inherent bias in existing tools which discard gene-ambiguous reads and improves the accuracy of gene abundance estimates. Alevin is considerably faster, typically eight times, than existing gene quantification approaches, while also using less memory.</p>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (10.1186/s13059-019-1670-y) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Single-cell RNA-seq</kwd>
      <kwd>UMI deduplication</kwd>
      <kwd>Quantification</kwd>
      <kwd>Cellular barcode</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation (US)</institution>
        </funding-source>
        <award-id>BIO-1564917</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation (US)</institution>
        </funding-source>
        <award-id>CCF-1750472</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation (US)</institution>
        </funding-source>
        <award-id>CNS-1763680</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Institutes of Health (US)</institution>
        </funding-source>
        <award-id>R01HG009937</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Silicon Valley Community Foundation (US)</institution>
        </funding-source>
        <award-id>2018-182752</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>There has been a steady increase in the throughput of single-cell RNA-seq (scRNA-seq) experiments, with droplet-based protocols (dscRNA-seq) [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR3">3</xref>] facilitating experiments assaying tens of thousands of cells in parallel. The three most widely used dscRNA-seq protocols: Drop-seq [<xref ref-type="bibr" rid="CR1">1</xref>], inDrop [<xref ref-type="bibr" rid="CR2">2</xref>], and 10X Chromium [<xref ref-type="bibr" rid="CR3">3</xref>], use two separate barcodes that require appropriate processing for accurate quantification estimation. First, cellular barcodes (CBs) are used to tag each cell with a unique barcode, which enables pooling of cells for sequencing and their subsequent separation in silico. Thus, data processing requires the identification of the true CBs corresponding to distinct cells, and grouping the reads accordingly. Second, identification of PCR duplicates is aided by unique molecular identifiers (UMIs), which tag each unique molecule prior to amplification. Since the mRNA capture rate is only around 5–10% [<xref ref-type="bibr" rid="CR4">4</xref>], many rounds of PCR are typically performed prior to sequencing [<xref ref-type="bibr" rid="CR1">1</xref>]. Appropriately accounting for the barcode information is therefore crucial for accurate estimation of gene expression. Only a minor fraction of the possible CBs present will ultimately tag a cell, and likewise, only a minor fraction of UMIs will tag unique molecules from the same gene. Thus, in each case, the aim is to identify the barcodes used. Unfortunately, both CBs and UMIs are subject to errors that occur during sequencing and amplification [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR5">5</xref>], which makes the accurate deconvolution of this information in silico a non-trivial task. This task is made more difficult by the amplification of background RNA from empty droplets (ambient CBs) or damaged cells.</p>
    <p>Various methods have been proposed to correctly process dscRNA-seq barcodes in an error-aware manner (“whitelisting”) [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR5">5</xref>–<xref ref-type="bibr" rid="CR8">8</xref>], to correct sequencing errors in CBs and UMIs [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR8">8</xref>], to deduplicate UMI tags inferred to be duplicates [<xref ref-type="bibr" rid="CR5">5</xref>], and to obtain cell-level gene quantification estimates [<xref ref-type="bibr" rid="CR9">9</xref>]. Here, we describe an end-to-end quantification pipeline that takes as input sample-demultiplexed FASTQ files and outputs gene-level UMI counts for each cell in the library. We call this unified pipeline alevin, and it overcomes two main shortcomings of traditional pipelines. First, existing techniques for UMI deduplication discard reads that map to more than one gene. In bulk RNA-seq datasets (with paired-end reads and full-length transcript coverage), the proportion of gene-ambiguous reads is generally small (Table <xref rid="Tab1" ref-type="table">1</xref>). Yet, in tagged-end scRNA-seq, this set of gene-ambiguous reads is generally larger and commonly accounts for ∼ 14–23% of the input data (Table <xref rid="Tab2" ref-type="table">2</xref>). This is a result of both the fact that dscRNA-seq protocols, by construction, display a very strong 3 <sup>′</sup> bias and that these protocols yield effectively single-end reads (only one of the sequenced reads contains sequence from the underlying transcript), resulting in a reduced ability to resolve multimapping using a pair of reads from a longer fragment. We show that discarding the multimapping reads can negatively bias the gene-level counts predicted by various methods. Second, existing quantification pipelines combine independent processing algorithms and tools for each step, usually communicating results between pipeline stages via intermediate files on disk, which significantly increases the processing time and memory requirements for the complete analysis. We show that alevin makes use of more reads than other pipelines, that this leads to more accurate quantification of genes, and that alevin does this ∼ 8 times faster and with a lower memory requirement, when compared to existing best practice pipelines for dscRNA-seq analysis.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>The percentage of reads multimapping in bulk datasets from human and mouse</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Species</th><th align="left">Accession number</th><th align="left">Read length</th><th align="left">Percentage</th></tr></thead><tbody><tr><td align="left">Human</td><td align="left">SRR1303990 [<xref ref-type="bibr" rid="CR32">32</xref>]</td><td align="left">101</td><td align="left">7.4</td></tr><tr><td align="left">Human</td><td align="left">SRR1373442 [<xref ref-type="bibr" rid="CR33">33</xref>]</td><td align="left">49</td><td align="left">9.2</td></tr><tr><td align="left">Human</td><td align="left">SRR1644186 [<xref ref-type="bibr" rid="CR34">34</xref>]</td><td align="left">100</td><td align="left">9.2</td></tr><tr><td align="left">Human</td><td align="left">SRR5074291 [<xref ref-type="bibr" rid="CR35">35</xref>]</td><td align="left">150</td><td align="left">7.7</td></tr><tr><td align="left">Mouse</td><td align="left">ERR435943 [<xref ref-type="bibr" rid="CR36">36</xref>]</td><td align="left">75</td><td align="left">23</td></tr><tr><td align="left">Mouse</td><td align="left">SRR3532922 [<xref ref-type="bibr" rid="CR37">37</xref>]</td><td align="left">125</td><td align="left">10.6</td></tr><tr><td align="left">Mouse</td><td align="left">SRR6753775 [<xref ref-type="bibr" rid="CR38">38</xref>]</td><td align="left">150</td><td align="left">5.6</td></tr><tr><td align="left">Mouse</td><td align="left">SRR327047 [<xref ref-type="bibr" rid="CR22">22</xref>]</td><td align="left">120</td><td align="left">5.2</td></tr></tbody></table></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption><p>Percentage of reads multimapping across various scRNA-seq samples, using the alevin mappings</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Sample</th><th align="left">Percentage</th></tr></thead><tbody><tr><td align="left">Human PBMC 4k</td><td align="left">14.2</td></tr><tr><td align="left">Human PBMC 8k</td><td align="left">14.1</td></tr><tr><td align="left">Mouse neurons 900</td><td align="left">21.8</td></tr><tr><td align="left">Mouse neurons 2k</td><td align="left">22.7</td></tr><tr><td align="left">Mouse neurons 9k</td><td align="left">17.2</td></tr></tbody></table></table-wrap>
</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>Alevin overview</title>
      <p>There are several steps in the alevin pipeline that are streamlined to work without the overhead of writing to disk, as highlighted in Fig. <xref rid="Fig1" ref-type="fig">1</xref> (details in the “<xref rid="Sec11" ref-type="sec">Materials and methods</xref>” section). The first step is to identify the CBs that represent properly captured and tagged cells (“whitelisting”). Alevin uses a two-step whitelisting procedure, where the second step takes place at the end of the pipeline. An initial whitelist is produced by finding the “knee” in the cumulative distribution of CB frequencies [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR3">3</xref>]. For each non-whitelisted CB, alevin tries to correct it to a whitelisted CB either by a substitution or by a single insertion or deletion. If no such barcode exists in the set of whitelisted barcodes, the barcode and its associated reads are discarded. The next step is mapping reads from the whitelisted CBs, and the corrected CBs, to a target transcriptome [<xref ref-type="bibr" rid="CR10">10</xref>, <xref ref-type="bibr" rid="CR11">11</xref>], followed by UMI deduplication.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the alevin pipeline. The input to the pipeline are sample-demultiplexed FASTQ files, and there are several steps, outlined here, that are required to process this data and obtain per-cell gene-level quantification estimates. The first step is cell barcode (CB) whitelisting using their frequencies. Barcodes neighboring whitelisted barcodes are then associated with (collapsed into) their whitelisted counterparts. Reads from whitelisted CBs are mapped to the transcriptome, and the UMI-transcript equivalence classes are generated. Each equivalence class contains a set of transcripts, the UMIs that are associated with the reads that map to each class and the read count for each UMI. This information is used to construct a parsimonious UMI graph (PUG) where each node represents a UMI-transcript equivalence class and nodes are connected based on the associated read counts. The UMI deduplication algorithm then attempts to find a minimal set of transcripts that cover the graph (where each consistently labeled connected component—each monochromatic arborescence—is associated with a distinct pre-PCR molecule). In this way, each node is assigned a transcript label and, in turn, an associated gene label. Reads associated with arborescences that could be consistently labeled by multiple genes are divided amongst these possible loci probabilistically based on an expectation-maximization algorithm. Finally, optionally, and if not provided with high-quality CB whitelist externally, an intelligent whitelisting procedure finalizes a list of high-quality CBs using a naïve Bayes classifier to differentiate between high- and low-quality cells</p></caption><graphic xlink:href="13059_2019_1670_Fig1_HTML" id="MO1"/></fig>
</p>
      <p>The process of deduplication requires identifying duplicate reads based on their UMIs and alignment positions along the transcriptome. Alevin uses a novel algorithm for deduplication that begins by constructing parsimonious UMI graphs, that we refer to as a PUGs, using information from the UMI sequences, the UMI counts, and the transcript equivalence classes [<xref ref-type="bibr" rid="CR12">12</xref>]. This PUG is constructed such that each UMI-transcript equivalence class pair is represented by a node and there exists an edge from a node to any node that could have arisen from an amplified molecule due to sampling the underlying transcript (a single pre-PCR molecule) at a different position, or via a PCR or a sequencing error being introduced into the UMI. When the direction of “duplication” during PCR is clear, a directed edge is added; otherwise, a bi-directed edge is placed. An optimal covering of this graph, using the transcripts associated with each node, will give the minimum number of UMIs, along with their counts, required to explain the set of mapped reads. Hence, we have mapped the deduplication problem to that of finding a minimum cardinality covering of a given graph by monochromatic arborescences. Since the decision version of this problem is NP-complete, we propose a greedy algorithm to obtain a minimum cardinality covering of this graph (proof and algorithm detailed under the “<xref rid="Sec11" ref-type="sec">Materials and methods</xref>” section). Each covering, and the associated UMI, is assigned a set of transcript labels of size ≥ 1. After this UMI resolution phase, the remaining ambiguous reads with more than 1 transcript label are assigned based on an expectation-maximization method [<xref ref-type="bibr" rid="CR13">13</xref>].</p>
      <p>Finally, having obtained per-cell gene expression estimates, CB whitelisting is finalized using a naïve Bayes classifier to differentiate between high- and low-quality cells utilizing a set of features derived from the expression estimates and other diagnostic features [<xref ref-type="bibr" rid="CR8">8</xref>]. In addition to the gene-by-cell count matrix, alevin also provides information about the reliability of the abundance estimate computed for each gene in each cell in the form of a <italic>tier</italic> matrix (and, optionally, the summarized variance of bootstrap estimates), which succinctly encodes the quality of the evidence used to derive the corresponding count.</p>
    </sec>
    <sec id="Sec4">
      <title>Impact of discarding multimapping reads</title>
      <p>Before proceeding with a more detailed analysis of the alevin pipeline, it is important to highlight scenarios where existing pipelines would fail using simple examples. These also lead to a better understanding of the alevin UMI deduplication algorithm that intelligently utilizes transcript-level information to obtain accurate gene-level estimates. Since current deduplication methods do not have a mechanism to detect UMIs that map between multiple transcripts of the same gene, they can, in certain cases, incorrectly detect PCR duplicates and, hence, under-estimate the total UMI counts. Some obvious cases can be resolved by considering the read-to-transcript mapping, instead of the read-to-gene mapping, as done in alevin and shown in the left panel in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. The first row (top to bottom) demonstrates a case when we observe the same UMI (U1) being used to tag transcripts from two separate genes (G1 and G2). Here, all methods are able to correctly assess that these instances of U1 are not PCR duplicates. In the center row, we observe the same UMI deriving from two (sequence-distinct) transcripts of the same gene. Here, purely gene-level methods fail to resolve this collision, while alevin’s strategy can. Finally, in the bottom row, we observe a UMI collision within a single transcript. That is, two different copies (molecules) of the same transcript have been tagged with the same UMI. This cannot be resolved by any of the methods. Though possible, the situation presented in the third row is <italic>highly</italic> unlikely, especially given the current sequencing depths.
<fig id="Fig2"><label>Fig. 2</label><caption><p><bold>a</bold> This figure illustrates examples of various classes of UMI collisions and which method(s) would be able to correctly resolve the origin of the multimapping reads in each scenario. These cases are shown top to bottom in order of their likelihood. <bold>b</bold> A simulated example demonstrates how treating equivalence classes individually during UMI deduplication can lead to under-collapsing of UMIs compared to gene-level methods (especially in protocols where the majority of cDNA amplification occurs prior to fragmentation). In the first row, both methods report correctly two UMIs. In the second row, there are two fragmented molecules aligned against two transcripts from the same gene. The alevin deduplication algorithm will attempt to choose the minimum number of transcripts required to explain the read mappings and hence correctly detect the UMI counts. The equivalence class method will over-estimate the gene count</p></caption><graphic xlink:href="13059_2019_1670_Fig2_HTML" id="MO2"/></fig>
</p>
      <p>A second scenario is highlighted in the right panel of Fig. <xref rid="Fig2" ref-type="fig">2</xref> where using the transcript-level equivalence classes lead to over-counting UMIs (discussed further in the “<xref rid="Sec11" ref-type="sec">Materials and methods</xref>” section). In these simulated examples, different types of transcripts and corresponding expression patterns are shown. Reads are randomly sampled from the 3 <sup>′</sup>-end of the annotated transcript(s) according to a realistic fragment length distribution, where exon overlap induces the corresponding equivalence classes of each fragment. The top simulation shows 1 (pre-PCR) molecule expressed for each transcript, identifiable by a unique id (UMI), shown in blue. Due to the disjoint equivalence classes, both methods will correctly assign the gene count. In the bottom simulation, both molecules originate from the second transcript. However, since the equivalence classes are different, the two fragments sharing a UMI will not be collapsed. Specifically, as the rate of splicing (and hence the number of equivalence classes) increases, so too does the number of distinct UMIs reported. In this case, the alevin UMI deduplication algorithm will correctly detect the number of transcripts in order to greedily assign the minimum number of transcripts required to explain the given UMI and mapping information.</p>
      <p>To show that the UMI deduplication algorithm from alevin does, indeed, perform better, we calculate the ratio of the number of reads mapping to each gene and the final count of UMIs as predicted by alevin and Cell Ranger for that gene. When a read maps ambiguously, the count is divided uniformly between the genes. Hence, if a read maps to two genes, the count for each is incremented by 0.5 to get the initial number of reads mapping to these genes. Note that the mappings are also different under each pipeline and that some reads may be inherently ambiguous under one or both mappings. These reads cannot be accurately assigned but, while Cell Ranger discards them, alevin assigns them to a gene via the PUG resolution algorithm, or, in the case that parsimony fails to distinguish a single best gene, proportionally to multiple genes according to the other uniquely mapping reads of the experiment. We divide the genes into 20 bins, based on the number of k-mers shared across genes. We expect the above calculated ratio to remain fairly consistent across these 20 bins, irrespective of the sequence properties of the genes in them. However, we observe in Fig. <xref rid="Fig3" ref-type="fig">3</xref> that the predictions from Cell Ranger are biased for the genes with low sequence uniqueness. This is because a large number of reads from these genes will multimap across genes and will, therefore, be discarded. Hence, simply discarding multimapping reads seems to bias the count estimates for all genes but strongly impacts counts for genes that are expected to have a larger number of multimapping reads due to their high sequence similarity.
<fig id="Fig3"><label>Fig. 3</label><caption><p>The ratio of the final number of deduplicated UMIs against the number of initial reads for both alevin and Cell Ranger (on the human PBMC 4k dataset) stratified by gene-level sequence uniqueness. The genes are divided into 20 equal sized bins, and the <italic>x</italic>-axis represents the maximum gene uniqueness in each bin. The plotted ratio for genes that have high sequence similarity with other genes is strongly biased when using Cell Ranger. This is because Cell Ranger will discard a majority (or all) of the reads originating from these genes since they will most likely map to multiple positions across various genes. Alevin, on the other hand, will attempt to accurately assign these reads to their gene of origin. This plot also demonstrates that alevin does not over-count UMIs, which would be the case if deduplication was done at the level of equivalence classes</p></caption><graphic xlink:href="13059_2019_1670_Fig3_HTML" id="MO3"/></fig>
</p>
    </sec>
    <sec id="Sec5">
      <title>Accuracy analysis on real datasets</title>
      <p>To assess the performance of alevin, both in terms of accuracy in quantification and resource consumption, we ran it on 10X Chromium datasets from human and mouse. We compare our results against the Cell Ranger pipeline [<xref ref-type="bibr" rid="CR3">3</xref>], the dropEst pipeline [<xref ref-type="bibr" rid="CR8">8</xref>]<xref ref-type="fn" rid="Fn1">1</xref>, and a custom pipeline, with an external list of whitelisted CBs, using STAR [<xref ref-type="bibr" rid="CR14">14</xref>], featureCounts [<xref ref-type="bibr" rid="CR15">15</xref>], and UMI-tools [<xref ref-type="bibr" rid="CR5">5</xref>], which we refer to as the <italic>naïve</italic> pipeline. The exact parameters for running each tool are provided under the “<xref rid="Sec11" ref-type="sec">Materials and methods</xref>” section. Note that we run alevin with the —keepDuplicates flag during indexing, which ensures that even when multiple sequence-identical transcripts exist in the annotation, they are not discarded. This is to allow for fair comparison against the other tools, since they do not discard such transcripts, and the existence of such transcripts will impact the number of multimapping reads. However, we do not generally recommended using this flag when running alevin. We observe that the number of final whitelisted cells predicted by alevin are in close proximity to the count of cells predicted by Cell Ranger (and dropEst, since they use the same whitelist), but there are non-trivial differences (Table <xref rid="Tab3" ref-type="table">3</xref>). Comparison on data using the Drop-seq [<xref ref-type="bibr" rid="CR1">1</xref>] protocol is also detailed below. Comparisons against the recently released version 3.0.0 of Cell Ranger are also provided (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1), along with results from another run of alevin using different parameters. Where mentioned, the results are stratified by gene uniqueness which is the proportion of k-mers, of size 31, that are not shared between two or more genes. We note that varying the k-mer size changes the stratification of the genes but does not impact the overall correlation and performance of the methods. We show this for the mouse neuronal 900 dataset (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2). We calculated this for each gene in the human (GENCODE release 27, GRCh38.p10) and mouse (GENCODE release M16, GRCm38.p5) transcriptomes. Note that this was not calculated using the canonicalized k-mers from the genes. This is because the scRNA-seq protocols are stranded and a read, therefore, cannot multimap between two genes if the reverse complement of one of them is shared with the other’s forward sequence.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Number of final whitelisted cellular barcodes output by alevin and Cell Ranger</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Dataset</th><th align="left">Cell Ranger</th><th align="left">Alevin</th><th align="left">No. of reads</th></tr></thead><tbody><tr><td align="left">Human PBMC 4k</td><td align="left">4346</td><td align="left">4341</td><td align="left">379,462,522</td></tr><tr><td align="left">Human PBMC 8k</td><td align="left">8379</td><td align="left">8291</td><td align="left">784,064,148</td></tr><tr><td align="left">Mouse neurons 900</td><td align="left">933</td><td align="left">1291</td><td align="left">52,805,264</td></tr><tr><td align="left">Mouse neurons 2k</td><td align="left">2009</td><td align="left">1881</td><td align="left">147,010,995</td></tr><tr><td align="left">Mouse neurons 9k</td><td align="left">9116</td><td align="left">8519</td><td align="left">383,366,284</td></tr></tbody></table></table-wrap>
</p>
    </sec>
    <sec id="Sec6">
      <title>Accuracy of estimates against bulk data</title>
      <p>To test the accuracy of the quantification estimates, we aggregate the estimates from each of the single-cell quantification tools (summing across all cells) and calculate the correlation with estimates predicted by RSEM [<xref ref-type="bibr" rid="CR16">16</xref>] (paired with Bowtie2 [<xref ref-type="bibr" rid="CR17">17</xref>] alignments) using bulk datasets from the same cell types. While the differences between single-cell and bulk sequencing protocols and techniques are significant, we believe that, in the absence of established benchmarks, the correlation between them is a reasonable indicator of the accuracy of each quantification method. Estimates from alevin, when summed across all cells, have a higher Spearman rank correlation than the Cell Ranger, dropEst, and <italic>naïve</italic> pipelines (Table <xref rid="Tab4" ref-type="table">4</xref>). Specifically, we posit that the methods demonstrate a strong and persistent bias against groups of two or more genes that exhibit high sequence similarity. That is, the more sequence-similar a gene is to another gene, the less likely these pipelines are able to assign reads to it—in the extreme case, some genes essentially become <italic>invisible</italic> due to the in silico biases of these approaches (a similar effect was reported by Robert and Watson [<xref ref-type="bibr" rid="CR18">18</xref>] in bulk RNA-seq data when simple read-counting approaches are used for quantification, where they highlight that many such genes are relevant to human disease).
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Average Spearman correlation of gene-level estimates from each method for the single-cell datasets against bulk data from the same cell types (four for human, three for mouse)</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Dataset</th><th align="left">Alevin</th><th align="left">Cell Ranger</th><th align="left"><italic>Naïve</italic></th><th align="left">DropEst</th></tr></thead><tbody><tr><td align="left">Human PBMC 4k</td><td align="left">0.813</td><td align="left">0.78</td><td align="left">0.747</td><td align="left">0.783</td></tr><tr><td align="left">Human PBMC 8k</td><td align="left">0.81</td><td align="left">0.772</td><td align="left">0.74</td><td align="left">0.776</td></tr><tr><td align="left">Mouse neurons 900</td><td align="left">0.812</td><td align="left">0.773</td><td align="left">0.761</td><td align="left">0.779</td></tr><tr><td align="left">Mouse neurons 2k</td><td align="left">0.822</td><td align="left">0.781</td><td align="left">0.767</td><td align="left">0.784</td></tr><tr><td align="left">Mouse neurons 9k</td><td align="left">0.831</td><td align="left">0.796</td><td align="left">0.776</td><td align="left">0.803</td></tr></tbody></table></table-wrap>
</p>
      <p>To further explore this hypothesis, we stratified the accuracy of the different methods by the uniqueness of the underlying genes (Fig. <xref rid="Fig4" ref-type="fig">4</xref>a, Table <xref rid="Tab5" ref-type="table">5</xref>). The bar plots at the top of each subfigure represent the tiers of the genes as assigned by alevin. Tier 1 is the set of genes where all the reads are uniquely mapping. Tier 2 is genes that have ambiguously mapping reads, but connected to unique read evidence as well, which can be used by the EM to resolve the multimapping reads. Tier 3 is the genes that have no unique evidence, and the read counts are, therefore, distributed between these genes according to an uninformative prior. In agreement with the hypothesized relationship, we observed that the higher accuracy of alevin is particularly large for genes with a lower proportion of unique k-mers, which tend to belong to tier 2 or 3. On genes from tier 1, all the methods perform similarly. Thus, the approach of Cell Ranger, dropEst, and <italic>naïve</italic>, which discard reads mapping to multiple genes, results in systematic inaccuracies in genes which are insufficiently unique (i.e., which share a high degree of sequence homology with some other gene).
<fig id="Fig4"><label>Fig. 4</label><caption><p><bold>a</bold> The Spearman correlation between quantification estimates (summed across all cells) from different scRNA-seq methods against bulk data from the mouse neuronal and human PBMC datasets, stratified by gene sequence uniqueness. The bar plot on the top of each figure shows the percentage of genes in each bin that have unique read evidence. Tier 1 is the set of genes with only uniquely mapping reads. Tier 2 is genes that have ambiguously mapping reads, but are connected to unique read evidence that can be used to resolve the multimapping reads. Tier 3 is genes that are completely ambiguous. Note that all methods perform very similarly on genes from tier 1, but the performance of alevin is much better for the other tiers. <bold>b</bold> Comparison of various methods used to process Drop-seq data from mouse retina with 4k cells. The Spearman correlation is calculated against bulk quantification estimates predicted using Bowtie2 and RSEM on data from the same cell type</p></caption><graphic xlink:href="13059_2019_1670_Fig4_HTML" id="MO4"/></fig><table-wrap id="Tab5"><label>Table 5</label><caption><p>Number of genes in each bin, when stratified by gene uniqueness</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Bin number</th><th align="left">Human</th><th align="left">Mouse</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">3155</td><td align="left">4786</td></tr><tr><td align="left">2</td><td align="left">894</td><td align="left">1089</td></tr><tr><td align="left">3</td><td align="left">853</td><td align="left">945</td></tr><tr><td align="left">4</td><td align="left">822</td><td align="left">1061</td></tr><tr><td align="left">5</td><td align="left">962</td><td align="left">1104</td></tr><tr><td align="left">6</td><td align="left">1174</td><td align="left">1318</td></tr><tr><td align="left">7</td><td align="left">1565</td><td align="left">1476</td></tr><tr><td align="left">8</td><td align="left">2546</td><td align="left">1877</td></tr><tr><td align="left">9</td><td align="left">4695</td><td align="left">2960</td></tr><tr><td align="left">10</td><td align="left">41622</td><td align="left">36763</td></tr></tbody></table></table-wrap>
</p>
      <p>This bias could impact the expression estimates of important marker genes, such as the genes for the hemoglobin alpha and beta proteins in the mouse neurons [<xref ref-type="bibr" rid="CR19">19</xref>, <xref ref-type="bibr" rid="CR20">20</xref>]. Due to their lower uniqueness ratio, Cell Ranger appears to exhibit a bias against such genes, and their expression, as predicted by alevin, is systematically higher (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Anecdotally, we also noticed that, in the human PBMC data, alevin sometimes predicts the expression of even relatively sequence-unique genes, like YIPF6, that we expect to be expressed in a subpopulation of these cells (monocytes) [<xref ref-type="bibr" rid="CR21">21</xref>], but which exhibit almost no expression as predicted by Cell Ranger (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). Because the bias against sequence-ambiguous genes is fundamental and sequence-specific, it cannot be easily remedied with more data, but instead requires the development of fundamentally novel algorithms, like alevin, that account for, rather than discard, reads mapping to such genes. Hence, alevin not only quantifies a greater proportion of the sequenced data than existing methods, but also does so more accurately and in a less biased manner.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Expression of the Hba and Hbb genes as predicted by alevin and Cell Ranger in mouse neuronal cells. The title of each plot is the name of the gene and its k-mer uniqueness ratio. Note that Cell Ranger systematically under-estimates the expression of these genes compared to alevin. This bias is greater for the Hba genes, which have a lower uniqueness ratio, and therefore, a greater number of multimapping reads</p></caption><graphic xlink:href="13059_2019_1670_Fig5_HTML" id="MO5"/></fig><fig id="Fig6"><label>Fig. 6</label><caption><p>Expression of the YIPF6 gene (which has a high uniqueness ratio) as predicted by alevin and Cell Ranger in the PBMC8k data</p></caption><graphic xlink:href="13059_2019_1670_Fig6_HTML" id="MO6"/></fig>
</p>
    </sec>
    <sec id="Sec7">
      <title>Accuracy of estimates using combined genomes</title>
      <p>To further assess the accuracy of quantification estimates, in the absence of any established read-level simulation protocol, we performed an experiment aimed to introduce controlled gene-level multimapping to analyze its effect on the different methods. We quantified the mouse neuronal 900 sequencing dataset using both Cell Ranger and alevin, and each quantification was performed under two separate references: the mouse genome and the combined human and mouse genome. Noting that the reads in this experiment originate from mouse, we desire that the quantifications returned by a method deviate as little as possible under the two different reference configurations. Under ideal conditions, for example, the gene counts under both references should be the same. However, combining the mouse and human references increases the gene sequence ambiguity, due to the presence of homologous genes, resulting in misestimation.</p>
      <p>We show in Fig. <xref rid="Fig7" ref-type="fig">7</xref>a that the distance under the two references is higher for the Cell Ranger estimates than for the alevin estimates. Due to the increased homology among genes between the references, the ratio of reads mapping to multiple genes increases, resulting in more information being discarded by Cell Ranger. The total number of UMIs accounted for by Cell Ranger decreases by ∼ 20,000, in comparison, the number of distinct UMIs predicted by alevin decreased by ∼ 1500, which one might attribute to changes in the underlying PUGs as a result of mapping ∼ 0.01<italic>%</italic> more reads. The number of human genes expressed (non-zero UMI count) under the joint reference is 624 for Cell Ranger and 600 for alevin, out of a total of 58,288 genes. Note that in both cases, these genes account for &lt; 0.05<italic>%</italic> of the total UMI count predicted by each method.
<fig id="Fig7"><label>Fig. 7</label><caption><p><bold>a</bold> Histogram of the <italic>ℓ</italic><sub>1</sub> distance between the quantification estimates of tools on the mouse neuron 900 data, when run using different references for quantification (just mouse versus mouse and human). Results are presented for both alevin and Cell Ranger. Since, in reality, all reads are expected to originate from mouse, deviations from quantifications under the only mouse reference signify misestimation—often due to the introduction of sequence-similar genes in the human genome. Alevin is able to resolve this ambiguity well, while Cell Ranger instead discards such reads, leading to different quantification estimates under the two references. <bold>b</bold> Counts for the topmost genes that have high sequence homology between human and mouse but are sequence unique in the mouse reference. The title of each plot is the gene name along with the sequence uniqueness ratio under just the mouse reference and under the joint reference. Hence, the Cell Ranger counts decrease across cells when the gene uniqueness decreases. Note that these genes were filtered such that they have &gt; 100 count difference for either alevin or Cell Ranger when summed across all cells</p></caption><graphic xlink:href="13059_2019_1670_Fig7_HTML" id="MO7"/></fig>
</p>
      <p>To provide a statistical analysis of the differences observed for the methods under the two different reference sequences, we performed the following test. We sample, randomly, 1000 sets of 100 cells from the entire experiment, and for each sample, we compute the sum of absolute difference between the predictions of each tool under both references. We compare the resulting distribution of differences for Cell Ranger with that of alevin and find that the differences in alevin’s quantifications are smaller than those of Cell Ranger (<italic>p</italic>&lt;0.001, Mann-Whitney-Wilcoxon test). These distributions are plotted in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3.</p>
      <p>We also show in Fig. <xref rid="Fig7" ref-type="fig">7</xref>b that, for the genes that have sequence similarity in the joint reference but are unique in the mouse genome, Cell Ranger expression estimates vary much more than those from alevin.</p>
    </sec>
    <sec id="Sec8">
      <title>Time and memory efficiency</title>
      <p>The time and memory requirements for alevin are significantly less than those for the existing pipelines (Fig. <xref rid="Fig8" ref-type="fig">8</xref>), where all methods were run using 16 threads. DropEst is excluded from the figure since it consumes the BAM file output by Cell Ranger and is not a complete end-to-end pipeline. For the smallest dataset (900 mouse neuronal cells), alevin was ∼ 5 times faster than <italic>naïve</italic> and ∼ 21 times faster than Cell Ranger. This difference increases further as the size of the dataset increases, since the performance of alevin scales better than the other tools. Hence, where alevin took only 70 min to process the human PBMC 8k dataset, Cell Ranger took 22 h and <italic>naïve</italic> took 11 h. On this dataset, dropEst took ∼ 2 hours, after Cell Ranger was used to process and align the reads. In terms of memory, alevin used only ∼ 13 GB on the human PBMC 8k cell dataset, whereas <italic>naïve</italic> took ∼ 20 GB and dropEst took ∼ 32 GB. For the mouse neuronal 9k cell dataset, alevin used ∼ 14 GB, <italic>naïve</italic> ∼ 18 GB, and dropEst ∼ 52 GB. In both cases, Cell Ranger required a minimum of 16 GB just for STAR indexing. We note that Cell Ranger allows the user to specify a maximum resident memory limit, and we ran Cell Ranger allowing it to allocate up to 120 GB so that the extra runtime was not due to limitations in available memory. We also note that for dropEst, we were not able to run the Bayesian collision correction algorithm implemented in dropEstr; however, given the relatively long UMI tags employed in chromium V2 chemistry compared to inDrop, one would expect the effect of this extra phase to be limited anyway.
<fig id="Fig8"><label>Fig. 8</label><caption><p>The time and memory performance of the different pipelines on the five datasets. Alevin requires significantly less time and memory than the other pipelines. Note that for Cell Ranger, the memory plotted is the lower bound, which is the size of the index and the actual memory usage can be much higher</p></caption><graphic xlink:href="13059_2019_1670_Fig8_HTML" id="MO8"/></fig>
</p>
      <p>We observe that the optimal number of threads for running alevin is 10–12, where the maximum gain in terms of time and memory is achieved. Alevin is designed to make efficient use of multiple threads, though the optimal number of threads can depend on many factors, such as the speed of the underlying disk and the size of the raw input and output matrix to be written. While runtime decreases with the number of threads used, the memory profile changes very little as threads are added.</p>
    </sec>
    <sec id="Sec9">
      <title>Comparison on Drop-seq data</title>
      <p>In addition to the data generated using the 10X Chromium protocol [<xref ref-type="bibr" rid="CR3">3</xref>], we also tested alevin on mouse retina data generated using the Drop-seq protocol [<xref ref-type="bibr" rid="CR1">1</xref>]. We compare alevin against UMI-tools (the <italic>naïve</italic> pipeline from the main paper), dropEst, and dropseq_utils [<xref ref-type="bibr" rid="CR1">1</xref>]—the processing pipeline originally used by Macosko et al. [<xref ref-type="bibr" rid="CR1">1</xref>]. Again, we compared the correlation of gene abundances, summed across all cells and as produced by the different methods with the estimates from bulk data [<xref ref-type="bibr" rid="CR22">22</xref>] in the same tissue (Fig. <xref rid="Fig4" ref-type="fig">4</xref>b). We observe a similar trend across gene-uniqueness bins as was observed for the 10x datasets. Alevin demonstrates higher correlation, overall, with the bulk data, and the improvements are particularly substantial for genes that are not sequence-unique. Further, alevin is much faster and takes less memory than the other pipelines. Alevin took 17 min to process this data, which is much faster than the UMI-tools-based pipeline (∼ 3.2 h), the dropseq_utils-based pipeline (∼ 15.5 h), and even dropEst (25 min). The memory usage of alevin was 6.5 GB, which is less than half the memory usage of the closest tool (UMI-tools at 17.72 GB). The dropseq_utils-based pipeline took 25.07 GB while dropEst used 10.8 GB, which does not include the memory consumed by Cell Ranger to index the reference and align reads against it to produce the BAM file. While alevin has been primarily designed and tested with 10x data in mind, the method is generic for droplet-based tagged-end protocols, and we observe that it also seems to perform well on Drop-seq data.</p>
    </sec>
  </sec>
  <sec id="Sec10" sec-type="conclusion">
    <title>Conclusion</title>
    <p>We present a new end-to-end pipeline for performing gene-level quantification from dscRNA-seq that is accurate, efficient, and easy to use. Our method, alevin, relies on a new formulation of the UMI resolution problem that both accounts for transcript-level constraints on how UMIs may have been generated and that allows resolving the potential origin of a UMI even when the corresponding reads map between multiple genes.</p>
    <p>Our analyses demonstrate that, compared to Cell Ranger (and <italic>naïve</italic>), alevin achieves a higher accuracy, in part because of considering a substantially larger number of reads. Further, alevin is considerably faster and uses less memory than these other approaches. These speed improvements are due to a combination of the fact that alevin uses bespoke algorithms for CB and UMI edit distance computation, read mapping, and other tasks and is a unified tool for performing all of the initial processing steps, obviating the need to read and write large intermediate files on disk. These optimizations make it possible to efficiently process dscRNA-seq datasets on commodity computers reducing computational barriers to processing and re-processing of such data.</p>
    <p>In the future, we hope to further improve the benchmarking of accuracy for single-cell quantification and barcode whitelisting approaches, as the lack of standard benchmarks makes the assessment of new methods difficult. We also hope to explore alternative cell barcode whitelisting and PUG resolution strategies—for example, adopting a generative model for PCR and sequencing error and seeking a maximum likelihood rather than maximum parsimony-based resolution of the PUGs.</p>
    <p>Alevin is written in C++14 and is integrated into the salmon tool available at <ext-link ext-link-type="uri" xlink:href="https://github.com/COMBINE-lab/salmon">https://github.com/COMBINE-lab/salmon</ext-link>.</p>
  </sec>
  <sec id="Sec11">
    <title>Materials and methods</title>
    <sec id="Sec12">
      <title>Initial whitelisting and barcode correction</title>
      <p>After standard quality control procedures, the first step of existing single-cell RNA-seq processing pipelines [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR3">3</xref>] is to extract cell barcode and UMI sequences and to add this information to the header of the sequenced read or save it in temporary files. This approach, while versatile, can create many intermediate files on disk for further processing, which can be time- and space-consuming.</p>
      <p>Alevin begins with sample-demultiplexed FASTQ files. It quickly iterates over the file containing the barcode reads and tallies the frequency of all observed barcodes (regardless of putative errors). We denote the collection of all observed barcodes as <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {B}$\end{document}</tex-math><mml:math id="M2"><mml:mi mathvariant="script">ℬ</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq1.gif"/></alternatives></inline-formula>. Whitelisting involves determining which of these barcodes may have derived from a valid cell. When the data has been previously processed by another pipeline, a whitelist may already be available for alevin to use. When a whitelist is not available, alevin uses a two-step procedure for calculating one. An initial draft whitelist is produced using the procedure explained below, to select CBs for initial quantification. This list is refined after per-cell-level quantification estimates are available (see “<xref rid="Sec16" ref-type="sec">Final whitelisting (optional)</xref>” section) to produce a final whitelist.</p>
      <p>To generate a putative whitelist, we follow the approach taken by other dscRNA-seq pipelines by analyzing the cumulative distribution of barcode frequencies and finding the knee in this curve [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. Those barcodes occurring after the knee constitute the whitelist, denoted <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {W}$\end{document}</tex-math><mml:math id="M4"><mml:mi mathvariant="script">W</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq2.gif"/></alternatives></inline-formula>. We use a Gaussian kernel to estimate the probability density function for the barcode frequency and select the local minimum corresponding to the “knee.” In the case of a user-provided whitelist, the provided <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {W}$\end{document}</tex-math><mml:math id="M6"><mml:mi mathvariant="script">W</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq3.gif"/></alternatives></inline-formula> is used as the fixed final whitelist.</p>
      <p>Next, we consider those barcodes in <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {E} = \mathcal {B} \setminus \mathcal {W}$\end{document}</tex-math><mml:math id="M8"><mml:mi mathvariant="script">E</mml:mi><mml:mo>=</mml:mo><mml:mi mathvariant="script">ℬ</mml:mi><mml:mo>∖</mml:mo><mml:mi mathvariant="script">W</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq4.gif"/></alternatives></inline-formula> to determine, for each non-whitelisted barcode, whether (a) its corresponding reads should be assigned to some barcode in <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {W}$\end{document}</tex-math><mml:math id="M10"><mml:mi mathvariant="script">W</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq5.gif"/></alternatives></inline-formula> or (b) this barcode represents some other type of noise or error (e.g., ambient RNA, lysed cell) and its associated reads should be discarded. The approach of alevin is to determine, for each barcode <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$h_{j} \in \mathcal {E}$\end{document}</tex-math><mml:math id="M12"><mml:msub><mml:mrow><mml:mi>h</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:mi mathvariant="script">E</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq6.gif"/></alternatives></inline-formula>, the set of whitelisted barcodes with which <italic>h</italic><sub><italic>j</italic></sub> could be associated. We call these the putative labels of <italic>h</italic><sub><italic>j</italic></sub>—denoted as <italic>ℓ</italic>(<italic>h</italic><sub><italic>j</italic></sub>). Following the criteria used by previous pipelines [<xref ref-type="bibr" rid="CR1">1</xref>], we consider a whitelisted barcode <italic>w</italic><sub><italic>i</italic></sub> to be a putative label for some erroneous barcode <italic>h</italic><sub><italic>j</italic></sub> if <italic>h</italic><sub><italic>j</italic></sub> can be obtained from <italic>w</italic><sub><italic>i</italic></sub> by a substitution, by a single insertion (and clipping of the terminal base) or by a single deletion (and the addition of a valid nucleotide to the end of <italic>h</italic><sub><italic>j</italic></sub>). Rather than applying traditional algorithms for computing the all-versus-all edit-distances directly, and then filtering for such occurrences, we exploit the fact that barcodes are relatively short. Therefore, we can explicitly iterate over all of the valid <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$w_{i} \in \mathcal {W}$\end{document}</tex-math><mml:math id="M14"><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:mi mathvariant="script">W</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq7.gif"/></alternatives></inline-formula> and enumerate all erroneous barcodes for which this might be a putative label. Let <italic>Q</italic>(<italic>w</italic><sub><italic>i</italic></sub>,<italic>H</italic>) be the set of barcodes from <inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {E}$\end{document}</tex-math><mml:math id="M16"><mml:mi mathvariant="script">E</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq8.gif"/></alternatives></inline-formula> that adhere to the conditions defined above; then, for each <italic>h</italic><sub><italic>j</italic></sub>∈<italic>Q</italic>(<italic>w</italic><sub><italic>i</italic></sub>,<italic>H</italic>), we append <italic>w</italic><sub><italic>i</italic></sub> as putative label for the erroneous barcode <italic>h</italic><sub><italic>j</italic></sub>.</p>
      <p>Once all whitelisted barcodes have been processed, each element in <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {E}$\end{document}</tex-math><mml:math id="M18"><mml:mi mathvariant="script">E</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq9.gif"/></alternatives></inline-formula> will have zero or more putative labels. If an erroneous barcode has more than one putative label, we prioritize substitutions over insertions and deletions. If this does not yield a single label, ties are broken randomly. If no candidate is discovered for an erroneous barcode, then this barcode is considered “noise,” and its associated reads are simply discarded. Note that, although adopted from existing methods, the alevin initial whitelisting process is designed to output a larger number of CBs.</p>
    </sec>
    <sec id="Sec13">
      <title>Mapping reads and UMI deduplication</title>
      <p>After labeling each barcode, either as noise or as belonging to some whitelisted barcode, alevin maps the sequenced reads to the target transcriptome [<xref ref-type="bibr" rid="CR10">10</xref>, <xref ref-type="bibr" rid="CR11">11</xref>]. Reads mapping to a given transcript (or multimapping to a set of transcripts) are categorized hierarchically, first based on the label of their corresponding cellular barcode, and then based on their unique molecular identifier (UMI). At this point, it is then possible to deduplicate reads based on their mapping and UMI information.</p>
      <p>The process of read deduplication involves the identification of duplicate reads based on their UMIs and alignment positions. Most amplification occurs prior to fragmentation in library construction for 10X Chromium protocols [<xref ref-type="bibr" rid="CR23">23</xref>]. Because of this, the alignment position of a given read is not straightforward to interpret with respect to deduplication, as the same initial unique molecule may yield reads with different alignment coordinates<xref ref-type="fn" rid="Fn2">2</xref>. UMIs can also contain sequence errors. Thus, achieving the correct deduplication requires proper consideration of the available positional information and possible errors.</p>
      <p>Our approach for handling sequencing errors and PCR errors in the UMIs is motivated by “directional” approach introduced in UMI-tools [<xref ref-type="bibr" rid="CR5">5</xref>]. Let <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {U}_{i}$\end{document}</tex-math><mml:math id="M20"><mml:msub><mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq10.gif"/></alternatives></inline-formula> be the set of UMIs observed for gene <italic>i</italic>. A specific UMI <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$u_{n} \in \mathcal {U}_{i}$\end{document}</tex-math><mml:math id="M22"><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq11.gif"/></alternatives></inline-formula>, observed <italic>c</italic><sub><italic>n</italic></sub> times in gene <italic>i</italic>, is considered to have arisen by PCR or sequence error if there exists <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$u_{m} \in \mathcal {U}_{i}$\end{document}</tex-math><mml:math id="M24"><mml:msub><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">U</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq12.gif"/></alternatives></inline-formula> such that <italic>d</italic>(<italic>u</italic><sub><italic>n</italic></sub>,<italic>u</italic><sub><italic>m</italic></sub>)=1 and <italic>c</italic><sub><italic>m</italic></sub>&gt;2<italic>c</italic><sub><italic>n</italic></sub>+1, where <italic>d</italic>(·,·) is the Hamming distance. Using this information, only UMIs that could not have arisen as an error under this model are retained. However, this approach may over-collapse UMIs if there exists evidence that similar UMIs (i.e., UMIs at a Hamming distance of 1 or less) may have arisen from different transcripts and, hence, distinct molecules. Moreover, this approach first discards reads that multimap to more than one read, causing it to lose a substantial amount of information before even beginning the UMI deduplication process.</p>
      <p>As previously proposed to address the problem of cell clustering [<xref ref-type="bibr" rid="CR24">24</xref>], an equivalence class [<xref ref-type="bibr" rid="CR12">12</xref>, <xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR25">25</xref>–<xref ref-type="bibr" rid="CR29">29</xref>] encodes some positional information, by means of encoding the set of transcripts to which a fragment is mapped. Specifically, these equivalence classes can encode constraints about which UMIs may have arisen from the same molecule and which UMIs—even if mapping to the same gene—must have derived from distinct pre-PCR molecules. This can be used to avoid over-collapsing UMI tags that are likely to result from different molecules by considering UMIs as distinct for each equivalence class. However, in its simplest form, this deduplication method is prone to reporting a considerably higher number of distinct UMIs than likely exist. This is because reads from different positions along a single transcript, and tagged with the same UMI, can give rise to different equivalence classes, so that membership in a different equivalence class is not, alone, sufficient evidence that a read must have derived from a distinct (pre-PCR) molecule. This deters us from directly using such a UMI-collapsing strategy for deriving gene-level counts, though it may be helpful for other types of analyses.</p>
      <p>Given the shortcomings of both approaches to UMI deduplication, we propose, instead, a novel UMI resolution algorithm that takes into account transcript-level evidence when it exists, while simultaneously avoiding the problem of under-collapsing that can occur if equivalence classes are treated independently for the purposes of UMI deduplication.</p>
    </sec>
    <sec id="Sec14">
      <title>UMI resolution algorithm</title>
      <p>A potential drawback of the gene-level deduplication is that it discards transcript-level evidence. In this case, such evidence is encoded in the equivalence classes. Thus, gene-level deduplication provides a conservative approach and assumes that it is highly unlikely for molecules that are distinct transcripts of the same gene to be tagged with a similar UMI (within an edit distance of 1 from another UMI from the same gene). However, entirely discarding transcript-level information will mask true UMI collisions to some degree, even when there is direct evidence that similar UMIs must have arisen from distinct transcripts. For example, if similar UMIs appear in transcript-disjoint equivalence classes (even if all of the transcripts labeling both classes belong to the same gene), then they <italic>cannot</italic> have arisen from the same pre-PCR molecule. Accounting for such cases is especially true when using an error-aware deduplication approach and as sequencing depth increases.</p>
      <p>To perform UMI deduplication, alevin begins by constructing a <italic>p</italic>arsimonious <italic>U</italic>MI <italic>g</italic>raph (PUG), <italic>G</italic>=(<italic>V</italic>,<italic>E</italic>), for each cell, where each <italic>v</italic><sub><italic>i</italic></sub>=(<italic>u</italic>,<italic>T</italic><sub><italic>i</italic></sub>) is a tuple consisting of UMI sequence <italic>u</italic> and a set of transcripts <inline-formula id="IEq13"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$T_{i} = \{t_{i_{1}}, t_{i_{2}}, \dots, t_{i_{m}}\}$\end{document}</tex-math><mml:math id="M26"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>}</mml:mo></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq13.gif"/></alternatives></inline-formula>. There is a count associated with each vertex such that <italic>c</italic>(<italic>v</italic><sub><italic>i</italic></sub>)=<italic>c</italic><sub><italic>i</italic></sub> is the number of times this UMI equivalence class pair is observed. <italic>G</italic> contains two types of edges: directed and bi-directed. There exists a directed edge between every pair of vertices (<italic>v</italic><sub><italic>i</italic></sub>,<italic>v</italic><sub><italic>j</italic></sub>) for which <italic>c</italic><sub><italic>i</italic></sub>&gt;2<italic>c</italic><sub><italic>j</italic></sub>−1, |<italic>T</italic><sub><italic>i</italic></sub>∩<italic>T</italic><sub><italic>j</italic></sub>|&gt;0, and <italic>d</italic>(umi(<italic>v</italic><sub><italic>i</italic></sub>),umi(<italic>v</italic><sub><italic>j</italic></sub>))=1. For every pair of vertices for which there is no directed edge, there exists a bi-directed edge if <italic>d</italic>(umi(<italic>v</italic><sub><italic>k</italic></sub>),umi(<italic>v</italic><sub><italic>ℓ</italic></sub>))≤1, and |<italic>T</italic><sub><italic>k</italic></sub>∩<italic>T</italic><sub><italic>ℓ</italic></sub>|&gt;0. Once the edges of this PUG have been formed, we no longer need to consider the counts of the individual UMI equivalence class pairs.</p>
      <p>Before proceeding further, we introduce the notion of <italic>monochromatic arborescences</italic> in terms of this graph <italic>G</italic>. We can refer to the transcript labels of each node as the potential colors of the node. Since our graph is directed, an arborescence would be a rooted tree in the graph, where each node within the arborescence has exactly one directed path reaching it from a determined root node, using edges in the arborescence. Given these definitions, a monochromatic arborescence is one where the set of colors of the nodes within the arborescence have a non-null intersection and, hence, the arborescence can be labeled using a single color. Then, for a given connected component in the graph, we can find different sets of monochromatic arborescences and, for our graph, each one represents a single pre-PCR molecule.</p>
      <p>However, motivated by the principle of parsimony, we wish to explain the observed vertices (i.e., UMI, equivalence class pairs) via the minimum possible number of pre-PCR molecules that are consistent with the observed data. Hence, we pose this problem in the following manner. Given a graph <italic>G</italic>, we seek a <italic>minimum cardinality covering by monochromatic arborescences</italic>. In other words, we wish to cover <italic>G</italic> by a collection of vertex-disjoint arborescences, where each arborescence is labeled consistently by a set of transcripts, which are the pre-PCR molecule types from which its reads and UMIs are posited to have arisen. Further, we wish to cover all vertices in <italic>G</italic> using the minimum possible number of arborescences. Here, the graph <italic>G</italic> defines which UMI, read pairs can potentially be explained in terms of others (i.e., which vertices may have arisen from the same molecule by virtue of different fragmentation positions or which vertices may have given rise to other through PCR duplication with error). The decision version of this problem is NP-complete, as shown below and so, alevin employs a greedy algorithm in practice to obtain a valid, though not necessarily minimum, covering of <italic>G</italic>. We note that while numerous covering and packing problems related to arborescences have appeared in the literature (Bernáth and Pap [<xref ref-type="bibr" rid="CR30">30</xref>] and references therein), to the best of our knowledge, the following problem formulation is new.</p>
      <sec id="d29e1938">
        <title>
          <bold>Theorem 1</bold>
        </title>
        <p>Minimum cardinality covering by monochromatic arborescences is NP-complete.</p>
      </sec>
      <sec id="d29e1944">
        <title>
          <italic>Proof</italic>
        </title>
        <p>Consider a reduction from dominating set. Let (<italic>G</italic>,<italic>k</italic>) be an instance of the dominating set problem where <italic>G</italic>=(<italic>V</italic>,<italic>E</italic>) is an undirected graph. Then, we can construct a new graph <italic>G</italic><sup>′</sup>=(<italic>V</italic>,<italic>E</italic><sup>′</sup>) such that <italic>G</italic><sup>′</sup> has a minimum cardinality covering by ≤<italic>k</italic> monochromatic arborescences if and only if <italic>G</italic> has a minimum dominating set of size ≤<italic>k</italic>. The color of an arborescence is chosen from among the intersection of the set of labels for each node it covers and, hence, is non-null. Construct <italic>G</italic><sup>′</sup> as follows. Convert each edge in <italic>G</italic> to a bi-directed edge in <italic>G</italic><sup>′</sup> and label each node with the union of its own label and the labels of all nodes to which it is directly connected in <italic>G</italic>. In other words, <italic>T</italic><sub><italic>i</italic></sub>={<italic>i</italic>}∪{<italic>j</italic>∣{<italic>i</italic>,<italic>j</italic>}∈<italic>E</italic>}.</p>
        <p>→ If <italic>G</italic> has a minimum dominating set of size <italic>k</italic>, then <italic>G</italic><sup>′</sup> has a minimum cardinality covering by <italic>k</italic> monochromatic arborescences. Every node in the original graph <italic>G</italic> has to be connected to at least one node in the dominating set. Due to the manner in which node labels are assigned in <italic>G</italic><sup>′</sup>, this means that every node in <italic>G</italic><sup>′</sup> can be covered by an arborescence starting from a dominating set node; this arborescence is colored by the label assigned to that node. Since there are <italic>k</italic> nodes in the dominating set, there will be <italic>k</italic> monochromatic arborescences in <italic>G</italic><sup>′</sup>, and since the <italic>k</italic> nodes in <italic>G</italic> dominate <italic>V</italic>, the arborescences will cover all of <italic>V</italic>.</p>
        <p>← If <italic>G</italic><sup>′</sup> has a covering of <italic>k</italic> monochromatic arborescences, then <italic>G</italic> has a dominating set of size <italic>k</italic>. An arborescence is assigned a color, let us say <italic>ℓ</italic><sub><italic>i</italic></sub>, from the intersection of the labels of the nodes it covers. Hence, the node with label <italic>ℓ</italic><sub><italic>i</italic></sub> in <italic>G</italic><sup>′</sup> has to be one of the nodes covered by this arborescence. That node connects to all the nodes in this arborescence; otherwise, they would not have shared this label. Let these nodes be selected as the dominating set of <italic>G</italic>. Hence, if there are <italic>k</italic> arborescences, there are <italic>k</italic> such nodes that are part of the dominating set, and because the arborescences cover all of <italic>G</italic><sup>′</sup>, the selected nodes, likewise, dominate <italic>G</italic>. □</p>
        <p>The algorithm employed by alevin works as follows. First, we note that weakly connected components of <italic>G</italic> can be processed independently, and so, we describe here the procedure used to resolve UMIs within a single weakly connected component—this is repeated for all such components. Let <italic>C</italic>=(<italic>V</italic><sub><italic>C</italic></sub>,<italic>E</italic><sub><italic>C</italic></sub>) denote our current component. We perform a breadth-first search starting from each vertex <italic>v</italic><sub><italic>i</italic></sub>∈<italic>V</italic><sub><italic>C</italic></sub> and considering each transcript <inline-formula id="IEq14"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$t_{i_{j}}$\end{document}</tex-math><mml:math id="M28"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq14.gif"/></alternatives></inline-formula> (the <italic>j</italic>th transcript in the equivalence class labeling vertex <italic>v</italic><sub><italic>i</italic></sub>). We compute the size (cardinality) of the largest arborescence that can be created starting from this node and using this label to cover the visited vertices. Let <inline-formula id="IEq15"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\phantom {\dot {i}\!}v_{i^{\prime }}, t_{i^{\prime }_{j^{\prime }}}$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msubsup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq15.gif"/></alternatives></inline-formula> be the vertex, transcript pair generating the largest arborescence, and let <inline-formula id="IEq16"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\phantom {\dot {i}\!}a\left (v_{i^{\prime }}, t_{i^{\prime }_{j^{\prime }}}\right)$\end{document}</tex-math><mml:math id="M32"><mml:mi>a</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msubsup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq16.gif"/></alternatives></inline-formula> be the corresponding arborescence. We now remove all of the vertices in <inline-formula id="IEq17"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\phantom {\dot {i}\!}a\left (v_{i^{\prime }}, t_{i^{\prime }_{j^{\prime }}}\right)$\end{document}</tex-math><mml:math id="M34"><mml:mi>a</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:msubsup><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:msub></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq17.gif"/></alternatives></inline-formula>, and all of their incident edges, from <italic>C</italic>, and we repeat the same procedure on the remaining graph. This process is iterated until all vertices of <italic>C</italic> have been removed. This procedure is guaranteed to select some positive order arborescence (i.e., an arborescence containing at least one node) in each iteration and hence is guaranteed to terminate after at most a linear number of iterations in the order of <italic>C</italic>.</p>
        <p>After computing a covering, each arborescence is labeled with a particular transcript. However, the selected transcript may not be the unique transcript capable of producing this particular arborescence starting from the chosen root node. We can compute, for each arborescence, the <italic>set</italic> of possible transcript labels that could have colored it (i.e., those in the intersection of the equivalence class labels for all of the vertices in the arborescence). If the cardinality of this set is 1, then only a single transcript is capable of explaining all of the UMIs associated with this arborescence. If the cardinality of this set is &gt; 1, then we need to determine if all transcripts capable of covering this arborescence belong to the same gene, or whether transcripts from multiple genes may, in fact, be capable of explaining the associated UMIs. In the former case, the count of pre-PCR molecules (i.e., distinct, deduplicated UMIs) associated with this uniquely selected gene is incremented by 1. In the latter case, the molecule associated with the arborescence is considered to potentially arise from any of the genes with which it could be labeled. Subsequently, an EM algorithm is used to distribute the counts between the genes. Note that other pipelines simply discard these gene-ambiguous reads and that both manners in which alevin attempts to resolve such reads (i.e., either by being selected via the parsimony condition or probabilistically allocated by the EM algorithm) are novel in the context of scRNA-seq quantification. The EM procedure we adopt to resolve ambiguous arborescences proceeds in the same manner as the EM algorithm used for transcript estimation in bulk RNA-seq data [<xref ref-type="bibr" rid="CR13">13</xref>], with the exception that we assume the probability of generating a fragment is directly proportional to the estimated abundance, rather than the abundance divided by the effective length (i.e., we assume that, in the tagged-end protocols used, there is no length effect in the fragment generation process).</p>
      </sec>
    </sec>
    <sec id="Sec15">
      <title>Tier assignment</title>
      <p>The alevin program also outputs a tier matrix, of the same dimensions as the cell gene count matrix. Within a cell, each gene is assigned one of four tiers. The first tier (assigned 0) is the set of genes that have no read evidence in this cell and are, therefore, predicted to be unexpressed (whether truly absent, or the effect of some dropout process). The rest of the tiers (1, 2, and 3) are assigned based on a graph induced by the transcript equivalence classes as follows: 
<list list-type="order"><list-item><p>All equivalence classes of size 1 are filtered out. The genes associated with the transcripts from these classes are assigned to tier 1.</p></list-item><list-item><p>For the remaining equivalence classes, of size &gt; 1 gene, a graph <italic>G</italic> is constructed. The nodes in <italic>G</italic> are transcripts, and two nodes share an edge if their corresponding transcripts belong to a single equivalence class.</p></list-item><list-item><p>All the connected components in <italic>G</italic> are listed, and the transcript labels on the nodes mapped to their corresponding genes. If any component contains a node whose gene has previously been assigned to tier 1, that gene and all other genes in this connected component are assigned to tier 2. Hence, tier 2 contains genes whose quantification is impacted by the EM algorithm (after the UMI deduplication).</p></list-item><list-item><p>Genes associated with the remaining nodes in the graph are assigned to tier 3. These are genes that have no unique evidence and do not share reads (or, in fact, paths in the equivalence class graph) with another gene that has unique evidence. Hence, the EM algorithm will distribute reads between these genes in an essentially uniform manner, and their estimates are uninformative. Their abundance signifies that some genes (at least 1) in this ambiguous family are expressed, but exactly which and their distribution of abundances cannot be determined.</p></list-item></list></p>
      <p>Alevin, optionally (using the —numCellBootstraps flag), also outputs bootstrap variance estimates for genes within each cell. These variance estimates could conceivably be used by downstream tools for dimensionality reduction, differential expression testing, or other tasks.</p>
    </sec>
    <sec id="Sec16">
      <title>Final whitelisting (optional)</title>
      <p>Many existing tools for whitelisting CBs, such as Cell Ranger [<xref ref-type="bibr" rid="CR3">3</xref>] and Sircel [<xref ref-type="bibr" rid="CR7">7</xref>] perform whitelisting only once. As discussed above, both tools rely on the assumption that the number of times a CB is observed is sufficient to identify the <italic>correct</italic> CBs, i.e., those originating from droplets containing a cell. However, as observed by Petukhov et al. [<xref ref-type="bibr" rid="CR8">8</xref>], there is considerable variation in sequencing depth per cell, and some droplets may contain damaged or low-quality cells. Thus, true CBs may fall below a simple knee-like threshold. Similarly, erroneous CBs may lie above the threshold. Petukhov et al. [<xref ref-type="bibr" rid="CR8">8</xref>] proposed that instead of selecting a single threshold, one should treat whitelisting as a classification problem and segregate CBs into three regions: high quality, low quality, and uncertain/ambiguous. Here, high quality refers to the CBs which are deemed to be definitely correct, and low quality are the CBs which are deemed to most likely not arise from valid cells. A classifier can then be trained on the high- and low-quality CBs to classify the barcodes in the ambiguous region as either high or low quality. We adopt this approach in alevin, using our knee method’s cutoff to determine the ambiguous region. Specifically, we divide everything above the knee threshold into two equal regions: high-quality valid barcodes (upper-half), denoted by <inline-formula id="IEq18"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {H}$\end{document}</tex-math><mml:math id="M36"><mml:mi mathvariant="script">ℋ</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq18.gif"/></alternatives></inline-formula>, and ambiguous barcodes (lower-half), denoted by <inline-formula id="IEq19"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {L}$\end{document}</tex-math><mml:math id="M38"><mml:mi mathvariant="script">ℒ</mml:mi></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq19.gif"/></alternatives></inline-formula>. Since the initial whitelisting procedure is very liberal in selecting a threshold, most of the recoverable, low-confidence CBs tend to reside in the ambiguous region, and to learn the low-quality region, we take <inline-formula id="IEq20"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$n_{l} = \max (0.2 \cdot \left |\mathcal {H}\right |, 1000)$\end{document}</tex-math><mml:math id="M40"><mml:msub><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>max</mml:mo><mml:mo>(</mml:mo><mml:mn>0.2</mml:mn><mml:mo>·</mml:mo><mml:mfenced close="|" open="|" separators=""><mml:mrow><mml:mi mathvariant="script">ℋ</mml:mi></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mn>1000</mml:mn><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="13059_2019_1670_Article_IEq20.gif"/></alternatives></inline-formula> barcodes just below the knee threshold.</p>
      <p>In the implementation of Petukhov et al.[<xref ref-type="bibr" rid="CR8">8</xref>], a kernel density estimation classifier was trained using features which described the number of reads per UMI, UMIs per gene, the fraction of intergenic reads, non-aligned reads, the fraction of lowly expressed genes, and the fraction of UMIs on lowly expressed genes. In addition, a maximum allowable mitochondrial read content was set for a CB to be classified as “high-quality.” Whilst these features enabled the authors to build a classifier which efficiently separated “high-quality” cells from “low-quality” cells, we believe it may be possible to improve this set of features. Specifically, most of these features would be expected to correlate with the number of reads or UMIs per CB. Thus, the classifier is biased towards attributes associated with higher read depth, when in fact one wants it to learn the feature attributes associated with high-quality cells. We therefore used a slightly different set of features, listed below, which we believe may better capture the differences between high- and low-quality cells. While these features work in general, they may not be suitable for all analyses and will have to be tweaked accordingly. We chose to use a naïve Bayes classifier to perform classification, since we observed no clear difference between multiple ML methods (not shown), and the naïve Bayes classifier yields classification probabilities which are easy to interpret. Our final set of whitelisted CBs are those classified as high confidence. 
<list list-type="order"><list-item><p>Fraction of reads mapped</p></list-item><list-item><p>Fraction of mitochondrial reads (optionally activated by —mRNA flag)</p></list-item><list-item><p>Fraction of rRNA reads (optionally activated by —rRNA flag)</p></list-item><list-item><p>Duplication rate</p></list-item><list-item><p>Mean gene counts post deduplication</p></list-item><list-item><p>The maximum correlation of gene-level quantification estimates with the high-quality CBs (optionally activated by –useCorrelation flag)</p></list-item></list></p>
    </sec>
    <sec id="Sec17">
      <title>Machine configuration and pipeline replicability</title>
      <p>10x v2 chemistry benchmarking has been scripted using CGATCore (<ext-link ext-link-type="uri" xlink:href="https://github.com/cgat-developers/cgat-core">https://github.com/cgat-developers/cgat-core</ext-link>). The full pipeline and analysis are performed using Stony Brook’s seawulf cluster with 164 Intel Xeon E5–2683v3 CPUs.</p>
      <p>For all analyses, the genome and gtf versions used for human datasets were GENCODE release 27, GRCh38.p10, and for mouse datasets were GENCODE release M16, GRCm38.p5. All transcriptome files were generated using these with “rsem-prepare-reference.”</p>
      <p><italic>Cell Ranger (v2.2.0):</italic> The following additional flags were used, as recommended by the Cell Ranger guidelines: —nosecondary —expect-cells NumCells, where NumCells is 10,000 for PBMC 8k and Neurons 9k, 5,000 for PBMC 4k, and 2,000 for Neurons 2k and Neurons 900.</p>
      <p><italic>Alevin (v0.13.0):</italic> Run with default parameters with the Chromium protocol and —keepDuplicates flags and the -lISR to specify strandedness. The mRNA and rRNA lists were obtained from the relevant annotation files and passed as input. Experiments on v1 chemistry can be run using the same flags but with the —gemcode protocol flag. Alevin also supports 10x v3 chemistry via the command-line flag —chromiumV3.</p>
      <p><italic>STAR (v2.6.0a):</italic> The following flag was used, as recommended by the guidelines of UMI-tools: —outFilterMultimapNmax 1</p>
      <p><italic>featureCounts (v1.6.3):</italic> This was run to obtain an output BAM file and with stranded input (-s 1).</p>
      <p><italic>UMI-tools (v0.5.4):</italic> The extract command was used to get the CBs/UMIs, when provided with an external CB whitelist and attach it to the corresponding reads. The following flags were used in the count command to obtain the per-cell gene count matrix: —gene-tag=XT —wide-format-cell-counts</p>
      <p><italic>DropEst (v0.8.5)</italic>: This was run with the default parameters on the 10x BAM files, and the predicted cell counts from Cell Ranger were used as input.</p>
      <p><italic>Dropseq utils (v2.0.0):</italic> All the commands were run as recommended by the authors in the tool’s manual.</p>
      <p>The bulk datasets were quantified using Bowtie2 and RSEM, run as follows:</p>
      <p><italic>Bowtie2 (v2.3.4.3):</italic> The following flags were used, as recommended in the guidelines of RSEM: —sensitive —dpad 0 —gbar 99999999 —mp 1,1 —np 1 —score-min L,0,-0.1 —no-mixed —no-discordant</p>
      <p><italic>RSEM (v1.3.1):</italic> Run with default parameters.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional file</title>
    <sec id="Sec18">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2019_1670_MOESM1_ESM.pdf">
            <label>Additional file 1</label>
            <caption>
              <p>Supplementary material for alevin efficiently estimates accurate gene abundances from dscRNA-seq data. Includes supplementary figures. (PDF 669 kb)</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p>Note that we were not able to run the dropEstr Bayesian correction method and the results presented are after running just the dropEst pipeline [<xref ref-type="bibr" rid="CR31">31</xref>].</p>
    </fn>
    <fn id="Fn2">
      <label>2</label>
      <p>We note that whether the majority of amplification occurs pre- or post-fragmentation can be protocol specific and can suggest different strategies for UMI deduplication. Here, we are primarily concerned with the 10X Chromium protocols, dominated by pre-fragmentation amplification. However, the method we propose for UMI deduplication can be applied to other protocols as well.</p>
    </fn>
    <fn>
      <p>
        <bold>Availability of data and materials</bold>
      </p>
      <p>Alevin is implemented in C++14 and is released under the GNU General Public License v3.0. The source code as used in the manuscript has been deposited in archived format at 10.5281/zenodo.2583275 [<xref ref-type="bibr" rid="CR39">39</xref>] and the latest code is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/COMBINE-lab/salmon">https://github.com/COMBINE-lab/salmon</ext-link> [<xref ref-type="bibr" rid="CR40">40</xref>]. The output quantification results of all the tools used in the validation of alevin-pipeline have been deposited in archived format at 10.5281/zenodo.2583228
[<xref ref-type="bibr" rid="CR41">41</xref>].</p>
      <p>All the single cell 10x datasets used in the paper are taken from <ext-link ext-link-type="uri" xlink:href="https://support.10xgenomics.com/single-cell-gene-expression/datasets">https://support.10xgenomics.com/single-cell-gene-expression/datasets</ext-link>
[<xref ref-type="bibr" rid="CR42">42</xref>] and the DropSeq data is from SRR1853180. The relevant accessions for the bulk RNA-seq datasets used for the validation are listed in Table <xref rid="Tab1" ref-type="table">1</xref>.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors would like to thank Fatemeh Almodaresi and Hirak Sarkar for useful discussions during the development of the alevin method, and would also like to thank Hirak Sarkar for his help in crafting Fig. <xref rid="Fig1" ref-type="fig">1</xref>. The authors would also like to thank Stony Brook Research Computing and Cyberinfrastructure, and the Institute for Advanced Computational Science at Stony Brook University for access to the high-performance SeaWulf computing system, which was made possible by a $1.4M National Science Foundation grant (#1531492).</p>
    <sec id="d29e2656">
      <title>Funding</title>
      <p>This work was supported by the US National Science Foundation (BIO-1564917, CCF-1750472, CNS-1763680), and the US National Institutes of Health (R01HG009937). This project has been made possible in part by grant number 2018-182752 from the Chan Zuckerberg Initiative DAF, an advised fund of Silicon Valley Community Foundation.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>AS, LM, IS, TS, and RP designed the method. AS and RP wrote the implementation of the methods. AS, LM, IS, TS, and RP designed the experiments and helped analyze the results. All of the authors helped to write the manuscript. All authors approved the final manuscript.</p>
  </notes>
  <notes notes-type="COI-statement">
    <sec>
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </sec>
    <sec>
      <title>Competing interests</title>
      <p>R.P. is a co-founder of Ocean Genomics, Inc. The other authors declare that they have no competing interests.</p>
    </sec>
    <sec>
      <title>Publisher’s Note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>Macosko EZ</collab>
          <collab>Basu A</collab>
          <collab>Satija R</collab>
          <collab>Nemesh J</collab>
          <collab>Shekhar K</collab>
          <collab>Goldman M</collab>
          <etal/>
        </person-group>
        <article-title>Highly parallel genome-wide expression profiling of individual cells using nanoliter droplets</article-title>
        <source>Cell</source>
        <year>2015</year>
        <volume>161</volume>
        <issue>5</issue>
        <fpage>1202</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2015.05.002</pub-id>
        <pub-id pub-id-type="pmid">26000488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>Klein AM</collab>
          <collab>Mazutis L</collab>
          <collab>Akartuna I</collab>
          <collab>Tallapragada N</collab>
          <collab>Veres A</collab>
          <collab>Li V</collab>
          <etal/>
        </person-group>
        <article-title>Droplet barcoding for single-cell transcriptomics applied to embryonic stem cells</article-title>
        <source>Cell</source>
        <year>2015</year>
        <volume>161</volume>
        <issue>5</issue>
        <fpage>1187</fpage>
        <lpage>201</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2015.04.044</pub-id>
        <pub-id pub-id-type="pmid">26000487</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zheng</surname>
            <given-names>GX</given-names>
          </name>
          <name>
            <surname>Terry</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Belgrader</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ryvkin</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bent</surname>
            <given-names>ZW</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Massively parallel digital transcriptional profiling of single cells</article-title>
        <source>Nat Commun</source>
        <year>2017</year>
        <volume>8</volume>
        <fpage>14049</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms14049</pub-id>
        <pub-id pub-id-type="pmid">28091601</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Svensson</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Natarajan</surname>
            <given-names>KN</given-names>
          </name>
          <name>
            <surname>Ly</surname>
            <given-names>LH</given-names>
          </name>
          <name>
            <surname>Miragaia</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Labalette</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Macaulay</surname>
            <given-names>IC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Power analysis of single-cell RNA-sequencing experiments</article-title>
        <source>Nat Methods</source>
        <year>2017</year>
        <volume>14</volume>
        <issue>4</issue>
        <fpage>381</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4220</pub-id>
        <pub-id pub-id-type="pmid">28263961</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Heger</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sudbery</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>UMI-tools: modeling sequencing errors in Unique Molecular Identifiers to improve quantification accuracy</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>3</issue>
        <fpage>491</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.209601.116</pub-id>
        <pub-id pub-id-type="pmid">28100584</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhao</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Levy</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Bartender: a fast and accurate clustering algorithm to count barcode reads</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>739</fpage>
        <lpage>747</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx655</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tambe</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Barcode identification for single cell genomics</article-title>
        <source>BMC Bioinformatics</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>32</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-019-2612-0</pub-id>
        <pub-id pub-id-type="pmid">30654736</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Petukhov</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Baryawno</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Severe</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Scadden</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Samsonova</surname>
            <given-names>MG</given-names>
          </name>
          <name>
            <surname>Kharchenko</surname>
            <given-names>PV</given-names>
          </name>
        </person-group>
        <article-title>dropEst: pipeline for accurate estimation of molecular counts in droplet-based single-cell RNA-seq experiments</article-title>
        <source>Genome Biol</source>
        <year>2018</year>
        <volume>19</volume>
        <issue>1</issue>
        <fpage>78</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-018-1449-6</pub-id>
        <pub-id pub-id-type="pmid">29921301</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tian</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Su</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Amann-Zalcenstein</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Biben</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Seidi</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>scPipe: a flexible R/Bioconductor preprocessing pipeline for single-cell RNA-sequencing data</article-title>
        <source>PLoS Comput Biol</source>
        <year>2018</year>
        <volume>14</volume>
        <issue>8</issue>
        <fpage>e1006361</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1006361</pub-id>
        <pub-id pub-id-type="pmid">30096152</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Srivastava</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sarkar</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Gupta</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Patro</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>RapMap: a rapid, sensitive and accurate tool for mapping RNA-seq reads to transcriptomes</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>12</issue>
        <fpage>i192</fpage>
        <lpage>i200</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw277</pub-id>
        <pub-id pub-id-type="pmid">27307617</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Sarkar</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Zakeri</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Malik</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Patro</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Towards selective-alignment: bridging the accuracy gap between alignment-based and alignment-free transcript quantification</article-title>
        <source>Proceedings of the 2018 ACM International Conference on Bioinformatics, Computational Biology, and Health Informatics. BCB ’18</source>
        <year>2018</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Turro</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Su</surname>
            <given-names>SY</given-names>
          </name>
          <name>
            <surname>Gonçalves</surname>
            <given-names>Â</given-names>
          </name>
          <name>
            <surname>Coin</surname>
            <given-names>LJ</given-names>
          </name>
          <name>
            <surname>Richardson</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lewin</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads</article-title>
        <source>Genome Biol</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>2</issue>
        <fpage>R13</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2011-12-2-r13</pub-id>
        <pub-id pub-id-type="pmid">21310039</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patro</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Duggal</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kingsford</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Salmon provides fast and bias-aware quantification of transcript expression</article-title>
        <source>Nat Methods</source>
        <year>2017</year>
        <volume>14</volume>
        <issue>4</issue>
        <fpage>417</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4197</pub-id>
        <pub-id pub-id-type="pmid">28263959</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dobin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Schlesinger</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Drenkow</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zaleski</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Jha</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>STAR: ultrafast universal RNA-seq aligner</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>1</issue>
        <fpage>15</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts635</pub-id>
        <pub-id pub-id-type="pmid">23104886</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Smyth</surname>
            <given-names>GK</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>featureCounts: an efficient general purpose program for assigning sequence reads to genomic features</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>30</volume>
        <issue>7</issue>
        <fpage>923</fpage>
        <lpage>30</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt656</pub-id>
        <pub-id pub-id-type="pmid">24227677</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Dewey</surname>
            <given-names>CN</given-names>
          </name>
        </person-group>
        <article-title>RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome</article-title>
        <source>BMC Bioinformatics</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>323</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-323</pub-id>
        <pub-id pub-id-type="pmid">21816040</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Robert</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Watson</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Errors in RNA-Seq quantification affect genes of relevance to human disease</article-title>
        <source>Genome Biol</source>
        <year>2015</year>
        <volume>16</volume>
        <issue>1</issue>
        <fpage>177</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-015-0734-x</pub-id>
        <pub-id pub-id-type="pmid">26335491</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Han</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Fei</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Sun</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lai</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mapping the mouse cell atlas by Microwell-seq</article-title>
        <source>Cell</source>
        <year>2018</year>
        <volume>172</volume>
        <issue>5</issue>
        <fpage>1091</fpage>
        <lpage>107</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2018.02.001</pub-id>
        <pub-id pub-id-type="pmid">29474909</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Richter</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Meurers</surname>
            <given-names>BH</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Medvedeva</surname>
            <given-names>VP</given-names>
          </name>
          <name>
            <surname>Chesselet</surname>
            <given-names>MF</given-names>
          </name>
        </person-group>
        <article-title>Neurons express hemoglobin <italic>α</italic>-and <italic>β</italic>-chains in rat and human brains</article-title>
        <source>J Comp Neurol</source>
        <year>2009</year>
        <volume>515</volume>
        <issue>5</issue>
        <fpage>538</fpage>
        <lpage>47</lpage>
        <pub-id pub-id-type="doi">10.1002/cne.22062</pub-id>
        <pub-id pub-id-type="pmid">19479992</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nakaya</surname>
            <given-names>HI</given-names>
          </name>
          <name>
            <surname>Wrammert</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>EK</given-names>
          </name>
          <name>
            <surname>Racioppi</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Marie-Kunze</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Haining</surname>
            <given-names>WN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Systems biology of vacination for seasonal influenza in humans</article-title>
        <source>Nat Immunol</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>8</issue>
        <fpage>786</fpage>
        <pub-id pub-id-type="doi">10.1038/ni.2067</pub-id>
        <pub-id pub-id-type="pmid">21743478</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grant</surname>
            <given-names>GR</given-names>
          </name>
          <name>
            <surname>Farkas</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Pizarro</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Lahens</surname>
            <given-names>NF</given-names>
          </name>
          <name>
            <surname>Schug</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brunk</surname>
            <given-names>BP</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparative analysis of RNA-Seq alignment algorithms and the RNA-Seq unified mapper (RUM)</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>18</issue>
        <fpage>2518</fpage>
        <lpage>2528</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr427</pub-id>
        <pub-id pub-id-type="pmid">21775302</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <mixed-citation publication-type="other">10x-Genomics Single-Cell 3’-V2 Kit. 2018. <ext-link ext-link-type="uri" xlink:href="https://teichlab.github.io/scg_lib_structs/data/CG000108_AssayConfiguration_SC3v2.pdf">https://teichlab.github.io/scg_lib_structs/data/CG000108_AssayConfiguration_SC3v2.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ntranos</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Kamath</surname>
            <given-names>GM</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>David</surname>
            <given-names>NT</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate single-cell RNA-seq analysis by clustering of transcript-compatibility counts</article-title>
        <source>Genome Biol</source>
        <year>2016</year>
        <volume>17</volume>
        <issue>1</issue>
        <fpage>112</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0970-8</pub-id>
        <pub-id pub-id-type="pmid">27230763</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mezlini</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Fiume</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Buske</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Savich</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Shah</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>iReckon: simultaneous isoform discovery and abundance estimation from RNA-seq data</article-title>
        <source>Genome Res</source>
        <year>2013</year>
        <volume>23</volume>
        <issue>3</issue>
        <fpage>519</fpage>
        <lpage>29</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.142232.112</pub-id>
        <pub-id pub-id-type="pmid">23204306</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patro</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mount</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Kingsford</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Sailfish enables alignment-free isoform quantification from RNA-seq reads using lightweight algorithms</article-title>
        <source>Nat Biotechno</source>
        <year>2014</year>
        <volume>32</volume>
        <issue>5</issue>
        <fpage>462</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2862</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bray</surname>
            <given-names>NL</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Melsted</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Near-optimal probabilistic RNA-seq quantification</article-title>
        <source>Nat Biotechnol</source>
        <year>2016</year>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>525</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3519</pub-id>
        <pub-id pub-id-type="pmid">27043002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>RNA-Skim: a rapid method for RNA-Seq quantification at transcript level</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>12</issue>
        <fpage>i283</fpage>
        <lpage>i92</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu288</pub-id>
        <pub-id pub-id-type="pmid">24931995</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Ju</surname>
            <given-names>CJT</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>JY</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>Fleximer: accurate quantification of, RNA-Seq via variable-length k-mers</article-title>
        <source>Proceedings of the 8th ACM International Conference on Bioinformatics, Computational Biology, and Health Informatics. ACM-BCB ’17</source>
        <year>2017</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bernáth</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pap</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <source>Covering minimum cost arborescences</source>
        <year>2011</year>
        <publisher-loc>Budapest</publisher-loc>
        <publisher-name>Egerváry Research Group</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <mixed-citation publication-type="other">Pipeline for initial analysis of droplet-based single-cell RNA-seq data. 2018. <ext-link ext-link-type="uri" xlink:href="https://github.com/hms-dbmi/dropEst">https://github.com/hms-dbmi/dropEst</ext-link>. Accessed: 19 Oct 2018.</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Poldrack</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Laumann</surname>
            <given-names>TO</given-names>
          </name>
          <name>
            <surname>Koyejo</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Gregory</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hover</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>MY</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Long-term neural and physiological phenotyping of a single human</article-title>
        <source>Nat Commun</source>
        <year>2015</year>
        <volume>6</volume>
        <fpage>8885</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms9885</pub-id>
        <pub-id pub-id-type="pmid">26648521</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dvinge</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ries</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Ilagan</surname>
            <given-names>JO</given-names>
          </name>
          <name>
            <surname>Stirewalt</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Meshinchi</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bradley</surname>
            <given-names>RK</given-names>
          </name>
        </person-group>
        <article-title>Sample processing obscures cancer-specific alterations in leukemic transcriptomes</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2014</year>
        <volume>111</volume>
        <issue>47</issue>
        <fpage>16802</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1413374111</pub-id>
        <pub-id pub-id-type="pmid">25385641</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bouquet</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Soloski</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Swei</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cheadle</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Federman</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Billaud</surname>
            <given-names>JN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Longitudinal transcriptome analysis reveals a sustained differential gene expression signature in patients treated for acute Lyme disease</article-title>
        <source>MBio</source>
        <year>2016</year>
        <volume>7</volume>
        <issue>1</issue>
        <fpage>e00100</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1128/mBio.00100-16</pub-id>
        <pub-id pub-id-type="pmid">26873097</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Lu Bu</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Lu</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Ge</surname>
            <given-names>Q</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Screening effective differential expression genes for hepatic carcinoma with metastasis in the peripheral blood mononuclear cells by RNA-seq</article-title>
        <source>Oncotarget</source>
        <year>2017</year>
        <volume>8</volume>
        <issue>17</issue>
        <fpage>27976</fpage>
        <pub-id pub-id-type="doi">10.18632/oncotarget.15855</pub-id>
        <pub-id pub-id-type="pmid">28427195</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36</label>
      <mixed-citation publication-type="other">Schmitt BM, Rudolph KL, Karagianni P, Fonseca NA, White RJ, Talianidis I, et al.High-resolution mapping of transcriptional dynamics across tissue development reveals a stable mRNA–tRNA interface. Genome Res. 2014:gr–176784.</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saito</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Miranda-Rottmann</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ruggiu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>CY</given-names>
          </name>
          <name>
            <surname>Fak</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Zhong</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>NOVA2-mediated RNA regulation is required for axonal pathfinding during development</article-title>
        <source>Elife</source>
        <year>2016</year>
        <volume>5</volume>
        <fpage>e14371</fpage>
        <pub-id pub-id-type="doi">10.7554/eLife.14371</pub-id>
        <pub-id pub-id-type="pmid">27223325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR38">
      <label>38</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fratta</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Sivakumar</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Humphrey</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lo</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ricketts</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Oliveira</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Mice with endogenous TDP-43 mutations exhibit gain of splicing function and characteristics of amyotrophic lateral sclerosis</article-title>
        <source>EMBO J</source>
        <year>2018</year>
        <volume>37</volume>
        <issue>11</issue>
        <fpage>e98684</fpage>
        <pub-id pub-id-type="doi">10.15252/embj.201798684</pub-id>
        <pub-id pub-id-type="pmid">29764981</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39</label>
      <mixed-citation publication-type="other">Srivastava A, Malik L, Smith T, Sudbery I, Patro R. Alevin efficiently estimates accurate gene abundances from dscRNA-seq data: source Code: Zenodo; 2019. Available from: <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/2583275">https://zenodo.org/record/2583275</ext-link>. Accessed 4 Mar 2019.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40</label>
      <mixed-citation publication-type="other">Srivastava A, Malik L, Smith T, Sudbery I, Patro R. Alevin efficiently estimates accurate gene abundances from dscRNA-seq data: github; 2019. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/COMBINE-lab/salmon">https://github.com/COMBINE-lab/salmon</ext-link>. Accessed 4 Mar 2019.</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41</label>
      <mixed-citation publication-type="other">Srivastava A, Malik L, Smith T, Sudbery I, Patro R. Alevin efficiently estimates accurate gene abundances from dscRNA-seq data: data: Zenodo; 2019. Available from: <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/2583228">https://zenodo.org/record/2583228</ext-link>. Accessed 4 Mar 2019.</mixed-citation>
    </ref>
    <ref id="CR42">
      <label>42</label>
      <mixed-citation publication-type="other">10x-Genomics v2 Chemistry Data. 2018. <ext-link ext-link-type="uri" xlink:href="https://support.10xgenomics.com/single-cell-gene-expression/datasets">https://support.10xgenomics.com/single-cell-gene-expression/datasets</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
